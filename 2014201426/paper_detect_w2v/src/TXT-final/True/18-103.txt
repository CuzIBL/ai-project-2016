 
     an associative processor for theorem proving in f i r s t order logic is described. it. is designed on the basis of the deduction plan method  introduced by cox and pietrzykowski . the main features of this method are the separation of unification from deduction and the incorporation of a method for i n t e l l i g e n t backtracking- this kind of backtracking is based on a special unification procedure. an improved version of this unitization procedure is given  which outputs a unification graph with c on straints. in the case of a unification c on f i i c t   sufficient in f: o nnation for a di re c ted backtracking step can be gained f r om the u n i f i e s t i o n g r a p h. according t o the deduction plan method  the assip-t memory consists of two parts  one for the deduction plan and the other for the unification graph. assip-t can perform de-
duction and unification in p a r a l l e l . both m e m o ry parts consist of. a set of subparts each of which keeps the information about clauses or terms  respectively. a subpart is a 1i n e a r a r r ay of cells pr o v i d e d with a control u n i t a nd can be re g a rd e d as a subprocessor. 
	1 . 	in production 
     the progress of microelectronics allows the realizations of more and more powerful 
processors for special purposes. one such type of processors is the associative processor. its associative memory allows content oriented parallel access to the data stored in i t . this makes the associative processors well suited for pattern handling processes. in a r t i f i c i a l i n t e l ligence e.g.  most processes are pattern 
directed deductions. one of it is theorem proving. in this paper a model of an associative processor is described which is able to prove theorems of f i r s t order logic. it is designed on the basis of the deduction plan method  i.e. it incorporates a method for i n t e l l i g e n t backtracking. 
     after some basic definitions in the second section  the deduction plan method is described. the special unification procedure used within this method follows. the output of this procedure is a unificahans-albert schneide r 
computer science department 
university of kaiserslautern 
postfach 1 1 
d-1 kaisorslautern 


     the deduction plan method is a resolution based method  i.e. a refutation method. it starts with a set of clauses and tries to construct a  closed  and  correct  deduction plan. if it succeeds  the clause set is proved to be unsatisfiable. the central idea of the method is to separate deduction from unification. this allows the application of a special unification algorithm which  in the case of a unification conflict  not simply stops with failure  rather it yields information about the causes of unification conflicts  namely certain deduction steps  which then can be reset. in section 1 this way of 
processing is called  intelligent backtracking   . 
     the nodes of the deduction plan are the input clauses and eventually variants of them. two clauses can be connected by an edge if they contain literals with the same precidate symbol but different signs 
 negated or not negated . therefore a  labelled  edge between two clauses cl and cl1 is a triple  cl1  t u v   cl1     
where u and v are literals in cl1 and cl1 respectively  satisfying the condition on their predicate symbols and negation signs  t is the type of the edge. there are two types of edges: sub and red. all edges are of type sub except those refering backward to a clause which is already in use. if each literal in each clause included in the plan occurs in an edge  the deduction plan is closed. if the set 
w. dilger and h.-a. schneider 1 
of pairs of torms arising f r o m t h e pairing of literals by edges is uniliable  the deduction plan is correct. cf. for this section  cox and pietrzykowski 1  a n d  cox and pietrzykowski 1 . def in ition 

type of the edge e  a the starting literal and v the target literal. a literal u of a clause cl is called key literal iff there is an incoming edge with type sub and target literal u. each literal u of a clause cl is called a sub problem iff it is not a key literal. a subproblem u e cl is open iff there is no outcoming edge with starting literal u. a subproblem u is called closed iff it is no t. o pen . o s  g  1 s the set of open subproblems of a deduction graph g. g is called closed  iff os g  - 1. a node cl is called predecessor of a node cl .  iff there is a path from cl to cl r  which contains only edges of type 
sub  sub-path . if u is the starting l i teral of the first edge of a sub-path from cl to cl1   then u is called preceding literal of cl1 and cl1 is called successor of c 1 . 
     we omit the definition of the deduction plan here. it is a deduction graph which is constructed by a number of deduction steps  i.e. edge drawing steps  starting from a basic plan which consists of one node only. 

is a set of eight input clauses. figure 
1 shows a closed deduction plan for s. the edges are drawn in such a way that they begin beyond the starting literal and point to the target literal. therefore they are only labelled by their type and  beyond it  by the numbers of the steps in the plan construction within which the edges were drawn. the literals 

and -r x1  are key literals  the other literals are subproblems. the first clause in s is the basic node  it is a predecessor 

1 w. dilger and h.-a. schneider 


the edges in the uwc arc labelled by {c }. 
at the end of the transformation step the uwc has the form represented in figure j. 
the 	sorting 	step 
the transformation step classifies the nodes of uwc in such a way that two nodes 
be 1 o n g to the s ame c 1 a s s i f f the re is a connection between them. in the example above we have four classes. in the sorting 
s t e p   f i r s t a gr aph u i s c o n s t r u c t e d w h i c h 
c o n sists of these classes as nodes and which has a directed edge labelled by f from class x to class y i f f there is a 
term f p   . . .   p   in x and an expression 
p    i f  { 1   . . .  n    in y. 

w. dilger and h.-a. schneider 1 
by 1. so we get the complete uwc of figure 
1 . 
     soundness and completeness of the unification algorithm are proved in  dilger and j a n s o n 1 . the main theorem i s : a constraint set c is unifiable i f f all terms in uwc which are connected by a simple connection begin with the same function symbol and uwc contain s n o s i ra p1e 1o o p s. 
     thus  e.g.  our example constraint set is not uni fi able because the uwc of figure r
  contains a simp 1 e 1 oop . 
	s. 	in t e l l i g c n t b a ckt r acking 


this graph is shown for the example in figure 1. now the edges of u which belong to a cycle are added to the uwc as edges between the appropriate nodes and labelled consider the deduction plan of section 1  represented in figure 1. following the edges according to their numbers we get the constraints 

1 w. dilgerand h.-a. schneider 
¡¡¡¡backtracking is performed as follows. take f or the backtracking step mes = {s} 
edge number fj and node -s a  are removed a s s o c i from the plan. thereby  the l i t e r a l s x.  t w o f u rther steps to parallel processing: be comes an open subprobleni. but there o n e by the parallel treatment of dedue-

w. dilger and h.-a. schneider 1 


1 w. dilger and h.-a. schneider 
in practice  but we have to work out another representation of the edges. by means of several head control-subcontrolgroups  we should be able to perform 1rparallel as well as and-parallel processing due to the separation of deduction and unification. 
