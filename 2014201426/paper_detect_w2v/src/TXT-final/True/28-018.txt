 
unfailing completion is a commonly used technique for equational reasoning. for equational problems with associative and commutative functions  unfailing completion often generates a large number of rewrite rules. by comparing it with a ground completion procedure  we show that many of the rewrite rules generated are redundant. a set of consistency constraints is formulated to detect redundant rewrite rules. we propose a new completion algorithm  consistent unfailing completion  in which only consistent rewrite rules are used for critical pair generation and rewriting. our approach does not need to use flattened terms. thus it avoids the double exponential worst case complexity of ac unification. it also allows the use of more flexible termination orderings. we present some sufficient conditions for detecting inconsistent rewrite rules. the proposed algorithm is implemented in prolog. 
1 	introduction 
knuth-bendix completion  knuth and bendix  1  and its extensions  bachmair et a/.  1  have been widely used for equational reasoning. one of the main bottlenecks of completion-based inference strategies is the large number of critical pairs generated. this is particularly evident when dealing with equational problems involving associative and commutative functions  i.e. ac equational problems. in this paper  we present a technique for reducing redundant equational inferences using constraints. 
　ac equational problems represent an important class of problems in theorem proving. many mathematical functions of interest are associative and commutative. for example  the union and intersection operations in set theory and the addition operations in ring structures are all associative and commutative. furthermore  addition and multiplication in arithmetic are both ac. some form of ac equational reasoning is necessary if a term rewriting system is used to perform integer arithmetic. 
1 	automated reasoning 
　ac equational reasoning is often difficult. one of the most recognized recent successes of automated reasoning  perhaps of al in general  is the solution of the robbins problem. the robbins problem is in fact formulated as an equational problem with ac functions  mccune  1 . most term rewriting systems do inferences by generating rewrite rules using knuth-bendix completion or unfailing completion. associativity axioms and commutativity axioms often cause an explosion of new rewrite rules in the completion process. when overlapped with the ac axioms  an existing rewrite rule can generate an exponential number of ac equivalent rewrite rules. since commutativity axioms cannot be oriented in any termination ordering  many of these new rewrite rules generated from the ac axioms cannot be simplified. 
　special completion procedures are developed to handle ac equational problems  lankford and ballantyne  1; peterson and stickel  1 . most of the approaches in the literature use flattened terms. for example  + a + 1 c   is represented as + a b c   and terms + a c  b  and + a b  c  are considered identical. a flattened term represents all terms equivalent up to the ac axioms. since flattening breaks the original term structure  special unification techniques are needed. ac unification algorithms  stickel  1; domenjoud  1; boudet et a/.  1  are developed to compute all possible most general unifiers of two terms up to associativity and commutativity axioms. special ac termination orderings are also needed to show termination of ac rewriting systems. many commonly used orderings  such as recursive path ordering and lexicographic path ordering  are no longer well founded when flattened terms are used. several ac termination ordering have been devised 
 dershowitz et a/.  1; bachmair and plaisted  1; kapur et a/.  1 . 
　we study the problem of ac equational reasoning with a different approach. we propose a procedure called consistent unfailing completion in which only consistent rules and equations are used for critical pair generation and rewriting. a consistent unfailing completion procedure can be regarded as the lifted version of a ground completion procedure. in a standard unfailing completion procedure  some rewrite rules do not correspond to 


	plaisted & zhu 	1 

1 	automated reasoning 


	plaisted & zhu 	1 

1 	test examples 
it is fairly straightforward to implement the consistent unfailing completion algorithm. we implemented the algorithm with several hundred lines of prolog code. we tested a number of pure equality problems. the results are listed in table 1. 
   e1-e1 is a set of benchmark problems for equality proposed by  lusk and overbeek  1 . e1 and e1 involve ac functions. wos1  equality version   rng1  rng1 and rng1 are problems from ring theory  all four of them involve ac functions. for non-ac problems  the procedure is same as unfailing completion. for ac problems  we study the effect of consistency checking by comparing the result from unfailing completion and consistent unfailing completion. note that consistency checking significantly reduces the number of critical pairs generated  the number of rules kept and the time needed to obtain a proof. our implementation serves the purpose of demonstrating the effect of consistency checking. a state of the art equality prover can solve most of the listed problems in tens of seconds mccune  1 . efficient data structures can be used to improve our current implementation. 
1 	automated reasoning 
1 	discussion 
in term rewriting systems with ac functions  a term can have an exponential number of ac equivalent terms  and a rewrite rule can generate an exponential number of new rules when combined with ac axioms for critical pairs generation. a common approach for avoiding the combinatorial explosion is to represent all ac equivar lence terms as a single term. flattened terms are used to represent terms equivalent up to associativity  and terms with arguments permuted are considered identical. ac unification algorithm is used to unify two flattened terms. flattening breaks the well-foundedness of most termination orderings. special ac termination orderings are needed to handle flattened terms. 
　on the other hand  the combinatorial explosion occurs only because all ac equivalent terms of a term are kept in a rewriting system. if they are simplified to a single normal form  the explosion will not occur. this is exactly the case for ground completion procedures: all ground ac equivalent terms can be rewritten to a normal form using ac axioms when a total termination ordering on ground terms is used. our approach is based 

on the observation that a nonground completion procedure can be constructed by lifting a ground completion procedure  and thus avoid much of the redundancy in representing ac equivalent terms. our approach does not need a special ac unification. it does not need a 
special ac termination ordering either. the latter facilitates the complete automation of the equational reasoning process. we used a single termination ordering for all of our test examples. we were also able to use the equational prover as a component in a general first order theorem prover. 
　there are some previous works on reducing unnecessary equational inferences  both for ac equational problems and equational problems in general zhang and kapur  1; bachmair et a/.  1 . most of them are fundamentally different from our approach. they reduce the number of critical pairs generated by blocking out certain positions for overlapping two rewrite rules. some of these works might be combined with our approach. it would also be interesting to study the applicability of our approach to other equational theories. 
