 
a formal framework for specifying and developing agents/robots must handle not only knowledge and sensing actions  but also time and concurrency. researchers have extended the situation calculus to handle knowledge and sensing actions. other researchers have addressed the issue of adding time and concurrent actions. here both of these features are combined into a uni뫩ed logical theory of knowledge  sensing  time  and concurrency. the result preserves the solution to the frame problem of previous work  maintains the distinction between indexical and objective knowledge of time  and is capable of representing the various ways in which concurrency interacts with time and knowledge. furthermore  a method based on regression is developed for solving the projection problem for theories speci뫩ed in this version of the situation calculus. 
1 	introduction 
the aim of this paper is to develop a uni뫩ed approach for axiomatizing the interaction of knowledge  sensing  time  and concurrency. actions have preconditions which may include knowledge preconditions. sensing actions alter knowledge. the knowledge produced depends upon the relative time at which sensing actions occur and also whether or not other sorts of actions occur concurrently. all of this interacts with the agent's evolving knowledge of time. 
모consider a robot gathering knowledge about its environment. it moves about while concurrently panning the camera and at various points senses the environment for the presence of objects with various characteristics. the knowledge obtained through sensing  positions of objects of various sizes  shapes and colors  depends upon the position of the robot at a particular point in time  the angle of the camera  etc. for many purposes  the results of sensing actions that occur at the same time are important. not only do we have the need for two distinct concurrent sensing actions in binocular stereopsis  but also in the simultaneous use of other features such as texture gradients and shading to achieve knowledge of depth relationships. here it is relative  not absolute time  that is important. 
모furthermore  speci뫩cation of an agent's ability to achieve a goal in general involves requiring that the agent know what to do to arrive at a goal state  moore  1; lesperance et al  1 . as the ability to achieve particular goals will often involve the ability to perform concurrent actions  the integration of knowledge and concurrency is an important step in fully formalizing these aspects of ability. 
모we develop our framework within the situation calculus - a 뫩rst-order formalism for representing and reasoning about the effects of actions. the language is based upon the dialect of the situation calculus used in the cognitive robotics group at the university of toronto. certainly  another formalism could have been used. within a.i. numerous varying formalisms are available for nrepresenting and reasoning about action  to name a few   shanahan  1; baral et al  1  . knowledge has been incorporated into a number of these  for example   lobo et al  1; thielscher  1  . outside of a.i. proper  there is also  fagin et al  1  on the interaction of knowledge and time. 
모but by working in the situation calculus  we are able to extend previous work on reasoning  by regression and theorem proving  to cover the language developed here as well. furthermore  our work is suitable to be incorporated into the robot programming languages golog and congolog. it can then be used to specify agents that must reason about the interactions of time  knowledge  and concurrent actions  including sensing actions . 
모the situation calculus  mccarthy and hayes  1  is a language for modeling dynamically changing worlds. changes to the world are the results of actions  while possible world histories consisting of sequences of actions are represented by situations. the situation calculus can be used for agent planning via goal regression. reiter  reiter  1  proposed a simple solution to the frame problem  an approach to axiomatization within the situation calculus. although this approach to the frame problem requires certain simplifying assumptions  it has proven to be useful and is the foundation for both goal regression and the programming language golog. goal regression was extended by scherl and levesque scherl and levesque  1  to apply to an agent who can sense properties of the external world  e.g.  read numbers on a piece of paper or determine the shape of an object . 

reasoning about actions and change 	1 

모this paper1 combines and extends the work of scherl and levesque  scherl and levesque  1  incorporating the model of concurrency and time presented by reiter  renter  1 . at the same time  reiter's simple solution to the frame problem is preserved. the real difficulty is to perform the synthesis in such a way that the important distinction between indexical and objective time  lesperance and levesque  1  is preserved. 
모if the agent currently knows the absolute time  then he knows the absolute time after executing an action. but if he doesn't know the absolute time  then he only knows that he began executing the action some number of time units ago  unless of course he reads a clock. while maintaining these properties  the results presented here allow the representation of the various ways in which actions  including sensing actions and possibly other concurrent actions  interact with time and knowledge. the method of regression is also extended to work with this augmented language. 
모section 1 gives a quick introduction to the situation calculus and section 1 does the same for the foundational axioms. the representation of knowledge and sensing actions are covered in section 1. concurrency is integrated into the framework in section 1. section 1 covers some additional constructs of the language and illustrates their representational power. a number of properties of the formulation are discussed in section 1. regression is covered in section 1. finally  section 1 is the conclusion. 
1 	situation calculus and the frame problem 
space does not permit a full exposition of the background material on the situation calculus. the framework developed in  reiter  1  is followed and full details may be found there or in  scherl  1 . we assume that the frame problem has been handled by utilizing successor state axioms. 
1 	foundational axioms 
following  lin and reiter  1; reiter  1  the foundational axioms for the situation calculus are utilized. these axioms provide us with a definition of s which says that there is a sequence of zero or more executable actions that move from situation s to situation s'. again  space does not permit full development of this material here. full details may be found in  reiter  1; scherl  1 . 
1 an epistemic 'fluent 
scherl and levesque  scherl and levesque  1  adapt the standard possible-world model of knowledge to the situation calculus  as 뫩rst done by moore  moore  1 . informally  one can think of there being a binary accessibility relation over situations  where a situation s' is understood as being accessible from a situation s if as far as the agent knows in situation s  he might be in situation s'. so something is known in s if it is true in every s' accessible from s  and conversely something is not known if it is false in some accessible situation. 
   'an earlier version of some of this work has appeared in  zimmerbaum and scherl  1 . 
모to treat knowledge as a 뫧uent  they introduce a binary relation k read as is accessible from s  and treat it the same way we would any other auent. in other words  from the point of view of the situation calculus  the last argument to k is the official situation argument  expressing what is known in situation s   and the 뫩rst argument is just an auxiliary like the in broken 1 
모the notation knows p now  s   read as p is known in situation s  can then be introduced as as an abbreviation for a formula that uses k. for example 

the special indexical now is instantiated with a situation variable upon expansion. 
모the approach also handles actions that make known the denotation of a term. for this case  one needs the notation kref t now   s  de뫩ned as follows: 

모in general  there may be many knowledge-producing actions  as well as many ordinary actions. to characterize all of these  we have following the presentation in  scherl and levesque  1   a function sr  for sensing result   and for each action a  a sensing-result axiom of the form: 
		 1  
this result is  yes  if  q  is true and  no  otherwise. the symbols are given in quotes to indicate that they are not ents. the sensing result function for senseq is axiomatized as follows: 
		 1  
모for ordinary actions  the sr result is always the same  with the sped  result not being signi뫩cant. for example  we could have: 
		 1  
모in the case of a re a action that makes the denotation of the term known  we would have: 
 1  
therefore  has the same denotation in all worlds s  such that and so kref do rea s   
모the form of the successor state axiom for k without concurrency is as follows: 
 1  
the relation k at a particular situation do is completely determined by the relation at s and the action 

1 	reasoning about actions and change 

1 	concurrency 
as originally de뫩ned in the situation calculus  mccarthy and 
hayes  1   actions had to occur sequentially  with one action completed before another could begin. furthermore  there was no facility to deal with the continuous passage of time. this contrasted with other formalisms such as the event calculus which could naturally handle concurrent actions and continuous time. 
1 	concurrency with knowledge 
the work of pinto  pinto  1  and reiter  reiter  1  proposed an approach to dealing with concurrency  natural actions and continuous time while still maintaining the solution to the frame problem. reiter  reiter  1  de뫩ned a new sort concurrent  sets of simple actions. variables represent the sort actions and  represent the sort concurrent. in reiter's notation  the time of an action's occurrence is the value of that action's temporal argument. thus an action has the form a and for each action an axiom of the form time is required to indicate the time of the action. 
모concurrent actions are sets of ordinary actions that are taken to represent instantaneous acts. an action with duration is represented by two instantaneous actions - a start action and an end action. additionally  the foundational axioms are modi뫩ed to rule out the possibility of prior actions having later times. 
so if we want to represent a pressing action with duration 
 as in pressing a button that keeps a light on   the approach is to de뫩ne two actions; startpress and endpress. we also must introduce a auent pressing. the needed successor state axiom is as follows: 
		 1  
this approach to representing actions with duration is something that we make use of here. 
모but  the use of a temporal argument for actions is problematic in the presence of knowledge. given our successor state axiom for k  it would require the agent to know the time after any action  even if it was unknown in the previous situation. to avoid this  we can not represent time as an argument to the instantaneous actions. 
모instead  we represent the instantaneous actions and associated times as a tuple of the form with functions action and time de뫩ned  returning the rst and second elements of the tuple: 
 1  
 1  
these pairs  represented by variables are elements of the sort action-time pairs. concurrent actions are now a set of such tuples. the sort action contains actions without a temporal argument. 
we also have the following 
		 1  
which is needed to relate the time of the action/time pair to the start of a situation. there may also be an axiom giving the start time of the initial situation so. we also de뫩ne a variant notation: 
		 1  
모we adopt  without signi뫩cant change  reiter's requirement that concurrent actions be coherent  that is there is at least one action-time pair in the collection  and the time of all pairs in the collection is the same: 

a set of action-time pairs are coherent if each of them have the same time component. 
모the de뫩nition of time can readily be extended to sets of concurrent actions and this allows us to de뫩ne the function start of a situation resulting from the execution of a concurrent action. 

모the predicate poss c  $  means that it is possible to execute concurrent action c in situation .s. 

if it is possible to execute a concurrent actions  then it is coherent and each of the simple actions is possible. 
모we implicitly assume an additional sort ranging over time points which can be integers  rationals or reals; depending on how one wants to model time. the standard arabic numerals are used to represent time points. additionally  the symbols for addition and subtraction are interpreted as the usual operations on numbers  integers  reals etc.  
1 	precondition interactions 
we need to be able to conclude when a particular concurrent action c is possible in a situation c in order for the machinery being developed in the rest of this paper to work. unfortunately  sentence 1 does not suffice. the conditional can not be changed to a biconditional because of the precondition interaction problem  pinto  1; 1 . 
모this issue needs to be handled by the axiomatizer of the domain. for example  the axiomatizer might provide the following axiom: 

reasoning about actions and change 	1 as discussed in  pinto  1; 1   the axiomatization of precint is domain dependent and can be done at increasing levels of detail. 
모for the purposes of this paper  the point here is that whatever solution is used for the precondition interaction problem in the ordinary situation calculus carries over to the case of knowledge and sensing. 
1 successor state axiom for k with concurrency 
the successor state axiom for k using concurrency can be stated in several alternative ways depending on what conditions one wishes to apply regarding the agent's knowledge of time. we continue to require that the relation k at a particular situation do     s  is completely determined by the relation at * and the set of concurrent actions c. 
모the following successor state axiom models an agent who knows how much time is passing1. this is an agent who has an accurate clock. 

 after executing a set of concurrent actions c in situation s  as far as the agent knows  it could be in a situation is the result of performing in some previously accessible situation  provided that is possible in and that s' is identical to s in terms of what is being sensed. furthermore  it is required that the concurrent action being performed in all situations accessible from .s be identical to in terms of the individual actions that make up the set. 
모note that it is not required that the time of the actions in all the accessible situations be identical. if this were the case  it would force the agent to know the objective time after executing any action. rather  it is only required that the difference between the start of the current situation and the start of the previous situation be the same in all accessible situations  including the actual situation . this requirement does ensure that the agent knows how much time is passing  but the ob-
jective time is only known if it was known before the action 
has occurred. 
1 	concurrency and sensing 
one can readily imagine cases of sensing actions where the desired result of sensing  knowing whether or not some proposition holds  depends upon some other action occurring concurrently. for example  the light needs to be turned on while the camera is clicked. if the light is off  then sensing produces no knowledge. 
모consider representing  the requirement that the light switch be pressed while sensep occurs for the knowledge of whether or not p holds to result from the execution of senskp. we need to de뫩ne a predicate scond. 
	scond shnsep cs  = pressing s  	 1  
모now the successor state axiom for k needs to be modi뫩ed to include scond as well. 

 for every action an appropriate scon axiom needs to be written. for most actions  the action is simply: 
		 1  
1 	the language and examples 
1 	further constructs 
wc need some way to refer to the current time without specifying the value of the current time. to achieve this we use the special indexical term now. upon expansion the term is replaced with the appropriate situation term. so  start now  can be used to refer to the current time. here we illustrate by 
example. the agent's knowing the objective time is expressed as know  start  now  
모we augment our language with a number of additional expressions. these are based on ideas developed by lesperancc and levesque  lesperance and levesque  1  and require the use of the notion of precedence of situations as de뫩ncd earlier. note that we distinguish between the relation on integers used to represent time points and the relations on situations as de뫩ned in the foundational axioms for the situation calculus. 
모the macro happened is introduced to allow one to talk about an action occurring at a particular time point. 

      1  it speci뫩es that an action occurred prior to s and it was time t at some point during the action's duration. 
모the macro wasat is introduced to allow one to assert that a 뫧uent was true at a particular point in time. 
1 	reasoning about actions and change it speci뫩es that p held at s' and was the time of ceded t and no other situation after s' preceded introduce another special indexical then which is needed to ensure that the correct situation is substituted into the situation argument of the predicate which is the middle argument to wasat. 
1 	properties of the formulation 
first of all  we show that the distinction between indexical and objective time is preserved. 
even if agents do not know the objective time  they do know how much time has passed since the last occurrence of a particular action or the last time at which a particular nuent was true. 
proposition 1  knowledge of indexical time 1  

proposition 1  knowledge of indexical time 1  for every 

additionally  the crucial results of  scherl and levesque  1  carry over to the case considered here. these include 
proposition 1  default persistence of ignorance  for an action a and a situation s  if-iknows p  s  holds and the axiomatization entails and 

then 
-iknows p  do a  s   
holds as well. 
proposition 1  knowledge incorporation  for 
knowledge-producing action 	or the negation 
of v   o r the negation of 뫧uent p  and situation a  if the axiomatization entails and also 

and 
knows 
hold  then 
knows 
holds as well. 
proposition 1  memory  for all p and situations .s  if knows p  s  holds then knows holds as long 
as the axiomatization entails 

these results ensure that actions only affect knowledge in the appropriate way. 
1 	reasoning 
a regression operator is de뫩ned relative to a set of successor state axioms space limitations here only allow a 
is 
1 	regression operators 
the regression operator 1z is de뫩ned relative to a set of successor state axioms the 뫩rst four parts of the de뫩nition of the regression operator concern ordinary  i.e. not knowledge-producing  actions  reiter  1 . they are exactly the same as those in  reiter  1 . additionally  it is necessary to correctly regress the equality predicate as discussed in  scherl and levesque  1; reiter  1 . 
모additional steps are needed to extend the regression operator to knowledge-producing actions. two de뫩nitions are needed for the speci뫩cation to follow. when is an arbitrary sentence and s a situation term  then is the sentence that results from instantiating every occurrence of now in with s'. the reverse operation is the result of instantiating every occurrence of s' in with now. 
모step v covers the case of regressing the knows operator through a non-knowledge-producing action. step vi covers the case of regressing the knows operator through a knowledge producing action. in the de뫩nitions below   s' is a new situation variable. 
v. whenever c does not contain a knowledge-producing action  
모the special function trans replaces c with a that has the identical action in each of the action-time pairs. but it replaces the time portion with a relative time. this is an expression of the form  1 = timk now  . so  if c occurs in a situation term of the form do c  s  and tlme r  is 1 and start s  is 1  then the 1 in the time part of every actiontime pair in c would be replaced by  1 = tlme now  . these are properly handled by the operators for regressing equality predicates. 
모the regression operators for happened and wasat follow: viii. 

reasoning about actions and change 	1 

ix. 

the end result of regression is a sentence  possibly much larger  in a language without actions. the language is a modal language with both temporal and epistemic operators. 
1 	conclusions 
the results reported in this paper can be combined with concurrent  temporal golog or rgolog reiter  1  or 
congolog giacomo et al  1  to specify and control an agent  such as the robot discussed in section 1  that concurrently moves about its environment and performs various actions including sensing actions. future work will address the issue of developing a good theorem proving method for the language resulting from regression. this method needs to combine modal theorem proving with a method for solving integer constraints. 
acknowledgments 
numerous helpful discussions have been held with yves lesperance on many of the topics covered in this paper. useful suggestions made by patrick doherty  daniele nardi  and a number of anonymous reviewers of earlier versions of this paper have been incorporated. additional thanks are due to steve zimmerbaum with whom the initial stages of this work were carried out. this research was partially supported by nsf grants ses-1 and cise-1. 
