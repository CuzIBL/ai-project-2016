 
among the local consistency techniques used in the resolution of constraint satisfaction problems  csps   path consistency  pc  has received a great deal of attention. a constraint graph g is pc if for any valuation of a pair of variables that satisfy the constraint in g between them  one can find values for the intermediate variables on any other path in g between those variables so that all the constraints along that path are satisfied. on complete graphs  montanari showed that pc holds if and only if each path of length two is pc. by convention  it is therefore said that a csp is pc if the completion of its constraint graph is pc. in this paper  we show that montanari's theorem extends to triangulated graphs. one can therefore enforce pc on sparse graphs by triangulating instead of completing them. the advantage is that with triangulation much less universal constraints need to be added. we then compare the pruning capacity of the two approaches. we show that when the constraints are convex  the pruning capacity of pc on triangulated graphs and their completion are identical on the common edges. furthermore  our experiments show that there is little difference for general non-convex problems. 
1 	introduction 
the constraint satisfaction paradigm allows for a natural formulation of a wide variety of practical problems. it consists of representing a problem as a set of variables taking their values in particular domains  subject to constraints which specify consistent value combinations. solving a csp amounts to assigning to the variables  values from their domains  so that all the constraints are satisfied. backtrack search is the principal mechanism for solving a csp. it is commonly combined with local consistency techniques to limit the combinatorial explosion. these techniques reduce the size of the search space by removing local inconsistencies. 
 authors are listed in alphabetical order. 
constraint satisfaction 　this paper considers a particular form of local consistency called path consistency  pc . the work presented 

figure 1: path consistency 
considers binary csps and builds on their classical constraint graph representation  where the vertices represent the variables and the edges represent the constraints between the variables. 
	a path p 	 in a constraint graph 
g is pc if for all pairs of values for  that satisfy the constraint in one can find values for the intermediate variables so that all the constraints in g along the path are sat-
isfied  see figure 1 . a constraint graph is pc iff all paths in the graph are pc  mackworth  1 . in this paper we make the distinction between enforcing pc on csps and on constraint graphs. a csp is pc if the completion of its constraint graph is pc. a csp will be said to be partially pc  ppc  if its constraint graph is pc. 
　in practice  we know how to enforce pc on complete graphs thanks to the following theorem: 
theorem 1  montanari  1  a network with a complete graph is pc iff every path of length two is pc. 
　as a result  existing algorithms first complete sparse graphs by adding universal binary constraints  then enforce pc on each path of length two. the algorithms with the best time complexity  mohr and henderson  1; han and lee  1  run in time  is the number of variables and d the maximum domain size. 
　despite its relatively high computational complexity  pc on complete graphs has been shown to be a central notion for certain classes of problems. in effect  it has been shown to be equivalent to global consistency for convex binary problems. this means that if 

a binary convex csp is pc  its solutions can be derived backtrack-free. the pc property has also received particular attention in the area of temporal reasoning  schwalb and dechter  1  where lower forms of consistency prove to be of less interest. 
　in this paper we show that montanari's theorem extends to triangulated constraint graphs. triangulated constraint graphs can be made pc by ensuring that every path of length two is pc. in this case there is no need for additional constraints to be synthesized. this allows us to devise an algorithm for making a csp with a triangulated constraint graph ppc in time is the maximum degree of the graph and e is the number of edges in the graph. when the original constraint graph is not triangulated  we can triangulate it by adding universal edges. it is important to note that for sparse problems  the number of edges added by triangulation is much less than by completion. 
　given an incomplete constraint graph  we then compare the pruning capacity of pc depending on whether it is enforced on a triangulation or a completion of the graph. we prove that for convex problems  the pruning capacity of the two is identical on the common edges. this means that  in this case  the extra edges synthesized for completion do not affect the labeling of the common edges. we also propose an algorithm for filling in these extra edges. 
　finally  we present some experiments illustrating that significant gains in computational effort can be obtained using our algorithms. furthermore it appears that there is little difference in the pruning capacity of ppc and pc for general non-convex csps with triangulated constraint  graphs. 
1 	background 
in tins paper  we consider binary csps  v  c  d  where of variables  d is the set of domains and variable i takes its 
value in domain dt. the variables of v are subject to a set of constraints c - represent the legal value combinations from we use the  1  
matrix representation of constraints proposed in  montanari  1  and assume that is always the transposition of is called a universal 
constraint. a constraint is connected row-convex  crc  if after removing the empty rows from its matrix representation it is row-convex and connected  i.e. all the 1 entries in a row are consecutive and two successive rows either intersect or are consecutive  deville et al.  1 . 
　a csp is strongly pc if in addition to pc it also is arc consistent  ac . a csp is globally consistent if any par-
tial instantiation of a subset of variables can be extended to a solution without backtracking. 
　　let us now recall the necessary background from graph theory. an undirected graph g is triangulated if every cycle of length strictly greater than 1 possesses a chord  that is  an edge joining two non-consecutive vertices of the cycle. for a graph g =  v  e   with  an ordering of v is a bijection of  
onto v. for each v in v  the adjacency set 
defined as a vertex v is simplicial if is complete. every triangulated graph has a simplicial vertex. a triangulated graph remains triangulated after removing a simplicial vertex and its incident edges from the graph. the order in which simplicial vertices are successively removed is called a perfect elimination order. for a given perfect elimination order  we will use the notation  and will denote the subgraph of g induced by st. where is the prece-
dence relation of the given order. observe that since the elimination order is perfect  the subgraph of g induced by f  is complete. 
the material cited below is taken from kjaerulff  1 . 
a perfect elimination order can be found in  time using the maximum cardinality search algorithm. a nontriangulated graph can always be transformed into a triangulated one by adding edges. finding a minimal triangulation  where every edge is necessary for the graph to be triangulated can be done in  time  where / is the number of added edges. this bound is improved on average by a procedure called recursive thinning which we use in this work. 
1 	pc on triangulated constraint graphs 
in this section we extend theorem 1 to triangulated graphs. we show the following result: 
theorem 1 a triangulated constraint graph  g is pc iff every path of length 1 is pc. 
proof: since g is triangulated  we can find a perfect elimination order which defines si   and  as discussed above. we demonstrate that g is pc by induction on i. since every path of length 1 is pc  we know by construction that is pc. assuming that g  is pc  we set out to prove that. is pc. we do this by showing that any path p from u to in is pc. 
　if p is in  then p is pc by assumption. so we need to consider two cases. either 1  as illustrated on the left in figure is an endpoint of p   or 1  
p goes through 	as shown on the right in figure 1. 

figure 1: two cases of inductive proof 
let us consider these two cases below: 
	bliek and sam-haroud 	1 

1. this path is considered for pc only if there is a constraint  let us show that one can find values for the intermediate variables so that all the constraints along a path p are satisfied. let  be the variable that precedes in p. so in addition to the constraint we also have a constraint 
　since g is triangulated  the graph induced is complete. so there is a constraint now in g every path of length 1 is pc  so for every pair of values that satisfy we can find a value for v that satisfies and the part  of the path p between and is in 
and is therefore pc by assumption. so for the pair of values found for  we know that we can find values for the intermediate variables on this path 
 hence we are able to find a set of values for all the intermediate variables between  and that satisfy the constraints along p. 
1. if p goes through  then let and  be the variables that respectively precede and follow in the path p. note that both and are in since there is a constraint a constraint  and that the graph induced by is complete  we know that there is a constraint now consider the path  that goes directly f r o m t o   
without passing through is in g  and therefore by assumption pc. this means that for any pair of values for  u w  we can find values for the intermediate variables so that all the constraints along are satisfied. since in g every path of length 1 is we also know that for the pair of values found for  y  z  we can find a value for  that satisfies both  and  by doing so we just have found a set values that satisfy all the constraints along the original path p.  
1 	from triangulated to completed graphs 
given the result in the previous section  the question arises whether more priming can be obtained by completing a triangulated graph. as demonstrated in section 1 this may indeed occasionally occur. however  in this section we show that for the class of convex problems  no additional pruning is obtained by completing the graph. the notion of convexity we refer to is a broad one. it includes the conventional definition of convexity in continuous domains  as well as its crc extension to the discrete case. this extended convexity property is closed under composition and intersection of constraints. 
　to show our result on convex problems we need the following lemma. 
lemma 1 if g -  v e  is an incomplete triangulated graph  then one can add a missing edge  u w j with 
 so that 
1. the graph 
1. the graph induced by 	is complete. 
constraint satisfaction 
proof: since g is triangulated  it has a perfect elimination order defining and let be the small-
est index such that is complete. consider a variable  for which there is no edge  in g. by taking  u  w  =  we now prove the two claims of the lemma. 
1. since gi is complete  there is an edge between and every variable in fi. the graph induced by 
in therefore remains complete. as a result  the considered elimination order is also perfect for  since a graph with a perfect elimination order is triangulated   is triangulated. 
1. let us first show that suppose it is not. in that case we necessarily have that a y x that precedes  for which e. but then  since g is triangulated  there would also be an edge  which contradicts our assumption. finally  since x =  and g is triangulated  we know that the graph induced by x is complete.  
this lemma is illustrated in figure 1. in this case 

figure 1: completing triangulated graphs 
	= 	and 
the variables of are colored gray. the construction would for example add the dashed edge  which is currently missing. 
let us now turn to the main result of this section. 
theorem 1 for a convex csp with a triangulated constraint graph g  strong pc on g is equivalent to strong pc on the completion of g. 
　by equivalent we mean that the relations computed for the constraints in g are identical. 
proof: suppose we have a triangulated graph g =  v  e  that is strongly pc. we will add to g the missing edges one by one until the graph is complete. to prove the theorem  we show that the relations of the constraints can be computed from the existing ones so that each intermediate graph  including the completed graph  is strongly pc. 
　　to add the edges  we use the construction proposed for the proof of lemma 1. at all times during the constraint addition process  the graph therefore remains triangulated. after the addition of a single edge to g  we obtain 	for this edge the 
new relation 
 1  

where is the composition operator. for example  in figure 1  is obtained by intersecting the compositions obtained via the variables in   is the universal relation when  
　if after making g strongly pc the relations in g are empty  the construction above would  as desired  compute the empty relations for the missing edges. in what follows we therefore assume that the relations in g after strong pc are not empty. 
　we now show that  is pc. since  is triangulated  by theorem 1 it is sufficient to prove that every path of length 1 is pc. by assumption  paths of length 1 that do not go through  and  are pc. so let us consider paths of length 1 that go through  and by lemma 1 and the construction used in its proof  we know that the set of intermediate variables on the relevant paths is  and that  induces a complete subgraph of g. this situation is illustrated in figure 1  where the variables in  are colored gray. note that by construction the graph a induced by  and the graph b induced by  are complete. we have to consider 

figure 1: added edges are pc 
two cases1. with either 1  p =  or 1  p ~ . let us consider each of these cases in turn. 
1. if p = we need to prove that for every pair of values for that satisfies  we can find a value for so that as defined by  1   and are satisfied. 
 a is complete  strongly path-consistent and convex  it is therefore also globally consistent  sam-haroud and faltings  1 . so that for every pair of values that satisfy we can find values for all the variables in so that all other edges in .1 are also satisfied  see figure 1 . similarly  since b is complete  strongly path-consistent and convex it is globally consistent. this means that for the above values of the variables in fi  we can find a value for vj so that all constraints in b are satisfied. for the considered values the constraint is therefore satisfied. for any pair of values for we are hence able to find values for the variables in  so that all constraints in  are satisfied. for the values for  the relations  participating in  1  are therefore 
satisfied by the values for the variables in the values for  therefore satisfy  
*the reasoning is the same for the symmetrical cases. 
1. if p = the relation of the new edge ensures by definition that for every pair of values in we can find a value for  so that the and are verified. 
　　we now show that is ac. when since g' is pc we know that for every value pair in or in  we can find a value pair that satisfies  since g is ac this means that for any support respectively on or on we are able to find a support on as a consequence is not only pc 
but also ac. when 	= 1   	= 	x 
since g is ac  g' will therefore be ac as well.  
corollary 1 is a direct consequence of theorem 1. 
 
corollary 1 for convex problems  insolubility is detected using pc by graph completion iff it is detected using pc by graph triangulation. 
1 	algorithms 
by theorem 1 we know that triangulated graphs can be made pc by enforcing that every path of length two is pc. for problems with a triangulated constraint graph we can therefore make the csp ppc by a simple modification of existing pc algorithms1. the resulting algorithm is algorithm 1. the procedure related-

 triplets q  returns all those triplets in which q participates and that correspond to actual triangles in g. the difference with a classical pc algorithm  referred to as pc in the rest of the paper  is that pc revises all possible triplets  not only those corresponding to triangles in g. to determine the complexity of this algorithm for discrete problems  consider the number of revisions that can be made based on each edge  revisions based on will be made only when a pair of values is removed. if is the maximum domain size  then one can remove at most pairs from any relation. each removal 
   *'ppc is close to schwalb and dec-liter's plpc algorithm from which it borrows the name. plpc  partial loose pc  enforces a partial form of path consistency on disjunctive temporal csps. it only considers the paths of length two with at least two non-universal constraints. 
	bliek and sam-haroud 	1 

prompts revisions only of the 1 neighboring edges in each triangle. if is the degree of variable a modification of will prompt at most 1 min revisions. summing over all edges we find that at most 
revisions will be performed  where degree. this should be compared to the revisions performed by the classical pc algorithm. using the results presented in  chiba and nishizeki  1   one may use the arboricity of g instead of  resulting in a number of revisions the same reference also presents upper bounds on a both for general graphs and for specific types of graphs. 
　for the experiments below we report the number of revisions since this measure is independent of the specific techniques one might use for updating the relations. in practice one can for example use the techniques based on the principle of minimal support used in pc-1  chmeiss  1 . in this case at most  value pairs may be deleted in the relations. per value pair at most supports may be visited leading to a time complexity of 
 however  per value pair only  support information concerning the smallest supporting element is stored  resulting in a  space complexity. in case of crc constraints one can use the techniques described in  deville et a/.  1  to obtain a time complexity of  and a space complexity of  
　the ppc algorithm makes csps with triangulated constraint graphs ppc. csps whose constraint graph is not triangulated can be made ppc by triangulating the graph with universal constraints before running ppc. for convex problems ppc is equivalent to pc. if desired  the relations of the missing edges can be computed as proposed in the proof of theorem 1. tins fill algorithm is shown in algorithm 1 below. 

　　the variables are assumed to be ordered according to a perfect elimination order. observe that it is not required to update the sets  when g changes  since the order in which the edges are added to does not matter. 
	algorithm 1 computes at most 	relations. 
since each relation is computed by intersecting at most  compositions  the number of revisions algorithm 1 
needs to perform is therefore 	for crc con-
straints one can  as before  use the techniques described 
constraint satisfaction 
in  deville et al.  1  to perform the actual computations. in this case the missing relations can be filled in in time  
1 	experiments 
in this section  we report some preliminary experiments that compare the number of revision steps carried out by pc and ppc for three types of randomly generated problems. the convex case is illustrated by tests on linear continuous and crc problems  the non-convex one by tests on randomly generated discrete problems. for the linear problems  the constraints generated are inequalities. they are discretized similarly to what is described in the work of  sam-haroud and faltings  1  and represented by  1  matrices. the constraint graph of each generated instance is triangulated before running ppc. the domain size is 1 for all the types of problems. each test is averaged over 1 instances. 
　table 1 shows the comparison for different sizes of constraint graphs and a fixed density p. the density chosen  p = 1  corresponds to sparse graphs and illustrates the most favorable case for ppc. table 1 compares pc and ppc for problems of fixed size  n - 1  and different densities. since ppc is of interest on sparse csps  we report the experiments on sparse graphs for higher densities  the number of revisions of ppc approaches that of pc. note that ppc and pc are identical for complete graphs. 
　by theorem 1 for convex problems the relations computed by ppc and pc on the common edges are identical. for non-convex problems  we also compare the pruning capacity of ppc to the one of  is the ratio between the number of tuples removed by ppc over the number of tuples removed by pc on the common edges. for the tests conducted on random problems  insolubility detected by pc was also detected by ppc. 
　the tests reported for non-convex problems are generated in the phase transition  grant and smith  1  as this seems to best illustrate the difference of behavior between ppc and pc. indeed  several hundreds of tests run out of the phase transition showed no difference of pruning between pc and ppc on the common edges. note that the randomly generated linear and crc problem instances do not necessarily fall in the phase transition. it is worth mentioning that despite the worst case complexity of  for triangulation algorithms  the 
effective time devoted to triangulation is negligible compared to the running time of ppc. 
　more experiments clearly need to be conducted for better stating the effectiveness of ppc. the preliminary results we report are however encouraging enough to warrant ppc being investigated as alternative to pc for sparse problems. 
1 	conclusion 
path consistency is an important notion in constraint satisfaction. a new algorithm  called ppc  is proposed that makes triangulated constraint graphs pc. pc can 

linear 	crc 	random 

n p pc ppc n v pc ppc 1 
1 1 1 
1 1 
1 
1 
1 
1 
1 
1 1 
1 1 1 
1 
1 
1 1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 1 
1 
1 1 
1 1 
1 1 
1 
1 
1 
1 
1 
1 
n p pc ppc p  %  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 table 1: revisions performed by pc and ppc on sparse graphs for different problem sizes 
linear 	crc 	random 
n p pc ppc 1 p pc ppc n p   pc 	' 	ppc p  %  1 
1 
1 1 1 
1 
1 1 
1 1 
1 1 1 
1 1 
1 
1 
1 
1 1 
1 
1 1 
1 1 
1 
1 1 1 1 
1 
1 1 
1 1 
1 
1 1 1 
1 1 1 
1 
1 
1 1 
1 
1 
1 
1 1 
1 
1 
1 
1 1 
1 
1 
1 
1 table 1: revisions performed by pc and ppc on given problem size for different densities 

thus be enforced on incomplete constraint graphs by triangulating instead of completing them. when the problem is sparse  this spares a significant amount of work compared to the classical pc algorithm. we have also shown that for convex csps with triangulated constraint graphs  the ppc and pc algorithms will compute the same labeling on the common edges. 
pa'cessive memory requirements of existing pc al-
gorithms limit their applicability  chmeiss and .legou  1 . since on sparse graphs ppc has a lower space complexity than pc  ppc might prove to be a viable alternative when memory is a limiting factor. 
　for non-convex problems  ppc exhibits a good pruning capacity compared to pc and can be computed much more efficiently than pc on sparse graphs. we therefore expect that it might be beneficial to interleave it with backtrack algorithms to search for solutions. this will be a topic of future research. 
1 	acknowledgments 
we would like to thank jean-charles regin for pointing out the results on arboricity. most of this work was performed at the artificial intelligence laboratory of the swiss federal institute of technology in lausanne where christian bliek was sponsored by the swiss national science foundation under project number 1.1 through the ercim fellowship program. 
