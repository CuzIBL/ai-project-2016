 
sequel is a new-generation functional programming language  which allows the specification of types in a notation based on the sequent calculus. the sequent calculus notation suffices for the construction of types for type checking and for the specification of arbitrary logics. compilation techniques derived from both functional and logic programming are used to derive high-performance atps from these specifications. 
1 	introduction 
many of the seminal advances in the field of automated deduction are encapsulated in certain landmark implementations; bledsoe's imply  cohen & feigenbaum 
 1    the boyer-moore theorem prover  boyer & moore 1   and nuprl  constable et al. 1 . in each of the cited cases  the implementation of these systems required thousands of lines of code and many man months or years of effort before systems of an acceptable degree of reliability could be constructed. the sheer effort in implementing a good atp1 or pa1 can be gauged by sampling some of the better-known implementations. 
figure 1. code profile of some leading atps. 
system 	lines 	based on 	language expressed than to continually reimplement logics from scratch. 
　the problem is that scientists and logicians are in disagreement about what that generic logic should be; whereas kowalski  1  speaks for an older tradition in advocating first-order logic  more recent developments covered in thompson  1  point towards some form of constructive type theory. however there are many different systems of constructive type theory and no single system has yet emerged as predominant. the upshot is that although scientists agree that traditional ways of building proof-assistants and theorem-provers is costly  and that better ways should be found  no single logic commands sufficient support to be recognised as a generic logic suitable for all purposes. 
　a more promising approach is to try to isolate what all logics have in common and then build a shell. this approach is encapsulated by abrial's b-tool  abrial  1  . logics are built in the b-tool by entering the appropriate axioms into the machine. this is indeed a welcome alternative to typing in thousands of lines of code. but since the b-tool is not itself a programming language  but a tool written in pascal it lacks the flexibility of control that a programming language such as sml would provide. a better solution would be to integrate the solution of the specification of an arbitrary logic into a functional programming language of a new generation that would absorb the lessons to be learnt from abrial's b-tool and languages like standard ml. this is a good description of the sequel programming language. 

llama 1k many sorted logic lisp itp 1k first order logic pascal boyer-moore 1k recursive functions lisp nuprl 1k martin-lof lisp/ml oyster 1k martin-lof prolog the recognition that much effort was required to implement any significant proof-assistant or theorem-prover has led computer scientists to take an interest in generic logics that are capable of representing a wide number of formal systems. it would be more sensible to implement one generic logic within which all other logics could be 
1
  automated theorem prover. 1proof assistant. 
1 	the structure and philosophy of sequel 
sequel fairly neatly separates into two parts; 
1. a core functional language that is highly suited to the symbolic manipulation of logical formulae. 
1. an approach to type theory via the sequent calculus that allows the high-level specification of arbitrary logics through sequent calculus notation. 
the two are tied together by a philosophy that insists that the specification of logics can be reduced to the specification of types  and that proof within a given logic is equivalent to proving that a type is inhabited* the process of proof in a logic is thus nothing more than 
	tarver 	1 

* form of type-checking  different from that found in languages like sml because the control mechanisms for driving a proof in a logic are more complex  but alike in kind. one single notation  derived from the sequent calculus  suffices to specify logics and to define the types against which sequel programs can be verified as welltyped. 
1 	core sequel 
core sequel runs on top of common lisp for both portability and the richness that the lisp environment has to offer. the core language is a conditional priority rewrite language modelled after prolog syntax with the 
novel feature of allowing a version of backtracking called backtracking on demand. 
　a rewrite language is a functional language in which functions are defined by means of rewrite rules. a sequel rewrite rule takes the form i1 ... in  o which meets the variable condition that all variables in o also appear in ii .. i n - a rewrite rule is triggered by a series of inputs matching i1 ... in and the appropriate variable instantiations are made in evaluating the output. two rewrite rules are said to conflict on an input when they both match to an input  but the results of applying the two rewrite rules are different. a solution to the problem of conflict is to order the rewrite rules so that when two conflict  only one is allowed to fire. such a rewrite system is called a priority rewrite system in baeten et al.  1  where it is shown that priority rewrite systems have an expressive capacity in excess of rewrite systems that lack priority. as an example  the following pair of rewrite rules defines the equality relation only with the proviso that the first has priority over the second. in a non-priority rewrite system this relation cannot be defined. 
ii true 
x y falsa 
by organising such rules into function definitions with the capacity to call other functions and letting the order of appearance determine priority  a language very like core sequel is created. a rewrite rule appearing immediately after another rewrite rule in a function definition is the successor rule to 
　in backtracking on demand a failure object is defined which can be returned by any rewrite rule. when is returned  sequel unwinds the current environment e back to a previous environment e' such that:-
1 . w a s the environment in force when a rewrite rule was applied  
1. was signalled in the sequel program as a choice point rewrite rule* 
1. ri was the last such choice point rewrite rule applied. 
such choice point rewrite rules are signalled by the use of instead of  within a function definition. if no such can be found  then  is returned  else the rule becomes the highest priority rule to be applied in 
environment e'. 
1 	logic programming 
　backtracking on demand is a very powerful feature of core sequel which gives sequel the kind of facility with non-deterministic algorithms that prolog possesses  but with far more control. backtracking rewrite rules can be selected to deal with the choice points in the program  leaving the deterministic parts of the program free from the unnecessary backtracking that forces prolog programmers to resort to the use of the cut. a nice illustration of core sequel's power is shown in this short program which simulates a non-deterministic finite state machine  ndfsm . 
figure 1. an ndfsm 

unlike the cut in prolog  backtracking on demand has a clean semantics since all functions that use  - can be statically transformed into extensionally equivalent functions that do not use  -. 
　core sequel is compiled into common lisp via an abstract machine slam1 that produces lisp code of a size and efficiency comparable to that of hand-written code. the best testimony to the efficiency of a language is that the author should choose to implement the language in itself. though the sequel system consists of 1 lines of common lisp  only 1 lines of it were written in common lisp. the remainder was generated from 1 lines of seq uel. 
1 	flexible typing 
sequel is currently the unique inhabitant of the class of flexibly-typed languages. a flexibly-typed language is one in which:-
1 sequel abstract machine 


	tarver 	1 


1 	logic programming 

	tarver 	1 

　sequel tactics  properly constructed  display a clean division between declaretive clarity  donated from the sequent calculus  and procedural control  donated from the atomic operations allowed on them. 
1 	derived rules 
once a proof has been secured then the theorem can be turned into a derived rule. the non-logical constants in the theorem are uniformly replaced by variables and the theorem becomes a sequent calculus rule. the nonlogical constants are specified by the user. the facility is modelled after the edinburgh interactive proof editor  lindsay etal.  1  . 
1 graphical interface 
atps and proof assistants are much improved by a graphical interface and the ability to drive proof using a mouse. sequel includes a c-based graphical interface based on the highly portable athena widgets library designed for x-windows by m.i.t. any framework designed under sequel will generate the appropriate graphical interface with all the rewrite rules and tactics displayed and proofs are driven by 'point and click'. facility is included whereby the user can attach help to tactics by associating information-holding strings with the names of tactics and rewrite rules and this information is fed into pop-up help windows which are summoned by using the mouse. 
figure 1. a graphical interface for the logic tto 

1 	productivity and applications 
about half-a-dosen atps and proof assistants have now been built under sequel including theorem-provers for first-order logic without equality/ simple algebraic set theory  a calculus for spatial relations  and experimental systems for partial evaluation and constructive type theory - all with graphical interfaces and mouse-controlled on-line help. most of these systems are available under ftp. 
1 	logic programming 
　in a conventional language this output would represent the combined efforts of a research team of three people working solidly for at least a year. in fact the sum of all these systems in sequel represented an investment of 1 working weeks for the author. 
1 	obtaining sequel 
sequel is free for all educational activities that do not involve commercial profit. sequel currently runs under lucid common lisp version 1 and kyoto common lisp. sequel is available with a basic manual by ftp from the university of leeds. to obtain sequel  ftp to the address agora.leeds.ac.uk  cd to scs/logic  type 
'binary1 and then 'mget *' and finally 'quit'. the file readme contains instructions on what to do with the software. there is a sequel interest group that receives e-mail on new implementations of and in sequel; interested parties should e-mail the author at leeds. 
acknowledgements 
i should like to acknowledge the support given by peter 
dew  david hogg and tony cohn to my work. thanks also to jeremy littler who managed the intricacies of the athena widgets library and the challenges of interfacing c to common lisp. 
