r e a s o n i n g b y cases a n d t h e f o r m a t i o n o f c o n d i t i o n a l p r o g r a m s 1 
douglas r. smith 
kestrel institute 
1 page mill road 
palo alto  ca 1 usa 
	a b s t r a c t 		  1   

reasoning by cases  a natural feature of human reasoning  has been difficult to formulate so that it can be performed naturally when needed. several difficulties arise:  1  how to motivate the use of reasoning by cases when and only when needed   1  how to determine an appropriate analysis of the goal into cases  and  1  how to carry out the deduction in each case and combine the results. in this paper we focus on how reasoning by cases can be naturally accomplished in the framework of derived antecedents  smith 1 . our main technical contributions are  1  a set of strategies that draw on the context of a deduction to provide an appropriate case analysis for a goal  and  1  inference rules for carrying out reasoning by cases and forming conditional terms for the existentially quantified variables in the initial goal. 
i introduction 
reasoning by cases  a natural feature of human reasoning  has been difficult to formulate so that it can be performed naturally when needed. several difficulties arise:  1  how to motivate the use of reasoning by cases when and only when needed   1  how to determine an appropriate analysis of the goal into cases  and  1  how to carry out the deduction in each case and combine the results. on motivating the use of reasoning by cases  we merely note that this type of reasoning is typically used only as a last resort since it multiplies the number of goals that need to be considered. our main technical contributions in this paper are 
 1  a set of strategies that draw on the context of a deduction to provide an appropriate case analysis for a goal  and  1  inference rules for carrying out reasoning by cases and forming conditional terms for the existentially quantified variables in the initial goal. 
we restrict our attention to goal formulas of the form 
1 this research was supported in part by the office of naval research under contract n1-c-1 and in part by the defense advanced research projects agency contract n1-c-1  monitered by the office of naval research. the views and conclusions contained in this paper are those of the author and should not be interpreted as representing the official policies  either expressed or implied of darpa  onr  or the us government. 
although the techniques presented are not necessarily limited to this type of goal. what is desired as an output of the deductive process is a way to construct an algorithm that computes a value for z as a function of the variables x1 ... xn. we sometimes call  1  a problem specification and refer to x1 ...  xn as input variables and z as the output variable. when a reasoning by cases argument is needed to establish  1  then the corresponding algorithm has the form of a conditional  where each case corresponds to a branch of the conditional. that is  if  1  can be established by separately considering the cases c1 ...  cm then we want to be able to construct a conditional expression 

where if ... fl is a functional version of dijkstra's nondeterministic conditional. the function fi computes a value for the output variable z corresponding to case c . predicate pi   called a guard  characterizes the conditions under which fi provides a solution to the initial problem specification. 
evidently  what is needed in order to form a conditional expression from a reasoning by cases argument is an analysis of the goal into cases c1...  cm and extraction of a guard pi and function fi from the proof of case ci for i = 1 ...  m. 
there are many ways to analyze a goal into cases. such analysis is easy when the cases are explicitly in the initial goal. we present below several strategies for handling the more difficult situation in which the analysis depends on the context of a goal. 
in the next section we review the notion of a system for deriving antecedents and present a few inference rules pertinent to reasoning by cases. in the succeeding section we analyze the notion of reasoning by cases into two general types and present several instances of these types  called strategies for reasoning by cases. the application of these strategies to a number of program synthesis tasks may be found in  smith 1a . 
1 	d.smith 
ii derived antecedents 
reasoning by cases can be naturally accomplished in the framework of derived antecedents  smith 1 smith 1b . this framework allows a deduction whose aim is not limited to establishing the validity of a goal formula g  but more generally seeks to derive a formula a  called a derived antecedent  satisfying certain constraints and such that a  g is valid. the constraint we are concerned with simply checks whether the free variables of a formula are a subset of some fixed set that depends on g. if g happens to be a valid formula in our current theory then the antecedent true should be derived - thus ordinary theoremproving is a special case of deriving antecedents. 
a solution to a problem specification  1  is a tuple  a  a  where a is a term called the answer  and a  called the derived antecedent  is a formula whose free variables are a 
subset of {x 1  ... x n } and such that  if we define the algorithm f by f{x1 ... xn  = a  then the formula 

is valid. in other words a solution provides a term that computes a value for the existentially quantified variable as a function of the input variables x 1  ... x n   but only under the additional assumption of the derived antecedent. the derived antecedent a is called the derived input condition of algorithm f. 
in a natural deduction-like system the derivation of a solution for a goal g can be described by a two stage process. in the first stage reduction rules are repeatedly applied to goals reducing them to subgoals. a primitive rule is applied whenever possible. the result of this reduction process can be envisioned as a goal tree in which 1  nodes represent goals /subgoals  1  arcs represent reduction rule applications  and 1  leaf nodes represent goals to which a primitive rule has been applied. the second stage involves the bottom-up composition of solutions. initially each application of a primitive rule to a subgoal yields a solution. subsequently whenever a solution has been found for each subgoal of a goal g then a solution is composed for g according to the reduction rule employed. in a working system we have developed  called rainbow  a single solution is selected from among the alternate derived solutions of a goal by maximizing over a heuristic measure of weakness and structural simplicity. 
solutions obtained by solving subgoals are composed to obtain a solution for the parent goal. the reduction rules presented below require two composition methods: the disjunctive and conjunctive composition of solutions. the dis-
junctive 	composition of solutions  is 

intuitively  the disjunctive composition of solutions returns an answer which behaves like   when ai holds and behaves like when a1 holds. if a1 or a1 is false then the conditional collapses to just respectively. for example  the disjunctive composition of solutions 
and 	is 
the conjunctive composition of 	solutions 
is 

where uc computes the unifying composition of substitutions  nilsson 1 . we do not elaborate on conjunctive composition since it does not play a central role in this paper. 
natural deduct ion-like systems for deriving solutions may be found in  smith 1 smith 1b . here we merely list the inference rules necessary to support reasoning by cases. goals are prepared by treating the universally quantified variables as constants and then dropping all quantifiers. 
we use the notation 	where 	as an 
abbreviation of the formula 
rule r1. reduction of a disjunctive goal. if the goal formula has the form then generate s u b g o a l s a n d  . if these subgoals return solutions and 
respectively  then return the disjunctive composition 
as a solution to goal . naturally if subgoal is explored first and a solution is returned  then f has been proved and there is no need to e x p l o r e t h e solution can be returned for 
rule r1 assumes that the goal has only two disjuncts. the generalization to multiple disjuncts in this and later rules is straightforward. 
something like the following rule is commonly called the 
 case analysis  rule in many theorem-proving systems  see for example  bledsoe 1  . 
rule r1. reduction by a disjunctive hypothesis. if is an axiom or hypothesis then reduce goal  to sub-
goals and where hr is a set of hypotheses obtained by limited forward inference on r and the set h1. if solutions  are obtained for these subgoals respectively  then return their conjunctive composition as the solution to 
while this rule is sound  it often fails to find a solution when one exists. the solutions to the various cases typically have incompatible answers. the unifying composition operator simply reports that such answers are inconsistent. a better rule is the following. 
rule r 1 . reduction by disjunctive hypothesis. if there is axiom or hypothesis then reduce goal gh to subgoals . if solutions and are obtained for these subgoals respectively  then return their composition 

i i i strategies for reasoning by cases 
the idea behind reasoning by cases is to treat a goal in a number of alternate contexts  or cases  that are collectively exhaustive. often the difficulty in solving a goal is due to the fact that each case requires a different argument. 
there are two identifiable types of reasoning by cases. in the first type  the goal g is reduced to a conjunction of weaker goals. this occurs for instance when we assume a disjunction or equivalently . rules r1 and r1 can then be used to handle the cases. the second type of reasoning by cases involves reducing the goal g to a 
disjunction of stronger goals. this occurs for instance when we conjoin a disjunction to the goal. the goal becomes or equivalently 
rule r1 can then be used to handle the cases. 
sometimes the motivation for performing a case analysis is intrinsic to the goal. rules r1 and r1 can be used to carry out the reasoning by cases. sometimes however  motivation for case analysis must come from context. to exploit context in setting up a case analysis we use special procedures called strategies that have the effect of an inference rule but may involve arbitrary amounts of processing. strategies are intended to encode in one deductive step a commonly occurring reasoning pattern. we present several strategies for reasoning by cases below. they are described in terms of  i  a heuristic for determining when to apply reasoning by cases and with what cases  and  ii  a description of how cases are generated and how the solutions for these cases are composed. omitted from the description of these strategies is the common heuristic that they be applied only as a last resort; that is  only if other means are not applicable or have failed. 
strategy r b c 1 . exploiting an unverified subgoal. 
apply-when: a subgoal p of goal g cannot be easily verified and the variables of p are a subset of the input variables. 
procedure: use rule r1 with assumption 
	d.smith 	1 
the procedure part of rbc1 should be viewed as descriptive rather than prescriptive. we do not propose that rbc1 form the disjunction only to have rule r1 break it down. rather  rbcl should directly create subgoals and  and should compose the solutions to these subgoals as r1 would. similar remarks hold for the following strategies. 
a typical use of strategy rbcl occurs when term r in a conditional rewrite rule 

matches term t in goal g t  with unifier 1 but the condition cannot be verified. strategy rbcl would apply rule r1 with 	concrete examples of the use of a strategy like rbcl may be found in  buchanan and luckham 1 . 
strategy r b c 1 . alternate ways to apply a conditional rewrite rule. 
apply-when: the goal has the form g t  and there is a conditional rewrite rule 

such that r matches t with several distinct unifiers. suppose that there are only two such unifiers and and that and  are both verifiable. 
procedure: use rule r1 after reducing 

strategy r b c 1 . alternate forms of an input variable. 
apply-when: a set of terms can be constructed that describe the possible forms of an input. suppose for example that an input x of type d either has the form f1 or  where f1 and f1 are generators of type d 
and s1 and s1 are selectors for f1 
procedure: use rule r1 with assumption 

to support rbc1 each data type known to the system should have one or more inductive definitions in terms of a set of generators. these provide standard alternative structures for the values of the type. since they are based on inductive definitions of the type  they prepare the way for an inductive proof of the initial goal. 
sometimes there is an input condition that restricts the set of values that a variable may vary over. a technique for creating a set of alternative forms taking into account an input condition is presented in  smith 1a . 

1 	d.smith 
strategy r b c 1 . alternate forms of a term for the output variable. 
apply-when: a set of terms can be constructed that describe the possible forms of the output. suppose for example that the output variable has type r and either has the form 
procedure: use rule r1 after reducing goal  where u and v are fresh variables. 
the previous strategies break a goal into cases that are determined before the cases are explored. they may be called a prion strategies. our last strategy creates subgoals based on the solutions to previous subgoals and so may be called an a posteriori strategy. 
strategy r b c 1 . handling an unsolved case. 
apply-when: solution 	is produced for goal 	but 
a1 is insufficiently weak or simple. 
procedure: generate subgoal  is 
produced then generate the solution 


i v concluding remarks 
a limited form of antecedent derivation is used by bledsoe and tyson  bledsoe and tyson 1  to perform reasoning by cases on program variables during program verification. the difficulty in getting rules like r1 to produce a satisfactory solution has stimulated a number of potential extensions  including the use of  conditional substitutions   nilsson 1  and  generalized substitutions   tyson and bledsoe 1 . 
this paper is based on experience with the cypress program synthesis system  smith 1b . this system depended on an antecedent deriver for all cf its deduction and used strategies related to rbc1 and rbc1 for creating various divide-and-conquer algorithms  including the selection sort algorithm in example 1. cypress used a strategy related to rbc1 for creating composition and decomposition operators on various composite data types  including the decomposition operator derived in example 1. we are currently constructing a new version of this system at kestrel institute. this new system not only includes special strategies for constructing various classes of algorithms but can fall back on general purpose deductive program synthesis when these special methods fail. 
one goal of this paper has been to explore the notion of reasoning by cases and to formulate the logical mechanisms needed to implement this type of reasoning in a natural way. the framework of derived antecedents supplements the ease with which a natural deduction-like system can motivate and introduce case analysis with essentially logical mechanisms for handling case structure and forming conditional terms for existentially quantified variables. although we have presented strategies for reasoning by cases in the context of a natural deduction-like system  we believe these strategies can also usefully augment a resolution-based system. 
a c k n o w l e d g e m e n t s 
i would like to thank allen goldberg for his valuable comments on a previous draft. 
r e f e r e n c e s 
 bledsoe  w.w.   nonresolution theorem proving . artificial intelligence 1  1  1. 
 bledsoe  w.w. and tyson  m.   typing and proof by cases in program verification . machine intelligence 1: machine representations of knowledge. 
e.w.elcock and d. michie  eds.  ellis horwood ltd.  chichester  england  1  1. 
 buchanan  j.r. and luckham  d.c.   on automating the construction of programs.  technical report stan-cs-1  stanford university  1. 
 nilsson  n.j.  principles of artificial intelligence. tioga press  palo alto  ca  1. 
 smith  d.r.   derived preconditions and their use in program synthesis.  in proc. sixth conference on automated deduction  ed. d.w. love land  lecture notes in computer science 1  springer-verlag  new york  1  1. 
 smith  d.r.   reasoning by cases and the formation of conditional programs   technical report kes.u.1  kestrel institute  palo alto  ca  1. 
 smith  d.r.   top-down synthesis of divide and conquer algorithms.  to appear in artificial intelligence. 
 tyson  m. and bledsoe  w.w.   conflicting bindings and generalized substitutions  in proc. fourth workshop on automated deduction. austin  texas  1  pp. 1. 
1 i.e. hr contain! r and all hypotheses in h plus any interesting consequences of h and r deriveable within some bounded amount of computational resource. 
---------------

------------------------------------------------------------

---------------

------------------------------------------------------------

