 
muhiagent systems  mas  can  go down  for a large number of reasons  ranging from system malfunctions and power failures to malicious attacks. the placement of agents on nodes is called a deployment of the mas. we develop a probabilistic model of survivability of a deployed mas and provide two algorithms to compute the probability of survival of a deployed mas. our probabilistic model docs not make independence assumptions though such assumptions can be added if so desired. an optimal deployment of a mas is one that maximizes its survival probability. we provide a mathematical answerto this question  an algorithm that computes an exact solution to this problem  as well as several algorithms that quickly compute approximate solutions to the problem. we have implemented our algorithms - our implementation demonstrates that computing deployments can be done scalably. 
1 	introduction 
as muhiagent systems  mass  are increasing used for critical applications  the ability of these mass to survive intact when various external events occur  e.g. power failures  os crashes  etc.  becomes increasingly important. however  one never knows when and if a system will crash or be compromised  and hence  any model of mas survivability must take this uncertainty into account. 
　we provide for the first time  a formal model for reasoning about survivability of mass which includes both a declarative theory of survivability  as well as implemented algorithms to compute optimal ways of deploying mass across a network. 
　a mas-deployment specifies a placement of agents on various network nodes. based on probabilistic information about the survivability of a given node  we develop a formal 
    the first tuthor is also affiliated with umiacs. this work was supported in part by the army research lab under contract daal 1  the cta on advanced decision architectures  by aro contract daad1  by ns1j grant 1 and an nsf itr award 1. 
theory describing the probability that a given deployment will survive. this probability reflects the best guarantee we have of the mas surviving. our model does not assume that node failures are independent  though independence information can be easily added if so desired. the technical problem we need to grapple with is that of finding a mas-deployment of the agents having the highest probability of survival. as we do not make unrealistic independence assumptions  this problem turns out to be intractable. as a consequence  heuristics are required to find a deployment  even if it is sub-optimal . we develop algorithms for the following tasks: 
1. given a mas-deployment  how do we compute its probability of survival  
1. find a mas-deployment with the highest probability of survival - this algorithm is infeasible to implement in practice due to the above mentioned complexity results. 
1. we develop a suite of heuristic algorithms to find  suboptimal  mas-deployments. 
　we have conducted detailed experiments with our algorithms - for space reasons  only some of them are described here. the experiments show that our heuristic algorithms can find deployments very fast. 
1 	preliminaries 
agents. the only assumptions we make about agents is that they provide one or more services. we further assume that all host computers on which agents are located have a finite amount of memory resources  and that each  copy of an  agent a requires some amount of memory  denoted by mem a . a multiagent application mas is a finite set of agents - we make the assumption that all agents in a multiagent application are needed for it to function. networks. a network is a triple  n  edges  mem  where is a set of called nodes  edges specifies which nodes can communicate with which other nodes  and mem :  specifies the total memory1 available at node n for use by agents situated at n. a network is fully connected iff edges =  
　　note that the symbol mem is used to both denote the memory requirements of an agent  as well as the memory available at a node. it is easy to determine the intended meaning of this expression from context. 

definition 1 	suppose mas is a multiagent application and 
　　　　  edges  mem  is a network. a deployment for mas on ne is a mapping   : specifying which agents are located at a given node.  as usual if x is a set   is the power set ofx . u must satisfy the following condition: 
 this condition says 
   that every agent must be deployed somewhere.  mem a . this condition 
says that the agents deployed at a node cannot use more memory than that node makes available. 
intuitively   says that agents ai.a 1 are deployed at node n1. 
example1 supposed/ = 	{n1 n1 n1 n1 	}and 	mas = 
{a.b.cyd}. an example deployment is given by: - and ' v ~ 
{d}. 	this example will be used throughout this paper. 
1 	related work 
to our knowledge  there are no probabilistic models of survivability of a mas. however  there are many works that are in related areas. 
    shehory et a/.  1  use agent-cloning and agentmerging techniques to mitigate agent over-loading and promote system load balancing. fan  fan  1  proposes a bdi mechanism to formally model agent cloning to balance agent workload. 
    fedoruk and deters  1  propose transparent agent replication technique - though an agentis represented by multiple copies  this is an internal detail hidden from other agents. several other frameworks also support this kind of agent fault tolerance  mishra 1 . 
    marin et ex/.  1   develop adaptive fault tolerance techniques for mass. they use simulations to assess migration and replication costs. however   marin et ai% 1  concludes by saying that they do not address the questions of which of the agents to replicate  how many replicas should be made  where those replicas should be allocated. these questions are addressed in the currentpaper  but we do not propose a mechanism to synchronize agent replications. 
    kumar ♀/ a/.  1  focus on the problem of broker agents that are inaccessible due to system failures. they use the theory of teamwork to specify robust brokered architectures that can recover from broker failure. we  on the other hand  consider the possible failure of any agent in the multi-agent systems. 
   the problem of network reliability has been studied extensively-  gartner* 1  provide an excellent survey. in this paper we build on top of these studies and assume  as discussed below  that there is a disconnect probability function for a network specifying the reliability of each node of the network. 
　the problem of fault-tolerant software systems has some similarities to our agent survivability problem. an extensive study was performed to solve this problem using the xversion problem  n vp  approach. the n vp is denned as the 
 independent generation of  functionally equivalent programs from the same initial specification**  lyu and he  1 . in this approach  the reliability of a software system is increased by developing several versions of special modules and incorporating them into a fault-tolerant system  gutjahr  1 . however  these works  i  make unnecessary or unwarranted independence assumptions   ii  provide only a measure of expected survivability rather than guaranteed survivability   iii  do not consider replication. 
1 	a probabilistic model of survivability 
multiagent applications can  go down1 because nodes on which agents are located can crash. alternatively  agents are on a mobile node  e.g. a vehicle  may wander beyond communications range  thus dropping out of the network. 
definition 1 a disconnect probability function for a network edges  mem  is a mapping dp :  where 
c 1  is the set of all closed subintervals of' 1 . 
intuitively  if dp =  1 1   then this says that there is a 1 - 1% probability that node n will get disconnected from the network. note that this model supports the situation where we do not know the probability of node n getting disconnected - in this case  we can set dp ar  =  1 . likewise  if we know that a node will get disconnected with 
1% probability with margin of error  then we can set dp n  =  1 1 . one possibility to compute dp in a specific setting is by collecting statistical data on the past failures of each node. this would give us both a mean probability of failure for a given node as well as a standard deviation which would jointly result in a probability interval. in other applications  e.g. where statistics are not available  expert opinions can be used. 
   given a network  a/*  edges  mem  and a disconnect probability function dp  there is a space of possible networks that may arise in the future. 
definition 1 suppose  j f  edges  mem  is a network and   edges'  mem  is a possible future netedges and 
set of 
all possible future networks associated with a network  n  edges  mem  and a disconnect probability function dp. note that we can infer probabilities of possible future networks from such disconnect probabilities on nodes. even though many future networks are possible at a given time t only one of them will in fact occur at time t so at time   edges  mem  represents the space of possible network configurations. ~ 
  edges'  mem  we write '. furthermore  since in this paper we do not discuss the failure of edges  for space reasons  we will omit them from the networks in the rest of the paper. 
　suppose p r o b denotes the probability of a possible future network ne. for any we can write the constraint: 

this constraint says that the sum of the probabilities of all future networks in which node n survives must be between  we take all such constraints 
multiagent systems 

 one for each node  and add a constraint which says that the only possible future networks are those in  mem . 
last  but not least  w e know that the probability of each future network is at least 1. this gives us: 
for any ne 
	if 	mem   then cons dp ne  denotes the set 
of all such constraints.1 we can use con s{dp. ne  to determine lhe survival probability of a given deployment. 
definition 1 givena network ne  a disconnect probability function dp  and a deployment fi  we say that the probability 
ofsurvival of // 	is given by the following linear program: 
minimize is a deployment p r o b subject to  
the solutions of cons dp.ne  are possible probabilities of possible future networks arising. clearly  any of these probability assignments is possible. the objective function above adds the probabilities of all possible future networks where at least one copy of each agent in mas survives. this expression must be minimized because different solutions of cons dp.ne  assign different values to this sum - as any of these solutions is possible  the only guarantee we can give about survivability of // is that it exceeds the minimal such value. 
computing optimal deployment  cod  problem. given a network ay  and a disconnect probability function dp  find a deployment whose probability of survival is maximal. 
this is the key problem that we will solve. 
1 	computing the survival probability of a deployment 
a naive way to find the probability of survival of a given /i is to solve the linear program of definition 1 using classical linear programming algorithms  hillerand licberman  1; karmarkar  1 . however  the size of the linear program involved in enormous. our compute deployment probability  cdp  algorithm will avoid this problem. cdp uses a function called hoc which takes an agent a  a network  a   mem   and a deployment /i as input  and returns the set of all nodes such that  as output. one way of pruning the search is to use the following results. 
proposition 1 suppose mas is a multiagent application and ne is a network and suppose there is at least one multiagent application deployment for mas on ne. further sup-
pose that for all agents a  mem . then there exists an optimal multiagent deployment /i has maximal prob-
ability of survival  such that for all agents aj  1  the set of locations of agent ai according to is not a strict subset of the set of locations of agent a1 according to  
the above result says that when trying to find an optimal multiagent deployment /x  we must ensure that no agent is located in a set of nodes that is a strict subset of the set of nodes that another agent is located in. as we shall see  this property allows us to prune our search a fair amount. before describing our algorithm  we need to introduce some notation  
 an agent a is relevant w.r.t.  if there is no other agent which is deployed at a strict subset of nodes at which a is deployed  ra denotes the set of relevant agents w.r.t. . ne. 
	the necessary nodes of ne w.r.t 	is 	- 
. nodes in 
 	which no relevant agents are deployed are not important. 
the following theorem says that survivability is unaffected if we get rid of unnecessary nodes. 
theorem 1 suppose mas is a multiagent application   mem  is a network  dp is a disconnect probability function and ft is a feasible multiagent application deployment for mas on mem  where then 
proof sketch. it is easy to see that it is enough to show the claim for the case that only one node is removed from   when constructing ne'. without loss of generality  let us assume that  . we make the following observations: 
is feasible w.r.t  iff 
consists of n equations  
one for each node. c  ns dp.ne'  docs not include an equation for n  and thus includes n - 1 equations. 
 we use p r o b  resp. p r o b   to denote the probability function in cons dp ne   resp. cons dp ne'  . 
consider the equations w.r.t.  for both afeand i w   both equations have the same left side  viz. . the right side of the relevant equation in consists of elements of the form p r o b 	in 
cons dp ne'  the corresponding equation consists of elements of the form p r o b '  
　　　　　　　. thus for each element in an equation of cons{dp: ne'  of the form p r o b ' there are exactly two terms in the corresponding equation in cons{dp:ne : one of the form prob n''  and the other of the form p r o b  
 similarly  if the minimization expression with respect to ner is of length  i.e. number of terms  k  then the minimization expression with respect to ne is 1a;. in particular  for each p r o b   a f     there are two terms in the minimization expression of the form probxa/ 1 '  and prob'  
we are now ready to prove our claim. suppose the minimization problem is solved with respect to ne  we set p r o b ' + p r o b . it is easy to see that based on our observations that cons dp nef  will be satisfied and the values will minimize the relevant expression. 
   suppose the minimization problem is solved with respect to ne'. in this case  we add the following equations to cons dp ne :  i  prob'i  = p r o b p r o b   ii  we replace each expression in 
the minimization expression of the form prob a/*   -f prob a  ; / u {ni}  by p r o b '  it is easy to see that the minimization expression is identical to the one associated with ne' and all the constraints of cons{dp nt  except the first one are identical to those of cons dp nef  and are satisfied. hence  it is left to show that the constraint associated with n  is satisfied. 
	this constraint is 	of the 	form: 	1 - dp jvi  
   the net impact of this theorem is that only necessary nodes need to be considered. we demonstrate this using exampie 1. 
example1 	consider 	the 	deployment 	of example 	1. 
agent d is deployed at nodes {ri1  n1  n 1 } and c is deployed at nodes {ri1  n1}. clearly  c is deployed at a strict subset of nodes at which d is deployed. in order for the deployment to survive in a given possible future networkone of the nodes on which c is located  n i or n$ must stay connected. but then d will also be deployed in the new network. however  if n stays connected in a future network  but neither ri1 nor n1 stay connected  the deployment will not survive. thus  based on theorem 1 when computing the survivability of the de-
ployment  there is no need to consider d and n . 
all 
hltset   
intuitively  the hitting sets above describe minimal sets of nodes that must be present in a possible future network in order for the multiagent application to survive. we will use hitting sets to determine whether a deployment w.r.t. ne can be a deployment w.r.t. a possible future network. this intuition leads to the following algorithm cdp. 
algorithm 1  cdp ate dp mas    
	1. 	return the result of the following linear program. 
minimize subject to 	cons dp ncf . 
cdp works by first focusing on the necessary nodes. then  for each agent a  mas'  all nodes where that agent is located are identified. it then computes all hitting sets of these nodes. for any possible future network it checks whether one of the hitting sets is a subset of the nodes of the network. it is easy to see that cdp is exponential in the number of the necessary nodes. the following example illustrates the working of this algorithm. 
example 1 in example 1  there were no constraints on the dependencies of the disconnect probabilities of the nodes. suppose we know  in addition  that the probability that both 
multiagent systems 
nodes n   n  get disconnected is 1  i.e. 
1. in this case we should consider all possible future networks whose set of nodes is not a superset of sets are m1 and n1 of example 1. thus  the new constraint isp1 +p1 =1. 
　if we run the linear program ofexample 1 again with the additional constraint  the results are as follows: /  
pq = 1  ; 1 = 1  pi = 1 p i = 1  p1 = pa = p& = 1 which yields the minimum value of 1 for the objective function. 
1 	computing optimal deployments 
we are now ready to develop algorithms to find an optimal multiagent deployment. we first present the c o d algorithm to compute optimal deployments. we also prcsenttwo heuristic algorithms  h a d l and h a d 1   which may find suboptimal deployments  but do so very fast . 
1 	the c o d algorithm 
one may wonder if c o d can be solved via a classical problem such as facility location problem  flp ishmoys et ai  1 . in flp  there are a set of facility locations and a set of consumers. the task is to determine which facilities should be used and which customers should be served from which facility so as to minimize some objective function  e.g. sum of travel times for customers to their assigned facility . one may think that we can directly use flp algorithms to solve c o d - unfortunately  this is not true. 
theorem 1 the problem of checking if a mad-deployment p is optimal is npnp-hard. 
this theorem says that even if we have a polynomial oracle to solve np-complete problems  checking if a m a d deployment is optimal is still np-hard i in fact  it is easy to reduce the facility location problem to that of finding an optimal deployment. even if we have an oracle for facility location  the mad-deployment problem is still ntp-hard. 
   computing an optimal mad-deployment involves two sources of complexity. the first is the exponential space of possible deployments. the second is that even if we have a given deployment  finding its probability of survival is exponential. 
   thus  to solve c o d exactly  we do a state space search where the initial state places all agents in a multiagent application mas on all nodes of the network ne. if this placement is a deployment  then we are done. otherwise  there are many ways of removing agents from nodes and each such way leads to a possible deployment. the value of a state is the survivability of the state  which can be computed using the cdp algorithm. as soon as a deployment is found  we can bound the search using the value of that deployment. the reason is that given any state in the search  all states obtained from that state by removing one or more agent has a lower survivability than the original state. before presenting the c o d algorithm  we first present the search routine used by it. 
algorithm 1 search  
 lnput: i a network ne ==    
we are now ready to present the c o d algorithm. 
algorithm 1 cod 1ve dp masj 
a network ne =  a/  mem  
the correctness of c o d depends on the correctness of bounding the search in step 1 of algorithm 1. we present the correctness result below. 
theorem 1 suppose mas is a multiagent application  ne =  a/  mem  is a network and dp is a disconnect probability function. then cod 1ve  dp. mas  returns an optimal deployment of m as on ne. 
   the astute reader may notice that cdp is computed for every placement. many of these placements are very similar to each other. hence  one may wonder whether it is possible to use the results of computing cdp applied to a previous placement to a placement that is very similar to the previous placement. the two propositions below show that this can be done. 
proposition 1 suppose mas is a multiagent application  ne =  jv/*  mem  is a network and dp is a disconnect probability function. suppose the placement was obtained from the placement fi in step1 b ia of algorithm 1 and suppose ne' =  jsp  mem   such that n* = nn 1ve  . then the set of hitting sets with respect to and ne' is a subset of the set of hitting sets with respect to and ne. that is  hs  
the following example demonstrate a situation where hs  
example1 supposed = {'/*i y*1 '*1}/ mas = {a 1 c} 
subject to cons  dp  ne . 
1. return p and h; 
the search and c o d algorithms need to be modified in a straightforward way to use cdpl - we do not go through the details for space reasons. 
1 	heuristic algorithms 
in this section  we describe two fast heuristic algorithms  h a d l   h a d 1 . h a d 1 iteratively solves knapsack problems  cormen et a/.  1  by trying to pack nodes with low disconnect probability first. 
algorithm 1 h a d l  we dp  mas; 
as in algorithm cod  1 . 
we have implemented all the algorithms described in this paper. for space reasons  we only present experimental results on the heuristics for computing optimal deployments. 
   in our experiments  we varied the number of agents and the number of nodes. for each combination of agents and nodes  we ran several trials. in each trial  we randomly generated the memory available on each node  the node's disconnect probability  and the memory required for one copy of each agent. the experiments were conducted on a linux box  using red hat 1  enigma . in all the experiments the number of nodes1- agents varied between 1 and 1. we randomly 
multiagent systems 


figure 1: heuristic comparision: top figurc:-computation time  in miliseconds  as the function of the sum of the number of nodes and agents. bottom figure: survivability as a function of the sum of nodes and agents  agents. the lighter line and the darker line refer to the nodes-based and agentbased heuristics  respectively. 
generated numbers between 1 and 1 as the disconnect probability of each node. the sizes of the agents were uniformly distributed between 1 and 1  units ofmemory and the sizes of the nodes were uniformly distributed between 1 and 1  units of memory . 
   the top graph of figure 1 demonstrates the time efficiency of both heuristics: they can find a deployment for 1 agents and sites in under a second. 
when comparing h a d 1 and h a d 1   we noticed that 
 see bottom graph of figure 1 :  i  as the sum of the number of agents and nodes increases  the survivability decreases.  1  the node based heuristic almost always finds better deployments than the agent-based heuristic. in addition   1  when there are more agents than nodes  the node based heuristic will require less time  while when there are more nodes than agents the agent based heuristic will take less time. 
   the intuition behind observation  1  is as follows. as the number of agents increases  it becomes more difficult to maintain the feasibility of the system  and thus survivability decreases. in addition  when the number of nodes increases  there are more possible future networks and thus  the probability that there will be one network with a low probability increases. since  the survivability depends on the worst case  its value decreases. 
1 	conclusions 
as more and more agents are deployed in mission critical commercial  telecommunications  business  and financial ap-
multiagent systems 
plications  there is a growing need for guarantees that such multiagent applications w ill survive various kinds of catastrophes. the scope of the problem is so vast that any one paper can only make a small dent in this very important problem. 
   in this paper  we have carved out such a small piece of the problem. specifically  we study the problem of how to deploy multiple copies of agents in a mas on nodes so that the probability of survivability of the mas is maximized. we provide a formal  mathematical model for probabilistic mas survivability  and develop an optimal algorithm for this purpose a* well as some heuristic algorithms. we have conducted experiments showing the effectiveness of the approach. 
