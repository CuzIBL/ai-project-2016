 
we investigate two realizations of parallel abductive reasoning systems using the model generation theorem prover m g t p . the first one  called the m g t p + m g t p method  is a co-operative problem-solving architecture in which model generation and consistency checking communicate with each other. there  parallelism is exploited by checking consistencies in parallel. however  since this system consists of two different components  the possibilities for parallelization are limited. in contrast  the other method  called the skip method  does not separate the inference engine from consistency checking  but realizes both functions in only one m g t p that is used as a generateand-test mechanism. in this method  multiple models can be kept in distributed memories  thus a great amount of parallelism can be obtained. we also attempt the upside-down metainterpretation approach for abduction  in which top-down reasoning is simulated by a bottomup reasoner. 
1 	introduction 
abduction  an inference to explanation  has recently been recognized as a very important form of reasoning for various ai problems that deal with commonsense knowledge as well as scientific and engineering knowledge. for example  in diagnosis  plan recognition and design  when we observe the behavior of a system  we want to identify the hypotheses that can explain the observation. also  in natural language understanding  sophisticated user interfaces and communication among intelligent agents  it is recognized that an explanatory capability may play a 
   * address after april 1: department of information and computer sciences  toyohashi university of technology  1 hibarigaoka  tempaku-cho  toyohashi 1  japan. 
   +current address: department of information engineering  university of industrial technology  1-1 hashimotodai  sagamihara  kanagawa 1  japan. 
   ++ address after april 1: department of computer science and intelligent systems  faculty of engineering  oita university  1 dannoharu  oita-shi  oita 1  japan. 
1 	automated reasoning 
crucial role  charniak and mcdermott  1 . one of the most popular formalizations of abduction in ai defines an explanation as a set of hypotheses that  if combined with the background theory  logically entails the given observed formula. this deductive-nomological view of abduction has enabled abduction to be implemented using deduction  in particular with resolution-based proof procedures. along this line  there have been a number of resolution-based abductive systems  pople  1; cox and pietrzykowski  1; poole et a/.  1; stickel  1; demolombe and farinas  1; inoue  1 . 
   thus  we can expect that studies on automated abduction may fill the gap between traditional  fast deductive techniques and more advanced  al-oriented cornmonsense reasoning. from the viewpoint of automated deduction and theorem proving  however  automated abduction is a hard and challenging problem. this is because: 
1. abduction is not a proof-finding problem but a consequence-finding problem  see  inoue  1  . 
1. usually  each abductive explanation is required to be consistent with the background theory. while consistency checking is expensive  undecidable in general   it is essential for some practical applications of abduction  design problems  for example   since we are interested in systems that can reject inconsistent theories to obtain acceptable theories. 
   in this paper  we propose several techniques for implementing abduction that use fast deductive techniques to realize fast abductive systems. in particular: 
1. we provide new implementation methods for abduction using model generation theorem provers such as those in  manthey and bry  1; fujita and hasegawa  1l . instead of finding some logical consequences of the given axioms  our methods generate some models of such formulas. 
1. these methods are implemented in parallel on a parallel inference machine. parallelization is an important source for realizing faster abduction. 
1. top-down  goal information is incorporated in these bottom-up procedures. this is an extension of the magic set method for deductive databases  bancilhon et a/.  1; bry  1  to deal with abduction. 
we use the parallel model generation theorem prover 
m g t p  fujita and hasegawa  1  that is implemented in the parallel logic programming language k l 1  ueda and chikayama  1 . since the m g t p can be used for both testing the  un satisfiability of an axiom set and generating the minimal models of a range-restricted axiom set  every function necessary for abduction can be realized on it. to this end  we show two different program transformation methods each of which converts an ab-
ductive problem into a model generation problem. the basic idea behind such a transformation has also been employed to compute stable models  gelfond and lifschitz  1  of general and extended  disjunctive  logic programs in  inoue et al  1a . 
   this paper is organized as follows. in sections 1 and 1  abduction and the m g t p prover are summarized. section 1 presents two realizations of parallel abductive systems using the mgtp. in section 1  we evaluate these systems by applying them to a logic circuit design problem. some extension of the presented abductive systems and related work are discussed in section 1. 
1 	abduction 
the definition of abduction we consider here is similar to that proposed in  poole et al.  1 . an abductive framework is a pair w h e r e i s a set of formulas  the background theory  and t is a set of literals  the hypotheses or abducibles . let g be a closed formula  the goal . a set e of ground instances of t is an explanation of g from 
an explanation of g is minimal if no proper subset e' of e is an explanation of g. 
   the computation of explanations of g from  can be seen as an extension of proof-tin ding by introducing a set of hypotheses from v that  if they could be proved by preserving the consistency of the augmented theories  would complete the proof of g. alternatively  abduction can be characterized by a consequence-finding problem  inoue  1   in which some literals are allowed to be hypothesized  or skipped  instead of being proved  so that new theorems consisting of only those skipped literals are derived at the end of deductions instead of 
just deriving the empty clause. in this sense  abduction can be implemented by an extension of a top-down  backward-chaining theorem-proving procedure. for example  theorist  poole et al.  1  and sol-resolution  inoue  1  are extensions of the model elimination theorem proving procedure  loveland  1 . 
   however  there is nothing to prevent us from using a bottom-up procedure to implement abduction. in fact  we have developed an abductive reasoning system called a p r i c o t / 1  ohta and inoue  1   which consists of a forward-chaining inference engine and an atms  reiter and de kleer  1 . the atms is used to keep track of the results of inference in order to avoid both repeated proofs of subgoals and duplicate proofs on different hypotheses deriving the same subgoals. 
   thus  the two reasoning architectures  top-down and bottom-up  are complementary  yet both have merits and demerits for computing abduction. as inoue  pointed out  sol-resolution is direct in the sense that it is both sensitive to the given goal clause and restricted to searching only those formulas consisting of candidate hypotheses only. however  top-down reasoning may result in redundant proofs of subgoals. on the other hand  bottom-up reasoning eliminates redundancy  while it may prove subgoals unrelated to the proof of the given goal. 
   these facts suggest that it is promising to simulate top-down reasoning using a bottom-up reasoner  or to utilize cached results in top-down reasoning. the former simulation has been proposed for definite horn databases as the magic set  bancilhon et a/.  1  or upside-down meta-interpretation  bry  1  methods. as stickel  argues  this approach is better for abduction than the simulation of bottom-up reasoning by a top-down reasoner. this is because caching is more complicated and less effective for abduction since the search space for abduction is larger than that for deduction. therefore   stickel  1  attempts the upside-down metainterpretation approach for abduction for horn and nonhorn clauses. while stickel does not consider the consistency of abductive explanations in his procedure  his approach has been extended to abduction for horn clauses by incorporating consistency checking for a parallel version of a p r i c o t / 1 in  ohta and inoue  1 . 
1 	mgtp 
this section outlines the model generation theorem prover m g t p  fujita and hasegawa  1; inoue et al.  1a  on which our parallel abductive systems are based. the m g t p is a parallel and refined version of satchmo  manthey and bry  1   which is a bottomup model generation theorem prover that uses hyperresolution and case-splitting on non-unit derived clauses. 
   each clause in an axiom set input to the m g t p is expressed in the form: 

   1we have also developed several parallel abductive systerns using the mgtp other than the two described in this paper. see  inoue et al.  1b . 
   

   
let g = sneeze  tom  be the observation. using the 
mgtp  two minimal models containing g are obtained from 
by extracting the abducibles from m  and m1  we can 
1 	upside-down meta interpretation for abduction 
as discussed in section 1  bottom-up abductive systems can enhance their efficiency by incorporating the goal information and by simulating top-down reasoning. here  we present two program transformation methods based on upside-down meta-interpretation  udm  approaches defined by  bry  1; stickel  1 . we first apply such a udm transformation to the input clauses generating  then further transform by using a transformation for the mgtp+mgtp method or the skip method defined in previous subsections. 
¡¡the first transformation  called the simple udm transformation  transforms each definite clause of in the form: 

into the clauses: 

in this method  the mgtp operations are applied for clause  1  only when goal c  is present. 
goal c  invokes the subgoals of  1  by deriving every goal ai . thus  top-down reasoning is simulated in a breadth-first manner. 
¡¡for each negative clause we can apply the above transformation used for definite clauses. then  since the consequent of a negative clause is empty  we supply  goal ai  for every ai. this means that any subgoal in every negative clause is evaluated. however  as ohta and inoue  pointed out  many negative clauses are irrelevant to finding explanations of the given goal from the abductive framework in general. if we evaluate all the subgoals in all negative clauses  the udm method cannot achieve speedups compared with non-controlled bottom-up abduction. to overcome this difficulty  we restrict the evaluation of negative clauses to those clauses relevant to the goal by using the abstracted dependency analyzer  ohta and inoue  1  that ana-
lyzes logical dependencies between the goal and negative clauses at the abstract  e.g.  predicate symbol  level. 
the second transformation  called the left-to-right 
udm transformation  simulates top-down reasoning in such a way that for clause  1  each subgoal goal a i +i   is invoked only after the previ-
ous subgoals goal a   ... goal a i   have been solved. thus  this method simulates ordered-linear resolution in a depth-first manner. in this method  each clause of 
1 	evaluation 
this section presents an evaluation of two abductive systems  the mgtp+mgtp method and the skip method  by applying them to a design problem. the problem is to design a logic circuit that calculates the greatest common divisor  gcd  of two integers expressed in eight bits by using the euclidean algorithm  maruyama et a/.  1 . the solutions are those circuits satisfying the given constraints on the basic cell count and delay time  the areatime limit . there are several kinds of knowledge on the design of circuits  about 1 clauses : datapath design knowledge  i.e.  how to construct a gcd circuit by combining components  at the top level  component design knowledge  e.g.  a subtractor can be constructed from the combination of a one's complement circuit and an adder  at the next level  and technology mapping rules 
 e.g.  an adder can be constructed from a series of some cmos standard cells  at the low level. the problem can be represented as abduction  in which we assume that some combination of components may satisfy all constraints. thus  if hypotheses derive a contradiction with 
   

	figure 1: 	execution time  circuit: 	limit 1  

	figure 1: 	speedup ratio  circuit: 	limit 1  
the background knowledge  we see that the sub-design violates some constraints. 
   table 1 shows the experimental result of two abductive systems at run time on the p i m / m parallel inference machine developed at icot. the area-time limits are set in three ways  1ns  1ns and 1ns . in order to evaluate two u d m methods  we also solved a subproblem  the design of subtractors  of the entire problem  the design of gcd circuits . 1 
   as shown in the table  the run time for designing subtractors in each system is  as expected  much shorter than that for designing g c d circuits  since the reasoning is directed to the given subgoal. however  for the 
1
¡¡¡¡in order to avoid possible combinatorial explosion caused by generating many redundant model candidates containing non-minimal explanations  we introduced some negative clauses that can be generated automatically by analysis in the skip method. see  inoue et o/.  1b  for details. 
skip method  the simple u m d transformation works better than the left-to-right u d m transformation  indicating that the left-to-right simulation of top-down reasoning increases the sequential processing more than the breadth-first manner. 
   figure 1 shows the run time graph for the design of gcd circuits with a 1ns limit  which is obtained by varying the number of available processor elements  pes  between 1 and 1 on p i m / m . figure 1 displays the speedup ratio for the same problem when running two abductive systems. all reasoning tasks split with disjunctions are automatically allocated to the available number of processors. as shown in these figures  the skip method provides better parallelism as well as faster abductive reasoning than the m g t p + m g t p method. 
1 	final remarks 
we have presented several new program transformation techniques for fast  parallel and bottom-up abduction. first  we have converted the horn abductive problem with consistency checking into model generation problems in two ways. second  we have applied the two kinds of upside-down meta-interpretation transformations to abduction to incorporate top-down information. although we need to further investigate how to avoid possible combinatorial explosion in constructing model candidates for the skip method  we conjecture that the skip method will be the most promising from the viewpoint of oil-parallelism. 
   for related work on computing abduction using a model generation theorem prover  denecker and de schreye  recently proposed a proof procedure for object-level abduction defined in  console et a/.  1 . their abduction does not consider the consistency of explanations. but  in contrast to us  they compute the models of the only-if part of a completed program that is not range-restricted in general even if the original definite clauses are range-restricted. to this end  they have to extend the model generation method by incorporating complex term rewriting techniques  while we can use the original m g t p without change in the skip method. 
   while we restricted the abductive framework  ¡ê  t  to a pair of horn clauses and atomic abducibles  we can consider an extension of abduction which captures nonmonotonic and default reasoning. then  another important advantage of the skip method is that it may easily be combined with negation as failure so that knowledge bases can contain both abducibles and negation-asfailure formulas as in the framework of  kakas and mancarella  1 . this extension of the abductive framework by incorporating negation as failure is formally discussed in  inoue and sakama  1 . 
   finally  efforts should be also devoted to investigating extensions of bottom-up first-order abduction to deal with non range-restricted  non-horn clauses and literal abducibles  which can be dealt with by a top-down approach like sol-resolution  inoue  1 . an example of bottom-up abduction for non-horn clauses without consistency checking can be found in  stickel  1l   which uses contrapositives in the form of definite clauses. this technique may be incorporated for the m g t p + m g t p 
   
method with consistency checking. one difficulty lies in the fact that  since the definite transformation using the meta predicate fact does not involve any case-splitting as is the case in the mgtp+mgtp method  it needs and-parallelisin  hasegawa et al.  1  for speed-up. 
acknowledgment 
we wish to thank mark stickel and francois bry for useful comments on earlier work. we would also like to thank all the members of icot pab  parallel abduction  working group for discussions on this work. 
