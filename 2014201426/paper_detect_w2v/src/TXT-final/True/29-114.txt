 
the paper describes a transition logic  tl  and a deductive formalism for it. it shows how various important aspects  such as ramification  qualification  specificity  simultaneity  indeterminism etc.  involved in planning can be modelled in tl in a rather natural way.  the deductive formalism for  tl extends the linear connection method proposed earlier by the author by embedding the latter into classical logic  so that classical and resource-sensitiv reasoning coexist within tl. the attraction of a logical and deductive approach to planning is emphasised and the state of automated deduction briefly described. 
1 	introduction 
artificial intelligence  ai  or intellectics  bibel  1a   aims at creating artificial intelligence. were there no natural intelligence  the sentence would be meaningless to us. hence understanding natural intelligence by necessity has always been among the goals of intellectics  and is also the goal of cognitive science . 
　different points of view for approaching the goal of creating artificial intelligence have been distinguished  kushmerick  1 . logicism  nilsson  1l   cognitivism  laird et a/.  1   and situated action  agre  1  are three out of several such points of view. in a nutshell  the logicistic point of view argues that man can describe his creations  including an artificial intelligence  only by natural linguistic  hence logical means; thus any way towards artificial intelligence must in some sense be a logical one. this author is strongly committed to the logicistic approach. as a consequence he believes that any other approach is in fact a logicistic one in disguise. 
　intelligence has many features. clearly one of them is the ability to plan ahead in time. intuitively  planning is logical reasoning of some kind. all the more one might expect that planning is the domain where logic and its deductive machinery excel. the fact is that it does not. there are many software systems in everyday use solving planning tasks  but to the author's best knowledge none of them is based on logic and has a deductive component. does this imply that logic is irrelevant for planning and for artificial intelligence for that matter  
　while intelligence implies the ability for planning  the converse has not necessarily to be true. it very much depends on what kind of planning is meant. in a fixed and relatively restricted domain  such as text layout  planning may well be realized in a purely functional way and with standard programming techniques. but functional  or procedural  programming has its limits as we enter more complex and unpredictable domains; in particular it will never be able to produce a behavior which rightly deserves to be named  intelligent   surely as a user of computers you noticed the stupidity of text layout systems . section 1  as well as numerous texts in the literature  give arguments for this statement. it also gives reasons which explain the resistance of the software industry to a bolder move into a logic technology for planning and for other applications. in other words  logic is essential for intelligent planning in the true sense of the term  but industry is not ready to build intelligent systems. 
　it is not the task of intellecticians to lament about this state of affairs but rather to prepare for the coming day when the market will be ripe for a broader use of a truly intelligent technology and to develop the best possible technological basis for it. in fact  if we are frank there is yet a lot to be developed before we can comfortably go out to industry and offer a coherent set of methods for dealing with the many facets of intelligence including planning. 
　in the present paper i review the state of the art in deductive planning with an emphasis on the contributions from research groups influenced by my own work. while much of the work in deductive planning has focused on representational issues we have always approached the problem with the necessary and available deductive techniques in mind. since the methods and systems growing out of our work have finally achieved a leading position in the deduction community by winning the cade-1 competition in automated theorem proving with the setheo system  lets et a/.  1; moser et a/.  1   we are perhaps also well placed to import the best possible techniques into the planning 
	bibel 	1 
community. in other words  the paper will focus on deductive planning as well as on the underlying deduction techniques. since the author sees planning as just one among a number of aspects for achieving artificial intelligence  the case for deductive planning is presented in this paper in form of a paradigm case for achieving the grander goal of artificial intelligence. the paper will therefore not only point the way to intelligent planning but to some extent also the author's proposed way to artificial intelligence  the  it  in the title . 
　in the next section we introduce the logical language used in our approach and discuss the deductive aspects thereafter. the resulting computational logic is called transition logic  tl  which has classical as well as resource-sensitive features. section 1 shows what tl has to do with planning and computation  or with temporal prediction or postdiction for that matter . section 1 compares the logic with other known logics. section 1 shows how the various aspects involved in reasoning about actions and causality can be taken into account within tl. specifically  we discuss ramification  qualification  specificity  simultaneity  in determinism  continuity  hierarchies etc. finally  we briefly describe the tensions between the specialistic and logistic approaches in ai and explain it by outlining the underlying pattern. 
given the impressive recent achievements in automated deduction we conclude with making a case for a logical path towards an artificial intelligence. 
1 	a logical language 
any textbook on ai also contains some introduction to first-order logic so that we may assume the reader to be familiar with it. only to communicate our notational conventions we mention that there are objects named by constants  a b c    n-ary  functions named by function symbols  f g h  and  n-ary  relations named by predicate symbols  p  q  r . terms  r  s t   built from variables  x y  z  ranging over objects   constants and function symbols  again denote objects. literals  k  l  are relations among objects or the negation  thereof. they correspond to simple factual sentences in natural language  such as  john is married to the mother of but . 
　for building more complicated sentences represented as formulas  f  g  h  we use the well-known classical  logical  operators  as well as the resource-sensitive operators &  non-idempotent conjunction   |  non-idempotent exclusive disjunction   and  transition . the latter need explanation which follows. 
　the language of predicate logic has been designed to express natural language sentences formally and unambiguously. this was done in a biased way since many of those involved in the design  such as frege  frege  1   had mainly sentences of a mathematical nature in mind. sentences involving actions were not taken into serious consideration until the publication of the situation calculus in 1  mccarthy and hayes  1  in which any n-ary relation p is extended to an  n + 1 -ary one by 
1 	invited speakers 
an argument for determining the situation in which the relation is meant to hold  see section 1 . 
　natural language apparently does not need such an extra vehicle. a  static  mathematical sentence  such as  if a number is greater than zero then it is positive   looks exactly like a  dynamic  one about actions  such as  if i take the book then it is mine  . in  bibel  1a  the main idea for a logic has been outlined which resembles natural language more closely in this aspect of treating actions than does the situation calculus. the approach then was called linear connection method or shortly lcm; for the logic we introduce here on the basis of lcm we propose the name transition logic or tl. the idea underlying lcm spawned a great number of studies based on this idea such as  fronhofer  1; bibel et a/.  1; holldobler and schneeberger  1; grofie et a/.  1; bruning et a/.  1; 1; holldobler and thielscher  1; 1; grofie et a/.  1; fronhofer  
1; herrmann and thielscher  1; thielscher  1; eder et a/.  1; thielscher  1b; bornscheuer and thielscher  1; thielscher  1a  to mention several of them. here facts may be treated as resources which may be consumed by actions. two different formalisms are used to achieve this. one  tl  employs the additional set of resource-sensitive operators &  |   just introduced  the other achieves their effects on the term level of classical logic as we will see in section 1 . 
　a rule k  l  called an action  or transition  rule  or effect axiom   models an action which consumes k and produces l. for instance  

can be seen as the equivalent in tl of the situation calculus rule 

in classical logic  is equivalent with l according to the rule of idempotence. in real-world scenarios it does matter  however  whether you have the same thing  say a dollar  once or twice. similarly  it does matter whether you take your dollar or mine. that is why we need the two extra operators &  | which behave just like their classical counterparts  except for the rule of idempotence  which does not hold for them  and for | modelling an exclusive  rather than an inclusive  alternative. in consequence  we will not have the law of distributivity which allows | to be distributed over &. 
　formulas built from literals by means of the quantifiers and the resource-sensitive operators only are called r-formulas  r-formulas without | are also called conjunctive r-formulas. general formulas of tl are r-formulas  and any expression built from those by means of the classical operators. for instance  is an r-formula  hence a formula  is a formula but not an r-formula  and is not a formula  nor an r-formula  
since the definition does not allow classical operators  other than quantifiers  below a resource-sensitive one in the formula tree. an r-subformula which is not a proper subformula of an r-subformula is also called an r-part in the given formula. 
s 	basic deductive machinery 
we will deal in this paper with a restricted class of r-formulas only which have the form 
	h whereby 	does not oc-
             semantic entailmentfor the resulting class of formulas will be introduced only informally. holds if f is classically endepending of the state 
reached by not performing or performing the transition  in the r-part which  if executed  consumes k 
and produces l. 
　as we see two different states  say  are to be distinguished in this example  the one before and the other after the transition. semantic entailment is dependent on these states. for instance  we might write 
 as more tran-
sitions get involved we obtain more such states to be distinguished.1 validity   is then defined as usual. section 1 will resume the discussion of the semantics of tl while in the present section we focus on its deductive aspects. 
　as the original name of our approach  linear connection method  lcm   suggests  the basic deductive ma-
chinery is based on the connection method  bibel  1; 1 . this deductive method is characterized by the fundamental theorem which in turn characterizes validity of a formula by the so-called spanning property explained shortly. many different logical calculi can be based on this method. 
　in order to explain the spanning property we need the concepts of a path through a formula and of a connection. a path through a formula f is the set of literals of any conjunct of the conjunctive normal form of f. paths can best be illustrated if formulas are displayed as matrices. matrices  positively  represent disjunctions of clauses which in turn represent conjunctions of literals  or  in general  matrices . consider the formula 
  expressing the well-known logical 
rule of modus ponens . 	in negation normal form the 
same formula reads  which is a disjunction of three clauses. hence as a matrix it looks as follows. 

as an aside we mention that a rotation of this matrix by 1＜  counterclockwise  basically yields the corresponding prolog program except for the differences due to the negative representation used in prolog. 
     1  thielscher  1a  gives a precise semantics which  however  needs adaption to tl and the view just outlined. 

a path through such a matrix  or the formula it represents  or the corresponding prolog program  is now the set of literals obtained by selecting exactly one literal from each clause  or  in other words  traversing the matrix say from left to right . in the present example there are exactly two such paths  namely and  the disjunction of the literals of these two paths are obviously the disjuncts of the conjunctive normal form of 
　a connection is a subset of a path of the form {r  - r } . there are two connections in our present example illustrated as arcs in the following display. 

a set of connections  or mating  is called spanning if each path through the matrix contains at least one connection. this is the case for the two connections of our example  hence the formula is  of course  valid according to the fundamental theorem mentioned at the outset of the section. recall that the matrix form is used just for illustration and is thus not essential for the connection method. the connections  and the spanning property  could as well have been identified in the original formula as follows. 

a chain of two  or more  connections like the two displayed in the matrix may thus be regarded as an encoding of one  or more  applications of modus ponens. this illustration also demonstrates that it is connections which lie at the heart of deductive reasoning  more so than rules like the  in the example . in some sense a connection may also be seen as an encoding of an application of the well-known resolution rule. so far connections have been illustrated for propositional examples. they apply to first-order formulas in the obvious way  connecting literals with opposite signs and unifiable terms. an example is the following matrix. 

here validity is established by the two spanning connections along with the substitution x a  which makes the connected hterals complementary. 
　up to this point we have restricted our discussion to deduction for purely classical formulas. the characterising spanning property carries over to the case of general 
	bibel 	1 

formulas in our logical language with one minor modification to be explained shortly. in fact  if we take the r-formula  as our first example then we may use exactly the same matrix as the one before to represent the formula in a two-dimensional way. in fact  in spite of the modification in the formula exactly the same proof for validity is obtained. 

in order to distinguish it from the classical matrix we use a box rather than brackets. one should note  however  that the semantics of the operations represented by the structural arrangement this time is quite a different one. as in the classical case the matrix representation is more of an illustrative relevance  since the connections also here could as well have been placed in the original formula. 
　let us now consider a general formula like  which in its classical part 
expresses that p' is just another name for p and which is represented by the following matrix. 
clear if we add another p to the present r-formula  ie. 
p& p& which intuitively is valid as just illustrated and compare its proof 

with the previous one. in the latter matrix each literal is contained in at most one connection while in the former this linearity restriction in its original form  bibel  1a   is not satisfied because the literal  is contained in more than one  namely in two connections. to cover the general case considered in the present paper this linearity restriction needs a more general definition. 
　for that purpose we inductively introduce the concept of the directionality1  for consumption  and 1  for resource  of the nodes in the formula tree of an r-formula. the root has directionality 1. if a node with directionality d is labelled by & or by | then its successor nodes have the same directionality d; if it is labelled  then the directionality of the left successor node is  d + 1  mod 1 while that of the right successor node is d. the directionality partitions the occurrences of literals in an r-formula  or r-matrix  into resource literals if their directionality in the formula is 1  and consumption literals if it is 1. we attach this directionality to a literal if needed as an upper index. in all our matrix examples the directionality is 1 for a negated literal and 1 for an unnegated one. 
　these definitions go a bit beyond what is intended with this paper simply because they are novel and have not been published before. in fact it could well be that 

they need further adjustment once the structure of formulas and their semantics are finally settled. we just mention here that the definitions aim at yielding the 
1 for simplicity we do not box the literals  which formally 
are r-parts  in the classical part. 	1note that directionality is not the same as polarity. 
1 	invited speakers 

fundamental theorem according to which a formula f is valid if  some compound instance f' of  f has a spanning and unifiable mating which satisfies the linearity restriction and has no  regular  fronhofer  1   cycles within any of m's r-parts. since none of our examples will need compound instances we refer to the atp literature for the respective details  eg. see  bibel  1  . 
　none of our examples has cycles. therefore we ignore this technically intricate issue and refer the interested reader to  fronhofer  1  for the details. all matrices considered so far satisfy also the linearity restriction except the one just discussed in which the directionality-1 literal -p is the start of two different r-chains  each with one connection  if the matrix is regarded as an r-matrix. the restriction is also satisfied in the matrix associated with the general formula 
q  shown above since each of the two directionality-1 literals is start literal of exactly one r-chain  namely of 
the r-chain rchains with more than one connection may be regarded as theory connections  bibel  1  while within an rmatrix any r-chain has exactly one connection. 
　a more complex example derived from the previous one  namely 
as in the example before the linearity restriction is fulfilled in its spanning mating for the two resource literals of its r-part. 	the same is true for the forand and 
in line with intuition none of them satisfies the linearity restriction. 
　the solution presented here and illustrated with these examples informally was already given in  bibel  1a  where it reads:  the linearity restriction applies to connections with one element in a transition rule only  not to those possibly required for additional 'static' reasoning in the usual way . the generalized definition of the linearity restriction just presented also covers the case of disjunction |  which has been the topic of the publications  grofie et al.  1; bruning et a/.  1; 1  where a different solution based on the restriction in its original form has been offered.1 we illustrate our solution for the formula  with the following matrix. 
     1 in contrast to these papers we introduced disjunction as a non-idempotent operation here. 

each of the four resource literals is the start literal of exactly one r-chain  each with exactly one connection. so the linearity restriction is satisfied in this spanning mating although the literal r is contained in two different connections thus violating the restriction in its original form. 
　just for simplicity we kept all our examples at the propositional level. in general  formulas may include quantifiers which require the additional property of unifiability of connected literals. otherwise everything goes as described. in the presence of quantifiers we may also consider more than one instance of a given action rule each of which is to be treated as a separate rule just like the ones in our examples so far. 
1 	planning  temporal projection  and postdiction 
planning is the main topic of this paper. so what has the formalism  tl  introduced in the last two sections to do with planning  well  given an r-formula description of an initial state  say p   of a goal state  q   and of the possible actions in terms of r-implicational formulas  p =  q   then all we need to do is to activate a theorem prover for tl. any proof it finds represents a plan which satisfies the description. the actions determined by the plan are those action rules used in the proof. their order of execution is determined by the chains of connections establishing the proof from the initial to the goal situation. 
for instance  consider the formula 

it may be interpreted as dressing one's left  p  and right  q  foot  index 1  with a sock  1  and a shoe  1 . there are no alternate choices for the 1 connections which establish the proof for this formula  so the reader may easily identify them. as these connections prescribe  the 
p1-rule must precede the pi-rule and similarly for the q-rules. on the other hand the p-connections are independent from the q-connections in terms of any order. so the plan leaves open in which order the actions for the left and right foot are mixed together which may therefore be determined arbitrarily. that is  the resulting plans are partially ordered ones as is desirable for applications. 
for the formula its five connections establishing va-
lidity determine a linearly ordered plan since the second rule can only be executed after the first one. the formula may be interpreted as the adultery drama by drew mc-
dermott  personal communication  whereby a husband 
	bibel 	1 

 p  shoots his rival  and then h i m s e l f a n d not the other way round  which obviously would not yield a proof in our logic. 
　for decades formalisms for planning were plagued by the notorious frame problem  mccarthy and hayes  1 : how to characterise the  frame  of an action  ie. everything not affected by the action. the aspects of the frame problem now called representational and in-
ferential frame problem  russell and norvig  1  are no problems any more in our formalism  which is in stark contrast to the most popular competitor  namely the situation calculus  see section 1 . in fact  lcm has been the first method which actually solved these aspects of the frame problem and did so in the optimally possible way. 
   so our logic and its deductive machinery are fully appropriate for solving planning tasks of the sort considered so far. in certain contexts one might expect an explicit answer  ie. a concrete plan. for that purpose  bibel  1a  introduced state literals  s x   which keep trace of the states passed through while executing a plan. this also requires that an action rule such as the suicide killing rule above would read s x  & p =  s suicide x  &-p. by unification the variable denoting the goal situation will then along with a successful proof always provide a term which expresses the linearized sequence of actions. in this option the planning system might compute all possible proofs and offer all corresponding plans as alternatives. the option also allows for multiple copies of action rules  by way of the quantifier involved  if needed  the way mentioned at the end of the last section.1 
　there are modes other than planning which are of interest in our context. one such mode is called temporal projection: given the initial state and the sequence of actions  determine the resulting state. or  in another mode called post diction  one would like to determine the initial state in order to explain with it the observed outcome of a sequence of actions. since theorem provers can be used in all these modes as well  namely theorem checking  ie. planning   proof checking  ie. temporal projection   abduction  ie. a form of postdiction   all these and other modes can of course be modelled by proof systems for tl. that is  the deductive approach is as versatile as one would wish. 
1 	semantics and alternative formalisms 
in principle there are two ways to provide the logic tl introduced in the previous sections with a precise semantics  the direct and the indirect one. in  bibel et al.  1  the direct route has been taken. informally  we may think of a kripke-style semantics with an actual and further worlds. whenever a proof activates a rule with a =  the transition from the premises to the conclusion amounts to a transition from the present world to 
     1  an alternative for this consists in the introduction of the exponential ! from linear logic which would specify if rules can be used abitrarily many times. 
1 	invited speakers 
some next one which differs from the present one only in the changes specified by the rule. this has already been illustrated at the beginning of section 1 with a simple example. 
　the indirect way to specify a semantics consists in embedding tl in an existing formalism for which a semantics is already known. in the next and the third subsection we describe two formalisms which were used for this purpose. otherwise the section compares tl with several related formalisms. 
1 	t l a n d l l 
a very close relative of tl is linear logic  girard  1  which was first published about two years after the first publication of lcm  bibel  1b   predecessor and part of tl. 1 we briefly summarize what is known about the relationship of tl with linear logic  ll . 
   for that purpose we restrict the language of tl to its r-formulas only and refer as rtl  or lcm for that matter  to this restricted part of tl. 1 further we consider only r-formulas without | and refer to crtl to this part of tl. theorem 1 in  fronhofer  1  states  among other things  that crtl and the multiplicative part of ll with the exchange and the weakening rule  also known as  classical  bck  restall  1   or affine logic   amount to the same thing  in terms of derivability . a similar result was obtained in  grobe et a/.  1 . its theorem 1 states  among other things  that crtl and conjunctive linear theories as defined in  masseron et a/.  1  on the basis of ll amount again to the same thing  in terms of derivability . in other words  tl and ll more or less coincide in their multiplicative parts so that crtl may inherit its semantics from ll  gallier  1l .1 although it has not been shown in detail  it is conjectured that these results may be generalized to rtl. in fact  ll is as expressive as tl since classical logic can be embedded in ll  girard  1 . on the other hand  we have proposed for practical purposes a much more restricted class of formulas both by definition of tl itself and by the restriction of the formulas in its r-part. finally  ll's proof nets are but another name of lcm's spanning matings satisfying the linearity restriction  with the minor difference that not all literals need to be connected in lcm  an advantage of lcm or tl over ll again from a practical point of view . in summary  although tl is a linear-logic-type of logic it offers more attractions than ll for practical purposes. 
　to  fronhofer  1  we owe much of the formal background. for instance  its chapter 1 provides a formal 
   1  only later it became clear that  larabek  1  as well as relevance logic  anderson and belnap  1  are important 
predecessors of lcm as of linear logic. 
   1  on the other hand we dispense for the discussion in this section with the restriction on the formula structure introduced at the beginning of section 1. 
   1 note that we did not follow the unintuitive notation used in ll: tl's &  | correspond to ll's  respectively 
 while the two remaining binary junctors of linear logic can be defined in terms of these three ones . 
justification of our use of the matrix representation  for crtl at any rate . there is a slight difference between the linearity restriction used in the present paper and the corresponding restriction in theorem 1 of  fronhofer  
1 . the latter uses the restriction in its original form  mentioned in section 1 . 
1 	t l a n d s t r i p s 
many planning systems are based on the strips formalism introduced in  fikes and nilsson  1 . this uses operators defined by schemas using precondition  add  and delete lists. as an example consider the following move-operator in a blocks world. 

in tl's notation the same is expressed as 
clear x  & on x  y  & clear x  =  
c l e a r   x   & o n   x   z  & clear y  
the preconditions here are the same as in pre above and the postconditions include all literals from add which both is true in general. in tl all preconditions are consumed  ie.  deleted   so that there is nothing like del. in compensation non-deleted preconditions have to be stated explicitly again in the postcondition. as mentioned in the previous section the name of the operator could optionally be integrated in the rule within the state literal not shown here for simplicity. in summary  crtl may be regarded as an approximate logical version of the strips formalism.1 in other words  tl inherits all advantages from strips but as an additional feature it has also the expressiveness of classical logic. 
1 	t l a n d t h e f l u e n t calculus 
in  holldobler and schneeberger  1  a classical calculus  in the meantime named fluent calculus  fc   has been introduced  which represents the manipulations of actions on the term level of classical logic. this is done in the tradition of representing the object-level of a calculus logically at the meta-level  see eg.  kowalski  1    illustrated with the previous blocks example. 
　predicate symbols such as move  clear or on become functional symbols  say mv  cl and on  respectively. the logical operation & is represented as a functional as well  say o. the entire action is then a formula action c  a  e  which reads as follows. 

as can be seen it specifies the preconditions  the name and the effects of the action in an equational setting. the transition result s a  $'  from the state s to the state s' 
1
　　section 1 in  fronhofer  1  gives examples which demonstrate that the correspondence is not an exact one. caused by the action a is represented by the following formula. 

note the variable z summarizing the part of the state not affected by the action. planning problems are stated in this approach by a goal literal asking for a plan  ie. a sequence of actions  which transforms the initial state  a term like the ones shown  to the goal state on the basis of a theory  ie. a logic program  which describes all possible actions and specifies the properties of o appropriately  associative  commutative  non-idempotent  neutral element . more details on fc can be found eg. in  thielscher  1b . 
　the main advantage of fc is that it has a standard classical semantics. further  the resulting programs can be run by any equational prolog system. it is not clear at this point whether these advantages outweigh the obvious disadvantages of a representational and computational nature. any unbiased reader will agree that the last two formulas specifying the result of an action is awkward and much harder to read than the corresponding formula in tl shown further above. while appropriate interfaces for casual users may provide a remedy for this  researchers and programmers have still to work on this representational level. 
　the already mentioned theorem 1 in  grobe et a/.  1  also states that crtl and the  conjunctive  fluent calculus just presented amount again to the same thing  in terms of derivability  thus indirectly providing a classical semantics to tl. somehow one might be able to generalize the fluent calculus to model the full tl. future practice has to determine which of the two will eventually prevail. 
1 	s i t u a t i o n calculus a n d others 
the most popular formalism for representing actions is clearly the situation calculus  mccarthy and hayes  1  described in any standard ai book such as  russell and norvig  1 . again this is just a classical predicate calculus  with its standard semantics  which encodes the change from one situation to the next in the form of an effect axiom by an extra parameter $ in each fluent predicate such as on above. in addition one needs numerous frame axioms  or alternatively successor-state axioms  reiter  1l  which combine effect and frame axioms in an elegant way. one of the main attractions of all formalisms mentioned so far  ie. lcm  tl  ll  strips  fc  is that no such additional axioms are needed at all which clearly impede the efficiency of any implementation of the situation calculus. for a more detailed comparative analysis of this drawback see  fronhofer  1 . 
　given that planning occurs in time it is not surprising that temporal or dynamic logics offer the potential for formalizing planning. one such approach for reasoning about plans and its properties  ie. not for planning itself  using dynamic logic is reported in  stephan and biundo  figure 1: an electric circuit consisting of a battery  two switches  and a light bulb which shines if the two switches are in the upper position. 
1 . in addition there are numerous variants of the formalisms mentioned so far. the most noteworthy of these in terms of performance is the satplan system which encodes planning within the strips formalism as a satisfiability problem in classical propositional logic  kautz 
et a/.  1 . 
1 	modelling action and causality 
providing a deductive formalism for planning is one thing; a different is to show how it is used to model the various aspects underlying actions and causality. in the present section we will discuss the most important among these aspects and show how tl is able to deal with them. although we always take the planning for illustration  it should be clear that all the other modes of reasoning discussed in the previous section are handled similarly. 
1 	ramification 
it is said that the wing-stroke of a butterfly might be the cause of a tornado somewhere else on the globe. human reasoning is clearly unable to consider such remote consequences. rather we assume the law of persistence  which states that nothing is changed by some action except for the changes caused directly by it and by the indirect but overseeable consequences from these. the problem how to compute such indirect consequences is called the ramification problem. consider the electric circuit depicted in figure 1 for illustration.1 
　we tacitly assume that there is voltage. the depicted state can formally be captured as  now assume we toggle s1 by means of the action described as  in tl. the resultant state s1 & s1 & -l 
is inconsistent with physics which teaches that in consequence of this action also light will go on. the problem is how a planning formalism may cope with this ramification. we present here a solution which is similar in spirit to the one in  thielscher  1b  but accommodated to tl's  rather than pc's  formalism. 
   1 the discussion in this section closely follows  thielscher  1b  from which the examples are borrowed. 
obviously  we need an additional action of the form which causes light when-
ever both switches are on without changing the state of the switches. further we must teach the reasoning mechanism that  i  this latter action is never activated except in consequence of toggling one of the two switches and  ii  the action is indeed activated whenever its conditions become fulfilled by toggling one or the other switch. there are many ways to implement the control of the proof mechanism specified by these two points. we describe here a rather simple one which does the trick along with a general control specification. 
　in this simple solution the transition rules are partitioned into primary and secondary ones. the primary rules are our action rules considered so far. the secondary ones are called causal rules and are characterised by the occurrence of so-called causal literals  denoted as lc  among the actions preconditions. in our example both switches are causal for the light to go on. hence the rule along with this additional control information now reads  in the initial situation as well as in any situation resulting from a primary action all causal rules are activated whose causal conditions became true in the situation either directly by the action or indirectly by the activation of causal rules. that is  any action  including the one  leading  to the initial situation  triggers the activation of causal actions until a stable state is reached. we refer to this as the causality-has-preference strategy  or cp for short. 
　in our example the light action is not applicable in the initial state. but once the s1-rule is activated the causal rule follows suite according to cp so that the resulting state becomes  as expected. 
the complete formal description of the example would thus altogether have four  primary  rules for opening and closing the switches and three causal rules  namely  and the one already pre-
sented. 
　an immediate objection to this solution might be that the transition rules will become cumbersome as the number of conditions increases. among others it is here where our general approach pays off. namely  we may of course abbreviate these conditions by a definition in the classical part of the formula  say  and thus reduce any such transition rule to something like 
	specifying the conditions  under 
which there will be light  can of course not fully be dispensed with. but there is a full range of varieties how this may be done. for instance  it may be broken down into a set of rules in the present case: current causes light; if  there is voltage and  the circuit is closed then there is current; if the circuit except for s1 is closed and s1 is closed then the entire circuit is closed; and so forth. 
　cp has been tested for a number of examples discussed in the literature  also for those where other methods have failed  thielscher  1b . for instance   ginsberg and smith  1  handles already the given example incorrectly. the remedy suggested in  lifschits  1  is insufficient either as the extended circuit depicted in figure 1 


figure 1: an extended electric circuit  which includes a third switch  s1  and a relay r  which attracts switch s1 if activated. 
demonstrates. 
the depicted state can formally be captured as 
ie. the re-
ie. the relay ie. light goes 
on. closing s1 in the current state causes light  rather than s1  to open which suggests that s1 be a frame fluent in the sense of  lifschitz  1 . on the other hand  closing s1 in the state depicted in the figure results in an activation of the relay and  in consequence  in s1 opening which suggests that it be a non-frame fluent. in other words  lifschitz' categorization of fluents does not work in this example. we need to categorize the actions into primary and secondary ones  rather than the fluents  as done in the solution presented in this section. 
　in  thielscher  1a  an example of two coupled switches  if one is closed or opened the other follows suite  is given which demonstrates that indeed we need distinguish the preconditions of causal rules into causal and conditional ones as we did. the coupling rules are 
 logi-
cally the preconditions of the two rules are identical  but only the first is triggered if s1 is closed and only the second if s1 is opened as desired. 
1 	q u a l i f i c a t i o n 
although we have now a formalism which is capable of modelling actions and their concequences  there are still a number of additional issues to be considered before we can expect the formalism to play a crucial role in the reasoning of an intelligent agent. in the present section we will show how to deal with situations where certain transition rules normally available should reasonably not be applied. 
　in all previous examples we tacitly assumed that the actions are executable. in reality this assumption often depends on numerous conditions  too many in fact to be checked in detail. switches can be brocken  circuits cut  light bulbs be damaged  and so forth. how to deal with this infinity of possibilities is known as the qualification problem  mccarthy  1 . there is a rich literature on non-monotonic reasoning coping with this problem  bibel et a/.  1 . tl opens a new way to deal with the problem. why not using tweety again to illustrate it. 
　tweety is a bird  bt  as well as a penguin  pt . birds fly  f  and have wings  w . penguins are exceptional birds in that they do not fly which we express as a transition rule in the following valid formula. 

the technique introduced in the previous section guarantees that the transition rule is triggered to achieve sort of an update in the form of a pseudo-causal effect which prevents the wrong conclusion of tweety flying. 
　the technique is applicable even beyond nonmonotonic reasoning because we may additionally account for causal relationships. the solution is again adapted to tl from  thielscher  1 's fc using the example discussed there in great detail. 
　assume we want to start the car's engine   e . this might be prevented by a potato in the tail pipe   t   which clogs   c   it. in order to put the potato into the tail pipe  one must lift it which again may be prevented if it is too heavy   h . the point of the example is twofold. first  we normally expect to be able to start the engine and to put a potato into the tail pipe unless there is reason to believe otherwise. following mccarthy's idea we therefore additionally introduce an abnormality fluent for the two actions  ie. a  and ap. so the start action reads and the put action 
the clogging is a causal conse-
quence of the potato in the tail pipe  hence we also have the causal rule 
　the second aspect illustrated by the example is that we obtain unintuitive results if we simply minimize the truth of the abnormality predicates as done in nonmonotonic reasoning of a non-causal nature  thielscher  1 . this is because the successful execution of an action  like putting a potato into the tail pipe  may change the state of our beliefs in the executability of other actions  like starting the engine . in other words  we additionally need a causal rule  for 
changing the state of abnormality under such circumstances. similarly  we have the causal rule 

   among all occurring fluents f a subset  is singled out whose members are initially assumed not to hold  by default. in the present example we have  in accordance with the example's intentions. of these as many as consistent with the available knowledge are  assumed away   ie. their negation is included in the specification of the initial state/ 1 
　if nothing specifically is known about abnormalities then starting the car will work by way of the start action and the given knowledge. if a potato is known to be  or by the appropriate action is put  in the tail pipe then 
   1  for the precise definition of the underlying model preference see  thielscher  1 . 
both clogging and a  becomes a causal consequence by the corresponding causal rules. similarly  in the case of too heavy potatoes this is prevented to happen by the causal rule which makes ap true. in other words  with the formal model presented here the reasoning leads to the expected consequences under all circumstances. 
1 	specificity 
if you hold  h  a penny  p  and drop it  it will end up lying on the floor  f ; ie. the drop action may be described as  if you drop a fragile  or breakable  b  glass  g  rather than a penny  it will be broken  or destroyed  d  afterwards  ie.  how 
should a system distinguish the two cases and correctly choose the latter action in the case of a glass in hand  ie. an initial state described by 
　 holldobler and thielscher  1; 1  give an easy solution for this problem. if in a given state more than one rule applies  the control of the deductive system prefers the most specific one  referred to as the more-specific-has-priority  or sp  strategy. thereby  r% is 
called more specific than  and some r-formula 
associativity and commutativity of &   . 
　since obviously  the system will indeed choose the right action in our illustrating example if its control is determined by sp. 
1 	t i m i n g o f actions 
in order to achieve goals in a dynamic world the required actions often need to interact in a timely way. for instance  think of a table with glasses on it which needs to be carried in another corner of the room by two agents. if the persons do not lift the table simultaneously  the glasses will fall down and break. how could an appropriate timing be achieved in tl  
　similarly as in  bornscheuer and thielscher  1  we introduce a compound transition rule for any two  atomic or compound  transition rules a compound rule  as any rule  represents an action whose parts are carried out at the same time. to model our example  the two ends  t1 and t1  of the table initially are standing on the floor  st1 & st1. the compound rule is the most specific rule in this scenario which is applicable to the initial state. hence the sp strategy from the previous subsection will choose it thus leading to the desired state of holding the table at both ends at the same time after lifting it simultaneously. this illustrates one solution to the question raised above. 
　a different solution may be obtained by introducing time explicitly and thus force actions to occur at a certain time point  eg. at the same time . since communication of information is an action as well  we may model the negotiation and the agreement over a certain time point t1 for lifting the table ends among the two agents. in this case the lifting rule might look like 
 each agent would be pro-
vided with an initially synchronized and ticking clock   and this way each could make sure 
that it lifts the table end at the agreed time. 
   if for other applications we need to fix the time point of states occurring during the execution of an action  we may break up and partition the action  for 
instance  into initial situation  action event  and resultant situation  
thereby n is a unique n-ary predicate serving as the name of the event occurring during the action  and n is the number of variables involved in the rule. 
1 	i n d e t e r m i n i s m 
planning supports a more rational behavior. yet it is a feature of live that much will remain unpredictable. rational planning must therefore take indeterminism into account explicitly. 
　there are different kinds of undeterminism. no one  for instance  achieved so far to determine in a reliable way the outcome of throwing a dice in advance. hence the throwing action has an undetermined outcome  1 | 1 | 1 | 1 | 1 | 1 . similarly  we must account for our ignorance of the details of the physics determining the outcome of many actions in reality. we may think of nature as an agent whose intentions we know only up to a certain degree in these cases. as the example demonstrates  tl is able to model such examples to some extent. in a more elaborate approach one would have to integrate probabilities and possibilities into tl the way already achieved for classical logic  see section 1 in  bibel et al.  1  for more details and references . 
　nature is more predictable than other agents such as human beings where probabilities might not help either. here we must take into account even contradictory actions. for instance  if you try to open  o  a closed  c  door  c =  - c   which some other agent simultaneously tries to keep closed from the door's other side  c =  c  the compound action formalizing the two simultaneous 
actions  does lead to nothing explicitly. from a practical point of view we may exclude connections within the same situation such as the one in the conclusion of this rule  and go on with the reasoning in spite of the contradiction. in fact we may even teach the system to consider either outcome of the conclusion in such a case  cf. also  bornscheuer and thielscher  1  . 
1 	miscellaneous 
it is clear that planning cannot be treated exhaustively in a single paper. in fact we believe that a number of important issues have yet to be settled before an autonomous agent built on the basis of tl  or any other formalism for that matter  will behave intelligently in a dynamic and uncertain environment. we conclude this entire section  therefore  with just mentioning a few further issues which would merit a more extensive treatment were there further space available. the list is certainly not a comprehensive one. 
　deductive planning will have to take into account important features from classical planning in some way. an 

example for these are causal and protected links  russell and norvig  1 . often such features are already supplied by the deductive engine itself. for instance  a 
causal link is just a connection and protecting them is subsumed by any sophisticated proof strategy designed to identify a spanning mating as efficiently as possible. in particular if a causal link is the only one to achieve a certain subgoal then we have exactly what in automated deduction is known under the term isol reduction  bibel  1 . since reductions are not reconsidered in any deductive system  link protection is taken care there automatically. 
　hierarchical planning is of crucial importance for successful applications. in our view it is a matter of structuring the knowledge base containing action descriptions and of controlling the deduction engine. for instance  at the highest level  1  we would have actions of the sort  go from here to the train station    on the 
next level of detail  1  the system would try to refine the 1-level rule with l-level rules such that altogether the same global effect is achieved  ie. 
 a related solution has been worked 
out for fc in  eder et a/.  1 . 
　in dynamic environments any plan is bound to fail to some extent. it is therefore essential to be able to react to such failure with efficient replanning. this requires among other things a technique for the manipulation of partial plans  lindner  forthcoming 1; wilkins et a/.  1 . 
　autonomous agents need to carry out their planning under strict time constraints. a logical solution for this particular problem has been proposed in  nirkhe et a/.  1  which could be adapted to tl. 
　in reality we have to cope with continuous processes while it seems that tl could cope with discrete actions only. modelling continuous processes within a logic has become an active area of research though. one issue concerns the partitioning of such a process into reasonable discrete parts  herrmann and thielscher  1 . another issue concerns the integration of differential equations and their computation within a logic such as tl. 
　as a final point we mention that tl may also be seen as a logical version of an imperative programming language. for instance  destructive assignment x := t may be modelled as the transition rule cont x t   an attractive potential of tl as a future logic programming language. 
1 	the case for logic 
intellectics as well as computer science are general disciplines whose generic methods turn out to be applicable in many different areas. for instance  expert system technology has successfully been used in a great variety of applications. the logical approach within intellectics  as within computer science  is even one level more general than the remainder of this field. in theory  generality wins in the long run  in practice specialization always wins in the short run. these facts explain why engineers are extremely skeptical with general approaches such as the logical one. in fact  there is still some resistance even against the less general areas in intellectics or computer science. the facts also explain why the following pattern in the history of intellectics may be observed. 
　some subject - eg. knowledge representation in the early seventies - gains in importance for applications. the engineers are the first to notice the need for activity and start developing specialised solutions. as soon as preliminary solutions are emerging the logicists get notice and claim their competence in the subject due to the logical generality - cf. the kr debate in the midseventies. overwhelming theoretical evidence supporting the claim is provided by logicists over the subsequent years which finally leads to its acceptance  as it happened for kr in the eighties and is currently happening in the case of planning . yet the logical approach is still not entering the engineering practice because it is believed to lack efficiency in comparison with specialised systems. eventually  someone in automated deduction disproves this belief experimentally  see eg.  paramasivam and plaisted  to appear 1j in the case of kr . nevertheless the well established tools persist in applications for obvious reasons. 
　logicists deplore the time  lost  by the multiple development of the same techniques in many disguises and dream of a state of the art were all these myriads of manyears invested into the advancement of logical tools. for each application they are bound always to come too late in competition with the specialists. this is not only because there are always more specialists than logicists  but also because the logicists face far more complex problems to be solved than the specialists due to the generality of their approach. 
　the pattern just described will not be changed by the complaints of the logicists. but change it will for the following reasons. the applications of ai techniques are all rather limited in scope so far. there is still no technological push towards more generally intelligent systems. only when such a push sets in will generality count in a crucial way. intelligence has so many aspects that no individual  group of  specialist s  will ever be able to build systems featuring more than one or two of these aspects. rather a truly intelligent system will require the incorporation of knowledge available only through a great many specialists which cannot be realized by the present technology of systems building. 
　this current technology is intrinsically functional. any complex system consists of numerous modules which functionally depend on each other. that means that there must be at least one single person who oversees the whole  at least at some level of abstraction. this in turn means that the present technology is limited to the extent that single persons can cope with the complexity of systems. a breakthrough is needed before this barrier is overcome. it will happen by way of the logical approach since only logic features the property of conjunctivity  vs. functionality : a logical specification remains a specification if additional knowledge is added conjunctively to it. this way many people may contribute their knowledge in the most natural form into a common system which would then be synthesized from the joint specification in a rather formal  ie. again logical  manner  bibel  1b . section 1 demonstrates a bit of this nature of logic since there we have drawn from knowledge in a number of different areas of intellectics. much progress will be needed before this may happen on a grander scale. yet the progress made so far in the field of deduction is promising indeed  as can be seen from numerous results achieved lately. 
　among these the success of the system eqp/otter stands out which automatically found a proof for the conjecture that any robbins algebra is boolean  a mathematical problem which was open for more than sixty years  mccune  1 . from a technological point of view systems such as setheo  moser et al.  1  or komet  bibel et al.  1  have even an advantage against 
otter  in the case of setheo demonstrated by its first place in the atp competition during cade-1  and have thus the potential for more such striking results. before concluding this paper we give pointers to impressive results of a different sort from the area of planning. 
   section 1 in  fronhofer  1  describes a simple and straightforward implementation of crtl on top of setheo  called linear backward chainer  lbc . the performance of lbc/setheo is then compared there with a widely used specialised planning system  ucpop  penberthy and weld  1 . in these experiments with randomly generated blocks-world problems with five to seven blocks lbc/setheo outperforms ucpop by several orders of magnitude. because tl is so close to classical logic it can take advantage from the cumulative investment in advanced deductive systems for classical logic such as setheo  which can serve as the logic engine in an expert system or as a theorem prover or as a planner or what have you. note that no specialisation to planning whatsoever is encoded in this approach. 
　similarly  but even more impressively   kauts and selman  1  coded one of the best specialized planning systems  graphplan  blum and furst  1   as a propositional satisfiable problem which is then solved by one of the best complete satisfiability algorithms  tableau  crawford and auton  1   or  alternatively  by the authors' walksat  a stochastic local search algorithm for solving sat problems. the experiments outperform any known planning system by several orders of magnitude. note that this performance again is achieved by general logical systems which were used for a variety of other purposes. it would be interesting to see how a first-order prover such as setheo would fare for the specialized coding used in these experiments. 
　these successes show the way to future progress in ai: invest as much as could reasonably be afforded into the advancement of deductive techniques and systems like tableau  setheo  or walksat; code your special problem as efficiently as possible like in graphplan; run the deductive system of your choice. in particular let's forget about specialized programming! rather let us program deductively; let us plan deductively; above all  let's attack the challenge of creating artificial intelligence in a logical and deductive way! 
acknowledgements. the author is indebted to his students and collaborators for their continuing support. in particular  i want to thank bertram fronhofer  steffen holldobler  enno sandner and michael thielscher  but also vladimir lifschitz for numerous discussions and suggestions concerning contents and text of this paper. 
