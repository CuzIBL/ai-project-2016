 
the structural rigidity property  a generalization of laman's theorem which characterizes rigid bar frameworks in 1d  is generally considered a good approximation of rigidity in geometric constraint satisfaction problems  gcsps . however  it may fail even on simple gcsps because it does not take geometric properties into account. in this paper  we question the flow-based algorithm used by hoffmann et ai to identify rigid subgcsps. we show that this algorithm may fail because of the structural rigidity  but also by design. we introduce a new flow-based algorithm which uses jermann et al.'s characterization of rigidity. we show that this algorithm is correct in 1d and 1d  and can be used to tackle the major issues related to rigidity: deciding whether a gcsp is rigid or not and identifying rigid  or over-rigid  subgcsps. keywords: geometric constraints  rigidity characterization  flow algorithms 
1 	introduction 
geometric constraint satisfaction problems  gcsps  arise naturally in several areas  such as cad  robotics and molecular biology. the rigidity concept is in the heart of many of these problems: deciding whether a gcsp is rigid or not  detecting rigid or over-rigid sub-parts  and so on. 
　several methods  kramer  1; bouma et ai  1; dufourd et ai  1; lamure and michelucci  1; hoffmann et ai  1; jermann et ai  1; jermann  1  for solving gcsps have to deal with rigidity; e.g.  geometric decompositions produce sequences of rigid subgcsps to be solved separately and then assembled. 
　the techniques used for rigidity detection can be classified in two categories: pattern-based approaches  bouma et al  1; kramer  1  depend on a repertoire of rigid bodies of known shape which cannot cover all practical instances; flow-based approaches  hoffmann et ai  1; lamure and michelucci  1  use flow  or maximum matching  machinery to identify subgcsps verifying the structural rigidity  a property based on a degree of freedom count. 
　the latter approaches are more general eventhough structural rigidity is only an approximation of rigidity. heuristics  
constraints 
bertrand neveu and gilles trombettoni coprin team  inria-i1s/cnrs-cerm1cs  1 route des lucioles  bp 1  
　　1 sophia antipolis  france e-mail: bertrand. neveu sophia . i n r i a . fr  
gilles.trombettoni c sophia.inria.fr 
like ad-hoc geometric rules  have been proposed to enhance structural rigidity capabilities  none of which succeeded to cover the gap between structural rigidity and rigidity. in  jermann et al  1   we have defined the extended structural rigidity  a new approximation of rigidity which supersedes even the heuristically enhanced characterizations. 
　in this paper  we focus on the algorithmic aspects of the structural characterization of rigidity.  hoffmann et ai  1  have proposed a flow-based algorithm called dense for this purpose. after providing the necessary background  section 1   we exemplify the limits of this algorithm and the capabilities of our new algorithm  section 1 . section 1 presents the specificities of our new algorithm and explains its advantages: it uses the extended structural rigidity instead of the structural rigidity and it is designed in a geometrically correct way. to conclude  we explain how this algorithm can be used to tackle the major issues related to rigidity. 
	1 	background 
this section provides the necessary background for the paper. it formally defines gcsps  the rigidity concept and the structural characterizations of rigidity. 

　fig. 1-a presents a gcsp in 1d composed of 1 lines constrained by 1 parallelisms and 1 line-line distances; fig. 1-b 
1 

depicts a gcsp in 1d composed of 1 line and 1 points bound by 1 point-line incidences and 1 point-point distances. 
　we assume that geometric objects are indeformable  e.g.  no circle with variable radius . also geometric constraints must involve only positions and orientations of the objects and they must be independent from the global reference system  i.e.  constraints only fix objects relatively one to another . these limitations make the structural characterizations of rigidity easier and are mandatory for geometric solving methods based on rigidity. 
　according to these restrictions  a solution to a gcsp s -  1  c  is composed of one position and orientation for each object in o and satisfies all the constraints in c. for the solving purpose  a gcsp is translated into a system of equations: each object is represented by a set of unknowns  over the reals  which determine its position and orientation; each constraint becomes a system of equations on the unknowns of the objects it constrains. 
1 rigidity 
rigidity is defined w.r.t. movements. a movement in a gcsp is either a deformation  if it does not preserve the relative positions of the objects  or a displacement  rotation+ translation . intuitively  a gcsp is rigid if it admits no deformation  and all the displacements of the geometric space. it is under-rigid if it admits some deformations  and over-rigid if it does not admit some displacements or has no solution. more formal definitions of rigidity can be found in whiteley  1 . 
　in fig. 1-b  the subgcsp cdf is rigid since a triangle is indeformable and admits all translations and rotations in 1d. the subgcsp af is under-rigid: point f can move independently of line a since there is no constraint between them. the subgcsp acdef is over-rigid since it has no solution: generically  it is impossible to place a point at the intersection 

1 	extended structural rigidity 
the extended structural rigidity  es  rigidity in short  is based on the degree of rigidity  dor  concept. the dor of a subgcsp is the number of independent displacements it admits; it depends on the geometric properties it verifies. for example  the dor of two lines in 1d is 1 if they are not parallel  1 if they are parallel; the parallelism property can be an explicit constraint  but it can also be induced by the constraints of the gcsp embedding these lines. in this second case  computing the dor may be equivalent to geometric theorem proving. 
　the principle behind the extended structural rigidity is the following: a gcsp is rigid if all its movements are displacements. hence  comparing its dof to its dor allows us to determine if it admits movements  dof  which arc not displacements  dor   i.e.  deformations. 


of the 1 spheres  = 1 distance constraints  which centers are aligned. 
1 	structural rigidity 
the structural rigidity corresponds to an analysis of degrees of freedom  dof  in a gcsp. intuitively  one dof represents one independent movement in a gcsp. more formally: 


figure 1: object-constraint networks and flow distributions 

1 	overview 
in this section  we exemplify the contribution presented in this paper on the gcsps in fig. 1. we illustrate the two main differences between algorithm dense and our algorithm: 
1. in our algorithm  the overflow depends on the geometric properties of the objects it is applied to  while it depends only on the dimension of the geometric space in dense. 
1. in our algorithm  the overflow is applied via a dedicated node r which can be attached to any subset of objects  while it is applied directly via one constraint-node in dense. 
example 1 
the first example  fig. 1-a; in 1d  highlights the first difference. fig. 1-a presents the object-constraint network associated to this gcsp. in this picture  one can see the overload a' = 1 applied on the first constraint by algorithm dense. this constraint is linked to two lines  a and b  which are parallel and lie at prescribed distance in the plane; ab is a rigid subgcsp. however  one can easily see that the overload cannot be distributed completely since a capacity 1  two constraints plus the overload  is applied to two lines having only 1 dofs. hence  the gcsp is identified as over-rigid since it contains a sub-gcsp with less than 1 dofs. 
　fig. 1-b displays our algorithm behavior when the virtual constraint r is linked to the same subgcsp  ab. the value of the overflow k is computed according to the geometric properties of these lines: since they are parallel  k = 1  instead of 1 in algorithm dense . thus  the flow can be saturated: a capacity 1  two constraints plus the overflow  exactly matches the 1 dofs of ab; the gcsp is not identified overrigid by our algorithm. further overflow applications would allow to identify the gcsp as well-rigid. 
example 1 
the second example  fig. 1-b; in 1d  illustrates the second difference. its object-constraint network is depicted in fig. 1-
d. this figure shows the application of an overflow 1 via the virtual constraint 1  onto the 1 points c  e and f by our algorithm; the overflow cannot be distributed completely  which signals an over-rigid subgcsp: acdef  found by adding reachable objects from r in the residual graph. 
　algorithm dense applies the overflow directly through a constraint-node. since all constraints are binary in this example  dense cannot apply an overflow to the same set of ob-
jects as our algorithm. more generally  dense cannot apply the overflow to all subgcsps and can miss rigid or over-rigid ones. moreover  applying the overflow 1 to a pair of objects in this gcsp leads to an incorrect answer  as it was the case in the previous example; e.g.  segments which are rigid would be identified over-rigid. 
　these examples show that some simple and very common subgcsps in 1d and 1d  like parallel lines  triangles or segments  cannot be treated correctly by algorithm dense1. 
　in the following section  we detail the differences between algorithm dense and our new algorithm and we present their consequences. 
1 	algorithms 
in this section  we present hoffmann et al.'s dense algorithm in comparison to our new algorithm. both use flow machinery on the object-constraint network representing the gcsp. our algorithm has two main differences with algorithm dense: 
  it uses es rigidity instead of s rigidity. 
  it distributes flow in a geometrically correct way in the network. 
　these new features are achieved thanks to two major modifications in the d i s t r i b u t e function used by dense  sec beginning of section 1 . 
　we introduce first the principle of flow-based characterization of rigidity; then we present and discuss function d i s t r i b u t e which is the key to our contribution. finally we explain how this function is used to design algorithms for the main problems related to rigidity. 
1 	flow-based rigidity detection 
from the geometric point of view  the principle of structural characterization of rigidity is to check if a gcsp admits only displacements. hence  flow-based rigidity identification can be understood as follows: 
   'in practice  sitharam  1   dense embeds heuristic rules to prevent this kind of simple failures  but more complicated examples can still mistake the algorithm since no rule-based approach can handle all the singular cases. 

constraints 	1 

1. remove k displacements from the gcsp by introducing a' dofs on the constraint side; 
1. check if an over-constrained subgcsp s' exists by computing a maximum flow in the overloaded objectconstraint network; 
1. if so a  verifies dof s'  k 
　indeed  a maximum flow in the object-constraint network represents an optimal distribution of the dofs of the constraints among the dofs of the objects. if it does not saturate all the arcs outgoing from the source  some constraints' dofs cannot be absorbed by the objects  i.e.  the gcsp is over-constrained. in this case  there exists a subgcsp s' such that dof s   1. when an overflow k is applied in the network on the constraint side  the identified subgcsp s' verifies dof s   a'.  hoffmann et al.  1  have proven that s' is then induced by the objects traversed during the last search for an augmenting path  i.e.  by the objects reachable from the overloaded constraint-node in the residual graph. 

1 	function d i s t r i b u t e 
function d i s t r i b u t e  hoffmann et al.  1  implements the principle presented above. we present our version of this function and explain why and how it differs from hoffmann et al. 's one. 
　as already said  applying an overflow a corresponds  from the geometric point of view  to removing a' displacements from the objects linked to this constraint. but nothing ensures that the subgcsp linked to a single constraint allows a' independent displacements: removing k dofs from a subgcsp is  with dor s'  k is geometrically incorrect1. 
　for instance  consider a subgcsp composed of 1 points linked by a point-point distance in 1d. this gcsp allows only 1 of the 1 independent displacements  1 rotations * 1 translations  of the 1d space since they lack the rotation around the line going through them. therefore  removing 1 displacements from a couple of points is geometrically incorrect. however  hoffmann et al.'s function d i s t r i b u t e does so when the distance constraint binding the two points in 1d is overloaded with a' = 1. 
　in order to distribute the flow in a geometrically correct way  we propose to introduce a active constraint r  having dof r. =a'. this constraint can be linked only to subset of objects   ' allowing k independent displacements  i.e. inducing a subgcsp s  having dor s    k. k and s' are two parameters of our function d i s t r i b u t e . 
　function overloaded-network returns the objectconstraint network corresponding to s where the fictive constraint 1   set with capacity a'  is linked to the objects of s . the maximum flow computation is achieved by a standard 
　　1 remember that the dor represents the number of independent displacements admitted by a subgcsp. 
flow algorithm1 like fordfulkerson  ford and fulkerson  1 . this function returns the set v of objects reachable from the virtual constraint r in the residual graph if the maximum flow cannot distribute the whole overload  an empty set v otherwise. function object-induced-subgcsp returns the subgcsp s  induced by v. s  verifies dof s   a  or s  is empty. 

the two differences between our version of the 
d i s t r i b u t e function and hoffmann et a/.'s version have already been mentioned: the use of a dedicated constraint for overflow distribution  which allows to distribute the overflow to any subset of objects; and the adaptation of the overflow to the set of objects on which it is applied  which renders overflow application geometrically correct. 
example: 	the call to d i s t r i b u t e  s 1 dab   hoff-
mann et a/.'s version  for the gcsp in fig. 1-a is presented in fig. 1-a. since the overflow cannot be fully distributed  the subgcsp ab is returned. this is correct from the flow point of view since dof ab =1 is less than a' = 1. however  from the geometric point of view  it is incorrect to interpret this result as an over-rigidity in the gcsp. 
　for the same subgcsp  our d i s t r i b u t e function is called differently: since dor  1s =1  the overflow can be at most 1. fig. 1-b presents the call to d i s t r i b u t e  s  1  ab . the overflow can be distributed fully: no subgcsp is returned. further similar calls would allow to conclude that this gcsp is not over-rigid. 
time complexity: the complexity of our function d i s t r i b u t e is dominated by that of function fordfulkerson; it is 1 n1 n + m   where n is the number of nodes and m the number of arcs. it is strictly equivalent to the complexity of hoffmann et al.'s version. 
　note that if several calls to this function are performed  it could be modified to compute maximum flow in an incremental way  yielding a better complexity. 
1 	algorithms for rigidity detection 
based on the d i s t r i b u t e function  several algorithms can be designed to tackle the major problems related to the rigidity concept.  hoffmann et al.  1  have proposed the dense and minimal dense algorithms to identify a well 
　　1 in  hoffmann et al.  1   function distribute is specifically designed for binary constraints and flow distribution is merged with network construction and subgcsp identification. 

or over-rigid subgcsp and minimize it  using a classical linear minimization process . these algorithms can be reproduced using our function d i s t r i b u t e . this allows us to tackle the same problems in a geometrically correct manner and with a better characterization of rigidity: the extended structural rigidity. we will show on algorithm dense how to introduce our d i s t r i b u t e function in existing algorithms. 
algorithm dense versus algorithm o v e r - r i g i d 
schematically  algorithm dense operates by calling the 
d i s t r i b u t e function for each constraint in the gcsp until a non-empty subgcsp is returned. the overload is induced by the dimension of the considered geometric space: it represents the maximum number of independent displacements in this space  1 in 1d  1 in 1d . dense is supposed to return only over-rigid subgcsps since returned gcsps do not admit all the displacements allowed by the considered geometric space. 
in fact  dense is incorrect since it may remove more 
dofs than the number of displacements admitted by a sub-
gcsp. for instance  two parallel lines admit only 1 displacements in 1d; hence  removing 1 displacements from two parallel lines is geometrically incorrect in 1d. 
　to obtain a geometrically correct version of algorithm dense  we propose to use the es rigidity instead of the s rigidity  i.e. the dor is the overload; also  we use our d i s t r i b u t e function instead of hoffmann et al 's one. 
	this 	results 	in 	a 	new 	algorithm  	called 
over-rigid which performs one call to function d i s t r i b u t e  s  dor  s'   s'   for each s' c s to identify over-es rigid subgcsps. indeed  if the call for a given s' returns a non-empty subgcsp s   then it verifies dof s     dor 1'   a sufficient condition for being over-es rigid  see def. 1 . unfortunately  the number of subgcsps is exponential  which would lead to an exponential number of calls to function d i s t r i b u t e . however  we will show that it is sufficient and correct to apply this function only to the dor-minimal subgcsps  see def. 1 below   which gives the following algorithm: 
subgcsps generated by dor-minimals  1 . algorithm over-rigid then proceeds as follows: 
1. first turn  s' = bc and k =dor / c =1. fig. 1 c  represents the call to d i s t r i b u t e  s 1 . all the arcs outgoing from the source being saturated  no overcs rigid subgcsp is identified. 
1. at this turn  s' = cef and k =dor cef --1. the call to d i s t r i b u t e  s 1 cef  is represented in figure 1 d . this turn  the arc s --  r is unsaturated. since the set of object-nodes traversed during the last search for an augmenting path is {a  c  d  e  f   the identified subgcsp is acdef which is over-es rigid. 
　on the same example  algorithm dense would identify each segment  1 points + 1 distance  and each point on the line a as an over-rigid subgcsp  which is false. 
properties of algorithm o v e r - r i g i d 
to prove the correctness and completeness of algorithm over-rigid  we need the following lemmas which establish properties on the dor concept and on flow distribution: 
lemma 1 let s he a gcsp and s' c s  c s two subgcsps. then dor s'    dor s  . 
proof: each unit of dor in a gcsp represents an independent displacement  translation or rotation . adding a new object o with some constraints to a subgcsp sf cannot remove the independent displacements already granted to s' since constraints are independent from the global reference system. thus  dor s'    dor s' u {o} .u 



constraints 	1 

completeness of over-rigid: 
　algorithm over-rigid applies an overload only for each element in the set m of all dor-minimal subgcsps  computed by dor-minimals  1  . lemma 1 ensures that if is sufficient to distribute an overload for each dor-minimal subgcsp  since any non dor-minimal subgcsp contains  by definition  dor-minimal subgcsps.d 
time complexity of over-rigid: 
　the complexity of algorithm over-rigid depends on the number of dor-minimal subgcsps. we have proven by enumeration that the number of objects in a dor-minimal subgcsp is 1 in 1d and 1 in 1d for gcsps including points  lines and planes constrained by distances  angles  incidences and parallelisms. thus  for gcsps in this class  the number of dor-minimal subgcsps is  where n is the number of objects and d the dimension of the geometric space  1 or 
1 . 
	let 	us 	call the 	complexity 	of 	function 
dor-minimals  and that of function d i s t r i b u t e   discussed in the previous section. then  the worst-case complexity of algorithm 
　c1 is generally the complexity of geometric theorem proving  i.e.  it is exponential. however  in some practical classes of gcsps  like mechanisms or bar frameworks  it is polynomial or even constant. moreover  heuristic dor computation can be used when geometric theorem proving is required but not affordable. in these cases  c  can be neglected in comparison to c1. we end up with  in comparison  the complexity of algorithm dense is 1 m * n1 *  n + m  . thus  the overhead to obtain a geometrically correct algorithm is approximately linear in 1d  and quadratic in 1d. 
1 other algorithms 
function d i s t r i b u t e can be used in a similar way to tackle the major problems related to rigidity: identifying rigid subgcsps  just by changing the value of the overflow in algorithm over-rig id   deciding if a gcsp is rigid  by one call to over-rigid and a dof count   finding a minimal wellor over-rigid subgcsp  by classical minimization step  as in minimal  dense . for all these problems  using our new algorithms and the es rigidity instead of the s rigidity leads to geometrically correct and more reliable algorithms. 
1 	conclusion 
the new design of function d i s t r i b u t e allows a more general use of this function: the flow distribution is now performed in a geometrically sound manner and allows for checking a better characterization of rigidity. the dorminimal concept and its properties have appeared to be the key to obtain a new family of polynomial algorithms for the major problems related to rigidity. 
　these new algorithms can handle gcsps in 1d and 1d correctly with respect to the es rigidity. they can handle gcsps with constraints like parallelism or incidence  which was not possible with hoffmann et al. 's algorithms. indeed  these constraints introduce geometric properties in gcsps  leading to subgcsps with a dor different from the number of independent displacements in d-space. this kind of constraints are ubiquitous in practical applications  architecture  cad  mechanisms  and our new algorithms open a way for reliable industrial use in these domains. 
