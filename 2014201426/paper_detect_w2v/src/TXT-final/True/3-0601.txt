
we report on a successful experiment of computeraided theorem discovery in the area of logic programming with answer set semantics. specifically  with the help of computers  we discovered exact conditions that capture the strong equivalence between a set of a rule and the empty set  a set of a rule and another set of a rule  a set s of two rules and a subset of s with one rule  a set of two rules and a set of another rule  and a set s of three rules and a subset of s with two rules. we prove some general theorems that can help us verify the correctness of these conditions  and discuss the usefulness of our results in program simplification.
1 introduction
this paper makes two contributions. first  it reports on a successful experiment of computer-aided theorem discovery in logic programming with answer set semantics. second  it contributes to the theory and practice of logic programming in that the discovered theorems that capture certain classes of strongly equivalent logic programs are new  non-trivial  and lead to new program simplification rules that preserve strong equivalence.
　theorem discovery is a highly creative human process. generally speaking  we can divide it into two steps:  i  conjecture formulation  and  ii  conjecture verification  and computers can help in both of these two steps. for instance  machine learning tools can be used in the first step  i.e. in coming up with reasonable conjectures  and automated deduction tools can be used in the second step  i.e. in verifying the correctness of these conjectures.
　while theorem discovery may make use of learning  these two tasks are fundamentally different. theorem discovery starts with a theory  and aims at finding interesting consequences of the theory  while learning is mostly about induction  i.e. it starts with examples/consequences  and aims at finding a theory that would explain the given examples/consequences.

 
　　our thanks to yan zhang for his comments on an earlier version of this paper. this work was supported in part by hk rgc cerg hkust1e.　using computers to discover theorems is an old aspiration. there have been many success stories. for instance  am  lenat  1  was reported to be able to come up with some interesting concepts and theorems in number theory  and the remarkable system described in  petkovsek et al.  1  automates the discovery and proofs of identities  especially hypergeometric identities involving sums of binomial coefficients that are important for the analyses of algorithms. yet another example where  interesting  theorems can be discovered almost fully automatically is a recent work by lin  on discovering state invariants in planning domains. lin showed that there are ways to classify potentially interesting constraints according to their syntactic properties  and these constraints can be easily enumerated for most domains. furthermore  for many of these constraints whether they are invariants can be checked automatically. as a result  the system described in  lin  1  could discover many common invariants in planning domains  and for the logistics domain  it could even discover a set of  complete  state invariants.
　in this paper  we consider the problem of discovering theorems about strongly equivalent logic programs under answer set semantics.
　the notion of strongly equivalent logic programs is interesting for a variety of reasons. for instance  as lifschitz et al.  noted  if two sets of rules are strongly equivalent  then one can be replaced by the other in any logic program regardless of the context. thus identifying strongly equivalent sets of rules is a useful exercise that may have applications in program simplification  and the purpose of this paper is to discover conditions under which a set of rules is strongly equivalent to another. it is important that these conditions need to be computationally effective as in general checking if two sets of rules are strongly equivalent is conp-complete  c.f. lin  1  .
　to discover these conditions  we follow the methodology of  lin  1  by looking at domains of small sizes first. for instance  to discover for what kinds of rules r1 and r1 we have that {r1} is strongly equivalent to {r1}  we consider a language with  say three atoms  and enumerate all possible pairs of rules in this language that are strongly equivalent. we then conjecture a condition that would capture exactly this set
of pairs of rules  and then try to verify if this conjecture is true in the general case. in  lin  1   a general theorem is proved to automate the verification part. we try to do the same here by proving some general theorems that will make the verification part easier  almost semi-automatic.
　this paper is organized as follows. in the next section  we briefly review the basic concepts of logic programming under answer set semantics. then in section 1 we state in more precise terms the type of theorems that we want to discover. in section 1 we prove some general theorems that will help us prove these theorems  and in section 1  we describe some of the theorems that we discovered. we then discuss an application to logic program simplification in section 1  and finally we conclude this paper in section 1.
1 logic programming with answer set semantics
let l be a propositional language  i.e. a set of atoms. in this paper we shall consider logic programs with rules of the following form:
     h1;，，，;hk ○ p1 ，，， pm notpm+1 ，，， notpn  1  where hi's and pi's are atoms in l. so a logic program here can have default negation  not   constraints  when k = 1   and disjunctions in the head of its rules. in the following  if r is a rule of the above form  we write hdr to denote the set {h1 ... hk}  psr the set {p1 ... pm}  and ngr the set {pm+1 ... pn}. thus a rule r can also be written as hdr ○ psr notngr. the semantics of these programs are given by answer sets as defined in  gelfond and lifschitz  1 . to save space  we do not give the definition here.
　two such logic programs p1 and p1 are said to be equivalent if they have the same answer sets  and strongly equivalent  lifschitz et al.  1   under the language l  if for any logic program p in l  p “ p1 and p “ p1 are equivalent. for example  {a ○ b} and {a ○ c} are equivalent  but not strongly equivalent. it can be shown that {a ○ nota} and {○ nota} are strongly equivalent.
　lifschitz et al.  showed that checking for strong equivalence between two logic programs can be done in the logic of here-and-there  a three-valued non-classical logic somewhere between classical logic and intuitionistic logic. lin  provided a mapping from logic programs to propositional theories and showed that two logic programs are strongly equivalent iff their corresponding theories in propositional logic are equivalent. this result will be used here both for generating example pairs of strongly equivalent logic programs  and for verifying a conjecture. we repeat it here.
　let p1 and p1 be two finite logic programs  and l the set of atoms in them.
theorem 1  lin  1  p1 and p1 are strongly equivalent iff in propositional logic  the following sentence is valid:
	   p   p1        δ r  《   δ r   	 1 
	p（l	r（p1	r（p1
where for each p （ l  p1 is a new atom  and for each rule r of the form  1   δ r  is the conjunction of the following two sentences:
p1 … ，，， … pm …  p1m+1 … ，，， …  p1n   h1 ‥ ，，， ‥ hk   1  p1 … ，，， … p1m …  p1m+1 … ，，， …  p1n   h1 ‥ ，，， ‥ h1k.  1  notice that if m = n = 1  then the left sides of the implications in  1  and  1  are considered to be true  and if k = 1  then the right sides of the implications in  1  and  1  are considered to be false.
1 the problem
as we mentioned above  one possible use of the notion of strongly equivalent logic programs is in program simplification. for instance  given a logic program  for each rule r in it  we may ask whether it can be deleted without knowing what other rules are in p  i.e. whether {r} is strongly equivalent to the empty set. or we may ask whether a rule r in p can be deleted if one knows that another rule r1 is already in p  i.e. whether {r r1} is strongly equivalent to {r1}. in general  we may ask the following k-m-n question: is {r1 ... rk u1 ... um} strongly equivalent to {r1 ... rk v1 ... vn}  thus our theorem discovery task is to come up  for a given k-m-n problem  a computationally effective condition that holds if and only if the answer to the k-m-n question is positive.
　now suppose we have such a condition c  and suppose that when {r1 ... rk u1 ... um} is strongly equivalent to {r1 ... rk v1 ... vn}  it is better to replace {u1 ... um} by {v1 ... vn} in the presence of r1 ... rk for the purpose of  say computing the answer sets of a program. one way to use this result to simplify a given program p is to first choose k rules in p  and for any other m rules in it  try to find n rules so that the condition c holds  and then replace the m rules in p by the simpler n rules.
　however  even if checking whether c holds would take a negligible constant time  using the above procedure to simplify a given logic program will be practical only when k m n are all very small or when k is almost the same as the number of the rules in the given program  and m and n are very small. thus it seems to us that it is worthwhile to solve the k-m-n problem only when k m n are small. in particular  in this paper  we shall concentrate on the 1-1 problem  whether a rule can always be deleted   the 1-1 problem  whether a rule can always be replaced by another one   the 1-1 problem  in the presence of a rule  whether another rule can be deleted   the 1-1 problem  in the presence of two rules  whether a rule can always be deleted   and the 1-1 problem  if a pair of rules can be replaced by a single rule .
　an example of theorems that we want to discover about these problems is as follows:
for any rule r  {r} is strongly equivalent to the empty set   iff  hdr “ ngr  ” psr 1=  .    
1 some general theorems
in this section  we prove some general theorems that will help us verify whether an assertion like     above is true.
　let l be a propositional language  i.e. a set of atoms. from l  construct a first-order language fl with equality  two unary predicates h1 and h1  three unary predicates hdr  psr  and ngr for each logic program rule r in l  we assume that each rule in l has a unique name   and three unary predicates xi  yi  and zi for each positive number i.
　notice that we have used hdr  psr  and ngr to denote sets of atoms previously  but now we overload them as unary predicates. naturally  the intended interpretations of these unary predicates are their respective sets.
definition 1 given a set l of atoms  an intended model of fl is one whose domain is l  and for each rule r in l  the unary predicates psr  hdr  and ngr are interpreted by their corresponding sets of atoms  psr  hdr  and ngr  respectively.
　conditions on rules in l  such as psr ” ngr 1=    will be expressed by special sentences called properties in fl.
definition 1 a sentence of fl is a property about n rules if it is constructed from equality and predicates xi  yi  and zi  1 ＋ i ＋ n. a property Φ about n rules is true  holds  on a sequence p =  r1 ... rn  of n rules if Φ p  is true in an intended model of fl  where Φ p  is obtained from Φ by replacing each xi by hdri  yi by psri  and zi by ngri.
notice that since Φ p  does not mention predicates xi  yi  zi  h1  and h1  if it is true in one intended model  then it is true in all intended models.
　as we have mentioned above  we are interested in capturing the strong equivalence between two programs by a computationally effective condition. more specifically  for some small k  m  and n  we are interested in finding a property Φ about k+m+n rules such that for any sequence of k+m+n rules  p =  r1 ... rk u1 ... um v1 ... vn  
{r1 ... rk u1 ... um} and {r1 ... rk v1 ... vn} are strongly equivalent if and only if Φ is true on p.  1 
we shall now prove some general theorems that can help us verify the above assertion for a class of formulas Φ.
　first of all  theorem 1 can be reformulated in fl as follows by reading h1 p  as  p holds   and h1 p  as  p1 holds :
theorem 1 p1 and p1 are strongly equivalent in l iff the following sentence
	 x h1 x    h1 x         γ r  《   γ r  	 1 
	r（p1	r（p1
is true in all intended models of fl  where γ r  is the conjunction of the following two sentences:
  x psr x    h1 x   …  x ngr x     h1 x     
	 x hdr x  … h1 x   	 1 
  x psr x    h1 x   …  x ngr x     h1 x     
	 x hdr x  … h1 x  .	 1 
　in first order logic  if a prenex formula of the form  ~x ~yb is satisfiable  then it is satisfiable in a structure with n elements  where n is the length of ~x if it is non-empty  and 1 when ~x is empty. we can prove a similar result for our firstorder languages and their intended models here.
　from this and theorem 1  we can show the following theorem which will enable us to automate the verification of the  if  part of  1  when the property Φ is in the prenex format.
theorem 1 without loss of generality  suppose m − n. if Φ is a property about k+m+n rules of the form  ~x ~yq  where ~x is a tuple of w variables  and q a formula that does not have any quantifiers  then the following two assertions are equivalent:
 a  for	any	sequence	of	k+m+n	rules 	p	=
 r1 ... rk u1 ... um v1 ... vn   if Φ is true on p  then {r1 ... rk u1 ... um} is strongly equivalent to {r1 ... rk v1 ... vn}.
 b  b.1  if n	 	1 	then for any sequence p	=
 r1 ... rk u1 ... um v1 ... vn  of rules with at most w + 1 k + m  atoms  if Φ is true on p  then {r1 ... rk u1 ... um} is strongly equivalent to {r1 ... rk v1 ... vn}.
	 b.1  if	n	=	1 	then	for	any	sequence
p =  r1 ... rk u1 ... um  of rules with at most k atoms  if Φ is true on p  then
{r1 ... rk u1 ... um} is strongly equivalent to {r1 ... rk}  where k is w+1k if w+1k   1  and k = 1 otherwise.
　the  only if  part of  1  can often be proved with the help of the following theorem.
theorem 1 let l1 and l1 be two languages  and f a function from l1 to l1. if p1 and p1 are two programs in l1 that are strongly equivalent  then f p1  and f p1  are two programs in l1 that are also strongly equivalent. here f p  is obtained from p by replacing each atom p in it by f p .
proof: by theorem 1 and the fact that in propositional logic  if   is a tautology  and f a function from l1 to l1  then f    is also a tautology  where f    is the formula obtained from   by replacing each atom p in it by f p . 
　for an example of using the theorems in this section for proving assertions of the form  1   see section 1.
1 computer aided theorem discovery
given a k-m-n problem  our strategy for discovering theorems about it is as follows:
1. choose a small language l;
1. generate all possible triples
　　　 {r1 ... rk} {u1 ... um} {v1 ... vn} 	 1  of sets of rules in l such that {r1 ... rk u1 ... um} is strongly equivalent to {r1 ... rk v1 ... vn} in l;
1. formulate a conjecture on the k-m-n problem that holds in the language l  i.e. a condition that is true for a triple of the form  1  iff it is generated in step 1;
1. verify the correctness of this conjecture in the generalcase.
this process may have to be iterated. for instance  a conjecture came up at step 1 may fail to generalize in step 1  so the whole process has to be repeated. or we may start with a language l with  say three atoms but have to increase it to five or six atoms later on.
　ideally  we would like this process to be automatic. however  it is difficult to automate steps 1 and 1 - the number of possible patterns that we need to examine in order to come up with a good conjecture in step 1 is huge  and we do not have a general theorem that enables us to automate the verification part in step 1: while theorem 1 enables us to automate the proof of the sufficient part of the assertion  1  for a class of formulas Φ  we do not have a similar result for the necessary part. theorem 1 helps  but it is not fully automatic yet. nonetheless  computers play a crucial role in all steps  and in the following we report some of the theorems discovered using the above procedure.
1 the 1-1 problem
this problem asks if a given rule is strongly equivalent to the empty set  thus can always be deleted from any program. we have the following experimental result:
lemma 1 if a rule r mentions at most three distinct atoms  then {r} is strongly equivalent to   iff  hdr“ngr ”psr 1=  . using theorem 1  we can show the following result:
lemma 1 if there is a rule r of the form  1  such that {r} is strongly equivalent to   and  hdr “ ngr  ” psr 1=   is not true  then there is such a rule that mentions at most three atoms.
proof: suppose {r} is strongly equivalent to    hdr ”psr =    and psr ” ngr =  . suppose l is the set of atoms in r  and a b c are three new atoms. let
　　　  a f p  =	bp （ hdr p （ psrcotherwiseby theorem 1  {f r } is also strongly equivalent to  . by the construction of f  we also have hdf r  ”psf r  =    and psf r  ” ngf r  =    and that f r  mentions at most three distinct atoms. 
theorem 1  the 1-1 problem  lemma 1 holds in the general case  i.e. without any restriction on the number of atoms in r.
proof: we notice that the condition in lemma 1   hdr “ ngr  ” psr 1=    is equivalent to the following property
　　　　　　 x. x1 x  ‥ z1 x   … y1 x  being true on  r . thus the  if  part follows from theorem 1 and lemma 1. the  only if  part follows from lemma 1 and lemma 1. 
　the  if  part of the theorem is already well-known  first proved by osorio et. al. . to the best of our knowledge  the  only if  part is new.
　we notice here that there is no need to consider the 1-n-1 problem for n   1  because for any n  {r1 ... rn} is strongly equivalent to   iff for each 1 ＋ i ＋ n  {ri} is strongly equivalent to  .
1 the 1-1 and the 1-1 problems
the 1-1 problem asks if a rule can always be deleted in the presence of another rule  and the 1-1 problem asks if a rule can always be replaced by another one. we first solve the 1-1 problem  and the solution to the 1-1 problem will come as a corollary.
　we have the following experimental result for the 1-1 problem:
lemma 1 for any two rules r1 and r1 that mentions at most three atoms  {r1 r1} and {r1} are strongly equivalent iff one of the following two conditions is true:
1. {r1} is strongly equivalent to  .
1. psr1   psr1  ngr1   ngr1  and hdr1   hdr1 “ ngr1.
lemma 1 if there are two rules r1 and r1 such that {r1 r1} and {r1} are strongly equivalent  but none of the two conditions in lemma 1 hold  then there are two such rules that mention at most three atoms.
theorem 1  the 1-1 problem  lemma 1 holds in the general case  without any restriction on the number of atoms in r1 and r1.
proof: the condition in lemma 1 is equivalent to the following property
  x. x1 x  ‥ z1 x   … y1 x   ‥
{  x.y1 x    y1 x   …   x.z1 x    z1 x   …
  x.x1 x     x1 x  ‥ z1 x   }
being true on  r1 r1 . thus the  if  part follows from theorem 1 and lemma 1  by noticing that the above property can be written as  x ~y.q as required by theorem 1. the  only if  part follows from lemma 1 and lemma 1. 
　thus if a rule r1 cannot be deleted on its own but can be deleted in the presence of another rule r1  then it must be the case that r1 is redundant given r1: if the body of r1 is satisfied  then the body of r1 is satisfied as well; furthermore  r1 can entail no more than what can be entailed by r1  hdr1  
hdr1 “ ngr1 .
　osorio et al.  proved that {r1 r1} and {r1} are strongly equivalent if either psr1 “ ngr1 =   and hdr1  
ngr1 or psr1   psr1  ngr1   ngr1  and hdr1   hdr1.
more recently  eiter et al.  showed that {r1 r1} and {r1} are strongly equivalent if r1 s-implies r1  wang and zhou  1   i.e. if there exists a set a   ngr1 such that
hdr1   hdr1 “ a  ngr1   ngr1   a  and psr1   psr1.
　as one can see  these are all special cases of the  if  part of theorem 1. our result is actually more general. for instance  these special cases do not apply to { c ○ b notc    ○ b notc } and {c ○ b notc}  but one can easily show that these two sets are strongly equivalent using our theorem.
　from our solution to the 1-1 problem  we can derive a solution to the 1-1 problem.
theorem 1  the 1-1 problem  for any two rules r1 and r1  {r1} and {r1} are strongly equivalent iff one of the following two conditions is true:
1. {r1} and {r1} are both strongly equivalent to  .
1. psr1 = psr1  ngr1 = ngr1  and hdr1 “ngr1 = hdr1 “
ngr1.
proof: by theorem 1  it is easy to see that {r1} and {r1} are strongly equivalent iff {r1 r1} and {r1} are strongly equivalent and {r1 r1} and {r1} are strongly equivalent. 
　thus two rules r1 and r1 can always be interchanged if either both of them can be deleted  strongly equivalent to the empty set  or they have the same body  and the same consequences when the body is true. for instance  {a ○ b nota} and {○ b nota} are strongly equivalent no matter what b is  because the two rules have the same body  and when the body is true  the same consequence - a contradiction. as another example  {a;b ○ nota} and {b ○ nota} are strongly equivalent because the two rules have the same body  and  when the body is true  the same consequence  b.
1 the 1-1  1-1  and 1-1 problems
the 1-1 problem asks if a rule can be deleted in the presence of another two rules  the 1-1 problem asks if two rules can be replaced by a single rule  and the 1-1 problem asks if two rules can be replaced by another two rules. similar to the previous subsection  the solution to the 1-1 and 1-1 problems will follow from a solution to the 1-1 problem.
　we have the following experimental result for the 1-1 problem:
lemma 1 for any three rules r1  r1 and r1 that mentions at most six atoms  {r1 r1 r1} and {r1 r1} are strongly equivalent iff one of the following four conditions is true:
1. {r1} is strongly equivalent to  .
1. {r1 r1} is strongly equivalent to {r1}.
1. {r1 r1} is strongly equivalent to {r1}.
1. there is an atom p such that:
1 p （  psr1 “psr1 ” hdr1 “hdr1 “ngr1 “ngr1 
1 hdri   {p}   hdr1 “ ngr1 and psri   {p}   psr1 and ngri   {p}   ngr1  where i = 1
1 if p （ psr1 ” ngr1  then hdr1 ” hdr1 =  
1 if p （ psr1 ” ngr1  then hdr1 ” hdr1 =  
　notice that in principle  given a language l  every subset of l can be the hd  ps  or ng of a rule. thus when the size of l is six  there are in principle  1   1 = 1 possible rules  and 1 triples of them. thus at first glance  it seems that verifying lemma 1 experimentally using the currently available computers would be impossible. however  we can cut the numbers down significantly with the results that we already have proved. first  we only have to consider rules that do not have common elements in hd  ps  and ng: if either hd and ps or ps and ng have a common element  then by theorem 1  this rule can be deleted; if hd and ng have common elements  then according to theorem 1  we obtain a strongly equivalent rule by deleting the common elements in hd. second  we do not have to consider isomorphic rules: if there is a one-to-one onto function from l to l that maps
  then these two sets of rules are
essentially the same except for the names of atoms in them. by using a certain normal form for triples of rules that avoids these redundant cases  we ended up with roughly 1 million triples of rules to consider for testing lemma 1  which took about 1 hours on a solaris server consisting of 1 sun ultra-sparc iii 1mhz cpus with 1gb ram.
　the following lemma is the reason why we need to consider a language with six atoms for this problem.
lemma 1 if there are three rules r1 r1 and r1 such that {r1 r1 r1} and {r1 r1} are strongly equivalent  but none of the four conditions in lemma 1 hold  then there are three such rules that mention at most six atoms.
theorem 1  the 1-1 problem  lemma 1 holds in the general case  without any restriction on the number of atoms in r1 r1 r1.
　the conditions in lemma 1  theorem 1  are rather complex  and the reason why it is difficult to automate step 1 of the procedure at the beginning of the section. these conditions capture all possible cases when r1 is  subsumed  by r1 and r1  and are difficult to describe concisely by words. we give some examples.
　consider the following three rules: r1:  a1 ○ a1   r1:  a1 ○ nota1   and r1:  a1 ○ nota1 . we have that {r1 r1 r1} and {r1 r1} are strongly equivalent because the condition  1  in lemma 1 holds.
   however  if we change  then are not strongly equiv-
alent: one could check that condition  1  in lemma 1 does not hold  and indeed  while p1 “ {a1 ○ a1} has a unique answer set {a1}  p1 “ {a1 ○ a1} has two answer sets {a1} and {a1 a1}.
　it is also easy to show by theorem 1 that a1 ○ nota1 is  subsumed  by { a1;a1;a1 ○   a1;a1 ○ a1 }  and a1;a1 ○ is  subsumed  by { a1 ○ a1   a1 ○ nota1 }.
　with the results that we have  the following theorem will yield a solution to the 1-1 problem.
theorem 1  the 1-1 problem  for any three rules r1  r1 and r1  {r1 r1} and {r1} are strongly equivalent iff the following three conditions are true:
1. {r1 r1 r1} and {r1 r1} are strongly equivalent.
1. {r1 r1} and {r1} are strongly equivalent.
1. {r1 r1} and {r1} are strongly equivalent.
　for example  { a1 ○ a1 nota1   a1;a1 ○ nota1 } is strongly equivalent to {a1 ○ nota1}. while { ○ a1 a1   ○ a1 nota1 } is strongly equivalent to {○ a1}  { a1 ○ a1 a1   a1 ○ a1 nota1 } is not strongly equivalent to {a1 ○ a1}. similarly  we have the following theorem
theorem 1  the 1-1 problem  for any four rules r1  r1  r1  r1  {r1 r1} and {r1 r1} are strongly equivalent iff the following four conditions are true:
1. {r1 r1 r1} and {r1 r1} are strongly equivalent.
1. {r1 r1 r1} and {r1 r1} are strongly equivalent.
1. {r1 r1 r1} and {r1 r1} are strongly equivalent.
1. {r1 r1 r1} and {r1 r1} are strongly equivalent.
1 program simplification
we have mentioned that one possible use of the notion of strongly equivalent logic programs is in simplifying logic programs: if p and q are strongly equivalent  and that q is  simpler  than p  we can then replace p in any program that contains it by q.
　most answer set programming systems perform some program simplifications. however  only smodels  niemela： et al.  1  has a stand-alone front-end called lparse that can be used to ground and simplify a given logic program. it seems that lparse simplifies a grounded logic program by computing first its well-founded model. it does not  however  perform any program simplification using the notion of strong equivalence. for instance  lparse-1.1  the current version of lparse  did nothing to the following set of rules: { a ○ notb   b ○ nota   a ○ a }. nor does it replace the first rule in the following program { a ○ nota   a ○ notb   b ○ nota } by the constraint ○ nota.
　it is unlikely that anyone would be intentionally writing rules like a ○ a or b ○ a nota. but these type of rules can arise as a result of grounding some rules with variables. for instance  the following is a typical recursive rule used in logic programming encoding of the hamiltonian circuit problem  niemela  1; marek and truszczynski  1：	 : reached x  ○ arc y x  hc y x  reached y  .
when instantiated on a graph with cyclic arcs like arc a a   this rule generates cyclic rules of the form reached x  ○ hc x x  reached x . unless deleted explicitly  these rules will slow down many systems  especially those based on sat.
　it is thus useful to consider using the results that we have here for program simplification. indeed  transformation rules such as deleting those that contain common elements in their heads and positive bodies have been proposed  brass and dix  1   and studied from the perspective of strong equivalence  osorio et al.  1; eiter et al.  1 . our results add new such transformation rules. for instance  by theorem 1  we can delete those elements in the head of a rule that also appear in the negation-as-failure part of the rule. theorems 1  1  and 1 can also be used to define some new transformation rules.
1 concluding remarks and future work
donald knuth  in his forward to  petkovsek et al.  1   said
 science is what we understand well enough to explain to a computer. art is everything else we do. ...science advances whenever an art becomes a science. and the state of the art advances too  because people always leap into new territory once they have understood more about the old. 
we hope that with this work  we are one step closer to making discovering classes of strongly equivalent logic programs a science.
　we have mentioned that the methodology used in this paper is similar to that in  lin  1 . in both cases  plausible conjectures are generated by testing them in domains of small sizes  and general theorems are proved to aid the verification of these conjectures in the general case. however  while plausible conjectures are generated automatically in  lin  1   they are done manually here. while the verifications of most conjectures in  lin  1  are done automatically as well  they are done only semi-automatically here. overcoming these two weaknesses is the focus of our future work. specifically  we would like to make step 1 of the procedure in section 1 automatic  and prove a theorem similar to theorem 1 to automate the proofs of the  only if  parts of theorems like theorems 1 - 1  in the same way that theorem 1 makes the proofs of the  if  parts of these theorems automatic. this way  we would be able to discover more interesting theorems in this area  and more easily!
