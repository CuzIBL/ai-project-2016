
in many planning situations  a planner is required to return a diverse set of plans satisfying the same goals which will be used by the external systems collectively. we take a domain-independent approach to solving this problem. we propose different domain independent distance functions among plans that can provide meaningful insights about the diversity in the plan set. we then describe how two representative state-of-the-art domain independent planning approaches - one based on compilation to csp  and the other based on heuristic local search - can be adapted to produce diverse plans. we present empirical evidence demonstrating the effectiveness of our approaches.
1 introduction
a typical automated planner takes as input the specifications of the initial and goal states and the set of available actions  and finds a plan that will satisfy the goals by efficiently searching in the space of possible state configurations or action orderings  plans . in many planning situations  a planner is required to return not one but a set of diverse plans satisfying the same goals which will be used by the external systems collectively. as an example  in adaptive web services composition  the web service engine wants to have a set of diverse plans/ compositions such that if there is a failure while executing one composition  an alternative may be used which is less likely to be failing simultaneously chafle et al.  1 . however  if a user is helping in selecting the compositions  the planner could be first asked for a set of diverse plans and when she selects one of them  the planner is next asked to find plans that are similar to the selected one. another example is using planning for intrusion detection  boddy et al.  1   where the aim is to detect diverse ways of possible intrusion attacks  represented as plans .
모although the need for finding similar or different plans has been noticed in the past  there has been little concrete work on formalizing and solving the problem. what little there is has concentrated on finding similar plans fox et al.  1  or are domain-specific approaches  see section 1 . for example  myers  myers & lee  1  expects the domain modelers to provide a  meta-theory  of the domain  in addition to the domain transition model in terms of actions and their effects . in this paper  we focus on domain-independent means of finding  and comparing  diverse plans. this immediately brings up the issue: on what basis should two plans be compared  the first contribution of this paper is the proposal of a spectrum of distance measures that capture plan characteristics in terms of actions  behaviors  states that result from the plan execution  and causal structures.
모once the distance measures are in place  we turn to the issue of automatically generating sets of plans that have the desired diversity in terms of those distance measures. a naive approach for this would be to let the planner generate multiple solutions and filter out the solutions that do not satisfy the required diversity. such a filtering approach is not very promising  particularly given the fact that the set of plans for a given problem can in principle be infinite.1 indeed  boddy et. al. 1  who use this type of filtering technique in the intrusion detection domain  explicitly acknowledgethe need for approaches that take diversity constraints into account during search more actively.
모the second contribution of our paper is thus an investigation of effective approaches for using distance measures to bias a planner's search to find diverse plans efficiently. the technical details of biasing the search do depend on the details of the underlying planner. to get a broader understanding  we decided to investigate two representative state-of-theart planning approaches. the first  gp-csp  typifies the issues involved in generating diverse plans in bounded horizon compilation approaches while the second  lpg  typifies the issues involved in modifying the heuristic search planners. our investigations with gp-csp allow us to compare the relative difficulties of enforcing diversity with each of the three distance measures. we find that using action-based distance measures to find diverse plans usually results in plans that are also diverse with respect to their behavior and causal structures  but less likely in other permutations. with lpg  we focus only on the action-based distance  which can be treated in a natural way by a relatively simple modification of the heuristic function  to explore scaleup issues. we find that the proposed distance measures make lpg more effective in solving for di-
verse plans over large problem instances.
basisprosconsactionsdoes not requireno problem informationproblem informationis usedstatesnot dependent on any specificneeds an executionplan representationsimulator to identify statescausal linksconsiders causal proximity of state transitions  action  rather than positional  physical  proximityrequires domain theorytable 1: the pros and cons of different bases to characterize plans.
모in the rest of the paper  we start by formalizing the problem and then propose different plan distance functions. next  we propose methods to find diverse plans and demonstrate their effectiveness using gp-csp and lpg. we end with a discussion on related work and our main results.
1 distance measures
to talk formally about generation of diverse plans  we need to start with the notion of distance between plans. let 붻 si sj  뫸  1  denote a distance function between a pair of plans. a value of 1 represents complete similarity of plans while 1 represents complete diversity. following the convention of  hebrard et al.  1   for a given set s of plans  we define max 붻  s  = maxsi sj뫍s 붻 si sj  and min 붻  s  = smini sj뫍s 붻 si sj . the problem of finding k diverse/ similar plans for a problem pp  whose set of all plans is represented by plan pp   is then stated below.
ddistantkset  resp. dclosekset : find s with s   plan pp   | s | = k and min 붻  s  뫟 d
 resp. max 붻  s  뫞 d .
모at the heart of tackling this problem is the issue of defining criteria by which two plans are compared.1 as mentioned earlier  we focus here on domain-independent measures for comparing plans. we can compare two plans in terms of:
1. actions that are present in the two plans.
1. the behaviors resulting from the execution of the plans where the behavior is captured in terms of the sequence of states the agent goes through .
1. the causal structures of the two plans measured in termsof the causal links representing how actions contributeto the goals being achieved.1
모table 1 gives the pros and cons of using the different comparison methods. we note that if actions in the plans are used as the basis for comparison  no additional problem or domain theory information is needed. if plan behaviors are used as the basis for comparison  the representation of the plans that bring about state transition becomes irrelevant since only the

1
모모this issue is complicated by the fact that the plans being compared can be generated by an automated planner or found in other ways  e.g.  given manually or manipulated after getting it from a planner srivastava  vanhatalo  & koehler  1 . although we only consider generated plans  the distance measures apply to other provences as well. we make no apriori assumption about the plans like each goal has a single causal support structure.
	1	p1
모모a causal link a1 뫸 a1 records that a predicate is produced at a1 and consumed at a1. a causal chain is a sequence of causal
	p1	p1	pn 1
links of the form a1 뫸 a1 a1 뫸 a1 ... an 1 뫸 an. we use causal links for analysis but refer to a plan's causal links by causal chains  wherever possible  for convenience.
namebasiscomputation붻1  붻a actionsset-difference붻1actionsprefixes neighbourhood붻1  붻s statesset-difference붻1statesprefixes neighbourhood붻1  붻c causal linksset-difference붻1causal linksprefixes neighbourhoodtable 1: a spectrum of distance functions based on different bases and way of computations. actual states that an execution of the plan will take is considered. hence  we can now compare plans of different representations  e.g.  1 plans where the first is a deterministic plan  the second is a contingent plan  the third is a hierarchical plan and the fourth is a policy encoding probabilistic behavior. if causal links are used as the basis for comparison  the causal proximity among actions is now considered rather than just physical proximity in the plan.
aggregating distances once a basis for plan comparison is chosen  we still have differentchoices for aggregatingthe distances. for example  if we are interested in action based comparison of plans  then we could  i  view the plans as sets  or bags  of actions and consider set  bag  difference between the two plans   ii  consider the plans as sequences of actions and consider measures such as  hamming distance  that are sensitive to the position of the actions. in table 1  1 distance functions are presented which use 1 different bases and 1 different ways of computation. we use 붻1  붻1 and 붻1 and refer to them by 붻a  붻s and 붻c  respectively  in the rest of the paper.

npendne
planalaalan-
--	-	-	--	-	-	--	-	-	---	-	-	-- -	-	-
- --	-- - - - - - - - - --figure 1: example illustrating bases for distance measures. ai and ag denote dummy actions producing the initial state and consuming the goal state  respectively.
example:
모in figure 1  three plans are shown for a planning problem where the initial state is and the goal state is . the action models and the causal structures of plans are shown to the left. plans s1 and s1 have the same actions but different ordering structures. s1 has parallel actions while s1 has them in sequence. the plan s1  like the other plans but all other actions are different  a1 and . however  it also achieves the same goals.
모an action based plan comparison method which uses position-based distance aggregation would find s1  s1 and s1 to be all different. this is because all the three plans have different sets of action prefixes. if instead  the action information is used with set differencing  s1 and s1 would be found to be identical.
모a state based comparison method which uses any of the given computation choice would find s1 and s1 to be identical  and both of them to be different from s1. this is because the states after every transition in s1 and s1 are identical. s1  on the other hand  has  trivially  the same first and last states but no intermediate states.
모a causal link based comparison method which uses set differencingwould find s1 and s1 to be the same while s1 as different. this is because the causal links for goals g1 and g1 in s1  s1  are different from those of s1.
1 finding diverse plans with gp-csp
the gp-csp planner do & kambhampati  1  converts graphplan's planning graph into a csp encoding  and solves it using a standard csp solver. the solution of the encoding represents a valid plan for the original planning problem. in the encoding  the csp variables correspond to the predicates that have to be achieved at different levels in the planning graph  different planning steps  and their possible values are the actions that can support the predicates. for each csp variable representing a predicate p  there are two special values:
i  뫐: indicates that a predicate is not supported by any action and is false at a particular level/planning-step; ii   noop : indicates that the predicate is true at a given level i because it was made true at some previous level j   i and no other action deletes p between j and i. constraints encode the relations between predicates and actions: 1  mutual exclusion relations between predicates and actions; and 1  the causal relationships between actions and their preconditions.
1 adapting gp-csp to different distance bases
when the above planning encoding is solved by any standard csp solver  it will return a solution containing var  value of the form. the collection of xi where representsthe facts that are made true at differenttime steps  plan trajectory  and can be used as a basis for the statebased distance measure; the set of represents the set of actions in the plan and can be used for action-based distance measure; lastly  the assignments  themselves represent the causal relations and can be
used for the causal-based distance measure.
모however  there are several complications we need to overcome before a specific distance measure between plans can be computed. first  the same action can be represented by different values in the domains of different variables. consider a simple example in which there are two facts p and q  both supported by two actions a1 and a1. when setting up the csp encoding  we assume that the csp variables x1 and x1 are used to represent p and q. the domains for x1 and x1 are {v1 v1} and {v1 v1}  both representing the two actions {a1 a1}  in that order . the assignments  and  have a dis-
tance of 1 in traditional csp because different values are assigned for each variable x1 and x1. however  they both represent the same action set {a1 a1} and thus lead to the plan distance of 1 if we use the action-based distance in our plan comparison. therefore  we first need to translate the set of values in all assignments back to the set of action instances before doing comparison using action-based distance. the second complication arises for the causal-based distance. a
p
causal link a1 뫸 a1 between two actions a1 and a1 indicates that a1 supports the precondition p of a1. however  the csp assignment only provides the first half of each causal-link. to complete the causal-link  we need to look at the values of other assignments to identify action a1 that occur at the later level in the planning graph and has p as its precondition.
1 making gp-csp return a set of solutions
to make gp-csp return a set of solutions satisfying the ddistantkset constraint using one of the three distances  we add  global  constraints to each original encoding to enforce d-diversity between every pair of solutions. when each global constraint is called upon by the normal forward checking and arc-consistency checking procedures inside the default solver to check if the distance between two solutions is over a predefined value d  we first map each set of assignments to an actual set of actions  action-based   predicates that are true at different plan-steps  state-based  or causallinks  causal-based  using the method discussed in the previous section. this process is done by mapping all csp assignments into action sets using a call to the planning graph  which is outside of the csp solver  but works closely with the general purpose csp solver in gp-csp. the comparison is then done within the implementation of the global constraint to decide if two plans are diverse enough.
모we investigate two different ways to use the global constraints: 1  parallel strategy to return the set of k solutions all at once; and 1  greedy strategy to return them one after another. in the parallel approach  we create one encoding that contains k identical copies of each original planning encoding created using gp-csp planner. the k copies are connected together using k k   1 /1 pair-wise global constraints. each global constraint between the ith and jth copies ensures that two plans represented by the solutions of those two copies will be at least d distant from each other. if each copy has n variables  then this constraint involves 1n variables.
모in the greedy approach  the k copies are not setup in parallel up-front  but sequentially. we add to the ith copy one global constraint to enforce that the solution of the ith copy should be d-diverse from any of those i   1 solutions. the advantage of the greedy approach is that each csp encoding is significantly smaller in terms of the number of variables  n vs. k n   smaller in terms of the number of global constraints  1 vs. k k   1 /1   and each global constraint also contains lesser number of variables  n vs. 1 n .1 thus  each encoding in the greedy approach is easier to solve. however  because each solution depends on all previously found solutions  the encoding can be unsolvable if the previously found solutions comprise a bad initial solution set.
1 empirical evaluation
we implemented the parallel and greedy approaches discussed earlier for the three distance measures and tested them with the benchmark set of logistics problems provided with the blackbox planner kautz & selman  1 . all experiments were run on a linux pentium 1  1ghz machine with
	prob1	prob1	prob1	prob1	prob1	prob1
붻a111111붻s111111붻c111111	random	1	1	1	1	1	1
table 1: average solving time  in seconds  to find a plan using greedy  first 1 rows  and by random  last row  approaches

붻a1/11/11/11/1*1/11/1붻s1/11/11/11/11/11/1붻c1/11/11/11/1*1/1*1/1table 1: comparison of the diversity in the solution sets returned by the random and greedy approaches
1mb ram. for each problem1  we test with different d values rangingfrom 1  1%  to 1  1% 1 and k increases from 1 to n where n is the maximum value for which gp-csp can still find solutions within plan horizon. the horizon  parallel plan steps  limit is 1.
모we found that the greedy approach outperformedthe parallel approach and solved significantly higher number of problems. therefore  we focus on the greedy approach hereafter. for each combination of d  k  and a given distance measure  we record the solving time and output the average/min/max pairwise distances of the solution sets. baseline comparison: as a baseline comparison  we have also implemented a random approach. in this approach  we do not use global constraints but use random value ordering in the csp solver to generate k different solutions without enforcing them to be pairwise d-distance apart. for each distance d  we continue running the random algorithm until we find kmax solutions where kmax is the maximum value of k that we can solve for the greedy approach for that particular d value. in general  we want to compare with our approach of using global constraint to see if the random approach can effectively generate diverse set of solutions by looking at:  1  the average time to find a solution in the solution set; and  1  the maximum/average pairwise distances between k 뫟 1 randomly generated solutions.
figure 1 shows the comparison of average solving time to find one solution in the greedy and random approaches. the results show that on an average  the random approach takes significantly more time to find a single solution  regardless of the distance measure used by the greedy approach. to assess the diversity in the solution sets  table 1 shows the comparison of:  1  the average pairwise minimum distance between the solutions in sets returned by the random approach; and  1  the maximum d for which the greedy approach still can find a set of diverse plans. the comparisons are done for all three distance measures. for example  the first cell  1 1  in table 1  implies that the minimum pairwise distance averaged for all solvable k 뫟 1 using the random approach is d = 1 while it is 1  i.e. 1x more diverse  for the greedy approach using the 붻a distance measure. except for 1 cases  using global constraints to enforce minimum pairwise distance between solutions helps gp-csp return significantly more diverse set of solutions. on an average  the greedy ap-

1
log-easy=prob1  rocket-a=prob1  log-a = prob1  log-b = prob1 
log-c=prob1  log-d=prob1. 1
increments of 1 from 1 to 1 and of 1 thereafter.
	d	prob1	prob1	prob1	prob1	prob1	prob1
11  1 11 1 11 1 111 1 11 1 11 1 111 1 11 1 11 1 111 1 11 1 11 1 111 1 11 1 11 1 111 1 11 1 11 1 111 1 11 1 11 1 111 1 11 1 11 1 111 1 11 1 11 1 111 1 11 1-1 1 111 1 1----11 1 1----11 1 1----1-1 1----table 1: for each given d value  each cell shows the largest solvable k for each of the three distance measures 붻a  붻s  and 붻c  in this order . the maximum values in cells are in bold.
proach returns 1x  1x  and 1x more diverse solutions than the random approach for 붻a  붻s and 붻c  respectively. analysis of the different distance-bases: overall  we were able to solve 1 d k  combinationsfor three distance measures 붻a 붻s 붻c using the greedy approach. we were particularly interested in investigating the following issues:
  h1 - is it easy or difficult to find a set of diverse solutions using different distance measures  thus   1  for the same d and k values  which distance measure is more difficult  time consuming  to solve; and  1  given an encoding horizon limit  how high is the value of d and k that we can still find set of solutions for a given problem using different distance measures.
  h1 - what  if any  is the correlation/sensitivity between different distance measures  thus  how diverse the solutions returned when using distance measure 붻 are according to another  where
모regarding h1  table 1 shows the highest solvable k value for each distance d and base 붻a  붻s  and 붻c. for a given  d k  pair  enforcing붻a appears to be the most difficult  then 붻s  and 붻c is the easiest. gp-csp is able to solve 1  1  and 1 combinations of  d k  respectively for 붻a  붻s and 붻c. gp-csp solves ddistantkset problems more easily with 붻s and 붻c than with 붻a due to the fact that solutions with different action sets  diverse with regard to 붻a  will likely cause different trajectories and causal structures  diverse with regard to 붻s and 붻c . between 붻s and 붻c  붻c solves more problems for easier instances  problems 1  but less for the harder instances  as shown in table 1. we conjecture that for solutions with more actions  i.e. in bigger problems  there are more causal dependencies between actions and thus it is harder to reorder actions to create a different causal-structure.
모for running time comparisons  among 1 combinations of  d k  that were solved by all three distance measures  gpcsp takes the least amount of time for 붻a in 1 combinations  for 붻s in 1 combinations and 1 for 붻c. the first three lines of table 1 show the average time to find one solution in ddiverse k-set for each problem using 붻a  붻s and 붻c  which we call ta  ts and tc respectively . in general  ta is the smallest and ts   tc in most problems. thus  while it is harder to enforce 붻a than 붻s and 붻c  as indicated in table 1   when the encodings for all three distances can be solved for a given  d k   then 붻a takes less time; this can be due to tighter constraints  more pruning power for the global constraints  and simpler global constraint setting.
모to test h1  in table 1  we show the cross-validation between different distance measures 붻a  붻s  and 붻c. in this table 

붻a-11붻s1-1붻c11-table 1: cross-validation of distance measures 붻a  붻s  and 붻c.
cell row  column indicates that over all combinations of  d k  solved for distance 붻  the average value
whereare distance measuredaccordingto  respectively   . for example  means that over 1 combinations of  d k  solvable for 붻s  for each d  the average distance between k solutions measured by 붻a is 1  ds. the results indicate that when we enforce d for 붻a  we will likely find even more diverse solution sets according to 붻s  1   da  and 붻c  1   da . however  when we enforce d for either 붻s or 붻c  we are not likely to find a more diverse set of solutions measured by the other two distance measures. nevertheless  enforcing d using 붻c will likely give comparable diverse degree d for 붻s  1 dc  and vice versa. we also observe that ds is highly dependent on the difference between the parallel lengths of plans in the set. ds seems to be the smallest  i.e ds   da   dc  when all k plans have the same/similar number of time steps. this is consistent with the fact that 붻a and 붻c do not depend on the steps in the plan execution trajectory while 붻s does.
1 finding diverse plans with lpg
lpg is a local-search-based planner  that incrementally modifies a partial plan in a search for a plan that contains no flaws  gerevini  saetti  & serina  1 . the behavior of lpg is controlled by an evaluation function that is used to select between different plan candidates in a neighborhood generated for local search. at each search step  the elements in the search neighborhood of the current partial plan 뷇 are the alternative possible plans repairing a selected flaw in 뷇. the elements of the neighborhood are evaluated according to an action evaluation function e  gerevini  saetti  & serina  1 . this function is used to estimate the cost of either adding or of removing an action node a in the partial plan 뷇 being generated. in the next two subsections  we present some modifications to lpg for computing diverse plans using the action-based plan distance.
1 revised evaluation function for diverse plans
in order to manage ddistancekset problems  the function e has been extended to include an additional evaluation term that has the purpose of penalizing the insertion and removal of actions that decrease the distance of the current partial plan 뷇 under adaptation from a reference plan 뷇1. in general  e consists of four weighted terms  evaluating four aspects of the quality of the current plan that are affected by the addition  e a i  or removal  e a r  of a
e a i = 붸e몫executioncost a i+붸t 몫temporal cost a i+
+ 붸s 몫 searchcost a i + 붸d 몫 | 뷇1   뷇  뫌 뷇ri|
e a r = 붸e몫executioncost a r+붸t몫temporal cost a r+ + 붸s 몫 searchcost a r + 붸d 몫 | 뷇1   뷇   a  뫌 뷇rr|.
 the first three terms of the two forms of e are unchanged from the standard behavior of lpg. the fourth term  used only for computing diverse plans  is the new term estimating how the proposed plan modification will affect the distance from the reference plan 뷇1. each cost term in e is computed using a relaxed temporal plan 뷇r  gerevini  saetti  & serina  1 .
모the 뷇r plans are computed by an algorithm  called relaxedplan  formally described and illustrated in  gerevini  saetti  & serina  1   that we have slightly modified to penalize the selection of actions decreasing the plan distance from the reference plan. the specific change to relaxedplan for computing diverse plans is very similar to the change described in  fox et al.  1   and it concerns the heuristic function for selecting the actions for achieving the subgoals in the relaxed plans. in the modified function for relaxedplan  we have an extra 1 term that penalizes an action b for 뷇r if its addition decreases the distance of 뷇+뷇r from 뷇1  in the plan repair context investigated in  fox et al.  1   b is penalized if its addition increases such a distance .
모the last term of the modified evaluation function e is a measure of the decrease in plan distance caused by adding or removing r |  where 뷇ri contains the new action a. the 붸-coefficients of the e-terms are used to weigh their relative importance.1 the values of the first 1 terms are automatically derivedfrom the expression defining the plan metric for the problem  gerevini  saetti  & serina  1 . the coefficient for the fourth new term of e  붸d  is automatically set during search to a value proportional to d/붻a 뷇 뷇1   where 뷇 is the currentpartial plan under construction. the general idea is to dynamically increase the value of 붸d according to the number of plans n that have been generated so far: if n is much higher than k  the search process consists of finding many solutions with not enough diversification  and hence the importance of the last e-term should increase.
1 making lpg return a set of plans
in order to compute a set of k d-distant plans solving a ddistancekset problem  we run the lpg search multiple times  until the problem is solved  with the following two additional changes to the standard version of lpg:  i  the preprocessing phase computing mutex relations and other reachability information exploited during the relaxed plan construction is done only once for all runs;  ii  we maintain an incremental set of valid plans  and we dynamically select one of them as the reference plan 뷇1 for the next search. concerning  ii   let p = {s1 ... sn} be the set of n valid plans that have been computed so far  and cplans si  the subset of p containing all plans that have a distance greater than or equal to d from a reference plan si 뫍 p. the reference plan 뷇1 used in the modified heuristic function e is a plan smax 뫍 p which has a maximal set of diverse plans in p  i.e. 
smax = argmax{si뫍p} {|cplans si |}.
smax is incrementally computed each time the local search finds a new solution. in addition to being used to identify the reference plan in e  smax is also used for defining the initial state  partial plan  of the search process. specifically  we initialize the search using a  partial  plan obtained by randomly removingsome actions from a  randomlyselected  plan in the set cplans smax  뫋 {smax}.
모the process of generating diverse plans starting from a dynamically chosen reference plan continues until at least k plans that are all d-distant from each other have been produced. the modified version of lpg to compute diverse plans is called lpg-d.
1 experimental analysis with lpg-d
the distance function 붻a  using set-difference  can be written as the sum of two terms:

the first term represents the contribution of the actions in si to the plan difference  while the second term indicates the contribution of si to 붻a. we experimentally observed that in some cases the differences between two diverse plans computed using 붻a are mostly concentrated in only one of the 붻a components. this asymmetry means that one of the two plans can have many more actions than the other one  which could imply that the quality of one of the two plans is much worse than the quality of the other plan. in order to avoid this problem  we can parametrize 붻a by imposing the two extra constraints
붻aa 뫟 d/붺 and 붻ab 뫟 d/붺
where 붻aa and 붻ab are the first and second terms of 붻a  respectively  and 붺 is an integer parameter  balancing  the diversity of si and sj.
모in this section  we analyze the performance of the modified version of lpg  called lpg-d  in three different benchmark domains from the 1rd and 1th ipcs.1 the main goals of the experimental evaluation were  i  showing that lpg-d can efficiently solve a large set of  d k -combinations   ii  investigating the impact of the 붻a 붺-constraints on performance   iii  comparing lpg-d and the standard lpg.
모we tested lpg-d using both the default and parametrized versions of 붻a  with 붺 = 1 and 붺 = 1. we give detailed results for 붺 = 1 and a more general evaluation for 붺 = 1 and the original 붻a. we consider d that varies from 1 to 1  using 1 increment step  and with k = 1...1  1  1  1  1  1  1  1  1  1  1  overall  a total of 1  d k combinations . since lpg-d is a stochastic planner  we use the median of the cpu times  in seconds  and the median of the average plan distances  over five runs . the average plan distance for a set of k plans solving a specific  d k combination  붻av  is the average of the plans distances between all pairs of plans in the set. the tests were performed on an amd athlon tm  xp 1+  1 mb ram. the cputime limit was 1 seconds.
모the 1st column of figure 1 gives results for the largest problem in ipc-1 driverlog-time  fully-automatedtrack . lpg-d solves 1  d k -combinations  including combinations d 뫞 1 and k = 1  and d = 1 and k = 1. the average cpu time  top plots  is 1 seconds. the average 붻av  bottom plots  is 1  with 붻av always greater than 1. with the original 붻a function lpg-d solves 1  d k combinations  the average cpu time is 1 seconds  and the average 붻av is 1; while with 붺 = 1 lpg-d solves 1 combinations  the average cpu time is 1 seconds  and the average 붻av is 1.
모the 1nd column of figure 1 gives results for the largest problem in ipc-1 satellite-strips. lpg-d solves 1  k d -combinations; 1 of them require less than 1 seconds. the average cpu time is 1 seconds  and the average 붻av is 1. we observed similar results when using the original 붻a function or the parametrized 붻a with 붺 = 1  in the second case  lpg-d solves 1 problems  while the average cpu time and the average 붻av are nearly the same as with 붺 = 1 .
모the 1rd column of figure 1 gives results for a middle-size problem in ipc-1 storage-propositional. lpg-d solves 1  k d -combinations  1 of which require less than 1 seconds  while 1 of them require less than 1 seconds. the averagecpu time is 1 seconds and the average붻av is 1. with the original 붻a lpg-d solves 1  k d -combinations  the average cpu time is 1 seconds  and the average 붻av is 1; with 붺 = 1 lpg-d solves 1 combinations  the average cpu time is 1 seconds and the average 붻av is 1.
모the local search in lpg is randomized by a  noise  parameter that is automatically set and updated during search  gerevini  saetti  & serina  1 . this randomization is one of the techniques used for escaping local minima  but it also can be useful for computing diverse plans: if we run the search multiple times  each search is likely to consider different portions of the search space  which can lead to different solutions. it is then interesting to compare lpg-d and a method in which we simply run the standard lpg until k d-diverse plans are generated. an experimental comparison of the two approaches show that in many cases lpg-d performs better. in particular  the new evaluation function e is especially useful for planning problems that are easy to solve for the standard lpg  and that admit many solutions. in these cases  the original e function produces many valid plans with not enough diversification. this problem is significantly alleviated by the new term in e. an example of domain where we observed this behavior is logistics.1
1 related work
researchers including tate  tate  dalton  & levine  1  and myers  myers  1; myers & lee  1  have articulated the need for finding dissimilar plans. myers  in particular  presents an approach to generate diverse plans in the context of her htn planner by requiring the meta-theory of the domain to be available and using bias on the metatheoretic elements to control search  myers & lee  1 . the metatheory of the domain is defined in terms of predefined attributes and their possible values covering roles  features and measures. our work differs from hers in two respects. first  we focus on domain-independent distance measures. second we consider the computation of diverse plans in the context of state of the art domain independent planners.
모the problem of finding similar plans has been considered in the context of replanning. a recent effort in this direction is  fox et al.  1 . our work focuses on the problem of finding diverse plans by a variety of distance measures.

figure 1: performance of lpg-d  cpu-time and plan distance  for there problems in driverlog-time  satellite-strips모outside the planning literature  our closest connection is to the work by hebrard et al 1  who solve the problem and storage-propositional.
of finding similar/ dissimilar solutions for csps without additional domain knowledge. it is instructive to note that unlike csp  where the number of potential solutions is finite  albeit exponential   the number of distinct plans for a given problem can be infinite  since we can have infinitely many non-minimal versions of the same plan . thus  effective approaches for generating diverse plans are even more critical. the challenges in finding interrelated plans also bear some tangential similarities to the work in information retrieval on finding similar or dissimilar documents  c.f.  callan & minka  1  .
1 conclusion
in this paper  we focused on domain-independent approaches for finding diverse plans. we articulated three different domain-independent distance measures for comparing plans. we then developed effective approaches for using these distance measures to bias the performance of two state-of-theart planning approaches - gp-csp and lpg. the approaches we developed for supporting the generation of diverse plans in gp-csp are broadly applicable to other planners based on bounded horizon compilation approaches for planning. similarly  the techniques we developed for lpg  such as biasing the relaxed plan heuristics in terms of distance measures  are applicable to other heuristic planners. the experimental results with gp-csp explicate the relative difficulty of enforcing the various distance measures  as well as the correlation among the individual distance measures  as assessed in terms of the sets of plans they find . the experiments with lpg demonstrate the potential of heuristic planning in producing large sets of highly diverse plans.
