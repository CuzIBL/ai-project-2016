 
　　　　a running system is presented which provides powerful support to the user while designing programs . 
this system automatically constructs program schemas by decomposition of the datas involved in the s p e c i f i c a t i o n . datas are specified w i t h i n a knowledge-base as data types having associated decomp o s i t i o n p a t t e r n s . 
the user may combine d i f f e r e n t data-decomposition s t r a t e g i e s w i t h any of i t s decomposition p a t t e r n s . so it is possible to b u i l d several program schemas for the same problem. 
once a program schema is b u i l t 	the user can i n s t a n t i a t e or adapt it by hand. he can also apply the system r e p e t i t i v e l y 	u n t i l he obtains p r i m i t i v e problems which can be solved d i r e c t l y . 
　　　　key-words : running system. data types. decomposition p a t t e r n s . 	powerful 	support. 	progam schema. 	strategies of decomposition. 
	i 	introduction 
　　　　in the attempt to automatically construct a program from i t s s p e c i f i c a t i o n two main approaches have been proposed. 
　　　　- the f i r s t method acts in a formal framework and uses a deductive mecanism to solve the problem. the desired program can be obtained by proving a theorem in a c o n s t r u c t i v e way  m.w 1     or by applying the knuth-bendix completion procedure to a r e -
w r i t e system   der 1  . 
　　　　- the second method is based on a large  amount of knowledge that one can have about some aspects of programming. this knowledge base contains a l o t of rules and facts which allow gradual refinement and transformation of a s p e c i f i c a t i o n i n t o an e f f i c i e n t program  bar 1   b.o.r 1   . 
　　　　however as previously noticed   bar 1    none of these approaches is r e a l l y s a t i s f y i n g . the f i r s t one c a n ' t avoid the combinatorial explosion inherent to t h i s kind of mecanism. the second one  l a c k i n g 
of relevant rules f o r algorithm c r e a t i o n can only synthesize programs from a l g o r i t h m i c s p e c i f i c a t i o n s . a t h i r d method can be t r i e d in p a r t i a l l y automating the software development and p r o v i d i n g a powerful 
aid to the programmer. such an example is the programmer's apprentice   wat 1  designed to be midway between an improved programming methodology and an automatic synthesis system. 
the system presented in t h i s paper  c a l l e d the 
program builder  pb   belongs to t h i s t h i r d method. it r e l i e s heavily on a top-down and modular approach and constructs a u t o m a t i c a l l y a program schema by decomposing the i n i t i a l problem w i t h respect to the data s t r u c t u r e s involved i n i t s s p e c i f i c a t i o n . this program schema introduces new sub-problems and event u a l l y some guards which must be v e r i f i e d to v a l i -
date 	these sub-problems. 
decomposition is done by processing s t r u c t u r e d data objects independantly of the semantics of the problem : so in some cases the program schema may be i r r e l e v a n t . in the more favourable cases the user 
of the pb can i n s t a n t i a t e or adapt the schema by hand. he can also run the pb to apply the same decomposition process to the sub-problems. the process ends once p r i m i t i v e problems which can be solved d i r e c t l y   appear. 


1 c. gresse 

this program schema is a selection sort algorithm. 
construction of $probleml whith the pb is straightforward when the same decomposition pattern is applied to the input variable s : in this case the new problem $problem1 can be viewed as a primitive problem  finding the smaller of two integers . we have'nt room enough to describe the. whole program but the computation of $n1 would be : $n1:=#problem1 head s  min tail s   
1 implementation of the pb. 
　　　it is implemented in maclisp on a milltics system. a programmer can use it interactivi1y via the 
display-oriented editor emacs. 
during the same session  while constructing a program he may combine different alternatives : -apply the f i r s t or the second strategy 
-ask for a recursive or a non recursive program 
-choose any of the possible decomposition patterns of a type 
-add a new decomposition pattern and select it 
-declare a new problem as an operation on an abstract data type 
so it is possible to build quickly several d i f f e rent program schemas for a same problem. once a program schema has been built the user can instantiate it by renaming the entitles prefixed by $. he may also adapt it by modifying the code produced or by solving directly a problem. the pb is a building block of a more general software development environment. such an environment is being designed and built at orsay university in the asspro project   gre 1   and pb is part of that project. 
1 conclusion 
　　　an overview has been presented of a system for the construction of programs from decomposition of their data. in its current implementation the pb is able to construct various programs pro-
cessing structured objects as strings  trees  l i s t s   . . . we are continuing to extend our work 
by trying to automatically compute the guards and generate the specifications of the new subproblems. 
　　　for this purpose we have to deal with the formal specification of the i n i t i a l problem  e.g sort can be specified as  ordered c  and bag c = bag s    and to enrich the axiom part of the presentation of the abstract data types stored in the knowledge-base. 
acknowledgments : 
　　　i would like to thank michel bidoit and gerard guiho for several helpful discussions concerning this research. 
