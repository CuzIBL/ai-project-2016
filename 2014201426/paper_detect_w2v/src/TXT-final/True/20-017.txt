: 
　in this paper we discuss a semantics for translating natural language statements into facts of an underlying expert system  replacing the more conventional menu interface for gathering data from the user. we describe two issues that must be considered when building such an interface for an expert system. these issues are semantic processing of the user statements and the design of an interpreter for the expert system that efficiently utilizes the facts entered by the user. the semantic approach is based on verb categorization and hierarchical structuring of each category. the parsing algorithm based on selectional restriction is directly encoded into each verb class hierarchy. next  we describe director  an interpreter for rule-based expert systems that efficiently utilizes these facts for inferencing. director uses a combination of forward and backward chaining that gives full consideration to each fact entered by the user and enables the system to process input in an efficient and focused manner. 
1 introduction 
　an expert system often interactively gathers data from a user in order to solve a problem. in many expert systems this information gathering is done via a menu interface. in this paper we describe a natural language interface for expert systems that replaces the more conventional menu interface for collecting information from the user. one of the tasks of a natural language interface is to translate user statements into facts of the underlying expert system  which requires a 
　sophisticated semantics. furthermore  such an interface places additional requirements on the inference engine of the expert system itself  namely to efficiently utilize the facts entered by the natural language module. this paper presents a semantic approach necessary for the translation as well as director  an interpreter for rule-based expert systems** that meets the demands of the natural language interface.  for an overview of the system see figure 1.  
　the semantic approach presented relies primarily on verb categorization and hierarchical structuring within each verb category. this approach differs from previous work in semantics by capturing linguistic generalizations of verb categories while providing modularity and some domain independence. in addition  it offers a semantic mechanism for an unstructured underlying system unlike previous approaches that made use of an assumed structure to define semantics  e.g. data base systems . during parsing  an appropriate hierarchy is selected according to the definition of the verb in the system's dictionary. a selectional restriction based algorithm is used to traverse the hierarchy. 
　.this research was partially supported by office of naval research grant n1-k-1. 
1 	natural language 
the restrictions on the arguments of the verb are based on the sentence noun features. furthermore  in certain cases the noun features can be used directly in order to derive certain facts. 
　with a natural language interface  a user may volunteer information at any point; either at the beginning of a session or as an answer to any question posed by the expert system. the expert system must be able to use this information to arrive at a solution quickly  avoiding inferencing and associated questions that are irrelevant to the user specified goal and information. director has been designed specifically to support the construction of expert system 
with natural language interfaces. it allows for facts entered through natural language to be taken into account by using an efficient combination of forward and backward chaining. forward chaining is used to ensure that full consideration is eiven to each fact asserted by the natural language module on behalf of the user. backward chaining is controlled by heuristics that ensure a focused interaction. these heuristics are based on descriptions of how and when data has been entered and guide the selection of rules to be evaluated. director also provides ready access to portions of its internal structure. this feature allows the system to answer certain types of queries with a minimal number of searches of the rule base. the interpreter is designed to come to a solution quickly  with the minimal number of questions posed to the user and is therefore useful not only for systems with natural language interfaces  but also for systems whose problem domains involve data from hostile environments  such as nuclear reactors. 
1 background 
　in order for a human expert to be able to answer a person's question he often has to carry out extensive dialogs with that person to gather information about his needs. extensive interaction and clarification is also needed for expert systems. one way expert systems communicate with their users is via a menu interface  shortliffe 1   clancey 1 . unfortunately  these interfaces are often tedious or awkward 
  datskovsky 1  and may even limit the capabilities of associated expert systems  pollack et. al. 1 . 
a natural language interface can relieve some of the 
   a typical rule-based expert system is constructed as a knowledge base and an associated interpreter  inference engine   hayes roth 1 . the knowledge base is a collection of facts and production rules. a fact is a  name value  pair indicating the value of the object name; and a production rule is a statement of the form if premise then action. such a rule stores the knowledge that if the premise  left-hand-side  is true then the action  right-hand-side  should be performed the interpreter controls the execution of the expert system by selecting and evaluating rules. as these rules are evaluated  they alter the values of the facts and generate input and output 

problems associated with the menu interface by allowing the user to receive advice in the most informative and least time consuming way. that is  overall session length should be shorter using natural language since the system will have to pose fewer questions. this is possible because natural language allows the user to volunteer more than just the requested information whenever the expert system presents a question to the user. 
　the natural language module is responsible for interpreting incoming statements as facts. although natural language interfaces to data base systems have been successfully constructed  kaplan 1   woods et. al. 1   grosz ct al. 1   the task is more difficult in the expert systems domain. a 
semantic interpreter for a data base system usually relies on the regular structure of the data base as encoded in the schema describing it no such regularity or description is available in the expert systems' case. the lack of existing system structure makes the construction of domain independent semantics for expert systems difficult and means that some sort of structure that can be used as the basis for semantics must be built on top of the underlying rule base. 
　the semantics and control strategy we present in this paper is aimed at exactly this problem: interpretations of natural language responses to system questions  deriving and making use of any additional facts volunteered by the user. since question asking is normally determined by the sequence of rule firings in expert systems  a control strategy was developed and fully implemented in director that determines which rules to fire so as to minimize the number of questions and to ensure that they are asked in a focused and coherent order. 
　we are testing our ideas in the domain of tax and financial advising and using a small expert system called taxpert  ensor et al. 1   which deals with personal income tax matters as our experimental environment taxpert consists of a number of agents that cooperate to solve an assortment of tax problems. director  embodying our control strategy  serves as the control mechanism for the dependency 
agent that helps the user determine whether someone qualifies as his dependent 
　a hypothetical example from the tax domain illustrating these issues is shown in figure 1. here the user is trying to determine whether an individual  fred  can claim another individual  john. the system must determine whether 1 requirements are met in order to answer. these include the type of support given  relationship between the individuals  citizenship  income  and the type of return filed. the system asks whether fred is the only supporter of john. the user not only supplies a yes as the answer to this question  but also volunteers extra information  john is fred's father. 
　since the user can enter any amount of information at arbitrary times with a natural language interface  the underlying expert system must be able to make use of system: is fred the only supporter of john    y/n  user: yes  fred is the only supporter of his father john. 
facts derived:   user is only supporter of  dependent  
  dependent is parent of  user  
figure 1: user - system interaction 
volunteered information to avoid asking unnecessary questions. without any volunteered information  taxpert normally must ask questions about each of the five requirements for dependency. in the example of figure 1  note that taxpert need not ask any questions about the relationship between the individuals since this information was volunteered in response to an earlier question. 
　in this paper  we focus on the interpretations of natural language responses to system questions. ultimately  we plan to replace the menu system with a full natural language interface. in such a system  the user could indicate what goal he would like the system to solve by asking questions  e.g.   can fred claim john as a dependent    as well as providing facts through natural language statements. while director does currently support the setting of expert system goals through user input  the semantic translation of user queries to goals is still under consideration. 
1 semantic interpreter 
our semantic mechanism relies on categorization of verbs. 
we have looked at over 1 verbs from the tax code and classified them into 1 categories. analysis of categories of verbs have been done by researchers before  osgood 1   ballmer et al. 1 ; however  the analysis is generally done for one category only  such as verbs of motion  miller 1 . in real world domains  like tax advising  many such categories are necessary. 
　each verb category is organized hierarchically where each node of the hierarchies is derived from the meanings of one or more verbs. the leaves of the hierarchies contain either expert system facts or pointers to other hierarchies. thus  the hierarchies form a connected forest a selectional restriction algorithm is encoded into each hierarchy. the restrictions on the arguments of the verbs rely on the noun features which are based on roget's thesaurus. during parsing  the restrictions on the agent  patient  object and modifier of the verb help guide the parse down the hierarchy and derive the appropriate facts. although the verb hierarchies are the primary source of facts  some facts are derived directly from the noun features. 
　the deep syntactic structure of the sentence  which is derived by an atn parse  also influences semantic interpretations. in particular  it influences semantic disambiguation  the number of facts derived from a given sentence  instantiation of variables and relationships between facts. interaction between syntax and semantics is not the main focus of this paper. 


figure 1: natural language - expert system interaction 
　***the dependency agent contains over 1 rules and is implemented in zetalisp on the the symbolics lisp machine. 
	moerdler  mckeown  and ensor 	1 


figure 1: partial tree formed for the transfer of possession category**** 
　as an example  consider one of the largest categories in our domain  transfer of possession. it contains many verbs  such as give  get  receive  provide etc.. figure 1 shows a partial hierarchy formed for this category. a dictionary entry for a verb contains the category or categories to which the verb belongs; a plus or a minus  which indicates whether the subject of a sentence is the semantic agent or patient; and sometimes a lower level node from the parse tree. for example  the verb to get has a dictionary entry of transfer of possession  indicating that the underlying subject is generally the patient in a sentence with this verb. in the sentence john gets $1  john is the recipient or the patient the verbs to pay and to earn have more specific meanings and therefore have lower level tree nodes as entries in the dictionary nodes. the verb to pay is defined as transfer of possession  monetary  because the verb generally indicates the transfer of monetary amounts  and the verb to earn as transfer of possession  +   taxable  because it generally indicates the existence of a taxable income. 
　more specific information can come from cither the verb  the arguments of the verb in the sentence  or both. the arguments in square brackets indicate the restrictions comming from the agent  patient  object and modifier of the verb  which yield more specific meanings. consider a typical input sentence john gets 1 dollars of support from fred the verb gets is defined in the dictionary as transfer of possession  thus  during the parse the transfer of possession hierarchy is chosen based on the definition of the verb in the dictionary. next  the parser has a choice of proceeding down to either physical object or honj hysical object. it selects physical object because 1 dollars  which is the object of the sentence  fits the concrete restriction. at the next level  concrete is further restricted to monetary. now  the choice is between donation and income. here income is selected based on the feature human of the. 
　   *in the figure  * stands for wild card  and - meam that the feature is inherited from the parent node. 
1 	natural language 
a ent  john   because in our domain a monetary amount given to a human generally implies the money was earned  while a monetary amount given to an organization implies donation. at the next level  the choice is between taxable and non taxable. here the additional information comes from the modifier instead of the case roles as before and non taxable is selected because support has the payment/given feature in the dictionary. finally  the fact   depcndent is amountofsupport  support  is added to the data base  or working memory  of the expert system. 
　not all facts are derived from verb hierarchies. some facts are implied directly by noun features. the tax code contains a large number of tests that deal with family relationships. thus  features such as relative  child  parent etc.. are assigned to some of the nouns. for example  the feature child is assigned to words such as son  daughter  step-son  step-daughter  foster-son  etc.  and in turn has a more general feature of relative. the feature child directly implies the fact   dependent is child of  user . 
1 current directions 
　our semantic approach specifies how to derive expert system facts from user statements  but there are several other functions that it should have. it should be able to derive expert system goals from user queries and handle partial matches  i.e. deal with data that matches only a part of a fact   as well as deal with semantically incomplete input and anaphoric reference. the exact algorithm for instantiating the variables in the facts still has to be formalized. these issues are currently being investigated and the semantics is being fully implemented and integrated as part of taxpert. 
1 director 
　the natural language interface described presents facts to the underlying expert system in a more or less unconstrained fashion. director is an interpreter for rule-based expert systems that was specifically designed to be able to handle such input. the two major requirements for the interpreter are to efficiently utilize information volunteered by the user  while maintaining a focused and coherent interaction. 
　a rule-based system executes via the evaluation of its rules. these evaluations are controlled by the system's interpreter  which chooses which rules to evaluate according to some strategy. system queries to the user are generated as the rules attempt to determine the values of various data. therefore  in these systems the goal of minimizing the number of questions and providing a focused interaction can be realized through suitable control of rule firings  i.e.  through an appropriate interpreter. many common interpreters for rule-based systems are based on sequential statement evaluation  e.g.   bobrow et. al. 1    forward chaining  e.g.   forgy 1    or backward chaining  e.g.   van melle 1  . sequential control  often used as the basis for specialized user-programmed control structures  is of little direct assistance in building rule-based systems. systems that are restricted to forward chaining inference violate the coherence requirement because they focus on deriving inferences from a set of facts  rather than investigating hypotheses. systems restricted to backward chaining often do not allow a user to volunteer information  ignoring inferences from new information. more than a simple combination of forward and backward chaining is necessary  thus director is based on a heuristically controlled combination of the two strategies  and so is able to efficiently utilize the facts entered by the natural language module. 

1 implementation 
　since each rule is selected according to the selection procedure contained within the interpreter  this procedure influences the structure of the rules and the control information that must be explicitly encoded into the system. indeed there is probably no major expert system in which the rules are independent of their interpreter  duda 1 . in director  each rule is invoked as a function  whose body is an if-then form in which the premise and the action are restricted lisp s-expressions. 
　each rule premise is restricted to data base  working memory  queries  i.e.  the examination of the values of facts. the value of a fact may be added to the data base in only two ways: either through the action of a rule or through user input. any fact that is not added by the action of a rule has an associated query procedure so that the user can supply its values. this query procedure is invoked if the premise of a rule tries to examine the fact's value  and the value is not 
present in the data base. director automatically maintains the mappings between the rules and the query procedures for their associated facts. 
　the action of a rule is restricted to a single data base assignment the value to be asserted may be a constant  the value of a datum  or the result of a function evaluation. however  any input/output performed by such a function is beyond the control of director. no query procedure is automatically associated with the fact mentioned in the action of a rule. 
1.1 interpreter 
　director uses both forward and backward chaining. when a fact is given to the system  all possible inferences from the data in the current data base of facts are made using forward chaining. this means that full consideration is given to newly entered facts. thus  forward chaining promotes a focus of attention according to the facts offered to the system by its user. when a user query is received  director establishes a goal  a hypothesis  to confirm or reject. if the coal is not satisfied by simply examining the data base  backward chaining occurs. backward chaining is guided by heuristics that try to maintain focus of attention according to both the user query and the facts recently mentioned  see section 1.1 . during backward chaining additional data may be entered  and forward chaining is performed to determine all inferences of this new information. this control structure allows director to shift focus and goals in response to the user's change of focus and goals. see figure 1 for the algorithm used by director. 
1 queries and focus. 
　director must select rules for evaluation in a way that tries to minimize the number of queries posed to the user. this is done through the use of heuristics  as well as by carefully recording information about user inputs. the heuristics determine which rule is most appropriate for evaluation based on the number of known facts in that rule as well as on focus considerations. 
given a fact or facts entered by the user; 
1. forward chain making all possible inferences without asking any questions. 
1. if goal is not found - backward chain. 
1. forward chain on all additional data. figure 1: algorithm used by the inference engine 
1.1 heuristics for backward chaining. 
	l.if   dependent is 	parent of  user   then 
 relationshiptest is met  
1. if  relationshiptest is met    dependent gets multiple-support    user alone gives over 
1%   then  supportjest is met  
1. if  relationship-test is met    user is the only supporter of  depcndent    user gives over 1%    then  support-test is met  
1. if  relationship-test is met   supportjest is met    then   dependent is claimable  
figure 1: a set of rules from the dependency agent 
consider the set of rules in figure 1  which come from the 
dependency agent of taxpert. suppose the user enters the following statements: john gets $1 of support from fred. fred is the only one supporting john who  is his father. can 
fred claim john . these sentences add facts   dependent is parent of  user y   user is the only supporter of  dependent  and   dependent is amount of support  support  to the data base and states that the goal is to know whether   dependent is claimable . director first forward chains to make all the possible inferences given the contents of the data base. in this case rule 1 is evaluated  adding  relationship-test is met  to the data base. now the system backward chains starting at rule 1. it then determines that in order to prove    dependent is claimable   it must first prove  supportjest is met   so the system backward chains again with the new goal. we want director to pick the next rule in such a way as to guarantee the most focused conversation. to promote this behavior  director tries to select the rule with both the goal in its righthand-side and the greatest number of facts most recently added by the user in its left-hand-side. this implies that director must differentiate those facts derived by rules and those entered by the user. furthermore  director must assign a time-stamp to each fact added by the user. in this example director would try rule 1 first  because it contains   user is the only supporter of  dependent  which was entered by the user. now the system has to ask only one question  to determine whether   user gives 1%  is true before answering the user's question. however  if   user is only supporter of  dependent  were unknown  the system would choose arbitrarily between the rules 1 and 1. if rule 1 were chosen first  the user might have had to answer two additional queries  namely whether   user alone gives over 1%  is true and whether   dependent gets multiple-support  is true  before going on to consider rule 1 and answering the 
questions associated with the facts in that rule as well. 
　the heuristics are guided by the facts entered recently and thus do not always give optimal behavior. however  if the user mentions relevant facts as he issues queries  as would be expected if the user understood the problem domain   the behavior should be quite natural  giving a focused conversation  and minimizing the number of system questions. 
1.1 user control of backward chaining. 
　sometimes the user has semantic knowledge of the queries and can  therefore  better direct the selection of rules. forward chaining can be controlled simply by the facts that are added to the data base. backward chaining can be 
	moerdlar  mckeown  and enaor 	1 

controlled by the facts and the queries issued to director. an optional mechanism is provided in director to allow the user to help direct the rule selection process. normally  expert systems use only information in the right-hand-sides of their rules to initiate backward chaining. director can also use information in the left-hand-side of rules when selecting rules to use as a starting point of the backward chaining process. if the user supplies this left-hand-side information when making a request  it will be used in the initial rule selection. for example  consider the following set of rules: 
1. if   dependent is a child    dependent is a student   then  gross income test is met  
1. if   dependent is a child    dependent is  age   
1   then  grossincometest is met  
　suppose a user issues the following query: do students automatically meet the income test  
the 	fact 	  dependent 	is 	a 	student  	and 	the 	goal 
 gross income test is met  are derived from the question above and added to the data base. using the maps  director identifies that the general goal is implied by rules 1 and 1. the system now selects a rule as the starting point of the backward chaining process  choosing rule 1 according to user control. if this information was not available  or if the system did not take it into account  rule 1 may have been selected first and additional questions may have been generated. 
1 maps 
　during rule selection the interpreter must know which facts are contained in the left- and right-hand sides of the rules. this information can be obtained by searching the rule set naive searches  however  could be expensive computationally and could make the response time of the system unreasonable. to make this searching efficient  director maintains two maps. these maps are the rules-add-
fact map  rf   and the facts-used-by-rule map  fr . the rf map provides pointers from each fact to the rules that can add it to the data base. the fr map provides pointers between each rule and the facts contained in its left-hand-side  thus specifying which facts have to be true in order for that rule to fire. the maps are built up during a preprocessing stage  which has to be performed only once for a given set of rules. 
　first  let us look at the rf man. sunpose that fact c is in the right-hand-side of rule r: i t h n c . the rf map entry for this fact would be indicating that rule r adds fact c to the data base. the information in this map is used during the rule selection portion of the backward chaining phase. for example  if director is trying to solve goal c  then the rf map provides efficient access to r. this map also allows director to suppress the firing of certain rules: after a value is assigned to a fact  the system checks the rf map and tries to mark those rules that would assert the same value of this fact  rules are not evaluated during the marking process  hence the only rules marked are those that reference this fact by a constant name and assert the same value as a constant.  the marked rules are not evaluated  thus avoiding rule evaluation and the superfluous queries to the user that these evaluations might cause. 
　similarly  the facts-used-by-rule map would contain an entry for rule r  indicating that rule r depends on facts a and b. tne map would also contain entries for a and b showing that rule r requires their values in order to be evaluated. when some fact a is added to the data base  all those rules that use a in a forward chaining inference are readily found. in the present example  if a and b are in the 
1 	natural language 
data base  rule r is found in the fr map to be usable for forward chaining. this map is also used in the rule selection process of backward chaining. having determined that rule r will be used to infer a needed fact c  the system readily determines that facts a and b need to be known. 
1.1 self description. 
　so far  we have described what we call director's inferencing function. the system has another function  called display. there are many instances when a user wants the system to provide information without providing infcrencing. for example  a user may want to see everything the system knows about a certain fact a and issue the following request:  tell me about a.  our system can handle a query of this sort by using the maps. all the rules that contain a in the left-hand-sides are found with the help of the fr map. similarly  all the rules containing a in the right-hand-side are found with the help of the rf map. all rules containing a are returned as a response to the above query to the semantic module that translates user questions into requests to director. providing this information is done quickly because director does not perform inferences  but rather only references the maps. 
1 conclusions 
　in this paper we described two important issues that must be addressed when constructing natural language interfaces to expert systems. first we described the semantic mechanism that is powerful enough to translate user statements into facts of the underlying expert system. this semantic approach is based on verb categorization. each category is structured hierarchically  and the parsing algorithm is directly encoded into each hierarchy. some issues in the construction of the complete semantic module are still being investigated. these are partial matching  i.e. what to do with inputs that only match part of a fact  instantiation of variables in the facts  as well as derivation of goals from user queries. the semantics presented is not only useful in the expert systems domain  but also in any domain where the underlying system is not well structured. 
　the natural language module adds facts to the data base of the underlying expert system in an unconstrained manner  thus placing extra requirements on the underlying expert system. we discussed director  an inference engine that uses a combination of forward chaining and backward chaining so as to efficiently utilize facts entered by the natural language interface. it makes available descriptions of its rule base and allows for a limited form of user control over its backward chaining mechanism. this facility allows the user to ask questions about the information contained in the rules but not normally supplied by expert systems. these attributes of director allow a knowledgeable user to arrive at a solution to his query in the most efficient and least time consuming way  while maintaining a focused dialogue. director is also useful in domains where the decisions have to be made quickly  or where user queries are expensive  such as expert systems designed for use by busy professionals  such as accountants and doctors  as well as systems that work in hazardous environments  such as nuclear reactors. 
　the two approaches presented here mark an important step toward the construction of a full natural language interface for rule-based expert systems. 

