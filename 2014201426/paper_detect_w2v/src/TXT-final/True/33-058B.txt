 
¡¡¡¡¡¡this paper describes an approach to reasoning with incomplete information in a resource-limited environment. approaches to date either assume infinite resources and proceed to enumerate a large inference space  or assume few resources and ignore the missing information. they do not reason about resource constraints and the inference methods admissable under them. a hearsay-il-like system is described where each knowledge source is a separate production system. during rule evaluation  a rule antecedant is evaluated using minimal - resource methods. a rule antecedant is evaluated to true  false  or an expected resource cost to acquire the information necessary to complete its evaluation. iff conflict resolution chooses a partially evaluated rule  it posts a goal asking other knowledge sources to provide the missing information  suspends the knowledge source  and informs the knowledge source's manager about the suspension and accompanying goal. the manager decides whether the goal is worth pursuing now  the amount of resources to apply to the task  what knowledge source to apply  and when to give up. the knowledge sources that attempt the goal can implement a variety of inferential and knowledge acquisition techniques. 
1. introduction 
¡¡the purpose of this paper is to describe a method of reasoning with incomplete information in rule-based systems..in particular it describes how an  expert program  can gracefully integrate the dynamic acquisition of knowledge with its reasoning process. the integration process allows the system to reason about the most appropriate methods for acquiring knowledge. 
¡¡the primary representation of knowledge in rule-based systems is the production rule  newell & simon  1; davis & king  1 . a production rule is of the form: 
antecedent --  consequent 
the antecedent can be any expression which if true upon evaluation results in the evaluation  execution  of the consequent. the antecedent is classically a pattern to be matched against data in memory  but can be as complex as a first-order predicate expression or an arbitrary lisp expression. a basic assumption in rule-based systems is that the antecedent is a total-function which evaluates to true or false. in a rule system where the antecedent is a pattern to be matched  the assumption holds; the pattern matches something in memory or it does not. but the failure of a match can arise from two sources  either the pattern does not exist in memory  is absolutely or temporally false   or memory lacks sufficient information to determine truth or falsity  i.e.  the knowledge base is incomplete. in the latter case  an unsuccessful match should be interpreted as  i don't know  instead of false. while not new  this problem has many names such as paitial-matching  hayes-roth  1   partial- information inferencing  joshi  1   and backward chaining  shoitliffe  1 . more generally  it is the problem of reasoning with incomplete information. 
   in a rule-based system the control system evaluates each rule antecedent and chooses one rule from those that are true. but it is often the case that pattern antecedents partially match memory  and for predicate antecedents a subset of predicates evaluate to true while others are not disprovable. the question is:  what rule should be chosen to execute   previous solutions to this problem fall into a continuum where one end uses maximal knowledge but requires large amounts of resources to learn  infer or acquire the missing information  while the other end uses little knowledge and minimal resources. in particular  the backward chaining of mycin  shortliffe  1  does a complete search of the rule space looking for rules which may provide the missing information required to evaluate an antecedent. klahr  1  reduces the search cost of mycin's backward chaining by utilizing rule abstractions to plan the backward chaining of rules. abstraction reduces the information available. in both these approaches  the rules determine what information is relevant and the method of acquisition. joshi  1  decreases the cost of choosing a rule even further by not searching for the missing information. instead  a partial match metric based on specificity and certainty is derived and the highest valued rule is chosen. mcdermott  1  deals with partial-matches by creating a 
separate rule for each sub-pattern of the antecedent which is of use to the problem solving. rosenberg  1  augments the planner system with meta-theorems that propose alternate ways of supporting a goal when existing theorems fail. mostow  1  has proposed the specification of how. what  why and when information for each rule  to guide in the selection of rules and the gathering of information of discrimination amongst them. in all these approaches  the more resources expended  the more 
1 

complete the search  the more certain is the outcome. the important questions here are: what is the level of certainty required by the problem-solving  and what is the  resource  cost of reducing uncertainty  
1. reasoning with incomplete knowledge in a resource-limited environment 
   reasoning  problem-solving  and learning have all been characterized as heuristic search. in the more interesting domains  the search space is so large that it cannot be completely searched  hence many of the problems center around reducing the size of the search space. not being able to circumnavigate the search space is basically a resource limitation  e.g.. time and space. under such circumstances  reasoning programs must efficiently assign and use resources to solve a problem. hence  rule-based systems when faced with the inability to evaluate an antecedent  must balance adequacy of peformance against resource limitations. lenat et al.  1  have discussed the problem of reasoning in resource limited environments under the name of cognitive economy  and lenat  1  has used the schema of assigning time slices to rules to limit resource expenditures. 
for example  if there exists a rule of the following form: 
if  x € vertebrate  then 
and x in this case is a lion  then there are a number of ways of evaluating the antecedent  x is a member of vertebrata : 
1 is x equal to vertebrata  
1 search the is a hierarchy of the knowledge base. lion     panthera     feltdue  ¡ö  carnivore     mamalia     vertebrata. 
1. look for other inference rules that may provide the answer. 
1. match the lion schema against the vertebrata schema. 
1. ask the human sitting at the terminal whether it is true. 
1. assume it's true and retract if it leads to inconsistent results. 
 this example raises a variety problems that can be found in almost any domain. there are many algorithms  methods  available for answering a question including learning and knowledge acquisition methods. some require only a few resources such as the equality check  some require potentially a lot of resources such as the is a search and the pattern match  while others require nonreplenishable resources. for example  if a system can ask the user questions  then it is in the best interests of the system not to ask the user too many questions because he may become annoyed and provide fewer and less accurate answers. 
¡¡when faced with one or more rules whose antecedent cannot be evaluated  the reasoning system must address the following problem*: 
  should it continue to work at evaluating the antecedent  
  how many resources should be expended in evaluation  
  what methods should be chosen to evaluate the antecedent  
1. meta-evaluation: resource limited evaluation 
¡¡the ks system of fox  1a  is a discovery system which reasons with incomplete information. a simplified view of its program architecture is a distributed set of hearsay-imike 
systems  erman et al.. 1 . that is  there are departments where each department has employee knowledge sources and a manager knowledge source. departments can form hierarchies or heterarchies with communication channels and shared data spaces. each knowledge source is a rule-based system with access to a global knowledge base. when a knowledge source is executing  each of its visible rules are meta evaluated. metaevaluation attempts to evaluate an antecedent using minimal 
resources. if it cannot evaluate the antecedent successfully  it assigns to the rule an expected cost for successfully evaluating the rule using other methods. the conflict resolution algorithm for the knowledge source then chooses a rule based on specificity  relation to the knowledge source's goal  number of parts evaluated  and expected cost  if not successfully evaluated . if the antecedent of the rule chosen was evaluated successfully  then its consequent is evaluated and the process begins again. if the antecedent was assigned an expected cost  then the knowledge source is suspended and the portions of the rule not evaluated are placed as goals in the knowledge base for other knowledge sources to evaluate. other knowledge sources' preconditions fire and instantiate them. each knowledge source provides different methods at different costs. the manager knowledge source makes the decision as to which knowledge source to assign the task  and how many resources it will expend. a knowledge source may run out of resources before it finishes  leaving it to the manager to assign more resources or to assign the task  goal  to another employee. once the antecedent is 
finally evaluated  the suspendedi knowledge source is awakened and passed the value by the manager. processing of the knowledge source continues. 
1. meta-evaluation: an example 
¡¡a rule antecedent in the ks system can be any arbitrary lisp expression but includes existential and universal quantification as a basic knowledge base search mechanism. to simplify matters  we will assume a single department with a manager and three employees: 

1 

1. conspec: knowledge source that creates new schemata via specialization  figure 1  1. 
1. introspec: primary inference knowledge source. 
1. ouestask: 	knowledge 	source 	that 	acquires knowledge by asking the user a question. 
   the schema depicted in figure 1 has the following form: a schema definition is surrounded by double braces  {{  schema def  }} . a schema is composed of multiple views  each which is surrounded by single braces  {  view type   viewed schema   view siots  }  each view has a set of slots defined  inherited  in that view each slot  which is printed as small capitals  has a set of facets printed in italics one of the facets is a the value of the slot when only the value facet has a filler  the slot and the filler are printed without naming the facet a schema also has slots that are independent of its views they are printed separately. each slot can act as a bidirectional inheritance relation. slots that act as inheritance relations are printed in the view format. see  fox  1 a. 1b  for more information. 
{{conspec 
{is a employee 
manager: example-manager 
window: 
restriction:  set  type isa rule   value: rl r1 
state: 
restriction:  or rule block mail-block completed failed ready  value: ready 
precondition: restriction:  set  type is a capability   
budget: 
spaces: 
mail box: 
suspended rule: } 
}  
figure 1: conspec schema 
conspec has two rules in its rule set  figure 1 . rule rvs antecedent tests whether x is a member of vertebrata. rule r1 is similar to r1 but has been specialized by the added condition  similar  which tests whether x's color is similar to the color of x's environment. for this example  x is bound to the schema 
lion. 
{{r1 
{ is a rule 
antecedent:  x € vertebrata  
consequent: ... } 
}} 
{ r1 
{is a rule 
antededent:  x € vertebrata  and 
 x.color is similarto  x.environment .color  
consequent: ...} 
}} 
figure 1: conspec visible rules 
1. low-cost evaluation 
¡¡the first phase of rule metaevaluation is low-cost evaluation of functions in rule antecedents. for each function in the antecedent  there exists a schema in the knowledge base that defines how it is evaluated. these function schemata come in three flavors: 
1. low-cost function: uses bounded  small set of resources during execution. contains the code to be executed. 
1. vnrtablt -cosi function: uses variable sot of resources  possibly unbounded  in evaluation. search based functions  e.g.  there-exists  are of this type. this schema contains the expected-cost of evaluation information and the goal name to be assigned to the function. 
1. multifunction: a function that can be evaluated in more than one way  some low-cost and others variable-cost. an example is set membership €. the schema contains the low-cost functions and the expectedcost and goal name of the variable-cost approach. 
if the function is low-cost then the code in the schema is executed. if the function is variable-cost  then the expectedcost for evaluation and the name of the goal to attach to the function is returned. if the function is a multi function then the low-cost functions are evaluated until one succeeds. if none succeed  then the expected cost and goal name is returned. 
¡¡we will assume that in this example  there is enough information to answer rule r1s color test  but none of the lowcost function tests for the multi function e succeed  figure 1 . the first low-cost function €-equal uses equality to test membership  but lion = vertebrata so it fails. the second lowcost function €depth1  searches to depth 1 up the isa hierarchy  lion     panthera     felidue --  carnivora   and also fails. 
hence  the expected cost of  seconds 1  is returned for € along 
{is a multi-function 
low cost function: c equal €-depth1 
expected cost:  seconds1  goal-name: € goal} 
}} 
figure 1: € multi-function 
with the cgoal name to be assigned to the antecedent if the rule is chosen by conflict resolution. 
1. conflict resolution 
¡¡the rules r1 and r1 cannot be evaluated since lion and vertebrata are more than 1 levels apart; thus for each rule  the 
1 

expectedcost of  seconds 1  is returned. the conflict resolution system looks at the two rules and chooses r1 for three reasons: 
1  r1 is more specific than r1  1  answering r1 will also answer rl  and 1  r1 has more subparts successfully matched than r1. coat  specificity  evaluability  and relation to employees goal are used to choose a rule. 
1. goal posting and assignment 
¡¡each department has associated with it one or more sections of the knowledge base called spaces. each employees precondition is keyed to one or more of these spaces. if the chosen rule has an expected cost associated with it. the knowledge source is suspended  figure 1  and the unevaluated functions are posted in the department's goal space as schemata with the goal-names assigned and a state attribute of posted  figure 1 . all the other  interested  employees then test the goal against their precondition  apply the contents of the test slot 
{{ lion { isa panthers 
color: tan 
environment: grassland} 
}} 
{{ grassland 
{is-a place 
color: brown  green  tan } 
}} 
figure 1: lion and grassland schemata in memory 
in each of the capability schemata that  ill the procodition slot  and if true inform the manager of their appl cability in tins case  both the introspec and questask employees lire and inform the manager that they can  possibly  evaluate the € goal. the manager then compares the possible approaches offered by the employees  introspec  figure 1  would use more resources than ouestask  figure 1  but the factor of bothering the human user is considered  lowering the overall utility of ouestask. introspec is chosen  assigned resources based on availability and expected cost and what are available  and is initiated. the state of the e.goal schema in the goal space is changed from 
posted to assigned  figure 1 . 

1. goal satisfaction 
¡¡the introspec employee tries a variety of methods available in its rule set to solve the goal. for each attempt that fails  it records on the goal schema the attempt type and the amount and type of resources consumed  figure 1   this information is used by the system to update function schemata expected-costs and by the manager to decide what to do next if the employee fails at its task. if introspec succeeds  it changes the state of the goal 
{{introspec 
{is a employee 
manager example-manager 
state: ready 
precondition; {is a capability 
goal: € goal 
test; c-goal test introspec approach; €  match-rule set 
cost:  seconds 1 } 

figure 1: introspec schema 
employee. if introspec fails or runs out of resources  the manager is informed and decides whether to continue persuing the goal  what resources to expend  and to whom they should be {{ conspec 
{is a employee assigned. in this case  if introspec fails  ouestask is initiated and the user is queried as to whether a lion is a vertebrata. manager. example-manager 
window: r1 r1 
state: suspended 
suspended-rule: r1 
goal: €-goal-1 } 
}} 
figure 1: suspended conspec schema 
1 schema to evaluated  informs the manager  and ends. the manager activates  puts in the ready queue  the suspended {{ ouestauk 
{is a employee 
managkr: example-manager 
state: ready 
precondition: {is a capability 
goal: c-goal 
test: cgoal testouestask approach: €-question 
cost:  questions 1 } 
figure 1: questask schema 
1. observations and conclusions 
¡¡we described an approach for reasoning with incomplete knowledge in a rule-based system which integrates reasoning and knowledge acquisition. simply  it attempts to evaluate a rule's antecedent using resource-miserly methods. if these fail  then it posts the antecedent as a goal for evaluation by other knowledge sources in the system. this approach has several strengths: 
1. antecedents are quickly evaluated when the 
{{ c-goal-l {is a goal 
goal: e goal 
suspended ks: conspec 
rule: r1 
state: assigned expected cost:  seconds 1  
result: 
contracted ks: introspec 
budget:  seconds 1  
attempts: } 
}} 
figure 1: assigned c-goal 
information to answer it exists. the cost of metaevaluation at this point is the cost of interpreting the function's schema. small for a low-cost function  more expensive for a multifunction. 
1. when information is incomplete a variety of methods can be brought to bear on evaluating the antecedent. these 	methods 	require 	various 	amounts 	of resources. 
1 the choice of method to apply is left to the manager knowledge source which has a more global view of -attempt-1 
{is a goal-attempt ks: introspec 
method: € match-rule set 
cost   seconds 1  
reason.  list of unmatched attributes  } 
figure 1: c-goal attempt by introspec knowledge source 
the problem  hence can intelligently choose the best approach and the resources to assign1. 
1. even if an antecedent cannot be evaluated  the manager or an employee can force it to be true or false. in essence  creating an hypothesis  requiring dependency analysis capabilities  london  1; doyle  1 . 
1. the manager can postpone evaluating an antecedent to work on more important problems. 
   the problem of attention focussing  hayes-roth & lesser. 1  relies on good heuristics for choosing amongst alternatives  and a language for describing knowledge source capabilities  lesser  1 : fox  1b . 
whilo this ;ippin.ich provides greater control of the application of inference and knowledge acquisition methods in filling in missing information required by reasoning  it incurs two types of expenses. the first  is the added cost of rule meta-evaluation. for each function in the antecedent  the corresponding schema must be accessed and interpreted according to its type: lowcost  variable  or multi. hence  there is aper function constant overhead. in the ks system  the cost of interpretation has been removed. each functional schema is both a declarative and procedural representation that can be executed directly without interpretive overhead  fox  1a; 1a . hence  metaevaluation costs are negligable. 
¡¡the second expense is the increased complexity of the manager's rules to handle task selection  employee selection and resource assignment. research in perceptual tasks such as speech vision  e.g.  hearsay-ii  has shown the need for such capabilities when dealing with complex and uncertain data. 
1. acknowledgements 
1 ¡¡i would like to thank herb simon  john mcdermott and jaimie carbonell for their criticisms of earlier versions of this paper. 
1. 