
this work can be seen as a first approach to a new planning model that takes into account the possibility to express actions and fluents with non-boolean values. according to this model  a planning problem is defined using both graded  multi-valued and classical  boolean  fluents. moreover  actions that can have different application degrees can be defined. in this work a pddl extension allowing to describe such new problemsis proposedand a planning algorithm for such problems is presented.
1 introduction
in the last years  extensions of the classical planning model have been investigated  such as temporal models  conditional and contingent models  probabilistic models and other mixed models  for example  hoffmann  1; petrick and bacchus  1; bonet and geffner  1; chien and al.  1  . but  to the best of our knowledge  a feature of the classical model has never been modified: the use of boolean expressions to describe fluents and actions in the domains. this is often too restrictive in order to represent realistic domains because the world is not black and white  i.e. true or false  but it has a lot of colors  i.e. intermediate truth-values  or  degrees of truth  . a different approach to planning that takes into account a numerical  state  associated to a fluent is proposed in the probabilistic planning model  but  in this case   numbers  represent our knowledge or uncertainty about the state or the success of an action  while the real world is always two-valued.
　this work can be seen as a first approach to a new planning model that takes into account the possibility to express both actions and fluents with non-boolean values. according to this model  a planning problem is defined using both graded  multi-valued  and classical  boolean  fluents; moreover actions having different application degrees can be defined  i.e. actions having adjustable intensity and that can affect fluents proportionally to how much they are applied . in such a way  also the efficiency of actions can be easily represented.
　the work defines an extension of the planning language pddl that allows us to define planning domains and planning problems having graded fluents and graded actions  and a solving algorithm for such problems  where first a candidate plan with partially instantiated actions is constructed  then the plan applicability and correctness is verified by means of a translation into a mip  mixed integer programming  problem and finally  if a solution of the mip problem exists  a complete instantiation is made and the solution plan is found.
1 the planning language
the planning language proposed in this paper is based on standard pddl. it provides two kinds of actions and fluents  representing both classical boolean fluents and actions  and graded fluents and actions. both actions and fluents have an additional argument denoting their  degree of truth : in a fluent it means  how much  the predicate is true  1 means that it is false  1 that it is true  and in an action it means  how much  the action is applied  1 means that it is not applied at all  1 means that it is applied with the maximum efficiency .
　the type of such terms is declared as a new type degree in the pddl domain definition. if the fluent is boolean then its truth-value is a natural number in {1}  as in the classical model   otherwise  if the fluent is graded  its truth-value is a real number in  1 . the difference between the two kinds of fluents is declared in the domain description. there are different declaration sections for boolean and graded predicates.
　the additional parameter in an action denotes the degree of application of the action. again  the value of this parameter in boolean actions belongs to {1}  while it ranges in  1  in graded actions. actions may also have other additional parameters referring to fluent degrees. a specific section in action declaration allows one to associate fluents to degree parameters. such variables maybe used both in preconditions and effects: action preconditions may contain inequality constraints over fluent degrees and effects can be described by means of expressions that define the new  degree of truth  of a fluent as a linear combination of previous fluent values and the application degree of the action.
　the choice to include the degrees among the action parameters does not increase the complexity of the operators because  as explained in section1  such parameters are not instantiated during the solution search phase.
　the definition of a graded planning problem may contain an objective function  that is a linear function of the action application degrees that must be minimized or maximized when looking for action degree values satisfying a given partially instantiated plan. for example  it can be used in or-

figure 1: the system architecture
der to minimize the cost of the extracted candidate plan giving different operator costs. it is defined in a new section :objectivefunction ...  in the problem description. 1 system architecture
the system takes in input a graded planning problem
 i g f o  and if a solution exists it returns a graded solution plan p  otherwise if it terminates it returns a nosolution message. the system architecture is presented in fig.1: it is composed by three modules  the plan extractor  the system constructor  the mip solver.
　the plan extractor synthesizes a  candidate plan  p =  a1 x1  a1 x1  ... am xm   where actions are partially instantiated  i.e. where all application and fluent degrees are unbound but only the variables xi standing for the degree of application of ai are in evidence. it implements a simple backward algorithm with heuristic functions that solves relaxed problems. then the system constructor computes the world evolution using these actions  the resulting states depend on the action application degrees  and reduces the verification and full instantiation of the plan to a mip problem; it builds the mip problem corresponding to a candidate plan and passes it to the mip solver. during the system construction phase some conditions in the action preconditions are directly checked and if they are not satisfied the module fails and another candidate plan must be extracted. in this case the information about which action causes failure is used and another candidate plan is constructed replanning from this point. finally the mip solver computes a solution of the generated problem; if a solution exists it is a set of real and/or integer values ~g =  g1 ... gm  and the plan p =  a1 g1  ... am gm   is the graded solution plan of the given problem  otherwise a new candidate plan is extracted and a new mip problem is generated. 1 conclusions and related works
in this work a language and a model of planning with graded fluents and actions are presented. a prototype of the system has been developed.
　to the best of our knowledge this is the first system able to manage non boolean fluents and actions. recent works have proposed languages  fox and long  1; giunchiglia et al.  1; lee and lifschitz  1  and systems  for example  koehler  1; baioletti et al.  1; hoffmann  1; haslum and geffner  1   that can handle numerical values. degrees can be represented in pddl 1  but only if their values range on finite sets. graded fluents could be represented in pddl 1 by means of numerical fluents  functions  but respecting some more restriction w.r.t. what is done in this work. however  graded actions are not representable at all.
　at the moment we are working in two main directions. first of all an algorithm for intelligent backtracking when the mip solver fails and an improvement of the backtracking phase when the system constructor fails are under investigation. moreover a set of graded domains and graded problems is under construction in order to carry out a wide set of experiments. the second research direction is theoretical: an extension of the algorithm to planning under uncertainty on the initial state is straightforward  introducing variables for fluent degrees in the world construction. moreover we are investigating the possibility of representing and treating vague  fuzzy  fluents  using intervals or sets to represent fluent degrees.
