: prolog-blf incorporating fuzzy logic and some useful functions into prolog has been implemented as a basic language for building knowlegde systems with uncertainty or fuzziness. prolog-euf inherits a l l the preferable basic features of prolog. in addition to assersions with a truth-value between 1 and 1  1 for an exceptional case   fuzzy sets can be manipulated very easily to a certain extent. an application to a 
fuzzy logical database is illustrated. 
1. introduction 
　　　as a basic language for building knowledge systems  prolog has many preferable features  such as pattern matching  unification   automatic backtracking and relatinal database. it has been chosen as the kernel language of japanese f i f t h generation computer. many prolog-based knowledge systems have become to appear recently. 
　　　prolog  which is based on first-order predicate logic  more precisely  horn logic   deals with only a two-valued logic. knowledge sometimes manifests uncertainty in real-world problems. uncertain knowledge has played important role in many expert systems  such as mycin  prospector  casnet  speri1 1   etc.. when dealing with uncertain knowledge in prolog  some special programming techniques are required   which are annoying for us to build a large system. therefore  there exists a need for a basic language capable of dealing with uncertain knowledge. 
　　　in fuzzy logic  the uncertainty of a fact or a rule is expressed with a truth-value between 1 and 1. 
there 	are 	of 	course 	several 	other methods  such as 
mycin's certainty factor  subjective bayesian method  and dempster-shafer theory. however  unlike these methods  the fuzzy logic has a certain kind of logical feature. this logical feature can be extended to a fist-order predicate logic  which provids us a rich expressive power. 
	this 	paper 	presents a language called prolog-elf 
  incorporating fuzzy logic into prolog. the prolog-elf is different from existing fuzzy languages such as described in  1   because the prolog-elf is a general-purpose language which inherits all the preferable basic features of prolog. moreover  several useful predicates are imbedded in the prolog-elf. using these predicates  we can manipulate fuzzy sets very easily to a certain extent. 
　　　the prolog-elf is implemented on pascal and completely operational on vax-1. this paper describes some features and considerations on the prolog-elf and its application to a fuzzy logical database. 
1. toward fuzzy prolog 
　　　although fuzzy sets are considered in general fuzzy logic   we will at first consider logical formulae expressed with symbols in ordinaly sense. the certainty of the logical formula is expressed with a truth-value t  where 1 t 1. in the fuzzy logic.  a different kind of fuzzy logic in which linguistic truth-values are used is presented in .  

most of logical laws  such as commutative  associative  distributive and demorgan's laws  are hold in fuzzy logic  except excluded-middle law; that is  t p and -p  and t p or -p  are not always 1 and 1  respectively. 
　　　lee and mukaidono considered the resolution principle as a mechanical inference of fuzzy logic. if we interprete p- q as   p or q  in fuzzy logic  the well-known inference rules  i.e.  modus ponens  modus tollens and syllogism  become the special cases of the resolution principle. by introducing arguments attached to the logical symbol  predicate  and unification  the fuzzy logic can be extended to fuzzy first-order predicate logic. 
　　　lee has proved that  if a l l the truth-values of parent clauses are greater than 1  then a resolvent clause derived by the resolution principle is always meaningful and has a truth-value between the maximum and minimum of those of the parent clauses. mukaidono showed an interpretation that  even if a truth-value of the parent clause is less than 1  a resolvent clause is meaningful in the sense of reducing ambiguity. 
　　　expressions in prolog are restricted to horn clauses which have at most one positive l i t e r a l   so that the efficient linear input resolution can work as 
a complete resolution. if we define a horn clause witrh a truth-value less than 1 in fuzzy horn logic  it is equivalent to the negation of the clause which goes beyond the scope of horn clause. therefore  in order to realize a fuzzy-prolog  we basically restrict our logical expression to the horn clause with a truth-value greater than 1. the result of the resolution in this case is guaranteed to be meaningful based on the lee's paper. 
　　　it is a problem if the truth-value of a clause including variables changes when the variables are instantiated by the unification. we take however a 
　　　position that the truth-value of the clause will not change due to the unification. 
　　　one major difference in the inference process of fuzzy-prolog from that of ordinary prolog is that exhaustive search is often required at an or-branch  since the maximum truth-value of a literal is looked for at this branch. 
1 m. ishizuka and n. kanai 
1. prolog-elf 
     prolog-elf has been implemented based on the above-sentioned principle and by adding some useful functions for a basic language of knowledge systems. 
　　the clauses in prolog-elf are expressed in the following forms. 
definition clause: 
goal clause 
the truth-value of the clause can be assigned as; 
       1.+p-q. 	or 	-assert 1:+p-q. . when the definition of the truth-value is omitted  then the default truth-value is 1. if all the clauses have the truth-value 1  	the behavier of the prolog-elf is 
essentially the same as that of ordinary prolog. 
     the reason why we have adopted above notation for a clause  i.e.  +p-q-r.  instead of a popular notation such as p:-q r.  is to avoid a question regarding the interpretation of implication. in fuzzy logic   pv q is not only the interpretation of p- x ; there are several other interpretations  1 . using our notation  we can make it clear that our prolog-elf works starting from axioms defined in clause forms  some of which can be interpreted  if appropriate  into implication forms. 
     a variable in prolog-elf is denoted as a character string headed by *.  single * can be also a variale.  the result of the execution of a goal clause  if its truth-value is larger than a predetermined threshold  described later   is displayed in the form of  for example; 
1:-p apple . 
     some of the system predicates characterizing prolog-elf are as follows. 
 1  thresh : this predicate sets a value given as its argument to a threshold. the clause with a truth-value less than this threshold is ignored or regarded as false  which initiates the backtracking during the execution process. the default of this threshold is 1. a threshold below 1 is permitted only for exceptional cases  which suffer a risk of going out of the scope of horn logic.  see a comment regarding a predicate not.  
 1 mode setting predicates there are three operational modes in prolog-elf. the following predicates perform as a switch to change the mode.  1  n1-query : the system searches and displays a first-encountered answer regardless of its truth-value. this is the default mode and the behavior is equivalent to that of ordinary prolog.  1 query all the answers are searched and displayed. 
 1 best n  : the system displays top n answers according to their truth-values. in order to improve search efficiency  a dynamic thresholding strategy is adopted in this mode. the threshold is set dynamically to the value of the n-th truth-value from the top of already obtained answers. 
 1 usevalde this pridicate assigns a truth-value given as its argument to the associated clause. using this predicate  we can represent fuzzy sets very easily 
as exemplified in fig.l. 
 1 value : this is a deterministic predicate which returns a truth-value of a clause given as its first argument to its second argument. for example  suppose that 
1:+p a . 
　　　　　1:+p b . have been defined. then  when 
-value -p +x .  *val . 
is executed  *x and 1val are at first unified to a and 
1  respectively. once the backtrack occurs  *x and *val are then unified to b and 1  respectively. fig.1 shows an interaction exemplifying a usage of the predicate value. 
 1 chvauje : this predicate updates the truth-value of 

 1 not : as in ordinary prolog  not fails in the normal threshold setting of prolog-elf if there exists at least one answer. however  if the threshold setting is less than 1. the result of unification during the execution of not may remain in prolog-elf. for example  suppose that the threshold is 1 and the answer of dmaxckp x .   is 1:dmaxckp a .   then not p: x .   will succeed with the truth-value of 1 -1.1  and with the unification that +x is a. 
1. application to a fuzzy logical database 
     as an application of prolog-elf  a fuzzy logical database including fuzzy rules and fuzzy set concepts is illustrated in fig.1  where a person who may possibly have a second house is retrieved from stored facts and heuristic rules. several other applications including a production system have been written by the 
authors. 
1. concluding remarks 
     prolog-elf incorporating fuzzy logic and related some useful functions has been implemented as a basic language of knowledge systems with uncertainty or fuzziness. 
     one problem of the prolog-elf is its slow speed  since the exhaustive search is often required at the or node. one way to avoide this problem is to set the threshold to an appropriatly high value. some mechanisms to improve search efficiency are planned to implement in a future version; but it seems that ultimate solution may be a parallel processors like japanese fifth-generation computer. a knowledge management mechanism using meta-predicates is scheduled to be added to prolog-elf. 
ackmowledgmeitt: the prolog-elf has been implemented with reference to the program of dr. h.nakashima at electrotechmcal lab.  who is the author of prolog/kr. the authors are grateful to him. 
   this work was supported by grant-in-aid tor special project research  ministry of education  japan. 
m. ishizuka and n. kanai 1 
