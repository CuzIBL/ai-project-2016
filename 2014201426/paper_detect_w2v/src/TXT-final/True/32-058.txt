 
in this paper  we use a logic-based system description for a simple  non-logic  functional language to examine the ways in which a diagnosis system can use its system description to improve debugging performance. the key concept is that the notion of expression replacement  which is the basis for repairing a program  can also serve as a fundamental heuristic for searching the source of an error. we formally define replacements in terms of fault modes  explicitly define a replacement order  and use the replacement heuristic for finding diagnoses. finally  we incorporate the use of multiple test cases and discuss their use in discriminating between diagnoses. 
1 introduction 
although model-based diagnosis  mbd   reiter  1; de 
kleer and williams  1  provides a general diagnosis framework  most of its applications are within the hardware domain or use models of the physical world. however  several attempts have been made to extend the application of diagnosis methods to software debugging. a model for diagnosing logic programs was introduced in  console et al  1  and further studied in  bond  1; 1 ; qualitative models of recursive functions wer studied in  missier et al.   1 . in  friedrich et a/.  1   the model-based diagnosis of circuit designs written in the vhdl hardware specification language used an abstract model that allows diagnosing very large programs. a graph-based model for diagnosing a functional language  exp was presented in  stumptner and wotawa  1 . 
　all these approaches have in common that they use only a model which can be directly derived from the given program and the used programming language. no additional formal specification must be available  so that the diagnosis system can be directly integrated into a traditional software development process. in this paper  we describe the underlying concepts of replacement-based software diagnosis by defining a can be adapted to other functional  or sequential assignment languages  and has the advantage of being executable over the definition of  stumptner and wotawa  1 . we keep the ability to introduce models for expression replacements that explain a faulty behavior  and discuss the application of multiple test cases  which can reduce the number of diagnoses by excluding certain replacements - a phenomenon that is dual to the concept of physical impossibility. this helps to focus on faulty program parts without using too sophisticated models. user interaction  the user as oracle  is replaced by sets of prespecified test values. 
　to begin  we briefly recapitulate the basic mbd definitions  see  reiter  1; struss and dressier  1; wotawa  
 1  . a diagnosis problem consists of a system description  sd  describing the behavior of components  comp  and their interconnections. the component behavior is associated with component modes. for every component at least the correct behavior  -ab mode  must be specified. let obs be a set of observations. a diagnosis for  sd  comp  obs  is a set of mode assignments   associating one mode with every component  such that does not lead to a contradiction. 
　this paper is organized as follows. first  syntax and semantics of the language of expressions  exp  is given  followed by the introduction of the associated system description. afterwards  replacements and the use of multiple test cases are discussed. the final section concludes the paper and gives future research directions. 
1 modeling programs for diagnosis 
programs can be viewed as static and dynamic objects. the program's static part is limited by the syntax given by the used programming language  while the dynamic part is related to the semantics. executing a program causes the evaluation of constants  variables  functions  etc. using environments  which map variables to their actual values and function identifiers to their definition or body  which can be changed during evaluation. in this paper  we introduce a model for a simple functional programming language exp with the following instruction syntax  declaration constructs omitted for brevity : 


concise logic-based model for a variant of exp. the model 
　 this work was partially supported by the austrian science fund  fwf  project n z1-inf. 
1 	qualitative reasoning and diagnosis 


　it is assumed that vs contains all variable symbols  fs all built-in functions  fv all user-defined functions  and a all constants. built-in functions  including predicates  represent the basic functionality of the language. they include functions such as + or * depending on the implemented data types. while constants evaluate to the same value every time  variables evaluate to values depending on the current state of the environment that stores the values. likewise  the bodies of user-defined functions are stored in a function environment. formally  we define a variable environment as a function i : and a function environment as a 
function 	' associating expressions with func-
tion symbols. we denote the set of all variable environments by venv.  the set of all function environments by fenv. 
　in addition to the function environment we introduce the function variables which returns all variables used in the body of a user-defined function. 
　the semantics of exp  given in a declarative manner  describe how exp expressions are evaluated. we use a call-by value semantics for this paper. the semantics are given by an evaluation function t : 
values which maps expressions  programs  together with the given environments to a set of result values. 

1 
　to use mbd for software debugging we must identify diagnosis components and build a system description. because exp allows building programs out of expressions  we use expressions  or  put differently  nodes in the syntax tree  as diagnosis components. to differentiate between separate occurrences of textually identical expressions we introduce a function k which assigns an unique number to every expression. a system description for exp must have the same properties as the semantics. results obtained by the semantics must be also derivable by the system description. 

　if we examine the data flow between the components  we find that they form a tree-structured system with co as top component. such a system can be diagnosed very effectively  stumptner and wotawa  1 . in the next step  we define a system description expsd for exp programs. 
　the semantics definition in  stumptner and wotawa  1 turned out to be somewhat unwieldy. the formal definitions where complex  and required another step to be mapped to a logical representation for a diagnosis system. therefore we use a prolog-like description  which also has the advantage of being executable. the evaluation is defined using a predicate eval  expr  varenv  val  step  where 
expr denotes the expression to be evaluated  varenv a list of variable value pairs  val the value returned by the evaluation  and step the number of iteration steps. the variable environment of our running example is expressed by 
  x 1     y 1   . note: to handle unknown values  i.e.  values that cannot be derived from the description and observations  we introduce the distinguished value c. 
　the function environment is represented by the predicates body/1 and variables/1. to evaluate a call to twodimln  the facts body  twodimln  if  x   1  and  y   1  then ln x*y  else 1 end i f   and variables  twodimln   x y    are added to the system description. 

* built-in functions 
the following rule belongs to the system description for every built-in function  or predicate  used in the program 

	stumptner and wotawa 	1 


  undefined behavior 
if a component is assumed to behave incorrectly  the undefined value is returned as result. 
eval 
　it can be shown that this system description produces an evaluation that corresponds exactly to the semantics of exp. 
　to complete the system description for model-based diagnosis we must introduce the concept of observations. therefore we introduce the predicate observe/1 using the expression  the environment  and the expected value as arguments. an observation for our example can be observe twodimln 1 /env 1 . 
　in this case no environment ist specified because the function call does not make use of variables. we say that an observation contradicts the system description if the value derived from sd is not equal to the observation. this rule is added to our system description. 

　observations are facts and cannot contain the undefined value e. the predicate equalenv/1 is true if both environments contain the same elements. 
with the system description expsd we can compute 
 minimal  diagnoses as described by reiter  reiter  1 . for example assume that instead of  y   1  the programmer has written  y   1  as subcondition. using the test case twodimln  1  we can compute the following six single diagnoses: 
1 	qualitative reasoning and diagnosis 

　among 1 diagnosis components  the diagnosis engine has found 1 diagnosis candidates. in the rest of the paper  we discuss how to further reduce the number of suspected components. first  by using replacements to attempt to correct a program  as described in  stumptner and wotawa  1 . the second idea is to use multiple test cases and the information related to them. finally  we can introduce fault modes and their corresponding behavior. we can easily prove whether a condition within a conditional statement is a single bug or not by inverting the conditional statement's behavior. unfortunately  applying this fault mode has a significant drawback. if we are diagnosing a recursive function  inverting the condition may lead to an infinite loop. in the example we can 
use this mode effectively - if the condition is be inverted  correct behavior will result. therefore  only the diagnoses 
 remain. we refer to the variant of expsd with the wrong condition fault mode as expsd+. we assume this variant is used below whenever the function to be diagnosed is not recursive. 
1 software debugging as search for replacements 
as argued in  console et al.  1   applying model-based diagnosis to software debugging reduces the number of diagnosis candidates compared to classical program debugging techniques such as  shapiro  1; fritzson and nilsson  1  and this is already the case with a straightforward application of the standard diagnosis approach to debugging. on the other hand  we are normally not only interested in finding an expression explaining the wrong behavior  we also want to give a correction that will produce the expected behavior instead. in the hardware domain this correction is simple. only the defective component of one type must be replaced by a working component of the type specified in the hardware design1. in this case  the search space for replacement is of size 1. in the software domain  or design domain   a replacement can be every buildable function  and in this case  the search space is infinite. however  attempting to correct a program also has the benefit that diagnoses that cannot be combined with a meaningful correction of the error can be excluded from consideration. this was the main reason for the introduction of expression replacements in  stumptner and wotawa  1. every replacement represents a possible correction for the program  and to handle the infinite search space  we need to define an effective ordering on replacements. note that even in simple cases  it is not always clear what criteria should be applied to produce this order. for example  is replacing the variable x by the constant xc a smaller change than replacing it by the variable y  
　we define replacements as expressions  i.e.  a replacement is an element of exp. we introduce an ordering on the replacements that are used instead of a given original expression. this ordering is specified by defining a function replace 
   'this formulation includes the possibility that a component of a wrong type has been used. 

　note that for diagnosis purposes we can ignore replacements of subexpressions  as the need for replacement of only a subexpression would be directly expressed by that subexpression becoming a diagnosis candidate of its own. 
　figure 1 illustrates the application of replacements to the syntactical representation of a program as a tree. in case  1  the constant 1 is replaced by the constant /.  1  gives the case figure 1: three ways of applying replacements 
where an argument has been selected from a function  case  1  shows a constant replaced by a function with two arguments. 
　the set of possible replacements can be further reduced by considering type compatibility. e.g.  a multiplication function should be only replaced by another function returning a number. the same holds for variables and constants. 
　to use the replacements in our system description we must add a fault mode replace. we represent it by the predicate replaces/1 that can be constructed from the computed replacements. let e be an expression  and n be the order of the replacements. for every replacement used for diagnosis we have to add the  ground  fact replaces  e  r  to the system description  where . the behavior for the fault mode is specified in a natural way by: 
where it is assumed that the expression r and all of its subexpressions behave correctly  i.e.  -ab. in principle  given these definitions  the system description is equivalent to expsd combined with the explicit enumeration of all possible replacements for a given program. while the latter set is infinite in general  the subsets corresponding to a maximum expression depth of replacements  referred to as expsd' from here on  are finite for given i. 
the debug algorithm  from  stumptner and wolawa  
1   computes diagnoses using replacements. diagnoses are searched for incrementally  starting with replacements of order 1 and stopping after reaching a specified size limit. after a replacement is generated  it is tested for outcome. note that only replacements of minimal order are taken into account  e.g.  if a replacement of order i explains the fault  no replacements of order  must be considered. 
　assuming that consistency checks take linear time  the time complexity of diagnosis is of order where comp denotes the set of diagnosis components. adding as set of fault modes mode  e.g.  as done by introducing replacements  increases time complexity to 
. the time for computing single diag-
noses is of order o  mode     comp    limiting the applicability of this approach to small programs. however  use of focusing techniques or incrementing the replacement size during debugging increases practicability. focusing can be achieved through a more abstract model  exploiting structural properties of the program  e.g.  using only those expressions evaluated for a testcase as diagnosis components   or  static  program slicing  see  weiser  1  . in this paper we will 
	stumptner and wotawa 	1 

instead focus on the use of multiple testcases as described in the next section. 
1 using multiple test cases 
in this section  we show the use of  multiple  test cases for debugging  with two ways of filtering diagnoses. first  the goal is simply to find replacements at all - diagnoses that cannot be repaired are discarded. second  multiple testcases can be combined for finding common diagnoses. 
　consider for example the following  buggy  functional program implementing the equality predicate 

the program can be corrected by replacing the   by  =. assume further the existence of the following test cases: 

　only the third input vector  a = 1  b = 1  leads to a wrong output value  false instead of true . using the mbd approach leads to the four single diagnoses: 
1. the and function is faulty. 
1. the condition b   a contains the fault. 
1. the variable occurrences a or b are faulty. 
　by using the following argument  we can show that the function and cannot be the source of the bug. 
　first  assume that the statement explains the fault  e.g.  ab and . then there must exist a replacement  e.g.  another function  repairing the program. since all other expressions are assumed to behave correctly  we can calculate the inputs and output of the and function. 

　such a replacement function must deliver true and false using the same input vector! therefore no replacement can be found  contradicting our initial assumption. as final result we get that ab and  cannot be a  single  diagnosis. 
　a limitation to this use of test cases is that the argument used to eliminate a diagnosis can only be applied if no faults in structure are assumed. this assumption is avoided by the second way of using test cases. 
　a collection of test cases can help to focus on the right fault in a more traditional way as well. consider for example the recursive function mymult implementing the multiplication on natural numbers  including zero . 
 end if 
this implementation contains a  single  bug  namely  a 
 = 1   which should be  a  = 1 . applying five test cases to the implementation results in the following: 

　using program debugging based on program traces  one of the approaches described in  stumptner and wotawa  1   leads only to the unsatisfactory result that all subexpressions can explain the faulty behavior. this holds especially for the third test case   only the subexpressions leading to the expression 1 are diagnoses. by computing the intersection of all minimal  non-empty  diagnoses  we obtain the diagnoses explaining all test cases. the prerequisite for using the intersection is of course the assumption that all test cases only exhibit one fault in the program. in the general case  the following definition can be used instead together with a general diagnosis algorithm  e.g.  reiter's hitting set algorithm. 
	formally  a diagnosis 	for a diagnosis system 
 sd comp  using multiple test cases os is a subset of 
co mp such that 

similarly  a conflict co is a subset of comp such that 

　a conflict contradicts at least one observation. the above definitions can now be used for computing diagnoses as described in  reiter  1 . the filter criterion previously described in this section  which avoids replacements that are impossible due to contradictory input-output vectors  must then be incorporated into the system description sd  e.g.  by introducing meta rules of the form contradiction :- -repairable  diagnosis  . 
　in  stumptner and wotawa  1   we have presented as one of the main differences between software and hardware diagnosis the property that in the software domain the system description is of necessity derived from the program code it self  and therefore describes the incorrect behavior of the system. this is the reason why fault modes are represented by replacements  i.e.  actually removing components instead of altering their behavior. 
　the same duality can be found here  with the nonreplacability described above being the dual concept to the notion of physical impossibility in hardware diagnosis. the major difference is the infinite nature of the replacement search space as opposed to the fact that physical impossibility is a fixed restriction that always holds. the reduction in the search space does not result from properties of the original expression  diagnosis component   but of the specific replacement expression chosen. 
1 conclusion 
in this paper we have introduced a logic model for the debugging of the functional language exp. the model includes the handling of recursive functions. infinite loops are simply avoided by specifying a maximum recursion level  which is 

1 	qualitative reasoning and diagnosis 

just what programmers do to stop computation of a program that exceeds its expected runtime . we use this representation for the diagnosing exp programs via replacements for expressions  stumptner and wotawa  1   which yields the following principal advantages:  1  the number of diagnosis candidates can be reduced  expsd plus appropriate filter 

criteria   and  1  the program can be automatically repaired up to a given level of  damage   expsdi . since diagnosis time increases with the number of component modes  replacements should be only used when necessary  i.e.  if too many diagnoses are derived and measurement selection is difficult or not possible. therefore we prefer simpler explanations when conducting replacements and incorporate multiple test cases. we have given an example that shows how different tests can help to improve diagnosis results by eliminating diagnosis candidates. 
　in this context the questions becomes relevant how testcases are actually generated. test generation is still an open problem in software engineering research. one current research approach in this field uses path analyses techniques combined with constraint satisfaction techniques to reduce the search space  gotlieb et al  1 . a different technique is the so-called mutation testing which attempts to produce testcases for correct behavior of a certain program part by making local alterations  or mutations to the program. note that there is a certain similarity to the replacement approach. however  mutation testing works by applying alterations to a correct program in the hope of creating a representative set of incorrect ones foffutt and lee  1 . those testcase generation techniques are intended to find a faulty behavior rather than locating a specific bug. in our case an incremental test generation algorithm using previous results  i.e.  testcases and diagnoses  to find a testcase helping to distinguish between diagnoses should have an improved performance. a classification of testcases from a model-based diagnosis point of view with a rough outline of testcase generation has been given in  mcllraith  1 . 
　future research along the track described in this paper includes an empirical evaluation of the proposed methods together with the development of a heuristics for controlling the debugging process. overall control consists of selecting an appropriate sequence of actions leading to a bug free program within a minimum amount of time. actions are observe  use'replacement  and use-other-testcase  with test cases automatically chosen from a library . it is interesting to note that the relative costs for these actions can be  depending on program size and complexity  significantly different from the usual relationships in the hardware domain.  friedrich and nejdl  1; williams and nayak  1  provide a basic framework for integrating planning in model-based diagnosis and can be adapted to be used in the software domain. 
