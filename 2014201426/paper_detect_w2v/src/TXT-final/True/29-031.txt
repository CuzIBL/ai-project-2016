 
recently researchers working in the lfg framework have proposed algorithms for taking advantage of the implicit context-free components of a unification grammar  maxwell and kaplan  1 . this paper clarifies the mathematical foundations of these techniques  provides a uniform framework in which they can be formally studied and eliminates the need for special purpose runtime datastructures recording ambiguity. the paper posits the identity: ambiguous feature structures = grammars  which states that  finitely  ambiguous representations are best seen as unification grammars of a certain type  here called  interactionfree  grammars  which generate in a backtrackfree way each of the feature structures subsumed by the ambiguous representation. this work extends a line of research  billot and lang  1; lang  1  which stresses the connection between charts and grammars: a chart can be seen as a specialization of the reference grammar for a given input string. we show how this specialization grammar can be transformed into an interaction-free form which has the same practicality as a listing of the individual solutions  but is produced in less time and space. 
1 	introduction 
chart-parsing is a well-known technique for representing compactly the multiple parses of a cf grammar. if n is the input string length  the chart can register all the parses in 1 n1  space  although there may be an exponential number of them. each parse can then be recovered in linear time from the chart. 
　chart-parsing can be extended to cf-based unification grammar formalisms such as lfg or dcgs. in this case  however  the valid parses of the input string cannot be recovered so easily from the chart. interaction between feature structures can in theory lead to np-complete complexity: printing the first valid parse may require exponential time. 
　such complex interactions are however rare in natural language. there is growing agreement among researchers about the  mild context-sensitiveness  of natural language  joshi. 1; vijay-shanker and weir  1 . this means that nl grammars deviate only minimally in complexity from the context-free class. thus  although nl grammars written in a unification formalism may appear superficially to be highly context-sensitive  most of the interactions between features tend to be local  so that many of the unification constraints could in principle be replaced by fine-grain context-free rules. 
　recently researchers working in the lfg framework have proposed algorithms for taking advantage of the implicit context-free components of a unification grammar. several related algorithms have been proposed  which rely on a notion of  disjunctive lazy copy links   a form of information propagation in feature structures which is only triggered in case of possible interactions between features  maxwell and kaplan  1 . 
　this paper clarifies the mathematical foundations of these techniques  provides a uniform framework in which they can be formally studied and eliminates the need for special purpose runtime data-structures recording ambiguity. the paper posits the identity: 
ambiguous feature structures = grammars  
which states that  finitely  ambiguous representations are best seen as unification grammars of a certain type  here called  interaction-free  grammars  which generate in a backtrackfree way each of the feature structures subsumed by the ambiguous representation. this work extends a line of research  billot and lang  1; lang  1  which stresses the connection between charts and grammars: a chart can be seen as a specialization of the reference grammar for a given input string. we show how this specialization grammar can be transformed into an interaction-free form which has the same practicality as a listing of the individual solutions  but is produced in less time and space. 
1 	natural-language processing and graphical presentation the paper proceeds in the following way: 
  charts can be seen as grammar specializations. the context-free case is presented first  then the case of cfbased unification grammars; 
  the rhs of rules can be standardized: the unifications explicitly appearing in the rhs can be standardized to a normal form; 
  the notion of a interaction-free  or if. grammar is introduced; a unification grammar is called if when its standardized rules have a certain property which guarantees absence of conflict when expanding the rhs nonterminals. 
  the chart corresponding to a given input string is gener-ally a non-if grammar. an algorithm which transforms this grammar into an equivalent if grammar is introduced. 
1 charts 
charts as grammar specializations for a cfg in chomsky normal form  binary rules   and for an input string of length n  a chart can be built in time 1 n1  and space 1 n1  which recognizes whether the string belongs to the language associated with the grammar. if not only recognition  but also 
parsing of the string is required  then it is convenient  during the bottom-up construction of the chart  to associate with each edge the collection of combinations of daughter edges from which this edge can be obtained. the augmented chart then requires 1 n1  space  but then each parse tree can be recovered in a trivial way by starting from the top edge and following top-down the links between mother and daughter edges. in this way  an exponential number of parse trees can be represented in polynomial space. 
　it has been remarked in  billot and lang  1  that an augmented chart for a cfg g  given the input string a. can be viewed as a context-free grammar generating only a  possibly more than once. each mother edge a is seen as a nonterminal  and each combination of daughter edges   b c   associated with a is seen as the rhs b c of a rule whose lhs is a this rule corresponds to a specific instance of some rule of g. each top-down traversal of  generates a parse tree for  which is also a parse tree relative to the full grammar g. we will call the grammar  a specialization of g for the given input string.1 
     1 charts applied to fsas more generally  it is possible to directly extend chart-parsing  with the same polynomial bounds in time and space  to the situation where the input string of words is generalized to any finite-state automaton fsa. chart edges are constructed in the usual way  but they now connect automaton nodes rather than positions in the input string. the chart constructed over fsa can then be seen as a cfg gfsa   a specialization of g  which generates the intersection of the regular language associated with fsa and the cf language associated with g  lang  1 . thus chart-parsing is connected to the closure of context-free languages under intersection with a regular language  and the original proof of this closure property  bar-hillel et al  1  can be seen as a charts and unification chart-parsing methods extend naturally to unification grammars based on a context-free backbone  such as lfg  kaplan and bresnan  1  or dcg  pereira and warren  1 . for ease of exposition  we will use a dcg-like notation  but we believe the results to be applicable to any cf-based unification grammar. 
　assuming a grammar with binary branching rules  any grammar rule can be written in one of the following forms: 

for a non-lexical rule r  and: 

for a lexical rule 1. nonterminals are written as lowercase letters  terminals under brackets  and uppercase letters are variables representing feature structures. the notationur  a  b  c  is an abbreviation for the set of unification constraints relating the structures a  1 and c that appears in rule r. 
　for such a grammar  one can construct a chart/grammar specialization for a given input string1 in the following way: 
  one constructs a chart for the cf backbone of the gram-mar as in the previous section; this chart can be seen as a specialization of the cf-backbone. 
  each non-lexical rule 

of the cf-backbone specialization can be seen as a specialization of a rule 

of the cf-backbone. where the nonterminals a'  b'  c' are specializations of the nonterminals a  b  c  that is  a' is the instance of the nonterminal a covering a certain specific substring of the input . 
  each such rule r is augmented into: 

where a  b  c are fresh variables  and where is the set of unifications associated with r' in the original grammar. 
  a similar operation is performed for the lexical rules. 
　the unification grammar obtained by this process is an extension of the chart/grammar obtained for the cf-backbone. it is a specialization of the original unification grammar  which is equivalent to this grammar as far as the given input string is concerned. if one uses the specialization grammar in a generation mode  expanding nonterminals top-down and 
forerunner  as well as an extension!  of chart-parsing. 
1  or  more generally  any input fsa. 
	dymetman 	1 

 collecting  the unification constraints  one obtains sets of constraints which collectively describe  when they are jointly satisfiable  feature structures associated with the initial symbol s of the grammar. 
　the specialization grammar accepts at most the given input string. determining whether it does accept this string can 
however still be a difficult problem. two cases can occur: 
1. the chart/grammar for the cf-backbone contains cycles  that is  there exists some nonterminal a  or equivalently  edge  in this grammar which calls itself recursively. this can only happen when the cf-backbone is an infinitely ambiguous cfg  or  in other words  if the given unification grammar is not offline-parsable  pereira and warren  1 ; offline-parsability is guaranteed under certain conditions  such as the fact that the cf-backbone does not contain any chain production 
a  b or empty production   kaplan and bresnan  
1 . 
when there are cycles in the chart  determining whether there exists a traversal of the  unification  specialization grammar which has satisfiable constraints is in general undecidable. 
1. the full grammar is offline-parsable. then the chart/grammar for the cf-backbone is acyclic. in this case  there are only a finite number of top-down traversal of the  unification  specialization grammar. for each of the traversals  one can perform unification of the collected constraints. each traversal for which the constraints are satisfiable gives rise to a feature structure solution for the input string  or  more precisely  to a  most general unifier  in prolog terminology  or a  minimal feature structure  in lfg terminology . 
　the second case is by far the most important in grammars naturally occurring in nlp. the recognition problem is then decidable  and all the feature structure solutions can be enumerated in finite time. however  there may be an exponential 
number of these solutions  and it can be shown that  in general  the problem of determining whether a solution exists is np-complete in the length of the input string  it is easy to simulate a boolean satisfaction problem with a non-cyclic unification grammar . with nl grammars  however  such intrinsic complexity apparently does not happen: as was discussed above  nl grammars are  almost  context-free  so that unification features could in principle be  almost  dispensed with  and then  there would be no unification interactions to cope with. 
　in the remainder of this paper  we will explore ways to transform the specialization chart/grammar obtained for an offline-parsable grammar in such a way that each top-down traversal leads to a satisfiable set of constraints. because of the np-completeness property noted above  such transformed chart/grammars could in theory take exponential space  but the situation seems to occur rarely  if ever  with nl gram-
1 	natural-language processing and graphical presentation 

  if two constraints have non-disjoint identification sets  then replace them by a single constraint having as identification set the union of the two identification sets  and having as access relations the union of the access relations of the two constraints; 
  if a given constraint contains two access relations with the same label  /  b  and  /  g   then eliminate the second of these relations  and add to the constraint set a new constraint   b  c   expressing the identification of b and g. 
after a finite number of steps  no more such transformations can be done. at this point  two cases can occur: either some identification set contains two different atomic constants  which indicates unification failure  in which case one replaces the whole constraint set by the singleton t  or this is not so  in which case the unification set is in standardized form. 
standardized rules 	a grammar rule 

is said to be standardized if the unification constraint set ur is in standardized form. from what has just been said  it is clear that any grammar rule can be put in standardized form without altering the structures accepted by the grammar. 
1 interaction-free grammars 
from any  binary branching  cf grammar g  one can obtain a related unification grammar g'  which  registers  the derivations of g. if 

is a non-lexical rule of g  then the corresponding rule of g' is: 

where a  b  c are fresh variables  and where the constraint expresses that the left constituent of a is b  its right constituent c. similarly  for a lexical rule: 

of g. the corresponding rule of g' is: 

which indicates that the lexical value of a is t. 
　the grammar g  which we call a a pure derivation grammar  accepts the same strings as g  and assigns to them a functional description which is just an encoding of the derivation tree for g. 
　it is clear that  in any top-down traversal of g'  the constraints cannot clash. in fact  if one considers the set of constraints collected during such a traversal  it is obvious that this set is a standardized unification set  so that no interaction exists between the different variables. 
　we now introduce a definition which generalizes the situation obtained with g': 
	a grammar is called an interaction-free  	or 
/f  grammar  if all its standardized rules are interaction-free  that is  have the following two properties: 
  the unification set of the rule is not { t } ; 
  if b is the variable associated with any rhs non-terminal b  then this variable does not appear in the identification set of any unification constraint in the rule. 
　it can be checked that this condition is respected by grammar g'. in an interaction-free grammar  any top-down traversal gives rise to a standardized set of unifications  so that no clash can occur between constraints. 
standardized unification sets and interaction-free rules 
the choice of representation for unification constraints made in section 1 was obviously not the only one possible. a more standard  but equally expressive  notation for unifications would have been: 
 a l b  
for access constraints  and: 
c = d 
for equality constraints. 
　the interest of the notation of section 1 is that the notion of standardization can be defined in it straighforwardly  and that this last notion is directly related to the property of interaction-freeness. because of the form of a standardized rule  it is obvious that a variable b that does not appear in the identication set of any unification constraint can be set arbitrarily by the  nonterminal call  b b . without risk of clashing with variables set by other nonterminal calls in the rule. 
　this is to be contrasted with the situation had the more standard notation been used. consider  in such a notation  the following rule: 

　in this rule there can be a conflict between the assignments given to b and to c. this is because  implicitly  the value of the 1 attribute in b is equal to c. on the other hand  using the notation of section 1  the standardized rule is written as 

which is immediately seen not to be interaction-free: b appears in the identification set of the second constraint. 
	dymetman 	1 


1 	natural-language processing and graphical presentation 

were many analyses for the adjunct  this unique rule would take care of all of them. this is to be contrasted with the case where we would have evaluated all the nonterminals appearing in the rhs of the s rule  where each solution for the adjunct would have been explicitly represented along with the others. 
　the example  although simple  displays the crucial feature of the transformation into if form: partial evaluation is performed only in case of need; as soon as a nonterminal can no longer interact with its siblings in a rule  it is not expanded further. if this nonterminal itself has a number of possible solutions  these solutions are kept  factorized  in the grammar. 
ambiguous structures seen as if grammars grammars are a kind of and/or representation: alternative rules for expanding the same nonterminal correspond to a disjunction  while a string of nonterminals on the rhs of a given rule corresponds to a conjunction. 
　an acyclic if grammar with no unproductive nonterminals is an efficient representation of the several feature structures it generates: if one traverses this grammar top-down from its initial nonterminal s  then one never backtracks  because all nonterminals are productive  and because the collected constraints cannot clash. thus one can enumerate all the structures in a direct way. such grammar representations can be likened to finite-state representations for dictionaries  which  although they are more compact than simple lists of words  have for most purposes the same practicality as such lists. 
1 	conclusion 
this paper has brought together two current lines of research:  i  viewing charts as grammar specializations  and  ii  extending chart-like ambiguity packing to unification grammars. by doing so  it has clarified the principles underlying the nature of shared representations  stressed the link between grammars and representations  and opened the way for further applications in computational linguistics. 
acknowledgments thanks for discussions and comments to max copperman  lauri kartunnen  bernard lang  john maxwell and eric villemonte de la clergerie. 
