 
vital information for corporate activities is generally stored in large databases. while conventional data-base management systems offer limited query flexibility  systems capable of generating similarity-based queries  such as those seen in case-based reasoning research  would certainly enhance the utility of data resources. this paper describes a method for building case-based systems using a conventional relational data-base  rdb . the core of the algorithm is a novel approach to similarity computing in which database query form similarities  rather than similarities of individual cases  are computed. the method uses standard query language  sql  to achieve nearest neighbor matching  thus allowing similarity-based database retrieval. it has been implemented as a part of the caret case retrieval tool and evaluated through the use of a newly developed corporate-wide case-based system for a software quality control domain. experiments have shown the proposed method to provide retrieval results equivalent to those of non-rdb implementation at a sufficiently fast response time. 
1 	introduction 
this paper describes the architecture and performance evaluation of a case-based reasoning system built on a commercial relational data-base management system  rdbms . specifically  the authors have developed caret  case retrieval tool   a tool which generates appropriate sql  ansi  1  expressions to carry out similarity-based retrieval on a commercially available rdbms  such as oracle  oracle  1 . the core of the algorithm is a novel approach to similarity computing which pre-computes query form similarities  rather than the similarities of individual cases. 
　the motivation behind this research was two-fold. first  the use of a rdbms  or a mechanism with equivalent functions  was found to be the minimum requirement for cbr systems to be installed as part of a corporate-wide information system. this requirement was pointed out by engineers and managers in corporate 
case systems laboratory** 
nec corporation 
1-1 shibaura  minato 
tokyo  1 japan kitano spls1.ccs.mt.nec.co.jp 
data processing divisions and other administrative divisions. important reasons include the need for security control and integrity management. 
　second  significantly large data-bases in various domains presenly available in many corporate information systems are built on commercial rdbmss. applications using cbr would allow exploring new horizons in corporate information systems  since current rdbmss only provide relatively primitive  i.e. only exact match  query capability. efforts to convert these data-bases into independent cbr systems  however  will inevitably undermine security control and waste computing resources  memory and cpu . in addition  since two separate data-bases would be created in such a conversion  the integrity of the case-base would not be maintained because the mechanism for automatically reflecting changes in the rdb to case-base would  for both technical and security reasons  not be installed 
　the underlying belief behind these observations is the mainstream dogma  which claims that a cbr system should be integrated into a mainstream corporate-wide strategic information system. this idea was first advocated in  kitano et a/.  1; kitano et a/.  1  and has been the central core of the cbr-related research activities at nec corporation. development of a cbr architecture using rdbms would be a major step forward toward achieving the goals of the mainstream dogma. 
unfortunately  however  no existing cbr system uses 
rdbms as its case-base manager. even commercial tools  such as cbr express on art-im  remind  and esteem  do not incorporate rdbms. of course  not all 
cbr systems require tight security control and integrity management. nevertheless  the advantages inherent in building cbr systems using rdbms are remarkable. the authors argue that this is one of the most significant unexplored avenues in cbr research and describe the architecture and evaluation results of their proposed cbr system for rdbms. 
1 	problems in current case-base management 
the case-base management concept is critically lacking in the current research on cbr systems. this is mainly due to the fact that a vast majority  if not all  of cbr systems have been built as task-specific domain problem 
	shimazu  kitano  and shibata 	1 
solvers. these systems  similar to most expert systems  are detached from mainstream information systems for a corporation. however  as has been clearly demonstrated in the wide-spread use of data-base management systems  dbms   data resource management is an essential issue the corporate information systems. 
lb be more specific  the following issues have not been 
addressed in previous studies on cbr systems. 
security control: in real applications  collected cases include secret information for a corporation or a department. no cbr systems developed so far incorporated any security measures. in the absence of the security control  the system can not be used for highly confidential information where maximum value can be exploited. 
scalability the efficiency of a cbr application heavily depends on the number of cases collected. in some real applications  collected cases can increase drastically chronologically. for example  in the squad system  a corporate-wide cbr system for software quality control domain  kitano et a/.  1   over 1 cases have been added into its casebase each year. since real domains are often very complicated and ill-formed  use of complex indexing  as seen in  hammond  1; hunter  1; ashley and rissland  1; kolodner  1   would require significant development costs and the system behavior would be unstable  as the experts themselves do not fully understand the nature of such domains. it would be beyond control of system engineers. 
speed although various indexing and case-base organization methods have been investigated  only a few studies addressed the issue of computing cost. fast case retrieval is an indispensable feature of realworld applications  particularly for very large casebases. 
1 c a r e t design decisions 
this section describes major design decision made in developing caret  case retrieval tool . 
1 	case-base management using r d b m s 
the most significant design decision was the use of a commercial rdbms for its case-base manager. each case is represented as a record of a relational database table. the use of a rdbms offers several advantages  such as  1  data security   1  data independence   1  data standardization  and  1  data integrity. the use of rdbms  however  automatically forces caret to generate sql specifications  codd  1; chamberlin et a/.  1  to carry out any case-base retrievals. sql is the standard relational database access language. however  sql does not entail any similarity-based retrieval features. the essence of this work  therefore  is to find a method to carry out similarity-based retrievals using sql. 
the other constraint  imposed from the use of 
rdbms  is that cases have to be represented as a flat 
1 	machine learning 

record of n-ary relations. rdbms do not entail a mechanism to support a complex indexing scheme  as seen in most cbr researches. however  this constraint is not necessarily a limiting factor for case representations. through the squad development  the authors learned that complex indexing schemes are too difficult to maintain  particularly for ordinary system engineers. 
1 	similarity definition using abstraction hierarchy 
similarity between values is defined using an abstraction hierarchy  shown in figure 1. it is defined for each attribute in a flat table  such as language  machine  and os. in this example  the similarity between c and c++ is 1. similarity between the input query and each case in the case-base is calculated by referring to the similarity of values in each attribute. 
1 	case retrieval using nearest neighbor 
caret uses nearest neighbor retrieval  instead of indexing-based methods. typically  a similarity between a query  q  and a case  c  in the case-base  s q c   is the weighted sum of similarities for individual attributes: 

where wi is the t-th attribute weight  s qi  ci  is sim-
ilarity between the t-th attribute value for a query  q  and that for a case  c  in the rdb. 
　traditional implementations would compute the similarity value for all records  and sort records based on their similarity. however  this is a time consuming task  as computing time increases linearly with regard to the number of records in the case-base  c : cardinality of the data-base  and to the number of defined attributes  d : dtgree of the data-base . this results in time-complexity of 1 c x d . this implementation strategy for rdbms would be a foolish decision  as individual records have to be retrieved to compute similarity. thus  the total transaction number would be intolerable. 
　the challenge here is to discover an algorithm to implement the nearest neighbor algorithm using sql sufficiently efficient to be practical. the following sections 

describe such an algorithm and report on its performance using the deployed system. 
1 generating sql specifications with similarity measures 
1 creating neighbor value sets 
for each attribute  caret refers to the abstraction hierarchies   as shown in figure 1  to generate a set of values neighboring the value specified by the user. for example  assume that the user specified bsd1 in the hierarchy shown in figure 1  bsd1 is an element in the firstorder neighbor value set  lst-nvs . bsd1 is an element in the second-order neighbor value set  1nd-nvs . svr1 and svr1 are elements in the third-order neighbor value set  1rd-nvs . such sets are created for each attribute. 
　assume that the user specified vax for an attribute machine and ada for an attribute language in the hierarchies in figure 1  table 1 shows the generated nvs sets. 
1 enumerating the combinations 
next  all possible neighbor value combinations are created from the n-th order neighbor value sets. figure 1 illustrates how such combinations are created. this example assumes that the user specified values for attribute language and machine. all value combinations under attribute language and machine will be created. weight of attributes  1 for language and 1 for machine  and similarity measure  such as 1  1  1 assigned to each value set  are used to calculate the similarity between a combination and the problem definition specified by the user. using the neighbor value sets from the previous example  combinations shown in table 1 are created. 
		 1  
where r is a number of attributes specified by the user  
and di is the depth of the tree of the attribute t. augmenting this formula to a more general case which does not involve disjunction  would lead to the following equation: 
 1  
where 
t. 
1 	assigning similarity value 
for each combination  a similarity value is calculated using similarity between values of attributes specified by the user and values of combinations created in the previous stage. the calculation is similar to the weighted nearest neighbor  except that not all attributes are involved. the caret algorithm does not compute any attributes not specified by the user. the rationale for this approach is described in  kitano et a/.  1 . whether the user specified the attribute or not is shown in a mask matrix  m   which is a one-dimension matrix whose size is equivalent to the case-base degree. the matrix element mi  will be 1  if the user specified the value for the attribute i. otherwise  mi  will be 1. the formula for calculating the similarity is as follows: 

	shlmazu  kitano  and shlbata 	1 

　where f is an nvs combination and fi is the i-th attribute for the combination. it should be noted that similarity is calculated between the user specified attributes and combinations of nvss which is the seed for sql specifications. in essence  the similarity is computed between a user's specification and sql specifications. this is counter to traditional methods  which compare a user's query specification with each case instance. for example  the similarity of a combination    c  c + +   cobol  cobol/s    sun  news  ...   to the user's query specification is calculated as follows: 
		 1  
　the similarity value is 1 because only attributes language and machine are involved  the user specified only these attributes   whose weights are 1 and 1  respectively. the similarity between ada and  c  c++  cobol  cobol/s  is 1 and that for vax and  sum  mews  . . .   is 1. 
1 	thresholding and n-best match 
when there are too many combinations  translating all combinations and dispatching all sql specifications are inefficient and wasteful. methods to limit the number of sql specifications to be created are necessary in real deployment. two approaches are incorporated in the caret system. 
　the first method is the n-best match. caret dispatches sqls from highest similarity score  and counts the number of cases retrieved to stop the retrieval  when the number of retrieved cases exceeds a predetermined number. 
second  a threshold can be set in order to dispatch 
sql specifications  which are sufficiently similar to the user's problem specifications. sql specifications below a specified threshold will not be created. 
1 	generating sql specifications 
each combination is translated into a corresponding sql specification. since sql does not involve the similarity measure  the value assigned in the previous process is stored in caret  and is referred to when the query results are returned. 
the only sql expression type used here is the 
select-from-where type. its form is 
select fields list 
from case-base table 
where field conditions; 
　this should read  select records in a case-base table which satisfy specific field conditions in the where clause  and return the value of the requested fields in the select clause from the selected records . 
　each element in a specific combination is translated into a certain condition expression of sql. for example  machine evs1  is translated into  machine = evs1  which means that the attribute machine must be ews1. language  or  c  c++  cobol  cobol/s   is translated into  language in  c  c++  
cobol  cobol/s   which means that the attribute 
1 	machine learning 

figure 1: squad-ii screen image 
language must be c  c++  cobol  or cobol/s. then  each condition expression is connected with the logicaland operators. for example  and  machine  vax   language  or c  c++  cobol  cobol/s   is translated into  machine = vax  and  language in  c  c++  cobol  cobol/s  . 
　as a result  the sql specification would be produced. an example of the generated sql is shown below. 
select * 
from case-table 
where  machine = vax  and 
　　　　　 language in  c c++ cobol cobol/s  ; 1 performance evaluation 
　caret performance was evaluated using the squad-ii system which is a deployed case-base system built on caret using oracle  a commercial rdbms. squad-ii is a direct descendent of the squad system which has been applied to the software quality control  swqc  domain. the prime difference between squad and squad-ii is the use of rdb in squad-ii  where squad was built on a homemade case-base manager. squad-ii users are assumed to choose several attributes and their values which describes the problem which the user is facing. the user's choice  then  is interpreted by caret  embedded in squad-ii  to produce sql specifications. sql specifications are sent to oracle to retrieve cases of software quality control. results are shown in the squadii screen  figure 1 . 
　the experiments were carried out on sun sparc station 1  using oracle version 1 installed on sunos version 1.1. figure 1 shows the response times measured for three user queries  and various sizes of case-bases. the three queries are: 


　for query-1  the following sql specifications and their similarity values are derived  see table 1 . 
characteristics for each query are shown in table 1. 
query length refers to the number of conjunctive clause in the where clause. tree depth shows abstraction hierarchy depth for each attribute. tree width is the number of terminal nodes of the abstraction hierarchy of each attribute. generated sql number is the number of sqls generated and actually sent to rdbms. cases matched shows the number of cases matched in each query. 1-1 should read as 1 matches at the first sql  1 matches at the second sql  and 1 matches at the third sql. these numbers are measured with a case-base containing 1 cases. 
　the algorithm scalability has been tested by increasing the number of cases in the case-base. the number of cases was increased up to 1. response times  in realtime  not in cpu time  are shown in figure 1. 
　query-1 returned the major part of cases in the casebase  resulting in slower response time due to the necessity to retrieve these cases. the response time for the query-1 increases linearly as the case-base size increases. indexing methods for the commercial database systems are not effective for reducing response time in such situations. also  most of the time is spent on retrieving matched cases  rather than on matching itself. 
　fortunately  however  users generally specify a query in a much more detailed manner. an empirical analysis  using the squad system  showed that the average number of specified attributes for each retrieval was 1 out of 1 features  kitano et a/.  1 . this would help rdbms to constrain the search and the query time would be dramatically shorter. the second and third queries confirm this observation. 
　the second and the third queries show a nearly constant time responses  regardless of the case-base size. this is due to the fact that sql specifications are specific enough to constrain the search on rdbms. since the system provides fast response time  it would suffice for most tasks. 
　a brief analysis of the performance results would shed light on the system behavior. there are two major factors which affect retrieval speed. they are: number of sql specifications actually dispatched to the rdbms  and number of cases retrieved. the maximum number of the sql specifications which may be created is decided by a number of specified attributes by the user and the depths of the tree of the specified attribute  equation 1 . longer response time is required with a larger number of cases to be retrieved. the number of cases to be retrieved depends upon the specificity employed in the sql specifications. query-1 resulted in longer response time than query-1 and query-1  because a large number of cases had to be retrieved. query-1 and query-1 attained faster response time  because sql specifications were specific. 
1 	c o n c l u s i o n 
this paper proposes a new method which enables the use of rdbms as a case-base management system. although case-base management  such as data-security and data-integrity  which are readily available in rdbms  has not been the subject of significant case-base reasoning  cbr  research  case-base management functions are essential to the integration of cbr systems with mainstream corporate information systems. 
　this paper has proposed a novel method to implement similarity-based retrieval using sql  hereby enabling cbr systems to use rdbms. the algorithm was implemented as a caret case retrieval tool. caret generates sql specifications of varying degrees of similarity  and the generated sql specifications are dispatched to 
	shimazu  kitano  and shibata 	1 

 hammond  1  hammond  k. case-based planning: an integrated theory of planning  learning  and memory. ph.d. thesis  yale university  1. 
 hunter  1  hunter  l  the use and discovery of paradigm cases ph.d. thesis  yale university  1. 
 kitano et a/.  1  kitano  h.  shibata  a.  shimazu  h.  kajihara j.  sato  a.  building large-scale 
corporate-wide case-based systems: integration of organizational and machine executable algorithms. in proceedings of aaai1  1. 
 kitano et a/.  1  kitano  h.  shimazu  h.  shibata  a.  case-method: a methodology for building largescale case-based systems. in proceedings of aaai1  1. 
 kolodner  1  kolodner  j.  retrieval and organizational strategies in conceptual memory: a computer model. lawrence erlbaum associates  hillsdale  nj.  1. 
 oracle  1  oracle database administrator's guide  and other oracle manuals. oracle corporation  
1. 
	1 	1 	1 	1 	case 
figure 1: response times for three user queries 
rdbms to retrieve cases from rdb. the method we have proposed here determines a pre-compute similarities for individual query forms  rather than computing the similarities of individual cases. 
　a performance test using squad-ii  a corporate-wide cbr system built on caret  has demonstrated that the proposed method attains acceptable performance and suggests that the proposed method is practical for large-scale case-bases used in workstations. the proposed method  then  is well-suited to serve as a basic algorithm for corporate-wide large-scale case-based sys-
tems. 
