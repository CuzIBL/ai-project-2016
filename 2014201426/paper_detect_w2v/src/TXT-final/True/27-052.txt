 
　with tht emergence of broad-coverage parsers  quantitative evaluation of parsers becomes increasingly more important we propose a dependency-based method for evaluating broad-coverage parsers the method offers several advantages over previous methods that are based on phrase boundaries the error count score wl propose here is not only more mtuitivtlv meaningful than other scores but also more relevant lo semantic interpretation we will also present an algorithm for transforming constituency trees into dependency trees so thai the  .valuation method is applicable to both dependency and constituency grammars finally we discuss a set of op erations for modifying dependency trees that can be used lo eliminate inconsequential differences among different parse trees and allow us to selectively evaluate different aspects of a parser 
1 introduction 
with the emergence of broad-coverage parsers  quantitative evaluation of parsers becomes increasingly more important it is generally accepted thai such evaluation should bt conducted b  comparing the parser-generated parse trees  we call them answers  with manually con structed parse trees  we call them keys  however  how such comparison should be performed is still subject to debate several proposals have been put forward  black ct al 1  magerman  1   all of which are based on lhe comparison between phrase boundaries in answers and kev   wt propose a dependency-based evaluation scheme m which tht dependency relations rather than phrase boundaries  are the focus in the comparison between answers and keys we then show that the dependency based scheme offers several advantages over previous proposals note that the use of dependency 
   'the aulhor wishes to lhank 1jcai reviewers for pointing out several errors in the draft and mr wei xiao for lm plementing the algorithms presented in the paper the au thor is a member of the institute for robotics and intelligent systems  iris  and wishes to acknowledge lhe support of the networks of centres of excellence program of the gov eminent of canada the natural sciences and engineering research council  nserc   and the participation of precarn associates inc thi1 research has also been partially supported by nserc research grant ogp1 
1 	natural language 
relations here does not mean that the scheme is onlv applicable to dependency grammars it only means that constituency trees have lo be transformed into dependency trees before answers and keys are compared a 
transformation procedure will be presented in section 1 
1 	previous approaches 
g iven a node in a parse tret  the sequence of words dominated bv the node form a phrase and the boundary of the phrase can be denoted by an integer interval  i j  where ; is the index of the first word m the phrasr and j is the index of the last word in the phrase for lxample the parse tree in  1  contains three phrase boundaries 
 1    1   and  1  
 1   they   came  yesterday   
　previous evaluation schemes can be classified as phrase-level or sentence level in a phrase-level  valuation  the following goodness scores are computed 
precision and recall the phrase boundaries in the answer and the key art treated as two sets  a and k respectively  the recall is defined as the percent-
age of phrase boundaries in the kev that are also 
　　　　　　　　　　　　　1 found in the answer  kfsf   the precision is de fined as the percentage of phrase boundaries in the answer that are also found in the key   unai 
ml ' 
number of crossing-brackets a pair of phrase boundaries  i j  and  i' j'  are said to be crossing brackets if i   i'   j   / parsers can be evalu ated by the dverage pairs of crossing brackets per 
sentence 
for example  suppose   1  is the key and  1  is the answer 
 1    they  came    yesterday   
the phrase boundaries in  1  are  1    1    1   and  1  thus  the scores of  1  are precision= =1%  recall=|=1% and there is one pair of crossing brackets  1  in the key and  1  in the answer these scores have to be considered together to be meaningful for example  treating the sentence  they came yesterday as a flat list of words  they came yesterday  would achieve 1-crossing-brackets and 1% precision however  the recall is quite low  1=1%  


	lin 	1 


	1 	nature language 

lilt evaluate deptree key 	deptree anseer  
errorcount for each word in the sentence 
if  the position of the key is not equal to 	' and the position or the head of the key is not equal to that at the answer  

     errorcount - error-count return errorcount 
parsers and treebanks use constituency grammars a cru cial issue that must be resolved is how to apply the method to constituency grammars 
   in this section we preterit an algorithm lu transform the constituency trees into dependency trees if one or both of the key and the answer arc represented as con stituency trees  we first transform them into dependency trees and then evaluatetc the parser with the resulting dependency trees 
　the transformation algorithm is based on magerman's method for determining heads  lexical representatives  in   fg parse trees  magerman  1 p 1  following 
magerrman thf1 transformation is driven bv a tree head 
 table which contains an entry tor every non-terminal symbol in the grammar given a node in a constituency tree the corresponding entry in the tret. head table can be used to determine the head child of the node  the head child of a node is either its lexical head or a child that dominates its lexical head  
   untries in a tree head table are triples  parent d i r e c t i o n h e a d - l i s t   where parent is a grammatical catagory  d i r e c t i o n is either r i g h t - t o - l e f t or l e t t - t o - r i g h t and h e a d - l i s t is a list of grammatical categories three sample entries are shown in  1  
 1   s r i g h t - t o - l e f t  aux vp hp ap pp   
 vp l e l t - t o - n g h t  v vp   
 hp r i g h t - t o - l e f t  pron n hp   
the firtst entry means that the head 	hild of an s node is the first a.ux node from right to left or if the s node does not have an aux child the first vp node from right to left  	for example given the tree head table in  1  and the constituency tree in  1a  the lexical heads and the head children of the nodes in  1a  are listed in  1b  
 1  

child of any given node in a constituency tree using the tree head table 
   unlike  magerman  1   where lexical heads of phrase are identified from bottom up vvc use a top dovvn recursm procedure makedeps to construct dep  ndency trert  according to parse trees 1 lie procedure returns the lexical head of the tree 
  l l   tree ＊&kedepb tree root  deptree depe  
{ 
if  root is a leaf node  return root tree headchild - findheadchild root  tree lexhead   makedepsgieadchild deps  for each non-head child ol root { 
lexheadofchild - bakedepa child  deps  
	adddeprelqejchead 	lexheadofchild  deps   
  
return leihead 
  
the function adddeprekhead  m o d i f i e r   deptree  inserts the dependency between head and modifier into the dependency tree deptree the main idea of the al gorithm is as follows 
  find the head child of the root 
  make a recursive call to construct the dependency tree according to the subtree rooted at the head child and return the lexical li ＜ad of thf head child 
 which ih also the lexical head of the root node  
  for all other children of the root 
- recursively construct a dependency tree according to the subtree rooted at that child and return the lexical head of the child add the dependency relationship between the lexical head of the root and the lexical head of the child 
1 	m o d i f y i n g d e p e n d e n c y trees 
in  black cl al  1l   certain nodes in the answers and keys arc f ased before they are compared ihe erased elements include for instance auviharies 'not and preninriitival ' to i h e reason for the removal is that there are many possible ways to analyse structures involving ihest elements  all of which are correct m their own way a evaluation scheme should not prefer any one of the theories and penalize the others 
　there are many other kinds of allowable differences that may not be eliminated by simply removing elements from parse trees in this stction  we propose a set of operations for modifying dependency trees in a more flexible and principled fashion we then demonstrate  by 
	lin 	1 

 1  tree findhead child tree node  	node 	is assumed to be interior 
treeheadentry entry search entry label node  treeheadtable  for each h in headlist entry  
enumerate children of node according to direction entry  if  label currentchild ~h  return current child  
if  direction entry -'left-to-nght'  return flrst child  node  

else return last child  node  
means of examples  how these operations can be used to eliminate inconsequential differences and to allow selective evaluation 
　the process of dependency-based parser evaluation is depicted in figure 1 the modify module normalize the dependency trees before they are evaluated the modify module consists of a sequence of operations each operation specifies a possible alternation to a dependency relationship it consists of a condition part and an action part if a dependency relationship satisfy the condition  the corresponding action will be performed on the dependency the algorithm for modify is shown in  1  
a condition is a triple 
　　　　　 head modifier  relationship   where head and modifier are restrictions on the head and the modifier of a dependency relationship the optional relationship component is a restriction on the type of the dependency relationship the first column in table 1 contains several example conditions the second column contains the dependency relationships that 
satisfy the conditions 
　the action part specifies the modifications to the dependency relationship we have implemented three 
types of actions {deletion  inversion and transfer  
deletion delets head  modifier  deptree  removes the dependency relationship between head and modifier from the dependency tree deptree 
inversion 	invert  head 	modifier  deptree  
reverses the direction of the dependency relationship between head and modifier in the mean time  if head also has a head  called head of head   then the 
1 	natural language 
dependeniy between the head of head and head is replaced with the dependency between headofhead and modifier tranefer  head  modifier  deptree  
transfers modifiers of modifier to head words  all the modifiers of modifier now become 
　in the remainder of this section  we demonstrate how these modifications can be used to eliminate inconsequential differences and to allow selective evaluation 
1 	eliminating inconsequential differences 
different grammars often treat adverbs differently for example  in 'she will leave soon   the adverb 'soon' can either be analyzed as the modifier of 'will'  figure 1a  or  leave'  figure 1b  if the operation 
      if   cat aux   cat v    invert transfer   is applied to both trees  they become identical  figure 
1r  	in figure 1a the dependency link from 	wilt to 
' leave' is first inverted  so that  will' becomes a modifier of  leave  then  the modifiers of  wiir   she and 
 'soon'  are transferred to 'leave'  resulting in figure 1c 
　conjunction is another syntactic phenomenon that tends to be treated differently in different theories figure 1 shows three alternative analyses of the dependency tree of  saw a and b   they can be transformed into an identical form by the operations shown in the figure note that such variations in the analyses of conjunctions cannot be normalized by simply removing elements from parse trees 
1 selective evaluation 
the modification to the dependency tree also allows us to selectively evaluate the performance of parsers with 

 1  	vold 	modify 	 operations 	deptree deptree  
for each operation  condition  action  in operations for each dependency relation dep in deptree 
if  dep satisfies condition  perform action on dep 

score is not only more intuitively meaningful than other scores but also more relevant lo semantic inurprctilion we also presented an algorithm that transforms constituent trees into dependency tree so that the valuation method is applicable lo both dependency -ind constituency grammars finally w  proposed a set of 
operations for modifying dependency treeb thd  can ht used to eliminate inconsi quentnl difference  among dif ferenl parse trees and allow us to sthctiulv cvaluite 
different  aspects of a parstr 
