 
we present a new approach to model-based monitoring and diagnosis of dynamic systems. the presented diamon algorithm1 uses hierarchical models to monitor and diagnose dynamic systems. diamon is based on the integration of teleological parameter-based monitoring models and repair-oriented device-based diagnosis models. it combines consistencybased diagnosis with model-based monitoring and uses an extension of the qsim-language for the representation of qualitative system models. furthermore  diamon is able to detect and localize a broad range of non-permanent faults and thus extends traditional diagnosis which exclusively deals with permanent faulty behavior. the operation of diamon will be demonstrated on a real-world example in a multiple-faults scenario. 
1 introduction 
only a few model-based approaches trying to monitor and/or diagnose dynamic systems have been published in the past  e.g.  dvorak and kuipers  1; ng  1  . most of them resort to qualitative simulation as an inference engine during the troubleshooting process to predict possible behavior patterns. additionally  the architecture of the used qualitative system models is either non-hierarchical or contains discrete layers of abstraction. 
   unfortunately  all approaches concentrate either on monitoring  i.e. fault detection  or on diagnosis  i.e. fault localization  and therefore miss important aspects of effective and efficient troubleshooting. we present an integrated algorithm which performs both tasks and which can therefore be used as a widely applicable general framework for troubleshooting dynamic systems. 
　we start in section 1 with a discussion of the various problems that occur in the course of troubleshooting dynamic systems. in section 1 we present our approach how to solve these problems and describe the important 
1
	 diamon 	means 	diagnosis 	and 	monitoring 
algorithm 
properties of diamon. the operation of diamon is shown on a real-world control problem - troubleshooting a central heating system. section 1 discusses related research work and compares it with our approach  closing with some comments on future work. 
1 troubleshooting dynamic systems 
in order to build an integrated control system doing both monitoring and diagnosis in dynamic environments  we have to be aware of the issues which are involved in such a task. 
1 	dynamic vs. static diagnosis/monitoring 
while diagnosis of a faulty component in a static system is a comparatively straightforward sequential process of fault detection  measurement selection and fault localization  e.g.  de kleer and williams  1    this process grows more complex in a dynamic system. 
example 1  central heating system:  consider the central heating system depicted in figure 1. the function of the central heating system is to guarantee that the actual room temperature troom equals the intended room temperature twanted. 

figure 1: central heating system 
　in the course of monitoring and diagnosing this dynamic system  we have to solve the following problems: 
multiple layers of detail: due to the use of several layers of models  monitoring models  hierarchical diagnosis models   we must take a changing system description and component set into account. in order to improve efficiency  real-time monitoring tends to minimize the amount of parameters under observation  and constraints are usually not componentoriented. in our example  checking the thermostat and the room temperature is enough for most monitoring purposes. hierarchical diagnosis models use mostly component-oriented constraints at different abstraction levels. in our example  the most detailed level includes all the components depicted in figure 1. 
temporal observations: observations consist of sets of measurements at different time points  determining the value of a specified set of parameters at different times. as a consequence  taking measurements sequentially is not feasible in a dynamic system as all parameters in a measurement set have to refer to the same system state  which changes over time . additionally  the observation rate has to be chosen such that all system states can be observed. 
time dependent behavior: we have to take various modes of correct behavior and various system states into account. for example  after turning the thermostat to a higher temperature  the temperature difference between room and thermostat temperature is perfectly normal. however  if they are not equal after a sufficient time period has elapsed  this difference leads to a conflict set. 
intcrmittency of faults: static diagnosis   reiter  1   assumes that the mode  ok or ab  of a component does not change during the diagnosis process  non-intermittency of component modes . however  this may or may not be recognized in the different situations which are characterized by the parameter sets. a dynamic diagnosis system has to handle this intcrmittency of faults. for example  if one of the heating elements is not working  we detect this fault only after a sufficient time period has passed and the room is still not warm enough. 
intra state consistency: some diagnosis engines   davis  1   use multiple test vectors  parameter sets  which are assumed to be independent and describe only one system state. in dynamic systems we have to describe the system in several system states. therefore not only conflicts of a parameter set with respect to the correct system state are relevant  but also conflicts describing faulty transitions between these system states have to be included into diagnosis. in our example  assume two system states heat and cool. the transition from heat to cool takes place  if while the system changes 
from cool to heat  if if such a transition takes place too early  i.e.  if the heater turns off too quickly   we get a conflict with the specified behavior. 
　the above discussion shows that the current stateof-the-art of model-based diagnosis which is limited to static systems and permanently faulty behavior is unable to solve the discussed problems. it is the goal of our approach to extend model-based diagnosis with respect to dynamic systems and to solve most of the above mentioned problems. 
1.1 	monitoring - a necessity in dynamic systems 
　having designed a structural and behavioral model of a static device we can unambiguously derive predictions about its correct behavior. therefore  we do not have to monitor a static system as its behavior is precisely determined. however  making predictions about the correct behavior of dynamic systems is a more complicated task. if we resort to qualitative modeling techniques and use qualitative simulation for behavior prediction  we can usually predict more than one possible behavior pattern. consequently this requires a monitoring phase in the troubleshooting process to detect inconsistencies between sets of observations and possible correct behavior patterns. 
　on the other hand  we claim that it is not necessary to observe all possible correct behavior patterns. it is sufficient to determine whether the device fulfills its function or not. for example  we will use a car long after some small deviations from its original behavior specification have occurred. in general this function of a device can be modeled according to its purpose tel  which  for example  is expressed in first order sentences  by a teleological monitoring model  denoted with telm  following the condition 
	note that in the above definition 	will be 
the dynamic system itself  i.e. we can use the abbreviation ok  device  . however  we can easily extend this general concept to allow subpurposes of subparts of the system. 
　in contrast to  franke  1  who proposes the derivation of teleological models from an envisionment  we derive such models heuristically. we claim that a teleologic model contains meta-knowledge about the purpose of the device which can only be determined by a human expert and which includes such knowledge as which faults can still be tolerated. 
　while monitoring  we have to check only the accordance of the actual behavior with this teleological model under the assumption that the device works correctly. 
definition 1  monitoring  monitoring is the process of testing whether 

is consistent. 
　usually fault detection alone is not sufficient and we need an additional diagnosis phase to provide sufficient information about fault localization for repair. 
　additionally  we have to clarify how the choice of a qualitative model influences the monitoring and diagnosis process. 

1 	different types of qualitative models 
1.1 	simulation models 
　doing simulation we are mainly interested in the behavior of the dynamic system over time. this behavior is optimally deduced from a structural model which uses time-varying parameters as its model primitives and which does not necessarily have to contain componentoriented knowledge. 
　further we want to derive all behavior patterns with respect to the qualitative model no matter whether they describe faulty or correct behavior. note that the term all refers to the chosen level of qualitative abstraction in the simulation model. the partial inclusion of models which describe physically impossible behavior is caused by the qualitative nature of the representation language and the problem-solving strategy of the simulation algorithm   kuipers  1  . 
1.1 	monitoring models 
　we claim that the main task of monitoring is to check in real time if the purpose of the system is still fulfilled. a monitoring system observes under real-time constraints a small set of parameters and determines their correctness with respect to the system description. 
　therefore  a monitoring model usually contains only a few parameters and constraints necessary to describe the teleological purpose of the device. informally  we restrict the set of simulation models by adding teleology in accordance with the previous discussion about teleologic monitoring models. 
　note that a monitoring model can be viewed as an instantiation of the system's teleology. in general  however  system teleology may cover a broader range of purpose than the monitoring model actually expresses. 
1.1 	diagnosis models 
　simulation and monitoring models are both built using parameters and constraints. this parameter-oriented view  however  is not sufficient for diagnosis. parameters can represent fault symptoms  e.g. the exceeding of thresholds   but faults are usually related to physical components. we assume here that the main aspect of diagnosis is to provide information for repair  and only mechanical devices  and not parameters  can be repaired 
1
 . we therefore have to relate purely parameter-oriented constraints  e.g. qsim-constraints  to the device components that we want to diagnose and to repair. 
　diagnosis models include component-connection information and are typically hierarchically structured. it is obvious that the lowest-level model has to contain only components which can be repaired  also called smallest replaceable units or srus. the choice of the srus de-
pends on the availability of a repair-technician as well as on cost considerations. 
diagnosis greatly benefits from hierarchical models. 
complex real-world technical systems include intrinsic hierarchies which are related to the modularity or the 
　　the adjustment of parameters is a struggle against fault symptoms  not against fault causes. 
purpose of the mechanism. note that not only a deviceoriented structural model can be hierarchical; we use hierarchical  parameter-oriented structural models as well to represent decomposable physical quantities  e.g. fluid flow . 
　we have of course described extreme positions for these models. sometimes it might be useful to express sub-purposes of sub-mechanisms. on the other hand  diagnosis coupled with repair is also often oriented towards reconstruction of a teleology which may be different from the one used for monitoring   friedrich et a/.  1  . 
　the above discussion shows that diagnosis models are more restricted than simulation models 1 but cover a broader range of expertise than monitoring models do. 
1 t h e d i a m o n s y s t e m 
the following section introduces the d i a m o n system  a qualitative reasoner for model-based diagnosis and monitoring  which incorporates the principles discussed in the previous section. 
1 	example: central heating system 
figure 1 shows the constraint-network of the central heating system: the parameter model and the device model are connected by constraints. the devicemodel contains three hierarchies consisting of 1 component  central heating   1 components  room  boiler  pipe-system  and 1 components  thermostat  radiator  heater 1  heater1  switch  insulation  pipes  pump . 

figure 1: constraint network for the central heating 
　we use a flat monitoring model and a hierarchical diagnosis model which consists of two levels. the monitoring level is modeled with 1 parameters and 1 constraint. the first diagnosis level  describing the 1 devicecomponents  uses 1 parameters and 1 constraints  the 
1 with respect to their qualitative expressiveness 

sru-level  describing the 1 device-components  which is used for repair consists of 1 parameters and 1 constraints. 
　table 1 explains those parameters of our model that are used for monitoring and diagnosis. 

table 1: model parameter 
1 	qualitative modeling using device constraints 
we extend the qsim-language of  kuipers  1  by adding device-oriented knowledge to the constraints. 
definition 1  device constraint  the syntax of a device constraint is grammatically defined as follows 

where  constr  and  corresp.values  refer to the traditional qsim definitions of  constraint  and  corresponding - values   and  i of comp  denotes the list of device components which are associated by the constraint. 
example 1 the device constraint 

is interpreted as follows: 
  parameter pb is a rnonotonic function of parameter pa 
  the constrained parameters are associated to the device-components c1mp1 and c1mp1 
  if the qualitative value of pa is landmark value 1ml  or lm1   then pb simultaneously has the qualitative value lm1  or lm1 . 
　according to the introduced device-oriented extension  we distinguish between four classes of device constraints in our modeling language. 
teleologic device constraints: a teleologic device constraint contains parameters that are used during the monitoring cycle to detect a first fault symptom. it is obvious that the device itself  at its highest level of abstraction  is the device-oriented part in such a device constraint. 
example 1 in our example  the following teleologic device constraint states the desired relationship between the intended and the observed room temperature: 

tautologic device constraints: these constraints exclusively denote relations between parameters that cannot cause inconsistencies due to a component failure. we use them to denote laws of nature  for example energy-conservation  or to relate computation parameters. in contrast to the other types of constraints a tautologic device constraint is not associated to any component as it can not provide any diagnostic information for troubleshooting. 
example 1 in our example  we use a tautologic device constraint to relate the intended room temperature  the actual room temperature and the temperature difference  which is a computation parameter . nil denotes the empty component set. 

singleton device constraints: 	some device con-
straints are explicitly associated to only one component. they express restrictions on internal operations of the component which do not affect its surroundings. an inconsistency between such a device constraint and the observed values is therefore explained by the assumption that the component is behaving abnormally. 
example 1 a singleton device constraint is associated to the radiator  that expresses a qualitative state of the radiator-signal: 

set device constraints: this class of device constraints associates at least two components. although the included components are usually situated at the same level of abstraction  some set device constraints might associate components at different levels of abstractions as well. 
example 1 the rnonotonic functional relation  expressed by an constraint  see  kuipers  1    between the amount of water in the pipe-system and the pressure of water associates the pipes and the pump: 

　in this case  we use a set device constraint to avoid the introduction of additional parameters which cure not observable. additionally  set device constraints represent the behavior of connected groups of srus  we cannot  replace an abstract component like pipe-system . 
1.1 	layered modeling architecture 
　the modeling architecture of diamon consists of three layers: 
monitoring layer: the monitoring layer of diamon contains a teleologic device constraint model which is used to check for faults in the system. all parameters in the monitoring layer are continuously observed to guarantee fast fault detection. note that if the monitoring layer contains enough parameters to pinpoint the failure of a specific part of the device  then this focusing is done on the first diagnosis level. in this case the first diagnosis level could actually consist of the same parameters as the monitoring level  but additionally include device components. 

diagnosis layer: the diagnosis layer of diamon contains hierarchically structured device constraints which are used for the dynamic refinement of fault localization. it is obvious that the complexity of a device is represented in the hierarchical architecture of the diagnosis layer. 
repair layer: the repair layer of diamon contains device constraints which exclusively relate srus. if the diagnosis process reaches the repair layer  i.e. all actual diagnoses only contain srus   it switches control to the repair process. 
1 	algorithm 
the following section introduces the algorithmic principles of diamon. 
1.1 	the extended hs-dag-algorithm 
　previous approaches to monitoring have usually concentrated on the control of predefined thresholds. conversely we view both monitoring and diagnosis from the consistency-preserving point of view which allows us to cover a broader range of detectable faults. the limits of detectability are due to the expressiveness of the underlying constraint language  not to the monitoring/diagnosis algorithm itself. 
diamon is built on top of the hs-da  algorithm 
 greiner et a/.  1  which is an improved version of the re iter-algorithm  reiter  1  for model-based diagnosis. the device constraints are checked for consistency by a constraint-propagator. if an inconsistency in a constraint is detected  diamon adds the associated components to the conflict set. 
　we have extended the basic hs-dag-algorithm to deal with dynamic systems similarly to the algorithm presented in  ng  1 . 
1.1 	dynamic model zooming 
　we have developed a continuous strategy of dynamic model zooming for the diagnosis layer. zooming denotes the process of focusing the diagnosis process to the relevant parts of the model. in our current implementation we use a breadth-first zooming strategy which recursively zooms in the hierarchically deeper level for all components which are part of a diagnosis. this strategy guarantees a diagnostic process which is optimal w.r.t. the amount of detectable faults. 
　we plan to develop an integration of heuristic knowledge and a best-first zooming strategy if no safety-criteria are violated. 
1 	the monitoring/diagnosis cycle 
continuing the above discussion we present a formal definition of the diamon-algorithm. 
　let m be the system description consisting of a sequence of qualitative models denotes a set of diagnoses   following  reiter  1  . 
　according to our hierarchical modeling concepts  m1 is the monitoring layer  mn denotes the repair layer and mjt with n are the models of the diagnosis layer. m actuai m denotes the current working model used for troubleshooting. 

1 initialization: 

1. monitoring: 
	while  {con .= 	consistent mnctualtdactna   	= 1  
   do read daciual   1 diagnosis: 

1  repair: 
reanimate; goto 1  
　in this paper we concentrate on monitoring and diagnosis and do not discuss repair strategies. we are currently investigating and evaluating various strategies how to restore teleology in a dynamic system doing repair  see also  friedrich et a/.  1  . 
1 example: a fault scenario in the central heating system 
applying diamon to the on-line control of the central heating system yields the following results for the detection and localization of a double fault. 
　assume that the radiator is switched off and one heating element  h1  is permanently faulty diamon correctly detects that differs from  and 
switches to the first diagnosis level. additional parameters and constraints are zoomed in  state s1   i.e. the parameters are measured and the constraints are evaluated. this is done again in state s1 to reach the srulevel. the diagnosis process finally localizes the double fault 	 radiator h1 . 

　table 1 summarizes the control process  so - s1 denote the qualitative system states  see ikuipers  1   . 

table 1: double-fault-diagnosis 
1 	c o n c l u s i o n a n d r e l a t e d w o r k 
we have presented a new approach to model-based troubleshooting dynamic systems which uses an extended constraint language for hierarchical system models and which is based on consistency-preserving algorithmic concepts for monitoring and diagnosis. 
　our work is closely related to that of  dvorak and kuipers  1  and  ng  1 . the diamon system differs from these approaches in some important ways. 
　first  we use a combined model-based algorithm which integrates both monitoring and diagnosis and which additionally uses hierarchical models and a dynamic zooming strategy. 
　second  diamon's fault coverage is more complete than those of  dvorak and kuipers  1  and  ng  1 . in  dvorak and kuipers  1j faults can be missed due to the use of pre-simulated fault models which do not allow the detection and localization of unanticipated faults. the algorithm of  ng  1  can miss faults if the heuristically chosen incomplete sets of measurable parameters do not represent the actual fault scenario. 
　the use of a hierarchical modeling architecture for troubleshooting is closely related to to the work of  hamscher  1  who distinguishes between a functional and a physical  repair  model for diagnosis of digital circuits. 
　we differ from  dvorak and kuipers  1  in that we do not use fault models and inductively derived fault hypotheses for monitoring. rather  we rely on the behavior discrepancies to the correct behavior model  which allows us to handle unanticipated faults. 
a c k n o w l e d g e m e n t s 
we especially thank benjamin kuipers who provided the 
common lisp-implementation of qsim  q1 . 	brian 
falkenhainer and anonymous referees have provided valuable comments on an earlier draft of this paper. 
alois haselbock implemented most of the diamon system as part of his m.s. thesis  lackinger and haselbock  1 . 
r e f e r e n c e s 
 davis  1  randall davis. diagnostic reasoning based on structure and behaviour. artificial intelligence  1-1  1. 
 de kleer and williams  1  johan de kleer and brian c. williams. diagnosis with behavioral modes. 
in proceedings of the international joint conference on artificial intelligence  ijcai   pages 1  detroit  august 1. morgan kaufmann publishers  
inc. 
 dvorak and kuipers  1  daniel dvorak and benjamin kuipers. model-based monitoring of dynamic systems. in proceedings of the international joint conference on artificial intelligence  ijcai   pages 
1  detroit  august 1. morgan kaufmann publishers  inc. 
 franke  1  david w. franke. representing and acquiring teleological descriptions. in proceedings of the workshop on model based reasoning  pages 1  detroit  1. 
 friedrich et al  1  gerhard friedrich  georg gottlob  and wolfgang nejdl. towards a theory of repair. technical report  technical university of vienna  november 1. submitted for publication. 
 greiner et al  1  russell greiner  barbara a. smith  and ralph w. wilkerson. a correction to the algorithm in reiter's theory of diagnosis. artificial intelligence  1 l :1  1. 
 hamscher  1  walter hamscher. modeling digital circuits for troubleshooting. artificial intelligence  1. to appear. 
 kuipers  1  benjamin kuipers. the limits of qualitative simulation. in proceedings of the international joint conference on artificial intelligence  ijcai   pages 1  1. 
 kuipers  1  benjamin kuipers. qualitative simulation. artificial intelligence  1-1  1. 
 lackinger and haselbock  1  franz lackinger and alois haselbock. qualitative models for simulation and control of dynamic systems. in aisb1  leeds  u.k.  april 1. springer-verlag. to be published. 
 ng  1  hwee tou ng. model-based  multiple fault diagnosis of time-varying  continuous physical systems. in proceedings of the ieee conference on artificial intelligence applications  caia   pages 1. ieee computer society press  1. 
 reiter  1  raymond reiter. a theory of diagnosis from first principles. artificial intelligence  1-1  1. 
1 	qualitative reasoning 

	lackinger and nejdl 	1 

	lackinger and nejdl 	1 

	lackinger and nejdl 	1 

	lackinger and nejdl 	1 

	lackinger and nejdl 	1 

1 	qualitative reasoning 

1 	qualitative reasoning 

1 	qualitative reasoning 

	lackinger and nejdl 	1 

	lackinger and nejdl 	1 

	lackinger and nejdl 	1 

1 	qualitative reasoning 

1 	qualitative reasoning 

1 	qualitative reasoning 

