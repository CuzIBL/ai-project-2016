
conjunctive queries play an important role as an expressive query language for description logics  dls . although modern dls usually provide for transitive roles  it was an open problem whether conjunctive query answering over dl knowledge bases is decidable if transitive roles are admitted in the query. in this paper  we consider conjunctive queries over knowledge bases formulated in the popular dl shiq and allow transitive roles in both the query and the knowledge base. we show that query answering is decidable and establish the following complexity bounds: regarding combined complexity  we devise a deterministic algorithm for query answering that needs time single exponential in the size of the kb and double exponential in the size of the query. regarding data complexity  we prove co-np-completeness.
1 introduction
description logics  dls   baader et al.  1  are a wellestablished family of logic-based knowledge representation formalisms that have recently gained increased attention due to their usage as the logical underpinning of ontology languages such as daml+oil and owl  horrocks et al.  1 . a dl knowledge base  kb  consists of a tbox  which contains intensional knowledge such as concept definitions and general background knowledge  and an abox  which contains extensional knowledge and is used to describe individuals. using a database metaphor  the tbox corresponds to the schema  and the abox corresponds to the data.
¡¡in data-intensive applications  querying kbs plays a central role. essentially  there are two forms of querying. the first one is instance retrieval  which allows the retrieval of all certain instances of a given  possibly complex  concept c  i.e.  it returns all individuals from the abox that are an instance of c in every model of the kb. technically  instance retrieval is well-understood. for the prominent dl shiq  which underlies daml+oil and owl lite  it is exptimecomplete  tobies  1   and  despite this high worst-case complexity  efficient implementations are available. on the other hand  instance retrieval is a rather poor form of querying: concepts are used as queries  and thus we can only query for structures that are invariant under  guarded  bisimulations. for this reason  many applications require conjunctive query answering as a stronger form of querying  i.e.  computing the certain answers to a conjunctive query over a dl knowledge base.
¡¡until now it was an open problem whether conjunctive query answering is decidable in shiq. in particular  the presence of transitive and inverse roles makes the problem rather tricky  glimm et al.  1   and results were only available for two restricted cases. the first case is obtained by stipulating that the variables in queries can only be bound to individuals that are explicitly mentioned in the abox. the result is a form of closed-domain semantics  which is different from the usual open-domain semantics in dls. it is easily seen that conjunctive query answering in this setting can be reduced to instance retrieval. in the second case  the binary atoms in conjunctive queries are restricted to roles that are neither transitive nor have transitive sub-roles  and it is known that conjunctive query answering in this setting is decidable and co-np-complete regarding data complexity  ortiz et al.  1 .
¡¡in this paper  we show that unrestricted conjunctive query answering in shiq is decidable. more precisely  we devise a decision procedure for the entailment of a conjunctive query by a shiq knowledge base  which is the decision problem corresponding to conjunctive query answering. it is well-known that decidability and complexity results carry over from entailment to answering. our decision procedure for query entailment consists of a rather intricate reduction to
kb consistency in  i.e.  shiq extended with role conjunction. the latter is easily seen to be decidable. the resulting  deterministic  algorithm for conjunctive query entailment in shiq needs time double exponential in the size of the query and single exponential in the size of the kb. this result concerns the combined complexity  i.e.  it is measured in the size of all inputs: the query  the abox  and the tbox. since query and tbox are usually small compared to the abox  the data complexity  measured in the size of the abox  only  is also a relevant issue. we show that  the decision problem corresponding to  conjunctive query answering in shiq is co-np-complete regarding data complexity  and thus not harder than instance retrieval  hustadt et al.  1 .
¡¡this paper is accompaniedby a technical report which contains full proofs  glimm et al.  1 .
1 preliminaries
syntax and semantics of shiq
let nc  nr  and ni be sets of concept names  role names  and individual names. we assume that the role names contain a subset ntr   nr of transitive role names. a role is an element of nr ¡È {r  | r ¡Ê nr}  where roles of the form r  are called inverse roles. a role inclusion is of the form roles. a role hierarchy h is a finite set of role
inclusions.
¡¡an interpretation i =  ¦¤i ¡¤i  consists of a non-empty set ¦¤i  the domain of i  and a function ¡¤i  which maps every concept name a to a subset ai   ¦¤i  every role name r ¡Ê nr to a binary relation ri   ¦¤i ¡Á ¦¤i such that ri is transitive for every r ¡Ê ntr  and every individual name a to an element ai ¡Ê ¦¤i. an interpretation i satisfies a role inclusion  and a role hierarchy h if it satisfies all role inclusions in h. we use the following standard notation:
 1  inv r  := r  if r ¡Ê nr and inv r  := s if r = s  for a role name s.
 1  for a role hierarchy is the reflexive transitive closure of  and we use r ¡Ô h s as an abbreviation for.
 1  for a role hierarchy h and a role s  we define the set transh of transitive roles as
{s |   role r with r ¡Ô h s and r ¡Ê ntr or inv r  ¡Ê ntr}.
 1  a role r is called simple w.r.t. a role hierarchy h if  for each role s such that transh.
¡¡the subscript h of transh is dropped if clear from the context. shiq-concepts  or concepts for short  are built inductively using the following grammar  where a ¡Ê nc  n ¡Ê in  r is a role  and s is a simple role:

the semantics of shiq-concepts is defined as usual  see e.g.  horrocks et al.  1  for details.
a general concept inclusion  gci  is an expression c d  where both c and d are concepts. a finite set of gcis
is called a tbox. an assertion is an expression of the form
.
  where a is a concept
name  r is a role  and a b ¡Ê ni. an abox is a finite set of assertions. we use ind a  to denote the set of individual names occurring in a. an interpretation i satisfies a gci
. satisfaction of assertions is defined in the obvious way  e.g. a a  is satisfied if ai ¡Ê ai. an interpretation i satisfies a tbox  abox  if it satisfies each gci  assertion  in it.
¡¡observe that  in abox assertions c a   we require c to be a  possibly negated  concept name. this is a standard assumption when the data complexity of dls is analyzed  see e.g.  donini et al.  1 . in this paper  we will sometimes also allow abox assertions c a   where c is an arbitrary concept. to make this explicit  we will call such aboxes generalized.
¡¡a knowledge base  kb  is a triple  t   h  a  with t a tbox  h a role hierarchy and a an abox. let k =  t   h  a  be a kb and i =  ¦¤i ¡¤i  an interpretation. an interpretation i satisfies k if it satisfies t   h  and a. if ¦£ is a tbox  abox  or kb and i satisfies ¦£  we say that i is a model of ¦£ and write i |= ¦£. a knowledge base k is consistent if it has a model.
conjunctive queries
let nv be a countably infinite set of variables disjoint from nc  nr  and ni. an atom is an expression a v   concept atom  or  role atom   where a is a concept name  r is a role  andnv. a conjunctive query q is a non-empty set of atoms. intuitively  such a set represents the conjunction of its elements. we use var q   var at   to denote the set of variables occurring in the query q  atom at . let i be an interpretation  q a conjunctive query  and ¦Ð : var q  ¡ú ¦¤i a total function. we write
  i |=¦Ð c v  if  ¦Ð v   ¡Ê ci;
;
if i |=¦Ð at for all at ¡Ê q  we write i |=¦Ð q and call ¦Ð a match for i and q. we say that i satisfies q and write i |= q if there is a match ¦Ð for i and q. if i |= q for all models i of a kb k  we write k |= q and say that k entails q.
¡¡the query entailment problem is defined as follows: given a knowledge base k and a query q  decide whether k |= q. it is well-known that query entailment and query answering can be mutually reduced and that decidability and complexity results carry over  calvanese et al.  1; horrocks and tessaris  1 . in the remainder of this paper  we concentrate on query entailment.
¡¡for convenience  we assume that conjunctive queries are closed under inverses  i.e.  if   then inv. if we add or remove atoms from a query  we silently assume that we do this such that the resulting query is again closed under inverses. we will also assume that queries are connected. formally  a query q  closed under inverses  is connected if  for all  there exists a sequence v1 ... vn such that v1 = v  vn = v  and for all i   n  there exists a role r such that r vi vi+1  ¡Ê q. of queries is a partitioning of q if q = q1 ¡È ¡¤¡¤¡¤ ¡È qk  var qi  ¡É var qj  =   for i   j ¡Ü k  and each qi is connected. the following lemma shows that connectedness can be assumed w.l.o.g.
lemma 1. let k be a knowledge base  q a conjunctive query  and q1 ... qn a partitioning of q. then k |= q iff k |= qi for all i ¡Ü n.
1 forests and trees
in this section  we carefully analyze the entailment of queries by knowledge bases and establish a set of general properties that will play a central role in our decision procedure. we start by showing that  in order to decide whether k |= q  it suffices to check whether i |= q for all models i of k that are of a particular shape. intuitively  these models are shaped like a forest  in the graph-theoretic sense   modulo the fact that transitive roles have to be interpreted in transitive relations.
¡¡let in  be the set of all  finite  words over the alphabet in. a tree t is a non-empty  prefix-closed subset of in . for   we call w a successor offor some c ¡Ê in  where  ¡¤  denotes concatenation. we call w a neighbor of is a successor of w or w is a successor of w.
definition 1. a forest base for k is an interpretation i that interpretes transitive roles in unrestricted  i.e.  not necessarily transitive  relations and  additionally  satisfies the following conditions:
t1 ¦¤i   ind a  ¡Á in  such that  for all a ¡Ê ind a   the set {w |  a w  ¡Ê ¦¤i} is a tree;
t1   then either or
 is a neighbor of w;
t1 for all a ¡Ê ind a   ai =  b ¦Å  for some b ¡Ê ind a .
a model i of k is canonical if there exists a forest base j for k such that j is identical to i except that  for all non-simple roles r  we have
.
trans
in this case  we say that j is a forest base for i.	
observe that  in canonical models i  each individual a is mapped to a pair  b ¦Å   where a = b does not necessarily hold. we need this since we do not adopt the uniqe name assumption  una : if a b ¡Ê ni with b  then we allow that ai = bi. if desired  the una can easily be adopted by adding an assertionfor each pair of individual names in ind a  to the abox.
lemma 1. iff there exists a canonical model i of k such that.
proof. using standard unravelling  see e.g.  tobies  1    each model of k can be converted into a canonical model of k. moreover  if is the canonical model obtained by unravelling i  then it is not hard to show that  implies  for all conjunctive queries q. 
lemma 1 shows that  when deciding whether k |= q  it suffices to check whether i |= q for all canonical models i of k. as a next step  we would like to show that  for canonical models i  to check whether i |= q  we can restrict our attention to a particular kind of match ¦Ð for i and q. a match ¦Ð for i and q is a forest match if  for all  we have one of the following:
;
 for some a ¡Ê ind a .
alas  it is not sufficient to only consider forest matches for i and q. instead  we show the following: we can rewrite q into a set of queries q such that  for all canonical models i  we have that for some and forest match ¦Ð. intuitively  this complication is due to the presence of transitive roles.
definition 1. a query q is called a transitivity rewriting of q w.r.t. k if it is obtained from q by choosing atoms and roles s1 ... sn ¡Ê transh such thatfor all i ¡Ü n  and then replacing  with

for all i ¡Ü n  where. we use trk q  to denote the set of all transitivity rewritings of q w.r.t. k. 
we assume that trk q  contains no isomorphic queries  i.e.  differences in  newly introduced  variable names are neglected. together with lemma 1  the following lemma shows that  to decide whether k |= q  it suffices to check the existence of some canonical model i  some forest match ¦Ð  and some such that.
lemma 1. let i be a model of k.
1. if i is canonical and   then there is a such thata forest match.  with  then i |= q.
proof.  1  can be provedby using the match and the canonical structure of i to guide the rewriting process.  1  holds by definition of transitivity rewritings and the semantics. 
the most important property of forest matches is the following: if i |=¦Ð q with ¦Ð a forest match  then ¦Ð splits the query q into several subqueries: the base subquery q1 contains all role atoms that are matched to root nodes:
;
moreover  for each  a ¦Å  ¡Ê ni ¡Á {¦Å} which occurs in the range of ¦Ð  there is an object subquery qa:
qa := {at |  v ¡Ê var at  : ¦Ð v  ¡Ê {a} ¡Á in }   q1.
clearly . although the resulting subqueries are not a partitioning of q in the sense of section 1  one of the fundamental ideas behind our decision procedure is to treat the different subqueries more or less separately. the main benefit is that the object subqueries can be rewritten into treeshaped queries which can then be translated into concepts. this technique is also known as  rolling up  of tree conjunctive queries into concepts and was proposed in  calvanese et al.  1; horrocks and tessaris  1 .
¡¡formally  a query q is tree-shaped if there exists a bijection ¦Ò from var q  into a tree t such that implies that ¦Ò v  is a neighbor of. before we show how to rewrite the object subqueries into tree-shaped queries  let us substantiate our claim that tree-shaped queries can be rolled up into concepts. the result of rolling up is not a shiqconcept  but a concept formulated in  the extension of shiq with role intersection. more precisely  is obtained from shiq by admitting the concept constructors
  and   where ¦Á is a role conjunctionwith the ri  possibly inverse  roles.
let q be a tree-shaped query and ¦Ò a bijection from var q 
. inductively assign to each v ¡Ê var q  a shiq -concept cq v :
  if ¦Ò v  is a leaf of t  then
  if ¦Ò v  has successors ¦Ò v1  ... ¦Ò vn  in t  then
.
then the rolling up cq of q is defined as cq vr   where vr is such that ¦Ò vr  = ¦Å.  recall that ¦Ò is a bijection  hence  such a vr exists.  the following lemma shows the connection between the query and the rolled up concept.
lemma 1. let q be a tree-shaped query and i an interpretation. then.
we now show how to transform a query q into a set q of treeshaped ones. to describe the exact goal of this translation  we need to introduce tree matches as a special case of forest matches: a match ¦Ð for a canonical model i and q is a tree match if the range of ¦Ð is a subset of {a} ¡Á in   for some a ¡Ê ni. now  our tree transformation should be such that
    whenever i |=¦Ð q with i a canonical model and ¦Ð a tree match  then for some  treeshaped  queryand tree match ¦Ð.
recall the splitting of a query into a base subquery and a set of object subqueries qa  induced by a forest match ¦Ð. it is not hard to see that for each qa  the restriction of ¦Ð to var qa  is a tree match for i and qa. thus  object subqueries together with their inducing matches ¦Ð satisfy the precondition of    .
¡¡the rewriting of a query into a tree-shaped one is a three stage process. in the first stage  we derive a collapsing q1 of the original query q by  possibly  identifying variables in q. this allows us  e.g.  to transform atoms  into a tree shape by iden-
. in the second stage  we derive an extension q1 of q1 by  possibly  introducing new variables and role atoms that make certain existing role atoms redundant  where r is non-simple. in the third stage  we derive a reduct  by  possibly  removing redundant role atoms  i.e.  atoms such that there exist atoms
 
and s ¡Ê trans. combining the extension and reduct steps allows us  e.g.  to transform a non-tree-shaped  loop  r v v  into a tree shape by adding a new variable v and edges  such that trans  and then removing the redundant atom r v v .
¡¡in what follows  the size |q| of a query q is defined as the number of atoms in q.
definition 1. a collapsing of q is obtained by identifying variables in q. a query q is an extension of q w.r.t. k if:
1. ;
1. implies a v  ¡Ê q;
1. implies that r occurs in k;
1. ;
1. .
a query q is a reduct of q w.r.t. k if:
1.
1.	implies;
  then there is a role  s ¡Ê trans  and there are v1 ... vn such that v1 = v 
.
a query q is a tree transformation of q w.r.t. k if there exist queries q1 and q1 such that
   q1 is a collapsing of q 
   q1 is an extension of q1 w.r.t. k  and is a tree-shaped reduct of q1.
we use ttk q  to denote the set of all tree transformations of q w.r.t. k.	
we remark that condition 1 of query extensions is not strictly needed for correctness  but it ensures that our algorithm is only single exponential in the size of k. as in the case of trk q   we assume that ttk q  does not contain any isomorphic queries.
¡¡the next lemma states the central properties of tree transformations. before we can formulate it  we introduce two technical notions. let.
then are called ¦Å-compatible if the following holds: if v ¡Ê var q   v was identified with variable
during the collapsing step  and at least one of is in ni ¡Á {¦Å}  then. furthermore  we call ¦Ð an a-tree match if ¦Ð v  ¡Ê {a} ¡Á in  for all v ¡Ê var q .
lemma 1. let i be a model of k.
1. if i is canonical and ¦Ð an a-tree match with i |=¦Ð q  then there is a and an a-tree match ¦Ð such that-compatible.
 and  then there is a match ¦Ð with-compatible.
proof. the proof of  1  is straightforward  but the proof of  1  is quite complex. the basic idea behind the proof of  1  is that  given a canonical model i of k and a tree match ¦Ð such that i |=¦Ð q  we can use ¦Ð and i to guide the transformation process. the boundsof 1|q| and 1|q|1 in conditions 1 and 1 of extensions are derived by computingthe maximumnumber of variables and atoms that might be introduced in the guided transformation process.	
intuitively  using a-tree matches and ¦Å-compatibility in lemma 1 ensures that  if we are given a match for the base subquery and a tree match for a tree transformation of each object subquery  then we can construct a forest match of the original query.
1 the decision procedure
let k be a knowledge base and q a conjunctive query such that we want to decide whether k |= q. a counter model for k and q is a model i of k such that. in the following  we show how to convert k and q into a sequence of knowledge bases such that  i  every counter model for k and q is a model of some ki   ii  every canonical model of a ki is a countermodel for k and q  and  iii  each consistent ki has a canonical model. thus  k |= q iff all the ki are inconsistent. this gives rise to two decision procedures: a deterministic one in which we enumerate all ki and which we use to derive an upper bound for combined complexity; and a non-determinstic one in which we guess a ki and which yields a tight upper bound for data complexity.
¡¡since the knowledge bases ki involve concepts obtained by rolling up tree-shaped queries  they are fomulated in  rather than in shiq. more precisely  each kb ki
is of the form  t ¡È tq h a ¡È ai   where
   t  h a  is a shiq knowledge base;
  tq is a set of gciswith concept;
  ai	is	a	generalized -abox1 such	that
ind ai    ind a .
in what follows  we call knowledge bases of this form extended knowledge bases. using a standard unravelling argument  it is easy to establish property  iii  from above  i.e.  every consistent extended knowledge base k has a canonical model.
¡¡the actual construction of the extended knowledge bases is based on the analysis in section 1. to start with  lemma 1 and 1 imply the following: to ensure that a canonical model of an extended kb is a counter model for k and q  it suffices to prevent forest matches of all queries. in order to prevent such matches  we use the parts tq and ai of extended knowledge bases.
¡¡more precisely  we distinguish between two kinds of forest matches: tree matches and true forest matches  i.e.  forest matches that are not tree matches. preventing tree matches of a in a canonical model is relatively simple: by lemmas 1 and 1  it suffices to ensure that  for all q tt  the corresponding concept  does not have any instances. therefore  tq is defined as follows:  for some.
it is easily seen that true forest matches ¦Ð always involve at least one abox individual  i.e.  ¦Ð v  ¡Ê ni ¡Á {¦Å} for at least one variable v . in order to prevent true forest matches  we thus use an abox ai. intuitively  we obtain the aboxes by considering all possible ways of adding assertions to k such that  for all queries  all true forest matches are prevented. this gives rise to the knowledgebases
.
¡¡as suggested in section 1  we can prevent a true forest match by splitting ¦Ð into a base subquery and a number of object subqueries and then making sure that either the base query fails to match  this involves only individual names from the abox  or at least one of the object subqueries fails to have a tree match. in section 1  however  we used a concrete forest match ¦Ð to split a query into subqueries. here  we do not have a concrete ¦Ð available and must consider all possible ways in which a forest match can split a query.
¡¡let splitting candidate for q is a partial function with non-empty domain. for a ¡Ê ind a   we use reach a ¦Ó  to denote the set of variables  for which there exists a sequence of variables   such that
  ¦Ó v1  = a and vn = v;
  for all i ¡Ü n  ¦Ó vi  = a or ¦Ó vi  is undefined;
  for all i   n  there is a role.
we call ¦Ó a split mapping for q if  for all b implies reach a ¦Ó  ¡É reach b ¦Ó  =  . intuitively  each split mapping represents the set of forest matches ¦Ð  such that ¦Ð v  =  ¦Ó v  ¦Å  for all v in the domain of ¦Ó. each injective split mapping for q induces a splitting of q into a base query and object queries. split mappings ¦Ó need not be injective  however  and thus the general picture is that they induce a splitting of the collapsingobtained by identifying all variables with. this splitting is as follows:
 is defined}
 reach
for all a ¡Ê ni that are in the range of ¦Ó. observe that the condition which distinguishes splitting candidates and split mappings ensures thatimplies var qa¦Ó ¡É var qb¦Ó  =  . this condition is satisfied by the splittings described in section 1  and it is needed to independentlyroll up the subqueries qa¦Ó into concepts.
¡¡in the following  we use sub q  to denote the set of subqueries of q  i.e.  the set of non-empty subsets of q. let
q := {q1| q1 q1: q1 ¡Ê trk q  q1 ¡Ê sub q1  q1 ¡Ê ttk q1 } and let cl q  be the set of rolled up concepts  for all abox a is called a q-completion if it contains only assertions of the form
   c a  for some c ¡Ê cl q  and a ¡Ê ind a  and
   r a b  for a role name r occurring in q and a b ¡Ê
ind a .
let ¦Ó be a split mapping for  and completion. we say that a spoils ¦Ó if one of the following holds:
 a  there is ansuch that;
 b  there is an a in the range of ¦Ó such that  where
.
intuitively   b  prevents tree matches of the object subqueries  c.f. lemmas 1 and 1.
finally  a q-completion a is called a counter canidate for
k and q if for all and all split mappings  a spoils be all counter candidates for k and q and the associated extended kbs.
lemma 1. are inconsistent.
 we now define the two decision procedures for query entailment in shiq: in the deterministic version  we generate all and return  k |= q  if all generated a that are a counter candidate give rise to an inconsistent extended kb. otherwise  we return   . in the nondeterministic version  we guess a q-completion  return  is a counter candidate and the associated extended kb is consistent  and  k |= q  otherwise. to show that these algorithms are decision procedures  it remains to show that the consistency of extended knowledge bases is decidable. the following theorem can be proved by a reduction to the dl alcqib and using results from  tobies  1 . in the following  the size |¦£| of an abox  tbox  role hierarchy or  extended  knowledge base ¦£ is simply the number of symbols needed to write ¦£  with numbers written in binary .
theorem 1. there is a polynomial p such that  given an extended knowledge base with
  and where the
maximum length of concepts in  we can decide
consistency of k in
  deterministic time in ;
  non-deterministic time in p a  ¡¤ 1p t .
we now discuss the complexity of our algorithms. we start by establishing some bounds on the number and size of transitivity rewritings  tree transformations  etc.
lemma 1. let |q| = n and |k| = m. then there is a polynomial p such that
 a  |trk q | ¡Ü 1p n ¡¤logp m ;
 b  for all;
 c  for all;  d  for all;
 e  |cl q | ¡Ü 1p n ¡¤logp m ; and
 f  for all c ¡Ê cl q   |c| ¡Ü p n .
let k = |cl q |. we first show that the deterministic version of our algorithm runs in time exponential in m and double exponential in n. this follows from theorem 1 together with the following observations:
 i  the number of q-completions is bounded by 1k¡¤m+k¡¤m1  which  by lemma 1 e   is exponential in m and double exponential in n;
 ii  checking whether a q-completion is a counter candidate can be done in time exponential in n and polynomial in m;
 iii  by lemma 1  the cardinality of tq and of each qcompletion is exponentialin n and polynomialin m  and the maximum length of concepts inis polynomial in n  and independent of m .
now for the non-deterministic version. since we aim at an upper bound for data complexity  we only need to verify that the algorithm runs in time polynomial in the size of |a|  and can neglect the contribution of t   h  and q to time complexity. the desired result follows from theorem 1 and points  ii  and  iii  above. this bound is tight since conjunctive query entailment is already co-np-hard regarding data complexity in the al fragment of shiq  donini et al.  1 . summing up  we thus have the following.
theorem 1. conjunctive query entailmentin shiq is data complete for co-np  and can be decided in time exponential in the size of the knowledge base and double exponential in the size of the query.
1 conclusions
with the decision procedure presented for conjunctive query entailment  and therefore for query answering  in shiq  we close a long open problem. it will be part of future work to extend this procedure to shoin  which is the dl underlying owl dl. we will also attempt to find more implementable algorithms for query answering in shiq. carrying out query transformations in a more goal directed way will be crucial to achieving this.
acknowledgements. this work was supported by the eu funded ist-1 fet project thinking ontologies  tones . birte glimm was supported by an epsrc studentship.
