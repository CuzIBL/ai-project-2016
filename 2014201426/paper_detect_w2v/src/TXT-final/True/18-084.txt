 
   the complexity of searching for a minimum cost solution graph of an and/or graph is analyzed for the class of and/or graphs repreaentable by a context free grammar with coat functions; finding a minimum coat solution graph ia then equivalent to finding a lowest coat derivation. several classes of search problems are defined  based on properties of the cost functions and grammar. we show that certain of these classes have different  search complexities- specifically  we show that there are distinct classes for which the complexity of finding a minimum cost solution graph is non-recursive  exponential  np-
                       1 complete  and q n    where n ia the size of the grammar representing the problem. the correspondence between problem structure and search complexity may serve as a guide for modeling real problems with and/or graphs. 
1. introduction 
   the complexity of a.i. search procedures is a topic of current interest  1 1 . in this paper we analyze the complexity of searching several classes of and/or graphs. the and/or graphs in which 
we are interested are represented by the composite decision process 
 cdp   1 . this is a generalization of the sequential decision process  sdp  proposed by karp and held in . the classes of and/or graphs represented by the composite decision process are a model for a wide variety of search procedures  problems in pattern recognition  and dynamic programming problems. applications and examples of 
relevance to practical problems may be found in  1 1 . 
　　a cdp is defined by giving a context-free grammar  and a cost function associated with each production and terminal symbol. this 
is essentially knuth's  synthesized attributes    with a different 
motivation. the minima.lixa.tion problem is to find a lowest cost parse 	we define classes of cdps based on properties of the cost func-

tree for any string the grammar might derive. this is equivalent to the problem of finding a minimum cost solution graph of the and/or graph corresponding to the grammar  ll . 
   the correspondence between and/or graphs and context free grammars is that connectors  the and arcs  correspond to productions  and or arcs correspond to a choice of productions. the simple 
grammar and graph of figure 1 shows the correspondence. this correspondence was first noted by hall ; following the treatment in nilsson  nodes are not restricted to be only of types and or or  1 . our and/or graphs may contain cycles  and in general a solution graph may include a walk around some cycle any number of times. thinking in terms of grammars  a solution graph is just a parse tree; a solution graph may be much larger than the grammar graph  and there may be infinitely many parse/solution trees. figure 1 gives two solution trees for the and/or graph shown there; note that the larger of the two solution trees has minimal cost. 
*research supported by nsf grants to the machine intelligence and pattern analysis lab.  dept. of computer science  university of maryland. 
tions and the grammar  and for each such class analyze the complexity of the minimalization problem. these classes are intended to have some realistic motivation. for example  positive monotone cdps  include generalizations of dijkstra's algorithm  /-bounded cdps are a formulation of bounded search. suppose n is the size of some cdp. in the /-bounded cdp  we assume that any possible minimum value must occur in a tree with no more than f n  nodes. acyclic cdps are just the common restriction that the underlying and/or graph have no cycles. 
　　the size of a cdp is defined as the size of the grammar  the sum of the lengths of the productions  written as  g  . we shall show upper and lower bounds on the complexity of solving the minimalization problem for various classes of cdp. an upper bound expressed as some function / means that every member of the class can be solved in / |g|  steps  and a lower bound of / means that infinitely many members of a class require more than / |g|  steps. the notion of  step of a computation  and bounding computation time are formalized in alio  et al.  l . we assume their  logarithmic cost criterion   where the cost of storing or manipulating a large number is then proportional to the length of the number. we assume unit cost for storing or manipulating a single grammar symbol  and cost proportional to the length of a string for manipulating a string of such symbols. 

1 h. motteler and l. kanal 
　　if the cost  functions are easy to compute  we can ignore them in analyzing search complexity. the notion of  easy to compute  must be made precise  because if we just ignore the complexity of computing the cost functions  our conclusions may not be correct. for example  if we did not. consider the complexity of computing the cost functions in giving proofs of upper bounds  by solving a cdp we could compute any recursive function with a constant cost. for let / be some such function. define cost functions c d  - d  giving the value of a digit as its cost  and t x1 .. .  xk  - / o g x1 . . .   xk   where g translates a string of digits of length k to an integer. let g be the single production st -  x  where x is the string of k digits representing x. then to compute / x   find the minimum  the only  value of this cdp. if we charge only for search steps and we have only one step  then we have a constant cost. this difficulty is circumvented by requiring our cdps to be  honest   that is for some function /  we guarantee that no computation of a cost function t takes more than / |g|  steps. here we shall assume  unless otherwise noted  that every cdp is honest for some fixed polynomial h. this restriction is not necessary for proofs of lower bounds  as computation of the cost functions can only add to the complexity. 
1. the complexity of several classes of cdps 
the complexity of the natural cdp  acyclic cdps  p-bounded 
cdps for some polynomial p  and monotone cdps are analyzed in this section. figure 1 shows the structural relationships among various cdps considered here. figure 1 summarizes our results  showing the relationship of the complexity of the various minimalization problems. in the structure hierarchy  the positive monotone cdp is contained in the acdp only in the sense that any minimum cost solution graph of the former is guaranteed to be acyclic; an arbitrary parse tree of a positive monotone cdp may not be acyclic. formal proofs and further examples are presented in ; we present only an outline here. 
　　if the range of cost functions is over real numbers  there may be no minimum cost parse tree. restricting the range of the cost functions to natural numbers guarantees that a solution tree will exist  but as the following theorem shows  there may still be no effective way to find it. 

theorem 1. the minimalization problem for any member of acdp may be solved in 1 cxp1  g 1   steps  and requires more than 1l 'l/1 steps for infinitely many members of acdp. 

theorem 1. the minimalization problem for the natural cdp is not 
recursive. 
   proof. the problem of generating the shortest program p that outputs m and halts is reduced to a minimization problem for a cdp. details are presented in . {x  
   this result is not surprising  since l g  may be infinite  giving an unbounded number of parse trees whose backed up value must be tested. if we try to find the minimum by simply generating and 
testing parse trees  and save the lowest value encountered so far as min  there is in general no guarantee that if we stop at any given 
point  the next  untested  value may not be lower than min. the obvious way to get a decidable problem is to simply bound the space of all parse trees  or all parse trees that could possibly contribute to a minimum  in some way. the acdp  /-bounded cdps and mcdps bound their search space in various ways  giving decidable problems 
of varying complexity. 
   to show an upper bound on the time to solve an acdp  we must first find a bound for the size of any parse tree and the number of 
distinct parse trees that may be generated by an acyclic context free grammar. let exp1 x  - 1   to keep our exponents from stacking too high. the following lemmas and theorem are proved in  ll|.    proof of the upper bound is by outlining a procedure min z  that finds a minimal cost derivation for any z f- acdp by doing an exhaustive search of the space of all possible parse trees. to show the lower bound it is sufficient to show that there are infinitely many 
acyclic grammars where every parse tree has more than 1'＜''j nodes. 
 -1 
   a simple grammar g with on the order of exp1 |g |  distinct parse trees is presented in  llj. with such a potentially large search space  it would be reasonable to expect  although this does not constitute 
a proof  that there are infinitely many acdps which require on the order of exp1 jc1|  steps for their solution. 
   we conclude that the minimalization problem for acdps  and /-bounded cdps for exponential /  is not practically solvable. the difficulty arises from the. very compact representation of large trees given by an acyclic grammar. we now consider other means of bounding the size of the search tree. the following theorem shows that even 
if we bound the size of the tree by a polynomial in the size of the grammar  we still have a hard problem. 
theorem 1. for every polynomial p such that p{x    x  the minimalization problem for the p-bounded cdp is np-complete. lemma 1. no parse tree for an acyclic grammar g has more than 	proof. assume p is some fixed polynomial  p x    x. we first 
1lgi 1 - 1 nodes. 	show the problem is jvp-hard   1 . the knapsack problem with inte-
ger weights is easily reduced to a p-boutided cdp.  that is  we show 
lemma 1	 no acyclic grammar g generates more than exp1   g  ~ that if we can solve the minimalization problem  then we can solve the 
l    distinct parse trees. 	knapsack problem  which is known to be np-complete.  details are 

presented in 1 j. the same reduction shows that acyclic cdps and the natural cdp are np-hard  since the cdp we have defined is a member of these classes. the acyclic  and natural cdp classes do not appear to be np-complete  since there is no obvious nondeterministic polynomial time algorithm that solves them. 
   to complete the proof it must be shown that p-bounded cdp minimalization can be solved by a nondeterministic algorithm in polynomial time. this is done by defining an algorithm which repeatedly makes a nondeterministic selection  a guess  of a production until some string is derived  and for each such string tests its backed up value aginst successively increasing values of a counter. it is not sufficient to simply guess a parse tree and return its value; tliis would 
produce a tree with fewest possible nodes  but not necessarily minimum cost.  x  
   finally  we consider an easily solved class of cdps. a positive monotone cdp has all t  monotone nondecreasing  and also satisfying t1  x1.......xk   xji 
h. motteler and l. kanal 1 
1. hall  p. a. v. equivalence between and/or graphs and contextfree grammars. communications of the acm if   1  july 1 . 
1. kanal  l. n.  and kumar  v.  some new insights into the relationships among dynamic programming  branch and bound  and heuristic search procedures.  university of maryland technical report  1. 
1. karp  r. m.  and held  m. ii. finite-state processes and dynamic programming. si am j. appl. math 1    1   1. 
1. karp  r. m.  upfal  e.  and wigderson  a.  are search and decision problems computationally equivalent '' in proceedings of the 1th annual symposium on theory of computing  may 1  providence  r.i. . acm  new york  1. 
1. knuth  d. e. semantics of context-free languages. math. systems theory 1  1  1   1. 
1. kumar  v.  a unified approach to problem solving search procedures.'' ph.d. thesis  dept. of computer science  univ. of maryland  dec. 1. 

cdp can be solved in 1  g 1  steps. 
   proof is by presenting an algorithm and proving its runtime and correctness. the proof closely parallels proofs of the runtime and correctness of various algorithms that it generalizes  e.g.  dijkstra's algorithm and certain dynamic programming problems. a similar algorithm appears in . details are presented in .  x  1. kumar  v. a general bottom-up procedure for searching and/or graphs. in proceedings of aaa -1  1. 
1. machl.cy  m.  and young  p. an introduction to the genera/ 1heory of algorithm.. elsevier north holland  1. 
1. motteler  1. e.  and kanal  i . n.  the complexity of searching several classes of and/or graphs.  university of maryland technical report  1. 
1. nilsson  n.j. principles of artificial intelligence. tioga  1. 
1. pearl  .1- heuristics: intelligent search strategies for computer problem solving. addison-wesley  1. theorem 1. the minimalization problem for the positive monotone 
conclusions 
   slight variations in the structure of the cost functions or grammar can cause a large change in the complexity of the minimalization problem. if only a single cost function fails to be monotone increasing  the result is a problem of much greater complexity. these results have the following practical application: when modeling some real problem as an and/or graph search  every effort should be made to create a graph model in the structural class with lowest search complexity. the proof of a large lower bound for the complexity of some problem is not necessarily the last word as to whether the problem is practically solvable. this sort of analysis does not take into ac-
count the distribution of members of a class which are most  difficult. even though we know there are infinitely many difficult members  they could still be very rare  i.e.  most members of the class could be easily solved. 
   positive monotone cdps are the only easily solvable cdps considered here. there is an interesting natural class of cdps  which satisfy only the monotone restriction; these are considered in  1   let c* w  be the lowest cost for any tree rooted at w; the monotone 
cdp satisfies the equations 
1 if w is a terminal node  then c* w  - c w   
1 if w is a nonterminal node  we have c* w  - min{ti c*  a'i   . ..   c* xki  	 pi=-w- x1...xkt}. 
   we conjecture that the monotone cdps are not in general solvable in polynomial time  in the context of definitions and restrictions presented here . it would also be of interest to find other natural or 
easily definable classes of cdps with an easily solved minimalization problem. 
