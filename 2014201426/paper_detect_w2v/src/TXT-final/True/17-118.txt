 
　　　relevant domain features are used for the representation of knowledge in production rules and for the description of examples for rule induction programs. a concept acquisition ccas  induces domain concepts for the description of middle-game positions in chess  and uses quantitative measures of information content for validating the acquired concepts. 
	i. 	introduction 
　　　the main problem with the use of production rules to represent knowledge is the determination of the relevant features of the domain. production system knowledge consists or rules of the form: 
if features are present in a situation 
then apply action a 
the features fi must be provided to the system for recogni tion of a situation as relevant for the firing of rules. however  an enumeration of all relevant features is a very d i f f i c u l t task. therefore  it is desirable and sometimes necessary to use inductive methods for establishing relevant features of the domain. 
　　　chess is an excellent domain for experiments in concept acquisition. chess players use a large vocabulary of domain concepts which is accessible in chess books and by psychological experiments. a grandmaster has a large library of chunks in ltm that is used to encode a chess position and in this way  reduces the uncertainty. it has been estimated that some ten thousands of chunks are necessary to explain the performance of master players . 
　　　a convenient method for measuring the amount of information reduction by chunking is the use of the binary question experiments. jongman  proposed a method in which a chess player is allowed to ask questions about a chess position he has to reconstruct  that can be answered with only 'yes 1 or 'no'. the number of questions necessary to reconstruct the position correctly gives a good estimate of the information content of chess positions. strong players  above 1 elo rating  require between 1 and 1 bits to reconstruct a position. for weaker players this amount may grow to above 1  depending on the type of position. 
　　　the intention of the experiment reported in this paper is to design a method for automated acquisition of chess concepts  that can be considered as chunks. these chunks can then be used as attributes for production rules or for further rule induction. the validity of the chunks will be checked by the binary question experiments. 
i i . the acquisition system 
a. definitions 
　　　attributes are used to describe objects. for chess positions we use 1 nominal attributes that categorically describe certain aspects of a chess position. attributes represent the mapping of pieces on square locations: 

the characters represent the well-known abbreviations of piece names used in chess notation. capitals denote pieces  'w' stands for white  'b' stands for black and ' - ' indicates that the square is not occupied. 
　　　an instance is a description of an object as a vector of  attribute value  pairs. in the experiments to be described  instances are middle-game positions of master games. the space of all syntactically correct instances is called the event space. 
　　selectors can be expressed in the annotated predicate calculus  as a form  in which   the reference is a disjunction of values of the domain of a t t r i b u t e   and # stands for the operators 
　　　a pattern is a logical conjunction of selectors. a pattern pati is present in an instance if the attribute values of the instance satisfy a l l the selectors of the pattern. for example: 

　　　a satisfaction factor fs expresses the degree to which a pattern is satisfied by ci  the observed set of instances. the value of the satisfaction factor of a pattern is the proportion 
1 	a. heeffer 
between instances that completely satisfy that pattern and 
this concept is similar to that of projected sparseness as defined by michalski and stepp   1   . 
　　　a relevance l i s t is a l i s t of functions that maps keys onto a set of attributes that are relevant to form a pattern. it consists of elements of the following form: 

keys are salient attributes of an event description. a relevance l i s t is supplied by a domain expert to constrain patterns to 
 meaningful  ones. 
　　　a nilpattern is an  attribute value  pair with a satisfaction factor higher than some threshold value. nilpatterns can be detected by calculating f1 ai  for a l l i  which are in fact a l l patterns consisting of one attribute. events determined by nilpatterns with a threshold value equal to that of a single instance form the projected event space. 
b. the induction algorithms. 
　　　the intention of an induction algorithm is to generate patterns with a satisfaction factor above a certain threshold  using the attributes defined in the relevance l i s t . this involves a search through a tangled hierarchy of three levels depth: the keys in the relevance l i s t   attributes attached to each key and the nilpatterns of each attribute. as the algorithm uses a backtracking search for the attributes  the order of attributes in the relevance l i s t is important. this implies that the most important attributes should be listed f i r s t . if no patterns are generated with the f i r s t attributes  no patterns containing the next attributes in the l i s t w i l l be considered. for the experiments reported in this paper  a permutation algorithm was used in which the order of the attributes is not important. all possible combinations of attributes in the relevance l i s t   that include the key attribute  w i l l be t r i e d . the advantage of the permutation algorithm is that no relevant patterns w i l l be missed because of ordering errors. 
c. implementation 
	the 	program  	named 	ccas 	 chess 	concept 
acquisition system   is written in c-prolog  running on a vax 1 under unix. it consists of four basic components: 
1. nilpattern generator 
　　　nilpatterns are the basic building blocks of chess concepts. they have to be generated from the set of given instances before the induction process can begin. generating a l l nilpatterns  required 1 cpu seconds. nilpatterns are represented as a functor with two arguments. the f i r s t argument is the attribute name  and the second is an ordered l i s t of values  the f i r s t value having the largest satisfaction factor. an example of the generated nilpatterns for the white king: nilpattern wk  g1 h1 h1  . 
1. the satisfaction factor calculator 
　　　both the nilpattern generator and the induction program rely on satisfaction factors of patterns. efficient calculation of satisfaction factors is therefore important for the overall performance of the program. using prolog's unification for matching  the calculation of satisfaction factors is considerably faster than using other matching strategies. calculating the satisfaction factor of a pattern with 1 instantiated attributes takes about 1 msec for a database containing 1 instances. 
1. the induction program 
　　　the generation of a l l patterns for a relevance l i s t with six attributes attached to a 
　　　key takes about 1 cpu seconds for each key. execution times grow exponentially with the number of arguments. for this reason  it is recommended to use many keys with lesser attributes  rather than to look for patterns with many attributes. this strategy is well suited for the domain of chess  but could be a constraint for other domains. 
1. binary question generators 
　　　chess concepts induced by ccas are operationally defined as valid if they reduce the information content of a chess position. although the validity of generated ooncepts can be appreciated by a domain expert  the program also facilitates techniques for quantitative evaluation of the output. it includes a binary question generator that is able to reconstruct a chess position by asking questions about piece-square relationships. it uses nilpatterns for question generation. 
i i i . results 
using the following relevance l i s t 
rel bk  bkr bkb bep bfp bgp bhp  . rel wk  wkr wkn wep wfp wgp whp  . rel bdp  bap bbp bcp bqb bqr  . rel bdp  bcp bep wcp wdp wep wfp  . rel wbp  wap wcp wqr wqn wqb wkb  . 
and 1 instances taken from 1st move positions in a chess book   games 1 to 1   the system generated 1 patterns. the number of attributes per pattern varies from 1  the nilpattern of the key  to 1  the key and a l l attributes in the relevanoe l i s t . the most important patterns are the most specific ones  i . e . the patterns using the largest number of attributes. for each key in the relevance l i s t   there is at least one such pattern. most other patterns are subsets of these most specific ones. 
　　　
　　　the binary question experiment was tried for two types of positions  those included in the l i s t of instances  and others that are similar  but not included. the program achieves a reconstruction performance of 1% for positions included in the instances  using an average of about 1 questions. for chess positions not included in the l i s t of instances 1% reconstruction is not guaranteed but often reached  within the same average number of questions. these tests indicate that the system performs on the level of expert chess players. 
iv. discussion 
　　　the concept acquisition system  described in this paper  is an attempt to f i l l a gap in the current spectrum of automated acquisition systems. the problem addressed in this project cannot be approached by any of the existing methods. in fact  generating concepts for the description of chess positions is something that is presupposed by existing learning programs such as id1  and clear   1     taxonomic classification programs such as cluster  1 that determine hierarchies of subcategories within a collection of objects are more- closely related to the problem of concept acquisition but s t i l l not suited. all rule induction programs require a set of relevant attributes to describe the domain objects. but the construction of relevant attributes for representing instances is a d i f f i c u l t task i t s e l f . 
　　　the patterns generated by the program can very well be considered as concepts. they are human-intelligible and some even have terms attached to them that are used in the vocabulary of domain experts  such as kings fianchetto. 

acknowledgements 
　　　this work was carried out during a threemonth visit at the turing institute   1   . 
financial support was provided by the belgian nfwo and the iciwo. i would like to express my thanks to prof. f. vandamme of the university of ghent  and to prof. donald michie  mr john roycroft and dr tim niblett of the turing institute  for their helpful suggestions. 
