
we define a new heuristic hds for asp  and implement it in the  disjunctive  asp system dlv. the new heuristic improves the evaluation of hard asp programs while maintaining the benign behaviour of the well-assessed heuristic of dlv on np problems. we experiment with the new heuristic on qbfs. hds significantly outperforms the heuristic of dlv on hard 1qbf problems. we compare also the dlv system  with the new heuristic hds  to three prominent qbf solvers. the results of the comparison  performed on instances used in the last qbf competition  indicate that asp systems can be faster than qbf systems on -hard problems.
1 introduction
answer set programming  asp  is a novel programming paradigm  which has been recently proposed in the area of nonmonotonic reasoning and logic programming. the idea of answer set programming is to represent a given computational problem by a logic program whose answer sets correspond to solutions  and then use an answer set solver to find such a solution  lifschitz  1 . the knowledge representation language of asp is very expressive in a precise mathematical sense; in its general form  allowing for disjunction in rule heads and nonmonotonic negation in rule bodies  asp can represent every problem in the complexity class  and
  under brave and cautious reasoning  respectively   eiter et al.  1 . thus  asp is strictly more powerful than satbased programming  as it allows us to solve even problems which cannot be translated to sat in polynomial time. the high expressive power of asp can be profitably exploited in ai  which often has to deal with problems of high complexity. for instance  problems in diagnosis and planning under incomplete knowledge are complete for the the complexity class   and can be naturally encoded in asp  baral  1; leone et al.  1 .

　　  this work was partially supported by the european commission under projects ist-1  infomix  and ist-1  wasp   and by fwf  austrian science funds  under projects p1-n1 and p1-n1.
 
funded by apart of the austrian academy of sciences.　most of the optimization work on asp systems has focused on the efficient evaluation of non-disjunctive programs  whose power is limited to np/co-np   whereas the optimization of full  disjunctive  asp programs has been treated in fewer works  e.g.  in  janhunen et al.  1; koch et al.  1  . in particular  we are not aware of any work concerning heuristics for -hard asp programs.
　in this paper  we address the following two questions:   can the heuristics of asp systems be refined to deal more efficiently with -hard asp programs    on hard  problems  can asp systems compete with other ai systems  like qbf solvers 
　we define a new heuristic hds for the  disjunctive  asp system dlv  aiming at improving the evaluation of hard asp programs  but maintaining the benign behaviour of the heuristic of dlv on np problems. we experimentally compare hds against the dlv heuristic on hard 1qbf instances  showing a clear benefit. we also experiment the competitiveness of asp w.r.t. qbf solvers on hard problems  indicating that asp systems are very competitive with qbf systems on -hard problems.
1 answer set computation and heuristics
we first recall the main steps of the computational process performed by asp systems  in particular the dlv system  which will be used for the experiments.
　an answer set program p in general contains variables. the first step of a computation of an asp system eliminates these variables  then the following algorithm is invoked:
function modelgenerator i: interpretation : boolean; begin i := detcons i ; if i = l then return false;  * inconsistency *  if no atom is undefined in i then return isanswerset i ; select an undefined ground atom a according to a heuristic; if modelgenerator i“{a}  then return true; else return modelgenerator i“{nota} ;
end;
　roughly  the model generator produces some  candidate  answer sets. the stability of each of them is subsequently verified by the function isanswerset i   which verifies whether the given  candidate  i is a minimal model of the gltransformed program and outputs the model  if so. isanswerset i  returns true if the computation should be stopped and false otherwise.
　the function detcons   computes an extension of i with the literals that can be deterministically inferred  or the set of all literals l upon inconsistency . if detcons does not detect any inconsistency  an atom a is selected according to a heuristic criterion and modelgenerator is called on i“{a} and on i“{nota}. the atom a plays the role of a branching variable of a sat solver.
　the heuristic hut  proposed in  faber et al.  1  is currently employed in dlv. it is mostly based on the number of unsupportedtrue  ut  atoms  called mbts in  faber et al.  1    i.e.  atoms which are true in the current interpretation but miss a supporting rule  trying to minimize ut atoms and hence more likely arrive at supported models.
　for hard asp programs  i.e.  non-hcf programs  beneliyahu and dechter  1  - they express -complete problems under brave reasoning   supported models are often not answer sets. moreover  answer-set checking is computationally expensive  co-np   and may consume a large portion of the resources needed for computing an answer set.
　we therefore propose the new heuristic hds  which tries in addition to maximize the degree of supportedness  the average number of supporting rules for non-hcf true atoms. intuitively  if all true atoms have many supporting rules in a model m  then the elimination of an atom from the model would violate many rules  and it becomes less likely to find a subset of m which is a model of the reduct pm  disproving that m is an answer set. we define hds as a refinement of the heuristic hut  i.e.  a  hut b   a  hds b . in this way  hds keeps the behaviour of the well-assessed hut on np problems while  as we will see in section 1  it sensibly improves over hut on hard 1qbf problems  -complete .
1 comparing hut vs hds: experiments
we generated randomly a data set of 1qbf formulas  following  gent and walsh  1   and used the asp encoding described in  leone et al.  1 .
　experiments were performed on a pentiumiv 1 mhz machine with 1mb ram running suse linux 1. for every instance  we allowed a maximum running time of 1 seconds  two hours . the results of our experiments are displayed in the following graphs  in which a line stops whenever some instance was not solved within the time limit.

　it is clear that the new heuristic hds outperforms the heuristic hut in these experiments  advancing the  maximum solvable-size  from 1 up to size 1  and reducing the average execution times of the smaller instances.
1 asp vs qbf solvers
the main goal of this paper is to improve the performance of asp systems for problems located at the second level of the polynomial hierarchy. one may wonder whether  on such
-hard problems  asp systems are competitive with other ai systems  like the qbf solvers. in order to give a first answer to this question  we have also performed a comparison with qbf solvers quantor  biere  1   semprop  letz  1   and yquaffle  zhang and malik  1  on the set of all - and -complete qbf formulas of the last qbf competition. the results below report the number of instances solved within 1s and show that dlv  with heuristic hds  generally outperformed the qbf solvers.
dlv hds quantorsempropyquafflerobot1  1% 1  1% 1  1% 1  1% random1  1% 1  1% 1  1% 1  1% tree1  1% 1  1% 1  1% 1  1% kph1  1% 1  1% 1  1% 1  1% total1  1% 1  1% 1  1% 1  1% 