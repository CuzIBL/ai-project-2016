
we first provide a mapping from pearce's equilibrium logic and ferraris's general logic programs to lin and shoham's logic of knowledge and justified assumptions  a nonmonotonic modal logic that has been shown to include as special cases both reiter's default logic in the propositional case and moore's autoepistemic logic. from this mapping  we obtain a mapping from general logic programs to circumscription  both in the propositional and first-order case. furthermore  we show that this mapping can be used to check the strong equivalence between two propositional logic programs in classical logic.
1 introduction
answer set programming  asp  is a new paradigm of constraint-based programming based on logic programming with answer set semantics  niemela  1; lifschitz  1;¡§ marek and truszczynski  1 . it started out with normal logic programs  which are programs that can have negation but not disjunction. driven by the need of applications  various extensions have been proposed. these include disjunctive logic programs  gelfond and lifschitz  1; leone et al.  1   nested expressions  lifschitz et al.  1   cardinality and weight constraints  niemela; and si-¡§ mons  1   and others. recently  ferraris  proposed to view formulas in propositional logic as logic programs and showed that they include as special cases all the above mentioned classes of logic programs. in particular  ferraris  provided a stable model semantics for these formulas using a transformation similar to the original gelfondlifschitz transformation  and showed that this semantics coincides with pearce's equilibrium logic  pearce  1 .
¡¡in this paper  we show that this general stable model semantics can be embedded in lin and shoham's logic of knowledge and justified assumptions  lin and shoham  1   aka logic of gk. besides showing the generality of lin and shoham's logic  which was proposed as a general logic for nonmonotonic reasoning  this embedding allows us to obtain a way to check in classical propositional logic whether any given two logic programs are strongly equivalent in almost the same way as in  lin  1 . it also allows us to obtain a mapping from general logic programs to propositional circumscription in the same way as lin and shoham  did for mapping normal logic programs to circumscription. as it turned out  this mapping  when extended to first-order case  yields a semantics to first-order general logic programs that is similar to the one proposed recently by ferraris et al. .
¡¡we first briefly review lin and shoham's logic of gk  ferraris's general logic programs  and pearce's equilibrium logic.
1 logic of gk
the language of the logic of gk is a modal propositional language with two modal operators  k  for knowledge  and a  for assumption. given a set atom of atoms  also called variables or primitive propositions   formulas in the logic of gk are defined inductively below in bnf notation:
f ::= ¡Í | p | k f  | a f  |  f | f ¡Äf | f ¡Åf | f ¡ú f 
where p ¡Ê atom  and ¡Í is a constant standing for falsity. formulas without modal operators are called base formulas.
¡¡the semantics of the logic of gk is defined through kripke interpretations. a kripke interpretation m is a tuple   where w is a nonempty set whose elements are called possible worlds  ¦Ð a function that maps a possible world to a truth assignment on atom  rk and ra binary relations over w representing the accessibility relations foractual worldkofandm. thea  respectively  andsatisfaction relations ¡Ê w|=  called thebetween a
kripke interpretation and a formula
f is defined inductively as follows:
;
  where p ¡Ê atom;
  m |= f ¡Ä g iff m |= f and m |= g;   m |= f ¡Å g iff m |= f or m |= g;
;
w  such that  s w  ¡Ê rk;	for any w ¡Ê

	w  such that  s w  ¡Ê ra.	for any w ¡Ê
we say that a kripke interpretation m is a model of a formula f if m satisfies f. in the following  given a kripke interpretation m  we let is a base formula and m |= k f } is a base formula and m |= a f }.
notice that k m  and a m  are always closed under classical logical entailment. in the following  for any set x of formulas  we let th x  be the logical closure of x under classical logic.
definition 1  gk models  given a formula f  a kripke interpretation m is a minimal model of f if m is a model of f and there does not exist another model m1 of f such that a m1  = a m  and k m1    k m . we say that m is a gk model1 if m is a minimal model of f and k m  = a m .
¡¡lin and shoham showed that the logic of gk can be used to capture reiter's default logic  reiter  1  and moore's auto-epistemic logic  moore  1 . as a consequence  normal logic programs under stable model semantics can be captured in the logic of gk as well. specifically  they showed that a normal rule r ¡û p1 ... pn notq1 ... notqm
can be translated into the following sentence in the logic of gk:
	kp1 ¡Ä ¡¤¡¤¡¤ ¡Ä kpn ¡Ä  aq1 ¡Ä ¡¤¡¤¡¤ ¡Ä  aqm ¡ú kr.	 1 
they also showed that this translation extends to disjunction logic programs.
¡¡in this paper  we shall show that general logic programs proposed by ferraris  can be captured in the logic of gk as well.
1 general logic programs
given a set atom of atoms  general logic programs  ferraris and lifschitz  1  are formulas defined inductively below in bnf notation:
f ::= ¡Í | p | f ¡Ä f | f ¡Å f | f ¡ú f 
where p ¡Ê atom. notice that there is no negation in the language. instead  for any formula f   f is considered to be a shorthand for f ¡ú ¡Í.
¡¡a set x   atom of atoms can be considered as a truth assignment in the straightforward way:

and the usual definition for the logical connectives.
¡¡the stable models of a formula  general logic program  are defined by a modified extended gelfond-lifschitz transformation. given a general logic program f  and a set x of atoms  the reduct of f under x  ferraris  1   written fx  is the formula obtained from f by replacing each maximal subformula that is not classically satisfied by x with ¡Í. thus for example  
¡¡now a set x of atoms is a stable model of a general logic program f if:  i  x |= fx;
 ii  there is no proper subset x1 of x  such that x1 |= fx.
example 1 consider the following three general logic program.
p =	 p ¡ú q 
q =	 p ¡Å p 
r =	p ¡ú   p 
where p  q are atoms. the maximal subformula in p that is false under {q} is p  thus p{q} is  ¡Í ¡ú q  which is satisfied by {q}  but not by  . therefore  {q} is a stable model of p. on the other hand  p{p} is ¡Í ¡ú ¡Í  which is satisfied by {p} as well as its subset  . therefore  {p} is not a stable model of p. it can be seen that {q} is the only stable model of p. similarly  it can be shown that q has two stable models  {p} and    and r has exactly one stable model  .
1 pearce's equilibrium logic
pearce's equilibrium logic  pearce  1  is based on the logic of here-and-there  a non-classical logic. given a set atom of atoms  formulas of atom are exactly the same as in the case of general logic programs. thus  negation in equilibrium logic is considered a shorthand as well.
¡¡the semantics of the logic of here-and-there is defined in terms of ht-interpretations  which are pairs  of sets atoms such that x   y . the ht satisfaction relation1 |= between an ht-interpretation and a formula f is defined recursively as follows:
; ;
;
;
if
  and
	 ii 	=	¡ú	.
an ht interpretation	is an equilibrium model of a for-
  and there is no proper subset
x1 of x  such that . ferraris  showed that the stable models of a formula are essentially the same as its equilibrium models.
theorem 1  ferraris  let x be a set of atoms and f a general logic program  x is a stable model of is an equilibrium model of f.
1 from general logic program and equilibrium logic to the logic of gk
in this section  we present a translation from a general logic program  also a formula in equilibrium logic  to a formula in the logic of gk  and show that under the translation  stable models  thus equilibrium models  coincide with gk models in the logic of gk.
¡¡given a general logic program f  we define two formulas fa and fgk in the logic of gk as follows:
1. fa is obtained from f by simultaneously replacing each atom p by ap.
1. fgk is defined inductively as follows:
	  ¡Í  forgkp ¡Ê=atom¡Í;	  pgk = kp;
.
¡¡it can be shown that for a normal logic program f  fgk is equivalent to the translation by lin and shoahm  given in section 1 under
		 1 
and that for any formula w in the logic of gk  m is a gk model of w iff m is a gk model of w ¡Ä  1 .
¡¡this translation is also similar to the mapping from formulas in equilibrium logic to quantified boolean formulas given in  pearce et al.  1 . we shall discuss this in more detail in a later section.
to illustrate  consider the three programs in example 1.
pgk is
   p gk ¡ú qgk  ¡Ä   p ¡ú q a 
which is equivalent  in classical logic  to
   pgk ¡Ä  pa  ¡ú kq  ¡Ä   pa ¡ú qa  
which is
	  kp ¡Ä  ap  ¡ú kq  ¡Ä   ap ¡ú aq .	 1 
now let m be a model of the above sentence. if p ¡Ê a m   then  1  holds no matter what k m  is  thus its minimal model is k m  = th     so cannot be a gk model. now if  kp ¡ú kq  ¡Ä aq.   then  1  is equivalent to
a gk model. what we have shown here is that in any gkkthus m  =q ¡Ê tha  m{q }. . and ifthus if ma mis a minimal model  then  = k m   then m is
modelof such a model is apparent.m of  1   k m  = a m  = th {q} . the existence
kpit can be similarly shown thatm	qgk is equivalent to ap ¡ú
a	or	. and
rgk is equivalent to kp ¡ú ap  and that m. thus for theseis a gk model
three programs  their gk models correspond one-to-one with their stable models. in general  we have the following result.
theorem 1 let x be a set of atoms and f a general logic program. the following three statements are equivalent.
1. x is a stable model of f.
1.  is an equilibrium model of f.
1. there is a gk model m of fgk such that k m  = a m  = th x .
proof sketch: given a general logic program f  two set of atoms x and y such that x   y and a kripke structure m such that k m  = th x   a m  = th y    by induction on the structure of f  we have x |= fy iff m |= fgk. from this  1   1 follows. by theorem 1  1   1. 
1 from general logic programs and equilibrium logic to circumscription: propositional case
given their mapping  1  from normal logic program to the logic of gk  lin and shoham  showed that stable model semantics for normal logic programs can be captured in circumscription  mccarthy  1  as follows. given a set atom = {p q ...} of atoms  let new set of atoms. given a normal logic program f  let c f  be the conjunction of the sentences:

for each rule r ¡û p1 ... pn notq1 ... notqm
in f. lin and shoham  showed that x is a stable model of is a model of
 
where circum w;q  is the circumscription of the atoms in q in w  with all other atoms fixed . lin and shoham also showed that this result can be extended to disjunctive logic programs. using the same idea  we can capture the stable model semantics of general logic program and equilibrium logic in circumscription as well.
¡¡let atom be a set of atoms. again let atom} be a set of new atoms. given any general logic program f in the language atom  let c f  be the result obtained from fgk by replacing every kp in it by p and every ap in it by p  for every p ¡Ê atom.
theorem 1 for any general logic program f in the language atom  any set x   atom  the following four statements are equivalent
1. x is a stable model of f.
1.  is an equilibrium model of f.
1. there is a gk model m of fgk such that k m  = a m  = th x .
1. is a model of

proof sketch: 1   1 follows from the definitions of gk models and circumscription. 
¡¡interestingly  our translation c f  that embeds general logic programs and equilibrium logic in circumscription is exactly the same as the one by pearce et al.  pearce et al.  1  for embedding equilibrium logic in quantified boolean formulas. they showed thatis an equilibrium model of a formula f in equilibrium logic iff x is a model of the following quantified boolean formula:
 
where f is the formula obtained from f by replacing every atom stands for
.
while propositional circumscription is also a quantified boolean formula  it is a well studied formalism. there are many known results about circumscription that we can use. mapping logic programs to circumscription helps understanding both formalisms.
notice that the formula is equivalent to
.
thus  1  is equivalent to
 
which is equivalent to
 
as the atoms  predicates  to be minimized occur only negatively in . putting the formula
 into the theory in the circumscription is
good as it can be used to simplify c f .
proposition 1 if  then
 1  is equivalent to
.
consider again the three programs in example 1. for p 
c p  is equivalent to  which is equivalent to  under . thus for this program 
 1  is equivalent to
 
which is equivalent to
 
which has a unique model.
¡¡for q =  p ¡Å p  c q  is equivalent to. thus for this program   1  is equivalent to
 
which is equivalent to  which has two models p and
 p.
1 from general logic programs and equilibrium logic to circumscription: first order case
as in  lin and shoham  1   we can extend the above mapping to the first-order case. first of all  we extend logic programs to first-order case. let l be a relational first-order language with equality  i.e. it has no proper functions. by an atom  we mean an atomic formula including equality atoms.
¡¡in the following  let ¦²una be the set of unique names assumptions on constants:  for any two distinct constants c1 and c1.
¡¡a first-order general logic program is a first-order sentence in the following set:
f ::= ¡Í | a | f ¡Ä f | f ¡Å f | f ¡ú f |  xf |  xf 
where a is an atom  and x a variable. again  for any general logic program f   f is considered to be a shorthand for f ¡ú
¡Í.now let m be a finite model of ¦²una with domain d. let ¦Ò be the mapping from constants to d under m. clearly  for any distinct constants. we say that
m is a stable model of a first-order general logic program f if t m   the set of ground facts true in m:
a predicate 
is a stable model of the general logic program fm  which  called the grounding of f on m  is obtained from f and m in two steps:
1. first  replace every constant c in f by ¦Ò c   every subformula of the form  xw in it by xw in it by  and every subformula of the form  
  where w x/u  is the result of replacing every free occurrence of x in w by u. the order by which these subformulas are replaced does not matter.
1. in the expression obtained by the first step  replace everyequality atom   and everyfor distinct u and u by .
example 1 consider the following four programs:
f1 =  xp x  ¡Ä  x  p x  ¡ú q  
f1 =  xp x  ¡Ä    x p x   ¡ú q   f1 =  xp x  ¡Ä     xp x   ¡ú q   f1 =  xp x  ¡Ä  x  p x  ¡ú q .
now consider a structure with two elements {a b}. the grounding of the four programs on this domain are
 p a  ¡Å p b   ¡Ä    p a  ¡ú q  ¡Å   p b  ¡ú q   
 p a  ¡Å p b   ¡Ä    p a  ¡Å  p b   ¡ú q  
 p a  ¡Å p b   ¡Ä    p a  ¡Å p b   ¡ú q  
 p a  ¡Å p b   ¡Ä   p a  ¡ú q  ¡Ä   p b  ¡ú q  
respectively. so for this domain  f1 and f1 have the same stable models  {p a } and {p b }  and f1 and f1 have the same stable models  {p a  q} and {p b  q}. it is easy to see that this is the case for any given domain: f1 and f1 have the same stable models  and f1 and f1 have the same stable models.
¡¡we now show that the stable models of first-order general logic programs can be captured in circumscription as well.
¡¡let ¦¤ be the set of predicates in the language. let ¦¤ be a set of new predicates  one for each p in ¦¤ with the same arity and denoted by p. now given a first-order general logic program f  let c f  be the first-order sentence defined inductively as follows.
  c ¡Í  is ¡Í.
  if w is an atomic formula  then c w  is w.
  where.
 
where w is the result of replacing every predicate p in
.
¡¡the stable models of f is then the circumscription of all the predicates in ¦¤ in c f   together with the following axiom
	.	 1 
theorem 1 let m be a finite model of ¦²una. m is a stable model of is a model of
	circum c f ;¦¤  ¡Ä  1  	 1 
where m is the conservative extension of m under  1 .
similar to proposition 1  we have
proposition 1 if
w  then  1  is equivalent to circum w;¦¤  ¡Ä  1 .
¡¡interestingly  ferraris et al.  also proposed a semantics for general first-order logic programs and showed that their semantics is equivalent to  1  when restricted on the predicates in the original program  that is  when all new predicates p in  1  are existentially quantified.
example 1 consider the programs in example 1
  c f1  is
.
which is equivalent to 
	under .	therefore  under  1  
circum c f1  {p q}  is equivalent to
 
thus equivalent to
 !xp x  ¡Ä  q 
which can be considered to be the first-order semantics ofof this sentence f1. if d = {a b{p }a  then there are exactly two models } and {p b }.
  c f1  is
 
which is equivalent to

	under	.	therefore 
circum c f1  {p q}  is equivalent to
 
under  1   thus equivalent to
 !xp x  ¡Ä    x p x     q  
which can be considered to be the first-order semantics of f1. if d = {a b}  then there are exactly two models of this sentence  {p a  q} and {p b  q}.
  c f1  is
 
which is equivalent to c f1  under  1 . thus f1 and f1 are equivalent.
  c f1  is
 
which is equivalent to c f1 . thus f1 and f1 are equivalent.
1 strong equivalence
the notion of strong equivalence  lifschitz et al.  1  is important in logic programming. for disjunctive logic programs  research by lin and chen  and eiter et al.  show that interesting programs transformation rules can be designed based on the notion.
¡¡according to ferraris and lifschitz   two general logic programs f and g are said to be strongly equivalent if for any formula f1 that contains an occurrence of f  f1 has the same stable models as the formula obtained from it by replacing an occurrence of f by g. they showed that for any f and g  they are strongly equivalent iff f and g are equivalent in the logic here-and-there.
¡¡as it turns out  our mapping from equilibrium logic to logic of gk also embeds logic of here-and-there to modal logic. thus the problem of deciding whether two programs are strongly equivalent can be reduced to checking whether certain modal logic formulas are valid  and that  because of the special format of these modal formulas  can in turn be reduced to checking whether certain propositional formulas are tautologies.
theorem 1 let f be a formula in equilibrium logic  x and y two sets of atoms such that x   y   and m a kripke interpretation such that k m  = th x  and a m  = th y  .
we have that.
theorem 1 let f and g be two general logic programs. the following conditions are equivalent.
1. f and g are strong equivalent.
1. f is equivalent to g in the logic here-and-there.
1.
1..
1.
1..
corollary 1 the problem of deciding whether two general logic programs are strongly equivalent is co-np complete.
1 conclusion
we showed that the logic of gk proposed by lin and shoham is flexible enough to handle stable model semantics of general logic programs. because of this  the stable model semantics of general logic programs can also be formulated in circumscription  in both propositional and first-order case. for future work  we plan to make use of the expressive power of gk in other applications.
acknowledgments
we thank vladimir lifschitz for stimulating discussions on topics related to this paper  and for his helpful comments on earlier versions of this paper. this work was supported in part by hk rgc under grant hkust1e  and by china nsfc under grant 1.
