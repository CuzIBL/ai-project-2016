 
　　in our research group  the hybrid knowledge representation system babylon has been developed providing formalisms for rules  prolog and frames. beyond it  we implemented consat  a system for constraint satisfaction. since applications of babylon for process diagnosis  planning etc. required constraints. we integrated consat into the babylon environment. 
　　the paper describes the integration of consat into babylon  regarding two aspects. first  constraints should be available as another babylon formalism by using the functional interface of consat. on the other hand  it is important to have constraints implicitly controlling other babylon formalisms  for instance  in order to keep the system's database consistent. while with respect to the first point  the paper describes work already finished  the second form of integration is work in progress. 
keywords 
　　constraints  hybrid knowledge representation  integration. 
1. introduction 
　　constraint networks are evolving as another style of knowledge representation beside rules  logic  frames  etc. in many domains such as qualitative reasoning and planning. a hybrid knowledge representation system called babylon has been developed in our group at gmd sankt augustin  forschungsgruppe expertensysteme 1    diprimio  brewka 1   that 
- so far - provides rules  prolog  and frames. however  babylon is open to integrate any other formalisms which can be achieved by simple extensions of the system. currently  in our group a planning system  a knowledge acquisition system  diederich et al. 1   and a system for process diagnosis are being developed  all of which depend on the availability of some constraint mechanism  cf. molgen  stefik 1  as a planning system using constraints  and  davis 1  and  dekleer  williams 1  as diagnosis systems using constraints . thus  there is an urgent need to extend babylon to a constraint formalism. 
　　independently from babylon but with the purpose of later integration  a constraint system called consat  guesgen 1  has been developed. consat allows to define hierarchical networks of domain independent constraints. the variables in a network can be assigned sets of values that are propagated to compute the maximal locally consistent assignment  the globally consistent assignments  or to detect an inconsistency in the original assignment. 
1 	architectures and languages 
　　due to the open-endedness of babylon  integration of consat as another formalism was straightforward. as a result  rules  prolog goals  frame instances with their slots and behaviors can be used in the definition of constraints. vice versa  rules  prolog clauses  frames and behaviors can use constraint networks for the computation of relations or the detection of inconsistencies with resprect to some given values. 
　　apart from having constraints symmetrically to the other formalisms  we would like to use them asymmetrically as watching over the other formalisms: 
　　babylon has a dynamic database containing frame instances  items produced by rules  and facts asserted by prolog. insofar as these data may be interpreted as values of certain variables  the variables could be identified with the variables in some constraint network. now if all data changes are implicitly passed to the constraint network  propagated therein  and the results are implicitly returned to the database  we use the constraint network to watch the data of the other formalisms. 
　　this asymmetric use of constraints saves much explicit programming needed to maintain the con-
sistency of the database. it is particularly attractive in a hybrid system where very different types of data as produced from the different formalisms have to be maintained consistent. 
　　so far we know only one other hybrid system that provides constraints as a real knowledge representation formalism. it is the socle system that combines constraints with a frame formalism  harris 1 . other systems like art  kee  or knowledge craft use constraints only limited to the scope of single frame instances in order to express context sensitive restrictions on their slot values  cf.  richer 1  . 
　　the integration of consat in babylon has been completed with respect to the symmetric case and has been delivered as an experimental feature of babylon release 1 in january '1. immediately afterwards  we will implement the asymmetric integration for which currently only a restricted prototype with an interface to the frame formalism has been implemented  junker 1 . 
1. two systems as a starting point 
　　before discussing the integration of consat into babylon we will consider the two systems separately in some more detail. 

1. the constraint system consat 
　　consat is a domain-independent constraint satisfaction system  guesgen 1  allowing to propagate arbitrary symbolic values. 
　　a constraint establishes a relation between certain variables. in consat  the relation may be defined extensionally by enumerating all tuples. the following example is extracted from the description of traffic lights with two fires: 
 defconstraint 
 :name inverse-state  
 :type primitive  
 interface firel fire1  
 :relation  :tuple  on off    :tuple  off on      
　　in consat  constraints can also be defined intensionauy by functional expressions for all variables in terms of the other variables as in the following example: 
 defconstraint 
 :name sum  
 .type primitive  
 .interface addentl addent1 sum  
 xelation 
 .pattern  addentl addent1  + addentl addent1   
:if  constrained-p addentl addent1   
 :pattern  addentl  - sum addentl  sum  :if  constrained-p addentl sum    :pattern   - sum addent1  addent1 sum  :if  constrained-p addent1 sum    . 
　　the condition following :if ensures that  e.g.   + addentl addent1  is computed only if the arguments are assigned a set of definite values. thus  the functional patterns may be conditioned. in extreme cases  the condition may play the role of a characteristic 
predicate for the relation: 
 defconstraint 
 :name greater  
 :type primitive  
 interface x y  
 :relation  .pattern  x y  .if    x y    . 
　　constraints can be composed to hierarchical networks of constraints. figure 1 sketches the traffic lights of the crossing between 1th avenue and 1nd street. 

fig. 1: crossing between 1th avenue and 1nd street. 
　　the corresponding constraint network can be defined using eight variables  one for each fire: 
 defconstraint 
 :name traffic-lights  
 :type compound  
 interface tl-ave-n-red tl-ave-n-green tl-ave-s-red tl-ave-s-green tl-st-e-red tl-st-e-green tl-st-w-red tl-st-w-green   xonstraint-expressions 
 inverse-state tl-ave-n-red tl-ave-n-green  
 inverse-state tl-ave-s-red tl-ave-s-green  
 inverse-state tl-st-e-red tl-st-e-green  
 inverse-state tl-st-w-red tl-st-w-green  
 same-state tl-ave-n-red tl-ave-s-red   same-state tl-st-e-red tl-st-w-red   inverse-state tl-ave-n-red tl-st-e-red   . 
　　constraints have been used to filter sets of values assigned to the variables  cf. waltz's filtering in scene analysis  waltz 1    and to compute new values from given ones as  e.g.  in electrical circuit analysis  stallman  sussman 1 . consat supports both aspects by allowing sets of values to propagate in two modes  terminology is taken from  voss 1  : 
　　1. given the definition of a constraint network and an initial assignment of value sets to the variables of the network  the system can compute the maximal locally consistent assignment by local propagation. for example  the expression 
 satisfy traffic-lights :locally 
　　　:with tl-ave-n-green = 'on  evaluates to 
  tl-ave-n-red off   tl-ave-n-green on  
    tl-ave-s-red off   tl-ave-s-green on   tl-st-n-red on   tl-st-n-green off   tl-st-s-red on   tl-st-s-green off  . this is a unique assignment which describes the situation already shown in figure 1. 
　　if one of the variables is assigned the empty set as a result of local propagation  the network is inconsistent with respect to the initial assignment. 
　　1. given a network and an initial assignment to the variables of the network  the system can compute one  a specific number or all globally consistent assignments by local propagation  tentative assumptions and backtracking. if such an assignment does not exist  the initial assignment following the keyword :with has been inconsistent and nil is returned. in the preceding example  the globally consistent solution is identical with the locally consistent solution  because all variables are uniquely determined. in general  a locally consistent assignment is only an approximation containing the globally consistent solution  cf.  freuder 1  . 
　　summarizing  we observe that consat supports a purely functional view: after computing the final assignments for the variables  all values are forgotten. in contrast to  steele 1   there is no way to restrict and propagate values in the network incrementally. as a consequence  no reason maintenance system is needed in consat. with regard to the integration of consat in babylon  we wanted to avoid double work: in babylon  we can use frame instances to record the state of the network. 
1. the babylon philosophy of integration 
　　babylon is a knowledge representation system that is open to integrate arbitrary knowledge representation formalisms  diprimio et al. 1   christaller et al. 1 . this open-endedness is achieved by having separate interpreters for each formalism which do not know from one another. instead they know a meta interpreter that is responsible for all communications. 
　　so far  babylon provides a frame formalism with multiple inheritance and active values  prolog  and a 
	guesgen  junker  and voss 	1 
rule formalism without variables but with optional forward and backward chaining strategies. 
　　in order to integrate a new formalism like constraints or a database language  we just have to provide an interpreter for the new formalism and inform the meta interpreter in a so-called processor mixin about the new types of babylon expressions to be encountered in the other formalisms. 
1. integration of consat in babylon 
　　planning to integrate constraints in babylon  there was an obvious solution offered by babylon's open-endedness to new formalisms. we will first discuss this solution of adding constraints as another formalism before we turn to an alternative where we have constraints silently controlling the other formalisms. 
1. constraint* as another babylon formalism 
　　according to section 1  we can integrate the constraint formalism into babylon by 
establishing the consat interpreter as a new 
language processor  introducing satisfy expressions calling consat's two propagation functions as new types of babylon expressions. 
　　now  we can use constraints in rules  prolog clauses  and behaviors of frames. for example  we could write a rule reacting to the inconsistent assignment detected by the traffic-lights network from section 1: 
  sand  not  satisfy traffic-lights :globally .with tl-ave-n-green = 'on tl-st-e-green = 'on   
　　　...further conditions...   sexecute  handle-inconsistency   . 
　　the consistency check is a meaningful application of constraints in rules. besides  in the prolog formalism we can bind the result of constraint propagation to prolog variables for further processing in that formalism: 
 is  va  satisfy traffic-lights :locally 
:with tl-ave-n-green = 'on  
 candidate  va tl 1 = tl-st-e-red 
 tl1 = tl-st-e-green  
   in the first clause  the variable  va is bound to the maximal locally consistent assignment  which is used in the candidate clause to assign the elements of the value sets successively to the specified prolog variables. in our example  the candidate clause results in binding 1 to on and  j.1 to off. if backtracking occurs  the candidate clause would result in fail  since the maximal locally consistent assignment is unique. 
　　beside using constraints in other formalisms  we can use the other formalisms in order to define constraints. in particular  we can use slots and behaviors of frames in the functional expressions of the :pattern construct  and prolog goals as conditions following the keyword :if. 
1. constraints watching other babylon formalisms 
　　the integration of constraints as a new babylon formalism is not satisfactory due to the functional interface of consat. thus  it is difficult to impose any constraints on the slot values of a frame instance  as 
1 	architectures and languages 
e.g. in art  kee  or knowledge craft   because these constraints should be attached permanently to the slots and they should be invoked implicitly whenever a slot value is about to change. for example  we would like to define a frame traffic-light with two slots for the fires and the inverse-state constraint keeping them consistent. 
　　we could extend this example to a crossing frame with four slots for the four traffic lights  and another slot to remember the time of the last switch . to keep the traffic lights consistent  we would like to attach traffic-lights-constraints similar to the traffic-lights constraint in section 1 to all instances of the frame  
 defframe traffic-light 
 slots  red-fire - :possible-values  :one-of on off   
...further slots...   
 defframe crossing 
 slots  tl-ave-n -
.possible-values  instance-of traffic-light   
...further slots...   
 attach-constraints 
 :name traffic-lights-constraints  
 .attachments 
 :for-all tl =  instances-of traffic-light  
 inverse-state  tl red-fire   tl green-fire    
 :for-all xing =  instances-of crossing  
 same-state   xing tl-ave-n  red-fire  
  xing tl-ave-s  red-fire   
 same-state   xing tl-st-e  red-fire  
  xing tl-st-w  red-fire   
 inverse-state   xing tl-ave-n  red-fire  
  xing tl-st-e  red-fire      
　　now  given the crossing 1th-ave-1nd-st from figure 1 as an instance of the crossing frame  what do we expect from attaching the traffic-lightsconstraints  we could write some rules to regulate the traffic lights of the crossing depending on the cars in the street and in the avenue  and depending on the time elapsed since the last switch  for example: 
 rule1  sand  car-in-ave 1th-ave-1nd-st  
 car-in-st 1th-ave-1nd-st  
 green-phase 1th-ave-1nd-st avenue 1   
 sexecute 
  - 1th-ave-1nd-st :let-thru 'street    
　　the rule uses the prolog goals car-in-ave  car-inst and green-phase  which reflect the situation in the avenue and in the street  respectively. when the rule fires  the expression   - 1th-ave-1nd-st :let-thru street  is evaluated  executing the behavior :let-thru  which translates its parameter street into the traffic light tl-st-e. if the green fire is not yet on  it is switched  and all other fires are reset to undetermined  thereby triggering the traffic lights constraints. the new values - on for green-fire of tl-st-e and undetermined for all other fires - are propagated. the result  a definite state on or off for each fire  is assigned implicitly to all fires of all traffic lights in our crossing  so that a new consistent state is obtained. 
　　in the context of babylon  the idea of using constraints to watch the data of another formalism should be generalized in a way that is open to arbitrary other future formalisms of babylon. the key of such a generalization is to introduce the new concept of a babylon variable. a babylon variable is a construct in some babylon formalism that can be meaningfully associated with a value. for example  a babylon variable in the rule formalism could be any text like  peter is sick  that can be asserted or negated in the database and thus can be interpreted as a boolean variable. a babylon variable in prolog could be any fact that can or cannot be derived from the current database and thus can also be interpreted as a boolean variable. 
　　allowing arbitrary babylon variables in the attach-constraints construct  we can impose constraints between very different data emerging from the different formalisms. 
     having attached a constraint network to certain babylon variables  demons must be installed for each of them. this task should be left to the interpreters of the variables' formalisms according to the idea that the individual interpreters should not know each other. whenever a babylon variable shall be changed  its demon must inform the constraint interpreter - of course via the meta interpreter. the constraint interpreter then must collect the current values of all babylon variables that are in the same network as the one to be changed. this is again achieved via the meta interpreter. the collected values are propagated to compute the maximal locally consistent assignment. this assignment determines a set of values for each babylon variable in the network which is returned - via the meta interpreter - to the interpreters of the variables' formalism. processing these values is again left to the individual interpreters since different reactions may be meaningful in different formalisms. for example  reactions to an empty assignment may be to suppress the intended change of values or to ask the babylon user. or  if local propagation returns not a simple value but a set of definite values  this set may simply be forgotten or stored in some appropriate place: in the case of frames  the set of values may be stored in the :possible-values property  which is available for each slot. 
1. conclusion 
　　we have presented two systems  the constraint satisfaction system consat and the hybrid knowledge representation system babylon. there are two compatible ways of integrating consat into babylon: firstly  as another knowledge representation formalism beside rules  prolog  and frames  and secondly  as a mechanism watching over the other formalisms. the integration is realized according to the philosophy of babylon  so that the next formalism to be added to 
babylon - say a database language - can at once use constraint expressions as a special type of babylon expressions or can be watched by attached constraint networks. 
　　we already mentioned that  so far  we only know of one other hybrid system that provides constraints as another knowledge representation formalism. but in the socle system  harris 1   constraints are combined only with a frame formalism  not with rules or prolog as in babylon. the constraint component of socle differs from consat in having networks with a state so that constraints can be stepwise restricted and retracted. this rises much more problems since both  the state of the network and that of the frame objects  have to be kept consistent. integrating consat into babylon was easier due to the purely functional interface of consat. on the other hand  being integrated into babylon  consat profits from all features offered in babylon. for example  constraint networks can be made permanent by attaching them to permanent data from other formalisms  in particular to frame instances. as another example  a reason maintenance component  which is being planned for babylon  will also be available for consat in babylon. 
　　the integration of consat in babylon has already been accomplished for the symmetric case and is available since january 1 in release 1 of babylon. the asymmetric case has been implemented prototypically with an interface to the frame formalism only  junker 1 . implementation of the full feature will start in january'1  parallel to the implementation of the process diagnosis system which we consider as a major application test of our integration of constraints in babylon. 
1. acknowledgements 
　　we thank all members of our group for their contributions to this paper. special thanks to ursula bernhard who read former versions of the paper. 
1. 