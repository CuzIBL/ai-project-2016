
in this paper we extend the logic programming based conformant planner described in  son et al.  1a  to allow it to work on planning problems with more complex descriptions of the initial states. we also compare the extended planner with other concurrent conformant planners.
1 introduction
previous work  gelfond and morales  1; son et al.  1b; 1a; tu et al.  1  have explored the usefulness of approximationsof al actions theories to conformantplanning. among them   son et al.  1a; tu et al.  1  define different approximations in terms of logic programs and use these approximations to develop conformant planners in the logic programming paradigm. the choice of logic programming in the implementation of planners in general and conformant planners in particular offers several advantages. first  the correctness of the planner can be formally proved. second  logic programming allows us to deal with domains with static causal laws  also called constraints . and finally  concurrent planning and domain control knowledge can be implemented in the planner without any difficulty.
﹛the planners in  son et al.  1a; 1b; tu et al.  1   however  suffer from two main drawbacks:  i  they work only on planning problems where the initial situation can be characterized by a single set of fluent literals; and  ii  they are in general incomplete  i.e.  they might not be able to solve some problems which are solvable by other planners. since these planners are based on an approximation theory  the latter problem is inevitable. it remained unclear  however  whether or not these planners can be extended to deal with other types of conformant planning problems  e.g. planning problems where the set of possible initial states is given by a disjunction. furthermore  it is important to characterize conditions for which they are complete. an interesting work on this issue has recently been studied in  son and tu  1 . nevertheless  the proposed completeness condition is restricted to action theories without static causal laws.
﹛in this paper we address these limitations by  a  expanding the logic programming implementation of  son et al.  1a  to build a new conformant planner  called cpaspm  which can operate on planning problems with a more complex description of the initial state of the domain; and  b  extending the completeness result in  son and tu  1  to action theories with static causal laws.
﹛this paper is organized as follows. in the next section  we review the basics of the action description language al from  baral and gelfond  1  and the definition of an approximation from  son et al.  1a . in section 1  we describe an extended logic programming based conformant planner called cpaspm. in section 1 we state the soundness of the implementation and provide a sufficient condition on action theories for which the planner is complete. finally  in section 1  we compare the performance of cpaspm with some other concurrent conformant planners.
1 background
1 al action theories and transition diagrams
dynamic systems can be modeled by transition diagrams whose nodes correspond to possible states of the domain and whose arcs correspond to actions that take the domain from one state to another. we limit our attention to transition diagrams that can be defined by al action theories.
﹛the signature 曳 of an al action theory consists of two disjoints sets of symbols: a set f of fluents and a set a of elementary actions. an action is a non-empty set of elementary actions. a fluent literal  or literal for short  is either a fluent f or its negation  f. an al action theory is a collection of statements of the forms:
e causes l if p	 1  l if p	 1  impossible a if p	 1 
where e is an elementary action  a is an action  and p is a set of fluent literals from the signature 曳. statement  1   called a dynamic causal law  says that  if e is executed in a state satisfying p then l will hold in any resulting state. statement  1   called a static causal law  says that any state satisfying p must satisfy l. statement  1  is an impossibility condition  which says that action a cannot be performed in any state satisfying p. given an action theory d  a set of literals s is closed under a static causal law  1  if l ﹋ s whenever p   s. for a set of literals s  by cn s   we denote the smallest set of literals that includes s and is closed under the set of static causal laws of d. a state 考 is a complete and consistent sets of literals closed under the set of static causal laws of d. an action b is said to be prohibited in state 考 if d contains an impossibility condition  1  s.t. p   考 and a   b. for an action a and a state 考  e a 考  stands for the set of all literals l s.t. d contains a law  1  with p   考 and e ﹋ a. elements of e a 考  are called direct effects of the execution of a in 考. an action theory d describes a transition diagram t d . the nodes of t d  are states of d and arcs are labeled with actions. the transitions of t d  are defined as follows.
definition 1   mccain and turner  1   for an action a and two states  a transitionis not prohibited in 考 and
		 1 
given a state 考 and an action a  such 考 is often referred to as a possible successor state of 考 as the result of the execution of a. when 考 and a are clear from the context  we simply say that 考 is a possible successor state.
﹛an action theory d is consistent if for any state 考 and action a which is not prohibitedin 考 there is at least one possible successor state. in this paper  we consider consistent action theories only.
﹛we now introduce some terminology used to describe properties of a transition diagram t d . by convention  we use letters a and 考  possibly indexed  to denote actions and states respectively. a model m of a chain of events
 is an alternate sequence of states and
actions for 1 ≒ i   n. 考1  resp. 考n  is referred to as the initial state  resp. final state  of m. we say that m entails a set of literals s  written as m |= s  if s   考n. furthermore  we sometimes write to denote that there is a model of 汐 whose initial state and final state are 考1 and 考n  respectively.
an action a is executable in a state 考 if there is a state 考
s.t.. a chain of events
is executable in 考 if either  i  n = 1  i.e.  汐 is an empty chain of events   or  ii  a1 is executable in 考 and for every 考 s.t. is executable in 考.
1 approximations of t d  and conformant planning problem
in many of real world applications  an agent may not have complete knowledge of the current state of the domain. under such circumstances it is not possible for the agent to directly reason about the effects of actions using the transition diagram of the domain. our approach to reasoning with incomplete informationis based on using approximationsof action theories  son and baral  1; son et al.  1b; 1a; tu et al.  1 . in this section  we review the definition of approximation from  son et al.  1a  and discuss how an approximation can be used to find a solution of a conformant planning problem.
﹛let d be an action theory. a set s of literals is a partial state if it is a subset of some state and it is closed under the set of static causal laws of d. for a partial state s  a completion of s is a state 考 s.t. s   考 and by comp s  we denote the set of all completions of s. for a set of partial states s by comp s  we denote the set.
definition 1  approximation  son et al.  1a  is an approximation of d if:
1. nodes of are partial states of t d .  then for every 考 ﹋ comp s  
 a  a is executable in 考  and for every.
it is not difficult to see that the followingobservationholds.
observation 1   son et al.  1a   let  be an approximation of d. then  for every chain of events 汐  if  then for every 考 ﹋ comp s    a  汐 is
executable in 考; and  b  for every t d .
this observation states that reasoning using approximations is sound wrt reasoning using t d .
﹛one application of reasoning with partial states is conformant planning. in a conformant planning problem  the task of the agent is to find a chain of events that achieves some given goal provided it may not have complete knowledge of the initial state of the domain. more specifically 
definition 1 a conformant planning problem p is a tuple  where 忙 is a set of possible initial states and g is a set of literals.
 definition 1 a chain of events is a solution or a conformant plan of a conformant planning problem  if  for every 考 ﹋ 忙  汐 is executable in 考 and
for every model m of 汐 with initial state 考  m |= g.
﹛the following relationship between conformant plans and paths of an approximation of d follows from observation 1.
observation 1	be	an	approximation.	if
g  then 汐 is a solution of the conformant planning problem.
﹛observation 1 shows us a way to solve a conformant planning problem: look for a path in an approximation that leads to a goal partial state  i.e. a partial state satisfying the goal . this approach is adopted in  son et al.  1b; 1a   where the set 忙 of possible initial states of a conformant planning problem is modeled as the completions of a single partial state s. it is shown in  son et al.  1b; 1a  that many conformant planning problems in the literature can be successfully solved this way. however  the following is an example of a conformant planning problem that cannot be solved by this method.
example 1  turkey and two guns  there are two guns and a turkey. initially only one of the guns is loaded and we do not know which one it is. the objective is to kill the turkey by shooting it. let g1 and g1 be names for the guns and x be a variable for the guns. this planning problem can be modeled as where
causes
1 =
shoot x  causes  loaded x 

g1 = {dead}
it	is	easy	to	see	that	by	definition	1	汐1	=  is a solution of p1.
﹛following the approach in  son et al.  1b   however  the conformant planning is modeled as 
 where .	clearly does not have a conformant plan because the state
 = { dead  loaded g1   loaded g1 } belongs to comp { dead}  and there exists no path in the transition diagram t d  that leads to a goal state from 考. 
in order to address this issue  we have extended the definition of a conformant plan from  son et al.  1a   and  with a more careful examination of approximations  conclude the following observation  which can be viewed as a generalization of observation 1.
observation 1 let be a planning problem   be an approximation  and 汐 be a chain of events. let s be a set of partial states s.t. comp s  = 忙. if for every
s ﹋ s  there exists a partial state and then 汐 is a solution of p.
this observation extends the applicability of approximations to conformant planning problems with a more complex description of the initial state of the domain. in particular  instead of viewing the set of possible initial states 忙 as  the completions of  a single initial partial state s as in  son et al.  1a   we view it as a set of initial partial states s. then  to find a conformant plan within an approximation  we look for a chain of events 汐 s.t. every possible path of 汐 starting from a partial state in s always leads to a goal partial state. as an example  the set of possible initial states of the domain in example 1 can be viewed as the set s1 of two partial states1 { dead loaded g1   loaded g1 } and { dead  loaded g1  loaded g1 }  i.e.  s1 = 忙1. it is easy to verify that  within the approximation in  son et al.  1a   the solution can be found by this method because every possible path of 汐1 in the approximation that starts from a partial state in s1 always leads to a goal partial state.
1 a logic programming implementation
we now describe an answer set planning  subrahmanian and zaniolo  1  based method for constructing an approximation to action theories of al. in our method  we define a transition diagram t  d  in terms of a logic program 羽  d  called the cautious encoding of d. the work in  son et al.  1a  uses a similar construction but the resulting logic program is only able to deal with a single initial partial state. the work in  tu et al.  1  does provide a method for constructing conditional plans with several branches but operates from a single initial partial state as well. our work in this paper can be viewed as a combination of the ideas presented in these works in order to develop a conformant planner which can deal with a more complex description of the initial state; in particular  the planner can work on domains with disjunctive information in the initial state. in order to achieve this  a distinct label is attached to every partial state considered. atoms of 羽  d  are formed by the following  sorted  predicate symbols:
  h l t k  is true if literal l holds at time step t in a path starting from the initial partial state labeled with k;
  o e t  is true if e occurs at time step t;
  dc l t k  is true if literal l is a direct effect of an action that occurs at  t   1 k ; and
  ph l t k  is true if literal l possibly holds at time t in a path with the initial partial state labeled with k.
the program also contains auxiliary predicates: time  fluent  action  and label that are used for enumerating constants of sorts time step  fluent  elementary action and label respectively. in our presentation  we also use some shorthands: if a is an action then o a t  = {o e t  : e ﹋ a}. if p is a set of literals  and f is either h  dc  or ph  then f p t k  = {f l t k  : l ﹋ p} and 
{ not f l t k  : l ﹋ p}. for a literal l  by l we denote its complement  i.e. . for a set of literal

p  p = {l : l ﹋ p}. finally  l  t and k  possibly with indices  are variables for literals  time steps  and labels respectively. for convenience  we often write 羽  d n  to denote the restriction of 羽  d  to time steps between 1 and n. the set of rules1 of 羽  d  is listed below.
1. for each dynamic causal law  1  in d  the rules
       h l t+1 k 	↘	o e t  h p t k 	 1  dc l t + 1 k 	↘	o e t  h p t k 	 1  belong to 羽  d . the first rule states that l holds at t +1 on path k if e occurs at t and precondition p holds at t on path k. the second rule states that l is a direct effect of e at  t + 1 k  if e occurs at t and precondition p holds at  t k .
since the state of the domain at time step t might be incomplete  we add to 羽  d  the rule
   ph l t + 1 k  ↘ o e t   not h p t k   1  which says that l possibly holds at  t +1 k  if e occurs at t and the precondition p possibly holds at  t k .
furthermore  we add to 羽  d  the following rule

	ph l t + 1 k 	↘	not h l t k  	 1 

not dc l t + 1 k .
which says that a literal l possibly holds at t + 1 if it possibly holds at t and its negation is not a direct effect of the action that occurs at t.
1. for each static causal law  1  in d  羽  d  contains:
 h l t k  ↘ h p t k   1  ph l t k  ↘ ph p t k   1 
these rules state that if p holds  or possibly holds  at  t k  then so does l.
1. for each impossibility condition  1  in d  we add to 羽  d  the following rule:
	↘	o a t   not h p t k 	 1 
this rule states that a cannot occur at time step t if precondition p possibly holds at  t k  for some path k.
1. the inertial law is encoded as follows:

which says that l holds at time step t   1 if its negation cannot possibly hold at t.
1. auxiliary rule: 羽  d  also contains the following rule:
↘h f t k  h  f t k   1 literal f ↘fluent f 	 1 literal  f ↘fluent f 	 1 the first rule  as a constraint  states that h f t k  and h  f t k  cannot hold at the same time 1 . the last two rules are used to define literals.
for an action a and a partial state s  let 旭 d a s  = 羽  d 1 ﹍h s 1 ﹍o a 1 . note that 旭 a s  is a stratified program  so if it is consistent  then it has a unique answer set  gelfond and lifschitz  1 . we define an approximation t  d  based on 旭 d a s  as follows.
definition 1 let s be a partial state and a be an action. let
t  d  be a transition diagram s.t.  iff 旭 d a s  is consistent andwhere
a is the answer set of 旭 d a s .
theorem 1 if d is consistent then t  d  is an approximation of d.	
the proofof this theoremis similar to the proofsof the soundness of the logic programming encoding of al action theories in  son et al.  1; turner  1 .
let be a conformant planning problem.
since t  d  is an approximation of d  we can use the program 羽  d  to find solutions of p. in the remaining part of this section  we describe a logic program 羽  p n   where p is the input planning problem and n is the length of a solution we wish to find.
﹛let s = {s1 s1 .. sm} be a set of partial states s.t. 忙 = comp s   hereafter we refer to such s as a set of initial partial states of p . let the subindex of each element of s act as its label. we construct the program 羽  p n  based on s as follows. 羽  p n  contains the rules of 羽  d n  and the following rules.
1. rules encoding the initial state: for every si ﹋ s  羽  p n  contains the rule
	h si 1 i .	 1 
1. rules encoding the goal: to guarantee that the goal is satisfied in the final state of every path  we add to 羽  p n  the following rules:
{↘ not h l n k  : l ﹋ g}.
1. rules to generate actions: to generate action occurrences  we add to 羽  p n  the following choice rule  simons et al.  1  1:
	1{o e t  : action e } ↘ t   n	 1 
1 properties of 羽  p n 
in this section  we investigate the soundness and completeness of 羽  p n .
1 soundness
using theorem 1 and observation 1  we can prove the correctness of the planner 羽  p n .
theorem 1 let a be an answer set of 羽  p n . for 1 ≒ i   n let ai = {e : o e i  ﹋ a}. then 
solution of p.	
1 a sufficient condition for the completeness
although theorem 1 tells us that 羽  p n  is sound  the program is not complete in the sense that there are planningproblems that have solutions for which 羽  p  returns no answer set. this is illustrated in the following example.
example 1 consider the action description
causes g if f
1 =
a causes g if  f
and the planning problemwhere 忙1 is the set of all possible states. obviously is a solution of this problem because either f or  f is true in any state belonging to 忙1 and thus either one of the above dynamic causal laws would take effect when a is executed.
﹛let s1 = { }. then  it is easy to see that comp s1  = 忙1. if we construct 羽  p1  based on s1 then 羽  p1  is inconsistent  which means that no conformant plan of length one can be found by 羽  p1 . in fact  it can be shown that for every n  羽  p1 n  is inconsistent. thus  羽  p1 n  cannot solve the planning problem p1. however  if 羽  p1  is constructed based on the set of initial partial states s1 = {{f} { f}} then 羽  p1  would return an answer set corresponding to the solution.	
﹛the above example shows that choosing a set of initial partial states s plays an important role in the completeness of 羽  p n . to characterize the situation in example 1  we define a notion of dependencies among literals and between literals and actions  adapted from  son and tu  1  .
definition 1 a literal l depends on a literal g  written as lg  whenever one of the following conditions holds.
1. l = g.
1. d contains a law  a causes l if p  s.t. g ﹋ p.
1. d contains a law  l if p  s.t. g ﹋ p.
1. there exists a literal.
1. .
definition 1 an action b dependson a literal l  written as bl  if either
1. d contains an impossibility condition  1  s.t. a   b and
‘l ﹋ 肉  or
1. there exists a literal.
for a set of literals w  we write l  w to denote that some g ﹋ w  andto denote that there exists no g ﹋ w
s.t. l  g.
﹛observe that according to definition 1  for the domain d1 in example 1  we have that. this implies that for each state 考 in 忙1  we can find some literal l such that gl. in this case  we say that 忙1 is not reducible to   wrt {g}. the precise definition of reducibility is given below.
definition 1 let 忖 be a set of states  s be a partial state  and w be a set of literals. we say that 忖 is reducible to s wrt w 
denoted by if
1. s is a subset of every state 考 in 忖 
1. for each l ﹋ w  忖 contains a state  and
1. for each action a  忖 contains a state.
we say that a set of states 忖 is reducible to a set of partial states s wrt a set of literals w  written as iff 忖 = comp s  and  for every s ﹋ s.
back to example 1  according to this definition  we do not
{ } but we do have 
we define a class of action theories as follows.
definition 1 a static causal law is simple if its precondition contains at most one literal. an action theory d is simple if each of its static causal laws is simple.
we notice that if d is simple then  implies that reasoning with t  d  from the set of partial states s would agree with reasoning about w with t d  from the set of possible initial states 忖 on the set of literals w. base on this observation  we have the following result about the completeness of 羽  p n .
theorem 1  be a solution of p =  is simple and 羽  p n  is constructed based
on a set of initial partial states is consistent and has an answer set a s.t. ai = {e : o e i  ﹋
a}.	
we can verify that for the planning problem p1 in example 1  if we construct 羽  p n  based on s1 = { } then we would miss the solution. however  if we construct it based on the set of partial states s1 = {{f} { f}} then 羽  p 1  would return an answer set corresponding to the solution.
1 experiments
theorem 1 suggests a simple algorithm for finding minimal plans  wrt the number of steps  of a planning problem p: sequentially run program 羽  p n  with n = 1 ...  until it returns an answer set  we assume that p does not have a trivial solution  . we have implemented this algorithm in a planning system called cpaspm and use cmodels  lierler and maratea  1  as the underlying answer set solver.
no. gunspl﹛﹛k dlvc-plancpaspm111111111111111111111--11--11--1table 1: conformant turkey domain
cpaspm takes as input a logic program representation of p and produces concurrent conformant plans. we have compared cpaspm with other conformantplanningsystems. due to space limit we only consider planners capable of generating concurrent plans. as aforementioned  only a small modification to the logic program can make the planner act as a sequential planner.
﹛we compare cpaspm with the concurrent conformant planners dlvk  eiter et al.  1  and c-plan  castellini et al.  1 . c-plan is a sat-based conformantplanner where a planning problem is translated into a satisfiability problem and satisfying assignments of variables correspond to solutions of the original planning problem. dlvk is somewhat similar to cpaspm as both run on top of an answer set solver. however  unlike cpaspm dlvk does not use approximations. its algorithm has two phases: looking for candidate plans first and then checking if they are conformant.
﹛we prepared a test suite of problems which involves both concurrency and complex initial situations. some of this problems are simple modifications to conformant benchmarks in the literature. the test suite consists of the problems conformant turkey and lost cleaner. conformant turkey is a modification of the classic yale shooting problem. in our problem  there are n guns  but only one of which is loaded. guns can be shot concurrently  with the exception of gun #1 and #1. the objective is to kill the turkey. lost cleaner is a modification of the ring  cimatti et al.  1 . the agent is in one of n rooms arranged in a ring fashion. each room has m objects that must be cleaned by the agent. the agent can move to the next room in a clockwise or counter-clockwise fashion and at a time it can clean objects in a room concurrently. initially  the agent does not know its initial location nor the current status  cleaned or dirty  of the objects.
﹛experiments were conducted in a 1ghz pentium 1 machine running linux  and each planner was given 1 minutes to complete each instance of each problem. the results are shown in tables 1 and 1. in each table  times are in seconds  and pl is the number of steps of a shortest solution of the corresponding problem.
﹛as we can see from table 1  cpaspm outperforms both dlvk and c-plan in the conformant turkey domain. solutions for these domain all involve 1 steps  with one step consisting of firing multiple guns concurrently. in this domain  exploiting concurrency is key to obtaining a short plan.
in the lost cleaner domain  shown in table 1  only
cpaspm is able to solve all probleminstances within the time limit. in this domain  the length of a solution ranges from 1 to 1 steps and it is determined by the number of rooms in
no. roomsno. obj.pl﹛﹛k dlvc-plancpaspm11.1.1.111-111.1-111.1.1.111-111.1-111.1-111--111--111--111--111--111--111--111--1table 1: lost cleaner domain
the ring. as the number of rooms in the problem increases  the number of possible initial situations increases. one of the advantages of using approximations is that it is possible to reason about the domain without having to consider all possible worlds. as the complexity of the problem increases  only cpaspm is able to scale. in this problem c-plan behaved erratically  failing some simple problem instances and then solving more complicated ones. in general  the use of approximations allows cpaspm to exploit concurrent actions when searching for a solution  and to scale better than the other concurrent planners as the number of possible initial states and the length of the solution increases.
1 conclusion and future work
in this paper  we extend the logic programming based approach to conformant planning in  son et al.  1a; tu et al.  1  to develop a conformant planner  called cpaspm  which can solve planning problems with a more complex description of the initial states. the planner inherits several key properties of the planner cpasp in  son et al.  1a . in particular  it can deal with static causal laws and is capable of finding minimal and concurrent plans. it is sound and sometimes complete wrt the full semantics of al action theories. our experimental results show that the planner is comparable with some other concurrent conformant planners.
﹛as future work  one of our goals is to strengthen the condition for the completeness of the planner. also  we would like to develop a method for including domain knowledge so that we can obtain better performance from the planner.
﹛acknowledgment: we will like to thank dr. michael gelfond for his collaboration  help  and useful discussions on the topic.
