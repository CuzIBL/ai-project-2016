 
　　we introduce a graphical representation of quantifier-free predicate calculus formulas and a new rule of inference which employs this representation. the new rule is an amalgamation of resolution and 
prawitz analysis which we call path resolution. path resolution allows prawitz analysis of an arbitrary subgraph of the graph representing a formula. if such a subgraph is not large enough to demonstrate a contradiction  a path resolvent of the subgraph may be generated with respect to the entire graph. this generalizes the notions of large inference present iu hyperresolution  clash-resolution  nc-resolution  and plresolution. 
　　two forms of path resolution are described for which deletion of the links resolved upon preserves the spanning property. 
1. introduction 
　　since about 1 most of the effort in automated deduction has been concerned with refutation systems. the initial emphasis was on prawitz analysis  1 1 1   in which the unsatisfiability of a sentence is deduced without inferring new formulas. by 1  with the advent of resolution and  later  paramod illation  the emphasis shifted almost completely toward the use of inference  1 1 1 . most of the work done within both schools of thought employed conjunctive or disjunctive normal form. more recently there have been adaptations of both techniques toward the use of unnormalized or less-normalized formulas  1  1 1 1ft . 
　　we introduce a new rule of inference  path resolution  which operates on a graphical representation of quantifier-free predicate calculus formulas. the new rule is an amalgamation of resolution and prawitz analysis. our goal in the design of path resolution is to retain some of the advantages of both prawitz analysis and resolution methods  and yet to avoid to some extent their disadvantages. 
　　the main advantage of prawitz analysis is that  except for variants of original formulas  no new formulas are inferred which rapidly expand the search space. however  except for adding variants  prawitz analysis is an all or nothing timebound search for a contradiction. in contrast  resolution and other inference based methods store the progress made at each inference by retaining the inferred formula. eventually localized evidence of a contradiction is produced  usually the empty clause . the required multiple variants of formulas are automatically  and often excessively  generated. but each new formula introduced interacts with others  expanding the search rapidly in both time and space.. 
　　one of the disadvantages of resolution is its reliance on conjunctive normal form. we avoid conjunctive and disjunctive normal form and the duplication of literals that their use and 	erik rosenthal 
university of new haven 
department of mathematics west haven  ct 1 
may necessitate  since path resolution operates on formulas in negation normal form. we have found that the analysis is greatly simplified by a representation of nnf formulas which we call semantic graphs.' 
　　path resolution allows prawitz analysis of an arbitrary subgraph of the existing graphical representation of formulas. if such a subgraph is not large enough to demonstrate a contradiction  a path resolvent of the subgraph may be generated with respect to the entire graph. path resolution operations include  properly  all resolution-based inferences of which the authors are aware  such as hyper-resolution  clash-resolution  nc-resolution  and ul-resolut ion. 
　　it will be obvious to the informed reader that the work reported here  while new  has been synthesized from a number of important ideas developed by others. the most influential of these are robinson's clash resolution   kowalski s connection-graph procedure   the work of andrews  and bibel  1  on paths  matrices  and the spanning property  and the non-clausal systems of stickel  and of waldinger and manna  1ft . 
　　in the next section we introduce the notation and terminology required for expressing formulas and their semantics in terms of semantic graphs and paths. we further develop this formalism in section 1; section 1 introduces the rule of inference  path resolution. section 1 contains a sample refutation  and section ft introduces two link deletion strategies. we omit many proofs for lack of space; they are available in . 
1. semantic graphs and paths 
　　a semantic graph is a means of representing a logical formula  and paths determine the semantics of the graph. we assume that the reader is familiar with the definitions of atom  literal  formula  resolution  and unification. we will consider only quantifier-free formulas in which all negations are at the atomic level. 
a semantic graph is empty  a single node  or a triple 
 n c d  of nodes  c-arcs  and d-arcs  respectively  where a node is a literal occurrence  a c-arc is a conjunction of two non-empty semantic graphs  and d-arc is a disjunction of two non-empty semantic graphs. please note that a node is a literal occurrence  so that if a literal occurs twice in a formula  we will label both nodes with that literal. each semantic graph used in the construction of a semantic graph will be called an explicit subgraph  and we shall insist t hat each proper explicit subgraph be contained in exactly one arc. we will use the notation  g h c for the c-arc from g to h and similarly use   g  h  d for a d-arc. the subscript may be omitted if there is no possibility of confusion  and we will use the term graph only for semantic graphs. 
　　we will consider an empty graph to be an empty disjunction  which is a contradiction a construction of a graph may be thought of as a sequence of c-arcs and d-arcs. there will always be exactly one arc  x y  with the property that every 

　　note that horizontal arrows are c-arcs  and vertical arrows are d-arcs. there are two d-arcs: 
 a -  b c  and   a  d -  c ; and there are three c-arcs:  a b    d c   and the entire graph. some of the explicit subgraphs are each of the nodes  a -  b  and the right-hand part of the graph. 
　　the formulas we are considering are in negation normal form  nnf  in that all negations are at the atomic level  and the only connectives used are and and or. 
　　if a and b are nodes in a graph  and if a =  x' y'  is an arc  c- or d-  with a in x and b in  '  we will say that a is the arc connecting a and b. if a is a c-arc  we will say that a and b are c-connected  and if a is a d-arc  we will say that a and b are d-connected. 
　　lemma 1. let g he a semantic graph  and let a and b be nodes in g. then there is a unique arc connecting a and b. 
　　one of the keys to our analysis is the notion of path. let g be a semantic graph. a partial c-path through g is a set c of nodes such that any two are connected by a c-arc. we allow the empty set or a singleton set to be a partial c-path. a cpath is a partial c-path which is not properly contained in any 
partial c-path. notice that any partial c-path is extendible to a c-path  and hence partial c-paths are always subpaths of cpaths. we similarly define d-path using d-arcs instead of earcs. the next lemma is an immediate consequence of lemma 
1. 
　　lemma 1. if a and b are nodes in a graph g  then there is a c-path or a d-path  but not both  containing a and b. 
　　using paths  we can define the conjunctive normal form of a graph as the conjunction of the d-paths  and the disjunctive normal form as the disjunction of the c-paths. if a formula is multiplied out using the distributive laws  then the graph changes and so may the normalized forms. 
　　paths can be defined in a somewhat more structural manner. define a structural c-path  scp  c in a graph g as follows: if g consists of a single node a  then c is the 1et {a}; if the final arc of g is a d-arc  then an scp in g is an scp in one of the final subgraphs; and if the final arc is  x y'  c  then c is the union of an scp in x and an scp in y. lemma 1 states that the two formulations of path are equivalent  and as a result we will abandon the terminology structural c-path after the lemma. 
　　lemma 1. let g be a semantic graph and let c be a set of nodes in g. then c is a c-path iff c is an scp. 
　　there is an obvious similar statement about d-paths; we leave the proofs to the reader. 
　　the proofs of lemmas 1 and 1 and of many lemmas and theorems that follow often use induction on the number of arcs in the graph. the base case is always trivial since the graph will then consist of a single node or arc. since each explicit subgraph will always have fewer arcs than the entire graph  the inductive hypothesis amounts to assuming that the result holds for all explicit subgraphs. as a result  in proofs we do include in this paper  we will ignore the base case and begin by assuming that the result holds for all explicit subgraphs. 
　　we will use the notation c = xy when two pat lis in subgraphs are put together to form a path in a graph as in the lemma. 
　　lemma 1. let g be a semantic graph. then an interpretation 1 satisfies  falsifies  g iff i satisfies  falsifies  every literal on some c-path  d-path  through g. 
　　we will frequently find it useful to consider subgraphs which are not explicit; that is  given any set of nodes  we would like to define that part of the graph which consists of exactly that set of nodes. the previous example is shown below on the left. the subgraph relative to the set {a  c  d} is the graph on the right. 

　　if a is the node set of a graph g  and if nr ' is contained in n  we define gn   the subgraph of g relative to a ' as follows: if a ' = n'  then gn   = g . if the final arc of g is  x' y    and if the nodes in n ' all appear in a'or in y  then gn   = xn   or gn =yn   respectively. otherwise  gn =  xn     yn      where this arc is of the same type as  a'  y . the following lemma says in essence that the subgraphs we have defined are the objects we want. 
　　lemma 1. let g be a semantic graph with node set a'  and let a ' be a subset of a. then 
i  every node in n ' is a node in some arc in gn . 
ii  if p ' is a path through gn   then p ' is the restriction to a ' of a path p  of the same type  through g; in particular  if p ' is a partial path in g consisting of nodes from a '   then p ' is a partial path in gn . 
1. blocks 
　　consider the graph  a -+ b  - c. the non-explicit subgraph b -  c  feels  much like an explicit one  and certainly the graph a -   b -  c  is essentially identical to the original graph. indeed  the graph a -  c is an explicit subgraph of another essentially identical graph:  a - c  -- b. subgraphs with this property can be characterized with the notion of block. a c-block c is a subgraph of a semantic graph with the property that any c-path which includes at least one node from c must pass through c; that is  the subset of the c-path consisting of the nodes which are in c is a c-path through c. a d-block is similarly defined with d-paths  and a full block is a subgraph which is both a c-block and a d-block. from lemma 1 we know that the c-paths through a graph determine the semantics of the graph  and that the d-paths also determine the semantics. this might lead one to believe that c-blocks and d-blocks are full blocks. this is not the case  as the following simple example illustrates: 

the subgraph relative to {a b} is obviously a c-block  but it is not a d-block since {ac} is a d-path which meets the subgraph but does not pass through it. 
　　we define a strong c-block in a semantic graph g to be a subgraph c of g with the property that every c-path through g contains a c-path through c. a strong d-block is similarly 
　　
n. murray and e. rosenthal 1 

　　
　　proof. since p does not pass through h  it must fail to pass through c  for some i. hence  p must entirely miss g    and so p must meet and hence pass through aux c   g .   example 1: 

let s be the subgraph relative to {a  b  g  a  b  c}. s may be partitioned into the following four c-blocks: {c  b}  {a}  {b}  and {c  a}. however these are not maximal; in particular  the last two c-blocks may be combined to form {c  b}  {a}  and {b  c  a}. but we still do not have a proper cfamily. the c-block {a} is not maximal because the node b can be added and {a  b} is still a c-block; {c  b}  {a  b}  and {s  c  a} do form a proper c-family. 
　　under the conditions of theorem 1  it is immediate that the disjunction of the auxiliary subgraphs is satisfied by i.  in the above example  any c-path that misses the first c-block must hit subgraph {q  p}. a c-path missing the second cblock hits {p}  and one missing the third c-block hits {r}.  we denote this disjunction by p{h g . we shall soon see that there are redundancies built into p h g  which can be eliminated. these redundancies arise from the fact that the auxiliary subgraphs need not be disjoint. theorem 1 indicates how to remove them. first  define a subgraph of a graph g to be a d-full block if it is a full block and a strong d-block. note that 
for // to be a d-full block in g  h must be a disjunction of one 
or more level 1 subgraphs of g. 
　　theorem 1. let {c1  ...  ck} be a proper c-family in a subgraph h of a semantic graph g  and let k be the intersection of aux g   g   and aux  cj  g  . then k is empty or a dfull block in aux  c  g . 
　　the significance of theorem 1 is that the redundancies which appear in p h g  are its level 1 subgraphs which appear more than once. in example 1  the auxiliary subgraphs of the intersecting c-blocks are the subgraphs relative to {p  q} and {p}. their intersection is of course the node p which forms a level 1 subgraph in both auxiliary subgraphs and in their dis-
junction. however  we can form the disjunction of auxiliary subgraphs to build p h g  and leave out the redundancies; i.e.  use the intersections of the auxiliary subgraphs only once. we denote the resulting graph by q h g . we prove that q h g  is unique by defining an object ws h g   the weak split graph of h in g  and showing that ws h g  - q h g .  we intro-
duce strong split graph in section 1.  we define ws h g  as follows: 


1. path resolution. 
　　the discussion of paths and graphs gives a  we think useful  representation of logical formulas as graphs. the primary  concern of this paper is path resolution  a rule of inference. to this end  we define a chain in a graph to be a set of pairs of c-connected nodes such that each pair can simultaneously be made complementary by an appropriate substitution. a link is an element of a chain  and a chain is full if it is not properly contained in any other chain. a graph g is spanned by the chain k if every c-path through g contains a link from k. notice that if a graph is spanned by a chain  the graph must be a contradiction since no c-path which contains complementary nodes can be satisfied. if k is a chain  we use the notation gk for the subgraph of 1' relative to the set of nodes which appear in k. if gk is spanned by k  k is said to be a resolution chain  and gk is said to be a resolution subgraph. example 1: 

the curves between a and a and between b and b represent links which form a chain. the subgraph relative to the chain 

the c-paths arc {b a a  and {b a b}. each obviously contains a link  so we have a resolution chain and a resolution subgraph. 
　　a rule of inference is of course a procedure which produces a formula from a given formula  and such a procedure is sound if any interpretation which satisfies the original formula also satisfies the inferred formula. resolution is such a rule; in essence  it applies to formulas in cnf and operates on chains consisting of a single link. we will define a generalization of resolution which we call path resolution. it applies to any semantic graph and operates on arbitrary spanning chains. 
　　let k be a resolution chain in a semantic graph g  and let r - gk . if i is any interpretation which satisfies g  it satisfies a c-path through g. since r cannot be satisfied  c cannot pass through r. hence  by theorem 1  / must satisfy ws r g . we call ws r g  the path resolvent of r in g  and we have 
theorem 1. path resolution is a sound rule of inference. 
　　
n. murray and e. rosenthal 1 
it is now easy to see that the link {c f a    c f a  } is a resolution chain that spans not only its subgraph but the entire graph. therefore this link produces the empty graph upon activation. the careful reader may have noticed that this last link is inherited from {c x   c f a  } which could have been added to the resolution chain used in the second inference. the resulting chain would have produced a contradiction shortening our proof to two steps. a binary resolution refutation for these formulas given in  uses eight steps. 
　　we do not claim that the search space for determining an appropriate resolution chain is small. however  the existence of a 1-step derivation for this example is certainly somewhat favorable. moreover  we note that both path resolution steps admit link deletion under certain extensions of theorems 1 and 1. space limitations preclude discussion of those extensions here. a derivation of a logic program by nc-resolution is compared to a derivation of the same program by path resolution in . 
　　stickel  has pointed out that in a non-clausal connection graph system it may be wise to avoid inferences on nonatomic complementary subformulas. two reasons cited are that complementary subformulas may be difficult to detect  and that such inferences may be duplicated by resolving on single literals only. path resolution may help to solve both of these problems. we only link atoms and their complements  not non-atomic structures. the presence of complementary subformulas is detected by a resolution chain. the subformula relative to a resolution chain is frequently  but not always!  a conjunction of complementary subformulas comprised of the literals appearing in the chain  even though these literals may be scattered throughout the entire sentence. 
1. link deletion 
　　path resolution is so general that it admits as special cases all resolution-based inference rules  e.g. hyper-resolution  clash resolution ul-resolution  nc-resolution  of which the authors are aware. in fact  if enough copies of formulas from an unsatisfiable set are represented  then a resolution chain will exist whose path resolvent is the empty d-path. we may therefore view semantic graphs and path resolution as a unifying framework for all resolution-based inference and prawits analysis. 
　　this generality is elegant from a theoretical point of view  but it also admits a proof-search space larger even than that of unrestricted binary resolution. it is natural to ask whether restrictive strategies exist that would take advantage of path resolution's generality  and not just mimic known strategies applicable to  say  clausal logic. one natural restriction is to large chains; that is to avoid resolution chains that are proper sub-chains of currently known resolution chains. our intuition is that such a strategy is favorable for refutations  and this is an area of ongoing investigation. 
　　another way to reduce the search space is to delete links after activation. in  and   for example  bibel dealt with these issues within binary resolution. we develop two link deletion strategies for path resolution below. 
1. link deletion using full blocks 
　　it is more or less the case that a necessary and sufficient condition for a link deletion strategy to be acceptable is that the spanning property be preserved. that is  if a graph is spanned by a set of links  and if a rule of inference which deletes links is applied  then the resulting graph should still be spanned. theorems 1 and 1 introduce classes of resolution chains for which path resolution has this property. theorem 1 gives a condition when certain links can be deleted. it should 

　　
1. andrews  p.b. refutations by mating*. ieee transactions on computers 1  aug. 1   1 
1 	andrews  p.b. theorem proving via general matings jacm 
1  april 1   1. 
1. bibel  w. on matrices with connections. jacm 1  oct 1 . 1. 
1 bibel  w. a strong completeness result for the connection graph proof procedure. technical report atp-1-iv-1. 
1. chang  c.l. and lee  r.c.t. symbolic logic and mechanical theorem proving  academic press  new york  1. 
1. chang  c.l.  and slagle  jr. using rewriting rules for connection graphs to prove theorems. artificial intelligence 1  aug 1   1. 
1. chinlund  t.j.  davis  m.  hineman. p.g.  and mcllroy  m.d. theorem proving by matching bell laboratory  1. 
1. clark  k. the synthesis and verification of logic programs. third conference  on automated deduction  august 1 
1. davis  m. and putnam  h. a computing procedure for quantification theory. jacm. vol. 1  1   1. 
1. davis  m. eliminating the irrelevant from mechanical proofs. proe. symp. of applied mathematics 1  1   1. 
1. de champeaux  d. sub-problem finder and instance checker two cooperating processors for theorem provers proc. 1th workshop on automated deduction  austin. texas  feb 1  1. 
1. gilmore  pc  a proof method for quantification theory. ibm journal of research and development  vol. 1  1 . 1 
1. henschen  l.g. theorem proving by covering expressions 
j.acm  1  july 1 . 1 
1. summary 
　　we have introduced a graphical representation of formulas and a new rule of inference that employs this representation. the inference rule is path resolution  which is a generalisation of most previous forms of resolution. we have demon-
strated the rule's soundness. completeness is immediate in the absence of the usual connection graph link deletion stra-
tegy; resolving exclusively on single-link chains amounts to atomic nc-resolution on unf formulas. we have introduced two classes of chains for which the activation and subsequent 
deletion of links is shown to preserve the spanning property. in light of bibel's results  1  such link deletion strategies may reasonably be conjectured complete. 1 
1. 1. robinson  j.a.  theoretical approaches to non-numerical problem solving   springer-verlag  new york  inc.  1  1 stickel  m.l. a nonclausal connection-graph resolution theorem-proving program. proc. aaai-1 nat conf on artificial intelligence  pittsburgh  pennsylvania. aug 1  1. 
waldinger  r. and manna  z. a deductive approach to program synthesis. acm toplas 1  1   1 
wos  l.  carson  d. and robinson  g. efficiency and completeness of the set of support strategy in theorem proving j.acm 1  1   1. 1. kowalski  r. a proof procedure using connection graphs j.acm 1  oct. 1   1. 
1. mccharen  j.  overbeek  r. and wos  l. problems and experiments for and with automated theorem-proving programs. ieee transactions on computers  c-1  aug. 1 . 1 
1. murray  n.v. 	completely non-clausal theorem proving 
artificial intelligence 1  jan. 1   1. 
1. murray  n.v. an experimental theorem prover using fast unification and vertical path graphs. fourth national conf. of canadian society of computational studies of intelligence  u. of saskatchewan  may 1. 
1. murray  n.v. and rosenthal  e. semantic graphs. technical report 1  department of computer science  sunt at albany  nov. 1. 
1. nilsson  n.j. a production system for automatic deduction technical note 1  sri international  1. 
1. prawitz  d. an improved proof procedure theoria 1  i1 . 1. 
1. robinson  g.a. and wos  l. paramodulation and theorem proving in first order theories with equality machine intelligence 1  1  edinburgh university press. 
1 robinson  j.a. a machine oriented logic based on the resolution principle. j.acm 1  1   1. 
1. robinson  j.a. automatic deduction with hyper-resolution international journal of computer mathematics  1  1   1. 
　　
n. murray and e. rosenthal 1 
