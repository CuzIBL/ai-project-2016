 
     a question answering system is described which uses a net structure for storage of information. the net structure consists of nodes and labelled edges  which represent relations between the nodes. the labels are also nodes  and therefore definitions of relations may be stored in the net. it is demonstrated that the generality and complexity of this memory structure allows a surprisingly powerful question answering system to be constructed using comparitively simple executive routines. output from the question answerer  which is currently running on an interactive  time sharing system  is included  showing its range of applicability including question answering  inductive and deductive inference  simple theorem proving and problem solving. 
     key words and phrases: relational question answering  question answering  memory net  memory structure  data structure  semantic memory  semantic information retrieval  deductive inference  inductive inference  problem solving  concept formation  relational logic  learning/ theorem proving  fact retrieval. 
	1. 	introduction 
     our main research interest has been in the organization of data structures for question answering systems  systems that retrieve facts and have deductive and inductive capabilities to derive new information from the facts explicitly given them. our two main aims have been to maintain as much generality as possible so that no additional programming be needed regardless of the domain of knowledge for which the system is used and to put as much question answering power as possible into the memory structure itself rather than in the executive 
routines. this latter aim supports the first in that it would allow special instructions for particular domains to be entered into the memory in the same way as any other information. samenlaq i i   the system described in this paper represents progress toward reaching these aims. further progress is being made in a later system  see section 1 . 
     semanlaq ii is based upon binary relations. this was a natural starting point because of the generality of binary relations  and the fact that they provide a reasonable test environment for our ideas. 	since our major interest is the memory structure  we have not used natural language input  thus avoiding the attendant problems. 	instead  all statements input to the system are in the form x r y. 	we hope it will become evident that even with this restriction to binary relations and with basically simple executive routines the system attains a surprising amount of power and range of applicability. 	this derives from the following characteristics of the system: 
1. 	the memory is a net structure  with the relations serving as labels on directed edges. each statement x r y is also stored in the converse form y r cnv  x so that all the information about a name is reachable from the node in the net which represents it. 
1 . the relations   though used as labels on the edges  are actually also nodes themselves  so information about them may be stored in the memory structure. the major use of this capability is to define a relation in terms of other relations. 
1. the system has the ability to use the information stored about a relation when searching memory. such information may be entered at any time and in the same manner as any other type of data or it may be constructed and entered by the system itself. in our system  any relation may be used as an undefined term  may be defined in terms of other relations  or may be defined recursively. any single relation may be used in any or all of these ways. complex relations may be built out of simple relations using the relative product operation and node restrictions to restrict the domains or ranges of the simple relations. thus  quite complicated relations may be defined. 
     the following sections give more detailed information about and examples of the samenlaqii 
-1-     *the research reported herein was partially supported by a grant from the national science foundation  gp-1 . 	use of the university of wisconsin computing center was made possible through support  in part  from the national science foundation  other united states government agencies and the wisconsin alumni research foundation  warf  through the university of wisconsin research committee. 
system. the final section describes a later system which is being developed to satisfy more completely the goals discussed above. 
	1. 	implementation and operation 
     samenlaq ii is a revision of samenlaq   a semantic association memory net that learns and answers questions 1. both programs are written in snobol1 as interactive question answering systems  but samenlaq i i   unlike samenlaq which was run in batch mode with simulated interaction on a cdc 1  is fully interactive and is currently running under the university of wisconsin b1 time sharing system. samenlaq ii differs from samenlaq in that it provides aids to the user  who inputs data directly via a teletype  allows for storage of input files and memories in disk files  and  most importantly  allows for recursive definitions of relations and allows the user to control in real time how much effort the system should spend searching its memory to discover more information for use in answering a question. 
     figures 1a and 1b depict the overall flow of control in samenlaq i i . figure 1 demonstrates its operation. at the top level of operation  three types of input are allowable: statements  questions and requests to the system executive.  bl 1a * representative examples are given in fig. 1 by lines  a    f   and  b  respectively. notice that user inputs are indicated by terminal left arrows whereas unterminated lines indicate samenlaq ii responses. simple statements such as line  c  result in the construction of a net substructure containing the nodes  boston    east.of    east.of cnv    and  worcester  in which  boston  and  worcester  are tied together via the  east.of  node and  worcester  and  boston  are tied together via the  east. of cnv   node. this structure is considered in more detail in the next section. more complicated statements such as line  a  are interpreted by the system as a series of simple statements. 
     the system provides the user with various types of feedback  some of which may be turned off by appropriate requests to the executive.  b1a  lines prior to  f  demonstrate input in the full and limited response modes. line  b  requests that the full response mode be turned off. requests are identified by a terminating     . other request options are indicated in fig. 1. b1a  
     several relation words are built into the system.  member  allows a particular net search to be limited to a subclass of all the relations 
      bracketed references refer to the flow charts in fig. 1. e.g.   bl 1a   refers to box 1 in fig. 1a. 
represented in the net. 	subclass definition may take place at any point during a conversation and is determined solely by the user. 	line  d  represents the introduction of the subclass  compass.rels . 	such classes are useful for handling questions involving paths in the net which connect prescribed nodes. 
      implby  allows a given relation to be defined in terms of other relations. it is one of the most important features of samenlaq i i . the system has the ability to utilize  implby  information about a relation during the question answering process by using it as a generalized substitution rule. 
     line  e  demonstrates the use of implby to introduce north.of cnv  as an acceptable replacement for south.of. 	the line also results in south.of cnv  implby north.of being incorporated in memory. 
     to enhance readibility  the system allows the user to introduce his own interrogatives by means of the form  x is question . 
     questions are terminated by  * . there are four possible types - one verification type  x r y *  and three fill in the blank types  x r   *      r y *  and  x   y * . b1a . line  f  illustrates the x r   * type  line   j   the x   y* type and line  k  the   r y* type. notice that non-simple relations can be handled by the system. there are three types of relations used in samenlaq ii  simple  compound and complex. a simple relation is of the form r or r cnv  where the character string r is not meaningfully decomposable and y r  cnv  x if and only if x r y. a compound relation is a simple relation or a relative product of simple relations and is of the form r1/r1/r1   or sometimes  as a stylistic variant  r1/r1/r1/ . x r1/r1/r1 y holds if and only if there exists some z and w such that x rl z  z r1 w and w r1 y. a complex relation is a compound relation or a compound relation with node restrictions . a node restriction is of the form  r-1  where r is a simple relation and 1 is a string of names  each one followed by a comma. node restrictions are used to restrict the domain or range of a simple relation which forms part of the complex relation. for example   r-1 r1 is the relation rl with a restricted domain  and rl r-jzf  is rl with a restricted range. domain of r1 domain of r1 
x r rl- l  r1- 1 r1/ r1-j1  r1- 1 r1/ r1- 1  y 
　　　　　　　　　range of r1 	range of r1 a name  x  satisfies the node restriction  r-1  if for all y in the string 1 xry is explicitly stored in memory. 	thus the relational statement above holds if x satisfies  r1-j1  and  r1   y satisfies  r1-j1  and there exists some z such 

-1-

a albany buffalo new.york poughkeepsie in new.york.state-
statement - albany  buffalo new.york poughkeepsie in new.york.state 
o k   . . . y e s w a i t . . . 
ready 
boston worcester in massachusetts-
statement - boston worcester in massachusetts 
o k   . . . y e s w a i t . . . 
ready 
b flag echo o f f 1 -
	request - flag echo 	off 
     ready c 	boston east.of worcester-
ready 
worcester east.of albanyready 
albany east.of buffaloready 
albany north.of poughkeepsie- 
ready 
poughkeepsie north.of new.yorkready 
in member location.rels- 
     ready d 	north. of  east. of member compass .rels- 
     ready e 	south.of implby north.of cnv - ready 
west.of implby east.of cnv - ready 
what has.what.relationship.to is question-
     ready f 	boston east.of what*- 
i will use the following relations: east. of/ 
i figure boston east.of/ worcester 
if this is sufficient  respond - ok 
otherwise type an integer for futher search 
or - list troubles or an input statement or - examples 
g 	1 -
i will use the following relations: 
no further relations found. 
i figure boston east.of/ worcester 
if this is sufficient  respond - ok 
otherwise type an integer for futher search 
     or - list troubles or an input statement or - examples h 	east.of implby east.of/east.of- 
statement - east.of implby east.of/east.of o k   . . . yes-
wait 
enter any of the above options. 
1- 
i will use the following relations: east.of/east.of/ 
and east.of/east.of/east.of/ 
i figure boston east.of/worcester and albany and buffalo if this is sufficient  respond - ok 
	fig. 1 	a conversation with samenlaq i i . 
-1-

otherwise type an integer for futher search 
or - list troubles or an input statement or - examples ok- 
w a i t . . . 
i 	answer - worcester 	 answer to question posed at line   f   .   and 	albany 
	and 	buffalo 
     ready j 	buffalo has. what. relationship .to new.york*1- 
enter comma list of relation classes to be used or -   any   
any- 
buffalo in new.york.state in cnv  new.york 
enter - ok - or an integer indicating number of additional path links. 
1- 
wait... 
	buffalo 	east.of cnv  albany 	north.of poughkeepsie 	north.of 
new.york 
enter - ok - or an integer indicating number of additional path links. 
ok- ready 
flag ask off d - 
ready 
flag trace off -
     ready k 	what  in-new.york.state   southwest.of boston*- 
i figure boston southwest.of cnv / in-new.york.state   unknown what now  
list troubles- 
at the following names could not apply the listed relations. boston - southwest.of cnv  what now  
southwest.of implby south.of/west.of west.of/south.of- 
statement - southwest.of implby south.of/west.of west.of/south.of o k   . . . yeswait... 
what now  
1- 
i figure boston southwest.of cnv / in-new.york.state   poughkeepsie what now  
south.of implby south.of/south.of- 
statement - south.of implby south.of/south.of 
o k   . . . yesw a i t . . . 
what now  
1- 
 i figure boston southwest.of cnv / in-new.york.state   poughkeepsie and new.york what now  ok- 
answer - poughkeepsie 	 answer to question posed at line  k .  and 	new.york 
ready 
	fig. 1  cont.  	a conversation with samenlaq ii 
-1-





that z satisfies  r1  and  r1    xr1z  and zr1y. 
     a complex relation may also consist solely of node restrictions  in which case it is an identity relation on a restricted domain  viz. the set of all names which satisfy all the node restrictions  and is the statement of a conjunctive concept. the executive routines have built into them the ability to deal with converse relations and with compound and complex relations. when a relation serves to label an edge of the net  i . e . in its appearance in the value of a name  it is treated as a simple relation. compound and complex relations are used when defining other relations and may themselves have definitions. lines beginning at  k  illustrate these ideas. 
     line  f  represents one of the four question types. to answer it  samenlaq ii attempts to apply  east.of  to  boston . since the system has the statement  boston east.of worcester  represented explicitely in its memory  east.of can be successfully applied yielding  worcester . since the system does not know explicitly that  boston east.of albany  or that east.of is a transitive relation  it is incapable of finding further nodes satisfying  boston east.of x . this is illustrated in line   g   where   1   indicates that samenlaq ii is to execute one substitution cycle - i . e . substitute for each relation it is currently attempting to apply to a node  all acceptable replacements contained on the relations implby list. bl 1b   the implby list for a relation r is a list of all relations  x  such that r implby x.  in line   h   the system is informed that east.of is transitive. two additional implby substitution cycles are then requested by typing in   1   . 
     figure 1 illustrates an application of samenlaq to rudimentary conjunctive concept formation. the statements presented in fig. 1a supply the system with a small data base concerning the relations of various objects in a room. note  in line  a  two of these are grouped into the class  splrel . in fig. 1b samenlaq is asked to answer a question concerning a relation it has never seen before. failing to apply this relation  it is given a 
     series of examples whose relationship to one another is arbitrarily designated concept1. restricting its search to the relation class splrel  the system obtains all paths of length 1 or less connecting the example pairs. the properties common to each class of nodes at the same level along the path are also calculated. for example  construction-electrical    
 construction-wood   and  has.part-elevated. horizontal. supporting surface   are node properties common to the first  second  and third levels respectively. the path connecting the example pairs is  on.top/element . this relation is then placed upon the implby list for concept1. finally concept1 is used to define the original concept is.an.electrical. communication. device.that.is1on.top.of. a.piece.of.wooden. the system then has sufficient information to answer the question and 
responds with the correct answer. 
	1. 	samenlaq ii description 
     statements entered into the memory are of the form  name1 relation name1  where name1 and name1 are non-decomposable names and relation is a simple relation. information contained in such statements is stored on paren lists associated with name  and name1. thus  the above statement produces the following paren list for  name1 :   relation-/1   where the contents of the slash name   / l   is the comma list  name1  . in the example below  the paren pair  west.of-/1  on the paren list for worcester indicates that worcester is west of each of the elements found on the comma list named / 1 . note that the value of a slash name is a comma list  similarly the value of a name is its paren list. 
boston 	=  east.of-/1  
/l 	= worcester albany  buffalo  
worcester =  east.of-/1  west.of-/1  
/1 	= albany  buffalo  
/1 	= boston 
east. of =  implby-/1  member-/1  /1 = east.of/east.of/  /1 = compass.rels  . 
     although the paren list looks like a conventional attribute - value list it differs in that both the relations  attributes  and the names on the comma lists  values  are themselves names of paren lists and these various paren lists mutually occur as elements of each other. the memory may be thought of as a directed graph whose nodes are the names  boston  worcester  etc.  and whose edges are labeled by the relations. since  however  the relations are also names and thus should be thought of as nodes in the graph  we should  perhaps  think of the edges as being labeled by passing through a node  and all edges bearing the same label as passing through the same node. 
     the statement name1 relation name1 is not only stored as such on namel's paren list  but its converse  name1 relation cnv  name1 is stored on name1's paren list. 	this is done so that the information contained in the statement is recoverable from either name. 	although this involves duplicate storage of information  

- 1 1 -

chair shelf table has.part elevated. horizontal. supporting. surface- 
ready 
dresser bench has.part elevated.horizontal.supporting.surfaceready 
shelf has.part bracket.supportsready 
chair table dresser bench has.part legsready 
dresser has.part drawersready 
bench chair shelf table dresser element furnitureready 
tvl  ttyl  tell  tel1 pen1  signal. u g h t l   radiol used.for communication-
ready 
tvl  ttyl  tel1   tell tel1  signal.ughtl  radiol construction electricalready 
pen1 construction mechanicalready 
chair1 chair1 element chairready 
shelf1 shelf1 shelf1 element shelfready 
table1 table1 element table-
ready 
dresser1 element dresserready 
chair1 chair1 shelf1 construction metalready 
bench 1  shelf 1  table 1   table1   dresser1 construction w o o d -
ready 
radiol  pen1 on.top dresser1 - ready 
signal.ught1 picture1 on.top shelf1- ready 
tvl on.top table1- ready 
ttyl on.top bench1 - ready 
bench1 element benchready 
picture1 tel1 attached.to wall1 - ready 
tell on.top table1- ready 
what is question-
     ready a 	on.top element member splrel- 
ready 
	fig. 1a 	a conjunctive concept formation example: 	data base input. 
-1-
a 	what is.an.electrical.communication.device.that.is.on.top.of.a.piece. 
of wooden furniture*- i figure furniture 
is.an.electrical. communication. device. that.is.on.top.of.a. piece.of. woo den cnv  / unknown what now  
examples-
relation whose definition is to be found.. .concept1 - 
relation class concept1 is a member of...splrel- depth of alternate definitions. . .1- 
	type pairs 	x y 	such that x concept1 y. 
when finished  type - end. 
tel1 tableradio 1 dressersignal. light 1 shelfend- 
o k   . . . yesthank you. 
w a i t . . . 
from the examples you have given me i would guess that 
concept1/ is the same as 
 construction-electrical    used.for-communication   on.top/ constructio n-wood  element/ has.p 	art-elevated.horizontal.supporting.surface    what now  
is.an.electrical. communication. device. that.is.on. top.of. a. piece.of 
.wooden implby conceptl/element- statement -
is. an. electrical. communication. device. that. is. o n . top. of. a. piece. of. woo den implby 	conceptl/element o k   . . . yesw a i t . . . 
what now  
1- 
i figure furniture 
is. an. electrical. communication. device.that.is. on. top.of. a. piece. of. woo den cnv / tty1 and signal. ught1 and tel1 and tv1 and radiol what now  
o k -
w a i t . . . 
	answer - tty1 	 answer to question posed at line   a   .   
	and 	signal. ught1 
	and 	tel1 
	and 	tv1 
	and 	radiol 
ready 
	fig. 1b 	a conjunctive concept formation example: 	interrogation. 
-1-

changing the statement to its converse form for storage under the second argument allows all statements about a name to be stored in the same place  the name's value  regardless of 
whether the name was the first or second argument in the original statements. this contrasts with the methods for retrieving a relational statement from either argument used by the relational data file1  rdf  and by deacon1'* . in rdf  statements are stored in only one direction  but in different files  ordered on different parts of the statement. thus to get all information about a single name  either one file must be searched exaustively or the name must be looked up in all files. in deacon  the statements are stored in the form of closed  connecting rings  through the three parts of the statement. thus the statement is reachable from any part of it without recourse to several files  but it is impossible to tell from a connecting ring where the statement should begin  i.e. whether the ring through x  r  and y represents the statement xry  ryx  or yxr. 
     the generality of samenlaq derives largely from the ability to introduce new relations at any time  to introduce definitions of new relations or relations that had previously been undefined and to extend the definition of a relation. definitions may also be added at any time and are stored in the memory net structure just like any other data. definitions are not given in terms of relation properties that have been built into the system  but in terms of other relations. nevertheless  various standard relation properties can be dealt with  for example: 
1. entering the statement   rl implby rl/rl causes rl to be transitive. 
1. entering  rl implby rl cnv   causes rl to be symmetric. 
1. it was previously pointed out  section 1  that the complex relation consisting only of a node restriction  r-1  serves as an identity relation for all names x such that for every name y in the string 1  xry is explicitly in memory. if 1 were the string consisting only of the delimiter          r-1  would be the identity relation for all x such that for any y  xry were explicitly stored. if this were true for all x in memory   r-   would be the universal identy relation. in that case entering the statement  rl implby  r-    would cause rl to be reflexive. 
     thus  rl might be defined to be an equivalence relation by entering  rl implby  member-    rl cnv   rl/rl/ . in addition to these forms of definition  a relation may be defined a  by using only other relations  and b  by combining other relations along with the relation being defined thus forming a general recursive definition. a wide range of relations may thus be used without programming them into the executive routines as it is done in raphael's sir1 . this method of defining relations also contrasts with that used by elliott1 in  grais . in  grais  relational properties are built into the executive routines. in fact  this is done in such a way as to provide specific routines for 1 classes of relations. the user introduces a new relation by specifying which of the 1 classes it belongs in and this determines how it will be handled. this does not allow a user to uce a relation whose properties he either does not know completely or does not wish to make specific initially. a user may also define a relation in terms of a boolean function of previously introduced relations. however  these relations may not be stored in the data structure  only used for question answering. 
     it is interesting to note that the user builds his own logic system into samenlaq ii when he specifies implby information  used as the rules of inference  and other statements  the axioms . the only logical structure imposed on the user is the metatheoretic substitution rule embodied in the procedures which apply implby and the limits on the form of a rule of inference imposed by the syntax of complex relations. if the user specifies a strange or even self-contradictory  logic  samenlaq ii will produce deductions that are equally strange or contradictory; interpretation is in the mind of the user.  for example  in section 1  deductions arising from the relation  is.part.of  only make sense if the interpretation of  x is. part.of y  motivating the rule of inference  is.part.of implby is part.of/is cnv   is that every member of y has a part which is a member of x and the interpretation of  is  is  is subset of.   
     it would be possible to append an executive to samenlaq ii which would constrain the type of logical system to one with certain prescribed properties. 
	1. 	some varied applications of samenlaq ii 
     the following sample conversations demonstrate samenlaq ii's ability to deal with relations arising from a variety of problem areas. 
     the first conversation  figure 1a b c  involves a subdialogue from sir1 . it demonstrates samenlaq s ability to handle relations such as part subset  owns and element and the interdependence between such relations. although specific relations and relational properties are not built into the system  samenlaq can utilize the information  x  y  z  x is.part. of y & z c y - x is.part.of z  via the implby statement is.part.of implby is.part.of/is  cnv .  see comments at the end of section 1.  

-1-

is.part.of implby is. part. of/is. part. of  is. part. of/is  cnv - ready 
sometimes implby is cnv - ready 
is implby i s / i s -
ready 
nose is.part.of personready 
nostril is.part.of nose-
ready 
professor is teacherready 
teacher is person-
ready 
nostril is.part.of professor*l- 
i figure nostril is.part1of/ nose and person what now  
1- 
i figure nostril is.part.of/ nose and person and teacher what now  
1 - 
i figure nostril is. part.of/ nose and person and teacher and professor what now  o k -
w a i t . . . 
answer - true 
ready 
person is living creaturebad input. try again. 
ready 
person is living.creature-
ready 
has.as. part implby is.part.of cnv - 
ready 
living.creature sometimes/has.as .part nostril* 1- i figure living.creature sometimes/has.as.part/ nostril what now  
ok- answer - true 
ready 
crt is display. device-
ready 
crt is. part.of b1- 
ready 
brutus is b1- 
     ready a 	screen is. part. of display. device-
ready 
screen is.part of brutus* 1 - 
i figure screen is.part.of/ display.device and crt what now  
1- 
i figure screen is.part.of/ display. device and crt and b1 what now  
1- 
 i figure screen is.part.of/ display.device and crt and b1 and brutus 
what now  
	fig. 1a 	learning and deduction using several relations from sir 
-1-
ok- w a i t . . . 
	answer - true 	 answer to question posed at line  a  fig. 1a.  
ready 
owns implby is/owns- 
ready 
fireman owns pair.of.red.suspenders-
ready 
doctor owns pair.of.red.suspenders*l- 
i figure doctor owns/ unknown what now  o k -
w a i t . . . 
answer - unknown 
ready 
firechief is fireman-
ready 
firechief owns pair.of.red.suspenders*l - i figure firechief owns/ pair.of.red.suspenders what now  
ok- w a i t . . . 
answer - true 
     ready a 	example.of implby example.of/is- ready 
a implby example.ofready 
stu owns log.log.decitrigl- 
ready 
	log.log.decitrigl 	example.of log.log.decitrig- 
ready 
log.log.decitrig is slide.rule-
ready 
stu owns/a slide r u l e * 1 -
i figure stu owns/a/ log.log.decitrig what now  
1 - 
i figure stu owns/a/ log.log.decitrig and sude.rule what now  
ok- answer - true 
ready 
engineering.student owns slide.rule-
ready 
george example.of t e c h . m a n -
ready 
tech.man is engineering.student-
ready 
george owns/a slide.rule*1 - i figure george owns/a/ unknown what now  
1- 
i figure george owns/a/ unknown what now  
ok- 
answer - unknown 
ready 
	fig. 1b 	learning and deduction using several relations from sir 
-1-

c 	engineering.student example.of cnv /owns/example.of log.log.decitrig*li figure engineering.student example.of cnv /owns/example.of/ unknown what now  
b 	stu example.of tech.man- 	 provide additional information necessary to answer question  
statement - stu example.of tech.man o k   . . . yeswait... 
what now  
1- 
i figure engineering.student example.of cnv /owns/example.of/ 
log.log.decitrig and slide.rule what now  
ok- 
	answer - true 	 answer to question posed at line   c   .   
ready 
	fig. 1c 	learning and deduction using several relations from sir 

new.york los.angeles santa.barbara orlando is city-
ready 
new.york has.population 1- 
ready 
los.angeles has.population 1- ready 
orlando has.population 1- 
ready 
santa.barbara has.population 1- 
ready 
1 is.greater.than 1- 
ready 
1 is.less.than 1- 
ready 
boeing.1 boeing.1  dc1 is jet.planeready 
convair.1 is prop.planeready 
jet.plane prop.plane subset airplaneready 
is implby is/subset- 
ready 
boeing. 1  dc. 1 carries 1 1 -
ready 
boeing.1 carries 1- ready 
convair.1 carries 1- 
ready 
1 is.greater.than 1- 
ready 
1 is.less.than 1- 
     ready a 	is.large implby  is-city  has.population/ is. greater. than-1   
has. population cnv /ls- 
     ready b 	is.large implby  is-airplane   carries/ is.greater.than-1   carries  cnvj/is- ready 
what is question- what is airplane* 1- 
 i figure airplane is cnv / boeing.1 and boeing.1 and dc.1 and convair.1 
what now  o k -
w a i t . . . 
answer - boeing.1 
	and 	boeing.1 
	and 	dc.1 
	and 	convair.1 
     ready c 	dc.1 is.large what*1- 
i figure dc.1 is.large/ jet.plane and airplane what now  o k -
w a i t . . . 
answer - jet.plane and 	airplane ready 
	fig. 1a 	application to census  airplane and airline flight data with an ambiguous relation. 
-1-

what is.large city*1 - 
i figure city is.large cnv / new.york and los.angeles what now  
ok- w a i t . . . 
answer - new.york 
	and 	los.angeles 
ready 
santa.barbara orlando has.population what*- 
i figure santa.barbara orlando has.population/ 1 and 1 what now  ok- w a i t . . . 
answer - 1 
	and 	1 
ready 
flt.1 flies.from new.york-
ready 
flt.1 flies.to los1angeles- 
ready 
dc. 1 used.on flt.1- 
ready 
flt.1 departs.at 1am- 
ready 
flt.1 arrives.at 1pm- 
ready 
flt.1 flies.from new.york-
ready 
flt.1 flies.to orlando-
ready 
boeing. 1 used.on flt.1- 
ready 
flt.1 flies.from los.angeles-
ready 
flt.1 fues.to santa.barbaraready 
convair.1 used.on flt.1-
ready 
flt.1 departs.at 1pm- 
ready 
flt.1 arrives.at 1pm- 
ready 
1pm is.later.than 1pm- 
ready 
connects.with implby arrives.at/es.later.than cnv /departs.at cnv - ready 
what  flies.from-new.york   connects.with/flies.to santa.barbara* 1 - i figure santa.barbara 
fues.to cnv /connects.with cnv / flies.from-new.york   flt.1 what now  
ok- 
answer - flt.1 
ready 
flt.1 used.on cnv /ls.large airplane*- 
i figure flt.1 used.on cnv /ls.large/ jet.plane and airplane what now  
o k -
answer - true ready 
fig. 1b 	application to census  airplane and airline flight data with an ambiguous relation. 

a 	true implby implies cnv /true- 
ready 
false implby implies/false- 
ready 
a implies b- ready 
a true proposition-ready 
b true proposition* 1- i figure b true/ proposition what now  ok- w a i t . . . 
answer - true 
ready 
follows.from implby implees cnv - 
     ready b 	implies implby implies/implies- ready 
c implies 	d-
ready 
d false proposition-
ready 
c false proposition* 1- i figure c false/ proposition what now  
o k -
w a i t . . . 
answer - true 
ready 
forget proposition  - forget - proposition 
o k   . . . yesw a i t . . . 
ready 
b implies c- 
ready 
d false propositionready 
a false proposition* 1- i figure a false/ unknown what now  
1- 
i figure a false/ proposition what now  o k -
w a i t . . . 
answer - true 
	fig. 1a 	a simple problem in logic using modus ponens 
-1-

ready 
element implby element/subsetready s1 subset s1- ready 
s1 subset s1- 
ready 
el element s i ready 
what is questionready 
el element what*1- i figure el element/ si and s1 what now  
1- 
i figure el element/ si and s1 and s1 what now  o k -
wait... 
answer - si 
	and 	s1 
	and 	s1 
ready 
c 	d follows.from a*1- 
i figure d follows.from/ c and b what now  
1- 
i figure d follows.from/ c and b and a what now  
o k -
wait... 
	answer - true 	 answer to question posed at line  c .  
ready 
f is a x i o m -
ready 
find.proof.from is questionready 
a derivable.from f- 
ready 
d find.proof.from axiom*1- 
enter comma ust of relation classes to be used or -   any 
any- 
d follows.from a derivable.from f is axiom what now  
ok- 
ready 
	fig. 1b 	set theory and simple theorem proving 

1 plus. iis 1- ready 
1 plus. l i s 1- ready 
1 plus. l i s 1- 
ready 
plus. 1.is implby plus. l i s / p l u s . l i s - ready 
what is questionready 
1 plus.1.is what*1- i figure 1 plus.1.is/ 1 what now  
ok- w a i t . . . 
answer - 1 
ready 
minus.1.is implby plus.1 .is cnv - 
　　　ready a 	1 divisible.by.1 false-
     ready b 	1 divisible.by.1 true-
     ready c 	divisible.by.1 implby minus.1 .is/divisible.by.1- 
ready 
1 divisible.by.1 what*1- i figure 1 divisible.by.1/ true what now  ok- w a i t . . . 
answer - true 
ready 
1 divisible.by.1 what*1- i figure 1 divisible.by.1/ false what now  ok- w a i t . . . 
answer - false 
ready 
	fig. 	1 	arithmetic and handling recursive definitions 
-1-

1cl 1c 1cr- 
ready 
1cl 1c 1cr- 
ready 
1cl 1c 1cr- ready 
1cl 1c 1cr- 
ready 
1cl 1m 1cr- 
ready 
1cl 1c 1cr- 
ready 
1cl 1c om1cr- 
ready 
1cl 1m 1cr- 
ready 
1cl 1c 1mcr- 
ready 
1cl 1m 1cr- ready 
1cl 1m 1cr- 
ready 
1cl 1c 1cr- 
ready 
om1cl 1c 1cr- ready 
om1cl 1c 1cr- ready 
1cl 1c 1cr- ready 
1cl 1c 1cr- ready 
om1cl 1c 1cr- 
ready 
get.to is question-
ready 
1cl get.to 1cr*1- 
enter comma list of relation classes to be used or -   any   
any*- 	 first solution follows:  
1cl 1c 1cr 1c cnv  1cl 1c 1cr 1c cnv  1cl 1m 1cr 
1c cnv  1cl 1m 1cr 1c cnv  1cl 1c 1cr 1m cnv  1cl 1c 1cr  second solution follows:  
1cl 1c 1cr 1c cnv  1cl 1c 1cr 1c cnv  1cl 1m 1cr 
1c cnv  1cl 1m 1cr 1c cnv  1cl 1c 1cr 1c cnv  1cl 1c 1cr 
what now  
ok- 
ready 
	fig. 1 	solving the missionary-cannibal problem 
-1-

     in attempting to answer a question  it may be necessary to supply further information to the system. 	such a situation is illustrated by line  b  in the conversation starting at line  a . 
     notice that in the case of a  what r y  question  samenlaq ii proceeds by attempting to apply the r cnv  relation to the node y. 
 b1a  
     figure 1 shows an application of samenlaq ii to census  airplane and airline flight data. note especially that even though the relation 'is.large  is defined ambiguously in lines  a  and  b  as to its application to cities or airplanes  samenlaq ii can disambiguate it from context  lines  c  and  d  . 
     in figure 1  samenlaq ii works with simple logic and set theory. the rule of inference modus ponens is entered in 1a line  a    and with this and the transitivity of implies given in line  b   simple  chain implication  problems can be solved. in 1b the relations subset and element are introduced along with the rule  x  x ♀ a & a c b - x e b   . then some set membership problems are solved  and finally  a simple proof is constructed. 
     figure 1 shows samenlaq ii being taught its first lesson in arithmetic. although neither numbers nor arithmetic functions have been built into the samenlaq ii structure or executive 
routines  samenlaq ii is capable of being taught arithmetic the way school children used to be taught: by first memorizing tables  and then being taught certain rules. notice especially that divisibility by 1 was defined recursively in lines  a    b  and  c . similarly  samenlaq ii could have been taught multiplication  division  the recursive definitions for less than and greater than as well as other arithmetic relations. 
     figure 1 shows samenlaq ii solving the missionary - cannibal problem  with three missionaries  three cannibals and a boat that holds a maximum of two people. the problem was described to samenlaq ii as a set of all the legal states in the problem with all the possible transitions between the states. for example  the first line represents the fact that if 1 missionaries and 1 cannibals are on the left bank 
with the boat on the left bank  then 1 cannibal can take the boat to the right bank  which will result in there being 1 missionaries and 1 cannibal on the right bank with the boat on the right bank. 	samenlaq ii solves the problem by showing how the boat should be used to get from the initial state  1cl  to the final state  1cr. 	any problem solving task that can be represented as finding a path from an initial state to a final state through a state transition graph can in theory be solved similarly by samenlaq i i . * 
	1. 	extension of the samenlaq structure 
     work is now proceeding on the design and implementation of a memory net structure  mens1 which goes further than samenlaq ii toward satisfying goals discussed in the first section of this paper. 	the two major improvements needed in the samenlaq structure are: 
1 . the ability to deal with a name which is itself a statement 
1. the ability to store names which represent some unspecified other names  i.e. act as variables. 
the first would facilitate the handling of n-ary relations and statements which serve to modify or give further information about other statements. 	the second would allow generalizations to be stored  and would also permit the storage of statements of the predicate calculus directly in the memory structure. 	these statements could then be interpreted by the executive and used as rules of inference to direct the memory search routines in a manner similar to the way samenlaq ii deals with implby definitions. 
the currently extant implementation of mens 
 which is programmed in burroughs extended algol and uses aslip  a slip like package of list processing routines  incorporates the first improvement  and work is progressing on the design of the implementation of the second improvement. 
     the main generalization involved in going from samenlaq to mens was to let xry statements be nodes in the net along with arguments and relations. the basic element of the mens structure is called an item  which may be an unstructured unit or may be a structure consisting of a pair or triple of items. thus  items are similar to the  events  used by simmons et al in protosynthex i i 1 . as in samenlaq  a major characteristic of the mens structure is that there is no duplication of items or structures; the physically same item is used everywhere that the structure it represents is referred to in a containing structure. several implications of this uniqueness of items are:  1  two structures which have a substructure in common actually overlap in the net   1  if there is an item representing logical implication  all structures interpretable as rules of inference will be discoverable directly from that item since it will be a central substructure of all of them   1  in 
      since samenlaq ii exhaustively searches the state transition graph  the threat of exponential growth is ever present. 	thus in certain interesting problems exhaustive search would be infeasible and heuristic search techniques would be necessary. 

-1-

general statements involving a quantified varia-
ble  the separate occurrences of the variable will all be pointers to a single item  so that a substitution attached to that item will serve as a substitution for all occurrences of the variable. 
     allowing a structure to be formed from a 
     pair of substructures provides for the representation of unary relations such as negation and quantification. allowing a structure to be formed from a triple of substructures provides for the representation of binary relation  and since any of the substructures may in fact be structures as well as unstructured items provides for the representation of n-ary relations. a more direct representation of n-ary relations is provided in another version of mens being implemented*  which will allow any structure to consist of any number of substructures. 
     it is demonstrated in the examples given in section 1 that samenlaq ii is capable of answering questions in formal logic involving simple chains of inference and basic set theory. with its ability to store statements of the predicate calculus  the mens structure should enable simple question answering routines to perform more complicated theorem proving. although we should perhaps not expect a high powered theorem prover to be developed in this way  the mens extension of samenlaq will provide an interesting contrast to systems  such as green and raphael's qa1  which use theorem proving techniques to answer questions. 
