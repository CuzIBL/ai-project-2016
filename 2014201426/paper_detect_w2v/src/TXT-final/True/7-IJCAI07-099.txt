
in recent years  the combinatorics of argumentation with arguments that can attack each other has been studied extensively. especially  attack graphs  put in the focus of attention by dung's seminal work 1  have proven to be a productive tool of analysis. in this paper a new style of algorithm is presented that computes the minimal admissible sets containing or attacking the argument. it is a breadth-first algorithm using labelings. the algorithm is applied to the computation of the preferred and stable extensions of a given attack graph.
1 introduction
the formal study of argumentation with arguments and their counterarguments in terms of argument attack graphs  dung 1  has proven to be fruitful. dung introduced several different argumentation semantics  of which especially the grounded and preferred semantics have been the topic of further study. a central decision problem is to determine credulous acceptance  see  e.g.   cayrol  doutre & mengin 1    dunne & bench-capon 1  1  : given an argument attack graph and an argument  determine whether the argument is an element of some preferred extension.
　　the present paper provides an algorithm for the computation of credulous acceptance. the approach is based on labelings  which leads to a different kind of algorithm than the more common argument game approaches. argument games are a kind of dialogues in which a proponent tries to defend an argument  while an opponent tries to attack it. a natural idea in argument game approaches is to defend against the most recently proposed arguments first.1 as a result  in an argument games approach  it is natural to consider the elements of an attack tree in a depth-first manner.
　　the main contribution of the paper is a breadth-first algorithm in terms of labelings that answers the credulous acceptance problem for the preferred semantics. formally proven results about labelings show the correctness of the algorithm. by the nature of the algorithm short proofs and refutations of arguments are returned: the minimal admissible sets containing or attacking a given argument  respectively. as an encore  a straightforward way is provided to construct all preferred extensions of an argumentation framework  essentially by 'gluing' proofs and refutations.
1 analyzing attack graphs in terms of sets and in terms of labelings
the starting point of dung's  work is an argumentation framework  which is essentially a directed graph expressing the attack relations between arguments:
definition  1 . an argumentation framework is a pair
 arguments  attacks   where arguments is any set  and attacks is a subset of arguments   arguments. the elements of arguments are the arguments of the theory  the elements of attacks the attacks.
when  arg  arg'  is an attack  the argument arg is said to attack the argument arg'. a set of arguments args is said to attack an argument arg if and only if there is an element of
args that attacks arg.
　　a useful shorthand for the specification of  finite  argumentation frameworks is as a set of lists of arguments. each list of arguments in the set expresses attacks of the first argument in the list. for instance  the set of lists {a b1 b1  b1 c1 c1  b1 c1 c1} denotes the argumentation framework  in which the argument a is attacked by b1 and b1  while b1 is attacked by c1 and c1 and b1 by c1 and c1. it can be useful to require of this shorthand that an attack list contains all attackers of its first element  but this is not necessary and reduces flexibility of the notation.
in the rest of the paper  an argumentation framework af
=  arguments  attacks  is silently assumed. some of dung's central notions are the following:
definition  1 . 1. a set of arguments args is conflict-free if it contains no arguments arg and arg'  such that arg attacks arg'.
1. an argument arg is acceptable with respect to a set of arguments args if for all arguments arg' in the argumentation framework the following holds: if arg' attacks arg  then there is an argument arg'' in
args  such that arg'' attacks arg'.
1. a set of arguments args is admissible if it is conflictfree and all arguments in args are acceptable with respect to args.
1. an admissible set of arguments args is a complete extension if each argument that is acceptable with respect to args is an element of args.
1. a preferred extension of an argumentation framework is an admissible set of arguments  that is maximal with respect to set inclusion.
1. a conflict-free set of arguments args is a stable extension of an argumentation framework if for any argument arg of the framework that is not in args  there is an argument arg' in args  such that arg' attacks arg.
the complete extension that is minimal with respect to set inclusion  which exists and is unique; see  dung 1   is called the grounded extension.
　　in this paper  instead of sets  labelings are used as analysis tool. an early use of the labeling approach for dung's abstract argumentation frameworks is by verheij   continued using a more expressive language in  verheij 1b . recently  caminada  has resumed the analysis of argumentation frameworks in terms of labelings. definition  1 . a pair  j  d  is a labeling if j and d are disjoint subsets of the set arguments of the argumentation framework. the elements of j and d are the justified and defeated arguments  respectively. the elements of j  d are labeled  other elements of arguments unlabeled.
a convenient shorthand notation for a  finite  labeling  j  d  is as a list of arguments  some of which appear between parentheses. the arguments in parentheses are those in d. for instance  using this shorthand  a  b1  c1  b1  c1 denotes the labeling in which the arguments a  c1 and c1 are justified and the arguments b1 and b1 defeated. grouping the arguments in j and in d this becomes a c1 c1  b1 b1 . when there are no defeated arguments  this can be indicated as   .
　　the following definition contains the main notions of the labeling approach.
definition  1 . 1. a labeling  j  d  is conflict-free if the set j is conflict-free.
1. a labeling  j  d  has justified defeat if for all elements arg of d there is an element in j that attacks arg.
1. a labeling  j  d  is closed if all arguments that are attacked by an argument in j are in d.
1. a conflict-free labeling  j  d  is attack-complete if all attackers of arguments in j are in d.
1. a conflict-free labeling  j  d  is defense-complete if all arguments of which all attackers are in d are in j.
1. a conflict-free labeling  j  d  is complete if it is both attack-complete and defense-complete.
1. a labeling  j  d  is a stage if it is conflict-free and has justified defeat.
caminada's  reinstatement labelings are closed complete labelings with justified defeat. the set of labelings of an argumentation framework af is denoted as labelingsaf.
　　the following properties summarize the relations between the set and labeling approach.
properties  1 . let j be a set of arguments and d be the set of arguments attacked by the arguments in j. then the following properties obtain:
1. j is conflict-free if and only if  j  d  is a labeling.
1. j is admissible if and only if  j  d  is an attackcomplete stage.
1. j is a complete extension if and only if  j  d  is a complete stage.
1. j is a preferred extension if and only if  j  d  is an attack-complete stage with maximal set of justified arguments.
1. j is a stable extension if and only if  j  d  is a labeling with no unlabeled arguments.
proof omitted.
it is useful to introduce a name for minimal admissible sets: definition  1 . an admissible proof  or proof  for short  for an argument arg is an admissible set containing arg that is minimal with respect to set inclusion. an admissible refutation  or refutation  for short  against an argument arg is an admissible proof for an attacker of arg. it is important to note that the existence of a refutation of an argument does not only imply that the argument is in no preferred extension  but only that there is a preferred extension attacking the argument.
1 computing credulous acceptance
before we turn to the algorithm some remarks about the approach are in use. what is the nature of the 'solutions' we are looking for  consider an argumentation framework in which there is an argument a with two attackers b1 and b1  which on their turn have two attackers each  arguments c1 to c1   and these are again each attacked by two attackers  arguments d1 to d1 . the relevant part of the attack graph is shown in figure 1. it is assumed that the figure shows all attackers at at most three attack levels from argument a. there are for instance no other attackers of a than b1 and b1. the dots indicate that higher attack levels are omitted.
　given this partial view of the attack graph  what can be said about the proofs and refutations of the argument a  of course we cannot determine 'complete' proofs and refutations  but we know what the 'three-levels deep' partial proofs and refutations must look like if they exist. the figure shows a possible partial proof  on the left  and a possible partial refutation. in the partial proof  a is justified  light grey . hence both its attackers must be defeated  dark grey . since a proof is minimal  a partial proof only needs to contain one attacker against a's attackers. therefore the second attack level allows four different possible partial proofs  one for each minimal choice of c's attacking the b's. in the figure  the arguments c1 and c1 are chosen and consequently labeled as justified. the third attack level is then again determined: the attackers of the c's that are justified must all be defeated. as a result  there exist four possible partial proofs of the argument a. a similar analysis shows that there are eight possible partial refutations  one of which is shown on the right in the figure. each possible partial refutation is determined by a choice between the two b's at attack level 1 followed by two choices from a pair of d's at attack level 1.

figure 1: a possible partial proof and refutation
for a three levels deep part of an attack graph
　　note that possible partial proofs and refutations are indeed only possible  in the sense that they are not necessarily the part of an actual proof or refutation. the unshown parts of the attack graph may obstruct a possible partial proof or refutation from being extended to an actual one. for instance  the shown possible partial proof  on the left  is not an actual partial proof if the figure already shows all attackers of the argumentation framework since  in that case  there is no way of defending against the d's. using the terminology associated with labelings  the defeat of the d's cannot be justified. similarly  the shown possible partial refutation is not an actual partial refutation if for instance d1 has exactly one attacker that is itself unattacked.
　　notwithstanding this possibility of possible partial proofs and refutations becoming 'blocked' by knowing more about the attack graph  each is genuinely possible  in the sense that there exist extended attack graphs in which a possible partial proof or refutation is actualized. for instance  the possible partial proof shown is realized when the attack graph contains exactly one unattacked attacker for each of the defeated d's  and the possible partial refutation is actualized when the attack graph is already complete.
　　the discussion of the possible partial proofs in this example provides a good illustration of the computational approach in this paper. formally  two functions on labelings are central in the algorithm: extendbyattack and extendbydefense. both return a set of labelings given a labeling as input. the function extendbyattack: labelingsaf    labelingsaf  adds all attackers of the justified arguments of a labeling to the set of defeated arguments:
extendbyattackaf  j  d   := { j  d'   labelingsaf | d' is the set d extended with all arguments attacking arguments in j}
the function extendbyattack returns a set of labelings that contains one element or is empty. extendbyattackaf j  d  is empty if and only if j is self-attacking: if one of the attackers of an argument in j is an element of j  then  j  d'   where d' is as in the definition of the function  is not a labeling since this requires that j  d' is empty.
　　the function extendbydefense: labelingsaf   labelingsaf  returns the set of labelings that result from extending the set of justified arguments of the input labeling in a minimal way  such that all defeated arguments of the input labeling are attacked by the justified arguments:
extendbydefense  j  d   := { j'  d   labelingsaf | j' is a conflict-free  minimal set of arguments  j  such that for all arguments arg in d there is an argument arg' in j' that attacks arg}1
extension by defense returns a set of labelings that can contain zero  one or several elements. the following example illustrates the two functions.
example  1 . consider the argumentation framework af = {a b1 b1  b1 c1 c1  b1 c1 c1  c1 d1 d1  c1 d1 d1  c1 d1 d1  c1 d1 d1}. it corresponds to the attack graph shown in figure 1  assuming that there are no further arguments and attacks than the ones shown. some representative examples of applying the two functions for this framework are as follows. they result from the repetitive application of the two functions starting with the labeling a     in which a is justified  as a 'seed':
extendbyattack a     = {a  b1 b1 }
extendbydefense a     = {a   }
extendbyattack a  b1 b1   = {a  b1 b1 }
extendbydefense a  b1 b1   = {a  b1 b1  c1 c1  a  b1 b1  c1 c1  a  b1 b1  c1 c1  a  b1 b1  c1 c1}
extendbyattack a  b1 b1  c1 c1  = {a  b1 b1  c1 c1
 d1 d1 d1 d1 }
extendbydefense a  b1 b1  c1 c1  = {a  b1 b1  c1 c1}
extendbyattack a  b1 b1  c1 c1  d1 d1 d1 d1   = {a
 b1 b1  c1 c1  d1 d1 d1 d1 }
     extendbydefense a  b1 b1  c1 c1  d1 d1 d1 d1   =  starting with the labeling  a  in which the argument a is defeated  the following are found:
extendbyattack  a   = { a }
extendbydefense  a   = { a  b1   a  b1}
extendbyattack  a  b1  = { a  b1  c1 c1 }
extendbydefense  a  b1  = { a  b1}
extendbyattack  a  b1  c1 c1   = { a  b1  c1 c1 }
extendbydefense  a  b1  c1 c1   = { a  b1  c1 c1  d1 d1   a  b1  c1 c1  d1 d1   a  b1  c1 c1  d1 d1 
 a  b1  c1 c1  d1 d1}
extendbyattack  a  b1  c1 c1  d1 d1  = { a  b1  c1 c1  d1 d1}
extendbydefense  a  b1  c1 c1  d1 d1  = { a  b1  c1 c1  d1 d1}
the functions extendbyattack and extendbydefense can be extended to  labelingsaf   labelingsaf  by stipulating the following  where l denotes a set of labelings :
extendbyattack l  := { j  u  | there is a  j'  u'   l  such that  j  u   extendbyattack  j'  u'  }
     extendbydefense l  := { j  u  | there is a  j'  u'   l  such that  j  u   extendbydefense  j'  u'  } we can now formally define the partial proof and partial refutation options of an argument in an argumentation framework. they are the labelings that result from the alternating application of the  nonmonotonic  functions extendbyattack and extendbydefense  starting with different seeds  where n ranges over the natural numbers 1 :
partialproofoptions1 arg  := {arg   }
partialproofoptions1n+1 arg  := extendbyattack partialproofoptions1n arg  
partialproofoptions1n+1 arg  := extendbydefense partialproofoptions1n+1 arg  
partialrefutationoptions1 arg  := { arg }
partialrefutationoptions1n+1 arg  := extendbyattack partialproofoptions1n arg  
　　partialrefutationoptions1n+1 arg  := extendbydefense partialproofoptions1n+1 arg   the elements of partialproofoptionsn arg  are referred to as the partial proof options of the argument arg at attack level n  the elements of partialrefutationoptionsn arg  are its partial refutation options at attack level n.
definition  1 . a proof option is a labeling  j  d   such that there is an n1  1  such that for all n  n1 it holds that
 j  d   partialproofoptionsn arg . a refutation option is a labeling  j  d   such that there is an n1  1  such that for all n  n1 it holds that  j  d   partialrefutationoptionsn arg .
the lowest value of n1 as in this definition is the depth of the proof or refutation option.
it holds that  if  j  d  is a proof or refutation option  then
 j  d   extendbyattack  j  d   and  j  d   extendbydefense  j  d  .
example  1   continued. the following table shows that there are no proof options and eight refutation options for the argument a.
partial proof options
1: a
1: a  b1 b1 
1: a  b1 b1  c1 c1  a  b1 b1  c1 c1  a  b1 b1  c1 c1  a  b1 b1  c1 c1
1: a  b1 b1  c1 c1  d1 d1 d1 d1   a  b1 b1  c1 c1  d1 d1 d1 d1   a  b1 b1  c1 c1  d1 d1 d1 d1   a  b1 b1  c1 c1  d1 d1 d1 d1 
1: none  since the d's cannot be defended against
partial refutation options
1:  a 
1:  a  b1   a  b1
1:  a  b1  c1 c1    a  b1  c1 c1 
1+:	 a  b1  c1 c1  d1 d1   a  b1  c1 c1  d1 d1 
 a  b1  c1 c1  d1 d1   a  b1  c1 c1  d1 d1 
 a  b1  c1 c1  d1 d1   a  b1  c1 c1  d1 d1 
 a  b1  c1 c1  d1 d1   a  b1  c1 c1  d1 d1
example  1 . af = {a b c  b h j k  c e f  e g  f f  g e  j a}. this example is used by cayrol  doutre & mengin  1  p. 1  to illustrate their approach in terms of dialogues. it further illustrates that partial proof and refutation options are gradually constructed and can be discarded. the table below shows that there are two proof options and no refutation options for the argument a. the computation of the proof options is complete after the second level. since b has three attackers and c has two  there are six possible labelings that must be considered. four of them are immediately discarded since they are not conflict-free. the remaining two are proof options that correspond to the two minimal admissible sets containing a. the computation of the refutation options shows that none remain from the third level onward.
indeed there exists no admissible set attacking a.
partial proof options
1:a1:a  b c 1:a  b c  e ha  b c  e j a  b c  e ka attacks ja  b c  f hf attacks itselfa  b c  f ja attacks ja  b c  f kf attacks itself1+: a  b c  e h  g   a  b c  e k  g 
partial refutation options 1:  a 
1:	 a  b   a  c
1:	 a  b  h j k    a  c  e f 
1+:	 a  b  h j k  a	a is justified & defeated
	 a  c  e f  f g	f is justified & defeated
example  1 . af = {a b  b c1 c1  c1 d  c1 e  d c1 c1  e c1 c1}. this argumentation framework shows how the labeling approach deals with 'dependent choices'. when trying to credulously prove a  a choice between c1 and c1 must be made in order to defend against b. further down the attack graph  again a choice between c1 and c1 becomes available  to defend against d and e . in a minimal proof  the choice must be kept constant  as actually happens in our labeling approach:
1: a; 1: a  b ; 1: a  b  c1  a  b  c1; 1+: a  b  c1  d   a  b 
c1  e 
since d is already attacked by c1 in the partial proof option a  b  c1  d  that appears at the third level  the c1-option of attacking d is not considered.
　we will show that partial proof and refutation options indeed produce proofs and refutations. the following lemma is needed.
lemma  1 . 1. if  j  d  is a conflict-free labeling  then the elements of extendbyattack  j  d   and extendby-
defense  j  d   are conflict-free.
1. a conflict-free labeling  j  d  is attack-complete if and only if extendbyattack  j  d   = { j  d }.
1. a conflict-free labeling  j  d  has justified defeat if and only if  j  d   extendbydefense  j  d  .
1. if  j  d  is a conflict-free labeling  such that  j  d  
extendbyattack  j  d   and  j  d   extendbydefense  j 
d    then j is admissible.
proof omitted.
theorem  1 . if  j  d  is a proof or refutation option  then j is admissible.
proof. proof and refutation options are the result of the consecutive application of the functions extendbyattack and extendbydefense starting from seeds that are conflict-free. since the functions maintain conflict-freeness  lemma  1  under 1   proof and refutation options are conflict-free. since proof and refutation options are by definition fixed points of the functions extendbyattack and extendbydefense as in lemma  1  under 1  the theorem follows.
theorem  1 . let af be a finite argumentation framework  j a set of arguments of the framework and d the set of arguments attacking arguments in j.
1. if j is a proof of an argument arg  then  j  d  is a proof option for arg.
1. if j is a refutation of an argument arg  then  j  d  is a refutation option for arg.
proof. 1. let j be a proof of arg. we inductively construct a sequence  j n   d n   for natural numbers n = 1 
1  1  ...  as follows:
j 1  := {arg}
j 1n+1  := j 1n 
j 1n+1  := some minimal subset of j that defends against all elements of d 1n+1 
d 1  := 
d 1n+1  := d 1n   {arg' | arg' attacks an argument in j 1n }
d 1n+1  := d 1n+1 
the j 1n+1 -step is non-constructive  but can be made by the admissibility of j. it follows by induction from the definitions and from the admissibility of j that  for all n 
 j n   d n    partialproofoptionsn arg  and j n 	j. when n is larger then the depth of the attack graph  defined as the maximum length of a non-looping or minimally looping attack sequence1   we have that j n  = j
 this uses the minimality of j   and  j n   d n+1   =  j  d  is a proof option. the proof of the second part is similar.
example  1 . af = {a b  b c e  c d  d e}. this example shows that sometimes a proof option contains redundant justified arguments  and hence does not correspond to a proof  which by definition must be minimal . the argument a has two proof options  viz. a c e  b d  and a e  b   while only the latter corresponds to a proof. the non-minimally admissible set {a c e} arises since an early choice of defense turns out to be redundant further down the attack tree.
the trace of partial proof options of a is as follows:
1: a; 1: a  b ; 1: a  b  c  a  b  e; 1: a  b  c  d   a  b  e;
1+: a  b  c  d  e  a  b  e
the choice of c at level 1 becomes obsolete. note also that the proof option a e  b  is already complete at level 1.
example  1 . af = {a b  b c1 c1  c1 d1 d1 d1  c1 d1  d1 e1  d1 e1  d1 e1  d1 e1  e1 f1 f1  e1 f1  f1 c1  f1 e1  f1 e1}. this example shows that a proof option of minimal depth does not necessarily have a minimal set of justified arguments  hence does not necessarily return a proof. this argumentation framework has two proof options for the argument a. the first is a  b  c1  d1 d1 d1  e1 e1 e1  f1 f1 f1  c1  d1  of depth 1  the second is a  b  c1  d1  e1  f1 f1  e1  f1  e1 of depth 1. the latter has {a  c1  e1  e1  e1} as set of justified arguments  which is a proper subset of {a  c1  c1  e1  e1  e1}  the set of justified arguments of the former. hence  the only proof of a corresponds to the deeper proof option.
corollary  1 . if arg has no proof  then arg has no proof options. if arg has no refutation  then arg has no refutation options.
corollary  1 . for finite argumentation frameworks  if arg has no proof  then there is an n1  1  such that for all n  n1 it holds that partialproofoptionsn arg  = . if arg has no refutation  then there is an n1  1  such that for all n  n1 it holds that partialrefutationoptionsn arg  = . on the basis of the above  an algorithm can be built that computes proof options of minimal depth for an argument
arg given a finite argumentation framework af:
	step 1:	l := {arg   }.
step 1: l' := extendbydefense extendbyattack l  . step 1: if there is a labeling  j  d   l'  l  then return l'  l.
	step 1:	if l = l'  then stop and return l.
	step 1:	goto step 1.
for finite argumentation frameworks  the algorithm stops since extension by attack and by defense either discards a labeling  keeps it constant or increases the set of labeled arguments in the labeling. when arg has a proof  the algorithm returns the proof options for arg of minimal depth. when arg has no proof  the algorithm returns the empty set  corollary  1  . by leaving out step 1  the algorithm returns all proof options of arg  hence all its proofs  theorem
 1  . when step 1 is replaced by l := { arg }  the algorithm computes refutation options.
　　the algorithm has been implemented  in delphi 1 under windows xp  and tested using a set of test examples. it computes all proof and refutation options for all arguments of a given argumentation framework. one detail of the implementation is not obvious: the way in which extension by attack and by defense has actually been implemented. the algorithm keeps track of the newly labeled arguments. for extension by attack  only attackers of the arguments newly labeled as justified are added. for extension by defense  only defenses against the arguments newly labeled as defeated are added. to find minimal defense sets as in the definition of extension by defense  the minimality is checked of all sets that contain exactly one attacker against all arguments that are newly labeled as defeated and that are not yet attacked by a justified argument.
example  1 . double n  := {ai1 a i+1 a i+1  ai1 a i+1 a i+1 | i = 1  ...  n - 1}. double* n  := double n   {ai1 bi | i = 1  ...  n}. this example illustrates the exponential complexity of the computation of proof options  cf. the results by dunne & bench-capon  . the number of proof/refutation options of double n  grows exponentially  while double* n  has only one proof option or one refutation option. the nature of double* n  is such that it may be necessary to consider all  partial  proof/refutation options of double n  to find this unique solution.
example  1 . deep&wide n  m  := {a b  b ci1  cij dij  dkj c k + 1 j | i = 1  1  ...  n - 1; j = 1  1  ...  m - 1; k = 1  1  ...  m - 1}. deep&wide* n  m  := deep&wide n  m   {b z}. this example illustrates the possible advantage of the breadth-first character of our approach. the argument a has exactly one proof {a  z}. it corresponds to the proof option a  b  z. the c-defenses against b all fail at the end of the c-d sequences  since the final d's cannot be defended against. since the proof option has depth 1  our approach quickly finds it. of course  the full width of the example  which increases with the parameter n  must be considered at attack level 1  but then the algorithm stops. for higher values of n  a depth-first approach will have a lower chance of entering the z-branch quickly and a higher chance of lingering in the c-d chains. for higher values of m  this is more costly.
　the algorithm above has been applied to compute the preferred and stable extensions of argumentation frameworks  as follows:
step 1: find all proofs and refutations of all arguments.
step 1: find the set da of all credulously ambiguous arguments.
step 1: choose a labeling  j  d  of da in which all elements of da are labeled  the 'disambiguation' .
step 1: if  for all elements of da  there exists a proof or a refutation option that is compatible with  j  d   then goto step 1  else goto step 1.
step 1: collect all proof and refutation options compatible with  j  d . output their union as a preferred extension. when it has no unlabeled arguments  output it as a stable extension.
step 1: choose the next disambiguation and goto step 1.
if none exists  stop.
this algorithm uses the properties that the union of compatible admissible sets is again admissible and that two different preferred extensions must differ on some credulously ambiguous argument.
1 related research
ches evar & simari  and dung  kowalski & toni  also deal with computational aspects of argumentation. both focus on a different language than dung's  attack graphs. ches evar & simari include a notion of dialectical constraints and dung  kowalski & toni treat assumption-based frameworks. dunne & bench-capon  1  1  use attack graphs and pay attention to the length of disputes that show whether an argument can be successfully justified or refuted. they prove a relation between their formally defined notions of complexity of a dispute instance and the rank of an argument  theorem 1 on p. 1 . their analyses focus on theoretical complexity results rather than actual computation. doutre & mengin  and cayrol et al.  use a subset enumeration algorithm for the computation of preferred extensions and a dialogue approach for credulous acceptance. they apply terminology related to graph theory  which is formally close to some of the labeling terminology used here. verheij's  1a  argumed software computes stable extensions for an argumentation language extending that of dung's. the algorithm computes the grounded extension and then tries to extend it to a stable extension. the mentioned papers contain further references.
1 conclusion
in this paper  the credulous acceptance problem has been approached in terms of labelings. the new notions of  partial  proof and refutation options have been proposed and formally analyzed. as an application  an algorithm has been described that computes whether an argument is credulously acceptable. variants of the algorithm compute all minimal admissible sets of arguments containing or attacking a given argument. a negative result  which also applies to existing argument game approaches  is that in a special kind of situation a non-minimal admissible set can be returned  examples  1  and  1    but always alongside the minimal ones  theorem  1  . the examples show that this is unavoidable: since computing admissibility requires that the attack tree is gradually explored  only a kind of 'treeminimality' can be maintained. to ensure set-minimality  an ultimate check is needed. an innovation is that it takes the labeling approach. the labeling approach leads to an algorithm of a different flavour than the more common argument game approaches. in argument game approaches  it is a natural choice to follow up on the last proposed argument  which leads to a depth-first consideration of the attack tree. in contrast  the algorithm proposed here is the first breadthfirst algorithm  which hence avoids the unnecessarily deep consideration of attack graphs  cf. example  1  . as an application of the algorithm  it is shown how preferred and stable extensions can be computed given the proofs and refutations of the arguments in an argumentation framework by a kind of gluing. hence  the connection between the computation of credulous acceptance and of preferred extensions is made explicit  in contrast with cayrol  doutre & mengin's work  who compute preferred extensions in terms of set enumeration and credulous acceptance in terms of dialogues. the algorithm has been implemented and tested using a set of examples. it has been made available for download  http://www.ai.rug.nl/~verheij/comparg/ .
