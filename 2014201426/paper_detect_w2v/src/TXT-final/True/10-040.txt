 
       conventions are shown f o r representing i n f o r m a t i o n in semantic networks in a l i n e a r form c a l l e d semantic case r e l a t i o n s . representations of v a r i a b l e s   t r u t h f u n c t i o n s   and q u a n t i f i e d statements are provided. methods f o r answering questions from the r e s u l t i n g semantic predicates are i l l u s t r a t e d and a computational procedure f o r answering questions from q u a n t i f i e d semantic predicates i s described. 
acknowiedgementg 
       the ideas and procedures presented here are the r e s u l t of many discussions w i t h gary hendrix  and michael k. smith. we're p a r t i c u l a r l y g r a t e f u l to m.k. smith f o r h e l p i n g to implement the lisp procedures f o r question-answering. 
introduction 
	in a recent c r i t i c i s m   	 what's 	in 	a 	l i n k     
woods  1  noted t h a t w i t h few exceptions  most semantic network systems f o r representing english meanings were inadequately defined in several ways  and  in p a r t i c u l a r   lacked s u i t a b l e conventions to encode the f u l l meaning of q u a n t i f i e d statements. several recent papers  
 such 	as 	those 	by 	kay 	1  	hendrix 	1  
mylopoulous  	e t . 	a l . 	1  	shapiro 	1  	& 
schubert 1  have continued to explore r e p r e s e n t a t i o n conventions and have g e n e r a l l y o f f e r e d at l e a s t minimally acceptable schemes to encode q u a n t i f i c a t i o n a l data. only r a r e l y   however  is an a l g o r i t h m described t h a t uses those conventions f o r answering q u a n t i f i e d questions. in our own experience  it is the a l g o r i t h m f o r using r e p r e s e n t a t i o n conventions t h a t reveals the computational costs and other consequences f o r any p a r t i c u l a r encoding. 
       in the f o l l o w i n g pages we b r i e f l y develop a q u a n t i f i e d predicate n o t a t i o n f o r semantic networks  and describe a question-answering a l g o r i t h m and i t s use f o r f i n d i n g and d i s t i n g u i s h i n g the meanings t h a t are encoded. 
semantic networks &nd relations 
       a semantic network f o r representing aspects of the meaning of english discourse is comprised of a set of nodes that are interconnected by d i r e c t e d and l a b e l l e d a r c s . a node is a symbolic o b j e c t that u s u a l l y represents the conceptual r e f e r e n t of an english expression  although it may be a r u l e   the name of a f u n c t i o n or program  or some s p e c i a l symbol. arcs t y p i c a l l y represent deep case r e l a t i o n s  bruce 1  that hold between conceptual r e f e r e n t s   but they also include s p e c i a l q u a n t i f i e r symbols  and pointers to r u l e s associated w i t h a given node. 
       if we consider the example sentence   rufolo s a i l e d h i s ship to cyprus   the f o l l o w i n g network might r e s u l t from a semantic case a n a l y s i s : 
sail1 	agt 	 ruf1 	. | 
i 
in 	t h i s 	graph word s u f f i x e d by uniquely 	named 	th 	 ship 1 	own 	' 
	to 	 cyprus1 
the convention is followed t h a t a a number  e . g . sail1  is a o b j e c t t h a t is an instance of the concept associated w i t h the unsubscripted word. thus  sail1 is an instance of sail. a l l l e x i c a l i n f o r m a t i o n i s associated w i t h the ooncept; e . g .   sail is a kind of move  is a verb  takes arguments of the form  agt  theme  from  to  and has r u l e s t h a t define i t s preconditions and r e s u l t s . 
       if we were to express the meaning of the sentence in r e l a t i o n a l form  
 sail1 ruf1 ship1 nil cyprus1  
 ruf1 own ship1  we would depend on ordering conventions to recognize t h a t the source or from of the s a i l i n g is nil or not known  ruf1 is the agent and cyprus is the to or g o a l . hendrix  1  shows t h a t the semantic case r e l a t i o n s are a v a r i a n t r e l a t i o n a l form in which the elements of the r e l a t i o n a l n-tuple are i d e n t i f i e d by t h e i r case arguments. the example appears as f o l l o w s : 
 head sail1  agt ruf1  th ship1  to cyprus1  
we f o l l o w the convention t h a t the f i r s t element of an n-tuple is always i t s head and thus show the semantic r e l a t i o n by  
 sail1 agt ruf1 th ship1 to cyprus1  
 ruf1 own ship1  
       the phrase   h i s s h i p   could be represented as   1wn1 r1 ruf1 r1 ship1   but since own is a binary r e l a t i o n   the simpler form   ruf1 own ship1  s u f f i c e s . it should be noticed t h a t the semantic case r e l a t i o n form is a s p e c i a l n o t a t i o n f o r a set of binary r e l a t i o n s   e.g.  sail1 sup sail  sail1 agt ruf1   sail1 th ship1  ruf1 sup rufolo  ruf1 own ship1 ...  each binary r e l a t i o n could be represented uniformly as  relname r1 arg1 r1 arg1  but considerable savings in w r i t i n g and in computation are gained by use of the mixed n o t a t i o n . 
       nesting of r e l a t i o n s in a manner analogous to embedding english r e l a t i v e clauses is n a t u r a l in t h i s form  so:  sail1 agt ruf1 own ship1  
th ship1 to cyprus1  
every arc has an i n v e r s e   usually s i g n i f i e d by adding the s u f f i x   *  to i t s symbol. thus the f o l l o w i n g semantic r e l a t i o n s mean the same t h i n g : 
 ruf1 agt  sail1 th ship1 to cyprus1  
own ship1  
 ship1 own* ruf1 
k n o w l e d g e 	r e p r . - 1 : 	simmons 
1 th* sail1 agt ruf1 to cyprrus1   
 cyprus1 to* sail1 agt rufol1 
th  ship1 own* rufol1    
the last three expressions if given to a certain language generator would result in the english sentences: 
it was rufolo who sailed his ship to cyprus. 
it was his ship that rufolo sailed to cyprus. it was to cyprus that rufolo sailed his ship. 
from these examples we can see that in expressing a network in semantic case relational form  the conventions for nesting and the fact that every arc has i t s inverse allows for many alternative equivalent relational expressions of the same network. each of the expressions when given to a semantic network compiler results in exactly the same network  because for every node-arc-node  ni-arc-nj  the compiler creates both ni-arc-nj and the inverse  nj-arc*-ni. 
　　　in general any semantic network can be translated into linear form by taking the starting node  ni  as the f i r s t element of a relation  then taking ni's f i r s t arc and the node which is the arc's value as the next two elements. if we desire to nest  the procedure is recursively followed on each value-node. if we wish an un-nested form  each node which is the value of an arc is put on a l i s t and the procedure is iterated over the members of the l i s t . alternatively  we can produce the set of triples that represent a network by taking the f i r s t node and forming a 
　　　t r i p l e with each of its arcs and that arc's value-node  and iterating the process for the value-nodes  until a l l value-nodes are terminals  i.e. produce no new triples. 
　　　it is also apparent that any set of relations can be represented by a semantic network. if we assume that an ordinary ordered n-tuple such as  sail rufolo ship nil cyprus  is decoded by means of some template such as  act agent theme from to   then it can be translated into a semantic case expression by pairing each element of the template with the corresponding element of the n-tuple. the inverse operation can also be used to convert from a semantic case expression to the simpler n-tuple. 
semantic predicates 
　　　if we  add conventions to our semantic networks for marking truth values and for representing variables  truth functions and quantifiers  the heads of semantic case relations become logical predicates and we are justified in referring to them as semantic case predicates  or more simply  semantic predicates. it should be noted that ours is an omega order logic as our predicates can be n-ary relations between other predicates. such  compound  predicates are propositions about how the other predicates are related and as suoh can have truth values. 
　　　in a network each subscripted instance of a concept  e.g. ship1  represents one or more members of i t s superclass. the expression   ship1 plural t  signifies that more than one instance of the concept  ship  is referred to. the expression   ship1 equiv ship  signifies that ship1 refers to every instance of the concept  ship. symbols such as w  x  y  z are reserved to represent free variables  and often occur in rules such as  
 imply ante  not of  not of x   conse x . 
　　　a node representing a semantic relation can be marked true  false or undetermined. two conventions are followed to reduce the amount of marking: 
1. if an unmarked predicate is embedded in another   i . e . i t s node has backlinks such as agt*  th*  ...* ignoring sup  inst  before  after  enable  resultof  the embedded predicate is dependent on the other and is undetermined unless there is a rule or convention that allows true or false to be inferred from the embedding predicate. 
1. otherwise a predicate represented by 	an unmarked node is true. 
the previous example   rufolo sailed his 	ship 	to 
cyprus  
 sail1 agt ruf1 th ship1 to cyprus'!  is taken as true. but   rufolo wanted to sail to 
italy   
 want1 agt ruf1 
　　　　th  sail1 agt ruf1 to italy1   provides an embedded predicate  sail1. under the f i r s t convention  this predicate is read as undetermined  while the embedding predicate  want! is true under the second convention. 
　　　the truth functions  and  or  not  imply are generally treated as compound predicates. for example   rufolo bought and sold jewels  is encoded: 
 and1 of   buy1 agt ruf1 th jewel1  
 sell1 agt ruf1 th jewel1    
 jewel1 pl t  
the object and1 is an instance of and  and the arc  of connects it with a l i s t of predicates. generally the english or is taken as inclusive even in the following context: 
 rufolo decided to recoup his loss or die trying.   decide1 agt ruf1 th 1 1f rec1up1 died   
 rec1up1 agt ruf1 thu1ss1 assoc ruf1   
 die1 th ruf1 during try1  
　　　 try1 agt rufolo! th rec1up1  it is possible that even if rufolo acts on his decision  he might accomplish either  or both the acts of recouping and dying. as the sentence stands  the recoup  and die  predicates are embedded in 1. the or truth function signifies that one or both of the predicates is . true but since we don't know which  the two predicates are taken as undetermined. 1 is embedded as the th argument of decide so i t s value is also und. 
knowledge repr.-1: simmons 1 　　　if we ask the question   did rufolo die   the above statement does not provide an answer; but it is relevant and the question-answering algorithm must find it and reserve decide1 for further processing. this w i l l be discussed in the next section. 
　　　for the sentence  mrufolo decided either to recoup his losses or die trying   the representation would be as before exoept that x1 would be used in place of 1. if we introduce an implication rule that states that if x decides to do y  then y happens  
 imply 1 ante decide agt x th y  conse y  then we could use it to assign a truth value to what rufolo decided to do. decide1 instantiates the rule  ruf1 binds to x  and  x1 of  rec1up1 died  becomes the value of y in both occurrences of y in the rule. since the antecedent  decide1  is true  the consequent x1 is taken as true. 
if we establish that   rufolo didn t die   
 n1 of  die1 th ruf1   and we have the rule  
 imply1 antecand 1f  n1t of x  xor of  x y     
         conse y  which means  if not x and either x or y  then y   then by binding die1 to x  and rec1up1 to y throughout the rule  we can establish that rufolo recouped his losses. 
　　　although this is a valid argument pattern  unfortunately the rule imply1 is fallacious on semantic grounds. if a person decides to do something  then he w i l l try to do i t   but if x tries y  y s t i l l remains undetermined. if we use such rules as imply1 with arguments whose truth values are und  we can suggest expectations that may be substantiated by further text  but we cannot deduce truth. 
　　　additional implementation conventions are used to minimize the number of nodes and arcs required to represent conjunction. first  the value of any argument arc from a predicate node is a l i s t of one or more nodes-an implicit representation of and. second  the set of semantic predicates in the network forms an implicit conjunction. the explicit and is only recorded when additional arguments apply to a l l members of the conjunction as in the example  
 rufolo danced and sang while the music played.  
 and1 of  dance1 sing1  during play1  
 dance1 agt ruf1  sing1 agt rufolo1  
 play1 th music1  
representations of or and not are always explicitly encoded. 
　　　in a l l the above examples  universal quantification has been assumed. buy1  rufolo1  and jewel1 are predicates true of particular instances of their superset classes  buy  rufolo  and jewel.  buy1 agt ruf1 th jewel1  asserts that every ruf1 bought every jewell additional conventions are needed for a more general treatment of quantification. 
　　　in the example   every ship has a captain  wrong: have1 r1  ship1 equiv ship  r1 captain1  we would have a false representation that signifies that every ship has captain1 as i t s oaptain. what is meant is that each ship has some person as i t s captain and the person is not necessarily the same for every ship. 
　　　in a customary predicate logic notation the quantifier symbols  a forall  e forsome  are associated with the variables in the order in which they are to be applied  e.g.  a ship1 e captain1  have1 r1 ship1 r1 captain1  this convention can easily be adopted for semantic predicates with the following notation  
 have1 r1 ship1 r1 captain1 q a ship1  e captain1   this notation is sufficient to maintain the information about quantifiers and their ordering. the arc  q  stands for a quantifier ordering prescription for the predicate node to which it is attached. 
　　　for the sake of more effective computation we have found it desirable to treat the q arc as a function which transforms i t s predicate into a skolem form as below: 
 have1 rkship1 equiv ship  r1 captain1 sk ship1    these two quantifier forms have the following graphs: 

the second or lower graph provides the simplest s t r u c t u r e . 
       the f i r s t graph is r e f e r r e d to as the q-arc form and it appears to be a desirable intermediate r e p r e s e n t a t i o n t h a t w i l l allow transformations i n t o a canonical q u a n t i f i e r form using q u a n t i f i e r transformations such as those described by quine  1  and chang and lee  1 . the canonical form we have chosen is one in which the negation if any  is brought to bear on the predioate by transforming every negated q u a n t i f i e r . the f o l l o w i n g examples show how two l o g i c a l l y equivalent statements become i d e n t i c a l in canonical form: 
	e1 	not every ship s a i l s every ocean. 
	e1 	some ship doesn't s a i l some ocean. 
their q-arc 	forms: 
qe1  sail1 instr ship1 loc 1cean1 
q  not a ship1 a 1cean1   
qe1  n1 of  sail1 instr ship1 loc 1cean1 q  e ship1 e 1cean1    
by pushing the not of qe1 through a shipu we g e t   
q e ship1 not a 1cean1  
then pushing not through a ocean1  we g e t   q e ship1 e ocean1 not  
the not now applies to the main predicate r a t h e r than to the q u a n t i f i e r s   so we embed the predicate i n i t : 
k n o w l e d g e 	r e p r . - 1 : 	simmons 
1  n1 of  sailm . . . q e ship1 e 1cean1    which is i d e n t i c a l to the form of qe1. 
a f t e r t r a n s f o r m a t i o n to canonical 	form  	the statements 	are 	brought 	i n t o 	the 	f o l l o w i n g 
skolemized form; 
 n1 of 	 sail1 	instr ship1 loc 1cean1   
       i t i s worth n o t i c i n g that t h i s simple form i s the d e f a u l t f o r what ordinary english statements such as   ship d i d n ' t s a i l the ocean  s i g n i f y in q u a n t i f i e d form. it w i l l be seen in the next s e c t i o n t h a t the procedure f o r matching q u a n t i f i e r c o n d i t i o n s assumes t h a t a term not e x p l i c i t l y marked by an sk arc is not dependent on any other 
q u a n t i f i e d 	term. 
the inference algorithm 
       in research oriented toward the eventual development of a t e x t understanding system we have studied and programmed several approaches to answering questions from semantic networks. these approaches reduce l o g i c a l l y to the idea that a semantic network representing a discourse is an interconnected set of true statements. the l e x i c a l p o r t i o n of the network contains a d d i t i o n a l 
       t r u e statements and r u l e s f o r forming new true statements from e x i s t i n g ones. the question is taken as a hypothesis and the inference algorithm must accomplish the task of determining whether the question is true  false or undetermined w i t h respect to the semantic network. it is also required to r e t u r n an answer t h a t i n s t a n t i a t e s any v a r i a b l e s that are in the question. 
       a question is u s u a l l y composed of class symbols  i . e . unsubscripted words  and case markers and v a r i a b l e s . an answer is e i t h e r a node whose associated a r c - v a l u e p a i r s i n s t a n t i a t e each element of the question or a general statement whose every element is i n s t a n t i a t e d by elements of the question. the content terms of a question are not l i m i t e d to class symbols and subscripted terms may be included . 
       this paradigm is not the only one t h a t is followed in question answering work and some c r i t i c i s m s o f i t w i l l b e discussed i n the concluding s e c t i o n . lehnert r e p o r t s an unusual approach using s c r i p t s and conceptual dependencies  lehnert 1 . 
       the f o l l o w i n g three examples w i l l help to show the e s s e n t i a l operation of the question answering procedure. 
	q1. 	did rufolo s a i l to cyprus  
 sail agt rufolo to cyprus  
	q1. 	where did rufolo go  
 go agt rufolo to x  
	q1. 	why did rufolo go to cyprus  
        go agt rufolo to cyprus resultof x  the f i r s t question is answered by a d i r e c t match of a semantic p r e d i c a t e    sail1 agt ruf1 th ship1 to cyprus1 . it can be notioed in q1 t h a t the terms in the semantic r e p r e s e n t a t i o n are not s u b s c r i p t e d . i t i s t h e r e f o r e possible t o look d i r e c t l y i n t o the lexioon to f i n d the word  sail and r e t r i e v e i t s instances  sail1  sail1  e t c . 
each instance is a semantic predicate which is then examined t o discover i f i t includes a l l the terms of the question. 
       the second question requires two miniscule inferences; f i r s t that sail is an instance of go  and second that cyprus matches x. the f i r s t inference is accomplished w i t h the use of the l e x i c a l s t r u c t u r e    sail sup move sup go  . the r e l a t i o n sup has the inverse inst  and sup and inst are t r a n s i t i v e   so sail1 is an instance of 
go. free v a r i a b l e s such as x match a n y t h i n g   so once again   sail1 ...to cyprus1  is the answering p r e d i c a t e . the short answer is the element corresponding to x  cyprus1 . the question words  what  where  who  e t c . are treated very much the same as free v a r i a b l e s except t h a t each can l i m i t the candidates it can match by a semantic c l a s s . 
       in order that the t h i r d question be answered  a discourse network such as the f o l l o w i n g is needed. 
 want1 agt rufolo1 th double1 enable and1  
 double1 agt rufolo1 th wealth1  
 ruf1 own wealth1  
 and1 of  buy1 l1ad1  enable sail1  
 buy1 	  
 l1ad1 	  
 sail1 agt ruf1 . . . to cyprus1 resultof and1  the two r e l a t i o n s   enable and resultof are inverses and are t r a n s i t i v e . if  x enable y  then x precedes y and the conditions r e s u l t i n g from x include those that are p r e - r e q u i s i t e to y. rule forms f o r computing causal l i n k s such as enable and resultof are described in another paper   simmons 1 . 
       the matching operation f o r q1 is s i m i l a r to t h a t f o r q1  and it is also matched by  sail1 . . . resultof and1 . since  want1 enable and1   and1 has the backlink  resultof want1. a complete answer to a why question appears to be the e n t i r e causal chain  want1 enable and1 enable sail1 enable... in answering the why of an agentive act such as  go agt rufolo...  it is probably d e s i r a b l e to seek backward on the causal chain f o r a motive such as  want agt rufolo...  and forward to some corresponding outcome such as  sell agt rufolo...for profit . we have but l i t t l e experience w i t h why-questions  but r e f e r the i n t e r e s t e d reader to an e x c e l l e n t discussion by lehnert  1 . questions concerning how many are t r e a t e d most thoroughly in woods  1 . 
       so f a r we have seen e s s e n t i a l l y a matching process supported by the l i m i t e d inferences associated w i t h the p r o p e r t i e s   inverse and transitive. a more general approach to inference is given by an a b b r e v i a t i o n of the imply s t r u c t u r e 
       in the form of consequent r u l e s such as the f o l l o w i n g : 
         x loc z  y partof 1  x loc y   if a question matches the f i r s t element of the r u l e   e . g .  rufolo loc italy  then the elements of the question corresponding to the v a r i a b l e s x and z are bound to these v a r i a b l e s throughout the r u l e   
knowledge 	r e p r . - 1 : 	simmons 
1   rufolo loc italy  y partof italy  rufolo loc y     . 
the f i r s t element of the rule is then detached and the remainder is then substituted as a new set of questions which if successfully answered prove the f i r s t element is true. thus if the semantic data 
base contains  
  rufolo loc ravello   ravello partof italy  then   rufolo loc italy  is true. 
a more complicated example i s :   go agt x to y instr z  
 want agt x th y loc* x   
 x loc z   control agt x th z   
this rule might be used to 	answer 	the 	question  
 how can rufolo go to cyprus   rufolo can go to cyprus by ship  if he wants to be located at 
cyprus  is located at a ship  and if he controls the ship. 
　　　this is the form of consequent rule described by fischer black in 1. since then thantes  thconses  and rule-forms for establishing pre- and postconditions have occurred frequently in ai literature. 
　　　we can now describe the question-answering procedure in the following steps  
1. for each question obtain a set of nodes that are candidates for answers: 
a. candidates are nodes that are in equiv  inst  or sup relations to the content terms of the question. 
b. . i f the f i r s t term o f the question i s a v a r i a b l e   transform the question so the f i r s t term is a word. if there are only v a r i a b l e s in the question refuse i t . 
s a t i s f i e d only if the cv corresponding to a has no sk arc  s i g n i f y i n g a f r e e v a r i a b l e   or has an sk arc whose value is an ordered subset of the value of a's sk value. 
1. 	save 	the 	s u r v i v i n g 	candidates 	as answers. 
m. for each question get every inference r u l e associated w i t h i t s f i r s t term and bind the corresponding elements of the question w i t h the v a r i a b l e s i n the r u l e . 
1. for every bound r u l e   detach the f i r s t p r e d i c a t e expression  and repeat steps 1 through 1 on the remaining predicate expressions. 
	this 	procedure  	a 	d i r e c t 	descendent 	of 
fischer black's and of schwarz  burger and simmons  f i n d s a l l answers to a set of questions. it can be noticed t h a t if the system had inference r u l e s associated w i t h every node  it would not t e r m i n a t e . also c e r t a i n classes of r u l e s can e s t a b l i s h i n f i n i t e recursions  see black 1 . although these events can be avoided in other ways  the procedure can be protected in steps 1 
and 1 by l i m i t i n g the number of questions and answers t h a t it is allowed to accumulate. the f u n c t i o n qimply is incomplete by design. it uses only superset  instance  and equivalence arcs to i n f e r the match of a question term w i t h a candidate word and does not apply general imply r u l e s . experience w i l l show i f the p r o p o r t i o n o f 
answers it misses is outweighed by the i r r e l e v a n t 

 for each candidate  f o r each arc-value p a i r in the question  match the a r c - v a l u e p a i r in the candidate. reject any candidate t h a t does not match every a r c - v a l u e p a i r of the q u e s t i o n . 
a. two arc-value pairs match if the arcs are identical and if the candidate value qimplies the question value  i.e.  qimply cv qv . 
b. qimply cv qv is true i f : cv=qv  cv is a variable  or qv is a variable  or if cv is an instance or equiv to qv  or if cv is a superset of qv or of i t s equivs. 
c. if qimply f a i l s and the arc is transitive and the cv is connected by an identical arc to some cv  then qimply cv1 and qv. 
d. if the arc in the question is an equiv* or skolem it signifies a quantification condition on the question.  a equiv* b  is satisfied only if the cv corresponding to a is equiv or sup to b.  a sk b  is 
computations 	i t 	e l i m i n a t e s . 
　　　truth functions and truth values are invisible to this procedure. if a semantic predicate is qimplyed by a candidate answer  the candidate is returned as relevant to the question. a higher level function examines the truth functions on both the question and i t s relevant candidates to mark each candidate as true  false or undetermined with respect to the question. if no candidate matches  the null answer is taken as unknown  and the truth value of the question is undetermined. 
knowledge r e p r . - 1 : 	simmons 
1 　　　our current system is implemented in about twenty concise lisp functions. three functions of great u t i l i t y are fori  forset  and forall. these are mapping functions of three arguments; a variable  a set  and a function with i t s arguments  usually including the variable . the variable is assigned to the f i r s t member of the set  and the function is then evaluated. fori is satisfied if one member of the set causes the function to return a non-nil value; forall requires every member of the set to cause the function to return non-nil; and forset goes through the entire set and returns the set of non-nil values. these functions are patterned after the quantifier functions that were used by woods  1  in his airlines data base work. 
　　　the system is organized in a depth-first search  but a best-first search is easily arranged by applying an appropriate ordering function to the sets of candidate nodes. for a relatively small data base  the overhead for computing best-first is probably too great to justify i t s use. a switch called mode is provided to substitute fori for certain calls to forset  thus providing a single answer mode. 
　　　figure 1 is a brief definition of a set of lisp functions that outline the top-level organization of the inference system. 
discussion 
　　　in previous sections we have introduced conventions for representing variables  truth functions and quantification in our form of semantic relations and taken this as justification for using the term  semantic predicates. the question answering procedure was described as an inference method that is computationally effective. the intent was not to argue that answering a l l english questions is simply a theorem proving operation  but rather to show that deductive question answering is one aspect of questioning a textual data base that can be clearly defined. 
　　　we notioed in section i i i that a statement with an undetermined truth value  may nonetheless be relevant to a question and conceivably participate in further computations to establish an answer. in that section it was also apparent that it is easy to write plausible rules of inference that are in fact  false. generally our experience with inference rules on english meanings indicates that they suggest possibilities that may be validated by the preceding or oncoming text. along with several others in the f i e l d   we doubt that ordinary english text is organized or understandable in purely deductive fashion. instead of establishing deductive chains  ordinary discourse creates plausible connectivities. for example    rufolo was a wealthy man. he wanted to double his wealth. he bought a ship  loaded it with goods that he paid for himself  and sailed to cyprus.  what w i l l he do in cyprus  what w i l l he do with the goods  how w i l l he double his wealth  these and others are questions for which the text suggests possible answers that can be obtained by the use of rule-forms that look like deductive inference rules but which w i l l establish only plausible outcomes. 
　　　the text provides additional sentences  such as: w rufolo arrived in cyprus  he discovered many ships carrying the same goods. he was forced to sell at a loss. in fact he was ruined.  the new statements support previous plausible inferences that rufolo was on a trading voyage  that his intention was to double his wealth by selling goods and that beoause of competition he lost his wealth. so ordinary narrative discourse suggests many plausible connections  continuations  causal and purposive chains which must be tested against the definite facts of the narrative as they emerge. this is where rules for causal organization  simmons 1  and scripts  schank 1  are applied to augment the text with what we expect is the author's intention. 
　　　on the other hand  some deductive 	inferences are possible. 	if rufolo bought the goods  he paid for them. 	if he paid for goods  he 	bought 	them. goods 	are 	merchandise. 	if he loads a ship with goods  the goods are on the ship. 	if he wants 	to double 	his 	wealth he w i l l either succeed or f a i l to do so. 	if he is a wealthy man  he is a man. 
　　　our point of view is to accept deductive logic as one mode of thought needed for understanding language and a primary method for establishing that two statements may mean the same thing. deductions are a necessary part of any more sophisticated system for plausible inference. and in applying rules of plausible inference  variables must s t i l l be bound and simple questions must be answered from the discourse content with the use of deductive inferences that preserve whatever truth values inhere. 
