 
central to solving constraint satisfaction problem 
 csp  is the problem of consistency check. past research has produced many general and specific consistency algorithms. specific algorithms are efficient specializations of the general ones for specific constraints. functional  anti-functional and monotonic constraints are three important classes of specific constraints. they form the basis of the current constraint programming languages. this paper proposes a more efficient method for checking an important subclass of functional constraints  increasing functional constraints. rather than checking them many times as in a typical consistency check process  in the new method they  almost all of them  only need to be checked once. this results in a substantia  saving in computation. 
1. introduction 
the key technique in solving csps is consistency check. 
arc consistency algorithms that work on a network representation of binary csps are perhaps the most important class of consistency algorithms. in this paper  we are also concerned with arc consistency of binary constraints  in particular  increasing functional constraints. over the past two decades  a number of general arc consistency algorithms have been proposed  e.g.  ac-1  mackworth  1   ac-1  mohr and henderson  1   ac-1  hentenryck et a/.  1  and ac-1  bessiere and 
cordier  1 . apart from the general algorithms  many specific methods were also designed which are specializations of the general ones for specific constraints 
 lauriere  1; mohr and masini  1  hentenryck et a/.  1 . these methods typically exploit the semantics of individual constraints  and are more efficient in checking these constraints. for instance  in  hentenryck et a/.  1   ac-1 is specialized for functional  anti-functional and monotonic constraints  and their piecewise generalizations  see their formal definitions in  hentenryck et a/.  1  . 
 recent years  the csp model has been implemented in constraint programming languages  such as chip  hentenryck  1   charme  charme  1   hog solver  hog  1   etc.  for solving practical combinatorial problems  such as scheduling  sequencing and resource 
1 	constraint satisfaction 
allocations  dincbas et a/.  1; hentenryck  1 . the basic constraints used in these languages are special cases of functional  anti-functional and monotonic constraints. 
 in this paper  we propose a more efficient consistency technique for a frequently used subclass of functional constraints  namely  increasing functional constraints  ifc . this technique allows this subclass of constraints  almost all of them  to be checked  or considered  only once in an arc consistency check process. 
 in a normal process  a constraint needs to be checked many times to maintain consistency. recheck is necessary when its previously established consistency is broken by other constraints. in the new method  ifcs only need to be checked once. this is achieved by merging the domains of the two variables in a ifc in the initial check such that rechecks will not be necessary. this technique may be embedded in any general arc consistency algorithm. this paper only presents a modified ac-1 algorithm  called acs'*   to incorporate this technique. 
 experimental results have shown the new technique outperforms the existing techniques substantially. this saving is important in practice because from our experiences in using two constraint languages  charme and hog solver to build practical systems  many constraints are 
ifcs  in particular  equations of the form ax = by + c  where x and y are variables  and a and b are positive constants and c a constant. 
 section 1 gives definitions and conventions. section 1 describes ac-1+. section 1 presents the new method for ifcs. section 1 shows the test results. section 1 discusses the related work and section 1 concludes the paper. 
1. preliminaries 
a binary csp is defined as follows:  1  variables - a finite set of n variables {1  1 n}  and  1  domains - each variable i takes its values from an associated finite domain di -  and  1  constraints - a set of binary constraints c between variables. if i and j are variables  i   j   we assume  for simplicity  that there is at most one constraint relating them  denoted cij.. a solution to a csp is an assignment of values to variables such that constraints are satisfied. 
 a graph g can be associated with a binary csp  where each node represents a variable /  and each edge between two variables i and y  a constraint  which is expressed as 


	liu 	1 

 regarding the info structure  the field size gives the domain size; the fields min and max are used to access the minimum and maximum values in the domain; the fields pred and succ allow accessing in constant time the successor and predecessor of a value in the domain. this representation allows the algorithm to reason about array indices rather than values. these fields are the same as those in ac-1. the extra field is arcs storing the arcs  which are kept elsewhere in ac-1  related to the variable except those ifc arcs because our new technique checks them only once. then  there is no need to store them. 
 we now present ac-1+  figure 1 . it has two parts  the initial check part  line 1 and 1   and the recheck part  line 1 . note that in line 1  we use arc g'  instead of arc g  as in ac-1. arc g  is the same as arc g  except that each ifc is expressed as one arc  either  i  j  or  j  i   rather than two arcs. the reason for this will be clear later. q in ac-1+ has elements of the form   i  j   w   line 1   where  /  j  is an arc and w is the array index of a real value  in devalues  removed from dj only in one special case  w is the real value itself  see next section . in ac-1  w is always a real value removed from dj. this change is also important. 

figure 1. the ac-1+ algorithm 
 the implementations of the two procedures initialcheck and recheck are left open. their general definitions are almost the same as those for arccons and 
localarccons in ac-1. due to the space limitation  we will not describe them here. the major difference is that ac-1+ embeds two procedures remove and enqueue inside initialcheck and recheck as it gives more flexibility in implementing specialized initialcheck and recheck procedures. in ac-1  these procedures are in the main ac1 algorithm  remove removes those inconsistent domain values from di and enqueue adds elements of the form   k  /   w  to q  where  k  /  is a related arc of i and w is either the di values array index of a real value or a real value. 
 ac-1+ inherits all the properties and complexity results of ac-1 as the key operations and data structures of them are almost the same. the differences are non-essential. 
1. merge variable domains in a ifc 
we now describe the proposed technique that checks  almost all  ifc only once. the main idea is to exploit the fact that consistent values in the variable domains of a ifc is one-to-one correspondent and in an increasing order. in initial check  we can make the two variables of a ifc share some key information. then  later on  domain change of 
1 	constraint satisfaction 
one variable will be felt automatically by the other. in this way  rechecks of the constraint can be avoided. 
as indicated  our technique does not guarantee that every 
ifc will be checked once. let us describe the condition under which every ifc needs only one check. take note that every ifc in arc g  is expressed as one arc  or edge . 
condition: each ifc in arc g  to be checked  in the initial check process  must have no more than one variable that has appeared in a previously checked ifc  also in the initial check process . 
 for example  we have ifc arcs  1  1    1  1   and  1  1 . if they are checked in this order  the above condition is not satisfied. it may be rearranged as  1  1    1  1   and  1  to satisfy the above condition. 
 in practical problem solving  this condition may not be fully satisfied but only partially because the sequencing of constraints may depend on the problem  and the ifcs may also form cycles. in these cases  those ifcs that do not met the condition still need recheck. however  from our experience in building practical systems  there are normally many clusters of ifcs in a practical csp  and each cluster typically has only 1 to 1 variables. then  the above condition is always satisfied. that is why we say almost all ifcs need no recheck in our method. 
 figure 1 shows the procedure initialcheck for ifcs. two sub-procedures are used. the first one is mergecheck  figure 1   which is used when the arc  i  j  satisfies the above condition. the second one is nonmergecheck 
 figure 1   which is used when the arc  i j  does not satisfy the condition. these two procedures use enqueue  figure 1  mentioned in the last section. 



	liu 	1 


1 constraint satisfaction 

1 ed   experiments have shown it is more efficient than that in ac-1. 
 mohr and masini  mohr and masini  1  discovered independently that binary equations  inequalities  and disequations can be solved in 1 ed . earlier work on constraint solvers  e.g.  alice  lauriere  1   and constraint 	programming 	languages 	 e.g.  	chip 
 hentenryck  1   also presented special algorithms for these types of constraints. however  equations in all these methods need to be checked many times. 
1. conclusion 
we have proposed a new consistency technique for ifcs. it checks most ifcs only once rather than many times. although this technique does not reduce the complexity  our experiments have shown it outperforms substantially the existing methods. the main application of this technique will be in constraint programming languages. 
acknowledgments: i would like to thank kim-heng teo  chee-kit looi and anonymous ijcai reviewers for their helpful comments and suggestions. 
