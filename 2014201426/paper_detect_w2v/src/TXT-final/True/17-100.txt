 
　　　this paper presents event calculus**  a model for representing the identifying characteristics of physical events in terms of changes in a scene and time-related combinations of other physical events. the model is used to construct a knowledge-based system for event recognition which forms a high-level description of changes in a scene  given a low-level description as input. 
time-varying information is represented in the form of 
 graphs   data structures which plot the elements of various domains against time. several varieties of operations are presented which map graphs into graphs  and representations of physical events are formed as symbolic expressions involving these operations. the paper concludes with an overview of the event recognition system  as implemented in interlisp on a vax 1  and an example of a session with this system. 
	i 	introduction 
     in recent years  much attention has been given to the issue of representing temporal knowledge. several systems  including those by vilain   allen   kandrashina  and malik and binford  have been presented for modeling temporal information and reasoning in time  following earlier works by bruce  and kahn and gorry . in addition  extensive general models of time  including framework* for causality  belief and continuous change in quantities have been proposed by allen  and mcdermott . 
     somewhat removed from this thrust  however  have been a number of efforts in  event recognition   including the works of neumann and novak   tsotsos   nagel   tsuji  moriiono and kuroda  and okada . the representational models employed by such systems have been quite diverse  and naturally so  as physical events themselves span an entire range from simple state changes to complex interactions of subevents and alternate possibilities. the model presented here attempts to capture a good portion of this range in the complexity of physical events. 
the motivation for this research originated largely in the event 
shape diagrams of walts  and the extensive treatment of time in 
miller and johnson-laird's language and perception . the presentation of event calculus in this paper is necessarily brief; a more detailed account of the model may be found in . 
ii graphs and symbols 
     processing of temporal information in the event calculus model revolves around the manipulation of data structures called  graphs   which correspond to piecewise-constant partial functions mapping time into the elements of particular domains. this representation captures both the notion that we may not know the behavior of a quantity or conditbn over all time  thus  a partial 
  author's current address: jet propulsion laboratory  m/s 
1  california institute of technology  1 oak grove drive  pasadena  ca 1. 
     ** this research was supported in part by the national science foundation under grant no. nsf 1. 
function  and the notion that we may not desire to record the behavior of that quantity or condition beyond the limits of some given granularity  thus  a piecewise-constant function . figure 1 illustrates such a construction  mapping time into boolean values  and its corresponding representation as a graph in lisp. note that values are continuous to the right of the time points at which changes occur.  time  is taken as the set of real numbers  with endpoints  beginning  and  end  attached. 

figure 1. a  piecewise-constant partial function mapping time into boolean values; b  corresponding lisp representation  graph . 
a quantity or condition which does not vary in time is represented by a single value called a  symbol   which is generally treated in the same manner as a graph mapping all time to that value. 
	hi 	functions taking graphs as arguments 
     given the graph as a fundamental data entity  it is possible to create a class of functions  each of which takes a number of graphs or symbols as arguments and returns a graph or sym-
bol as its result  call this a  function   . one important restriction is placed on functions - the resulting value at any point in time may be a function only of the values of its arguments taken at that same point in time. that is to say  a certain value at a certain time in the result may not be a function of a value at some other time in one of the arguments  this facility is reserved for operators  described below . 
     the event calculus model provides three modes for specifying an optional time argument in the application of a function or related construct. evaluation  at  or  just before  a point in time causes a symbol to be returned  while evaluation  from  one point in time  to  a second point in time causes a graph to be returned. the following examples illustrate this evaluation process  involving application of the  add  function in conjunction with various arguments and time specifications. 
 add   beginning nil  1  1  1 nil   
  beginning nil  1  1  1 nil   at 1  
1 
 add   beginning 1  1  1   1 justbefore 1  
1 

 add 1 from 1 to 1  
  beginning nil  1  1 nil   
 add   beginning nil  1  1  1  1 nil   
  beginning nil  1  1  1 nil    
  beginning nil  1  1  1 nil   
note that the intervals from 1 to 1 and 1 to 1 are automatically joined in the result of the last example  aa both intervals map to the value  1 . when the optional time argument is omitted  as in the last example  the time argument at the next outer level is used: in thii case  a default of  from beginning to end . 
iv conditionals  quantifiers and operators 
　　　in addition to functions  event calculus provides three related constructs   conditionals    quantifiers  and  operators . conditionals differ from functions in that one or more of their arguments may remain unevaluated throughout the course of their application  dependent on the value of some other argument. this is similar to the operation of the  and  and  or  functions in lisp. conditionals are included primarily for reasons of time-efficiency in the evaluation of event calculus expressions. quantifiers repeatedly evaluate a given event calculus expression while binding a specified variable successively to each element of a domain  accumulating a result in some manner. operators are released from the  strict time mapping  restriction placed on functions  as described above  and thus the value at a particular time in the result of an operator may be dependent on the values of its arguments at other times. 
　　　operators are the most interesting of these varieties in the context of event recognition  as they provide a mechanism for expressing both cumulative properties of quantities and conditions  and interrelations of quantities and conditions in time. following is a list describing a few of the operators provided by the implemented event calculus interpreter.  examples involving application the operators  stop  and  next  may be found in section v.  
ddt idt: discrete approximations of differentiation and integration with respect to time. 
next previous: shift the values of a graph over one time interval to the left  next  or right  previous . 
setpoint: for each interval in a graph  replace the value for that interval with the starting time point of that interval. start stop: search a boolean graph for  ff  to   t t   
    t t   to  ff    transitions. return for each time interval the time of the last such transition  or  beginning  if no such time exists. 
ever always: for each time interval in a boolean graph  return   t t   if the value of the graph has ever  always  been   t t   between a specified starting time and the time of the interval in question. otherwise  return  ff . 
floor ceiling: search a numerical graph for minimum  maximum  values. return for each time interval the accumulated minimum  maximum  following a specified time. 
	v 	describing physical events 
     in the implementation of the knowledge-based system for event recognition  events are modeled as functions  defined by event calculus expressions of varying complexity. the application is a  robot arm  context  with blocks-world type objects and robot  hands.  one of the simpler events in this context is that of a hand holding an object. the definition of the function  hold  if as follows  this if somewhat simplified - see  . variables begin with a pound sign. 
	  h o l d # a # b   	: : = 
 and  surround #a #b  
 and  dtouoh  part #a fingera  #b  
 dtouch  part #a fingerb  #b    
	g. borchardt 	1 
 and  is a conditional: its second argument if not evaluated for any time intenral in which its first argument is   f f       f f   is simply returned for such time intervals .  surround    dtouch  and  part  are functions. in englbh  this definition specifies that hand #a b holding object #b iff hand #a's  two  fingers surround block #b  and each finger directly touches #b. note that no operators are required in the definition of  hold   as it b possible to determine whether or not a hand b holding an object at a particular time using the values of other functions taken only at that tame point in time. 
     a more complex event which does require the use of operators is  grasp   meaning  take hold of  in thb context. 
	 grasp # a # b   	::= 
 and  closefingers #a  
 hold #a #b 
at  next  stop  closefingers #a      
thb definition b taken to mean that hand #a b in the process of grasping object #b iff hand #a b closing its fingers and it b also true that hand #a will be holding object #b at the end of its closing operation. the following example examines thb definition in greater detail.  visual representations of the graphs are added for clarity.  

  beginning nil  1 beginning  1  1  1  1 nil   
thb graph maps time to time and specifies for each interval the most recent time that the graph for   closefingers # a     made a transition from   t t   to  ff   i.e. hand #a stopped closing its fingers . a default value of  beginning  b used over the interval from time 1 to time 1  as no such transition has yet occurred. when thb graph b passed to the operator  next   the values are shifted over one time interval to the left  specifying for each interval in time the next point in time at which hand #a will have stopped closing its fingers.* the result of evaluating   next  stop  closefingers #a     b thus 

     * this is not entirely correct  as a fool-proof version of  grasp  would need to check that the value for each point in time in thb graph b never less than the time itself. 

1 g. borchardt 
before proceeding  it if necessary to reconsider the three modes for specifying a time argument. the previous examples employing time specifications  section hi  used only symbols in this capacity. whan a graph appears as a time specification  this is interpreted as a request to evaluate over all time  substituting time specifications indicated by the graph for actual intervals in time. in the case of   hold #a #b at  next  stop  closefingers #a      in the definition of  grasp   evaluation in this manner produces the following graph. 

  beginning nil  1 ff  1 tt  1 ff  1 nil   
for each interral in this graph  the value indicated represents the result of evaluating   hold #a #b   at the point in time when  with respect to that particular interval  hand #a will next stop closing its fingers. 
     as a final step in the eraluation of   grasp #a #b    the conjunction of the original   closefingers # a     graph and the above graph is taken  resulting in the following. 

  beginning nil  1 ff  1 tt  1 ff  1 nil   
hand #a is seen to be grasping object #b from time 1 to time 1. 
this is because hand #a is closing its fingers orer this interral  and it is true orer the entire interral that hand #a will be holding object #b at the point in time in which it next stops closing its fingers. orer the intenrals from time 1 to time 1 and from time 1 to time 
1  hand #a is closing its fingers  but it is not true that it will be holding object #b at the end of this action. likewise  from time 1 to time 1  hand #a is holding object #b  but no longer is it closing its fingers. 
	vi 	an event recognition session 
     the representation scheme described above has been used to construct a knowledge-based system for recognising the occurrences of physical events and forming a high-level description of changes in a scene given a relatively lowlevel description of those changes as input. the system consists of the event calculus expression interpreter  a knowledge base of defined functions for 1 events in the  robot arm  context  along with approximately 1 other  supporting  functions  and finally  a control mechanism which proceeds in a mixed bottom-up/top-down manner in identifying the occurrences of events. events are organised in a hierarchical fashion from those relating to positions and orientations of objects at the bottom to those concerning the fastening and unfastening of objects to other objects with a bolt  stacking and unstacking objects and so forth at the top. it is envisioned that such a system could be used as one component in the construction of a  teachable robot   serving to codify the actions taking place in the demonstration of a given task. 
     the input to this system is assumed to be provided by a computer vision system which tracks three-dimensional objects in space  returning coordinates of these objects over time  plus a few other useful items such as contact between objects and support of one object by another. the example given below was run using a simulated data set of this sort  amounting to approximately 1 lines of lispcoded input and specifying the low-level changes occurring over a fifteen second interval in a particular scene  with one second spacing between measurements. figure 1 depicts the sequence analysed and includes excerpts from the actual input file for the session.  boltl    handl    platec1  and  blockcl   as indicated in figure 1  are  constructions  containing several parts each  these parts corresponding to a simple geometrical shapes. 

time: 1 sec. - 1 sec. 
b   enter 'position 
...  fingera1 x    beginning nil  1.1  l 1  1   1  1.1  1  1  1 nil   
...  fingera1 y    beginning nil  1  1  1.1  
 1.1  1.1  1.1  1.1  
　　　　　　　　　　 1.1  1 nil   ...  fingera1 z  ... 
 enter 'dtouch 
...  fingera1 shaft1    beginning nil  1 tt   1 ff  1 nil   
figure 1. a  sequence of actions used in the event recognition session; b  excerpts from the input file for the session  indicating the position of one finger of the hand and contact between that finger and the shaft of the bolt. 

it should be noted that the goal of the knowledge-based system was not only to identify the events which had occurred in the changing scene  but also to provide a description of these changes in terms of the highest-level events  with lower-level events  peeking through  only where no higher-level events had occurred. this goal was achieved by a process of  suggestions and explanations   with lowerlevel events  suggesting  the possible occurrences of related higherlevel events  and higher-level events  explaining  occurrences of lower-level events. in this manner  the  hold  event listed as occurring from time 1 to time 1 in the output of the above example is the last remaining piece of an event originally identified as occurring from time 1 to time 1. the segment from time 1 to time 1 has been removed from the description following identification of the higher-level events  turn  and  fasten  which have provided explanations for the  hold  event. as no explanations for the  hold  event have been generated over the interval from time 1 to time 1  it remains in the final description covering this interval. 
     it may also be noted that some degree of seeming redundancy was left in the above description by the system in cases where one event was part of another event but not a necessary component in that event. for instance  it would not be necessary for  handl  to turn   b o l t l   in order to accomplish the fastening operation  as this could be aided by another hand turning the other objects. 
	vii 	concluding remarks 
the event calculus model is still not ironed out completely. 
problems with edge effects in operators have not been handled wholly to satisfaction  and symbols cannot always be replaced by graphs mapping all time to a single value. nevertheless  the event calculus formalism provides a powerful tool for the manipulation of time-related information. it may be possible as well to extend the graph structure in a simple manner to include variables as time coordinates. with such a scheme  a time reasoning system such as proposed by vilain or allen could be incorporated together with the model for maintaining the integrity of such graphs and producing alternate graph possibilities when no exact ordering can be determined  yet calculations are desired. another approach would be to extend a conventional semantic network by this formalism  incorporating graphs into the  aspect  mechanism of various attributes and including a suitable set of functions and operators for the manipulation of these graphs. 
acknowledgements 
     the author wishes to thank dr. david l. walts and the members of the advanced automation research group at the coordinated science laboratory for their comments and advice offered during the course of this research. 
references  
 vilain  m.b.   a system for reasoning about time.  in proc. aaai-1  pittsburgh  pa  1  1. 
 allen  j.f.  maintaining knowledge about temporal intervals  tr 1  computer science dept.  univ. rochester  1. 
 kandrashina  e.yu.   representation of temporal knowledge.  in proc. ijcai-1  karlsruhe  w. germany  1  1. 
 malik  j.  and binford  t.o.   reasoning in time and space.  in proc. ijcai-1s  karlsruhe  w. germany  1  1. 
 bruce  b.c.   a model for temporal 