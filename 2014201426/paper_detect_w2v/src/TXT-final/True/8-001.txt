toward a programming laboratory 
	warren 	t e i t e l m a n 
	b o l t 	beranek and newman inc 
1 moulton s t r e e t 
	cambridge  	massachusetts 

a b s t r a c t 
       t h i s paper d i s c usses the f e a s i b i l i t y and d e s i r a b i l i t y o f c o n s t r u c t i n g a   p r o grammlng l a b o r a t o r y   which would cooperate w i t h the user i n the development o f h i s programs  f r e e i n g h i m to c o n c e n t r a t e more f u l l y o n t h e concept u a l d i f f i c u l t i e s o f t h e problem he wishe s to s o l v e . experience w i t h s i m i l a r systems i n o t h e r f i e l d s i n d i c a t e s t h a t such a system would s i g n i f i c a n t l y i n c r e a s e t h e programmer f s p r o d u c t i v i t y . 
       the pilot system  implemented w i t h i n t h e i n t e r a c t i v e bbn lisp s y s t e m   is a step in the d i r e c t i o n of a programming l a b o r a t o r y . pilot o p e r a t e s as an i n t e r f a c e b e t ween t h e user and h i s programs  m o n i t o r i n g 
       b o t h t h e r e q u e s t s of t h e user and t h e o p e r a t i o n o f h i s programs. for example  i f pilot d e t e c t s a n e r r o r d u r i n g t h e e x e c u t i o n o f a p r o g r a m   i t t a k e s t h e a p p r o p r i a t e c o r r e c t i v e a c t i o n based o n p r e v i o u s i n s t r u c t i o n s f r o m the u s e r . s i m i l a r l y   t h e user can g i v e d i r e c t i o n s to pilot about t h e o p e r a t i o n o f h i s p r o g r a m s   even w h i l e they are r u n n i n g   and pilot w i l l p e r f o r m t h e work r e q u i r e d . i n a d d i t i o n   the user can e a s i l y modify pilot b y i n s t r u c t i n g i t about i t s own o p e r a t i o n   and t h u s develop h i s own language and c o n v e n t i o n s f o r i n t e r a c t i n g 
w i t h 	pilot. 
	s e v e r a l 	examples 	are p r e s e n t e d . 
i n t r o d u c t i o n 
       the r e s e a r c h d e s c r i b e d i n t h i s paper focuses on t h e programmer f s environment. this term is meant to suggest not only the usual specifics of programming system and language but also such more elusive and subjective considerations as ease and level of interaction   forgivefulness  of errors  human engineering  and system  initiative.  in normal usage  the word  environment  refers to the  aggregate of social and cultural conditions that influence the l i f e of an individual.  the programmer's enivronment influences  to a large extent determines  what sort of problems he can  and w i l l want to  tackle  how far he can go  and how fast. if the environment is  cooperative  and  helpful  -- the anthropomorphism is deliberate - then the programmer can be more ambitious and oroductive. if not  he w i l l spend most of his time and energy  fighting  the system  which at times seems bent on frustrating his best efforts. 
       one immediate goal to strive for is an environment comparable to that found in the well designed laboratory of the physical sciences. such a laboratory usually contains equipment for many applications as well as facilities for designing and building new apparatus  or adapting that alreacfy present. in a large  well-funded  installation  the researcher w i l l also often have available assistants for performing the  routine  tasks. for example  a chemist might simply request an analysis of a sample  and not have to itemize each step in the process. this type of assistant and assistance frees the researcher for problems more worthy of his attention. 
       computer based systems have been constructed that create this type of laboratory environment for certain well-defined areas  e.g.  mathematics  1 1   design of electronic circuits   and generalized graphical design  1   such as for aircraft  automobiles  bridges  etc. 
       these systems are organized to allow the computer to perform the routine work  where routine is a function of the sophistication of the system   while the user guides and directs the process at a relatively high level. for example  in the 
- 1 -mathematical laooratory developed by willian martin    the mathematician interacts with the computer by asking questions or making requests. the system employs graphical input and output  lipsntpen and display  to allow the mathematician to operate in an environment that closely resembles the pencil and paper with wnich he is already familiar. for output  the display utilizes subscripts  and observes the conventions concerning physical size  grouping  and placement of subexpressions which mathematicians have ado ted to make it easier to read and comprehend mathematical formulae. for input  the mathematician can communicate directly with the computer via the light pen1 either by writing new expressions  or by pointing to old ones  or portions thereof. 
 in a t y p i c a l case  the user might be t r y ing to f i n d the solution of a d i f f e r e n t i a l equation. on the screen are displayed one or two equations  while the user has in his head the name of several other expressions or p a r t i a l results already studied and f i l e d away. the user decides to perform an action such as s u b s t i t u t i n g a d i s played equation  solving it for some v a r i able  expanding some subexpression in a certain way  or perhaps asking to see something else. he makes the request using a combination of l i g h t - p e n and key-board signals. these are encoded and transmitted to the system where the appropriate routines compute or r e t r i e v e the required new expressions and transmit them back to the display routines which then compile and display the desired new p i c t u r e . in t h i s way  the user can perform in a few minutes a long and involved analysis which  assuming he did not make any mistakes or lose track of what he was doing  might otherwise take him many hours. 
　　　this paper describes a step in the d i r e c t i o n of such a laboratory for programming and programmers: the pilot system. as with the mathematical laboratory  the goal is to allow the computer to perform the routine tasks while the user  in t h i s case a programmer  is l e f t free to concent r a t e on the more creative aspects of his problem  which is the w r i t i n g and debugging of a program. 
　　　most of the previous e f f o r t s bent at improving the environment of the programmer have concentrated on providing and improving packages  such as e d i t o r s   comp i l e r s   trace packages  display routines  etc. while a good deal of e f f o r t has been devoted to such f a c i l i t i e s in the design of pilot  the basic innovation of the pilot system is the emphasis placed on the problem of making changes in programs. the reason for t h i s emphasis is that making changes in programs is the task that occupies most of a programmers time and eff o r t   from the early stages in the develop-
ment of programs when they consist primari l y of correcting syntactical and simple l o g i c a l errors in i n d i v i d u a l subroutines  to the f i n a l stages when the programmer makes the type of l o g i c a l and organizational changes that affect many d i f f e r e n t parts of his program. 
       the problem of making changes to the pilot system i t s e l f is handled as a special case of the problem of making changes in programs in general. since pilot is designed to f a c i l i t a t e making changes in programs  i t s tools and techniques can be app l i e d d i r e c t l y to i t s e l f in what is essenti a l l y a bootstrapping process. the user can thus easily introduce new tools and/or modify e x i s t i n g ones to s u i t his own methods and problems  in short  t a i l o r the performance of the system to s u i t himself. puthermore  pilot is designed with t h i s in mind  so that it can cooperate with the user during t h i s phase of the development. 
the pilot system 
　　　pllot ic implemented in the lisp programming language at bolt beranek and newman i n c .   cambridge  massachusetts.  although there is a pilot subsystem in lisp  a l l of the features and tools described in t h i s paper were incorporated d i r e c t l y into the bbn lisp system once t h e i r usefulness was established  and are now in general use by the entire community of lisp users. it is thus more meaningf u l to view pilot as a conceptual system  a philosophy of design. it is t h i s p h i l o sophy that we are t r y i n g to impart  in the hopes that it may prove useful in the design and construction of systems in other languages.  *  
automatic error correcting 
　　　the i n i t i a l stages in the implementat i o n of a large program are usually devoted to the w r i t i n g and debugging of independent component routines. only a f t e r these have been checked out  at least s u p e r f i c i a l l y   can the programmer begin to assemble the program and check for i n t e r routine problems. however  before the programmer can even begin to debug a r o u t i n e   he must f i r s t get it to run  i . e .   e l i m i nate those syntactical and/or simple l o g i cal errors that cause complaints from the language or system in which he is operati n g . f a c i l i t a t i n g the correction of these lowest-level errors would improve the e f ficiency of debugging by allowing the programmer to proceed d i r e c t l y to higher level problems. 
　　　from the user's standpoint  clearly the best of a l l possible solutions would be for the system to correct these lowlevel errors automatically and continue with the computation. this is not farfetched: a surprisingly large percentage of the errors made by lisp users are of the type that could be corrected by another lisp programmer without any i n f o r mation about the purpose or a p p l i c a t i o n of the lisp program or expression in 
-1- *  lisp is especially suited for implementing a system such as pilot because of the ease with which lisp programs can be treated as data by other programs. this c a p a b i l i t y is essential for creating tools which themselves w i l l create and/or modify programs  an indispensible feature of a programming laborabory. 
question  *  e . g .   misspellings  certain types of parenthesis e r r o r s   etc. if these corrections were performed automatically by a program that was called only when   a f t e r   an error occurred in the execution of a lisp program  it would in no way det r a c t from the performance of the lisp system with debugged programs. thus the efficiency of the error correcting program 
would not be a c r i t i c a l factor in i t s usefulness. 
       a p r i m i t i v e program which corrected certain types of s p e l l i n g errors was implemented in pilot and users were encouraged to experiment with it and comment on i t s features. as a result of t h i s e x p e r i ence  we discovered that in order to be acceptable to users: 
 1  the program must have a measure of how certain it is about the nature and correction of a mistake  and use t h i s measure in determining the amount of i n t e r a c t i o n with the user. 
 1  the program must be able to d i s t i n guish between s i g n i f i c a n t and t r i v i a l corrections  and to be more cautious  i . e .   more i n t e r a c t i v e   about correcting the former. 
 1  the user must be able to s p e c i f y to the program h i s degree of confidence i n i t s a b i l i t y t o c o r r e c t h i s m i s t a k e s   as r e f l e c t e d by the amount of i n t e r a c t i o n he d e s i r e s . 
 1  the user must be able to i n t e r r u p t and/or abort 	any attempted c o r r e c t i o n . 
 1  the user must be able to d i s a b l e or o v e r r u l e the e n t i r e c o r r e c t i n g program if or whenever he wishes. 
       with these c r i t e r i a in mind  a more s o p h i s t i c a t e d set o f e r r o r c o r r e c t i n g r o u t i n e s were implemented. these r o u t i n e s make up the dwim package  f o r d o - w h a t - i mean. the f o l l o w i n g output is r e p r e s e n t a t i v e o f the k i n d o f c o r r e c t i o n s and f l a v o r of i n t e r a c t i o n of dwim. user i n p u t is p r e ceded by an arrow    -  . 
       i n t h i s example  the user f i r s t d e f i n e s a f u n c t i o n pact of one argument  n  whose value is to be n f a c t o r i a l . the f u n c t i o n c o n t a i n s s e v e r a l e r r o r s : times and fact have been m i s s p e l l e d . the 1 in n1 was intended to be a r i g h t p a r e n t h e s i s but the t e l e t y p e s h i f t key was not depressed. s i m i l a r l y   the 1 in 1sub1 was i n t e n d ed to be a l e f t p a r e n t h e s i s . f i n a l l y   t h e r e are two l e f t p a r e n t h e s i s i n f r o n t o f the t t h a t begins the second clause in the c o n d i t i o n a l   i n s t e a d o f the r e q u i r e d one. 
 *  we c o n j e c t u r e t h a t t h i s is a l s o t r u e i n o t h e r languages. 

       a f t e r d e f i n i n g the f u n c t i o n fact  the user wishes t o look a t i s d e f i n i t i o n u s i n r prettyprint  which he u n f o r t u n a t e l y m i s s p e l l s . since t h e r e is no f u n c t i o n prettyprnt in the system  an undefined function e r r o r o c c u r s   and the dwim program is c a l l e d . dwim invokes i t s s p e l l i n g c o r : e c t o r   which searches f o r the best poss i b l e match a l i s t of f u n c t i o n s f r e q u e n t l y used  by t h i s u s e r   . f i n d i n g one t h a t is extremely c l o s e   dwim proceeds on the a s sumption t h a t prettyprnt meant prettyprint  informs the user of t h i s   and c a l l s prettyprint. 
       at t h i s p o i n t   prettyprint would normally p r i n t  facct not printable  and e x i t   since facct has no d e f i n i t i o n . this is not a system e r r o r c o n d i t i o n   but the dwim f a c i l i t y i s not r e s t r i c t e d t o j u s t e r r o r c o n d i t i o n s . dwim m o d i f i e s s e l e c t e d system f u n c t i o n s   such as prettyprint and defineq  to make them cooperate more w i t h 
       the user. defineq is m o d i f i e d  by advise  to be d e s c r i b e d l a t e r   to note any new f u n c t i o n s d e f i n e d by the u s e r   and add them t o the s p e l l i n g l i s t o f user functions. s i m i l a r l y   prettyprint is m o d i f i e d so t h a t when g i v e n a f u n c t i o n w i t h no d e f i n i t i o n   i t c a l l s the s p e l l i n g c o r r e c t o r . thus  prettyprint determines t h a t the user wants t o see the d e f i n i t i o n o f the f u n c t i o n 

-1-

pact  not facct  and proceeds accordingly. 
　　　the user now calls his function fact. during its execution  five errors are generated  and dwim is called five times. 	at each point  the error is corrected  a comment made of the action taken  and the computation allowed to continue as if no error had occurred. 	following the last correction  1  the value of fact 1   is printed. 	finally  the user prints the new  now correct  definition of fact. 
　　　in this particular example  the user was shown operating in a mode which gave the dwim system the green light on a l l corrections. had the user wished to interact more and approve or disapprove of the i n tended corrections at each stage  he could have operated in a different mode. or  operating as shown above  he could have at any point aborted the correction or signalled his desire to see the results of a correction after it was made by typing a 
　　　  on the teletype. 
　　　we have found from our experience with dwim that most users are quite willing to entrust the program with the correction of errors  although each different user may want to operate with a different  confidence factor   a parameter which indicates how sure dwim must be before making a correction without approval. above a certain user-established level  dwim makes the correction and goes on. below another level  
dwim types what it thinks is the problem  
e.g.  does prtypnt mean prettyprint    and waits for the user to respond. in the i n between area  dwim types what it is about to do  pauses for about a second  and if the user does not respond  goes ahead and does i t . the important thing to note is that since an error has occurred  the user would have to intervene in any event  so any attempt at correction is appreciated  even if wrong  as long as the correction does not cause more trouble than the original to correct  since dwim can recognize the difference between t r i v i a l corrections  such as misspellings  and serious corrections  such as those involving extensive editing  bad mistakes are usually avoided. when dwim does make a mistake  the user merely aborts his computation and makes the correction he would have to make anyway. 
error handling in general 
　　　certain types of errors that occur in the bbn lisp system cannot be handled by the dwim program  e.g.  non-numeric arg  an error generated by the arithmetic functions  arg not array  from the primitive array functions  etc. these are data type errors. *  another class of errors not handled by dwim are the 'panic  errors: bp full  a complaint from the compiler meaning it has run out of binary program space; nonxmem  an attempt to reference non-existent memory  usually caused by treating an array pointer as a piece of l i s t structure; pdl ovflw meaning pushdown l i s t overflow  which usually implies a looping program  etc. both data type and panic errors are not fixable  but they are helpable. 
　　　in our system  whenever an error occurs  it causes a trap to a user-modifiable program.  it is through this program that dwim works.  if dwim has not been enabled  or if the user aborts an attempted dwim correction  or if dwim cannot fix the error that has occurred  the system goes into a  break  and allows the user to interact with the system while maintaining the context of the program in which the error occurred. this allows the user to intervene to try to rectify the problem  or to salvage what he can of the computation. while in the break  the system accepts and evaluates inputs from the teletype. since a l l of the power of the system is available to him  the user can examine variables  change their values  define and evaluate new functions  and even edit functions he is currently in. if another error occurs in a computation requested while in the break  the system goes into a second  lower break  and so on. thus it is rarely the case that the results of a lengthy computation are lost by the occurrence of an error near its end. 
　　　the following example illustrates this process  user input is preceded by  :  or   *     . the user is running a large account lng system  one of  whose subroutines is to perform the alphabetization of a l i s t of names. the f i r s t indication of the presence of a logical error in the system is the message attempt to clobber nil  meaning the program is attempting to change the value of nil. the system goes into a break  1   and the user tries to determine where the error occurred by performing a backtrace  1 . he sees that he is in the function alpha  interrogates the value of some of alpha's variables  1   and realizes that the problem arose when his alphabetization routine attempted to compare the last element in the l i s t to the one following i t   i.e. and end-check problem. while s t i l l in the break  he proceeds to edit the function alpha  1 . dwim corrects his spelling  and since alpha happens to be 
 *  sometimes these errors are in fact caused by misspellings  but it is impossible to t e l l in general. 

- 1 -

compiled  the editor retrieves its defining symbolic expression from i t s property l i s t   typing pfop  1  to call this to the user's attention. consulting his l i s t i n g   the user instructs the editor to find the expression beginning with cond that contains return   1  which he then prettyprints  1 . the expression he wants is the one before this one  so he backs up  1   and makes the appropriate correction 
 1 .he then recompiles alpha  1 . 
attempt to clobber n i l 
teitelman 
in 	rplaca 
 rplaca broken  	1 
:bt 	1 
rplaca alpha 
acc1unts1 acc1unts1 
accounts 
 sobrow o u i l l i a n murphy bell n i l   	1 
:y   a i l   
:z 
teitelman 
:   e d i t f 	alhpa  	1 
=alpha 
prop 	1 
edit 
* cond containing return  	1 
pp 	1 
 cond 
	 flg 	 go lp    
	 t 	 return 	x      
*back pp 	1 
	 null 	 seto y 	 cdr y      
* embed setq in cur  	1 
*pp 
 cdr  setq y  cur y      
*ok 
 alpha  
: compile 	 quote 	  a l p h a       	1 
l i s t i n g   
st 
 output 	f i l e   
none 
 alpha 	compiling   alpha 	redefined  
 alpha  
: = 	1 
u = n i l 
v = teitelman 
:   s e t u u 	y  	1 
  n i l   
seval 	1 
rplaca evaluated 
:value 	1 
 teitelman  
:x 
 bobrow q u i l l i a n murphy bell teitelman  
:ok 
　　　　　　　　　　　　　　　　　　　　　　1 rplaca 
　　　now the user wishes to proceed with the computation  and so must correct the immediate error situation in the function rplaca. he interrogates the value of rplaca's arguments by typing  =  1   and changes the f i r s t argument to the value of y  1 . he then evaluates rplaca  1   checks its value  1   and releases the break by typing ok  1 . 
　　　as illustrated above  when an error occurs a user invariably wants to  look back  and see what happened earlier in the computation to cause the error situation. in bbn lisp  a l l information regarding the state of the computation in progress is stored on the push-down l i s t and is exp l i c i t l y available to the user and to user programs. in fact  without this capabili t y   dwim could only be used to correct certain t r i v i a l errors. we believe that for any type of programming laboratory environment  it is absolutely essential that programs be able to examine the state of the world at any point in the computation. in terms of lisp  this implies being able to examine the sequence of functions that have been called  and looking at variable bindings. since the same variable may be bound in nested function calls a number of times  expecially during a recursive computation  the program must be able to specifv which binding of a variable it is referencing and be able to change a particular binding if necessary. for example  had x and y been the name of rplaca's arguments  the user should s t i l l be able to interrogate the value of x and y in alpha. finally  the program must be able ♀b cause the computation to revert back to a specified place on the push-down l i s t regardless of the number and type of intervening functions that have been called all of these capabilities are present in our system. 
user breaks 
　　　the capability of stopping a computation and maintaining its context while executing teletype inputs is also directly 
available to the user as an aid in debugging in a variety of forms. 	 in the simplest case  the user can request that selected functions be modified to cause breaks whenever they are called  or only when a certain condition is satisfied  
e.g..  break alpha  greaterp  length x  1   
w i l l cause the alphabetization routine to break whenever it is given a l i s t of length greater than 1. at this point the user can intervene and examine variables  edit functions  etc. exactly as with the case when an error occurs and the system causes a break. 
-1-

　　　another way of using the break feature is to specify that a function be  broken  only when it is called from some p a r t i cular f u n c t i o n . for example  the user would be reluctant to break on the function setq  since almost every function uses i t . 
however  he could  break  setq in alpha    which would only break on c a l l s to setq from w i t h i n alpha. this is performed by c a l l i n g the editor to f i n d and modify a l l c a l l s to setq inside of the function alpha. thus the performance of setq is not affected or degraded when called from any 
other function. 
　　　the user can also request that breaks be inserted at specified points inside of a f u n c t i o n . the e d i t o r is then called   i n t h i s case the function must be an i n t e r p r e ted one  i . e . have an s-expression d e f i n i t ion  to f i n d the appropriate point and insert the break. for example  the user could 
 breakin alpha  before  cond containing return     which would cause a break just before executing the indicated form. a l t e r n a t i v e l y   he can c a l l for a break by using the function help. 
　　　f i n a l l y   the user can request a break at any time during a computation by simply depressing a special key on the teletype. the next time a function is c a l l e d   usually w i t h i n a few milliseconds  a break w i l l occur  and again the user can intervene and examine the state of the computation  etc. these c a p a b i l i t i e s are invaluable f o r l o c a l i z i n g problems in complex programs  especially recursive ones  and are powerful tools f o r f i n d i n g where to make changes that complement those described below that provide how to make changes. 
advising 
　　　pilot was o r i g i n a l l y motivated by the d i f f i c u l t i e s encountered in using computers for solving very hard problems  p a r t i c u l a r ly those in the area of a r t i f i c i a l i n t e l ligence.  these problems can be characterized as being extremely d i f f i c u l t to think through in advance  that i s   away from the computer. in some cases  the programmer cannot foresee the implications of certain decisions he must make in the design of the program. in others  he can compare several alternatives only by t r y ing them out on the machine. even a f t e r he gets his program debugged  he continues to make a l t e r a t i o n s to see t h e i r e f f e c t s . only by experimenting with his working program can he evaluate i t s performance or hope to extend i t s g e n e r a l i t y . since he cannot accurately predict the e f f e c t of changes on the behavior of the program 
because of i t s size and complexity  he must adopt the more pragmatic policy of   l e t ' s t r y it and see what happens.  in short  he must be able to t r e a t the computer as his laboratory. 
　　　unfortunately  making changes in programs  especially large and complex programs  is often not a simple matter. since they may require so much e f f o r t   many experimental changes are simply not implemented  with the result that the programs soon become   f r o z e n .   for t h i s reason  considerable a t t e n t i o n and e f f o r t in the design and development of pilot has been devoted to the problem of making changes. one of the results is the concept of advising. 
　　　the operation of advising consists or modifying the interface between i n d i v i d u a l functions in a program  as opposea to modi f y i n g the functions themselves  which is c a l l e d  e d i t i n g . 	the advantage of advising 
is that it allows the user to t r e a t sections of his own  or someone else's  program as  black boxes   and to make modifications to them without concern for t h e i r contents. since each modification is its e l f a small program  and modifications can be inserted so as to operate e i t h e r before or a f t e r the o r i g i n a l function would be run  advising is a very general and powerful concept. 
　　　advising is carried out in lisp by creating a new function d e f i n i t i o n in which the o r i g i n a l function d e f i n i t i o n is embedded  and surrounded by the  pieces of advice.  this procedure is completely general: the function being advised can be a r b i t r a r i l y large or small  complex or simple  compiled or i n t e r p r e t e d   a system function or one of the user's own. 

　　　the i n d i v i d u a l pieces of advice are each lisp expressions  and so they to are completely general. thus a piece of advice may simply change the value of some v a r i a b l e   or  at the other extreme  request a lengthy computation including perhaps c a l l i n g the e n t i r e advised function recurs i v e l y . advice can also be given so as to bypass the e n t i r e advised function. 

-1-

　　　for example  the user could have r e paired the problem in alpha shown e a r l i e r by giving the appropriate advice to rplaca instead of e d i t i n g alpha. since rplaca is called from many functions  the user would probably want to advise rplaca in alpha: 
advise  rplaca in alpha   cond   null u  
 setq u y     
as with break  t h i s would only modify the c a l l to rplaca from w i t h i n alpha. 
　　　this operation demonstrates the advantage of advising. it allows the user to make online modifications quickly and simply. in addition to using it for corr e c t i n g bugs  the user can perform modif i c a t i o n s for the sake of experimentation  undo the modifications if he wishes  t r y out other configurations  e t c .   a l l w i t h out d i s r u p t i o n to his h i g h - l e v e l   problem oriented t r a i n of thought. such disruption usually follows when implementing changes requiring a lengthy sequence of operations. 
　　　note that advising complements rather than competes with e d i t i n g as a way of making changes. in the early stages of debugging  the user is primarily attending to local phenomena in his program  and thus may f i n d it natural to make changes by e d i t i n g . in l a t e r stages  he considers his program more in terms of what each piece does  rather than how it does i t   and here advising is the t o o l he wants to use for making changes. 
advising as a tool for modifying the system 
　　　advising not only provides the user with a convenient t o o l for making changes in his own programs  but also with themeans for experimenting with and t a i l o r i n g the system to his own p a r t i c u l a r tastes. for example  suppose a user wished to nodi f y prettyprint to p r i n t comments along the r i g h t had side of the page  where a comment was to be indicated as an expression beginning with the atom *. knowing that superprint is the function that  does the work  of p r e t t y p r i n t i n g   he could 
advise superprint  cond   eq  car e  
 quote *    return  comment e           
and then define the function comment to do the appropriate formatting.  *  
td the comment feature is now a part of our system. however  it was i n i t i a l l y i n troduced in precisely t h i s way  in order to evaluate i t s usefulness. advising thus provides system designers with a quick means for t r y i n g out new features. 
　　　admittedly t h i s p a r t i c u l a r piece of advising requires the user to have some detailed knowledge of the workings of prettyprint. however  the important point is that by using advise  changes can be easily effected  even with system functions where changes were not anticipated. 
conversational 	input 
　　　pilot  can be vtewed as an interface between the user and his programs. the following somewhat over s i m p l i f i e d diagram i l l u s t r a t e s the user-pilot-program conf i g u r a t i o n : 

　　　most of the effort in pilot is concentrated at interface 1 and 1. however  in order to be really effective  a programming laboratory should not only provide the means whereby changes can be effected immediately  but also in a way that seems natural to the user. accordingly  we have been experimenting with an englishto-lisp translating program that operates at interface 1  and translates the user's requests to pitot into the appropriate lisp computation. the following dialogue gives the flavor of user-pilot interactions obtained with this program. user input is preceded by   .  

i 	understand. 
 contlnui-: 
progress 

- 1 -

       the user instructs pilot to advise the function progress with the statement beginning  tell progress:.1 pilot r e cognizes t h i s form of request  but does hot understand the part about outnumbering. the user then attempts to explain this with the input beginning the x outnumber the y. this statement w i l l cause an add i t i o n to pilot's already f a i r l y extensive capability for converting english statements to lisp  so that pilot w i l l be able to understand expressions of this type encountered in the future. however  pilot cannot interpret the phrase the number op x in z in this explanation  and so i n t e r rogates the user at this lower l e v e l . at t h i s point  the user defines a new function number  and then explains the troublesome phrase in terms of t h i s function. pilot responds that it  understands.  the user then instructs pilot to continue with what it was doing  namely translating the explanation of outnumber. when t h i s is completed  the user instructs pilot to continue with the o r i g i n a l request  which pilot now successfully completes. 
　　　the current english-to-lisp translator contains a large assortment of useful  if ad hoc  transformational rules w r i t t e n in flip    1     a string processing language embedded in the bbn lisp system. the set of flip rules can be easily expanded or modified. for example  the dialogue shown above resulted in rules for transforming expressions of the form the x outnumber the y on z and for the number of x in z being added to the translator 
　　　in addition to the flip portion of the translating program  there is a postprocessor which allows intermingling of lisp expressions with the english  as well as a sort of pidgin-lisp which looks l i k e lisp with the parentheses removed. the translator also contains specialize i n f o r mation for dealing with quantifiers and and-or clauses. for example  the following expressions w i l l be translated correctly into the equivalent lisp forms. 
no member of x is atomic and not null 
the first element of x is greater than the 
second and not less than the third 
the first element of some member of x is 
a number that is greater than the second element 
　　　the translator also  remembers  cert a i n contextual information such as what was the last operation requested  what function it referred to etc. for example: 
 tell foo: if its first argument is atomic 
　　　then return it  foo 
 what is its second argument  
y 
　　　we are not asserting that english is a good or even desirable programming language. however  if the user is thinking about his programs in english  then providing him the f a c i l i t y for expressing requests in english w i l l allow him to concentrate more f u l l y on the problem at hand. 
improving pilot 
　　　 pilot 	is the result of an evolutionary process extending over more than two years. 	however  there is no reason to assume that t h i s 	process has terminated  
nor that pilot has reached some sort of ultimate s t a t e .    this statement was written in my ph.d. thesis three years ago  and in the elapsed time  many of the goals established for improvements and additions to pilot have been realized in our present system. but the statement is s t i l l t r u e   and the process s t i l l continues. 
　　　one area of current interest is that of program-writing programs. programming languages are.currently designed to allow the programmer to express the operations he wants the computer to perform in a simple and concise fashion. however  often the programmer many not know precisely what operation he wants the computer to perform  although he may have a clear idea of what he wants the program to accomplish. that i s   he may be able to give a description of i t s output  or the changes it should make in a data structure. this is not to say that the programmer could not construct the program. however  a system which could accept more goal-oriented descriptions of tasks and produce programs to accomplish them  even if only effective for simple  subroutine-level tasks  would further free i t s users for high-level operations. such a system would require a f a i r degree of problem solving capabili t y   and should have a s u f f i c i e n t l y r i c h store of information about programming and programs to enable it to determine s i m i l a r i t i e s in tasks. it should be able to adapt previously w r i t t e n or constructed programs to a new task. in other words  we are t r y i n g to construct a system that can handle more of the routine aspects of programming  in order to free the human to concern himself more with the creative aspects of the problem. this is the basic philosophy of the pilot system: let the computer do i t . the significance of pilot is that it demonstrates t h i s f e a s a b i l i t y and d e s i r a b i l i t y of ths approach. even in i t s current form  pilot clearly shows that it is possible to get computers to participate i n   and cooperate w i t h   research e f f o r t s in 

-1-

programming to a much greater extent than is now being done. 
