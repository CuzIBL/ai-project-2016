the intelligent channel: a scheme for result sharing in logic programs 
simon kaslf and jack mlnker university of maryland 

1. introduction 
     the separation of logic and control in logic programs allows the programmer to write programs whose execution is determined by the interpreter. this characteristic of logic programs spurred research towards diversifying the means for controlling the execution of logic programs  and towards understanding and exploring the value of parallelism in logic programming. much of these efforts belong to the study of and/orparallellsm  i.e.  parallel execution of conjunctive/disjunctive goals respectively. 
     a brute force approach to and/or-parallellsm  i.e.  executing every possible subgoal in a conjunctive goal has two major drawbacks: combinatorial explosion of processes and the need for many active binding environments. the latter arises due to the interaction of shared variables in conjunctive goals. 
     we propose a scheme to alleviate the above difficulties. for simplicity  we demonstrate our approach with examples where atoms share a single variable. the approach is applicable to horn-clause logic programs . 
1. a model for a n d / o r parallelism 
     we first introduce a model that serves as a unifying basis for constructing various schemes for parallel execution of logic programs   see  for details. 
     or-nodes are created when a conjunctive goal of n atoms   n   l   is split into n subgoals  that may be executed in parallel. when such or-nodes are created as descendants of an and-node  a new environment is created at each of the newly created sons. the environment of an or-node is a set of variable templates vi   where each variable template is a pair: 

vt is a new private variable id  ini  is the location of the current instantiation of the variable vi  and outi is the location where the partial bindings for vt are stored. 
     the environment of and-node which is the direct ancestor of the new or-nodes is modified with an equation: 

where v i -s are all the newly created variables  fig. l.a . the functional semantics of unif is that of determining if the bindings for the v -s unify. the communication among conjunctive nodes is determined using the procedural specification of unif. 
     and-nodes are created as a result of a successful unification of a goal represented as an or-node and some procedure head in the program. 
	analogously 	to 	or-nodes  	the 	environment 	of 
and-nodes is a set of variable templates. let v be some variable that occurred in an or-node a  and let t1 . . .   tn be the partial bindings for v and ¦Á obtained 
by creating all possible sons of a. we add the equation 

to the environment of ¦Á  fig. l.b . merge performs a set union of the bindings to the variable v. as before in the case of unif  the operational specification of procedure merge is left unspecified. merge-unif equations allow to separate the process of resolution/reduction from the process of obtaining the bindings for shared variables. this separation of process control  literal sequencing  and communication control  management of bindings  allows the interpreter to define various communication strategies among conjunctive goals  l . in particular  the communication structure may be determined by the setting of the variable templates in the environments of an and/or tree  and enforcing lazy/eager evaluation of the equations. 
1. intelligent channel 
let p x  q x  be an and-node  and let p x  and 
q x  be its two or-sons. if 't' is a binding for p x  q x  then there exists at least two paths i p p'  and i q q'  such that i p p'  and i q q'  are v-compatlble  i.e.  the composed substitution along each path is unlflable with 't' for x. 
     thus  it is possible to pursue compatible computations of p and q in parallel until they both reach the first or-node where a decision must be made as to which path to pursue next. at the conflict point a binding is performed at each of the parallel processes to its own private copy of the shared and-varlable x. this binding is reported to a channel process assigned to a shared variable. all newly created nodes are suspended until a decision is made as to which partial or-binding to pursue. the selection criterion is based on the compatibility of all parallel or-computations that originated from the conjunctive goals with the shared vari-

1 	s. kasif and j. minker 
able. we refer to partial bindings so obtained as candidate bindings. once a candidate binding is chosen  only those suspended nodes whose execution is consistent with this binding are fired. when some partial binding is established to be a failure binding  this information is propagated up  and all the computations contingent on this partial binding are terminated. 
     for example  consider the logic program below for the goal 
a parallel execution of the program is given in fig. 1. in 
fig. l.b i p p1  is compatible with i q q1   i q q1  and 
i q q1 . the path i p p1  is compatible with i q q1   and i p p1  is compatible with i q q1  . the interpreter selects 'a' as a candidate binding for x. in fig. l.c 'a' was recognized to be a failure for p and subsequently for 
  similarly  'c' is chosen for execution and is marked as a failure binding for  as a result all the computations depending on a/x and c/x are removed yielding the snapshot in fig. l.d. finally  the binding 
'b'/x is selected yielding a successful parallel search  fig. i.e. 
     the evident benefits that stem from maintaining compatibility of parallel executions of or-paths are not immediately lmplementable within the framework of existing control constructs. below we present an algorithm  termed intelligent channel  that combines and-parallelism with backtracking on partial bindings. ic-l is based on a new control construct  select binding that restricts the parallel execution of multiple branches in an and/or tree to the branches compatible with the selected binding. 
a l g o r i t h m intelligent channel 1  ic-l  
     to clarify the presentation of the algorithm we present a semi-synchronous algorithm in which expansions of an or-node are obtained simultaneously. 
     ic-l consists of three parts: or/and-node execution and channel process execution. the creation of and/or nodes is as described in section 1. 
or/and-node 	executions 	extend 	the 	creation 	of 
and/or-nodes with communication among conjunctive goals  and with pruning branches based on failure bindings. the channel process is delegated to the solution of merge-unef equations accumulated during a partial execution of a program and to the selection of candidate bindings. ic-l follows: 
or-node execution 
     1. if the node is null or solved report success to the parent and terminate. otherwise: 
     1. if the node is enabled  expand it by generating all possible successors. the enabling criteria for 
and/or nodes is the selection of a candidate binding which is consistent with the composed substitution used to derive the node. the successors are generated as usual  by unifying the node with the set of axioms in the program. however  the instantiation of free variables in the node is determined by the candidate binding selected by the channel assigned to the free variable  and is obtained by accessing the  ln  field of the variable template. this is how communication takes place among conjunctive goals 
     1. suspend ail newly created sons until the channel process selects a candidate binding which is consistent with the composed substitution used to generate the new sons. 
     1. report all newly computed partial bindings to the channel process; i.e.  all partial bindings obtained by a substitution of the form:  are reported to the channel x. for simplicity  in the first version we insisted on mutual exclusion in step 1 among all active and-node processes  i.e.  only one and-node at a time communicates its partial bindings to the channel. a n d - n o d e execution 
     1. if a node is enabled  create all its or-sons  otherwise  suspend. sons of an and-node are created by splitting the conjunctive goal associated with the node into independent subgoals that interface through the unif equation. 
     1. for each new shared variable x create a shared channel data-structure denoted as channel x  and a channel process that monitors the nondetermlnlstlc execution of its sons. this is achieved by setting the variable template of  for all such variables vt that emerged from the variable x. thus  all vi s that emerge from x share the same current instantiation. 
     1. propagate up final/failure bindings for the node. channel process execution 
     1. for each channel check newly computed partial bindings against the set of candidate-bindings  thus  performing a partial solution of the merge-unif equations. 
     1. whenever a failure binding is discovered  terminate the failure paths. 
     1. whenever the set of candidate bindings is empty  select a new candidate binding and activate all and-nodes suspended on this binding. 
algorithm ic-l 
assign goal to and-process and enable it. 
repeat until the goal is solved: 
execute all active and-node processes. 
execute all active or-node processes. 
execute all channel processes. 
     1. discussion 
     the major advantages of our approach are that only compatible computational paths are executed simultaneously  i.e.  several branches of an and/or tree are explored in parallel while maintaining only one active 

environment; the degree of parallelism may be moni-
tored by modifying step 1 in the channel process to select multiple bindings. the combinatorial explosion that arises as a result of expanding the complete and/or tree is reduced  and many useless computations are eliminated. 
step 1 in the channel process is the key to completeness and efficiency of 1c-1. analogous to procedure select node in a conventional logic programming interpreter   select binding is the control component of 1c-1. it is not difficult to verify that if we select bindings in a breadth-first fashion  ic-1 is a complete search 
	s. kasif and j. minker 	1 
strategy. however  if a  depth-flrsf-llke selection strategy is used completeness is not guaranteed. 
