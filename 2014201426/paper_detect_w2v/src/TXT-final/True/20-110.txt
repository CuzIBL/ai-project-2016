 
　　in this paper  we propose a mixed approach for motion planning that decomposes the problem into two levels. at the global level  we build a graph whose nodes represent relatively large cells of the configuration space of the robotic system. adjacent cells are connected by edges weighted by the probability for the local planner to succeed in computing a 
　　trajectory from a point in one cell to a goal in the other. these probabilities are used by a minimum cost path finding algorithm to generate subgoals for the local planner. they are updated using a bayesian rule from the results of the execution of planned trajectories at the local level. at the global level  no geometric information is stored  thus eliminating the expensive transformation of obstacles into the configuration space needed by usual global methods. we take advantage of the ability of our local planner to move close to obstacles so that only a crude discretization of the configuration space is needed. this makes it possible to apply this technique to robotic systems with a large number of degrees of freedom. in mobile robot applications  sensors being used by the local planner  this method achieves the learning of planning strategies in an unknown environment without building a complete geometric model of the world. 
1. introduction 
1. position of the problem 
     the general problem of motion planning can be stated as follows : given an algebraic description of the boundary of the moving objects and of the obstacles in cartesian space  find a collision free path for the moving objects from a set of initial positions to a set of goals. this general problem can be decomposed in a variety of sub-problems  according to whether the description of the world is planar or three-dimensional  whether there is only one moving object or many of them  whether there are connected by revolute or prismatic joints to form articulated chains or not. theoretical issues posed by this problem have been thoroughly examined by schwartz and sharir  sc . they propose an algorithm answering the general motion planning problem  based on tarski's algorithm for deciding statements in the quantified elementary theory of real numbers. their algorithm  which is not of direct practical application  is polynomial in the number of constraints describing the obstacles  but exponential in the number of degrees of freedom. other works suggest the inherent exponential complexity of planning. an early result by reif  re  proves pspace hardness of a special instance of the planning problem. 
other special cases where in turn examined by hopcroft  joseph and whitesides  ho   spirakis and yap  sp  among others. 
　　few practical algorithms have nevertheless been proposed for the case of highest interest  that of an articulated chain of solids in a three dimensional environment. algorithms developed by lozano-perez  lo  
faverjon  fa1  fa1 t are based on a representation of obstacles in the 
configuration space of the manipulator. the configuration space of a system is any set of independent parameters that enables to describe the position of all points bound to the moving bodies. as a straightforward translation of the description of obstacles from cartesian space to configuration space is not possible for manipulators  these algorithms rely on a subdivision of configuration parameters in small ranges. this provides a grid whose cells are either labelled as free  or intersecting 
configuration obstacles  the transform of obstacles in configuration space. a path is searched as a sequence of nodes in the graph describing the connectivity between free regions of configuration space. 
     such a description requires a memory space exponential in the number of configuration parameters  and again  planning of a path is exponential in the number of configuration parameters. this imposes a practical limitation on the number of degrees of freedom involved: known algorithms limit themselves to planning a global path for the first three joints of a manipulator  while a heuristic approach is used for motions of the hand. 
　　on the other hand  local methods have proved to be very powerful for computing motion of a manipulator. local information on the environment only is used to compute displacements at any time  without keeping track of any landmarks. the so-called potential field method relies on a minimization including a term attracting the manipulator towards the goal  and repulsive terms that push bodies of the manipulator away from the obstacles. in  ft1  we propose an alternative to the potential field method for locally computing trajectories. a task is expressed by the minimization of the relevant measures of the problem written as a function of configuration parameters. moving objects have a simplified local view of the environment as planes separating them from the obstacles  that are transformed into linear constraints in configuration space. 
1. overview of the approach 
　　in this paper we propose to uncouple the general problem of path planning into a low complexity local planner and a higher complexity global planner working on a graph of cells representing relatively large sets of configuration parameters. the main idea underlying this approach 
faverjon and tournassoud 1 

is that we want to turn the power of local methods to profit so as to deal with the high complexity of global planning only at the relevant level of description. at the higher level no geometric description of the obstacles is used but only weigths indicating the probability for a trajectory computed locally not to lead to any 
given initial and goal configurations  a 
classical minimum cost path finding algorithm in the graph yields a list of cells giving the global shape of the path joining the node containing the initial configuration to the node containing the goal. then the robot  starting from its initial position  describes a trajectory computed by the local planner  taking as subgoal a point located inside the next cell on the path. during the execution of the path  the weights are updated using a model of learning from results of motions generated by the local planner. 
　　the robot eventually reaches the final goal  or there is failure  meaning the robot is blocked while aiming at some cell. in this case  we put a higher weight to the corresponding transition and compute again a 
　　global path from current configuration  based on the updated weights. this produces a new path avoiding the problematic arc. 
     let us underline that this approach is relevant only in the case it is performed using a loose grid in configuration space  or we again deal with a space of small cells either occupied or free  which is not better than the global approach in terms of computational cost dealing with a loose graph is only made possible because of the intrinsic power of the local planner that produces long pieces of collision free trajectory. 
　　our approach presents other interesting features. first local computation can be based on a local model of the visible obstacles acquired through proximity sensors such as ultrasonic sensors  or a stereo vision system  as a substitute to a complete geometric model of the environment. transitory mobile obstacles will in particular be taken into account by the local planner. 
　　figure  la  shows the trajectory of a mobile robot in an unkown environment using this approach. figure  lb  shows the trajectory obtained with the same initial and goal positions when we take into account the knowledge obtained from the first execution. 
　　the following sections describe in more details the different parts of this approach  namely the sute graph  global planning  local planning  and the learning process. 

figure 1. a  before learning  b  after learning. 
1. the state graph 
　　in the sequel the term robot stands for any robotic system regardless of its nature  multi-linked manipulator or mobile robot  and of the number of moving objects involved. we denote  q1 ... q1  a set of n dimensional 
1 	robotics 
configuration parameters describing the state of the system. we assume that an algorithm to locally compute pieces of trajectories is available. let us first partition configuration space into cells of the type 
 are the 
configuration parameters of the center of cell c   and & is the width of a cell in the k-th direction. starting with this description we build a graph whose nodes stand for the cells themselves. it is called state graph in the sequel. when the robot configuration lies inside a cell c - it is said to be in state cr each node has in neighbors  namely the nodes which stand for cells of centers   these represent rectangular transitions in configuration space. 
     as opposed to the standard configuration space approach  we will store at this higher level no description of the obstacles as seen in configuration space. for each oriented transition between two neighboring cells c  and c; in the state graph we only memorize a weight that estimates the difficulty the robot has to enter cell c. when coming from cell c -. more precisely we define pij -. as the probability for the local 
planner to succeed in making the robot enter cell c  from neigboring cell 
cj  when aiming at some point located inside c j 
   we call path any connected sequence of nodes of the state graph. the probability for a path to provide a successful trajectory is defined as the product of probabilities pij along the path. this implies we make an hypothesis of independence  namely that the probability of realizing a transition is independent of the sequence of nodes we followed so far. in practice we attribute to each arc of the graph a weight equal to - log pij  and we minimize the cost for traversed transitions along 
the path from initial cell cq towards goal cell 
     initially  in absence of any infomation on its environment  the robot initializes the graph with given a priori probabilities ofpij=p. hence the path we compute first is a path of minimum length in terms of the number of cells traversed from the initial configuration to the goal. later as probabilities vary to reflect the knowledge the robot has of its environment  the path we compute realizes a compromise between minimum distance and the assurance that we will reach the goal. 
1. on global planning 
1. searching for a path 
　　for searching a path from an initial cell to a goal one  we make use of an a* algorithm maximizing the product of probabilities pij along the path. 
this translates into minimizing the cost  	for traversed 
transitions along the path from initial cell cq to goal cell algorithm makes it possible to use a heuristic function to guide the search. this function gives at each node an estimate of the cost of the optimal path from this node to the goal. this algorithm yields the optimal path if the heuristic is admissible  this is if the heuristic cost hi for any node i is lower than the optimal cost from that node to the goal node. 
     the heuristic cost we use for a node c j is the number of cells n - that are traversed by a straight line to the goal  weighted by the average probability ♀ for all transitions of the state graph. 

this heuristic function is generally not admissible  but gives good 

results in our experiment*. it can be seen as an estimate of the mininum cost we expect if we suppose that the difficulty to move around is about the same everywhere. 
     it must be also noticed that since all weights are finite in our model and the graph is connected  a path is always found by the global planner. thus  the feasibility of a trajectory has to be evaluated from the actual cost of the global path. we will see in section 1 how the heuristic cost function can be used for this purpose. 
1. choosing subgoals on the path 
     as we run the local algorithm  a simple choice of a subgoal is the center of the next cell on the path. however  this choice yields a trajectory generally close to the drunkards walk because of the discretization. in order to avoid this reprehensible behavior  we propose another choice that gives a smoother trajectory. the idea is to locally optimize the length of the trajectory. so  the subgoal is chosen as the point on the common face with next cell that minimizes the sum of: 
  the distance from the current position to this point  
  and the distance from this point to the center of one of farther cells on the path. 
the farther this cell is chosen  the more we anticipate future displacements. in the case the robot is blocked  nearer cells are used in order to provide new subgoals. an example of a trajectory obtained with this method  in absence of any obstacle  is shown in figure 1. 

trajectory with no anticipation trajectory with a one-cell anticipation figure 1 : compulation of subgoals 
1. on local planning 
     the local planner takes as input a subgoal in the configuration space and tries to move the robot to this goal taking into account information on the local environment. this information can be obtained by sensing  using proximity or vision sensors  or from cad models of the robot and the environment. note that in our approach  no hypotheses are done concerning the local method. the interaction between the global and local levels is limited to the sending of subgoals from the global to the local planner  and the observation of the successive configurations of the robot by the global supervisor to achieve the learning. 
     we have described in  ft1  the approach we use for local computation of the trajectory of a general manipulator system. it is posed as a minimization of a functional of the configuration parameters under linear anti-collision constraints. for the standard instance of the path planning problem  go from one point to another in configuration space  we simply minimize the norm of the difference between actual joint increments and desired ones  computed as the vector supported by the line towards the goal in configuration space respecting bounds on maximum velocities. a local model of obstacles in configuration space  namely an intersection of free half-spaces of configuration space  is derived from tangent planes separating the mobile object from each obstacle in cartesian space. for each moving solid that lies at a distance d less than an influence distance di from an obstacle at current time /  we impose the following constraint on the variation of the distance: 
		 1  
where d1 is the security distance at which the robot must stop  ♀ a positive weighting coefficient for adjusting convergence speed  and & the time increment. this constraint thus realizes a velocity damper forcing the moving solid to stay on its side of the separating plane. the variation of 
the distance can be written . 1q where 1q is the n 
dimensional vector of the variations of configuration parameters  and j the jacobian matrix for the robot at point x of the moving object nearest from the obstacle  see figure 1 . from inequation  1  we then derive a simple linear constraint on joint increments sq between time t and f+&  which writes witii  -}i.n: 

figure 1 : the velocity damper constraint 
     in  ft1  we describe this approach with more details and present the extension to the case of a robotic system composed of more than one manipulator. we also make use of a similar kind of constraint that presents more anticipation as far as coordination of movements is concerned : moving objects are bound to stay on their side of a separating plane  possibly moving that is tangent to both moving bodies  or the moving body and a fixed obstacle. figure 1 illustrates a trajectory obtained using this method. 
     we use this kind of constraints in the examples that illustrate this paper  namely a system composed of one or more mobile robots described by discs  in a planar world of polygonal obstacles. details of the local method in this case are given in section 1. 
     note that all local methods may fail at some point because of local minima generated by concave arrangements of obstacles. in this case  the robot stops without reaching its goal. 
	faverjon and tournassoud 	1 

figure 1. avoidance of two manipulators. 
1. initial positions. 
1. intermediate positions. 
1. final positions. 
1. learning global knowledge from path execution 
1. the bayesian approach 
we will use as an estimate of p. when we have no a priori knowledge on the environment  we initialize the probability distribution with the uniform distribution law  that is . it can be shown that in this case  the mean value of p after n events  s of them being successful  simply writes: 
		 1  
     the proof is given in appendix. let us make the following remarks.   the absence of knowledge that we have modelized by a uniform probability distribution law can be interpreted simply from this formula: the a priori knowledge is the same as if we have already made two trials  one of them being a success  and the other a failure. this interpretation is helpful if we want to incorporate a priori knowledge: p1 can be initiated to 
where s1 is the number of successes for n1 hypothetic trials. 
  as the events xk are supposed to be independent  the probability distribution law does not depend on the order in which the events hapenned  and thus all the memory of a transition is expressed by the pair  n  s  where n is the number of events on this transition and s the number of successful events. 
1. updating probabilities 

　　we call py the probability for the robot to enter cell c  coming from neigboring cell c   if it is aiming at some point located inside cell c.. 
 when the local planner is realizing such a scheme  two types of events may happen: 
or success in entering cell cj  event of probability pij  
or failure in entering the cell  event of probability  a failure 
occurs either when the robot is blocked in its current cell  or when it is forced by the obstacles to enter another neighbor of c  before c.. in the following  we ommit the subscripts ij for clarity. 
we want to estimate the probalility p associated to a given transition from the events that happen during executions of trajectories. we use the bayesian approach as follows. 
   let us suppose that n events have hapenned so far that concern the given transition. the value of 1 in case of success and 
1 in case of failure. we denote xn the vector and/the probability distribution function. the bayesian learning model states : 

     in this recursive form  formulae  1  and  1  can be used to compute the probability distribution law ofp after n events  and its mean value that 
1 	robotics 
     updating of the transition probabilities is first performed whenever the motion supervisor detects a transition in the state graph. if the transition is the one ordered by the global planner  the corresponding probability is increased by incrementing the number n of events and the number s of successes. else the robot has been deviated from its way by an obstacle  and we decrease the probability of the desired transition. this is performed by incrementing only the number of events. in this case  we must also modify the path so that it remains connected. this is done by adding to the path the current node  and the common neighbor of the current node and the next cell on the path  hatched cells in figure 1 . 
original path 
added oals 
figure 1 : modification of the path when the actual transition is not the 
desired one. 
　　updating the transition probabilities is also performed when the robot is blocked before reaching its goal. if it is not inside the goal node  we decrease the probability of the desired transition and invoke the global planner using the updated state graph. as the probability of the problematic transition has been decreased  it will eventually be avoided by the newly computed path. if a failure occurs inside the goal node  the goal is declared not reachable. this event may have several causes: 
     - the goal lies inside an obstacle  or another connected component of free space . 
     - the local method failed to reach the goal because of obstacles inside the goal node. 

in the latter case  a solution would be to move the robot outside the goal i node by setting a subgoal in a neighbor chosen from local information  before aiming again at the goal. this strategy might succeed in making the robot pass round the obstacle. but the main problem in fact is to distinguish between the two cases above. elements of answer are given in i 
section 1. 
1. the motion planning algorithm 
the motion planning algorithm is written below in a c-like language. procedures in bold characters correspond to message exchanges with the local planner or the robot controller. 

i 
1. reasonning on the global knowledge 
1. deciding on the feasibility of a global path 
     as mentionned in the previous section  the case when die goal cannot be reached must be treated with some care. this happens when the robot intersects the obstacles in this configuration  or lies in another connected component of free space. in both cases  we do not want the robot to roam around indefinitely while trying to reach the goal. in practice we impose a threshold on the ratio of the optimal cost and the heuristic cost when we perform the planning starting from some cell c : 

     the heuristic function can be seen as the expected cost in case of uniform distribution of difficulty in the environment thus  if the actual optimal cost is much higher than this estimate  it means that the optimal path is much longer than the expected one  or that there exists on the optimal path one or more transitions with a low probalility of success. so  the constant k measures the relative length of the detour we tolerate in 
order to have a reasonnable chance to succeed. 
1. teaching by showing mode 
　　a simple way to give information to the system is to teach the robot some safe trajectories. while executing these trajectories  the system increases the probabilities associated with the traversed transitions. if these trajectories are repeated  the corresponding cost will become lower and lower. further  the system will use pieces of such trajectories when other trajectories will be computed automatically. however  if modifications of the environment are detected by the local planner  corrections will be made to the specified trajectories. 
1. exploration mode 
　　in this mode  the mobile has no a priori knowledge of its environment. we want it to behave properly after a number of executions of trajectories. a straightforward way to proceed is to generate goals inside one of the nodes with smallest history. the history of a node c * is simply defined as the sum onj of numbers n.- of events that have so far happened for transitions from neighboring nodes c. to c i the robot will thus try to explore first those nodes for which it has least information. 
　　when the path towards the goal is executed  the history of all traversed nodes is updated at the same time as transition probabilities. a problem arises when the path is declared not feasible. this does not give any relevant information on the difficulty to enter the goal node from a neighbor  but we increase its history although the corresponding transitions are not updated  so that the robot does not try again and again to enter a node that it cannot reach. this conveys an information such as  this goal configuration probably lies inside an obstacle or another connected component of free space . 
　　the exploration process ends when all nodes have received an history higher than a specified threshold. 
1. detecting abnormal situations 
　　once the environment has been thoroughly explored  we can make use of our knowledge to detect abnormal situations by comparing the events that happen to a priori probabilities. as an example  if a new obstacle appears in the environment  it can be detected from the failures it will imply for transitions with a high probability of success. 
1. adaptation of the size of the grid 
　　in order to decrease the number of nodes in the graph it may be useful to adapt the discretization of the configuration space to the planning difficulty in the various regions. this can be done by analysing the variation of the estimated transition probabilities. indeed  if we have too large cells  the transition probabilities will not converge towards 1 or 1 because of alternate success and failure. such transitions are characterized more precisely by a great variance for the value of events x*  equal to 
 to solve this problem  it is possible to split the corresponding 
	faverjon and tournassoud 	1 

node into several new cells  thus obtaining a finer description of this part of the environment at the global level. 
     in our work on global planning  fa1  we proposed to used an octree in the configuration space to represent configuration obstacles and free space of dimension 1. the octree is a tree based on a recursive subdivision of the 1d space into rectangular cells. the root represents the whole space. a cell is decomposed into eight cells whose side is half that of their father. this structure can be generalized to higher dimensions  the number of sons of a node being 1d in a d-dimensional space. it is called a 1d-tree. 
     using such a structure proceeds as follows. exploration starts with a regular grid corresponding to a relatively high level in the 1d-tree. when an event happens for a given transition  we first look at the variance of the value of such events and compare it to a threshold. if the variance is smaller than the threshold  the usual updating is performed. else  the aim node is split into its sons and new transitions are initialized as follows. 
     - transitions between sons and neigbors of the father are initialized assuming that the events that happened to the former transition are uniformly distributed on the 1d-1 new transitions. if the variance of the former transition is greater than the threshold  they are initialized with the a priori uniform law. 
     - transitions between two sons are initialized with the uniform law. this process can similarily be used for solving the problem of dead-locks inside the goal node. 
     splitting is performed until the size of a node is smaller than a threshold dependent on the ability of the local method to reach a subgoal at a distance corresponding to that threshold. 
1- validating tool 
1. overwiew 
     we have implemented a simulation tool for validating our approach. it deals with motion planning for one or two discs in the plane cluttered with convex polygonal obstacles. a straightforward application is motion planning for mobile robots. 
     the configuration space for a disc is the 1d space of parameters x and y corresponding to the position of the center of the disc. the configuration space is divided into square cells standing for the nodes of the state graph. the size of these cells is set to about the width of the corridors in which the robot navigates. 
     in the case of two discs  the state graph is obtained as the cross product of the discretized configuration spaces of both discs. 
     before giving some results  we describe in detail the local method we use in this particular case. 
1. the local method 
     we suppose that the mobile robot is able to build a model of its local environment at any time using proximity sensors or vision. in our simulation  the local environment is obtained by clipping the polygonal obstacles by a disc of visibility. 
1 	robotics 
     the principle of the method for avoiding an obstacle is to slide on one of the two common separating tangent lines to the mobile and the obstacle. this gives a better behavior of the mobile than the so called potential field method because of the anticipation it provides. 
     more precisely  a convex obstacle gives rise to two separating tangent lines. a line represents a candidate displacement from the current position to the point of contact with the obstacle. we add the displacement in straight line towards the goal to the list of candidate displacements. we then prune that list by only considering displacements for which the disc does not intersect other obstacles during the motion  see figure 1 . 

figure 1. displacement sa is not admissible  1h is admissible. 
if no admissible displacement exists in the half plane towards the goal  the robot is blocked and another global planning is performed after updating of the state graph. else the displacement we realize is the one that minimizes the angular difference with the goal. the robot is moved along that direction of a distance dependent on time increment and the all computation is performed again. 
1. results 
     figures 1 and 1 illustrate results for one disc. objects that are represented are : obstacles in grey  cells of the grid  the robot in its initial  hatched  and final positions. figure  1a  shows a trajectory executed without any knowledge of the environment small circles are positions at which the global planner was called. figure  1b  shows the second attempt whith same initial and goal positions. no failure occurs this second time. 
　　figure 1 shows  for a more complex environment  the path computed by the global planner after learning  1a   and the resulting trajectory  1b . the graph that is used is the result of 1 learning trajectories. the threshold for the ratio of the optimal cost and the heuristic cost was 1. 
     figure 1 illustates the method in the case of two discs. as rectangular transitions only are allowed  probabilities are initiated with the corresponding value for the given disc alone. if the width of a cell is about the size of a disc  we set a priori a low probability for transitions that would make both robots occupy the same square of the grid. if robots are much smaller  coordination of the motions of the discs is first left to the local planner  making use again of tangent separating lines to both discs. in that case cooperation of the two robots in constrained parts of the environment  for example crossing in a corridor  is performed by using the general learning scheme described in this paper. 
   the method we have presented in this paper is general and can be applied to various motion planning problems in robotics. learning of global strategies is performed very simply from the execution of trajectories. the method can be used to explore an unknown environment in mobile robot applications. knowledge of the environment can also be given to the system by showing it some safe trajectories. this approach in which the search for the global shape of the trajectory is deconnected from the fine local motion computations realizes the fusion between the two types of methods we have experimented earlier  and we think that some other interesting results will probably appear in the future  based on similar ideas. 
appendix : computation of a transition probability 

similar equations can be derived in the case of a failure  which proves the announced result. 
