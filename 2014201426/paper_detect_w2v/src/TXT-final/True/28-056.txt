 
although it is acknowledged that multi-way dataflow constraints are useful in interactive applications  concerns about their tractability have hindered their acceptance. certain local propagation algorithms that solve these constraints are polynomial  others  such as skyblue  are exponential. every system handles a specific problem and the influence of any particular restriction on the computational complexity is not yet precisely determined. in this paper  we present three theoretical results that allow us to classify existing multi-way constraint problems. especially  we prove that the problem handled by skyblue is np-hard. 
1 	introduction 
dataflow constraints are rapidly gaining popularity in interactive applications because they simplify the programming task. they are conceptually simple and easy to understand  and are capable of expressing relationships over multiple data types  including numbers  strings  booleans  bitmaps  fonts  and colors  vander zanden  1 . dataflow constraint solvers are used in numerous interactive systems  such as graphical user interfaces  spreadsheets  graphical layout systems and animation. 
　dataflow constraints are divided into two main categories. a one way dataflow constraint has one associated function for recovering its consistency. this function calculates output variables using the current value of input variables. the spreadsheet model  more formally known as the dependency graph model  hoover  1   only takes into account one-way constraints. this model is widely used in interactive systems  mainly because the solving process is based on an efficient incremental evaluation phase that topologically sorts the functions to execute. 
　a multi-way dataflow constraint has several functions  called methods  that may be used to satisfy it. the 
1 	constraint satisfaction 
solving process of problems that contain multi-way constraints needs an additional planning phase that assigns a method to each constraint  before the evaluation phase. 
　although multi-way constraints are more expressive than one-way constraints  they are less recognized because of concerns about their tractability. every solving algorithm handles a specific problem and the conditions that allow us to decide whether it is computationally difficult are not clear by now. 
　this paper aims at giving a classification for the computational complexity of the main existing multi-way constraint problems. 
1 	background 
a multi-way dataflow constraint system can be denoted as  v  c  m . v is a set of variables with a current value. c is a set of dataflow constraints and m is a set of methods that can satisfy the constraints. 
definition 1 a multi-way dataflow constraint is an equation that has one or more methods associated that may be used to satisfy the equation. 
　a method consists of zero or more inputs  one or more outputs  and an arbitrary piece of code that com-
putes the output variables based on the current value of the input variables  vander zanden  1 . a single-
output method determines only one variable. 
　a  dataflow  constraint system is often represented by a constraint graph gc as shown in figure 1  a . 
　local propagation is the technique used to solve multiway constraint systems  typically when new constraints are incrementally added. it works in two phases: 
  the planning phase directs the edges in gc by assigning one method to each constraint. the result of this phase  i.e.  the solution of the corresponding problem  is a valid graph gm called method graph  see figure 1  b  and  c  . 
definition 1 a method graph gm is valid if  1  every constraint has one method associated with it in gm  and  1  gm has no variable conflicts  that is  

each variable is the output of  at most  one method  i.e.  has at most one incoming edge . 
  when the method graph gm contains no directed cycles  the evaluation phase executes the methods in some topological order. when a method is executed  it sets the output variables to values such that the constraint is satisfied. when gm is cyclic  strongly connected components are collected and generally passed to external solvers to be satisfied as a whole. 
　ignoring the operations involved in method execution and cycle solving  the evaluation problem is in the class 
p of polynomial problems. indeed  topological sort is where d is the maximum number of methods associated to one constraint. we concern ourselves with the computational complexity of the problem solved by the planning phase that will be called constraint planning problem in the following. 
　planning algorithms can be divided into three main categories.  1  deltablue  freeman-benson et a/.  1  and skyblue  sannella  1  work by propagating the conflicts from the perturbations to the leaves of the constraint graph.  1  the propagation of the degrees of freedom scheme  in short pdof  selects the methods in the reverse order  i.e.  executing first the methods that were chosen last . this algorithm has been used in sketchpad  sutherland  1  and quickplan  vander zanden  1 .  1  a third approach is related to the classical problem of graph matching. it gives the maximum-matching algorithm  gangnet and rosenberg  1 . 
1 	different types of constraint planning problems 
existing local propagation algorithms solve different planning problems that imply various tradeoffs between expressiveness and performance: 
  required constraints only  or both required and preferential constraints that are satisfied if possible 
  single-output constraints only  or multi-output ones 
  acyclic constraint graphs only  or cycles allowed 
  method restriction imposed or relaxed 
definition 1 the method restriction imposes that every constraint method of a given problem must use all of the variables in the constraint either as an input or an output variable  vander zanden  1 . 
　moreover  some systems allow directed cycles in the method graph  whereas others do not  which leads in fact to two different  and incomparable  problems. indeed  a general computational result states that a restriction 

figure 1: a constraint graph is a bipartite graph whose nodes are constraints and variables  respectively represented by rectangles and circles. each constraint is connected to its variables. this is illustrated in figure  a . figures  b  and  c  show two possible method graphs. the method selected for each constraint is symbolized by directed edges from the constraint to the output variables  and from the input variables to the constraint. the method graph in  b  contains no directed cycles  as opposed to the method graph in  c . 
imposed on a solution does not necessarily make the corresponding problem easier  papadimitriou  1 . 
　table 1 shows the computational complexity of selected existing constraint planning problems. 
1 an np-complete planning problem with method restriction 
disjunctive constraints do not respect the method restriction  e.g.  constraint av1 has two methods that output to either variable a or b with no input . however  these constraints are not usually needed in interactive systems. therefore  all of the propagation algorithms impose the method restriction. the problems handled by these algorithms are in p  except cp1  see table 1  which has not been yet analyzed. 
　the only known np-completeness results aim at problems acp1 and acp1  maloney  1  which are not very interesting in practice because they relax the method restriction. 
　the following theorem states an np-completeness result about the problem cp1 for which the method restriction holds and which is handled by skyblue. 
theorem 1 let g be a dataflow constraint system for which the method restriction holds. 
　then proving the existence of a valid method graph  cyclic or not  corresponding to g is np-complete. 
　the proof and the polynomial reduction involved in it are described in following paragraphs. 
1 	polynomial reduction 
in section 1  we prove that the known np-complete problem  exact cover by 1-sets   papadimitriou  1  
trombettoni & neveu 


table 1: computational complexity of constraint planning problems. cycles in the constraint graph are allowed. 
constraints are required  not preferential . every problem depends on three characteristics:  1  a problem that only accepts acyclic method graphs is designed by acpi  i  {1..1}   whereas a problem that accepts both acyclic and cyclic solutions is designed by   1  the method restriction;  1  the presence of single-output constraints only. the complexity of problems cp1  cp1 and cp1 is not yet known  especially  which is handled by skyblue. 

can be reduced to  constraint-planning  i.e.  cp1 . this reduction will be called planning reduction. 
definition 1  exact cover by 1-sets  let x be a finite set  such that  = 1q for some integer q. let e 
be a family of sets that contain 1 elements of x each. every element of x belongs to at least one 1-set of 
does e contain an exact cover for x  that is  a subset 
s of e such that every element of x belongs to exactly one 1-set of s  

figure 1: an instance of the  exact cover by s-sets  problem. x = {a.../}. the 1-sets in e = {1...1} are represented by hyper-arcs  as shown in  a . the unique solution 1 = {1} is shown in  b . 
let g = {x e  be an instance of  exact cover by 1-
sets . let g' =  v c m  be an instance of  constraintplanning obtained by a planning reduction applied to g as follows: 
  variables in v are divided into two sets varx and vare. constraints in c are divided into two sets constx and conste. 
  each element i of x corresponds to one variable i-at-most of varx. 
1
　　this additional hypothesis discards trivial instances while keeping the problem np-complete. 
1 	constraint satisfaction 
  a 1-set p = {a  1  c} in e corresponds to a constraint setp of conste connecting six variables.  has two triple output methods which indicate whether the 1-set p is either present or absent in the solution. the present method outputs to the three variables a-at-most  b-at-most  c-at-most of varx  it ensures 
that no other 1-set will cover the corresponding elements.  the absent method outputs to the three variables a-p  b-p  and c-p of vare. 
  when element i of x can be covered by n different 1-sets  variables  of 
vare are constructed. one constraint i-at-least of constx is also built  that connects these variables. i-at-least has n single-output methods  one for each variable in the constraint. the method that outputs to variable  ensures that element i of x is covered by  at least  the 1-set pk. 
　figure 1 shows an instance of  exact cover by 1-set  that is reduced to the  constraint-planning  instance of figure 1. 
　the planning reduction is based on the following intuition. one element i of x appears in exactly one 1-set of solution s. thus  i appears at most once and at least once in a 1-set of 1. this is translated into the planning 
problem as follows: 
   at most once  if the 1-set p belongs to solution 1  then the present method of setp is selected in the corresponding constraint planning problem. thus  the variables determined by setp ensure that no other 1-set than setp covers them  as this would lead to variable conflicts. 
   at least once  as said above  a constraint i-at-least directed onto variable i-p ensures that element i of x is covered by the 1-set p in the solution. in fact  no method can be selected for constraint i-at-least  thus involving no solution  if every connected variable is the output of an absent method. 


figure 1: valid method graph after transforming the instance of  exact cover by 1-sets   figure 1 . 
1 	p r o o f of t h e o r e m 1 
first  the planning reduction is  indeed  one 
1-set of e corresponds to one constraint  five methods  nine edges  and three variables in the planning problem. one element of x corresponds to one constraint and one variable. 
　second   constraint-planning is in atp since verifying that a method graph issued from a planning reduction is valid is  indeed  it just has to be verified that every variable is determined by at most one constraint  and that every constraint has one method selected for it. 
　finally  the two following paragraphs prove the equivalence between  i  a solution s for any instance g of  exact cover by 1-sets  and  ii  a solution s' for the instance g' of   constraint-planning  obtained by applying to g the planning reduction. 
 i  -   ii  based on 1  s' is obtained by selecting present methods for the constraints setp in conste when the 1-set p is in s. the absent method is selected for the 1-sets that are not in s. every constraint i-at-least in constx is directed onto variable i-p of vare when the 1-set p is in 1. variable i-p is an input of the present method selected for the constraint setp in conste. by construction  every constraint has one method selected for it. 
　by hypothesis  every element of x belongs to exactly one 1-set of s. since there is no intersection between any two 1-sets in s  this construction does not generate conflicts on variables i-at-most of varx. 
　every element i of x is covered by  at least  one 1set p of 1. by construction  setp is activated with the present method that outputs to i-at-most by construction  variable i-p is determined by constraint i-at-least  thus there is no variable conflict generated on i-p. the other variables of constraint i-at-least do not provide con-* flicts because they are linked only to two constraints and are not determined by i-at-least thus  for every element i of x  no corresponding variable in the constraint planning problem can cause a variable conflict. 
 ii  -   i  based on s'  s is built by collecting a 1set {a b c} when the present method that outputs to variables a-at-most  b-at-most  and c-at-most is selected. since the method graph is valid  the intersection of any two 1-sets in s is empty. 
　let us consider every constraint i-at-least of constx in 1 . let i-p be the variable determined by i-at-least i-p is necessarily an input variable of constraint setp that 
determines variable i-at-most  otherwise a variable conflict would occur on i-p. by construction  i necessarily belongs to a 1-set in s. 
1 	c o m p l e x i t y of 1-output constraint planning problems 

figure 1: a 1-output constraint setp transformed into two 1-output constraints. the motifs next to a constraint indicate the possible methods. 
　we know that when  constraint-planning  is restricted to single-output constraints  the problem complexity comes down to p  cp1 . the planning reduction shows that  constraint-planning is np-complete with 1-output constraints. a natural question is therefore  whether the 1-output constraint restriction would yield a polynomial problem or not. 
theorem 1 let g be a dataflow constraint system for which the method restriction holds. g contains methods that have at most two outputs. 
　then proving the existence of a valid method graph  cyclic or not  corresponding to g is np-complete. 
proof. every 1-output constraint setp can easily be transformed into two 1-output constraints and a 
trombettoni 1c neveu 


table 1: computational complexity of constraint planning problems. the contributions of this paper are bold-faced. 

 dummy  variable  as shown in figure 1. the global behavior remains exactly the same1. 
1 influence of the method restriction on problems with cyclic solutions 
the following theorem states that the method restriction has no influence on the computational complexity of the constraint planning problem when cyclic solutions are allowed. 
theorem 1 let c be a class of dataflow constraint systems and let pc be the problem of existence of a valid method graph  cyclic or not  for any instance in the class c. let p'c be the restriction of  to constraint systems that satisfy the method restriction. 
   then  are polynomially  actually logspace  equivalent. 
the proof is based on the method transformation. 
definition 1 letgi = {v1 c1 m1  be a constraint system. based on the method transformation provides a constraint system such that:  1  methods in for which the 
method restriction holds  occur unchanged in and  1  every method m1 in m  for which the method restriction does not hold is replaced by a method m1 in m1 
for which the method restriction holds: m1 has the same output variables as m1 and has all of the other variables of the associated constraint as input. 
note that this trivial transformation is log-space. 
thus  theorem 1 can be applied to problems that are in p or are np-complete. 
proof of theorem 1. first  can be reduced to since is a restriction of s e c o n d   c a n be reduced to thanks to the method transformation that reduces a constraint system  into a constraint system  for which the method restriction holds. we prove the equivalence between  i  a solution of  and  ii  a solution of 
　　1  figure 1 illustrates that every variable is determined by a constraint. thus  no solution can be found for 1-output constraint problems when the two 1-output constraints are selected in opposite directions. 
1 	constraint satisfaction 
 it  -   i  a valid method graph of g1 can be transformed into a valid method graph of g1 since g1 is the same as g1 without certain edges. this does not induce variable conflicts. 
 i  -   it  a valid method graph of g  can be transformed into a valid method graph of g1 since every edge added by the method transformation connects a constraint and one of its input variable. this does not generate variable conflicts. 
　note that if directed cycles are not allowed in the solution  the last implication is false because adding an input edge could introduce a directed cycle. 
1 	synthesis 
these three theorems allow us to deduce the three missing computational complexity results  as shown in table 1. since cp1  which is np-complete  is a restriction of cp1  and cp1 is in np  cp1 is also np-complete1. theorem 1 proves that cp  and cp1 have the same computational complexity. 
　since the table is now complete  we can highlight interesting points about the constraint planning problems handled by existing algorithms. 
skyblue problem cp1 assumes that the constraints must be required  whereas skyblue  sannella  1  can handle one type of preferential constraints. therefore  the skyblue problem is np-hard. the np-completeness result given by theorem 1 makes the exponential worst case time complexity of skyblue less surprising. however   sannella  1  has proven that skyblue could reach this worst case complexity even on problems acp1 and cp1 that are in p. 
quickplan quickplan  vander zanden  1  cannot be extended without making the corresponding problem np-complete. indeed  the gap between acp1  in p  and acp1  np-complete  is due to the method restriction  as described in  vander zanden  1 . moreover  the gap between acp1  in p  and cp1  np-complete  is due also to cyclic solutions being accepted or not. 
1
theorem 1 applied to cp1 and cp1 also proves this result. 

　the companion paper  trombettoni and neveu  1  proves that there exist instances of   constraint-planninf issued from the planning reduction which only have cyclic solutions  otherwise p would be equal to np . 
maximum-matching the maximum-matching problem is in p  gangnet and rosenberg  1 . since the gap between cp1 and cp1 lies in the single-output constraint restriction  maximum-matching cannot be extended to multi-output constraints. 
　note that maximum-matching can also solve problem cp1. indeed  theorem 1 can easily be extended to the problem of finding a solution  thanks to a reverse transformation. so one needs to  1  transform an instance of cp1 into one of cp  with the method transformation   1  call maximum-matching on the cp1 instance and  1  retrieve the solution  if any  with the reverse method transformation. 
1 complexity of problems with acyclic constraint graphs 
we know that an acyclic constraint graph cannot yield a method graph with directed cycles. the restriction of the two problems acpi and cpi  i  {1}  to acyclic constraints graphs is then a unique problem 
　problems  are in p because they are restrictions of acp1 and acp1. in the same way  is in p since it is a restriction of cp1. and can be seen as problems where cyclic solutions are allowed  in fact  all solutions are acyclic and one does not need to disallow cyclic solutions . they satisfy the conditions of theorem 1 so that  is in p. we can then conclude that all of the restrictions to acyclic constraint graphs are in p. 
1 	conclusion 
we have proven new computational complexity theorems. first  the constraint planning problem handled by skyblue is np-hard. we do not know yet whether it is in np  when handling constraint hierarchies that are a widely used type of preferential constraints. second  the computational complexity is insensitive to the method restriction when cyclic solutions are allowed. based on the theoretical results presented in this paper  the following simple rule gives sufficient conditions to determine if a given constraint planning problem is in p. 
if the constraint graph contains no cycle then the problem is in p 
else if an acyclic solution is expected then 
the problem is in p if the method restriction is imposed 
else 
the problem is in p if it only contains single-output constraints 
　this rule highlights the importance of the  cyclic/acyclic solution  condition. when directed cycles are not allowed in the solution  the gap between problems in p and np-complete problems comes from the method restriction  and not from the single-output constraint restriction. the problem complexity has exactly the opposite behavior when cyclic solutions are allowed. finally  the companion paper shows that the polynomial complexity of problem acp1  acp1  cp1  or cp1 is not lost when handling constraint hierarchies. 
　we believe that these results will help designers to conceive multi-way constraint systems that provide a good balance between expressiveness and performance. 
acknowledgements 
special thanks to n. chleq and t. schiex whose comments were very helpful. also thanks to c. bliek  c. lottaz  n. prcovic  and r. stalker. 
