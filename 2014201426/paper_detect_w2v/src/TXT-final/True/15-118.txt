 
　　　let p be a horn clause logic program and comp p  be i t s completion in the sense of clark. clark gave a justification for the negation as failure rule by showing that if a ground atom a is in the f i n i t e failure set of p  then ~a is a 
　　　logical consequence of comp p   that i s   the negation as failure rule is sound. we prove here that the converse also holds  that i s   the negation as failure rule is complete. 
i introduction 
　　　if p is a horn clause logic program  then we can use p to deduce  positive  information. in other words  if a is a ground atom  then the interpreter  by using sld-resolution  can attempt to prove that a is indeed a logical consequence of p. however  we cannot deduce  negative  information using sld-resolution. to be precise  we cannot prove that ~a is a logical consequence of p. the reason is that p { u   is satisfiable  having the herbrand base as a model. 
　　　to remedy this defect  logic programming interpreters are usually augmented by the 
negation as failure rule. this rule states that if a is in the finite failure set of p  then -a 
holds. thus we interpret the failure of the 
this research was partially supported by a grant from the australian computer research board. attempt to prove a as a  proof  that ~a holds. rules very similar to the negation as failure rule have previously been widely used in a r t i f i c i a l intelligence systems  for example  planner  various non-monotonic logics . 
　　　while the negation as failure rule is intuitively appealing  it is preferable to find some firm theoretical foundation for i t . in particular  we would like ~a to be a logical consequence of something connected with p. clark  showed that the  something  is the completion of p  denoted by comp p   which is essentially p together with the only-if halves of each of its clauses  plus some axioms to constrain the equality predicate. clark showed that if a is in the f i n i t e failure set of p  then -a is a logical consequence of corap p . this amounts to a soundness proof of the negation as failure rule.  we note that clark proves this result for a more general class of logic programs  ones where l i t e r a l s in a clause body may be negated. for this class  the converse of his result is false . 
　　　in this paper  we give the corresponding completeness proof of the rule  that i s   we show that if ~a is a logical consequence of comp p   then a is in the f i n i t e failure set of p. 
　　　in the next section  we discuss what is currently known about f i n i t e failure and put our theorem into that context. in the last section  we give the proof of the theorem. 
j. jaffar et al. 1 
is the set of a l l acb p  for which there exists a f i n i t e l y failed sld tree which has  -a at the root. 
now in  the following theorem is proved 
 a much shorter proof of this result is given in  : a ia in the sld f i n i t e failure set if and only if ae t }ui. however  it ia easy to show that ff - b p  t ui  and thus this result of   l   can be considered as a form of soundness and completeness for an sld implementation of f i n i t e failure. however  this is not quite 
satisfactory: sld f i n i t e failure only guarantees the existence of one finitely failed sld tree others may be i n f i n i t e . the problem is to identify exactly those computation rules which guarantee to find a f i n i t e l y failed sld tree  if one exists at a l l . 
　　　definition a computation rule is a rule which selects the atom to be expanded in the current goal. a computation rule is fair if for every atom b in a derivation using this rule  either  some further instantiated version of  b is selected within a f i n i t e number of steps or  some further instantiated version of  b ia in a failed goal. a fair sld tree is an sld tree obtained via a fair computation rule. 
　　　then in  the following result is proved: aeff i f f   for every fair computation rule  the corresponding sld tree with  -a at the root is f i n i t e l y failed. furthermore  the desirable strong form of completeness is obtained: a l l fair sld trees are equivalent in the sense that if any one is f i n i t e l y failed  a l l are. 
summarizing the results so far  we have: 
　　　proposition 	1 	the 	following 	are equivalent: 
 a  a is in the f i n i t e failure set. 
 b  ae t p |m. 
 c  there exists an sld tree with  -a at the root which is f i n i t e l y failed. 
 d  every f a i r sld tree with  -a at the root is f i n i t e l y failed. 

1 j. jaffar et al. 


j. jaffar et al. 1 

1 j. jaffar et al. 

　　　we assign each constant c in p to the equivalence class   c   . note that if s and t are distinct ground terras  then   s   =   t   . thus d contains an isomorphic copy of the usual herbrand universe. this completes the definition of the domain of the model and the assignment of the functions and constants. it remains to give the assignments of the predicates. for this purpose  we are going to use the mapping tp corresponding to this particular domain and assignment of functions and constants. 

1 j. jaffar et al. 
knaster-tarski theorem about f i x p o i n t s f o r monotonic f u n c t i o n s   there e x i s t s an i such that i 1 c i and i - t p   l   . thus a i s true i n i . 
we assign to ＊ the i d e n t i t y r e l a t i o n on d. 
according 	to 	proposition 1   	it only remains to check that e q u a l i t y axioms 1 	to 1 are s a t i s f i e d . axioms 1 to 1 are obviously s a t i s f i e d because is assigned the i d e n t i t y r e l a t i o n . 	axioms 1 	and 1 	are 	s a t i s f i e d 	because 	every 	r e w r i t e 	is superfluous f o r constants. 	axiom 1 	is 	s a t i s f i e d by p r o p o s i t i o n 1a and axiom 1 by p r o p o s i t i o n 1b. only axiom 1 requires some e f f o r t . we prove t h i s as f o l l o w s . 
