 
　we here examine the current state of brute-force chess programs. we are interested in their strong points and how these are achieved  and in their weak points and what can be done about them. we compare some excellent play by belle  the current world computer chess champion  with what expert humans would do in the same situation. these comparisons show that such programs already are capable of displaying what is usually called imagination and understanding. finally  we examine the prospects for a brute-force program in championship level play. 
introduction 
in 1  chess 1  the northwestern university chess 
program  played in an all class  b  tournament in california. it's rating at the time was about 1  middle class nb . to everyone's surprise  the program romped away with the first prize with a 1 score  decimating its opponents on the way. the reason for this later became apparent; it was running on a machine that was 1 times faster than the one it usually ran on. this made it possible to search on average a little more that one ply deeper. this resulted in at least a 1 point  one grade  improvement in its performance. 
　from 1 to 1  slate & atkin at northwestern university  had been perfecting the techniques required to make a depth-first alpha-beta search into the powerful brute-force searching tool that it is today. two devices and their interaction were responsible for this advance. firstly  there was iterative deepening. a depth-first search must have a maximum depth specified in order for it to be able to halt. in iterative deepening  the search starts with a maximum depth of 1  and then iterates to depth 1  1  etc.  as long there is time. at first sight this appears to be very wasteful of computing time. however  the introduction of the second device  a hash table  changes this. the hash table retains two important pieces of information about any node  within 
the limits of the table size  visited in the search: 
1. it remembers the most effective move tried at that node. when such a move is stored from a depth n search  it can now be tried first whenever the node is reached on a depth n + i search. if such a move is successful in lermiiiultiig sviircli i't tlna iiluo without examining any other alternative:  then not only has the search been brought to a quick conclusion  but the cost of doing a move generation at that node i1 also avoided. this happens about 1% of the time. 
1. upon quitting a node  its value is written into the hash table. this may be an exact value for this depth of search  an upper bound on that value  or a lower bound. it may only be a bound because often it is only neccessary to determine that the node is at least this good  and the exact value need not be determined. if  in this or future iterations  the node is again encountered with the same depth of search remaining  then a great deal is already known about its value and this may suffice to terminate the search at this node  or reduce the remaining effort by further constraining the value that the node may take. because the tree is really a graph  two nodes in such a tree may coincide. for instance  the moves a  b  c in one branch  if produced in order c  b  a in another  may result in identical nodes. 
　the combination of these two techniques made possible searches that were faster than what is theoretically possible with alpha-beta. this is due to the fact that knowing the best move from a previous iteration produces an ordering of nodes that comes close enough to being optimum to make alpha-beta work near its maximum possible effectiveness. further  the detection of identical nodes produces another exponential saving  that is especially significant in deeper searches. 
　this research was sponsored by the defense advanced research projects agency  dod   arpa order no. 1  monitored by the air force avionics laboratory under contract f1-c-1. 
1 　these advances in search theory together with faster hardware made brute-force searching into a very powerful tool. clearly  the deeper one could look  the better the program would play. however  it was not clear whether advances in speed of the magnitude required to really make a big difference were possible. at about this time  qreenblatt at mit and thompson at bell labs started building special purpose chess machines  while others began to look for the fastest machine they might gain access to. thus the race for speed was on. the undisputed leader at the moment is belle  the creation of ken thompson and joe condon of bell telephone labs . it searches about 1 million nodes in the time allowed for one tournament move  about 1 sees. . it does this with special purpose chess hardware for move generation and some evaluation  and a high degree of parallelism. with its ability to look ahead at least 1 ply  plus all captures from any leaf node  we have learned that a great deal that was considered  perceptual  can actually be discovered by brute force. in fact  the program is so good at calculating variations that i doubt that anyone in the world could equal it in complicated positions wheie accuracy oi calculation is required. it executes an evaluation function at loaf nodes that is similar to that of the northwestern program   which has knowledge at about the level of a class  c  player's understanding. however  such knowledge applied 1 ply down the tree appears to be sufficient to generate at least expert level concepts a high percentage of the time. in fact  the latest incarnation of belle has achieved a performance rating of 1  high master  against humans in serious competition. thus despite its tack of  conceptualization   belle is able to perform among the top 1 player in the u. s. we now examine this phenomenon  and the remaining shortcomings of the bruteforce approach.1 
pattern knowledge in chess 
figure 1 shows a basic chess situation known as  philador's 
legacy . white to play can mate in 1 moves by 1. nb1ch  k-n1  
1. nr1ch!  kr1  k-b1  ob1mate   1. qn1chl  rxq  1. nb1mate. this is all very well known  and i doubt there are many class  b  chess players that do not know this particular pattern; i.e. it is fundamental. in this case it leads to mate; yet under slightly differing conditions the mate can be avoided at the cost of some material. for instance  in figure 1 white only wins rook for knight  the exchange   while in figure 1 he again mates  while in figure 1  he again wins the exchange. it would be possible to conceptualize this configuration by indicating that the queen must be on squares k1  1  ob1  on1  or qr1  the knight on kn1  k1  or 1  the black king on kr1 and that there must be a black pawn on his kr1 and kn1. however  this is only part of such a description. actually  the kr1 and kn1 squares must either be controlled by white men  but not the knight or queen  or be occupied by black men that cannot capture on kn1 or kb1. further  the square kn1  if defended  must be defended by a piece that would not control kb1 when it captured on kn1; i.e. it cannot 
　the experiences with to bone cited herein were derived ee pert of en informal cooperative erri with the authors of bete  during which i 
suggested certain lasts  the results of which were presumably useful to ah parties concerned 
be a queen. so there are a number of non-trivial tests to determine whether such a situation as philador's legacy pertains; yet  this is among the first 1 or so tactical patterns that a chess player learns. certainly  top players have many tens of thousands of such patterns stored . further  the same pattern could occur around a different focus  the location of the losing king  as in figure 1 where the whole configuration is shifted to the other side of the board and is one file more distant from the edge. this is the most general pattern of this class and reouires several additional specifications. further  the exact defense status of the square on which the knight chocks and of the back rank make the difference between mating and only winning the exchange; the latter being paltry if this were a position for which material had already been sacrificed. 
　thus  we have our prototypical quandary: to generate patterns to drive a tree search is very complicated  and to attempt to detect the presence of any of thousands of such patterns is probably impossible in any real time environment that is not highly parallelized  we conjecture that humans detect such patterns at the visual level where parallel  array type processing is known to exist . however  a brute force search would have to look ahead 1 p y in order to find the win. actually  the best programs now do not count responses to check as a ply of depth  so it only requires a 1 ply search. however  since such opportunites must usually be cultivated by previous play  it would seem that a brute-force program to be able to detect such a possibility would have to be searching at least 1 ply deep. belle certainly fulfills this requirement. the 1 ply search required to find the philador mate in a full blown position would take belle less than 1 second. wllkens  developed a highly sophisticated and efficient pattern mechanism for his program paradise  yet it would not be able to go through a very minimal set of patterns in anything approaching such time  not to speak of actually completing the search to verify 
1 
　
that everything works. clearly  belle has a distinct advantage in this comparison  having specialized hardware. possibly  with special pattern detecting hardware such operations could be considerably speeded up. however  then we would have to have some guarantee of near completeness; i.e. the brute force search will find anything within its depth  whereas the patterns  though possibly able to detect deeper ideas  may be far from complete. in fact  we have now seen about 1 games from the new belle and have found 1 or 1 ideas in these games that we have never seen before anywhere. thus  there is good reason to believe that such a searching program will outperform an idea driven program on shallow ideas  and we consider the above example shallow . 
examples of brute force   i m a g i n a t i o n   and 
  u n d e r s t a n d i n g   
　that humans are not the only ones that can have imagination in chess first became very clear to me as the result of the game shown in figure 1. this was the position after white's 1th move in a game duchess - kaissa from the 1nd world computer chess championship  toronto  1. kaissa  the defending champion  here played r-k1  losing a rook. there was a great deal of amazement that this fine program should make such a terrible blunder. among the lamenters were former world chess champion  and very likely the greatest player of all time  mikhail 
botwinnik  who was with the soviet delegation accompanying kaibsa  and several very strong canadian players along with master levy who was commenting on the games. ah assumed that 1.- rk1 was the result of a program bug  as had been seen in programs over and over again. it was not until the next day  after the programmers had had a chance to go over their debug listings that the reason for the move r-k1 became known. to everyone's surprise  kaissa had made this move to avoid getting mated! after the obvious 1. -- k n1  would come 1. o-bschl!  the move everyone overlooked   kxo  1. br1ch  any  1. r-b1ch and mate in two more moves. clearly  both programs saw what was coming  and a collection of human masters did not. in a way the masters were right; rk1 is a blunder  as losing a rook in this position is no different from being mated. however  the important point remained; not a single player saw what was coming. it is possible that because the idea was 1 ply deep  they did not anticipate that the programs were up to such things. however  the correct view of the situation was  black is lost*1 not  black made a blunder   and no human spectator saw it correctly. 
in the above example  once a strong player is shown the move 
1. qb1ch  he says  obviously  and is apologetic for not having seen it himself right away. however  the remaining examples are much more sophisticated and require quite a bit of study to understand them as they do not fall into obvious patterns. consider the position in figure 1  from a game belle-fry  virginia 
open  1  and the game continuation. here  white would like to take the bishop at ob1. however  he cannot now or after rxrch  because with oxr black renews the threat of mate on the back rank  thus forcing an ending in which he has some chances of survival. when i first saw the game  i knew  something might be up  in the diagram position  but could net find it. since then  i have shown this and the following positions to a number of experts and masters and none have been able to produce the right move or even the right idea in the 1 or so minutes they had to try. yet  when playing 1. b-b1  belle saw it could drive the opponent's king up the board  and one move later it realized that it could win queen for rook and bishop by continuing on the course it chose. 1. bb1 counters the mate threat and thus reactivates the attack on the black bishop  besides threatening b1 ch which 

would win the rook; thus black's reply is forced. further  1. b-b1 is also sensational. it threatens the bishop  and the white bishop cannot be taken because of 1. 1-r1ch  kn1  1. p-r1ch winning the rook. finally  at move 1  r-b1 wins easily because the threat of r-r1 cannot be met effectively  this is what belle saw at move 1 . however  belle realized that black could then put up a modicum of resistance by playing 1.- oxb  1. rxoch  rxr  and instead played 1. 1ch  qr1  forced  1. 1. now catastropy is unavoidable; however  belle had to calculate among other lines  one that it took me 1 hour of moving the pieces around to find: 1.- r1  1. b n1ch. kr1!  1. pn1ch!  kxp. 1. r-b1ch  k-r1. oxrch  oxo  1. rr1. this had to be seen at move 1 by white. in a sense this is guilding the lily  because a sure win is there and no master in his right mind would do such calculation unneccessarily. however  the depth of this analysis shows the potential of the machine in such situations. 
another example is shown in figure 1 from a game belle - mess  
new jersey masters open  1. here it looks as if white will lose his knight at kr1  it went there on the last move when belle clearly saw what was coming . this opinion is reinforced by examining the variation 1. p-kn1  rxkp when the knight remains trapped. however  belle calmly plays 1. p-kb1  relying on 1.- kxn   
1. p kn1. however  after 1- n-k1 it again looks bad because 
1. p-kn1 is answered by rb1 when the knight is lost. however  belle played 1. nb1ch and  as the game continuation shows  ended up winning the exchange; most unexpected  to a human  and disconcerting. 
　the final example of this type  figure 1  comes from a 1 moves in 1 minutes game vaivo -belle. the former has a rating above 
1  which is senior master. here beile is black and cajmiy piays 1.- bxpii. white still did not see what was coming although it was only one move away and played 1. rxb   it's protected isn't 
1 
　
it . now came 1. n-k1  whereupon he gave up because he must lose back a whole rook now and more later. 
　it should be noted that it is not at all difficult to describe what happened in the above examples ex post facto. this is done using the accepted language of functions  i.e. piece x performs function y on square z  which is an excellent descriptive method used by good players and evidenced in their protocols. the fact that good players have extreme difficulty with the above -examples would indicate that this language of functions does not play a very strong rote in the analysis that drives the search. rather  the process of qualifying moves for searching would appear to be based on familiar patterns. 
　depth 1 searching  1 or so in most endgames  can also produce remarkable positional chess even when coupled with a class  c  evaluation function. witness the position in figure 1 that occured between belle and gibson  a u. s. chess federation expert  as part of the fredkin prize matches . the position is rather even  and black should keep his kfng in the center with satisfactory results. the only thing he really should not allow is an endgame with his bad  light squared  bishop against the white knight. it should be noted that belle has no information allowing it to determine when one equi valued piece is better than another. given the above  consider how belle maneuvers to get just this advantage whereas the expert appears to be unaware of the need to counter this strategy. note how 1. p-on1 is played to keep its knight secure  and how belle keeps its grip on the dark squares while maneuvering to take over the whole board. there are probably one or two minor inaccuracies in white's play. however  even the best players don't play such positions perfectly at the board  and compared to black's efforts at countering  white clearly dominates with effort to spare. one is led to wonder how a program with class  c  chess knowledge can play like this. the answer is that the concept space control  which i believe is the primary factor in all the above  is applied many ply from the root. the move that maximizes apace control over such a long span  also results in doing the right things with one's own pieces and making it difficult for the opponent to do so with his. 
　belle was also tested on the 1 positions in win at chess   and turned in a surprising performance. it only got 1 wrong  .1 credit is given when the correct move is tendered but the supporting analysis is not all present  out of the set. according to the compiler of the volume  a master could expect to get about 1 wrong. however  the most surprising thing was that belle discovered. 1 errors in the solutions presented by the author  only 1 of which were previously known. this is certainly a convincing performance of what brute-force at depth 1 can do in chess. 
some remaining weaknesses of the brute force approach 
　on the other hand  belle does not always perform like this. it has considerable problems at times in situations that are relatively simple strategically  but require some long term plan  certain long term plans are found by merely following one's nose; others require some conceptualization and possibly reasoning . figure 1 shows a position from the other gibson-belle game of the match  where black  belle  has established a winning position. even good players would not be able to tell at first sight whether this position is a win  because with bishops on opposite colors it is frequently difficult or impossible to win with a 1 pawn advantage. however  even a weak player will understand that it is important to move the black king to a more active location. to this end  he will almost certainly try k b1 followed by k-n1  and when white plays b k1 to defend the pawn he will probably play k-b1. now white will be in a quandary. his bishop cannot move without allowing a pawn to be lost or the king side pawns to advance. and if white plays k b1  then k-q1  b-b1 when black plays b b1 and the kingpawn advances by means of the tactical threat p k1ch  bxp  p n1ch wins . the latter would be child's play for belle were the king already at ob1; however  it saw no advantage in heading in that direction  and the game was ultimately drawn. 
　the above problem would be easy to remedy by simply doing a static analysis at the root of the search tree and marking those squares that would be desirable for each kind of piece. this type of devise has already been used with success by the northwestern university chess program  although in this case it also failed to find the win. 

　
1 
　
　there are a number of cases where belle  playing against masters and experts  really did not understand the position and drifted somewhat. however  as soon as the opponent made a real threat  belle was there on the job  defending itself. it is significant  that of the 1 or so games in which this occurred  belle did not lose a single one by being outplayed in the usual sense; i.e. by having its disadvantage gradually pushed down its throat. besides the games belle has lost where it was trying to win something that should have been left alone  see below   the only other games it has lost stem from some gross mis-evaluation of a position. it seems doubtful that such cases can be resolved easily by deeper searches; rather some method of detecting the problem would appear to be needed in the evaluation function. 
a re-examination of earlier precepts 
　in 1 i examined some problems that a program would have to overcome in order to play master level chess . since such a program now exists  it would seem appropriate to determine to what extent this has been accomplished in the manner that was said to be necessary. 
　a major issue related to the horizon effect and how it could cause grievous errors to be made. belle makes no attempt to overcome the horizon effect. however  the horizon effect in an 1 ply search does not appear to cause significant problems. this is because delaying tactics require a pair of moves for each delay; one for the threat and one for the counter such delaying tactics are bad when they lose material or otherwise worsen the position. if material is involved  the minimum transaction unit is likely to be a pawn  and in 1 ply  1 pawns or more would have to be sacrificed to push a threat over the horizon. this is unlikely to occur naturally. further  the cost of the  saving maneuver  at such depth very likely is going to be greater than the original loss that is being prevented. the fact that the horizon effect is still there can be demonstrated from figure 1  in which an 1 ply searching program playing black will duly play 1.- pn1  delaying the loss of.the queen. however  this example is contrived  and such situations are very unlikely to occur in an actual game. however  the horizon effect can and does occur at the end of long forced variations  see below . this only causes problems when the program relies heavily in making its move  on the branch in which the horizon effect occurs. again  this does not occur often. 
　another problem was the program's need to have a global strategy at times. we presented a pawn endgame  figure 1  that reouired 1 oiv of search to resolve and thus conjectured the .need for a global viewpoint since such searches were then not possible  or likely to be in the foreseeable future. however  this has changed drastically. problems such as this can now be solved easily by the best programs because the hash table detects identical positions in the tree  and terminates the search at nodes for which the value has already been computed. thus in endgames of few moves  searching deeply is trivial for belle and other programs too. however  as figure 1 showed  strategy is still a real problem for programs  and one that will certainly have to be dealt with if the program is to be able to cash in its advantages in most endgames. 
　we also presented a position that required a 1 ply search to find the mating combination. this was intended to show the need for precise and deep calculation. no performance program can at present do this  although they are not too far away. however  the examples in figures 1 and 1 are convincing proof that belle can play tactics with the best humans. it may not be able to deal with long thin lines of play as well  but it deals with medium long  bushy lines with incredible effectiveness. it is not at all clear that it is more important to deal with long  thin lines of play better than with bushy lines; rather the reverse is probably true. thus we must consider this task as more than satisfactorily met. 
　issues in efficiency of searches were examined to show that a great deal of effort would be wasted by a searching program without the proper knowledge. again r because of the efficiency of iterative deepening and the hash table  such problem have evaporated since the programs just go through variations at an incredible rate. attempts to incorporate knowledge mechanisms into the framework of searching have  to date  been tedious  subject to certain errors of omission  and not even guaranteed to be faster. 
　finally  we indicated that programs would need more detailed evaluation of terminal patterns than they have at present. this is still valid  and is now the largest cause of belle losing games. in figure 1  from a game mckenna   belle  virginia open  1  belle has finally equalized the position after a long struggle. now  it sees the opportunity to win a pawn and proceeds with 1.   rkb1   unable to see that one of the terminal configurations in which it is ahead in material is clearly lost. belle was searching to a depth of 1 ply when making this move. the game continued 1. rxr  nxpch  1. kn1  nxr  1. pr 1!  nxb  1. p r1 and the pawn will queen winning the game. the line given above has consumed 1 ply so far  the response to check not being counted   and it is not possible to detect the queening of the pawn in the remaining three ply. thus  after 1.- n-q1. pr1  n-k1ch  1. k-n1  the 1 ply are up  and belle must evaluate the position. its evaluation function is not sensitive enough to notice that the white pawn cannot be prevented from promoting  so it judges the position as favorable for black. it is interesting to note that if the search were being conducted one ply deeper  it would still not solve the problem correctly. we would then have 
t a t 
　
1.- n-n1  and white may start sequences of captures in the quiescence search. however  black win end up a pawn ahead in any case  and  unless the evaluation function judges the pawn on the 1th rank to be worth more than 1 connected passed pawns on the 1th rank  the wrong decision will still be made. here  however  the problem would be due to the horizon effect  see above  as 1.- n-n1 is a delaying action that sacrifices a knight to push the queening of the pawn over the horizon. 
　in a game with belle  i discovered a strategy that can be used against a program that plays tactics much better than it evaluates. i intentionally let it win 1 knights for rook and pawn  a small material advantage  in order to reach a very superior endgame. the point here is that in considering a position in which it is ahead in material but behind in positional factors  it may fail to evaluate the tradeoff properly. in this case  the positional advantage was worth much more than the material that it gained. the mckenna game above  could also be seen in this light  although it seems doubtful that he planned it that way. 
the prospects for brute-force chess 
　brute-force programs win because they have a good mix of depth of search  and knowledge applied at leaf nodes. the first brute-force programs  only counted material at leaf nodes. then it became evident that even small amounts of knowledge provided programs with a sense of direction when there was no material gain to be had or defended against. the fun-width search is important to ensure that all alternatives are examined  but knowledge assures that small advantages will be striven for. programs that search one ply or so deeper than the northwestern 
university program but evaluate less finery have historically lost to it. this makes sense when one considers that the concepts in the evaluation function  no matter how primitive  do produce an added projection of several pry on the leaf position being evaluated. the importance of knowledge is also substantiated by results from computer othello. in two recent tournaments where all programs did brute-force searches  the winning program was not the one that searched deepest but the one that evaluated beet. in both contests a near perfect transitive ordering could be established among the participating programs  in terms of who beat who. this would appear to indicate that whatever each knew  it was enough to beat those that knew lees. 
　one reason why the current generation of brute-force programs play so well is slate's principle1 slate's principle states:  a program that understands several goods that are worth achieving will act in such a way as to maximize its own options and restrict those of the-opponent   it is not too difficult to see why this is so. let us define as the  player   the side to move at the root  and as the  opponent   the other side. in a minimax search  it is necessary for the player to have at least one good move at every node at which it is his turn to play. conversely  he must be able to refute every move at a node where the opponent is to play. now  assume a program recognizes a small set of goods worth achieving  and preventing the opponent from achieving. it will be able to realize a certain value for the minimax most easily  all other things being equal  if it has the largest number of choices and the opponent has the fewest. the important point is that  when the knowledge applied at the leaf nodes is minimal  the program whi only indulge in forcing behavior when some hem specified by the knowledge is achievable  no matter how the opponent plays. if no known advantage is achievable  the program wih vacillate. 
nptnonsl cftft*wmftfcithw  not previously flumtalisd 
clearly  the more knowledge a program has  the more likely it is to be able to force something it recognizes as worthwhile  and thus indulge in forcing behavior. even  if the good in one branch turns out to be unattainable upon deeper searching  the fact that forcing moves are being made restricts the opponent's ability to achieve things on his own. this is a fine example of how a mechanism intended to provide one thing can produce additional benefits that humans find necessary to dignify with special principles. it should be noted that when something can be forced  but there is no hurry to force it  an iterative deepening program still does not vacillate. the most direct method of forcing the good is discovered at an early iteration  and the starting move of this sequence will be retained as the candidate to beat for future iterations  so it will win out over all moves that do not accomplish more. 
　the technique of analyzing the root position and marking squares on which pieces would be well located if they can survive there  e. g. near the opponent's king  has served the northwestern program well in the past in producing strategy-like behavior. it should be noted that this valuation of the placement of the pieces does not get at one important aspect of chess: the cooperation of pieces. merely  because a pieces is well placed  this does not mean that it can cooperate with its fellow pieces well from this location. however  i have not found any examples of such lacks in the play of belle or the northwestern program. it is possible that such needs are being taken care of by other mechanisms  or that the level of play has not yet reached the point where such concepts are important. 
　full-width searches are now beginning to find moves that are obscure to even very good players. the ability to see everything within a given search envelope is more complete than anything that a pattern driven process that projects no deeper can do. at present such searches are being performed in approximately the 
same time that it takes expert humans to perform at the same level of skill. thus  within its 1 ply performance envelope  belle is superior to human performance. however  pattern driven processes do at times capture notions that are deeper than what any brute-force program can achieve. therefore the issue is: for any given domain  are the deep ideas capturable by patterns  and can a pattern-driven process have access to a sufficient number of such patterns so it can outperform the brute-force searcher. at present  the best human players feel that their understanding of chess will allow them to survive the onslaught of brute-force searching. the choice is between being absolutely accurate within the first 1 ply of search and having a weak-understanding of what lies beyond  or making occasional errors in low level searches  but having a much better long-range understanding of the game. in chess  it is well known that it is important to play soundly.  tactics is 1% of chess  is a common dictum. this means that calculated sequences of moves may not have any errors in them if one wishes to succeed. it is apparent from the games of belle against good players that they make lots of mistakes in tactical calculation. however  being forewarned about belle's strong and weak points  it may be possible for very good players to avoid tactical situations in order to attempt to assert their strategic strengths. it is not clear if such a strategy can be consistently pursued against a program that knows as much as belle does. 
　it appears that the strategy of deliberately creating an opportunity for belle to win some very slight amount of material at some long term strategic cost is the best way to try to beat it. in tactical play it appears to be of world championship caliber  and 
　
1 
even when unable to find a useful strategy  it is usually able to defend itself against the intentions of an opponent when these become apparent. thus the best hope is to get it to bite on something that turns out in the long run to be indigestible. however  it would take a strong and experienced player to succeed at that  as baited traps frequently catch the baiter. 
　with a 1 performance capability at present  it would seem that improving the evaluating procedures  that can also be executed in parallel in hardware  should be able to raise the program's ability the 1 or so points needed to play with the best players in the world. some such contests are already scheduled  and should provide some interesting data on just how far away machines are from wresting the world chess title from humans. 
bibliography 
　 berliner  h. j.   some necessary conditions for a master chess program   proceedings 1rd international joint conference on artificial intelligence  pp. 1  august 1. 
　 1  berliner  h. j.   a chronology of computer chess and its literature**  artificial intelligence  vol. 1  no. 1  april  1  pp.1. 
　 reinfeld  f.  win at chess  dover books  1. 
　 simon  h. a.  and gilmartin  k.   a simulation of memory for chess positions   cognitive psychology  vol. 1  pp. 1 1. 
　 slate  d.j.  and atkin  l. r.   chess 1 - the northwestern university chess program   in chess skill in man and machine  p. frey  ed.   springer-vertag  1. 
　 condon  j. h. and thompson  k.   belle chess hardware   to appear in advances in computer chess ＊ 1  pergammon press  ltd.  london. 
　 1j wilkins  d.   using patterns and plans in chess   artificial intelligence  vol. 1  no. 1  september  1  pps. 1. 
　 anonymous   $1 prize established for first computer world chess champion   sigart newsletter  #1  october  
1  p. 1. 
1 
