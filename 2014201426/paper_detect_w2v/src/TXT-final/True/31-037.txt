 
this paper presents a statistical analysis of the 
davis-putnam 	procedure 	and 	propositional satisfiability problems  sat . sat has been researched in ai because of its strong relationship to automated reasoning and recently it is used as a benchmark problem of constraint satisfaction algorithms. the davis-putnam procedure is a wellknown satisfiability checking algorithm based on tree search technique. in this paper  i analyze two average case complexities for the davis-putnam procedure  the complexity for satisfiability checking and the complexity for finding all solutions. i also discuss the probability of satisfiability. the complexities and the probability strongly depend on the distribution of formulas to be tested and i use the fixed clause length model as the distribution model. the result of the analysis coincides with the experimental result well. 
1 	introduction 
this paper presents a statistical analysis of the davisputnam procedure  davis and putnam  1  that solves propositional satisfiability problems  sat . sat is the problem to judge whether a given logical formula  given as a conjunctive normal form  cnf   can be satisfied or not. it has been researched in ai because of its strong relationship to automated reasoning such as theorem proving and planning. recently  it is also concerned as a benchmark problem for constraint satisfaction algorithms  selman  levesque and mitchell  1  yugami  ohta and hara  1 . 
the davis-putnam procedure is one of the most famous algorithms for sat. 
   a number of papers discussed the difficulty of sat theoretically. because of its np-completeness  sat requires more than polynomial time in the worst case  assuming npnot =p  and the analysis of sat concentrated on the average case behavior. goldberg et. al. showed that the davisputnam procedure  on average  could solve sat in 
1 	automated reasoning 
polynomial time of the number of variables  goldberg  purdom and brown  1 . they assumed the constant probability model as a distribution model of formulas to be tested. franco and paull pointed out that this easiness of sat strongly depended on the distribution model and proposed a new distribution model  the fixed clause length model  franco and paull  1  franco  1 . they showed that the davis-putnam procedure required exponential time for finding all solutions  assignments that satisfied the given formula  on this distribution model  franco and paull  1  franco  plotkin and rosenthal  1 . this result is relevant to the original sat  satisfiability checking  when few assignments satisfy the formula. chao and franco showed that the davis-putnam procedure with the unit clause rule could solve sat without backtracking  i.e. it required only polynomial time on the fixed clause length model with a small clauses-to-variables ratio  smaller than 1 for 1-sat .  williams and hogg  1  analyzed the difficulty of general constraint satisfaction problems by using the structure of the assumption lattice. recent experimental works showed more precise results of the average case behavior of the davis-putnam procedure. mitchell et. al. reported the dependency of the davis-putnam procedure's average case complexity on the clauses-tovariables ratio and showed its drastic change near the 1% satisfiable point  mitchell  selman and levesque  1 . the complexity became maximum near the 1% satisfiable point and decreased rapidly when the ratio became larger or smaller.  crawford and auton  1  reported similar results by using tableau based satisfiability checking algorithm. 
   the purpose of this paper is to analyze the davisputnam procedure's average case behavior on the fixed clause length model  especially its dependency on the clauses-to-variables ratio. i discuss two complexities  the complexity for satisfiability checking and the complexity for finding all solutions. i also discuss the probability of satisfiability. 
   the organization of this paper is as follows. i first review the davis-putnam procedure and the fixed clause length model in the following two sections. section 1 gives the statistical analysis of the average case complexities and the probability of satisfiability. the results of section 1 arc compared with experimental results in section 1. i summarize my results in section 1. 
1 davis-putnam procedure 
figure 1 shows the davis-putnam procedure  dp . it takes a cnf as an input and returns whether the cnf is  satisfiable  or  unsatisfiable  it solves sat by searching an assignment that satisfies all clauses. dp uses the unit propagation  unit clause rule  to improve its performance. the unit propagation selects a variable in an unit clause  a clause containing a single literal  and assigns a value to the variable to satisfy the clause. in the original dp  the pure literal rule is also used to improve dp  but i ignore it in this paper because the unit propagation is much more powerful. 
   i use the number of dp calls as the complexity of dp. i modify dp to simplify the analysis. figure 1 shows the modified procedure  sdp. the only difference between dp and sdp is that sdp does not check whether all clauses ate satisfied or not. it finds all clauses are satisfied when all variables are bound and no empty clause exists. the difference is not essential because if a partial assignment satisfies all clauses  then no backtrack occurs after that. this means that the number of sdp calls for satisfiability checking is larger than the number of dp calls by at most the number of variables and usually the difference is very small. for finding all solutions  there is no difference between dp and sdp. 
1 the fixed clause length model 
the complexity of sdp  and dp  strongly depends on the distribution of cnfs to be tested. it this paper  i use the fixed clause length model as the distribution model. this model has three parameters  the number of variables  n  the clause length  k and the number of clauses  m. a cnf on this model consists of m clauses and each clause contains k literals. in a clause  each variable appears at most once. a formula to be tested is randomly selected from the set of all cnfs that satisfy these conditions. the important feature of this model is that the clauses in the cnf are mutually independent. sat on the fixed clause length model with clause length k  is calledk-sat. 
1 analysis 
1 probabilities of becoming empty and unit 
on k-sat  a clause contains k literals first and becomes satisfied or becomes shorter when sdp assigns values to variables incrementally. in sdp  an empty clause and an unit clause perform important roles. i first discuss the probabilities of becoming empty or unit when b variables are bound and r variables are removed  remove a variable'* means deleting both of positive and negative literals of the variable from the cnf. sdp  and dp  does not do such a thing but i will use removed variables to discuss the procedure dp 
input: a cnf to be tested 
   output:  satisfiable or  unsatisfiable  step 1 : unit propagation 
while there is no empty clause and an unit clause exists  select an unit clause and bind a variable in it to satisfy it. 
step 1 : satisfiability checking 
if all clauses are satisfied  return  satisfiable . 
step 1 : unsatisfiability checking 
   if an empty clause exists  return  unsatisfiable  step 1 : splitting rule 
select a variable whose value is not assigned. 
assign true to it and call dp. if the result is  satisfiable  then return  satisfiable . otherwise  assign false to the variable and call dp again. return the result of it. 
figure 1: davis-putnam procedure 
procedure sdp 
input: a cnf to be tested 
   output:  satisfiable or ''unsatisfiable  step 1 : unit propagation 
while there is no empty clause and an unit clause exists  select an unit clause and bind a variable in it to satisfy it. 
step 1 : unsatisfiability checking 
   if an empty clause exists  return ''unsatisfiable  step 1 : satisfiability checking 
if all variables are bound  return  satisfiable . 
step 1 : splitting rule 
select a variable whose value is not assigned. 
assign true to it and call sdp. if the result is  satisfiable then return  satisfiable . otherwise  assign false to the variable and call sdp again. return the result of it. 
figure 1: sdp  a variant of davis-putnam procedure 
probability of satisfiability. for simplicity  i use  at  b r '' to represent  when b variables are bound and r variables are removed . let be the probability of becoming empty at  b r . a clause becomes empty when all variables in it are bound or removed and values of bound variables violate the corresponding literals. thus the desired probability is 

yugami 

where  n is the number of bound variables in the clause and the probability of becoming unit can be calculated with k - n variables in the clause are removed. the probability the similar discussion. of becoming unit can be obtained by the same way. the only difference is that the clause contains one variable that is 
probability is 1 and otherwise  
1 	automated reasoning 


yugami 

the unit propagation step binds variables and sdp 
  returns  unsatisfiable  

  returns  sausfiable  


1 average case complexities 
in this subsection  i discuss two average case complexities  the complexity for satisfiability checking and the complexity for finding all solutions. i use the number of sdp calls as the complexity.  complexity 
for satisfiability checking and the complexity for finding all solutions when sdp is called with b bound variables and u of them are bound by the unit propagation. sdp calls sdp recursively only in the splitting rule and  for satisfiability checking  the splitting rule calls the second descendant sdp only when the first one returns  unsatisfiable . thus  
　　　　　　　is the probability that sdp returns  sausfiable  when it is called with b bound variables and u of them are bound by the unit propagation. i discuss this probability in the next subsection. for finding all solutions  the splitting rule always calls the second descendent sdp. 
these two recursion formulas reduce the complexities of 
sdp with n-b unbound variables to the complexities with less number of unbound variables. when b=n  i.e. when all variables are bound  sdp does not apply the splitting rule and 

   when sdp is called first  i.e. when no variable is bound  the unit propagation does not bind a variable because 
1 	automated reasoning 
a cnf on does not contain an unit clause. sdp applies the splitting rule and the complexity of each descendant sdp is  thus the average case complexities for k-sat are 

1 probability of satisfiability 
this subsection discuss the probability    that sdp 
returns  sausfiable  when it is called with b bound variables and u of them are bound by the unit propagation. the probability is  of course  a probability that the cnf with the partial value assignment to b variables is sausfiable.  be the probability that the cnf with 
b1 bound variables and r1 removed variables is sausfiable on the conditions that the cnf does not contain an empty nor unit clause and contains at least u1 satisfied clauses when bl variables are bound and no variable is removed. because sdp applies the splitting rule and calls sdp recursively only when there is no empty nor unit clause  the probability of returning  sausfiable  is 

let x be a variable that is not 
bound nor removed. the cnf with b1 bound variables and r1 removed variables  is sausfiable iff one of the two cnfs  the cnf generated by assigning true to x and the cnf generated by assigning false to x  is sausfiable. because of the definition of ps  each of the two cnfs is sausfiable with probability 
to obtain  i need the 
probability that both of the two cnfs are sausfiable. it is very difficult to calculate it and i approximate it with its lower bound  the probability that the two cnfs share an assignment that satisfies both of them. in other words  the lower bound is the probability that the conjunction of the two cnfs is sausfiable. the conjunction is generated by removing x from the cnf and the lower bound is 
　　　　　　　this is the reason i introduced 'removed variables  to the analysis. the above discussion leads the following recursion formula. 
 1  
   when   i.e. when all variables are bound or removed  a clause in the cnf is satisfied with probability 




yu1ami 

   another reasonable approximation is ignoring the probabilities of the unit propagation for large because monotonically decreases with respect to if becomes very small  the approximation 
does not affect the result. this approximation also decreases the number of elements of to be calculated and shortens the computation time. 
1 comparison with empirical results 
figure 1 and 1 show the statistical and empirical results of the probability of satisfiability  the complexity for satisfiability checking  and the complexity for finding all solutions  for 1-sat and 1-sat with 1 variables. the complexities are the number of sdp calls that are required for satisfiability checking and for finding all solutions. the empirical results were obtained by solving randomly generated 1 problems at each clauses-tovariables ratio for 1-sat and by solving 1 problems at each ratio for 1-sat. 
   the probability of satisfiability coincided with the empirical result well. the 1% satisfiable points by the statistical analysis  1 for 1-sat and 1 for 1-sat  were a little larger than the empirical results  1 for 1-sat and 1 for 1-sat . this difference is caused by the approximation i used for calculating the recursion formula for ps. the approximation makes p1 larger than the real value and causes the overestimation of andpsatisfiable-
   the complexity for finding all solutions coincided with the empirical result very well at all clauses-to-variables ratios. on the other hand  the complexity for satisfiability checking coincided with me empirical result above the 1% satisfiable point  but became smaller than the experimental result bellow the point. it became maximum near the 1% satisfiable point and the statistical results at the peak  1 for 1-sat and 1 for 1-sat  were about 1% smaller for 1-sat and about 1% smaller for 1-sat than the empirical results  1 for 1-sat and 1 for 1-sat . these results suggests that the analysis of the unit propagation  that are commonly used for both of two complexities  gives the accurate result. the overestimauon of  decreases the probability of calling the second descendant sdp and decreases the complexity for satisfiability checking. above the 1% satisfiable point  the statistical prediction for satisfiability checking coincided with the empirical result because  becomes very small and the approximation for it does not affect the statistical result. 
1 conclusions 
in this paper  i analyzed the average case behavior of the davis-putnam procedure on the fixed clause length model. 
the analysis included two average case complexities  the 
1 	automated reasoning 
complexity for satisfiability checking and the complexity for finding all solutions. i also discussed the probability of satisfiability. 
   the results  especially the complexity for finding all solutions  coincided with experimental results well. the complexity for satisfiability checking coincided with experiments above the 1% satisfiable point but became smaller below the point because of the overestimation of the probability that a cnf with a partial assignment is satisfiable. 
