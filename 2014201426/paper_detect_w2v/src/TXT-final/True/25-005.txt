 
in this paper we present a logical framework for defining consistent axiomatizations of planning domains. a language to define basic actions and structured plans is embedded in a logic. this allows general properties of a whole planning scenario to be proved as well as plans to be formed deductively. in particular  frame assertions and domain constraints as invariants of the basic actions can be formulated and proved even for complex plans most frame assertions are obtained by purely syntactic analysis in such cases the formal proof can be generated in a uniform way. the formalism we introduce is especially useful when treating recursive plans a tactical theorem prover  the karlsruhe interactive verifier kiv is used to implement this 
logical framework 
1 	introduction 
in this paper we present a logical framework for defining consistent axiomatizations of planning domains. an effective mechanism for defining the basic operations in a constructive way is embedded in a logic that allows properties of state spaces given by these actions to be proved. this not only includes the deductive generation of plans; reasoning about the complete scenario is also supported by this approach 
our work follows the  plans are programs  paradigm. 
this approach is not new; in deductive planning  in particular  it has already been discussed by several authors  cf.  green  1; rosenschein  1; kautz  1; bibel  1; manna and waldinger  1; biundo et al.  1  . however  their contributions concentrated 
mainly on aspects of common control structures like sequential composition  conditional branching  and sometimes recursion. less attention has been paid to the question of data structures our approach is based on the idea of treating relations used in the axiomatizations of planning scenarios in the same way data with an algebraic structure are treated in ordinary programming lan-
   *this work was partly supported by the german ministry for research and technology  bmft  under contract itw 1. 
1 	automated reasoning 
guages. in planning  situations are usually described by a set of relations between certain objects  blocks  rooms  robots etc. . these relations are flexible in the sense that they may change from one situation to another. the fact that these changes are local to a small section of the entire situation is not reflected in the basic semantic concepts underlying most formalisms for deductive planning. so  for example  the blocks world operation unstack a b    genesereth and nilsson  1   changes only the on-relation between a and 1  the clear-property of 1 and the table-property of a if the pile of blocks is 
just a part of some room  which in turn is just one constituent of a larger scene  the unstack-operation exhibits very local behavior. 
¡¡a straightforward concept is to consider these relations as objects  like elements of  abstract  data types in ordinary programming languages in the theory of abstract data types most often one only considers algebraic structures where all elements are  freely  generated by so-called constructors. in our case  restricting ourselves to finite relations  an appropriate set of constructors  and  selectors  can easily be devised as well starting with the empty relation all finite n-ary relations can be generated by successive applications of an add- operation that adds an n-tuple to a given relation as is the case with freely generated data types  we have to supply a corresponding delete-operation in order to compute with this data type it seems reasonable to take these two operations as the basis of a planning language designed to compute changes of relational structures. in our approach relations between unstructured objects correspond to data objects and are therefore considered to be finite. this seems to be a realistic assumption in most applications. in the context of recursive plans the finiteness of relations and its reflection by axioms becomes essential for termination proofs. 
¡¡this approach  whereby one considers a fixed state space generated by add-  and delete'  operations  underlies strips-like  fikes and nilsson  1  planners. these systems also demand a complete description of the operations used in the planning process. in particular  they allow an efficient treatment of the frame problem  mccarthy and hayes  1  since it is explicitly denoted which parts of a situation are changed. our approach lends formal semantics to the basic concepts 


stephen and biundo 


1 	automated reasoning 

stephan and biundo 

1 	automated reasoning 
they define basic actions as atomic constituents of their planning language that are axiomatized freely by describing their preconditions and effects  respectively. our approach goes beyond this by providing a stripslike way of defining basic actions and setting up consistent planning scenarios on top of that. the logical formalism is extended to reason about these basic actions as well as about composite plans built out of them. in both cases this includes recursive definitions. 
with the work of pednault  pednault  1; pednault  
1  the approach we presented in this paper shares the idea of describing basic actions in a strips-like manner  that is  by giving add and delete lists for relations. moreover  both approaches embed these descriptions into a logical formalism that can be used to reason about plans. we begin with the observation that the appropriate semantical background for integrating this strips approach into deductive planning are models based on finitely generated relations. while a d l uses a fixed form of conditional add and delete lists our approach allows to program basic operations in a carefully chosen programming language that covers adl schemata in a straightforward way. in our approach it is easy to add non-determinism and also in the deterministic case we can do without auxiliary relations which seem to be necessary in a d l to describe more complicated actions. in our setting we start out with the definition of basic actions. the defining programs always have a 
precise meaning in the underlying semantical structures. from these definitions which in addition are independent of each other we then prove domain constraints  derived descriptions  and frame assertions. these issues are not addressed in the a d l work. in addition  we have outlined a method to generate certain frame assertions even for composite plans by a purely textual analysis. although many ideas presented above are independent of the logical basis we want to stress that the ability to reason about the structure of  possibly  recursive definitions  programs  is essential in this context. 
   as already mentioned above  our formalism is based on the strips ideas that have been given formal semantics by lifschitz  lifschitz  1 . we feel that our formalism in some sense  proceduralizes  lifschitz's approach and extends it in some way  e.g. as far as the treatment of negative effects etc. is concerned. however  investigating this relationship in more detail goes beyond the scope of this paper. separate work will be devoted to that issue. 
	1 	conclusion 
combining characteristic features of conventional planning with techniques borrowed from programming logics  we have introduced a new theory of action based on a special variant of dynamic logic. plans may be constructed using rich control structures including recursion  non-deterministic branching  and a special choose construct. in our approach  we start out by the definition of basic actions and are then able to prove properties about the state space generated by these actions. this includes frame assertions and domain constraints. in this way  we prevent our planning environment from running into inconsistencies. these are possible in other 
stephan and biundo 

systems where frame assertions and domain constraints are considered to be axioms. an efficient treatment of the frame problem is provided by a method to generate most frame assertions non-deductively  with the possibility of a uniform formal proof within the system . our theory of action clearly is not restricted to blocks-worldtype planning domains. one could equally well define a theory for an intelligent help system context where the planning domain is a command language environment. there the ability of reasoning about recursive plans is essential. implementing our logical framework in the k i v system provides the basis not only for a deductive planning system  but also for a complete deductive planning environment  i.e.  a system that also assists a user in developing a consistent axiomatization of his planning domain. furthermore  this notion of environment can be extended by implementing tactics for temporal projection  plan validation and other reasoning methods. further work is devoted to the automated generation of recursive plans and an extension of the logical framework to parallelism. 
