 
practical applications of description logics  dls  in knowledge-based systems have forced us to introduce the following features which are absent from existing dls: 
  allowing a concept to be regarded at the same time as an individual  the instance of some other meta-level concept  
  allowing an individual to represent a col-lection  set  of other individuals. 
the first extension  called concept reification  is more general and thus can cover the second one too. we argue that the absence of these features from existing dls is an important reason for the lack of a unified approach to description logics and object-oriented databases. we also show that concept reification cannot be dealt with by the standard dl semantics and propose a slightly modified semantics that takes care of the inherent higher-order features of reification in a first-order setting. a sound and complete inference algorithm for checking consistency in reified accoe knowledge bases is subsequently put forward. 
1 	introduction 
description logics  dls  are descendants of the famous kl-one system  brachman and schrnolze  1  and can be viewed as formalizations of the frame-based knowledge representation languages. 
¡¡systems based on dls are hybrid systems which separate the described knowledge in two distinct categories: terminological and assertional knowledge. the terminological knowledge is generic and refers to classes of objects and their relationships  while the assertional knowledge describes particular instances  individuals  of these classes. these two levels are completely disjoint since a given object cannot be at the same time a concept and an instance.  description logics further distinguish between two kinds of terminological knowledge  namely concepts and roles. concepts are essentially unary predicates interpreted as sets of individuals  while roles rep-
1 	automated reasoning 
resent binary predicates interpreted as  binary  relations between individuals.  
¡¡an important limitation of current description logics is the clear-cut separation between the terminological  intensional  and the assertional  extensional  level. for example  concepts  representing intensional descriptions of sets of individuals  and their instances are stored at different levels and cannot be mixed under any circumstances. 
¡¡in certain applications  however  it may be useful to be able to regard a given concept  class  as the instance of a higher level meta-concept  meta-class . this would allow us to reuse terminologies by constructing a unique generic terminology which could then be instantiated to produce several particular terminologies. 
¡¡this paper presents an extension of description logics in which a given concept can be regarded as an individual  i.e. an instance of some other meta-level concept . this process  called concept reification  has not been extensively studied in the framework of description logics1  mainly since it mixes the terminological and assertional levels and therefore spoils the simplicity of the currently used reasoning techniques. also  reification introduces a form of higher-order constructs in description logics thereby complicating the issue of defining a proper semantics of the logic as well as the associated inference services. 
¡¡in spite of these difficulties  reification is absolutely necessary whenever we want to achieve reusability in a knowledge-based system. the following example  taken from  badea and tilivea  1   deals with allocating the staff of some research institution. in such a setting we may want to introduce concepts like manager  secretary  researcher and instances like tom  joan  mary  peter  fred  etc: tom 1 manager  joan 1 secretary  mary 1 secretary  peter ¡ê researcher  fred € researcher. 
¡¡but now note that the concepts manager  secretary and researcher represent positions in the research institute. they are therefore not only concepts  but also instances of the  metal-level  concept 
   *the classic system  brachman et al  1  already included meta-individuals  a pre-theoretic form of concept reification   but these are not taken into account in dl inferences. 
¡¡

position: manager 1 position  secretary € position  researcher € position. 
¡¡the concept position should not be confused with the concept employee  which is a super-concept of manager  secretary and researcher: manager c employee  
secretary c employee  researcher c employee. 
¡¡now consider an employee allocation problem. in a typical knowledge-based system  we would have to write separate inferences for instance for retrieving managers  secretaries and researchers. this would amount to writing three separate pieces of code that are extremely similar  though not identical  as at least the positions of the employees to be retrieved would be different . 
¡¡if we would like to avoid writing three separate pieces of code  inferences   we would have to write a generic inference that would be parametrized by the position of the employee we would like to choose. this can be accomplished by using an input parameter  called type  linked to the concept position and which is supposed to specify the position of the person to be chosen. figure 1 is a graphical representation of such a generic inference in the kads-based exclaim system  see  badea  1  for more details on exclaim . note that we are making use of the built-in membership role €  which links an instance x with a concept c whenever x is an instance of c. 
¡¡the predefined role € links a concept {employee  with a meta-concept  position  and allows therefore a kind of generic inferences which are essential for developing domain-independent and reusable models.1 
¡¡note that domain-independence and reusability of models could not have been achieved without concept reification and the role €. 
¡¡in order to be usable in real-life applications  description logics will also have to allow for an individual  instance  to represent a collection  set  of other individuals. however  existing  implemented  dl systems usu-
1
    not only is it cumbersome to have three identical pieces of code  but these pieces of code would depend on the domain level  the types of positions - director  secretary and researcher are domain-dependent; we cannot change the domain level  for example by introducing a new position  without having to modify the inference level too  since we would have to add a new inference for the new position type . 
ally lack constructors for sets or lists of objects1 and we therefore have to represent such collections outside the dl thereby affecting the completeness of the dl reasoning services. 
¡¡using concept reification  we can obtain individuals representing sets of other individuals by reifying concepts of the form one o/ t'i '...  in . this observation allows us to concentrate in the following on  concept reification . 
¡¡note that the role ¡ê allows us to regard the assertional component of the dl  the abox  as consisting of role tuples only  since instance assertions of the form x : c can be viewed as tuples of the role e. 
¡¡concept reification  as studied in this paper  is different from kobsa's role reification implemented in sbone  kobsa  1 . more precisely  while the reification of a concept is an individual  kobsa's reification of a role is a concept.  kobsa's approach has been motivated by natural language applications in which a verb  for example  is regarded in some contexts as a role and in other contexts as a concept.  therefore  while we are concerned with mixing the tbox and the abox of a dl  kobsa has dealt with mixing concepts and roles within the tbox  while keeping tbox and abox disjoint . 
¡¡as previously mentioned  concept reification involves a form of higher-order logic since the interpretations of value and existential restrictions on the €-role employ a form of quantification over concept-valued variables. therefore  whereas in ordinary dls concepts exist only as named  terminological  tbox  level elements  in reified dls concepts may be individuals   data   as well. 
¡¡reification and the related higher-order features are also essential in object oriented databases  oodbs   beeri  1 . in classical database systems there are two distinct levels: data and schema  similar to abox and respectively tbox in description logics . 
¡¡in oodbs  meta-data  such as classes and functions   are frequently treated as data. class objects acquire thereby a dual nature: on the one hand they are data and can be manipulated by the system; on the other hand  they are schema-level objects and thus part of the schema. 
¡¡this situation is similar to concept reification as introduced in this paper. in fact  it is our opinion that the lack of a unified approach to description logics and oodbs is mainly due to the clear-cut separation of 
tbox and abox  i.e. to the absence of reification  in dls. 
¡¡however  introducing concept reification in dls is significantly harder than in oodbs since we have to modify the dl inference services  consistency and subsumption tests  to cope with the new construct. since no analog inference services exist in oodbs and as long as we 
1
   some description logics provide the one-o/ *i ...  tn  construct which denotes the concept whose extension is given by the set of instances {i1 ...  in}. however  what we need is a concept construct whose instances denote sets or lists of other instances. 
	badea 	1 
¡¡
deal with reification in an explicit manner alone  there seem to be no complications in reasoning with the new construct in oodbs. 
¡¡another somewhat related formalism is f-logic  kifer et al  1   which attempts to provide sound logical foundations of object-oriented as well as frame-based languages and can be considered as a declarative approach to deductive object-oriented databases. 
¡¡f-logic provides a form of explicit reification  but it lacks the €-role and the related dl inference services. therefore  we can easily represent f-logic object models in reified dls. for instance  an f-logic noninheritable property object property -  value  would be 
represented in reified dls as a tuple of the role property involving the individual object:  object  value  : property  while an inheritable property of the form object property  -  value  would be captured by a dl terminological axiom imposing a restriction on the fillers of the role property for the instances of bbject: object {value}. f-logic signature  typing  expressions of the form object property =  type  can also be represented in dls as value restrictions object  property.type. of course  set-valued attributes in flogic correspond to dl roles  while normal f-logic attributes would be represented in dls as functional roles  attributes . it is our opinion that the dl representation makes the distinction between the assertional and terminological properties of objects clearer. 
¡¡it is worth noting that many frame-based knowledge representation systems  for example kee  allow a class to be at the same time an instance  but this feature has usually no associated formal semantics. 
1 	reifying concepts in description logics - semantical considerations 
traditional description logics separate the terminological  tbox  and assertional  abox  levels completely by not allowing a concept to be regarded at the same time as an individual. this simplifies the semantics and corresponding reasoning algorithms. 
¡¡in this paper we consider an extension to dls that eliminates this restriction. concept reification amounts to associating with each concept c an individual c . 
¡¡additionally  we allow the membership role g and its inverse  the role € links an individual x with some other reified concept c  whenever x is an instance of c  regarded as a concept . 
¡¡as already mentioned  concept reification involves a form of higher-order logic. for example  in defining the interpretation of 
we quantify over all concepts y  not just the ones that are explicitly given. since higher-order logics lack even a 
sound a complete axiomatization and in order to preserve the desired computational properties  we will restrict the semantics of the logic to a first-order semantics. this amounts to interpreting quantified concept variables as 
1 	automated reasoning 

	badea 	1 

1 	automated reasoning 
posed by its inherent higher-order features and because of the complications in the reasoning algorithms. 
¡¡the semantical problems related to the higher-order features implicit in reification are solved by defining a first-order semantics which ensures the decidability of the main inference services. we have also described sound and complete inference algorithms for the reified terminological language acco€  but the algorithms can be extended to more expressive languages . 
¡¡in our view  concept reification represents an essential element for bridging the gap between description logics and  deductive  object-oriented databases. 
¡¡it also makes description logics expressive enough to be used for developing generic problem solving models 
 badea and tilivea  1  and even libraries of such models. 
acknowledgments 
thanks are due to doina tilivea and alon levy for interesting discussions as well as to anonymous reviewers for their helpful comments and especially for pointing out the paper  franconi  1   which also introduces an explicit membership role  but does not provide a complete reasoning algorithm . 
