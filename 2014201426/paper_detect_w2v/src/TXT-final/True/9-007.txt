 
　　　the operation of a deletion-directed search strategy for resolution-based proof procedures is discussed. 	the strategy attempts to determine the satisfiability of a set of input clauses while at the same time minimizing the cardinality of the set of retained clauses. 	e-representation  a new clause deletion rule which is fundamental to the operation of the search strategy  is also described. 
descriptive terms 
　　　formal logic  automatic theorem proving  resolution  heuristic search  clause deletion  e-representation  deletion-directed search  mate tables. 
	1. 	introduction 
　　　this report describes some new techniques which can be used by resolution-based proof procedures. since a l l subsequent references w i l l be to resolutionbased procedures  the adjective w i l l be understood. in addition  familiarity with the terminology and results of j. a. robinson1 is assumed. 
　　　in order to provide a framework for discussion  both a structural and an operational description of a proof procedure w i l l be considered. from a structural viewpoint  & proof procedure can be denoted by a triple  t a z  where t is a f i n i t e   non-empty set of clause generation rules  a is a 
　　　f i n i t e  possibly empty  set of clause deletion rules  and z is a search strategy i.e. a procedure for applying the rules in tufi. a clause generation rule  e.g. clash resolution 1   specifies the conditions constraining the clauses of an admissible resolution. a clause deletion rule  e.g. subsumption deletion  specifies the conditions under which a clause may be eliminated without affecting the unsatisflability of a set of clauses. a search strategy  e.g. diagonal search1  sequences the generation and deletion of clauses as a proof procedure attempts to determine the satisfiability of an input clause set. within a search strategy  clause generation is controlled by a generation strategy and clause elimination by a deletion strategy. 
　　　turning to an operational viewpoint  a proof precedure can be characterized as a mapping which associates a f i n i t e set of clauses  i.e. the input set  
with a non-empty sequence of clauses and pointers  called a trace. a trace begins with some ordered occurrence of the input set. this is followed by an ordered set of generated clauses and pointers to deleted clauses. a l l of the parents of a generated clause must precede it in the trace and a l l deleted clauses must precede their respective pointers. 
associated with each non-input trace element is a set 
* current address: computer science department  technion  haifa  israel. 
** this research was supported by national science foundation grant gn-1 
of retained clauses which is composed of a l l of the clauses in the corresponding partial trace which have not been deleted i.e. which do not have corresponding pointers in the partial trace. a trace records the operation of a proof procedure and in particular its search strategy on a specific problem. 
     the search space associated with a set of input clauses and a proof procedure  t a i  can be represented by a labelled tree in which the input set labels the root  retained sets label the other nodes and elements of tua label the edges. a trace represents the particular path selected by ♀ in the search tree. note that the elements of tua are not 
well-defined as operators on clause sets but can be viewed as operator schemata. 
     most of the work dealing with resolution has concentrated on the problem of demonstrating the unsatisflability of an unsatisfiable set of input clauses. the problem of demonstrating the satisfiability of a satisfiable input set has been largely ignored. this is probably due  in part  to the fact that no procedure can identify a l l satisfiable sets. however  many solvable cases of the decision problem have been identified 1 and the relationship between these cases and resolutionbased proof procedures has not been explored. when considering applications utilizing resolution-based proof procedures  such as question-answering systems1 or robot planning systems1  situations involving the absence of sufficient information make the recognition of satisfiable sets an area of interest. satisfiability is indicated by the generation of the empty set of clauses and its demonstration results from the utilization of clause deletion rules. a proof procedure must utilize such rules in order to 
maximize the domain of formulas that it can classify. while deletion rules are theoretically unnecessary in the domain of unsatisfiable formulas  in actual practice their use can help to increase the effectiveness of a proof search. such rules can be used to reduce the number of candidate resolutions while at the same time preserving completeness. careful consideration is necessary  however  since their indiscriminate use may not be cost-effective 
and can result in a loss of completeness . 
　　　in the next section  a new clause deletion rule is introduced and an example in section 1 shows that this rule allows a demonstration of satisfiability 
	not previously possible. 	the main topic of section 1 
is the operation of a deletion-directed search strategy 
which is built around the new deletion rule and 
attempts to minimize the cardinality of retained sets. 
	1. 	e-representation 
　　　in order to motivate the formal presentation below  consider the unsatisf iable set s - {ab  ab  ac  bc  c}. notice that each binary resolution which involves the l i t e r a l occurrence a in ab produces a clause which is already in s. this observation  viewed as a generalization of the notion 
1 


1 

structure called a mate table  cf. classification trees1 . two literals l1 and l1 are mates iff there exist substitutions 1 and 1 such that l1 l1 are complementary. a mate table is constructed by attempting to resolve each literal occurrence l 
appearing in an input clause c with every other literal occurrence in the input set. the result is a set of lists such that every literal occurrence has an associated  l i s t . each list has two types of entries depending upon whether the literal occurrence resolving with l i.e. l's mate  is in c or outside of c. an outside entry is created when all of the following conditions hold:  1  c resolves on l with some clause d = c  1  neither the resolvent of c and d nor the associated instance of d is a tautology  1  the resolvent is not subsumed by d. the entry identifies a mate literal in d and contains the corresponding  resolvent. an inside entry  on the other hand  just identifies one of l's mate literals within c but doesn't contain the corresponding resolvent. 
     the pointer portion of the initial mate table for the last example is represented below. 

the proof procedure examines the table looking for indications of a double parent elimination possibility and finds that the first literal in clause 1 is the only candidate for resolution with the first literal in clause 1 and vice versa. by 
adding the corresponding resolvent which is already stored in the table to the retained set  a new set can be created in which both parent clauses contain an exhausted literal. since a double elimination is the best result that can be planned  the 
corresponding resolvent is added. after deletion  the mate table is updated and becomes 

two more double eliminations are detected and the corresponding resolvents are added to the retained set. after the addition of clause 1  the table becomes 

at this point no double eliminations are predictable  but an immediate single elimination results from adding the resolvent of clauses 1 and 1 to the retained set and leads to 

the table now indicates that a minimum of three resolvents must be added to the retained set before a deletion by e-rep is possible. the procedure arbitrarily selects the first literal in clause 1 and adds the shortest resolvent corresponding to a mate i.e. the resolvent of clause 1. the immediate testing of all newly added unit clauses  the end test  
yields the null clause. 
       in the realm of satisfiable sets  consider the following problem which results when at x under-bananas sol  is omitted from a formulation of the monkey and bananas problem due to c. green1. 

　　　a proof procedure using basic factoring  simple binary resolution  e~representation deletion  
subsumption deletion  and deletion-directed search produced the following modified trace. all of the clauses generated while processing the mate table do not appear in the trace. 
1 
the satisfiability of the input set has been demonstrated since the retained set is empty. 	the notation following clause 1 means that the deletion of clause 1 causes a l i t e r a l in clause 1 to be exhausted and therefore permits the deletion of that clause. 	in the same way  the deletion of clause 1 permits the deletion of clause 1  etc. 
     although not illustrated by either of the examples above  deletion-directed search must be constrained by a level bound. as in the case of the unit preference strategy1   a level bound must be imposed in order to avoid an infinite depth-first search. 
　　　now consider whether deletion-directed search can always find a l i t e r a l occurrence to exhaust. can resolvents always be added to a set of clauses so that some original clause w i l l be e-represented  while the answer is  no   e.g. {pxpfx  pxpgx}  a l l of the counter-examples contain neither an a l l positive nor an a l l negative clause and are therefore easily recognized as satisfiable sets. for a l l other sets  which includes a l l unsatisfiable sets  some identifiable l i t e r a l occurrence is exhaustible and the required resolvents are identifiable and of f i n i t e number. therefore  for a l l unsatisfiable sets  deletion-directed search w i l l always be able to find an exhaustible l i t e r a l occurrence. 
     the preceding examples outlined the operation of a deletion-directed strategy  but they did not reveal why and when it works effectively. the following observations give some insight into these matters. consider an arbitrary unsatisfiable set s 
of clauses. if some l i t e r a l occurrence l in a clause c has only one mate  then a resolution involving l and its mate  or a descendant of that 
mate  must occur in every refutation of s which contains c. if every refutation of s contains c  e.g. c is the negation of the theorem  then a resolution on l is essential to a refutation of s. in a minimal unsatisfiable set  any resolution which allows double parent elimination by e-rep is essential and the eliminations preserve minimality. any resolution which allows single parent elimination by e-rep in a minimal unsatisfiable set is essential but the elimination may not preserve minimality. a sequence of resolutions starting from a minimal unsatisfiable set and culminating in a deletion by e-rep contains at least one essential resolution. these observations suggest that deletion-directed search w i l l be most effective for a minimal unsatisfiable set containing many single-mate literals - as in the f i r s t example. its effectiveness w i l l diminish  however  as the set in 
which it operates becomes increasingly non-minimal and as the population of literals with only a few mates decreases. 
     if necessary  the effect of non-minimality can be substantially mitigated by using a clause generation rule which is restricted by set of support constraints1. the effect of the absence of literals having only a few mates is much more serious since the mate structure is the dominant source of guidance information. when the mate structure doesn't provide effective guidance  not only is deletiondirected search blind  but it also fails to effectively restrict the growth of the set of retained clauses. the appropriate action in such a situation 
is not clear but the use of some other strategy is probably the best choice. 
　　　the reader who is familiar with the davis-putnam procedure for testing the consistency of propositional calculus expressions1 may observe that the notion of deletion-directed search can be viewed as a generalization to the predicate calculus of their rule for eliminating atomic formulas. other approaches to a general notion of deletion-directed search can be 
found in reports by b. meltzer1 and r. reiter1. 
