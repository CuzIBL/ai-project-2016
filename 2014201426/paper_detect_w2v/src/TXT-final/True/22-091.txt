 
a neural net system called  conposit  is described. conposit performs rule-based manipulation of very short term  complex symbolic data structures. this paper concentrates on a simulated version of conposit that embodies core aspects of johnsonlaird's mental model theory of syllogistic reasoning. this conposit version is not intended to be a psychological theory  but rather to act as a test and demonstration of the power and flexibility of conposit's unusual connectionist techniques for encoding the structure of data. 
1 introduction 
the challenge presented to conncctionism and neural networks studies by high-level cognitive processing - which includes commonsense reasoning  planning  and some aspects of natural language understanding - is gaining increasing recognition. the main technical difficulties are discussed in barnden  1   fodor & pylyshyn  1  and elsewhere in the connectionist literature  and include the well-known variable-binding problem and the problem of accounting for complex  temporary  novel structures of short-term information. conposit is a neural net system that is aimed at highlevel cognitive processing and is able to manipulate neural-net implementations of traditional  complex  symbolic data structures by means of production rules implemented as neural subnetworks  barnden 1a b  and elsewhere . conposit  in its current simulated versions  is therefore an exercise in  implementational connectionism . see bamden  1b  for a discussion of the value this type of connectionist research. currently simulated versions of conposit are concerned only with short-term processing: they have no adaptive learning 
   * this research is being supported in part by usaf grant afosr-1  by supercomputer facilities through nasa's mpp working group  and by grant nagw-1 under the innovative research program of the nasa office of space science and applications. 
1 	cognitive models capability  and long-term memory consists entirely of the fixed set of production rules. 
　　　in this paper 1 describe conposit-1  a version of conposit that engages in commonscnse syllogistic reasoning  by embodying some core aspects of the johnson-laird's  mental model  theory  johnson-laird & bara 1 . this theory requires complex symbolic structures to be manipulated in a variety of ways. the production of a connectionist/ncural-net psychological theory is not  however  an immediate goal of conposit research. the purpose of applying conposit to an existing psychological theory was to provide a more objective test of the flexibility and generality of conposit's symbol-processing techniques  which were originally developed for other symbol processing tasks. the mental-model implementation has been straightforward and natural  and has required no ad hoc representational or processing techniques. the implementation also suggests that conposit could  in the future  be a route by which to map complex psychological symbol-processing theories down to the neural network level. conposit is  in fact  intended as a highly tentative  partial and idealized model of how biological neural networks in human cortex could effect symbolic information processing  but this biological aspect is beyond the scope of this paper. 
section 1 summarizes johnson-laird's approach. 
sections 1 and 1 outline conposit-1 s embodiment of it  at an abstract level of description in which conposit-1 is viewed as a machine manipulating the symbolic contents of registers. section 1 sketches the neural-net implementation of this register machine. section 1 concludes. it is impossible in a paper of this length to describe a system of the complexity of conposit in detail. further information can be found in barnden  1b  and srinivas & barnden  1 . 
1 syllogisms and mental models 
consider the syllogism 
some athletes are beekeepers. 
all beekeepers are chemists. 
therefore  some athletes are chemists. 

johnson-laird maintains that we make such a syllogistic inference by constructing one or more *'mental models*' conforming to the premises  and then try to read a conclusion off a mental model. a mental model is an abstract data structure made up of atomic tokens and identity links between tokens. for our example  there are arbitrarily selected number of tokens standing for athletes  beekeepers  or chemists. an arbitrarily selected proper non-empty subset of the athlete tokens are related by identity links to some beekeeper tokens  and all beekeeper tokens are so linked to chemist tokens. some tokens may be marked as being optional  a practice which cuts down the number of models that needs to be considered. the conclusion that some athletes are chemists arises from noticing that some athlete tokens are linked by chains of identity links to chemist tokens. the mental model serves as a sort of internalized  highly abstract  example situation'' conforming to the premises of the english syllogism. naturally  the  conclusion  read off from a mental model might merely be an artifact of the particular example it embodies  and therefore be invalid. in response to this  johnson-laird postulates that the system attempts to construct several different mental models conforming to the premises  in an attempt to falsify any particular putative conclusion. the attempted-falsification process will fail in the present case  but would have succeeded if the above syllogism had contained  some beekeepers  rather than  all beekeepers . 
1 mental models in conposit 
conposit-1 straightforwardly represents the johnsonlaird mental models  and constructs them from symbolic data structures  fragments of semantic network  that encode syllogism premises. conposit-1 does not yet address the following aspects of johnson-laird's approach:  i  the understanding or generation of natural language;  ii  a thorough attempted-falsification process - conposit-1 is given the conclusion  and merely checks its validity with a single model randomly generated from the premises; or  iii  negative premises and conclusions   no x are y  and  some x are not y  . the correction of the last two deficiencies is not difficult  however  and will be described elsewhere. 
　　　conposit-1's representation of the above example syllogism is illustrated in figure 1. what this shows is the starting state of an 1 region within a 1 array of registers called the configuration matrix  cm  of conposit-1. the cm is conposit-1's working memory holding the short-term data structures on which production rules act. each square in the figure illustrates a register. the values in registers may change rapidly as a result of symbol processing. a register's state consists abstractly of a symbol and a vector of binary highlighting flag values  each is on or off . the following shows what the various items in a square in the figures 

a square not showing any symbol illustrates a register containing a special  null  symbol. if a square does not show an on value for a highlighting flag  then that flag is off in the register. when  say  the black highlighting flag is on in a register  we say that the register is highlighted in black. 
　　　a non-null symbol may have a specific representational function  such as denoting a particular object or class of objects in the world  or a particular type of relationship among things. for instance  the atms  bkrs and chms symbols in the figure denote the classes of all conceivable athletes  beekeepers and chemists respectively. the olap and subc symbols denote the classes of all conceivable class-overlap situations and subclass situations respectively. the si  s1 and s1 symbols will be discussed below.  none of the symbols mentioned is dedicated to syllogistic reasoning.  a register containing a non-null symbol is thought of as currently denoting whatever that symbol denotes. for 
barnden 

instance  in the figure there are registers that - temporarily - denote the athlete class and the class of conceivable class-overlap situations. 
　　　the group of squares at the bottom middle of figure 1 illustrates a possible  subconfiguration  of register states that acts as a representation of the second premise of the syllogism  namely that all beekeepers are chemists. conposit-1 takes a white-highlighted register to denote a member of the class denoted by any adjacent black-highlighted register. therefore the whitehighlighted register in the bottom middle subconfiguration denotes some class-inclusion situation. further  if a register denotes a class-inclusion situation  then conposit-1 takes any adjacent red-highlighted register  here  the one containing bkrs  to denote the included class  and any adjacent green-highlighted register  here  the one containing chms  to denote the including class. 
　　　the bottom left and right subconfigurations in figure 1 are very similar to the middle one  and encode the syllogism's first premise and the conclusion respectively. the si  s1 and s1 symbols are arbitrary  distinct  variable-like unassigned symbols. unassigned symbols have no permanent denotation  but can be viewed as attaining temporary denotations by virtue of their appearance within data structures in the cm. for example  since the register at the bottom left containing s1 denotes the athletcs-overlap-bcckcepcrs situation  the symbol si is taken to denote this temporarily. now  conposit takes all registers containing the same non-null symbol to denote the same thing; so  by this symbol-sharing principle  the two registers in the upper half of the figure containing si also denote the athletes-ovcrlap-bcekeepers situation. the registers containing s1 and s1 arc analogously interpreted. 
　　　note that the absolute positions of the symbols and highlighting states are irrelevant  as are the directions of the adjacency relationships. moreover  a subconfiguration such as the ones mentioned can be split up into pieces by means of symbol sharing tbarnden 1b   so that the predecessor and successor role fillers could be specified at widely separated positions in the cm. 
the three subconfigurations in the upper half of 
figure 1 specify the order in which the situations represented in the bottom half should be considered  corresponding to the order of the statements in the syllogism.  the johnson-laird theory respects this order.  for instance  the upper middle subconfiguration states that the situation denoted by si is to be considered before the situation denoted by s1. the interpretation of the upper three subconfigurations is analogous to that of the lower three: the symbol then denotes the class of possible processing-ordering situations  and  for such situations  red and green highlighting mark the predecessor and successor respectively.  as a special case  the 
1 	cognitive models 
left-hand upper subconfiguration states that the si situation is the first to be considered. the purpose of the 1 sign will be explained later.  
　　　in a way to be described below  production rules that fire in response to ordering and premise subconfigurations shown in figure 1 create the subsiate shown in figure 1  which illustrates a different region of the cm. actually  the new data structures in that figure could be spread around randomly over the cm  but they arc shown in a regimented arrangement for illustrative clarity. 

the xi to x1 are distinct unassigned symbols. each johnson-laird token for a class of persons is implemented as a pair of adjacent cm registers  one of which  the black one  temporarily represents a class of person  and the other of which  the white one  containing an xi symbol  therefore represents a particular though indefinite member of the class. each xi symbol is thereby considered to denote a person for the time being. the function of johnson-laird's identity links is taken over by symbol-sharing  since symbol-sharing registers represent the same thing. in the figure an 's' indicates special highlighting signifying that the token is optional.  optionality could also be indicated by a more elaborate data structure.  
　　　the construction of the mental model has two main phases. first  a production rule called  rule some  detects the subconfiguration for the first premise  figure 1  bottom left   and constructs  in random positions in the cm  the athlete and beekeeper tokens in figure 1. it creates randomly many athlete 

tokens  six on average  then constructs beekeeper tokens using the same unassigned symbols as in a random subset of the athlete tokens  and  finally  randomly constructs three extra beekeeper tokens on average. secondly  another  similar  rule called  rule all  detects the subconfiguration for the second premise and constructs some chemist tokens with the same unassigned symbols as in the beekeeper tokens  and then constructs some extra chemist tokens. 
　　　to check the conclusion  rule some comes into play again by detecting the conclusion subconfiguration  figure 1  bottom right  and checking that there is at least one athlete token and chemist token sharing a symbol. in cases where the conclusion of a syllogism is invalid  conposit-1 sometimes does and sometimes does not construct a mental model consistent with the conclusion  because of the randomness. it would be trivial to get conposit-1 to repeat the whole process in an attempt to alight randomly on a falsifying model. 
　　　rule some  rule ah and the remaining rule  notc ncxt  see below   work with any classes in syllogisms  not just the athlete  beekeeper and chemist classes. there is no replication of rule circuitry for the different classes. 
1 conposit-1's production rules 
a conposit-1 rule consists of a condition part and an action part. at any time  only one action part can be executing  but the cm state detection implied by condition parts is done in parallel across all rules. conflict resolution among simultaneously satisfied rules is based on a fixed total priority ordering  but this will be relaxed in later conposit versions. 
　　　the condition part of a rule tests for the presence or absence of specific sorts of cm state configuration  by means of a highly parallel detection mechanism that will be sketched in a moment. the action part manipulates cm data structures by changing the symbol and/or highlighting states of registers. the registers subjected to these changes are chosen  associatively  on the basis only of their current highlighting/symbol states  and the states of their immediate neighbors. an action part is an arbitrarily complex flowchart  possibly involving branching and looping  each node of which sends a command signal that causes a group of elementary changes at some cm registers. 
　　　the following will describe the subconfigurationdetection and state-change mechanisms in the context mainly of  note next   the simplest of the three rules in conposit-1. its condition part detects the presence of a then subconfiguration  see top of figure 1  whose predecessor register  the red one  has been marked by onness of the  done  highlighting flag  1 .  in the initial state of the cm in simulation runs  the  done  highlighting is at the predecessor register of the  first  then subconfiguration.  the goal of note ncxt is to place  now  highlighting at the successor register r  the green one  in the detected then subconfiguration  and to spread this now-highlighting also to all registers having the same symbol as r. in figure 1  the effect of a note next execution is to mark with  now  highlighting the two registers both containing the si symbol  or both containing the s1 symbol  or both containing the s1 symbol. this serves to mark the class-overlap or subclass situation that should now be attended to; the nowhighlighting contributes to the firing of  rulc somc  or  rule au  as appropriate. 
　　　note next's detection mechanism is as follows  at the register-machine level of description. the mechanism relies on register arrays  called location matrices  lms   that are isomorphic to the cm. a location matrix register has one of two stales  on or off. an on value at a register in a particular lm indicates the presence of a particular sort of subconfiguration based at the corresponding register in the cm. for the purpose of note  ncxt  the lms are ones called lmr.then  lm ..member then and lm::done pred. the first acquires an on value at every position corresponding to a cm register containing the then symbol. the second lm acquires an on value at every position corresponding to a cm register that is white-highlighted and is adjacent to a black-highlighted register containing the then symbol. recall that a white register of this sort denotes a member of the class of possible succession situations. the lm also acquires on values at the positions where cm registers contain the same symbol as a white one of the sort just described. that is  on values in this  and every other  lm are  spread by symbolsharing . the third lm  lm::done pred  acquires an on value at the positions of  done-predecessor  cm registers: cm registers that arc done-highlighted and are acting as the predecessor register of a then subconfiguration. in fact  therefore  lmr.done pred acquires an on value at every position that is adjacent to the position of an on register in lm:.member '/'//en and that corresponds to a cm register that is both donehighlighted and red-highlighted. also  onness is spread by symbol-sharing in this lm as in any other. 
the starting node of the action-part flowchart of 
note next is stimulated into action if there is an on value anywhere in lm::done pred. the action pari is a linear flowchart with four nodes. the starling node sends a command signal to lmr.donejyred  telling every register in it that is on to send a signal to its corresponding cm register. the cm registers receiving such a signal turn their  detected  highlighting flags on. thus  the effect is to mark every  done predecessor  register in the cm with  detected  highlighting. once this effect is complete  the second flowchart node is activated  and sends a command signal to the cm  telling every white register that has a neighbor highlighted 
bamden 

in both red and * detected'' to turn its  moving  highlighting flag on. the signal also tells the cm to add  moving  highlighting to every register having the same symbol as one that is already  moving highlighted.  this is  spreading by symbol-sharing  of changes within the cm.  then  the third flowchart node is activated  and sends a command signal to the cm telling every green register that has a moving-highlighted neighbor to turn its  now  flag on. again  the signal also causes spreading of the now-highlighting by symbol sharing. finally  the fourth flowchart node sends a command signal to the cm telling every register to turn off its  done  and  moving  highlighting flags. 
     a full description of rule some or rulc au would be too long to be included here  but they work analogously to note ncxt on the basis of lms and command signals very like those used in note next. however  their action parts are more complex  involving branching and looping  both of which arc controlled by detection of on values in certain lms or specific highlighting states in the cm. rule some detects the presence of a now-highlighted olap  i.e. overlap  situation in the cm. if mental model tokens of both classes involved already exist  as will be the case if rule some is operating on the bottom right olap situation in figure 1  then the rule merely checks for the existence of a token of one the classes that shares a symbol with a token of the other class. in more detail  the rule marks all the while registers in athlete and chemist tokens  as in figure 1  with special highlighting flags  membcr of classl  and  member of class1  respectively. part of this marking process is to spread such highlighting by symbol-sharing. all that is left to do is to detect the presence of some register marked with both  mcmbcr of classl  and  mcmbcr  of class1 . we have here a traditional marker passing process  but working over highly temporary data structures. when tokens of both classes do not already exist  rule some creates randomly many tokens of one or both classes  as appropriate  establishing sharing of some symbols xi between some tokens of one class an some tokens of the other. rule all is very similar to rule some. 
　　　a rule operates on the cm in a fashion that is highly  but not completely  simd-like  register-local  and parallel. each command signal sent to the cm or to an lm is identically distributed to all the registers in the matrix. as we have seen  different registers react differently  according to their own current states and  in the cm case  those of their immediate neighbors. often  a command signal sent to the cm requires the cm to confine its initial reaction to just one  arbitrarily selected  register. arbitrary selection is used  for instance  in register recruitment during data structure building. however  even when arbitrary selection is in operation  the command signal can require every register that has the same symbol as one that is already chosen as reactive to react also. this is  spreading by symbol-sharing . alternatively  the reaction required from reacting registers can include the broadcasting of their  assumed identical  symbols to all registers in the cm; the next command signal can then predicate reaction on whether registers' symbols equal the one broadcast at the previous step. apart from the sequencing implicit in spreading by symbol-sharing  reacting registers work in parallel. 
1 neural-net implementation of con posit 
this section briefly sketches a simple neural net implementation of the conposit register machine. as stated earlier  each cm register is implemented as a neural subnetwork. part of this carries the symbol and highlighting slates of the register  which are just temporary activation patterns. for each highlighting flag there is a small cyclic subnetwork that can maintain one of two states of recurrent activity. a symbol can be thought of a a bit vector  each bit being carried by a similar cyclic subnetwork. 
     the rest of the circuitry in the register is concerned with the register's reaction to command signals. each cm register subnetwork is connected to the subnetworks for immediately neighboring registers  in order to service the sensitivity to neighboring-register state required by many command signals. each register subnetwork is also connected to the so-called parallel distributor  pd  for the cm. the pd is what directly receives command signals from rule action part flowchart nodes  and one of its main functions is to distribute each signal identically to all the cm registers. command signals are conveyed on cables of connections  each connection in a cable conveying a binary or ternary value. connections in a cable serve purposes such as providing new values for symbol bits or highlighting flags  specifying on/off/don't-carc highlighting-flag values for the purpose of selection of reacting registers  and specifying whether the command signal requires arbitrary selection  spreading by symbol sharing  or symbol broadcasting. 
     a second important function of the pd is to perform the arbitrary selection  when required  among registers satisfying the symbol/highlighting conditions specified in a command signal.  a succession of 
arbitrary-selection steps is also used to serialize the symbol broadcastings needed in the spreading-by-symbolsharing option.  arbitrary-selection is performed by a temporal winner-take-all contention-resolution mechanism in the pd  srinivas & barnden 1 . this mechanism receives  ready  signals on special connections from all registers among which selection is to take place. the mechanism has the effect of detecting the first such signal to arrive and telling the register that sent it that it has been chosen. however  if the first ready signal is followed within a certain time window by another ready signal  all the sending registers are told to try again. the 

1 cognitive models 

mechanism relies on small random differences in the times taken by cm registers to decide to send a ready signal  and on differences between the travel times of signals on different connections. thus  conposit at the implemenlational level brings in relative timing of signals in an important way  and is therefore different from most other connectionist systems. 
　　　lm registers are implemented similarly to cm registers  and each lm also has a pd very like the cm's. lms are connected together  and to the cm  in a simple way to reflect the functional dependencies described earlier. each lm register receives input connections only from the corresponding and neighboring registers in the cm and/or other lms. simple and/or logic  implemented in neural units acting as logic gates  is then all that is required for introducing on values into lms. 
　　　rule flowcharts map easily onto neural networks  each node being realized as a small subnetwork. each node receives enablement connections from its predecessor flowchart nodes  and/or connections conveying information about the presence of highlighting values values  anywhere  in the cm and/or on values  anywhere  in some lms. each non-starting node also receives an enablement connection from the cm's pd  so that a node only becomes activated when the previously activated node's work has been completed. 
1 conclusion 
conposit-1 is a connectionist/neural-network system with the ability to manipulate complex symbolic data structures  based on those proposed in an existing  sophisticated psychological theory. also  conposit could easily effect straightforward deduction of a syllogism conclusion from the premises  without going through mental models. conposit versions reported elsewhere extend the demonstration of its powers. its ability to do constrained variable binding is shown by a version that embodies the rule: if a loves b  b loves c  and c is not a  then a is 
jealous of c  barnden 1b . also  a type of variablebinding is implicit in conposit-1  in that the rules do not involve different pieces of circuitry to cope with different combinations of classes in syllogisms. 
although the symbolic manipulations in running 
conposit simulations have been simple from the point of view of traditional ai  they are readily extensible to much more complex cases. further  very few other fully connectionist systems can even come near to what conposit does  the systems of shastri & ajjanagadde  1  and touretzky & hinton  1  being two important exceptions. conposit's data structuring flexibility comes from its use of registers  and from its relative-position encoding  rpe  and pattern-similarity association  psa  techniques. in conposit  psa takes the form of symbol-sharing: the use of several occurrences of the same symbol in different registers to achieve a linking power similar to that of linking by associative addressing in computers. rpe appeals to the idea that one can put things into association with each other rapidly and flexibly by putting them next to each other  cf. the sequential-allocation method used for data structuring in computers.  the relatively computer-like appearance of conposit makes it unusual as a connectionist/ncural-nct system. however  rpe and psa have loose but reasonably clear connections to techniques used in other connectionist systems  barnden 1a b   and there arc many aspects of future conposit versions that ally it to more traditional connectionist/neural systems  barndcn 1b . 
acknowledgments 
i thank k. srinivas for help with simulation work. 
