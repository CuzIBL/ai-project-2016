 
this paper addresses the problem of building an interruptible real-time system using contract algorithms. contract algorithms offer a tradeoff between computation time and quality of results  but their run-time must be determined when they are activated. many ai techniques provide useful contract algorithms that are not interruptible. we show how to optimally sequence contract algorithms to create the best interruptible system with or without stochastic information about the deadline. these results extend the foundation of real-time problemsolving and provide useful guidance for embedding contract algorithms in applications. 
1 	introduction 
since the mid 1's  the ai community has produced a large body of work on anytime algorithms for solving such problems as real-time search  constraint satisfaction  planning and scheduling  and diagnosis  see  for example  the collection of papers in  horvitz and zilberstein  1  . much of this work has focused on the meta-level control problem posed by anytime algorithms  that is  the problem of deciding when to stop deliberation and act on the best available solution. the resulting techniques have proved useful in addressing the high computational complexity of ai problems and the inherent uncertainty associated with ai problem-solving techniques. 
　contract algorithms are a special type of anytime algorithms that require the amount of run-time to be determined prior to their activation. in other words  contract algorithms offer a tradeoff between computation time and quality of results  but they are not interruptible. once activated with a particular contract time  a contract algorithm may not produce any useful result before the end of the contract. 
　contract algorithms are easier to construct because they do not have to continually generate solutions of increasing quality. in fact  many existing ai problemsolving techniques produce contract rather than interruptible anytime algorithms. examples include depth-
1 	planning and scheduling bounded search or cost-bounded search techniques  design-to-time  gravey and lesser  1   approximate evaluation of relational database emeries  and scheduling  gallone and charpillet  1j. what is common to these algorithms is that for any given contract time they select a set of parameters that limit the amount of search or computation so as to guarantee returning a solution within the available time. another important class of systems that yields contract rather than interruptible algorithms includes systems composed of several interruptible or contract algorithms. composition  even simple sequencing  destroys interruptibility; the resulting system is therefore a contract algorithm. zilberstein  shows how to divide the contract time among the components so as to maximize the overall quality of the solution for a given contract. 
　this paper addresses the problem of building an interruptible real-time system using contract algorithms. the key question is how to use prior knowledge about the performance of the algorithm and the deadline in order to produce an optimal sequence of solutions with a contract algorithm. this is done by activating the contract algorithm multiple times with different contracts. section 1 provides a formal definition of the contract sequencing problem. section 1 describes an optimal solution to the problem when no information is available about the deadline. section 1 shows how to handle quality uncertainty and stochastic deadlines. section 1 provides an optimal solution to the sequencing problem when a timedependent utility function is given instead of a strict deadline. we conclude with a summary of the contribution of this work. 
1 using contract algorithms in interruptible domains 
suppose that a contract algorithm  a  is used in an interruptible domain in which the amount of time available for problem solving is unknown in advance. at a particular time  the system receives a deadline signal indicating that the computation must be terminated and the best available result must be returned. examples of interruptible domains include a diagnosis system in an intensive care unit; a data visualization program that 

may be interrupted by its user; and a scheduling program that may need to return a new schedule once processors are ready to accept new tasks. 
　we use in this paper prior information about the performance of the contract algorithm. we begin with a 
　simple form of performance profile  dean and boddy  1  and generalize it in section 1. 
definition 1 a performance profile   of contract algorithm a  denotes the output quality as 
function of contract time t. 
　the performance profile is.assumed to be a monotone increasing and continuous function of time. 

monotonicity is a standard property of anytime algorithms that can be guaranteed if the best result rather than the most recently generated one is returned. strict monotonicity and continuity are assumed in order to simplify the analysis in section 1. 
　if the amount of time available for computation is known in advance  the best strategy to maximize the quality of the result is to run the contract algorithm once giving it all the available time. what happens when we have no information  or only stochastic information  about the deadline  the contract algorithm should be activated with some contract time . if the algorithm completes its execution before the deadline  it should be reactivated with a new contract  and so on. because of the monotonicity of   it is never beneficial to use a short contract following a longer one. therefore  we get the following sequence of contracts: 
  *   
suppose that an interruptible anytime algorithm b is constructed using a with the sequence of contracts x = 
. whenever b is interrupted  it should return the result obtained by the most recently completed contract. no solution is available before the termination of the first contract  which is arbitrarily small . therefore  the performance profile of the interruptible algorithm  b  is as follows. 
	 1  
　what is the sequence of contracts that produces the best anytime algorithm  to answer this question we must first formalize the notion of  best . if the deadline  d  is known in advance  the best quality  can be guaranteed. suppose now that an interruptible algorithm is created by a sequence of contracts. we want the interruptible algorithm to guarantee the .same quality as the contract algorithm  if it runs on a processor that is accelerated by a factor of r  1. this definition follows the notion of bounded optimality defined by russell  subramanian and parr . in fact  the results presented in section 1 can be interpreted as the construction of a bounded-optimal interruptible algorithm from the contract one. moreover  we prove that the minimal acceleration needed by any interruptible algorithm that matches the quality of a is 1. the acceleration ratio is defined as follows. 
definition 1 let a be a contract algorithm and b an interruptible algorithm produced by the sequence of contracts x =   then the acceleration ratio of 
  is the smallest constant c for which: 
		 1  
　the acceleration ratio is the minimal acceleration that guarantees that the interruptible algorithm will always have a solution ready from the previous contract that is at least as good as the one produced by the contract algorithm without acceleration. the condition  is needed because no solution is available before the termination of the first contract. note that the acceleration ratio does not imply that the application must utilize a faster processor; it is only a performance measure of a sequence of contracts. 
1 	optimal sequencing of contracts 
zilberstein and russell  show that a particular sequence of contracts requires an acceleration ratio of 1. the sequence of contracts is a geometric series with runtime being doubled at each activation. they prove the following theorem. 
theorem 1 for any contract algorithm a  an interruptible algorithm b can be constructed such that i . 
in this section  we prove that the acceleration ratio of 
1 is the best possible over any sequence of contracts. we also generalize the result to the case of multiple problem instances. 
1 	solving a single problem instance 
we first show that the construction proposed by zilberstein and russell is in fact optimal in the sense that it requires the minimal acceleration ratio. in general  the acceleration ratio must hold in the worst possible case: when the interruptible algorithm is stopped just before the end of the current contract  and it must return the result produced by the previous run  with contract time  . this leads to the following property. 
lemma 1 equation  1  is equivalent to 

zilberstein  charpillet  and chassaing 	1 


to summarize  in order to show that a particular sequence of contracts is optimal  it is sufficient to show that its acceleration ratio is the smallest required to satisfy equation  1 . 
theorem 1 the minimal acceleration ratio needed to construct an interruptible algorithm from a given contract algorithm is r = 1. 

the difference between the last two equations gives: 
		 1  
　the sequence  x1 x1 ...  is an increasing sequence of positive numbers. let p be defined as follows. 

1 	planning and scheduling 

1 	solving multiple problem instances 
we now generalize the above result to the case in which a contract  or interruptible  anytime algorithm with performance profile qa is used to solve m independent problem instances. the goal is to maximize the minimal solution quality over all problem instances. when the deadline d is known in advance  the best strategy is to divide all the available time equally among the problem instances guaranteeing a minimal quality of  the question is how to construct the best interruptible anytime algorithm when the deadline is unknown. as with a single task  we want to find the minimal acceleration needed to match the performance of the contract algorithm with a known deadline. 
　there are many situations in which multiple instances of a problem must be solved in real-time. examples include search problems with multiple possible starting states; optimizing the code of several tasks to be executed on a parallel machine; and compression of a file divided into m blocks to be transmitted through m equivalent communication channels. in all these examples the objective is to maximize the minimal quality over all problem instances by the deadline. another application is the continual computation model developed by horvitz  in which an interactive system uses idle time in order to solve possible future problems. when the user interrupts the computation by making a specific choice  the system responds using the best available solution for that choice. 
　for a given sequence of contracts x =    the performance profile of the interruptible algorithm solving m problem instances is as follows. 


　this is due to the fact that the first  and shortest  among the last m contracts defines the overall quality. 
　we want to find the minimal acceleration ratio c such that  delivers a result at least as good as the one returned by a when the deadline is known 


proof: this is a straightforward generalization of lemma 1. the complete proof is omitted. 
theorem 1 the minimal acceleration ratio needed to construct an interruptible algorithm to solve m problem instances with a given contract algorithm is r = 

proof: the proof is similar to the proof of theorem 1 and is given in appendix a. note that the ratio  is obtained by a sequence of contracts defined 
by a geometric series with run-times being multiplied by a factor of 
therefore  the construction described in zilberstein and 
russell  is the solution for the special case in which rn = 1. 
1 handling quality uncertainty and stochastic deadlines 
in this section we generalize the problem of sequencing contract algorithms to situations in which some information about the deadline is available. we assume that there is uncertainty about both the deadline and the quality produced by the contract algorithm. it is not surprising that there is no closed-form solution to the sequencing problem in this case. instead  the optimal sequence of contracts is determined using dynamic programming. to be able to apply dynamic programming  the problem is formalized using a discrete representation of time  as opposed to the continuous representation used in the previous sections . 
definition 1 a stochastic deadline is a probability distribution     of the deadline over time. 
　a stochastic deadline is the prior probability that the deadline will occur at time t measured relative to the activation time of the contract algorithm. the representation of performance profiles is generalized as follows. 
definition 1 a stochastic performance profile  pa q t  of a contract algorithm  a  denotes the probability of getting solution of quality q with contract time 
t. 
　we assume that the quality of the result is observable. that is  once the contract algorithm completes its execution  the actual quality of the solution produced by the algorithm can be determined. the quality of a plan  for example  is observable if it is measured by the sum of the costs of the operators. however  when solution quality is defined as the approximation ratio with respect to the optimal solution it may not be observable. hansen and zilberstein  have studied situations in which solution quality is partially observable. their approach to the problem could be used to augment the framework presented in this paper. 
definition 1 a utility function  u q   is the value of a solution of quality q produced by the contract algorithm. 
　the contract sequencing problem in this case is defined as follows. given a contract algorithm  its stochastic performance profile  a stochastic deadline and an arbitrary utility function  find an optimal policy to activate a sequence of contracts. an optimal policy is one that maximizes the expected utility of the available solution at the deadline. 
we approach the problem by defining a corresponding 
markov decision process  mdp  and finding an optimal policy by solving it. the states of the mdp are  g  t  indicating the availability of solution of quality q at time t. in addition  there is a terminal state associated with each solution quality q  indicating reaching the deadline with that quality. the action or decision taken at each non-terminal state is to activate the contract algorithm with a new contract time t. the outcomes of these actions depend on the stochastic performance profile and the likelihood of reaching the deadline  both of which satisfy the markov assumption  they are independent of previous states  given the current state of the computation . 
definition 1 let  be the probability distribu-
tion of the deadline occurring at time m  m   n  given that it has not occurred so far and the current time is n. 
　　note that can be easily computed from the prior probability as follows. 
		 1  
this can be easily obtained by observing that n stands for the proposition that the deadline did not occur at time points {l ... n} and by applying bayes1 rule. 
definition 1 the completion probability of a contract t starting in state  q t.  is 

the completion probability is the probability that the contract algorithm will terminate before the deadline occurs. 
zilberstein  charpillet  and chassaing 	1 

we now define the following value function over states: 

　　　　　　　　　　　　　　　　　　　　　　　 1  the value of a contract r at state  q  t  depends on whether the deadline occurs during the contract or not. if the contract algorithm completes its execution  with probability c t r    then the value depends on the new quality and time. note that if the new quality is lower than the current solution quality  the better solution is used rather than the most recent one. if the deadline occurs  a final state is reached with a reward that depends on the quality of the existing solution. the value function is defined based on the best action r in each 
theorem 1 the contracts that maximize the value function defined in equation  1  provide an optimal solution to the contract sequencing problem for a given stochastic deadline. 
proof: because of the one-to-one correspondence between the sequencing problem and the mdp and because the stochastic performance profile and the deadline satisfy the markov assumption  it is obvious that an optimal policy for the mdp provides an optimal solution to the sequencing problem. 
　many existing algorithms can be used to solve equation  1 . because this is a finite-horizon mdp with no cycles  time always moves forward   dynamic programming can be used to determine the best action for each state in one sweep of the state space. the policy can be constructed off-line once for a given deadline distribution  offering efficient reactive meta-level control. the selection of a time unit affects the size and complexity of the policy. we are confident that a coarse time unit and a compact policy are sufficient in practice for making good mcta-level decisions. 
1 	optimal sequencing with no strict deadline 
in this section we consider the case in which there is no strict deadline. instead  the value of the solution decreases over time as specified by a time-dependent utility function  dean and boddy  1 . 
definition 1 a time-dependent utility function  
u q t   is the value of a solution of quality q produced by the contract algorithm and returned at time t. 
　the contract sequencing problem in this case is defined as follows. given a contract algorithm  its stochastic performance profile and an arbitrary time-dependent utility function  find the best policy to activate a sequence of contracts. as in the previous section  an optimal policy maximizes the expected utility of the returned solution. note that in this case the meta-level control problem is not only to determining the next contract  but also when to stop the computation and return the currentbest result. 
1 	planning and scheduling 
　similar to the previous section  we approach the problem by defining a corresponding mdp with states representing the current quality and time. the action taken at each state  however  is either to terminate the computation and return the current solution of quality q or activate the algorithm with a particular contract r. we define the following value function over states. 

 1  
　when a new contract is activated  the value is defined by the distribution of output quality and the contract time. if the computation is terminated  the value is the utility of returning a result of quality q at time t. 
theorem 1 the policy that maximizes the value function defined in equation  1  provides an optimal solution to the contract sequencing problem for a given timedependent utility function. 
proof: again  this is an immediate result of the oneto-one correspondence between the optimal sequencing problem and the above mdp and because the stochastic performance profile satisfies the markov assumption. d 
　using dynamic programming  the optimal policy can be constructed off-line once for a given time-dependent utility function  offering an efficient  reactive meta-level control. 
1 	conclusion 
we have analyzed the problem of optimal sequencing of contract algorithms. the problem arises when there is uncertainty about the amount of time available for problem-solving with contract algorithms. when no prior information is available about the deadline  the best sequence can match the performance of the contract algorithm when it runs on a processor that is 1 times faster. no slower acceleration can guarantee that performance. this result is generalized to the case in which an interruptible system must solve multiple problem instances. when stochastic information is available about the deadline and about the performance of the contract algorithm  the optimal sequence of contracts can be constructed using dynamic programming. finally  we solve the case in which no deadline is specified but the utility function is time-dependent. 
　section 1 was inspired by the work of baeza-yates et al.  on searching in the plane. the analogy 
between the two problems is not obvious  but once formalized  they present similar mathematical questions. in particular  lemmas 1 and 1 in this paper provide a foundation to solving the problem of searching in the plane. furthermore  the analytical work reported here offers a dramatic simplification of the proofs presented in  baeza-yates et al.  1 . 

　sections 1 and 1 build on a large body of work on meta-level control of computation by dean and boddy   horvitz   russell and wefald  and others. by and large  existing meta-level control mechanisms are myopic; the computation is terminated once no single computational step has positive value. one exception is the technique developed by russell  subramanian  and parr  for sequencing a set of rules given a stochastic deadline. similar to their dynamic programming approach  our solution provides a globally optimal policy  taking into account future computations. 
　to summarize  we show how to optimally sequence contract algorithms so as to maximize their utility in interruptible domains. these results provide useful guidance for embedding contract algorithms in a wide range of practical applications. 
acknowledgments 
this work was supported in part by the national science foundation under grants no. iri-1 and ir1g1  by an nsf/inr1a cooperative research grant  and by the lire cooperative program at 1nr1a. 


