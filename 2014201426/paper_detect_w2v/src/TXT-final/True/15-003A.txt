 
a method is described for manipulating descriptions of programs to access codasyl databases to meet a specification given in r e l a t i o n a l algebra. the method has been implemented as a prolog program which is compared with the previous pascal version. the methodology is discussed as an automatic programming technique which explores the transformations on a program induced by changes of data structure representation at two levels. 
i  introduction 
     the problem of generating equivalent programs under changes of data representation is an important one. in the case of l i s t processing  a change of data structure representing sets of objects and their relationships can completely change the program. the same applies to codasyl databases which are essentially enormous l i s t structures on secondary storage. however because of the variety of redundant pointers it is possible to traverse the same l i s t s t r u c t u r e in many d i f f e r e n t ways. thus it is not just a question of changing the program but of generating alternative programs whose run-times  because of disc access  may d i f f e r by factors of 1 or more. 
     this paper concerns the manipulation of abstract descriptions of such programs. a query is formulated in a functional language   r e l a t i o n a l algebra  which specifies the logical relationships between the retrieved data values and the stored data items but does not specify the sequence used to access them   the access path  . the aim is to generate a program that produces the desired items e f f i c i e n t l y by exploring a variety of alternative program structures  which are the consequence of following d i f f e r e n t access paths. 
	a method of 	doing 	this 	has 	been 	developed 
 bell 1  and embodied in a system  astrid   gray 1  for typing in queries in r e l a t i o n a l algebra and generating and running programs on codasyl databases  ids-ii and idms . from the user's point of view the benefits are twofold. 
     1. it gives the user a r e l a t i o n a l view of the codasyl database. thus he is able to think about his r e t r i e v a l problem in terms of table manipulations using the high level operations of relational algebra instead of having to work at the low level of record access operations following pointers through the database and embedding these operations in fortran code. 
     1. he can write complicated m u l t i - l i n e queries that compute derived data both from records and groups of records  averages  counts etc.  and appear to generate several intermediate tables. the system w i l l endeavour to find an access path that computes the same r e s u l t without storing these tables  which could be very costly f o r l a r g e databases. the program generated may be quite complicated to write by hand and should be competitive with a trained programmer's code. 
	the 	system 	goes 	through 	several 	stages. 
f i r s t the user types a query in r e l a t i o n a l algebra which i s parsed and c h e c k e d . then i t i s manipulated at two levels. at the top level the query is rewritten s t i l l in algebraic form using rewrite rules so as to assist transformations at the next l e v e l . the lower level uses a concrete representation of the codasyl data structure by a traversal  see below . the system reads in a 
number of stored traversals for each r e l a t i o n . these have each to be manipulated and combined in various ways to satisfy the requirements of the query. s o m e combinations w i l l represent very slow and i n e f f i c i e n t programs and be discarded. however this cannot be done immediately  as a good program f o r p a r t of the query may l a t e r t u r n out to be second best after modification to f i t the remainder. finally the descriptions are costed according to information on database access times and the selected version is used to generate fortran code to run against the actual database. the system is oriented towards complex queries accessing thousands of records which can only run in batch producing substantial printout. thus it is not the run-time for the translator which matters but the complexity of query which it can handle. currently other systems only handle a very restricted r e l a t i o n a l view or a rather restricted query language. 
	the astrid system was 	o r i g i n a l l y 	written 	in 
pascal. more recently the two levels of manipulation have been rewritten in prolog. this paper describes the basic methodology and shows how prolog is well adapted to this task. 
	the 	layout 	of 	the 	paper 	is 	as 	follows. 
section { i i } describes some transformations which affect the resultant program but are best carried 

1 p. gray and d. moffat 
out on the relational algebra in prolog. section { i i i } describes the basic notion of a traversal and how it is used to represent a piece of program. section {iv} describes the combination of traversals and how t h i s is used to b u i l d descriptions of more complex programs. section 
{v} i l l u s t r a t e s some of the prolog used to combine traversals and discusses i t s advantages and snags in this application. the f i n a l section draws conclusions for future work. 
a. 	relation to other work 
     burstall and darlington  1  describe a system for specifying a program by recursion equations. these can be manipulated and play a role similar to r e l a t i o n a l algebraic expressions in our system. they discuss a way to rewrite the abstract program given a concrete data representation in terms of a  coding function . however our use of a traversal represents the data in a rather different way. apart from tarnlund 
 1  few have addressed the problem of e f f i c i e n t access to relations using information about the mode of storage. tarnlund has studied ways to answer queries e f f i c i e n t l y by representing them as theorems to be derived in the f i r s t order calculus and looking for e f f i c i e n t derivations where relations are held as a binary tree structure. 
ii  relational a l g e b r a transformations 
     the user asks his query in r e l a t i o n a l algebra. we f i r s t describe t h i s and then see how the system improves the query by rewriting i t . 
a. 	relational databases 
     a r e l a t i o n is a set of tuples each containing values for a fixed set of a t t r i b u t e s . viewed as a table the a t t r i b u t e values are in columns. a 
     r e l a t i o n a l database usually contains several relations which have attributes in common. the examples used come from a database on world cup f o o t b a l l results. the two relations of interest are shown in table 1. 
table 1. r e l a t i o n a l view of world cup database 
b. 	relational algebra 
     relations can be treated as tables and new relations derived from them by the operations of r e l a t i o n a l algebra. the operations used are adapted from codd. they are selection  projection  j o i n   extend and group by  gray 1 . the join operation is a generalised intersection  formed from the cartesian product of two relations by selecting those tuples with matching values for the common a t t r i b u t e s . a t y p i c a l query starts by joining several r e l a t i o n s   then selects tuples  then extends and or groups these tuples and f i n a l l y projects to required columns. 
     the relational algebra can be rewritten  just l i k e standard algebra  by using rewrite rules in prolog. we have 1 such rules with special predicates for handling commutation. a t y p i c a l transformation would move a p r o j e c t i o n operation %  in an expression involving j o i n   *   and selection ;  to ease the join method. 
 stadium allocation ;  stadium =  cordoba''  %year  group * group placings 	; placing=1  	*year group  becomes 
 stadium allocation ; stadium= cordoba   * 
group placings ;  placing = 1    %year group 
	i i i 	traversals of codasyl database structures 
     although the user thinks of relations just as tables  they are actually complicated doublylinked l i s t structures. at the second level of transformation we need to represent possible paths through these structures by traversals in order to search for an e f f i c i e n t one. thus we f i r s t explain the codasyl  set  relationship used to l i n k d i f f e r e n t records. we then see how a number of alternative  base traversals  can be defined for each relation and held on f i l e . 
   a codasyl database consists of sets of records of the same type which are linked by pointers to other records in the set and to a common owner record which uniquely i d e n t i f i e s an instance of a 
     given set type. figure 1 shows the linkages 

more precisely. it is a description of a piece of code which realises the tuples of the r e l a t i o n one 

at a time by accessing the records in some sequence following the set pointers and modifying the values as necessary. thus it is a generator for a r e l a t i o n . corresponding to each relation stored in the database   e . g . group placings  we hold on f i l e one or more base traversals. each one is essentially a description of a piece of code with a number of nested loops. 
	we have a notation for traversals as 	follows. 
internally it is represented by a prolog l i s t structure. there are three obvious base traversals of stadium-allocation and two for group placings. 
each {sa} t r a v e r s a l v i s i t s the same number of g a m e records  generating one tuple for each. 
s year  -  d group  -  d game  -  u venue  {sa1} v venue  -  d game  -  u group  -  u year  {sa1} b group  -  u year  -  d game  -  u venue  {sa1  s year  -  d group  -  d link  -  u team  {gp1} b group  -  u year  -  d link  -  u team  {gp1}      here s means a singular set a ccess to visita l l records of a given type  there is only one set owning a l l year records   d mean go down to v i s i t a l l member records belonging to the given owner using the appropriate set type   i f this i s ambiguous it is specified  and u means go up to v i s i t the owner of a given record  v means direct access to the record containing a value  usually given by selection . b means vi it every record of that type in the database  in an a l g o l - l i k e syntax we can represent the corres ponding code for sa1 as : -
for each y e a r record do 
for each g r o u p record owned by y e a r do 
for each g a m e record owned by g r o u p do 
for the venue owner of g a m e do p r i n t year.year  group.group  game.game  venue.stadium  game.date. 
     thus each arrow in a traversal represents an inner level of nested code. note that the record g e n e r a t i o n s such as d game  in sa1 must f o l l o w those such as b group   which generates the owner f o r g a m e   but they need not be c o n s e c u t i v e . 
iv combination & modification of t r a v e r s a l s 
     corresponding to every algebraic operation on a given r e l a t i o n there is a modification to i t s traversal which produces a derived t r a v e r s a l   which is a generator for the new r e l a t i o n . thus the method is complete. this derived traversal can then be modified by the next operation and so on. for example a selection can be done by inserting   i f  year=1  then  just after  for each year record do . the resulting traversal depends somewhat on the order of application of operations specified by the user. however many of these are commutative and the order of others can be improved by top level r e w r i t i n g . 
p. gray and d. moffat 1 
a. 	combination by join 
     since join is based on a cartesian product it can be formed by a nested for loop with one i t e r a t i o n for each record type i n v o l v e d . this is very similar to a traversal structure and it turns out that the traversal representing the j o i n can often be formed just by concatenating parts of the separate traversals {bell 1  gray 1}. the s e l e c t i o n s f o r matching are then performed a u t o m a t i c a l l y by the f a c t t h a t a codasyl owner record w i l l in many cases be linked to j u s t those records whose values would have been selected by the join operator! let us consider examples of this using 
res:= stadium-allocation j o i n e d   t o g r o u p -
placings 
     if we use s a 1 and g p 1 t h e n these both have  common s t a r t   section. 
s year  -  d group  
which generates the common a t t r i b u t e s in the two cases. if we concatenate the traversals keeping one copy of the common s t a r t we get 
s year  -  d group  -  d game  -  u venue  -  
d link  -  u team  
we can also get in the other order :-
s year  -  d group  -  d link  -  u team  -  d game  -  u venue  
     both traversals correspond to nested loop code which w i l l produce the desired tuples though in a different sequence. which is best depends on subsequent selections. if a selection on 
  p l a c i n g = 1   is made a f t e r  d link   then the second method is best as it v i s i t s fewer records. 
     one can also join traversals where the head of one traversal matches the t a i l or middle of the second. we can do this with the alternative traversals sa1 & gp1 g i v i n g :-
v venue  -  d game  -  u group  -  u year  -  
d link  -  u team  
     we notice here that a b group  since it v i s i t s a l l records can match a u group  which v i s i t s only certain records because j o i n has the properties of an intersection. 
     the second traversal  using sa1 gp1  would be preferred if a subsequent s e l e c t i o n were made on stadium as it could use v venue  e f f i c i e n t l y . general conditions for choosing an optimum are discussed in  esslemont & gray 1 . 
1 o v e r v i e w of the join algorithm in p r o l o g 
     the basic method is given in figure 1. it starts by reading in a number of traversals for each r e l a t i o n and holds them as unit clauses trav x . the term x contains a record generation l i s t giving the sequence of record and set accesses  which we have symbolised. the procedure j o i n trav  see below  then picks the f i r s t clause 

1 p. gray and d. moffat 
for each r e l a t i o n and t r i e s to f i n d an overlap in accordance w i t h the c o n d i t i o n s given in   b e l l 1 . prod overlap is c a l l e d twice w i t h the record generation l i s t s reversed in order to t r y the two cases of common s t a r t and l i k e w i s e f o r head to t a i l  iv.a . if t h i s is successful the r e s u l t traversal is asserted. a ' f a i l ' clause then causes b a c k t r a c k i n g and another p a i r of t r a v e r s a l clauses i s chosen thus t r y i n g a l l combinations o f the operand t r a v e r s a l s . the ' f a i l ' also has the e f f e c t of r e c l a i m i n g much-needed space once the t r a v e r s a l i s safely asserted. i f a l l attempts f a i l an o p e r a t i o n node to j o i n by sort-merge is inserted. 
     it is p o s s i b l e f o r a t r a v e r s a l to pass through two i n s t a n c e s of the same r e c o r d t y p e . in o r d e r to d i s t i n g u i s h which instance is being used f o r a c c e s s i n g subsequent r e c o r d types i t i s necessary to assign a unique number to each record generation element in the t r a v e r s a l . 
correspondences are e s t a b l i s h e d by clauses of the form equiv curr x.y . 

a. 	effect of joining modified traversals 
     t r a v e r s a l s which have been m o d i f i e d by s e l e c t i o n   extension  p r o j e c t i o n or group-by w i l l have elements in t h e i r record g e n e r a t i o n l i s t s to i n d i c a t e these operations operation nodes . such t r a v e r s a l s are joined as before but with a l l operation nodes being copied d i r e c t l y i n t o the result traversal. 
b. 	comparison of pascal and prolog versions 
     the pascal v e r s i o n takes several thousand l i n e s whereas prolog needs s e v e r a l hundred and is much e a s i e r to read and modify. pascal is a very much wordier language f o r l i s t p r o c e s s i n g . also one has to w r i t e m u l t i p l e v e r s i o n s of many f u n c t i o n s such as  member  because the type of l i s t argument must be known at compile t i m e . further the use of prolog d e f i n i t e clause grammars saves pages of r e c u r s i v e pascal procedures to parse base t r a v e r s a l s e t c . . f i n a l l y because 
pascal has no backtracking f a c i l i t i e s it has to keep r e t u r n i n g sets of a l t e r n a t i v e combined t r a v e r s a l s and c u r r e n t l y runs out of l i s t space on l a r g e q u e r i e s . the prolog v e r s i o n can handle these because it reclaims space f o l l o w i n g f a i l . 
	vi 	conclusions 
     although the direct use of codasyl databases for storage of facts is unlikely in a . i . the general problem of generating programs that traverse and manipulate list structures is important and the techniques described could have other applications. the methodology used is :-
     1. arrange that the specification of the result to be computed by the generated program is given in functional form such as relational algebra but not in procedural form with loops and assignment. this is easier for the user to think about and also does not commit him to an unsuitable representation. it allows easier overall program transformation; in particular some transformations are easier in the functional form than the traversal form. 
     1. prolog is particularly suitable for this work because of its good list-matching and backtracking f a c i l i t i e s . the use of  assert and f a i l   was necessary  but given this it out-performs pascal by running larger problems in the pdp 1 address space in similar time. 
acknowledgements 
     the r e w r i t e r u l e s described in s e c t i o n ii were developed by t.n. s c o t t  now at scicon  london . ben du boulay gave us many v a l u a b l e comments d u r i n g the p r e p a r a t i o n of t h i s paper. the generous a s s i s t a n c e of the u.k. serc is a l s o acknowledged. 
