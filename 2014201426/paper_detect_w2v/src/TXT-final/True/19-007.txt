 
　　object oriented programming aims at code lisibility and conciseness via abstract data type declarations and takes advantage from setting the objects  ie data  in the center of the application  instead of procedures or demonstrations. just as in logic programming  where describing the properties of the solution of some problem is  theoreticaly  enough to allow the program to compute the solution  object programming proceeds from the fact that purely declarative information leads to more procedural behaviour. 
　　it appears that logic programming and object programming are complementary in the sense that the first is very suitable for expressing subtle reasoning  but rather weak as a formalism for describing complex structures  and conversely for the second. 
　　these considerations led us  at the iiriam  to combine logic and object programming in order to use the advantages of both. our research effort resulted in the system lap  an extension of 
prolog to object programming  giving a new dimension to the latter  through logic programming concepts: processing of partially known data and non determinism applied at the object level. 
　　the first part of this paper introduces the main characteristics of lap  faced with the requirements of al application development. the second part illustrates some of these capabilities through simple examples. 
iintrqductiqn 
　　practical applications of artificial intelligence  and particularly knowledge based systems  or expert systems  involve two key points: the representation of knowledge and reasoning modules; these will link together facts and expert rules to construct the solution of the problem in a dynamic process. 
　　in fact  faced with a concrete problem  at least two preliminary questions arise: 
- what is the nature of the domain to be examined  what are the entities which compose this domain  what type of relations link these entities  answering this first series of questions will help us to decide which knowledge representation schema to adopt. - what kind of reasoning is to be performed on these entities  this will help to choose amongst inference engines and deduction methods. 
　　moreover  considering these questions will allow us to determine where the expertise is located: do we have to perform very subtle reasoning on flat and independant facts or  on the contrary  are we in the presence of deeply interconnected 
1 	architectures and languages 
entities  the expertise consisting in dealing with these interactions  in other words  is it the power of the reasoning modules or the ability to describe complex universes which determines the choice of the tools and techniques  
　　in the second case  it is likely that object oriented programming will be a valuable tool to help in solving the problem. we can distinguish three levels of ambition of an object oriented programming language designer: 
- hierarchical modeling exploiting the inheritance mechanism. 
- communication between 'intelligent entities. 
- the construction of an abstract universe including specialized knowledge bases in order to reason on concrete objects. 
　　the first approach  almost purely technical   aims at code lisibility and conciseness via abstract data type declarations. the second one  more 'animated'  takes advantage from setting the objects  ie data  in the center of the application  instead of procedures or demonstrations. the third approach  referred to as cognitive  considers abstract objects as nodes where pieces of knowledge are centralized. 
one could argue that the intelligence transmitted by this last approach proceeds from the fact that purely declarative information leads to more procedural behaviour  just as in logic programming where describing the properties of the solution of some problem is  theoreticaly  enough to allow the program to compute the solution. 
　　the execution of a program written in an object oriented language can be seen as a communication process between objects coming up from a hierarchical universe of abstract frames. during the life of an object  its dynamic image is kept consistent with the image of every frame with which the object is concerned. 
　　now  from a user's point of view  object oriented programming can be a valuable tool for: 
 a  structuring  modeling  a domain; 
 b  maintaining the consistency of the universe of frames;  c  making some superficial deductions on this universe  using the inheritance mechanism; 
 d  reasoning on this universe by activating more general inference mechanisms. 
　　depending on the respective importance of these aspects  one can distinguish applications such as: 
 1  structuring an abstract universe:  which invokes aspects  a b  above; we are only interested in describing the universe.  1  management of a domain of concrete objects; we are interested in exploiting the description of the universe by invoking aspects  a b c . 
 1  expert systems which need  above all  reasoning capabilities taken from aspect  d . 

　　applications of type  1  are most commonly achieved by object oriented programming. for applications of type  1  this approach eliminates from the knowledge bases all 'superficial' rules based on inheritance or directly derived from descriptive information attached to the objects. there only remain truly expert rules for which inference engines are still to be developed. to achieve this  object oriented environments based on algorithmic  c  pascal  or even symbolic  lisp  languages need a great deal of programming effort and are not well adapted to this purpose. concerning the inference engines  those based on the production rules schema are very limited : the lack of semantics and the approximative modeling of reasoning are paid for an inflation of the number of rules and yet obtaining an uncertain  sometimes doubtful  result. 
　　on the contrary  since we aim to formalize reasoning  we must have recourse to the mathematical logic and theorem proving which led to the so-called 'logic programming' of which prolog is the only effective implementation. this provides us with a powerful formalism based on the notion of relation  a very precise semantics  and deduction strategies allowing the manipulation  in a non deterministic way  of very general data structures  trees with variables . 
however  if prolog is very suitable for expressing subtle reasoning  it is rather weak as a formalism to describe complex structures. this led us  at the iiriam  to combine logic and object programming in order to use the advantages of both. our research effort resulted in the system lap. 
　　lap is an extension of prolog to object programming  giving a new dimension to the latter  through logic programming concepts: processing of partially known data and non determinism applied at the abstract object level: 
  objects and their slots are processed as true prolog variables: definition of constraints on the values of object slots  processing of partially known objects. the non determinism of prolog offers an elegant and efficient means for such an approach which allows a high degree of versatility compared with imperative implementation languages. 
  the query language of the objects data base is horn-clause logic and is expressed in terms of relations to be satisfied  as in prolog  ie without distinction between input and output arguments . 
  the deduction capabilities provided at the object level  facets and methods  are increased by the power of prolog as an inference engine by itself  as well as a programming language. 
　　thus  lap reassembles concepts usually dispersed between: - relational data bases  relations between frames   - object oriented languages  parentship  inheritance  message passing   
- inference engines  slot value deductions  facets and methods   - logic programming  non determinism  variables . 
　　in the second part of this paper  we will expand upon the main characteristics of lap and show how they fit the considerations given above. this presentation is illustrated by examples given in quintus-prolog syntax. 
ii the main concepts of lap 
　　lap provides two distinct environments: the first one is for conceiving a universe of abstract frames  which we call models. in the context of this universe  the second environment controls the construction  evolution and reasoning of a realization  which is a set of concrete objects  or instances  compatible with the universe's constraints. in the center of these two environments is the notion of a model and object image. 
　　to achieve this  lap provides a set of library predicates for creating  modifying and maintaining the consistency of a universe of objects in which: 
- a concrete object is described by abstract models and inherits their generic properties. 
- an abstract model is part of a hierarchy ordered by the parentship link. 
- consistency constraints  default reasoning  specific processing  methods  can be attached to a model and inherited by its instances. 
- an expert system application can be seen as a sequence of goals  formulated through a dialogue  and their demonstration. 
the image of a model results from: 
- its position in the graph of models which supports inheritance. - its relationships with other models which is another means of structuring the abstract universe. 
- the declarative attachments: slots  their constraints and properties. 
- the procedural attachments: expert rules  facets  methods. 
　　the image of an instance is restricted to the relations with other objects  and values assigned to slots or deduced by expert rules or inherited from the models prototyping the instance. 
　　in lap  the models  the slots and their properties  the facets  methods and relations are explicitly declared. each declaration results in prolog assertions. facets and methods must be edited as prolog clauses. 
a. structural concepts; the graph of models and the relations 
　　a model is an abstract data structure corresponding to a class of objects in the modelized universe and defined by a set of common properties. a given model may have one or several father models  direct ancestors . thus lap allows multiple parentship at the model level. 
　　a parentship link between two models can be understood in two different ways: 
- either this link indicates that the father-model is a super-class of the son-model. for example  the model 'motor-car vehicle* is a son of the model 'land vehicule'. 
- or the father-model corresponds to a particuliar point of view of the son-model. for example  a 'motor-car' can be considered under two different points of view as 'transportation means' and 'assembly of metal parts'. 
there is no fundamental difference between the two interpretations 'super-class' and 'point of view': in the two cases the son-model inherits all the characteristics attached to the father-model. however  the second interpretation will be preferred in those cases where we do not intend to create concrete instances of the model considered as 'point of view'. 
　　the universe is given a graph structure whose nodes are the abstract models  to which knowledge is attached  and the vertices  denoting the parentship links  are the only vehicles of inheritance. 
	iline and kanoui 	1 

in addition to parentship  two models can be linked in lap by one or more binary relations  as classic relations in relational data bases .these relations are another way to structure the universe and give access to the linked objects. 
　　let us now consider the example of a universe including human beings  wild animals  and domestic ones. here is a possble modelization of this universe with some 'natural' relations. 

　　the model and relation names are prolog atoms. the models 'human' and 'animal' are linked by the relation 
'has favorite anlmal  the symmetric relation being 
'hasjnaster'. equally the models 'man' and 'woman' are linked by 
the relations 'has wife' and 'has husband  
the model 'canary' has two father-models: 
- 'bird' interpreted as a super-class: every canary is a bird. - 'domestic.animal' will rather be interpreted as a point of view on 'canary'. 
　　in this example we do not intend to manipulate instances of 'domestic animar  but the associated point of view will be useful dealing with an instance of 'canary' or 'dog'. 
a similar remark can be made for the points of view 'male' and 'female' for the models 'man' and  woman'. 
　　the data base can be constructed step by step by invoking lap primitives. for example  
|  - delmodel canary  bird dome1tic anlmal  . 
defines 'canary' as a descendant of the ordered set of models 'bird' and 'domestic anlma!  note that the order between ancestors is used in solving conflicts arising from multiple inheritance. 
　　the parentship links can now be interrogated by the primitive 'fat son' which links a model to its direct descendants. for example: 
|  - falson x.canary . 
x-bird ; x-domestic animal ; no 
1 	architectures and languages 
　　now  if the model 'humanjbeing' is assumed  in order to define the binary relation 'has.jnaster' between 'humanjbeing' and 'animal*  we have to type: 
|  - defjink animal  has master  1    
 hasjavorite animal  1   human being . 
yes 
which indicates that an animal has at most one master and introduces the symmetric relation 'hasjavorite': a human being has at most five favorite animals. 
here  we just indicate the possibility that a relation can hold between humans and animals. the link will be effective at the instance level  in the concrete world  only. 
　　the primitive 'link' gives the relations which can link two models. for example: 
|  - hnk animal x humanj eing . 
x- animal  ha1 ma1terf 1   humanj eing  
the term substituted for the variable x indicates the origin 
 through inheritance  of the link. if several links exist between 'animal' and 'humanjbeing'  they will all be printed. 
　　to know which models are directly linked  without passing through inheritance  by the relation 'has master  one could ask: 
|  - falson dome1tic animal y . y-canary ; no 
|  - falson x y . 
x-animal  y-domestic animal ; x-bird  y-canary ; x-domestic animalf y-canary ; no 
　　it must be noticed that when invoking lap primitives  as is usual in prolog  there is no distinction between input and output arguments. all the substitutions for the free variables which satisfy the relation are enumerated by backtracking. this feature is not usual in other object oriented languages; it is directly inherited from the underlying prolog system. 
　　one can also use the primitive 'anc.off which is a generalization of 'fat son' and links a model to all its descendants  direct or not: 
|  - anc off x canary . 
x-bird ; 
x-living creature ; 
x-modele type ; 
x-domestic animal ; x-animal ; no 
　　the order in which the results are given corresponds to a depth-first search strategy as in prolog. this order is important: recall that the multiple inheritance schema can lead to a conflict when some information is searched for among the ancestors of a model. this conflict is solved by enumerating the ancestors by a depth-first strategy and retaining the first which provides the data searched for. 
i  - link x  x  has ma1ter aj y  y . x-anlmal  a  1   y-humanj eing ; no 
　　the existence of a relation between two models is transmitted to their respective descendants. so  to ask:  which are the relations which link the model x  descendant of a  to the model y  descendant of b    one could use: 
|  - link x  atr b  y . 
x animal a-animal r- ha1 master  1    b-human  being y human  being; 
x-domestic animal.a-animal.r-ihas masterjo !    b human being y human being; 
x-canary a-animal r- has master  1    b-human being y human being; 
x-dog a-animal r- ha1 ma1ter  1    b-human being y-human being; 
x-wild animal a-animal r- has master  1 j  b human  being y human being; 
x-animal a-animal r- ha1 master  1    b-human being y-man; 
x wild animalfa animal r- has master  1    b-human being y man; 
x wild animal a animal r  ha1 master  1    b-human being y-woman ; no 
that is the complete set of combinations between 'animar and its descendants on one hand  and 'humanjbeing' and its descendants on the other hand  which is in complete accordance with the philosophy of prolog. 
b. descriptive concepts: slots and their values 
　　the parentship links and the binary relations as shown in the graph of figure 1 reflect only the structure of the modelized domain. to each model  node of the graph  knowledge is attached by means of declarative and procedural characteristics which will express both the internal structure of the model itself  and its behaviour and relations with its environment. these characteristics will later be interpreted at the realization level by the instances of the model. 
　　the most elementary way of expressing the descriptive knowledge associated with a model consists in providing it with a collection of slots. a slot defined for a model is also implicitly defined for all the descendants of the model  via the inheritance mechanism. 
in lap  a slot behaves like a prolog variable and the values it can take are 'bound' terms  trees  in the prolog sense. the set of possible values of a slot can be governed by a set of constraints and obey certain properties as decided by the programmer. 
　　the constraints associated with a slot at the model level make it possible to specify: 
  the type of the slot: integer  real  string  list  ... and more generally any reference to type testing available in the underlying prolog system. 
  the set of legal values : the one that the slot can take at the instance level. 
  the slot cardinality. in lap  slots are in general multi-valued. the cardinality indicates the maximum number of values that the slot can take simultaneously for a given instance. as usual in prolog  the set of solutions will be enumerated by backtracking. 
  the possibility of inferring slot values via a binary relation. 
　　apart from the constraints  one can define  at the model level  properties concerning the slot values. as for constraints  these properties will be effective at the instance level only. one can: 
  allow the prompting of a slot value  if it has not been possible to infer it by other means. 
  specify default values for a slot. these default values will be taken into account at the instance level only if all other attempts to compute the slot values failed to reach the slot cardinality. 
　　the properties and constraints above were attached at the model level. some additional properties can be attached directly at the instance level; they make it possible: 
  to forbid certain values for a slot. 
  to fix a slot value  forbid further modification . 
  to declare unknown a slot value which forbids asking the user for it. 
　　given a model already defined  we can provide it with a new slot with the primitive 'add slot'. for example  we can define slots 'name* and 'home* for model 'humanjbeing' above by typing: 
|  - add 1lot name humanj eing . 
yes 
|  - add 1lot home humanj eing . yes 
these slots can then be forced to obey certain constraints: 
|  - set 1lotj roperty 
 type  human being name string  . 
yes 
|  - set slot property 
 cardinal  human  being home 1  . 
yes 
|  - 1et  slotj roperty 
 type  human being home string  . 
yes 
which indicates that the values of 'name* and 'home' are strings; the name is single-valued  default cardinality-1  but not the home  two possible addresses . 
　　these slots can be prompted  which allows the system to question the user on their values. this is achieved by: 
|  - 1et slot property 
  prompt  humanj eing name  defaullprompt . yes 
|  - selslot property 
　 prompt  human being home  ask address . yes 
which indicates that name and home address can be computed by deleting  in the prolog sense  the literals 'defaultjdrompr and  ask address' respectively. 
'defaullprompf and 'ask address' refer to prolog clauses.  defaullprompf is provided by lap as a library predicate  while 'ask address' is a user-defined predicate. 
	illne and kanoui 	1 

now  the properties of a model slots can be interrogated by: 
i  - get slot property x  human being a v  . 
xscardinal  a name  v=1 ; 
xatype  a=name  v=string ; x-prompt  a=name  v=default prompt ; 
xacardinal. a=home  v=1 ; 
x=type  a-home  v=string ; x prompt  a=home  v=ask address ; no 
c. procedural concepts; facets and methods 
　　having specified the links and relations of a model and also described its descriptive features  we are now interested in expoiting this structure. in fact  apart from the usual inheritance mechanism  the use of slots and their values is governed by ad-hoc rules which constitute knowledge bases associated with the models. in lap  there are three kinds of such rules: 
- rules associated to events  - rules for inferring slot values or relations  - methods. 
the first two kinds of rules are implemented as facets. the last is the software support for message-passing and is nothing other than a generalization of the first two. 
　　the generic events addressed by the first kind of rules are: - creation or suppression of a model instance: facets if created and lf suppressed. 
- assignment or suppression of a value to an instance slot : facets lf added and if removed. 
the second kind of rules  the deduction rules  correspond to the facet if needed. 
　　at each attempt to provoke one of the events above  the corresponding facet - provided it has been defined for the model on which the considered instance depends - is fired. the event under consideration will effectively occur only if the prolog goal corresponding to the facet can be satisfied. 
　　the role of the rules associated to the events is to preserve the integrity and consistency of the object data base when it is modified or updated. 
the facet lf needed makes it possible to express how the values of an instance slot can be inferred from other information. the inferred values will then simulate the event if added. so  a value deduced by the activation of rules  but not consistent with the aspect if added will be rejected. 
　　facets and methods are written in prolog and it is important to recall that the conceptor of an application disposes of the full prolog power to express a facet or a method. for example  the facet imieeded defined for a given slot of an instance can not only invoke the value of other slots of the considered instance  but also refer to other objects  via lap primitives   which makes it possible to chain rule activation. 
ill reatjzatton:1he concrete universe 
　　the concrete universe is a collection of instances. the image of an instance is essentially constituted by the set of known slot values. 
　　the life of an instance is nothing other than a succession of events including: 
- the creation or the destruction of the instance  
- the setting of binary relations with other instances  
1 	architectures and languages 
- the modification of slot values  
- the interrogation of slot values  by reading assigned values  rule inferences  deductions through relations  user inputs  or by returning default values . 
taking these events into account is controlled by knowledge rules  ie facets  methods ...  embedded in the respective model images. 
　　lap offers primitives to read or write  for the benefit of a given instance  the values of the slots known by the  possibly multiple  models on which the instance depends. as explained above  assigning and getting a value can be governed by programmer-defined procedures: the facets. 
　　to illustrate these points  we will again consider the example given in figure 1. we will describe a scenario where an instance of the model domestic animal is created. 
 1  if  when creating a domestic animal  the name of its master is not specified  then the animal will send a message to every instance depending of an offspring of the model 'human being'. 
 1  the content of this message is :  do you want me as your favorite animal   
 1  the addressees of the message will look at some slots  color  beauty ...  of the animal and will answer yes to the animal only if the corresponding values agree with their taste. 
 1  to the human being which is ready to take care of it  the animal will send a second message whose content is:  where will you accomodate me   
 1  the animal will accept as master the first human being who answers  inside the house . 
　　assuming that methods corresponding to the messages have been defined for the model 'human being'  the implementation of this scenario requires: 
- the facet if created for the model 'domestic animar  
- the facet ifjieeded for the relation 'has master' in the model 
'domestic animap  
- and the prolog clauses corresponding to these facets. 
the facet declarations are achieved by: 
|  - def facet  if created domestic animal   create domestic animal . yes 
|  - def facet  if needed domestic animal  has master  find  master   
yes 
　　the prolog clauses 'create domestic animar and 'find maste*r could be written respectively as: 
create domestic animal  domestic animal a  h  
    a k get slot a beauty  b    :element  has master  m  h   !  
union h  beauty  b   k . 
create domestic animal  domestic animal a   
h  a k  get and set slot a has master m   . 
find master  domestic animal a  has master m :-
anc pff human  being  h   population h.p   
element m p   	  send  a  m   do you want  me   yes   
send  a m  where would you accomodate me  
 inside.outside  inside   ! . 

this simple example shows how: 
- the effective creation of an instance can be forbidden if certain conditions  formulated in the prolog rules defining the facet if-created  are not satisfied. 
- as soon as an instance is created  some slots or relations can be assigned a value. 
- the chaining of rules is achieved by invoking  from facets and methods  lap primitives such as interrogating the objects data base and sending/acknowledging messages. 
iv implementation 
　　lap is implemented as a library of about 1 predicates described in detail in the lap reference manual. it is available under prolog ii and quintus-prolog and runs under vax/vms  and sun/unix. versions for macintosh and bull-sps1 are under development 
　　lap gives full access to the underlying prolog system and provides a windowing and menu interface which facilitate both knowledge acquisition and execution. 
　　lap has been used in the development of several cad systems in architecture  industrial simulation and medical consultation expert systems. 
