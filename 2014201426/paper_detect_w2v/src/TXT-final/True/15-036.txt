 
　　　this paper is concerned with a new implementation of a production system by using a r e l a t i o nal dbms and fortran and i t s application to construction of an i n t e l l i g e n t man-machine interface of a speech database called speech-db. our production system can be viewed as a nondeterministic fortran programming system based on content-directded invocation of subroutines. the interface is composed of the following three subsystems: japanese command processing subsystem 
 jcs   	which translates the queries stated in 
japanese into commands  problem solving subsystem 
 pss   which diagnoses errors and answers user's questions  and monitor  which manages the flow of control among these subsystems and speech-db. design philosopby and basic mechanism are presented together with some examples of the system performance. 
	i. 	introduction 
　　　a large application software is apt to be d i f f i c u l t for nonprofessional people to use and many complicated commands sometimes cause misuse of them. thus  a software system with high functions needs an i n t e l l i g e n t man-machine i n t e r facel1  which assists users in using i t . we have been designing such a man-machine interface for a database called speech-db 1l speech-db is a speech database constructed for assisting the research of speech recognition. it stores a l o t of sampled speech data together with their a t t r i butes so as to be able to r e t r i e v e them under various conditions. it has a command language c a l l e d iql. although iql makes it easy to retrieve data  users s t i l l need to have some knowledge about speech-db and iql in advance. our interface system of speech-db is designed to have the following three functions: 
1  to accept queries stated in japanese. 
1  to make it easy for users to learn iql. 
1  to diagnose errors occurred while using iql. 
　　　in order to achieve these ends  the interface has several knowledge about speech-db  iql  japanese sentences and so on. our ultimate goal is to construct a so-called  manual-less  system. such a system should have the knowledge of what it can do  what functions it has  how the user can use them  what kind of troubles the user w i l l meet  and so on. the system can be viewed as a kind of expert systems. 
　　　one of the major c h a r a c t e r i s t i c s of our system is that most subsystems are implemented by using a r e l a t i o n a l database called inq. inq is employed for the purpose of storing and retrieving procedures used for managing dialog between the system and the user and for diagnosing errors. a production system was f i r s t implemented by using inq and fortran. then the above interface was implemented by using the production system. 
　　　in our computation center  a number of application programs have been developed. the o b j e c t i v e of our p r o j e c t is to c o n s t r u c t a consultation system about these programs as well as the use of the computation center itself. for this purpose  we need a tool for construction such a system. production system is well-known to be useful for consultation system construction. the problem is how to implement a ps. the tool should be able to u t i l i z e dbms  graphics and other func t i o n s of the o p e r a t i n g system of our host computer in order to cope with the variety of the target programs. in our computation c e n t e r   fortran is the only language s a t i s f y i n g these requirements. this is one of the main reasons why our ps has been implemented by fortran. 
	ii. 	overview of the system 
　　　block diagram of our system is shown in fig. 1. it is composed of seven database f i l e s   six of which contain speech data and one of which contains several kinds of knowledge of consultation about the usage of speech-db. 
　　　speech-db consistes of six f i l e s such as phoneme f i l e   cv syllable f i l e   vcv syllable f i l e   word f i l e   environment f i l e and raw data f i l e . the f i r s t five f i l e s are called inq f i l e s and contain a lot of information useful for retrieving speech data. users can retrieve speech data by using iql i n t e r a c t i v e l y . iql selects an external scheme suitable for the user's query  so that the user can get speech data he wants without knowing the logical structure of speech-db. 
b. man-machine interface 
　　　although iql is designed f o r users to r e t r i e v e data e a s i l y   they must know some syntactic and semantic r e s t r i c t i o n s of iql. so  more sophisticated man-machine i n t e r f a c e is desirable especially for nonprofessional users. our interface consists of three modules such as 
problem solving subsystem  pss   japanese command processing subsystem  jcs  and monitor. pss diagnoses the errors occurred during the use of iql and answers questions asked by the user. jcs translates queries stated in japanese i n t o iql. 
　　　
1 	r. mizoguchi et al. 
　　　
  1  this query means  i want some words whose averaged pitch is greater than that of the speech of id=1 and whose averaged root mean square of energy is greater than that of the speech id=1.  although iql permits nested r e t r i e v a l   which is indicated by a paired brackets  it may not be used in p a r a l l e l . therefore  an error occurs  the error number is detected by iql and then monitor invokes pss. 
  1  a rule which has the error number in i t s action part is fired. 
  1  monitor carries out the corrected commands. 

  1  this query means  i want some words which contain syllable / k u / with rank=a and syllable / r i / with rank=a.  
  1  the commands     is input by the user  since the retrieved data is s l i g h t l y d i f f e r e n t from those he expected to have. 
  1  users who do not know the module name which answers his questions can say what they want to do in japanese. 
  1  the c o n d i t i o n rk1=a  which means the corresponding part of speech is stationary  is the property not of syllable but of phoneme in speechdb. so  pss asks the user his intention. 
　　　during the dialog in both cases  pss c a l l s jcs when necessary  so that users can input their r e q u i r e m e n t s in japanese. this makes the interaction very friendly. 
v. jcs 
　　　jcs translates queries stated in japanese into iql and assists users in learning iql by showing the translated iql commands. jcs is 
	r. mizoguchi et al. 	1 
designed just for beginners. the authors believe that a r t i f i c i a l command language is more efficient than natural language once one gets familiar with i t . 
　　　semantics-based processing of queries is mainly performed instead of syntactic one. this style of processing is based on the fact that queries to speech-db is much r e s t r i c t e d to the semantics of speech-db. iql is designed to be used as a target language of natural language queries  so that it was very easy to implement jcs. for example  iql can s e l e c t an e x t e r n a l scheme appropriate for the query. furthermore  it does not care about the order of condition elements. these char a c t e r i s e t i c s of iql makes the translation easy d r a s t i c a l l y . in the current implementation  jcs can accept almost queries realizable in iql and can reject queries which are beyond the a b i l i t y of iql with some messages indicating the inappropriate part of them. jcs has two kinds of dictionaries. one contains some keywords corresponding to the attribute names and their values used in speech-db. the other contains some words having syntactic information which are used for examining the relationship between conditions. jcs do not have to know any other words stored in the above two dictionaries  since a query composed of such words can not be realizable by iql at a l l . 
vi. conclusions 
　　　although the implementation of our interface is based on a new production system  the whole model is rather ad hoc. in order to realize the  manual-less  system mentioned e a r l i e r   several problems should be resolved. 
1  to establish a psychological model of a user. 
1  to establish a theory of proceeding with conversation based on the user's model. 
1  to incorporate the results of intelligent cai into our system. 
these are the subjects to be attacked at the next step in our study. 
 