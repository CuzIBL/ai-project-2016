: most software systems use simple text files to represent the current state of an evolving design. we propose that layered networks provide a much better medium to represent the design of a software system and its documentation. pie is an experimental personal information environment which provides users with descriptive structures for documents and programs. in pie  alternative designs for programs and documents can be examined and manipulated within the systems context structured database. this data base also facilitates cooperative design among several people. 
1. introduction 
　　the existence of a software problem is widely acknowledged: it is becoming progressively more costly to develop and maintain software systems. in this paper  we propose an application of al technology  context sensitive databases  as a software development tool for decreasing these costs. we argue that context sensitive databases provide a representation for the evolution of software that is superior to traditional file systems. we have explored this proposition by means of an experimental personal information environment  pie  that has been used to manage the evolution of various software designs in its host environment. 
　　pie stores software designs in networks whose nodes represent the modules  procedures and other entites of the design  and whose links represent relationships among them. links are asserted in layers and retrieved with respect to a sequence of layers termed a context. a layer is therefore a set of  node link node  assertions and represents a set of related changes to a design  while a context represents a particular version goldstein bobrow 1 provides a general introduction to the pie system. 
1. previous research in artificial intelligence 
　　various kinds of context sensitive databases have been explored in artificial intelligence research. they have primarily been used as a mechanism for representing alternative world views.  see  for example  rulifson1; hewitt1; sussmanmcdermott1; hendrix 1; cohen1 . generally the need to represent alternatives has arisen in planning programs. for example  a robot is analyzing alternative paths to reach some specified location. the terms contexts and layers are drawn directly from conniver  sussmanmcdermott1 . 
　　our application differs from previous al research primarily in that previous applications focussed on the use of such databases by mechanical problem solvers. we are exploring the use of such databases in a mixed-initiative fashion with the user primarily responsible for their creation and maintenance. 
1. the inadequacies of files 
　　most computing environments use files to express alternative designs. users record significant alternatives in files of different names; the evolution of a given alternative is recorded in files of the same name with different version numbers. we argue that this use of files provides an inadequate structure for representing alternatives. 
　　for example  consider how the development of the a software system consisting of several modules  where a module is a group of related procedures. typically  the source code for each module for be stored in its own file-say  files a  b if a programmer develops an alternative design that requires changes to several modules  how can he store this alternative  typically  he would create files a'  b'  ... containing the new definitions plus any unaltered code for each module. the result is that the unaltered code is now stored redundantly. if subsequent development leads to modifications to this unaltered code  then these modifications must be made in both sets of files. the need for redundant editing becomes progressively worse as the number of alternatives grows. 
　　how else might the programmer store his design if he wishes to avoid the need for redundant editing  one option is to place the common code into a separate file. altering a given procedure common to more than one design would then take place in only one place. the cost of this storage strategy is that files would no longer serve to group related procedures of a design. thus  to obtain design flexibility  the programmer would give up an equally important feature-modular representation. 
　　another option is to use conditional compilation statements in the original source code and avoid the need for multiple files and the associated redundant storage. however  the problem of examining the set of changes common to a redesign is now complicated by the distribution of these changes across many files. 
　　a related problem is coordinating change. the programmer must maintain descriptions of how various alternative designs are distributed among files. sometimes this is done by adopting conventions in naming files  as we have implicitly done in naming the files for our second design a'  b ' 
       but such conventions are an impoverished means to describe a configuration and fail as the space of alternatives grows in complexity. explicit descriptions of such configurations that do not depend on naming conventions are preferable. 
　　finally  there is the problem that designs represented as configurations of files are not reflected in the operational software. the result is that it is cumbersome to examine the structure and performance of a design interactively within the system. switching from one design to another requires reading and writing the appropriate files. 
　　thus  the traditional use of files is unsuitable for representing alternative designs for three reasons.  1  files are inflexible. their utility to store modular parts of a design must be sacrificed to avoid redundant storage of shared structure.  1  file names are impoverished as a vehicle to encode the intended coordination between different files as part of a common design.  1  the representation of alternatives is not integrated into the running software environment. 
1. source code control systems 
　　to remedy the first of these deficiencies  editors have been developed that store changes of source code to a base file. the most extensively used of these is the source code control system  rochkind1  glasser1  developed as part of the 
programmer's workbench for the unix system  ivie1 . 	in 
sccs  changes are stored in terms of lines deleted and inserted in a file called a delta. 
　　sccs has the virtue that shared structured is not stored redundantly. a delta contains only changes. the description of a particular version of a system is specified by a delta sequence. the explanation for the differences between this version and earlier ones is stored in the comments associated with the new delta files. however the changes are still stored with respect to lines  and have no connection with units of the program as thought of by the programmer. 
1. smalltalk 
　　pie employs layered networks to manage software development for any project undertaken in its host environment  smalltalk  ingalls1  kay1 . to illustrate the system  we will briefly introduce smalltalk  then describe a series of design exercises chosen to improve its implementation of the data structure for sets. 
　　smalltalk is an object-oriented language that extends the notion of class and instance found in simula  birtwistle1 . a class defines a group of procedures  termed methods  and a set of var.ables on which they operate. each method is invoked by a message pattern. every object is an instance of some class and stores particular assignments of values to the variables specified in the class. 
　　below is a partial listing of class set. message patterns are shown in boldface and their methods appear below and indented the listing is incomplete: for example  the definition of the method for deleting elements from the set is not shown. 
class new title: 'set' instance variables: 
'array n' 
 class set employs an array with a position pointer n to represent sets. the objects of the set are stored in the array from position i to n. 
initialization protocol init 
 this method is conventionally executed when a new instance of class set is created. it initializes the instance variables. the array variable is set to an array of size 1 and n is set to 1.  
 array  - array init: 1. n  - 1.  
public protocol has: element 
 testing whether an element belongs to the set is accomplished by iterating through the first n items in the array  checking for equality.  
 for: i from: i to: n dog 
 if : element =  array lookup; i  thens 
 return: true    return: false  
insert: element 
 a new element is added to the set if it is not already present.  
 if :  self has: element  then:  return: false  else :  self add: element   
private protocol add: element 
 a new element is added by loading it into position n+1 of the array and incrementing the pointer. the array is copied into a larger array if its free positions are exhausted.  
 if : n= array length  theng  array  - array growby: 1 . 
array insert:  n -n+1  with: element.  
printing protocol print 
 this method prints a set by printing the string 'a set'.   'a set' print.  
1. a layered redesign of class set 
　　our first design goal is to improve retrieval time by having the implementation convert from a sequential to a hashtable representation when the cardinality of the set exceeds some bound. the rationale for this redesign is that sequential access is less expensive in storage space and retrieval time when the set is small  but is not economic when the set is large. 
　　we begin by generating a pie description of the current implementation. pie is able to generate a network describing any class in smalltalk from the internal smalltalk representation for the class. this network is stored as a collection of instances of class node  a class we created to implement the behavior of a network database. the network generated from the initial implementation is stored in a new layer-say layer a. the layer is placed in a new context which we shall name the hashing context. 
　　the next step in the design process is to define the changes to the present implementation. a layer is created and added to the context to store these changes. this is layer b in figure 1. 
　　below is a pie generated listing of the redesigned class with respect to the hashing context. only parts of the public and private protocols are shown and comments have been removed. pie has been instructed to highlight new assertions  derived from layer b  by printing them in boldface. 

　　the listing shows a new type of variable in the class definition  limit is a class variable. the value of a class variable is available to all instances  limit is used to specify the size at which the internal representation switches from sequential to hashed. 
class new title: 'set' instance variables: 
'array n' classvariables: 'limit' 
public protocol has: element 
 if : n limit thens  fors i from: i to: n dog if: element =  array lookup: i  
thens  return: true    return: false  
else:  return:  self nashhas: element  . 
insert : element 
 if :  self has: element  then :  return: false . if : n=limit thens  self 
conuert from sequential to hash . 
if : n limit thens  self odd: element  
else :  self hash add: element .  
private protocol add: element 
 if : n =  array length  thens  array  - array growby: 1 . 
array insert:  n -n+1  with: element.  
hash add: element 
hash has: element 
　　the user can test his design by installing the hashing context. installation causes the smalltalk interpreter to employ the definitions asserted in the specified context. these definitions are not immediately installed to prevent premature modification of the underpinnings of the system before a design is complete. 
　　if further debugging is needed following installation  the programmer can create a new layer to store the changes to his design  then reinstall the context with this layer dominating the old layers. by placing the edits of each debugging session in a separate layer  the programmer can undo a set of changes that have proved unsatisfactory by removing the layer from the context and reinstalling. 
　　design exercises rarely consist of a single iteration through the design/debugging loop in conducting this design exercise  a number of additional layers were added to the hashing context. for example  layer c was added to correct the inconsistent treatment of the limit value  has: element treats limit as the lower bound of the hash representation while insert: element treats limit as the upper bound of the sequential representation. layer c debugged the has: element procedure to use a   test for comparing the size of the set and the limit value. 
　　layers facilitate the comparison of alternatives for example  we considered different implementations of hashing in the redesign of class set. such analyses produced a network of layers as illustrated in figure 1. the m and n layer sequences represent alternative designs. 
     easy switching facilitated our obtaining comparative performance measures for the original linear design and our mixed linear and hashing design for implementing sets. the parameters which determine performance of a set implementation are the number of elements in a set. the ratio of membership tests to insertion and deletion  and the proportion of such tests which return false with two tests for every insertion  and 1% returns of false  the choice of 1 for limit allowed the mixed design to dominate; with five tests for every insertion  limit should be 1 to provide overall better performance for the mixed desigr 1. redesigning the i/o behavior of sets 
　　to illustrate the ability of layers to manage interacting designs  we continue our scenario by pursuing a second design goal. this goal is to improve the i/o behavior of sets. specifically  the goal is for an instance of class set to print showing its elements enclosed in braces  e.g. as {a b}  if the size of the set is less than some bound. presently all. instances of class set simply print as 'a set'. this redesign requires that we modify the printing method of class set. 
　　before we make this change  we must decide where to store it. since this is an independent modification of the code  our philosophy requires that we store these changes in a new layer  d to make it easier to test and adopt the printing changes independently of the hashing changes  we create a new context  to be called the printing context  for these changes. 
　　this context begins from the initial design of class set and  therefore  its first layer should be the same as the first layer of the hashing context. if we examine or install this context  we get an implementation of class set that only has the improved printing behavior. layer d is added to the printing context to store the changes involved in this redesign. below is the new method for printing sets stored in layer d. 
print 
 if :  self size  1 thens  '{' print. fors t from: 1 to:  self size  dog   self 
element: i  print . 
　　　　'}' print.  elses  'a set' print.    
　　this redesign becomes more interesting if we decide to include a modification to the smalltalk reader that allows the string printed to be reread as a set. to accomplish this  we must modify the reader to recognize braces. we could put the required changes in layer d. changes recorded in a layer can span module boundaries. but since the reader changes are independent of the altered printing behavior  it is better practice to put this set of modifications in a separate layer  say layer e. we can therefore test the two parts of the design separately  i.e. we can first install layer d to examine the printing behavior  then install layer e to examine the reader. 
　　layer e could be placed in an entirely separate context  but since we presumably want to adopt both the changes to the reader and to the printing procedure  it makes sense to include this layer in the set printing context. however  since the alterations are modularly stored in a layer  we leave open the option of creating a separate context to store changes to the reader that includes layer e. 
　　the printing context now contains layers that make a coordinated set of changes to more than one module of the system: in this case  both the reader and a particular abstract datatype. this is not an unusual situation-despite a modular design  some modifications inevitably cross module boundaries  since the modularity is based on a particular partitioning of the design space  and such partitionings are not unique. 

1. representing contexts 
　　layers and contexts are described by pie in the same network as software is described. figure 1 shows part of the network representing the hashing and printing contexts. the rationale attribute links a layer or context to a textual description of its purpose and the focus attribute points to the major classes being modified by the design. the layers attribute of a context node points o a sequence of nodes representing the layers. 
　　describing layers and contexts in the network has two advantages. first  the user can search for a layer or context using the general network matching machinery provided by pie. a search is initiated by specifying a description of some node in terms of constraints on the values of its attributes. thus  a user can search for a node representing a context whose focus is class set and whose rationale includes the substring * hashing*. the network description escapes the limitation of file systems in which the name of a file is burdened with the description of the file second  the user can manipulate layers and contexts using the same network operations used to manipulate code-i.e. the addition  deletion or modification of the attributes of nodes. 
1. composite contexts 
　　after we have debugged our two redesigns of class set  we will want to combine them. we can do this by creating a composite context built from the layers of the existing contexts. this is the set redesign context shown in figure 1. we have not simply concatenated the layers of the hashing and printing contexts. this would produce the sequence: a  b  c  a  d  e. the second occurrence of layer a would inadvertently dominate the changes in layers b and c. 
　　we may wish to impose the constraint that if new layers are added to the hashing or printing contexts  then they are automatically included in the composite context. this can be accomplished by a capability that pie provides for defining procedures that are attached to nodes. these procedures are triggered by adding or deleting attributes of the node. by defining such a procedure and attaching it to the layers attribute of the hashing and printing contexts  we can have it synchronize these contexts with the composite context. 
　　concatenating new layers of the printing context to the hashing context is justified by the independence of the printing 
and hashing refinements. this is therefore a useful comment to include in the network. figure 1 illustrates various design comments. layers b and d are commented as independent refinements  layers d and e as dependent refinements and layer c as a repair for layer b. when layers are combined into new contexts  these comments are checked and the user is alerted to questionable combinations such as adding a layer without its subsequent repairs. this description also allows other programmers to examine the network of contexts and layers and understand their relationships. 
　　interactions between design decisions can lead to conflicting values in two layers. in sccs  conflicts are noticed only to the extent that two modifications touch the same line of code. in pie  the granularity of detected overlap is at the level of the method  if two layers have changed the same method  then there is a potential conflict. in addition  we have in pie a mechanism for explicitly expressing dependencies among a number of methods. this allows us to find some potential interactions when there is no structural overlap. 
　　to resolve conflicts between layers  a new layer could be added to the composite context that resolved any differences in design decisions. this layer would only apply to the composite design and not to the individual designs since it would not be included in their contexts. 
　　finally  we could have created a composite context. the concatenated context in figure 1 is such a context. pie treats the layer sequence of such a context as the concatenation of the layer sequences of its sub contexts. this combination strategy is appropriate when the constituent contexts are independent. but here  the common use of layer a makes it inappropriate 
1. communicating contexts 
　　we have discussed this design project so far from the standpoint of an individual programmer but many projects are collaborative. layers facilitate cooperative design by supporting on line interaction that is analogous to two programmers scribbling on a common listing one programmer can transmit to another programmer a set of changes to the first programmers design by sending a layer pie supplies comparison functions for identifying the changes between layers below is a pie generated listing of class set with respect to the redesign context plus a layer transmitted by a collaborator. the collaborator's layer redefines the has: element procedure and includes an annotation stating the rationale for the change 
class new rule: 'set' instance variables: 
'array n' class variables: 'limit' 
public functions has: element 
 if :  self size  limit thens  return;  self seqllas: element   else :  return:  self hasnhas; element  . 
annotation from danny received 1/1  1pm: i think that a more subroutinized definition will pay off in the tony run. 
　　the advantages of this level of intimacy in communication would not ordinarily be sufficient to offset the disadvantages that might arise from an unwanted intrusion by the sender into the recipient's workspace a programmer might be justifiably relucant to load a file from a collaborator directly into his workspace despite the appeal of being able to examine the new software with design tools in the software environment  the software may contain modifications that overlap and interfere with software developed by the programmer. 
　　layers avoid this problem. the sender's modifications are contained in a separate layer. hence  they can bo loaded without destroying changes stored in separate layers. the user can install then  examine their performance  then undo them if desired simply by deleting the layer from his context. 1. complex designs 
　　massive redesigns can involve changes to hundreds of procedures distributed over dozens of modules. we believe that the machinery described here for layers and contexts provides capabilities that are suitable for such complex real world software problems based on our analysis of the deficiencies of present source control systems. 
　　as with systems like sccs and unlike systems that store the entire source code for a package in a single file  we store a set of changes modularly with very little redundant information. this allows forks in designs to be explored and facilitates the creation of specialized configurations from selected subsets of the layers. 
1 

　　unlike sccs  we represent software and design configurations in a network that has important structural advantages over textual descriptions. first  the network supports a representation in which there is a natural locus for all of the properties of a given object including both source and compiled code-such properties would typically have to be distributed across a textual listing or even across different files. a designer can readily examine all of the properties of some object by interrogating the network. second  a network allows us to move two ways across a link. thus we can move from the nodes describing variables to their classes or vice versa. a designer can therefore traverse the network to explore some the consequences of a redesign third  the formalized descriptions of a network support search and matching operations to find desired objects of a design  including layers and contexts themselves fourth  the network facilitates the formation of various kinds of composite designs. hierarchical file directories provide some aid of this kind for file based source code systems  but are less powerful than the network architecture of pie. finally  the network strictly dominates text since a node can have a source code attribute that points at text describing the software. 
1. conclusions 
　　pie's ability to represent alternative designs comes at the price of a more complex representation. for this price to be affordable  the user interface must simplify the presentation and manipulation of the database in this paper however  we have not had the room to describe the display interface we use. an extended discussion can be found in 
goldstembobrow1. in that paper  we also discuss the use of additional description provided in the network to specify reasonable default behavior for the interface. 
pie is currently running with excellent response time on a 
dorado  a high speed micro programmable personal computer that runs smalltalk at approximately one million instructions/second  lampsonpier 1 . the response time is perceived in terms of the time to refresh the display interface following a new selection -a user perceives little or no delay. the criticial limitation of the present smalltalk implementation is the size of its virtual memory. smalltalk 1  ingalls1  supports an address space of only 1 objects. this includes all of the objects defining smalltalk itself. as a result  there is insufficient space to build large pie networks. no more than 1 nodes can be in the local address space at any one time since there are approximately 1 methods in smalltalk  it has not been possible to build a pie network describing the entire smalltalk system a new smalltalk implementation soon to be available has a 1 bit virtual memory. given this capacity  the possibility exists of transforming pie from its present experimental status to a permanent part of smalltalk's programming environment. 
　　the techniques described in this paper have been tested in the context of the smalltalk programming environment. however  they can be applied to any programming system that provides a layered network database and an interactive display interface. we believe that the payoff of such databases for software design and development will more than justify their cost in terms of retrieval time and storage. 
	1. 	bibliography 
 birtwistle  1  
birtwistle  g.  dahl  o. j   myhrhaug  b.  and nygaard  c  simula begin  auerbach  philadelphia  1. 
 cohen  1  
cohen  p.   semantic networks and the generation of 
context   advance papers of the fourth international joint conference on artificial intelligence  tsibilisi:  1   1. 
 glasser  1  
glasser  alan l.   the evolution of a source code 
control system   in s. jackson and j lockett  eds   
proceedings of the software quality and assurance 
workshop  acm   1  -pp. 1 
 goldstein & bobrow  1  
goldstein  ip. and bobrow  d.g.   descriptions for a 
programming environment   proceedings of the first 
conference of the american association for artificial intelligence. stanford:  1   1. 
 goldstein & bobrow  1  
	goldstein  	ip. 	and bobrow  d.g.  	 browsing 	in a 
	programming environment   proceedings of the 	1th 
annual hawaii international conference on system sciences  honolulu:  1 . 
 hendrix  1  
hendrix  gary g.   expanding the utility of semantic 
networks through partitioning   advance papers of the 
fourth international joint conference on artificial intelligence  tsibilisi:  1   1. 
 hewitt  1  
	hewitt  c  	 description and theoretical analysis  using 
schemata  of planner: a language for proving theorems and manipulating models in a robot . ph.d. thesis  june  1   reprinted in al tr 1 mit-ai 
laboratory  april 1.  
 ingalls. 1  
	ingalls  	daniel 	h.  	 the 	smalltalk 1 	programming 
	system: 	design 	and 	implementation   	conference 
record of the fifth annual acm symposium on principles of programming languages  tucson  arizona  january  1  pp 1. 
 ivie  1  
ivie  e.l.  the programmers workbench - a machine for software development.  communications of the acm  v. 1 no. 1  october 1  pp 1 
 kay  1  
kay  a.  smalltalk   a communication medium for 
children of all ages . palo alto  california: xerox palo alto research center  learning research group  1 . 
 rochkind  1  
rochkind  marc j.   the source code control system   
ieee transactions on software engineering  december 1  pp 1. 
 rulifson  1  
	rulifson  	j.  	waldinger  	r.  	and 	derksen  	j.  	 a 
language for writing problem solving programs   ifip  1. 
 sussman & mcdermott  1  
	sussman  g   & mcdermott  d   	 from planner to 
conniver   a genetic approach . fall joint computer conference. montvale  n. j.: afips press  1 . 
1 


1 


1 
1 

1 

1 

1 

1 

1 



















