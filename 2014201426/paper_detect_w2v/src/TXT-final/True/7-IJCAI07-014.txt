
recovering from power outages is an essential task in distribution of electricity. our industrial partner postulates that the recovery should be interactive rather than automatic: supporting the operator by preventing choices that destabilize the network.
interactive configurators  successfully used in specifying products and services  support users in selecting logically constrained parameters in a sound  complete and backtrack-free manner. interactive restoration algorithms based on reduced ordered binary decision diagrams  bdds  had been developed also for power distribution networks  however they did not scale to the large instances  as bdds representing these could not be compiled.
we discuss the theoretical hardness of the interactive configuration and then provide techniques used to compile two classes of networks. we handle the largest industrial instances available. our techniques rely on symbolic reachability computation  early variable quantification  domain specific ordering heuristics and conjunctive decomposition.
1 introduction
interactive configuration is an application of constraint satisfaction  csp  that assists a user in her search for a valid variable assignment  a configuration  in a combinatorial problem. its major application areas include sales of services  airplane tickets  insurance policies  and goods  personal computers  cars .
　the assistance takes the form of proposing choices that are globally consistent  i.e. always lead to a legal solution to the problem. in csp terms interactive configurator enforces generalized arc consistency  gac  wrt. implicit conjunction of all constraints  i.e. it computes a valid domain for each unassigned variable  consisting of all valuations that are guaranteed to be globally completable. as a consequence  as long as a user assigns values from valid domains the interaction is complete  all valid configurations are reachable through user interaction  and backtrack-free  a user is never forced to change an earlier choice . additionally the computation must run in real-time  to facilitate use in interactive setting.
　for general csp models over finite domains  enforcing gac is np-hard. therefore  in order to provide real-time guarantees  current approaches use off-line compilation of the csp model into a tractable data structure representing the space of all valid configurations  m ller et al.  1; amilhastre et al.  1 . it has been observed that the compiled representations based on reduced ordered binary decision diagrams  bdd   bryant  1   although having exponential worst-case size  can usually be kept small for the industrial instances of product configuration  subbarayan et al.  1 .
　here we advance a state of the art for a recent application of interactive configuration in the domain of power supply restoration  t. hadzic and h. r. andersen  1 . the psr domain has received a lot of attention  after several blackouts had caused serious financial loss and had raised security considerations throughout north america and europe. these in turn have inspired a host of research on automatic recovery from power outages based on search and planning techniques  thi└baux and cordier  1; bertoli et al.  1  first for the high voltage transport networks  and later for the more complex and dense distribution networks.
　our industrial partner nesa a/s  a power distribution operator in the copenhagen area  insisted that the power restoration process should be interactive rather than automatic: leaving the control to the operator interactively reconfiguring the network  while still guiding her in this process. this makes the standard solutions based on network-flow algorithms inadequate since instead of finding just one  possibly optimal wrt. some cost  configuration we need to reason about all possible valid network configurations. in addition we were strongly required to take into account the entire combinatorial hardness of the problem  guaranteeing not only uninterrupted flow of electricity in circuits  connectivity constraints   but also meeting constraints on the maximum load carried by a line  load constraints .
　due to numerous cyclic dependencies  the industrial instances provided by nesa  proved to be much harder than any of the product configuration instances we had encountered so far. they were also much larger than psr instances seen elsewhere  making our existing configurators unable to work with them. basic bdd based techniques  see for example the monolithic approach in  t. hadzic and h. r. andersen  1   required representing the network with a single bdd. we investigated a number of techniques to increase the size of the network that can be compiled. in this paper we present the most successful of these. we describe improvements in the psr models achieved by reducing the number of network elements represented in a bdd  and use of psr specific variable orderings. we also introduce an alternative way to compile bdds representing connectivity constraints only-an important subclass of the problem  widely used in other psr research. finally  we describe our decomposition approach that allows us to scale to the largest instance in our collection  1 power sources  1 consumer sinks  1 line segments  see figure 1 . we believe that this is the largest network that can be handled in a backtrack-free and complete manner  under given time requirements so far. our instances are publicly available at http://www.itu.dk/~tarik/psr.
　related work bdds have been successfully applied in product configuration  subbarayan et al.  1 . however  the network topology of psr is much harder for bdds to represent  standard compilation techniques experience size explosion of bdds even for smaller instances . interaction over decomposed set of bdds has been explored before. in  meer et al.  1  the authors provide strong guarantees for interaction over acyclic network of bdds that can be dynamically extended by unlimited number of new bdds. in contrast  we do not provide support for dynamic structures of unbounded size  but we handle cyclic dependencies.
　the psr problem has been investigated in the context of automated planing. however  the instances presented were relatively small  thi└baux and cordier  1  and disregarded the combinatorial hardness of the problem caused by the load constraints. recently it has been shown that the psr planning problem is easy when these constraints are ignored  helmert  1 . we show that the interactive configuration of psr  as postulated by nesa  is np-hard under load constraints and polynomial when these constraints are ignored.
　our work is likely to be of interest for other applications exploiting bdd representations of networks such as automatic reconfiguration  t. hadzic and h. r. andersen  1   automated planning  jensen et al.  1  and reliability analysis  dutuit et al.  1 . the techniques should perform well also for other kinds of networks  eg. distributing water  natural gas  sewage  or for telecommunication networks .
　we proceed as follows. section 1 describes the problem defining load networks and connectivity networks  their complexity properties and the basics of our models. section 1 discusses techniques supporting compilation of load networks up to the medium size instances. section 1 describes techniques for compiling connectivity networks up to the largest instances available  while section 1 brings a decomposition approach that allows interactive configuration of the largest available instances of load networks. experimental evaluation is discussed throughout sections 1. we summarize and conclude in section 1.
1 psr configuration problems
we view a power network as a directed graph g v e   where vertices represent power sources p  supplying electrical cur-
e1
figure 1: lines e1 e1 e1 e1 incident with sink v. for simplicity arrows denote the direction of flow  not the edge directions. only one of the lines can lead the power into v  connectivity rules   e1 here. if v is on then according to kirchhoff's law: le1 = |v| + le1+ le1+ le1
rent  and sinks s  consuming it : p  v s = v p . in reality sinks are transformer stations that transmit electricity to final consumers. each edge e= v1 v1  （v 〜v   represents a power line capable of transporting current between v1 and v1  in any direction. the state of e is forward if e is transmitting a non-zero current from v1 to v1  and backward when transmitting from v1 to v1. otherwise the state is off. we denote the current load on e as le − 1. when e is off then le = 1.
　a sink v consumes up to |v| units of power. a sink can be on iff it is connected to a line in the forward or backward state that provides at least |v| units of current. otherwise a sink is off. a sink can be off even when connected to a powered line.
in such case current flows through it without any loss.
the following connectivity constraints must always hold:
  no short circuits: undirected cycles with sources but without active sinks  resistance  are forbidden.
  no self feeding cycles: undirected cycles that have no active sinks and no sources are forbidden.
  no sink is powered from more than one power line.
　most of the distribution network instances that we have seen in the psr research enforce only the above connectivity rules  effectively ignoring the relation between the consumption of sinks and the capacity of lines. this means that a sink can be switched on based only on whether it can be connected to a powered line. we call these special subclass of the networks the connectivity distribution networks. they are important to study in themselves  as being the basis for most of the psr research they can serve as a reference in comparisons. however  our industrial partner also requires the following load distribution constraints to hold:
  kirchhoff's laws for load distribution must be preserved as illustrated in figure 1.
  for each line e its current load le must not exceed a constant maximum capacity |e|: le ＋ |e|.
　in case of a line failure  an operator should be supported to interactively configure the affected part of the network. the advantage of interactive instead of automatic recovery lies in the fact that since a lot of information about the network cannot be encoded in csp models  an operator is likely to make more qualified decisions about how to reconfigure than an automatic system.  t. hadzic and h. r. andersen  1  describe this interactive reconfiguration process in detail.
　the operator interactively decides which power lines to use  and which to keep off. the broken lines are forced to be off  and some important sinks  hospitals  etc  should be always on. in each interaction step  after fixing a line or a sink  the operator gets valid domains for remaining network elements. we distinguish the problem of computing connectivity-valid-domains from load-validdomains  depending on which of the two kinds of distribution networks we are working with.
problem  connectivity-valid-domains . for a set of lines eoff  e required to be off and the set of sinks son  s required to be on decide for each line e（e eoff whether it is possible to power all sinks in son only using lines in e  eoff“ {e}   and for each sink v （s son whether the set son“{v} can be powered only using lines in e eoff  while connectivity constraints are satisfied.
theorem 1. connectivity-valid-domains is easy.
proof sketch. the following algorithm checks in o mn  time if a given selection of eoff and son can be satisfied  m is the number of lines and n is the number of sinks :
connectivity-sat g eoff son 
1 for each power source
1 do dfs traversal of nodes in g reachable from p
1 add to all visited nodes
1 return 
it suffices to call connectivity-sat |e eoff|+|s son| times to verify if any of the remaining lines can be forced off  or if any of the remaining sinks can be forced on. 
　similar models of connectivity networks are used as benchmarks for planing under uncertainty  thi└baux and cordier  1 . a complexity analysis of  helmert  1  indicates that these networks are easy also for planning algorithms.
problem  load-valid-domains . given a set of lines eoff   e required to be off and the set of sinks son   s required to be on decide for each line e （ e  eoff whether it is possible to power all sinks in son only using lines in e   eoff “{e}   and for each sink v （ s  son whether the set son“{v} can be powered only using lines in e eoff  while both the connectivity and load constraints are satisfied.
let us now formulate an auxiliary problem:
problem  set-sum-partition . given a finite set s of positive integers and two integer constants c1 and c1 such that decide whether there exist subsets s1 and s1 such that and for.
　the above problem is np-hard  t. hadzic and h. r. andersen  1   which can be shown by a straightforward reduction from subset-sum  garey and johnson  1  p.1 .
theorem 1. load-valid-domains involves solving nphard problems.
proof sketch. we show that decision problems contained in
load-valid-domains are np-hard  by reduction from
set-sum-partition. for an instance s c1 c1 create a network as follows: for each k （ s create a sink vk with consumption |vk| = k. add one source p connected to new dummy sinks s1 s1 s1 such that |s1| = |s1| = |s1| = 1. let |e p s1 | = c1  |e p s1 | = c1 and |e p s1 | = 1. for each sink vk add lines e s1 vk  and e s1 vk  with capacity max c1 c1 . notice that due to connectivity constraints  in any legal configuration each vi sink can be powered from a line coming from either s1 or s1  but never from both. consider solving load-valid-domains on the created graph with eoff =  and von ={vk |k （s}. this requires deciding whether s1 can be on  while the other constraints are satisfied. if it cannot  then there is no suitable partition of s. if it can then the answer to the original problem is yes  to obtain a witness put into s1 all k（s such that vk is powered via and into s1 all k powered via s1 .
　since the cost of computing valid domains for spaces represented in bdds is given by a polynomial parameterized by the bdd size  t. hadzic et al.  1   thm. 1 implies that there exist instances of load networks with exponentially large bdd representations  regardless of the variable ordering. additionally the two complexity results above may be perceived as indications  not proofs!  how hard it is to represent the respective problems using bdds. indeed we will soon experience that it is relatively easier to construct representations for connectivity networks than for load networks.
　we have built models of nesa's instances using a customized version of a bdd-based configuration library clab  jensen  online . nesa require to model their network as a load distribution network. the part of the network under consideration contains lines of maximum current capacity of 1 a  and transformer stations of size 1 kva which corresponds to current consumption of about 1 a for each transformer. this means that a power line with maximum current intensity can feed at most 1 sinks. this allows us to discretize the domain of current load from  1  to {1 ...1}  assuming that each transformer station consumes one unit of current. it suffices to enforce kirchoff's distribution laws over these discrete domains to achieve a close and sound approximation of network models with continuous current values: for every configuration satisfying our discrete model there is a range of continuous valuations satisfying the real-valued model.
for each vertex v （ v we have a variable vpow （
{on  off} indicating whether it consumes  produces  current or whether it is idle. for each line e （ e we introduce a variable indicating the direction of the current flow edir （ {off  backward  forward}  and a variable modelling the load le （ {1 ...1}. kirchoff's laws are modelled using finite arithmetic constraints implicitly expanded by clab into boolean formul .
1 compilation techniques for load networks
the theoretical intuition that bdds representing load networks are hard to construct  has been confirmed in practice for our instances. structural properties of these instances are reported in table 1  the instances have been created by henney  bak  jensen and sonne  t. bak and s. henney  1; lars sonne and rene jensen  1  in collaboration with nesa . the first column in the table shows names of the instances. the subsequent three columns list the numbers

figure 1: complex: the largest instance.
of lines  sinks and power sources respectively. the size of resulting bdd is indicated in the fifth column. even the medium sized instances lead to enormous bdds  and the largest ones cannot be compiled.
　the largest instance  complex  has been set by nesa as a goal for the first stage of our collaboration. we were focused on scaling our techniques to be able to handle it. figure 1 shows the topology of this instance. we believe that complex is the largest real-world instance publicly available.
　we have begun with an observation that for an operator configuring the network  the information about loads is not necessary  as long as the load constraints are guaranteed to be met. it suffices to just represent the on/off state of sinks and lines. the bdd can be decreased by projecting only on relevant non-load variables. any satisfying configuration of these variables in the projected bdd can be extended to a configuration including loads in the original bdd.
　to benefit from the projection already during compilation we use early variable quantification  meinel and theobald  1  p. 1 . clab compiles models by compiling the constraints separately and then conjoining the results. early variable quantification allows to quantify out variables at intermediate steps of the long conjunction. as soon as a load variable is not appearing in constraints remaining to be conjoined  it can be existentially quantified. the technique keeps the intermediary bdds smaller  making it easier to reach the final result  it is known that the final bdd is often much smaller than the biggest intermediate bdds in a long conjunction .
table 1: benchmark properties.
instance# of# of# ofsimplequantifiednamelinessinkssourcessize kb size  kb std-diagram1111+1111complex-p1111complex-p1111-1111large11--complex11--　despite employing several quantification scheduling heuristics  we were unable to compile large and complex  see the last column in table 1 . nevertheless we have observed much smaller intermediary bdds  hinting that this technique may be helpful in combination with other improvements. more importantly we have observed a drastic decrease of the final bdd sizes  due to projection . such a big decrease is not surprising in fact  given that more than half of all boolean variables in the model were only encoding loads. it is well known that the size of bdd representations of logical rules strongly depends on the variable ordering. the orderings for bdds in table 1 were created using a general purpose fan-in heuristic  meinel and theobald  1  p.1- 1  that operates directly on logical rules. since our model follows the network topology we decided to apply heuristics operating directly on the graph structure instead. we recognized a direct relationship between the topological distance of network elements  sinks  lines  and the logical interdependencies between the variables encoding them. because of that we place each vertex variable vpow in proximity to variables edir le for all the lines incident to v that were not already placed with another vertex. then  in order to place vertex groups with respect to each other  we search for an optimal linear layout of the input graph g v e   diaz et al.  1  using the minimum linear arrangement  minla  measure as the objective cost. other measures might be well suited  too.
　after constructing and applying this ordering we observed a significant improvement in the size of the generated bdds. we finally managed to compile large to: 1kb  1kb after quantifying out loads . nevertheless  the combination of these two techniques still does not suffice to reach our milestone: interactive configuration of complex.
1 techniques for connectivity networks
we should now present a compilation technique for connectivity distribution networks. we have shown in section 1 that there exists a truly polynomial algorithm for connectivity-valid-domains not using bdds. still  the bdds for connectivity networks are interesting in themselves. besides being useful for comparison with other psr research  they can be used for cost bounded interactive configuration  hadzic and andersen  1   where an operator can interactively prune valid domains based on some notion of cost. for example  an operator could limit the maximum number of not-powered sinks  or if there is a cost assigned to changing the status of each network line  then the operator could limit the total cost of introduced changes.
　after experiencing very large intermediate bdds when conjoining connectivity constraints in regular fashion we have developed an alternative way to compile connectivity networks. we remodelled the problem as a transition system  such that its reachable state space equals the set of all legal configurations. the construction is rather simple: in the initial state all sinks are off  and every transition step only powers lines and sinks in ways that do not violate connectivity constraints  lines cannot close cycles  powered sinks/lines should be connected to powered lines . we compute the state space by using the regular algorithm  which applies the transition relation transitively to the initial state until a fixpoint is reached  meinel and theobald  1  p.1 .
　we have created the instances of connectivity networks from the instances of section 1 by imposing connectivity constraints instead of load constraints and maintaining the topology. we have experienced much smaller intermediate bdds than when using the regular compilation scheme of clab. also we were able to compile bdds for all the instances  including large  1 kb or approx. 1 nodes  and complex  1 kb and 1 nodes .
1 decomposition for load networks
we have tried a range of other techniques to scale up to our biggest instance and only the conjunctive decomposition was successful. it is strongly related to  meer et al.  1 . we divide the graph g v e  into overlapping components g1 v1 e1  ... gn vn en   vi   v   ei   e such that every vertex belongs to exactly one component and each edge belongs to at least one and at most two components. cross component edges belong to two components:  e v1 v1 .v1（
. remaining edges belong
to single components. the sink consumption  and load capacities of lines are naturally inherited from the global problem. we refer to the shared lines between regions as interfaces:
.
　we compile a bdd φi for each component gi separately. since our modelling closely follows the network topology  only minor modifications are needed to generate the logical rules representing the subnetworks  in particular the load levels and directions on interface lines should not be quantified . computing valid domains for conjunctive partitions is nphard in general  even if represented by bdds. however  valid-domains can be calculated in the time polynomial in the sum of the sizes of components  if all the component bdds φi are globally consistent  dechter  1  p. 1   i.e. if for each component i = 1...n and for every satisfiable assignment σi to φi there exist a satisfiable assignment σ to φ = φ1 … ，，， … φn which is an extension of σi  for acyclic decompositions this reduces to arc consistency . the computation of valid domains over the globally consistent space φ reduces to standard bdd-based computation over each subnetwork separately: load-valid-domains φ  =
 load-valid-domains φi   giving an algorithm of cost polynomial in the size of the component bdds.
　so once a conjunctive decomposition is constructed the main problem lies in maintaining global consistency of the network throughout the configuration process. one successful way to do  meer et al.  1 . the authors observe that the growth of bdds at runtime can be exponential in the size of the interface sets iij  making it essential to find a partitioning with small interfaces. observe that the use of conjunctive decomposition sacrifices the polynomial response time guarantees of the previous sections. the sizes of the bdds created during interaction may be exponential  but only exponential in a small number  the interface size . the experiments show that the worst-case time complexity does not appear in practice.

figure 1: decomposing complex to regions r1 r1 r1 r1
　after a user assigns x○v  the solution space φi to which x belongs is restricted by assigning φi ○ φi … x = v. this may make some of the neighboring components allow inconsistent assignments. therefore a synchronization step is needed  where a global consistency is restored. the new solution space of φi is projected on all of its neighboring interfaces iij   φi … x = v ◎iij  and sent towards the respective neighbors φj. then the neighbors propagate the information recursively until a fixpoint is reached. the main algorithm  stripped of technicalities  is presented below  assume that the node i has already been restricted by x = v :
restore-consistency i φ1 ... φn 
1 s ○ {i}
1 while s is not empty
1 do remove some element n from s
1 for each interface inm incident with component n
1 do
1
1	if
　we have partitioned complex into four geographical components r1-r1 as shown in figures 1. each region shares with its neighbors line variables le edir from the interface sets iij. the interface sizes are 1  1 and 1 bits in this example. the bdds for each of the components are built separately  using the techniques described in previous sections. the variable ordering is optimized for each of the modules separately  using the minla heuristic. this means that on top of the projections  we also need to perform renamings when restoring the consistency. in return we benefit from being able to optimize each ordering separately. the sizes of the component bdds are 1 nodes  1kb  for r1  1  1kb  for r1  1  1kb  for r1  and 1 nodes  1kb  for r1. these bdds could be made smaller in an industrial quality implementation by introducing more components. still  the numbers were satisfactory for our  proof of concept  implementation.
　the computation of valid domains for complex lasts less than 1s  using a state of the art implementation from clab . the restoration of global consistency takes less than 1s. using our crude implementation. because the structure is so simple  the restoration never requires more than four conjunctions  but our simplistic implementation often does twice as many. the experiments have been carried on a 1ghz pc. the times decrease dramatically if the network is nearly configured  which is the case in most of the realistic situations.
1 conclusions and future work
we have discussed a range of techniques for interactive configuration of power distribution networks. we have shown that the interactive configuration over connectivity distribution networks is easy  while our more realistic model of load distribution networks makes interaction np-hard.
　we have shown and experimentally evaluated a range of techniques useful in compilation  interactive configuration  and reconfiguration of solution spaces representing power supply networks. we have described a successful attempt to model the problem in propositional logics and finite domain arithmetics with judicious use of hiding variables and early quantification scheduling. we have proposed a bottom-up way of constructing the solution space as a result of reachable state space computation with a custom transition relation. finally  by application of conjunctive decomposition  we were able to efficiently interact with the largest instance obtained from our industrial partner: a highly cyclic network of 1 power sources  1 nodes and 1 line segments.
　in future we will try to scale our approach to even bigger instances  and evaluate it on topologies that cannot be easily decomposed into acyclic component graphs  we already support cyclic decompositions  but we have not evaluated the efficiency on such cases  yet . we intend to improve the implementation of our configurator over decomposed networks  and develop automatic heuristics for decomposition.
　we would like to quantify theoretically the dependency between the cyclicity of instances and their bdd representation sizes  and to investigate representations other than bdds.
