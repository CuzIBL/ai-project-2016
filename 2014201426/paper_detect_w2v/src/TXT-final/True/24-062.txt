x 1 m o r f : 
a m o r p h o l o g i c a l c o m p o n e n t b a s e d o n a u g m e n t e d t w o - l e v e l m o r p h o l o g y 
h a r a l d trost 
deutsches forschungszentrum fur kunstliche intelligenz  dfki  g m b h standort saarbriicken 
stuhlsatzenhausweg 1  d-1 saarbriicken 1  germany e-mail: htrost dfki.uni-sb.de 

a b s t r a c t 
x1morf1 is a language independent morphological component for the recognition and generation of word forms based on a lexicon of morphs. the approach is based on two-level morphology. extensions are motivated by linguistic data which call into question an underlying assumption of standard two-level morphology  namely the independence of morphophonology and morphology as exemplified by two-level rules and continuation classes. accordingly  i propose a model which allows for interaction between these two parts. 
   instead of using continuation classes  word formation is described in a feature-based unification grammar. twolevel rules are provided with a morphological context in the form of feature structures. information contained in the lexicon and the word formation grammar guides the application of two-level rules by matching the morphological context against the morphs. i present an efficient implementation of that model where rules are compiled into automata  as in the standard model  and where processing of the feature-based grammar is enhanced using an automaton derived from that grammar as a filter. 
1 	i n t r o d u c t i o n 
recently there has been renewed interest in morphological analysis and synthesis. one widely used approach is twolevel morphology which combines a fully declarative representation of morphological data with a non-directional processing model. two-level morphology was originally proposed by  koskenniemi  1  and has since been implemented in several systems  e.g.  karttunen  1 . as the name suggests it assumes only two levels  namely lexical and surface level. besides the normal characters  representing graphemes or phonemes  there are diacritics used at the lexical level describing morphophonologically relevant information  e.g. '$' to mark word boundary or '+' for morph boundary. by default ail characters map to themselves  diacritics to the 1 character. all other mappings between the two levels are governed by rules consisting of a substitution  a pair of characters   an operator and a left and a 
1  work on this project began while the author was at the austrian research institute for ai  vienna. for fruitful discussions and support with the implementation of the system i would like to thank ralph flassig. 
1 	natural language 
right context  regular expressions made up from such pairs . the substitution defines a mapping between lexical and surface level  where its application is restricted by the  phonological  contexts. 
   word formation is handled very simply with so-called continuation classes which are non-disjoint sets of morphs. every morph contains information about its potential continuations  a set of continuation classes . 
   in the following discussion basic familiarity of the reader with two-level morphology is assumed  a concise description can be found in  e.g.   dalrymple et ah  1  . 
   the standard model of two-level morphology makes-at least implicitly-a number of assumptions: 
a  word formation is basically expressed by the 
concatenation of morphs  
b  the concatenation process can be  adequately  described by 
continuation classes  and 
c  morphology and morphophonology are autonomous 
systems with no interdependencies. 
   for most cases these assumptions are justified. but none of them holds for the whole range of morphological phenomena encountered in inflecting languages. for every assumption stated above some examples from german and english shall serve to show where problems arise: 
   concerning a   one can say that concatenation is the single most important phenomenon in word formation  but there are notable exceptions: 
¡¡¡¡german umlaut1 is an example for an originally phonological process which-over time-turned into a morphological one. presently  umlaut expresses a variety of different morphological features  among them the plural of nouns   
   as these examples show  umlaut occurs together with endings but it may also be the only morphological marker. one way to describe umlaut in two-level morphology is to assume a-phonologically underspecified-lexical character  e.g.  u  which by default maps to the regular vowel  e.g.  u . a two-level rule maps the lexical character to the umlaut  e.g.  u to ii  in all cases where this is morphologically required. e.g.  in our example it is the morphological feature plural  not any phonological context which triggers rule application. 
as to b   right association can be adequately expressed by 
1  the alternation of the stem vowels respectively. 

the continuation class approach  but because of its left-toright bias left association cannot and must be recoded into right association. circumfixation  as e.g. in the german past participle  and infixation  e.g. german to-infinitive  must be expressed even more indirectly. a formalism which allows for a more natural description of such phenomena would be favourable. 
   a number of authors have proposed to replace continuation classes with a grammar based on feature structures describing the legal combination of morphs  e.g.  bear  1; carson  1; gorz and paulus  1 . 
   concerning c  one must in some cases assume an interference between lexical and/or paradigmatic features of morphs on the one hand and morphophonological rules on the other hand. i will provide two examples  one from english and one from german. 
   in english  an e must be inserted between noun stem and the plural morph s under certain orthographical conditions. one of these conditions is the stem ending in o  e.g. potato =  potatoes . this can be expressed by the following rule1: 
	 1   	
unfortunately  there are exceptions to that rule: in some words  e.g banjo  epenthesis of e is optional  so both plural forms banjos and banjoes are acceptable. in some other words e epenthesis must not take place  e.g. piano . pianos  see  bear  1  . to which of these three classes a stem belongs seems to be idiosyncratic. 
   in german  a schwa is inserted between stems ending in d or t and endings starting with s or t. the following twolevel rule captures that fact: 
	 1   	
this rule1 will correctly insert a schwa in such forms as badest  you bath   arbeitet  you work   leitetest  you guided   etc. but at a closer look one identifies exceptions to the rule: e.g. haltst  you hold   rittst  you rode   sandiest  you sent . all these stems exhibit umlaut or ablaut. therefore a possible explanation for these exceptions is that the alteration of the stem vowel inhibits the application of the rule  1 . a modified rule would be: 
 1a   
a problem with this solution is that it forces us to represent all alternations of the stem vowel  i.e. both umlaut and ablaut  as morphophonological phenomena. in the case of ablaut-which is fully lexicalized-this is both difficult and wasteful. 
   even if we did this  we would still face cases which are not described correctly even by this extended rule. namely we have 1nd person plural past tense of verbs following strong conjugation like tratet  you kicked  or hieltet  you held  where schwa is inserted despite the occurrence of ablaut. no phonological context can be constructed to 
1 for the exact meaning of the operators in two-level rules see koskennicmi  1 . 
this rule  like all others used in this paper  is a simplified version of what is really needed for a morphological account of schwa epenthesis in german. but for the purposes of this paper it suffices. for more detail see trost  1 . 
account for this exception. again  we are forced to view this as an idiosyncratic property of the paradigm position. 
   to deal with these kinds of problems in standard twolevel morphology one has to create artificial phonological contexts by using extra diacritics. i will show how this approach works using the english plural example explained before. instead of a single plural morph s we have to assume two different ones  nameley s and &s  the pair &:1 is added to the alphabet . next we have to split up the continuation classes for noun stems: stems which behave regularly  like potato  may continue with s  stems where epenthesis is blocked  e.g. piano  continue with &s  the ones with optional insertion of e take both ending as continuations. application of rule  1  would then yield the desired results. 
   analogous solutions can be found for the other problems cited above. there are some severe drawbacks though with this kind of solution: 
- additional diacritics  e.g.  the & in the above example  are needed which cannot be motivated phonologically  
- because of the artificial ambiguities created more morphs are needed  e.g. s and &s  which have to be organized in more continuation classes  
- the null morph must be explicitly represented at the lexical  and therefore also at the surface  level transferring it from the morphological to the phonological level  e.g.  to trigger the umlaut rule for the plural mutter . 
   consequently  the use of that approach leads to both linguistically inadequate descriptions and-because of the ambiguities-to computational costs such as larger requirements of space and processing time. 
1 t h e architecture of x 1 m 1 r f 
to overcome the problems cited above x1morf augments the standard model in two related respects. first  the continuation class approach is substituted by a feature-based unification grammar to describe word formation  feature structures may contain disjunction and negation . for every morph the lexicon contains a feature structure. grammar rules and principles-also formulated in the form of feature structures-guide the combination of the morphs. a possible problem of the use of unification grammar is the higher complexity involved. i will show how compilation techniques can help to keep processing efficient 
   secondly  two-level rules are provided with a morphological context in addition to the phonological one. this is accomplished by associating a feature structure with the rule. this feature structure is checked against the feature structure of the morph to which the substitution pair of the rule belongs. checking means unifying the two: if the result of unification is fail  the morphological context of the rule is not present. if it succeeds the resulting feature structure is associated with the morph. 
   application of a rule is now dependent of the presence of both the phonological and morphological context. similar ideas have been proposed by  bear 1  and  emele  1  but neither author came up with a correct algorithm. for a detailed discussion see  trost  1 . 
   while a first implementation of x1morf interpreted rules directly  trost  1  i have now developed a more 
	trost 	1 


figure 1: global arcitecture of x1morf 

efficient implementation based on the original approach of  koskenniemi  1j of compiling rules into automata. figure 1 gives a sketch of the overall architecture. like the standard model x1morf consists of two parts. one translates from a string of characters or phonemes  the surface level  to a list of morphs  the lexical level . this is the morphophonological component. the other one combines the feature structures associated with every one of these morphs with a feature structure describing the word form  a lexeme plus morphosyntactic information . this is the morphological component  the word formation grammar. 
1 describing the example data in the augmented formalism 
i will now show how x1morf overcomes the problems cited in chapter 1. obviously  the more powerful mechanism of unification grammar allows one to describe both left and right association  circumfixation and infixation in an adequate way. 
   how about the interaction between morphology and morphophonology  let's return to our example of german schwa epenthesis. all morphs where schwa epenthesis should rightfully apply are marked with  morph  head  and all others where it must be blocked are marked with  morph  head  epenthesis:   this being the negation . an augmented rule incorporating the morphological context would then look like: 
 1b   
the morphological context will then achieve the required results of restricting the application of schwa epenthesis in contrast to rule  1 . 
   rule  1b  comes with both a phonological and a morphological context. in general  rules need not have both contexts specified. many phonological rules require no interaction with morphology  and there are also rules where the application is only morphologically restricted. an example for such a purely morphological rule is umlaut. 
   again we must start by providing morphs with the necessary features: but now we want to link umlaut with the plural of nouns. this is described in grammar rule  1a  which states the interdependence between umlaut and noun plural and  1b  relating the absence of umlaut to singular:  1a   morph  head  umlaut:      morph  head  cat: noun  number: plural    
 1b   morph  head  umlaut:   morph  head  cat: noun  number: sing    
1 	natural language 
   we can then formulate rule  1 . this rule would produces an umlaut in the surface form in all cases where the morph is marked accordingly and where the vowel u occurs. 
 1    morph  head  umlaut: +      ; 
as these examples show  x1morf is capable of representing data in a linguistically adequate way which pose problems for standard two-level morphology. we will now turn to the question of how to implement the system in an efficient way. 
1 processing augmented two-level rules 
similar to the standard model the augmented two-level rules of x1morf are translated into automata table. let's look at a sample rule to demonstrate that: rule  1  would yield the automaton1 shown in figure 1. but  as we have seen  rule  1  must be augmented to rule  1b  by a morphological context to guarantee correct application. 

figure 1: automaton corresponding to rule  1  
   how are morphological contexts integrated into the automaton in figure 1  we want a rule to apply if both the phonological and the morphological context apply. the automaton in figure 1 checks for the phonological context. the morphological context is to be checked only when the substitution pair actually occurs. this is equivalent to the 
 concerning the notation  shaded circles mean terminal nodes  the = stands for all characters not explicitly mentioned in the set of labels  i.e. +:= stands for all pairs with lexical + except +:e. with respect to the assumed alphabet that is the pair +:1. 

situation that the arc labeled with the substitution pair is taken. consequently  morphological contexts can be realized as tests on those arcs which are labeled with the substitution pair of the two-level rule. 
   but what happens if the phonological context is present  but the test returns failure  then the arc may not be taken and the automaton in figure 1 would block. but of course it would also block for all alternative pairs  e.g. +:1 . this is clearly wrong. to handle that situation correctly we must insert an extra arc labeled with all alternative pairs to the substitution pair  i.e. all pairs with the same lexical but a different surface character . of course  this new arc may only be taken if the test on the original arc returns failure. in all other cases it should block. to produce that behaviour we have to associate a test to it as well. this test is the negation of the original test. the result of that augmentation is the automaton shown in figure 1. 
   a consequence of that realization of our morphological contexts is that we have to make sure that any morphological context used will either subsume the final feature structures of the morphs to which it is applied or unify to fail. if this is not the case the application of the rule is optional for that morph with respect to the morphological context  i.e the rule may or may not be applied. 

figure 1: augmented automaton corresponding to rule  1b  
   for example  imagine a stem not marked for the feature epenthese at all. if the phonological context is present one could take both of the arcs connecting stale 1 and 1 because both tests would yield a positive result. in some cases such optionality might be wanted. remember the example of the plural of words like banjo  where both forms banjos and banjoes are correct 
   there is another consequence to associating tests with arcs. it might lead to indeterminism in the automaton which cannot be reduced. look at the following rule: 
 1  x:y  left-context right-contexti / morph-contexti; left-context right-context1 / morph-context1; 
when translating such a rule we have to accept an indeterminism because we need two arcs labeled x:y with the different tests  morphological contexts  attached. 
   instead of processing the automata the usual way i realize a proposal by  barton  1  to use a local constraint algorithm instead. one initializes the process by associating to each character pair of a given mapping all arcs which are labeled with that pair. the algorithm then proceeds by marking all possible paths eliminating dead ends. 
path-finding 
1  initialization 
for-every position: 
for-every character pair: 
for-every rule: enter all arcs labeled with that pair. 
1  forward scan 
for-every rule: 
from left to right for-every position i: remove all arcs with no predecessor in position i-1 if no arc left for a pair at position i: eliminate that pair throughout all rules. 
if no pair left at position i: return with failure. 
1  backward scan 
for-every rule: 
from right to left for-every position i: remove all arcs with no successor at position i+1 if no arc left for a pair at position i: eliminate that pair throughout all rules. 
if no pair left at position i: return with failure. 
1  if any arc was deleted in step 1  or 1 : goto step 1  else return. 
this algorithm cannot handle non-local dependencies. 
the claim is that such dependencies do not occur in the morphology of natural languages. 
1 processing the word formation grammar 
because non-directionality is one of the advantages of the two-level model the replacement of continuation classes by a feature-based grammar should keep this property. 
accordingly  a parser-generator had to be developed which is able to match lists of morphs and its internal representation  lexeme plus morphosyntactic information . 
   the parser-generator of x1morf uses an algorithm oriented on the ideas of  shieber et al.  1 . it is based on the notion of heads. to be compatible with that algorithm the word formation grammars must fulfil the following requirements: 
- structure is defined via head daughters and complement daughters  i.e. every non-lexical item consists of a mother  a head daughter and  one or more  complement daughters. 
- head feature convention must be obeyed  i.e. head information is shared by the mother and their head 
daughter  and 
- all complements are defined via a subcategorization list  in particular  there are no optional elements like modifiers . 
these requirements led to an hpsg-style  pollard and sag  
1  grammar. other grammatical theories are of course also possible as long as the above requirements are met. 
   the algorithm maps internal structures  lexemes plus morphosyntactic information  to the feature structures associated to a list of morphs. in the process of this 
	trost 	1 
mapping a complex feature structure is created where the morphs form the leaves and the internal structure the root of the tree created by the head and complement daughter structure. 
   in the case of parsing the internal structure  i.e. the root node  comes with only those features shared by all word forms. the morphs  i.e. the set of possible leaves  on the other hand are fully determined and already ordered  i.e. boundary information is present. therefore we have one additional constraint for parsing: the final structure is legal only if it spans the whole length of the morph list as specified by the boundary information. 
   in case of generation the internal structure is fully specified  while at the morphs' side we have  potentially  the whole lexicon. a first step is the collection of only the relevant lexical entries. here we make use of the fact that all lexical entries have a feature root. its value is a canonical form standing for the morpheme  e.g. all allomorphs of a verb stem would share the same root. inflectional endings have an empty root feature because they do not contribute to the root form of a particular word form. 
   because of compounding and derivation the root feature of word forms may be a list of entries. all lexical entries whose root form contains a member of that list or is empty are collected. they make up the set of relevant morphs in the case of generation. 
   of course  a number of intermediate possibilities for specifying the arguments of the algorithm exist. if more specific information is available as to which word form to expect1 the analysis can be restrained. if on the other hand the internal structure is not fully specified when generating  the algorithm will produce all the corresponding morph lists. this can be very useful in testing a certain set of linguistic data. 
   let's now turn to the description of the core algorithm. its task is to create a feature structure which combines root element and  a subset of  the lexical elements. this is accomplished by applying a mixed-mode approach. first  head information of the mother is projected onto the lexical elements to find potential heads. every element thus selected is taken as a potential candidate. 
   the next step is bottom-up. the lexical element is projected up to its maximal projection  where its subcategorization list is empty . places in the tree where complement daughters are to be added are collected. the created structure is unified with the root. 
   we then recursively apply the algorithm to fill in the complements. whenever the algorithm fails to return a complement structure the whole structure has to be discarded. more than one returned complement structure means an ambiguity. the following diagram gives a more exact picture of the algorithm. 
parse-generate  root-of-tree  list-of-morphs  for-every morph of list-of-morphs: 
search for lexical heads by using head-info from root-of -tree; heads-list := list of potential heads; 
if x1morf is embedded in a full-fledged system then the sentence level parser e.g.  could provide for expectations concerning morphosyntax. 
1 	natural language 

1 partial compilation of the grammar 
while the algorithm described so far is very general and powerful its expressive power is greater than what is needed for describing morphology. at least most of the data could be expressed by means of a regular grammar  or a finite state automaton of course  which would lead to a much more efficient implementation. 
   on the other hand we want to keep the possibility of describing word formation in the elegant and adequate way offered by unification grammar. and-for ease of interaction with other parts of a complete natural language processing system-the description in the form of feature structures is desirable. 
   it would lead to a great enhancement if it was possible to compile a finite state automaton from the word formation grammar which can then be used as a filter to rule out most of the possible combinations before the unification grammar is actually applied. 
   the word formation grammar g works on the alphabet of morphs producing a language l. of course  there is a set of regular grammars gr producing languages lr such that the following holds: 

the task is to find such a grammar gr which in the best case would be equivalent to g. but it suffices that lr is at least much smaller than  how can one arrive at such a grammar  the grammar writer must define a relevant subset of features. this subset is used to split the lexicon up into equivalence classes. on the basis of these classes and the grammar rules a regular grammar gr is constructed which accepts at least all the legal words in l. at the moment this compilation process is done by hand  but work on such a compiler is in progress. 
as a next step an automaton equivlalent to gr is built. 
this automaton is then used as a filter. in parsing it is applied to the morphs found in the lexicon weeding out most of the spurious readings. in generation it is applied to the original set of lexical entries proposed and thereafter again in any recursive step of the algorithm. this filtering speeds up processing considerably because most of the unifications which would eventually lead to failure anyway do not come up in the first place because the morphs have been eliminated by the filtering process. 
1 interaction with the word formation part 
we are now in the position to have a close look at the 

interaction between parser-generator and two-level rules. what makes this interaction complex is the fact that the morphological context must be tested against a feature structure which might still be incomplete. 
   to make things easier to understand i will start with generation where the the feature structures associated to the morphs are already fully specified by the parser-generator before the two-level rules are applied. the algorithm consists of the following steps: 
generate  lexical-string  active-rules:= all rules which are associated to any of the occurring lex-chars; for-every position i: 
enter all surface-chars potentially mapping to the lex-char at 
position i; 
initialize the transition tables of all active rules; for-every position i: 
for-every pair with an associated rule: 
unify morphological context of rule  feature structure of the morph ; 
if unification succeds: ok 
       else remove arc for that pair at position i enter the same arc for all alternative pairs at position i. apply path-finding. 
let's consider an example: the alphabet shall consist of the obvious pairs and the only two-level rule shall be  1b . the list of morphs created by the word formation grammar is  sand +t +t . after initialization of the transition table of  1b  we encounter the following situation: 
next the local constraint algorithm is applied. by removing all arcs for +:1 in the second case it rules out that pair. the final situation looks as follows: 

both potential ambiguities have been resolved and the surface word sandtet can be generated. 
   we shall now turn to analysis1. there we make use of the morph lexicon to constrain the possibilities for lexical mappings of surface characters. if ambigous mappings remain we split up the resulting pairings in step 1  in such a way that every different list of morphs is processed seperately. 

if an arc has been removed because of failed test: apply path-finding. 
why are tested arcs inserted in step 1  of the algorithm  one can assume an alternative pair only under the hypothesis that the rule does not apply at this position. this holds if either the phonological context does not apply: then the local constraint algorithm will remove the newly inserted arc anyway. or the morphological context does not apply: in that case we need the corresponding arc for morph-test which will then decide. 
   the testing of the morphological context consists of the following steps: 
there are two different possibilities for success. if the test structure subsumes the morph's feature structure  the morphological context is granted. otherwise  grammar processing might add information which proves the morphological context wrong. since the test structure is unified into the morph's feature structure this will correctly lead to failure. 
   i will demonstrate the algorithm for analysis using the same example as before. this time we start from the surface form sandtet  you sent . after the initialization of the 
1 for sake of simplicity we assume that all the null characters are already inserted in the surface string when the algorithm starts. 
	trost 	1 

transition tables we encounter the following situation: 

now the lexicon has to be consulted. it will rule out the pair e:e because no morph + tet is found. we are therefore left with a single list of morphs  namely  sand +f +t . as a next step tested arcs are inserted at +:1 positions because a 
rule is associated with lexical +: 

as a next step the local constraint algorithm is applied. the result is a single continous path: 
$ 
1 s s a a n n d d + 
1 t t + e it 
t $ 
1 1 1 1 1 1 1 1 1 1 1 1 1 now the tests have to be performed. both tests succed  i.e. unification yields a result different from fail. the feature structures associated to the morphs sand +/ +r  including the information transferred by filter testing  are input to the word formation grammar which will eventually come up with a feature structure comprising the information: 
  root: send  
 morph  head  cat:verb  tense:past  num:plural  person: 1j j  
1 conclusion 
i have presented the system x1morf  a morphological component based on two-level morphology. in contrast to the standard two-level model  x1morf provides for interaction between the word formation part and the twolevel rules. i have shown that such an interaction provides for a linguistically more adequate and a computationally feasible description of morphology. 
   interaction is provided in the form of feature structures associated with the two-level rules. unification of these feature structures with the feature structures of the morphs of which the pair associated to the rule is a part is used as a test to restrict the application of the two-level rules on morphological grounds. 
   with that augmentation x1morf can provide two-level rules with an extra morphological context. this context is used for two different purposes: 
- non-concatenative morphological phenomena like german umlaut can be expressed by two-level rules  inducing the necessary information transfer between two-level rules and word formation  and 
- the morphological context can restrict the application of 
1 	natural language 
morpho-phonological rules. 
   i have shown an efficient implementation of x1morf by compiling the two-level rules into finite state automata and by extracting a regular grammar from the feature-based unification grammar which is used as a filter sharply reducing the inherent combinatorial complexity of the unification grammar. 
   the system is currently running in commonlisp on a mac ii fx. it has been used to describe german inflectional and derivational morphology. currently it is being integrated with a lexicon structure containing lexemespecific syntactic and semantic information. 
r e f e r e n c e s : 
 barton  1  barton g.: constraint propagation in kimmo systems  acl-1  new york. 
 bear  1  bear j.: a morphological recognizer with syntactic and phonological rules  coling-1  bonn. 
 bear  1  bear j.: morphology and two-level rules and negative rule features  coling-1-1  budapest. 
 carson  1  carson j.: unification and transduction in computational phonology  coling-1  1  budapest. 
 dalrymple et al.  1  dalrymple m.  kaplan r.m.  karttunen l.  koskenniemi k.  shaio s.  wescoat m.: 
tools for morphological analysis  stanford univ.  report no. csli-1. 
 emele  1  emele m.: uberlegungen zu einer two-level morphologie fur das deutsche  in trost h. ed.   1. oesterreichische artificial-intelligence-tagung  1  springer  berlin. 
 gorz and paulus  1  gorz g.  paulus d.: a finite state approach to german verb morphology  coling-1  
1  budapest 
 karttunen  1  karttunen l.: kimmo: a general morphological processor  texas linguistic forum 1  1. 
 koskenniemi  1  koskenniemi k.: two-level model for morphological analysis  ijca1  1  karlsruhe. 
 pollard and sag  1  pollard cj.  sag i.a.: informationbased syntax and semantics  vol. 1: fundamentals  csli lecture notes no. 1  univ. of chicago press  chicago. 
 shieber et al.  1  shieber s.  noord g. van  pereira f.  moore r.: semantic-head-driven generation  computational linguistics  	1 l :1. 
 trost  1  trost h.: the application of two-level morphology to non-concatenative german morphology  coling-1  vol.ii 1  helsinki. 
 trost  1  trost h.: recognition and generation of word forms for natural language understanding systems: integrating two-level morphology and feature unification  applied artificial intelligence  1 1  in print . 
