 
     this paper describes a mechanical assembly system  lama  that transforms high level assembly descriptions into programs for a computer controlled manipulator. 
1. introduction 
     our long-range goal is to create machines that do work of the sort that today requires manipulative  visual  or problem-solving skill not usually associated with assembly automation. we believe that such machines are needed for several reasons: 
＊ 	to get people out of jobs that $re dangerous or dehumanizing. 
＊ 	to get jobs done that people cannot or will not do. 
＊ 	to reverse the continuing trend toward excessive standardization. 
＊ 	to compete. 
considerable progress has been made. in many laboratories  robots with sophisticated manipulators assemble devices ranging from bearings to pumps  often working with tolerances requiring force feedback to get things mated. 
　　　the programs driving such impressive demonstrations have been straightforward  but tedious to write. the reason is that high level languages are only now under development for automatic assembly. assembly programming is still in the assembly-language era  so to speak. the programmer is forced to think in terms of instructions like these: 
move in the direction 1 at speed s until you reach position p. 
　　exert a force f by moving in the direction d. it would be better  and certainly cheaper  if the programmer could think instead in terms of suggestions like these for assembling part of an engine: 
insert the piston pin partway into the piston. 
place the rod's pin end on the piston pin inside the piston. 
push the pin through the rod and the piston. 
that is  we would like to tell our robots what to do in terms that 
 re comfortable to us  leaving them to fill in the details. rough english description  or something close to english but less ambiguous  is what we have in mind. a mechanical assembly language that works with-such descriptions is on the critical path toward economically viable robot systems. 
　　　our short-range goal  then  is to do something about creating such a language. indeed  this paper is about lama  an acronym for language for automatic mechanical assembly. it consists of a sample of the work described more fully in a new thesis by the first author  lozano-perez  on topics suggested by the second. the translation between what the human foreman-programmer describes and what the manipulator controller wants  in our design  is to take place in two steps: 
＊ first  the human's assembly description  with many missing details  is converted into an assembly plan  which has the gaps filled in  but remains very high level. a very verbose and careful human's assembly deception would differ only 
 lightly or not at all from the assembly plan. 
＊ 	second  the assembly plan is converted into a manipulator 
 program  with things worked out to the level of coordinates  trajectories  forces  and torques. this conversion requires  in part  a pick and place phase and a feedback strategy phase. 
　　　the pick and place phase converts the assembly plan into a program that assumes ideal position information and positioning accuracy. it must specify the manipulator motions that achieve the desired relationships between the parts. both of these assumptions are untenable. the role of feedback planning is to expand skeleton programs embodying feedback strategies to carry out the assembly operations taking into account the imperfection of the data and the positioning errors in the manipulator. the resulting program is the desired manipulator program. 
　　　the pick-and-place and feedback-strategy phases have been examined in detail and prototype programs have been implemented that do these jobs. in this paper  we will focus on the phase dealing with feedback strategy. 
　　　we begin  however  with a survey of some of the decisions that must be made when specifying an automatic mechanical assembly in general  and we also give a more complete overview of the design of an overall system. we will see that three basic themes underlie the design: 
high level assembly operations can be represented by program plans  called skeletons  which can be expanded as required by using facts about the specific task at hand. 
the desired effect of the basic manipulator motions can be described in terms of a few geometrical and spatial relations. we believe that the assembly problem can be seen as the problem of achieving a certain set of geometrical relations between objects while avoiding unwanted collisions. 
＊ choices for location and motion parameters should be made by identifying all the constraints on the solution  finding a range of values in which the solution may lie and picking an element from that range. 
1. the nature of the problem 
　　　this section tries to highlight the difficulties of programming assembly operations by examining a particular assembly task in some detail. 
　　　fig. 1 shows the piston subassembly from a model aircraft engine. we will use it to emphasize the number and complexity of the decisions to be made in planning an assembly. the assembly has been carried out using the silver roboi manipulator at the mit artificial intelligence laboratory  silver . this manipulator is not a fully general position and orientation generator because it has only five degrees of freedom  not six. they ere divided in the following manner:  i  em xy table   1  a wrist which can displace and rotate along the z axis and  1  a vise which rotates about the x axis  see fig. 1 . the manipulator is equipped with   force sensing wrist capable of resolving the xyz components of the forces and torques acting on the wrist. this allows the manipulator to generate and detect forces. the use of force feedback enables the silver robot system to perform precise assembly tasks whose critical clearances are below its positional accuracy  inoue} 
　　　the hard part of this engine subassembly is inserting the piston-pin through the piston pin-hole and through the piston-rod. the obvious way to do this  for a human  is to line up the holes in the piston-rod and the piston and then push the piston-pin through both holes. this operation is impossible using the manipulator configuration we have described. recall we only have two sets of parallel fingers available; one set is the hand  the other the vise. this restriction forces us to break the 
　　　
robot i c s - 1 : lozano-perez 1 
　　　
problem up into three parts. 
　　　first the pin is inserted partway into the piston. then the piston-rod's pin-end can be placed onto the pin inside the piston. and finally  the pin pushed through the rod and the piston-hole. 
　　　this description of the piston assembly simply specifies three snapshots of the system state. each state is specified in terms of the spatial relations between the parts involved. the verbs used in the description  insert  place and push  give some information as to the nature of the operation necessary to achieve each state. note that no mention was made of the manipulator. the constraint that only one hand and a vise is available dictates the nature of the solution  but the manipulator motions necessary to carry out the solution are not specified  nor are they obvious. 
　　　the assembly can be carried out by first placing the pin in the vise such that its main axis is horizontal  fig. 1a . then the piston can be placed on the pin so that the cavity is facing upward. the rod can then be placed on the portion of pin that is projecting into the piston's cavity  fig. 1b . the manipulator can then grasp the piston  remove the piston from the vise  and after closing the vise  push the part of the pin protruding from the piston against the vise  figs. 1c&d . we call this the assembly plan. 
　　　for each operation in the assembly plan  the manipulator program must specify the position and orientation of the fingers such that they can securely grasp some part of the object to be moved. the program must also specify a trajectory for the manipulator that is not likely to damage the manipulator or disturb any of the other parts. 
　　　the assembly description and the assembly plan mention only the spatial relationships that must hold between the parts in the goal state. these relationships involve much greater positional accuracy than is directly achievable by the manipulator to be used. these relationships can be achieved by employing force feedback techniques such as those described in  inoue . 
inoue has developed a program which  driven by force feedback  does peg-in-hole insertion. unfortunately  his program cannot be used directly in the task at hand. inoue's program 
- assumes that the motions of the hand correspond directly to motions of the hole. the assembly plan described above specifies that the piston-rod be held at the opposite end from the point of insertion. this is because the insertion is happening inside the piston. inoue's program must be changed to account for this. 
　　　like most programs  inoue's has parameters. the length of certain motions and the magnitude of some forces are not specified. these parameters must be specified for the task at hand. 
　　　inoue's program also lacks error detection capabilities. when the manipulator is told to move in a given direction until a force above some threshold is felt  no position bounds are specified. this can give rise to severe errors. 
　　　these considerations point to one  very important  conclusion: inoue's program is not so much a general utility program as a specification of an assembly strategy to be adapted to many different geometric environments. this is true of most manipulator programs because of their dependence on assumptions about the geometry of the task. 
　　　let us summarize the problems to be faced in specifying an assembly operation. 
	＊ 	describe the objects to be assembled. 
＊ specify a plan for the assembly. the details of the plan will depend on the manipulator configuration available and on the capabilities of the assembly system. 
＊ determine the grasping position and orientation for the objects involved in each operation. 
＊ determine a collision free path between the origin and destination of all motions. ' 
	＊ 	tailor the assembly strategies to fit the particular geometric 
r o b o t i c s - 1 : 
environment. 	this involves providing parameters to the strategies. 
＊ examine the strategies for likely errors and determine the actions to be taken in case of failure. 
1. the nature of the approach 
　　　the current implementation of lama has focused on a subset of the problems outlined in the previous section. the most important are grasping  tailoring assembly strategies and error prediction. this section briefly outlines our approach to these problems. 
　　　computing a grasp point on an object from a description of the object and its surrounding environment is a very difficult computational problem. the basic mechanism needed to solve the problem is the ability to detect that attempting to grasp some part of the object will cause a collision. this involves computing the geometric intersection of the solids making up the manipulator description with the object to be grasped and with any nearby object. a non-null intersection indicates a collision. a simple approach to solving this problem would be to guess a grasp point and then test whether it is safe. typically there is an infinite number of possibilities and the challenge is to choose a grasp point with some confidence that it is a good choice. trial and error methods are unsatisfactory in this context because not only do they have very poor worst-case behavior but once a 
　　　result is found  it is very difficult to evaluate it without knowing the alternatives. our approach to grasping  briefly described in section 1  relies on describing the range of possible grasp points as a few sets of parameterized grasp positions which can be evaluated and compared as units. 
　　　in section 1  we pointed out the dependence of manipulator programs on the particular geometry they were designed for. a useful mechanical assembly system must have some means of representing assembly strategies that does not make too many assumptions about the environment where they are to be used. our approach to making the strategies as general as possible is to have each of the steps in the strategy be essentially a goal statement. each operation is decribed in terms of the geometric relations it is meant to achieve in a coordinate system specified by the strategy. the assembly strategies can then be adapted to a particular situation by computing the parameters needed to achieve the goal of the individual steps of the strategy. 
　　　once we have available a description of the goal of each step  then some errors can be predicted by simulating the operations  taking into account some of the uncertainty in the positions of objects. these error predictions can be used to solicit corrective actions from the user. 
　　　　section 1 will describe in more detail how the assembly strategies are used. 
1 an overview of the lama system 
　　　this section describes how we believe the piston assembly will be processed by lama when it is completely implemented. prototype programs currently exist to do parts description  the 
pick and place phase and a simple feedback strategy phase. no program exists to do the assembly planning. 
　　　the parts to be assembled must first be described to the system. the user uses the system interactively to define models of the parts. complex objects are described as unions of a few kinds of primitive object types. the primitive objects currently available in implemented parts of lama are a cuboid and a cylinder  both as solids and holes . 
　　　fig. 1 shows a schematic description of the models for the parts in the piston assembly. note that the parts are arranged hierarchically. this allows a convenient treatment of subparts of objects. any desired subparts can be represented as nodes in 
lozano-perez 
　　　
the part model trees. each node has information regarding the size  type and relative position of the subpart. all the subparts  including the holes  are approximated as rectangular or octagonal right prisms. this provides a uniform internal representation for all the object types. this representation simplifies the definitions of the spatial modelling operations. by generalizing to polyhedra the desired volumes can be approximated to any required accuracy. 
　　　the next step is that of describing the assembly. ideally  we would like to specify the assembly process by simply describing the completed assembly. a more realistic goal is that of accepting assembly instructions similar to those given to people  as discussed in the introduction. 
　　　the assembly description for the piston assembly is shown in fig. 1. the assembly description s-pecifies only that operations  such as insertion  are to be performed on the parts. the individual operations ara often under-specified. parame ers  re missing or only weakly constrained  e.g.  insert the pin partway into the piston. no mention is made of the manipulator or of the strategies to be used to carry out the operations. merely saying insert is not enough to specify an assembly operation. the actual motions carried out are sensitive to the shape and relative sizes of the parts. 
　　　the first step in the transformation from user input to manipulator program is to completely specify the assembly description. this is the task of the assembly planner. it must first introduce into the description those operations that will achieve the prerequisites of the operations in the initial description. this requires specification of some high level manipulator commands such as grasp  ungrasp and place. then the operations must be completely specified and strategy choices made for them. the end result of this process is an assembly plan. in this plan each operation is fully specified and the positions and orientations of the parts involved are well constrained. an important point to note is that the plan still does not determine the manipulator motions necessary to carry out the assembly. the assembly plan corresponding to the assembly description in fig. 1 is shown in fig. 1. 
　　　the current implementation assumes that the assembly plan is directly available as an input to the system. we can then focus on the process of transforming an assembly plan into a manipulator program. 
　　　once the assembly plan has been fully specified  a detailed pick and place computation can be carried out. this will determine precisely where the objects are to be grasped and what paths they must follow to avoid collisions. unfortunately  the pick and place computation is not independent of the nature of the assembly strategies. where the object is grasped and where it is placed prior to an operation depends on the details of the operation. the solution is to do the grasp computation at the initial position of the object to be moved  before the operation is instantiated. this determines the range of possible grasp points. after this  the assembly step is expanded. the instantiation process places additional constraints on both the initial position of the part and its grasp point. then  an exact grasp point is chosen and the path computed after the operation has been expanded. 
　　　the pick and place computation exercises most of the spatial expertise of the system. the basic operation in both grasping and collision avoidance is detecting the possibility of a collision by intersecting volumes. in finding a collision-free trajectory we are interested in whether the volume swept out  by the manipulator and the object it carries  collides with other objects in the workspace. similarly  in grasping we are interested in the locations on the object where the hand can be placed such that no collisions will result. since there are a whole range of grasping positions for a given object  this amounts to intersecting the volume of the hand  swept out over the possible grasping positions  with the workspace. 
　　　we have characterized the types of grasping positions for the primitive objects as a series of grasp sets. grasp sets are parameterized ranges of hand positions over a surface of the object. fig. 1 shows a graphical representation of the grasp sets for cuboids and cylinders. complex objects are analyzed by considering how to grasp each of their component objects while taking into account the interactions with other parts of the object as well as with the rest of the environment. 
　　　fig. 1 shows the system's representation for the peg-in-hou insertion strategy. it is very similar to the program presented in  inoue . the feedback strategy phase simulates this skeleton program  predicts contacts and estimates the direction and magnitude of the forces that will be produced. 
　　　note that each step in the skeleton program is annotated by the geometric relations it generates between the manipulated parts. this information can be used in two ways: 
＊ to generate numerical values for parameters in the programs. for example  the size of the shift in the y direction in the drop-into operation can be determined by examining the geometrical relations it is meant to achieve. ＊ to generate tests for likely failure situations given the particular execution environment. a good example of this is the operation of moving the piston-rod near the piston-pin for the insertion of the rod's pin-end onto the pin inside the piston. by examining the clearance between the tip of the pin and the piston wall given the errors in grasping and positioning  we can predict that sometimes the rod will contact either the pin or the piston. a test for 
this situation can be generated and instructions as to corrective action could be solicited from the user. 1. the feedback strategy phase 
　　　the result of the operation of the feedback strategy phase is a manipulator program. this section considers the operation of the feedback strategy phase during the expansion of the peg-in-hole operation in which the piston-rod is to be inserted onto the piston-pin  while the pin is inside the piston. a preliminary implementation currently exists of the program that does the simple code generation shown here. 
　　　the assembly plan  fig. 1  has the following entries for the operation of inserting the piston-rod on the piston-pin: 
 grasp obj :  piston-rod  
such-that :  facing*   rod-bar  top  up   
 insert 1bj1 :  piston-pin  
1bj1 :  piston-rod pin-end-hole   
 ungrasp obj :  piston-rod   
we must first find a grasp point on the piston-rod. there are two possible grasp positions on the rod; one along the sides of the piston-rod's pin-end  the other on the flat ends. the choice will depend on several factors:  1  flat surfaces are preferred to curved surfaces and  1  possible collisions. collisions are predicted by simulating the assembly operations while assuming the hand can be at both of the legal grasp positions. the feedback strategy phase can then consider the effects on each of the grasp ranges simultaneously. 
　　　the first task in expanding an assembly strategy is to setup the local reference system. the reference statement in peg-in-hole indicates that the reference frame's x axis is 
aligned&centered with the hole's front face. this leaves one rotational degree of freedom unspecified. the current system always tries to line up unspecified degrees of freedom in the reference with global axes  tn this case  the reference's z is aligned to the global r. 
　　　the initial statement specifies the constraints on the initial position of the parts. in peg-in-hole it specifies that the hole and the peg be aligned&centered and in-front-of each other. fig. 1a shows a top view of the interaction volume 
　　　
roboties-1: lozano-perez 1 
　　　
of the piston-rod's pin end and indicates the intersection of that volume with that of the piston. the intersection divides the range of legal positions into two ranges on either side of the piston wall. the current system chooses to use the range where the objects are closer to each other as the range of legal positions of the piston-rod. 
　　　the first step in the drop-into strategy calls for the object in the hand to be rotated 1 radians. the feedback strategy phase must establish that this rotation will not have any bad effects. this is done by simulating the motion. in this case  contacts with the pin and/or the piston are possible. these accidental contacts determine that the force parameter be  dtttct contact  and that an error should be generated if the termination condition indicates a contact. the code that does this is shown here: 
 change r by 1 while  rforce    defect-contact    
 cond   contact  r 1 1   error    
at this point the user is asked about the likelihood and seriousness of the predicted error. the user can choose to ignore the error condition. 
　　　the next step involves a shift in the y position of the rod so as to place the hole to the left of the pm. the motion is constrained as follows: 
 1  hole's center left-of peg's center: this restriction is placed on the displacement operation itself. fig. 1b shows  in dashed lines  the volume taken up by the piston-rod over the range of positions consistent with this relation. 
 1  hole contact peg: this restriction is imposed by the next operation in which the rod is moved along x until contact is achieved. thus the rod's position for the shift in y is also constrained so as to allow the contact to happen. this is equivalent to constraining the position of the rod's pin-end-hole to overlap in y that of the piston-pin's front face. fig. 1b shows  in solid lines  the volume of the rod over the range of positions consistent with this relation. 
　　　　a position consistent with both of these relations is obtained by computing the range of values of the position parameters that satisfy each one and then intersecting the   ranges. fig. 1b shows a graphical representation of the ranges and their intersection. 
　　　a simulation of the motions shows that the rod can come in contact with the pin and with the inside of the piston  fig. 1c . these contacts cannot always be avoided by adjusting the starting position of the piston-rod and so they must be expected to happen. this dictates that the force threshold be  detect-contact . the distance parameter of the motion is chosen as the midpoint of the range of legal displacements  indicated by  y  . this choice is quite arbitrary. the conditional statement after the motion merely tests whether the contact occurred. the user is again given the option to ignore the contact if it happens. in this case that is the best course. the code generated is: 
 change y by  y  while  yforce    detect-contact    
 cond   contact  y 1  y    error    
after the shift operation  the landing step is simulated. a contact can always be achieved  but there is a region of uncertainty where contact with the inside of the piston is possible before contact with the pin. the contact is ambiguous  so the error cannot be detected by using the location of the contact. the code generated simply makes sure that the contact is in fact detected. the displacement used in the motion is the displacement necessary to go past the last possible contact with the piston-pin and collide unambiguously with the piston wall. 
 change x by v while  xforce    detect-contact    
 cond   contact  x 1 v      t  error    
this completes the drop-into operation. the complete program can be seen in fig. 1. 
　　　the next step is to compute a path from the position where the piston-rod is first grasped to that where the insert is to happen. a straight line path to this position is not possible since it implies going through the piston. the collision avoidance routine generates a path that goes above the piston and moves down to the desired position. 
1. relation to other work 
　　　the problem of construction planning has been very important in the study of problem solving. during the last three or four years several programs have been developed to do construction planning in the blocks world domain. fahlman's build  fahlman  is expert in planning blocks world assemblies. the programs of sussman and sacerdoti have explored general issues of planning and debugging in the context of assembly problems.  sussman  treated assemblies of blocks exclusively while  sacerdoti  has also considered the assembly  and disassembly  of a water pump. 
　　　of these programs  only build considered the issues of stability  contact  etc.  which are vital to the process of mechanical assembly. but even build  being limited to block structures could ignore most of the problems of spatial interactions. build also ignored the manipulation aspect of the construction. sacerdoti's use of noah in sri's consultant project avoids alt these problems because it assumes a human as the manipulator. the work on lama has focused on the problems introduced by more realistic objects and the errors of a real manipulator. 
　　　the approach taken in lama to assembly strategies was influenced principally by the work of sussman  sussman  and goldstein  goldstein  in debugging programs. they both stressed the usefulness of having a statement of purpose for each operation in a program. the elegant method of  ambler & popplestone  for computing the position and orientation of objects given relations such as against and fits-in provided some of the key ideas on how to describe the goals of strategy steps. 
　　　there are  at least  five other projects that have direct relevance to the task of building an automatic mechanical system. these projects are being conducted by the ibm thomas j. 
watson research center  the stanford ai laboratory  the stanford research institute  the university of edinburgh  and the c. s. draper laboratory. 
　　　the ibm system design  autopass  lieberman & wesley   is closest to lama. it is to be imbedded in pl/i and will provide the user with a selection of high level assembly operations  the most general being a place command in which the destination is specified as geometric relations between objects. 
　　　the stanford system  al  finkel et. al.   is a complex algol-like language with many new data-structure and control primitives. the design includes a very high level language capability. both al and autopass  as well as lama  rely to a large extent on modeling the effect on the world of the assembly operations. 
　　　russell taylor in his dissertation  taylor  develops mechanisms to predict errors in location values from the al planning model and uses this information to generate al code automatically. he also introduces skeleton programs or strategies which describe and summarize the coding decisions that have to be made. the semantics for the strategies are fixed at system creation time. 
　　　the goal of all these systems is to expand a task-level description into an program for a specific manipulator. lama shares many of the ideas and the approaches of both al and autopass. lama differs mainly in that it allows user-defined assembly strategies to be manipulated by the system. the key idea is to allow the specification of strategies to be independent from the operations performed by the system. 
robotics-1: lozano-perez 　　　the edinburgh group  ambler et. al.  has focused on the problem of assembling an object whose parts must be visually located and pulled out of a heap. an early speculative paper from their group  popplestone  anticipated many of the ideas and approaches adopted in this research  even to the choice of a model aircraft engine as the example. 
　　　the draper lab  nevins et. al.  group has focused on direct applicability of a mechanical assembly system in the short range. this has led to emphasis on the type of capabilities that can be made available on a minicomputer. they have also carried out extensive theoretical analysis of the requirements of assemblies in terms of manipulator design and control as well as assembly strategies. 
　　　work being pursued at the stanford research institute on advanced automation  rosen et al  has taken a direction similar to that taken by the draper lab. sri has focused on mechanical assembly techniques with industrial potential in the short range. they also have significant commitments to the industrial applications of computer vision techniques. 
bibliography 
 ambler & popplestone  
a. p. ambler and r. j. popplestone  inferring the positions of bodies from specified spatial relationships  aisb summer conference  university of sussex  july 1. 
 ambler et. al.  
a. p. ambler  et. al.   a versatile system for computer controlled assembly   artificial intelligence  volume 1  number 1. 1. 
 fahlman  
s. e. fahlman  a planning system for robot construction 
tasks  mit artificial intelligence laboratory technical report 1  may 1. 
 finkel  et. al.  
r. finkel  r. taylor  r. bolles  r. paul and j. feldman  al  a 
programming system for automation  stanford artificial intelligence laboratory memo aim-1  november 1. 
 goldstein  
lp. goldstein  understanding simple picture programs  mit artificial intelligence laboratory technical report 1  september 1. 
 inoue  
k inoue  force feedback in precise assembly tasks  mit artificial intelligence laboratory memo 1  august 1. 
 lieberman & wesley  
l 1. lieberman and m. a. wesley  avtopass  a very 
	high 	level 	programming language for 	mechanical 
assembler system  ibm research report rc-1  august 1. 
 lozano-perez  
t. lozano-perez  the design of a mechanical assembly 
system  mit artificial intelligence laboratory technical report 1  december 1. 
 nevins et. al.  
j. l. nevins  et. al.  exploratory research in industrial modular assembly  charles stark draper laboratory  nsf report covering december 1 to august 1. 
 popplestone  
r. j. popplestone  now could freddy put things together  dept. of machine intelligence and perception  university of edinburgh  memo mip-r-1  may 1. 
 rosen  et. al.  
c. rosen  et. al.  exploratory research in advanced automation  stanford research institute  nsf report  january 1. 
 sacerdoti  
e. d. sacerdoti  a structure for plan and behavior  stanford research institute artificial intelligence center technical note 1  august 1. 
 silver  
1. silver  the little robot system  mit artificial intelligence laboratory memo 1  january 1. 
 sussman  
g. j. sussman  a computer model of skill acquisition  mit artificial intelligence laboratory technical report 1  august 1. 
 taylor  
r. k taylor  a synthesis of manipulator control programs 
from 	task-level 	specifications  	stanford 	artificial intelligence laboratory memo aim-1  july 1. 

fig. 1 - diagram of l i t t l e robot system  see  silver . 
　　　
rohot cs  1: lozano-pen z 
1 
 grasp obj:  piston-pin   
 place-in-vise obj:  piston-pin  such-that: 
 parallel  piston-pin   table    
 ungrasp obj:  piston-pin   
 grasp obj:  piston  
such-that:  facing+   piston  top  down   
 insert objl:  piston-pin  
obj1:  piston pin-hole  
such-that:  partly  fits-in objl obj1  1   
 ungrasp obj:  piston   
 grasp obj:  piston-rod  
such-that:  facing+   rod-bar  top  up   
 insert objl:  piston-pin  
obj1:  piston-rod shall-end-hole   
 ungrasp obj:  piston-rod   
 grasp obj:  piston   
 remove-froh-vise obj:  piston   
 push-into obj:  piston-pin  such-that: 
 and  fits-in  piston-pin  
 piston pin-hole   
 fits-in  piston-pin  
 piston-rod small-end     
 ungrasp obj:  piston   
figure 1. - assembly plan for the piston assembly 
 insert objl:  piston-pin  
obj1:  piston pin-hole  
such-that:  partly  fits-in objl obj1    
 insert objl:  piston-pin  
         obj1:  rod shall-end-hole    push-into objl:  piston-pin  
obj1:  and  piston pin-hole  
 piston-rod small-end    
figure 1. - initial assembly description for the piston assembly. 
robotfcs-1: lozano-perez 
　　　
 strategy 
peg-in-hole  peg hole  
 type  peg cyl   hole cyl-hole   
 reference  aligned&centered  reference x  
                                      hole front     pre-reqs  clearance   1   
 initial  and  aligned&centered  peg front  
 hole front   
　　　　　　　　　 in-front-of peg hole     drop :  drop-into peg hole  
such-that  partly  fits-in peg hole    
 hate :  hate peg hole  
 such-that  aligned- peg hole    insert :  push-into peg hole  
such-that  fits-in peg hole    
 strategy 
drop-into  peg hole  
 rotate :  change r by 1  
such-that  almost  aligned- peg hole  1   
 shift :  change y  
such-that  left-of  peg center   hole center    
 landing :  change x  
such-that  contact  peg front   hole front     
 strategy 
mate  peg hole  
 edge+ :  change z  
such-that  and  above  peg center   hole center   
 contact peg  hole side     
 save1 :  setq zl zpos   
 edge- :  change z  
such-that  and  below  peg center   hole center   
 contact peg  hole side     
 savez :  setq z1 zpos   
 center :  hove z  
such-that  between  peg center  zl z1   
 contact :  change y  
such-that  contact peg  hole side    
 hate :  change r with 
 and  zforce = 1.  
　　　　　　　　　　　　　　 yforce =  naintain-contact    such-that  aligned- peg hole    
 strategy 
push-into  peg hole  
 push :  change x with  and  yforce = 1.  
　　　　　　　　　　　　　　　 zforce = 1.    such-that  fits-in peg hole    
figure 1. - peg-in-hole strategy. the representation of inoue's peg-in-hole insertion strategy in lama. figure 1. - drop-into strategy and its expansion into lama. 
the text in italics indicates the parts generated by the feedback strategy phase 
robotics-1: lozano-perez 
1 

　　　

　　　

　　　
1 
　　　
1 
　　　
1 
　　　

　　　

　　　

　　　

　　　
1 
　　　
1 
　　　

　　　

　　　

　　　
