 	aside from this 	difference in emphasis  	kl-one 
and hprl contain a similar set of representation 
this 	paper 	describes 	an 	extension 	of 	frl 	tools. 	the initial 	representation components were 
 frame representation 	language  	which 	supports 	both developed at approximately the same time -
the 	encoding 	of 	reasoning 	knowledge 	within 	a 	1. 	currently 	kl-one 	is being extended to 
frame-based formalism. 	the extension 	is called 	allow for the expression of logical relations among 
hprl 	 heuristic programming and 	representation 	elements 	in 	a 	separate 	syntax 	 brachman 	and 
language . 	the 	declarative 	representation 	of 	levesque  	1 . 	hprl 	has 	gone 	the 	route 
reasoning knowledge in the same formalism that is 	described 	in 	this paper of integrating 	reasoning 
used to represent domain knowledge results in a 	and representation within a declarative semantics. 

powerful tool for the construction of expert systems. reasoning knowledge is easy to describe  examine and modify. rules can be reflexive  allowing the construction of powerful meta-rules. hprl runs on a vax 1  and on the hp-1. it has been used for various exploratory projects at hewlett-packard  including a program to diagnose faults during ic manufacturing  a program for analyzing dual-channel ecg information to diagnose arrhythmias  and a program for analyzing spectra from infrared and mass spectrometers. 
1. 	introduction 
the 	applications 	technology 	department 	of 	the 
computer research laboratory of hewlett-packard has been pursuing the development of  heuristic programming languages . as part of this effort  we have built an integrated language for the representation of knowledge and for reasoning about that knowledge. the language uses a single decarative formalism for representing domain and reasoning knowledge  including knowledge about the reasoning process itself  rule interpreters  agendas  decision trees  etc. . 
different representation languages emphasize different features. in hprl we have tried to build a language that is a good tool for building expert systems. to do so  we embodied such design criteria as a uniform declarative representation  a 
particular syntax for grouping related information in frames  and so on. other languages have emphasized different features. kl-one  brachman  1   for example  emphasizes the epistomological significance of the particular features which its representation tools provide the user. hprl  by contrast  emphasizes the tools themselves. hprl does not claim to embody the  right  theory of how to represent knowledge. instead  hprl is presented as a tool within which the user can construct his own model. 
there are at least two other languages with similar goals to hprl: rll  greiner and lenat  1  and age  nii and aiello  1 . rll is a frame-based representation-language language whose goal is to allow the user to modify the basic representation capabilities. hprl does not provide this degree of freedom. however  hprl allows reasoning knowledge to be expressed in the representation language  and provides methods for extending and modifying . the reasoning capabilities. age is a language whose goal is to provide tools that allow a user to emulate different problem solving architectures such as emycin  or hearsay-iii. in this respect it contains a well developed set of tools. however  hprl allows a user to design and build his own tools  as well as use existing ones. 
mrs  gensereth  greiner and smith  1  is a knowledge representation system designed to provide a single language for stating facts  while storing those facts in a variety of different representations. unlike mrs  hprl does not give the user control over the primitive datatypes and processes that underlie the language. thus a user stores information in frames  but does not know how frames are implemented. he does not have the option  as in mrs  of defining how classes of information should actually be implemented  i.e. in arrays  lists  etc. . 
hprl can be compared to older reasoning languages like emycin  vanmelle  1 . hprl is at least as powerful as these languages  since it contains the ability to do forward and backward chaining  as well as use meta-rules. in addition  hprl separates out the notion of reasoning contexts from the semantics. emycin makes contexts do double duty  as a separate representation component does not exist. as a result the ability to represent knowledge is compromised. 

1 	s. rosenberg 
1. 	the language 
hprl 	is 	an 	extension 	of 	frl 	 frame 
representation language  goldstein and roberts  1    which provides the basis for the representation tools in hprl. frl  in turn  is based on minsky's  1  notion of frames. in various incarnations it is still in use as a 
representation language  winston  1; engelman  1 . frl provides a hierarchically organized  frames-based semantics with inheritance  procedural attachment and slot descriptions. the frame representation in hprl  adopted from frl  allows the user to organize domain knowledge according to user-selected semantic and ontological relations. 
hprl extends frl by using frames to represent reasoning as well as domain knowledge. a core set of lisp functions provide functionality by executing rules according to the directions in a frame-based rule interpreter. this results in a 
uniform knowledge representation for data  rules  the rule interpreter and the interpretation process. the first three are represented directly as frames. the interpretation process  which involves the manipulation of agendas  the creation of portions of various decision trees  the recording of sufficient information to enable backtracking  etc. is done primarily  but not entirely  for reasons of efficiency  through frames. 
the use of a declarative representation means that reasoning knowledge is explicit  and can be examined and modified by other reasoning knowledge. this makes the reasoning knowledge more easily understood and built than if a procedural format were employed. reasoning knowledge can be augmented with additional facts. for instance  a rule can have  besides a condition and action  an arbitrary amount of additional information  such as caveats and suggested uses. 
rules are represented as frames in hprl. to be useful  a rule must be interpreted in an environment called a rule domain  which is itself a frame . this rule domain indicates how to interpret the rule frame. hprl provides an initial set of tools for the interpretation of rules. these include a capacity for forward chaining  backward chaining  meta-rules  and meta-interpretation. 
more powerful reasoning strategies can be constructed through the use of meta-rules. one typical way in which meta-rules are used in an expert system for the diagnosis of ic wafer flaws is the following: heuristic rules exist which examine what is known at any given time  and when possible generate hypotheses. a meta-rule exists which  whenever it notices that a hypothesis is applicable  changes the agenda to cause evaluation of that hypothesis first. such a meta-rule allows the user to do best-first search in cases where he has heuristics that can generate good hypotheses. this use of meta-rules allows local optimization of the reasoning whenever sufficient evidence is accumulated. 
meta-rules in hprl consist of a condition composed of a logical conjunction of  a  domain knowledge and  b  reasoning knowledge. the 
most important reasoning knowledge is that which reflects on the reasoning process itself  such as  i  when a goal gets placed on the agenda   ii  when a goal succeeds  and  iii  when a goal fails. other reasoning knowledge can be used  such as which rules are being considered  or are available  and whether a particular rule has succeeded. a small set of primitives allow meta-rules to alter the agenda. a meta-rule can examine the interpreter itself  and change its composition. for instance  given the failure of a goal representing a given strategy  a meta-rule might change the component of the rule interpreter that applies rules  going from one best-first search method to another. 
meta-reasoning can occur by having reasoning about the current rule domain go on in a separate rule domain. for instance  given evidence for a 
bad component of an ic wafer  it is possible to use the knowledge of the structural relations and manufacturing processes embodied in the domain knowledge to decide what goals to pursue next. such reasoning occurs in a separate meta-domain. the rule interpreter can be set to always choose its next goal based on the outcome in the meta-domain. in fact  this would be very wasteful  since only some cases benefit from this kind of reasoning. instead  we use meta-rules to notice when such situations exist. these meta-rules then directly invoke the meta-domain. 
to use rules which are represented declaratively  it is necessary to provide a procedural invocation. in hprl  this is done by creating a rule domain. a rule domain contains a set of rules  although rules can be part of more than one domain   and 
a set of instructions for interpreting the rules. the default case for the rule set is the entire rule database. the rule domain is itself represented as a frame. 
hprl provides two pre-defined domains backward chaining  and forward chaining. the user can construct others  either from scratch  or as sub-domains of these two. if a new domain is constructed which is subordinate to one of the existing domains  it will inherit the rule interpretation of its parent domain  if new instructions are not specified. the rules used would be those specified in this new domain  together with any rules specified in the parent domain. rule domains which are subordinate to the basic domains have the effect of partitioning the rule set. this means that rule domains can be used to partition problems into sub-problems and associated rules. this is useful when sub-problems can be identified and a restricted set of rules is known to be sufficient. within each domain  the rules will be highly relevant to the problem. this avoids excessive search through a large set of rules. it also facilitates the structuring of problems in terms of psychologically meaningful contexts. in an expert system under development at hewlett-packard which attempts to diagnose dual-channel ecg's  an initial 

categorization of the beat is used to partition the solution process into fifteen separate domains. in this case all domains had identical rule interpreters. the division into separate domains preserved a conceptual partitioning  and allowed small sets of rules to be applied in relevent cases. 
alternatively  rule domains can be used to represent distinctions in control. a user can customize a domain by examining the rule interpretation instructions  and then w r i t i n g or choosing a special function for the component which defines the appropriate feature of the interpretation process. modifying a rule interpreter is not a trivial task. however  it is made easier through the use of a declarative format for the rule interpretation features  inheritance of shared features  which localizes and minimizes the changes required  and the use of  canned  or predefined components and tools for modifying features. 
1. what 	currently 	exists 
hprl runs in psl  griss  benson and maguire  1  on the v a x and the hp-1  a 1-based machine. however  all new development work is occuring in psl on the 1  and the other versions are becoming obsolete. the psl version has been recoded for speed and efficiency. it takes advantage of the psl capability to write machine level code to optimize frequently performed operations. 
1. applications 
hprl has been developed in the context of multiple application domains. these include expert systems for fault diagnosis in ic m a n u f a c t u r i n g   for the analysis of ecg a r r h y t h m i a s   and for the analysis of spectra from infrared and mass spectrometers. hprl is also being used as part of a natural language processing system. none of these applications is  complete   although some of them demonstrate substantial ability. each exercises different aspects of hprl. 
we plan to continue to test and develop hprl in an environment of multiple applications. the applications d r i v e the development by showing us shortcomings in the c u r r e n t version. at the same time  multiple applications ensure that hprl is not optimized for just one type of task. multiple application domains are more likely to result in good representation and reasoning principles. 
1. conclusions 
although several expert systems are in various stages of development in hprl  it is still too early to tell if this approach will provide significant advantages in very difficult tasks. we do not yet know if this declarative approach to interpretation will prove to be inefficient or clumsy for implementing some desirable control architectures. in addition  there are quest.ons of size and efficiency when hprl is used to which we cannot 
	s. rosenberg 	1 
yet 	answer. 	however  	initial 	results 	with 	the c u r r e n t applications 	are 	encouraging 	enough 	that we plan to continue development of hprl. 
acknowledgments 
i would like to thank douglas lanam  who has been responsible for the c u r r e n t implementation  and the members of our application groups  reed letsinger  jan aikins  enrique ruspini  chris clare  and elaine heron . 
