 
tree is an optimized rete-like patternmatching algorithm. it has been designed for a production system whose restricted data formalism leads to a highly combinatorial join step like in soar. tree aims at reducing the 
join search spaces without using hashing techniques. its join strategy uses constraint propagation to define the solution space of a join  then a constraint relaxation to determine the index to be used in the join computation. constraint relaxation is heuristic driven and based on the relational paradigm. unlike re ie  the indexing scheme tree requires is not based on the membership of condition elements but on the sharing of references to symbols. on the basis of experimental evidence  tree's strategy showed better results than the standard rete one. the number of comparisons during join steps has been reduced by a factor ranging from 1 to nearly two orders of magnitude. 
1 	introduction 
match continues to be a problem for ai systems  especially for general purpose production systems like soar  laird et a/.  1 . in this kind of systems  a large flexibility in representations is provided through their decomposition into binary relations or into an object-attributevalue paradigm. consequently  basic data elements are mainly restricted to triples. as pointed out by tambe and rosenbloom   this kind of restricted formalism leads to a combinatorial match since a condition element  ce  of a rule can match nearly all the working memory elements  wmes   and condition parts of rules contain many ces. several works attempt to improve match algorithms for such systems. with or without parallelism  efficiency gains can be obtained through condition ordering  smith and genesereth  1; ishida  1; miranker  1   by restricting expressiveness  tambe et a/.  1   or using hashing techniques  gupta  1; gupta et a/.  1 . 
   *this work has been partly supported by the program for artificial intelligence  prc-ia  of the french ministry of research. 
1 	knowledge base technology 
　tree  bouaud  1  is a state-saving match algorithm that has been designed for k  a production system with a restricted data formalism: wmes are triples of symbols. tree aims at reducing the size of join search spaces without using hashing techniques. it differs from 
rete  forgy  1  in its indexing scheme which does not rest on  memory support 1  mcdermott et al.  1   t.e. based on the ces  but on the sharing of references to symbols. in this framework  we investigate a new join formulation. a constraint propagation and a heuristic relaxation based on the data paradigm is performed on the ces in order to select the indexes to be used in the join step computation. these indexes are expected to be smaller than those built up from the ces. 
the paper is organized as follows: section 1 mentions 
rete and join issues are revisited in the framework of the  k-search model   tambe et al.  1 . the features of our system and the t r e e algorithm are described in section 1. section 1 reports experimental data about 
tree's strategy in comparison with rete's. these results and related works are discussed in section 1. 
1 	background 
we assume the reader is familiar with production system issues and the r.ete algorithm. condition parts of rules are mostly represented by conjunctions of ces. using the database terminology  an n-ary ce conjunction is represented by: 
where is the binary join operator. tambe et al.  showed that most match algorithms were based on the same model  referenced as the k-search model: an exhaustive standard backtracking search is made to exhibit every instantiation of an n-ary join. a conjunction is processed from left to right according to the recurrent formula: 
is produced. the trace of this algorithm yields an instantiation tree where nodes at depth k are the partial instantiations corresponding to 
　in state-saving algorithms  all intermediate join results are memorized in what we shall call by analogy with the working memory  wm  the instantiation memory  im . then  each partial instantiation is an instantiation memory element  ime . problems of im update arise when a new wme is added or an old one is removed. 
　following the k-search framework  the problem of completing a given partial instantiation can be described as follows: 
let i be an i m e of which is to be joined to  computing requires to find all the w m e s that both match cek and satisfy some compatibility tests with i which are mainly equality tests between variable values. these w m e s constitute the solution space of this join. we shall call such a join aiming at completing a given i m e an i-join. 
　the problem of im update when a w m e is added is to find every i m e that the w m e completes. when a w m e is deleted  all imes including the w m e must be deleted. we shall address this problem later on. adding a new w m e can be described as follows: 
let w be an added w m e . for each ce* that matches w  the join must be computed to update this requires to find all the imes of such that w satisfies their compatibility test. these imes constitute the solution space of this join. similarly  such a join aiming at updating im from a w m e will bo called a w-join. 
　an index can be defined as a built-in relation: the set of its tuples can be directly enumerated. the indexing schemes of wm and im are very important as indexes constitute practical search spaces for the joins. a necessary condition for an index being used in an i- or w-join is to include the solution space. 
1 	t h e r e t e m a t c h e r 
like most matchers  r e t e ' s indexing scheme is based on the of a rule base. the set of wmes matching a given is stored in an a-memory  and the instantiations of a given are stored in a  memory. 
memories constitute the i m . r e t e ' s abstract procedures for i m e and w m e adds are given in figure 1 where c  p and r are respectively the number of  with an identical  node sharing   of ces matching w and of matches w. 

figure 1: rete's procedures for ime and wme adds. 
　　and memories can be accessed from each other as they are connected in the r e t e network that reflects the ce ordering. data elements  wmes  and partial instantiations  imes  are called tokens without distinction as they traverse identically the network in order to compute joins. considering a linear r e t e network  imes correspond approximately to left tokens  w m e s to right tokens  and i- and w-joins to left and right join activations. the .selection step  add-wme.l  deals with the maintenance of w m . a number of tests are applied to a w m e for assigning it to the right a-memories. unlike the join step  this step is not costly and can be optimized  ghallab  1 . 
　when memories are implemented as linear lists and as the basic binary join algorithm is the crossproduct  add-ime is basically computed in 
and add-wme in where the notation 
stands for the cardinality of x. as for w m e removal  rete uses the same procedures as for adds except that store operations in memories are substituted by remove operations. then  a w m e removal is at least as costly than an add. this last point has often been criticized for state-saving algorithms  miranker  1 . 
1 	i m p r o v i n g r e t e ' s joins: h - r e t e 
in practice and even with a good ce ordering  and  can be large thus limiting r e t e ' s efficiency. indexing techniques like hashing can be used to improve the join step by reducing the search spaces  gupta  1 . most of join tests being equality tests  memories can be hashed according to the variable to be tested. two global hash-tables are used for wm and i m . the hash code for a token   w m e or ime  is a function of the value of the variable to be tested and of the 
actual memory  location. as a result  hashvalues constitute memory indexes for joins. their sizes depend on the hash-table sizes and on the quality of the hash-function. though the aim of hashing is to access the solution space  it only provides a good seardi space reduction  by a tenfold factor as usually acknowledged. but  it is also known that the overhead of computing hash-values can eliminate the benefits of this reduction for small sets compared to a list implementation  aho et 
a/.  1 . 
1 	the tree algorithm 
1 	w o r k i n g f r a m e w o r k 
t r e e has been implemented for a general purpose production system  k  where w m e s are triples of symbols  e.g.  f r v . this structure is close to soar's and the equivalent notation would be:  triple identifier f attribute r value v . 
　indexation in k is not ce-based but organized on the criterion of sharing an identical reference to an identical symbol: w m e s are not aggregated according to their membership of ces  but to the fact that they contain the same symbol at the same location  identifier  attribute  or value . for instance  the w m e  f r v  is indexed 1 times: by f as first field  r as second  and v as third. in the following  we consider indexes as simple patterns. 
hence   f r v  is indexed by the patterns  f       r    and    v   where   are unnamed free variables. 
	bouaud 	1 


1 	knowledge base technology 

to each ce. if the type of v ce  is  f       r   or    v   where letters correspond to known places  symbols or bound variables   then it corresponds to an index that the matcher will use. in the other situations  v ce  is not an index and constraint relaxation applies. here is how r selects a subsuming index for each of the five non index pattern types according to our assumptions: 

         which describes the whole wm  is a special case. we suppose that such a ce will never remain unconstrained i 
the plain lines in figure 1 represent our constraint relaxation function between pattern types1 whereas dashed lines represent the subsumption relation and illustrate how constraint propagation can apply. 

figure 1: subsumption links and constraint relaxation. 
　now the question is: are the search spaces of i-joins and w-joins defined by rop applied to the ces smaller than those defined by the ces themselves  
1 	experimental measurements 
in order to evaluate tree's join strategy and compare it with a ce-based join  some experimental measurements were carried out with k. five rule-based programs developped in our laboratory were used as benchmarks: m a b   the  monkey and bananas  problem  brownston et a/.  1 ; alexia  a qualitative model for hypertension  bichindaritz and seroussi  1 ; chart  a syntactic chart parser; amd  a semantic analyzer for natural language  cavazza and zweigenbaum  1 ; and abacab  a blackboard controller  bachimont  1 . table 1 provides some of their external characteristics. 
1 	pattern cardinality measurements 
we first studied the cardinality in wm of every possible pattern at the end of each execution. the average cardinalities of each pattern type are reported in table 1. as these numbers correspond to the cardinalities of potential ces  search and solution spaces for i-joins  the ce 
1 pattern types with a * correspond to indexes. 


table 1: average cardinality of each pattern type. 

	bouaud 	1 


table 1: ces  constrained ces and tree's constrained/relaxed ces. 

the solution spaces of these i-joins  and a rop column  their search spaces with t r e e . 
   comparing column ce with ro'p illustrates how the initial search spaces defined by the ces are transformed by tree. w i t h the numbers of table 1 in mind  one should notice that for each program: 
1. most of the ces correspond to high cardinality patterns    r   being the most frequent and       sometimes used  amd and a b a c a b   ; 
1. most of the ces are constrained  especially   r   and every        and the constrained ces correspond to low cardinality patterns; 
1. as most of the constrained ces are non index patterns  r is often applied and  f    and    v  are mainly used  the cardinalities of which are not high. 
these points highlight that high gain factors g due to v and low loss factors / due to 1z are often expected  resulting in a combined reduction ratio due to rov greater than 1. however  this would be only valid for i-joins  but in practice the previous arguments are not sufficient to determine whether the loss due to r discards the benefits from v or not. yet  no similar information is available for w-joins. 
1 	p r o g r a m execution measurements 
finally  each program has been run with three different join strategies. the only difference between them lies in the indexes used to search w m e s  in i-joins  and to store imes  for w-joins : tree uses the indexes determined by the heuristic tzov function applied to the ces. rete uses the initial ces as indexes and then simulates a standard rete linear network. o p t i is a simulation; only v is applied. it is as if the solution space of every join was directly accessible: search spaces were exactly solution spaces. 
   the number of comparisons per join is used as the metric for comparing the strategies as it corresponds to the size of the search spaces explored during join attempts. the smaller this number  the more efficient the 
join strategy. moreover  this metric is adequate to compare indexing schemes  miranker et al.  1 . for a given program  identical initial wm and condition ordering were used. comparing the number of generated  tokens   imes  as in  nayak et a/.  1  is inappropriate here because the general algorithm is the same  used in the same conditions  and consequently produces identical imes: every join has the same solution space 
1 	knowledge base technology 
whatever the strategy. as every local join is optimal in o p t i   this  virtual  strategy is the best one and neither t r e e nor r e t e can outperform it: in the same conditions  it is not possible to do less comparisons. 
   statistics about the number of comparisons per i- and w-joins are recorded in table 1. only non empty join attempts  i.e. with at least one comparison  were considered. runtime performance is not significant here since the r e t e and o p t i strategies were emulated from t r e e ' s . although each result could be separately discussed  some points must be emphasized. 
1 - the average number of comparisons per join  avg.  is lower with t r e e than with r e t e whatever the program. thus  actual search spaces defined by rov  for both 
i- and w-joins  are smaller than those defined by the 
ces. the resulting reduction ratio ranges from 1 up to nearly two orders of magnitude and the same trend is also observed for standard deviation  sd  and maxima 
 max. .1 
1 - for every program  m a b excepted  t r e e ' s number of non empty join attempts is approximately the same as  or even smaller than r e t e ' s . this being combined with the previous result explains that the total number of comparisons per execution  sum  is always much smaller with t r e e than with r e t e by a factor ranging from 1  w-joins of a m d   to 1  w-joins of a b a c a b   . 1 - m a b   which is a simpler program  is an interesting case for it illustrates a situation where r e t e performs better than t r e e : r e t e ' s total number of comparisons for w-joins is lower and though t r e e ' s search spaces are smaller than r e t e ' s   more join attempts are performed  
just enough to cancel out the previous benefits. 1 - the number of comparisons of opti corresponds to the number of solutions of the joins. w i t h this number and those of rete and tree  a global gain factor g due to constraint propagation and a global loss factor l due to constraint relaxation can be estimated. table 1 gives such ratios. g is r e t e / o p t i and ranges from 1 
to 1 whereas l  which is t r e e / o p t i   never exceeds 1. as previously noted the global resulting reduction ratio r e t e / t r e e is between 1 and nearly two orders of magnitude. actually  this shows that in our most complex programs the effect of v outdoes the effect of r even during execution  then producing an actual search space reduction. m a b excepted  this reduction seems to increase with the number of wm modifications. as 
　　these properties are very interesting in the framework of parallel implementations  gupta  1 . 


table 1: statistics of the # of comparisons per non empty join attempt. 

table 1: reduction ratios of the total number of comparison due to the different join strategies. 

a global result  tree does less comparisons than r e t e for both i- and w-joins. 
1 	discussion and related works 
on the basis of experimental evidence  t r e e has shown a better performance than a standard r e t e on the overall number of comparisons performed during join attempts. this result has been obtained with five programs in different areas that all satisfied the assumption of the relational paradigm. to explain this result  we can observe that most of the ces mention explicit relations:   x r  y . these ces are also nearly always linked through variable sharing such that often  x or 
 y are bound. in this situation  tree choses  f    or    v  as indexes. for the join step  tree prefers using the contextual constraints of variables bindings to focus the searches instead of the definitional constraints of the ces that r e t e would use. under our assumption and with the previous results  it appears that the contextual constraints are stronger than the definitional ones. moreover  this tendancy is not expected to collapse as the wm size increases. in this situation  we expect new symbols to be created  new connections to be made  but no  or few  new relations to appeal*. as a result  |  /   | would increase whereas both | f   | and |   vr | would very likely remain constant. therefore  the global reduction ratio due to t r e e is also expected to increase making still more difference with rete. this is an hypothesis that would have to be studied and confirmed. 
　several other works attempt to improve the join step by the use of indexing techniques which are not  only  based on ces. the domain-based indexing of a new version of t r e a t  miranker et a/.  1  relies on the actual values of variables in a rule. 
　the role of hashing in h - r e t e is also to provide smaller join search spaces. it is usually acknowledged that hashing techniques provide a tenfold reduction. gupta et al.  exhibit on three o p s 1 programs search space reductions ranging from 1 to 1. this numbers indicate that h-rete and t r e e provide the same range of search space reduction though we did not test the h - r e t e strategy on our programs. nevertheless  the overhead due to hash-code computations can be important and can sometimes eliminate the benefits of hashing. compared to that  t r e e ' s indexing scheme maintenance cost is low even compared to r e t e ' s because no test is performed. 
　the predefined indexing scheme provides some additional advantages. random wm access is handled efficiently either by static pattern-matching or by program. since it is independent of the ces and therefore of any rule base  new rules can be dynamically compiled without any wm re-structuration. as a rete-like algorithm  tree also handles some features that have not been discussed such as  node sharing   explicit right join operator  and negated ce conjunction. 
　though t r e e and h - r e t e would provide quantitatively identical effects  we would like to point out some qualitative difference. the nature of an index is symbolic with t r e e versus numeric with h-rete and the index choice is made according to a heuristic strategy versus to some hashing algorithm. the index choice can be made at compile time with tree whereas it must be made at runtime with h - r e t e . lastly  changing the 
	bouaud 	1 
index choice can be made according to some qualitative reasonning versus some numerical algorithm. this allows us to consider the possibility of taking into account some properties of representations in order to improve production system performance. 
1 	conclusion 
in the framework of k  t r e e ' s heuristic join strategy has been shown as a challenger for r e t e . we are convinced that t r e e can be applied to other systems with a restricted wm formalism because ces are often weakly selective but often constrained. for instance  we believe t r e e would certainly perform efficiently for s o a r as it fulfills these conditions and satisfies the assumption of relational paradigm. though we did not test it  tree would probably not fit for ops1 programs as their ces are likely more discriminant than symbol sharing. 
   however  t r e e can still be optimized. it could be interesting to explore other constraint relaxation strategies that would take into account the ces and the representation framework. a join strategy exploiting a combination of t r e e ' s and rete's indexing schemes would certainly lead to better results than tree alone. this has to be tested in the future. 
acknowledgements 
we would like to thank b. bachimont  i. bichindaritz  
m. cavazza  and l. dore for gracefully providing the rule-based programs we used. 
