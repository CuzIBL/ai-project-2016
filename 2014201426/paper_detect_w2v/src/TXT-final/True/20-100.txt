 
　　realistic robot problems involve navigating the robot through time as well as space. the obstacles that a robot must avoid and the pathways on which it travels are subject to changes throughout time. these changes can occur in a predictable or unpredictable fashion. this paper presents an integrated route planning and spatial representation system that allows paths to be calculated in dynamic domains. the path planner finds the  best route  through a given n-dimensional space. the  best route  is defined as the path through spacetime with the best score as determined by a set of user-defined evaluation functions. the algorithm takes into account the following: capabilities of the robot executing generated plans  traversability of space  and interactions with both predictable and unpredictable dynamic objects. the route planning algorithm is highly parallel and can be run on an simd  single instruction multiple data  machine in 1 p  time  where p is the length of a path. in domains with unpredictable processes  this system may be run in an incremental fashion  allowing the robot to create real-time routes along the optimal path as described by its current information. this paper will discuss: spatial representation  an simd algorithm for route planning in a dynamic domain  and results from an implementation on a traditional computer architecture. 
1 - introduction: dynamic domain route planning 
     the ability to represent and plan movements through space is necessary for any autonomous mobile robot. mechanical error and uncertainty make it impractical to maneuver a robot through a series of complex tasks strictly by dead-reckoning. if dead-reckoning is of limited use  then some navigation capabilities must be brought into play; navigation depends on having some knowledge of the world outside of the robot. towards this end  a wide variety of spatial representation systems have been developed in recent years. 
　　a variety of techniques have been used to attack different aspects of the spatial representation problem. topological graphs  laumond1    chatila1  have been used for guiding route planning through a loosely connected set of convex polygons representing free-space areas in an indoor environment. regions mapped with traversable conduits  mcdermott1  have been used successfully for large scale navigation in uncertain environments. representation of the exteriors of obstacles as the edges of a highly connected graph was used by davis  allowing detailed knowledge of the environment and its accompanying uncertainty to be captured  davis1 . 
　　other representations have been used for capturing movement or navigational details necessary for a robot to plan its activities. configuration space  lozano-perez1  provides a computationally tractable approach to calculating the practical steps for moving a robot from one position to another. using voronoi diagrams and representations of free space  movements in three-dimensions have been calculated to maintain a robot the maximal possible distance from any obstacle  brooks1 . similar methods  when combined with an analysis of the robot's sensors  can calculate a path that is both relatively safe and easy to navigate  miller1 . 
　　despite the variety of the techniques mentioned above  all of the systems discussed share some basic limitations. none of the systems takes into account the quality of the surface upon which the robot travels  relying on the surface being either traversable or not. such a restricted view is continually contradicted by the way people move about. people stray off the sidewalk or jay-walk across a street whenever it is convenient and safe  hence a realistic robot should be able to behave similarly. a further limitation is that all the aforementioned systems are designed to operate under static conditions  where the only aspect of the world that changes is the position of the robot. this is an unrealistic and unacceptable limitation for almost all applications. 
　　in addition to being able to function in a dynamic world  a robot should be able to reason about dynamic processes and how they may affect it. for example  if a robot knows the local train schedule and needs to get to the other side of the train tracks  then it should use that information when planning to get to the other side. if the robot has information predicting that a 
　　long freight train will be coming just before it can reach the tracks  then given the choice between a short path that involves crossing the train tracks  and a slightly longer plan to go under the tracks  the robot should choose the latter plan. similarly  if the robot's task is to rob a train  then the ability to plot a path that will allow the robot to jump onto the moving train is necessary. 
　　unpredictable dynamic processes must also be taken into account during route planning. a cavalry robot that  fears  an attack by a tribe of indian robots would be better off planning to get to the fort across the open plain  rather than passing through the narrow passageway of ambush canyon. the primary reason for this is an attack in the canyon would more effectively block the robot from its destination  thereby mandating backtracking. 
　　the single property that most distinguishes this work from previous systems is that it models not only space  but time as well. rather than making a calculation about whether the robot can traverse a particular area independent of time  this system models the ability of the robot to traverse that area at different times. we have accounted for temporal as well as spatial changes in the environment. the message passing technique used allows time to be considered while allowing the system designer to model qualities of the domain  such as the cost of moving from one position to another and the ease of traversing a particular area of space. the remainder of this paper describes a representation and route planning system for use in unpredictable dynamic domains. 
1 - the algorithm 
　　this section will describe a model for temporal and spatial representation. it provides a framework for a message passing algorithm that finds the best path through a predictable n-
	slack and miller 	1 
　　
dimensional space. the concept of best-path is determined by a set of evaluation functions that are used by the message passing algorithm. 
1 - spatial representation 
　　the spatial representation discretizes space into uniformly shaped chunks  called nodes. the volume of the nodes is chosen to be of at least sufficient size to subsume the robot using the system. figure la shows how arbitrarily shaped spaces are constructed by the spatial concatenation of ndimensional nodes along common n-1 dimensional surfaces. the discretized representation of space is an approach that has been successfully used by a number of previous route planning systems most notably  thorpe1 . 
　　to capture the physics of the space each node in the space is connected to its neighbors  1n possible  diagonals not included  by unidirectional communications links. in addition  each node is connected to itself by a communication link capturing the relation a node has with itself over time. figure lb provides an example of how the communication links are set up for a simple two-dimensional space. each of the links has a cost associated with it that is a function of both time and space  e.g. traversability of space  as well as any parameters that relate directly to the robot's abilities  such as distance to the nearest power supply . the communications links serve as a means of performing a message passing algorithm that effectively searches over the space for the lowest cost path between two locations. the costs arc used to determine the effectiveness of paths through space-time. 

figure 1 
　　object representation is viewed as a simple mapping of an object's location into a subset of nodes constituting space. the subset is defined by those nodes that the object fully or partially occupies at a given time. to effectively use this information  i.e. not plan paths through objects  an infinite cost is assigned to all the links going into nodes occupied by an object at a given time. this makes two assumptions. first  that there is some concept of time associated with the operation of the algorithm  see section 1 . secondly  that the approximation made in having objects inactivate nodes that they partially occupy does not cause detrimental problems. if fact it docs  it causes the algorithm to miss paths that are viable. as it turns out  it does. consider the top of figure 1. in it is a situation that shows a robot trying to move from the top left corner to the bottom right corner. the problem is that there are two small objects in the space that invalidate all paths from the top left to the bottom right. to solve this problem the model uses overlapping nodes as depicted in the second part of the figure. five nodes are added that represent half moves between each of the previously existing nodes. this effectively resolves the spatial representation by a factor of two. this approach allows the model to find paths that will move the robot from the top left to the bottom right corner of the space. 

figure 1 
1 - an simd algorithm for route planning 
　　the representation of the spatial features and predictable objects thus far described provides a basis for an algorithm that can be directly implemented on an simd machine  such as that in  hillis1 . this is accomplished by assigning each node to a processor. each processor has message communication links to other processors that transcribe directly from the node communication links. a message represents the value of a possible transition from one node to another and the quality of the entire path leading up to that transition. to perform the task of reclaiming the generated paths from the processors  each processor must maintain a stack. the stack represents a storage place for logging the history of the activity at the processor. for now  the simplifying assumption will be made that each of the moves made by the robot being simulated will take one unit of time. for example  the time required for the robot to move from one node to an adjacent node  takes one unit of time regardless of the robots previous state. the removal of this assumption will be discussed later  see section 1 . 
　　using a synchronous  step-wise process of passing messages from processor to processor  all possible paths that the robot could take through time and space in attaining the desired  static destination location can be considered. the process has two phases and a terminating condition. 
　　the first phase sets up the initial message set. using the node in space that represents the current location of the robot  a set of messages is created  one message for each communication link associated with the node. each message has associated with it an energy value that reflects the cost of moving the robot to the space represented by the adjoining node. the particular value of a message's energy is determined by a user-defined evaluation function. the evaluation function considers such things as: the current state of the robot  the cost on the link that the message is to be sent over  the traversability of the node currently being occupied by the robot  etc. the set of messages is then sent to its respective destinations along the communications links of the node. 
　　the second phase is the operational phase. it is defined by having each node in space that is not occupied by an object during the current simulation time perform the following process in a synchronous manner: form the base message by setting it to the incoming message with the minimum energy. 
　　
1 	reasoning 
　　
all other messages can be thrown out because they represent more costly paths that attain the same location in space-time. in a manner similar to that described in the first phase  a new set 
　　
of messages is created. each message in the new set is assigned an energy that is a function of the base message and the link over which the message is intended to travel. the base message is then tagged with the time and a pointer indicating the node that created it. the base message is then added to the node's stack. finally  the node sends the newly created list of messages out along their respective communication link. this process is repeated  until the termination condition is met  each repetition representing a subsequent time unit. 
　　the terminating condition is defined as the state of the system when the energy associated with each of the messages currently being processed in the system is greater than the global bound. the global bound is the minimum energy for all the messages that have reached the destination node  similar to zorch decay in  chamiak1  . 
　　after the ending condition is met  the path through spacetime that has the lowest energy associated with it can be retrieved from the destination node. this is done by locating the message on the destination node's stack with the lowest energy value. once this is done  the path can be obtained by following the pointers back through space  other processors  and time  the stacks associated with the processors  until the robot's original location in space-time is encountered. the stack allows interprocessor communications to be kept to a minimum. 
1 - an example: operation in a predictable space 
　　the power of the spatial-temporal representation and the effectiveness of the algorithm are shown in figure 1 below. the figure shows how the model represents a revolving door by increasing the spatial resolution only in the areas that are affected by the door. the ability to increase the resolution of the model only in those locations that demand the increased detail allows the model to operate more efficiently. the figure also depicts the plan that the model generates in finding a path for the robot in moving through the door. notice that the time steps are shortened to half steps. this is a direct result of increasing the resolution of the space by a factor of two. that is  there are now two steps taken where there was only one taken before. 

nodes involved in the 
represents occupied nodes representation of the revolving door are resolved by a factor of two. 

1 - additional features 
　　some of the system's most powerful features have been omitted thus far for clarity. among these features are: the ability to describe the destination as a function of both space and time  the ability to consider the openness of a node with respect to its spatial location  and the ability to accurately consider the real-time movement capabilities of the robot using the generated plans. 
　　the ability to describe the destination as a function of both time and space allows the system to solve problems involving alternative planning  e.g. if you can't get to the post office by five  go to the drug store for the stamps  and problems involving coordinating actions with dynamic objects  e.g. jumping on a moving train . this ability is incorporated into the system  by modifying the termination condition of the algorithm to consider a time ordered set of possible destination nodes. 
　　the ability to consider the openness of a node as a spatial relation between it and the nodes surrounding it can be used to generate paths that avoid narrow passages  if possible. generated plans avoid moving the robot through paths that would become blocked if an unpredictable object were to be encountered during the execution of the plan. 
　　the following gives an example of how an openness function might be defined iteratively for a two-dimensional space. first  assign each node in space a value of one if it is not occupied and a value of zero if it is occupied. second  have each node send its value along all of its communication links. third  each node creates a temporary value by summing the values of all incoming information and then integer-dividing them by 1 the first iteration and 1 1 ... in each subsequent iteration. lastly  if the temporary value is greater than zero  a new node value is set by multiplying the original node value by the temporary value. using this scheme  the openness value associated with the nodes will eventually converge to a stable node value pattern. the pattern will be such that the nodes that are in the biggest  most spacious areas will have the highest values  and the nodes in corners or alcoves will have the lowest values. the addition of openness to nodes allows evaluation functions to be written that considers the trade-offs between short path length and increased chance of backtracking due to the chosen route becoming blocked by an unpredictable object. 
　　the ability to effectively represent the time required by a robot to make simulated moves allows plans to be generated that take full advantage of the robot's abilities. for example  moving from rest to another node should take longer than moving from one node to another when the robot is already moving in the desired direction. this is significantly different from the scheme used up to this point  where all moves were considered to take one unit of time. the ability to consider the capabilities of the robot in the generated paths has been incorporated into the model by setting the model to operate in a 
　　more asynchronous manner. asynchrony is accomplished by associating a real-time with each message. the time value of created messages is set by adding to the time in the incoming message the amount of time that is required for the robot to make the move represented by each of the new messages. the ability to effectively predict the performance of the robot is bounded by the precision with which the real-time actions of the robot moving through space-time can be modeled 
1 - dynamic vs. unpredictable 
　　thus far  only the generation of plans that involve predictable objects has been considered to move autonomous robots in the real world  a route planning system must be able to handle the unpredictability that the red world has to offer as in the case of a robot that must walk across a busy street. the process of incremental route planning has been identified to handle this problem. 
	slack and miller 	1 
　　incremental route planning can be viewed as the repeated use of a route planner that executes in a predictable dynamic environment. after each step  the state of the world is tested and updated with any new information  for identification of any unpredictable objects. incremental route planning is effectively handled by this system because it is structured to operate most efficiently in the incremental form. 
unpredictability is handled by the system's ability to rapidly calculate the next best step after every primitive move the robot makes. 
　　by making a simple modification  an incremental version of the algorithm has been constructed from the framework of the previously defined algorithm for predictable domains. the stack is eliminated from each of the processors by making an addition to the messages being passed around the system. the modification involves the addition of an initial direction header. this change is made because all that is needed is the next best move and not the entire path. the headers  of the messages created in phase one of the algorithm  are set to a value representing the link along which that particular message is to be sent. the header  of the messages created during phase two  is copied from the header of the incoming message. to identify the next best move  the terminating condition is modified to keep track of the message representing the current global message energy bound. when the system halts  the header of the global message energy bound indicates the direction of the next best move. this represents a significant simplification of the system  as it eliminates concerns involving the potentially unbounded growth of the node stacks. 
1 - implementation 
　　the algorithm  when fully implemented on an simd machine  operates in o p  time  where p is the length of the longest path through space-time that is bounded by the global message energy bound. 
a version of the algorithm  written in nisp 
 mcdermott1   is currently up and running on a vax 1. it has been transported onto an explorer and is running there as well. it functions on the examples given plus others involving unpredictable dynamic environments. the implementation includes software for simulating the simd architecture. 
1 - further research 
　　there are several possible extensions to this model that would increase its representational power. among the most useful are: 
-achieving maximal efficiency over a set of destinations: this is similar to the traveling salesman problem. 
-modeling unpredictable processes: the power of an incremental route planner can be increased for a particular domain with some model of the typical behavior of the unpredictable objects in that domain. for example  the route planner could give more useful advice to a robot crossing a street if the system had a model of the speed  maneuverability  and direction of travel for the autos traveling the road  as in  sanbom1  . 
-representation and coordination of multiple robots moving through space-time: for example  getting huey  duey and luey to meet in the garden on the east end of the space ship at 1pm. 
-implementing the algorithm to operate in a hierarchial fashion similar to that found in  moravec1 . this will allow time efficient heuristics to be defined that will drastically prune the size of the search space. 
　　this list represents some of the extensions to our model that are currently under investigation. extensions into more abstract domains  such as general problem solving using state transition graphs  are also under consideration. 
1 	reasoning 
1 - summary and conclusions 
　　planning robot movement in dynamic environments demands that the dynamic aspects of the environment be modeled in at least as much detail as the movements of the robot. we have created a representation system that allows dynamic aspects of the environment and performance aspects of the robot to be easily modeled. it also integrates this model with a route-planning algorithm. this system has been extended into an incremental route planner which can be used for real-time tactical planning in unpredictable domains. this system has been implemented in an simd simulator running on a vax and an ti explorer. 
this research was supported in part by a grant from the 
naval surface weapons center  under contract number n1-g-a1. 
1 - bibliography 
 brooks1  brooks  r. a.  solving the find path problem by a good representation of free space  in proceedings of aaai 1  aaai  pp. 1  1. 
 charniak1  charniak  e.  a neat theory of marker passing  in proceedings of aaai 1  aaai  pp. 1  1. 
 chatila1  chatila  r.  position referencing and consistent world modeling for mobile robots  in proceedings of the international conference on robotics and automation  ieee  pp. 1  1. 
 davis1  davis  e.  representing and acquiring geographic knowledge. technical report 1  yale university computer science department  1. 
 hillis1  hillis  w. d.  the connection machine  mit press  1. 
 laumond1  laumond  j. p.  model structuring and concept recognition: two aspects of learning for a mobile robot  in proceedings of the 1th ijcai  ucai  pp. 1  1. 
 lozano-perez1  lozano-perez  t.  spatial planning: a configuration space approach  ieee transactions on computing  c'1  pp. 1  1. 
 mcdermott1  mcdermott  d. v  davis  e.  planning routes through uncertain territory  artificial intelligence  v1  pp. 1 1. 
 mcdermott1  mcdermott  d. v.  the nisp manual  technical report 1  yale university computer science department  1. 
 miiler1  miller  d. p.  a spatial representation system for mobile robots  in proceedings of the international conference on robotics and automation  ieee  pp. 1  1. 
 moravec1  moravec  h. p.  certainty grids for mobile robots  in proceedings of the workshop on space tele-robotics  jpl pasadena california 1. 
 sanborn1  sanborn  j c  hendler j. a.  towards dynamic planning  technical report 1  maryland university computer science department  1. 
 thorpe1  thorpe  c. e.  path relaxation: path planning for a mobile robot  in proceedings of aaai 1  aaai  pp. 1  1. 
