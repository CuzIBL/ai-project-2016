 
　　our goal is to establish the conceptual foundations for using the computational power that is or will be available on computer systems. much of the available computing power is wasted  however  if users have difficulty understanding and using the full potential of these systems. too much attention in the past has been given to the technology of computer systems and not enough to the effects of that technology  which has produced inadequate solutions to real-world problems  imposed unnecessary constraints on users  and failed to respond to changing needs. 
　　we have designed and implemented a critic for lisp as a prototype of an intelligent support system. critics enhance incremental learning of a system and support learning strategies such as learning on demand. our lisp-critic has knowledge about how to improve lisp programs locally  following a style as defined by its rules. the advice given is based on the hypothesized knowledge of the user contained in the system's model of the user. additional tools  e.g.  a knowledge browser and visualization support  are available to explain and illustrate the advice. 
　　the lisp-critic has been used by intermediate and expert lisp programmers and has proven to be a valuable tool for incremental learning of lisp and for improving programs. 
1. introduction 
　　our goal is to establish the conceptual foundations for using the computational power that is or will be available on computer systems. we believe that artificial intelligence methodologies and technologies provide the unique opportunity to achieve the goal of improving productivity by addressing  rather than ignoring  human needs and potential. we are building systems which augment human intelligence. winograd and flores  winograd  flores 1  argue that the development of tools for conversation where the computer serves as a structured dynamic medium for conversation in systematic domains  is a more realistic and more relevant goal to successfully exploit information and communication technologies than the most widely perceived goal of al  to understand and to build autonomous  intelligent  thinking machines  stefik 1 . in addition to the fact  that the track record of the latter approach is not too good  e.g.  high quality fully automatic translation  automatic programming   we believe  that partial autonomous systems pose greater design challenges than fully automated do  evidence for this view comes from many sources  e.g.  in the development of cockpits 
'this paper describes work done in the department of computer science and the institute of cognitive science at the university of colorada  boulder. it was supported in part by grant no. n1-k-1 from the 
office of naval research  the german ministry for research and technology  and triumph adler corporation  nuernberg. for future aircrafts the pilots assistant is a more challenging goal than the electronic copilot  chambers  nagel 1  . 
　　in this paper we argue that to successfully learn and use complex computer system  incremental learning  learning on demand  user and task specific advice has to be supported. intelligent support systems are one approach to provide these support structures. we describe in detail one of these systems  the lisp-critic  which enhances incremental learning and supports learning on demand. 
1. incremental learning 
1 facts of life 
　　the functionality of modern computer systems is constantly expanding  see figure 1 . this increase in functionality is of little use if we do not find ways for people to take advantage of it. online help systems usually do not do much more than present the same information found in the printed documentation  although the better ones provide additional assistance like keyword-based access and bookmarks that leave a trace of an information-seeking session. 
　　the existence of documentation and other support information does not guarantee that people know how to use it  or that they read it or understand it. it is a fact of life that people quickly settle on plateaus of suboptimal behavior. there are two reasons for this. one is that people do not want to learn. they use computers because they want to get something accomplished. the positive side of this behavior is that people focus on their work  the negative side is that they are not motivated to spend time learning about the system just to find out what they can do. this phenomena is called the  production paradox  by carroll and rosson  carroll  rosson 1 . people have a tendency to stick with what they know best. when situations occur that could be more effectively handled by new procedures  they are willing to deal with them in suboptimal ways that they personally consider to be safe. people intentionally do things suboptimally; they have a subjective metric for costeffectiveness. 
　　another reason for suboptimal behavior is that learning is often restricted. even if people want to learn  they may not be able to. for example  if the context for new information is missing  people often do not understand the relevance and applicability of new commands. we verified this effect in small-scale experiments with the editor command  query-replace  in emacs. this command steps through all occurrences of a string of text  and the user has to 
confirm or deny the replacement for each occurrence. it happens quite frequently that while users are in  query-replace mode  they detect an error in the immediate environment that they would like to correct. to do so  either they have to make a note to go back to the 
	fischer 	1 

incorrect text after they complete the whole replacement cycle  or they have to leave the cycle and set it up again to take care of the rest of the file. an advanced feature provided by emacs is the  recursive edit   which allows the user to do some modifications and then restart the  query-replace  cycle. our experiments show that people reading through a description of this command do not understand what recursive edit does  what it is good for and in which situations it can be used. only after using the basic command for some time do people start to appreciate an advanced feature of this kind. it is within the scope of our active help system  fischer  lemke  schwab 1  to give a hint about the usefulness of the recursive edit at a time when the command can be used successfully. 
number of computational objects in systems 
emacs: 
  1 function keys and 1 commands 
unix: 
  more than 1 commands and a large number of embedded systems 
lisp-systems: 
  franz-lisp: 1 functions 
  wlisp: 1 lisp functions and 1 objtalk classes 
  symbolics lisp machines. 1 functions and 
1 flavors 
amount of written documentation 
symbolics lisp machines: 
  1 books with 1 pages   does not include any application programs 
sun workstations: 
  1 books with 1 pages 
  additional beginner's guides: 1 books totaling 
1 pages 
figure 1: quantitative analysis of some systems 
　　our preliminary empirical findings indicate that the following problems prevent many users from successfully exploiting the potential of high-functionality systems: 
1. users do not know about the existence of tools  and therefore they are not able to ask for them ; 
1. users do not know how to access tools ; 
1. users do not know when to use these tools; 
1. users do not understand the results that tools produce for them; 
1. users cannot combine  adapt  and modify a tool to their specific needs. 
　　a consequence of these problems is that many systems are underused. we are strongly convinced that what is needed is not 
1 	cognitive modeling 
quantitatively more information but qualitatively new ways to structure and present information. 
1 modes of learning 
　　in our research we want to determine the balance between supporting an exploratory learning style of learning by doing which is the basic philosophy behind the interest worlds in logo environments  papert 1   and a guided learning experience through coaching assistance  which is the primary strategy supported by systems in intelligent computer-assisted instruction  sleeman  brown 1 . there are different modes of learning that can complement each other depending on whether the user's goal is the completion of an action or the acquisition of new knowledge  and depending on whether users are inexperienced with a system or familiar with it and able to help themselves. 
　　ungulded  active exploration. the advantage of this mode of learning is that users can fully control what they would like to do and how they would like to do it. it is important that an environment of 
this kind supports safe experimentation  e.g.  undo mechanisms are crucial  and that it is intuitively approachable. examples of systems that support unguided learning are: looo-based learning environments  papert 1   spreadsheets and construction kits  fischer  lemke 1 . 
　　tutoring. tutoring is an adequate mode of learning for getting started learning a new system. one can predesign a sequence of microworlds  see section 1  and lead a user through them  anderson et al. 1; anderson  reiser 1 . but tutoring is of little help in supporting learning on demand when intermediate users are involved in their  own doing . tutoring is not task-driven because the total set of tasks cannot be anticipated. instead  the system controls the dialogue  and the user has little control over what to do next. 
　　asking for help. in passive help systems  users actively have to seek for help. in complex systems  even experienced users know only a minority of the large set of commands available  fischer 1 ; their expertise lies not in having learned enough to solve any problem immediately  but in having become skilled in gathering information and supplementing what they know by active use of external sources of information. but finding information in these systems is tar from easy. help systems have become large systems in their own right  and finding needed information is a problem because there is usually a huge gap between the initial mental form of the query and the corresponding expression required by the system. documentation and help are structured at the level of the system modules  commands  and not at the task level; to accomplish a specific task may require reading through a substantial amount of information 
　　answers first  then questions. to ask a question  one must know how to ask it  and one cannot ask questions about knowledge whose existence is unknown. owen  owen 1  has implemented a program called dyk   did you know    which volunteers information and supports the acquisition of information by chance. it supports an unstructured learning process  but there is a fair chance that users occasionally pick up some relevant piece of knowledge. 
　　learning on demand. active help systems and critics support learning on demand users are often unwilling to learn more about a 
system or a tool than is necessary for the immediate solution of their current problem. to be able to successfully cope with new problems as they arise  users require a consultant that generates advice tailored to their specific need. this approach provides information only when it becomes relevant. it eliminates the burden 

of learning many things in neutral settings when the user does not know whether the information will ever be used and when it is difficult for the learner to imagine an application  see the  queryreplace  example in section 1 . active help systems and critics overcome the problem of asking a question. they allow users to do whatever they want and interrupt only when users' plans  ways of achieving something or products are considered significantly inferior to what the program would have recommended. they offer new information only if it is needed. a potential drawback might be that they offer help only in related areas; this can be overcome by accessing knowledge structures that allow the system to present information in related areas in a goal-directed  dyk  fashion  see figure 1 . 
　　human assistance. human assistance  if available on a personal level  is in almost all cases the most useful source of advice and help. the mode of learning can best be characterized as a cooperative problem-solving process. learners and advice seeking persons can ask a question in an infinite variety of ways  they can articulate their problem in the  situation model  rather than being required to express their needs in a  system model   dijk  kintsch 1 . many systems to support information and advice seeking  with some notable exceptions like rabbit  tou et al. 1  and argon  patel-schneider  brachman  levesque 1   have assumed  that persons know what they are looking for. studying human advisory dialogues  webber  finin 1  has shown  that this assumption does not hold: the most valuable assistance is often in formulating the question. 
1 increasingly complex microworlds: an 
architecture to support incremental learning 
　　over the last several years we have developed a general paradigm for instruction that is best described as a sequence of 
 increasingly complex microworlds  icm    fischer 1; burton  brown  fischer 1 . 
　　the icm paradigm was developed to capture instructional processes for complex skills that are difficult to learn because the starting state and goal state are too far apart. the student is exposed to a sequence of increasingly complex microworlds  which provide stepping stones and intermediate levels of expertise so that within each level the student can see a challenging but attainable goal. increasingly complex microworlds can also be used to provide protective shields for novices and prevent them from being dumped into unfamiliar areas of the system. the paradigm requires a precise representation of the knowledge that is learned in a specific microworld and of the method for choosing the next microworld. as a model  it captures the essence of the incremental learning processes. 
　　the lisp critic provides a rich environment for pursuing interesting questions within the icm paradigm: 
1. what is the right grain size for microworlds  
1. how do we generate microworlds  by constructing tools to eliminate the necessity of learning subskills  by providing defaults  by constraining the design space thereby decreasing the objective computability of the system but increasing the subjective computability  fischer  lemke 1    
1. what is the right topology of a sequence of microworlds  for people involved in their own work do we need multiple start states  for people having different goals  do we need multiple goal states  
1. what initiates the transition of one microworld to another one  does the user initiate it or the system  why should a transition take place  
1. how do we identify a user with a microworld  by taking into account which rules of the lisp-critic  see section 1  fire and how often the user code can be matched against the right-hand side of rules  indicating the actual and suggested use of certain concepts   by doing a statistical analysis of user's programs  by self-evaluation of the user  by instantiating the user's knowledge structures of lisp and comparing them with stored representations of expert knowledge  fischer 1   
　　by creating and studying the lisp-critic that is codifying an idea as a system  we were able to raise issues such as these  which are difficult to articulate concretely in theoretical terms. 
1 goals of incremental learning 
　　the major goals we can pursue by supporting incremental learning are: 
  the elimination of suboptimal behavior  thereby increasing efficiency; 
  the enlargement of possibilities  thereby increasing functionality; 
  the support of learning on demand by presenting new information when it is relevant; 
  the structuring of complex systems so that they have no threshold and no ceiling. it should be easy to get 
started; that is  microworlds should provide entry points: but these systems should also offer a rich functionality for experienced users; 
  the use of models of the user to make systems more responsive to the needs of individual users and the tailoring of explanations to the user's conceptualization of the task. 
1. intelligent support systems 
　　in our research work we have used the computational power of modern computer systems to construct a variety of intelligent support systems  see figure 1 . these support systems are called intelligent  because they have knowledge about the task  knowledge about the user and they support communication capabilities which allow the user to interact with them in a more  natural  way. they are used to enhance incremental learning processes  to provide help and documentation  to support the understanding of existing programs and advice given  to assist in 

figure 1: an architecture for intelligent support systems 
1 
the construction of new systems. they are described in the following documents: 
la documentation system that assists in the incremental development and understanding of a program  fischer  schneider 1 ; 
1. a passive and an active help system for an emacs-like editor  fischer  lemke  schwab 1 ; 
1. components of a  software oscilloscope  that serve as visualization tools  boecker  fischer  nieper 1 ; 
1. design kits which support and guide the designer in the construction of complex artifacts  fischer  lemke 
1 ; 
1. a critic lor lisp that is described in this paper. 
1. description of the lisp-critic 
1 a critiquing model 
　　one model frequently used in human-computer systems  e.g.  mycin  buchanan  shortliffe 1   is the consultation model. from an engineering point of view  it has the advantage of being clear and simple: the program controls the dialogue  much as a human consultant or a tutoring system  anderson et al. 1; anderson  reiser 1  does  by asking for specific items of data about the problem at hand. the disadvantages are that it does not support users in their own doing  it prevents the user from volunteering relevant information and it sets up the program as an  expert   leaving the user in the undesirable position of asking a machine for help. we are in the process of developing a critiquing model which allows users to pursue their own goals and the program interrupts only if the behavior of the user is judged to be significantly inferior to what the program would have done. 
　　the critiquing model will be used to support cooperative problem solving. when a novice and an expert communicate much more goes on than just the request for factual information. novices may not be able to articulate their questions without the help of the expert  the advice given by the expert may not be understood and/or 
the advisee requests an explanation for it; persons may hypothesize that their communication partners misunderstood them or the experts may give advice which they were not explicitly asked for  the last aspect we have also explored in our work on active help systems  fischer  lemke  schwab 1  . 
1 the functionality of the lisp-critic 
the usp-critic suggests how to improve lisp code. 
improvements can make the code either more cognitively efficient  e.g.  more readable and concise  or more machine efficient  e.g.  smaller and faster . users can choose the kind of suggestions they are interested in. 

figure 1: the lisp-critic in operation 
　　the  lispcritic  pane provides the basic interface through which the user can initiate an action by clicking a button. the  functioncode  pane displays the text of the program that the lisp-critic works on. the other three windows show some of the transformations carried out on the program. the m   in the title line of the windows is the button for starting the explanation system  which allows the user to browse through additional knowledge structures. 
1 	cognitive modeling 　　the system is used by two user groups  who have different purposes. one group consists of intermediate users who want to 

learn how to produce better lisp code. we have tested the usefulness of the lisp-critic for this purpose by gathering statistical data on the programs written by students in an introductory lisp course. the other group consists of experienced users who want to have their code  straightened out . instead of doing that by hand  which in principle  these users can do   they use the lisp-critic to carefully reconsider the code they have written. the system has proven especially useful with code that is under development and is continuously changed and modified. 
　　figure 1 shows the system in operation. the lisp-critic is able to criticize a user's code in the following ways: 
  replace compound calls of lisp functions by simple calls to more powerful functions  e.g.   not  evenp a   may be replaced by  oddp a  ; 
  suggest the use of macros  e.g.   setq a  cons b 
a   may be replaced by  push b a  ; 
  find and eliminate 'dead' code  as in  cond  ...   t . . .   dead code   ; 
  find alternative forms of conditional or arithmetic expressions that are simpler or faster  see figure 1 ; 
  replace garbage-generating expressions by non-copying expressions  e.g.   append  explode word  chars  may be replaced by  nconc 
 explode word  chars ; see figure 1 ; 
  specialize functions  e.g.  replace equal by eq; use integer instead of floating point arithmetic wherever possible ; 
  evaluation or partial evaluation of expressions  e.g.   sum a 1 b 1  may be simplified to  sum a b 1  . 
1 the architecture of the lisp-critic 
　　the knowledge of the subject domain  concepts  goals  functions  rules and examples  is represented in a network of interrelated nodes. the user can selectively browse through the knowledge. the lisp-critic operates by applying a large set of transformation rules that describe how to improve code. figure 1 shows two of the rules in the system. the user's code is matched against these rules  and the transformations suggested by the rules are given to the user. the modified code is written to a new file  and the user can inspect the modifications and accept or deny them. on demand  the system explains and justifies its suggestions. 
　　the structure of the overall system is given in figure 1. the user's code is simplified and analyzed according to the transformation rules and two protocol files   people.pr  and  machine.pr   are produced. they contain information  see figure 1  that is used together with conceptual knowledge structures about lisp to generate explanations  see figure 1 . the user model  for a more detailed discussion see  fischer 1   obtains information from the rules that have fired  from the statistical analyzer and from the knowledge structures that have been visited. in return  it determines which rules should fire and what kind of explanations should be generated. the statistical analyzer provides important information to the user model  for example  which subset 
of built-in functions the user is using  whether the user is using macros  functional arguments  nonstandard flow of control  etc.. 

transform a  cond  into an  and  
 rule cond-to-and-1 
 cond   condition taction   
 and  condition  action  safe  machine people   the name of the rule the original code 
the replacement rule category 

example  see figures abbcritic and expl  : 
 cond  value  eq  cadr value  1    - -   and value  eq  cadr value  1   
replace a copying function with a destructive function 
 rule append/.1-new.cons.cells-to-nconc/.1... 
  foo: append appendl} 
 restrict  expr 
    cons-cell-generating-expr expr    b  
  compute-it: 
 cdr  assq  get-binding foo  
'  append . nconc  
　　　　　　　　 appendl . nconcl       expr  b  safe  machine   the name of the rule 
the condition 
 rule can only be applied if cons cells 
are generated by   expr   
the replacement rule category example  see figure kaestle  : 
 append  explode word  char     nconc  explode word  char  
figure 1: examples of rules in the lisp-critic 
1 


figure 1: the architecture of the lisp-critic 
1 support for understanding the criticism 
　　our experience with the lisp-critic in our lisp courses has shown that the criticism it gives is often not understood. therefore we use additional system components to illustrate and explain the lisp-critic's advice  kaestle  a visualization tool that is part of our software oscilloscope  boecker  fischer  nieper 1   allows us to illustrate the functioning and validity of certain rules. in figure 1 we use kaestle to show why the transformation  append  explode word  chars     nconc  explode word  chars  is a safe one  because explode is a cons-generating function; see the rule in figure 1   whereas the transformation 
 append chars  explode word   	   nconc chars 
 explode word   is an unsafe one  because the destructive change of the value of the first argument by nconc may cause undesirable side-effects . 
　　in addition to the visualization support  we have developed an explanation component that operates as a user-directed browser in the semantic net of lisp knowledge. this component contains: textual explanations that justify rules  related functions  concepts  goals  rules and examples  see figure 1 . currently textual explanations are extracts from a lisp textbook  wilensky 1  . the information structures in the explanation component should help the student to understand the rationale for the advice given by the lisp-critic  and they should also serve as a starting point for a goaldirected  did you know  dyk   mode of learning  see section 1 . 
1 tutorial strategies 
　　with these features we can pursue different tutorial strategies in the framework provided by the lisp-critic. the information accumulated in the system's model of the user is used to decide when a user should be criticized  what advice should be given and how the advice should be given  e.g.  as a textual explanation from the manual  a kaestle visualization  or as a convincing example . these issues are not independent  and have to be perceived from the user's state of knowledge  not the designer's. we must guess and determine the knowledge state of the user in order to make critics such as the lisp critic respond at the user's level of understanding. 
　　crucial issues in designing the lisp critic were the distribution of initiative between the user and the system and the amount of control over the system. after the lisp-critic has provided an initial starting point for a learning process  we feel that the user can and should be able to proceed in a self-directed mode. a specific user may personally dislike some of the rules and should be able to turn them off. if the system notices that a user never accepts the changes suggested by a rule  it could be turned off automatically  fischer  lemke  schwab 1 . 


	 setq result 	 setq result 
	 append chars  explode word    	=  	 nconc chars  explode word    

figure 1: illustration of the validity of a rule using kaestle 
　　in the environment shown in the individual screen images  the variable word is bound to the value this and the variable chars is bound to the list  i s . 
1 	cognitive modeling 


figure 1: the user browses through the knowledge base 
1. experiences with and evaluation of the lispcritic 
　　the lisp-critic has been in operation for two years and has been useful for many groups of lisp users. our informal evaluations indicate that the lisp-critic had an impact on the process of learning lisp. one study showed that as students gained experience in lisp programming  the number of rules fired decreased over time. students learn new functions  new concepts and ways of structuring their knowledge about lisp. instructors can use the output of the lisp-critic as a basis for personal advice to their students. experts also used the lisp-critic to have their code  straightened our. the rules in the knowledge base of the lisp-critic generated an ongoing discussion about the merits of different styles of usp programming. surprises from our empirical work were  that our statistical analysis showed that even experts only use a relatively small fraction of the total number of primitive lisp functions  and that the lisp-critic suggested many improvements for the implementation of generally used systems  e.g.  for the lisp implementation of ops1 and for the system code of franz-lisp . 
to discover suboptimal behavior requires a metric. for our 
activist system  fischer  lemke  schwab 1   we chose a very simple metric: the number of keystrokes needed to perform a specific task. in the lisp-critic  a set of over two hundred rules defines a metric  currently for the franz-lisp dialect . these rules state how a lisp program should be written. like the unix writers workbench tools  cherry 1   they define a style or standard that the authors believe leads to greater clarity and understandably in a program or piece of code. it goes without saying that we do not expect universal agreement on issues of style  we have applied the unix writers workbench tools  e.g.  diction  to the gettysburg address and the system suggested some modifications . 
　　the lisp-critic in its current form is not restricted to a specific class of lisp functions or domain of application. it accepts any lisp code. its generality is the reason for some obvious shortcomings. the critic operates only on the code; the system does not have any knowledge of specific application areas or algorithms  and it is naturally limited to improvements that derive from its low-level knowledge about lisp. as we pointed out in section 1  human assistance is by comparison much more powerful than the lisp-critic  because determining and addressing user's goals can extend advisory dialogues far beyond the capabilities of the lisp-critic. systems like the proust system  johnson  soloway 1  are able to do a much deeper analysis  but they are very restricted in the range of problems to which they can be applied to. we have designed a module to extend the framework of the 
lisp-critic by providing expert solutions to problems assigned to students in a course. comparison of these expert solutions with the work of the students provides additional sources of information for the usp-critic. 
　　the lisp-critic's understanding has to be extended beyond lines of code or individual functions. knowledge structures derived from programs like masterscope  teitelman  masinter 1  and a knowledge-base of cliches  representing intermediate and higherlevel programming constructs  waters 1; waters 1  would be useful for the lisp-critic to operate on. 
1. future research 
　　to get a better understanding of the empirical consequences of the many design choices which one faces in building a system of this sort  more research in studying naturally occurring advisory situations is urgently needed. the usp-critic has been an interesting starting point towards our long-range goal to build intelligent support systems and to support cooperative problem solving processes between humans and computers. the usp-critic has a few features  which extend the system beyond a  one-shot affair : it allows the user to ask for an illustration of the advice given  see figure 1  and the user can use the advice as a starting point to explore related concepts  functions and goals  see figure 1 . 
　　the lisp-critic is a first operational example of the class of systems we are interested in. however  we doubt that the general domain of lisp programming is the best area for a critic. an preliminary analysis of more restricted domains like our user interface construction kit wlisp  fischer  lemke  rathke 1  and the formatting system scribe have lead us to believe that critics may be even more useful for less general systems where a system has a better chance to infer the goals of the users. 
acknowledgements 
many people have contributed to the development of the 
usp-critic over the last few years. the author would like to thank especially heinz-dieter boecker  who developed many of the original ideas  the set of rules and the interpreter for it; andreas lemke  who contributed to the general framework for incremental learning; helga nieper  who developed kaestle; christopher morel  who implemented the explanation capabilities; bart burns  who implemented the statistical analysis package; catherine cormack  who analyzed user programs with the statistical package; and janet grassia who assisted in editing this paper. 
