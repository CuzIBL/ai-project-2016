 
a method is presented for analogical reasoning in automated deduction. we focus on the abductive aspects of analogy and give a unified treatment for theorems and non-theorems. abduction allows to deal with partial analogies thus strongly increasing the application field of the method. it also allows to detect  bad analogies  in several cases. explanatory examples as well as more realistic examples quantifying the effects of using analogy  for theorem-proving 
and for counter-example building  are given. 
1 	introduction 
analogy is in the very heart of human reasoning  in particular in mathematics. roughly speaking  reasoning by analogy consists in using informations deduced 
from the solving of a given problem or set of problems  the source problems  for solving a new one  the target problem . in artificial intelligence and automated deduction  the mechanization of this approach is a crucial issue  see for example  bledsoe  1; plaisted  1; hall  1  . moreover analogy is also an intrinsically interesting way of reasoning: discovering similitaries between existing proofs or theorems can be of highest importance  for instance in mathematical practice and teaching . as far as we know  in all the existing works in theorem-proving  analogy is used for finding the proof of a given target theorem from an existing one. this view of analogy is very limited since analogy can obviously be also useful if the target or source problems are not theorems: in this case one can try to find a counter-example of the target conjecture by using counter-examples of the source non-theorems. in this paper we give an unifying treatment of these two cases  theorems and nontheorems . no assumption is made about the way these proofs and counter-examples are generated  any existing method for search for proofs or counter-examples can be used:  hyper resolution or tableaux-based methods  connexion method  but also  finite  model builder such as finder  slaney  1   sem  zhang and zhang  1  or the method ramc  bourely et a/.  1  looking si-
1 	automated reasoning 
multaneously for a proof or a counter-example of a given 
formula t. 
　other approaches have been proposed to tackle the problem of analogy by second-order means. in  boy de la tour and caferra  1   the paradigm of  propositions as types  is used and proofs are represented as terms. higher-order functions are then applied to transform the base proof into the target one. in  kolbe and walther  1   higher-order evaluation techniques are used to refine the problem and ultimately have its premisses match with axioms of the calculus  allowing lemma speculation as a side effect. however  both approaches only deal with proofs  not counter-examples . to the best of our knowledge there is no other approaches allowing to deal with model building by analogy in first-order logic. 
　to make the presentation of the method shorter  we assume that the problems are specified in clausal form and that we use a refutational approach. therefore  formulae are sets of clauses  proofs are refutations and counter-examples are models. 
analogy and abductive reasoning 
according to peirce  hartshorne et a/.     analogy can be seen as an induction and an abduction followed by a deduction. our approach to analogy follows directly these steps. it can be summarized as follows. we assume a knowledge base k containing theorems with their proofs and non-theorems associated with counter-examples. 
　generalization step. the first step consists in a generalization occurring at the presentation of a new source formula ts to k. fs is transformed into a more general formula and stored into the knowledge base. this corresponds to the inductive part of analogy. 
　matching step. the second step applies when a new target conjecture tt is considered. it consists in trying to find one  or more   analogical  formulae in k. then the proof or the counter-example of the conjecture ft is built from the proofs/counter-examples of the formulae in k. this corresponds to the deductive part of analogy. however in most cases tt cannot be directly 
 dis proved by using only the information in k  this is obviously possible only if tt is an instance of a problem in k . however  even if a proof or a counter-example of ft cannot be straightforwardly deduced from the known 


	defourneaux & peltier 	1 

1 	automated reasoning 


	defourneaux & peltier 	1 

1 	automated reasoning 


1 	discussion and perspectives 
we have presented a calculus for the discovery and handling of analogy between sets of clauses. it is able in particular to handle partial analogy between statements by generating lemmata. our work is the first step toward a system for simultaneous search for refutations and models using analogy and abductive reasoning. main lines of future research are: 
  define strategies or heuristics for our calculus matching and study their properties  termination  efficiency  completeness for some classes of problems etc. . 
  extend this approach to first-order formulae  not in clausal form . in particular we have to give a new definition of the generalization order. 
   a comparative analysis with the lemmata produced by other techniques such as  kolbe and walther  1  will be performed in the future. we are currently working on the implementation of the calculus and on the definition of the knowledge base. 
acknowledgements 
we thank ricardo caferra and the anonymous referees for their pertinent and precise comments. 
