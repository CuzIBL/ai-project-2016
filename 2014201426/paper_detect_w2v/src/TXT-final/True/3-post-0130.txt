 
this paper describes the integration of robot path-planning and spatial task modeling into a software system that teaches the operation of a 
robot manipulator deployed on international space station  iss . the system addresses the complexity of the manipulator  the limited direct view of the iss exterior and the unpredictability of lighting conditions in the workspace. robot path planning is used not for controlling the manipulator  but for automatically checking errors of a student learning to operate the manipulator and for automatically producing illustrations of good and bad motions in training.    
1 introduction 
designing software that teaches requires  in advanced cases  the implementation of  intelligence  capabilities. after all  the best human teachers are those mastering the subject they teach  having communication skills and understanding the student's problem solving process in order to help him. with the aim of furthering intelligent software-based education systems  we have been developing a software simulator  called romantutor  that can be used to train astronauts to operate a robotic manipulation system  the mobile servicing system  mss   on the international space station  iss  figure 1 .   

figure 1. iss with the ssrms 
 
 
the mss consists of a space station remote 
manipulator system  ssrms   a mobile base system 
 mbs   a mobile transporter  mt   and a special purpose dexterous manipulator  spdm .  the ssrms is a 1-meter long articulated robot manipulator with seven rotational joints and two latching end-effectors which can grapple special fixtures  giving it the capability to  walk  from one grappling fixture to next on the exterior of the iss. the spdm is a dexterous manipulator with two symmetrical six-joint arms and can be operated from the end of the ssrms. the mt is a platform that serves to move ssrms along the main truss of iss.   
   the mss is operated from a robotic workstation located inside one of the iss modules and is equipped with three video monitors  each displaying a view from one of the 1 cameras mounted on the iss exterior and the ssrms. crewmembers operating the mss have no direct view of the iss exterior other than the three monitors. in fact  choosing the right camera views to display is one of the tasks for operating the ssrms.   
   romantutor is a system still under development; here we describe the integration of robot path-planning and spatial task modeling in an mss simulator to provide useful feedback to a student operating the ssrms. to illustrate  when a student is learning to move a payload  romantutor invokes the path-planner periodically to check whether there is a path from the current configuration to the target and provides feedback accordingly. the path-planner not only computes collision free paths but is also capable of taking into account the limited direct view of the iss  the lighting conditions and other safety constraints about operating the ssrms.  
1 architecture and basic functionalities 
romantutor works with any robot manipulator provided a 1d model of the robot and its workspace are specified. the system includes the following components among others  figure 1 : a graphic user interface  a feedback generator  a path planner  a movie generator  and thirdparty libraries  pqp  larsen et al.  1   open inventor  from silicon graphics and mpk  sanchez and latombe  1  .  
   a snapshot of the user interface is shown on figure 1. it emulates the robot workstation using three screens  for the three monitors . the keyboard is used to operate the robot. in command mode  one controls the joints directly; in automatic mode  one moves the end-effector  small increments at a time  relying on inverse kinematics to calculate the joint rotations. 
 

 
   the robot free workspace is segmented into zones with each zone having an associated degree of desirability  that is  a real number in the interval  1   depending on the task  visual cue positions  camera positions  and lighting conditions. the closer the dd is to 1  the more the zone is desired. safe corridors are zones with dd near to 1  whereas unsafe corridors are those with dd in the neighborhood of 1. we extend the definition of dd to robot configurations and paths in a straightforward way. 
   students carry out robot operation tasks that involve moving the manipulator  avoiding collision and singularities  using the appropriate speed  switching cameras as appropriate  and using the right operation mode at each stage   berthing  or mating. these tasks require the student to be able to identify a corridor in a free workspace for a safe operation of the robot and follow it. the student must do this based on the task  the location of cameras and visual cues  and the current lighting conditions. therefore localization and navigation are important in robot operations.  
   the feedback generator periodically checks the current state to trigger feedback to the student  using rules that are preconditioned on the current state information and the current goal. these are  teaching  expert rules and can be as efficient as the available teaching expertise allows. the feedback generator also changes the lighting conditions based upon specification rules in the current state. feedback rules  lighting rules and goals are structured into a task automaton.   
   a task automaton is a state transition system that abstracts the evolution of the simulated system configuration under the student's actions. in any given state of the task automaton the feedback generator is monitoring the student's actions  focusing on one subgoal  and using a set of feedback rules to help the student. a transition to a new state  e.g.  the payload has reached a 
   predefined milestone  switches the subgoal and the feedback rules to those of the new state. 
   feedback rules are production rules preconditioned on the state variables and the state goal; the consequents are normally multimedia content to be displayed to the student  but rules can also update user-defined variables  e.g.  to keep a record of previous state variables or to update a performance score for the student .  

figure 1.  romantutor user interface 
 
   feedback rules can invoke automated movie generation using templates of the form  illustrate correct 
move from  current-configuration  to  goalconfiguration  . such a template uses safe corridor specifications and the path-planner to generate a path with a high degree of desirability  i.e.  in a safe corridor ; then  it determines the best sequence of camera views for the different parts of the zone  and uses them as virtual cameras to generate a movie showing the path.  
1 the path planner 
for efficient path planning  we pre-process the robot workspace into a roadmap of collision-free robot motions in regions with highest desirability degree.  more precisely  the roadmap is a graph such that every node n in the graph is labeled with its corresponding robot configuration n.q and its degree of desirability n.dd  which is the average of dd of zones overlapping with n.q. an edge  n n'  connecting two nodes is also assigned a dd equal to the average of dd of configurations in the pathsegment  n.q n'.q . the dd of a path  i.e.  a sequence of nodes  is an average of dd of its edges.  
   following probabilistic roadmap methods  prm   sanchez and latombe  1   we build the roadmap by picking robot configurations probabilistically  with a probability that is biased by the density of obstacles. a path is then a sequence of collision free edges in the roadmap  connecting the initial and goal configuration. following the anytime dynamic a*  ad*  approach  likhachev et al  1   to get new paths when the conditions defining safe zones have dynamically changed  we can quickly re-plan by exploiting the previous roadmap. on the other hand  paths are computed through incremental improvements so the planner can be stopped at anytime to provide a collision-free path and the more time it is given  the better the path optimizes moves through desirable zones. therefore  our planner is a combination of the traditional prm approach  sanchez and latombe  1  and ad*  likhachev et al  1  and it is flexible in that it can into account zones with degrees of desirability. we call it flexible anytime dynamic prm  fadprm .  
   more precisely  fadprm works as follows. the input is: an initial configuration  a goal configuration  a 
1d model of obstacles in the workspace  a 1d specification of zones with corresponding dd  and a 1d model of the robot. given this input: 
  to find a path connecting the input and goal configuration  we search backward from the goal towards the initial  current  robot configuration. backward instead of forward search is done because the robot moves  hence its current configuration  is not necessarily the initial configuration; we want to re-compute a path to the same goal when the environment changes before the goal is reached. 
  a probabilistic queue open contains nodes of the frontier of the current roadmap  i.e.  nodes are expanded because they are new or because they have previously been expanded but are no longer up to date w.r.t. to the desired path  and a list closed contains non frontier nodes  i.e.  nodes already expanded  
  search consists of repeatedly picking a node from open generating its predecessors and putting the new ones or out of date ones in open. 
  the density of a node is the number of nodes in the roadmap with configurations that are a short distance away  proximity being an empirically set parameter  taking into account the obstacles in an application domain . the distance estimate to the goal takes into account the node's dd and the euclidean distance to the goal.  
a node n in open is selected for expansion with probability proportional to  
 1-   / density n  +   * goal-distance-estimate n   with 1 ¡Ü   ¡Ü 1. 
  
this equation implements a balance between fastsolution search and best-solution search by choosing different values for  . with   near to 1  the choice of a node to be expanded from open depends only on the density around it. that is  nodes with lower density will be chosen first  which is the heuristic used in traditional prm approaches to guaranty the diffusion of nodes and to accelerate the search for a path  sanchez and latombe  1 . as   approaches 1  the choice of a node to be expanded from open will rather depend on its estimated distance to the goal. in this case we are seeking optimality rather than speed. 
  to increase the resolution of the roadmap  a new predecessor is randomly generated within a small neighborhood radius  that is  the radius is fixed empirically based on the density of obstacles in the workspace  and added to the list of successors in the roadmap generated so far. the entire list predecessors is returned. 
  collision is delayed: detection of collisions on the edges between the current node and its predecessors is delayed until a candidate solution is found; if there is a collision  we backtrack. collisions that have already been detected are stored in the roadmap to avoid doing them again. 
  the robot may start executing the first path found. 
  concurrently  the path continues being improved by re-planning with an increased value of  .   
  changes in the environment  moving obstacles or changes in dd for zones  cause updates of the roadmap and re-planning. 
1 conclusion  
romantutor's potential benefits to future training strategies are  1  the simulation of complex tasks at a low cost  e.g.  using inexpensive simulation equipment and with no risk of injuries or equipment damage  and  1  the installation anywhere and anytime to provide  just in time  training. crewmembers would be able to use it onboard of the iss  for example  to study complex maintenance or repair operations. for very long missions  they would be able to use it to train regularly in order to maintain their skills.  
