 
a knowledge system architecture is a level of description of knowledge systems that specialises general ai implementation techniques to suit a class of problem solving tasks. this paper presents three complementary views of the architecture level  and analyzes their implications for the design of knowledge engineering tools. the analysis is illustrated with an architecture for managing uncertainty by reasoning about actions  and with a hierarchy of knowledge engineering tools to support system development and knowledge acquisition at the architecture level. 
	i . 	i n t r o d u c t i o n 
this paper is about tools for knowledge engineering at the architecture level. a knowledge system architecture specializes common ai problem-solving techniques to a particular class of tasks. an architecture provides descriptions of a particular kind of problem solving  e.g.  diagnosis or configuration  at a conceptual level that is above the implementation  thus making clear which aspects of a class of problems are intrinsic to the problem and which are artifacts of the implementation. an architectures is a partial design of a knowledge system in which some decisions are made in advance to support particular task characteristics. for example  many medical diagnosis systems first interpret data bottom-up to find  triggered  disease hypotheses  then set top-down goals of acquiring evidence pro and con the triggered hypotheses. this  trigger/acquire evidence  cycle is an intrinsic part of any architecture for the class of medical diagnosis tasks  though it might be implemented in a wide variety of ways. 
　　architecture-level tools for knowledge engineers can improve the productivity of system development and knowledge acquisition because: 
  by supporting the abstraction of representational and computational primitives at the architecture level  they permit the knowledge engineer and expert to cooperatively develop systems using a shared language of architecture constructs  rather than in terms of the underlying implementation. 
  they can incorporate knowledge about the architec-ture to facilitate system development and knowledge acquisition  e.g.  by enforcing constraints on the types and values of elements in the knowledge base . 
1 	architectures and languages 
　　the idea of an architecture level underlies recent work on knowledge systems.* chandrasekaran and his colleagues have identified a number of  generic tasks  such as hierarchical diagnosis and routine design  and have developed task-specific representation languages and control strategies for them  chandrasakeran  1  bylander and mittal  1  brown and chandrasakeran  1   mcdermott and colleagues have produced several knowledge systems using architectures that integrate knowledge acquisition tools with the problem solving methods  kahn tt a/.  1  eshelman and mcdermott  1  marcus  1  kahn et a/.  1 . clancey has described in detail the heuristic classification method embodied in the heracles architecture  clancey  1 . newell  newell  1  anticipated much of this work in his aaai president's address on the knowledge level  where he distinguished the knowledge of an intelligent agent  which is used to model its behavior  from the knowledge representation that describes how the knowledge is encoded in a symbol system. 
　　this paper presents an analysis of the role of knowledge engineering tools at the architecture level. we describe three complementary views of what is meant by the architecture level  and illustrate them in the context of mu. mu is an architecture for systems that reason about the effects of actions to manage uncertainty. we show how the architecture-level analysis leads to a hierarchical organization of knowledge engineering tools to support software development and knowledge acquisition for mu systems. we conclude with some advantages of this approach to knowledge engineering. 
i i . t h r e e v i e w s o f t h e a r c h i t e c t u r e l e v e l 
architectures can be viewed from three perspectives  and each suggests roles for architecture-level tools. first  the functional view presents an architecture as an application of general ai techniques to suit a particular style of problem solving. described functionally  the blackboard architecture  for example  is well-suited to problems with noisy data and multiple sources of evidence. a knowledge system architecture specializes weak methods to solve a particu-
　*this research is funded by national science foundation gran*. 1st 1 and darpa/radc contract f1-c-1. 
　 the architecture level was a major focus of the aaai workshop on high-level tools in october  1. an earlier version of this paper was presented there. 
lar class of tasks. architectures have been developed for simple classification  e.g.  decision trees   heuristic classification  e.g.  heracles  clancey  1 ; csrl  bylander and mittal  1    constructing configurations  e.g.  salt  marcus  1 ; coast  bennett  1    and routine design  e.g.  dspl  brown and chandrasakeran  1 ; dominic  howe et a/.  1  . 
　　the second perspective is structural: an architecture is a partial design that includes specifications of knowledge representation formalisms  inference mechanisms  and control strategies. many of the structural components  such as frame and rule systems  are provided by commercially available ai programming environments. architectures  however  are not arbitrary combinations of these components  but artifacts designed by the knowledge engineer for particular tasks. 
　　a third view of an architecture is that it defines a virtual machine. just as lisp provides primitives for symbol manipulation that the programmer can use without thinking about how they are realized in hardware  a knowledge system architecture presents representational primitives above the level of their implementation. the architecture provides a language that describes the behavior of a system in terms natural for the knowledge engineer and expert. for example  most medical diagnosis systems provide some kind of support for triggering - making particular hypotheses  active  when certain events occur  typically input data. to the expert  triggering might correspond to  bringing a diagnosis to mind.  a programmer can produce the effect of triggering using implementationlevel primitives  e.g.  giving triggered diseases high certainty factors or agenda priorities . but terms such as triggering - not their implementation - are the medium of knowledge engineering. such task-level terms promote explanation  swartout  1  and knowledge acquisition  gruber and cohen  1 . knowledge engineers  experts  and users can all understand triggering without thinking about how it is implemented. a virtual machine that executes triggering as a primitive is easier to program. 
　　in summary  the functional view of an architecture emphasizes the behavior of programs that instantiate it. the structural view emphasizes knowledge representations  inference methods  and other components of the architecture. a virtual machine integrates these views: it is an abstract device designed to meet the functional needs of a class of problem solving tasks. the next section discusses how the interactions of these views result in an organization of knowledge engineering tools. 
i i i . t o o l s f o r t h e m u a r c h i t e c t u r e 
in this section we describe an architecture for systems that actively manage uncertainty  called mu  cohen et o/.  1b   with the aim of illustrating how the three views of architectures influence the design of knowledge engineering tools. mu grew out of experience with mum  managing uncertainty in medicine   a system for planning a series of diagnostic questions  tests  and treatments for diseases manifesting chest and abdominal pain  cohen et al  1a . 
the primary aim of mum is to decide how to act when data are insufficient for diagnosis and treatment. like a physician  mum reasons about tradeoffs between the costs of evidence  the marginal utility of potential data given what is already known  the effects of treatments and the evidence they provide  and so on. mu is an architecture for building systems like mum that reason about uncertain situations in deciding how to act. 
　　viewed from a functional perspective  mu's task is managing uncertainty by taking appropriate actions. the task requires knowledge about the effects of actions on multiple goals  such as providing evidence for and against hypotheses  minimizing cost  and treating the condition. structurally  mu has a large inference network of hypotheses  supporting evidence and intermediate conclusions  and actions that produce evidence and provide treatment; a working memory of developing hypotheses; inference mechanisms for propagating the effects of evidence in working memory; and support for strategies that choose among actions. viewed as a virtual machine  mu supports knowledge engineering in terms that make sense for diagnostic tasks  such as hypothesis and potential-evidence. these terms are specialized for specific domains by terms such as disease  and further instantiated as specific diseases such as angina. 
　　the interactions of these views of the mu architecture are apparent in the design of knowledge engineering tools. figure 1 shows a hierarchy of tools that supports development of systems in mu. the foundation is a commerciallyavailable ai programming environment that includes implementation primitives such as rules and frames  and basic ai programming techniques such as pattern-matching rule interpreters and message-passing. the bottom layer in figure 1 is a structural description of the implementation of mu. it is not a design for an architecture  because no functional description has been given or is implied by this collection of implementation primitives  which could be instantiated to provide a wide range of behaviors. 
　　the functional view of an architecture constrains how implementation-level primitives and techniques are specialized for a particular kind of problem-solving. the functional requirements of mu are that it should represent inferential relations among data  intermediate conclusions  and hypotheses. it should maintain measures of belief in all these objects  decide focus of attention  i.e.  which objects to seek evidence for   and decide which evidence to seek. at the second level of figure 1  the frames and slots of the first level are specialized as hypotheses and inferential relations. inferential relations serve as pathways through the inference net. rules are used to implement combining functions that specify how evidence supporting hypotheses is combined when propagated from subordinate nodes. some properties of hypotheses and data-gathering actions - a subset of their slot values - are used as control parameters  which help determine focus of attention. the value propagation mechanism is implemented with the demons   active values   and message passing capabilities of the frame system. in summary  the structure of the architecture is designed from implementation constructs to meet the functional requirements of a particular problem solving method  resulting in a virtual machine  or task-specific shell. 
	gruber and cohen 	1 

tool level objects in user's view software support knowledge 
acquisition 
interface domain-specific terms diseases  intermediate diagnoses  questions  clinical tests  triggering symptoms 
for diseases  confirming test results  criticality of diseases  relative costs of tests  treatments  efficacy of treatment  meta-  knowledge-based utilities language-specific editors and form-filling interfaces  inferential consistency analyzer  graphical display of the inference net virtual 
machine 
 shell  task-level constructs hypotheses  intermediate conclusions  data-gathering actions  inferential relations  combining functions  control parameters  control rules  preference rankings among actions task-specific reasoning mechanisms value propagation functions  predicates on the state of the inference net  rule-based planner  decision-making support ai toolbox  kee  implementation primitives frames and slots  rules  pattern matching language  lisp objects and functions  windows and graphic objects ai programming techniques knowledge base bookkeeping  rule interpreter  inheritance mechanisms  assumption maintenance  demon invocation and 
message passing  window system  network grapher figure 1: a hierarchy of knowledge engineering tools to support the mu architecture. 

figure 1: fragment of the inference network for mum 
　　an architecture is designed not for a specific task like diagnosing chest pain  but for a class of tasks such as diagnostic reasoning. the knowledge engineer and expert instantiate architecture-level primitives for a particular application just as the architecture designer specializes implementation-level primitives. figure 1 is a structural view of mum - the chest pain specialist engineered in the mu architecture. hypotheses are instantiated as diseases such as classic angina; intermediate conclusions are instantiated as clusters such as exercise-induced pain; inferential relations are instantiated by specific links between evidence and conclusion  such as the potential evidence link between ekg results and classic angina. 
1 	architectures and languages 
　　having instantiated architecture-level constructs such as hypotheses with domain-level terms such as diseases  the knowledge engineer can build a knowledge-acquisition interface to help elicit knowledge in the terms of the domain. knowledge about the architecture-level terms is provided by the knowledge engineer in the shell  and is inherited by the domain objects used in an application. knowledge acquisition utilities  on the top of the hierarchy  use meta-knowledge about objects in the knowledge base to help the user build a syntactically valid and semantically consistent knowledge base. currently mu supports formfilling editors for all knowledge base objects  graphical interfaces for acquiring combining functions  and rudimentary consistency-checking abilities. tools for interactively acquiring control knowledge are in progress. 
	i v . 	c o n c l u s i o n s 
architecture-level knowledge engineering tools have several advantages: 
  one can capitalize on the vertical integration of implementation-level tools at the architecture level. for example  a general-purpose frame editor and network grapher provided at the implementation level 
 such as the kreme interface  abrett and burstein  1   can be customized as a knowledge acquisition interface for editing architecture-level constructs such as hypotheses and their instantiations as diseases. this is possible because the architecture-level objects are specializations of implementation-level objects  i.e.  frames   and consequently share their structure. 
  declaratively representing architecture-levd con-structs - the primitive objects of the virtual machine - encourages a consistent design shared by a team of programmers. for example  once the trigger relation has been designed  one need not worry about several members of a software project trying to achieve the same functionality with different implementations. 

  declarative architecture-level constructs also facilitate knowledge acquisition because meta-knowledge can be attached to objects to check for consistency  provide help  generate explanations  and so on. for example  a form-filling interface specialized for acquiring an instance of a disease can use a declarative description of the properties of diseases  such as the kinds of relations they have with data  to offer a menu of documented choices  gruber and cohen  1 . 
  building a virtual machine at the architecture level and then a knowledge acquisition interface on top of the virtual machine defines the roles of the knowledge engineer and expert. the knowledge engineer designs an architecture by specializing general-purpose implementation-level tools to operationalize the con-
structs suited for the problem solving task  whereas the expert instantiates architecture-level constructs for the application domain. virtual machine tools  sic  assist the knowledge engineer in customizing an architecture for a particular application  and knowledge acquisition tools help the expert build  refine  and debug the knowledge base. 
	v . 	d i s c u s s i o n 
the hierarchy of tools discussed here reflects a power/generality tradeoff. constructs at the implementation level are general  e.g.  production systems can be configured for many kinds of problem solving  but from the standpoint of knowledge engineering they are weak. to say an object is a disease hypothesis is to imply much more knowledge about it than to say it is a frame  even though the implementation of the disease hypothesis may be no more than a frame. this added knowledge constrains the internal structure of the disease frame  e.g.  values and types of slots  or the kinds of messages it can handle  etc.   constrains its relationships with other frames  and so on. since these constraints facilitate knowledge engineering  architecture-level objects like disease frames are at the  power  end of the power/generality spectrum. implementation-level objects  lacking constraints  are more general but correspondingly less powerful from the standpoint of knowledge engineering. 
　　thus  when one builds an expert system for a task  the utility of an architecture level analysis depends entirely on how much one knows about the task. the knowledge system architecture embodies knowledge about a class of problem solving tasks - it is a virtual machine for that class - and as such facilitates system development and knowledge acquisition for problem solvers of that class. the power/generality tradeoff tells us that we can ameliorate the knowledge acquisition bottleneck for restricted classes of tasks by designing architectures and building integrated  power tools  at the architecture level. 
r e f e r e n c e s 
 abrett and burstein  1  abrett  g. & burstein  m. the kreme knowledge editing environment. international journal of man-machine studies  in press. 
 bennett  1  bennett  j. s. coast: a task-specific tool for reasoning about configurations. technical report  teknowledge inc.  palo alto  ca  1. 
 brown and chandrasakeran  1  brown  d. c  & chandrasekaran  b. expert systems for a class of mechanical design activity. in j. gero  ed.   knowledge engineering in computer-aided design  amsterdam: north-holland  1. 
 bylander and mittal  1  bylander  t. & mittal  s. csrl: a langauge for classificatory problem solving and uncertainty handling. ai magazine  1   august  1  1. 
 chandrasakeran  1  chandrasakeran  b. generic tasks in know ledge-based reasoning: high-level building blocks for expert system design. ieee expert  fall  1  1. 
 clancey  1  clancey  w. j. heuristic classification. artificial intelligence  1  1  1. 
 clancey  1  clancey  w. j. from guidon to neomycin and heracles in twenty short lessons. ai magazine  1   1  1. 
 cohen et ai  1a  cohen  p.  day  d.  delisio  j.  greenberg  m.  kjeldsen  r.  suthers  d.  & berman  p. management of uncertainty in medicine. proceedings of the ieee conference on computers and communications  pheonix  arizona  february  1  1. 
 cohen et ai  1b  cohen  p.  greenberg  m.  & delisio  j. mu: a development environment for prospective reasoning systems. proceedings of the sixth national conference on artificial intelligence  seattle  washington  july  1  forthcoming. 
 eshelman and mcdermott  1  eshelman  l. & mcdermott  j. mole: a knowledge acquisition tool that uses its head. proceedings of the fifth national conference on artificial intelligence  philadelphia  august  1  1. 
 gruber and cohen  1  gruber  t. r. & cohen  p. r. principles of design for knowledge acquisition  proceedings of the third ieee artificial intelligence applications conference  orlando  florida  february 1  1. 
 howe et ai  1| howe  a. e.  dixon  j. r.  cohen  p. r.  simmons  m. k. dominic: a domain-independent program for mechanical engineering design. international journal for artificial intelligence in engineering  1   july  1  1. 
 kahn et ai  1  kahn  g. s.  breaux  e h   joseph  r. l.  & deklerk  p. an intelligent mixed-initiative workbench for knowledge acquisition. international journal of manmachine studies  in press. 
 kahn et ai  1  kahn  g.  nowlan  s. & mcdermott  j. a foundation for knowledge acquisition. proceedings of the ieee workshop on principles of knowledge-base systems  denver  colorado  december  1  1. 
 marcus  1  marcus  s. taking backtracking with acquisition grain of salt. international journal of man-machine studies  in press. 
 newell  1  newell  a. the knowledge level. artificial intelligence  1  1  1. 
 swartout  1  swartout  w. xplain: a system for creating and explaining expert consulting systems. artificial intelligence  1   1  1. 
	gruber and cohen 	1 
