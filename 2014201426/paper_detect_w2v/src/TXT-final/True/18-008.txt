 
proof normalization manipulates formal proofs. it also provides a computation mechanism which belongs to the logic programming family. 
   although proof normalization can treat full predicate calculus  it is less practical than the well-known programming language  prolog. 
   in this paper  we propose a new technique of attaching proofs to skolem functions. this technique enables one to nomalize a proof eagerly; that is  one can get a partial answer before the proof is totally normalized. this improves the usability of proof normalization. partial answers are also useful in normalizing proofs concurrently. we compare our method with computation in concurrent prolog. 
1. introduction 
proof normalization has a long history in mathematical logic  prawitz 1 . the significant result for computer 
science is as follows: // there is a proof of the formula 1z a z    one can get an answer t  which satisfies a t   after normalizing the proof. 
   this realizes a computation  which is appropriately called logic programming. however  it is less efficient than prolog. 
    goad 1  proposes an extended a-calculus  named pcalculus  to represent proofs. p-calcuius terms are executed efficiently.  hagiya 1  noticed that most part of a proof is irrelevant for the computation. he introduces new notions to eliminate the unnecessary normalization steps. 
   this paper describes a new approach to improve the usefulness of the proof normalization. our method is to attach proofs to skolem functions  which enables us to normalize eagerly. eager normalization produces a partial answer in advance. using this capability  proof normalization can be performed concurrently rather than one proof at a time. concurrency here means the same as in concurrent prolog  shapiro 1 . we apply our method to an example from concurrent prolog  takeuchi 1  and compare this to computation in concurrent prolog. 
1. logical framework 
proof normalization is elegantly explained using a natural deduction system. figure 1 summarizes the inference rules for natural deduction  which are used in this paper. 
a typical proof in natural deduction is illustrated in 


　　　figure 1: proof using a rule of induction in natural deduction proofs   prawitz 1  and  troelstra 1  . here  we explain only two reduction rules which are relevant to this paper. 
s. goto 1 
1. every atomic formula is a harrop formula. 
1. if a and b are harrop formulas  then a a b and vxa x  are harrop formulas. 
$. if b is a harrop formula  then a d b is a harrop formula  regardless of the form of a. 
the harrop formula has no positive v nor 1  except in the left hand side of the implications  d . 
proposition 1 a normal proof oeza z   where assumptions are only harrop formulas  contains a subproof of a t  
for a suitable term t. 
reduction rules 
harrop formulas  and the proof satisfies the condition of 
　　　　　　　　　　　　　　　　　　　　　　　　　　　proposition 1. 1. e-reduction rule: if a proof has an 1i-rule imme-
diately followed by an 1e-rule  the proof is simpli- 1. attaching proofs fied by cancelling both applications of rules. here  ii and ii' a  stand for subproofs. a in ii' a  indicates a proper parameter. we can normalize the proof in figure 1 to calculate the sum of two numbers because the two assumptions are both 

1 s. goto 
using the notion of partial answer  proof normalization can be performed concurrently. in this section  the example given in concurrent prolog  takeuchi 1  is computed  using proof normalization. 
example 1 concurrent prolog 
   the upper left assumption  vx write  x    always holds because  write  can print any term.  for simplicity  we ignore errors in printing.  the other assumption  outstream      is a termination condition for  outstream  and taken as an 

s. goto 1 
in the subproof  a skolem function p a  is used. a cer-

tain program is attached to function p a  to print the term  a  when ''a  is substituted by some term. this requires more explanation: 
when a term is printed  
a term can be printed anytime unless it is bound. 
that is  no bound variables in the scope of v or  or no proper parameters can be printed. 
in the example   a  is printed after it is substituted. if the proof is normalized after giving  will be printed  because it is substituted for  a  in the proof. 
   at last  two proofs are combined to produce the same effect as clause  1  in concurrent prolog. figure 1 illustrates only a few steps of the normalization. however  it is easy to see that computation is performed concurrently. the ind subproof produces the list  and ind  j subproof consumes the list. the condition on the print function protects the proper parameter from being printed before it is substituted. this realizes a kind of synchronization  which is attained by the read-only annotation in concurrent prolog  shapiro 1   takeuchi 1 . 
	1. 	conclusion 
in this paper we propose a new method of proof normalization  which utilizes skolem functions to normalize a proof eagerly. each skolem function represents an existential variable   and the relation is preserved by attaching proofs to skolem functions. 
   our method facilitates concurrent normalization. concurrent prolog is formally well-explained by our method. 
   it is easy to see that prolog itself is closely related to proof normalization because:  1  prolog always generates normal proofs  and  1  a horn clause is necessarily a harfigure 1: the combined proof 
rop formula. thus  prolog computation can be considered as a special kind of proof normalization. 
acknowledgement 
i would like to thank dr. carolyn talcott at stanford university for many valuable comments. 
