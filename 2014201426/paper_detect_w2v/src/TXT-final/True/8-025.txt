 
   the heuristic programming system is a language  designed but not yet implemented  for research in artificial intelligence it will provide facilities for creating  modifying  and destroying complex hierarchically structured objects and descriptions of objects a search operation will be provided to retrieve objects which are specified by arbitrarily complex descriptions another search operation will construct the desired objects according to the specifications of previously created doscriptlve objects  this will be rather like a syntax-directed compiler for a continuously changing ambiguous language 
   a program for playing go-moku has been written using the system  the program features a highly efficient data structure  evaluation of feasible moves by alpha-beta minimax  and improvement of the move generation mechanism whenever the opponent makes a valuable but unexpected move 
   key words and phrases problem-solving  heuristic  data structure  information retrieval  search  programming language  pattern recognition  description  learning  game playing  artificial intelligence  representation. 
overview of the system 
the heuristic programmirng system consists of tho following major sections 
1 the class i anguage  cl   and 
  the problem solving fxecutive  psf  
   cl is the programming language in which the user describes the structure of a problem area it is a considerably oxtended algol which enables the user to croato  manipulate   end destroy sets and classes of sots tho external form of the language has boon greatly influenced by leap  the language for the expression of associative procedures  rovner and feldman  1   which is an algol based languago with facilities for manipulatinq sets and associative data however  both the purpose and internal structure of cl differ greatly from l eap 
facilities for representation 
   the basic. non-al gol structure in cl is the set sets with common properties may be combined together into a class  the properties may have different values for different sets in the class class members may be created or destroyed during a computation a class may be declared to be a goal class or a descriptive class tho pse may construct members of a goal class from other sets  using members of a 
   descriptive class as dox riptions of the goal class 
   a set may be accessed in various wiiys by name  by reference from a set contained within it  or by reference from a set within which it is contained if a set is d momber of a class  then its name is the name of the class followed by an index  i e    i subscript  the user may insert a serios of integer-valued expressions between the name and index  indicating sunt lasses 
   any set which is declared within a block is created upon entering the block  just as a local variable in al gol  sets are created empty the members of a class are created when entering a block if the class has a fixed cardinality  i e   number of members   otherwise members are created by the create prcx edure seis are destroyed when exiting from tho block in which they are declared class members may also be dostroyed by the destroy procedure the destruction of a set means that all properties of the set become undefined further  class members which contain a destroyed member are also destroyed  all references from sets contained in the destroyed memt er are deleted numoric or boolean properties may be defined in any of three ways a constant initial value may be assigned during the compilation of the block in which a set is defined  or an expression may be assigned at compilation time and then evaluated at the creation of the set  or the value may be assigned within the block  overriding any previously assigned value 
control mchanisms 
there are three basic types of control mechanisms in the heuristic programming 
system basic algol  which will not be discussed further   the cl for  a search mechanism   and the pse  a descriptive and constructive mechanism  
the cl for is a sophisticated search facility. the user writes a template which is basically the specification of the class name of an object  its structure  or various possible structures   and its properties the class name  and any of the class names appearing in the structural description  may be followed by a  defined  index or by an  undefined  variable the defined index refers to a specific class member  while the undefined variable refers to a momber which is to be found by the search when the desired member is found  its index is assigned to the variable. the member then can be manipulated by reference to its class name and index 
   thus  the basic orientation of the class language is toward explicit specification and search  the user is spared the task of choosing and identifying objects 1 his tends to make cl code reflect the user's mental representation of objects  which facilitates coding and debugging 
   the cl for has been influenced by both leap  rovner and feldman  1  and snobol  farber  griswold  and polonsky  i1  
   a cl for is used to search for objects which exist  i e   which have been constructed previously  a pse statement may not only search for objects  but it may also combine objects  according to templates. in order to construction members of goal classes  after a goal object has been constructed  it can be manipulated by ordinary cl code  the pse is  therefore  goal-directed  like the productions of the cogent programming system  reynolds  1  unlike other systems  however  the pse can construct more than one object  or it may not be able to construct any at all. each invocation of the pse must  therefore  specify the maximum amount of time to be spent  and whether one or many objects are desired 
facility for improvamant 
   the most important control features of the heuristic programming system are its methods for searching for specified objects  therefore  improvement consists of creating  destroying  and altering descriptions of objects members of descriptive classes may be created and destroyed just as members of other types of classes  but the facilities for alteration are unique basically  new descriptions aro produced in the following manner a goal class member is created  then a descriptive member is created which contains the goal class member  the descriptive member may be edited and then the descriptive member is abstracted. 
   editing is a process by which a description is changed without changing the thing described  each set which is to be changed is copied  then the copy is changed all references to the original set within the description are changod into references to the copy abstracting is a process of copying all sets  as above  and then changing the set names into undefined names thus  the result is just a template 
tha class languaga 
   the detailed presentation of cl will assume a moderate knowledge of algol and the metalinguistic formulae used to describe algol. in particular  the revised algol report  naur et al   1  defines formally various metalinguistic variables which are used here  these aro  for the most part  self-explanatory. both the metalinguistic variables u1ed to describe algol and those u1ed to describe the additional constructs of cl are indicated in this chapter by the brackets     and      generally there will be no difficulty in distinguishing algol from the new constructs 
representation 
declaring sets and classes 
   a name may be declared to be a sot name by the declarator art or a class name by the declarators clan  goal date  or descriptive class. sots are normally ordered  but may t e declared to bo unordered  rank hi  high member first   or ranklo ranking may be on the basis of any property of the members the members of a class may be declared to be unordered  rank hi or ranklo in the class declaration  the class. itself  is always ordered  the cardinality of a class may be established at the time that the classs is declared  as in the following example. 
class class  1  
this class is not empty initially  it consists of as many mombers as are declared  although these members need not have any defined properties 
-1-   a class may be subdivided into subclasses  subsubclasses  and so on  to any desired extent this is indicated in the declaration as  e g.. 
　　　　　　　　　　　　　　dan subclasses  1 . here  there are 1 subclasses  each with five members. 
if a cardinality is not declared  then a class may have any number of members. 
this flexibility may be purchased at a cost in processing time  since an array structure is used for a class of fixed cardinality  while a list structure is necessary in the general case. a specific element of a class of fixed cardinality is accessed by  pointing  to it. otherwise the list of members must be searched to find it the search time is  however  quite small in many cases  because a record is kept of the location  on the list  of the most recently accessed member of each class  this greatly facilitates operations which sequence through the class or which repeatedly refer to the same member. 
   note that if a class has a declared cardinality  then any member may be referred to  e.g.. may have values assigned to its properties  without explicitly creating it. if a class has variable cardinality  on the other hand  each member must be explicitly created by a create statement before referring to it thus  the two types of classes are quite different. 
   a class may be declared to have subclasses even though it has no fixed cardinality. thus. 
ctast manymember  1  
declares a class which has 1 subclasses  each with any number of members. 
parser ing properties 
   the standard properties structure and cover are automatically declared whenever a set or class is declared. the structure of a set is a list of the elements contained in it this is not the same as the set itself if a contains 1. and c contains the structure of a  then c contains b but not a. the cover of a set is the set of sets containing it the number of elements in either the structure or the cover may be declared. for example 
clan triangle  integer structure -1  cover -1 . 
declares a class of triangles  each member of which contains at most three elements and is contained in at most five elements such a declaration means that the pointers to the elements of the structure and cover may be placed in a contiguous block in each class member  rather than in lists. the value and cost properties are automatically declared for goal and descriptive classes. 
   nonstandard properties must be declared explicitly  and may be assigned initial values. thus 
dees box  real length  width -1.. height - p + q . 
specifies that each member of the  box  class has a length  a width  with value 1 when the member is created   and a height  with value p + q when the member is created  for the then current values of p and q . 
syntax of declarations 
   the syntax of declarations will now be given this defines not only the special cl constructs  but their relation to algol as well 
  declaration   . ＊  type declaration   l  array declaration   i 
  switch declaration   |  procedure declaration   |  set declaration   |  class declaration   |  goal declaration   | 
  descriptive declaration   |  standard test   
syntax of set declarations 
	 set name  	-  identifier  
	  property name   	＊  identifier   
 short property assignment       property name   -  arithmetic expression   i   property name   .    boolean expression   
 property item   .-   property name      short property assignment   property list  .  =  property item   i  property item  .  property list   typed property list  : -  type   property list  |  type     property 
list     typed property list  
 property declaration  :.-  empty   |   typed property list   
 set declaration item   -  set name  |  property declaration   
 set declaration list  .:-  setdeclaration item   |  set declaration item       set declaration list  
	 rank  	  renkhi  ranklo 
 modifier  -unordered j empty  i  rank  | rank  by  variable  
  set declaration   -  modifier  set  set declaration list   
syntax of class declarations 
	  basic class name   	-   identifier   
	  subclass and cardinality list   	-   arithmetic expression   | 
  arithmetic expression   .  subclass and cardinality list   
  subclass and cardinality declaration   -   empty   |     subclass and cardinality list     |     subclass and cardinality list     
  class declaration item   =  basic class name    subclass and cardinality declaration     property declaration   
  class declaration list  	＊   class declaration item  |   class declaration item      class declaration list  
  class declaration   	  modifier  class  class declaration list  
syntax of goal declarations 
	  goal class name   	＊   identifier   
  goal declaration item   ＊   goal class name    subclass and cardinality declaration    property declaration   
  goal declaration list  -   goal declaration item  i   goal declaration kern     goal declaration list  
  goal declaration  . =   modifier  goal dass  goal declaration list  
syntax of descriptive declarations 
	  descriptor name  	 -   identifier  
  descriptor item       descriptor name    subclass and cardinality declaration    property declaration   
  descriptor list  =   descriptor item   i   descriptor item    
  descriptor list  
	  descriptive declaration   	-   modifier  descriptive dass 
  descriptor list  
  class name  	    basic class name   i   goal class name  i   descriptor name  
syntax of procedure declarations 
  procedure declaration   - procedure   procedure heading     procedure body   |  type  procedure   procedure heading    procedure body  i set procedure  procedure heading    procedure body   
syntax of standard tests 
  standard test  - standard test   property name   i   standard test  .   property name   
   this is a simple way to avoid writing the same condition in many  template   's a   template   contains lists of class members and boolean conditions on those members  a more complete discussion is given later  each   property name    which must be a boolean variable  in the   standard test  is added as an additional condition to each member with that property  provided that no condition involving the   property name  is already present 
referring to members of sets and dassss 
members of a set or class are referred to by index and subclass indicators as  e g   set name. i 
 classname j subclasses i.j 
where i and j  here and in subsequent examples  may be arbitrary   primary  's and set name is any set  in particular  it could be classname j . 
   members of classes may be referred to by subclass indicators and indexes which are either  defined  or  undefined   a period before a   primary  indicates that it is defined  as in the .1 of classname i 
while a slash before a   simple variable   indicates that it is undefined  as in the /k of classname/ k 
the defined values are used to indicate a specific class member the undefined variables are used to indicate that an index or subclass indicator is not known  as  for example  when searching for some member with specific properties or when creating a new class member when the desired member is found or created  its index and subclass indicators are assigned to the previously undefined variables. similarly  a set name followed by a slash indicates an undefined set  to which structure is to be assigned  a set name not followed by a slash represents a previously defined set of elements. an asterisk followed by a period and an   unsigned integer   represents a variable to which structure has been assigned during a searching operation this will 

-1-

be discussed in more detail in the section on   template   's. 
operations on sets 
   sets are combined by means of the binary operators +  x and -. which are interpreted as concatenation  with subsequent deletion of duplicated elements  if the result is assigned to an unordered set   intersection  and subtraction. the precedence order is x first and last  as indicated in the syntax. association is from the left in a sequence of identical operators  or may be indicated by parentheses. note that brackets may be used to construct sets from lists of arbitrary expressions  hence  numeric or boolean quantities may be put into sets. brackets are removed by the structure function so that. e.g.. 
f - structureda. b  c. d.   . e   . 
is equivalent to 

syntax of sets  expressions  and assignments 

creation off classmemoers 
   a class member may have values assigned to any of its properties by the statement which creates it. these values override values given in the class declaration. values assigned to a member's structure are indicated as in the following. 
　　　　　　　　create.  trlangle/l area -1  llne.l  line.j  line.k  . this indicates that a triangle is to be constructed which consists of  i.e.. whose structure is  the three lines  and whose area is defined to be 1 any class member indicated in the structure may also be created  if its index is undefined  as in the following create.  intersecticwk line/l polnt.l.pointj .line/m polnt l.pointn   . this process may be continued to any degree of nesting; during execution the effect is to create the leftmost member whose structure has already been created  then to repeat  until all members have been created. any of the members being created may have values assigned to any of its properties 
syntax of create 
	  undoflned index  	=/  variable   
	  defined member  	   class name   i   defined member     index   
	  undefined member  	    defined member     undefined index   i 
  undefined member     undefined index   |   undefined member   
  index  
  newmomber  ＊  undefined member  |  undefined member     new description list    
  description   =   set  i   short property assignment  i 
  new member   
  new description list  =   description   i   description    
  new description list   
  creation   .  = create.    new member    
each of the   new member  's is created by the single statement 
syntax of destroy 
  destruction  . - destroy.   set    
   recall that sets which contain a destroyed set are also destroyed  and that references to a destroyed set from a contained set are deleted from the contained set's cover. 
manipulation off properties 
a   property name   alone is used to indicate a property where the set or class member is known by context  that is. within a   class declaration   or  new description list  or within a  template    to be described later . otherwise  the class member in parentheses follows the property name. thus  class box   real area -1   totalarea =1 xarea  box.1 . 
area  box.1  ＊ 1 x totalarea  
   a single identifier may be the name for properties of many different classes  as  for example  cover and structure  since the class member is always made clear either explicitly or from context 
syntax of properties and variables 
	  variable  	-  simple variable   |  subscripted variable   i 
  property variable   
  property variable   . -   property name   | 
  property name      simple set    
control 
templates 
   a   template   is a description of a collection of sets it consists of a list of  set variables  's  each one a  set name   followed by a slash  or an asterisk  an asterisk followed by a slash and an  unsigned integer    or an   undefined member      set   's  and  boolean expression  's. the   set variable  's are assigned values such that the structural conditions implied by the   set   's and the boolean conditions of the   boolean expression   's are satisfied for example  
triangle/uarea - 1alght. line.i  llne/k  line.j  
indicates a right triangle  or collection of right triangles  whose area is 1 and which consists of line. i  a line  or collection of lines  whose index is unknown  and line j. no properties are specified for the lines  in particular  their structures are not specified . 
   if part of the structure of a set is irrelevant or unknown  an asterisk may be used in its place in a  template  . the asterisk signifies that its place could be occupied by any string of symbols which represent structure  including the  empty  structure . thus. 

specifies any  object  which contains llne.l one example of such an object is 
object. 1  line.1  triangle.1  line.1  line.1. llne.l   
   an asterisk followed by a slash and an   unsigned integer  is similar to a  set name   followed by a slash  the structure which is assigned to it may be referred to elsewhere by an asterisk followed by a period and the   unsigned integer   thus. 
for each line/k   v i   point.j. */1  do begin create.  line/l   m   # 1    destroy   line k  and  
creates a collection of new lines not containing point.j. 
   the functions  and    or   and  not  may be used within a   template  to indicate  respectively  structural conditions which must be simultaneously satisfied  or are alternatives  or are forbidden. for example  
　　　　　　inside/l  or  icircle/k. triangle/m .  triangle/m. circle/k    specifies an object which consists of a circle  inside  a triangle  or a triangle  inside'' a circle 
recall that boolean conditions may be inserted into a  template  by means of a 
  standard test  . for example  if the following declarations are made standard test active  
class triangle  real area. boolean active   
then trlangle/l  area = 1  
and triangle/l  area = 1 aactlve  
specify the same collection of members  but triangle/l  area = 1a ~lective  
specifies a disjoint collection 
the cl for 
   the   cl for   is used to assign values to the   set variable  's which appear in a   template     structure is assigned to the  set name  's which are followed by slashes and to the asterisks  and values are assigned to the undefined subclass indicators and indexes of the   undefined member  's thus  the   cl for   is essentially a 
   sophisticated search procedure for example  ffor each object/k  triangle/l    line.l .  square/m  .. llne.l/   do   statement  
-1-searches for any object which consists of a triangle and a square with llne.l in common. 
in the example above  the each specified that all possible assignments of values to 
l. k. and m were to be made which satisfied the  template  . first could have been used instead  with the obvious significance if the first is used  then clearly the results may depend upon the order in which assignments are made note also that the  statement   could create  modify  or destroy class members  since the search 
locates one after another of the examples of the  template  . the results of the for each may also depend upon this order 
a second type of   cl for   is used to assign each element  one after the other  
 or the first element  or the last element  from a specified  set   to a  set name   
the process is simply one of renaming sets. thus  for example  the statement for seen a in  b. c. d. e  do a -a+f  
is equivalent to the sequence of statements 

in both of the forms of the  cl for    as in the algol   for statement    the 
 statement  following the do is not executed at ail  if the conditions of the  cl for  cannot be satisfied thus  the   cl for   may be used to determine whether 
certain class members exist 
syntax of the for statement 

the problem solving executive 
   an invocation of the pse is. as discussed earlier  similar to a   with the important addition that the pse can not only search for specified objects  but may 
also construct them. this construction is limited to the construction of members of goal classes from other class members. thus  members of non-goal classes must be created by declaration or explicit create statements  this is necessary since the non-goal classes are the objects of the problem and are manipulated by the rules of 
the problem  rather than by the pse. the goal classes  on the other hand  represent hypotheses about the problem  and hence are subject only to rules defined by the problem solver 
   the desired goal members are described to the pse by means of a   template  and/or members of one or more descriptive classes. for example  
for first subgoal/l  object j  object k  during 
time do  statement  
specifies that a  subgoal  is to be constructed from the two  objects  if they exist and can be found within the time limit   time  in this case  the  template   completely describes the desired subgoal. so no descriptive member is referenced. on the other hand  
for each subgoal/k  object j. .  during time do   statement  
incompletely specifies the desired subgoals the structure implied by both the 
  template  and by some descriptive member must be satisfied by each subgoal 
finally  for each subgoal/k during time do  statement   
and 
for each subgoal/ktvalue  bestval  during time do   statement   
do not make any structural restrictions on the desired subgoals. structure must be supplied by descriptions which were created earlier 
   if it is desirable that the goals be described by members of a specific class  or by a specific member  this can be indicated in the  template   for example  
for each description/k  subgoal/l  during time do 
     statement / or 
for each description.!  subgoel/l  during time 
do  statement  
   in each of the above examples  time is initially set to the time allowed  whenever control leaves the pse  time is equal to the remaining amount of time. thus  it is 
-1-
rather easy to devise quite complex ways of allocating search effort. for example  the following code searches for  moves  which will achieve  subgoals  of increasing value after n moves have been found and placed in moveset  the remaining time is devoted to finding  traps   presumably very high-value goals  this might be a section of a game player 

end; 

improvement 
   the basic operations of improvement in the heuristic programming system are the construction  destruction  and alteration of members of descriptive classes the construction of a new descriptive member consists of the following steps first  recognition of a new goal member  second  creation of a descriptive member whose structure consists of this goal  third  editing of the descriptive member to alter structure or properties  fourth  abstraction of the descriptive member 
   editing  as noted earlier  is a process by which a description is changed without changing the thing described an  edit statement  consists of the name of the description and either a single   replacement   or a block of  replacement  's each   replacement   either assigns a new value to each instance in the description of a given property  or replaces each instance of a given  template  in the description by new structure and property values a   template   is deleted from a description if it is replaced by null each   replacement  replaces part of the description by a reference to something which is strictly local to the description. in this way arbitrary replacements may be made without any effect upon any  external  objects  but it is still possible to refer to  local  objects by the names of the corresponding external objects. 
abstraction is a process of changing a  possibly edited  description into an 
 abstract  object  in which all indexes are undefined all pointers to external objects are replaced by pointers to local blocks  which represent the objects and all their properties  including subclass indicators  essentially  this is just the process of changing a class member into a   template  which contains only   undefined member  's. 
   the improvement process will be illustrated by a somewhat detailed example  the generation of a subgoal description in a tictac-toe program although the application is trivial  the idea behind this example is quite powerful 
assume that the data structures of the program are  squares    lines   
 subgoals   and  descriptions  each square has an integer-valued property called  occupant  with values  x     1   or  unoccupied . each line has an integer-valued property called  occupant  with values  x     1      unoccupied   or  blocked   and an integer-valued property  number  which may have any value from zero to three  zero if the line is blocked  otherwise the number of occupants  each line consists of three squares. a description of a subgoal consists of an unoccupied square  a list of lines and the squares which they contain  and the properties of the lines and squares. each subgoal has two properties  its  side    x  or  o   and its  subgoelvalue   with a value of  for some n. the interpretation is that if the present configuration should contain the specified lines and squares and if the player with the proper side should occupy the square  then the resulting configuration would lead to three in a line in n moves or less regardless of the moves made by the opponent  although if he has a more valuable subgoal  he might be able to achieve three in a line first  and therefore win . 
   assume now that the opponent  x  has just moved to square.i and that his move has created two subgoals  subgoal.j and subgoal.k  with values 1%nd 1n  which cannot be simultaneously blocked evidently his previous move occupied the square of a subgoal with subgoelvalue equal to the minimum of 1m+1 and 1n+1. the problem is to create a description of this subgoal. 
the first step has already been done: the relevant objects  square.i  subgoal.j  and 

subgoal k. have been found. the second step is to creato a description of these objects create.  description/l  subgoal/m  subgoalvalue. =lf subgoalvalue  subgoal. i    subgoal value  subgoal.j  then subgoalvalue  subgoal j /1. 
else subgoalvalue  subgoal.l /1.  side =x. square.i  structure  subgoal.j . structure  subgoal k    . 
 note the use of  structure  the subgoal will consist of lines and squares  not of other subgoals.  this object is a description of the situation after  rather than before  trie move has been made. thus  the occupant of square.i. and its effects  must be removed 
edit description.l do begin occupant  square.l  -unoccupied  line/n   v i . square i.v1  -
line.n  number -number  line.nm  * . 1   square.l  *.1  
end; 
now the description is abstracted abstract  description.l   
this is a complete description of a subgoal which the opponent can achieve. a subgoal which the program can achieve is produced by the following 
create. descrlption/m structure  description.l   . 
 dh description.m do begin side  subgoal/n  -o. 
occupant  line/n .-if occupant  line.n  -x then o else if 
occupant  line n  - o then x else occupant  line.n   
occupant  square/n  - if occupant  square.n -x than o else if 
occupant  square.n  - o than x else unoccupied 
end 
syntax of editing 
	 member  	-   defined member  l  undefined member   
  property replacement   .=  property name     member   boolean expression   k property name      member   := 
 arithmetic expression   
	  structural replacement  	- template  -null i 
 template   -  new description list   
  replacement  '-  property replacement  |  structural replacement    compound replacement  -   replacement  l  replacement  . 
 compound replacement  
  edit block   -   replacement   begin  compound replacement  end 
 descriptive member   -  descriptor name    index   l  descriptive member     index   
  edit statement  	* edit   descriptive member   do  edit block   
syntax of statements 
	 statement   	-   unconditional statement   l  conditional statement  l 
 for statement  l  pse statement   l  creation   l  destruction   i 
 edit statement   
conclusion 
   the foregoing is part of a much larger paper which includes a proposed implementation and a sample program which plays the game of go-moku  jefferson  1 . the go-moku program has the following interesting features positions are represented efficiently and. to the human programmer  very naturally  the distribution of playing time within the program is easily and flexibly controlled improvement of move generation and evaluation is accomplished by creating a description of each of the opponent's moves which unexpectedly leads to a valuable position  alpha-beta minlmax is easily and efficiently implemented  greatly increasing the playing ability of the program. the facilities of the system made the programming reasonably simple and straightforward  this was due in part to the simplicity of construction of complex objects and descriptions of objects  and in part to the simplicity of searching  by means of the pse  for instances of complex objects. the ease with which operations on one object may be propagated to other  dependent  objects contributed greatly to the efficiency of the program. 
   possible areas of application of the system include other games such as chess or checkers  pattern recognition  and various allocation and scheduling problems of operations research. the system is unsuitable for such symbol-manipulation problems as theorem proving and symbolic integration  other programming systems  such as lisp 1  mccarthy  et al.. 1  or snobol  farber. griswold. and polonsky. 1  are much to be preferred. however  these systems are awkward and inefficient in the problem areas involving the construction and recognition of complex  multi-dimensional  hierarchical objects  for which the heuristic programming system is most suitable. 
list of 