 
　　we shall make use of a programming calculus to derive the correct result a program is expected to compute. in this way  the decision by an oracle whether or not a result is correct can be derived formally from a specification  model  of the program  and thus the oracle can be mechanized. the debugging system consists mainly of a derivation editor and a fault finding program that collects an erroneous procedure. 
　　keywords: debugger  derivation editor  logic programming  specification  sub-specification  verified test. 
1. introduction 
　　the problem of correcting programs has troubled computer scientists since the very first computer programs. studies of the debugging process itself have  for example  led to a theory of skill acquisition  sussman  1  and to inferring theories  shapiro  1 . we shall take up the debugging problem from what seems to be a new point of view  namely a verified test that can lead to a mechanized oracle. 
　　let us first briefly take up the relations between formal derivations  verification and formal tests of programs before we go into details of the latter idea. the situation  especially for logic programs  kowalski  1  is currently changing its character entirely. the advent of derivation editors  eriksson  johansson and tarnlund  1  makes it possible to semi-automatic ally and formally derive correct non-trivial programs from their specifications  for example  derivations of the programs in  hogger  1  and  hansson and tarnlund  
1  and in  clark and darlington  1  are reported in  blomberg  carlsson and eriksson  1  and  johansson  1 . they also report on semi-automatical formal proofs of correctness of non-trivial programs  for example  the programs in  clark and tarnlund  1 . 
　　the idea of deriving a program from a specification is to construct a correct program. in contrast  the idea of verifying that a program is correct requires that the program is constructed by an oracle. when it is correct we intend to confirm this fact  but when it is not we have  eventually  to ask an oracle for another program to verify. however  when debugging a program we know that we can not confirm that a program is correct even after arbitrarily many tests  but still worse even a single test is not verified correct  since it has to rely on a judgment by an oracle i.e.  an oracle decides whether or not a computed result is correct. it is this judgment that we shall formalize so the answer can be proved correct and furthermore lead to a mechanization of the oracle. 
　　in order to carry out this idea we shall make use of a specification  model t  of a program  ip  in particular  a sub-specification  submodel oct  that exactly specifies a particular program. we shall use a derivation editor to derive an object w corresponding to an input 
object 1 from the sub-specification & that a program ip is supposed to compute i.e.  
 1  
this work was sponsored by the national swedish board for technical development  stu . 
1 	a. edman and s.-a. tarnlund 
 1  warren d.  pereira f.  and pereira l.  
decsystem-1 prolog  department of artificial intelligence  university of edinburgh  1. 

a. edman and s.-a. tarnlund 1 

