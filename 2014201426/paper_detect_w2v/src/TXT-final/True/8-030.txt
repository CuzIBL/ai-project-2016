planner: 	a language for proving theorems in robots 

carl 
project mac - massachuse 
summary 
     planner is a language for proving theorems and manipulating models in a robot. the 
language is b u i l t out of a number of problem solving p r i m i t i v e s together w i t h a h i e r a r c h i c a l c o n t r o l s t r u c t u r e . statements can be asserted and perhaps l a t e r withdrawn as the state of the world changes. conclusions can be drawn from 
these various changes in s t a t e . goals can be established and dismissed when they are s a t i s f i e d . the deductive system of planner is subordinate to the h i e r a r c h i c a l c o n t r o l s t r u c t u r e in order to make the language e f f i c i e n t . the use of a general purpose matching language makes the deductive system more powerful. 
preface 
     planner is a language for proving theorems and manipulating models in a robot. although we say that planner is a programming language  we do not mean to imply that it is a purely procedural language l i k e the lambda calculus in pure lisp. planner is d i f f e r e n t from pure lisp in that function c a l l s can be made i n d i r e c t l y through recommendations specifying the form of the data on which the f u n c t i o n is supposed to 
work. in such a c a l l the a c t u a l name of the c a l l e d f u n c t i o n is usually unknown. many of the p r i m i t i v e s in planner are concerned w i t h manipulating a data base. the language w i l l be explained by g i v i n g an o v e r - s i m p l i f i e d p i c ture and then attempting to correct any 
misapprehensions that the reader might have gathered from the rough o u t l i n e . the basic idea behind the language is a d u a l i t y that we f i n d between c e r t a i n imperative and d e c l a r a t i v e sentences. for example consider the statement  implies a b   . as it stands the statement is a p e r f e c t l y good d e c l a r a t i v e statement. it also has c e r t a i n imperative uses for planner. for example it says that we should set up a procedure which w i l l note whether a is ever asserted and if so to consider whether b should then be asserted. furthermore it says that 
we should set up a procedure that w i l l watch to see if it ever is our goal to t r y to deduce b and if so whether it is wise to make a subgoal to deduce a. similar observations can be made about the c o n t r a p o s i t i v e of the statement  implies a b   . statements w i t h universal q u a n t i f i e r s   conjunctions  d i s j u n c t i o n s   etc. also have both d e c l a r a t i v e and imperative uses. of course if what we have described thus f a r were a l l there was to the language  then there would be no p o i n t . from the above observations  we have constructed a language that permits both the imperative and d e c l a r a t i v e aspects of statements to be e a s i l y manipulated. 
planner uses a p a t t e r n d i r e c t e d i n f o r m a t i o n 
hewitt s i n s t i t u t e of technology 
r e t r i e v a l system that is more powerful than a r e t r i e v a l system based d i r e c t l y on association l i s t s . the language permits us to set up procedures which w i l l make assertions and automatically draw conclusions from other assertions. procedures can make recommendations as to which theorems should be used in t r y i n g 
to draw conclusions from an a s s e r t i o n   and they can recommend the order in which the theorems should be applied. goals can be created and automatically dismissed when they are s a t i s f i e d . objects can be found from schematic or p a r t i a l d e s c r i p t i o n s . properly formulated descriptions have t h e i r own imperative uses for the language. p r o v i s i o n is made for the fact that statements that were 
once true in a model may no longer be true at some l a t e r time and that consequences must be 
drawn from the fact that the state of the model has changed. assertions and goals created w i t h i n a procedure can be dynamically protected against interference from other procedures. procedures w r i t t e n in the language are extendable in that they can make use of new knowledge 
whether it be p r i m a r i l y d e c l a r a t i v e or imperative in nature. the l o g i c a l deductive system used by planner is subordinate to the h i e r a r c h i c a l c o n t r o l structure of the language. planner has a sophisticated deductive system in order to give us greater power over the d i r e c t i o n of the computation. in several respects the deductive system is more powerful than the q u a n t i f i c a t i o n a l calculus of order omega. our c r i t e r i a for an ideal deductive system contrast w i t h those that are used to j u s t i f y r e s o l u t i o n based systems. having only a single r u l e of inference  r e s o l u t i o n provides a very parsimonious l o g i c a l system. workers who b u i l d r e s o l u t i o n systems hope that t h e i r systems can be made e f f i c i e n t through acute mathematical analysis of the simple s t r u c t u r e of t h e i r deductive system. we have t r i e d to design a sophisticated deductive system together w i t h 
an elaborate c o n t r o l s t r u c t u r e so that lengthy computations can be c a r r i e d out without blowing up. of course the c o n t r o l s t r u c t u r e can s t i l l be used when we l i m i t ourselves to using resol u t i o n as the sole r u l e of inference. indeed  r. b u r s t a l l has suggested that we might t r y to implement some of the w e l l known r e s o l u t i o n strategies in planner. because of i t s extreme 
h i e r a r c h i c a l c o n t r o l and i t s a b i l i t y to make use of new imperative as w e l l as d e c l a r a t i v e 
knowledge  it is f e a s i b l e to carry out very long chains of inference in planner. 

matchless 
　　　　matchless is a p a t t e r n d i r e c t e d programming language that 	is used 	in the implementation of planner. 	matchless is used both in the i n t e r n a l workings of planner and as a t o o l in the deductive system i t s e l f . 	the most important f u n c t i o n in matchless is assign  which matches i t s f i r s t argument which is t r e a t e d as a p a t t e r n to i t s second argument. 	the reason why the assignment 	f u n c t i o n in matchless is c a l l e d assign  w i l l be explained l a t e r when we discuss functions that have values. 	the p r e f i x operator $  i n d i c a t e s t h a t the v a r i a b l e which follows it is to be assigned a value. 	the 
various types f o r v a r i a b l e s and t h e i r abbrev i a t i o n s are; 	p t r f o r p o i n t e r   	atom f o r atom  seg f o r segment  	f i x f o r f i x e d point number  f l o a t for f l o a t i n g point number  and expr for s-expression. 	a segment v a r i a b l e is always assigned the smallest possible leftmost segment. 	below we give some examples of the values of p a t t e r n v a r i a b l e s a f t e r assignment statements have been executed. 	we use the character - to d e l i m i t segments. 	the characters { and } are used to d e l i m i t f u n c t i o n c a l l s . 
{prog   a p t r    h atom   c seg   {assign   $ a k $ h $ c    1  k b 1 a   } } a gets the value  1  h gets the value b c gets the value -1 a-
{prog   c seg   h atom   a p t r     {assign   $ c $ h k $ a   a l b k q       c gets the value -a 1h gets the value b a gets the value q 
{ p r o g     f i r s t p t r    middle seg    l a s t p t r     {assign    $   f i r s t $   m i d d l e $   l a s t    1 1 }} f i r s t gets the value 1 
middle gets the value -1-
l a s t gets the value 1 
	{prog   a p t r   	 b p t r     
     {assign   $  $ b   d  }} f a i l s because there is only one element in   d   . 
{prog   a atom   
     {assign  $ a  1   } } f a i l s because  1  is not an atom. 
an expression t h a t consists of the p r e f i x operator $$ followed by a v a r i a b l e w i l l only match an object equal to the value of the v a r i a b l e . 
{prog   a seg   
{assign   $ a$$a   1 1 1 }} a gets the value - 1 1-
{prog   a seg   b seg    assign   $ a x $$a $-b  abxdxabxdq }} a gets the value -a b x db gets the value - q -
an expression that consists of the p r e f i x operator $  followed by a v a r i a b l e w i l l match the value of the v a r i a b l e if it has one  otherwise the v a r i a b l e is assigned a value. we s h a l l use the pseudo atom novalue to i n d i c a t e that a v a r i a b l e does not have a value. 
{prog   a p t r     {assign  $ a 1 }   a gets the value 1 
{prog       a 1  p t r     {assign  $ a 1     a is i n i t i a l i z e d to 1 on entrance to the 
prog. consequently the assignment statement f a i l s . 
	{prog   a 	seg   
　　　{assign   $ a $ a    1 1 1   }   f a i l s because once a is assigned a v a l u e   a can only match a segment that is equal to the value of a. if a p a t t e r n in an assignment statement cannot match the value of the second argument of the assignment statement then the assignment statement r e t u r n s the value       otherwise the 
value 	t . 
     examples of p a t t e r n f u n c t i o n s are d i s j for d i s j u n c t i o n   neg for negation  conj for c o n j u n c t i o n   and star for kleene star in general regular expressions. we use the characters   and   to d e l i m i t p a t t e r n expressions that are to be i n t e r p r e t e d as segments. 
 prog   a p t r  b p t r    c p t r     {assign   a conj $ a$ b $ c   a  j }} a gets the value -1 zb gets the value -1c gets the value - 1 -
	{prog     x seg  	 c seg   
{assign   $ x disj 1   1  $ c   a 1 1 }} x gets the value -a 1c gets the value - 1 -
	{prog 	    x p t r     
{assign    star a  $ x  	 a a a a   }   x gets the value a 
pattern f u n c t i o n s do not produce values. it does not make any sense to evaluate {assign    d i s j  1   1      1   } since a segment l i k e   d s j  1   1    is never allowed to stand 
alone. there is a l i b r a r y of p a t t e r n functions already defined in the language. for example   is quote. thus { ssa  w i l l only match $$a. a palindrome is defined to be a l i s t that reads the same backwards and forwards. thus  a  b   b  a           and   a b   a b   are palindromes. more f o r m a l l y in matchless  a 
palindrome can be defined as a p a t t e r n f u n c t i o n of no arguments: 

-1-

 def palindrome 
 kappa      {disj 
1 
	{block   x ptr   	 $ x palindrome $$x }    
the form kappa is like the lambda of lisp except that it is used in pattern functions. the above definition reads  a palindrome is a l i s t such that it is    or it is a l i s t which begins and ends with x with a palindrome in between.  the pattern function block causes the variable x to rebound to the pseudo-atom novalue every time that palindrome is called. the function reverse is defined to be such that {assign  {reverse $$x} $$y} is true only if the value of x is the reverse of the value of y. the definition of reverse is 
 def reverse 
 kappa    x ptr    
 fatomicj$$x  
 uj 
{block     f i r s t - o f - x ptr  rest-of-x seg   
{assign   $ first-of-x$ rest-of-x $$x} 
	 reverse 	 $$rest-of-x  $$first-of-x     }   
the above definition says that an expression y is the reverse of x if whenever y is an atom then it is equal to x  otherwise let first-of-x by the f i r s t member of x and rest-of-x be the rest of 
x and the pattern   reverse  $$rest-of-x    $$first-of-x  must match y. essentially a l l the ideas for the pattern functions come from post productions  general regular expressions  convert  and lisp. 
planner 
     now that we have described matchless  we are in a position to begin a detailed description of planner. consider a statement that w i l l match the pattern  implies $ a $ b . the statement has several imperative uses. x l : if we can deduce $$a  then we can deduce $$b. 
in planner the statement xl would be expressed as  antecedent o  $$a {assert $$b}  which means that $$a is declared to be the antecedent of a theorem such that if $$a is ever asserted in such a way as to allow the theorem to become activated then $$b w i l l be asserted. 
x1: if we want to deduce $$b  then establish a subgoal to f i r s t deduce $$a. 
in planner the statement x1 would be expressed as 
 consequent      $$b {thprog     goal $$a} {assert-consequent}}  which means that $$b is declared to be the consequent of a theorem such that if the subgoal $$a can be established using any theorem then the consequent $$b w i l l be asserted. we obtain two more planner statements analogous to the above by considering the contrapositive of  implies $$a $$b  which is  implies  not $$b   not $$a  . 
　　　the following three forms are the ones which are presently defined in the language for satisfying requests made in the body of procedures: 
　　　 consequent $ declaration $ consequent $ expression  declares that $$consequent is the consequent of the theorem. the theorem can be used to try to establish goals that match the pattern $$consequent. whether or not the theorem w i l l actually succeed in establishing the goal depends on $$expression. however  no theorem can be activated for a goal which is already currently activated for that goal. the only way that a theorem that begins with the atom consequent can be called is by the function goal. 
　　　 antecedent $ declaration $ antecedent $ expression  declares that $$antecedent is the antecedent of the theorem. the theorem can be used to try to deduce consequences from the fact that a statement that matches $$antecedent has been asserted. the only way that a theorem that begins with the atom antecedent can be called is by the functions assert and concludef rom. 
　　　 erasing $ declaration $ statement $ expression  can be used to try to deduce consequences from the fact that a statement that matches $$statement has been erased. the only way that a theorem that begins with the atom erasing can be called is by the function erase. 
　　　some of the functions in planner are listed below together with brief explanations of their function. examples of their use w i l l be given immediately after the definition of the primitives below. the primitives probably cannot be 
understood without trying to understand the examples since the language is highly recursive. in general planner w i l l try to remember everything that it is doing on a l l levels unless there is some reason to forget some part of this information. in the implementation of the language special measures must be taken to ensure that variables receive their correct bindings. the most efficient way to implement the language is to put pointers on the stack back to the place where the correct bindings are. value cells do not provide an efficient means of implementing the language. the default response of the language when a simple failure occurs is to back track to the last decision that it made and try to f i x it up. 
　　　{{ thval}$ expression $ bindlngs $state} w i l l evaluate the value of $$expression with bindings which are the valuj of $$bindings and local state which is the va'ue of $$state. at any given time planner expressions are being evaluated in a local state. this local state determines what changes have been made to the data base i.e.  what erasures and assertions have been made. 

-1-

　　　{{  state}} returns as i t s value the current local state. 
　　　{ {   update} $ state} w i l l update the data base according to the state which is the value of $$state. 
　　　{ {   assert} $ statement {recommendation}  where 
 def recommendation 	 kappa      
 disj 
1 
  
 or  star {recommendation}   
 and  star {recommendation}   
 subset  star{recommendation}   
 sequence  star  recommendation}  }   
if the statement $$statement has already been asserted then the function assert acts as the null instruction. otherwise  the function assert causes the statement $$statement to be asserted with a recommendation as to how to try to draw some conclusions from the fact that $$statement has been asserted. the    recommendation means that we should take no action. the recommendation   excludes no theorem from consideration in trying to deduce consequences from the value of $$statement. the disjunction of a l i s t of recommendations requires that each recommendation be tried in turn u n t i l one works. the conjunction of a l i s t of recommendations requires that they a l l work in the order in which they appear in the conjuction. in a sequence of recommendations  planner w i l l try each recommendation in turn regardless of whether any given one succeeds or not. the subset of a l i s t of recommendations trys a l l the sublists of the l i s t in a l l possible orders. if the recommendation of an assertion statement fails or if a lower level failure backs up to the assertion then the assertion that $$statement holds is withdrawn. 
　　　{ {   conclude-from} $ statement {recommendation}  w i l l cause planner to try to draw conclusions from the statement $$statement using the recommendation. 
　　　{ {   assert-consequent} {recommendation}  causes the consequent in which the function assert-consequent appears to be asserted. the function should be used only in theorems that begin with the atom consequent. after the function assert-consequent has been evaluated  execution w i l l cease in the theorem in which the function appears. 
　　　{ {   permanent-assert} $ statement {recommendation}  is like the function assert except that $$statement continues to hold even if a failure backs up to the call to permanentassert. 
	{ {   temporary-assert} 	$ statement 
{recommendation}  is like assert except that $$statement w i l l be withdrawn if everything works out. in other words  $$statement is a temporary result that w i l l go away after we solve our current problem. 
　　　{ {   erase} $ statement {recommendation}   if there is a statment that matches $$statement  then it is erased and then the recommendation is followed. otherwise  the function erase generates a simple failure. if a simple failure backs up to the function erase  then the statement that was originally erased is restored and the whole process repeats with another statement that has been proved. the function erase is a partial l e f t inverse of the function assert. 
　　　{{  proved } $ statement} tests to see if a statement that matches $$statement has already been asserted. 	if there is such a statement  then the variables in the pattern $$statement are bound to the appropriate values. 	if there is no such statement  then a simple failure is generated. 	if a simple failure backs up to the function proved   then the variables that were bound to the elements of the statement that was found f i r s t are unbound and the whole process repeats with another statement that has been proved. 	planner is designed so that the time it takes to determine whether a statement that 
matches $$statement is in the data base or not is essentially independent of the number of i r r e l evant statements that have already been asserted. when an s-expression is asserted planner remembers the position of every atom that occurs in the s-expression. two expressions are similar on retrieval only to the extent that they have the same atoms in the same position. if matchless had an efficient parallel processing capability then the retrieval could be even faster since we would do the look-ups on atoms by position in parallel. 
　　　{ {   proven}$  pattern} w i l l return as value a l i s t whose f i r s t element is the number of remaining elements in the l i s t and such that the remaining elements of the l i s t are statements that have been asserted and match the pattern $$pattern. 
　　　{{  for-proved} $ declaration $  pattern $  body  where body is of type seg w i l l attempt to excecute $$body once for every proved state-
ment that matches the pattern $pattern. 
　　　{ {   proveable} $ pattern {goalrecommendation}} w i l l return as i t s value a l i s t 
whose f i r s t element is the number of remaining elements in the l i s t and such that the remaining elements of the l i s t are the proveable statements that match the pattern $$pattern and can be proved using the recommendation. note that if there are an i n f i n i t e number of proveable state-
ments that match the pattern $$pattern then the 
-1-
function proveable w i l l not converge. 
　　　{ {   goal} $ statement  goal-recommendation}} where 
 def goal-recommendation 	 kappa      
	{block 	  theoremlist seg   
 disj 
  f i r s t $ theoremlist  
 only $ theoremlist }}   
a goal-recommendation of   f i r s t $ theoremlist  means that the theorems on $$theoremlist are the f i r s t to be used to try to achieve the goal which is the value of $$statement. on the other hand a goal recommendation of  only $ theoremlist  means that the theorems on $$theoremlist in the order given are the only ones to be used to try to achieve the goal. the f i r s t thing that the function goal does is to evaluate {proved  $$statement}. if the evaluation produces a failure then the goal recommendation is followed to try to find a theorem that can establish $$statement. 
　　　{ {   goals} $ pattern} returns as its value a l i s t of the currently active goals. 
　　　{{  genfail}  causes a simple failure to be reported above. 
　　　{{  genfail} $ message  causes a failure to be reported above with the message the value of $$message. 
　　　{ {   fail } $  expr $ failclauses} where failclauses is of type seg evaluates $$expr. if the evaluation does not produce a failure  then the value of $$expr is the value of the function f a i l   . if the message of the failure matches the f i r s t element of a clause then the rest of the elements of the clause are evaluated. otherwise  the failure continues to propagate upward. 
　　　{ {   f a i l t o } $ tag} causes failure to the tag $$tag which must previously have been passed over. 
　　　{{ m b l k f a i l } } causes the current block to f a i l . 
　　　{ {   t h f a i l } } causes the current theorem to f a i l . 
　　　{ {   end}} causes the current theorem to cease execution. 
　　　{ {   goal-end}} 	causes execution to cease on the current theorem and the current goal to be dismissed without being asserted. 
　　　{ {   finalize-from} $ tag} causes a l l actions that have been taken since the last time that the tag $$tag was passed over to be finalized. finalize statements are mainly used to save storage. the next statement to be executed is 
the one immediately after the call to finalizefrom. 
　　　{{  thfinalize}} causes a l l actions that have been taken in the current theorem to be finalized. 
　　　{{  blkfinalize}} causes a l l actions that have been taken in the current block to be finalized. 
　　　{{  defth} $ theorem-name $  theorem} defines $$theorem-name to be the name of the theorem $$theorem. 
　　　{{  thcond} $  clauselist } where clauselist if of type seg is like the lisp function cond except that it treats a simple failure in the f i r s t element of a clause like a   . 
　　　{{  thprog} $ variablelist $  progbody} where progbody is of type seg is like the lisp function prog except that it can handle the 
mechanism of failure. 
　　　{ {   thand} $  conjuncts} where conjucts is of type seg is like the lisp function and. 
　　　{{  thor} $ disjuncts} where disjuncts is of type seg is like the lisp function or. 
　　　{{  thrplaca} $ a $ b} is like the lisp function rplaca except that the old value of $$a is remembered so that it can be restored in case of failure. 
suppose that we know that  subset a b   
 subset a d    subset b c   and   f o r - a l l  x y z   implies  and  subset x y   subset y z    subset x z    are true. how can we get planner to prove that  subset a c  holds  we would give the system the following theorems. 
 subset a b  
 subset a d   subset b c  
 defth backward 
 consequent    x ptr   z ptr    
 subset $ x $ z  
{thprog   y ptr   
{goal  subset $ x $ y    f i r s t backward } 
{goal  subset $$y $ z   only backward } 
{aasert-consequent}}   
now we ask planner to evaluate {goal  subset a c } then it looks for a theorem that it can activate to work on the goal. it finds backward and binds x to a and z to c. then it makes  subset a $ y  a subgoal with the recommendation that backward should be used f i r s t to try to achieve the subgoal. the system notices that y might be d  so it binds y to d. next  subset d c  is made a subgoal with the recommendation that only back-
ward be used to try to achieve i t . thus backward is called recursively  x is bound to d  and z is bound to c. the subgoal  subset d $ y  is established causing backward to again be called 

-1-

recursively with x bound to d and z determined to be the same as what the old value of y ever turns out to be. but now the system finds that it is in trouble because the new subgoal  subset d $ y  is the same as a subgoal on which it is already working. so it decides that it was a mistake to try to prove  subset d c  in the f i r s t place. thus y is bound to b instead of d. now the system sets up the subgoal  subset b c  which is established immediately. we use the above example only to show how the rules of the language work in a t r i v i a l case. if we were seriously interested in proving theorems in planner about the lattice of sets  then we would construct a f i n i t e lattice as a model and use it to guide us in finding the proof. 
　　　suppose we give planner the following theorems in addition to backward: 
 subset d b   subset a b  
 defth forward 
 antecedent 
   y ptr   z ptr    subset $ y $ z  thprog   x ptr   
{goal  subset $ x $$y } 
     {assert  subset $$x $$z   or forward   }    now if planner is asked to evaluate {assert  subset b e    }  it w i l l look around for a theorem which w i l l enable it to deduce consequences of  subset b c . the system w i l l bind y to b and z to c in forward  and then generate the subgoal  subset $ x b . the subgoal  subset a b   is easily established. thus we assert  subset a c  as a fact and are unable to deduce any consequences from  subset a c . 
　　　theorems in planner can be proved in much the same way used for ordinary theorems. for example suppose that we has the following two theorems:  defth th1  consequent 
   a ptr   c ptr    subset $ a $ c  
thprog    
{thprog    x {arbitrary}  ptr   
{hypothetical  element $$x $ a  
 element $$x $ c }} 
       {assert-consequent  }}   on entrance to the inner thprog the variable x w i l l be bound to a freshly created symbol. the function hypothetical w i l l verify that  element $$x $ c  can be proved from  element $$x $ a . the above theorem is the constructive analogue of   f o r - a l l  a c   implies   f o r - a l l  x   implies  element x a   element x c     subset a c       . 
 defth th1  consequent    x ptr   s ptr    element $ x $ s  thprog   r ptr   
fgoal  element $ x $ rj} 
{goal  subset $ r $ s j 
     {assert-consequent  }}   the above theorem is the constructive analogue for   f o r - a l l  x s  {implies  there-exist  r  
 and  element x r   subset r s     element x s   . 
from the above two theorems we can now prove the following theorem: 
 consequent    a ptr   c ptr    subset $ a $ c  thprog   b ptr   
goal  subset $ a $ b   goal  subset $$b $ c j 
	{assert-consequent 	 }}  
the above theorem is the constructive analogue for   f o r - a l l  a b c   implies  and  subset a b   subset b e      subset a c  . one way in which the theorem can be established is by showing that the evaluation of the following expression w i l l not result in a failure: 
{thprog 
   a {arbitrary}  ptr  
  b {arbitrary   ptr  
  c {arbitrary}  ptr  assert  subset $$a $$b } assert  subset $$b $$c } 
　　　　　　{goal  subset $$a $$c }j the above example shows how it is sometimes convenient for planner to regard the statement of a theorem simply as an abbreviation for the proof of the theorem. we would like to be able to prove planner theorems with loops in them. in order to do this it is necessary to know the intentions of the internal structure of the theorem. 

-1-

	conclusion 	acknowledgements 
     the most natural way to do a proof by the preceeding is a report on some of the contradiction. another type of problem that work that i have done as a graduate student planner w i l l not solve very naturally is to at project mac. reproduction in f u l l or in nonconstructively show that there is some part is permitted for any purpose of the object x such that  p x  is true. we shall united states government. we would like to call the logistic system based purely on the thank the various system  hackers  that have primitives of planner  robot logic . robot made this work possible: d. east lake  r. logic is a kind of hybrid between the classical greenblatt  j. holloway  t. knight  g. mitchell  logics such as the quantificational calculus s. nelson  and j. white. we had several 
and intuitionism  and the recursive functions useful discussions with h. v. mcintosh and a. as represented by the lambda calculus and post guzman on the subject of pattern matching. productions. the semantical definition of s. papert and t. winograd made suggestions for truth in robot logic complicated by the improving the presentation of the material in existence of the primitive erase. there are this paper. 
interesting parallels between theorem proving 
and algebraic manipulation. the two fields bibliography face similar problems on the issues of simplification  equivalence of expressions  1 black  f. a deductive question answering intermediate expression bulge  and man-machine system  doctoral dissertation  harvard. interaction. in any particular case  the 1 green  c. c. and raphael  b. the use of theorems need not allow planner to lapse into theorem-proving techniques in question-answering i t s default conditions. it w i l l sometimes systems. proceedings of 1rd national conf. acm. 
happen that the heuristics for a problem are 	1 	guzman  a. and mcintosh  h. v.  convert  very good and that the proof proceeds smoothly 	communications of acm  aug. 1. u n t i l almost the very end. 	at the point the 	1 	hewitt  c.   planner: a language for* proving program gets stuck and lapses into default 	theorems  a. i. memo 1  july 1. conditions to try to push through the proof. 	1 mccarthy  j . ; abrahams  p. w.; edwards d. j . ; on the other hand the program might grope for a 	hart  t. p.; and levin  michael i. 	lisp 1 while trying to get started and then latch 	programmers manual. 
onto a theorem that knows how to polish off the 	1 mccarthy  j. and hayes  p.  some philosophical problem in a lengthy but foolproof computation. 	problems from the standpoint of a r t i f i c i a l planner is designed for use where one has great 	intelligence. stanford a. i. memo 1. number of interrelated procedures  theorems  	1 	newell  a.  shaw  j. c.  and simon  h. a.  that might be of use in solving some problem 	1. report on a general problem-solving program  along with a general plan for the solution of 	proceedings of the international conference the problem. 	the language helps to select 	on information processing  paris: unesco house. procedures to refine the plan and to sequence 	1 	slagle  j. experiments with a deductive questhrough these procedures in a flexible way in 	tion-answering program  communications of acm case everything doesnft go exactly according to 	december 1. plan. 	the fact that planner is phrased in the form of a language forces us to think more systematically about the primitives needed for 
problem solving. we do not believe that computers w i l l be able to prove deep mathe-
matical theorems without the use of a hierarchical control structure. nor do we believe that computers can solve d i f f i c u l t problems where their domain dependent knowledge is limited to finite-state difference tables of connections between goals and methods. 
-1-
