. hybrid architectures have been used in several recent knowledge representation systems. this paper explores some distinctions between various hybrid representation architectures  focusing in particular on systems built around restricted representation languages this restricted language architecture is illustrated by describing kl-two  a hybrid reasoner based on the restricted representation facility rup. the bulk of this paper discusses kltwo  its subcomponents  and the techniques used to interface them. 
　many recent knowledge representation systems have been based on hybrid architectures. these systems are hybrids in that they do not attempt the entire knowledge representation task with a single inferential component. instead  they combine several reasoners into a complex whole. the advantages to be gained by this hybrid approach vary from system to system  but often include increases in the system's computational efficiency  the coverage of its representation language  or the ease of expressing knowledge with the system. 
　the topic of this paper is a new logic-based hybrid representation system. this system  called kl-two  is one which i have been developing with my colleagues over the past two years. although kl-two has features in common with other hybrid reasoners  it differs very significantly from other systems in the way the common features are used. the purpose of this paper is thus twofold  to describe the features that kl-two possesses  and to stress the differences in approach between kl-two and other hybrid reasoners. 
hybrid representation architectures 
　the hybrid representation scheme most familiar to the general ai audience is that embodied by such systems as krypton  brachman  fikes  & levesque  1  or the theorem-proving system of schubert and his colleagues  schubert  papalaskaris  & taugher  1 . these systems start with a theorem prover for first-order logic  fol   and augment it with special-purpose inference systems. these special-purpose components are designed to perform efficiently certain forms of reasoning that would be computationally expensive for the theorem prover to perform by itself. in essence  for their restricted domains  these augmentations bypass the normal proof procedure of the theorem prover  and cut out some of its combinatorial search. 
1
   this restorer  wot tupporttd by the advonct rtttorch projact agency of tht dtportment of dtftntt. under contract no. no1-c-1. for example  krypton augments stickel's connection graph theorem prover with a device for terminological reasoning. schubert and his colleagues added to their theorem prover components to reason about types  part-whole relationships  temporal ordering  and color. in this paper  i will refer to systems such as these as theorem prover-based hybrid reasoners. 
　one important characteristic of these theorem prover-based hybrids is that the hybrid architecture may enhance the overall efficiency of the system  but will not change its overall expressiveness. anything which can be represented in the special-purpose augmentations could also be represented in the unadorned theorem prover  albeit less conveniently or efficiently . the augmentations don't extend the expressive power of the theorem prover as much as they circumvent its computational inefficiencies. 
　kl-two has a substantially different architecture from that of theorem prover-based systems. this alternative architecture was first suggested by mcallester  1  1 . he argued that one need not base a representation system on a full inference system for the predicate calculus. indeed  given that full first-order logic is only semi-decidable  and that even the best theorem-provers are prone to time-consuming search  there is good reason to consider alternative representation schemes. mcallester proposed building knowledge representation systems around a fairly simple restricted device  his reasoning utility package  rup for short . rup provides only a subset of the inferential power of a first-order theorem prover   roughly the propositional subset  but is computationally much more efficient. to restore some of the missing representational power  one extends rup with special-purpose reasoners tailored to one's application. 
　other restricted languages have been proposed for this kind of hybrid system  for example  the relevance versions of propositional logic and fol proposed by levesque  1  and patel-schneider  1  . i use the term restricted language hybrid reasoners to refer to hybrids built around restricted systems such as those of mcallester  levesque  or patel-schneider. 
　the advantages of the restricted language approach become apparent if the subcomponents that extend the central reasoner are themselves restricted but efficient. the resulting system will not have the full representational expressiveness of a first-order language  but in exchange it will have the potential for reasoning efficiently. this approach has a very attractive promise: if one can make do with the expressive limitations of a restricted language hybrid  one may have a very efficient system indeed. 

1 m. vllaln 
klrtwo 
　kl-two it an experiment with the restricted language approach to hybrid reasoning. the kl-two hybrid is composed of two subreasoners: penni  a modified version of rup  and nikl  a terminological reasoner that descended from kl-one. in the pages that follow i will describe both penni and nikl in some detail  and will explain how the two systems are interfaced. but first let me give a general description of kl-two for the reader to keep in mind through the discussion ahead. 
　kl-two'a subcomponents  penni and nikl  are complimentary reasoners. the representation task is divided up between them  roughly as follows. 
penni contains a database of propositions assertions. 
the language of penni is essentially the propositional subset of first order predicate calculus  a more precise definition follows . this language does not contain any quantification. 
　penni's simple propositional framework is extended by kl-two's second subreasoner  nikl. nikl is a terminological reasoner similar to kl-one  brachman & schmolze  1  or the terminological component of krypton  brachman et al.. 1 . as i will explain below  the terminological statements one can make in nikl define a simple class of universally quantified sentences. these sentences can be applied in penni to extend penni's propositional language with a limited form of quantification. 
this language doesn't contain any quantifiers  i will say more about this below. 
　the database permits incremental assertions and retractions. propositions can be added in any order; following each addition a number of deductions will be made. retractions can also be performed at any time. the rup database is built as a truth maintenance system  or tms   and permits all the useful operations that have been associated with such systems. these include the ability to justify a deduction by returning the exact set of user-asserted propositions that entail it  the ability to retract efficiently the logical consequences of a proposition when that proposition is itself retracted  and the ability to perform fast dependency-directed backtracking. these features are extraordinarily useful: eloquent arguments for them have been made by mcallester  1; 1   doyle  1   and others. 
　i mentioned above that the language of penni does not include quantification. the decision not to include quantifiers was made by mcallester when he designed rup. and follows from his view of logical reasoning as consisting of two separate processes  deduction and instantiation. deduction is the process of deriving the consequences of a set of propositions  whereas instantiation is the process of applying quantified sentences to produce new propositions. mcallester  1  argues that within certain constraints deduction can be performed relatively efficiently. instantiation  on the other hand  is very difficult: often the choice of 


　the architecture of kl-two can be summarized in this way: penni provides propositional reasoning and nikl provides limited quantificational reasoning. this is illustrated by figure 1. 
penni 
penni is a modified version of mcallester's rup  1; 
1 . the features of penni i will describe in this section are thus originally features of rup. 
　at the heart of penni is a database of propositions. the language of this database is the quantifier-free predicate calculus with equality. this language is defined as containing: 
1. expressions of the form  p a    q a b  ... at in  man john  or  offspring john mary ; 
1. expressions 	of 	the 	form 	 = 	a 	b   	as 	in 
 =  grade bill  b+   
1. boolean combinations of  1  and  1   art in   -    father john   person john  . 
which sentences to instantiate  and when to do so  can only be determined efficiently on the basis of the specific reasoning domain. the approach embodied by rup  and hence by penni  is to focus on providing a good efficient mechanism for deduction 1 and to remain uncommitted as to how to perform instantiation. 
　in rup  the choice of how to instantiate quantified sentences is left up to the user. this is facilitated by providing  hooks  into the database that allow the user to augment its language. the hooks are realized by the mechanism of demon invocation; rup provides several varieties of if-added and if-needed demons. the version of rup used in kl-two contains 
mcallester's demon invocation mechanisms. 	however  as 
i mentioned above  kl-two can provide a class of quantified inferences efficiently and automatically  without requiring the use of demons. these inferences are performed by nikl  kl-two's second subreasoner. 
nikl 
nikl1 is a terminological reasoner that descends from 
kl-one  brachman & schmolze 1 . 	as with kl-one  
nikl allows one to make statements about the terms that describe a domain. 
nikl distinguishes two kinds of terms  concepts and 
roles. 	semantically. these correspond respectively to 
1-place and 1-place relations. for example  the nikl concept person corresponds to the predicate that is 


true of all entities which are persons the nikl role offspring corresponds to the relation that holds between any individual and its children 
primitive and complex terms 
　nikl further distinguishes between primitive and complex terms. primitive terms are simply terms for which no definition can be given. person  for example  is a primitive concept  since the criteria for being a person defy complete description. similarly  offspring is a primitive role. 
　in nikl  complex terms are built out of other terms  which themselves can be simple or complex . to create complex terms  nikl provides a set of term constructors which combine concepts and roles to produce new concepts and new roles. several of these constructors  along with their intended semantics are summarized in figure 1. 
	m. vilain 	1 
corresponds to the 1-place abstracted relation 
  offspring x y  &  male y  
this relation holds between something and any of its 
offspring which are male  e.g.  between something and its sons . 
naming terms 
　to make complex terms more convenient  nikl allows them to be assigned names. for example  the complex terms i have just described  formulas 1 and 1  can be assigned their rightful names by means of the following nikl statements. 
 let father  cmeet parent man   
 let son  vrdiff offspring male    1  
 1  

for example  consider the complex concept 
	 cmeet parent man  	 l  
this concept corresponds in turn to a complex predicate which can be notated with the  -expression 

this complex predicate holds true of everything for which the parent and man predicates hold true  e.g.  it holds true of fathers . similarly  the complex role 
	 vrdiff offspring male  	 1  
　note that assigning a name to a complex term is tantamount to giving a definition to that name. this definition can be interpreted as a first-order sentence. for example  the assignments in formulas 1 and 
1 correspond to the following definitions. 

for more examples of nikl definitions  see figure 1. 
subsumption and classification 
　the semantics of nikl lead naturally to a relation that holds between nikl terms  that of subsumption. a term subsumes another term if the meaning of the second entails the meaning of the first. more precisely  in the case of concepts  we say that a 
concept c1 subsumes a concept c1 iff 

subsumption between roles has a similar definition. 
　considering the examples from figure 1  we can see that the concept animal directly subsumes the concepts herbivore  carnivore  and big-animal. there are other concepts that animal subsumes in a 
　derived way  for example big-carnivore  or the 
concept 
 cmeet herbivore carnivore  

1 m. vilain which would appropriately be named omnivore. stating these subsumption relations in terms of first-order sentences  we have 

　subsumption relations in nikl are computed in an operation known as classification. given a nikl term to and a database of  pre-classified  nikl terms  the classifier locates all the database terms which subsume to. this computation effectively installs to in the nikl database; to allow for efficient subsumption queries  the computation is then cached. 
	for example  	classifying the omnivore concept  i.e. 
 cmeet herbivore carnivore   with respect to the database in figure 1 would install omnivore in the database. it would be given as subsumers the concepts herbivore  carnivore  animal  and all other concepts that subsume these. 
　in addition to computing subsumption relations  the classifier performs a canonicalization operation on the term it is classifying. for example  the concept 
 cmeet animal  crestrict size big  
 cmin  vrdiff eats animal  1   
would canonicalize to the pre-existing concept 
 cmeet big-animal carnivore  
which 	is 	the 	concept 	that 	has 	been 	named 
big-carnivore. 
　the subsumption relation and the operation of classification provide nikl with much of its representational strength. in kl-two  they also play a crucial role in the interface between nikl and penni. 
interfacing penni and nikl 
　as i described above  penni holds a database of grounded propositions  and nikl contains definitions which can be read as universally quantified sentences. terms in nikl  such as the concept herbivore  correspond to the predicate names of propositions in penni  such as herbivore in  herbivore rabbit-1  . 
the kl-two interface exploits this correspondence: it operates by applying in penni sentences from nikl. 
　consider for example the database in figure 1. among the sentences derivable from that database is 
		 1  
if  herbivore rabbit-1  were asserted in penni  then by applying formula 1 in penni  kl-two could infer automatically  animal rabbit-1 . 
　the key issue here is determining which nikl sentences should be instantiated in penni  and when this instantiation should take place. in kl-two  these decisions are arrived at using a carefully controlled mixed regimen of forward and backward reasoning. the forward reasoning takes place when a new proposition is asserted of an individual: the forward reasoner is invoked to determine which nikl sentences may as a result be applied to the individual. the backward reasoner is invoked to answer a query: it will apply sentences that have been selected as appropriate by the operation of the forward reasoner. 
the forward reasoner 
　the forward reasoner is brought into action when new propositions are asserted of some penni individual i. its job is to combine all that has been asserted of i  and determine from this which sentences can be applied to i  without actually applying them . it does so by creating for i a nikl concept called the msg of i  for most specific generalization of i . this concept captures an abstraction of that which is known of i  and in turn determines which nikl sentences can be applied to i. these sentences are simply those that encode the subsumption relations between the msg of i and other concepts in the nikl database. 
　this is best clarified by an example. consider again the nikl database of figure 1. let's say now that the following propositions were added to penni. 
 big-animal al  
 animal a1  
 eats al a1  
this might correspond to the situation where you're in the african plains  and you've just noticed near you some big animal eating another animal 
　the forward reasoner abstracts these propositions into the concept caf  the msg for a l : 
 cmeet big-animal 
 cmin  vrdiff eats animal  1   
to see that this abstraction is valid  note that semantically it corresponds to 
applying 	the 	valid proposition 
 big-animal al  & 1 y  eats al y  
&  animal y  
by constructing ca1  the interface has effectively abstracted what is known of a l . to determine which sentences may be applied to a l   the interface next classifies caf. the classifier in turn locates every existing concept which subsumes caf  in this case carnivore. big-animal  animal  and any other subsumers of these concepts not indicated in figure 1 . these subsumption relations encode the sentences 

　there is actually one more sentence which is applicable here  and it is determined by virtue of the classifier's canonicalizing caf. indeed  given the figure 1 database  caf canonicalizes to 
 cmeet carnivore big-animal  
which is the concept named big-carnivore. in essence the canonicalization operation revealed 

　the forward reasoner has now discovered all nikl sentences applicable to a l . at this point it chooses to instantiate only one of these  the one derived by canonicalization. this is done by asserting in penni 
  big-animal al  &  eats al a1  &  animal a1   
--   big-carnivore al  

from this  the penni tms will automatically infer 
 big-carnivore al  
we call this proposition the msg predication of a l . 
　because the classifier caches subsumption relations  all other nikl sentences applicable to al will be retrievable later  as needed   and need not be instantiated now. additionally  the msg predication being true in penni will allow demons that are indexed by the proposition's predicate name to fire  including  for example  a demon encoding the rule that you ought to run away from a big carnivore!  finally  asserting the msg predication facilitates subsequent tms deductions which are of importance to the backward reasoner. 
the backward reasoner 
　the backward reasoning operation is used to answer queries  propositions for which a truth assignment is being sought. to determine the truth of a query about an individual i  the backward reasoner will try to determine whether any nikl sentences applicable to i entail the truth of the queried proposition. 
　i will assume here that the query has form  c i   where the predicate name c corresponds to a concept of the same name 1 to determine the truth of  c i   the backward reasoner compares the concept c to cl  the msg of i. if c subsumes ci  then the backward reasoner may infer  c i . 
　to see how this works  consider again our example from the african plains. say the forward reasoner has found the msg of the individual a1 to be bigcarnivore  and say we query 
 carnivore al  
to determine the truth of this query  the backward reasoner checks whether carnivore subsumes bigcarnivore. given the database in figure 1. this subsumption relation does indeed hold  which establishes that 

this is precisely the nikl sentence that is needed to answer the query  and the interface instantiates it by asserting 
 big-carnivore al  --   carnivore al  
in turn the penni tms will infer 
 carnivore al  
conclusions 
　in the view of kl-two i have given here  kl-two's principal achievement can be seen as having extended rup with some form of quantification. however  the kind of quantification that kl-two provides is limited  the scope of nikl's quantificational language is the class of terminological statements that are characteristic of kl-one and its various descendants. 
m. vilain 1 
many quantified statements can not be handled in this way. in kl-two  these statements that can't  be expressed in nikl must be encoded with demons attached to the penni database. this observation also applies to other restricted language hybrids built on rup  in particular the cake system of rich  1 . 
　so how well does kl-two measure up to the promise of the restricted language approach to hybrid reasoning  can it be both computationally efficient and representationally sufficient  the answer unfortunately is yes and no. yes  the system is efficient  although it relies on some incomplete algorithms   and yes  it is more expressive than rup alone. but  as might be predicted  kl-two still isn't sufficient unto itself. as rup before it. kl-two mutt be extended for particular applications  albeit to a lesser extent than rup. 
　however  this state of affairs is representative of the inherent trade-off between expressiveness and efficiency that is common to all knowledge representation systems. out of the many possible ways of handling this trade-off  kl-two makes one particular choice  one which i think has been successful. 
