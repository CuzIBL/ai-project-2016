
nonmonotonic causal logic  invented by mccain and turner  is a formalism well suited for representing knowledge about actions  and the definite fragment of that formalism has been implemented in the reasoning and planning system called ccalc. a 1 theoremdueto mccain shows howto translate definite causal theories into logic programming under the answer set semantics  and thus opens the possibility of using answer set programming for the implementation of such theories. in this paper we propose a generalization of mccain's theorem that extends it in two directions. first  it is applicable to arbitrary causal theories  not only definite. second  it covers causal theories of a more general kind  which can describe non-boolean fluents.
1 introduction
causal logic  mccain and turner  1  is a formalism for knowledge representation  especially suited for representing effects of actions. causal theories are syntactically simple but also very general: they consist of causal rules of the form
	f   g	 1 
where f and g are propositional formulas. intuitively  rule  1  says that there is a cause for f to be true if g is true. for instance  the causal rule
	pt+1   at	 1 
can be used to describe the effect of an action a on a boolean fluent p: if a is executed at time t then there is a cause for p to hold at time t+1. other important concepts in commonsense reasoning can be easily expressed by rules of this kind too. for instance  a rule of the form
f   f
  if f is true then there is a cause for this   expresses  intuitively  that f is true by default. in particular  the causal rule
	pt   pt	 1 
says that boolean fluent p is normally true. the frame problem  mccarthy and hayes  1  is solved in causal logic using the rules
pt+1   pt ＿ pt+1
 1 
 pt+1    pt ＿  pt+1.
these rules express inertia: if a fluent p is true  false  at time t then normally it remains true  false  at time t + 1.
﹛the equivalence of two fluents or actions can be expressed by equivalences in the head. for instance  to express that two actions constantsare synonymous we can use causal
rule
	.	 1 
rules of those kind are used to semantically characterize the relationship between modules in the modular action description language mad  lifschitz and ren  1 . for instance   erdog an and lifschitz  1; erdo gan et al.  1  use an equivalence of this kind to state that pushing the box in the monkey and bananas domain is a specialization of a more general action  move .
﹛the language of causal theories has been extended in  giunchiglia et al.  1  to handle multi-valued constants  in which a constant may assume values different from true and false. for instance  we can express the fact that object x is in location l with loc x  = l. one advantage of using loc x  = l instead of the boolean fluent loc x l  is that loc x  = l implicitly expresses the commonsense fact that every object is exactly in one position.
﹛in many useful causal rules  such as  1 - 1   the formula before the     is a boolean literal  a non-boolean atom  such as loc x  = l  or ﹠. rules of this kinds are called definite. such rules are important because a causal theory consisting of definite rules can be converted into an equivalent set of propositional formulas  mccain and turner  1; giunchiglia et al.  1   so that its models can be computed using a satisfiability solver. that translation is used in an implementation of the definite fragment of causal logic  called the causal calculator  or ccalc.1 the causal calculator has been applied to several problems in the theory of commonsense reasoning  lifschitz et al.  1; lifschitz  1; akman et al.  1; campbell and lifschitz  1; lee and lifschitz  1 .
﹛on the other hand  a rule of the form  1  is not definite  so that the method of computing models described above is not applicable in the presence of such rules.
﹛another method of computing the models of a causal theory uses converting it into a logic program under the answer set semantics  gelfond and lifschitz  1; 1 . this translation  discovered by mccain   is modular  i.e.  can be applied to a causal theory rule-by-rule . it converts  for instance  causal rule  1  into
pt ↘ not  pt 
which is the usual way of expressing that pt is true by default in logic programs  gelfond and lifschitz  1  section 1 . answer set solvers - systems that find the answer sets for logic programs - can then be used to find the models of definite causal theories  dog anda g et al.  1 . on the other hand  this translation is only applicable to boolean causal theories consisting of definite rules.
﹛in this paper we propose a translation that is more general than mccain's: it is applicable to arbitrary causal theories  including multi-valued theories containing nondefinite rules. the price that we pay for this generality is that the logic programs produced by our translation are programs with nested expressions. such programs  defined in  lifschitz et al.  1   can be converted into disjunctive programs in polynomial time at the price of introducing additional atoms  pearce et al.  1 ; this process has been implemented.1 consequently  our translation may allow us to compute the models of arbitrary causal theories using answer set solvers applicable to disjunctive programs  such as dlv 1  gnt 1 and
cmodels  1.
﹛our translation  like the one due to mccain  is modular. it is defined in two steps. first  every rule of the given causal theory is converted into a set of rules in clausal form
	l1 ˍ ﹞﹞﹞ ˍ ln   g	 1 
where each li is a literal  using  giunchiglia et al.  1  proposition 1 . then each rule  1  is replaced by a logic program with nested expressions; we will see that this program is  small  - usually linear in the size of the input.
﹛in addition  we show how both steps can be done more efficiently. first of all  the  clausification  of a causal theory can be done without much increase in size if we agree to introduce auxiliary atoms. about converting a clausified causal theory into a logic program  we will show that many rules and atoms can be dropped in special cases. for instance  in case of causal theories with boolean signature  we get a much simpler definition of the translation. our optimizations also allow us to translate causal theories whose heads are literals or ﹠ into nondisjunctive logic programs. it follows that  for this class of causal theories  the problem of the existence of a model is in class np.
﹛we review the syntax and semantics of causal theories and logic programs in sections 1 and 1  respectively. the trans-

1
 http://www.cs.uni-potsdam.de/ torsten/nlp/ 1
 http://www.dbai.tuwien.ac.at/proj/dlv/ . 1
 http://www.tcs.hut.fi/software/gnt/ . 1
http://www.cs.utexas.edu/ tag/cmodels/ .
formation from causal theories in clausal form into logic program is shown in section 1  and section 1 describes how to make it more compact. clausifying causal theories is discussed in section 1.
1 causal theories
we review the more general syntax and semantics of causal theories - which allow multi-valued constants - from  giunchiglia et al.  1 .
﹛a  multi-valued  signature is a set 考 of symbols c  called constants  with a set of symbols dom c   the domain of c  associated to each of them. a  multi-valued  atom is a string of the form c = v  where c ﹋ 考 and v ﹋ dom c . a  multivalued  formula is built from atoms using the connectives ＿ 
. formulas of the forms f   g and f √ g can be seen as abbreviations in the usual way.
﹛a  multi-valued causalrule is an expression of the form f   g  where f and g are formulas. these formulas are called the head and the body of the rule respectively. a  multi-valued causaltheoryis a set of causal rules.
﹛a  multi-valued  interpretation over 考 is a  total  function that maps each constant c of 考 to an element of dom c . an interpretation i satisfies  or is a model of  an atom c = v if i c  = v. the definition of satisfaction and model of formulas of more general form follows the usual rules of propositional logic.
﹛the semantics of causal theories of  giunchiglia et al.  1  defines when an interpretation i of 考 is a model of a causal theory t  as follows. the reductti of t relative to i is the set of the heads of the rules of t whose bodies are satisfied by i. we say that i is a modelof t if i is the only model of ti. it is clear that replacing the head or the body of a causal rule by an equivalent formula doesn't change the models of a causal theory.
﹛take  for instance  the following causal theory with dom c  = {1 1}
 1 
 
the reduct relative to any i is always
{  c = 1  ˍ c = 1   c = 1  ˍ c = 1} 
which is equivalent to c = 1 √ c = 1. the only model of the reduct is the interpretation j such that j c  = 1. it is then clear that j is a model of  1   while no other interpretation i is a model of this causal theory because i is not a model of the reduct.
﹛a literal is either an atom a or its negation  a. a rule of the form  1   where n ≡ 1 and l1 ... ln are literals  is said to be in clausal form. it is also semi-definite if n ≒ 1  and definite if either the head is ﹠  n = 1  or an atom. a causal theory is in clausal form  semi-definite  definite  if all its rules are in clausal form  respectively semi-definite  definite .
﹛a constant c is binary if |dom c | = 1. it is also boolean if dom c  = {t f}. signatures  formulas  causal rules and causal theories are binary  boolean   if they contain binary  respectively  boolean  constants only. in case of a binary signature  the difference between definite and semi-definite causal rules is not essential  because every negativeliteral can be rewritten as an atom. for instance  if the underlying signature is boolean then   c = t  is equivalent to c = f. in case of boolean constants c  we will often write c = t simply as c. if a causal theory of a boolean signature doesn't contain atoms of the form c = f then the heads and bodies of its rules are essentially classical  as in the original definition of causal theories  mccain and turner  1 . we call such theories mct theories.
﹛take  for instance  the following mct theory t of signature {p q}:
		 1 
the interpretation i defined by i p  = i q  = t is a model of t. indeed  in this case ti = {p ˍ  q q}  and its only model is i. no other interpretation is a model of t: if i p  = t and i q  = f then i is not a model of the reduct ti = {pˍ q q}  while if i p  = f then the reduct ti = {p ˍ  q} has more than one model.
1 logic programs
the answer set semantics was originally defined in  gelfond and lifschitz  1  for logic programs of a very simple form and has been generalized several times. here we review the syntax and semantics of programs with nested expressions  lifschitz et al.  1 . in this section  the words  atom  and  literal  are understood as in classical propositional logic. a nested expression is built from literals using the 1-place connectives  the unary connective  not   negation as failure  and the binary connectives      conjunction  and  ;   disjunction .
﹛a logicprogramrule withnestedexpressions  has the form
f ↘ g
where f and g are nested expressions. as in causal rules  f is called the head of the rule and g its body. finally  a logic program withnestedexpressions  is a set of logic program rules.
﹛the answer set semantics defines when a consistent set of literals  a set that doesn't contain both a and  a for the same atom a  is an answer set for a logic program. in the rest of this section x stands for a consistent set of literals  l for a literal  f and g for nested expressions and 旭 for a logic program.
﹛we define when x satisfies f  symbolically  x |= f  recursively as follows:
 
 
  x |= f g if x |= f and x |= g  and
  x |= f;g if x |= f or x |= g.
finally  x satisfies 旭  x |= 旭  if  for all rules f ↘ g in 旭  x |= f whenever x |= g.
﹛the reduct旭x of 旭 relative to x is the result of replacing every maximal subexpression of 旭 that has the form not f with ﹠ if x |= f  and with  otherwise. a set x is an answer set for 旭 if x is a minimal set  in the sense of set inclusion  satisfying 旭x.
an expression of the form f   g will stand for two rules
f ↘ g and g ↘ f.
1 main translation
consider a multi-valued signature 考. for any formula f of that signature  we define fne as the nested expression obtained from f by replacing each ＿ with a comma  ˍ with a semicolon and   with not.
﹛we are now ready to define our translation. given any causal theory t in clausal form  we define 旭t as the program with nested expressions obtained from t
  by replacing each causal rule  1  by

l1;...;ln ↘ not not gne  l1;not l1  ...  ln;not ln 
 1 
where eachstands for the literal complementary to li  and
  by adding  for every constant c ﹋ 考 and every distinct
  rules
	c = v  	 	  c = w 	 1 

where the  big comma  is used in the same way as big conjunctions.
﹛according to this definition  each rule  1  of 旭t can be obtained from the corresponding rule of t in three steps: by
  replacing each propositional connective with the corresponding  logic program connective   with the exception of negation in the head 
  prepending not not to the body of the rule  and
  adding some  excluded middle hypotheses  to the body of the rule.
this last step  compensates  the replacement of ˍ with the corresponding  stronger  logic program connective. it is clear that this translation is linear if there is an upper bound on the size of the domain for each constant in t  for instance  when t is binary .
﹛rules  1  and  1  relate literals containing the same constant. they are needed to establish a 1 relationship between the models of ti and the subsets of i that satisfy 旭it. for instance  if t is  1  then 旭t is
	  c = 1 ;c = 1 ↘ not not	= 1;not  c = 1   
   c = 1 ;not   c = 1  
	  c = 1 ;c = 1 ↘ not not	= 1;not  c = 1   
   c = 1 ;not   c = 1  
c = 1     c = 1    c = 1 
 1 
c = 1     c = 1    c = 1  c = 1     c = 1    c = 1 
  c = 1 ;  c = 1  ↘ not  c = 1  not  c = 1    c = 1 ;  c = 1  ↘ not  c = 1  not  c = 1 
  c = 1 ;  c = 1  ↘ not  c = 1  not  c = 1 .
if t is  1  then 旭t is p; q ↘ not not
q ↘ not not p   q;not  q  p     p = f 
p = f    p
 1 
q     q = f 
q = f    q
 p;  p = f  ↘ not p not  p = f   q;  q = f  ↘ not q not  q = f .
﹛the theorem below expresses the soundness of this translation. we identify each interpretation with the  complete  set of literals over 考 that are satisfied by the interpretation.
theorem 1 for any causal theory t in clausal form  the models of t are identical to the answer sets for 旭t.
﹛for instance  the only answer set for  1  is {  c = 1    c = 1  c = 1}  and indeed it is the only model of  1 . the only answer set for  1  is {p   p = f  q   q = f }  which is the only model of  1 .
﹛for each causal rule  1  that has the form l1   g  i.e.  n = 1   we can drop the  excluded middle hypothesis  from the corresponding rule  1  of 旭t. two logic programs 旭1 and 旭1 are strongly equivalent if  for any program 旭  旭1 ﹍旭 has the same answer sets of 旭1 ﹍ 旭  lifschitz et al.  1 .
proposition 1 for any literal l and any nested expression f  the one-rule logic program

is strongly equivalent to
l ↘ f.
for instance  the second rule of  1  can be rewritten as
q ↘ not not p
and the answer sets don't change.
﹛however  dropping terms of the formfrom  1  is usually not sound when n   1. take  for instance  the onerule mct causal theory:
 
which has no models. as we expect  the corresponding logic program 旭t: p; p ↘not not
p     p = f 
 1 
p = f    p
 p;  p = f  ↘ not p not  p = f 
has no answer sets. if we drop the two disjunctions in the body of the first rule of  1  we get a logic program with two answer sets {p   p = f } and { p p = f} instead.
1 reducing the translation
our simplification of 旭t depends on two parameters:
  a set s of atoms of 考 such that every atom occurring in t belongs to s  and
  a set c of constants of 考 such that every rule of t containing a constant from c in the head is semidefinite.
﹛for each constant c  let nc denote the number of atoms containing c that do not occur in s. we define the logic program 忖t s c  as obtained from 旭t by:
  dropping all rules  1  such that c ﹋ c or {c = v c =
 
  replacing  for each constant c such that nc   1  rules  1  with the set of rules
	 	  c = w  ↘ c = v	 1 

for all v ﹋ dom c  such that c = v ﹋ s  and
  adding
	not  c = w 	 1 
for each constant c such that nc   1.
we will denote 忖t s    by simply 忖t s . we can easily notice that 忖t s    contains atoms from s only. clearly  when s contains all atoms  忖t s  = 旭t. taking s smaller and c larger makes 忖t s c  contain less and generally simpler rules.
﹛rules  1  impose a condition similar to the left-to-right half of  1   but they are limited to atoms of s. rule  1  expresses  in the translation  the following fact about causal theories: if neither of two distinct atoms c = v1 and c = v1 occurs in a causal theory t then no model of t maps c to either v1 or v1. for instance  if dom c  = {1 1} and only c = 1 occurs in t then every model of t maps c to 1. however  if c = 1 occurs in t as well then c can be mapped to 1  as shown by example  1 .
for instance  if t is  1  then 忖t {c = 1 c = 1}  is
	  c = 1 ;c = 1 ↘ not not	= 1;not  c = 1   
   c = 1 ;not   c = 1  
	  c = 1 ;c = 1 ↘ not not	= 1;not  c = 1   
   c = 1 ;not   c = 1    1 
  c = 1  ↘ c = 1
  c = 1  ↘ c = 1
  c = 1 ;  c = 1  ↘ not  c = 1  not  c = 1 
﹛if s is a set of atoms  a subset of {a  a : a ﹋ s} is complete over s if it contains exactly one of the two literals a or  a for each a ﹋ s.
theorem 1 let t be a causal theory over 考. let s be a set of atoms of 考 such that every atom occurring in t belongs to s  and let c be a set of constants of 考 such that every rule of t containing a constant from c in the head is semidefinite.
then is a 1 correspondence between the models of t and the answer sets of 忖t s c  that are complete over s.
﹛we get the models of the original causal theory by looking at the unique interpretation that satisfies each complete answer set for 忖t s c .  the uniqueness of the interpretation is guaranteed by the theorem.  for instance  {  c = 1    c = 1 } is the only complete answer set for  1 ; it corresponds to the interpretation that maps c to 1  and this is indeed the only model of  1 .
﹛program 忖t s c  may have incomplete answer sets  and those don't correspond to any interpretation. they can be eliminated from 忖t s c  by adding the constraint
                 ﹠ ↘ not a not  a	 1  for every a ﹋ s.
﹛we can notice that no constant c ﹋ c occurs in the head of  intrinsically disjunctive  rules of 忖t s c . indeed  if c ﹋ c then each rule  1  with c in the head is nondisjunctive because it comes from a semi-definite causal rule  and 忖t s c  doesn't contain rules  1  whose head contains c. moreover  rules  1  and  1  can be strongly equivalently rewritten as nondisjunctive rules. in particular  it is possible to translate semi-definite causal theories into nondisjunctive programs of about the same size. as a consequence  the problem of the existence of a model of a semi-definite causal theory is in class np.
﹛when  for a binary constant c  only one of the two atoms belongs to s  all rules  1  and  1  in 旭t for such constant c are replaced in 忖t s c  by a single rule  1  whose head is   which can be dropped. in particular  an mct theory t over 考 can be translated into logic program 忖t 考   basically consisting just of rules  1  for all rules  1  in t.
for instance  if t is  1  then 忖t {p q}  is p; q ↘ not not q ↘ not not p   q;not  q 
whose only complete answer set is {p q} as expected.
1 clausifying a causal theory
as we mentioned in the introduction  the translations from the previous sections can also be applied to arbitrary causal theories  by first converting them into clausal form. one way to do that is by rewriting the head of each rule in conjunctive normal form  and then by breaking each rule
	c1 ＿ ﹞﹞﹞ ＿ cn   g 	 1 
where c1 ... cn  n ≡ 1  are clauses  into n rules
	ci   g	 1 
 i = 1 ... n   giunchiglia et al.  1  proposition 1 . however  this reduction may lead to an exponential increase in size unless we assume an upper bound on the number of atoms that occur in the head of each single rule.
﹛we propose a reduction from an arbitrary causal theory to a causal theory where the head of each rule has at most three atoms. this translation can be computed in polynomial time and requires the introduction of auxiliary boolean atoms. the translation is similar to the one for logic programs from  pearce et al.  1  mentioned in the introduction.
﹛we denote each auxiliary atom by df   where f is a formula. for any causal theory t  the causal theory t is obtained by t by
  replacing the head of each rule f   g in t by df  and
  adding  for each subformula f that occurs in the head of rules of t     denotes a binary connective 
- is an atom 	and	 
- has the form  g  and -  has the form g   h.
﹛intuitively  the equivalences in the heads of the rules above recursively define each atom df occurring in t to be equivalent to f. this translation is clearly modular.
﹛if t is an mct theory then t is an mct theory also. for instance  mct rule
p ˍ  q ＿  r    r
is transformed into the following 1 mct rules:
		 a ﹋ {p q r} 
 theorem 1 for any causal theory t over a signature 考   is a 1 correspondence between the models of t
and the models of t.
﹛we can see that every rule in causal theories of the form t is either already in clausal form  or has the body  and at most three atoms in the head. it is not hard to see that the clausification process described at the beginning of the section is linear when applied to t.
1 related work and conclusions
mccain's translation  mccain and turner  1  is a linear and modular translation applicable to  semi- definite mct theories t  over 考  whose bodies are conjunction of literals. our translation 忖t 考  is similar to mccain's translation for causal theories of those kinds. also  the two outputs are - in presence of rules of the form  1  - strongly equivalent to each others. in this sense  our translation is a generalization of mccain's translation.
﹛another translation  dog anda g et al.  1  turns mct theories called  almost definite  into logic programs. for a causal theory t that is both almost definite and in normal form  忖t 考  is essentially strongly equivalent to the output of their translation. causal theories in normal form seem more general than almost definite causal theories  as we don't knowif there is any simple  modularand almost linear trasformation from arbitrary causal theories  or even from mct theories  to almost definite causal theories.
﹛future work will include studying how we can turn a theory in the modular action description language mad into a logic program. this will require extending the translation to causal theories with variables  lifschitz  1  and finding other simplifications of the translation.
﹛we will also like to investigate the relationship between causal theories and logic programs with aggregates. it turns out that  for instance  all rules  1  and  1  for the same constant c can be strongly equivalently replaced by a single aggregate - as defined in  ferraris  1  - in the head of a rule.
acknowledgments
we thank selim erdog an and hudson turner for comments on this topic. we are grateful to vladimir lifschitz for many discussions and suggestions.
