 
     this paper presents a planning architecture that can perform both planning and recovery planning in the complex and dynamic flight domain. the key to such a robust planner is the vertical decomposition of the domain knowledge where the flight domain is decomposed into four minidomains  each a model of the flight domain along some degree of global viewpoint. the decomposition of the flight domain into four nearly independent minidomains and the explicit modeling of the different degrees of global viewpoint reduce the domain complexity geometrically. the vertical decomposition of the domain knowledge results in shallow planning and shallow recovery planning. 
i 	introduction 
     recent planning works  1 1 1  have shown sophisticated approaches to make planning tractable for increasingly realistic and complex domains. this paper introduces a planning architecture designed for complex and dynamic domains such as the flight domain. in addition to the many aspects of flight such as routing and navigation  trajectory planning  piloting  and subsystems management  the complex and dynamic nature of the flight domain i1 manifested in the many domain constraints imposed on the flight or the plan. for example  a safe flight is a plan that satisfies domain constraints such as  the aircraft shall be navigable at all times    the aircraft shall not run out of fuel   and  the aircraft shall not stall.  
     the difficulty in satisfying these domain constraints is that they have different scopes and they interact with each other. the scope of a constraint is the length of the plan over which the constraint holds  or how far the effects of the constraint span the plan. for example  the constraint  do not run out of fuel  has a very broad scope  from takeoff to landing  and the planner cannot determine whether the constraint is satisfied until the entire plan has been generated. on the other hand  the  do not stall  constraint has a short scope; it spans a small 
this work was supported in part by nasa under contract no. nasa-nag 1 and by air force under contract no. f1-k-1. 
portion of the flight  on the order of one minute. 
     to complicate the situation further  the different aspects and the different constraints interact. for example  time efficiency dictates that the aircraft should cruise at high power setting  1% power  which may add another refueling stop  increase the flight time  and possibly increase the flight distance. since the  do not run out of fuel  constraint has a large scope  the planner cannot know that the 1% power setting  determined at the beginning of the flight  may cause a constraint violation until the end of the flight planning. 
ii vertical domain knowledge decomposition 
     the planner can easily get into a catch-1 situation when trying to satisfy constraints of different scope. if the planner satisfies the narrow-scoped constraints first  it must guess at the global direction and do a tremendous amount of backtracking when the guesses do not satisfy the broad-scoped constraints. on the other hand  if the planner satisfies the broad-scoped constraints first  it must guess at the enablement precondition necessary to support the high-level plan; and again  much backtracking over the preconditions will occur. this catch-1 situation occurs because the planner tries to satisfy all the constraints at each instance during planning. planning is much simpler if the planner only satisfies the constraints of one scope at a time. this is the essence of vertical domain knowledge decomposition. 
       a conceptual level is a minidomain that models the task domain at a breadth of scope. a conceptual level is a defined domain with its own 
world model  goals  operators  and constraints; it is a world unto itself. the task domain can be modeled at multiple scopes by constructing minidomains to match. the immediate effect of the conceptual levels approach is to break the complex domain into simpler homogeneous minidomains  and consequently  complex planning is transformed into a series of shallow planning. this is similar to dividing a difficult task into easier subtasks and then solving the subtasks except the complexity reduction is achieved through domain knowledge partitioning instead of task decomposition. 
     the flight domain has been divided into four minidomains  the subsystems level and the three 

1 d.chen 
minidomains modeling flight at different scopes: the route level with the largest scope  the trajectory level of intermediate scope  and the aerodynamics level with the least scope. within the subsystems level  planning knowledge is further partitioned into groups of the engine system  the fuel system  and the electrical system. this is an example of horizontal domain decomposition. 
     the route level models the flight domain along aspects of navigation and route selection. at the route level  the world is modeled as a network of nodes and links where the nodes represent the airports and the vortac navigational transmitters and the links represent navigable paths. the links are also the route-level operators. the trajectory level models the traversing of the three-dimensional space. the world here is the space defined by the x y z axis  and the goal is a specific point in space. the aircraft is again modeled as a point  except that it now moves along a trajectory in space. the trajectory-level operator is a vector in space. the aerodynamics level models how the aircraft flies through air. the aircraft in motion is modeled as a system of force vectors in equilibrium. qualitative knowledge guides the manipulation of the force vectors to achieve the desired trajectory and the derivation of the discrete control settings. the exact settings for most analog physical actions such as the throttle setting are derived from the quantitative experts. 
     the difference in scope between two conceptual levels does not imply an abstraction relationship between the two levels. nor is the representation of the broad-scoped level vague or fuzzy. to the route planner  the nodes and links are specific and sufficient to perform the routing task. interestingly  physical actions can reside in any level. selecting the vortac frequency and radial selectors is a natural part of the navigation task and should be a part of the route level. flap and elevator controls are physical actions that belong at the aerodynamics level. 
i l l levels interactions 
     in order for the system to function correctly  the minidomains must cooperate  forming a hierarchy. the hierarchy for the flight domain and the interactions between the levels are shown in figure 1. there are four kinds of interaction: the basis for the plan of the upper level is passed down to the lower level; the goal for the lower level is passed down from the upper level; the upper level may request the value of its capabilities from the lower level; and the capabilities of the upper level are updated by the lower level. these four interlevel actions are coordinated by the interlevel planner. 
     planning proceeds top down because it is more efficient to satisfy the broad-scoped constraint first before satisfying the constraints of narrower scope. however  before the topmost planner can start  it needs to obtain its current 

capability. model updating in this architecture is done bottom up because the lower levels have greater accuracy. for example  the route planner needs to know its current range and ceiling before it can start planning. the engine expert provides the engine thrust capacity. the aerodynamics planner calculates the aircraft ceiling based on the thrust capacity and the flaps and gear values. the ceiling is then passed upward to the route level. figure 1 shows how the range is generated. the interlevel planner coordinates this process. 
     although partitioning the task domain into minidomains may reduce the planning complexity at a given minidomain  it may also hide relevant information from the appropriate intralevel planner. for example  in order to streamline route planning  the aerodynamics knowledge is hidden from the route planner. however  the aircraft range varies greatly depending on how the aircraft is flown. a high power setting lowers the range. the range increases as the airspeed decreases and then decreases as the airspeed gets low. while the route planner should not be burdened with this knowledge  it should be able to benefit from this knowledge without any 
inconvenience. this is done by allowing the route planner to request additional capability at the expense of some other capability. an example is a request for an extra 1 miles of range with the airspeed negotiable from 1 knots to 1 knots. this request is depicted by the request arrow oi figure 1. 
iv recovery planning 
     the reader may see now that failure is a normal part of the planning process due to the partitioned  distributed planning architecture. fortunately  because each minidomain is much smaller than the task domain  replanning is less complicated. a recovery planning expert can be devised for each of the four flight levels. for example  at the route level  if the destination airport shuts down  the planner backtracks  seeking the best refueling airport and forward-chains toward i t . plan failure can also 

d.chen 1 


propagate across levels. for example  suppose a thunderstorm develops along the flight path. since the trajectory planner cannot recover from this fault  it tells the route planner that the implementation of the airway segment has failed. plan failure has now propagated to the route level. the route planner treats the thunderstorm fault as a link failure and patches around the broken link  making sure there is range to cover the added distance. 
     a flight planner called secure has been constructed based on the approach outlined in this paper. secure generates a sequence of control movements that flies a simplified aircraft between any pair of six airports and has demonstrated recovery planning for failures such as closed destination airport  tail wind and head wind  engine failure  thunderstorm  and stuck. currently secure ignores near-ground operations and random turbulences. 

     recovery planning can be simplified if the basis interlevel relationship is introduced. see figure 1. when plan fails due to external changes  it is possible to recover locally within one level without disturbing the other levels. for example  suppose a headwind appears  changing the trajectory plan. the trajectory plan readjusts the landing phase. the trajectory planner knows that the range it gave the route level is no longer correct. however  if the trajectory planner knows the flight distance  it can determine if the route plan is s t i l l good. this is the purpose of the basis interlevel relationship in figure 1. the basis is passed down from the upper level and tells the lower level what conditions must be true for the upper-level plan to hold. as long as the basis holds  the lower level can recover from plan faults without disturbing the upper level. this saves checking across the entire hierarchy every time the world changes. 
v the solution space 
     partitioning the domain knowledge reduces the solution space by funneling some interactions through bottlenecks at the boundaries. when the partitioning is based on the different scopes of viewpoint  the solution space reduction is dramatic  as shown in figure 1. the pyramid on the left shows the solution space if planning acknowledgement 
     this paper is based on the author's ph.d. thesis. the author is grateful to his thesis advisors  the late professor r.t. chien and professor david waltz. 
