 level  then in full detail  and then investigates those contingency plans that need to be evaluated to make the full tradeoff between alternative route plans. a preferred route is selected based on the expected cost of following that route where the potential cost of having to execute contingency plans is factored into the cost computations. contingent routes are saved as part of the selected plan. 
　　　an important part of the problem involves finding an abstract  high-level representation of the terrain which is suitable for use in identifying the 

most feasible routes. we want this high-level representation to be stable so it will still be useful for any replanning that has to occur while the vehicle is carrying out the plan. for a given vehicle  there is a reasonably stable distinction between terrain areas where the vehicle probably cannot pass  under any weather conditions  and the other normally passable areas of terrain. the cost of moving through a given kind of terrain  which changes with the weather and other factors  is used in the final calculations of the preferred route but is not used in the higher level heuristics. 
　　　in addition to passable and impassable regions  we identify a third kind of region that is called a 
　　　choke region. choke regions are regions where the vehicle can probably travel; however  if it can't  then a relatively large detour around some impassable region will be necessary. choke regions are relatively narrow traversable regions between two relatively inrge impassable regions. these regions have the proparty that  a few obstacles that are too small to appear in the map could make the region untraversable and require not just a minor detour around the small obstacles but a major detour to go around one of the neighboring impassable regions as well. roads through dense forests  bridges across rivers  and passes through mountains are examples of choke regions. 
　　　the three types of regions are calculated from the map data based on both the size of the regions and the features found within them. this process is described in a companion paper  glicksman & linden 1|. the results for a region in tne fulda gap area of germany are shown in figure 1. in this figure  passable regions are white  impassable regions gray  and choke regions are solid black. the black dots that represent bridges across rivers do not show up well without a color map. many of the choke regions are long and have complex shapes; for example  some of them are roads within a forest that intersect with other roads. 

figure 1: categorizing terrain in the fulda gap region 
　　　once these regions are extracted  we generate their adjacency relationships and compute the size and locations of the boundaries between them. this produces a semantic network where the regions are nodes in the network. 
　　　since choke regions are always narrow  their boundaries with passable regions are short. this is important since the problem of deciding where to cross the boundary between two adjacent regions is one of the harder problems when planning shortest paths through region-oriented representations of terrain. the decision about where to cross one boundary depends on where the preceding and following boundaries are crossed  and there is no good way to get an admissible estimate of the path cost until these interdependent decisions about boundary crossings are made. by using the concept of choke regions  all boundaries are guaranteed to be short enough so the midpoints of the boundaries can be used with only minimal loss of accuracy. 
　　　the first stage in the hierarchical a* search uses the semantic network representation of the terrain and an admissible estimate for the cost of traversing the individual route segments within each region. once a route through this high level representation is found  a detailed calculation is done  using a gridbased representation of weighed traversal costs  to find actual paths for each route segment and a real cost for that segment. this detailed calculation is only done for those route segments which are part of candidate routes. 
　　　once t lie leading candidate route has been calculated with full detail on all of its route segments  then the exploration is continued in order to find the contingent paths that would be followed if any of the choke regions used in the primary path are found to be blocked. the cost of following these detour paths is then weighted by the probability that the detour will be necessary  and this additional cost is factored into the estimated cost of traveling this route. note that the estimated cost of following a route increases as the contingencies are explored. as this happens  the a* algorithm that is guiding the search will focus its attention on alternative routes which will be explored until their estimated costs rise to be higher than the cost of some other route. 
1. a b s t r a c t p l a n r e p r e s e n t a t i o n 
     at the highest level of abstraction  route plans are represented in terms of the sequence of choke regions that will be traversed. we use lists to represent these abstract plans. for example  
 st a b c gl  
represents a plan to travel from the start  st  through choke regions a  bf and c in that order and then on to the goal  gl  without passing through any other choke regions. each of the variables is really a pointer to a region data structure. the start and goal are artificially generated  regions  that consist of a point in a passable region. all the other variables 
	linden and glicksman 	1 

represent pointers to choke regions. this representation omits the passable regions that must be traversed between every pair of choke regions in the list because they can be unambiguously determined from the regions in the plan. 
　　　to represent the contingency plans that would be executed if a choke region is blocked  we embed a 
　　　sublist immediately after the choke region in question. for example  
 st a  x y gl  b  z w r gl  c  b z w r gl  gl  
describes a plan that contains contingent routes that will be followed if region a  b  or c is unavailable. in this example  if choke region c is discovered to be blocked  the path taken will be 
 st a b c b z w r gl  
in other words  upon reaching region c and discovering that it is blocked  the plan is to backtrack through b and then take the alternate route through z  w  and r  and the passable regions between them  to the goal. deeper nestings of plans can be used to represent routes that deal with multiple blockages of choke regions. 
　　　it is possible that at some level there will be no more alternates available. this is signified in the plan representation by the word blck  for blocked . for 
example  
 st a  blck  b  i  u v gl  j  w z gl  gl  gl  
indicates that if a is unavailable then one cannot reach the goal. 
　　　the planning algorithm is parameterized so that one can specify the number of levels of contingencies to explore. 
1. t h e c o n t i n g e n c y 
p l a n n i n g a l g o r i t h m 
　　　the implementation of the contingency planning algorithm is described in this section. the algorithm is an extension of a hierarchical a*. the cost function is described in the next section. a flow chart of the control flow for the algorithm is shown in figure 
1. 
     the start and goal positions are inputs; and an additional parameter  max-level  determines the number of simultaneous blockages of choke regions that the algorithm will consider while evaluating the cost of detours. when max-level is 1  no contingency planning is done  and the algorithm reduces to a hierarchical a*. 
　　　as a first step  a bi-connectedness algorithm  a modification of  sedgewick 1| p. 1  is run on the graph of linked choke regions to determine if there is a path from the start to the goal and whether there are any articulation points which must be used in every path from start to goal. this algorithm is o n  in the number of links between choke regions  and its 
1 	reasoning 

figure 1: the contingency planning algorithm 
use here forestalls more expensive searching for contingent routes when that search is doomed to fail. 
　　　potential plans are placed on an open list along with their cost. the least cost plan on the list is the current  best  candidate in the hierarchical a* algorithm. when a complete plan with ureal  costs reaches the top of the list  then it is returned as the result. otherwise  it is expanded one step closer to the goal. the cost of each newly generated plan is determined so it can be placed in the appropriate spot on the open list. for partial plans  cost estimates are used. when a path is  complete 1  i.e. represents an abstract plan through a sequence of choke regions all the way to the goal   then a path for each route segment between choke regions is computed using a dynamic programming algorithm running over a cost matrix that records the traversal cost for each small area of terrain. the cost of traveling through each of the choke regions involved in this route is also computed. while these detailed traversal cost.*are themselves estimates based on the map and other collate tm i 

 lata that is available  in this paper we refer to them as the  real  cost because they are the most accurate cost data available to the algorithm and are more accurate than estimates based on straight line distances. 
　　　in the following  ... designates an unexplored portion of the partial plan to be expanded. a subplan can occur at any level in the complete plan. the expansion of the plans considers two different cases: 
case i: there is a subplan is of the form  w a d ... gl . 
in this case  all the nodes that can be reached from d and are not already in the subplan at this level are added to the subplan and the results are added to the open list. furthermore  if the subplan is not already at max-level in nesting depth  then contingent paths are added after d. for example  the above path becomes: 

if the goal can be reached directly from d then 

is also added to the open list. removing the three dots to form a complete path at a given level also causes a switch in the way the costs are determined: from estimates to  real  costs as calculated by dynamic programming. 
if there were no new nodes that could be reached from 
d then this branch of the search tree might represent a dead end. in that case  the sublist is replaced with  blck  as in 
 x  blck  gl  
this would arise in the case where x was not an articulation point but some combination of blocked nodes prevented a path from being found from the start to the goal along that alternative. 
case ii. the subplan is of the form  w a  ... gl  b gl  
this case arises when moving down one level in the contingency hierarchy; that is  when it is the first exploration of the contingent path to be followed if a is unavailable. call a the current choke region. 
　　　if a is an articulation point  the subplan  ... gl  is replaced by  blck . 
　　　if the route is not known to be blocked  then the following procedure is followed: back up past all the unavailable regions to the first available region  w in the example . then find all the nodes that can be reached by both the current choke region  a  and the available region  w  but that are not otherwise unavailable and those are the regions that should be added to the open list. for example: 

     when a new choke region is added to the plan while it is being expanded  if the nesting level of that element is lower than max-level  then an incomplete alternative path is also added; thus  the expansions of the plans listed above may actually have the form: 

1. cost function 
　　　the calculation of estimated and real costs for any partial plan uses the following inputs  some of which are computed on demand : 
1. for each choke region a  the probability pa that the region will be traversable. 
1. for pairs of choke regions a and b that are connected by a single traversable region  both the estimated cost eab and the real cost cab of traveling from one choke region to the other. 
1. for each choke region a  an estimate of the cost of traveling from that choke region to the goal eac. 
1. for each choke region a  an estimated cost ea and a real cost ca of traveling through it. 
while most of these values are not calculated until they are needed  once a value is determined  it is stored in a table because it is likely that it will be required repeatedly in both the current plan  as it is expanded  as well as others. 
　　　for the result to be admissible  the estimated costs must be less than or equal to the real costs. in the implementation of this algorithm  the estimated cost is the minimum cost of traversing any particular grid cell in the region multiplied by the straight-line distance between choke regions  for eab  or by the straight-line distance between the two ends of a choke region  for ea  . in the case of the cost between a choke region and the goal where the choke region is not adjacent to the region containing the goal  eac   the minimum cost for all cells is used. the real cost  plus the real path  for each segment is determined by using a dynamic programming algorithm which computes the best path for that segment. the estimated cost will always be smaller than the real cost. 
 when the alternative paths are factored in  the is effectively split in two: the cost of the path that would be taken if the choke region is traversable is multiplied by pa. similarly  the cost of the path that would be taken when a detour is necessary is multiplied by   the probability that a detour is required. 
	linden and gllcksman 	1 
　　　given that the estimated and real costs for each route segment can be calculated when needed  the cost of a plan can be defined by induction following the process by which the plan was generated as described in section 1. the key steps of this induction are: 
1. if the previous plan was  w a d ... gl  and the current plan is then replace the cost edg with 

1. if the new subplan has the form   w a d gl  with the three dots removed  then recalculate the cost of this subplan using real costs rather than estimates for every segment along this path. 
1. if the new subplan has the form  w a  x ... gl  b gl  and the previous plan had the form  w a  ... gl  b gl  then replace eac with 
1. if the new plan has the form  w a  blck  b gl  then don't change the previous cost estimate. note that any change in cost in this situation would eventually affect all open plans equally  and thus the assignment of a cost for this case ultimately will not matter. if there is no alternative path when a  and possibly other nodes  is blocked  then every path expansion will eventually try a under the same set of blockage assumptions and will end up encountering the same cost when it also assumes that a may be blocked. 
　　　the actual implementation does not save the separate components of the plan's cost  but rather recalculates the cost using an algorithm equivalent to this inductive definition. 
1. results 
     the algorithm for contingency planning has been implemented on a symbolics lisp machine and run using map data for the fulda gap area in germany as well as map data for the martin marietta alv test site near denver  colorado. 
　　　figure 1 shows an example of the output generated during the execution of the contingency planner. the final route  on a black and white device  is displayed with the  primary  path as a solid line  with solid arrowheads added to make it more visible  and all the contingent paths as dotted lines  with hollow arrowheads added . the plan generated in this example is 

where the numbered choke regions are actually the print names of internal objects. this route is interesting because if the first detour region  1  is unavailable  one has to backup past the original starting point and move away from the goal for some time before making progress towards the goal. 

1 	reasoning 　　　figures 1 and 1 show examples where the contingency planning makes a difference in the choice of routes. in both cases the main route found when no contingencies are determined  in figures 1a and 1a  is not considered the  best  route when a level of contingency planning is used. 

1. execution time 
     table 1 shows some timing results for the contingency planning algorithm as read from the realtime clock on a symbolic 1 lisp machine with all intermediate output turned off. the ephemeral garbage collector was turned on. two parameters were manipulated during the timing experiments: the amount of dynamic programming to generate detailed plans with  rear  costs was varied as well as the number of levels of contingency planning. no dp means that the dynamic programming was turned off and  choke only  means that dynamic programming was only used within choke regions. the timing results show that the vast majority of the computation time goes into the dynamic programming computation to develop correct detailed routes. we are using a special form of dynamic programming which can exploit parallel processing effectively  nearly linear speedup for up to a few hundred processors   linden et al. 1 . unfortunately  the current timings are on a serial processor that is not even designed for numeric computation. we have evidence that running the dynamic programming on an appropriate parallel processor would speed up that part of these computations by at least two orders of magnitude. 
　　　these timings were taken while planning the first two-thirds of the plan illustrated in figure 1. the first set or timings did not use contingency planning at all and the final plan was 
 st 1 gl  
figure 1: where contingency 
a. no contingencies; 
figure 1: where contingency 
a. no contingencies; 
the second set of timings generated one level of contingencies and the final plan was 
 st 1  1 1 gl  1  1 gl  gl  
table 1: timing results 
	dp use 	contingency level 	time  seconds  
	none 	1 	1 
	choke only 	1 	1 
	all 	1 	1 
	none 	1 	1 
	choke only 	1 	1 
	all 	1 	1 
g. limitations and future work 
　　the major bottleneck in the execution time of this algorithm is the calculation of detailed route segments and their costs. some effort was spent in making the dynamic programming for this run efficiently; but  in addition to parallelism in the hardware  there are other steps that might be taken. when it is known that many routes are going to be planned through the same terrain  the calculation of the individual path segments can be done once for all the combinations of adjacent choke regions and saved for future use. even if some of the path segments have to be recalculated because the weather or other factors have changed  these precomputed costs can be constructed to be admissible and they are likely to be much better estimates than an estimate based on straight line distances. 
planning makes a difference 
b. one level of contingencies 
planning again makes a difference 
b. one level of contingencies 
linden and gllcksman 1 
　　　choke regions frequently connect three or more passable regions or they connect to the same passable region in two or more places. the current implementation does not always generate the right route in the vicinity of such choke regions. one solution  that has not been implemented  would divide choke regions that have multiple exits into separate choke regions which have two exits each and are connected to each other by  passable regions  that are just a single point. 
　　　while expanding paths towards the goal  it is possible for the same contingent paths to be generated several times. moreover  alternate  losing  paths will be regenerated and re-evaluated while the paths are again explored. if branches of the search tree are stored as they are completed  then they can often be re-used in almost  equivalent  situations and thus reduce the amount of search. this becomes more important with longer paths and more levels of contingencies because the combinatorics of the problem increase dramatically. 
　　　with a couple of minor enhancements  the present algorithm could be used to evaluate the use of potential shortcuts. shortcuts go through areas which are probably not traversable  but might be. thus . shortcut regions  are the same as choke regions except that the probability of successfully traversing them is less than one half. the current algorithm makes no assumptions about the probability of successfully traversing a choke region-except that the cut-off in terms of the depth of searching for contingency plans should then be handled in terms of the probability of actually executing a path rather than in terms of a fixed number of contingency levels. this option is implemented but has not been well tested. 
　　　the present algorithm could be used to evaluate the tradeoffs involved in planning to obtain additional information as opposed to forging ahead without it. for example  a future robot with good long distance vision might need to decide whether it is worth the effort to climb a hill to see whether a bridge is still usable-as opposed to traveling directly to the bridge. 
　　　the current implementation uses a linear evaluation function and considers the effect of detours on the expected value of the cost. by extending it to use a non-linear evaluation function  we could deal with more complex goals; for example  where it is important to arrive before some fixed time. the need to consider the effect of potential detours becomes even more significant in such cases. 
1. conclusions 
     we have developed a route planning algorithm that generates good routes despite unknowns and uncertainties in the map data being used; in particu-
1 	reasoning 
lar  the algorithm identifies choke points and takes the cost of potential detours into account while it is selecting the preferred route. it also generates contingent routes that will be used if choke points turn out to be impassable  and it can be extended to generate plans that obtain additional information that is then used to extend the plan. 
　　　we believe that this algorithm is practical for use in mobile robots. when generating complete routes with one level of contingencies  the 1 to 1 minute execution times for the algorithm are slow enough to make debugging and testing a painful process  but execution times of that order of magnitude are reasonable for pre-mission planning for many mobile robot applications. furthermore  most of the time is spent calculating detailed routes  and that calculation can be improved by a couple orders of magnitude either by using parallel hardware or by precomputing the detailed route segments and re-using them in subsequent route planning sessions. 
1. 