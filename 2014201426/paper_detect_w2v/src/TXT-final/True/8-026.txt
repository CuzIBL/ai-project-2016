 
       one of the remarkable t h i n g s about human i n f o r m a t i o n p r o c e s s i n g is the way we s t o r e and r e t r i e v e i n f o r m a t i o n . the human 
a s s o c i a t i v e memory is a d e v i c e t h a t has been o n l y r a t h e r c r u d e l y approximated w i t h computers i n f l e x i b i l i t y   s e l f -
m o d i f i a b i l i t y   and c o m p l e x i t y o f a s s o c i a t i o n s . 
kj.y words and piipasi s 
　　　associative menory  p a r a l l e l 
　　　processing  symbol manipulation  l i s t processina  extension of algebraic lanuuages  information structures. 
cr catloories 

       in t h i s paper  we d e s c r i be a computer language  amppl-ii  which s i m u l a t e s a machine w i t h an e x t e n s i v e   v a r i a b l e s i z e a s s o c i a t i v e memory and p a r a l l e l p r o c e s s i n g 
       c a p a b i l i t y . i t was t o b e made f a i r l y machine-independent and is   t h e r e f o r e   embedded in a h i g h - l e v e 1 a l g e b r a i c language. the v e r s i o n out l i n e d here i s 
b u i l t as an e x t e n s i o n of sli p  symmetric l i s t processing language   i t s e l f b e i n q embedded in fortran i v . 
       the expected range of a p p l i c a b i l i t y of amppl-ii covers a r a t h e r wide a r e a . candidates i n the n o n - n u m e r i c a l f i e l d are game p l a y i n g   p i c t u r e p r o c e s s i n g and image i d e n t i f i c a t i o n   e n c o d i n g - d e c o d i n g   s i m u l a t i o n o f c o g n i t i v e b e h a v i o r   m u l t i k e y i n f o r m a t i o n r e t r i e v a l   language a n a l y s i s   s o r t i n g   m e r g i n g   c o l l a t i n g   query systems  and so o n . numerical 
a p p l i c a t i o n s would b e m a t r i x c a l c u l a t i o n s   s o l u t i o n o f p a r t i a l d i f f e r e n t i a l 
e q u a t i o n s   computation of a u t o - and c r o s s c o r r e l a t i o n f u n c t i o n s   s i g n a l c o r r e c t i o n   e t c . 
       s t i m u l a t e d by t h i s languaae  new c o m p u t a t i o n a l techniques and a l g o r i t h m s may  h o p e f u l l y   be d e v e l o p e d . these  on one hand  and t e c h n o l o g i c a l advances  on the o t h e r   may render the hardware i m p l e m e n t a t i o n of an amppl-like machine 
e c o n o m i c a l . 
       * n . v . f . designed amppl and is r e s p o n s i b l e f o r the mistakes c o n t a i n e d i n t h i s paper. w. r. mck. implemented the language on the cdc 1. t e i j i f u r u g o r i ' s c o n t r i b u t i o n t o the l a t t e r i s a l s o acknowledged. f u r t h e r   peter m u l l o r and charles bergenstock worked on an ibm 1 i m p l e m e n t a t i o n of amppl-i. 
introduction 
       there is an obvious i n t e r r e l a t i o n between t h e l e v e l o f c o m p l e x i t y o f the problems t h a t are o o t e n t i a l l y s o l v a b l e o n computers  and the power of a v a i l a b l e s o f t w a r e and hardware. f u r t h e r dcvclonment in proaramming systems and languages enables us to a t t a c k problems t h a t have so f a r been beyond the sphere of p r a c t i c a b i l i t y . l i s t p r o c e s s i n g and s t r i n g m a n i p u l a t i n g languages  f o r examnle  have opener1 un new v i s t a s in many r e s e a r c h f i e l d s   p r o b a b l y most s i g n i f i c a n t l y i n a r t i f i c a l i n t e l l i g e n c e . 
       we d e s c r i b e in t h i s paper an approach to 	memory 	and 	i n f o r m a t i o n 	p r o c e s s i n g   r a d i c a l l y 	d i f f e r e n t 	from 	those 	o f 	the t r a d i t i o n a l 	von 	neumann-type 	computers. an a s s o c i a t i v e memory  	p a r a l l e l processing 
language  a m p p l - i i *   i s i n t r o d u c e d   which s i m u l a t e s a computer b u i l t in hardware.  we p o i n t o u t t h a t some of the f a c i l i t i e s a v a i l a b l e i n amppl-ii would not be p r e s e n t in the e n g i n e e r ' s i m p l e m e n t a t i o n . however  they do not   c o s t   much in programmina e f f o r t and in computing t i m e   and they may a l s o be handy to have. we have  t h e r e f o r e   decided to i n c l u d e a f ew   n o n - g e n e r i c   f e a t u r e s .   
       * the f i r s t v e r s i o n   amppl-i  was r e p o r t e d on in   1   1   and was implemented but n o t c o m p l e t e l y debugqed f o r the ibm 1. the p r e s e n t l y d e s c r i b e d language  r u n n i n g on the cdc 1  has improved dynamic memory a l l o c a t i o n f a c i l i t i e s and more p o w e r f u l i n s t r u c t i o n s concerning r e l a t i o n s   c f . s e c t i o n i i / c   . 
1-

       it should be noted here that there are many references in the l i t e r a t u r e to hardware and software e f f o r t s that are aimed at objectives similar to ours here. the engineering a c t i v i t y can be divided i n t o two  rather d i s t i n c t categories  r i r s t   very expensive  black boxer   have been constructed and attached to snecial or general purpose computers to perform some of the functions v/e shall discuss l a t e r . second  small associative memory units have been included in computer systems for s p e c i f i c purposes  such as the paging operation with large-scale timeshared machines. 
　　　  number of programming systems have also been developed  most of them directed towards s p e c i f i c   some of them towards more general applications. v.'e only wish to single out here the work of feldman and rovner   1   1   1     and of dodd  beach and 
rossol   1   . their objectives are very similar to ours  although the respective techniques are d i f f e r e n t . experience w i l l show which of these languages is more 
powerful  easier to program and debug 	i n . 
　　　excellent surveys  covering the f i e l d in question up to the middle of 1  can be found in   1   1   . for the sake of completeness  we mention a few more  some l e f t out of the above surveys  some of more recent vintage  1  1  1  1  1  1  1  1  1  1  1  1 . 
i. some basic concepts 
　　　in contrast with conventional  wordoriented machines  computers with associative memories are contentaddressable. these terms refer to the i n t e r r e l a t i o n s h i p between data as well as to the fact that a memory word or words can be accessed by matching with a selectable f i e l d of a special word  rather than by an address. p a r a l l e l processing  a related idea and d i s t i n c t from 
multiprocessing  allows command sequences to be executed simultaneously over large numbers of data sets. 
　　　it was intended to develop a language which incorporates  from the programmer's viewpoint  these f a c i l i t i e s in addition to the previously available algebraic  l i s t processing and s t r i n g manipulating f a c i l i t i e s . 
　　　for understandable reasons  embedding seemed to be an economical and f a i r l y e f f i c i e n t approach  which also achieves a reasonably high level of machine independence. the presently described 
version is an extension of slip  i t s e l f being embedded in fortran iv.  the internal mechanism of slip had to be modified to a small extent but the user need not be aware of t h i s fact.  there 
m
are only two a ppl subprograms w r i t t e n in assembly lanquage now. converting often used subroutines and functions  currently coded in fortran  into assembly language would  of course  save considerable machine time with large programs. 
　　　unlike the expensive and i n f l e x i b l e associative memories oresently b u i l t in hardware  the size of the simulated associative memory  sam  in determined by the programmer according to his needs. in f a c t   he has to specify the r a t i o between the sizes of sam and of the available space l i s t  avsl  of slip at the beginning of his program. the sum of sam and avsl equals the storage area l e f t unused after the compilation of the foptpan program. 
　　　the programmer can also b u i l d into the program trap points  at which a part of sam or avsl is dynamically reassigned to the other part if there is a need for i t   i . e . if the size of one memory type decreases below a certain prespecified threshold value. memory contraction  coupled with a specific form of garbage c o l l e c t i o n   takes place in sam at this instance. 
　　　there is an e f f i c i e n t and fast flow of information between any two of the sam  avsl and foptran memory. 
　　　it w i l l be helpful 	in 	understanding the 	organization 	of 	amppl-ii 	if 	we consider the diagram in figure 1. 
insert figure 1 about here 
　　　the main block is the memory matrix  which consists of ♀ sa.m-words*  each having 1n b i t positions. there are four special words  the short r e g i s t e r s   each n b i t s long.  on the cdc 1  there are n=1 b i t s in a word.  two of these serve as argument registers 1 and 1. the other two represent mask registers 1 and 1. there are also three long r e g i s t e r s   v e r t i c a l columns ♀ b i t s in length and 1 b i t in width. two   of these are called response register 1 and response register 
1. the t h i r d one is the a v a i l a b i l i t y register.  the role of the words first and last in figure 1 is explained l a t e r   . 
　　　in the following  we s h a l l b r i e f l y describe some of the operations used in amppl-ii and discuss only two  the 'search and flag' and 'set relation 1   in d e t a i l . 
　　　 as w i l l be seen 	l a t e r   	every 	samword 	consists of two actual memory words. 

-1-



i i . operations in amppl-ii 
 1  memory a l l o c a t i o n : 
　　　as mentioned above  the i n i t i a l subdivision of free core i n t o sam and avsl can be dynamically modified during the execution of the program. instructions are available to count the number of currently available sam and avsl c e l l s   and to accomplish the transfer of free cells from one memory category to the other. at these points  and also at the tine of mass input into sam  see below   memory contraction and garbage c o l l e c t i o n in sam takes place. 
 1  input-output: 
	mass input-output 	is 	obtained 	when 
fortran arrays or slip l i s t s are read into 
sam  and when designated sam-words are loaded i n t o fortran arrays or slip l i s t s . also  wholesale clearing operations can be executed between any two specified s/vmaddresses.  a sam-address can be 
conceived of as the index of a onedimensional array.  
　　　individual words can be transferred between any two of the sam  slip and fortran memories. designated parts of sam can be printed in d i f f e r e n t modes. 
	f u l l 	words 	or 	specified 	b i t 
       the basis of comparison is usually* put into one of the argument registers. the search is carried out only over those f i e l d s of sam-words that are marked by b i t s  v in the relevant mask register. the success of a search is indicated by flags  bits  !   at the level of the corresponding sam-vord in the relevant response register. those sam-words that have not been used or are no longer necessary are denoted by a tag  bit ' 1 '   in the a v a i l a b i l i t y register. 
	two points should be mentioned 	here. 
in order to speed un the search processes in sam  one-directional pointers link flagged sam-v;ords  see figure 1  ana  also  end markers indicate the addresses of the sam-words f i r s t and last flagged in the two response registers  the contents of the fortran variables first and last on figure 1 . 
　　　two other fortran variables  p1int1 and p1int1 contain the sam-addresses of the last sam-word searched  whether successfully or otherwise  with reference to response register 1 and response register 1  respectively.  cf. the possible values of the argument whlch of the subroutine slrels.  
　　　the actual form of the major i n s t r u c t i o n performing the above described processes is 

configurations 	can 	be 	put 	i n t o 	the        argument 	and 	mask 	registers  	and 	the 	* i f   	for example  those 	numbers 	are contents 	of 	the 	l a t t e r can also be read searched for that are greater than a given i n t o the fortran memory. o n e . 	however  	if t h e   c r i t e r i o n of search 	i s   for example  	 maximum*  	the 	argument 
 1  	operations 	concerning 	the 	response registers are iqnored. registers: 
　　　to the ammpl programmer  sam appears to contain information in a manner that 
permits 	certain 	basic 	processes  including 	reading 	and 	w r i t i n g   	to 	be carried 	out 	simultaneously in p a r t i c u l a r c e l l s . 	these 	designated 	c e l l s 	contain responding 	pieces of information and were selected by a previous 'search 	and 	flag' 
operation 	or were deliberately flagged by a 	special 	flagging 	i n s t r u c t i o n . 	the  search 	and 	flag' 	operations locate and mark 	sam-words 	according 	to 	various c r i t e r i a . 	subsequent 	processes may then be 	performed 	on 	these 	again 	and 	the results 	can 	represent 	boolean 
combinations  and's  or's and not's of consecutive searches. 
-1-

       serflg 	 b1le  which  criter  iarg  imask  iresp  where 
r e g a r d l e s s 	o f 	p r e v i o u s 	s t a t u s of 	the 	response 	r e g i s t e r   
and-ed w i t h f l a g s i n t h e o t h e r response r e g i s t e r   
or-ed w i t h f l a g s i n the o t h e r response r e g i s t e r   
not-ed and 	l e f t i n 	the same 	response 	r e g i s t e r ; a c e r t a i n sam-addressed w o r d   the 	f i r s t 	sam-word  the 	n e x t - a f t e r - p 1 i n t w o r d   t h e 	l a s t 	sam-word  a l l 	sam-words  any s i n g l e sam-word; 
-1-

next higher than the one in argument register  
next lover than the one in argument register  
nearest in absolute value to the one in argument register  of largest value  
of lowest value  
greater than or equal to the one in argument register  
equal to the one in argument register  
less than or equal to the one in argument register  
with the hiahest number of b i t s matched with s t r i n g in argument register  
with the lowest number of b i t s matched with s t r i n g argument register  
with the hiahest number of matching groups of m =1  b i t s regardless of group p o s i t i o n   s t a r t i n g from the l e f t ; 

-1-

       a few words of comment are needed h e r e . two subsequent 'search and f l a g ' o p e r a t i o n s w i t h criter=gteq and lteq y i e l d r e s p o n s i v e words of v a l u e s between g i v e n l i m i t s . nexthi can be performed by two subsequent searches w i t h c r i t e r i a gteq and 
min  s i m i l a r l y  i s done w i t h c r i t e r i a lteq and max. the v a l u e of one of nexthi and  t h a t is nearer to the v a l u e i n the argument r e g i s t e r   y i e l d s next. the c r i t e r i a bitshi and bitsl1 are u s e f u l i n comparing n o n - n u m e r i c a l d a t a and s e l e c t i n g t h e  most s i m i l a r - o r   l e a s t s i m i l a r   pieces o f i n f o r m a t i o n   r e s p e c t i v e l y . the number of matching b i t s can be found as the values of s p e c i a l 
fortran v a r i a b l e s . grp1fm f i n d s   f o r example  m i s p r i n t s caused by t r a n s p o s i t i o n   m i s s i n g and added c h a r a c t e r s . the c h a r a c t e r s e t can be r e p r e s e n t e d by groups of 1 b i t s . since the matching process i g n o r e s the p o s i t i o n of the groups being matched  t h e r e are e x t r a f a c i l i t i e s t o i d e n t i f y t r a n s p o s i t i o n e r r o r s . a l s o   the number o f the matching groups i s a c c e s s i b l e . 
	there 	are 	safeguards 	to 	p r e v e n t a 
sam-word of 	the 	wrong 	i n f o r m a t i o n 	mode 
   e . g . f l o a t i n g p o i n t number i n s t e a d o f 
 a l p h a b e t i c i n f o r m a t i o n   from becoming respondent i f i t s c o n t e n t s happens t o b e the r i g h t b i t c o n f i g u r a t i o n . a d e t a i l e d d e s c r i p t i o n o f t h i s i s t o b e found i n 
1  . 
       f i n a l l y   i t should b e noted t h a t t h e r e e x i s t i n s t r u c t i o n s t o f l a g and u n f l a g s p e c i f i e d sam-words  t o count t h e 
       number of f l a g g e d sam-words  and to p u t 
       the sam-addresses of f l a g g e d words in a 
       fortran a r r a y or a slip l i s t . 
  1   o p e r a t i o n s concerning t h e a v a i l a b i l i t y r e g i s t e r : 
	as 	mentioned 	b e f o r e   a b i t 1 	in the 
a v a i l a b i l i t y r e g i s t e r i n d i c a t e s t h a t the c o r r e s p o n d i n g sam-word is f r e e . we c a l l 
t h i s mark a ' t a g '   as d i s t i n c t from the   f l a g ' i n t h e response r e g i s t e r s . 
       there are i n s t r u c t i o n s which tag and untag sam-words  count the number of a v a i l a b l e sam-words  and which p u t the sam-addresses of tagged words in a fortran a r r a y or a slip l i s t . 
 1  i n t e r - r e g i s t e r o p e r a t i o n s : 
       a l l the 1 l o g i c a l o p e r a t i o n s p o s s i b l e are e x e c u t a b l e between any two of the s h o r t  argument and mask  r e g i s t e r s or between any two of t h e long  response and a v a i l a b i l i t y   r e g i s t e r s . here the operands are the b i t s t r i n g s occupying the r e s p e c t i v e r e g i s t e r s . 
 1  processes regarding r e l a t i o n s : 
       besides the 'search and f l a g ' o p e r a t i o n   these processes are t h e most s i g n i f i c a n t in a m r p l - i i . we s h a l l   t h e r e f o r e   d i s c u s s them  a l s o   i n some d e t a i l . 
       l e t us g e n e r a l i z e the concept 	of 	an a l g e b r a i c 	f u n c t i o n 	and d e f i n e a r e l a t i o n 
 rel  between an object  and a 	value 
 val  

       each of the above t h r e e e n t i t i e s can b e s i n q l e items o r t h r e e k i n d s o f l i s t s . the f i r s t k i n d simply c o n t a i n s v a r i o u s e q u i v a l e n t names of the same i t e m .  one can t h i n k of synonyms w i t h i n the g i v e n c o n t e x t .   this is c a l l e d the equivalent list. the second k i n d of l i s t bears the names of a number of s u b u n i t s any p r o c e s s i n g on which is always u n i f o r m . an example of these l i s t s nay be the s t u d e n t s of a c l a s s   who always have the same t e a c h e r   always s t a y in the same c l a s s r o o m   e t c . d i s t i n g u i s h i n g .processes  such as g r a d i n g of i n d i v i d u a l exams  are not to be c a r r i e d o u t on t h e elements of s o d e s i g n a t e d l i s t s . f i n a l l y   the t h i r d k i n d o f l i s t has d i s t i n c t and  i n some r e s p e c t   independent elements. an example o f t h i s c o u l d b e the p i e c e s o f f u r n i t u r e 
       i n a c e r t a i n room i f one would l i k e t o   say  p a i n t them t o d i f f e r e n t c o l o r s . 
       a l s o   the programmer can d e f i n e a r e l a t i o n as an o r d e r e d s e t of 
r e l a t i o n s . 	the combining c o n n e c t i v e s a r e : 

       let us f u r t h e r d e f i n e a r e s e r v e d symbol self in o r d e r to be able to exclude s e l f - r e f e r e n c i n g i n unwanted cases. f i n a l l y   t h e term o n the l e f t hand s i d e o f a ' c o n c a t e n a t e d ' symbol is c o n s i d e r e d to be in  teutonic  g e n i t i v e . the f o l l o w i n g 
       examples should make t h i s c l e a r : 
	  i   	parent  father  mother 
i . e . 	a 	p a r e n t 	is 	d e f i n e d 	a 	f a t h e r or 
mother; 
	  i i   	child  parent 
i . e . the c h i l d i s d e f i n e d a s the r e v e r s e o f the p a r e n t ; 
　  i i i   gfandfatiier  fathervmpther i father i . e . the g r a n d f a t h e r i s d e f i n e d a s the f a t h e r ' s o r m o t h e r ' s f a t h e r ; 

-1-




	 a  	suppose in sam  we have 	r e l a t i o n 
d e s c r i p t o r words 	s t a n d i n g 	f o r 
mothep 
mother tongue 
	  	  	  	  
i f 
the r e s u l t i n g w i l l be spanish since jeanne's r e l a t i o n - t o french is the same as t h a t of jose's to spanish - these are the mother tongues of the people in q u e s t i o n . 
	 b  	l e t sam now c o n t a i n 

	 1  	p a r a l l e l o p e r a t i o n s over sam; 
       h e r e   w e b r i e f l y l i s t some b a s i c b u t h i g h - l e v e l i n s t r u c t i o n s t h a t s h o u l d b e u s e f u l b o t h i n n u m e r i c a l and n o n - n u m e r i c a l a p p l i c a t i o n s 1 
	a 	c o n s t a n t 	word 	in 	one 	of 	t h e 
argument r e g i s t e r s can be added t o   s u b t r a c t e d f r o m   m u l t i p l i e d b y   d i v i d e d i n t o . boolean and-ed and or-ed w i t h 
d e s i g n a t e d sam-words t h r o u g h one of t h e 
mask r e g i s t e r s   
       the above o p e r a t i o n s can a l s o be p e r f o r m e d between any two f i e l d s   and t h e 
       boolean not of any s i n g l e f i e l d   of d e s i g n a t e d sam-words. 
       s p e c i f i e d 	f i e l d s 	of d e s i g n a t e d 	samwords can be c l e a r e d . 
       designated sam-words can be s h i f t e d t o t h e l e f t o r t o t h e r i g h t b y s p e c i f i e d number of p l a c e s . 
       s i n g l e 	e l e m e n t s   	v e c t o r s   	p l a n e s   c o f a c t o r s 	or a l l elements of an 	a r r a y can be f l a g g e d 	if t h e a r r a y was read 	i n t o 	sam a c c o r d i n g 	t o t h e u s u a l mapping 	o r d e r . 
       v e c t o r a d d i t i o n   s u b t r a c t i o n and s c a l a r m u l t i p l i c a t i o n are s i n g l e i n s t r u c t i o n s . 
       a l s o   s i n g l e i n s t r u c t i o n s y i e l d the d e t e r m i n a n t and the i n v e r s e of one  and the p r o d u c t o f t w o   m a t r i c e s . 
i i i . an overview 
       we have t r i e d to g i v e a s h o r t o u t l i n e of a new computer language. we  however  f e e l i t i s more than   j u s t a n o t h e r language  - i t r e p r e s e n t s another p h i l o s o p h y o f   a n o t h e r approach t o   problem s o l v i n g . a f t e r a l l   i t i s o n l y the s e q u e n t i a l d e s i g n of the von neumanntype machines t h a t has imposed upon t h e computing community the p r e s e n t l y p r e v a l e n t b u t o f t e n q u i t e u n n a t u r a l 
       c o m p u t a t i o n a l methods. even u s i n g these c o n v e n t i o n a l methods  aj'ppl-ii  a  s h o u l d decrease the l e n g t h o f w r i t t e n programs and  b  s h o u l d s i m p l i f y the w r i t i n g   debugging and u n d e r s t a n d i n g of programs.   i t has v e r y p o w e r f u l d i a g n o s t i c f a c i l i t i e s .   there i s   however  a s i g n i f i c a n t t r e n d   as can be seen in t h e r e f e r e n c e d l i t e r a t u r e   t o d e v e l o p new a l g o r i t l i m s and t e c h n i q u e s t h a t make use of c o n t e n t a d d r e s s a b i l i t y and p a r a l l e l 
       p r o c e s s i n g   expose l a t e n t p a r a l l e l i s m   and i n t r o d u c e c o m p u t a t i o n a l redundancy. we hope amppl-ii w i l l enhance t h i s t r e n d . 
       we have had o n l y l i m i t e d programming e x p e r i e n c e w i t h t h e language. the f o l l o w i n g   a s y e t i n c o m p l e t e   p r o j e c t s are r e p r e s e n t a t i v e examples: 
　　　　 1  a 	query 	system  	which 	can be c o n t i n u a l l y updated  	dealing w i t h 	complex kinship 	s t r u c t u r e s ; 
　　　　 1  simulation 	of 	a 	learning and s e l f - a d a p t i n g 	organism 	in 	a 	h o s t i l e 
environment; 
　　　　 1  e m p i r i c a l proofs of conjectures i n computational l i n g u i s t i c s ; 
　　　　 1  simulation of a demographical problem; and 
　　　　 1  scheduling classrooms  teachers and students. 
       we have found t h a t   although one must pay a c e r t a i n p r i c e in machine time and a v a i l a b l e memory  the programming ease achieved is q u i t e s i g n i f i c a n t .  the disk resident system consists of roughly 1k 

-1-

 words for each slip and amppl-ii. only the needed subprograms are called i n t o core.  in the introduction  we l i s t e d a number of broad areas of application in which amppl-ii should prove useful. now we can be more specific in terms of problem characteristics. we expect to save considerable programming e f f o r t in using the language whenever 
        i  data are to be addressed by a combination of various sets of reference properties  
         i i   data elements satisfying the above reference properties are scattered throughout the memory in a sparse and random manner  
         i i i   data elements dynamically change t h e i r location in the memory as a 
       consequence of the information processes acting on them  
        iv  i d e n t i c a l sequences of processes manipulate 	on 	d i s t i n c t   	non-interacting data elements  
        v  the 	r a t i o 	between 	concurrently and 	s e r i a l l y 	executable 	processes 	is reasonably high. 
　　　these c r i t e r i a of language a p p l i c a b i l i t y occur to some extent with p r a c t i c a l l y every complex programming problem. the a v a i l a b i l i t y of a conventional algebraic language with the ammpl-cum-slip package renders programming more e f f i c i e n t . 
　　　we intend to study in a later paper the numerous issues involved in using ammpl-ii in various f i e l d s . here  we only wish to point to the fact that the proposed system  to an extent  is capable of simulating two d i s t i n c t kinds of associative memory. in the exact associative memory  the information processes are performed on the basis of finding the intersection of several 
matching descriptors. because of the nonuniqueness of many associations and  also  because r e t r i e v a l requests may be incomplete  there can be several respondent pieces of information. however  i l l - f o r m u l a t e d and imprecise tasks cannot  in general  be solved  and there is no l o g i c a l   i n t e r p o l a t i o n   or   e x t r a p o l a t i o n   . 
　　　on the other hand  in a non-exact associative memory these r e s t r i c t i o n s do riot apply. associations connect s t a t i s t i c a l l y related e n t i t i e s   too. the measure of  nearness  is an important concept. various counting processes  the c r i t e r i a of search for the most and least similar items  bitsiii and bitsl1  and matching groups of b i t s  grp1fm  represent steps in this d i r e c t i o n . biological systems  of course  incorporate both of the above described associative memories. 
