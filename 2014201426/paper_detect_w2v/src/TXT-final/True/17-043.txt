 
most automatic programming research has focused on programs which terminate and which produce output values upon termination. by contrast  programs which operate on streams of data usually do not terminate and usually produce streams of output data during execution. such stream programs may be specified with a technique which is a generalization of specification techniques for conventional programs the use of transformations also seems to be an appropriate technique for automatically synthesizing stream programs. 
i. introduction 
previous work on automatic programming  e.g.   biermann et al 
1   has been concerned with sequential programs whose inputs are available before the program executes and whose outputs need not be produced until the program terminates however  many computations must deal with data which is not available until after the program has started and must produce data before it terminates. in fact  in many cases the program must not terminate; rather it must continually execute  responding to input data as they become available and producing output data whenever appropriate. such computations are usually modeled as communicating concurrent processes. one form of communication among such processes involves streams of data. in this paper  the automatic programming problem for stream programs will be defined and an approach to solving the problem will be described. 
ii. the problem 
a. streams 
    in the following discussion  stream terms will be denoted by small capitals  individual elements of a stream will be denoted by the index in brackets there are several ways to model computation with streams  ranging from pure dataflow  ackerman 1  to coarse-grained dataflow  kahn and mcqueen 1  to pipes  ritchie and thompson 1  in our work  we use a model called the stream machine  which is essentially a coarse-grained dataflow model with extensions for real-time computations  barth  guthery  and barstow 1 . 
for the sake of clarity  a somewhat simplified formulation will be used in this paper: 
a stream is a sequence of data values: 
the length of s. ks  is initially 1  i.e.. there are no data values  and increases as new data values are added to the stream. 
produce s x  adds x to s as a new data value; that is. ks is incremented by one and s ks  is set to x only one process may add data values to any given stream. consume s  reads a data value from stream s specifically  it returns the data value whose index is the lowest of those values not yet read by the consuming process. if there is no such value  i e   not enough data values have been produced yet   the process suspends execution and resumes after another data value has been produced for the stream different consuming processes may consume the elements at different rates without interfering with each other conceptually  one may think of each consumer operating on a different copy of the stream. 
note that no process may alter a stream other than by adding at one end and removing at the other  nor may a process determine the length of the stream. because of these characteristics  computations modeled as processes communicating through streams are equivalent to conventional dataflow  and thus are deterministic. 
b. stream programs 
a stream program consists of a set of concurrently executing processes communicating via streams. each of the processes is defined by a program written in a traditional sequential language  extended by the two stream operations defined earlier produce s x  and consume s . perhaps the most interesting aspect of stream programs is that  in general  they may not terminate. in fact  a typical stream process is a non-terminating loop which consumes from some streams and produces on others during each execution of the loop body. 
c. specifying stream programs 
a specification of a stream programming problem consists of terms and predicates. the terms are either static  refenng to single data values  or they are streams  refering to streams of data values*. all terms are typed; however  in the following discussion  the types will be left implicit and should be clear from context. the 

terms are partitioned into three sets  input terms  output terms  and intermediate terms. there are two sets of predicatespreconditions are predicates whose arguments are input terms; postconditions are predicates whose arguments are input  output  or intermediate terms. 
such a specification is similar to specification techniques for conventional sequential programs  biermann et al 1  in fact  if there are no stream terms  we have a conventional style of specification. for such conventional specifications  a program would be said to satisfy the specifications if  for all values of the input terms which satisfy the preconditions  the program terminates with values for the output terms which satisfy all of the postconditions. however  since there may be streams in the specification and since stream programs may not terminate  we must define the requirements for a target program somewhat differently. informally  we would like the program to guarantee that all postconditions are satisfied by all stream elements which have been consumed or produced so far. somewhat more formally  a program will be said to satisfy a specification if  for all sequences of initial values on input streams which satisfy the preconditions  the program eventually produces output streams whose initial values satisfy the postconditions. for example  consider the specification: 

where input and output are input and output streams respectively. a program satisfies this specification if  for all sequences of initial values  input i   input input h   the program eventually produces at least n elements of output such that 

thus  the automatic programming problem for streams is to transform a specification of the form given above into a set of programs  each described in a sequential language extended with stream constructs  that satisfies the specification 
iii. an approach 
a. relations on streams 
the difficult part in specifying a stream program is to describe the pre- and postconditions. in our work  we initially tried to use a relatively general technique in which relations referenced stream values directly by their indices. we found  however  that subsequent reasoning about the specifications was quite difficult for many common cases  e.g merging two streams together to create a third  because the manipulations of stream indices was fairly complex. to simplify both specifications and subsequent reasoning we are using a technique based on operators and relations oriented toward streams  rather than toward stream elements. the particular operators which we have found useful are: 
	d. barstow 	1 
generated  
f is a function of one integer argument. the resulting stream consists of successive values of f for the natural numbers. that is: 
streammap 
the s  are all streams; f is a function of k arguments defined on the types of the elements of the s streams. the resulting stream contains the value of f applied to successive elements of the s streams 

hilter{s p  s and p are streams. the elements of s are of any type; the elements of p are booleans. the elements of the resulting filtered stream are those elements of s for which the corresponding element of p is true. more formally: 

where is the smallest integer such that true occurs / times in  note that this implies that 
true. 

the elements of the s streams are all of the same type; the elements of c are integers in the range  1  .k . the resulting stream contains all of the elements of the s  
streams  merged according to the elements of c: 

where / is the number of occurrences of c /  in 

shift s k  
s is a stream; k is an integer. the elements of the resulting stream are the same as the elements of s  shifted by k indices. more formally. 

pack/ng s k  
s is a stream; k is an integer. the elements of the resulting stream are vectors' of length k whose elements are of the same type as the elements of s. the vectors in the resulting stream correspond to continuous subsequences of the elements of s 

window sm  
s is a stream; k is an integer. the elements of the resulting stream are vectors of length k whose elements are of the same type as the elements of s the vectors in the resulting stream correspond to a moving window over s: 

in addition  we require one type of stream predicate which cannot be expressed as a simple stream operator: 

the s are all streams; r is a relation of k arguments 
   'angle brackets will be used to denote the construction of a vector from a sequence of values  individual vector elements will be denoted by enclosing the index in angle brackets 

1 	d. barstow 
       defined on the types of the elements of the s streams. the s streams satisfy the streamrelation expression if successive elements of the s  streams satisfy fibs a simple example of a specification  consider a switching problem: the elements of input are to be split off into one of two other streams  output1 or output1  depending on the value of 
control  which is a stream whose elements are either 1 or 1. 
informally  input is a merge of output1 and output1 	more 
formally: 
we do not claim that this particular set of operators is complete or in any sense primitive. rather they seem to cover well the software tasks which we have been studying. as our work continues  we expect the set of operators to grow and evolve 
	input terms  	input  control 
output terms  output1 output1 
postconditions 
input = merge control output1  output1  
as a second example  consider the specification of a simple feedback loop which adjusts the gain on an amplifier to keep the amplitude of a signal close to 1: 

b. target language 
as stated earlier  a stream program consists of a set of concurrently executing sequential programs. the sequential programs themselves are written in a traditional sequential programming language  extended to include stream operations. the details of the sequential language are not particularly important. in this paper  we will consider the basic primitives to be the two stream operations  produce s x  and consume s   and assignment to a local variable. in addition  we will consider as primitive any problem specification which does not involve streams. we will assume that such programming problems can be handled adequately by some other technique  e.g.  algebraic manipulation  barstow et al 1    leaving us free to focus in this paper on automatic programming techniques for streams 
in addition to these primitive operations  we will include in our target language the following three control structures: 
	repetition 	while expression do program 
c. transformation rules for stream programs our approach to automatic programming for stream programs involves the use of transformations: 	we represent knowledge about programming with streams as transformations which replace one part of a partially developed program by another to date  we have identified three general types of transformations: algorithm 	instantiation 	transformations 	produce 	sequential algorithms 	for 	stream 	problems; 	problem 	reduction transformations split a single stream problem into several  presumably simpler  	stream 	problems; 	stream 	elimination transformations remove unnecessary streams by collapsing several sequential processes into a single one. 
c.1. algorithm instantiation transformations 
the algorithm instantiation transformations have two parts: patterns consisting of particular types of relations on streams replacements consisting of particular sequential algorithms 
in general  the patterns may involve several relations. to date  however  we have been working only with transformations whose patterns involve a single relation  such as the following: 

d. barstow 	1 
c.1. problem reduction transformations problem reduction transformations are intended to reduce complex problems to problems which are simple enough to be handled by the algorithm instantiation transformations. since subproblems handled by the algorithm instantiation transformations correspond to separate processes in the target program  the effect of a problem reduction transformation is to introduce additional processes into the final program. two examples  stated informally  are 
a postcondition relation may be separated into a separate problem specification if it involves only input streams and at most one intermediate or output stream 
a postcondition relation may be separated into a separate problem specification if none of the remaining postcondition relations involve any of the first relation's intermediate or output streams. 
c.1. stream elimination transformations 
while streams are convenient conceptual tools which can contribute to simplicity and modularity in programming  there may be a computational cost associated with their use. for this reason  we are developing stream elimination rules.** two such rules  stated informally  are the following: 
if two processes consume a stream exactly once during each iteration of the loop in the process body  the loop bodies of the two processes may be combined. 
if a process produces a single output stream which is consumed by only one other process  and the second process consumes the stream exactly once in the body of the loop  then the body of the loop of the second process may be merged with the body of the loop of the first process at the point at which the stream is produced by the first process. 
iv. example 
in this section  we will consider an example drawn from a program 
 note that r x 1 ..xk.  is simply another program specification whose input terms 
  note  however  that the use of such rules does not necessarily produce more efficient code  since the efficiency of streams depends on the architecture of the target machine for example  reducing the number of streams and processes may prevent taking advantage of parallelism on a multiprocessor architecture 

1 	d. barstow 
designed to control a remote physical device communicating with a computer through streams of signals and commands. the primary job of the computer is to command the device to alternate between two measurements. associated with each measurement is an a/d converter whose gain must be set with each command. the gain commands for the measurements are received on separate streams but must be sent to the device on a single output stream. 
a. specification 
the specification of the stream program for this example is as follows: 
initial problem 
	input terms: 	
output terms: command gain 
intermediates: control preconditions: 
postconditions: 
control = generated  
f i  =  i+ 1 mod 1 + 1 
gain = merge control gainrgain1  
streamre/ation measl/remenr control command  

b. synthesis 
b.1. problem reduction 
this specification can be reduced to three simple subproblems by applying each of the two problem reduction transformations shown earlier. the specifications of the resulting subproblems are: 
subproblem 1 
input terms: output terms: control preconditions: 
postconditions: 
control = generate f  

subproblem 1 
	input terms: 	gain1.gain1control 
output terms: gain 
preconditions: 
postconditions: 

subproblem 1 
input terms: 	control output terms: command preconditions: 
postconditions: 
streamre/ation measuremenf control commano  

b.1. algorithm instantiation 
the first two subproblems may each be transformed into algorithms by applying one of the transformations shown earlier. 
the resulting algorithms are: 
subprogram 1 

subprogram 1 

the third subproblem may also be transformed by an algorithm instantiation transformation  but the relation measurement remains as a subproblem. 
subprogram 1 

the relation measurement does not involve any streams and may be replaced by its definition  solved for y: 
subprogram 1 

b.1. stream elimination 
the second and third subprograms may be combined by applying the first stream elimination transformation given earlier. the result is: 
combined subprograms: 1  1 

note that  in this case  the streamrelation postcondition could have been expressed as a streammap: 

the relation form was chosen for the sake of illustration. 

this may be combined with the first process by applying the second stream elimination transformation given earlier  yielding: 
combined subprograms: 1 1 

b.1. simplification and optimization 
several simplifications and optimizations not related to streams may now be applied  resulting in the final code for the original specification: 
final program 

v. discussion 
to date we have tested these techniques by hand simulation on a variety of specifications for software to control and record data from schlumberger's well logging tools. the tasks to be performed by the software include encoding and decoding of signals  multiplexing and demultiplexing of communication channels  feedback loops  and simple calculations. we have also done partial simulations for a few log interpretation programs. in both situations  the specification and implementation techniques seem to work well. as we implement the techniques  we expect to make changes and extensions at a detailed level  but we also expect the overall approach to remain essentially the same. 
it should be noted that these techniques address only one aspect of the problem of programming with streams. in a previous study  we characterized the programming process for log interpretation software in terms of four activities: informal problem solving  formal manipulation  implementation selection  and target language translation  barstow 1 . the techniques described in 
	d. barstow 	1 
this paper only address issues which arise during formal manipulation. work is also underway on the other activities  such as informal problem solving in which streams are used to approximate continuous functions. 
acknowledgements 
i am grateful to many colleagues for their criticisms and insights  including paul barth  paul dietz  rick dinitz  sol greenspan  elaine kant  david steier  stephen smoliar  and peter will. 
