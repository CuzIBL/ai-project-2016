
in the context of operative disruption management  decision support systems have to evaluate the typically manifold options of responding to disturbances: the temporal shift of activities and the allocation of alternative resources can be assessed by the application of generic scheduling frameworks such as the resource-constrained project scheduling problem  rcpsp . however  switches from one process variant to another one are usually not supported by the corresponding models  even though they represent a common way of repairing broken schedules in many practical domains. in this paper  we thus show how the rcpsp can be extended by the concept of alternative activities  making it possible to model and search within alternative process execution paths. beside a formal description of the conceptual extension  we show how such generalized rescheduling problems can be solved by a novel genetic algorithm and summarize the promising results of a detailed evaluation.
1	introduction
disruption management  dm  see  yu and qi  1; clausen et al.  1   is the process of responding to an unforeseen disturbance occurring during the execution of planned and scheduled operations. it is aimed at the selection of appropriate repair actions which help to get back on track and to minimize the negative impact typically associated with a disruption. two forms of interventions can be distinguished:
  reschedulingcorrespondsto a shift of scheduledstarting times or a change in the allocation of resource entities to activities. it is particularly relevant in domains where the set of operations is fixed and no process variability is given: production processes form a typical example.
  a process variation corresponds to the switch from a previously chosen process variant to another one. this form of modification is applied in many practical domains to insert or remove activities  to change execution orders  etc.: for example project scheduling and supplychain management are typically characterized by the existence of various predefined process variants.
　the resource-constrained project scheduling problem  rcpsp  see  b azewicz et al.  1; brucker et al.  1   provides a generic and well-established framework for the formal description of scheduling problems: generalizing the production-specific job shop  flow shop and open shop problems  it imposes no restrictions on either the number of entities per resource type  the way activities are connected or the characteristics of resource requirements. moreover  the existence of various highly efficient algorithms for its solution  see  kolisch and hartmann  1   proves that the rcpsp has been and still is an area of intensive research.
　the rescheduling part of dm problems can be solved within the framework provided by the rcpsp. as regards potential process variations  however there exist no possibilities to describe alternative execution paths within the rcpsp: it is thus impossible to overcomea previously made decision on a certain process variant during optimization. to the best of our knowledge the only approach to more flexibility has been made in the multi-mode rcpsp  mrcpsp  see  hartmann  1  for example : through the definition of various execution modes per activity  it is possible to consider changes in their durations and associated resource requirements. but it is obvious that the concept of mode alternations is not sufficient for the description of the entire range of potential variations.
　research on dm in the context of the rcpsp has mainly focused on responding to disruptions by way of rescheduling: artigues et al.  propose an approach to insert an unexpected activity into a given schedule; elkhyari et al.  use explanations to cope with over-constrained networks in dynamic scheduling problems; zhu et al.  present a hybrid mixed integer programming/constraint propagation approach to handling various classes of disruptions. in contrast to these works  which all focus on mere rescheduling  we herein extend the scope of available options by making switches between different process variants possible.
　for this purpose  we propose to extend the rcpsp by the concept of alternative activities: in section 1  the formal description of the conceptual extension and a modeling example from the domain of air traffic management are provided. in section 1  we propose a novel genetic algorithm  ga  for the solution of the problem: the specific crossover and mutation operators are discussed as well as the promising results of a detailed evaluation. finally  section 1 summarizes the contributions of this paper.
1	a conceptual extension of the rcpsp
1	alternative activities
we base our approach to defining alternative execution paths on the concept of alternative activities and activity dependencies. the expressive power of these constructs is illustrated by several modeling examples of typical process variations:
  a mode alternation corresponds to a change of the duration and the resource requirements associated with an activity. basically  each execution mode can be represented by a separate alternative activity. if  for example  in a sequence a  b and c three modes of b shall be distinguished  the alternative activities b1  b1 and b1 can be considered instead of b.
  for the dynamic insertion/removal of activities  the possibility to describe activity dependencies is required: an activity i is considered dependent on another activity j  if j has to be executed whenever i is scheduled. if  for example  it shall be possible to dynamically insert an activity e into a sequence a  b and c  it is sufficient to consider two alternatives of an arbitraryscheduledoperation  activity b  for example : one variant  b1  is dependent on the execution of e whereas the other one  b1  is not.
  a potential order change can be described by alternative versions of all involved process steps: one variant represents the original  the other one the optional position of the activity. if  for example  it shall be possible to swap b and d in a sequence a  b  c and d  b1 and d1 correspond to the original  b1 and d1 to the alternative positions.
  the serialization/parallelization of operations is based on two alternative activities with different precedence relations associated: one variant is a predecessor of another activity whereas the other one is not. if  for example  it shall be possible to parallelize b and c in a sequence a  b  c and d  it suffices to consider two versions of b: b1 is a predecessor of c and represents the option of serial execution  whereas b1 is not necessarily scheduled before c and represents the option of parallel execution.
　by applying the concept of alternative activities  both parts of the dm problem - the selection and scheduling of operations - are combined in one single conceptual model. this implies that  1  no detached process definitions need to be synchronized and that  1  particularly efficient algorithms can be applied for problem solving  barta＞k  1 .
1 the extended resource-constrained project scheduling problem
as regards the consideration of alternative activities in scheduling problems  little research has been done so far. one of the most important approaches can be found in the area of constraint-directed scheduling: beck and fox  base their work on the introduction of xor-nodes as well as pex  probability of existence  variables into the constraint graph  and propose specific  pex-based propagators and heuristics for solving such extended problems.
　in contrast to their work  which aims at extending the scope of constraint-directed scheduling approaches  our goal is to incorporate the concept of alternative activities into the framework of the rcpsp. consequently  we propose a compact and intuitive way of modeling process execution variants which is independent from the underlying search procedure: in the extended resource-constrained project scheduling problem  x-rcpsp   the concept of alternative activities is implemented through the distinction between active and inactive activities: only the former ones are actually considered in the resulting schedule. by activating and deactivating activities it is possible to change the activation state of the model. note that each potential combination of active elements forms an individual instance of the classical rcpsp: it is thus possible to apply well-established methods for activity sequence optimization.
　formally  the x-rcpsp can be described as follows. a process is composed of a set of potential activities a
 1 ... a a 1 where the first and the last element represent abstract start and end activities: they have a duration of 1 and do not require any resources. each remaining i a has a non-negative duration di assigned. active activities are grouped in a subset a a   inactive activities are contained in the set difference a a. for the execution of activities  a set of renewable resource types r 1 ... r is available:
for each type k r  there exists a constant amount of ck units. various forms of activity dependency can be described by use of the following constructs:
  precedence constraints. the order of activities is described by use of precedence constraints: the existence of pi j states that activity i a has to be finished at or before the start of j a . in accordance with the distinction between active and inactive activities 
p contains all potentially relevant constraints whereas
p pi j p i j a groups only relations in which predecessor and successor are currently active.
  resource requirements. resource requirements describe the relation between activities and resources. activity i a requires a constant amount of qi k units of resource type k r throughout its execution. again  two sets are distinguished: q contains all potentially relevant dependencies whereas q qi k q i a groups only the requirements of active activities.
　potential activation state modifications and associated dependencies are described by use of the following constructs:
  activity substitutions. if xi j is contained within the set of potential activity substitutions x   it represents a legal form of process variation to activate j a a for the deactivation of i a: j replaces i within a.
  activity dependencies/constraints. since the activation or deactivation of an activity might have an impact on the state of other activities  m describes dependencies between the elements of a : mi j  mi j  m indicates that activity j a has to be  de activated upon the  de activation of i a ; mi j m indicates that j has to be deactivated upon the activation of i  and mi j m indicates that j has to be activated upon the deactivation of i. note that these constraints have to be defined carefully in order to avoid inconsistencies.
　the presented x-rcpsp is a generalization of the mrcpsp  which itself generalizes the classical rcpsp  hartmann  1 : any mrcpsp can be formulated as an x-rcpsp. as regards the formulation of an x-rcpsp as an
mrcpsp  the limitations of mrcpsps must be observed. such a formulation which preserves the activities  precedence constraints and resource constraints of the x-rcpsp is possible if the following properties hold:
xi j xxj ix 1 xi j xj k xxi kx 1 xi j xi jpj k pk jp
p 1 m 1 　 1  it is not possible to describe one-directional mode substitutions in the mrcpsp.  1  any activity execution mode has always to be a direct substitute of all other ones.  1  activity replacements are only possible at exactly the same position: no changes of the activity execution order can thus be defined.  1  no activity dependencies can be described for different execution modes: it is therefore not possible to dynamically insert or remove activities.
　the result of solving the x-rcpsp is a combination of model activation state and sequence of all active activities: a schedule s is represented as a vector of starting times
 β1 β1 ... βn for the set of active activities a with a n. s is considered valid if the following criteria are fulfilled:
  activation state validity. the activation state a associated with a schedule s is valid  if and only if it can be derived from an original valid activation state through the application of the substitutions defined in x   satisfying all constraints defined in m .
  starting times validity. let a t be the set of activities carried out at a time t. the staring times β1 ... βn are valid if  1  βi 1 for any i a   1  βi di βj for
	any pi j	p and  1 	i a t qi k	ck for any k r
at any t. note that these criteria correspond to the ones defining schedule validity in the context of the rcpsp.
1	modeling an exemplary process
in this section it is illustrated how the framework of the x-rcpsp can be applied for the formal description of realistic processes. for this purpose  the aircraft turnaround - as the process aircrafts typically go through at an airport between touchdown and takeoff - is considered in a simplified version  corresponding to the combination of core processes as defined by  carr  1  : after the plane reaches its final position  incoming passengers leave the aircraft  deboarding . it is then prepared for the next flight during fueling  cleaning and catering  which may be executed simultaneously. outgoing passengers enter the aircraft  boarding  before the plane finally leaves its position heading for the runway.
　apart from inherent options of rescheduling  three forms of variations are assumed to be available for the adaptation of the process in response to disruptions: first  deboarding can be accelerated through the assignment of additional buses. second  cleaning can be shortened if in exchange the cabin table 1: x-rcpsp description of the aircraft turnaround
setcontentrbus  firebrigadeastart  deb  debb  fue  fuep  cat  cle  cler  ins  boa  endpstart deb  start debb  deb fue  deb fuep  deb cat  deb cle 
deb	cler  debb	fue  debb	fuep 
debb cat  debb cle  debb cler  fue boa  fuep end  cat boa  cle
boa  cler ins  ins boa  boa endis inspected by the cabin crew prior to boarding. and third  the process can be accelerated by parallelizing fueling and boarding if the fire brigade is present for supervision.
　table 1 summarizes the central elements of the corresponding x-rcpsp  particularly activity durations and resource capacities are omitted  based on a simplified form of notation:  1  i j stands for pi j   1  in k for qi k n   1  i j
for xi j   1  i	j for xi j	xj i   1  i	j for mi j 
etc. process steps are represented by the first three letters of the associated activity names. potential process variations are expressed by use of alternative activities. the first of the available options corresponds to a mode alternation  as also possible in an mrcpsp : debb is characterized by reduced time and additional resource requirements. the second option corresponds to a combination of mode alternation and activity insertion: cler takes less time but is connected to the optional activity ins  for cabin inspection . the third option corresponds to the parallelization of two process steps: fuep is not necessarily executed prior to boarding but has additional resource requirements associated.
1	solving the x-rcpsp
the application of the x-rcpsp to dm is based on a comprehensive model describing the baseline schedule and all valid process variants. the following steps are performed upon the occurrence of a disruption:  1  the schedule is updated accordingly.  1  based on a schedule evaluation function f s and the corresponding objective  minimization or maximization   optimization is performed. unlike in scheduling problems  where mainly the minimization of the total process execution time  the so-called makespan  is of interest  common goals in dm are the minimization of costs for earliness  tardiness  interventions and the deviation from the original schedule: typically  several of these aspects are combined.  1  finally  the difference between the original and the optimized schedule is interpreted as the set of interventions to apply.
　due to the central relevance of the second step  we will focus on the optimization of the x-rcpsp in this section. as regards the choice of an approach to the identification of the optimal combination of activation state and activity starting times  the mentioned practical relevance of proximity to the original schedule suggests the use of incremental local search algorithms. since  moreover  performance usually represents a crucial factor in the operative process of dm and since particularly genetic algorithms perform well for the rcpsp  kolisch and hartmann  1  we herein present and evaluate an evolutionary algorithm for the solution of the x-rcpsp.
1	an evolutionary algorithm
representation
due to the complexity associated with the direct modification of time values  it is a common approach to use some sort of abstract solution representation during optimization  kolisch and hartmann  1; hindi et al.  1 . we decided on the use of activity lists: λ is a precedence feasible list of all elements in a  describing the order in which active activities shall be added to the schedule. in the associated serial schedule generation scheme  each operation is scheduled at the earliest possible time: this way  each valid λ can be converted into a valid schedule unambiguously.
initialization
the original schedule can be converted into a corresponding activity list easily: λ1 is obtained by simply sorting all active activities by their scheduled starting times. it represents the legal option of performing no intervention at all and is therefore considered the first element of the first generation. all other solutions of the initial population are generated by the application of the mutation operator  see below  on λ1.
crossover
if the elements contained in two parent activity lists λa and λb are equal  one of the well-elaborated rcpsp-specific crossover operators can be applied  see  hartmann  1; hindi et al.  1  for examples or  kolisch and hartmann  1  for a comprehensive overview . if  however  the contents of λa and λb differ  list combination is more difficult: algorithm 1 summarizes a crossover operator  which is based on the idea that λa steers the selection of elements contained in the child whereas λb determines the respective order  and which guarantees that only valid activity lists are generated.

algorithm 1 crossover  λa λb 

1: if aa ab then
1:	apply rcpsp-specific crossover operator
1: else
1:	t xa xb	x	x	x	xb xa
1:	return incompatible
1:	b
1:	do
1:	changed false
1:	if i	λ  xi j t then
1:	replace i with j in λ
1:	changed true
1:	end if
1:	while changed
1: end if
1: return λ

algorithm 1 mutate  λ 

1: if a randomly generated value	1 θ then
1:	rearrange λ by applying rcpsp-specific mutation
1: else
1:	select an arbitrary xi j x	i	λ
1:	replace i with j in λ
1: end if
1: return λ

　denoting the set of activities in λi as ai a   it is first checked whether an rcpsp-specific operator can be applied  line 1 . if this is not possible due to aa ab  a transition set t x is initialized for coping with different list contents: t describes which substitutions have to be applied for the conversion of λb to λa. let xi x be the set of substitutions that has led from an original set a1 to ai: t can then be defined as the combination of all substitutions exclusive to λa and the inversion of all substitutions exclusive to λb  line 1 . since  however  substitutions are not necessarily directly reversible  it might be the case that λb can not be  directly  transformed into λa: if the size of t is unequal to the size of the symmetric difference  the activity lists are considered incompatible for crossover and a different selection of parent lists has to be made  line 1 . otherwise  the child activity list λ is initialized as a clone of λb before a repetitive replacement procedure is started  line 1 to 1 : as long as λ contains replaceable elements in terms of t   the respective substitutions are applied: note that dependencies in m have to be observed and that precedence feasibility has to be secured by shifting successors to the right-hand side of their predecessors. if the application of the substitutions in t results in an inconsistency  i.e. activities have to be activated and deactivated at the same time due to contradicting dependencies in m    the replacement operator  called in line 1  fails: λa and λb are considered incompatible for crossover and different parent activity lists have to be selected.
　if  for example  λa debb  fue  cle  cat  boa and λb debb  cat  cler  ins  boa  fuep for the process modeled above  the transition set t cler cle  fuepfue can be deduced from xa debdebb and xb deb debb  cle cler  fue fuep .
crossover thus results in λ	debb  cat  cle  fue  boa .
mutation
an x-rcpsp-specific version of the mutation operator is described in algorithm 1: apart from changes in the order of activities  also potential process variations are considered.
　with a certain probability θ  the activation state is left unmodified and any rcpsp-specific mutation operator can be applied for the random modification of λ  see the references mentioned above for crossover . otherwise  an arbitrary replacement is selected for an element contained in the activity list: as regards its application  again all associated dependencies and precedence constraints have to be observed.
fitness and selection
the quality of an activity list is evaluated by converting it into the corresponding schedule and analyzing the associated costs by use of the predefined schedule evaluation function.
table 1: portion of the identified optimization potential that could be tapped by the genetic algorithm within limited time
limitprocess complexityresource complexityleft-shiftsbaseline scheduleoveralllowhighlowhighyesnotightwidesmall1 sec
1 sec1%
1%1%
1%1%
1%1%
1%1%
1%1%
1%1%
1%1%
1%1%
1%large1 sec
1 sec1%
1%1%
1%1%
1%1%
1%1%
1%1%
1%1% 1%1% 1%1% 1%1 sec1%1%1%1%1%1%1%1%1%this way  activity lists are made comparable. in each step of evolution  a new generation is derived from the previous one by combining the best individuals  the survivors  with new ones  their children  generated through the application of crossover and mutation to the fittest activity lists. in order to avoid the convergence to a local optimum  we randomly replace individual members of the generated population with the initial activity list λ1: the probability for such replacements is decreasing with the continuingprogress of evolution. due to the significant role of randomness in the selection and mutation of solutions  it is made sure that the exact optimum is identified by the ga at least within an infinite time horizon.
1	computational experiments
the above algorithm has been implemented in a java-based rescheduling engine: the realization of the rcpsp-specific operators is based on the ga proposed by hartmann . as there are currently neither instances of nor testset generators for reactive scheduling problems available  policella and rasconi  1   a framework for the parameterized generation of dm problems has also been developed: normalized versions of network complexity  resource factor and resource strength  as proposed by kolisch et al.   as well as parameters describing the characteristics of baseline schedules and disruptions can be used to define the problem structure.
　the generated instances consist of a baseline schedule and a disruption occurring during its execution. based on the possibility to assign a due date δi to an activity i a   the
goal of optimization is to minimize the sum of the overall process tardiness i amax 1 βi di δi and the number of schedule modifications: each modification is assumed to cause three times the costs of one time unit of tardiness.
　as regards complexity aspects  the following configurations have been used to generate 1 different problem classes:
  low/high process complexity. based on this parameter it can be specified whether the scheduled activities are linked by few or by many precedence constraints.
  low/high resource complexity. the aspects of resource requirements and resource availability are combined in this parameter: low resource complexity corresponds to the existence of few requirements and the availability of many resource entities  high complexity to the opposite.
  with/without left-shifts. if an activity is scheduled to start earlier than it did in the original schedule  this is considered a left-shift. whether such modifications are valid or not can be defined by the assignment of appropriate lower bounds to the activity starting times.
  tight/wide baseline schedule. the distribution of starting times and the amount of incorporated slack time are combined in this parameter: in a tight  wide  schedule  activities  do not  start at the earliest possible point and many  only few  processes are executed simultaneously.
　small and large problem instances were distinguished: the former consist of one process containing 1  the latter of one process containing 1 activities. for each problem class  1 instances of both sizes were generated by random; on average  one out of ten activities had one of the execution alternatives mentioned in section 1 associated. in each case  a disruption was injected immediately at the start of execution by doubling the durations of half the activities.
　as there is currently no benchmark data available for dm problems  it was not possible to compare the proposed ga to existing approaches. instead  the fast convergence of schedule quality towards the optimal or at least a good solution is illustrated. table 1 summarizes how much of the identified optimization potential could be tapped within limited time1.
　for each of the small instances  first the exact optimumwas identified based on a deterministic procedure: the difference between the costs associated with the disrupted schedule sΔ and the optimal schedule s defines the optimization potential. for the evaluation of the ga  1 runs were conducted for each of the generated cases and each of the regarded time limits: let s denote the schedule resulting from such limited optimization. the figures listed in table 1 thus correspond to
　　　　　　　　　　　　f sΔ f s the average value of f sΔ f s : basically  they reveal that in almost any case the optimum could be identified already within the first 1 or 1 seconds of optimization.
　as even by use of the most powerful exact methods  see  laborie  1  for a recent approach  hard scheduling problems of the considered size are not tractable in reasonable time  hartmann  1; alcaraz et al.  1   an alternative procedure has been chosen for the large instances. instead of identifyingthe actual optimum  the best solution that could be found during  1  all ga runs and  1  an additional run limited to 1 minutes was taken as a reference. this approach was motivated by the observation that large improvements can mainly be made within the first generations: the typical development of the costs associated with the best known schedule throughout 1 minutes is depicted in figure 1. correspondingly  the figures listed in table 1 show how close the ga could get to the best known solution within 1  1 and 1 seconds. the following observations can be made:
figure 1: reduction of schedule costs during optimization
  due to the fact that the existence of many precedence constraints narrows the search space  the ga converges faster for problems with high process complexity.
  resource complexity has considerable impact on the time required for the conversion of activity lists into schedules. a low complexityvalue thus means that more schedules can be analyzed within the available time and that the ga converges faster  therefore.
  the possibility of left-shifts extends the space of available rescheduling options: the genetic algorithm performs better if only activity postponements are valid.
  the aspects of slack time and process simultaneity have no significant impact on the speed of convergence.
　the overall values indicate that the assumption of fast convergence to good schedule quality holds. although no comparison with existing algorithms was possible  due to the mentioned lack of comparable results   the figures illustrate the effectiveness of the proposed operators and represent a starting point for future improvements and evaluations: our recent results indicate that particularly local forms of rescheduling can improve the algorithm's efficiency.
1	conclusions
this paper described how the generic framework of the rcpsp can be extended by the concept of alternative activities  to make its application in realistic dm problems possible: the x-rcpsp is based on a distinction between active and inactive activities as well as the definition of valid activity substitutions and associated constraints. beside the modeling framework  we presented a novel genetic algorithm for the solution of the proposed generalization of the rcpsp. its evaluation  which was based on an additionally published set of problem instances  proved the fast convergence of schedule quality towards the optimal or at least a good solution.
acknowledgments
this research project was partly funded by grants from  1  fff austria  project cdm airports  and  1  the european union  project ws-diamond  contract 1.
