 
　　annotated production systems provide a procedural model for skill acquisition by augmenting a production model of the skill with formal commentary describing plans  hugs  and interrelationships among various productions. this commentary supports efficient interpretation  self-debugging and self-improvement. the theory of annotated productions is developed by analyzing the skill of attitude instrument flying. an annotated production interpreter has been written that executes skill models which control a flight simulator. preliminary evidence indicates that annotated productions effectively model certain bugs and certain learning behaviors characteristic of student. 
　　this research was supported in part by the advanced research projects agency of the department of defense under office of naval 
research contract n1-c-1  and in part by the naval training equipment center under contract n1-c-1. 
1. introduction 
　　productions systems have many strengths as a model of human problem solving - modularity  simple control  generality; but they are not sufficient. we argue for this position by analyzing the skill of flying an airplane under instruments. a production model will bo defined and its limitations considered. these limitations will involve inefficiencies in dealing with context  a lack of direction for debugging  and the absence of self-knowledge useful for learning by generalization and analogy. our next step is to define an annotation vocabulary consisting of formal comments regarding the plans  bugs  and interrelationships of the basic productions. we show how these annotations support more efficent execution of the skill  debugging of difficulties and self-improvement. 
　　annotated production systems represent a marriage of the comment-based approach to debugging developed by sussman  and goldstein  with the procedural architecture of production systems  newell & simon 1 . goldstein and sussman were not concerned with the psychological validity of their debugging models. production systems have typically not been concerned with modelling learning. the marriage of productions and annotations holds out the possibility of an improved modelling capability. davis  develops a related theory of mcla-knowlcdge for production systems to guide the knowledge acquisition process for large knowledge-based programs which we discuss in section 1. 
　　our work on annotated production systems is based on a series of experiments with a flight simulator implemented in lisp by the authors. the production systems and annotated production systems discussed here run in conjunction with this simulator. the debugging and learning modules have been hand-simulated  but not implemented. 
　　unlike the traditional carnegie mellon experiment in which particular individuals are modelled  our experiments arc concerned with generic modelling; that is  they are concerned with modelling typical skill states of student pilots  as judged by the extensive literature on flight instruction  langewiesche  remains the classic text  and the experience of the first author and his spouse in learning to fly. 
　　in the next section  we characterize instrument flying to indicate why we have chosen it as our experimental skill. section 1 describes the strengths of a production system model for this skill. section 1 analyze! its weaknesses. sections 1 and 1 define an annotated production model and indicate its utility for more efficient skill execution and for self-debugging. section 1 describes the design of a heuristic learning program for annotated production systems. 
1. attitude instrument flying 
　　our experimental focus has been on attitude instrument flying wherein the goal is to maintain steady climbs  turns  descents or level flight. it is the basic constituent skill of instrument flying. 
　　flying  as a whole  is an appealing domain for studying skill acquisition because:  1  there is extensive literature on f l i g h t instruction;  1  it is an important skill whose improper employment risks lives;  1  it is an adult  as opposed to infant  learning experience and hence instrospcclive evidence is available;  1  a useful application of an improved analysis of the learning process for this skill is the design of a computer instructor for flight simulators;  1  it is representative of an important class of real-time control skills such as sailing  driving. 
　　instrument f l y i n g   in particular  has a constrained set of perceptual inputs - the instruments -- and a restricted set of actions - the controls. attitude instrument flying  while a sub-skill of instrument flying  is still sufficiently rich to be an interesting modelling problem. 
　　let us consider a few of the problems associated with flying a plane  in order to define the characteristics of a generic model for flight skill. the first observation is that flying involves responses to the external forces of the environment - gravity  air movement  and other factors. this requires instruments to monitor the plane'* state and controls for changing that state. hence  for each goal  a 
　　mapping from measurement to control is required. 
　　however  such a mapping cannot be from one instrument to one control  since the higher order effects would be neglected. thus  using only the value of the vertical velocity indicator to manipulate the elevators while trying to achieve level flight will not always succeed. a better model would take into account v e r t i c a l acceleration. without a sense of the second derivative  the pilot will over or under control the aircraft. 
　　the mapping must be context sensitive. a control response appropriate in normal situations may fail in special contexts. for example  under normal circumstances  the goal of straight and level flight can be achieved by sequentially attempting these goals  i.e. the pilot can concentrate on establishing the proper heading  and only when it is within tolerance  direct his attention at the altitude. the rationale for this is that in normal circumstances the two processes are virtually independent. however  if the aircraft is in a stall  i.e. the wing has lost lift   then the assumption of independence of the two subgoals is not valid and special measures must be taken in order to recover from this state. the wings must be leveled before the pitch of the plane is corrected. a representative set of flight 
contexts are: 
normal flight 
takeoff 
visual flight takeoff 
short field takeoff 
soft field takeoff 
landing 
visual flight landing 
instrument landing 
cruise 
straicht and level 
climb 
descent 
turn 
abnormal flight recovery 
encine failure 
instrument failure 
structural failure navigation failure 
non-normal flicht condition 
collision course 
stall 
spin 
stable flight outside tolerances 
　　
knowledge 	a c q . - l : 
　　
　　context sensitivity raises the issue of exceptions. a particular method may apply in all but a few situations. these exceptions should be explicitly accounted for if the skilled practioncr is to successfully anticipate them. note that this is not the case of two competing heuristics  each equally applicable and each applying to roughly the same number of situations. rather  we have the situation of one heuristic working almost everywhere and only a few exceptions need to be noted. for example  it is almost always the case that the ailerons are used to bank the airplane. in rare circumstances such as a spin  the rudder is used to level the wings. such rare circumstances arc explicitly known as exceptions by pilots - indeed  much of flight training concentrates on the exceptions. 
　　the flight world cannot be decomposed into orthogonal control dimensions. instead  actions in one dimension effect other aspects of the flight of the aircraft. thus  changing the bank of the aircraft by manipulating the ailerons will also cause a change in the pitch of the aircraft. there is no one-to-one mapping of the variables of the situation onto the set of controls. these interrelationships are in part the cause of the context sensitivity noted above. some of the interrelated control effects are: 
rate of turn it controlled by both ailcront and rudder. 
kate of climb it controlled by both throttle and clovatort. 
in landing t  rate of climb it affected by flaps and landing gear. in tteep turns  rate of climb it affected by ailcront. 
　　finally  because this is a dynamic situation  time plays an important role. hence  not only is the action which is chosen and applied important  but so is the rate at which that action is applied  and the timo period over which the corrections are applied. this introduces problems such as overcontrolling  a direct result of these dynamics. 
1. a production system model for attitude instrument flying 
   pontius-1 is a production system for achieving straight and level flight that embodies a mapping from goals and measurements to controls. below are a few representative productions without their annotation commentary. the patterns describe the goals of the productions; the actions observe instruments and manipulate controls. 
 definition sftll ;s stra1ght. l-l vtl. ;;to achieve straight and level f l i g h t   f i r s t achieve ;;level f l i g h t   and then straight f l i g h t . 
 goal:  and  s flight   l flight    
	 action: 	 do  achieve  l flight   
 achieve  s flight      
 definition l-flight-1 
;;to achieve level f l i g h t   keep the pitch of the plane at zero  ;;where the pitch 1s the angle of the nose with the horizon. 
 goal:  l flight   
 action:  do  achieve  notice delta pitch   
 achieve  make pitch 1      
 definition notice-delta-pitcm-via-artificial-horizon-1 
; ; i f the nose 1s down according to the a r t l f l c a l horizon  
	;;then assert this fact m memory. 	this 1s one among 1 
;;mtthodi for noticing the pitch of the plane. 
 1al:  notice oelta pitch   
;;qual-value returns the sign of its input. 	thus  ;;these productions are sensitive to the qualitative ;;va1ue of the instruments. 
	 action: 	 cond  if   -  qual-value artificial-horizon-pitch      
. ＊  qual-value  delta pitch   +   
 if      qual-value artificial-horizon-pitch  -  
. ＊  qual-value  oelta pitch   -           
 definition notice-delta-pitch-via-vertical-velocity-indicator-1 ; ; i f the plane 1s descending  the nose 1s down. 
 goal:  notice delta pitch   
	 action: 	 cond  if      qual-value w i   -   then  
.      qual-value  delta pitch   -     
 if   ＊  qual-value w i       then  
.      qual-value  delta pitch               
 definition control-pitch-via-elevators-1 
; ; i f the nose 1s down  pull up on the elevators. another ;;contro1 for pitch manipulates the t h r o t t l e . 
 goal:  make pitch 1   
;;delta-elevators 1s a primitive control actions. 
 action:  delta-elevators  minus   delta pitch      
   the     preceding a form indicates that the form is a predicate whose truth value of t or nil is computed by pattern-matching against the database. the  .  indicates that the following form is to be asserted in the database  rather than being executed. 
   pontius-1 has approximately so rules for attitude instrument flying. a representative list for straight and level flight arc is given below where each title refers to one production by its goal. 
productions for achieving straight and level flight: 
sequential plan for straight-flight and level-flight coroutine plan for straight-flight and level-flight 
productions for achieving level-flight: 
	achieve 	l-flight 
notice delta pitch via artificial horizon 
	notice 	delta pitch via wi 
notice delta pitch via altimeter 
notice delta pitch via airspeeo 
eliminate delta pitch with elevators 
eliminate delta pitch with throttle 
productions for achieving straight-flight 
	achieve 	s-flight 
notice delta bank via artificial horizon 
notice delta bank via turn coordinator 
notice delta bank via directional gyro 
notice oelta bank via magnetic compasss eliminate delta bank with ailerons 
eliminate delta bank with rudder 
   these rules have a standard pattern/action form. the rules arc invoked in a depth-first method. that is  given a goal to achieve  the actions corresponding to that goal arc achieved in a depth-first manner by matching achieve patterns against coal descriptions. if more than one production matches in a situation then the default order of calling is used. for example  there are several methods of noticing a change in pitch. 
   production systems arc an appealing representation for the flight world for several reasons. first  the knowledge of how to fly an aircraft can be represented to a first approximation as a sequence of independent  recognize-act  pairs. that is  it can be represented as a sequence of rules of the form: given some goal and some context  do this action to bring the state of the aircraft  closer  to the desired state. production systems offer a convenient formalism for structuring and expressing that knowledge. fig. 1 shows the performance of pontius-1 in maintaining a shallow bank. 
   second  it is important in a dynamic system to detect and deal with a large number of independent states. one must be able to react quickly to small changes. production systems faciliate such a detection and reaction process. this is since any rule could possibly be the next to be selected  depending only on the state of the data base at the end of the current cycle. thus  each rule can be viewed  a a demon awaiting the occurrence of a specific state. 
　　
knowledge 	a c q . - l : goldstein 
1. 
　　
1. limitations of production systems 
     the assumption that all rules are independent carries with it the additional assumption that all rules arc equally likely to bo used at any stage of operation. in this case  since the rules are sensitive to context  such an assumption is not valid. specifically  some contexts are much more common and likely than others. titus the rules are weighted in a certain sense and a formalism which accounts for this weighting would improve the performance of the model. similarly  the fact that exceptions to situations exist should also be accounted for. once again  a weighting factor is involved as the exceptions arc much rarer than the normal situations. since we arc dealing with a dynamic real time system  performance is crucially linked to reaction time. as a result  it is important for all possible efficiency considerations to be used. this is why the weighting factors must be taken into account. 
     there are interactions in the flight world. thus  there should be some capability for communication between rules. in production systems  there i1 only a limited communication between actions since such communication must take place via the short term memory data base. in a flight situation  this is inappropriate. for example  changing the bank via the ailerons can cause a change in the pitch. one way to communicate this fact is to actually manipulate the ailerons and let the system notice the change in pitch. but there should be an easier and more certain method of communication  for example  to alert the system that the manipulation of the ailerons may have effects on the state of the pitch. 
     the assumption of the independence of actions is not always valid cither. in normal situations  this is the case. however  there arc situations where parallel processes  or other complex procedures should be used. production systems  however  arc at their best when actions are independent  and are not well-suited to coordinate processes. fig. 1 illustrates an unsuccessful steep turn - the nose down pitch caused by the steep turn has not been corrected rapidly enough by pontius  which is executing a sequential plan for straight and level flight. 
the bug of paying undivided attention to the current goal and ignoring other subgoau is a standard error of the student pilot. much of instrument flying is devoted to establishing the proper 
 scanning pattern . the result of erroneous scan in the case of the steep turn shown in fig. 1 - entering a dive - is a common behavior of instrument students. pontius exhibits many instances of such standard errors  and it is in this sense a generic model. fig. 1 will show pontius correcting this underlying bug by establishing a proper scanning pattern or  coroutine plan . 
     production systems have a restricted syntax which means that the action side of the rules is restricted to a conceptually simple operation on the data base. this makes it difficult to include complex actions like coroutines or time sharing processes. 
     another common problem associated with production systems is the  implicit context problem . this is the fact that the rule base has a total ordering associated with it and the position of the rule in this ordering becomes an important factor. thus  since a rule ordinarily won't be called unless tho rules preceding it in the total order have failed  there arc in essence extra conditions on the application of the rule. this may affect the performance of the system. 
     these are some of the problems associated with using production systems as a representation for the performance component of these models of control skills. as a consequence of these problems  modifications were made to the production system formalism in order to improve the performance of the system. this resulted in the formation of annotated production systems. 
s. annotated production systems 
     annotated production systems extend ordinary production systems by adding commentary to the productions. this allows one to represent second order knowledge explicitly and therefore to use this knowledge to handle some of the problems mentioned in the previous section. these annotations include caveats  rationales  plans and control information. 
　　the annotated version of the production for straight and level flight shown earlier is: 

　　we have noted that in the current domain  the rules do not all have equal weight in terms of range of applicability  or likelihood of applicability. thus  rather than creating a rule for each combination of goal and context  we employ caveats to account for multiple contexts affecting a goal. hence  the normal context will have a production associated with it. these caveats describe the relationship of the goal of the production to various  non-normal  contexts. they may simply point out when assumptions implicit in the form of the production are invalid  as is the case in the second caveat; or they may provide explicit information about the planning necessary to achieve the goal in the non-normal context  as is the case in the third caveat. many of the interrelationships between actions can also be represented by the caveats. these can serve as warnings about possible effects of the action part of the production  such as the first caveat which warns of subgoal fixation. 
　　the  implicit context problem  is handled by adding second order knowledge to the system. thus  the control comment of a production contains information regarding the use of a production in cases where more than one such production matches the current goal. for example  there are four productions to notice a change in pitch. these involve using the artificial horizon  the vertical velocity indicator  the altimeter and the airspeed. information can be added to the productions to state that one of these methods is the primary method  that others should be used to verify the validity of the primary production  and still others should be used as backup in case the primary method is known to be inoperative. this is exemplified by the production for level flight. 

　　one of the advantages of a production system is that the structuring of information as a collection of rules allows the system to generate explanations of its actions fairly easily. by making explicit more of the knowledge embedded in the system  we can enhance the explanation facilities. this is exemplified by the rationale comments  which describe the overall plan justifying the nature of the action. as well  rationales for the use of particular productions are attached to the productions themselves  to that explanations are further aided. for example  if the system was questioned about why it was attempting to achieve straight flight  it could respond that it was attempting to achieve the higher level goal of straight and level flight. if it was further questioned about why it was doing this in the particular method chosen  in this case a sequential plan  the system could use the rationale to explain that in 
　　
knowledge acq - 1 : ciolhstein 
1 
　　
a normal situation  the two subgoals are essentially independent. 
　　such a facility for explanation  and in particular the rationales  also aids the system in debugging its performance  by pinpointing the likely source of error. to further this debugging process  models of plans and general bug types are stored with the system. these models can then serve to provide a context for debugging and repair. the plan associated with each production is attached to the production. the caveats may also contain pointers to new plan types which may be used in case of failure. 
　　specifically  we have the following plan taxonomy  w i t h indentation indicating successive specialization. 
plans 
conjunctive 
independent 
parallel 
sequential 
dependent 
ordered 
coroutine 
global 
causal 
control 
open feedback 
measurement 
direct 
indirect 
　　associated with this taxonomy of plans is a taxonomy of bugs. for example  a sequential plan in a real-time situation is susceptible to the bug that while one goal is being pursued  the other gets out of hand. we view debugging as a transformation process between plans. hence  debugging a sequential plan might mean to employ the alternative of a coroutine plan in which processing time is shared between subgoals. to illustrate this  consider the following situation. we are attempting to turn the aircraft while maintaining level flight. 
in the rate of turn desired is small  the two goals can be considered independent and a sequential plan is appropriate. this was the plan cmployod in the successful maneuver of fig. 1. however  if the rate of turn desired is large  then the two goals arc no longer independent and there is an unexpected dependency. so we have a linear plan bug. this was illustrated in fig. 1. it is repaired by changing the plan to a coroutine plan  in which attention is tirncshared between the subgoals. fig. 1 illustrates pontius successfully flying a steep t u r n when t o l d to employ a c o r o u t i n e plan. c u r r e n t l y   transformations between plans can be requested of pontius and the appropriate modifications made by accessing annotations. automatic debugging is not yet implemented. 
　　by a t t a c h i n g these annotations to the productions  the performance of the system is greatly enhanced. among the effects are: an explanation capability  automation of debugging  efficient structuring of the procedural knowledge  and the use of complex processes such as parallel processes or timesharing processes. because we are dealing with a real time situation  performance efficiency becomes an important factor and annotated production systems show a large improvement in this dimension over ordinary production systems. 
	1. 	interpretation of annotated productions 
　　using annotations  there are 1 ways in which the productions can be interpreted. 
　　 1  standard interpretation: the simplest possible operation of the performance component of this system uses only the basic portion of the production rules in a standard pattern directed mode. in this mode the annotations are used only during debugging and serve to help explain the difficulty and possibly correct it. 
　　 1  directed interpretation: an improvement over this mode of operation is to allow a more sophisticated capability for handling situations in which multiple productions match the current goal. t h i s mode is governed by the search advice contained in the control annotation  as was illustrated by l - f l i c h t - 1 . this control information specifies whether the search should be depthfirst  breadth-first or some intermediate variety allowing for the possibility of suspended nodes. such specification is accomplished  in part  by stating whether a method is  primary   for  checking  or for  backup . the selection criteria can cither be explicit predicates or can be deduced from other commentary. 
　　 1  careful interpretation: a further improvement is to access the commentary in each production  before the production is executed. the commentary is used to verify the appropriateness of the production  its success  and the appropriate actions to take upon failure. thus  if a annotated production states that it is applicable in the normal context but not in all contexts  this mode checks the context as a whole  and not just the state variables being accessed directly by the production  to check whether the normal state is in effect. similarly  if the system notes that several strategics are available for the same goal  all arc tried and compared. if inconsistencies exist  then the rationales and caveats arc checked for an explanation. 
1. learning 
　　annotations can provide the data for a heuristic compiler capable of m o d i f y i n g the production system to achieve progressively improved levels of performance. we have not implemented such a 
compiler  but our plans for its design arc based on the following six techniques:  1  the creation of specialists   1  the use of caveats   1  the use of plans   1  learning by generalization of the plan   1  learning by analogy  and  1  efficiency considerations. 
　　 1  specialist creation: the organization of productions with a common calling pattern into a specialist is one powerful technique. for example  standard execution consists of simple pattern directed calls. alternatively  a specialist may be constructed to dynamically decide which productions from a set with a common goal should be applied  the order of application  whether confirmation is necessary  which should serve as backup upon failure  whether a coroutine search is required  etc. in directed interpretation  such decisions are made on the basis of explicit control advice  e.g. statements that some methods are primary  while others are intended for backup or verification. specialist creation compiles this advice by creating a separate  specialist  production which then calls-by-name  in the desired order  the various productions mentioned in the control annotation. the original set of productions with a common calling pattern are erased from the global context and asserted only in the local context of the specialist. only the specialist is asserted in the global context. hence  this aspect of heuristic compilation represents the understanding of the interrelationships between pieces of procedural knowledge that have a common goal. 
　　note that such a choice is strongly motivated by efficiency considerations  due in part to the real time nature of the domain. one problem which could arise  however  is if the rule base is incremented. then the specialist would not take note of this new rule and would have to be updated  a possibly costly and difficult job. 
　　 1  caveat checking: another aspect of the heuristic compiler is deciding where to check for caveats. careful interpretation checked at the local level of entry into the productions. an alternative is to move a caveat from a position inside a production  where it is accessed only when the system is considering execution of the production  to an entry check associated with goals higher up in the hierarchy  thereby triggered preventing its original production from even being considered . 
     the heuristic compiler may also notice that all  or many  productions with a common goal have the same caveat and decide to introduce a specialist for these productions which checks the caveat before considering any of them. 
     the caveat may bo serviced in two ways. it can be examined upon entry to the method. alternatively  the caveat can be compiled into a demon which remains active for as long as the method is on the goal stack. in this latter case  the caveat is constantly monitored during the period during which the action of the method is being executed. 
     the system can be informed specifically of the kind of servicing desired for the caveat: for example  entry caveat  exit caveat  continuous caveat; or this can be deduced from the nature of the caveat's test. 
　　
knowledge 	acq.-1 	golden 
1 
　　
　　 1  plans: heuristic compilation can also involve a consideration of the consequences of different planning approaches - control plans  linear plans  ordered plans  coroutine plans  iterative plans. this is used to provide more determinism and direction in the organization of the system. for example  the use of plan characteristics to debug errors was illustrated in moving pontius from a sequential to a parallel plan for a steep level t u r n . however  this was done manually. pontius docs not yet diagnose these difficulties by itself. 
　　 1  generalization: another function of the heuristic compiler is generalization. an example of this is where a student has learned a packet of productions for level flight and is then told that to achieve climbing flight  it is only necessary to generalize these productions in such a way that the desired pitch is transformed from a constant  zero  to a variable. for example  l-flicht-1 can be transformed to c l i m b - f u c h t - 1 : 
 definition l-fli1ht-1 
 goal: l flight   
 action:  do  achieve  notice delta pitch   
 achieve  make pitch 1      
 definition climb-flight-1 
 goal: climbing flight to 1altitude   
 action:  do  achieve  notice delta pitch   
 achieve  make pitch 1variable      
     alternatively  one could teach the system climbing flight as a separate primitive packet and let the heuristic compiler notice that the two packets have a common generalization. then the two packets could be replaced with the common generalized version. 
      1  analogy: another process used to create new methods from old ones is  analogous reasoning . for example  the entire packet for straight flight might be constructed from the previously learned packet for level flight using the analogy: 
	pitch 	--  bank; 
	altitude 	--  direction; 
elevators --  ailerons; 
	feet 	--  degrees; 
vertical velocity indicator --  turn coordinator; 
altimeter --  directional 1yr1; altimeter --  compass. 
this would have to be debugged  but it provides strong guidance in the initial program construction process. using this mapping  sflicht-1 can be created from l-flicht-1. 
 definition s-flight-1 
 1al:  s flight   
	 action: 	 do  achieve  notice delta bank   
              achieve  make bank 1      control: 
. ＊  primary-methods  notice delta bank   
 find m -such-that     :m :method  via ah     
. ＊  check-methods  notice delta bank   
 -  methods  notice delta bank   
 primary-methods  notice delta bank     
. ＊  backup-methods  notice oelta bank   
　　　 check-methods  notice delta bank      caveat: 
 bug method-fixation 
 goal:  notice delta bank   
 method: primary     
      1  efficiency: heuristic compilation techniques related to efficiency include finding tubgoals which can be accomplished by a  ingle action. for example  different goals may require the same information. the naive approach would be for each of these subgoals to notice the required state variable independently. the heuristic compiler would instead use memory to record the result. then the second goal could aave time by accessing memory. 
	knnwlfhtf* 	acq 
1 
1. research plans 
　　 1  our current goal is to continue the experimental investigation of annotated productions as a model of generic flight skill. we plan to implement a heuristic learning program that can successively modify an inital aps model in response to flight experience obtained from the behavior of the model in controlling the simulator and coaching based on the standard instructional sequence found in flight textbooks. success will be judged by the extent to which the aps evolves into a competent pilot  exhibiting and correcting typical piloting bugs. 
　　 1  the next goal will be to model individual pilots. we plan several experiments along this line directed towards protocol analysis of student pilots flying our lisp simulator and the orly simulator developed by feurzcig and lukas . our hypotheses is that it will be possible to evolve an aps model for individual students that predicts common errors. 
　　 1  the third step will be to automate this protocol analysis  using the techniques of overlay modelling developed in  carr and goldstein 1 . these techniques constitute a general methodology for generating information processing models  if a modular and comprehensible expert program for the domain is provided. 
pontius will provide this required expertise. 
　　 1  our ultimate goal is the design of a computer coach for flight simulators that analyzes a student's flying and coaches him on the underlying control skills. the theory of computer coaches is developed in  goldstein 1 . if aps provide the necessary model of expertise  then we believe that the rule-based tutoring theory developed in  goldstein 1  will lead to computer coaches that can significantly improve the effectiveness of flight simulator training for students and professional pilots. 
1. meta-knowlcdge for large knowledge-based systems 
　　annotations are a kind of mota-knowlcdgc. davis  develops mcta-rulcs and other types of mcta-lcvcl knowledge for use in association with the mycin system  shortliffc 1 . in particular  this meta-knowlcdgc is used to aid the explanation by the program of its actions  to automate the addition of new knowledge  and to direct the use of the object level knowledge. the rneta-rulcs which accomplish the latter arc similar to our specialists. 
　　however  we believe that further aspects of the annotated production system would be appropriate for the medical domain of m y c i n which are not included in davis* teirksias program. for example  the use of rationales could improve the explanation facilities. currently  mycin/teiresias uses the action of each rule as a basic unit of explanation. while this does explain the actions of the program  it docs not consider the u n d e r l y i n g justification for those actions. rationale slots could be used to carry such justifications  for example  the reason that medical researchers believe the rule to be valid. this would be critical if mycin is ever to be part of a computer coach for medical students. 
　　a second possibility is in the use of plans. doctors  in approaching some problems  create and use plans. for example  drug therapy  the domain of mycin  is usually only a step in the overall treatment of the patient. m y c i n currently does not have a representation for explicit plans: annotations provide a natural extension to production systems to make explicit planning knowledge. 
　　a third possibility is to group less frequently used productions for a given goal into caveats associated with their more frequently employed brethren. the caveat would be triggered by some warning in the global database. for example  it might be appropriate to separate diagnostic rules appropriate for an emergency from standard diagnostic procedures by means of caveats. greater efficiency and modularity is obtained by thereby reducing the size of the currently applicable knowledge base. 
1. conclusions 
　　in the seminal work on production systems by nowcll and simon  the task if explicitly limited to modelling an individual engaged in a non-learning situation. hence  meta-knowlcdgc in the form of commentary was not a part of the production model. however  as we have demonstrated for the flight domain  meta-knowlcdgc is critical 
- 1 : 	f t o h s t e l n 
1 
　　
when the problem of an individual improving his skill is addressed. this paper has introduced a formal vocabulary for some of this knowledge. we believe these annotations constitute a small stop towards a theory of self-knowledge which may well be the essential ingredient to the design of large knowledge-based systems capable of self-improvement  explanation  and sufficient efficiency for real-time processing. 
1. 