
we study auction-like algorithms for the distributed allocation of tasks to cooperating agents. to reduce the team cost of sequential single-item auction algorithms  we generalize them to assign more than one additional task during each round  which increases their similarity to combinatorial auction algorithms. we show that  for a given number of additional tasks to be assigned during each round  every agent needs to submit only a constant number of bids per round and the runtime of winner determination is linear in the number of agents. the communication and winner determination costs do not depend on the number of tasks and thus scale to a large number of tasks for small bundle sizes. we then demonstrate empirically that the team cost of sequential bundlebid single-sale  = single-item  auction algorithms can be substantially smaller than that without bundles for multiagent routing problems with capacity constraints.
1 introduction
we study the distributed allocation of tasks to cooperating agents  where each task has to be assigned to exactly one agent so that the team cost is small  = team performance is high . auction algorithms promise to solve these combinatorial task-assignment problems with small communication and computation costs since the agents compress information into a small number of bids  which they compute in parallel and then exchange  dias et al.  1 . ideal combinatorial auctions consist of a single round  after which all tasks have been assigned to agents. all agents bid on all bundles  = sets  of tasks and the auctioneer then assigns all tasks to agents  which allows the agents to take synergies among tasks into account in their bids and results in a minimal team cost but incurs prohibitively large communication and winner determination costs. the communication and winner determination costs remain large even if the agents bid on selected bundles only  berhault et al.  1 . researchers have therefore recently advocated sequential single-item auctions  ssi auctions  instead  lagoudakis et al.  1 . ssi auctions consist of several rounds  until all tasks have been assigned to agents  boutilier et al.  1; fatima  1 . during each round  all agents bid on all unallocated tasks and the auctioneer then assigns one additional task to some agent  which incurs small communication and winner determination costs. however  the team cost of ssi auctions tends to be larger than that of combinatorial auctions since the agents cannot take as many synergies among tasks into account in their bids. to reduce the team cost of ssi auctions  we extend them to assign k   1 additional tasks among the agents during each round. these sequential bundle-bid single-sale  = single-item  auction algorithms  short: ssi auctions with bundles  still consist of several rounds  until all tasks have been assigned to agents. during each round  all agents can now bid on bundles of at most k tasks and the auctioneerthen assignsk additionaltasks to agents  making ssi auctions with bundles similar to combinatorial auctions. we expect the team cost of ssi auctions with bundles to be smaller than the one of standard ssi auctions since the agents can take more synergies among tasks into account in their bids. in this paper  we develop a general theory for such ssi auctions with bundles  proving that they can be implemented for small bundle sizes k without greatly increasing the communication and winner determination costs of standard ssi auctions.
1 task-allocation problem
we now formalize the task-allocation problems. a taskallocation problem consists of a set of agents a = {a1 ...am} and a set of tasks t = {t1 ...tn}. any tuple
 ta1 ...tam  of pairwise disjoint bundles tai   t  for all i = 1...m   = no task is assigned to more than one agent  is a partial solution of the task-allocation problem  with the meaning that agent ai performs the tasks tai. let be the cost needed by agent a （ a to perform the tasks
  called agent cost. there can be synergies among tasks  that is   does not necessarily equal even if. the cost of the partial solution  called team cost  depends on the team objective. in this paper  we consider two different team objectives.
the team cost of the partial solution is for the team objective minisum and maxa（a cagenta  ta  for the team objective minimax. we use cteam as a special operator  shorthand  for either the sum and max operator  depending on the team objective  and write to make our notation independent of the team objective. any partial solution  ta1 ...tam  with “a（ata = t  = each task is assigned to exactly one agent  is a complete solution of the taskallocation problem. we want to find a complete solution of the task-allocation problem with a small team cost.

figure 1: multi-agent routing problem
1 multi-agent routing
we study multi-agent routing problems as examples of taskallocation problems  as shown in figure 1. multi-agent routing problems are task-allocation problems where the tasks are to visit given targets with exactly one agent each. the terrain  the locations of all agents and the locations of all targets are known.1 the agent cost of an agent to visit a set of given targets correspondsto the smallest travel distance needed to visit the targets from its current location. there can be synergies among tasks  for example  the smallest travel distance needed to visit two close-by targets is typically smaller than the sum of the travel distances needed to visit each target individually. multi-agent routing is a standard task for robot teams that needs to be solved  for example  as part of de-mining  search-and-rescue and taking rock probes on the moon. in multi-agent routing without capacity constraints  every agent can perform an arbitrary number of tasks. multi-agent routing problems without capacity constraints are standard test domains for agent coordination with auctions  dias et al.  1 . in multi-agent routing with capacity constraints  every agent can perform at most a given number of tasks  = its capacity   for example  can take only a given number of rock probes before its drill bit becomes useless due to wear and tear. multi-agent routing problems with capacity constraints are novel applications for agent coordination with auctions.
1 ssi auctions with bundles
we now develop a blend of combinatorial and sequential single-item auctions  ssi auctions   which we call sequential bundle-bid single-sale  = single-item  auction algorithms  short: ssi auctions with bundles  to solve the task-allocation problems: initially  all tasks are unassigned. ssi auctions with bundles consist of several rounds  until all tasks have been assigned to agents  which then execute the tasks assigned to them. during each round  all agents bid on all nonempty bundles of at most k unassigned tasks  bidding phase  and the auctioneer then assigns exactly k additional tasks to agents  or all tasks in case the number of tasks is smaller than k   either to the same agent or different agents  winner determination phase . we call k the bundle size.
　we now consider any round of the ssi auction with bundles. assume that agent a （ a has already been assigned the tasks ta   t in previous rounds for all a （ a. thus  u = t  “a（ata is the set of unassigned tasks. we leave out the  unassigned  in the following for readability since only unassigned tasks are bid on and subsequently assigned. a bid b is a triple of an agent  a bundle and a bid cost  = numerical value of the bid . if b is a bid  then we use ba to denote the agent  bt to denote the bundle it bids on and bc to denote the bid cost. we now explain exactly which bids the agents submit  including how much they bid  and which of these bids win.
　bidding phase: the set of submitted bids b satisfies: 1  for all b （ b  it holds that ba （ a  bt   u  and
1   |bt| ＋ k; and 1  for all a （ a and with
  there exists exactly one bid b （ b with
 = each agent bids on all non-empty
 bundles of at most k tasks . for the minisum team objective  . in other words  the agent
 bids the increase in its agent cost for all tasks assigned to it if it is additionally assigned the tasks that it bids on  which is similar to previous work on marginal-cost bidding in contractnet  sandholm  1 . for the minimax team objective  . in other words  the agent bids its agent
cost for all tasks assigned to it if it is additionally assigned the tasks that it bids on.
　winner determination phase: each collection of bids is potentially winning iff 1  all with; and 1 
a potentially winning collection of bids must have been made by different agents  since several bids by the same agent do not express synergies  and cover exactly k tasks or all tasks in case the number of tasks is smaller than k . the term |u| covers the case where the number of tasks is smaller than the bundle size k. we denote the set of all potentially winning collections of bids as p b . the auctioneer evaluates a potentially winning collection of bids according to the value  called evaluation cost  for both the minisum and minimax team objectives. thus  the winning collection bw （ p b  of bids satisfies  for all 
 = the winning collection of bids has the smallest evaluation cost among all potentially winning collections of bids . any such collection of bids can be chosen. the auctioneer then assigns the additional tasks bt to agent ba for all b （ bw. at this point in time  agent a （ a has been assigned the tasks ta bw  = ta “ bt if there exists b （ bw with ba = a  and ta bw  = ta otherwise.
　we now explain why we expect these bidding and winner determination rules to result in a small team cost.  however  their team cost can be worse than that of standard ssi auc-
tions. 
theorem 1	 	it	holds	that
 for both the minisum and minimax team objectives.
　proof: let x and y be any two potentially winning collections of bids. we show that cteamb（x bc ＋ cteamb（y bc  a  implies cteama（a cagenta  ta x   ＋ cteama（a caagent  ta y     b . consider the minisum team objective. adding  to both sides of inequality  a  yields inequality  b  since by definition bc = cagenta  ta “ xa    cagenta  ta  where xa is the  possibly empty  bundle of tasks bid on by agent a in the collection x of bids. now consider the minimax team objective. by definition  cteama（a cagenta  ta x   = maxa（a cagenta  ta x   =

xa }  where the second argument is the evaluation cost of the collection x of bids from inequality  a . similarly     =
max{maxa（a cagenta  ta  maxa（a:ba（y cagenta  ta “ ya }  where the first argument is identical to the first one above and the second one is the evaluation cost of the collection y of bids from inequality  a . thus  inequality  a  implies cteama（a cagenta  ta x   ＋ cteama（a cagenta  ta y    and thus inequality  b . 
　in other words  each round of ssi auctions with bundles assigns min k |u|  additional tasks to agents so that the team cost after the assignment is as small as possible. thus  ssi auctions with bundles perform hill-climbing and the resulting team cost can thus be expected to be small. unfortunately the communication and winner determination costs of ssi auctions with bundles  as described so far  are large since the number of bids is a kth-order polynomial in |u|  the number of tasks. this is a problem because the communication and winner determination costs are bottlenecks for ssi auctions with bundles  especially since the auctioneer is often centralized. thus  ssi auctions do not scale to large numbers of tasks even for small bundle sizes. we now show how to modify ssi auctions with bundles so that they continue to assign the same additional tasks to the same agents during each round  modulo tie breaking  but so that  for a given bundle size  every agent needs to submit only a constant number of bids per round and the runtime of winner determination is linear in the number of agents and independent of the number of tasks. this is the main contribution of our paper and perhaps surprising since ssi auctions with bundles are similar to ideal combinatorial auctions  for which winner determination is known to be np-hard and thus needs to be approximated  hoos and boutilier  1 . the result is due to the fact that agents bid only on bundles of at most k tasks for ssi auctions with bundles but on all bundles for ideal combinatorial auctions. the idea behind our modification is that the agents do not need to submit bids on all bundles of at most k tasks since some bundles have no chance of winning.
1 bidding phase
we now explain exactly which bundles the agents need to bid on. to determine which bids to submit in a round of an ssi auction with bundle size k  an agent constructs k bid trees  one for each . each node of the kth bid tree is labeled with a bundle of k tasks. each edge is labeled with a task. the kth bid tree is recursively constructed  starting with its root. consider any node in the bid tree. it is labeled with the bundle that has the smallest bid cost among all bundles of k tasks that do not contain any of the tasks that label the edges from the root to the node in question. each node at depth  is a leaf. the bid tree is empty if this depth is negative.  the term  covers the case where the number of tasks is smaller than the bundle size k.  otherwise  each edge from the node in question to its k children is labeled with one of the tasks contained in the bundle. this completes the construction of the bid trees. the agent then submits bids on all bundles that label nodes in its bid trees  calculating the bid costs as before.  the same bundle can label several nodes but  of course  results in only one bid.  thus  the number of bids per agent is constant for ssi auctions with a given bundle size.
theorem 1 the winner determination phase assigns the same min k |u|  additional tasks  modulo tie breaking  to agents no matter whether the agents bid on all non-empty bundles with at most k tasks or submit bids on the bundles from their bid trees only.
　proof sketch: assume that the agents bid on all non-empty bundles with at most k tasks and that the winning collection of bids is w. we show that we can achieve the same team cost if the agents bid on the bundles from their bid trees only. obviously  the team cost cannot be smaller if the agents bid on the bundles from their bid trees only  a subset of all non-empty bundles with at most k tasks. we thus need to show that it cannot be larger either. to this end  consider an arbitrary winning bid b （ w whose bundle bt is not in any bid tree of agent ba. we now show that we can replace this bid b with a bid b so that the bundle of bid b is in a bid tree  the collection of bids remains potentially winning  and the bid cost of bid b is no larger than the bid cost of bid b  which implies that the substitution cannot increase the team cost since the cteam operator is monotonically increasing in its arguments. similar substitutions can then be made for all bids in w  if necessary  until all bids are on bundles from the bid trees of the agents  which proves the theorem.
to prove the property  consider the tasks that are part of the winning bids except for bid b. the following properties will hold: b is in a bid tree   = both bids are from the same agent    = both bids are on the same number of tasks    = no task is assigned to more than one agent  and  = the bid cost of the new bid is no larger than the bid cost of the previous bid . we achieve these properties by choosing the bid b with the smallest bid cost among all bids from the |bt|th bid tree of agent ba whose bundles do not contain tasks in f  as follows: we start at the root of the |bt|th bid tree of agent ba as current node. if the bundle of the current node does not contain any tasks in f  then we pick the bid on this bundle. otherwise  choose a task contained in both this bundle and f  ties can be broken arbitrarily  and follow the edge labeled with this task from the current node to one of its children  and repeat the procedure. we are guaranteed to reach a node whose bundle does not contain any tasks in f because f contains min k   |bt| |u|   |bt|  tasks and the |bt|th tree has depth min k   |bt| |u|   |bt| . the bundle of this node is the bundle with the smallest bid cost that does not contain any tasks in f and has the stated properties  per construction of the bid trees. 
　as example  consider the multi-agent routing problem without capacity constraints shown in figure 1 for the minimax team objective. the agents and targets are located on the real line.  epsilon is a small positive tie-breaking constant. 

figure 1: multi-agent routing problem without capacities

table 1: bid costs
table 1 shows the bid costs of both agents on all bundles. figure 1 shows the bid trees of agent a1 during the first round of an ssi auction with bundle size three. for example  the bundle of two targets with the lowest bid for agent a1 and thus the root of its bid tree two is {t1 t1}. the bundle with the lowest bid for agent a1 among all bundles with two targets different from target t1 and thus a child of the root of its bid tree two is {t1 t1}. similarly  the bundle with the lowest bid for agent a1 among all bundles with two targets different from target t1 and thus the second child of the root of its bid tree two is {t1 t1}. overall  the agent bids on all non-empty bundles of at most three targets. figure 1 shows the bid trees of agent a1 during the first round of an ssi auction with bundle size two. consequently  the agent bids on the bundles {t1 t1}  {t1}  {t1}  which are only half of all non-empty bundles of at most two targets. for example  the agent does not bid on all single tasks but only on the ones with the lowest and second-lowest bid cost. table 1 demonstrates the substantial reduction in the number of bids of one agent for different bundle sizes in case there are 1 tasks.
1 winner determination phase
from now on  we use b to refer to the bids of the agents on the bundles from their bid trees. although the number of bids is small  it is not clear whether the auctioneer can determine the winning bids with a small runtime. in the following  we construct a winner-determination rule that is linear in the number of bids and thus linear in the number of agents and independent of the number of tasks for ssi auctions with a fixed bundle size. it is curious that the construction and justification of the winner-determination rule are rather more complicated than those of the bundle construction.
theorem 1 the auctioneer can determine the winning bids with a runtime that is linear in the number of bids.
　proof sketch: the auctioneer needs to assign min k |u|  additional tasks to agents. it first finds all different non-decreasing sequences of at most |a| positive integers that sum to min k |u| . for example  there are three such sequences for min k |u|  = 1 and |a| − 1  namely the sequences  1 1    1  and  1   but only two such sequences  the latter two  for |a| = 1. each sequence represents a possible set of winning bid sizes. the number of such sequences must be o 1  because k = o 1 . a portfolio for such a sequence  s 1 ...s l   is a collection of bids  b 1 ...b l   with b i  （ b and |b i t| = s i  for all 1 ＋ i ＋ l. the portfolio is consistent iff for all 1 ＋ i   j ＋ l  that is  no agent gets more than one bid  and the bids form a partition

figure 1: bid trees for ssi auctions with bundle size three

figure 1: bid trees for ssi auctions with bundle size two
number of targetsbundle sizeprevious numbernew number|u|kof bidsof bids11 1% 11 1% 11 1% 11 1% 11 1% 11 1% 11 1% 11 1% 11 1% 11 1% 11 1% 11 1% 11 1% 11 1% 11 1% 11 1% 11 1% 11 1% 11 1% 11 1% table 1: reduction in the number of bids
of the items. note that a consistent portfolio is a potentially winning collection of bids. to find the winning collection of bids  the auctioneer constructs a search tree for each sequence. each node of the search tree for a given sequence  s 1 ...s l   is labeled with a portfolio for the sequence. each edge is labeled with a constraint  which can be of two kinds: 1   t （ b j t  for a given t （ u and a given 1 ＋ j ＋ l and 1   b j a = ba and b j t = bt  for a given b （ b with |bt| = s j  and a given 1 ＋ j ＋ l. the search tree for a given sequence  s 1 ...s l   is recursively constructed  starting with its root. consider any node in the search tree. it is labeled with a portfolio  b 1 ...b l   with the smallest evaluation cost among all portfolios that satisfy the constraints that label the edges from the root to the node in question  as follows: if the constraint is  t （ b j t  then the portfolio needs to satisfy t （ b i t for i = j and  for all
1 ＋ i ＋ l with. if the constraint is  b j a = ba and b j t = bt   then the portfolio needs to satisfy b i a = ba and b i t = bt for i = j and  for all 1 ＋ i ＋ l with and b i t ” bt =  . the node is deleted from the search tree if no portfolio satisfies the constraints. each node with a consistent portfolio is a leaf. otherwise  the auctioneer chooses any 1 ＋ i ＋ l withfor some 1 ＋ j ＋ l with to generate the constraints that label the edges from the node in question to its children: 1   t （ b j t   one constraint for each
1 ＋ j ＋ l withand each t （ b i t; and 1   b j a = ba and b j t = bt   one constraint for each 1 ＋ j ＋ l and each b （ b with b i a = ba and |bt| = s j . the justification for these constraints is that at least one of them must be satisfied: either some bid by agent b i a is part of the portfolio or there is a bid part of the portfolio whose bundle includes some task t （ b i t. if this were not the case  then one could substitute bid b i  for the bid at the ith position  resulting in a potentially winning bid without increasing the evaluation cost. this completes the construction of the search trees. the winning collection of bids then is any portfolio  b 1 ...b l   with the smallest evaluation cost among all consistent portfolios that label nodes in the search trees  per construction of the search trees. there are o 1  sequences and thus o 1  search trees. the depth of the search tree for a given sequence  s 1 ...s l   is at most k + l and thus o 1  since each constraint imposes an additional restriction on a portfolio and no portfolio can satisfy more than k + l constraints. the number of children of every node in each search tree is o 1 . thus  each search tree has o 1 o 1  = o 1  nodes. the portfolio of each node can be determined in time o |b|  by finding the bid with the smallest bid cost that satisfies the constraints independently for each position in the portfolio. consequently  the runtime of winner determination is o 1  〜 o 1  〜 o |b|  = o |b| . 
　consider again the multi-agent routing problem without capacity constraints shown in figure 1. figure 1 shows the corresponding search trees for the first round of an ssi auction with bundle size three. the underlined bids were used to generate the constraints. consistent portfolios are annotated with their evaluation cost.
1 refinement
the auctioneer can be cautious and assign only one additional task of the min k |u|  tasks per round  namely one with the smallest agent cost. in this case  the bidding phase changes as follows: every agent also needs to bid on all tasks that are part of larger bundles that it bids on since it bids its agent cost on single tasks. this increases its number of bids by a constant that is usually small. as example  consider again the multi-agent routing problem without capacity constraints shown in figure 1. figures 1 and 1 show that agent a1 already bids on all tasks that are part of larger bundles that it bids on during the first round of ssi auctions with bundle sizes two and three and thus does not need to submit any additional bids during the first round. the winner determination phase changes as follows: the auctioneer first determines the winning collection of bids w  as before. then  it determines the bid b （ w and task t （ bt with for all  and  = the task with the smallest agent cost or  equivalently  bid cost among all winning tasks . it does this by comparing the bids of agent on task t for all  and choosing the one with the smallest bid cost  ties can be broken arbitrarily . it then assigns only this additional task t to the bidding agent ba.
　as example  consider again the multi-agent routing problem without capacity constraints shown in figure 1 for the minimax team objective.1 for this particular example  ssi auctions with larger bundle sizes indeed result in a smaller team cost  since they are less myopic  although this is not guaranteed in general. 1  for ssi auctions with bundle size one  where the auctioneer automatically assigns only one additional target   targets are assigned to agents in the following order. round 1: agent a1 is assigned target t1; round 1: agent a1 is assigned target t1; and round 1: agent a1 is assigned target t1. we write this as: a1 ○ t1;a1 ○ t1;a1 ○ t1.
the largest travel distance of any agent  = makespan  is
. 1  for ssi auctions with bundle size two where the auctioneer is cautious  that is  assigns only one additional target  targets are assigned to agents in the following order  where parentheses enclose targets that are not assigned: a1 ○ t1 t1 ; a1 ○ t1  a1 ○ t1;a1 ○ t1. the makespan is   which is slightly smaller than the makespan of ssi auctions with bundle size one. the makespan of ssi auctions with bundle size two where the auctioneer assigns two additional targets  if possible  is   which is slightly larger than the makespan of ssi auctions with bundle size two where the auctioneer assigns only one additional target and the reason why the auctioneer assigns only one additional target in our experiments. 1  for ssi auctions with bundle size three where the auctioneer assigns only one additional target  targets are assigned to agents in the following order:  a1 ○ t1  a1 ○  t1 t1;a1 ○ t1  a1 ○ t1 ;a1 ○ t1. the makespan is   which is the minimal team cost since the bundle size equals the number of targets and smaller than the makespan of ssi auctions with bundle size two.
1 experiments

figure 1: search trees
minisum team objectiveminimax team objectivecapacitiesagentstargetsminimalbundle size 1bundle size 1bundle size 1minimalbundle size 1bundle size 1bundle size 11111  1 1  1 111 1 1 1 11.1.1.1  1 1  1 111 1 1 1 11.1.1.1  1 1  1 111 1 1 1 11.1.1.1  1 1  1  1 11 1 1 1 11.1.1.1  1 1  1  1 11 1 1 1 11.1.1.1  1 1  1 111  1 1 1 11.1.1.1  1 1  1  1 11  1 1  1 11 1 11  1 1  1  1 11  1 1  1 11 1 11  1 1  1  1 11  1 1  1 11 1 11  1 1  1  1 11  1 1  1 11.1.1.1  1 1  1 111  1 1  1 11 1 11  1 1  1  1 11  1 1  1 11 1 11  1 1  1  1 11  1 1  1 11 1 11  1 1  1  1 11  1 1  1 11 1 11  1 1  1  1 11  1 1  1 table 1: comparison of bundle sizes: experimental resultswe now evaluate the benefit of ssi auctions with bundles for multi-agent routing problems on known eight-neighbor planar grids of size 1 〜 1 with square cells that are either blocked or unblocked. the grids resembled office environments  as shown in figure 1. we averaged all results over 1 instances of the same office environment with randomly closed doors. we solved multi-agent routing problems with capacity constraints using ssi auctions with bundles where the agents stopped bidding once the number of tasks assigned to them reached their capacity. we set the capacities of all agents to the ratio of the number of targets and agents. an agent needs to determine the bid costs of many bids to determine which bids to submit. to determine each bid cost for multi-agent routing problems  it needs to solve a version of a tsp problem  where it does not need to return to its initial location  when calculating the smallest travel distance needed to visit the targets from its current location  an np-hard problem. these calculations therefore need to be approximated to run fast. for this purpose  we used a combination of the two-opt and cheapest-insertion heuristics in our experiments. table 1 tabulates the team cost for ssi auctions with bundle sizes one  two and three as well as approximations of the minimal team cost calculated with a mixed integer program  mip  for both the minisum and minimax team objectives.  team costs for a non-cautious auctioneer are reported in square brackets and tend to be larger than the team costs for a cautious auctioneer  who assigns only one additional target.  the mips were arc-based vehicle routing problem formulations with routing constraints and miller-tuckerzemlin  mtz  sub-tour elimination constraints  which are further augmented by introducing additional first and second order lifted versions of mtz constraints and arrival-time constraints. they were solved with cplex 1  a commercial mip solver  at default settings on a dell precision 1 computer with a 1 ghz intel xeon processor and 1 gb ram running red hat linux 1. for mips that could not be solved within one hour of runtime  a binary search was carried out with cplex as subroutine  which sometimes allowed us to determine additional minimal team costs within one additional hour of runtime. a  minimal team cost  is enclosed in parentheses in the table if the average contains at least one non-minimal team cost and it is thus only an upper bound on the minimal team cost. the runtime to calculate this gold standard quickly increased with the problem size. for example  we were not able to determine the minimal team cost for any of the 1 multi-agent routing problems with 1 agents and 1 targets for the minimax team objective within the runtime limit. on the other hand  all ssi auctions terminated within two seconds and their runtime increased only very slowly with the problem size. for the minisum team objective  ssi auctions with bundle size three reduced the team cost by 1 percent on average compared to standard ssi auctions  with bundle size one . for the minimax team objective  ssi auctions with bundle size three reduced the team cost by 1 percent on average compared to standard ssi auctions. nonparametric statistical comparisons between ssi auctions with different bundle sizes support the hypothesis that larger bundle sizes reduce the average team cost across cases with different numbers of agents and targets with confidence 1  1 versus 1  minimax ; 1  1 versus 1  minisum; 1 versus 1  minisum ; and 1  1 versus 1  minimax; 1 versus 1  both team objectives . these results justify our generalization of standard ssi auctions to ssi auctions with bundles.
minisum team objectiveminimax team objectivecapacitiesagentstargetscplex heuristicsbundle size 1bundle size 1cplex heuristicsbundle size 1bundle size 1111111111.1.1.1.1.1.1111111111.1.1.1 1 1111.1.1.1 1 1111.1.1.1.1.1.11111 1 1111 1 11 1 1111 1 11 1 1111 1 11 1 1111.1.1.1.1.1.11 1 11 1 1111 1 11 1 1111 1 11 1 1111 1 11 1 11table 1: comparison of heuristics: experimental results　we also tested ssi auctions with bundles against a different heuristic  as suggested by the reviewers. the experimental setup was identical to that of the first experiment  except that the conference schedule limited us to 1 instead of 1 instances of the office environment. we set the cplex parameters to strongly emphasize searching and improving feasible solutions  and further tuned the parameters to improve the performance of the cplex local search  rins  and other heuristics. the time limit was 1 minutes for cases with fewer than 1 targets and 1 minutes otherwise. the results are given in table 1  which follows the same format as table 1. the cplex heuristics result in significantly smaller team costs than ssi auctions with bundles  except for cases with larger numbers of agents and targets in conjunction with the minimax team objective  where ssi auctions with bundles are superior. on the other hand  the cplex heuristics ran much more slowly than ssi auctions with bundles. the cplex heuristics exhausted the allotted time for more than one third of the instances  while the ssi auctions with bundles never ran for more than 1 seconds in case of bundle size two and 1 seconds in case of bundle size three. it is future work to compare ssi auctions with bundles against specialized vehicle routing problem heuristics.
1 conclusions
in this paper  we studied sequential single-item auctions for the distributed allocation of tasks to cooperating agents. rollouts  zheng et al.  1  reduce the team cost of sequential single-item auctions but increase their runtime substantially. we therefore studied an alternative. we generalized sequential single-item auctions to assign more than one additional task per round and developeda generaltheory of such sequential bundle-bid single-sale  = single-item  auctions  short: sequential single-item auctions with bundles . our research generalizes earlier  somewhat ad-hoc  work that is equivalent to ssi auctions with bundle sizes one and two  lagoudakis et al.  1; zheng et al.  1 . we showed  for sequential single-item auctions with a given bundle size  that every agent needs to submit only a constant number of bids per round and the runtime of winner determination is linear in the number of agents. the communication and winner determination costs do not depend on the number of tasks and thus scale to a large number of tasks for small bundle sizes.
acknowledgments
this research was partly supported by nsf awards under contracts itr/ap1  iis-1 and iis-1 as well as a seed funding from nasa's jet propulsion laboratory. the views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies  either expressed or implied  of the sponsoring organizations  agencies  companies or the u.s. government.
