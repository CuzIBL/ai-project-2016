 
intelligent reasoners sometimes draw conclusions that lack new or relevant information. similarly  automated reasoning systems can produce formulas that are not necessary for the problem at hand. we concentrate on the problem of unnecessary inference in the context of resolution based systems. in such systems several strategies have been developed that allow for the deletion of clauses without sacrificing completeness. unfortunately these strategies fail to recognize other frequently generated unnecessary formulas. we will present a generalized subsumption theorem that can be used to recognize such formulas and to develop new deletion methods which retain completeness. 
1 	introduction 
intelligent reasoners expend much effort deciding what information is necessary for the problem at hand. when a conclusion is drawn we decide if it contains new and relevant information. it is well known that the performance of automated reasoning systems can be enhanced by eliminating unnecessary formulas. in such systems conclusions drawn from unnecessary formulas are also unnecessary. failure to prevent the generation of these formulas can lead to rapid combinatorial explosion  wos  1 . 
   in this paper we concentrate on the problem of recognition of unnecessary formulas in the context of resolution based systems. in such systems several strategies have been developed that allow for the deletion of clauses without sacrificing completeness. common strategies include subsumption  tautology elimination  and demodulation. the subsumption strategy eliminates clauses that are instances of other clauses. the demodulation strategy pertains to clauses containing the equality predicate. using this strategy demodulators are used to rewrite clauses that are subsequently deleted. 
   unfortunately these strategies fail to recognize other frequently generated unnecessary formulas. a less obvious way in which resolution based systems produce unnecessary formulas is related to skolemization. skolem functions have the effect of automatically creating names for new objects  but sometimes too many names are cre-

　the main result discussed here can be viewed as a generalization of subsumption. this result can be used to develop new deletion methods and to show that these methods do not sacrifice completeness. using deletion methods we have developed  we were able to prove certain theorems from hilbert's axioms for geometry. these theorems present a significant challenge to automated systems due to the constructive nature of the proofs. for a discusion of these theorems see  benanav  1 . 
　in section 1 we discuss an example that illustrates a subtle way in which resolution systems generate unnecessary formulas and present informal arguments as to why these formulas are unnecessary. in later sections we define more precisely what we mean by unnecessary clauses and how to recognize them. 
1 	the naming problem 
in mathematical arguments one often sees inferences that assert the existence of some object and give it a name. subsequently  other inferences are made that refer to the object by this name. this process is so natural 


	benanav 	1 


	benanav 	1 

1 	the generalized subsumption theorem 
we now state the generalized subsumption theorem and some important lemmas. we assume throughout that the set of rules r contain no negation symbols. 
theorem 	 generalized subsumption theorem  
let r be a terminating set of rules. let s1 and s  be sets of clauses such that every clause in the terminal overlap closure of s1 and r is subsumed by a clause in s1. then if there is a resolution refutation from s1 there is a refutation from s1 which contains only terms that are irreducible with respect to r. in other words  any clause that reduces by r is unnecessary. 
this theorem applies to most common resolution strategies with factoring. for example  the theorem holds if we are using ur-resolution with factoring. we will elaborate further how this theorem can be applied. first we will briefly indicate why the theorem holds. 
　the proof of this theorem is based on the following crucial lemma: 
lemma  clause overlap closure lemma  let r be a set of rules. if c is a resolvent of c  and c1 and c' is in the clause overlap closure of c and r then we can construct a c1 in the clause overlap closure of c  and r  a c1 tn the clause overlap closure of c1 and r  and a resolvent c  of c1 and c1 such that c  subsumes c. 
for example let s and r be the clauses and rules from example 1. note that c1 is a resolvent of c1 and c1. also as shown  c1 is a clause overlap of c1 and r. note also that c1 is a clause overlap of c1 and r and that it resolves with c1 giving c1. since c1 is in the clause overlap closure of c1 and r  the lemma holds for this example. 
　based on this lemma we can show the following: lemma  terminal overlap closure lemma  let 
r be a terminating set of rules. if c is a resolvent of c1 and c1 and c is in the terminal overlap closure of c and r then we can construct a c1 tn the terminal overlap closure of c1 and r  a c1 in the terminal overlap closure 
1/c1 and r  and a resolvent c  of c  and c1 such that c  subsumes c''. 
to prove this lemma we first use the previous lemma to construct clauses c1 in the clause overlap closure of c  and r and a clause c1 is the clause overlap closure of c1 and r which resolve to a clause c  which subsumes c . next it can be shown that either c1 and c'1 are irreducible or we can construct a clause overlap c1  of c1 and r and a clause overlap c1 of c1 and r that resolve to a clause c  that subsumes c . we continue to construct clause overlaps in this manner. since r is terminating  it can be shown that this construction must eventually terminate with clauses that are irreducible. 
　now the generalized subsumption theorem follows by a simple induction argument based on this lemma. for full details of these proofs see  benanav  1  . 
1 	deletion methods 
consider the way in which subsumption strategy works. each time a new clause is generated a check is made to determine if the clause is subsumed by a previously generated clause. if it is  then the clause is deleted. deleting clauses in this way is called forward subsumption. likewise is is also possible that the newly generated clause will subsume previously generated clauses. deleting these clauses is called backward subsumpiion. 
　more generally  we need to check whether a newly generated clause is unnecessary and whether it's appearance causes other clauses to become unnecessary. deleting a new clause will be called forward deletion and deleting previous clauses will be called backward deletion. 
　in this section we discuss how the generalized subsumption theorem can be used to develop methods for forward and backward deletion of clauses. there are several methods which can be developed that do not sacrifice completeness  ranging from general methods that apply to any set of clauses to more specific methods that apply to clauses with certain special properties. the most general methods are probably too expensive to use for many clause sets. 
　first  suppose that s1 is the starting set of clauses  s1 is the set of clauses which have been derived from s1  and r is a set of terminating rules such that everything in the terminal overlap closure of s1 and r is subsumed by something in s1.  when we begin r is empty . if c is a clause generated from s1 which is reducible by 
r then c is unnecessary and can be deleted. if c is irreducible then we can attempt to find a set of rules r' such that c is reducible by r  r u r! is terminating  and everything in the terminal overlap closure of s1 and ru rf is subsumed by something in s1- subsequently  any rule reducible by rur' can be deleted. 
　to illustrate this we consider the example discussed in section 1. we assume that the starting set of clauses  s1  consists of the clauses g   g1 and some other clauses that do not contain the symbols p1 or p1- since these symbols are skolem functions no other clauses will contain them except possibly some equality substitution axioms. we show  however  in  benanav  1  that the equality substitution axioms for skolem functions are simply unnecessary. 
	as before  we can derive the clauses  	g1 	let s1 = 
s  u g1 and let r consists of the rules 
 r1  
 ' 1  
by the generalized subsumption theorem  if it can be shown that everything in the terminal overlap closure of s  and r is subsumed by something in s1  then anything reducible by r is unnecessary. in particular the clauses g1 are unnecessary. computing the terminal overlap closure of s1 and r gives the clauses s1 and the clauses  

note that g1 are subsumed by g1. therefore we have shown that everything in the terminal overlap closure of s1 and r is subsumed by something in s1. 
　although axiom a1 is not an axiom of geometry  this example illustrates what actually happens when when resolution-based systems are run on a set of clauses representing hilbert's axioms for geometry. the axioms a1  a1  and a1 are three such axioms and are represented by the clauses g  and 1. these clauses produce the clauses 1 which can be shown to be unnecessary by the generalized subsumption theorem. 
　we have shown how to use the generalized subsumption theorem to show that a set of clauses is unnecessary however  we have not indicated a method for finding the appropriate set of rules  r'. there are two difficulties associated with finding these rules. first  it may be difficult to show that r u r' is terminating. in fact  the termination problem has been shown to be undecidable. nevertheless  much research has been devoted to this problem and several excellent methods for proving termination are available  see  dershowitz  1  for a survey . another difficulty is testing that everything in the terminal overlap closure of s  and r u r' is subsumed by something in s1- in cases where the terminal overlap closure of s1 and r u r' is finite we can simply check that each clause is subsumed by a clause in s1- but if the terminal overlap closure of s  and rur' is very large this can be computationally expensive. in fact  checking whether a term is subsumed by another term is np-hard. there are several ways to circumvent these difficulties. 
for example  we can require that the right hand sides of all rules be ground terms that are not reducible by other rules. in such cases it is easy to show that the rules will be terminating and the terminal overlap closure of s  and r will be finite. in addition  we can require the left hand side of the rules to be ground terms not reducible by other rules. then to check that everything in the terminal overlap closure of s  and r u r is subsumed by a clause in s1  one need only compute the terminal overlap closure of s  and r'. 
　it is not always necessary to construct rules in the actual implementation of deletion strategies based on the generalized subsumption theorem. for example in the case of permutative predicates it may be possible to determine that only one permutation of each formula need be retained. for a discussion on efficient methods that partially solve the naming problem and the permutative predicate problem see  benanav  1 . 
1 	conclusions 
in this paper we have shown how resolution systems tend to generate unnecessary clauses and have presented a theorem which can be used to show certain clauses are unnecessary. to apply this theorem one must be able to construct a terminating set of rules that have a special relationship to the starting set of clauses and the derived set of clauses. namely  everything in the terminal overlap closure of the starting set of clauses and the set of rules must be subsumed by a clause in the derived set of clauses. in general these rules can be difficult to find  however by placing appropriate restrictions on the kinds of rules used  efficient methods can be developed. 
　unfortunately  this theorem alone does not allow for the deletion of other kinds of unnecessary clauses that can be generated. in order to determine the full range of applicability of this theorem more experimentation needs to be done. in addition  we believe that further investigation of methods for deletion of other kinds of unnecessary clauses  such as those that are irrelevant  can signifigantly enhance resolution based systems. in fact  any reasoning system will need to devote computational resources to these matters in order to be effective. 
acknowledgments 
i would like to thank my advisor david musser for his helpful suggestions on drafts of this paper and for several useful discussions i had with him regarding the ideas in this paper. i would also like to thank the developers of lma and itp for providing a powerful automated reasoning program which has been an invaluable tool for this research. 
