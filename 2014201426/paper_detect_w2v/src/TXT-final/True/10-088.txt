: a procedure is described t h a t gives values to set v a r i a b l e s in automatic theorem provi n g . the r e s u l t is t h a t a theorem is thereby r e duced to f i r s t order l o g i c   which is o f t e n much easier to prove. this procedure handles a p a r t of higher order l o g i c   a small but important p a r t . it is not as general as the methods of huet  andrews  p i e t r z y k o w s k i   and haynes and henschen  but it seems to be much f a s t e r when it a p p l i e s . 
i t i s more i n the s p i r i t o f j . l . d a r l i n g t o n ' s f matching. this procedure is not domain s p e c i f i c : r e s u l t s have been obtained in intermediate analysis  the intermediate value theorem   topology  l o g i c   and program v e r i f i c a t i o n   f i n d i n g i n t e r n a l a s s e r t i o n s   . this method is a  maximal method  in t h a t a l a r g e s t  or maximal  set is u s u a l l y p r o duced if there is one. a p r e l i m i n a r y v e r s i o n has been programmed f o r the computer and run to prove several theorems. 


figure 1 
the intermediate value theorem 
there are several other theorems in a n a l y s i s   such as the heine-borel theorem where the c h i e f d i f f i c u l t y l i e s in d e f i n i n g a p a r t i c u l a r set. also a s i m i l a r s i t u a t i o n comes up again and again in other parts of mathematics  and in a p p l i c a t i o n areas such as program v e r i f i c a t i o n and program synthesis. 
　　　the problem of f i n d i n g a value f o r a set v a r i a b l e a  is of course equivalent to the problem of g i v i n g a value to a one place predicate v a r i able p. 
　　　this is a part of higher order l o g i c   and as such can be attacked by the systems and ideas of 
huet   1     pietrzykowski   1     haynes and henschen   1     andrews   1     e t c . but these are very slow f o r many simple p r o o f s . for example  huet's b e a u t i f u l system  is forced i n t o double s p l i t t i n g on the r a t h e r easy theorem given in example 1 below.  even a human has t r o u b l e applying h i s procedure to t h i s example.  
       in t h i s paper we describe a procedure which attempts t o overcome t h i s d i f f i c u l t y . i t i s less general than those r e f e r r e d to above; it u s u a l l y applies only to a part of second order l o g i c  but an important p a r t   ; and it seems to be must f a s t e r when it a p p l i e s . ours is more in the s p i r i t of j. l. d a r l i n g t o n ' s  f-matching   but d i f f e r e n t in method and scope. 
　　　our methods are not domain s p e c i f i c   not j u s t a c o l l e c t i o n of h e u r i s t i c s for f i n d i n g sets in a p a r t i c u l a r area l i k e a n a l y s i s . they can be used to prove theorems  such as the intermediate value theorem  in analysis where the set a is a set of r e a l numbers  as w e l l as theorems in topology where the set a is a f a m i l y of sets  and theorems from program correctness  or from other areas where set v a r i a b l e s are to be i n s t a n t i a t e d . 
       in section 1 we give some p r e l i m i n a r y examples and in section 1 we describe our r u l e s f o r genera t i n g the desired set a. they c o n s i s t of basic r u l e s which apply to simple formulas and combining r u l e s f o r combining the r e s u l t s from the basic r u l e s . 
　　　one of our goals in t h i s work is to avoid i n descrimlnant matches  or attempts at matches  between formulas such as  t e a  and p   where 

t h   o r p n i 	p r o v i n   - 1 : 	b l e d s o e 
1 


given later in section 1. 
* provided that a does not occur in c. 
	theorem prov ingl: 	bledsoe 
1 


	theorem 	p r o v t n p : - l : bledsoe 
1 


	theorem 	p r o v i n g l : 	bledsoe 
1 


theorem p r o v i n g : - 1 
1 


the reader is referred to  for details and examples. for our purposes here the prover described in  has been augmented by a data base for handling our set variables and interval types  see section 1 . these data base manipulations are in the s p i r i t of those mentioned in  and applied in  1  and   1   . 
	t h e o r m 	p r o v i n g - 1 : b l e d s o e 
1 


theorem p r o v i n p : - l : 1 



which is the usual interval assertion given by humans for the program dipicted in figure 1. see   1  for more details. 
	1 . 	comments 
delaying 
　　　in our procedure we have employed a concept of delaying  whereby we delay the final determination of a set a u n t i l all parts of the theorem 
have been processed. early subgoals place restrictions of the form {z: p z } on a  but leave a i t s e l f as a variable to be further considered later. later subgoals may further res t r i c t a  or may force a to take a particular 
value a1  e.g.  by matching . in this last eventuality the program must check that ao is consistent with the earlier restriction  z: p z }. this kind of delaying has the marked advantage of not closing off the determination of a by assuming early values for i t ; but rather keeping it  as general as possible   putting on restrictions only as they are forced. thus we see that the notions of  maximality  and  delaying  are somewhat analogous. 
　　　this concept of delaying is an important one in other parts of automatic theorem proving. huet's constrained resolution 1  is an example of it where he delays the higher order unifications 
u n t i l resolution matches have been made. the most general unifier  is another example  in that it lets resolution  or whatever prover that uses i t   delay as long as possible the assignment of constant values to variables. 
　　　also our use of delaying for set variables is entirely analogous to the concept of interval types  1 1  explained in section 1  when a 
variable x is restricted to an interval  a   x   b  to satisfy an earlier subgoal  but l e f t a variable to be instantiated or further restricted later. this technique has greatly simp l i f i e d our proofs in analysis  and we expect other such  delaying  methods to be developed. 
relation to the work of others 
　　　darlington's program  1  has proved example 1 and other examples using his f-matching. our procedure has a similarity to f-matching and was partially inspired by talks with darlington. but it is different especially in its use of the maximal!ty concept which is an outgrowth of the ideas in  1  sec. 1   and in other ways. 
　　　this work is of course related to behmann's decision procedure for monadic f i r s t and second order logic 1. a cursory look at  indicates that our solutions are often the same as behmann's. his methods might be extended to also handle a number of non-monadic cases  as ours do . so it seems that an extensive study of papers on monadic logic is very much in order. 
     the procedures of  1 1 1  are more general than ours  and their research provides a necessary base for this type research; we only feel that our work can be more effective on a limited  but important part  of higher order logic. 
completeness 
　　　a l l of our rules are sound because no matter what value we get for the set variable a  we always verify it with another pass through the prover. the only question  then  is one of completeness. 
　　　see section 1 and appendix ii of  for a discussion of  and some proofs on  completeness of these rules. 
implementation 
     an augumented version of the prover described in |1   which operates in machine-only mode   i . e .   
not man-machine   has been used to prove some example theorems. but not a l l of examples 1 of this paper were actually proved. examples 1  1  were proved outright. some others could have been proved by minor changes in the program which we are in the process of making; and some require more extensive changes. 
acknowled gmen t 
　　　this work has benefited from conversations with mike ballantyne  mabry tyson  peter bruell  allan robinson  ernie sibert  peter andrews  and gerard huet. also  peter bruell has helped develop and implement the computer program. 
