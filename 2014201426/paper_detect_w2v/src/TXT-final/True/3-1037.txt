
island parsing is a bidirectional parsing strategy mostly used in speech analysis  as well as in applications where robustness is highly relevant and/or processing resources are limited. although there exists an efficient redundancy-free island parsing algorithm for string input  it has not yet been applied to word graph input  an application which is central for speech analysis systems. this paper describes how the established algorithm can be generalized from string input to word graphs  increasing its flexibility by integrating the selection of island seeds into the search process inherent to parsing.
1 introduction
island parsing is a parsing strategy for context free grammars  mostly used in speech applications   ageno  1    gallwitz et al.  1    thanopoulos et al.  1    mecklenburg et al.  1    brietzmann  1  . it is a bidirectional strategy  in that incomplete parse items  which encode partially filled right hand sides of a context free rule  may extend in both directions. furthermore  parsing starts at some highly ranked input items called seeds and tries to explore the  islands of certainty  first.
　since island parsing starts building all possible derivations from every seed in both directions  provisions must be taken so as to avoid multiple computation of identical subderivations  which would lead to spurious ambiguities and reduced efficiency. to my knowledge there is only one description of an efficient fully redundancy free algorithm for island parsing  contained in an article comparing different bidirectional parsing approaches for context-free grammars  namely  satta and stock  1 .
　this algorithm splits up the chart into consecutive regions such that the region borders correspond to chart nodes and every region contains exactly one seed item. derived chart items lying entirely within a region have been constructed starting at the seed in a manner similar to earley parsing  which guarantees that they are build in a unique way. items crossing region borders are a possible source of redundancy  because the same derivation could be build starting either at the right or the left seed  see figure 1 for an illustration . by fixing the expansion direction of those items when they combine for the first time  duplicate derivations are avoided.
　this paper extends the original algorithm in two aspects that make it more feasible for speech applications.
　firstly  the original algorithm deals only with string input. because many speech applications require the direct analysis of word graphs  it is desirable to extend the method to word graph input. word graphs are acyclic directed graphs of input items with exactly one source node and one sink node  a node with in-degree resp. out-degree zero . they encode ambiguous input using possibly overlapping sub-paths  which lead to more complicated input configurations and require a modification of the original algorithm. the word graph in figure 1  for example  can not be split into more than one region because every border at an inner node would cross an input item  thus inhibiting the use of more than one seed.
　a modified algorithm must be able to deal with these configurations without losing efficiency  since speech applications are typically time critical and often have limited space resources. therefore  care has been taken to preserve the efficiency and the redundancy avoidance of the original.
　secondly  instead of picking all seeds in advance  the modified version integrates their selection into the search inherent to the parsing process. since a lower number of seeds may result in faster parsing  it is advantageousto be able to base seed selection also on information created during parsing  namely  on already constructed items and their quality.

figure 1: example word graph
　selecting a seed becomes one of the actions the parser can take  like the combination or creation of other parse items. this provides full flexibility in the design of the search strategy  which in resource-limited applications can have a big impact on the quality of the  possibly partial  results. picking all seeds in advance is then just one of the possible options.
　furthermore  dynamic selection of seeds is performedsuch that all sub-paths of the word graph will be be properly explored to arrive at a complete solution  which might not be the case if seeds were picked disadvantageously. if  for example  the seeds in figure 1 were the items labeled hat and tea  it might happen that the sub-path containing forty would not be considered.
　the modified algorithm does not fix regions for the whole word graph in advance. the resulting chart configurations are rather such that every path throughthe word graph has its own regions  and the borders of the different paths can  but need not  coincide. since similar propertieshold for the chart items with respect to the per-path regions as they do for the string version  the modified algorithm is still correct  complete and free of redundancy.
1 the original algorithm
because  satta and stock  1  aim at describing bidirectional context-free parsing in more generality  the formulation of the island parsing algorithm itself is somewhat complicated and its implementation is not obvious at first glance. to facilitate the description of the modifications  the original algorithm is presented first  albeit in an alternative  but equivalent form. similar notation is used as far as possible to stress the connection between the two formulations. in many respects  it is an ordinary chart parsing algorithm  that is only complicated by the bookkeeping necessary to avoid redundant computations. after introducing the notation  the algorithm is presented as a set of pseudo-code procedures.
the algorithm uses a context free grammar
　　　　　  where and are finite sets of terminal and nonterminal symbols  respectively  is the set of rules
　　　　　　　　  where	and each	. is the number of symbols on the right hand side of rule .	is the start symbol of the grammar. the grammar must not contain empty rules  i.e  rules of the form	. the input is a string of	terminal symbols	. the algorithm uses a chart of size	: a two-dimensional array
       where each contains a set of two kinds of items: complete and incomplete items.
	a complete chart item is a triple	with
	being the terminal or nonterminal category 	and	the
index of the start and end node of the item  respectively.
　for incomplete items  we introduce symbols that represent dotted items  partial derivations  of a rule :
with and . let be the set of all symbols for the dotted items of grammar . analogous to complete items  incomplete items are triples   where or   or both.
　the island seeds are represented by a set of indices of the corresponding input symbols. for the island parsing algorithm  the chart is divided into regions  such that every region contains exactly one seed. the indices of the region borders are named   with   and
. the region between
a seed and its left border is called right substring  because items in this region are built in a right-to-left top-down fashion. analogously  there is a left substring to the right of a seed  where items are built from left-to-right  respectively.
　the algorithm is started by adding all tuples to and then calling addcomplete for all of them. the programterminates whenever a derivation from the start symbol to the input string was found and the exit statement in addnew was reached  or else  if there are no more items to add  in which case the string is rejected.
　although items can potentially combine with other items at both sides  their expansion direction is restricted dynamically to avoid redundant computation of sub-derivations. these restrictions are implemented using two additional twodimensional arrays blockleft and blockright  that contain symbols of . if  for example  blockright   the item cannot combine with any item adjacent to its right.
　to illustrate the algorithm  figure 1 shows an example chart that will be referred to throughout the next paragraphs. complete and incomplete items are represented by solid respectively dashed arcs  bearing symbols from     and as labels. input items and are the seeds  the border between them is at p . the little blocks at the end of the arcs depict the values of blockleft and blockright  respectively.
　the blocking of a complete item is based on its relation to the seeds. items dominating a seed  i.e.  items whose yield contains at least one seed  are blocked on both sides and will only be extended by the projection step in the procedure addcomplete below. this is the case for all seed items  but also for the item which projects to the incomplete item . complete items in a right substring  like the items labeled     or   are blocked at the left side and can therefore only combine with active items to their right. thus  items in a right substring will be built right-to-left starting at the seed. complete items in a left substring are treated analogously.
　an unusual feature of this algorithm is that two incomplete items can be combined  see the second and fourth for loop in procedure addincomplete   while other chart parsing algorithms only allow the combination of an incomplete with a complete item. at the borders  these are the only possible combinations  since all complete items have been blocked.
　when incomplete items are created  they can at first extend in both directions  except for those where one of the dots is at its outermost position. incomplete items are blocked when combinedwith another item for the first time. if they combine to the right  they will be forced to combine to the right from that time on by blocking them at the left side  and vice versa.
　in figure 1  incomplete items	and have been combined to the complete item	and were then blocked at the left resp. right side  with no effect because of the dot positions. alternatively 	and
could have been combined. the second item would have been blocked at the right side  instead of left as in the figure  and could not have been built. instead  the resulting incomplete item would combine with the input item to produce .
　this mechanismsynchronizesincompleteitems  especially those that cross region borders  which guarantees that items whose yield contains more than one seed are built in exactly one manner.

figure 1: a decorated parse chart generated by the original algorithm. are the terminal  input  items      and the nonterminals  the region borders  i and i the seed indicesproc addcomplete
	if	forsome then
/* seed dominating: block both sides */
	blockright	blockright
	blockleft	blockleft
/* project step: add	*/ for	with	do addnew
else
	if	forsome then
/* right substring : block complete item left */
blockleftblockleft/* combine with for*/withblockleftdoblockright addnewblockrightelse /*forsome *//* left substring : block complete item right */
	blockright	blockright
/* combine with	*/ for	with	blockright
	blockleft	blockleft
addnew
end proc addincompletedo/*
if	forsome then l-predict if	forsome then r-predict if	blockleft	then
/* combine to the left with complete items */*/for	with	blockright blockright	blockright
addnew
/* combine to the left with incomplete items */do	for	with	blockrightdo/* block both incomplete items appropriately */
blockleft blockleft blockright blockright addnew
	if	blockright	then
/* combine to the right with complete items */
for with blockleft do blockleft blockleft
addnew
/* combine to the right with incomplete items */
for	with	blockleftdoblockleftblockleftblockright addnew
end
proc addnew
	if	thenblockrightifthen exit accept	if	then
addcomplete
else
	if	then
addincomplete
end
proc l-predict
　if predictleft then predictleft predictleft for with do addincomplete l-predict end
proc r-predict
　if	predictright then predictright predictright for with do addincomplete r-predict end
　the proceduresl-predictandr-predictrecursively generate top down predictions for an incomplete item  to both sides  if the item is dominating a seed  to the left  if it is in a right substring  and to the right otherwise. they keep track of the predictions generated so far using two arrays of length   storing the nonterminals for which left or right predictions have been introduced at a specific chart node.
　the loops at chart node 1 and 1 in figure 1 have been generated by l-predict. items that lie completely in right or left substrings stem from these top downpredictions  like the item labeled with or the complete item with label .
　 satta and stock  1  give a more formal description of the algorithm  including an invariant describing its behaviour.
1 modified algorithm
in the modified algorithm  instead of fixing seed and border indices in advance  every chart item is assigned a state  which is one of right substring  left substring or seed dominating  right  left and seed in the pseudo-code  respectively . additionally  complete items with a terminal category  i.e.  input items  can have neutral state  in fact  they are given this state during initialization.
　because the search strategy of the parser shall be adaptable  a priority is assigned to every item  which is used in connection with a priority queue  an agenda  to expand the best items first. the assignment of priority values is omitted here for the sake of clarity.
　during initialization  all input items are added to the chart  their state is set to neutral and they are added to the priority queue. parsing then continues by taking the highest ranked item from the priority queue and expanding it. a seed is selected when a neutral terminal item is retrieved from the queue. its state is updated to seed dominating  i.e.  the item itself becomes a seed. this puts seed selection on a level with the expansion of items  simplifying the implementation of a search strategy  owing to uniformity.
　if terminal items are neutral when they are combined with another item in the first or third for loop of the modified addincomplete procedure  they change state accordingly  either to left or right  depending on whether the incomplete item grew to the left  in which case the item is now member of a right substring  or vice versa. when such a terminal item is retrieved from the priority queue later during parsing  its state is already set and it does not become a seed.
　any other complete or incomplete combined items inherit their state from their daughters: if at least one of the daughters is seed dominating  the new item becomes seed dominating too  otherwise all daughters are members of the same substring  and the new item gets assigned the same state.
　all conditionals that use the seed and border indices in the original algorithm are replaced by conditionals checking the state of the items. as a consequence  the seed and border indices are no longer needed.
　instead of a string with elements  the parser gets a word graph as input. a word graph is an acyclic directed graph of terminal items with exactly one source and one sink node  nodes with in-degree resp. out-degree zero . the start and end node indices of the input items are typically in topological order  so that the source node gets index zero and the sink the maximal end node index of all input items  which in the modified version becomes the value of .
　parsing stops when either a complete derivation was found or the priority queue becomes empty  which means that the word graph must be rejected. since all input items were added to the priority queue in the beginning  it is also guaranteed that every sub-path of the word graph has been processed properly if parsing should stop with a failure. every input item will then have a non-neutral state  which means that it at least took part in some of the derivations.
　the procedures l-predict and r-predict are the same as in the original algorithm  and are omitted here.
proc addcomplete
	if state	seed then/* project step: add
	for	with	do*/addnewseed seedelsif stateright then/* combine with for*/withblockleftdoaddnewright stateblockrightblockrightelsif stateleft then/* combine with for*/withblockrightdoaddnewleft stateblockleft
end
proc addincompleteblockleft/**/if stateseed right then l-predictif stateseed left thenr-predict	if	blockleft	then
/* combine to the left with complete items */ for
	withstate	right neutral do
	if state	neutral
	thenstate	right
	addnew	state	state
	blockright	blockright
/* combine to the left with incomplete items */	for	with	blockright
addnew state state blockleft blockleft blockright blockright
	if	blockright	then
/* combine to the right with complete items */ for
	withstate	left neutral do
	if state	neutral
	thenstate	left
	addnew	state	state
	blockleft	blockleft
/* combine to the right with incomplete items */dofor	blockleft addnew	state	state blockleft	blockleft blockright	blockrightdoend
proc addnew
if	then if	then exit accept if	then
	if	seed	seed then
	state	seed
else
	if	right
	then state	right
	else state	left
	push	pqueue
end
proc main
	for	do
   state	neutral push	pqueue while empty pqueue do popmax pqueue
if state neutral then state	seed
	if	then addcomplete
else addincomplete
exit reject
end
1 correctness of the modified algorithm
if contains only string input and priorities are set appropriately to select the right seeds  the modified algorithm works like the original. this is achieved by using the maximal priority value for all seed input items  the minimal value for all other input items  and priority values strictly between these values for all other items. thus  seeds will be considered first and appropriately marked  and other input items will be considered after all possible combinations have been tried in some order  which is consistent with the original.
　it remains to be shown that in case of true word graph input  the algorithm will still be correct and redundancy-free. new situations arise from the fact that there are parallel subpaths of neutral input items to previously treated regions of the chart  and new  possibly derived items can now interact with existing ones created from previous expansions.
　the argumentation will be based on the respective properties of the original  which can not be shown here. it is clear that sub-derivations with equal span and item label may be produced because of the ambiguity in the word graph input. these items are not redundant because they have different yields. the type of redundancy that must be avoided is the multiple creation of identical items with both identical derivation and yield  which could be producedby an incorrect implementation of the island algorithm due to bidirectionality and multiple seeds. redundancy can therefore only occur relative to a path through the word graph.1
　although there are six cases in total to be considered  three each for left and right substrings   the treatment of left and right substrings will be completelyanalogous  so we will content ourselves with the discussion of the former.
1 a new left substring ends in a right substring
in this situation  which is depicted in fig. 1  node behaves like a new border node between seed and . because of the completeness of the original algorithm  all possible derivations compatible with the seed must be available at node   although some of them may be blocked. assume we lose a complete derivation because of an indispensable incomplete item that is blocked on the left side  like the item labeled in fig. 1 . if this is the case  there must be ancestor items of whose creation caused the blocking. one of these ancestors  ultimately the one that ends in the sink node1  is available for combination at node   which is a contradiction.

figure 1: a new left substring ends in a right substring. the thick arcs are items that are expanded later in the parsing process. is the old border node.
　as was argued above  redundant items can only occur relative to a path of input items through the word graph. since the same synchronization of items was used for the path through and with border as in the string method  the chart must
be free of redundancy for this path too.
　a special case of the configuration described in this section is given when the new sub-path hits the old border node  e.g.  node in fig. 1 . in this case  it is obvious that all  and only the correct derivations will be created.
1 a new left substring ends in a left substring

figure 1: a new left substring ends in a left substring
　all complete items starting at node in figure 1 are available to the new sub-path. every derivation starting at that is compatible with the new seed but not with the old one     will be constructed by the appropriate predictions and expansions  and since the predict methods keep track of which nonterminals have already been predicted  no work is duplicated and thus  no redundancy is produced. for blocked incomplete items  the same argumentation as in 1 applies  which guarantees completeness.
1 an alternative left substring path overruns a seed

figure 1: a seed is overrun by an alternative left substring
　this situation  which is shown in figure 1  is almost the same as in section 1  except that the new items ending in node do not come from a new seed on the parallel path  but from an alternative path from seed . therefore  the same argumentation applies as in 1 above.
1 worst case complexity
the number of symbols is bounded by where is the maximal length of a rule . on the chart  and on the agenda  can not be more than items  where is the highest chart index and .
　the function addcomplete is called at most times  and the second and third for loops in this function are executed at most times  while the first is executedat most times  which makes this function .
　the function addincomplete is called at most times. the second and fourth for loops  where active items are combined  can be executed at most times  which makes the whole function   while the first and third are executed at most times.
　these two functions clearly dominate the prediction functions  which makes the whole algorithm or
  whichever is dominant.
1 conclusion and further considerations
an efficient island parsing algorithm for string input was generalized to make it more feasible for the use in speech applications. the new version deals with word graphs as input without losing the beneficial properties of the original. it also integrates the selection of seeds into the parser's search process  which  in addition to more uniformity  provides the user with more flexibility in the design of the search strategy.
　the data structures for blocking and keeping the state of an item can be implemented as bit vectors  which produces minimal space and time overhead for all the blocking and state conditionals.
　the modified algorithm has been implemented for context free grammars with annotated feature structures. this implementation also provides pluggable search strategies to facilitate experimentation.
　from the point of view of the search strategy  the atomic action of the modified algorithm  one parsing task  is the expansion of an item  like  for example  in  caraballo and charniak  1 . to be able to define a more fine grained strategy  the parser could be changed such that the tasks are instead combination of two items  projection and prediction  or a subset of the three   kay  1    erbach  1  .
　the price to pay for the increased flexibility is a larger agenda  maybe prohibitively large  if the word graphs are big and/or the grammar is highly ambiguous. the changes to the algorithm are obvious  and it will depend on the specific task  whether the more elaborate search strategy will achieve better results or improved parsing efficiency.
acknowledgments
i am very indebted to giorgiosatta for his help in fully understanding the bits and pieces of the original algorithm  for the discussions and for his patience. i also want to thank berthold crysmann and melanie siegel for their help in preparing this paper and the anonymous reviewers for their constructive comments. this research was supported by the german ministry for education and research under grant no. 1 im d1  to the project smartweb.
