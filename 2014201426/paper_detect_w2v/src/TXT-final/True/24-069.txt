 
most research in computer chess has focussed on creating an excellent chess player  with relatively little concern given to modelling how humans play chess. the research reported in this paper is aimed at investigating knowledge-based chess in the context of building a prototype chess tutor  umrao  which helps students learn how to play bishop-pawn endgames. in tutoring it is essential to take a knowledge-based approach  since students must learn how to manipulate strategic concepts  not how to carry out minimax search. umrao uses an extension of michic's advice language to represent expert and novice chess plans. for any given endgame the system is able to compile the plans into a strategy graph  which elaborates strategies  both well-formed and ill-formed  that students might use as they solve the endgame problem. strategy graphs can be compiled  off-line  so that they can be used in real time tutoring. we show that the normally rigid  model tracing  tutoring paradigm can be used in a flexible way in this domain. 
1 	introduction 
chess playing has been the subject of intense investigation by human practitioners  cognitive psychologists  and by those in the field of artificial intelligence  ai . chess has the potential to be a  drosophilia   or fruitfly  for ai and cognitive science  simon and chase  1   because of its nature as an intellectual activity. in trying to create a superior computer chess program most ai researchers have concentrated on improving search techniques. there have been some knowledge-based chess projects which have explored more human ways of choosing moves  but they arc unable to compete against the search-based approaches. current knowledge-based programs use the concepts of chunking  berliner and campbell  1  advice  michic  1   and plans  pitrat  1; wilkins  1  to represent chess knowledge. although search-based programs are successful from a performance viewpoint  they make little contribution to the most interesting objectives set in choosing chess as an ai problem; that is  modelling intelligent behaviour within a well defined domain. the problem lies with the objective of creating a chess player: 
we would like to thank the natural sciences and 
engineering research council of canada for their financial support of this research. 
the goal has been achieved without resolving the fundamental questions. 
　this paper attempts to define the problem of developing an intelligent tutoring system for a sub-domain of chess. this change of goals requires a shift of emphasis which illustrates and illuminates many problems that arise in ai. chess tutoring requires the resolution of cognitive and epistemological issues inherent in knowledge-based chess. as a first step towards building a chess tutor  a prototype system  umrao  has been developed for the limited domain of bishop-pawn chess endgames. a set of 1 problems involving two white pawns  a black bishop  and two kings have been used  averbach  1  for system development. figure 1 illustrates one such endgame. 

	figure 1 	white to play and win  averbach  1  
　although  chess endgames are simpler than other parts of the game  they are still complex enough for interesting tutoring. endgames are amenable to a knowledge-based approach  michie  1 . chess is also a suitable domain for intelligent tutoring system  its  research  being reasonably complex  yet at the same time having wellformed solutions consisting of various interacting strategics. chess is not as simple as its gaming domains like west  burton and brown  1   nor as complex as its programming domains such as scent  mccalla et al.  1 . an intelligent chess tutoring system has not been developed before and may prove to be a better learning tool than chess playing programs and standard chess books. 
1 	system design and methodology 
the system has been developed in two phases. in the first phase  efforts were made to understand novice chess skills. novice chess players  players sufficiently versed in chess to begin making strategic decisions  were informally  tutored  
	gadwal  greer  and mccalla 	1 

in order to collect think aloud problem solving protocols. each was asked to solve problems from a set of twenty-two bishop pawn endgames and meanwhile their problem solving behaviour and human expert tutoring behaviour were recorded. the outcome of these protocols was the identification of the important design requirements for umrao. in the second phase  the system was designed and implemented according to the model of chess problem solving behaviour we discovered. the following design requirements for umrao were identified: 
  the system must be able to model correct and incorrect solution strategies. 
  instructions should be given in context 
  feedback should be conceptual  using higher level concepts such as plans and goals instead of simple feedback specifying move correctness or giving the next correct move. 
  students should be given an opportunity to explore incorrect strategies. 
1 	the architecture 
umrao consists of two parts: the expert and the tutor. the expert is run only once for each new bishop-pawn endgame problem. for each such problem the expert compiles a strategy graph representing plausible student strategies and sub-strategies as well as expert-level counter strategies. in order to compile its strategy graph  the expert uses a knowledge base called the plan library  which contains expert and student level plans in order to model correct and flawed lines of play. the plan representation is based on michie's advice definition fmichie  1  modified to represent misconceptions and faulty reasoning processes. 
　the tutor runs each time a student wants to work on a particular problem. it uses the strategy graph associated with the problem to track and predict individual students* moves in the context of their strategies. because the tutor tracks the student's strategy  or strategies   it can  at any point  comment on strategic shortcomings. it is also able to generate explanations contrasting expert and student strategies. note that the process of generating an explanation is efficient  since the strategy graph has been generated off-line  before the tutoring session. the tutor tracks through the graph; it does not build it. the basic approach is model tracing as in anderson et al.   but we have been experimenting with two instructional styles: the usual immediate feedback  as well as delayed feedback where there is scope for user initiative. 
1 	the expert module 
the expert can be explained in terms of its plan representation  its strategy graph and its planning system. the representation of plans is the back bone of umrao because of its importance in defining expert  student  and illformed strategies in one framework; in providing the basis for generating feedback using higher level concepts such as goals  constraints  and patterns; and in guiding interaction by suggesting situations appropriate for tutor intervention. in umrao  a plan is an object with slots representing various aspects of the plan: side to play  black or white   
1 	principles of al applications 
type of plan  expert or student   applicability predicate  
feasibility predicate  better-goals  holding-goals  moveconstraints for both sides  and decidability of the plan. 
　the slots for applicability  feasibility  and decidability are additional features not present in michie's advice language. an applicability predicate consists of board features  such as the pawn formation  blocked or passed pawns   which favour selection of the plan. feasibility predicates indicate the potential success of a plan. the criterion of success or the purpose of the plan is described by its better-goals. the criterion of failure of the plan is defined by its holdinggoals. for example  if a side has a passed pawn  applicability  and is not controlled by the bishop  feasibility  then the plan can be to 'queen the pawn'  bettergoal   and at the same time the pawn should be safe 
 holding-goal   and the success of the plan decides the game  decidability . the move-constraints are represented as mcx and mcy  where mcx defines the constraints on the moves for the side to play and mcy defines the constraints for the opponent's moves in order to satisfy the goals  better-goals and holding-goals  of the plan. 
　figure 1 shows examples of a student level and an expert level plan applicable in the board position shown in figure 

figure 1 example of expert and student level plans 
in commonsense terms the student plan says:  if you have double pawns and the first pawn is prevented by the bishop from queening: exchange the first pawn with the bishop and queen the second pawn.  the expert level plan says:  if you have double pawns and the first pawn is prevented by the bishop from queening and the opponent's king can reach the second pawn: exchange the first pawn with the bishop and 

queen the other pawn  but in the mean time keep the black king away.  
　the plan representation can be better explained by considering the expert plan w1 in figure 1. the first applicability feature  black-king-threatens p1  is a geometric relationship between the second pawn and the black king. the second feature is  double-pawn pi p1  which matches when there are two pawns in the same column. the third feature is  not  feasible wl   which matches when a particular plan wl is not feasible. this feature specifies a kind of plan ordering. what it means is that if plan w1 is not feasible only then should plan w1 be considered. in this way procedural knowledge has been coded in a declarative fashion. this ability to represent a variety of procedural knowledge in a declarative form adds to the generative capability of the system. 
the feasibility slot of plan w1 contains two features. 
the first feature  can-support wk  bishop-square pi   contains the primitive feature  bishop-square pi   which represents the square common to pi and the bishop. this ability to make composite features also adds to the generative capability of the representation. the second feature used in the given feasibility slot is  can-prevent wk bk p1  which matches if wk  the white king  is able to prevent bk  the black king  from reaching near p1  the second pawn . 
　the move-constraints mcx and mcy generally specify the constraints on the movement of a various pieces of plan's side and the opponent's side  respectively  in order to execute a particular plan. the movement of the piece is specified in terms of a square  or a group of squares  having a particular feature. for example  the three move-constraints in mcx direct the movement of: pawn pi towards its queening square  the white king towards one of the squares near the square on the pawn's path controlled by the bishop  and pawn p1 towards its promotion-square. the single move-constraint in mcy specifies to limit the ability of the opponent's king to move towards pawn p1. 
　the differences between the expert and student level plan in figure 1 begin with the applicability conditions of the plans. the student has not considered/perceived the  blackking-threatens p1  relation and as a result does not check for the feasibility of the black king capturing the second pawn  which produces a less adequate set of move-constraints  mcx and mcy . this in turn is responsible for the deviation from the correct solution strategy. 
　a variety of student level plans can be generated easily by perturbing expert level plans. for example  novices frequently do not check for the feasibility of an otherwise correct plan. this can be modelled by creating a new plan  wx'   by weakening the feasibility slot of plan wx. of course  not all such syntactic deviations are meaningful and they must be supported by empirical observation. 
1.1 	the strategy graph 
the strategy graph is a knowledge source for the tutor module made of nodes and links. the nodes of a strategy graph are called cnodes  strategies  and move-plan objects. the analysis contained in a strategy graph is made accessible to the tutor by placing the strategy graph's root cnode in the applicable problem object. the root cnode represents the initial state of the problem  initial board position   all the plausible strategies for that position  and the corresponding moves. at the root cnode it is always the student's turn to make a move. 
　figure 1 shows a portion of the strategy graph for the chess endgame problem given in figure 1. each cnode  labelled ci and shown by a rectangular box in figure 1  is connected to its descendant cnodes by a move justified by a set of plans. the strategy graph cnodes are classified as either student or expert cnodes depending upon who has to make a move at that cnode. each student cnode is linked to a set of expert cnodes  or it is a terminal cnode. similarly  each expert cnode has a single student cnode descendent  or it is a terminal cnode. each cnode contains links to applicable strategics. for example  in figure 1  co is connected to c1 by a move ml justified by a set of plans wl w1 w1. although all the cnodes shown in figure 1 have only a single parent  in complete strategy graphs for problems in umrao  many cnodes have multiple parents. it is important to notice that at all the expert cnodes  levels where it is the system's turn to make a move  there is only one descendant  the best move. this set of cnode objects  connected with descendant and parent links  forms the skeleton of the strategy graph. 

	figure 1 	the strategy graph 
	gadwal  greer  and mccalla 	1 

a cnode represents all the information available to the 
tutor during the process of monitoring the student's solution and conducting a tutoring session. a cnode contains the board configuration  information as to which side has the move  the parents and descendants of the cnode  lists of  move  cnode  pairs   pointers to all applicable strategies and the possible moves that correspond to these strategies  the descendant cnode corresponding to the best response  and the best result obtained by the cnode. figure 1 shows the instantiated cnode co. 

	figure 1 	the cnode co 
　each cnode object has associated with it a set of strategy objects si  shown by circles in figure 1. these strategy objects are instantiations of applicable plans. for example  cnode co has a set of strategies s1  s1  s1  and s1 which are instantiations of plans w1  w1  w1  and w1 respectively  strategy s1 is detailed in figure 1 . each strategy object contains information about the various aspects of an applicable plan object  for example  whether or not the plan is feasible  designated with values t or nil   whether or not the better-goal and the holding-goal of the plan are satisfied  whether or not there are moves that satisfy the requirements of a plan  and how different moves arc rated with respect to a plan. most slots of a strategy object are instantiations of the slots of its corresponding plan. besides these  a strategy object also contains a slot that points to a list of move-plan objects. 
	figure 1 	the strategy s1 
   a move-plan object  labelled mpi and shown by rounded rectangular boxes in figure 1  provides the justification of a given move with respect to a given strategy. for example  strategy s1  which is an instantiation of plan w1  contains three move-plan objects mp1  mp1 and mp1  containing the justification of moves m l   m1  and m1 respectively with 
1 	principles of al applications 
respect to strategy s1. each move-plan object contains the analysis of a plan after a given move has been made. for example  after making a move  let's say ml   this analysis will determine if the plan  w1  is feasible for the resulting position; in addition  it reveals the evaluation of the move m l   with respect to the move-constraints of the plan w1. each move-plan has an associated move. the slots of a move-plan object are detailed in figure 1. values associated with each move constraint reflects the progress the move makes towards meeting that constraint. an overall evaluation of the move is derived from the values of the move constraints. the next subsection explains how these different objects that build a strategy graph are generated. 
1.1 	the planning system 
the planning system used for generating the student and expert problem solving behaviour is based on depth-first search. alhough the methodology has an element of search  it is quite different from the methods used in the usual search-based chess programs. search in those programs is over the space of possible moves while in umrao search is over the space of plausible strategies  i.e.  umrao is based on planning rather than look-ahead. 
　the way planning is implemented in umrao is quite different from the planning in usual knowledge-based chess programs. typical knowledge-based chess programs have to analyze only the best or most promising plans at any time. they do not have to look for other plans until the current plan is abandoned for some reason. in contrast  umrao has to analyze all plausible plans at every student cnode. this is because the planning behaviour of students differs from that of an expert. in other words  all the applicable plans have to be analyzed for their consequences. even for the expert cnodes  static analysis is carried out at every cnode. because of this additional requirement of analyzing less than optimum plans  a different design for the planning svstem had to be devised. one important characteristic is the ability to simultaneously analyze different plans  which makes it suitable for parallel implementation. 
the move plan object mp1 
the methodology consists of two algorithmic modules: 
exsearch and stsearch. the exsearch module is applied when the expert has to generate and analyze the system's response in a given board position  while stsearch is applied when the expert devises possible student responses. exsearch is very similar to standard knowledgebased chess programs. once exsearch finds a suitable response  it does not have to look at the remaining possible responses  since it only has to generate the best counter 

response for a given student's response. stsearch must analyze all the plausible student responses exhaustively  as the tutor should be prepared for a range of student responses to a board position. further  exsearch only considers plans that are of expert level while stsearch has to analyze all kinds of plans. exsearch does not consider plans that are not feasible while stsearch considers all applicable plans irrespective of their feasibility. exsearch analyzes all the moves that correspond to at least one feasible plan until it finds one that results in a favorable position for the system and then stores the analysis of the best move  while stsearch analyzes all plausible moves and stores the analysis of all of them. detailed algorithms for both stsearch and exsearch can be found in  gadwal  1 . 
1 	the tutor module 
while the expert generates all the chess expertise required to help a student with a particular chess endgame problem  the tutor actually carries out the tutoring. the student can choose to play any of the endgame problems from the problem library. the goal of the tutor module is to challenge students to solve new problems while monitoring and commenting upon their actions. the system can recognize optimal  less than optimal  or clearly irrelevant moves. the student continues problem solving while the tutor offers help  hints  explanations  and tutoring advice when needed or requested. the main pedagogical goal underlying the design of the tutor module is to be a partner and co-solver of problems with the student  who is encouraged to experiment with various strategies. 
　　　　a variety of tutoring styles can be implemented with the tools provided in umrao. four tutoring styles have been implemented and tested. in immediate feedback with strict tutor control  umrao immediately explains the student's strategy and describes a more suitable strategy as soon as the student makes a suboptimal move. this is similar to the  model tracing  used in many of anderson's tutors  anderson et al.  1  in immediate feedback with student initiative  umrao alerts the student when a 
　　　　suboptimal move is made  but offers options for the student to explore a faulty line of play  request a hint  or an explanation of the current suboptimal strategy or the best strategy. optional feedback with strict tutor control does not allow the student to deviate from the path of optimal play  but satisfies students who want the tutor to provide explanations only when requested. optional feedback with student initiative provides the student with a full set of options including hint  best move  explain strategy  tell  try another  take back  and play on. these options are selected by the student whenever feedback is desired. once play reaches a terminal position  that is  an obvious win or loss for one of the players  an obvious blunder by the student  or a move that deviates from any known strategy  the system always takes initiative to force a choice. 
　to give a flavour of the tutoring interaction that has been implemented  consider a sample tutoring session for the bishop-pawn endgame originally presented in figure 1. figure 1 shows some of the screens taken from an actual tutoring session with umrao using immediate feedback with student initiative as the tutoring option. the tutor presents a selected endgame problem to the student and asks for a white move. the student makes a move by dragging a piece on the board from one square to another. the system updates the board and tells the student that the chosen move is not the best move and provides a set of menu options  shown in figure 1a . figures 1b and 1c show some of the types of feedback provided by the system in response to a 
　request for a hint and for a full explanation of the winning strategy. 
　suppose that the student ignores the system's advice and decides to pursue a line of suboptimal play. the system reacts to the student's move  and after some time  a position is reached where it becomes obvious why the first move was not correct  shown in figure 1d . play then returns to an earlier board position where there is a way for the student to correctly solve the problem. in the complete session  as the student tries out various moves  the tutor tries to recognize the plan behind these moves and offers a variety of feedback. this allows the student to explore both correct and incorrect strategies. 
1 	conclusion 
there arc a number of specific technical contributions of 
umrao. umrao extends traditional notions of knowledge-based chess it necessitates the incorporation of poor strategies as well as good ones into the knowledge base. umrao also has an interesting hybrid planning technique that is like traditional knowledge-based approaches in its search for optimal plans when it is the expert's turn to move  but is original in its need to consider all plausible plans when it is the student's turn to move. moreover  umrao delineates an elegant separation between plans and strategies. plans are problem-independent; strategies are problem-specific. this separation is used by umrao so that it can compile from the corpus of possible plans a particular strategy graph that is tailored to each endgame problem the inefficient compilation of strategy graphs can be done  off-line  so that they can later be efficiently used in real time student-tutor interaction. 
　umrao also makes specific contributions to intelligent tutoring. umrao shows how the model tracing tutoring methodology can be made flexible and responsive to the student  instead of rigid and dictatorial as it is often perceived to be. umrao also provides a laboratory for experiments in various kinds of tutoring strategies: the system's deep understanding of chess strategies allows tutor-controlled or student-controlled pedagogy; and allows a choice between immediate and delayed feedback to the student. 
　finally  there are general contributions of this research that transcend particular subdisciplines of artificial intelligence. the tutoring domain re-establishes chess as a natural exploratory environment for ideas other than search  and provides the area of intelligent tutoring systems with a perfect domain for exploring deep ideas in diagnosis and pedagogy without the complexities of other domains. with further development umrao may also prove to be a 
　practical contribution to the teaching of chess  more responsive and adaptable than a book  an expert that not only can present chess problems to students  but also solve them and comment strategically on them. 
	gadwal  greer  and mccalla 	1 


figure 1 sample screens from umrao 

   umrao is not yet a complete chess tutor  but it represents a good starting point for future research in its  cognitive science  and knowledge-based chess. such a chess tutor can act as a testbed for various theories about expert and novice chess skills  for testing techniques in student modeling and tutoring strategics  and for exploring the representation and reasoning schemes of knowledge-based chess. the strengths of the implementation are its modularity and simplicity  qualifying it to be a good experimental system for exploring various its issues. 
