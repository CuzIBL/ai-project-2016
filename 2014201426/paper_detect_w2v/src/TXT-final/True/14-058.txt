 
　　　considerable a t t e n t i o n has been given to creating hypotheses which cover a set of instances. however  todate the related problem of generating a task to r e f i n e the hypothesis set has so far received very l i t t l e a t t e n t i o n . a task-generator has been implemented for a 
　　　rule-based modelling system. lms  leeds modelling system. here we discuss how an analogous task-generator could be used with systems which do not constrain their hypothesis-space as strongly as lms. 
1. introduction 
　　　considerable a t t e n t i o n has been given to creating hypotheses which cover a set of instances.   1       1       1       1       1       1       1   and   1   . however  todate the related problem of generating a task to r e f i n e the hypotheses set has so far received very l i t t l e a t t e n t i o n . m i t c h e l l 
  1   is amoung the few people to address t h i s issue  and indicates how a problem generator would f i t w i t h i n the version space approach. most workers have made the same basic assumption that we have made 1n our e a r l i e r modelling work   1   . namely that the set of examples provided should be s u f f i c i e n t l y r i c h to discriminate between a l l l i k e l y hypotheses. obviously t h i s assumptionbecomes less viable as the number of p o t e n t i a l hypotheses increases. 
       this task generator has been created as part of a system which models student's problem s o l v i n g . lms  leeds modelling system  presents the student with a task. 1s presented with the student's response and from t h i s   hypothesizes models to explain the student's performance.  indeed. lms.represents each student model as an ordered production set; ordered. in the sense that the f i r s t rule which is s a t i s f i e d   f i r e s . see f i g u r e 1 for traces of t y p i c a l models . in our work we have paid p a r t i c u l a r a t t e n t i o n to the size of the search space and have shown that by indued  we claim that the task generator described here is suitable for domains in which the objective is to transform an i n i t i a l state into e i t h e r a pre-spec i f i e d  goal  slate or at least one with specified c h a r a c t e r i s t i c s . 
 generators for other task-types  for example the tasks described by klahr    1   and siegler    1     w i l l be discussed in a subsequent paper . further  it has been assumed that the domain knowledge has been formulated as a set of c1ndition-acti1n r u l e s ; that the tasks w i l l be processed using the same matching execution cycle as used here  namely the f i r s t s a t i s f i e d rule f i r e s . 
1.  the alafiiina domain. 
　　　figure la gives a styalized form of the rules used to evaluate/solve algebra tasks  and f i g u r e lb gives the set of associated mal-rules which 
have been noted in an e a r l i e r analysis of protocols  and used in a modelling experiment  
  1   . styalized rules have been used for task generation as they capture a l l the essential issues  but avoid some of the messier d e t a i l .  clearly  it would be possible to implement an algorithm to generate the ' r e a l ' rules from the styalized ones . figure 1 gives 'iracfs' of pairs of correct and 'buggy' models solving typical problems  and hence indicates the types of discriminatory tasks which the task generation algorithm must create. 
1. rule-based task generator:. 
       this analysis  further assumes that the model- and task-generation algorithms make use of the f o l l o w i n g c l a s s i f i c a t i o n for the condition part of the r u l e s : 
a  potential 	i n t e r a c t i o n between rules 
suppose the conditions of rule 1 is ci c1 . . . 
cm 	cn 	and 	the 	conditions of rule 1 is cm cn cs 
. . . . cz. then both rules would be able to f i r e   if the problem presented contained a pattern of the form.-
concentrating on p a r t i c u l a r 	r u l e   s   	it 	is 	possible to achieve very major reductions in the size of search space s . in an e a r l i e r paper we discussed an algorithm for the systematic search of a hypothesis-space   1     and the need to create for each domain-rule a discriminatory problem-type  or problem template. here we show how these techniques can also be applied to systems where the search has not been so systematic. the task-generator described here is for the algebra domain  but we beleive that the approach o u t l i n e d has considerable g e n e r a l i t y . 　　　as we are dealing with ordered production sets  the order of the rules determines which f i r e s   f i r s t   . and hence such a pattern would p o t e n t i a l l y discriminate between the models 
  . . . r l . . . r 1 . . .   and  . . .r1. . . r l . . .   .  whether or not the example does discriminate depends on the actions of the 1 r u l e s   . 
an example of such a pair of rules it 
	addsub 	num +/- num 
	mult 	num   num ci . . . cm cn cs . . . cz 

1 


1 

b  non-interacting or order-independent rules rules 
non- i n t e r a c t i n g rules are ones which whatever: the pattern would not be in c o n f l i c t   ie the patterns do not overlap. for example  if the conditions of rl are ci c1 c1 and of r1 are ci c1 c1 then these would not compete. 
c  subsume- rule rl is said to subsume r1. if rl's condition set is an ordered s u b - s e t   l   of r 's conditions  the e f f e c t of rl being placed before r1. in an ordered production set. is that the ps would act as if r1 did not occur   1     . an example of a subsuming/subsumed pair from t h i s 
domain is addsub and rearrange. 
　　　note that subsuinption and 'non i n t e r a c t ion ' can he decided by inspection of the condition parts of the r u l e s ; p o t e n t i a l i n t e r a c t i o n / c o n f l i c t depends c r i t i c a l l y on the form of the problem considered  and so has to be decided with respect to each problem type. 
       in older to generate a type of problem which would allow a rule to f i l e we need to use the rules in the opposite d i r e c t i o n to which they are used to solve a problem. that is given the mult r u l e : -
      str1 num str1  =   str1 num   num str1  the algorithm checks if num is contained in the input s t r i n g   and if so replaces it by the s t r i n g num   num   stri are strings which can be n u l l   . to i n i t i a t e the generation algorithm we need to specify an i n i t i a l s t r i n g   a set of rules which can be used in generation mode and a terminating condition  number of i t e r a t i o n s   rules which the f i n a l pattern must activate e t c .   . figure 1 shows the performance of the system when given the i n i t i a l state   shi  num . rule net  mui solvf fin1  and the critereon that mu1 t and then soi vf must be activated. 
1 the algorithms to generate a problem to dl♀ crj.mina le  between to models 
       the basis of this approach is the discrimination between 1 models. however  if one has n models then it would be sensible to choose a feature  say the presence/absence of a p a r t i c u l a r rule which  as nearly as possible  s p l i t s the hypothesis space into    and to use the algorithm outlined in this section with 1 models  one of which has the chosen feature and one that does not. 
       note that if one is systematically exploring a rule-space  as do both versions of ims.   1       then the only variants encountered should be rule/mal- rules and the ordering of the rules. however  what follows is a more general analysis which is needed if the space is not being searched systematically. in general  there are 1 cases 
which need to be distinguished between namely: 
	a. 	model  	which 	have 	the 	some rules but 
differently ordered 
       i n i t i a l l y   we need to d i s t i n g u i s h in each model  the sub set of rules which can p o t e n t i a l l y interact with other rules. suppose that the 1 
models were: 
 fin1 soive adosub mui t  
 muit addsub soivf fin1  
1 

then the 1 rules which could interact are addsub and mult; these rules are ordered d i f f e r e n t l y in these models and so the algorithm would attempt to generate a problem which discriminates between the 1 orderings of the r u l e s   mult and addsub.   i f they are not ordered d i f f e r e n t l y then a discrimination is not possible; eg  tin  soive addsub mult  and  addsub multi fin1 soivl  are equivalent models . 
	the 	i n i t i a l 	algorithm 	to 	create 	such 	a 
template attempts to create a task which activates al 1 the rules contained in the models and which contains the overlap pattern  opij. in e f f e c t   the models being considered contain just one additional rule to the model considered in figure 1  and so we can a n t i c i p a t e the form of the resultant tree. such a search is e s s e n t i a l l y breadth f i r s t   and so as at each level several rules can be applied the number of active nodes increases r a p i d l y . a much ' t i d i e r ' approach is to 
produce problem templates for the 'basic' models  that is f o r : 
 addsub soi vf fin1  
                      mui r soi vh hn   and then merely to extend these problem templates to 'accommodate' the additional r u l e   le mui i or adusuh; in figure 1 we l i s t the pfs generated for this domain's rules and associated ma 1 rules.  in an e a r l i e r paper.   1     we discuss the creation of such pts. as well as the generation of pts to discriminate between i n t e r a c t i n g pairs of rules eg addsub and m1hhs . 
  i n general there may be m pairs of wrongly ordered r u l e s . in which case the d i s c r i m i n a t i n g problem should s a t i s f y the above condition for each pair. in p r a c t i c e   one might prefer to generate a problem to discriminate between a single p a i r   and to work with the ' r e f i n e d ' models subsequently . 
b. models which have have differing rules. 
　　　this algorithm considers rules which are known not to i n t e r a c t . there are 1 basic cases to be considered here  namely: 
　　　a  where the conditions of r u l e s . ri and rj. are d i f f e r e n t    1   . 
　　　b  where the actions of the r u l e - p a i r are d i f f e r e n t . 
　　　the algorithm treats rules which d i f f e r in both their condition and action p a r t s   as if only their condition parts d i f f e r  as it is easier to v e r i f y discrimination has been achieved in t h i s case .  rules which have i d e n t i c a l condition and action parts should not occur and are reported as data e r r o r s   . for the moment  we shall assume there is only one rule pair to be discriminated between in the two models   t h i s approach may be generalized l a t e r   . 
the 1 sub-algorithms are: 
different condition part 
　　　if we use the notation that c ri  is the condition part of the i t h rule and pti i t s problem template  then: 
　　　if c r1  is not s a t i s f i e d by pt1 then pt1 di scr iminates. 
　　　s i m i l a r l y   if c r1  is not s a t i s f i e d by pt1 then pt1 discriminates. 
       if both of the above tests f a i l   then check that the actions of the 1 rules d i f f e r ; if they are the same  report an error as d i s c r i m i n a t i o n w i l l not be achieved with the current pts.  subsequently  we plan to implement an algorithm which w i l l extend the pts to ensure d i s c r i m i n a t i o n 
in such cases . 
1 


1 

1. m i t c h e l l . t.m. 1. version spaces: an approach to concept l e a r n i n g . ph.d. thesis  dept of computer science  
stanford. 
1. quinlan  j.r. 	1. 	discovering 	rules by 	induction 	from 	large c o l l e c t i o n s of examples. 	in 	 ed  	d.michie  expert systems. 	in 	the 	micro.:electronic 	age.. edinburgh: 	fup  pp 1. 
1. s i e g l e r   	r.s. 	1. 	the 	origins 	of 
s c i e n t i f i c 	reasoning  	in 	childrens 	 thinking; 	what 	develops. 	ed 	r.s. s i e g l e r . 	h i l l s d a l e   nj: 	lea. 
1. sleeman  d.h. and smith. m.j. 1. modelling student's problem solving  ai journal. pp 1. 
1. sleeman  d.h. 1. assessing aspects of competence in basic algebra. in intellegent  tutoring systems.. ed. 
d.sleeman and j.s. brown  new york: academic press. 
1. sleeman  d.h.  to appear . a rule-based modelling system. 
1 
