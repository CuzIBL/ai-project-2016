 
　　　this paper describes the use of powerful algebraic matching techniques for applying rewrite rules in equation solving. a matcher is presented that knows about the commutativlty and associativity of addition and multiplication  w i l l provide defaults for missing summands and factors  and if necessary w i l l solve algebraically for the value of pattern variables. 
able to derive the solutions to several of these hard problems. 
　　　the press solutions constitute a rational reconstruction of part of the history of algebra: we are not saying that this is how these solutions were f i r s t discovered  but that our program does show how they could have been discovered by a rational process of analysis of the problem  in terms of the tools available for its solution. 

1. introduction 
　　　this paper describes the use of powerful matching techniques in algebraic equation solving. this work builds on the press algebra system  a computer program for solving equations and inequalities and for simplifying expressions   1   . 
a powerful matcher  upon which the present work is based  is proposed in   1   ; this report also describes many of the ideas in press. press and the matcher extensions are written in prolog . 
　　　the goal of the resesrch described here is to test the search control technique of meta-level inference and the powerful algebraic manipulation methods of press on some hard problems. we consider the problems of solving the general quadratic and cubic equations and a general trigonometric equation. the solutions of these problems given in standard algebra textbooks a l l have a  magic  element. an expression is drawn out of a hat with a flourish of  consider the following term       as a side effect of applying the press equation solving methods  we show how the magic element can be understood. in fact  the program is press uses multiple sets of rewrite rules  employing meta-level reasoning and descriptions to guide that application and hence control search. some of the important rewrite rule sets are: 
isolation press tries applying isolation rules when there is a single 
occurrence of the unknown in the equation. isolation rules are applied to strip away surrounding functions and operators from the 
unknown  f i n a l l y resulting in an equation with the unknown on one side by i t s e l f   and some expression  free of the unknown  on the other. 
a typical isolation rule is arcsin x - b -  x = sin b. collection collection rules serve to reduce the number of occurrences of the unknown  so that isolation can be 
applied. 	a typical collection rule is 
uw + vw -   u+v w 
which collects relative to w. 
   computing resources for this research were provided by science research council grant number gr/a 1. a. borning was supported at the university of edinburgh by a nato poatdoctoral fellowship from the national science foundation. 
current address: 
computer science department  fr-1 
university of washington 
seattle  washington 	1 
usa 
attraction attraction rules move occurrences of the unknown closer together in the expression tree  so that perhaps a collection rule can be applied. a sample rule is logbu + logbv -  logbuv  
which attracts u and v. 
	to 	apply a 	rewrite 	rule 	to an expression  
press uses a matcher that knows about the commutativlty and associativity of addition and multiplication. for example  to apply the collection rule uw + vw -   u+v w 
1 
to the expression xy + s 1x  
in order to collect the two occurrences of x  the press matcher would substitute x for w  y for u  
and 1s for v. the result of applying the rule would be 
 y+1s x. 
the matcher used the commutatlvlty and associativity of multiplication in accomplishing the match. 
　　　an application of collection is the crucial step in the solution of some equations. reflecting this  human mathematicians w i l l try quite hard to find and apply a collection rule to an expression. for example  the standard solution of the general quadratic equation ax1 + bx + c   1 uses the collection rule u1 + 1uv + v1 -   u+v  1 . 
all the other steps of the solution are either preparations for applying the rule  or subsequent isolation steps.  however  a different terminology is usually used - rather than talking about rewrite rules  mathematicians talk about identities. also  the process of applying the above collection rule is often presented in  compiled form*' as the operation of completing the square.  similarly  the standard solution of the 
trigonomtric equation a sin x 1- b cos x - c 
depends c r i t i c a l l y on the use of the rule cos u sin v + sin u cos v -  sin u+v .  descriptions of the solutions of these equations may be found in .  
　　　however  the application of these rules - matching the left hand side of a rule with an expression - cannot be accomplished by using simple pattern matching and information about associativity and commutatlvlty. what additional techniques are required  as part of an investigation of this question  an experimental matcher has been embedded in press that can  among other things  solve both of the above equations from f i r s t principles. 
　　　otherwise  the matcher must try harder. the matcher has two ways of accomplishing a non-trivial match: by recursively matching corresponding parts of the expression and the pattern  or by solving algebraically for the value of a pattern variable. 
1 . 1 . recursively matching parts of expressions 
　　　in general  to match two complex expressions  the matcher w i l l f i r s t check that the principal operators or functions are the same  and w i l l then 
match the corresponding arguments. for example  consider matching the expression logea with the pattern log v  where v is a pattern variable. the matcher f i r s t checks that the functions log are the same  and then calls itself recursively to match e with e  and a with v. 
　　　the matcher knows about the commutatlvlty and associativity of addition and multiplication. when matching two sums or products  the matcher puts a l l the terms in each sum or product into an unordered bag. it then has available a range of alternatives in matching the two bags  among the more important being: 
- if both bag1 are empty  the match succeeds t r i v i a l l y . 
- the matcher can pick a term from each bag and call i t s e l f recursively to match the two terms. in using this alternative  the matcher w i l l pick the most complex term from one bag  using a simple complexity metric. then  it w i l l pick an appropriate term from the other bag by performing a fussy match between the term from the f i r s t bag and candidate terms from the other bag.  see section 1 for a description of fussy matching.  
- if the term in either the expression or the pattern is free of the unknown  the matcher can permit the match to succeed 

1. the matching algorithm 
　　　the matcher is called with descriptions of the expression and pattern to be matched. if the match is successful  a transform is returned  consisting of a series of substitutions and arithmetic operations  such that the result of applying the transform to the pattern would be algebraically equal to the expression. 
　　　when called  the matcher f i r s t checks for simple cases. if the expression and pattern are identical  the match succeeds t r i v i a l l y   and the null transform is returned. if the pattern consists solely of a pattern variable  the match succeeds again  and a transform consisting of the single substitution  variable -  expr  is returned. by adding or multiplying each side of the rule by a term  if applying the operation w i l l not invalidate previously matched parts of the expression and pattern. 
* if the pattern contains a pattern variable  the matcher can try to solve for its value algebraically.  see 
section 1.  
　　　when matching a sum against any other expression  including a product   the matcher w i l l convert the other expression into a plus bag with just the one element. matching a product against any other expression  except a sum  is handled analogously. 

1 

1. solving algebraically for the value of a pattern variable 
　　　the other principal technique for accomplishing a match la to solve algebraically for the value of a pattern variable. an equation is constructed whose two sides are the expression and pattern to be matched  and presented to the main equation solving routine. use of this technique increases the power of the matcher considerably  as it puts the f u l l capabilities of the equation solver at the matcher's disposal. 
　　　in solving equations of this kind  a 
　　　particular rather than a general solution is wanted. the equation solver is told about this by adding an appropriate aaaertlon to the data base  so that only a single solution is returned  with alternate solutions being generated only if the program backtracks. 
1. search control 
　　　the matcher has available a considerable range of strategies for accomplishing a match; some of these strategies  such as solving algebraically for the value of a pattern variable  can be expensive to use. therefore  it is important that the search involved in accomplishing a match be tightly controlled. the main technique for doing this is the use of fuzzy matching as a preliminary check before the f u l l matcher is invoked.  note that we are using the term  fuzzy** in a different sense than as in  fuzzy logic**   fuzzy matching is used both for the i n i t i a l selection of a collection rule  and for the selection of a pair of terms to match from two bags. another technique for controlling search is the complexity heuristic for deciding which term in a bag to look at next. 
　　　to check for a fuzzy match  the program computes the features terns of the expression and pattern  and then matches these using the normal press matcher  which is comparatively inexpensive . 
the algorithm for extracting a features term gives special status to the unknown  reflecting the fact that the matcher can often deal with miscellaneous 
expressions that are free of the unknown. 
- if the expression is the unknown i t s e l f   then i t s features term is the unknown as well. 
- if the expression is free of the unknown  its features term is the expression 
 mumble . 
- to compute the features term of a sum  the features term of each term in the sum are found. all  mumbles  are discarded; 
- the features term of any other complex expression is found by computing the featurea term of each argument  and returning a new term with each argument replaced by i t s corresponding features term. 
for example  suppose that x is the unknown. 
then the features term of a cos y is  mumble   the features term of ax+b is x  and the features term of a sin x 1  +cos y 1   is sin x 1  . 
　　　these techniques have proven to be quite powerful: most spurious matches are rejected during fuzzy matching  and l i t t l e search is done using the f u l l matcher. to handle the search that does occur  the matcher uses the depth-first search provided by the b u i l t - i n prolog backtracking mechanism  along with a memo procedure to save the results of matches in case they are needed again. 
　　　the current search control methods are for the most part adequate for matches that are eventually successful  and for matches that can't succeed  and are detected as such by the fuzzy matcher . the matcher takes considerably longer on matches that pass the fuzzy matcher  but eventually f a l l . for example  if one asks the system to find the solution to the general cubic equation ax1 + bx1 + ex + d = 1  
it w i l l  reasonably enough  attempt to apply the collection rule u1 + 1v +1uv1 + v1 -   u+v  1 . this match eventually f a i l s   but only after considerable backtracking. 
1. an example - deriving the solution for the 
general quadratic equation 
　　　the operation of the matcher w i l l now be illustrated by an example. because of space limitations  a summary is presented here; a complete annotated trace of the matcher's operation on this and other problems  as well as a fuller description of the program  may be found in . 
　　　to start things off  the user asks press to solve the equation ax1 + bx + c ＊ 1 
for x. press decides that isolation is not applicable  since there are two occurrences of the unknown. it therefore tries to collect these two occurrences. in searching for an applicable collection rule  the program f i r s t performs a fuzzy 
the features term is then a sum features. the features term of the l e f t hand side consisting of the remaining features of the equation is terms. products are handled analogously. x1 + x  
- integer exponents of expressions not free the coefficients and the constant term c having of the unknown remain themselves. been regarded as relatively unimportant. 
1 match between the expression and the pattern part of each potentially applicable collection rule. the fuzzy matcher extracts a features term from the expression  and searches for a rule with matching one of the collection rules known to press is u1 + 1uv + v1 -   u+v 1 
which collects relative to u. when the unknown x is substituted for u  the features term of the rule is 
also x1 + x. 
the program therefore selects this rule and tries to apply it to the left hand side of the equation. 
 this is in fact the only collection rule known to press that w i l l pass the fuzzy match.  
　　　the f u l l matcher is now invoked to match the pattern part of the rule with the quadratic expression. since the principal operator of both the expression and pattern is +   the matcher converts to a bag representation. as previously described  there are a number of ways in which two bags can be matched. the matcher tries one of these methods: picking a term from each bag and 
matching those two terms. it selects the term ax1 from the expression  on the grounds that it is the most complex   and then chooses a term with matching features from the rule  in this case x   
　　　the matcher now calls itself recursively on these two terms. since the principal operator of ax is times  the matcher again converts both terms 
1 
to a bag representation. the x term from the pattern is converted to a times bag with one 
1 
element. the matcher picks the nr terms from each bag  and matches them t r i v i a l l y . after that  however  it must match the expression bag  which s t i l l has the  a  left in i t   with the now empty pattern bag. the previously used strategy of picking a term from each product is no longer applicable. instead  the matcher decides that the  a  should be dealt with by multiplying both sides of the rule by   a   . this result is returned as a transform. 
　　　the two remaining terms in the pattern bag are multiplied 	by 	  a     	and 	the 	matcher 	is 	called recursively 	on 	the 	remaining 	parts 	of 	the expression and rule  which are now bx + c 
and 
1 
1xva + v a. 
respectively. 
　　　again converting to a bag representation  the matcher recursively tries to match the two terms containing x  namely bx and 1xva. the two x's are matched t r i v i a l l y . the matcher then makes several unsuccessful attempts to match b with a term from the pattern.  the strategy previously employed of 
multiplying both sides of the rule by some expression can no longer be used  since doing so 
would invalidate the already established match of 
1 
the x 	terms.  

+ c 
- b1a v -  b/1a 
the pattern w i l l match the expression if the transform listed is applied to it  multiply each side of the rule by a  then add c to each side  subtract b1a from each side  and substitute b/1a for v   . the rule remains a valid collection rule after the transform has been applied to each side of i t . so the transform is applied to the replacement part of the rule  and the altered collection rule is applied to the original 
equation. 	the result is 
 x+b/1a 1a + c - b1a - 1. 
　　　most of the work is now done. the new equation has a single occurrence of x  and is easily solved by isolation to yield the two roots of the quadratic. the program's solution  written in two-dimensional notation  i s : 


　　　after these failures  the matcher tries the other principal matching strategy  that of solving algebraically for the value of a pattern variable. the equation solving program is called recursively if the fractions are put over a common demonlnator  the answers simplify to the usual expressions.  a package for performing this sort 

1 

of simplification has been been incorporated into press  but after this trace was taken.  
1. other problems solved using the matcher 
another equation solved using the matcher is a sin x + b cos x   c* 
the 	features 	term of 	the 	l e f t 	hand 	side of the 
equation is sin x + cos x* 
one of the trigonometric collection rules is cos u sin v + sin u cos v -  sln u+v   
which collects relative to u. when x is substituted for u  the features term of this rule is cos x + sin x  
which matches the features term of the left hand side of the equation*  note that the sin v and cos v factors are dropped  as they are free of the unknown.  the f i r s t term of the expression and the second term of the pattern  namely a sin x and sin x cos v  are matched by multiplying each side of the pattern by a/cos v. the matcher next matches the remaining terms from the expression and pattern  which are now b cos x 
and 
　　　　　 cos x sin v a/cos v respectively* the two cos x factors are matched t r i v i a l l y * to complete the match  the matcher solves algebraically for a value for the pattern variable v. in the process  the  recursively invoked  equation solver employs another collection step to collect the two occurrences of v by using the rule sin w/cos w -  tan w* 
　　　as an application of the augmented press program  a procedure was written that compiles specialised methods for solving certain kinds of equations* the user gives the program the general form of an equation  such as the quadratic or the trlgonometlc equation* the program solves the equation using the powerful matcher  and then asserts a new prolog procedure for solving 
instances of that equation* 
　　　the matcher has also been used to solve equations using a change of unknown  such as the equation 
	1y . 	1 y+l 	+ 1 . 	1# 
here  the equation is matched against an equation whose solution is known   i n this case the quadratic  to generate the change of unknown 1v -  x. 
1. work in progress 
　　　a milestone in the history of algebra and equation solving was the solution of the general cubic equation* we have recently made progress toward getting press to solve this equation* one solution we are working towards  described in  i   uses the collection rule cos1u - 1 cot u -  1 cos 1u . 
the program currently w i l l solve the equation with some help. press reduces the general equation to 
         1 + hz + g - 1 using a linear substitution* however  at that point it must be explicitly told to try the  magic substitution' 1 z - w cos u. we hope to extend press so that it w i l l be able to solve the cubic and quartic equations from f i r s t principles without human intervention  using both this solution path and others. 
1. related work 
　　　to the best of the authors' knowledge  no other algebraic matcher has been implemented that compares in power to the one described here  which builds in the associative  commutative  and distributive laws  and has available the f u l l power of the equation solving system for solving for a value for a pattern variable. 
　　　the press program  without the extensions described here  includes a matcher that knows about the commutetlvity and associativity of addition and 
multiplication. the matcher in macsyha  1    knows about commutatlvity and associativity. it also provides defaults for missing summands  factors  and exponents  and w i l l distribute products over sums to accomplish a match. 
　　　there is considerable literature concerning pattern matching in theorem proving - see  for a survey of the state of the art. none of this work is very relevant to the present research. most of these algorithms build in only a very few axioms  whereas the matcher described here builds in an indefinite number. on the other hand  these algorithms are usually for two-way matching and come with a completeness proof  which we could not have. 

1 
