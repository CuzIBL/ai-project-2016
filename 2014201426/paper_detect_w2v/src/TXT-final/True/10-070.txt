ion from the physical process. at that abstract level  a process is a controlled application of actions to objects. the effect of applying an action to objects may be to directly invoke further actions  to create new objects  and to create or destroy associations between objects. the environment in which the process operates consists of a relational data base  chamberlin 1  of these associations. 
modeling a domain 
　　　a domain model consists of information about types of objects in the domain  the classes of associations  relations  which may be formed between those objects  constraints on the set of associations which may co-occur  inference rules which permit the derivation of new associations from old  the actions which may be performed  along with their operand types and pre- and postconditions  particular object instances  and particular associations between those instances. this information may be characterized as: 
  time-independent - whereas any process creates and destroys associations  information  as it operates  the domain structure information remains static. 
  constraining rather than determining -- each piece of a domain model serves to constrain the universe of processes which can be built within the domain. the domain structure does not determine a particular process  however  but only an infinite class of processes. 
  needed for the non-performative aspects of process understanding rather than for actual process execution -a process within the domain must conform to the constraints imposed by the domain  but has no need to 
access the descriptive information in its operation. 
1
  this research was supported by the defense advanced research projects agency  darpa  under contract no. 
dahc1 c 1. 
using the domain model 
　　　domain models have been used in al planning systems  tikes 1  and have been suggested as one approach to providing question-answering facilities for data base management systems  sowa 1 . the former relies mainly on the characterization of the domain's actions  while the latter depends on the characterization of relational connections in the domain and functionality constraints. understanding descriptions of processes  particularly when those descriptions are provided in an informal language  appears to require a stronger model of the process domain than those utilized for the planning and question-answering tasks. such descriptions  unlike conventional computer programs  do not generally contain sufficient explicit declarative and procedural information to ensure unique interpretations of individual phrases and statements. 
  reference to objects is not by  variable  name  but by description. 
  operands may be omitted where the process describer feels that the identity of the  proper  operand is  sufficiently obvious . 
  the proper sequencing of actions and tests may not be explicitly specified  even when that sequencing is not arbitrary. 
　　　safe understands such descriptions by using a model of the process domain  either pre-existing or acquired from the description  to select and combine plausible interpretations of informal language constructs. 
　　　first  the domain model is used to suggest local resolutions of informalities -- e.g.  fill in missing operands with objects of appropriate type; for unnamed relationships between described objects select relations known to relate objects of the types described. a consistent set of these resolutions is then sought by executing the hypothesized program on symbolic data. the pre- and postconditions and constraints in the domain model help force rejection of choices which may have appeared satisfactory in a static context. 
remarks 
　　　the construction of a formal domain model for any domain of sufficient size to be interesting would be an arduous and error-prone task  for which no realistic completeness test can be given. fortunately  process descriptions  both formal and informal  reflect the underlying domain structure. it is therefore possible to construct/augment the domain model from a process description itself  goldman 1 . 
