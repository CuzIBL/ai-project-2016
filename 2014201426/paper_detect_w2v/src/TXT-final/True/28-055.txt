 
we extend the constraint logic programming  clp  formalism in order to handle semiringbased constraint systems. this allows us to perform in the same language both constraint solving and optimization. in fact  constraint systems based on semirings are able to model both classical constraint solving and more sophisticated features like uncertainty  probability  fuzzyness  and optimization. we then provide this class of languages with three equivalent semantics: model-theoretic  fixpoint  and proof-theoretic  in the style of clp programs. 
1 	introduction 
classical constraint satisfaction problems  csps   mac1  are a very expressive and natural formalism to specify many kinds of real-life problems. however  they also have evident limitations  mainly when they are used to represent real-life scenarios where the knowledge is not completely available nor crisp. in fact  in such situations  the ability of stating whether an instantiation of values to variables is allowed or not is not enough or sometimes not even possible. recently  a proposal which extends classical csps in this direction has been developed  bmr1; bmr1   which is able to model many desired features  like fuzzyness  dfp1   probability  fl1   uncertainty  partiality  fw1   hierarchy  bmmw1   and optimization. this framework is based on the observation that a semiring  that is  a domain plus two operations satisfying certain properties  is all what is needed to describe many constraint satisfaction schemes. in fact  the domain of the semiring provides the levels of consistency  which can be interpreted as cost  or degrees of preference  or probabilities  or others   and the two operations define how to combine constraints together. in particular  from one of the operations we can derive a partial order   among the elements  on leave at sri international  menlo park  ca. 
1 	constraint satisfaction 
of the semiring which allows us to compare different elements: if a   b then it means that b is better than a. this is crucial in situations which involve some kind of optimization. constraint problems described according to this framework are called scsp  for semiring-based constraint satisfaction problems . 
　constraint logic programming  clp   jl1  languages extended logic programming  lp  by replacing term equalities with constraints and unification with constraint solving. programming in clp means choosing a constraint system for a specific class of constraints  for example  linear arithmetic constraints  or finite domain constraints  and embedding it into a logic programming engine. this approach is very flexible since one can choose among many constraint systems without changing the overall programming language  and has shown to be very successful in specifying and solving complex problems in terms of constraints of various kind. however  it can handle only classical constraint solving. thus it is natural to try to extend the clp formalism in order to be able to handle also scsp problems. we will call such an extension sclp  for semiring-based clp . 
　in passing from clp to sclp languages  we will replace classical constraints with the more general scsp constraints. by doing this  we also have to modify the notions of interpretation  model  model intersection  and others  since we have to take into account the semiring operations and not the usual clp operations. for example  while clp interpretations associate a truth value  either true or false  to each ground atom  here ground atoms must be given one of the elements of the semiring. also  while in clp the value associated to an existentially quantified atom is the logical or among the truth values associated to each of its instantiations  here we have to replace the or with another operation which refers to one of the semiring operations. 
　after describing the syntax of sclp programs  we will define three equivalent semantics for such languages: model-theoretic  fixpoint  and operational. these semantics are conservative extensions of the correspond-

ing ones for lp  since by choosing a particular semiring  the one with just two elements  true and false  and the logical and and or as the two semiring operations  we get exactly the lp semantics. the extension is in some cases predictable but it possesses some crucial new features. for example  the presence of a partial order among the semiring elements  and not a total order like it is in the lp/clp case  where we just have two comparable elements  brings some conceptual complexity in some aspects of the semantics. in fact  in the operational semantics there could be two refutations for a goal which lead to different semiring elements which are not cornparable in the partial order. in this case  these elements have to be combined in order to get the solution corresponding to the given goal  and their combination could be not reachable by any derivation path in the search tree. this means that any constructive way to get such a solution by visiting the search tree would have to follow all the incomparable paths before being able to find the correct answer. 
　a related approach is hclp  hierarchical clp   bmmw1   where each constraint has a level of importance  like strong  weak  required   and these levels are used to decide which constraints to satisfy. however  a constraint can only be satisfied or not  and thus hclp is a crisp formalism. moreover  their treatment is only algorithmic  and they do not provide their language with a fixpoint or a model-theoretic semantics. 
　a recent approach to multi-valued logic programming  mps1  uses bilattices with two orderings to model both truth and knowledge levels. the resulting logic programming semantics is just operational and fixpoint  while no model-theoretic semantics is presented. moreover  the presence in our approach of just one ordering  modelling truth levels  is not a restriction  since the vectorization of several semirings is still a semiring  see  bmr1; bmr1   and thus optimization based on multiple criteria can be cast in our framework as well. 
1 	semiring-based csps 
here we give the basic notions about constraint solving over semirings  introduced in  bmr1; bmr1 . 
definition 1  semiring  a 	semiring 	is 	a 	tuple 
 a -!-  x 1  such that 
  a is a set and 1  a; 
  +  called the additive operation  is a closed  i.e.  a  b a implies a + b  a   commutative  i.e.  a + b = 1 + a  and associative  i.e.  a +  b + c  =  a + b  + c  operation such that o + 1 = o = 1 + a  i.e.  
1 is its unit element ; 
  x  called the multiplicative operation  is a closed and associative operation such that 1 is its unit element and a x 1 = 1 = 1 x a  i.e.  1 is its absorbing element ; 
  x distributes over +  i.e.  a x  1 + c  =  a x b  +  a x c  . 	
definition 1  c-semiring  a c-semiring is a semiring 
 a  +  x 1  such that 
  + is idempotent  i.e.  a  a implies a + a = a ; 
  x is commutative; 
  1 is the absorbing element of +. 	d 
　the following is a list of properties about c-semirings which will be used in this paper: 
  given any c-semiring s =  a  +  x 1   the rela-tion  over a such that  1iffa + 1 = 1 i s a partial order. 
  since 1 is the unit element of the additive operation  it is the minimum element of the ordering. thus  for any a  a  we have 1 
  both the additive and the multiplicative operation are monotone on the ordering 
  since 1 is also the absorbing element of the addi-tive operation  then a  1 for all a. thus 1 is the maximum element of the partial ordering. this implies that the x operation is intensive  that is  that a x b  a. this is important since it means that combining more constraints leads to a worse  w.r.t. the ordering  result. 
  given a c-semiring s =  a  +  x 1   and its par-tial order is a complete lattice1. moreover  for any a  b a  we have a b = a + 1  where v is the lub operation of the lattice. 
  given a c-semiring s =  a  +  x  1   consider the corresponding lattice  if x is idempotent  then we have that: 
1 + distributes over x; 
1 x =  where  is the gib operation of the lattice; 
1  is a distributive lattice. 
definition 1  scsps  a constraint problem based on semirings  scsp  consists of a set of variables with a finite domain d and a set of constraints. each constraint  which connects a subset of the variables v  is defined by associating an element of the semiring with each tuple of values of d for the variables in v. 
　note that the elements of the chosen semiring can be interpreted in many ways: cost  level of preference  certainty  probability  etc. note also that the intuitive 
   actually  for this result to hold we must assume that there exists the sum of an infinite number of elements. 
	bistarelli  montanari  & rossi 	1 
meaning of the partial order is to state when an element is better than another one: if a b then we mean that b is better than a. finally  it is interesting to notice that classical csps are just scsps where the semiring has just two values: true and false  and the two operations are logical and and logical or. that is  the semiring is 
1 	syntax of sclp programs 
sclp s d  programs are just constraint logic programming  clp  programs  jl1  where constraints are handled according to the chosen semiring s =  -1  +  x  1  and variables can be assigned values over a finite set d. as usual  a program is a set of clauses. each clause is then composed by a head and a body. the head is just an atom and the body is either a collection of atoms  or a value of the semiring. finally  a goal is a collection of atoms. the bnf for this syntax follows. 
　as an example  consider the following sclp s d  program where 	is the set of non-positive integers  and d = {a b c}. note that the ordering in this semiring coincides with the ordering over integers. 
　the intuitive meaning of a semiring value like -1 associated to the atom r a  is that r a  costs 1 units. thus the set contains all possible costs  and the choice of the two operations max and + implies that we intend to maximize the sum of the costs. this gives us the possibility to select the atom instantiation which gives the minimal cost overall. 
1 	model-theoretic semantics 
an interpretation is a function which takes a predicate and an instantiation of its arguments  that is  a ground atom   and returns an element of the semiring:  where pn is the set of n-ary 
predicates. the notion of interpretation can be used to associate elements of the semiring also to formulas which are more complex than ground atoms. more precisely  we can define the function valuel which takes any for-
1 	constraint satisfaction 
mula appearing in a program  not a clause  and returns an element of the semiring: 
  the value associated to a non-ground atom of the form  is computed by considering the lub of the values associated to all the ground atoms 
a{x/d   where d is any domain element. that is  
 formulas 
of this kind occur in sclp languages since variables appearing in the body of a clause but not in its head are considered to be existentially quantified. for example  in the special case of logic programming the clause p a  :- q x a  is just a shorthand for the formula 
  the value associated to a conjunction of atomic formulas of the form is the product of the values associated to a and b: 
  for any semiring element a  
　note that the meaning associated to formulas by function valuej coincides with the usual logic programming interpretation  llo1  when considering the semiring in fact  in this case*the o r d e r i n g i s defined by false true  the lub operation of the lattice  {true  false}  is and the glb is thus  for example  
thus it is enough that one of 
the a d  is assigned the value true that the value associated to the whole formula is true. note also that in this special instance the lub and glb of the lattice coincide with the two semiring operations  but this is not true in general  see section 1 . 
　given a clause of the form h : -b and an interpretation /  we say that the clause is satisfied in / if and only if valuel h   valuel b . this is consistent with the usual treatment of clauses in logic programming  where a clause is considered to be satisfied if the body logically implies the head  and by noting that logical implication in the semiring scsp coincides with the ordering 
for example  the clause p a  :- q b  is satisfied in 
i if the clause p x  :- q x a  is satisfied if 	the clause p a  :- q x a  is satisfied if 	; 
the clause p x  :- q x y  is satisfied if 
　an interpretation is a model for a program p if all clauses of p are satisfied in /. given a program and all its models  one would like to identify a unique single model as the representative one. in logic programming this is done by considering the minimal model  llo1   which is obtained by intersecting all the models of the program. this works because models in logic programming are assimilable to sets of ground atoms  those with associated value true. here we follow the same approach  

clause i is of the form 
among interpretations 
　where for any for any ground 

　it is easy to see that the operation of model intersection is associative  idempotent  and commutative. thus its application can be extended to more then two models. given a set of models ms  we will write o ms  as the model obtained by intersecting all models in ms. 
　given a program p and the set of all its models  its minimal model is obtained by intersecting all models:  is a model for p} . the model-
theoretic semantics of a program p is its minimal model  

　consider the program p described at the end of last section. the minimal model  for such a program must assign a non-positive integer to each ground atom  and it is the following function: 
1 	fixpoint semantics 
we define now the operator which extends the one used in logic programming  llo1  by following the same approach as in the previous section. the resulting operator maps interpretations into interpretations  that is  
  has a least fixpoint  which coincides with 
  the least fixpoint of can be obtained by computing this means starting the application of from the bottom of the partial order of interpre-
tations  called and then repeatedly applying until a fixpoint. 
consider again the program at the end of section 1. 
we recall that in this specific case the semiring is s = 
 thus 
function tp is: 

　in this semiring the bottom interpretation i1 is the interpretation which maps each semiring element into itself and each ground atom into the bottom of the lattice associated to the semiring  that is   note that we slightly abused the notation since interpretations are functions whose domain contains only ground atoms  see section 1   while here we also included semiring elements. this simplifies the definition of jo; however  it is possible to obtain the same result with a more complex definition of which satisfies the definition of interpretation. given we obtain i  by applying function tp above. for example  = -1. instead  and 
the following table gives 
the value associated by the interpretations ii with each ground atom. some of the atoms are not listed because 
	bistarelli  montanari  & rossi 	1 

each interpretation ii gives them value all inter- 1 pretation ii with i   1 coincide with j1  thus . 1 is the fixpoint of tp. 
1 	constraint satisfaction 

here is that we must update the third element of the goal  that is  the semiring value associated to the goal: if before the transition this value is a and the transition uses a clause whose body has value a1  then the value associated to the new goal is a x a1. the reason for using the x operation of the semiring is that this is exactly the operation used when accumulating constraints in the scsp framework. 

　a derivation is a finite or infinite sequence of applications of the above rule. a refutation is a finite derivation whose final goal is of the form 
let us now consider the set 

which contains all pairs representing all refutations for the given program. notice that we can forget about the derivation 1 accumulated during the refutations  since we assumed to always start with a ground goal. thus only refers to variables introduced during the derivation. 
　now we are ready to define function  which  given a ground atom  returns a value of the semiring. more formally  function  where at is the set of ground atoms and a is the semiring set  is defined as follows: notice that  if the 
set of all ai such that 	is in s is empty  returns the unit element for +  that is  1. 
　for example  by considering the goal we get two refutations  one represented by the pair  thus 
theorem 1  model and operational semantics  given a sclp s d  program p  we have that osp. 
proof  sketch : the statement can be proved by induction on the length n of the refutations  and considering at step n the set  and 
such that there is no refutation of length greater than n for  c a }. the proof is similar to that used in  llo1  for logic programming  although we have to generalize because of the presence of semiring values. 
　for lack of space and sake of readability  in this paper we treated only the case of goals consisting of a ground atom. however  our results can be extended also to the general case of non-atomic and/or non-ground goals. 
1 	future work 
we are now studying how to efficiently implement our framework. techniques related to heuristically guided search can be useful to cut some paths in the search tree. however  when the partial order is not total  we may have to consider more than one path at a time  as noted in the previous section. other techniques that we axe investigating are based on dynamic programming  bmr1  or on other methods to efficiently compute the solutions in a bottom-up way. 
