
in this paper we introducea multi-contextvariant of reiter's default logic. the logic provides a syntactical counterpart of roelofsen and serafini's information chain approach  ijcai-1   yet has several advantages: it is closer to standard ways of representing nonmonotonic inference and a number of results from that area come  for free ; it is closer to implementation  in particular the restriction to logic programming gives us a computationally attractive framework; and it allows us to handle a problem with the information chain approach related to skeptical reasoning.
1 introduction
interest in formalizations of contextual information and intercontextual information flow has steadily increased over the last years. based on seminal papers by mccarthy  and giunchiglia  several approaches have been proposed  most notably the propositional logic of context developed by mccarthy  and mccarthy and buvac¡¦   and the multi-context systems devised by giunchiglia and serafini   which later have been associated with the local model semantics introduced by giunchiglia and ghidini . serafini and bouquet  have argued that multicontext systems constitute the most general among these formal frameworks.
¡¡intuitively  a multi-context system describes the information available in a number of contexts  i.e.  to a number of people/agents/databases  etc.  and specifies the information flow between those contexts. a simple illustration of the main intuitions underlying the multi-context system framework is provided by the situation depicted in figure 1  one of the standard examples in the area. two agents  mr.1 and mr.1  are looking at a box from different angles. the box is called magic  because neither mr.1 nor mr.1 can make out its depth. as some sections of the box are out of sight  both agents have partial information about the box. to express this information  mr.1 only uses proposition letters l  there is a ball on the left  and r  there is a ball on the right   while mr.1 also uses a third proposition letter c  there is a ball in the center . to model situations of this kind  formulas are labeled with the contexts in which they hold  and so-called bridge rules are used to represent information flow.
mr.1mr. 1
figure 1: a magic box.
¡¡most of the existing work in the field is based on classical  monotonicreasoning. the single exceptionwe are aware of is  roelofsen and serafini  1 . to allow for reasoning based on the absence of information from a context  the authors add default negation to a rule based multi-contextsystem and thus combine contextual and default reasoning.
¡¡this paper presents a related approach. we propose a contextual variant of reiter's default logic dl  reiter  1  called contextual default logic  condl  which shares a lot of motivation with the roelofsen/serafini paper  in particular the basic idea of keeping information local for conceptual and computational reasons  as opposed to merging default theories  baral et al.  1  . a major difference is that our description is syntactical rather than semantical. this has several advantages: from a computational perspective  it is more convenient to manipulate sets of formulas rather than sets of models; it allows us to link multi-context default reasoning more closely to earlier work in nonmonotonicreasoning; syntactic restrictions lead directly to contextual variants of logic programming under answer set and well-founded semantics and thus to a fully computational approach; and it paves the way to handle a serious weakness of the approach to skeptical reasoning developed in  roelofsen and serafini  1 .
¡¡the outline of the paper is as follows: we first briefly review the approach of roelofsen and serafini and discuss the weakness of skeptical  well-founded reasoning in this approach. we then introduce condl and show that extensions of condl are in exact correspondence with stable information chains in  roelofsen and serafini  1 . we next show how well-founded reasoning can be defined for condl  escaping the difficulty of the information chain approach by appeal to paraconsistent reasoning. we finally discuss contextual logic programming and give various examples to illustrate that our formalism is indeed useful.
1 the information chain approach
we now give a brief review of the approach in  roelofsen and serafini  1 . the authors consider a set of contexts c = {1 ... n} and a language li for each context i ¡Ê c. c and li are assumed to be fixed  each li is built over a finite set of proposition letters  using standard propositional connectives.
¡¡to state that the information expressed by a formula   ¡Ê li is established in context i  the labeled formula  i:   is used. a rule r is an expression of the form:
	f ¡û g1 ¡Ä ... ¡Ä gm ¡Ä not h1 ¡Ä ... ¡Ä not hn	 1 
where f  all g's  and all h's are labeled formulas. f is called the consequence of r and denoted by cons r ; all g's are called positive premises of r and together constitute the set prem+ r ; all h's are called negative premises of r and together make up the set prem  r . a rule without premises is called a fact. if a rule has positive premises only  it is called a positive rule. a normal multi-context system is a finite set of rules. note that not is interpreted as default negation  the rules are thus nonmonotonic.
example 1  integration  let d1 d1 be two meteorological databases collecting data from sensors located in different parts of the country. each database sends its data to a third database d1  which integrates the information obtained. suppose that d1 regards d1 as more trustworthy than d1: any piece of information that is established in d1 is included in d1  but information obtained in d1 is only included in d1 if it is not refuted by d1. the following rules model this:
	1 :  	¡û	1 :  
	1 :  	¡û	1 :   ¡Ä not 1 :   
a classical interpretation m of language li is called a local model of context i. a set of local models is called a local information state. intuitively  every local model in a local information state represents a possible state of affairs. if a local information state contains exactly one local model  then it represents complete information. if it contains more than one local model  then it represents partial information: more than one state of affairs is considered possible.
¡¡a distributed information state is a collection of local information states  one for each context. distributed information states are referred to as chains. for systems without not  the semantics is defined in terms of minimal solution chains: starting with the set of all models for all contexts  rule application is captured semantically by eliminating those models from a context in which the consequent of an applicable rule is not true. iterating this model elimination process until a fixpoint is reached yields the unique minimal solution chain.
¡¡for the general case  roelofsen and serafini use a technique similar to the gelfond/lifschitz reduction for stable models or answer sets  gelfond and lifschitz  1; 1 : a rule r is defeated by an information chain c =  c1 ... cn  whenever it has a negative premise not  i : p  such that p is true in all models in ci. by eliminating all c-defeated rules and all negative premises from the c-undefeated rules  we obtain a reduced multi-context system without negative premises. now c is a stable solution chain iff c is the minimal solution chain of the c-reduced system.
¡¡based on the observation that stable solution chains may not exist  roelofsen and serafini also define a skeptical semantics which draws its intuitions from well-founded semantics for logic programs  van gelder et al.  1 . it is based on the construction of the so-called canonical chain cs. we present this semantics in somewhat more detail because it has a serious problem which we will later solve.
¡¡the canonical chain for a multi-context system s is constructed iteratively by applying an operator ¦·s to a pair of chains. intuitively  the first chain c approximates cs from above: at every stage of the iteration it contains the models that are possibly in cs  initially  every model may possibly be in cs  so in each context we start with the set of all models . the second chain a  which is referred to as the anti-chain  approximates cs from below: at every stage it contains the models that are necessarily in cs  initially  no model is necessarily in cs  so in each context we start with the empty set of models .
¡¡given a certain chain-anti-chain pair   the intended transformation¦·s first determineswhich rules in s will  not  be applicable w.r.t. cs  and then refines accordingly.
the canonical chain cs of s will be the first component of the
¡Ü-least fixpoint of ¦·s  where  iff for every
  intuitively  iff  is  less evolved 
than
¡¡we first specify how ¦·s determines which rules will  not  be applicable w.r.t. cs. let and a rule r in s be given. if r has a positive premise g  which is satisfied by c  then g will also be satisfied by cs. on the other hand  if r has a negative premise h  which is not satisfied by a  then h will not be satisfied by cs either. so if all positive premises of r are satisfied by c and all negative premises of r are not satisfied by a  then r will be applicable with respect to cs:
   g ¡Ê prem+  r  : c |= g   
	s+ c a 	=	r ¡Ê sand
  h ¡Ê prem  r  : a  h  
if r has a positive premise g  which is not satisfied by a  then g will not be satisfied by cs either. if r has a negative premise h  which is satisfied by c  then h will be satisfied by cs as well. in both cases r will certainly not be applicable with respect to cs:
   g ¡Ê prem + r  : a  g   
	s  c a 	=	r ¡Ê sor
	 	¡« h ¡Ê prem   r  : c |= h  
for convenience  we write s  c a  = s s  c a . think of s¡« c a  as the set of rules that are possibly applicable with respect to cs  and notice that s+ c a    s¡« c a .
¡¡next  we specify how ¦·s refines  based on s+ c a  and s¡« c a . every local model m ¡Ê ci that does not satisfy the consequence of a rule in s+ c a  should certainly not be in cs and is therefore removed from c. on the other hand  every local model m ¡Ê ci that satisfies the consequences of every rule in s¡« c a  should certainly be in cs  s provides no ground for removing it  and is therefore added to a.

where:

¡¡unfortunately  this approach has a serious problem. consider the following example:
1:p¡ûnot 1: p1: p¡ûnot 1:p1:t¡ûnot 1:q¡¡one would expect  1:t  to be derivable. however  the canonical chain approach does not give any conclusion. the problem is that no model can satisfy both p and  p  so no model will ever be added to the anti-chain a and thus it is never established that  1:q  cannot be derived. the essential problem is this: the canonical model approach assumes that the set of possible conclusions is deductively closed. this is exactly the problem addressed in  brewka and gottlob  1  in the context of default logic. we will later show how the solution presented there can be applied to the problem of wellfounded multi-context reasoning as well.
1 contextual default logic
as before let c = {1 ... n} be the set of contexts/agents with associated propositional languagesli. a default context system for c is a tuple
                    ¦¤1 ... ¦¤n  where each ¦¤i =  di wi  is a contextual default theory. a contextual default theory is like a regular reiter default theory  with the exception that default rules may refer in their prerequisites and justifications  not in their consequent!  to other contexts.
more precisely  a contextual default rule is of the form d = p1 ... pm : q1 ... qk/r
where p1 ... pm q1 ... qk are regular formulas or labeled formulas  and the consequent r  also denoted cons d   is a regular formula. a contextual default theory  di wi  then is just a pair consisting of a set of regular formulas wi  the certain knowledge  and a set of contextual default rules di. wi and the unlabeled formulas in defaults have to be expressed in li. each context thus has its own language for expressing its particular view of the world.
¡¡note that if a default rule contains a regular formula  this formula is implicitly assumed to refer to the context of the default. we may thus assume without loss of generality that all prerequisites and justifications are labeled formulas. the reason we allow more than one prerequisite for a default - which is not necessary for reiter's logic - is that we want to be able to refer to more than one context without using context labels inside logical formulas.
¡¡now we can generalize the notion of an extension to default context systems. given two tuples  s1 ... sn  and  we define component-wise inclusion  c as  for all i  1 ¡Ü
i ¡Ü n . when we speak of minimality of tuples in the rest of the paper we mean minimality with respect to  c.
definition 1 let c =   d1 w1  ...  dn wn   be a default context system. let  s1 ... sn  be a tuple of sets of formulas. define the operator ¦£ such that

where  is the minimal tuple of sets of formulas satisfying for all i 1 ¡Ü i ¡Ü n :
1.  
1. is deductively closed  over li   and
1. if  c1 :p1  ...  ct :pt  :  ct+1 :q1  ...  ct+k :qk /r ¡Ê for all for all j  1 ¡Ü j ¡Ü k   then.
the tuple  s1 ... sn  is a contextual extension of c if it is a fixpoint of ¦£.
in the special case where default rules do not refer to other contexts  we obtain a tuple consisting of arbitrary extensions of the individualdefault theories. in the general case information flows  via the default rules  from one context to another. defaults thus play the role of bridge rules.
¡¡it turns out that each extension corresponds exactly to a stable solution chain in the information chain approach. the translation between our default context systems and the systems used there  which we call rs-systems after their inventors from now on  is straightforward: each default
¡¡¡¡ c1 :p1  ...  ct :pt  :  ct+1 :q1  ...  ct+k :qk /r in di is translated to the rule
 i:r  ¡û  c1 :p1  ...  ct :pt   not  ct+1 : q1  ... not  ct+k : qk 
and each formula p ¡Ê wi to the rule  i:p  ¡û. we have the following proposition:
proposition 1 let c be a default context system  r the corresponding rs-system. let s =  s1 ... sn  be a sequence of deductively closed sets of formulas and m =  m1 ... mn  a sequence of sets of models such that for all i  1 ¡Ü i ¡Ü n 
mi = {m | m |= si}.
s is a contextual extension of c iff m is a stable solution chain of r.
we can thus view our approach based on contextual default logic as a syntactical characterization of the semantical approach in  roelofsen and serafini  1 . the advantage of our characterization is threefold: it is closer to standard approaches in nonmonotonic reasoning and allows us to transfer results which have been established for default logic quite easily to the multi-context case; it is more amenable to computation; it allows us to handle the difficulty of the semantical approach with respect to skeptical reasoning  as we will see in the next section.
¡¡as an example of the results we basically get  for free  we just mention the following:
proposition 1  minimality 
let e1 and e1 be extensions of a default context system c. if e1  c e1 then e1 = e1.
a normal default context system is one where each default in each context is of the form:
 c1 :p1  ...  ct :pt  : r/r.
proposition 1  existence 
each normal default context system possesses at least one extension.
proposition 1  consistency 
let c =   d1 w1  ...  dn wn   be a default context system  e =  e1 ... en  an extension of c. if all wi are consistent and each default possesses at least one justification  then each ej is consistent.
a lot more results for which we do not have space here carry over. for instance  we can give a quasi-inductive definition of extensions as in  reiter  1 . we can define the notion of a stratified default context system for which a unique extension exists. also complexity results carry over which establish that the main reasoning tasks for contextual default logic are on the second level of the polynomial hierarchy.
1 skeptical contextual default reasoning
the essential problem of the canonical model approach is as follows: it assumes that the set of potential conclusions is deductively closed. thus  whenever two conflicting formulas p and  p are considered as potential conclusions  then this is also the case for an arbitrary formula q  even if q is entirely unrelated.
¡¡this is exactly the problem addressed in  brewka and gottlob  1  in the context of default logic. the solution is to apply paraconsistent reasoning in determining potential conclusions: both p and  p are considered as possible conclusions  but not their deductive closure  i.e. not the set of all formulae. in the example discussed above  one should detect that  1:q  is not a possible conclusion because the only way to derive this labeled formula is based on an inconsistent set of potential conclusions. the semantics thus should derive  1:t .
¡¡in  brewka and gottlob  1  a sequence of different semantics was introduced which allows to trade-off the effort spent for consistency checking with the strength of skeptical inference. rather than presenting the different semantics here  we focus on a single one  called wfs1 in the cited paper  and directly describe its generalization to contextual default theories.
definition 1 let c =   d1 w1  ...  dn wn   be a default context system. let be a tuple of subsets of the defaults in c. let p be a formula. a c-default proof for p from d in context i is a finite sequence
¡¡¡¡¡¡¡¡¡¡¡¡p =   c1 :d1  ...  cm :dm   of context/default pairs such that the following conditions are satisfied:
1.   for all j  1 ¡Ü j ¡Ü m  
1. cm = i 
1. for eachl and each prerequisite  c:q  of dl  q is a logical consequence of
wc ¡È {cons dk  | k   l  c:dk  ¡Ê p} 
1. .
¡¡let s =  s1 ... sn  be a sequence of sets of formulas  d =  d1 ... dn  a sequence of sets of contextual defaults. define

where  is the set of defaults from di not defeated by s  d is defeated by s iff it has a justification  i:q  such that  q ¡Ê si . with the notion of a default proof  we can express the ¦£ operator introduced above as follows: ¦£ s1 ... sn  =  iff each is the set of formulas possessing a
default proof from ds.
¡¡we will now define a similar operator ¦£   but with an important restriction to consistent proofs. this will be sufficient to handle the problem described above.
definition 1 let p =   c1 :d1  ...  cm :dm   be a default proof  s =  s1 ... sn  a sequence of sets of formulas. we say p is s-consistent iff si ¡È {cons dj  |  i:dj  ¡Ê p} is consistent  for all i  1 ¡Ü i ¡Ü n .
now let  iff eachis the set of formulas possessing a consistent default proof from ds. note that both ¦£ and ¦£  are antimonotone operators. applying the two in sequence thus yields a monotone operation which has a least fixpoint. the least fixpoint can be reached by iterative applications of the two operators to the sequence consisting of empty sets only.
definition 1 let c =   d1 w1  ...  dn wn   be a default context system. s =  s1 ... sn  is the well-founded conclusion set of c iff s is the least fixpoint of the operator ¦£¦£ .
¡¡to see how this handles the problem consider the condl variant of the example discussed above. we have the contextual default theory   d1 w1   d1 w1   with w1 = w1 =
  and
d1 = {: p/p :  p/ p} d1 = {:  1: q /t}.
indeed  application of ¦£  to the sequence s =       yields
.
note that context 1 does not contain q. for this reason  applying gives us  th    th {t}  . this is also a fixpoint and we establish t in context 1  as intended.
¡¡based on a modification of a corresponding proof in  brewka and gottlob  1  we can show that well-founded semantics for contextual default theories is correct with respect to contextual extensions.
proposition 1  correctness 
let c =   d1 w1  ...  dn wn   be a default context system  e =  e1 ... en  an extension of c and s =
 s1 ... sn  the well-founded conclusion set of c. we have si   ei for all i 1 ¡Ü i ¡Ü n.
1 contextual asp
a syntax restriction leads to contextual answer set programming  contextual asp   respectively contextual logic programming under well-founded semantics. as before let c = {1 ... n} be a set of contexts/agents. a logic programming context system  lpcs  is a tuple  p1 ... pn  where each pi is a contextual logic program. a contextual logic program is a set of rules of the form a ¡û b1 ...bk not bk+1 ... not bm
where a is a literal  each bi is either a literal or a labeled literal of the form  c:l  where c is a context and l a literal.
¡¡for lpcss where not does not appear in the bodies of any rule  let's call them definite lpcss   we can define the notion of a minimal context model:
definition 1 let c =  p1 ... pn  be a definite lpcs. an n-tuple of sets of literals s =  s1 ... sn  is called the minimal context model of c iff s is the smallest n-tuple satisfying the following conditions:
1. a ¡Ê si whenever a ¡û  c1 :b1  ...  ck :bk  ¡Ê pi  b1 ¡Ê sc1  ...  bk ¡Ê sck 
1. si is the set liti of all literals in li whenever si contains a pair of complementary literals l  l.
the definition of stable model is now straightforward:
definition 1 let c =  p1 ... pn  be an  arbitrary  lpcs  and s =  s1 ... sn  a tuple of sets of literals. the s-reduct of c  denoted cs  is obtained from c by
1. deleting in each pi all rules with body literal not  c:l  such that l ¡Ê sc 
1. deleting from all remaining rules in all programs pi all default negated literals.
definition 1 let c =  p1 ... pn  be an  arbitrary  lpcs  and s =  s1 ... sn  a tuple of sets of literals. s is a stable context model of c iff it is the minimal context model of cs.
well-founded semantics for lpcss can be defined in the same spirit as for condl. however  consistency checking becomes much easier. for c =  p1 ... pn  and a tuple of sets of literals s =  s1 ... sn  let ¦Ã s  be the minimal context model of cs. define the minimal context set of a definite lpcs like the minimal context model  but without requirement 1  inconsistent sets of literals do not have to be closed . let operator ¦Ã  s  produce the minimal context set of cs. the operators¦Ã and ¦Ã  both are anti-monotone the combined operator ¦Ã¦Ã  is thus monotone and possesses a least fixpoint. we call this fixpoint the well-founded context model of c.
¡¡the use of this operator can be illustrated using our earlier example. we have the lpcs c =  p1 p1  with
	p1 :	p	¡û not  p
	 p	¡û not p
and
	p1 :	t	¡û not  1:q 
indeed  ¦Ã       =  {p  p} {t} . as in the case of contextual default logic  context 1 does not contain q. for this reason  applying gives us    {t} . this is already a fixpoint and we establish t in context 1  as intended.
¡¡contrary to well-founded semantics for contextual default logic  the computation time for well-founded semantics of lpcss is polynomial: the number of iterations is bounded by the total number of literals in all contexts  and so is the time needed for each iteration.
1 applications
in this section we illustrate the use of contextual logic programming with further examples. our setting was propositional so far. in asp it is common to use variables in rules as shorthand for the set of all ground instances of the rules. users represent their knowledge in terms of programs with variables  a grounder  like lparse  then generates the purely propositional ground instantiation of the rules which is then passed on to an answer set solver like dlv  leone et al.  1  or smodels  simons et al.  1 .
¡¡we will adopt and extend this use of variables for contextual logic programming. we assume three types of variables: term variables which are common in asp and will be denoted by x  y   possibly indexed; context variables denoted by c  possibly indexed; and proposition variables denoted by p  possibly indexed. term variables are to be instantiated by ground terms  context variables by contexts  more precisely  integers denoting contexts   and proposition variables by ground literals. for convenience  we will also allow literals to appear as terms  strictly speaking we would have to distinguish between a proposition p and a term tp representing this proposition; we assume the grounder is able to take care of this . as common in asp we will also use rules with empty head of the form ¡û body as abbreviation for f ¡û not f body where f is a symbol not appearing elsewhere in the program. the effect of the rule is that no answer set exists in which body holds. with these conventions  it is easy to model several interesting multi-context scenarios.
information fusion: assume agent i decides to believe an arbitrary literal p whenever some other agent believes p and none of the agents believes  p   p is the complement of p  that is  p if p is an atom  and r if p =  r . this can be modeled by including in pi the rules
¡¡¡¡p	¡û	 c :p  not rej p  rej p 	¡û	 c : p 
again we assume the grounder handles the complement     adequately. note that this representation implicitly guarantees that only information consistent with i's information is added since in case of conflict a proposition will be rejected.
¡¡one can also think of scenarios where agent i believes p whenever the majority of agents does so. let m = n+1 if n is odd  m = n + 1 otherwise. a corresponding rule is:
.
game theory: we show how we can compute nash equilibria for games in normal form using lpcss. in general  we need to represent the choices available to each player  the best action given a particular choice of the other players  and a rule that says only the best action should be chosen.
¡¡consider the famous prisoner's dilemma  a game involving 1 agents which can either cooperate  c  or defect  d . the gains obtained by the agents for each combination of choices are described in the following table:
cdc11d11the single nash equilibrium is obtained when both players defect. the game can be modeled as the 1-context system
 p1 p1  where p1 is
choose d ¡ûnot choose c choose c ¡ûnot choose d best d ¡û 1:choose c  best d ¡û 1:choose d  ¡ûchoose x  not best x and p1 is as p1 with context 1 replaced by 1. the single contextual answer set is
¡¡¡¡¡¡ {choose d  best d } {choose d  best d }  and corresponds to the nash equilibrium. in this fashion we can represent arbitrary games in normal form.
social choice: so far we have assumed the logic programs representing contexts are so-called extended programs with two types of negation. of course  we can also use other types of programs. a convenient language extension handled by the smodels system are cardinality constraints  simons et al.  1  of the form l{a1 ... ak}u. here l and u are integers representing lower and upper bounds on the numbers of atoms aj which are true in a model. cardinality constraints can appear in the head or body of a rule and are highly convenient for many applications.
¡¡without presenting the formal details  we want to mention that it is not difficult to base contextual answer set programming on such extended programs. here is an example illustrating a possible use in social choice theory. assume we have n 1 voters  each voter has a program describing candidates  and in particular which among the candidates she likes best. this information may be derived from preference criteria represented in the respective programs. we assume agent n is not a voter. her role is to determine the winner based on the other agents' votes and a particular rule for selecting the winner. for example  in a simple majority vote we can use the program pn  con stands for context  cand for candidate :
votes x n  ¡û n{ c :best x   : con c }n cand x  wins x  ¡û not  wins x 
 wins x 	¡û	votes x n  votes y m  m   n
the first rule says that candidate x has n votes if best x  holds in exactly n contexts. other voting rules  like the condorcet rule  can be represented in a similar way.
1 conclusions
in an attempt to combine the fields of multi-context systems and nonmonotonic reasoning we introduced a multi-context variant of reiter's default logic. contextual default logic has several advantages over the information chain approach: it is closer to standard ways of representing nonmonotonic inference  which allows us to transfer a number of results from that area; it is closer to implementation  in particular the restriction to logic programming gives us a computationally attractive framework for nonmonotonic multi-context reasoning; and it allows us to handle a problem with the information chain approach related to skeptical reasoning. the examples we discussed suggest a number of interesting applications.
