 
we study two apparently different  but formally similar  scheduling problems. the first problem involves contract algorithms  which can trade off run time for solution quality  as long as the amount of available run time is known in advance. the problem is to schedule contract algorithms to run on parallel processors  under the condition that an interruption can occur at any time  and upon interruption a solution to any one of a number of problems can be requested. schedules are compared in terms of acceleration ratio  which is a worst-case measure of efficiency. we provide a schedule and prove its optimality among a particular class of schedules. our second problem involves multiple robots searching for a goal on one of multiple rays. search strategics are compared in terms of time-competitive ratio  the ratio of the total search time to the time it would take for one robot to traverse directly to the goal. we demonstrate that search strategies and contract schedules are formally equivalent. in addition  for our class of schedules  we derive a formula relating the acceleration ratio of a schedule to the time-competitive ratio of the corresponding search strategy. 
1 	introduction 
in this paper  we demonstrate a connection between two problems that initially seem unrelated. the first involves computing solutions to multiple problems  under the condition that a solution to any one of the problems can be requested at any time. challenges of this type arise in the design of intelligent user interfaces  information prefetching systems  and medical diagnosis systems. the second problem involves multiple robots searching an unknown environment for a goal. problems of this nature arise in robotics and space exploration. in the following paragraphs we describe the problems  along with our contribution  in more detail. 
the first problem concerns anytime algorithms  horvitz  
1; dean and boddy  1; russell and zilberstein  1   which produce solutions of different qualities depending on available computation time. more specifically  we focus on contract algorithms  which are anytime algorithms that require the deadline as input prior to the start of execution. with contract algorithms  no assumptions can be made about results produced before the given deadline. this is in contrast to the familiar interruptible algorithms  which can be queried at any point during execution. although less flexible than interruptible algorithms  contract algorithms typically use simpler data structures  making them easier to implement and maintain. an example in al is game playing programs based on heuristic search. for these programs  the allowed deliberation time is usually known in advance  and is used to set internal parameters. another example is planning algorithms that perform state-space abstraction. with these algorithms  the run time can be controlled by setting the abstraction level at the start of execution. 
　our problem can be stated as follows. we are given n instances of an optimization problem  along with a contract algorithm for the problem  and we have an m-processor machine on which to run the algorithm. an interruption can occur at any time  and a solution can be requested for any one of the problem instances. given these constraints  we want a good general strategy for scheduling runs of the algorithm on the processors. 
in the case of one problem instance and one processor  
russell and zilberstein  suggested iteratively doubling the contract lengths. with this schedule  for any interruption time t  the last contract completed  if one exists  is always of length at least t/1. this factor of four is the acceleration ratio of the schedule  a worst-case measure of its efficiency. zilberstein et al.  showed that no schedule can achieve an acceleration ratio less than four. 
　the generalization to multiple problem instances has been considered  zilberstein et al.  1   as has the generalization to scheduling contracts on parallel processors  bernstein et al  1 . optimal acceleration ratios have been derived in both cases. the more general multi-processor  multi-instance case has not previously been studied. in this paper  we provide a schedule for this case  and we prove that this schedule is optimal among a restricted  though still interesting  class of schedules. the optimality proof is a nontrivial extension of the previous proofs  and contains as a lemma a generalization of the monotone convergence principle. 
scheduling 	1 　this work is most closely related to horvitz's continual computation framework  horvitz  1 . in his framework  as in ours  computation is performed with limited knowledge about the deadline or desired result. however  the assumptions underlying the two frameworks are different. in the continual computation framework  the limited knowledge comes in the form of probability distributions. in contrast  our use of acceleration ratio does not require probabilistic information. furthermore  contract algorithms and parallel processing are both not considered in continual computation. 
　our contract scheduling results can be directly applied to a robot search problem. in this problem  m robots search for a goal that is located on one of p intersecting rays. the aim is to minimize the time-competitive ratio  which is the worstcase ratio of the total time spent searching to the time for a single robot to traverse directly to the goal. the optimal ratio for the one-robot case was derived previously  baeza-yates etal  1 . 

figure 1: scheduling a contract algorithm on three processors to create a two-problem multi-interruptible algorithm. 
　
　we address the general multi-robot case  for which search strategies are formally equivalent to contract schedules. for our class of schedules  we derive a formula relating the acceleration ratio of a schedule to the time-competitive ratio of the corresponding search strategy. the optimal time-competitive ratio is derived as a corollary. 
　this work is the first to draw a precise connection between contract scheduling and multi-robot search  and the first to provide nontrivial results for the multi-robot case. kao al  studied the multi-robot problem  but used a different performance measure. they minimized the distancecompetitive ratio  which is the worst-case ratio of the total distance traveled during the search to the distance between the origin and the goal. 
1 scheduling a contract algorithm 
1 	problem description 
an anytime algorithm a  when applied to an optimization problem instance i for time t  produces a solution of some real-valued quality  the function qa is called a's 
performance profile. in general  one does not know an algorithm's performance profile. nevertheless the concept of a performance profile is useful in reasoning about anytime algorithms. we assume that the performance profile of an anytime algorithm on any problem instance is defined for all  and is a nondecreasing function oft. 
　the distinctions among different types of anytime algorithms arise from different assumptions about which parameters are known prior to execution. when both t and i are known in advance  the algorithm is called contract. when only i is known in advance  the algorithm is called interruptible. for the case where both are unknown  we will say that the algorithm is multi-interruptible  because it acts like multiple interruptible algorithms running in parallel. 
　suppose we have a contract algorithm a  which we can run on a machine with m processors. at some unknown deadline  a solution to one of n problem instances will be requested. this setup requires a multi-interruptible algorithm  which we can create by scheduling contracts in such a way that progress is continually made on each problem instance. upon interruption and query  the result returned is that of the longest completed contract dedicated to the desired problem instance. 
1 
note that although g depends on a   we omit the subscript. dependence on the schedule will be made implicit throughout the paper for ease of notation. for every schedule  the index ordering must correspond to the completion time ordering. furthermore  no two contracts may complete at the exact same time. the formal statement of these two conditions is that is equivalent to for all k  i. also  a schedule must have for this 
ensures that after time a solution is available for each problem instance. 
　to compare schedules  we use a worst-case metric called acceleration ratio. the acceleration ratio tells us how much faster our constructed algorithm would need to run in order to ensure the same quality as if the query time and problem were known  and a dedicated processor was assigned to producing a result. intuitively  it measures how well a schedule handles the uncertainty about the problem instance and interruption time. 
　before formally defining acceleration ratio  we must state some more technical details of the problem and present some more definitions. first  we take the view that when a contract completes at time t  its solution is available to be returned upon interruption at any time r  t. second  we assume that 
scheduling 
　in the next section  we provide a schedule that is optimal within a restricted  though still interesting  class of schedules. we state below in precise terms the properties that delineate the class of schedules under consideration. schedules having the three properties below will be called cyclic schedules. 
　the first property states that problem instances arc completed in a round-robin manner. this seems sensible  as the desired problem instance is unknown. however  we cannot yet prove that for every non-problem-round-robin schedule  there is an equally good problem-round-robin schedule. 
property 1  problem-round-robin  	mod 	for all 
k. 
　the next property states that the lengths of contracts for each problem instance must increase with time. given that performance profiles are nondecrcasing  it seems that it would never be beneficial to use a schedule that doesn't satisfy this property. however  as with the first property  we cannot yet prove this. one difficulty lies in having to satisfy the problem-round-robin property mentioned above. we would like to be able to  remove  useless contracts from a schedule  but we have not found a way to do this while guaranteeing that the resulting schedule will be problem-round-robin. 
property 1  length-increasing  for all  and 

　the final property states that processors return results in a round-robin manner. this property does not play a part in our lower bound derivation  but it is used in drawing a connection to the robot search problem. we introduce it at this point only for ease of exposition. 
property 1  processor-round-robin  mod m for all k. 
　we can prove a lemma that allows us to cast acceleration ratio in simpler terms when we are considering only cyclic schedules. in the proof  the following facts arc established: acceleration ratio can be stated without reference to performance profiles; the only interruption times that need to be considered are completion times; and upon interruption  the result returned is from the contract with index exactly n less than index of the current contract. 
to show that equality holds  assume the contrary and derive a contradiction with the fact that is defined as the smallest constant enforcing the inequality between 
and  
next we show that 
for each 	is left-continuous everywhere and piecewise constant  with the pieces delimited by time points so for all 	is left-continuous and piecewise linear and increasing. thus  the local maxima of 	occur at the points gk; no other times may play a role in the supremum. 
finally  

follows from the problem-round-robin and length-increasing properties  and the fact that no two contracts can finish at the exact same time.  
　to conclude this section  we define the minimal acceleration ratio for m processors and  / problems to be 

where the infimum is taken over the set of cyclic schedules. in the following sections  we provide tight bounds for this ratio. 
1 	an exponential schedule 
a simple approach to scheduling contract algorithms is to have the contract lengths increase exponentially. we consider the schedule 

it is easily verified that this is a cyclic schedule. the following theorem gives an expression for this schedule's acceleration ratio. 
　
scheduling 	1 

1 	scheduling 
　
before formally defining time-competitive ratio  we need 
　
combining this inequality with theorem 1  we get the desired result.  
1 multi-robot search on rays 
the results from the previous section can be directly applied to a formally similar problem involving multiple robots searching for a goal. the problem is described as follows. initially  m robots stand at the intersection of p rays  with m p . the robots  all moving in a continuous fashion and to introduce a new function and explain its use in the definition. let us define to be the index of the first search extent that goes past point t on ray a. this means that if the goal is located at point t on ray a  then it is found during search extent the total search time up through extent  is 
scheduling 	1         the factor of two results from search extents going out and back on rays.  however  since the search ends as soon as the goal is found  the last extent does not go to completion  and thus we must subtract out  this leads us to the following formal definition for time-competitive ratio. 
definition 1 the time-competitive ratio  

　we can now give a formula for the relationship between acceleration ratio and time-competitive ratio for cyclic schedules and search strategies. 
theorem 1 for all cyclic search strategies  schedules  x  
where x' is the same as x  but with  
proof: because of the length-increasing and problem-roundrobin properties  we know that the first search extent to pass a point on a ray comes p extents after the last extent on that same ray. formally  we have that for all a and all  
1 conclusion 
in this paper  we addressed two apparently different scheduling problems  one involving contract algorithms  and the other involving robots searching on rays. for the contract scheduling problem  we provided a schedule and proved its optimality among the class of cyclic schedules. we further showed how contract scheduling results can be applied to the robot search problem  thus unifying the two problems. 
1 	scheduling 　a natural direction for future research is to study less restricted classes of schedules and search strategies. one intriguing question is whether lower acceleration ratios can be achieved with schedules that are not problem-round-robin or length-increasing. it would also be interesting to know whether the contract scheduling and robot search problems have similarities beyond those that result from using cyclic schedules and search strategies. 

where  this equation is a linear nonhomogeneous difference equation  mickens  1 . the behavior of {qk} depends on the roots of the characteristic polynomial  
con-
convergence  it suffices to show that / has no roots on the unit circle. 
consider the polynomial 

clearly z = 1 is a root of g but not of/. to show that / has no roots on the unit circle  we will show that g has no roots on the unit circle other than z = 1. 
 mickens  1  ronald e. mickens. difference equations. van nostrand reinhold company  inc.  new york  ny  1. 
 russell and zilberstein  1  stuart j. russell and shlomo zilberstein. composing real-time systems. in proceedings of the twelth international joint conference on artificial intelligence  1. 
 zilberstein et al  1  shlomo zilberstein  francois charpillet  and philippe chassaing. real-time problemsolving with contract algorithms. in proceedings of the sixteenth international joint conference on artificial intelligence  1. 
　
we must show that for all 
