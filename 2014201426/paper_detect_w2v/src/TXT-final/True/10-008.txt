 
this paper describes a new f o r m a l i z a t i o n of a deductive question answering system on a r e l a t i o n a l data base using a theorem proving technique. a theorem proving procedure for a 
f i n i t e domain is investigated and a d i r e c t proof procedure based on s u b s t i t u t i o n s of equivalent formulas which employs the breadth f i r s t search is intorudced. the search strategy is then expanded to set operations of the r e l a t i o n a l algebra which are incorporated i n t o the proof procedure in order to increase the data base search e f f i c i e n c y . v i r t u a l r e l a t i o n s arc r e a l i z e d by means of i n t r o d u c i n g several axioms and u t i l i z i n g the deductive c a p a b i l i t y of the l o g i c a l system. furthermore  a c o n d i t i o n a l domain is  introduced as one of the v i r t u a l domains and is used to give a r e l a t i o n a l view to a pseudo r e l a t i o n a l data base which can represent exceptional cases using some 
1i nk 	i nformat i on. 
	a query 	transformation 	system 	called 	dbap 
 data base access planner  which embodies those features is implemented in qjjsp. 
	1 . 	i n t r o d u c t i o n 
       many research groups in the a r t i f i c i a l i n t e l l i g e n c e f i e l d have been concentrating t h e i r e f f o r t s on how to represent knowledge1 and how to perform l o g i c a l inference and/or common sense reasoning. the knowledge data bases are organized in very complicated ways in order to r e a l i z e those very high l e v e l f u n c t i o n s . these s t r u c t u r a l and operational complexities have been preventing us from expanding them to very large knowledge data bases. 
       on the other hand  there have been many p r o j e c t s to develop very large commercial data bases in the data base research area. this kind of data base is assumed to be used in a r e l a t i v e l y simple manner and consequently has simple structures:. e f f i c i e n t search algorithms for such simple s t r u c t u r e s have been developed extensively and some special purpose hardware systems with p a r a l l e l searching c a p a b i l i t y are being developed in many places. 
　　　our current research goal is to combine these two separate e f f o r t s to b u i l d up a very large data base w i t h the deductive c a p a b i l i t y   1       l l   . 
　　　codd  e. f.  introduced an a l g o r i t h m to convert any query w r i t t e n in a r e l a t i o n a l sublanguage to a sequence of r e l a t i o n a l algebraic  operations in order to show the r e l a t i o n a l completeness of the r e l a t i o n a l algebra. his a l g o r i t h m can be considered as a formal question answering  qa  procedure on a r e l a t i o n a l data base. on the other hand  green  c. and raphael  
b.  k  formalized a deductive qa system based on f i r s t order l o g i c . the essential point ov t h e i r formalism is t h a t knowledge is represented by a set of axioms and the answer of the question is extracted from the r e f u t a t i o n proof of that question. 
       in this  paper  these two formalisms are combined by i n t r o d u c i n g a proof procedure for a f i n i t e s e t   where l o g i c a l expressions are i n t e r p r e t e d as set operations on the set. a proof procedure for queries which r e q u i r e a l l answers s a t i s f y i n g t h e given s p e c i f i c o. t ion i s p r e s e n t e d. 
it is a d i r e c t proof procedure based on s u b s t i t u t i o n s of equivalent formulas. as an intermediate r e s u l t of the d i r e c t proof  the system generates an access plan to the data base  and then the plan is executed to get the a l l answers s a t i s f y i n g the s p e c i f i c a t i o n . the set operations of the r e l a t i o n a l algebra are considered as expanded notions of the breadth f i r s t search strategy and are incorporated i n t o the proof procedure to express the accees p l a n . 
       stonebraker  m.  introduced the notion of views  we c a l l them vi r t u a l r e l a t i o n s   in order to provide users w i t h the deductive c a p a b i l i t y   and realized them by means of query m o d i f i c a t i o n . in t h i s paper  v i r t u a l r e l a t i o n s are considered to provide a semantic model of the base r e l a t i o n s and are defined by a set of non-ground axioms. the query m o d i f i c a t i o n process can be considered as s u b s t i t u t i o n process of a formula by an equivalent formula  the r u l e of which is given by the associated axiom. an axiom called a c o n d i t i o n a l domain axiom i s p a r t i c u l a r l y i n t e r e s t i n g . i t i s used to give a r e l a t i o n a l view to a pseudo r e l a t i o n a l data base which can represent exceptional cases using some l i n k i n f o r m a t i o n . 
       in a d d i t i o n   some considerations on d e l e t i o n of redundancies w i l l be presented. optimization of the access plan w i l l also be eoneidered. the implemented query transformation system dbap w i l l be b r i e f l y explained. in the l a s t s e c t i o n   the conclusion and some f u t u r e research works to be done w i l l be described. 
	1. 	fo rmali z at i on 
　　　generally  a formal qa system consists of a set of axioms and a theorem prover to get answers for a given query. f i g . 1 shows the c o n f i g u r a t i o n of our system in terms of the formalism. 
       in a formal system  each datum in the data base has to be expressed by a ground clause  a clause which does not contain any v a r i a b l e s   . there are two t y p i c a l r e p r e s e n t a t i o n s : namely  the tuple-wise r e p r e s e n t a t i o n and the domain-wise 

	natural 	lanr:uarf -1: 	furukawa 
1 


	natural 	lanrua♀1: 	furukawa 
1 

 1 x  1i  vemp.name i  'smith' 
	a vemp.mgr i  x  . 	 1  
by substituting the second term in  1  by the righthand expression of the equivalence sign = in   l     we obtain the following expression: 
 a x  1i  aj  1y  
 vemp.name i 'smith'   a emp. dmme  i   y  a dept.name j y  a deft.mgr   1   x    . 
so for  we have obtained the expression in terms of the base relations except the underlined l i t e r a l . this l i t e r a l is transformed to the corresponding base relation l i t e r a l by the following axiom: 
	 vi  vx  vemp.name i x  	i emp.name i x  . 
this type of axiom is called a simple domain axiom  and a query which does not include any virtual relation literals is called a base query. 
       it is obvious that any query which is specified in terras of virtual relations is translated to an equivalent base query by logical inference. however  the trnasfromation by the resolution rule which is based on the modus ponens is insufficient if we want to get a l l answers 
which satisfy the given specification. we can prove it easily. denote a query by f  x  and the required answers by { x| f  x }. if we obtain a base query g yxj by applying the resolution r ul e s   then g     x   ~v f     x   . there fore  { x| g  xll ♀ { x| ff x l  where the equality holds only if g  x    f vxj. 
       so far  these transformations can be realized by the query modification technique . as far as the control structure is concerned  it is equivalent to the input resolution in the gl-resolution which is known to be valid only for a horn set . but there exist more complicated axioms which require the whole inference capability including the ancester resolution. we will introduce a few such axioms later on. 
       a virtual domain can be defined in terms of other predefined virtual domains. the axioms for such domains transform a literal to a conjunction of literals some of which are not the base r e1at ion 1i t er als. 
       in this paper  we consider only existentially quantified queries. it is easily shown that the resulting base queries after applying the transformations are also only exsistentially quantified. therefore  we further simplify the notation for queries by omitting a l l quantifiers. 
	1. 	deletion of redundancies 
       a base query which is obtained so far may have some redundancies. let us consider the base relations: emp name dname ; dept name mgr log   and the virtual relations: vemp name dname log ; vdept name mgr . note that the log domain is transitive. assume that the following query is given: 
vdept.mgr j  x  a vemp.l1g  i  1*1  
	a vemp.dname i y  a vdept.name j y  	 1  
t
 t inquires the manager of the department y to which the employee i located at 1*1 belongs. the expression  1  is transformed to the following base query: 
dept.mgr  1  x  
a emp.dname i z  
a dept.dname k z  a dept.loc k 1*1  a emp.dname i y  
a dept.name t1 y  .  m 
 1  
 1  
 1  
 1   1  let us concentrate our attention on the literals  s  and  1 . they are the same except the values. however  as a datum is uniquely designated by specifying the relation name  the domain name and the tuple i d   these two variables z and y must refer the same datum. this fact can be expressed by the following axiom: 
tuple id axiom 
　　　for any relation rel and i t s arbitrary domain d  the following statement holds: 
	 vi  vx  vy  rel.d i x  a 	rel.d i y  
	= rel.d i x  a x = y . 	 1  
by applying this axiom  to the above two l i t e r a l s   y is replaced by z and these two literals become exactly the same. further  the literal  1  is transformed to 
	dept.name j z . 	  1   ' 
       this simplification is not the same as the factoring operation in the resolution proof procedure  because a l l variables are quantified by a. therefore  the tuple id axiom is a meaningful axiom. note that the application of this axiom cannot be done by input resolution  because we need to resolve two literals simultaneously. 
       now  let us assume that the domain name in the dept relation is a key domain. then  it is easily shown that the literals  1  and  1 ' are the same. this fact is represented by the following axiom: 
key domain axiom 
       for any relation rel and its key domain k  the following statement holds: 
 vi  vj  vx  rel.k i x  a kel.k j x  
	= rel.k i x  a i = j   . 	  u   
by applying this axiom on  1  and  1 '  we obtain the following simplified base query: 
dept.mgr k  x  a emp.dname i z  
a dept.name k z  a dept.l1c k 1*1  . 	 l   1*. 	data base accesses and proof procedure 
　　　when a proof contains multiple data base accesses  it is recommended to plan the data base accesses very carefully in order to keep the proof process efficient. we w i l l set up the following de si gn obj ectives: 

natural 	lanfuiajre-1: 	furukawa 
1 

1. do not access to the  logically  same tuple in a relation more than once. 
1. get a l l tuples which satisfy the given conditions to a certain relation at a time. 
1. when more than one tuple are to be accessed  plan the access order to minimize the number of data base accesses. 
　　　as mentioned in section 1  each constituent of each tuple is expressed by a ground clause. but the expression is merely conceptual and we do not have such representations in the actual data bases. instead  relational databases are usually organized in such a way that the data base access by tuples is much more efficient than by domains. in order to achieve the tuple-wise access to the data base  all literals in a base query associated to the same tuple of the same relation have to be grouped together. we call such a set of literals an access subclause. since all literals in an access subclause have the same relation name and the same tuple id which is introduced only to associate those clauses in the same tuple  we can abbreviate the notation for access subclauses by factoring out the relation name and omitting the tuple id. for example  the access subclauses of 
 .1    ar e expr es sed as.: 
	al: 	deri1  mgr  x   name z   l1c m1 j  	 1  
	a1: 	emp {dname z }. 	 lh  
       the second objective is deeply related to the discussion on the inference rule mentioned in section  . the same argument holds in getting data; namely  any access subclause must be substituted by an equivalent set of tuples. but since the set consists of all tuples which satisfy the access subclause  it is obtained by the associative retrieval with the breadth firstsearch strategy. 
       the breadth first associative retrieval operation  we denote it by r  on an access subclause can be expressed by a compound operation of the selection and the projection of the relational algebra. denote the selection of a relation rel1 with a condition di = a by rell di = a  and the projection of a relation rel  to the domains dj  . .. dk as rel1 dj . . . dk . assume that 
	a = rel d l   l   x l     . . . j i xi   di+l c } 	 1  
where x     . . .   x i are variables and c is a constant. then  r a  is given by the following algebraic expression: 
	r a  - rel di+l = c  d1 . . . di.  . 	 l1  
for example  the application r on  1  results in: r al  ~ dept loc = 1mgr name .  1  
we denote the relation resulting from the application of r on a by a.. 
       now  let us consider the third design objective. any query can be described in planner language  simply by expressing each access subclause by a goal statement with a corresponding associative retrieval pattern. but as mentioned earlier  the depth first search strategy employed in it is very inefficient when we want to get all answers which satisfy the given condition. on the other hand  c1nn1ver  has a programming support to deal with the breadth f i r s t search strategy  but programmers are responsible for controlling the overall proof procedure. we will generate an efficient data base access program from the given set of access subclauses. this approach resembles the podb's approach developed by haral.dson  a.  s . 
　　let us consider the case in which there are more than one access subclauses. we say two access subclauses are associated if and only if they share at least one variable in common. assume that two associated access subclauses are given. the proof procedure first obtains two separate one-level search trees al and a1 by executing each associative retrieval. then  it generates another one-level tree which consists of all answers satisfying both access subclauses by equating the shared variables in these trees. this operation corresponds to the equi-join operation of the relational algebra   l |   . we denote the equi-join of al and a  with common variables x l   . . .   x i by al xl . . . xi |a1  or simply by a1.a1 when the common variables are not required to be specified explicitly. 
       the association relation is a binary relation and can be described by a graph having access subclauses as nodes and the shared variables on the corresponding arcs. we call this graph an association graph. when there are three access subclauses  the corresponding association graph is either straight-line as shown in fig. 1 or triangular as shown in fig. 1. in either cases  the result is obtained by executing two successive join operations in an arbitrary order. in order to specify the order of join operations and give proper output relations  we introduce a kind of tree called a program tree. it is constructed from the association graph by an algorithm p which 
will be given in the appendix. some examples shown in fig. 1 and 1 may be helpful to get the idea of program trees. the program trees in fig. 1 a  - 1 c  correspond to the association graph in fig. 1 and fig. 1 a  - 1 c  to fig. 1. let us consider about the execution of a program tree. a leaf node is executed at f i r s t   and a father node is executed only after all of its sons are executed  where an execution of a node a consists of r a   followed by the join operations with its all sons  no join operations are defined for leaf nodes . the multiple join operations for a single node can be done in an arbitrary order. moreover  they can theoretically be done simultaneously. the multiple joins for a branched tree tl in fig. 1 are expressed by 
bn. bn-l.  .. . b1. b1.a  ...  . 
on the other hand  the successive joins for a straight-lined program tree t1 in the same figure are expressed by bn.bn-1 b1.b1.a. 

natural 	lanpiiap:e-1 : 	furnkawa 
1 




note t h a t these expressions are evaluated from l e f t to r i g h t . the new r e l a t i o n obtained by executing a node consists of only the domains which are to be used in the succeeding operations. we w i l l put the v a r i a b l e s which represent the output r e l a t i o n on the arcs from the node to the f a t h e r node. some of them are shared by the f a t h e r node and the groundfather node  which in t u r n w i l l be used as the l i n k v a r i a b l e s on the corresponding join o p e r a t i o n . in f i g . 1 and 1  the underlined v a r i a b l e s are of t h i s k i n d . as a r e s u l t   the algebraic expression f o r a program t r e e   e . g . f i g . 1   a     i s given by: 
		 1  
　　　a base query may contain some comparison l i t e r a l s between two variables and/or between a variable and a constant  such as 1. they are put on the appropriate nodes or 


f i g . 1. three program trees of the association graph in f i g . 1. 
arcs in the a s s o c i a t i o n graph. 
       now  the t h i r d design o b j e c t i v e is restated as the problem of c o n s t r u c t i n g an optimal program t r e e . it is reasonable to measure the e f f i c i e n c y of a program t r e e by the t o t a l size of a l l output r e l a t i o n s generated during the proof process. the size of a r e l a t i o n is p r o p o r t i o n a l to both the domain number and the t u p l e number in i t . the o p t i m i z a t i o n of the program t r e e construction algorithm is done by embedding a few h e u r i s t i c s t r a t e g i e s which s e l e c t a s u i t a b l e node in the a s s o c i a t i o n graph. the algorithm p constructs a program t r e e in reverse order to i t s execution. therefore  we select less r e s t r i c t e d nodes e a r l i e r . the h e u r i s t i c s we adopt are the f o l l o w i n g : 
1. select a node with smaller degree e a r l i e r . 
1. select a node w i t h less constant l i t e r a l s e a r l i e r . 
1. select a node w i t h more   variables e a r l i e r . 
the h e u r i s t i c s 1 is applied p r i o r to 1 and 1 p r i o r to 1. we denote the algorithm p w i t h these h e u r i s t i c s as p*. 
	1.. 	conditional domain 
       it is not easy to deal w i t h exceptional cases in the r e l a t i o n a l data base. for example  assume t h a t the domain name in f i g . 1 is a key. since no employees are allowed to appear in more than one t u p l e   t h i s organization i s adequate only i f n o employees belong to more than one department. however  it may happen t h a t   say  mr. smith has come to belong to both 'r&d' and 'sales'. then  we cannot express t h i s f a c t in t h i s r e l a t i o n as 

natural 	langu a g e - 1 : 	furukawa 
1 

long as we keep the name domain as a key domain. the traditional way to manage this situation is to use a general schema to represent many-to-many correspondence. that i s   the domain dname is removed from the relation emp and a new relation ed  name dname  is created to store a l l correspondences between employee names and department names  as shown in fig. 1. this inconvenience is due to a strong constraint on a relational data base which requires that a l l data in a domain must be homogeneous. it is more natural to treat the exceptional cases as exceptions. we use a special symbol  say ' * '   to represent the exceptions. in the above example  an '*' is put on the mr. smith's dname field and only the two pairs   'smith' 'r&d'  and  'smith' 'sales'   are stored in the newly created ed relation  as shown in fig. 1- the domain dname is no more homogeneous  because the special symbol '*' does not belong to the domain of department names. this symbol can be considered to carry link information to the ed relation. 
　　　it is desirable to protect users from the struictural change of the data base by supplying the old relation emp name dname sal  as a virtual relation. to avoid the conflict of the relation names  we rename the base relation emp as  say  cemp. 
　　　the fact that the employee i's department is x is expressed as emp.dname i x   but the actual information is not always in the cemp relation. in some case  it is in the ed relation. 
therefore  we require a conditional treatment. we call this kind of domain in the virtual relations a conditional domain. a conditional domain is defined in terms of a conditional statement as query is given: 
　emp.name i  x  a emp.dname i 'sales' .  1  this query can be transformed to 

by using the conditional domain axiom  1   a simple domain axiom for the simple domain name and the tuple id axiom. 
	let us denote the conditional 	expression 	in 
 1  as b. the literals in each branch of b are then grouped separately in order to make access subclauses. then  if there are literals outside b which are to be contained in any access subclauses in b  they are distributed to every branch of b and put into the corresponding access subclauses. after that  the rest l i t e r a l s are also grouped to make the access subclauses. the result of applying these steps to  1  are given as follows: 
		 1  
	follows: 	by 	applying 	the 	algorithm 	p* 
the program tree of  1  
　　execution of the a conditional access 
conditional expression. 	assume that the following 	where ci and c1 	are 	sets 	of 	access 	subclauses 
vans 
f i g . 	1. a reorganized r e l a t i o n a l data base to express an exception. 
cemp name 	dept 	sal  	ed name 	dname  fig 1. the program tree of  1 .   a: cemp   name  'smith1   dname  z    	smith 	* 	1 	smith 	r&d 
	brown 	sales 	1 	smith 	sales 
fig. 1. a more natural way to express the 
exception. 	fig 
natural language-1: furukawa 
1 generally  the result consists of one or more access subclauses and one or more conditional expressions. we regard this kind of conditional expression as an access subclause and call it a  conditional access subclause. a program tree is and/or conditional l i t e r a l s . this expression is equivalent to the following or expression: 

assume that the output relation a of c's father a contains a l l variables which appear in p. then  the conditional join between c and a can be defined by: 

the algebraic expression for the program tree in fig. 1 is given by: 

note that the l i t e r a l p and hp are passed to the father node a and tneir evaluations are delayed u n t i l the node a is evaluated. 
　　　as a matter of fact  the l i t e r a l p  and ~p  can often be evaluated at the evaluation time of c. consider the following query: 
	 1  
the corresponding program tree shown in the fig. 1 has such a property. tn this case  we need not postpone the evaluation of p. 
furthermore  	it 	is evaluated in conjunction with 
a. namely  the relation .a can be divided into two s u b r e l a t i o n s a n d such that a tuple satisfies p if and only if it belongs to . the conditional join between a and c is expressed by 
  
in this case  the l i t e r a l p works as a conditional branching statement for the node c if a  consists of only one tuple. therefore we express the conditional access l i t e r a l 1 by the following cond statement: 

we can choose the ob expression or the cond expression properly in the construction time by investigating the variables on the arcs between the conditional access l i t e r a l node and i t s sons. 
　　　another approach to deal with the conditional case might be to transform a query to a disjunctive normal form and to solve each conjunction separately. but it is d i f f i c u l t to remove the redundancies caused by the separation. this is the reason why we keep the conditional statement in a unit form. 
	1. 	the implementation of dbap 
	the 	upper 	half of the total system shown in 
fig. 1 was implemented on an 	ai 	language 	called 
qlisp . the dbap is not a formal theorem prover like the resolution theorem prover. the various kinds of heuristi c strategies described through section 1 - 1 were realized by informal procedural methods. 
　　　virtual domain axioms are actually qlambda functions which are invoked by the patterns of virtual l i t e r a l s in a query  and perform the corresponding transformations. the axiom definer was implemented in order to define virtual domain axioms through their logical expressions. 
　　　the tuple id axioms are treated in a very different way. there are no explicit functions for the tuple id axioms. the deletion of redundancies is done by a search and substitution procedure embedded in the dbap. 
　　　the key domain axioms are defined in a simpler form than   l l   ; for example  

this axiom replaces the tuple id i by the value x and causes the same effect as applying the original key axiom   l l   . this treatment of key domain axioms solves the interaction problem between tuple id axioms and key domain axioms  and 
therefore increase the efficiency. 
	1- 	conclusion 
　　　this research is considered to be a step toward a natural language qa system. in order to access the data base through the user's intention  the semantics or the real world model of the data base must be represented explicitly and be used to remove the gap between the semantic expression of a query and the logical data base structure. 
　　　on the other hand  the virtual domain axioms can be considered to be a representation of the data base semantics  because the virtual relations which are defined by a user can be regarded as his conceptual model of the real world   l l   . 
　　　we limited our consideration on queries modified only by the existential quantifiers. universally quantified queries are related to the division operation of the relational algebra as shown by codd  e. f. . it is expected that we can deduce the division operation if we pose the range separability condition  on the queries. 
　　　another d i f f i c u l t problem occurs if some of the virtual domains are associated more than one conjunction of base relation l i t e r a l s . in this case  the whole virtual domain axioms are expressed in an and-or graph. therefore  a general algorithm which performs the breadth f i r s t search on an and-or graph w i l l be required. 
acknowledgement 
　　　this research was mainly done during my stay at sri. i would like to thank dr. bertram raphael and other many people who helped me to study there. i would like to especially thank dr. daniel sagalowicz and dr. earl sacerdoti for their stimulations and important suggestions concerning the ideas in this paper. 

natural language-1 :  urukawa 
1 

