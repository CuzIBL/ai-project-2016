 
ebl can learn justified generalizations from only one example when the domain theory is perfect. however  it does not work when the domain theory is imperfect. imperfectness of the domain theory can be classified into four levels  i.e. incomplete  intractable  inconsistent and non-operational ones. it is necessary to unify ebl and sbl to solve these problems. in this paper  we propose a framework of an augmented ebl to handle plural examples simultaneously. we formalize it on logic program  and introduce a concept of least ebg to extract similarities from plural examples. we discuss on an approach to solve utility problem with the augmented ebl. utility problem is a problem to learn more efficient description under complete  tractable  consistent but nonoperational domain theories. we define operationality criteria with maximizing usage degree and minimizing backtracking number  and show they increase partial monotonically by generalization. since this partial monotinicity is not preferable to search operational generalizations  least ebgs are more operational than usual ebgs. we design a simple incremental learner based on least ebgs  and show its usefulness in recursive domain theories. we also discuss on other imperfect theory problems. 
1 introduction 
　ebl  explanation-based learning  is a framework of deductive learning  mitchell et a/.  1 . given an example of the goal concept  it builds an explanation  and learns a concept description as its generalization. it can learn justified generalizations from only one example when the domain theory is perfect  but it does not work when the domain theory is imperfect. several types of imperfectness have been pointed out  and they are called imperfect theory problems. 
　sbl  similarity-based learning  is a framework of inductive learning  mitchell  1 . given positive and negative examples  it extracts similarities  and learns a concept description as their generalization. it can learn something without any domain theories  but it requires numerous examples  and learned descriptions are no more justified. 
　ebl and sbl have complemental features  and can be placed at both extremes in continuum of imperfectness. in real applications  we cannot expect perfect theories nor fully imperfect ones. therefore  it is necessary to unify ebl and sbl to resolve their difficulties. 
　this paper attempts to solve imperfect theory problems of ebl by augmenting it to handle plural examples simultaneously  yamamura et a/.  1a   yamamura  1a . we augment ebl rather than sbl because sbl has no explicit domain theories and we want to avoid implicit ones such as inductive bias. 
　mitchell et. al. have pointed out three types of imperfectness i.e. incomplete  intractable and inconsistent theories  mitchell et a/.  1 . we add non-operational one into them and look them as levels of imperfectness. this seems useful as an index of a class of learning. upper part of figure 1 shows dependencies of these levels. sbl is placed at the most imperfect extreme. tractability requires completeness since an incomplete theory is useless if it ignores  difficulties  of that domain. consistency requires tractability since explanations of consistency may not be build if it is intractable. utility problem of conventional ebls is placed below them. 
　there are many works on unifying ebl and sbl. their domain theory can be placed in some level of imperfectness. for example  ioe  induction on explanation  of  flann et a/.  1  specializes a domain theory which is complete  tractable but inconsistent. chunking macros for such as 1 puzzle from primitive operators which is complete but intractable  laird et a/.  1 .  bergadano et a/.  1  use sbl when an explanation can not be constructed from domain theory which is incomplete. 
　lower part of figure 1 summarizes our works on the augmented ebl. in this paper  we forcus on utility problem  then also discuss on other problems. 
1 augmentated ebl 
1 	generalisation of explanation structures 
　in this paper  we assume logic program as a description language. a domain theory d is a finite set of defi-
	yamamura and kobayashi 	1 

domain theory    problem dependencies complete incomplete   tractable intractable consistent inconsistent operational nonoperational 　unified approaches - description 
operationalization with least ebg of 
plural examples. consistency 
maintainance with 
ebg 
version space. knowledge 
 compilation with examples and meta theory. knowledge 
 transfer with analogical 
reasoning.  perfect   conventional ebl   imperfect theory problems  figure 1: imperfect thoery problems and augmented e b l approaches. 
nite clauses. an example e   is a finite set of ground unit clauses. a goal concept is a predicate  and is given as a ground negative clause for each examples. a goal 
concept is explained or proved iff  

　in the goal regression method  mitchell et al  1   a conclusion of an ebg  explanation-based generalization  comes from the goal concept  and preconditions come from the facts. constants are generalized into variables  and resolutions are undone. the following definition generalizes these operations. 
definition 1  generalization of an explanation  
1. for a horn clause .   let its equivalent copy be then  following expression is an explanation structure. 

c and c are called its internal and external structure respectively. 
1. for an explanation structure t  let be its external structure and a be a substitution. then  the expression 1v  which has the same internal structure as t and has the external structure is called an instantiation of t. inversely  t is called an uninstantiation of  1.for two explanation structures 1 and t  let  
be their external structures respectively. then  the expression u connected 1 and t at bi' is called a  binary  resolvent of 1 and t. inversely  s is called an unresolution of u  and t is called its remainder. 
1. an explanation structure s is more general than t  denoted by s   t  iff there exists a sequence of uninstantiations and unresolutions from t to s. 
　for example  consider a domain theory d shown in figure 1. in sld resolution  a negative clause and a definite clause are first unified then binarily resolved upon some literal. figure 1 shows this inference scheme  where thick arrows denote rules and double lines denote  :  of definition 1. dotted boxes denote internal structures of explanation structures. internal structures holds the history of clause applications  and external structures holds the actual instantiation. 
in conventional ebl on logic programming  hirsh  
1 lkedar-cabelli et al.  1 lprieditis et al  1   a generalization is defined as an inverse of one inference  i.e a pair of an unresolution and an uninstantiation. we consider them separately in order to handle generalization of compound terms  or structured objects  because instantiations of heads of clauses affects inference efficiency under a pure-prolog interpretor. figure 1 shows a full explanation structure for e . 

figure 1: ebgs from e1. 
　an ebg learned with an ebl system must be a theorem of that domain theory. for this constraint  we introduce a concept of an obliged generalization. 
definition 1  ebg  
1. an explanation t is an obliged generalization  iff the internal structure of t does not include any facts of a certain example and its external structure is a definite clause. 
1. obliged generalizations of an explanation for some example are called ebg. for an ebg  its external structure is called an ebg macro. 
　figure 1 shows some of ebg macros of the explanation of figure 1. m1 to m1 are all unresolved at line 1 to be definite clauses  mi is less general than the obliged generalization i.e it includes facts of e1  then it is not valid in other examples  m1 is the obliged generalization  additionally unresolved at line 1 . m1 is the most uninstantiation of m1. m1 is more unresolved than m1  line 1 . m1 is the most uninstantiation of m1. m1 is generalized until the domain theory  line 1 . remark there are a number of generalizations from only one explanation. 
1 	generalization space 
　since various generalizations are obtained from one explanation  various sets of various generalizations are obtained from plural examples. we call such a class of all sets of generalizations a generalization space. 
definition 1  generalization space  
1. for an explanation t t  let t1 be an uninstantiation of t. then is an uninstantiation of t. similarly  let t1 be an unresolution and t 1   - -   t n are its remainders. then t' =  is an unresolution of t. 
1. an explanation set s is more general than t  denoted by s   t  iff there exists a sequence of uninstantiations and unresolutions from t to 1. 
1. a class of all generalization of the obliged generalization of an example set is called its generalization space. 
　for example  e1 of figure 1 is the same as e1 except the hero and the instrument. figure 1 shows a part of the generalization space generated from {e1  e1}. predicates and constants are simplified in their initial. 1 is the obliged generalization that is only unresolved at the goal and facts of examples. 1 and 1 uninstantiate  john  and  tom  respectively. 1 uninstantiates both. 1 unresolves the weapon  and the same structure is extracted in there   weapon knife   and  weapon gun '' in 1 are the remainder of that unresolution. 1 is the most general  i.e the domain theory. 
　thus  a generalization space contains all candidates that are learnable from given examples. learning problem in the augmented ebl is to search a good generalization with some criteria in a generalization space. 
1 	least ebg 
a common generalization such as 1 of figure 1 can be thought of as  simirality  in sbl. we call the most special common generalization the least ebg. it is known that least ebg is unique and computable incrementally regardless of example orderings. 
definition 1  least ebg  
for ebgs t1        tn t is a common ebg iff 
 the least generalization in common ebgs is called the least ebg. 

theorem 1  features of the least ebg  1. there is the least ebg for any set of ebgs. 
1. let t be the least ebg of t1        tk and v be the 
least ebg of 	then  the least ebg of t 
and t is the least ebg of  
　proofs are given in  yamamura  1a . to prove the uniqueness  we used a lemma that the most general unifier and the least uninstantiation commutes each other. if there are another minimal common generalization  they are equivalent by this lemma. computability is a corollary of uniqueness. thus  the uniqueness of the least ebg closely relates with the uniqueness of the most general unifier. m1 of figure 1 is a least ebg. 
　from a viewpoint of extracting similarities  a generalization subspace that consists of least ebgs is interesting. we call such a subspace a least ebg space. 
definition 1  least e b g space  
let t1 be the least ebg of s and 
	be its remainder. 	then 
} is called a least ebg generalization of t. 
1. s is more general by least ebg than t iff there exists a sequence of least ebg generalizations from t to 1. 
1. a class of all least ebg generalizations of the obliged generalization of an example set is called its least ebg space. 
　1 and 1 of figure 1 are a least ebg generalization. in general  there are combinatorially many least ebg generalizations for more than three examples  and its size can much more increase if remainders are generalizable. however  the searching space is reduced from the raw generalization space. 
1 an approach to the utility problem 
1 	operationally criteria 
utility problem is a problem to learn more efficient program under complete  tractable  consistent but nonoperational domain theories. a learner needs to improve performance without violating initial perfectness of the domain theory. we assume a pure-prolog interpretor and learned ebgs are merely inserted before the domain theory. 
　efficiency of ebgs are maesured with operationally criteria. there are several alternative levels to define operationally  keller  1 . in many existing ebl  the most detailed level of cpu time is used. here  we define them in more abstract level with maximizing usage degrees and minimizing backtrack numbers. they reflect on natural requirements to be an efficient program for pure-prolog. 
definition 1  operationally criteria  1. for a generalization  its usage degree is a function s.t. 
where 	i
degrees through some generalization path. 
1. for an example set and its generalization t  the backtrack number is the minimum of the sum of goal failures which occur during a macrotable of t reconstructs all explanations of   
1. for two generalizations s and t of an example set 
s is more operational than t iff 

　usage degree measures an applicablity or a storage cost. it increases when one macro becomes commonly used in more than two examples. backtrack number measures an efficiency or a searching cost. it counts backtrackings when a problem solver re-construct explanations for examples. these two measures show operationality/generality trade-off of  segre  1 . 
　in figure 1  u denotes a usage degree and b denotes a backtracking number. the least ebg  1  is the most operational macrotable because its usage degree is the maximum and its backtracking number is the minimum. 
　two measures of operationally criteria increases according to generalization as shown in figure 1 but it is not monotonic. following fact holds in general. 
theorem 1  partial monotonicity  

　proof was given in  yamamura  1a . the total monotonicity of usage degree is clear. to show the partial monotonicity of backtracking number  we can construct a macrotable of t that has less or equal backtracking number by arranging a macrotable of s. 
　the reason why backtrack number incleases partial monotonically is for ambiguous macros that have the same head but different bodies as shown in figure 1. such ambiguous macros increase according to generalization. however  when they are generalized until the same structure  i.e. when the usage degree increases  this ambiguity is often reduced. 
　the partial monotonicity is not preferable feature to search operational ebgs efficiently. however  since they increase monotonically in subspaces of the same usage degree  their minimal generalizations seems to be useful. the least ebg is such a generalization. figure 1 shows tipical generalization space. 
theorem 1  operationally of the least ebg  
　a least ebg generalization is minimal in the subspace which consists of generalizatins of the same usage degree. 
　proof is given in  yamamura  1a . to prove this  we have shown any generalization between the obliged generalization and a least ebg generalization have less usage degree. this theorem shows the utility of the least ebg. 
1 	least e b g learner 
we have constructed a simple incremental learner to demonstrate the utility of least ebg. figure 1 shows its top-level actions.  -  and  +  denotes input and output variables of predicates respectively. examples are given incrementally through example/1. explanations are generated with solve/1 by learner itself. in that time  cur-


figure 1: a typical generalization space. 

figure 1: the top-level of the learner. 
rent macrotable curmt is inserted before the domain theory and used. 
　lebg-space/1 generates whole lebg space gensp from  operational/1 select the most operational ebg from gensp. we assume that backtracking number has higher priority than usage degree. learner proceeds to next example with selected nxtmt by tail recursion. 
least ebg learner simply generates the whole least 
ebg space. its size exponentially increases with the number of explanations of the current least ebg set. remark that it is not the number of examples. examples are summarized into least ebgs and learner can keep its efficiency. this is a practice of the theorem 1. 
　least ebg learner is implemented on sicstus prolog on sun1. in next section  we demonstrate least ebg learner in two extreme cases. 
1 	learning in a recursive theory 
1.1 	deterministic recursion 
　consider the well known linear recursive predicate member/1 shown in figure 1. the learner is given n examples whose target element is at first  at second   *   at n-th place. in much of existing ebls  its performance often becomes wrong because it generates the same number of macros as examples like lebg1  prieditis et a/.  1 . on the other hand  least ebg learner learns original domain theory because it has no backtracking and maximum usage degree like lebg*. the usage degree of lebg1 becomes n n - l /1 - 1 for n examples. offcourse lebg  also has no backtracking  but usage degree  which reflects someway matching efficiency  remains minimum. 
　it is important for a learner to learn nothing when there are nothing to learn. in fact  following theorem 


figure 1: least ebgs of a deterministic recursive theory. 
holds. 
theorem 1  learning a deterministic recursion  
　if a domain theory solves any examples without backtracking  least ebg learner learns least ebg of no backtracking and of the maximum usage degree  regardless of example orderings. 
proof we show this by induction. it is clear for one example. for k example  assume the learner has lebgk of no backtracking and of the maximum usage degree. for  k + l -th example  we show contradiction if there does not exists lebgk+1 of no backtracking from the union of lebgk and that example. the clauses that causes backtracking must have the same rules in their root of their explanation structures  because original domain theory have some backtrackings if they have different rules. then  their least ebg generalization will reduce this ambiguity because original domain theory have no backtrackings and least ebgs are less general than it. thus least ebg of no backtracking is found  and it has the maximum usage degree from theorem 1. q.e.d. 
　this theorem is applicable for domain theories that contains some redundant non-recursive clauses  such as  hate w w  :- depressed w   in previous section. much of existing speed-up learning pointed out that unwinding such redundant clauses contribute to improve efficiency subramanian et a/.  1 . this theorem extends this facts into deterministic recursive theories. 
1.1 	non-linear recursion 
　we show another extreme. consider ancestor/1 that search transitive relation shown in figure 1. the learner is given examples of all of six discendants of a. original domain theory causes infinite branch for  ancestor a f  and   - ancestor a g  . 
　much of existing ebls learn exhaustive cache of all example like lebg1. it is a kind of rote learning but the most operational least ebg because the slightest generalization causes backtracking like lebg*. especially  seif-unwindings of transitive rule make situation 

	ancestor  a  b . 	ancestor a c . 
       ancestor 1 d . 	ancestor 1 e . d = 	ancestor c f . 	ancestor c g . ancestor x  z  ancestor x  y   ancestor y  z . 
　　　　　　ancestor a  b . e = ancestor a  d . ancestor a  /   . 
　　　　　　　　ancestor a  1 . ancestor a  c . lebg1 = ancestor  a   f . ancestor a  e . 
	ancestor a / . 	ancestor a  g . 
	ancestor a  1 . 	ancestor a  c . 
	ancestor b  d . 	ancestor  1  e . 
lebg1 =s 	ancestor c  /   . 	ancestor c  g . 
ancestor a  z  ancestor 1  z . ancestor a  z  ancestor c  z . 
figure 1: least ebgs of a non-linear recursive theory. 

figure 1: a negative example and the msv. 
worse.  subramanian et al  1  have pointed out there exists such a situation that the generalization-to-n in non-linear recursive theories misleads efficiency. the example of ancestor/1 supports this from a viewpoint of operationality. 
　unfortunately  since our simple least ebg learner does not generate whole least ebg space of given examples  it is sensitive in example orderings in such a domain. however  it does not generate lebgs that cause infinite branch  given such as  ancestor a f   ancestor a d }  and merely caches them. therefore  
least ebg learner is sufficiently useful in such a domain. 
1 approaches to other imperfect theory problems 
1 	inconsistent theory and e b g version space 
　inconsistent theory is distinctive in analytic problems such as classification and diagnosis. it is natural to look inconsistency as failures in classification or diagnosis. we assume that training examples are given with judgements whether they are positive or negative  and define a domain theory is inconsistent iff some negative examples are provable as positive examples. a learner with the inconsistent theory must change its competence rather than performance. we assume a learner swaps rules which conclude the goal concept with ebgs. these assumptions are similar to  flann et al.  1 . 
a learning task is to find ebgs s.t. prove positive examples but never prove negative examples. in sbl  such generalizations make a range called a version space. we show an ebg space of this paper have the same structure as a version space  and that when the number of disjunctives  i.e the number of macros  are bounded to n  its msv is a least ebg generalization  yamamura et al  1b . 
　for example  consider a domain theory which have a tree structured conceptual hierarchy. figure 1 shows such a domain theory as an and-or tree. this is a refinement of d of figure 1 where small-w denotes  small weapon  and so on. this domain theory is inconsistent. figure 1 shows one of provable negative examples. e1 says that a king might not kill himself with a cannon if he were depressed. to exclude this example  a learner must specialize the domain theory to constrain instruments for self-destructions to small weapons. the msv of the 1-bounded ebg version space is the least ebg as shown in figure 1 it includes all small weapons but excludes any big weapons. 
　ioe of  flann et al.  1  is the msv of 1-bounded version space. thus  the ebg version space is thought of as an extention of ioe to n disjunctives. ivsm of  hirsh  1  also uses the concept of version space. his version space is defined on features output by ebl  and is used also for incomplete theory. our version space is defined directory on an ebg space  and we use more knowledge intensive method for incomplete theory. 
1 	intractable theory and knowledge compilation 
the intractable theory problem is distinctive in synthetic problems such as planning and design. for example  operator definitions of 1-puzzle are complete and consistent for any state transitions  but it is intractable to build a solution only with them. there often exists some strategies to solve any problems without search  such as a concept of serially decomposable subgoals in 1-puzzle  korf  1 . a learning task for intractable theory problem is a knowledge compilation to find such strategies. 
　we have developed two kinds of approaches. one is to extract correct macros from instructed solution from a teacher under domain theory of primitive operators for problem solving domain that has serially decomposable subgoals such as 1 puzzle  yamamura et al.  1b . least ebg is used to extract correct macros. however  it often falls into a difficulty of sbl that a learner requires numerous negative examples until convergence. it means that the computational load shifts from ebl to sbl to resolve the imperfectness of the domain theory. 
　another is to extend the interpretor to consider decision level or control level domain theory like  minton et al.  1 . by this  intractable theory problem at ob-
ject level can be regarded as another kind of imperfect theory problem at decision level. we have developed decision level domain theory for problem solving domain that has serially decomposable subgoals  yamamura et al.  1b . this approach is a kind of knowledge compilation. 

figure 1: a tree structured hierarcy. 1 	i n c o m p l e t e t h e o r y and k n o w l e d g e transfer 
for the incomplete theory problem  we have proposed an approach in classification problems using a background theory in addition to the domain theory and examples  araki et a/.  1 . a background theory consists of a commonsense knowledge such as text books or dictionaries. a learning task is to extend the domain theory by transferring knowledge from the background theory based on similarities of examples. the least ebg can be also used to extract similarities. remark that without a background theory  the learning task is degenerated into sbl when the domain theory is the most incomplete one  i.e. null. we have given a solution only for a constrained class of domain theories. otherwise  it soon falls into difficulties of sbl. 
　i v s m of  hirsh  1  uses pure sbl method when the domain theory is incomplete. our approach aims more knowledge intensive method since it seems more natural that there exists somewhat relevant knowledge in the background knowledge when the domain theory is incomplete. 
1 conclusion 
in this paper  we proposed an augmentation of ebl to handle plural examples simultaneously under imperfect domain theories for unifying sbl and ebl. we presented solutions to utility problem with least ebgs which extract similarities of plural examples. there remain many problems in more imperfect theories  and the augmentation brings together intrinsic difficulties of sbl. however  in real application  useful expertise for learning seems often ignored because they do not fit with existing frameworks. therefore  knowledge intensive approaches like the augmented e b l seems important. 
