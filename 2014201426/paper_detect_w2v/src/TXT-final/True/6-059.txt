ion in component-based diagnosis driven by system observability 
gianluca torta  pietro torasso 
dipartimento di informatica  universita di torino  italy  e-mail: {torta torasso} di.unito.it 

abstract 
the paper addresses the problem of automatic abstraction of component variables in the context of model based diagnosis  in order to produce models capable of deriving fewer and more general diagnoses when the current observability of the system is reduced. the notion of indiscriminability among faults of a set of components is introduced and constitutes the basis for a formal definition of admissible abstractions which preserve all the distinctions that are relevant for diagnosis given the current observability of the system. the automatic synthesis of abstract models further restricts abstractions such that the behavior of abstract components is expressed in terms of a simple and intuitive combination of the behavior of their subcomponents. as a validation of our proposal  we present experimental results which show the reduction in the number of diagnoses returned by a diagnostic agent for a space robotic arm. 
1 	introduction 
system model abstraction has been successfully exploited in many approaches to model-based diagnosis  mbd . the pioneer work of  mozetic  1  and recent improvements proposed e.g. by  provan  1  and  chittaro and ranon  1  mostly use abstraction in order to focus the diagnostic process and thus improve its efficiency. however   flexible  abstraction has another main benefit  namely to provide fewer and more concise abstract diagnoses when it is not possible to discriminate among detailed diagnoses. the works by  console and theseider dupre  1  and  friedrich  1  accomplish this goal by including abstraction axioms in the domain theory and using preference criteria based on the abstraction level of diagnoses. 
　recently  some authors have aimed at the same goal in a different way  namely automatic abstraction of the system model   sachenbacher and struss  1    torasso and torta  1   l. if the available observables and/or 
1  previously an algorithm for automatic abstraction of their granularity are too coarse to distinguish among two or more behavioral modes of a component  or the distinction is not important for the considered system  a system model is automatically generated where such behavioral modes are merged into an abstracted behavioral mode. by using the abstracted model for diagnosis there's no loss of  important  information  while the number of returned diagnoses is reduced  and such diagnoses  by being  as abstract as possible   are more understandable for a human. 
　the work presented in this paper aims at extending previous works by introducing automatic abstraction of variables  i.e. components  in the presence of a reduced availability of the number and/or granularity of observables. abstractions based on system observability are particularly relevant in the context of on-board diagnosis. indeed  it is likely that when a system is operated onboard the only available measures are provided by sensors  which can themselves fail  and taking further measures manually is out of question. moreover  on-board diagnosis is usually constrained by strict time and resources requirements: using an abstracted system model should yield savings in both the time and the space requirements of the diagnostic process. 
　our proposal requires that abstractions do not cause any loss of diagnostic information  e.g. as in the incomplete abstractions discussed in  autio and reiter  1   or loss of efficiency  e.g. due to increased fanin as pointed out in  provan  1  ; moreover  we restrict the mapping from abstract components to their subcomponents to be enough simple and intuitive. in order to exclude all the undesired abstractions we introduce a precise definition of admissible abstraction  and further restrict the computation of abstractions through cutoff criteria which forbid admissible abstractions that 
may lead to computational inefficiencies. 
　as a running example to illustrate our definitions and algorithms  we will use throughout the paper the fragment of hydraulic circuit adapted from  chittaro and ranon  1  depicted in figure 1  a ; table 1 reports its domain theory  valve modes so and sc abbreviate 
components had been proposed in  out et o/.  1  for simpler models describing only normal behavior of the system 

1 	diagnosis 


figure 1: a fragment of an hydraulic circuit at. three levels of abstraction 

table 1: model of hydraulic components 
stuck open and stuck closed respectively . two possible abstractions of such system are shown in figures 1  b   where pipe pi and valve vi have been abstracted into valve avi  and 1  c   where abstract valve avi and pipe p1 have been abstracted into valve av1 . as for experimental validation of our techniques  however  we will present results collected in a larger domain  namely the model of the spider space robotic arm used in  portinalc and torasso  1 . 
　the paper is structured as follows. in section 1 we give a formal definition of what we consider an admissible abstract component. in section 1 we describe how the declarative notions introduced in 1 can be implemented computationally. in section 1 we present experimental results collected in the spider robotic arm domain. finally  in section 1 we compare our work to related papers and make some concluding remarks. 
1 	abstractions defined 
we first report formal definitions of system model  diagnostic problem and diagnosis. 
definition 1 a system description  sd  is a 1-tuple  where: 
 v is a set of discrete variables partitioned in the following sorts: cxt  inputs   comps  components   states  endogenous variables   obs  observables ; dom v  is the finite domain of variable 
 dt  domain theory  is an acyclic set of horn clauses defined over v representing the behavior of the system  under normal and abnormal conditions ; we require that  given an instantiation of comps and cxt  the dt derives exactly one value for each other variable 
 g  causal graph  is a dag whose nodes are in v representing the causal structure of the system; whenever a formula  appears in 
dt  nodes n  through nk are parents of m in the graph it is worth noting that the fact that g is restricted to be a dag does not mean that the system model is a tree in the sense e.g. of  darwiche  1 ; since we allow the existence of multiple directed paths between two nodes the associated jointree may well be cyclic. the dag restriction just forbids feedback loops in the causal graph  which is a common assumption in approaches which deal with dynamic systems only if they are amenable to statebased diagnosis   struss  1  . 
example 1 note that the system description for the running sample system given in table 1 is expressed in a slightly different formalism than the one described in our definition  due to the use of equations and disequations on the right-hand side of formulas. however  it can be easily mapped to our formalism by modeling inx and outx as discrete states variables by using qualitative deviations   struss et o/.  1  ; thus  for example  formula: 

to use the notation of  chittaro and ranon  1  simply because it is more compact. 
definition 1 a diagnostic problem is a 1-tuple dp = 
 sd  obs  cxt  where sd is the system description  obs is an instantiation of obs and c x t 1 an instantiation of cxt 
definition 1 given 	a 	diagnostic 	problem 
l	instantiation 
ldia 
　as noted in the introduction  there are real scenarios where not all the observables obs are available and/or their granularity is reduced. we identify the available observables with a set  we also assume that a granularity mapping ii is given s.t. 
u m vol   maps an instantiation of to a possibly more abstract instantiation m aval . then 
there is no loss of granularity at all; in this particular case we denote ii with 1 . for example  in figure in 1  b   
	and in 	1 	 c   obsav = {out}; 
as for ii we may consider a situation where 
a	n	d	h	a	v	e been mapped to a coarser value 
	the important point about 	and ii 
is that these reductions of the observability of the system can cause the model to become less discriminant 
1
　　this definition of diagnosis is fully abductive; however results presented in this paper apply equally well to consistency-based diagnosis 

diagnosis 	1 

and thus different faults of the same component and/or of different components to become indiscriminable. the following definition introduces the notion of indiscriminability among instantiations of subsets of com ps. 
definition 1 let sco mps be a subset of comps  
obsav the set of available observables and ii a granularity mapping. we say that two instantiations scompsl scomps1 of scomps are 
 obs v n indiscriminable iff for any instantiation c x t of cxt and any instantiation others of comps scomps the following holds 1: 
ii {tclosureobsav  others u scomps1   = u tclosure1bsav  others u scomps1   
　note that t h e - i n d i s c r i m i n a b i l i t y relation induces a partition into -indiscriminability classes of the set of possible instantiations of scomps. 
also note that  when   indiscriminability coincides with the indistinguishability among behavioral modes introduced in  torasso and torta  1 . 
example 1 in the abstraction example of figure 1  b   under context and = open indiscriminable instances of p  v  are grouped in the following sets: set c  is further split in two distinct sets: 
{{ok  ok }  which derives in  
 which derives in1 = in . if in a specific diagnostic problem we observe  for instance  in1 - 1 given and = open  the set of diagnoses is given by 
　for now  just note how this notion of indiscriminability is the basis for any potential abstraction. if  indeed  two instantiations s c o m p s l and scomps1 of scomps com ps are indiscriminable  this means that whenever s c o m p s l others is a diagnosis for a given dp  scomps1 others is another  indiscriminable  diagnosis for dp. 
　we now introduce a weak notion of abstraction where  as it is common in structural abstractions  abstract components are recursively built bottom-up starting with the primitive components. 
definition 1 given a set comps = of component variables  a components abstraction mapping am of comps defines a set compsa = {ac  ...   of discrete variables   abstract components   and associates t o e a c h o n e o r more   subcomponentsof s.t. each component in comps is the subcomponent of exactly one abstract component. moreover  am associates  to 
1
   given an instantiation comps of comps wc denote with telosurtobs  comps  the set of instantiations of variables in derived from 
     1 there are |c1| = 1 indiscriminable diagnoses; 1 of them  namely  ok  sc  and  br ok   can be regarded as preferred diagnoses since they involve only one fault 
each abstract component ac a definition defac  which is a characterization of the behavioral modes of ac in terms of the behavioral modes of its subcomponents. more precisely  an abstract component and its definition are built hierarchically as follows: 
- if c comps  ac is a simple abstract component if its definition defac associates to each abm dom {ac  a formula 
c{bmk  	s.t. 	in the triv-
ial case  ac has the same domain as c and dom{c  : 
- if ac  ac  are abstract components with disjoint sets of subcomponents scomps' scomps  then ac is an abstract component with subcomponents scomps' scomps  if defac associates 
to each abm dom {ac  a definition defabm which is a logical formula built by connecting definitions defbm'ibm1 dom {ac  with definitions defbm  bm  dom {ac   through 
　the definition defac of ac thus specifies a relation between instantiations of the subcomponents of ac and instantiations  i.e. behavioral modes  of ac itself. however we need to put some restrictions on these relations in order to match our intuitions about what is an  admissible  abstraction. 
definition 1 given a simple abstract component the definitions associated to its behavioral modes are said to be admissible. for a non-simple abstract component ac which is the composition of abstract components ac  ac   an admissible definition for abm dom {ac  is defined as follows: 

　admissible definitions capture common abstractions  such as the case where the abstract component is ok if all its subcomponents are ok  conjunction  and faulty if at least one of its subcomponents is faulty  canonical or . moreover  since we address the case of components with multiple behavioral modes  we extend canonical or with exceptions  generalized or ; clearly  the maximum number of exceptions allowed in a generalized or should be a configurable parameter of the abstraction algorithm. 
it is worth noting that the proposed operators  although chosen according to the rationale just exposed  are meant by no means to be the only possible choice in order to 
1 	diagnosis      1 this case has the purpose of including behavioral modes abstraction as described in  torasso and torta  1  in our framework:  are abstracted in the single behavioral mode abm 
make our approach to abstraction applicable; if more operators or a different set of operators would fit better particular systems or families of systems  new operators could simply be plugged-in and replace the ones we have defined. 
example 1 in the abstraction example of figure 	1 
 b   the behavioral modes of the abstract component avi can be expressed as admissible definitions over primitive components p i   vi: 

　armed with the admissible definitions for behavioral modes we can now formally identify the abstraction mappings we are interested in. 
definition 1 given a system model sd  a components abstraction mapping am of comps  a set  and a granularity mapping   we say that am is admissible w.r.t. sd  obsav  iff for each abstract component ac with subcomponents scomps: 
1. admissible behavioral modes; each  is admissible in the sense of definition 1 
1. mutual exclusion: for any two distinct 
defac  	and 	any 	instantiation 	comps 	of comps: 	
1.completeness: for any instantiation comps of 

stantiations of scomps which satisfy defk is a -indiscriminability class 1 
example 1 the abstraction example of figure 1  b   is admissible w.r.t. 
if the behavioral modes definitions of example 1 are used. such definitions are admissible  moreover there is a 1 : 1 mapping between them and the  obsav tyindiscriminability classes shown in example 1; in particular  corresponds to c l l   defabm1 to c1  defabrn1 to cyl and defabm to c1. it follows that the mutual exclusion  completeness and correctness conditions are also satisfied 
　note that given an admissible components abstraction mapping am  to each instantiation comps of comps corresponds exactly one instantiation c o m p s a of compsa consistent with comps given the definitions of elements in compsa- we say that c o m p s a is the abstraction of comps according to am. 
1 	computing abstractions 
the hierarchical way abstract components are defined in section 1 suggests that  after an initial step of behavioral modes abstraction  the computational process 
　　1 note that this guarantees that the behavioral modes of the abstract component are all distinguishable in the sense of  torasso and torta  1  
can produce new abstract components incrementally  by merging only two components at each iteration. after some finite number of iterations  arbitrarily complex abstract components can be produced. 
as already mentioned in section 1  however  the admissibility of a component abstraction is not enough in order to produce useful and meaningful abstractions. we thus introduce some cutoff criteria on abstractions over two components  i.e. single iterations   to be enforced by the computational process. 
first  we don't want to have a different behavioral mode of the abstract component for each combination of the behavioral modes of its subcomponents  limited-domain criterion ; a proliferation of behavioral modes in the abstract component has negative effects on both the efficiency of diagnosis and the understandability of abstract diagnoses. we chose to impose the not too-restrictive limit 
second  we must be able to control the fan-in of the abstract components; indeed  if a structure-based diagnostic algorithm is used   darwiche  1    introducing an abstract component that has a fan-in  much  larger than that of all its subcomponents leads to computational inefficiencies as pointed out in  provan  1 . the limit imposed on the fan-in of the abstract component  fan-in criterion  can vary from the maximum among the fanins of its subcomponents to the sum of such fan-ins; the choice should be driven by the type of diagnostic algorithm to be used with the abstracted model as well as by specific characteristics of the model under consideration. in the experiments reported in section 1 we have obtained significant results by restricting the fan-in of abstract components to be at most the maximum fan-in among their subcomponents. 
the following is an high-level description of the computational process: 

return sd 
endfunction 
　the invocation of function bm abstractf  builds simple abstract components by abstracting behavioral modes that result indistinguishable given the current observability expressed by  1; then a while loop is entered. 
function oracle   selects the next two candidates c   c  for abstraction according to the strategies outlined in the next paragraph. then localdt  i.e. the portion of dt relevant for computing the influence of over the values of observables in   is isolated by calling 
. the causal graph associated to localdt essentially contains the paths from to nodes in 
; all the parents of the nodes on such paths are 

diagnosis 	1 

also added. it is easy to see that  given the nodes in gloc  the remaining nodes in the original g do not play any role in the way ci  cj influence the variables in obsavfunction mergecomps    see paragraph 1  then tries to compute the definition of the new abstract component given localdt and in case it succeeds  sd is updated accordingly by function revisedt   . intuitively  the formulas in localdt are replaced with a set of formulas whose antecedents mention the new abstract component ac. given the antecedent of a formula mentioning ac the consequent is computed according to the definition de fac- for example  considering again figure 1  b   we introduce the formula 
the whole process terminates when function oracle    has no new suggestions for further abstractions. 
1 	t h e oracle 
function oracle   must choose  at each iteration  a pair of candidate components for abstraction. since a search over the entire space of potential abstractions would be prohibitive  the function is based on a greedy heuristic that tries to achieve a good overall abstraction without doing any backtracking. it is worth noting that the greedy approach reduces the worst-case search performed by oracleq to the evaluation of all the possible pairs of components before returning the chosen pair; this can happen at most  comps  times since every time an abstraction takes place the number of components is reduced by one and thus the search space size is clearly polynomial in  comps . 
　in our experience it turned out that the heuristic ha based on the following two principles could achieve significant results. first  ha follows a locality principle for choosing . manually written structural abstractions  indeed  tend to consist in hierarchies such that at each level of the hierarchy the new abstractions involve components that are structurally close to one another. this usually has the advantage of building abstract components that have a fan-in comparable to that of their subcomponents and have a limited and meaningful set of behavioral modes. two good examples of structural patterns that follow this principle are components connected in sequence and in parallel 1. 
second  the heuristic prefers pairs of components that are connected to the same observables in ; this follows from the fact that if at least one of the two components is observable separately from the other  it is more unlikely to find indiscriminable instantiations of the two components. 
　　1 it is easy to see that  by interpreting abm1  abm 1  abm 1  abm1 as ok  leak  so  sc respectively  avi behavior is exactly that of a valve 1 note that the structural notions of vicinity  sequentially and parallelism can be naturally transposed in terms of relationships in the causal graph g 
　while evaluating a pair of candidates  oracleq immediately enforces the fan-in criterion  this check can be easily performed at this stage . as for the limiteddomain cutoff criterion and the actual feasibility of an admissible abstraction  oracle   just  trusts  the heuristic ha  and defers to mergecompsq the actual enforcement. there's thus no warranty that the components selected by oracleq will end up being merged but just a good chance of it to happen. 
　in the current implementation  oracleq terminates when it can't find any pair of components which meet the limited fan-in criterion  are connected in sequence or parallel and influence the same set of observables. 
example 1 given the system in figure 1  a  and 
  oracleq selects p i   vi as candi-
dates according to heuristic e.g.  are further away and there's also an observable point between them  namely in1. since the inputs to the potential abstract component avi would be in cmd and the inputs to vi are outl cmd there is no increase in the fan-in of the abstract component. thus p i   vi are returned ＆ 
1 	a b s t r a c t i o n of t w o components 
once two candidate components  have been selected  function mergecompsq tries to merge them into a single abstract component. the following is a sketch 
return 
endfunction 
　first  the set  is partioned into indiscriminability classes by function findlndiscriminableq. such function considers in turn each observable m reachable from ci cj and computes the set sn m  of source nodes  i.e. nodes without parents  in gloc connected to m  excluding c i c j   ; instantiations of the source nodes represent the contexts under which  influence the value of m. for each instantiation of sn m  then findlndiscriminableq computes the transitive closure of each pair of behavioral modes in  and gradually re-
fines the partition by putting into separate classes pairs that cause different values for m. it is easy to see that after findlndismiminableq has looped over each  and each instantiation of sn m   the resulting partition v of  consists exactly in the indiscriminability classes of definition 1. indiscriminability classes of v form the basis for building abstract behavioral modes definitions: associating exactly one abstract behavioral mode to each of them  guarantees that the mutual exclusion  completeness and 

1 	diagnosis 

correctness conditions given in definition 1 are automatically satisfied. since the number of classes in the partition v corresponds to the number of abstract behavioral modes to be eventually generated  the limiteddomain cutoff criterion is applied to 
if the check is passed successfully  the generation of the definitions for the abstract behavioral modes starts  by considering an indiscriminability class p at a time and calling function makeabmdefinitionq. such function tries to build an admissible behavioral mode definition by considering the admissible forms in the same order as given in definition 1; if it does not succeed  it returns null and the abstraction of  fails. 
example 1 given that oraclcq has selected p i   vi as candidates for abstraction  the admissible abstraction described in example 1 is computed by mergecornpsq in the following way: function findlndiscriminableq computes a partition v whose indiscriminability classes are the ones mentioned in example the cutoff check is passed; then  function make abm definition    builds  for each indiscriminability class  the corresponding admissible definition shown in example 1 
1 	correctness 
we now state two correctness results concerning algorithm abstractq. their validity follows intuitively by the description of the algorithm given in the previous paragraphs; because of lack of space we omit the formal proofs. the first property just states that the algorithm builds abstractions according to definitions in section 1. 
property 1 function abstractq builds an admissible components abstraction mapping 
　the second property makes explicit the correspondence between detailed and abstract diagnoses. 
property 1 let sda be the system description obtained from sd obsav ti by applying abstractq and am the associated admissible abstraction mapping. 
given a diagnostic problem dp =  sd obs cxt  and the corresponding abstract diagnostic problem 
dpa = {sda  o b s a v   cxt   d is a diagnosis for dp iff its abstraction da according to am is a diagnosis for dpa 
1 	experimental results 
for testing the approach described above we have used the model of the space robotic arm spider   portinale and torasso  1    consisting in 1 components with an average 1 behavioral modes each  1 observables and 1 formulas. all the tests have been performed using a java implementation running on a sun sparc ultra 1 equipped with sunos 1. 
please note that the spider system model expresses causal relationships among the variables: for example  a failure in an electrical component can influence the temperature measured at some other physically neighboring 
diagnosis 

table 1: average number of preferred diag.  eonf. 1%  
components. 
we have applied the abstractq algorithm by considering as available observables the set of 1 sensorized observables at their maximum granularity. the resulting model  computed in about lsec  was reduced to have 1 components with an average 1 behavioral modes and 1 formulas. table 1 reports the average number of preferred  i.e. minimum fault cardinality  diagnoses produced by the diagnostic agent when using respectively the original model  detailed   the model obtained by performing only behavioral modes abstraction  abstractl  and the model created by abstractq  abstract1 . the three columns report results for three testsets of 1 cases each. the difference between the testsets lies in the number of faults  1  1 and 1 respectively  injected in each test case. 
the average times employed to solve a test case using the detailed model were  with a 1% confidence  1 ＼ 1 msec  testsetl   msec  testset1  and 1 ＼ 1 msec  ttstsets   by using the abstract1 model the average times dropped to  msec  testsetl   1 ＼1 msec  testset1  and 1 ＼ 1 msec  tcstset.1 . 
1 	related work and conclusions 
as noted in the introduction only a few methods have been proposed for automatic model abstraction in the context of mbd. in particular   sachenbacher and struss  1  and  torasso and torta  1  aim at the abstraction of the values of variables in the model while the present work aims also at automatically abstracting component variables. in  out et a/.  1j the authors introduce the notion of id-hierarchies of abstract components which  as our admissible abstraction mappings  preserve a strict correspondence between an abstract diagnosis and the set of detailed diagnoses consistent with it. however  their work deals with models which represent only normal behavior of the system  which results in a significant simplification of the synthesis of behavioral modes definitions for the abstract components. in particular  the partition of the instantiations of the subcomponents is always reduced to two indiscriminability classes: a singleton ok-class  containing the unique instance where all subcomponents are ok  and an abclass  containing all the remaining instances  where at least one subcomponent is ab . since there's no fault model  the only instance which predicts values for the observables is the one in the ok-class; instances in the ab-class do not predict anything about observable values  stnd thus can be safely put in the same indiscriminability class without computing any transitive closure. among the methods based on manual abstraction  
1 

 friedrich  1  proposes a notion of diagnosis  theory diagnoses  which exploits ab-clauses explicitly added to the domain theory in order to compute abstract diagnoses. similarly  in  console and theseider dupre  1  the model is augmented with abstraction axioms which model is-a relationships; in such model also observables can be expressed at different levels of abstraction. in both works the level of abstraction of diagnoses is flexible  i.e. a diagnosis can mix elements at different levels of abstraction  and is driven by the specific diagnostic cause at hand  i.e. values of the observables and contexts . our abstraction algorithm automatically synthesizes a single abstract level given the knowledge of which variables are observable at which granularity; we assume that the changes in the availability of observables are rare  so that the produced models are reused for many diagnostic cases. moreover  the kinds of relationships that we allow among abstract component behavior and its subcomponents behavior are less restrictive than abclauses and is-a relationships. 
　the definition of admissible components abstractions given in this paper aims at building abstract models that can completely replace the detailed models without any loss of discriminability. this is different from the goal of  mozetic  1  and its improvements  where the abstract model is viewed as a focusing mechanism  and is used in conjunction with the detailed model in order to improve efficiency. our notion of indiscriminability enforces abstractions where a diagnosis da at the abstract level corresponds exactly to the set of detailed diagnoses whose abstraction is da  property 1 . as shown by  autio and reiter  1  this is not the case for some common abstractions: in the example of the abstract nor gate consisting of an or and a not gates  the ab-dause ab nor  = ab or  v ad not  does not correspond to an indiscriminability class  since the case where both or and not are faulty has a different behavior than the cases where only one fault is present. our algorithm does not synthesize such ab-clause  thus avoiding the consequent loss of diagnostic information. 
　most of the computational effort of our approach is devoted to the computation of the indiscriminability classes; once they have been identified  the generation of behavioral modes definitions from each of them is cheap and straightforward. an alternative approach that could be worth exploring is constructive inductive learning  where techniques have been developed for the automatic synthesis of complex attributes  see e.g.  pagallo and haussler  1  . 
another interesting point to explore would be to study more sophisticated versions of the oracle    function  able to recognize a wider variety of patterns in the causal graph and possibly to look ahead one or more steps in order to select the candidate pair of components; in order to keep the complexity of the search manageable we believe that such extended versions of oracleq should be supported by additional domain-specific knowledge  for instance  whether certain kinds of components are likely to be connected in ways that form admissible abstract components . 
　in conclusion  performing components abstraction led to dramatic reductions in the number of returned diagnoses in the experimental domain  outperforming the application of behavioral modes abstraction alone  see section 1 . the reduction in the model size also resulted in significant time savings for the diagnostic process. 
