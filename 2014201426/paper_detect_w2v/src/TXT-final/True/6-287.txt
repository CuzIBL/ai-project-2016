 
writer's aid is a collaborative system that works simultaneously with an author editing a document providing assistance in identifying and inserting citation keys and autonomously finding and caching potentially relevant papers and associated bibliographic information from various on-line sources. at the core of writer's aid is a domainindependent planning system. the use of a planner in writer's aid enables an efficient division of labor between a human user and the computer system that autonomously creates and executes plans for getting the bibliographic information while the author concentrates on writing. the collaborative model of human-computer interaction implemented in writer's aid places new requirements on the planner  which must posess the expressive power to formulate complex planning goals  efficiently represent and reason about an incompletely specified domain  interleave planning with execution of partial plans  and dynamically re-plan in case of execution failure while avoiding redundant information gathering  all in real time. in the demonstration the participants will be able to use the system and evaluate its unique design in which information integration occurs within a context of a writing task that is the source of the user's information need. 
1 user interactions 
writer's aid is activated when an author working on a latex document in emacs text editor inserts a citation command inside the body of the document. in the citation command the author specifies the keywords that identify the potentially relevant papers  and whether s/he is interested in obtaining the viewable version of the papers or the bibliographic records only. while the author continues writing and inserting citation commands  writer's aid dynamically creates and executes plans for obtaining the bibliographic records from the available author's personal bibliographic collections and preferred on-line collections l such as researchlndex or acm 
'the set of the preferred bibliographies is specified manually digital library  caching viewable versions of papers and  upon the user's request  presenting the results of the search in a formatted list. at this point  the author may select a paper reference from the list  and the system will make sure that the citation is ready for compilation of the document's reference list. 
　while planners have been widely used in information integration systems  e.g.   barish et al.  1; lesser et al  1   the distinguishing feature of writer's aid is that it supports a simultaneous ongoing user's activity that is the source of the information request. a smooth integration of the search and selection of cited papers with the process of writing is a key requirement on writer's aid's interface: the user can insert new citation commands and access possibly incomplete results of the search for any of the citation commands at any time while editing the paper. 
1 system architecture 
figure 1 depicts the key components of the system. the goals database records writer's aid's planning goals  while the state of knowledge  sok  database records its knowledge about papers  their locations  user preferences  and other related domain information. both databases use the psiplan  babaian & schmolze  1  representation. the kernel of the system is a planning problem manager  ppm  that uses the psipop-se algorithm to plan and execute the search for bibliographic information. 
　a user's request to obtain papers relevant to a set of keywords is formulated as three separate psiplan goals that collectively can be summarized in the following statement 
for each paper that is relevant to a set of specified keywords according to some local or remote bibliography preferred by the user  get that paper and get the bibliographic record for it. 
the goal reduction module picks up a goal posted to the goals database and separates the part of the goal that is entailed by the sok and thus is already accomplished  from the part that still remains to be achieved. the latter part is passed to the planning problem manager  which creates an instance of a planning problem and hands it to the psipopse planner. the planner constructs and executes a plan or during the initial tune-up of the system to a new user. 

intelligent systems demonstrations 	1 


reports failure if the planning problem is unsolvable. upon executing the plan actions  the sok database is appropriately updated to reflect all changes in the knowledge about the state of the world. 
　when a user issues a command to view a list of records and papers corresponding to a citation  this information is derived from the sok  formatted  and presented in a separate window for browsing and selection. 
1 prioritizing and reducing goals 
writer's aid starts out having no or little knowledge about the papers and their locations  and therefore substantial amount of information gathering from various on-line sources may be required to satisfy a user's requests. however  it is very likely that the author will be satisfied with only a subset of the search results. to guarantee a quick delivery of the most likely relevant results  the goals arising from the information requests are prioritized. for instance  papers and bibliographic records that are listed in the author's own personal collection are more likely to be cited and writer's aid will work on the goal of getting them first. 
　to make the partial results on all of the issued requests quickly available to the user  the planning goals are processed by the planning problem manager in a round-robin fashion. as there may be significant overlap in the information related to different citation commands  e.g.  location of the papers  authors' web sites  each goal posted in the goal database is reduced to account for already available information prior to being sent off to the planner. such reduction separates the part of the goal that has not yet been achieved  ensuring more efficient operation of the planner. to further ensure non-redundancy of operation  all planning problems share the game database of knowledge  which is updated after each execution of an action to reflect the changes in the world and the writer's aid's state of knowledge. 
1 planning 
most of the writer's aid's planning problems do not have a solution plan thai provably achieves the goal. it is possible  houwever  to construct the solution by interleaving the process of planning with execution of some information gathering steps. combining planning with execution in psipopse is implemented as a search in a space of hypothetical plans. hypothetical plans are partial plans in which the achievement of the goal may be conditioned on certain outcomes of sensing. hypothetical plans condition on the value of an unknown subgoal; by verifying a hypothesis via execution of a sensing action the planner eventually collects enough information and reduces the incompleteness of knowledge enough to find a solution plan or establish the goal to be unsatisfiable. for example  having no information on the location of a paper  the planner may adopt a hypothesis that the paper is available from a certain collection  and verify the informa-
of all hypothetical plans is very large and must be explored gradually to avoid combinatorial explosion resulting from a high degree of incompleteness. the parameter that psipopse uses to control the size of the search space is called the hypothetical level of a plan; it is the maximum number of consecutive hypotheses supporting a single subgoal in a plan. psipop-se starts by considering plans with hypothetical level 1  that is  the classical plans with no hypothesis  and only increases the hypothetical level of considered plans after all plans with lower hypothetical levels have been considered and their hypothesis verified  a kind of iterative deepening in hypotheticals. 
　a more detailed description of the system and the results of a laboratory user study are presented in  babaian  grosz  & shieber  1 . 
