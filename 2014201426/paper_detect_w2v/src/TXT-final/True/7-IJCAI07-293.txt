
this paper considers online stochastic multiple vehicle routing with time windows in which requests arrive dynamically and the goal is to maximize the number of serviced customers. contrary to earlier algorithms which only move vehicles to known customers  this paper investigates waiting and relocation strategies in which vehicles may wait at their current location or relocate to arbitrary sites. experimental results show that waiting and relocation strategies may dramatically improve customer service  especially for problems that are highly dynamic and contain many late requests. the decisions to wait and to relocate do not exploit any problem-specificfeatures but rather are obtained by including choices in the online algorithm that are necessarily sub-optimal in an offline setting.
1 introduction
vehicle routing with time windows is a hard combinatorial optimization problem with many important applications in distribution and transportation scheduling. it has received considerable attention in the last decades and sophisticated algorithms are now available to find near-optimal solutions in reasonable time. in recent years  attention has shifted to online and/or stochastic versions of the problem. the stochastic and online versions are motivated by the inherent uncertainties arising in many industrial problems and technologicaldevelopments  such as onboard computers and communication systems  which give transportation systems the opportunityto update plans even after the vehicle has been deployed.
﹛in online stochastic problems  customers arrive dynamically as the algorithm proceeds and each customer request has a time window during which it can be served. the algorithm must decide whether to accept or reject the request upon arrival. if it is accepted  the online algorithm must serve the request. the online algorithm typically has two blackboxes available to make decisions: an optimization algorithm for the deterministic version of the problem and a conditional sampling procedure to generate future requests  e.g.   chang et al.  1; benoist et al.  1  .
﹛online stochastic vehicle routing was first studied in  bent and van hentenryck  1;bent and van hentenryck 1c  using a sampling-based approach. their idea is to generate scenarios consisting of existing and sampled customers  to solve the scenarios using large neighborhood search  shaw  1   and to make online decisions based on the scenario solutions. compared to other online stochastic problems such as packet scheduling  chang et al.  1 and reservation systems  benoist et al.  1   online stochastic vehicle routing introduces an additional difficulty: it takes time to serve a request. indeed serving a request involves moving to the customer  and then processing the request. in addition  a routing plan for a scenario may schedule a  sampled  customer  in contrast to an actual request  on a vehicle  something that never occurs in these other applications. how to best proceed when this situation arises is the key issue studied in this paper.
﹛ bent and van hentenryck  1c  took a conservative approach to this issue: their algorithm  which is reviewed subsequently  first filters all the  sampled  customers from the plans  leaving only actual requests. vehicles  when they become idle  are then sent to actual customers  chosen from the filtered solutions of the scenarios. apparently  their design decision was motivated by the fact that sampled customers may never actually place a request. however  the fact that a sampled customer is served next in a scenario solution provides insight into the nature of the uncertainty and solutions.
﹛the key contribution of this paper is to propose two novel strategies  waiting and relocation  to address this issue and to better exploit stochastic information in online vehicle routing. the waiting strategy recognizesthat it is sometimes beneficial for a vehicle to wait at the current location instead of moving to a known customer. the relocation strategy goes one step further and may move vehicles to customer locations where no requests were placed  yet . these new strategies make several fundamental contributions:
  the vehicles can wait or relocate anywhere and at any time during the algorithm execution. this contrasts with earlier approaches  e.g.   larsen et al.  1; van hemert  1   where waiting and relocation points are defined a priori using knowledge of the distribution  clustering of the customers  and heuristics.
  the decisions of when and where to wait are systematically derived from stochastic information. indeed  waiting and relocation simply make available to the online algorithms decisions that are necessarily sub-optimal in the offline setting. this contrasts with heuristics to distribute waiting time in routing plans  e.g.   mitrovicminic et al.  1; mitrovic-minic and laporte  1   which do not use stochastic information.
  a decision to wait or relocate solely relies on the scenario solutions  not on specific properties of the distribution which is used as a black-box. hence the strategies should naturally transfer to a variety of applications.
experimental results show that the waiting and relocation strategies may produce dramatic improvements in customer service compared to earlier algorithms  bridging much of the gap between the online solution and an offline  a posteriori solution where all the uncertainty has been revealed. the improvementsare particularly impressive for highly dynamicinstances with many late customers  which are particular challenging for earlier algorithms.
﹛the rest of the paper is organized as follows. sections 1 present the offline and online problems. sections 1 present the online stochastic algorithm in stepwise refinements  concluding with the waiting and relocation strategies. section 1 presents the problem instances and the experimental results.
1 the offline problem
the input data a vehicle routing problem is specified by a number of customers that must be visited by a pool of vehicles. each customer makes a request that must be served within a time window and takes some capacity from the vehicle. each vehicle starts at the depot  serves some customers  and must return to the depot by the deadline.
﹛each problem contains a set r of n customers and a depot o. the set s of sites is thus r﹍{o}. the travel time between sites i and j is denoted by d i j . each request is associated with a customer and  since each customer makes at most one request  we use customer and request interchangeably. every request c has a demand q c  ≡ 1 and a service time p c  ≡ 1. each instance has a pool of m identical vehicles with capacity q. each vehicle starts from the depot.
﹛each customer c has a time window specified by an interval  e c  l c   satisfying e c  ≒ l c . the time window represents the earliest and latest possible arrival times of a vehicle serving customer c. in other words  the service for customer c may start as early as e c  and as late as l c . a customer c may not be served before e c  but a vehicle arriving early to serve c may wait at the site until time e c  before beginning service. the depot has a time window h =  e1 l1   which represents the earliest departure and latest possible return for the vehicles. typically  e1 denotes the beginning of the day and l1 is the deadline by which all vehicles must return.
routing plans optimization algorithms for vehicle routing typically return a routing plan that specifies the orderin which each vehicle visits its customers. a vehicle route  or route for short  starts at the depot  serves some customers  and returns to the depot. a customer appears at most once on a route.
hence a route is a sequence  where ci ﹋ r and all ci are distinct. the capacity of a route 老 is the sum of its customer capacities  i.e. . a routing plan is a tuple of routes  老1 ... 老m  one for each vehicle  in which each customer appears at most once. we also use cust 老  and cust 污  to denote the customers of a route 老 and a plan 污. a routing plan assigns a unique successor and predecessor for each served customer and depot. for a plan 污  the successor of site c is denoted by c+ and the predecessor is denoted by c .
departure times routing plans do not prescribe departure times for the vehicles. these departure times are typically not uniquely defined: a vehicle may depart at differenttimes from specific customers and still visit all its assigned customers before the deadline. in addition to the routing plan  a solution will also consist of an assignment 考 : r ↙ h of starting times to all customers.
the vehicle routing problem we are now in position to describe the vehicle routing problem. a solution to a vehicle routing problem with time windows  vrptw  is a routing plan 污 =  老1 ... 老m  and a starting time assignment 考 satisfying the capacity and time window constraints  i.e. 
 1 ≒ j ≒ m 
cust 污  
cust 污   cust 污  
the objective is to find a solution maximizing the number of served customers |cust 污 |. this objective function differs from the optimization criterion used the solomon benchmarks  where the goal is to minimize the number of vehicles and  in case of ties  to minimize the total travel time. this highlights the difference between strategic planning and operational decision making. as maximizing the number of served customers is very difficult on the problems considered here  the cost associated with relocating or waiting  as factored into the travel time  is negligible.
notations	if s is a non-empty sequence  first s  and
last s  denote the first and the last element of a non-empty sequence. the concatenation of two sequences s1 and s1 is denoted by s1 : s1. if s is a sequence and s  is a prefix of s  then s s  denotes the suffix s+ such that s = s  : s+. if s is a sequence and r is a set  filter s r  denotes the sequence obtained by removing the elements of r from s.
1 the online problem
in the online problem  requests arrive dynamically as the algorithm proceeds. the online algorithm maintains a partial routing plan  consisting of a partial route 老i for each vehicle i. it also maintains a partial assignment 考  of starting times for all customers in cust 污     {last 老1  ...  last 老m }. these times specify when the vehicle serving a given customer has departed to the next customer on the same vehicle. the last customers on the vehicles have no departure times  since they have not been served yet.
﹛the online algorithms have at their disposal an optimization algorithm o. given a set of customer requests r and
online algorithm
;
1 考1 ↘ 考﹠;
1 忙 ↘ generatesolutions 老1 考1 r1 ;
1 for t ﹋ h
1 do at ↘ acceptrequests 老t 1 考t 1 rt at 1 忙 ;
1 忙 ↘ updateplans 老t 1 考t 1 at 忙 ;
1 if idle 老t 1 考t 1 
1 then st ↘ chooserequest 老t 1 at 忙 ;
1 老t ↘ 老t 1 : st;
1 考t ↘ 考t 1 last 老t 1  ↘ t ;
1 忙 ↘ { 老 ﹋ 忙 | first 老   老t 1  = st };
1 else 老t ↘ 老t 1;
1 考t ↘ 考t 1;
1 忙 ↘ 忙 ﹍ generatesolutions 老t 考t at ;
1 return  老h 考h ;
generatesolutions 老t 考t at 
1 忙 ↘  ;
1 repeat
1 r ↘ sample t ;
1 忙 ↘ 忙 ﹍ {o 老t 考t at r };
1 until time t + 1
1 return 忙;
figure 1: online stochastic routing
a pair  污  考    o 污  考  r  returns a routing plan 污+ = maximizing |cust 污+ | and satisfy-
ing c  污+   where c  denotes the problem-specific constraints c where the time windows of each customer c in cust 污     {last 老1  ...  last 老m } have been tightened to  考  c  考  c  . the online algorithms also use a procedure sample t  to conditionally sample the request distribution from time t to the time horizon.
﹛the rest of this paper describes the online stochastic algorithms in stepwise refinements using the algorithms of  bent and van hentenryck  1a  as a basis to clearly identify our contributions. the algorithms are presented for a single vehicle  their generalization to multiple vehicles being obtained naturally using pointwise decisions  bent and van hentenryck  1a .
1 online vehicle routing
we now present the generic online routing algorithm. since there is only one vehicle  a routing plan is simply the vehicle route and we use both terms interchangeably. the generic online algorithm is depicted in figure 1. it maintains a set of plans 忙 representing scenario solutions that are used to make decisions over the course of the computation. at every time t  the algorithm also maintains a partial routing plan 老t  its associated departure times 考t  and rt the requests that become available. finally  the algorithm assumes that the set of requests r1 is available before the start of the computation. the implementation also includes service guarantees: once a request is accepted  it must be served.
﹛lines 1 initialize the partial routing plan and the departure times  while line 1 generates the initial set of plans used in the decisions. the body of the algorithm  lines 1  first
chooserequest-c 老t rt 忙 
;
1 do f r  ↘ 1;
1 for 老 ﹋ 忙
1 do r ↘ first filter 老   老t f  ;
1 f r  ↘ f r  + 1;
1 return argmax r ﹋ f  f r ;
figure 1: consensus for online stochastic routing.
determines whether to accept any new requests that have arrived. next those plans that cannot accommodate the new accepted requests at  line 1  are removed from 忙. it is important to stress that a least one plan p ﹋ 忙 should be able to accommodate the requests in at  through insertion or replacement of an equivalent sampled customer  since otherwise the algorithm cannot provide the necessary service guarantees. in this paper  customers are accepted greedily whenever a routing plan can accommodate them. using stochastic information for accepting/rejecting did not bring significant improvements. the algorithm then determines whether the vehicle is idle  that is whether service is completed for the last customer in 老t 1 given the departure times in 考t 1. if the vehicle is busy traveling or servicing the last customer in 老t 1  the routing plan and departure times remain the same  lines 1  and the algorithm simply continues generating plans  line 1 . otherwise  the vehicle is idle and the algorithm chooses a request st to serve using the plans in 忙  line 1   augments the routing plan  line 1  and the departure times  line 1   and updates 忙 to remove the plans incompatible with the decisions  line 1 . it is useful to review some of the details of the algorithm.
  a vehicle is idle at time t for a plan  and departure times 考 if
k = 1ˍmax 考 sk 1 +d sk 1 sk  e sk  +p sk  ≒ t.
in other words  a vehicle is idle when its route has no customers or when it has finished serving its last customer sk by time t.
  the algorithm assigns the departure time of the last customer in 老t 1 to time t in line 1. the vehicle thus departs for customer st at time t.
  a routing plan 老 that next visits a customer other than st must be removed from 忙 since its decisions are incompatible with 老t  line 1 .
figure 1 also depicts how to generate plans. line 1 of function generatesolutions generates a scenario by sampling the distribution from time t to the horizon  the time in which the vehicles must return to the depot . line 1 calls the optimization algorithm with the routing plan and departure times at time t. it remains to specify how to make decisions. figure 1 shows how to implement function chooserequest to obtain the consensus algorithm c from  bent and van hentenryck  1d  where the details can be found. algorithm c considers all known requests f  line 1  and initializes their evaluations  lines 1 . it then considers each routing plan 老 ﹋ 忙  line 1   retrieves the request served chooserequest-cw 老t at 忙 
t
1 do f r  ↘ 1;
1 for 老 ﹋ 忙
1 do r ↘ first 老   老t ;
1 if r ﹋ f
1 then f r  ↘ f r  + 1;
1 else f ﹠  ↘ f ﹠  + 1;
1 return argmax r ﹋ f ﹍ {﹠}  f r ;
figure 1: the consensus algorithm with a waiting strategy.
next in 老  and increments its credit  line 1 . the request in f with the best evaluation is selected in line 1.
﹛it is important to emphasize a critical point in this implementation. a solution 老 ﹋ 忙 is a routing plan 老 = 老t 1 : 老+ starting with partial route 老t 1 followed by a sequence of requests coming from f and the sampling. as a consequence  there is no guarantee that the request s served next on the vehicle  i.e.  s = first 老+   is an actual request  s ﹋ f   not a sampled customer  s /﹋ f . this is precisely why the implementation in figure 1 uses filter 老+ f  to prune plan 老+ and keep only the requests in f. this guarantees that first filter 老+ f   returns a real customer and that the vehicle departs for a customer who requested service.
1 a waiting strategy
the algorithm by  bent and van hentenryck  1c  filters sampled customers before selecting the request. this conservative approach ensures that the vehicle always moves to a known customer  not a sampled request. this section investigates a waiting strategy based on the recognition that it may be beneficial for the vehicle to wait at its current location instead of serving customers too eagerly. for instance  the fact that the solution 老 to a scenario at time t starts with a sampled customer  that is
老 = 老t 1 : 老+ ＿ first 老+  ﹋/ f 
indicates that it may be beneficial to wait since the sampled request may materialize  in which case it must be served before the first accepted customer. the difficulty is to decide when to wait in a systematic fashion given that the algorithm has solved multiple scenarios  all of which may have different customers to serve next in their routing plans. figure 1 depicts a natural implementation. its key idea is to add a wait action ﹠ to the accepted requests. when considering a plan 老 ﹋ 忙  the algorithm retrieves the request r to serve next in the scenario  line 1 . in the case of an accepted request  r ﹋ f   the evaluation of r is incremented. otherwise  if r is a sampled customer  r /﹋ f   the evaluation of the wait action is incremented. the implementation then selects the element of f ﹍ {﹠} with the best evaluation  which may be either an accepted request or the wait action. the online generic routing algorithm must also be generalized slightly to wait. when the request is the wait action  the algorithm modifies neither the routing plan nor the departure times.
﹛waiting heuristics have attracted considerable attention recently  see  for instance   mitrovic-minic et al.  1; chooserequest-cr 老t at 忙 
1 for r ﹋ customers
1 do f r  ↘ 1;
1 for 老 ﹋ 忙 1 do r ↘ first 老   老t ;
1 f r  ↘ f r  + 1;
1 return argmax r ﹋ customers  f r ;
figure 1: consensus with a relocation strategy.
mitrovic-minic and laporte  1  . the beauty in the algorithm presented here is that the choice of when and where to wait is fully automatic and guided by the scenarios.
1 a relocation strategy
the waiting strategy recognizes that it may be beneficial to wait at the current location instead of serving an accepted request. it is especially appropriate for problems in which the bottleneck is to minimize travel times and it is reasonably easy to serve the customers. when the challenge is in maximizing the number of served requests  it is appealing to explore a relocation strategy and to consider moving to the location of sampled customers. once again  the difficulty is to determine when and where to move. figure 1 proposes a natural relocation strategy. its fundamental idea is to avoid differentiating between accepted and sampled customers: the vehicle simply moves to the request with the best evaluation. lines 1 initialize the evaluation of all customers  lines 1- 1 increments the first request  and line 1 selects the request with the best evaluation. the selected request may be either an accepted or a sampled request.
﹛a relocation strategy may be beneficial for improving the number of served requests because it anticipates future requests and positions the vehicle to serve them quickly. it is never advantageous when minimizing travel times  since it may move to locations where no requests will ever materialize. observe also that when and where to relocate is also fully automatic and systematically derived from the scenario solutions. this contrasts with other approaches  e.g.   larsen et al.  1; van hemert  1   where relocation points are created using heuristics based on a priori information for specific problems  instances  and distributions.
1 experimental results
we now describe the experiments that compare our algorithms with those of  bent and van hentenryck  1c .
the benchmarks the online vehicle-routing problems are generated from the solomon benchmarks  solomon  1   a collection of very challenging vehicle-routing problems with 1 customers  many of which have yet to be solved optimally. the stochastic versions were developed by  bent and van hentenryck  1c  where the details are found. we review the salient features of these benchmarks. the problems are divided into classes 1 through 1. the degree of a dynamism  dod  of a problem is the ratio of the number of stochastic customers over the number of total customers. the class 1 problems are characterized by early arriving requests. and class 1 problems by more late arriving requests. the third class mixes class 1 and 1. for these three classes  the average dod is 1%. class 1 considers problems with more late arriving customers than class 1 and have an average dod of 1%. class 1 considers problems with a higher proportion of stochastic customers  i.e. an average dod of 1%. in all problems  the expected number of customers is 1.
the algorithms the results compare local optimization  lo  with the consensus and regret algorithms which may include the waiting and relocation strategies. algorithm lo is a generalization of the parallel tabu-search algorithm in  gendreau et al.  1 . it generates multiple routing plans on the accepted customers. these plans are then used to accept or reject new customers and to select the decisions at each time step. lo is thus close to algorithm c  the main difference being that no stochastic information is exploited. the consensus algorithms c  cw  and cr have been fully described in this paper: c is the algorithm originally proposed by  bent and van hentenryck  1c   while cw and cr respectively include the waiting and relocation strategies. the regret algorithms  r  rw  and rr  improved upon the consensus algorithms by using a sub-optimality approximation to evaluate the value of scheduling each request next on the vehicles and are described in detail in  bent and van hentenryck  1b . they use a simple and fast sub-optimality approximation whose details are described in  bent et al.  1 . consider the decision of choosing which customer to serve next on vehicle v and let st be the next customer on the route of vehicle v at time t. to evaluate the regret of another customer r on the same vehicle v  the sub-optimality approximation determines whether there is a feasible swap of r and st on v  in which case the regret is zero. otherwise  if such a swap violates the time-window constraints  the regret is 1.
initial plans and online process the online stochastic algorithms generate and solve 1 scenarios to select the decisions at time 1. the algorithms also generate and solve 1 additional samples to create plans given the set of decisions at time 1. as these scenarios are generated and solved ahead of time  the number of scenarios can be arbitrarily large depending on the application. each such optimization is allocated one minute. during the online execution  each optimization runs for 1 seconds and uses the lns procedure from  shaw  1 . all algorithms are executed on an amd athlon 1 processor with 1mb of ram running linux. each of the instances is run 1 times to account for the nondeterministic nature of the algorithms. in the results  we often omit the words  in the average  for brevity.
the results figures 1 and 1 summarize all the results for the regret and consensus algorithms regarding the number of unserviced customers.  all customers can be served in the offline  a posteriori problems.  the figures depict the results for the specific instances and a linear regression for each class of algorithms. some specific results are cropped by the graph extent to maintain its readability. the main result is the outstanding behavior of rr  i.e.  the regret algorithm with a relocation strategy. from the interpolations  it can be seen that algorithm rr dominates all the algorithms for dods over 1% and that the improvements increase substantially as the

figure 1: unserviced customers for consensus.
dod grows. the improvement over r is significant  indicating the importance of using relocation on this set of instances. subsequent results will characterize more precisely when the relocation strategy is of paramount importance. algorithm rw is also quite effective in general  but it is dominated by rr as the dod increases. similar results can be observed for the consensus algorithms c  cw  and cr but  in general  they serve fewer customers than their regret counterparts.
results on class 1 figure 1 depicts the results on class 1. we highlight the best and second best result for each problem in boldface and italics respectively. algorithms rr and rw are reasonably close. for small dods  r performs the best 
dodloccwcrrrwrr11%111111111%111111111%111111111%111111111%111111111%111111111%111111111%111111111%111111111%111111111%111111111%111111111%111111111%111111111%1111111figure 1: unserviced customers on class 1.
dodloccwcrrrwrr11%111111111%111111111%111111111%111111111%111111111%111111111%111111111%111111111%111111111%111111111%111111111%111111111%111111111%111111111%1111111figure 1: unserviced customers on class 1.
however  what is noteworthy is the significant gain rr and rw show as the dod increases. these results show the significance of the waiting and relocation strategies on class 1. observe that lo misses more than 1 customers on instance rc1  while only about 1 customers are not served by rr. their consensus counterparts also behave well.
results on class 1 class 1 contains the most difficult instances and the experimental results are depicted in figure 1. on these instances  some algorithms may miss up to 1 customers. this is the case of algorithms lo  c  and r on rc1. once again  algorithm rr is the most effective algorithm overall and only misses 1 customers on rc1. the improvements of rr over other algorithms are quite dramatic on class 1 and grow with the degree of dynamism. they clearly demonstrate the value of a relocation strategy on online vehicle routing with time windows.
﹛it is important to point out that the relocation is completely guided by the stochastic information and does not include any problem-specific knowledge: a vehicle simply moves to the selected customer whether this is an accepted customer or a sampled customer. as a consequence  the relocation strategy is simple to implement  yet it is critical to obtain high-quality solutions on these instances. the regret algorithm rw with a waiting strategy is also effective and provides significant over the other algorithms  but it is dominated by rr.
1 conclusion
this paper considered the online vehicle routing problem where customer requests arrive dynamically. it demonstrated the effectiveness of two novel strategies to further exploit stochastic information: waiting and relocation. the strategies were shown as natural instantiations of the generic stochastic optimization framework by making available actions that are sub-optimal in an offline setting. the effectiveness of the strategies were demonstrated and validated in the experimental results. as future work  it will be interesting to see the performance of these techniques on classes of vrps where waiting and relocation may have more impact on cost. finally  as the decision to relocate or wait solely relies on scenario solutions  not on any prior knowledge of the problem or distribution  the results should naturally extend to a variety of applications in planning and scheduling.
acknowledgments
this research is partly supported by nsf award dmi1 and onr depscor award n1.
