 and uniform l i s t s t r u c t u r e s . a l l operators w i l l be processes for changing l i s t structures or making t e s t s of the c h a r a c t e r i s t i c s of l i s t s t r u c t u r e s . hence  the semantic information the system needs to have at i t s d i s p o s a l   stored in i t s long-term 
memory  is   l i k e the information needed by gps  task-independent i n f o r m a t i o n : to w i t   a basic set of p r i m i t i v e l i s t - p r o c e s s i n g operations. it needs to have the c a p a b i l i t y of removing an item from a l i s t   adding an item to a l i s t   f i n d i n g and changing a value on a d e s c r i p t i o n l i s t   and so on. since the p r i m i t i v e s act in the abstract world of l i s t s t r u c t u r e s   and not in the real world of physical and social a c t i o n s   only a small f i n i t e set of them is needed. the system has no c a p a b i l i t y for adding to t h i s set if it proves inadequate in any problem context. 
　　the basic operators that are a v a i l a b l e in understands semantic memory are c l a s s i f i e d according to the number and d i s t r i b u t i o n of types of 
t h e i r arguments. thus a x y  would represent a process that takes two arguments that are possibly  but not necessarily  of d i f f e r e n t types. b x x x  would represent a process that takes three arguments  a l l of the same type. the operator we r e q u i r e for the monstrous problem would be represented as c x y y   f o r it takes three arguments  one of one type and two of another type. there are only a few basic operations on l i s t structures that have t h i s s t r u c t u r e : change the value of the a t t r i b u t e on a l i s t is one  t r a n s f e r x from yl to 
y1 is another  copy x from yl to y1 is a t h i r d   d i f f e r i n g from the second only in that it is nond e s t r u c t i v e   . hence  the system requires only a r e l a t i v e l y small amount of l e x i c a l information about the r e l a t i o n a l terms used in the problem statement   e . g .     t r a n s f e r     in order to select the proper operator in memory. 
　　in p a r t i c u l a r   verbs l i k e  move     t r a n s f e r      change   a l l map to the same algorithm. this a l gorithm  however  must be s u f f i c i e n t l y s o p h i s t i cated to c a r r y out the p a r t i c u l a r action that is required by the s p e c i f i c representation that has been selected by construct. this requirement is met by w r i t i n g the algorithms for the p r i m i t i v e processes so that they are executed i n t e r p r e t i v e l y under c o n t r o l of the d e s c r i p t i o n of situation. thus  f o r the d e s c r i p t i o n corresponding to the repr e s e n t a t i o n of figure 1  transfer globe m1nster1  
m1nster1  would f i n d m1nster1 on the l i s t of 

i n v i t e d papers-1: 	simon 1 

monsters of situation  find globe on the l i s t of globes of m1nsteri  remove globe from that l i s t   find m1nster1 on the l i s t of monsters of situation and add globe to the l i s t of globes of m1nster1. 
　　on the other hand  if the representation had been described as corresponding to figure 1  the same transfer operator  executed interpretively under control of this description  would f i r s t find globe on the l i s t of globes of situation  then find the monster of globe  and finally change the value of the monster from m1nster1 to m1nster1. 
   a relatively simple interpretive scheme with capabilities for recursion allows for indefinite variety in representation without unduly complicating the algorithms for the primitive operators. most of the f l e x i b i l i t y is embedded in the  find  process. the legality tests for moves are handled in the same way. in the problem at hand   size  induces an ordering on the globes. this ordering is represented internally simply by storing the 
globes in a l i s t described by the ordering dimension. to interpret a phrase like  the largest globe he is holding   the system f i r s t abstracts to an operator like: largest monster globe    
which finds the appropriate globe. such an operator is executed interpretively  in the f i r s t representation  say  by finding the monster associated 
with globe  finding the l i s t of globes of that monster  and  using the ordered l i s t of globes  finding the last   i . e .    largest   of the monster's 
globes on that l i s t . 
　　understand can speed up its execution of operators  once the representation has been fixed  by retaining a trace of its interpretive execution of a function  then using that trace to compile out a specialized function applicable specifically to the given representation. with many of the tests for branches thereby eliminated  the compiled operators as might be expected  are an order of magnitude faster than the interpreted operators. 
the mechanisms of understanding 
   to assess understands understanding  several features of the program's structure call for additional comment  and for comparison with other programs having similar capabilities. the task performed by'the conjunction of understand with gps is essentially an automatic programing task  or as goldman  balzer and wile  1  put i t   a task of  translating a process description written in an informal  imprecise language with english-like 
semantics. . .into a process specification language with formal syntax and semantics.  its structure is similar in many respects to the structure of 
those authors' safe system  balzer  goldman  ε wile  1 . understand + gps derives its general architecture from an earlier automatic programming scheme  the heuristic compiler  simon 1  1 .1 
1
     specifically  understand corresponds to the representation-generating portion of the heuristic compiler that is described in simon  1   pp. 1-
1. 
　　a f i r s t characteristic of understand  dictated by the fact that it is to provide input to gps  is that it treats the objects and relations mentioned in the problem instructions in an abstract way. all it needs to learn about them from the text is how to interpret them as l i s t structures and operations on l i s t structures. since a programing 
language for operating on l i s t structures needs 
only a relatively small number of basic operations  the semantics of understand  which is embedded in such operations  can be correspondingly lean. 
　　the operations used by understand invite comparison with schank's acts  schank  1 although schank emphasizes that there is no magic number of primitive processes required to express meanings  he argues that   i t is possible to build an adequate system. . .using only eleven acts.   schank  1  p.1 . when we examine the list of acts that he proposes  pp.1   we see that he too goes the route of abstraction. at least three of the eleven acts are forms of transfer  specialized by constraints on the types of objects that may appear as arguments. for example  the act that he calls atrans denotes the transfer of an abstract relation  while ptrans denotes a change in physical location of an object. both of these  as 
well as other transfer operations  would be handled in understand by the semantics of transfer combined 
with tests on the types of its arguments. hence  understand might be expected to handle a considerable range of problems with only eight or ten operat ions. 
   the understand program shows that this simplification of basic operations need not be interpreted as a claim that there are only a few kinds of actions in the real world. rather  it is a claim that real world actions  of whatever kinds  can be represented internally by a few kinds of actions 
on list structures. 
   when the system has only a small number of primitive operators  then the task of mapping the actions named in the problem instructions onto 
these operators is correspondingly simplified. 	as 
was indicated in the last section  knowledge of the number of arguments in an operator and their distribution by types goes a long way toward identify-
ing the operator in semantic memory that is appro-
priate for translating a particular action  although it will not do the whole job  e.g.  it will not distinguish between a  copy  and a  transfer  . 
   the system of balzer  goldman  and wile  1  carries this abstraction even a step further. in their system  all knowledge is handled in a uniform format as a set of assertions of relations  i.e.  in some such form as  relati1 argument1 argument1 . clearly  the only operations needed for manipulating a data base in this form are operations for ascertaining the presence or absence of a relation  an operation for inserting a new relation  and an operation for deleting a relation. since there is only one possible form of representation  their system does not require the capability  needed by understand  for describing its representation and modifying its operations  or interpreting 

i n v i t e d 	papers-1: 	simon 1 

them  to f i t that representation. the operations are fixed  once and for a l l . in the present implementation of the system  the price paid for this simplicity is a high cost of search for relations in the data base 1 but i know of no demonstration 
that more efficient search methods could not be found without sacrificing the simplicity of representation. such questions of processing e f f i -
ciency lie outside the scope of this paper. 
a second important characteristic of the under-
stand program is that its capabilities for syntactic processing are relatively simple. it analyses the natural language instructions only to the extent it needs to in order to extract the objects and the relations that are relevant to the problem formulation. perfect and unambiguous parsing of the natural language inputs is not usually essent i a l   and semantic power is more important than syntactic sophistication in the language processor. this same conclusion has been reached by other designers of contemporary understanding systems. brown ε burt  1  p.1  say  for example  of their sophie system  which carries on dialogues relating to electronic circuits:  sophie had to 
cope with problems such as anaphoric references  context-dependent deletions  and ellipses which occur naturally in dialogs. in fact handling these constructs seemed more important than building a system endowed with great syntactic paraphrase capabilit ies.  
   a third characteristic of understand is that design decisions made by one component of the program while processing one part of the problem text are accessible to other components of the program processing other parts of the problem text. balzer  goldman & wile obtain this accessibility by their uniform representation of all relations. in the understand system  it is achieved by constructing descriptions of the representation which can be read and interpreted by understand's primitive 
operations. the algorithm that writes the descriptions is a self-referential procedure thatgathers information about the data structures being assem-
bled by understand and describes them in a language readable by the system itself. obviously  the program could easily be augmented to demonstrate this component of its understanding capabilities by answering questions of the form:  how have you represented problem situations in terms of l i s t structures   
conclus ion 
   the foregoing discussion illustrates how a system can be designed to understand new problems-that is  to encode them so they will be accessible to a problem solver. in the understand system  this capability appears to be limited to problems that are abstract. we now return to a consideration of understanding in task domains that are relatively rich in semantic information. 
r. balzer  personal communication. 
understanding in semantically rich domains 
　　a large part of the current research effort on understanding systems is directed at the development of problem solving systems to operate in semantically rich domains. by a semantically rich domain i mean one in which a good deal of substantive information must be supplied to the problem solver  and be understood by i t   in order for it to represent and solve  the problems. among recent understanding programs that f i t this description are the sophie program of brown & burton  1   whose domain of understanding is electronic circuits  the isaac program of novak  1   which deals with physics problems in the domain of statics  and a collection of programs  which i shall call thermo  designed by r. bhaskar and myself to generate problems in chemical engineering thermodynamics.1 each of these programs possesses the knowledge that is acquired in a portion of a 
college-level course  and uses this knowledge either to understand and solve natural-language problems  isaac   to generate problems in its domain  thermo   or to work in tutorial mode with students  sophie . among the points of interest in programs of these kinds is that they begin to 
provide us with estimates of the amounts of semantic knowledge that are required to represent real-
world domains  and that are acquired by students in their courses at school. 
　　these programs resemble shrdlu  in that almost all of their semantic knowledge about the problem domain is provided to them in the form of built-in or programmed-in data structures and algorithms stored in advance of the presentation of specific tasks. this is especially true of sophie  which has to be supplied with explicit representations of the specific circuits it will later use in its tutorial interaction with students. while both isaac and thermo are supplied with semantic knowledge about the components of the sorts of systems with which they deal  they have the additional capability of assembling those components into specific  instantiated situation descriptions. thus  thermo knows about processes  like heat exchange  devices  like ducts and pumps  and working substances  like steam and nitrogen. it can use this informat ion to generate  for example  a problem about heat exchange through a device where air 
enters at one temperature and pressure  and leaves at another  figure 1 . 	isaac knows about weights  
1
     limitations of space prevent me from discussing speech understanding programs  which also make use of large amounts of stored information in performing their task  but belong to a very different 
species from the programs mentioned here. it would perhaps be less confusing to talk of  speech recognition  rather than  speech understanding   for the purpose of these programs is to find the graphemic transcriptions for oral natural language inputs  and not to understand those inputs. however  some recent speech recognition systems  like hearsay-ii try to attain semantic understanding to aid recognition. see  for example  erman & lesser  1 . 

invited papers-1: simon 1 

levers  pivots  ladders  walls  and the like  and 
can use this information to represent statics problems described  say  in terms of persons standing on ladders that are braced against walls. 
the working fluid of a flow system is air. 
the work.done is 1 lbf.ft/sec. the inlet.temperature is 1 f.. 
the outlet.velocity is 1 ft/sec. 
the heat. input is 1 btu/sec. 
the inlet.area is 1 sq.ft.. 
the inlet.pressure is 1 psia. 
the outlet.area is 1 sq.ft.. 
the outlet.specific.volume is 1 cft/lbm.. what is the outlet.pressure  
	figure 	1. 	example of problem 
generated by thermo 
each of these three programs  then  combines  in varying proportions  two kinds of semantic knowl-
edge:  1  pre-stored general knowledge  and  1  specific knowledge obtained from the problem statement  in the case of thermo  the latter is created by the program itself as it generates problems . programs designed to operate in semantically rich domains can be classified not only with respect to the total amount of semantic information they use  but also with respect to the relative proportions of it they acquire through these two routes. shrdlu and sophie stand at one end of this continuum  relying mostly on pre-stored knowledge  while thermo and isaac lie somewhere closer to the middle. if we were to place an abstracting program like understand on the same continuum  it would lie 
at the other end: 	all of the knowledge it uses is extracted from the problem instructions. 	i will return to this taxonomy later  for i think it has significant implications for the design of understanding systems with broader capabilities than the existing ones. 
the knowledge content of thermo 
　　it w i l l be useful to sketch out a bit more concretely the kinds of knowledge required by a system that is to understand problems in thermodynamics  
and a possible method of storing that knowledge so that it w i l l be accessible. the thermo system is at present limited to steady-state flow problems in chemical 'engineering thermodynamics.1 the in-
formation that thermo possesses about devices  processes  and substances is stored in the form 
1
　　there is as yet no publised description of thermo in the literature. two components  entir and review has been implemented  each capable of generating complete problems  but specialized along different dimensions. a more general program  combining and augmenting the capabilities of the existing components  has been designed but not implemented. an analysis of human problem solving in thermodynamics that provided part of the moti-
vation for the design of the thermo programs will be found in bhaskar ε simon  1. 
of schemas. schemas  in turn  are simply represented as description l i s t s . a working substance  for example  has a name  upper and lower bounds for the values of its state variables  temperature  pressure  e t c .     and equations of state that determine each of these state variables as a function of two of the others. a device is described in terms of its sequence of processes  and the working substances that are admissible for use with i t . a process is described in terms of default values of variables  including variables assumed constant through the process. 
　　in addition to its descriptions of working substances  devices  and processes  thermo holds in 
memory the equations of conservation of energy and conservation of mass. the energy conservation equation is stored in a quite general form that can be specialized  for use in particular problems  by the omission of unnecessary terms. as already mentioned  equations of state are stored with each of the working substances  since these equations are different for different substances  
   thermo makes up thermodynamics problems by selecting  using random numbers when appropriate  
a system that consists of a sequence of devices  possibly including cycles   and a sufficient set of values of input and output variables to determine the behavior of the system uniquely. 	thermo knows that the values of output variables at each stage of a process must equal the input values at the next stage  and that the changes in values 
must zero out over any cycle. various equationcounting procedures are available to the program so that the system will be neither under- nor overdetermined. the program selects a particular variable or variables as dependent variables  selects values for a sufficient set of independent variables  and formulates a problem for the user of computing the values of these dependent variables. 
1
      it is regrettable that minsky has chosen to use the term  frame  instead of  schema  for this concept. i committed a similar sin by using  template  to refer to the schemas  of exactly the same kind  that i employed in the heuristic compiler  1  1 . there are two substantial reasons for preferring  schema.  first  the term has become well established since it was introduced by the psychologist bartlett in 1  and has been 
widely used in this sense by both psychologists and researchers in a r t i f i c i a l intelligence  e.g.  norman ε rumelhart  1  pp.1 . second  
hayes and mccarthy  mccarthy 1- hayes  1; hayes  1  1  had already introduced the term  frame  into the a r t i f i c i a l intelligence literature with an 
entirely different sense  in connection with the so-called  frame problem.  	since using the term in two such disparate ways in the same literature can only cause confusion-and already has- schema  should again become the standard usage. 	it would seem to be a matter of indifference whether  schemas    schemata   or both  are used in the plural  since no confusion can result in either case. 

invited papers-1: simon 

　　since  in the course of constructing a problem  thermo also solves i t   it holds in memory information that could be used for tutoring a student interactively  somewhat in the manner of sophie. it could provide a student not only with feedback on the correct values of particular unknowns  but also about possible solution paths  i.e.  the most convenient order in which to solve the equations in order to reach a conclusion. these tutorial capab i l i t i e s have not yet been implemented. 
the frame problem 
   the frame problem  hayes  1  is the problem of keeping track of the consequences of performing an action or of making some alteration to a representation of a situation. updating the representation of a complex situation as it undergoes successive modifications is a distinctly non-
t r i v i a l task. we need to consider how the frame problem is handled in programs of the sorts we are discussing in this section. 
   the fundamental way in which thermo's understanding exhibits itself is in its ability to 
assemble the information stored in individual schemas associated with devices  substances  and processes into descriptions of compound systems made up of these elements  and to formulate consistent problems   i . e .   instantiations  for these systems. the basis for this understanding  in turn  lies in thermo's means  1  for keeping track of equations and variables so that the system will be just determined  and  1  for equating input and output values of subprocesses to assure consistency  including consistency around loops. 
　　one can identify similar mechanisms in sophie  which has the capability of changing the values of one or more circuit parameters  and then calculating the resulting values of all circuit variables. likewise  the isaac system is able to f i t together components like levers  pivots  and weights into descriptions of a total problem situation  taking account of the constraints at junction points imposed by the physics of the situation  e.g.  the resultant force at each junction must be zero . 
   the mechanisms in thermo  sophie  and isaac for coordinating system components and assembling problem situations from these components may be recog-
nized as solutions of the frame problem for these systems. for  in addition to the descriptive information associated with each schema  informa-
tion is needed that allows the effects of interactions between instantiated schemas to be taken into account. notice that in no case is a general 
solution provided to the frame problem. in each case  the mechanisms for handling interactions derive from the conservation laws peculiar to the semantic domain under consideration--in sophie  the circuit laws  in thermo  laws of conservation of mass and energy  and in isaac  laws of static equilibrium. 
　　in abstract systems  like understand and the other programs discussed in the previous section  the frame problem is handled by assuming that all interactions are explicitly mentioned in the problem formulation-that in the abstract representation of the situation  moves have no implicit side effects. in the domains we are now considering it is the function of a theory of the domain-of elec-
tronic c i r c u i t s   of statics  of thermodynamics--to predict the side effects. the frame problem is solved in each domain by incorporating in the program the capability of using the relevant scientific theory of that domain. hence  we may say that: 
　a system  s  understands a scientific theory  t d   for domain d if it can use its knowledge of t to calculate the consequences  direct and indirect  of assumptions about situations and 
changes in situations in d. 
   a  correct'' theory of any body of phenomena allows inferences to be made from the values of certain variables to the values of others. the simplicity or complexity of the computations required to make these inferences will depend on the mathematical structure of the theory. if the 
theory takes the form of n linear algebraic equations in n variables  then the capability of drawing correct inferences means the capability of 
solving systems of n simultaneous linear equations. if the theory takes the form of a set of linear equations and inequalities  combined with a maximization condition  then the capability of drawing correct inferences means the capability of solving linear programming problems.1 
   we should not  therefore  expect to find something that would constitute a general solution to the frame problem. 	there are as many frame problems as there are forms of mathematical and logical 
systems  and to solve the frame problem for any such system is simply to have an efficient computational algorithm for the theory of systems of that kind. 	for systems operating in semantically rich domains  the frame problem is solved by incorporating in the system a theory of the domain  together with computational algorithms appropriate to a theory having that structure. 
the acquisition of knowledge 
　　it is time now to return to our earlier discussion of knowledge acquisition in systems designed to operate in abstract and semantically rich domains  respectively. one can distinguish two kinds of knowledge acquisition  which in the psychological literature are often called accommodat ion and assimllation  respectively  moore ε newell  1 .1 accommodation involves the acquisition of 
1
      for a further development of this point of view  see simon  1  1  1. in these papers i argue that the attempt to deal with the frame problem by constructing modal logics is misguided  and suggest as the alternative essentially the procedure outlined here. 
l1
     the terms are due to piaget  piaget & inhelder 1   and are used mainly in the literature of chiid development. 

new i n t e r n a l r e p r e s e n t a t i o n s   or the m o d i f i c a t i o n of e x i s t i n g ones. a s s i m i l a t i o n involves r e l a t i n g new information to representations that are already a v a i l a b l e and to information t h a t is already stored in memory. 
　　at a local l e v e l   the assimila t i o n problem a r i s e s i n i t i a l l y in the language parsing stage of a c q u i s i t i o n from the problems of anaphoric r e f e r ence. at a s l i g h t l y more global level   it a r i s e s in a system l i k e understand from the necessity of c o o r d i n a t i n g the representation i t has created of s i t u a t i o n s w i t h the algorithms i t has associated w i t h o p e r a t o r s . in systems l i k e shrdlu and sophie  which contain large amounts of pr e-stored informat i o n   it a r i s e s in accessing the l e x i c a l informat i o n associated w i t h terms in the input t e x t . 
　　consider a system t h a t begins processing a lengthy text without any substantive knowledge of the semantic content of that t e x t . at the beginn i n g   the system is faced w i t h a task of accommodat i o n   for the only meanings it can a t t a c h to the terms of the text are the meanings they acquire from the internal symbol s t r u c t u r e s t h a t the system builds up to represent them. in t h i s sense  
a l l new knowledge begins as   a b s t r a c t   knowledge. as the system proceeds through the t e x t   however  more and more of the content depends for i t s i n t e r p r e t a t i o n upon information that has been presented e a r l i e r   and which has presumably been stored i n t e r n a l l y in some form. in order to process t h i s 
new content a p p r o p r i a t e l y   the system must r e l y less and less upon i t s c a p a b i l i t y for c r e a t i n g representations de novo  accommodation   and more 
and more on i t s a b i l i t y to match new information w i t h information stored in semantic memory  ass i m i l a t i o n   . 
　　for simple a s s i m i l a t i v e tasks  the system needs knowledge-accessing c a p a b i l i t i e s l i k e those possessed by sophie or isaac. for more complex assimi l a t i v e t a s k s   which require the discovery and use 
of metaphoric and analogic r e l a t i o n s between o l d and new knowledge  understanding c a l l s f o r powerful and elaborate matching c a p a b i l i t i e s l i k e those proposed in my heuristic compiler scheme  by moore and newell  1 in t h e i r design for merlin  or by kling  1  in his scheme for theorem proving by analogy. 
　　out of t h i s w e l t e r of p o s s i b i l i t i e s   we begin to see d i r e c t i o n s for the f u r t h e r development of systems to operate in semantically r i c h domains: systems that would not have to be provided w i t h t h e i r f u l l complement of semantic knowledge at the o u t s e t   but that could g r a d u a l l y acquire knowledge of a domain from a continuous input of t e x t   s t a r t i n g w i t h procedures f o r handling a b s t r a c t   i . e .   novel  m a t e r i a l   and gradually s h i f t i n g the burden of processing to procedures for matching new knowledge onto knowledge previously stored--a kind of hybrid between understand-like systems  and isaac- or merlin-like systems. the basic components from which we can manufacture such systems are becoming i n c r e a s i n g l y well understood. 
summary 
　　our discussion of semantically r i c h domains has focused on the frame problem  and upon the need of understanding systems to have strong c a p a b i l i t i e s f o r a s s i m i l a t i o n and accommodation of new informat i o n . a s o l u t i o n of the frame problem for any complex domain w i t h strong i n t e r a c t i o n s among i t s components implies having a theory of the domain  and adequate computational means f o r c a l c u l a t i n g the t h e o r e t i c a l i m p l i c a t i o n s of system changes. 
　　to understand the information that is presented to i t   a system operating in semantically r i c h domains needs both c a p a b i l i t i e s f o r a s s i m i l a t i n g information to i n t e r n a l s t r u c t u r e s it already has  
and c a p a b i l i t i e s 	f o r accommodating 	i n t e r n a l 	s t r u c tures to novel 	i n f o r m a t i o n . 	there now e x i s t systems w i t h some c a p a b i l i t i e s 	in each of these d i r e c t i o n s   and an obvious next d i r e c t i o n of research 	is to t r y to combine them more effectively. 
	conclusion: 	the v a r i e t i e s of understanding 
　　in t h i s paper i have argued that understanding is a r e l a t i o n among a system  one or more bodies of 
knowledge  and a set of tasks the system is expected to perform. the development of understanding systems over the past twenty years has been a kind of two-part fugue  in which the proposal of a class of tasks to be performed generates a set of knowledge requirements for the system; while the knowledge a system a c q u i r e s   in t u r n   enlarges 
i t s c a p a b i l i t i e s f o r understanding new tasks. 	i 
have sketched out a whole sequence of taskknowledge p a i r s that represent  in a rough way  the h i s t o r i c a l course that understanding systems have followed from the o r i g i n s of ai to the present  figure 1 . 
	knowledge 	tasks 
1. syntax 	parse ε store sentences 
1. inference 	procedures 	answer 	questions 
1. intensional 	meaning 	act on real or simu-
	lated 	environment 
1. goal stacks 	give 	reasons for actions 
1. problem-solving 	solve 	problems algorithms 
1. representation represent novel problems generat ion 
1. domain-specific understand semantically schemes r i c h problems 
 ass i m i l a t i o n   
	figure 1. 	the v a r i e t i e s of understanding 
　　the knowledge a v a i l a b l e to e a r l y understanding programs was mainly knowledge of the syntax of english  or some other natural language   and t h e i r understanding was demonstrated by t h e i r a b i l i t y to use that knowledge to encode and s t o r e in memory information presented in natural language  and to recover that information in response to natural language i n q u i r i e s . 
　　a second kind of knowledge t h a t the programs possessed to varying degrees was knowledge of cert a i n rules of i n f e r e n c e   which enabled them to 

invited papers-1: simon 

derive information that was only implicitly presented to them  and to use this implicit information to answer a broader range of inquiries. 	this 
inferential capability was sometimes limited to a 
knowledge of rules of logical deduction  but increasingly incorporated also semantic knowledge 
about the problem domain. 
　　intensional definitions of classes of objects and relations constitute a third kind of knowledge that a system may be equipped to use to answer questions about a real or simulated environment  or to manipulate objects in that environment. in 
these terms  a system  quasi-robot  understands 
what a snark is if it can apply tests that discriminate snarks from non-snarks; it understands what  turn  means if it has knowledge in the form of programs that enable it to execute a turn in response to a command. 
   a fourth kind of knowledge  associated with yet another class of tasks for testing understanding  is knowledge about the reasons for actions. when-
ever a system's program enables it to engage in means-ends analysis in order to select its actions  
it can be programmed to retain knowledge about the 
goal hierarchies it creates  and to use that knowledge to answer  why  questions about its own behav ior. 
　　knowledge of algorithms for solving problems represents a f i f t h basis for understanding. in the case of humans  we test this understanding by measuring the time and effort required to acquire the algorithm  an inverse measure   the ease of its retention  and the range of problems over 
which it can be applied. we may also test it by asking  why  questions about the steps in the algorithm. we judge understanding to be deeper  the 
more successful the problem solver is in explaining the reasons for his actions. 
   a sixth kind of knowledge  knowledge that enables a system to create a representation and operators for a new and unfamiliar problem  can be distinguished from knowledge of how to solve the problem. if the problem is genuinely novel to the system  then understanding requires the ability  accommodation  to abstract the sets of objects and relations the problem is  about   and to encode them in a form that makes them accessible to a system component that understands how to go about solving problems so encoded. 
　　novelty is a matter of degree. that is  a system may have had varying degrees of experience with problems of a given sort  and may have been provided with varying amounts of semantic knowledge about such problems. a system may require not only knowledge of how to abstract and encode a problem text  but also knowledge of how to map terms and sentences contained in that text on knowledge structures already stored in semantic memory  assimilation . such a capability constitutes a seventh kind of knowledge that is required by the compleat understanding system. 
   we do not have any assurance that the l i s t of figure 1 is complete--that there are not other kinds of knowledge and other kinds of tasks to 
which it can be applied. even within the boundaries of this l i s t of problems  it is not evident that the repertory of mechanisms that we have employed in our programs is sufficient for achieving understanding at human or near-human levels; indeed  i would suppose that most researchers in a r t i f i c i a l intelligence would think that they are not. we have no reason to be dissatisfied  however  with the progress we have made in the past two decades toward understanding the 
processes of understanding. we can well echo the sentiments of david hume  in the opening pages of his enquiry concerning human understanding: 
   it becomes. . .no inconsiderable part of science barely to know the different operations of the mind  to separate them from each other  to class them under their proper heads  and to correct a l l that seeming disorder in which they lie involved  when made the object of reflexion and enquiry. . .and if we can go no farther than this mental 
geography  or delineation of the distinct parts and powers of the mind  it is at least a satisfaction to go so far; and the more obvious this science may appear  and it is by no means obvious  the more contemptible s t i l l must the ignorance of it be esteemed  
in all pretenders to learning and philosophy. 
acknowledgements 
this research has been supported by public 
health service grant mh-1 from the national institute of mental health  department of health  education  and welfare  by the advanced research 
projects agency of the office of the secretary of defense  f1-c-1m which is monitored by the air force office of scientific research  and by a grant from the sloan foundation. 
