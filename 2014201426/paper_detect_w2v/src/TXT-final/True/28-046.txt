 
design patterns specify generic relations among abstract design elements. in the domain of physical devices  design patterns  called generic teleological mechanisms  or gtms   specify generic functional relations and abstract causal structure of a class of devices. we describe a functional theory of acquisition  access  and use of gtms  but focus on their use in analogical design. in this theory  gtms are acquired by abstraction over known designs  accessed by goals of adapting a familiar design to meet new design requirements  and used by instantiation in the context of a familiar design. this account of design patterns is one part of a general theory of analogical design called model-based analogy  or mba . the ideal system implements the mba theory for conceptual design of physical devices and evaluates its account of design patterns. 
1 introduction 
design patterns specify generic relations among abstract design elements. the relations are generic in that they are independent of any specific design situation and the elements are abstract in that they do not refer to any specific physical structure. we focus on a specific kind of design patterns that specify generic functional relations and abstract causal structure of a class of physical devices. we call these functional and causal design patterns generic teleological mechanisms  or gtms . the abstract concept of feedback in control systems is one example of a gtm; a generic mechanism for transforming translational motion into rotational motion is another example. the feedback gtm  for example  specifies both the generic function it achieves  e.g.  regulation of a device output  given possible fluctuations in the device input  independent of any specific design situation  and the abstract causal structure that achieves it  e.g.  transmission of information about fluctuations in the device output to a device control input  without reference to the physical structure of any particular device. 
　we describe a functional theory of acquisition  access and use of gtms. in this theory  gtms are acquired by abstraction over known designs  accessed by goals of adapting a familiar design to meet new design requirements  and used by 
cognitive modeling 
ashok k. goel 
college of computing 
georgia institute of technology atlanta  ga 1  usa. 
instantiation in the context of a familiar design. in particular  we hypothesize that knowledge of structure-behavior-function  sbf  models of specific designs enables the acquisition  access  and use of gtms. sbf model of a device specifies the internal causal behaviors of the device that explain how the device works  i.e.  how the device structure delivers its functions. this account of design patterns is one part of a general normative theory of analogical design called modelbased analogy  or mba . the ideal system instantiates the mba theory for conceptual design of physical devices and evaluates its account of design patterns. in this paper  we briefly describe the mba theory  focusing on our hypothesis about sbf models enabling the access and use of gtms in analogical design.  bhatta and goel  1  describes modelbased learning of gtms. 
1 model-based analogy 
the process of mba takes as input a specification of a target design problem in the form of the functional requirements and structural constraints on a desired design  and gives as output a solution in the form of a structure that realizes the specified function s  and also satisfies the structural constraints. in addition  mba gives an sbf model that explains how the structure realizes the desired function. figure 1 illustrates a part of the mba process that pertains to gtms. a stored design analogue in this process specifies  i  the functions delivered by the known design   ii  the structure of the design  and  iii  a pointer to the causal behaviors of the design  the sbf model . the design analogues are indexed both by the functions that the stored designs deliver and by the structural constraints they satisfy. 
　if a source analogue that exactly matches the target problem cannot be found in memory  mba spawns reasoning goals for adapting the source design. different types of functional differences between the target and the source lead to different types of adaptation goals  some requiring only simple modifications  such as parameter tweaks  and some others requiring more complex modifications  such as topological changes . in order to control the reasoning involved in making complex modifications  mba requires knowledge that can encapsulate the relationships between candidate modifications and their causal effects. in device design  design patterns  and  in particular  gtms  provide such knowledge. therefore  mba uses the knowledge of gtms in modifying device topology 


figure 1: a portion of the mba process relating to gtms 

in the source design. mba evaluates a modified design by qualitative simulation of its sbf model. 
sbf device models 
ideal represents its comprehension of specific design cases  i.e.  device models  in a structure-behavior-function  sbf  language  goel et al.  1   this language provides conceptual primitives for representing and organizing knowledge of the structures  behaviors  and functions of a device. in this representation  the structure of a device is viewed as constituted of components and substances. substances have locations in reference to the components in the device. they also have behavioral properties  such as voltage of electricity  and corresponding parameters  such as 1 volts  1 volts  etc. figure 1 a  b  c  illustrates the sbf model of a simple design of gyroscope follow-up: the structure  its function  and the behavior that achieves the function are shown. 
　a function in the sbf models is a behavioral abstraction  and is represented as a schema that specifies the behavioral state the function takes as input  the behavioral state it gives as output  and a pointer to the internal causal behavior of the design that achieves the function. the pair of states indicated by given and makes in figure 1  b  shows the function of the simple gyroscope follow-up. both the input state and the output state are represented as substance schemas. informally  the function specifies that the device takes as input angular momentum of magnitude and clockwise direction at the input  gyroscope  location  and produces a proportional angular momentum of magnitude and of clockwise direction at the output shaft location. fluctuates over a large range  where is large. note that while the 
representation of a specific design may specify fluctuations 
in terms of quantitative tolerance limits  e.g.  l1 and a may be numbers   the representation of a design pattern would specify fluctuations in terms of qualitative abstractions such as small  medium or large  independent of specific quantitative values. 
　the internal causal behaviors in the sbf model of a device explicitly specify and explain how the functions of structural elements in the device get composed into device functions. the annotations on the state transitions express the causal  structural  and functional contexts in which the transformation of state variables  such as substance  location  properties  and parameters  can occur. figure 1 c  shows the causal behavior that explains how angular momentum from the input gyroscope location is transferred to the output shaft location. the functional context specified by the annotation usingfunction in transition1 indicates that the transition occurs due to the primitive function  create angular momentum  of hydraulic-motor. 
design patterns 
ideal represents gtms as bf  behavior-function  models using a subset of the sbf language as above. the sbf representation of a gtm encapsulates two types of knowledge: knowledge about the patterns of differences between the functions of known designs and desired designs that the gtm can help reduce; and knowledge about patterns of modifications to the internal causal behaviors of the known designs that are necessary to reduce the differences. that is  it specifies relationships between patterns of functional differences and patterns of behavioral modifications to reduce those functional differences. for example  figures 1  a  &  b  respectively show these two types of knowledge for a partial model of 
bhatta & goel 

figure 1: feedback mechanism ideal learns 
the feedback mechanism.1 figure 1  a  shows the patterns of functions f  and f1 respectively of a candidate design available and the desired design  and the conditions underwhich the mechanism is applicable. because of the tasks for which they are used in mba  the gtms are indexed by the patterned functional differences such as shown in figure 1  a   i.e.  the fluctuations in the output substance property values in the candidate design function and the desired design function respectively are large and small . the model of the feedback indicates that the desired behavior  b1  can be achieved by modifying the candidate behavior  b   through setting up the indicated causal relationships between the latter and the ad-
ditional behaviors  that achieve the subfunctions of f1 other than f  characterized in the conditions of the mechanism . in particular  the feedback mechanism suggests the addition of a causal link from a change in the output substance state to a change in an earlier state  input state or intermediate state  in the candidate behavior so that the effective input to the device is modified. figure 1  b  shows the relationships in the model of the feedback that ideal learns from two designs of amplifiers  one without feedback and the other with feedback .  bhatta and goel  1; 1  provide a detailed account of the learning task and method. 
1  feedback can be open loop or closed loop. the feedback mech-
figure 1: simple design of gyroscope follow-up  without 
anism described here is one type of closed-loop feedback in which 
feedback control  	the output substance  fedback substance  and the input substance are all same. 
cognitive modeling 

1 access and use of gtms 
let us now consider a design problem in the domain of mechanical controllers presented to ideal. the new problem has a functional specification that given the substance angular momentum with a magnitude of  and clockwise direction at an input location  gyroscope   the device needs to produce the angular momentum with a magnitude  proportional to the input and the same direction at a specified output location. it also specifies the constraint that the output cannot fluctuate much around an average value where  is small . this is the problem of designing a gyroscope 
follow-up  hammond  1 . 
　let us consider the knowledge condition in which the design of a device  figure 1  which transfers angular momentum from a gyroscope to an output shaft location is available in ideal's analogue memory  or is given explicitly as part of the adaptive design problem . given an input angular momentum of magnitude li and clockwise direction at the input  gyroscope  location  this device produces a proportional angular momentum of magnitude and of clockwise direction at the output shaft location; however  fluctuates over a large range  is large. ideal retrieves 
 if not given explicitly  the design of gyroscope control system available in its memory because the desired function matches with the function of this design. that is  the function of this available device is similar to the function of the desired design in that the input states are identical and the output states differ in a parameter value and a constraint on that value. 
　now  the task for ideal is to modify the available design of gyroscope control system  figure 1  to deliver the desired function. simple modifications such as replacing a component in the given design analogue will not result in a device that can solve the new design problem because there is no single component in the device that seems responsible for the large fluctuations and that which may be selected for modification. the issue becomes if and how ideal can modify the device topology using the knowledge of gtms. 
　ideal first retrieves the relevant gtm: it uses the difference in the functions of the candidate and desired designs as a probe into its memory because it indexes the mechanisms by the functional differences and the decomposability conditions on the desired functions. it retrieves the feedback mechanism because the current functional difference  namely  the fluctuation in the output property being large vs. small matches with the difference that the feedback mechanism reduces which is specified in a device-independent manner. then  it tries to match the decomposability condition on the desired function in the feedback mechanism  see figure 1 a  for the condition with the desired func-
tion in order to find the subfunctions /  or g  that need to be designed for and composed with the candidate function. by performing this match  as guided by the language of sbf models  ideal finds the subfunction 
it needs to design for a structure that takes two inputs  angular momentum with a magnitude of and angular momentum with a magnitude of and gives as output an angular momentum of in the opposite direction at the location of pivot in the candidate design. 
　next ideal instantiates the retrieved gtm in the context of the target problem. the algorithm for ideal's process of instantiating the gtms is shown in figure 1. when the abstractions are gtms  this process involves designing for the subfunction s  determined by matching the applicability conditions of the mechanism  in steps 1 & 1 of the algorithm  and composing the new sub-behavior s  with the behavior of the candidate design as per the relationships specified in the retrieved mechanism  in step 1 . let us walk through the algorithm as it applies to the current example. step i is to select the behavior relevant for the function of the available design. since the function in an sbf model of adevice directly points to the behavior relevant for that function  this step is trivial. in the current example  b  is the behavior shown in figure 1 c . step 1 is to identify bindings for variables in the retrieved gtm  in particular  in the subfunctions to be designed for. some of the bindings for the state variables are obtained while doing the matching for the retrieval of the gtm itself. as described above  in the current example  ideal finds the subfunction / to be because  val 1 is the value of the property  whose output values in the desired and retrieved functions are different  in the initial state of b1 and  val1 is the value in the final state of b . like in this example  even after step 1  some other variables such as still need to be bound with specific values from the behavior of the available design. step 1 is exactly for doing that: the idea is to trace the relevant behavior of the available design  b1  backwards from the final state to the initial state  and identify the intermediate states that are possible candidates for the states of the subfunctions. in the current example  ideal needs to find a candidate state from b  that could be the output state of the subfunction /. as it traces back the behavior shown in figure 1  the first state to be considered is  but since it describes a substance  linear momentum  different from what the substance  angular momentum  is from the bindings in step 1  this state cannot be a candidate. next  it considers which is the only state left and which is a candidate for the output state of /. if statey were to describe angular momentum  it would also have been a candidate. in such a case  ideal would have chosen state1 the state nearest to the final state of b . the rationale in this is that the modification selected should cause as minimal disturbance in the candidate behavior as possible  which means modifying the state as near to the final state as possible in order to solve the problem. since  is selected in the current example  ideal gets the binding for  vall' from this state  and it has all parts of the subfunction specified. 
　since the subfunction has multiple states  step 1 is relevant. in the current design scenario  the subfunction ideal needs to design really has two parts  as it takes two inputs and produces one output : one that specifies the need for transferring angular momentum from the input location to the pivot location  and the other for transferring angular momentum from 
the output shaft location to the pivot location. applying step 
1  we can find that  really covers the transfor-
bhatta & goel 

input: t m1  the sbf model of the design analogue  and its function f . 
  f1  the desired function. 
  g  a gtm  retrieved by matching 
output:   m1  the sbf model of the new device that achieves f1  procedure: begin 
 1  select the behavior b  in m  relevant to f . 
 1  bind the initial & final states of b  to the appropriate given and makes states of the subfunctions / and g in g. 
 1  if  an unbound state variable in / or g then backtrace b  to rind states in b  that may be modified  considering the bindings from step 1. 
 1  if  multiple candidate states for modification then select the state that is nearest to the final state in b . 
 1  compute values of unbound state variables in / and g based on 
the selected state   and parameter-relations in b1 . 
 1  if 1 multiple given or makes states in / or g then check if  that achieves the transformation from any of the given states to any of the makes states in / or g. 
 1  if yes then / = rest of the transformation in /. 
 i.e.     given-states /  initial-state 1    
　　　　 makes-states /  final-state b    .  g = rest of the transformation in g. 
 i.e.     given-states g initial-state 1    
 makes-states g  final-state b    .  
 1  retrieve subdesigns for / and g . 
 1  if no subdesigns for / or g then fail. 
 1  else 
 1.1  adapt the retrieved subdesigns for f and g'  if necessary . 
 1.1  compose bf  the behavior for f'   and   the behavior for g   with as per the relationships in g. 
 1.1  propagate the resulting changes in state variables forward in b  and in the dependent behaviors in m1. 
end. 
figure 1: ideal's method for instantiating a gtm mation 	and the remaining transformation 
 /'  in / is that is  the first part is already designed for in the candidate design as the behavior segment 
 figure 1 c   achieves it. therefore  in successfully instantiating the mechanism in the candidate design of gyroscope follow-up  ideal only needs to find a behavior  and a structure  that accomplishes the second part of the subfunction  /'  given the context of the first transformation. 
　let us consider the knowledge condition in which ideal has the knowledge of a component  called worm  whose function is to transfer an input angular momentum to an output location with the magnitude proportional to the output component and the direction dependent on the direction of threading on the worm. this component reverses the direction of the input angular momentum. in step 1  given the subfunction /'  ideal retrieves that component because the desired part of the subfunction matches with the component's function. it substitutes the appropriate parameters in the behavior of the retrieved design  i.e.  worm  to generate a behavior for the desired subfunction. then it composes that behavior  i.e.  #1  with the behavior of the candidate design  i.e.  b1 as per the specification of the causal relationships in the feedback mechanism  as in figure 1 b   to propose a behavior  shown in figure 1 b   for achieving the desired function. note that the resulting modification is non-local in that it modifies the device topology  see the structure of the desired device in figure 1 a  . it finally propagates the changes in states resulting from composing the subdesign's behavior with b1 forward to the final state or until a state is revisited. 
1 evaluation 
ideal provides a testbed for experimenting with the mba theory. we conducted several kinds of experiments with ideal that evaluate the mba theory for its acquisition  access  and use of gtms. one kind of experiment contained two steps. the first step involved giving ideal a pair of designs  one without any instance of gtm and the other with an instance of a gtm  and testing ideal's ability to learn a bf representation of the gtm instantiated in one of the two input designs. in the second step  ideal is given a design problem  from a different domain in some cases  such that it would need to access and use a previously learned gtm in order to solve the given problem. we verified if it can autonomously recognize the applicability of a gtm and successfully access and use it to solve the given problem. we conducted 1 such experiments with different combinations of design sources and target problems from 1 different design domains involving 1 distinct designs. the largest design had about 1 structural elements and 1 structural relations  and 1 inter-dependent behaviors in its sbf model. we tested ideal's learning of 1 different gtms and its use of 1 of them. in all these cases  ideal was successful in learning gtms  and in accessing and using them in solving design problems. the behavior of ideal in these experiments led us to conclude the following four results: 

cognitive modeling 

 1  computational feasibility and efficacy: ideal successfully addresses the multiple tasks in the mba theory  for 


figure 1: the design of gyroscope follow-up instantiating the feedback mechanism 
example  the tasks of learning  accessing  transferring and using gtms. 
 1  uniformity of representations: the different tasks in the mba theory impose constraints on one another. they also impose different constraints on the design knowledge representations. ideal uses the same sbf language for addressing the different tasks. the gtms  for example  are represented in a bf language that is a subset of the sbf language. the design analogues too are indexed in the sbf vocabulary. 
 1  generality of domains: as mentioned above  ideal presently contains about thirty design analogues from four different device domains  namely  the domains of simple electric circuits  heat exchangers  electronic circuits  and complex mechanical devices  such as momentum controllers and velocity controllers . this includes the design problem used as an illustrative example in this paper  which was taken from a classical textbook on mechanical design  hammond  1 . 
 1  generality in terms of different gtms: ideal presently covers six different gtms: cascading  four different types of feedback  and one type of feedforward. 
1 	related research 
the notion of design patterns can be traced at least as far back as christopher alexander's  notes on the synthesis of form in which he provides a conceptual analysis of evolutionary design of village centers in rural india in terms of topological design patterns. recently gamma et al  have analyzed designs of object-oriented programs in terms of patterns of data and control flow  and described a library of twenty three reusable patterns for supporting interactive object-oriented programming. but insofar as we have been able to determine  at present there is no computational theory  other than mba  of automated acquisition  access and use of design patterns. the mba theory not only identifies gtms as a useful class of design patterns in the domain of physical devices  but also shows that knowledge of sbf device models is sufficient for enabling automated acquisition  access and use of gtms. 
　our theory of design patterns is also related to gero's theory of design prototypes   1 . like our design patterns  his design prototypes too specify functional relations and causal structures in a class of devices  but  unlike a design pattern  a design prototype also specifies the generic physical structure of the device class. while a design prototype is a generalization over design cases such that a case is an instance of a prototype  a design pattern is an abstraction over design prototypes such that a design prototype is a subclass of a design pattern. ideal too contains design prototypes as an intermediate abstraction between design cases and design patterns  but uses only the latter for analogical transfer. if the sbf model of the retrieved design case indicates that a local  i.e.  parametric or componential  modification would be sufficient for meeting the new design requirements  then the system simply adapts the retrieved design. but if the sbf model does not identify a local modification  then the system accesses and instantiates a relevant design pattern to make a  non-local   i.e.  topological  modification. furthermore  gero's theory of analogical design uses a process similar to that of the structure-mapping engine  sme   falkenhainer et al.  1  to abstract causal behaviors at transfer time. in contrast  in mba  design patterns are abstracted at storage time and acquired for potential reuse  and the process is different. 
　phineas  falkenhainer  1   which evolves from sme  also uses high-level abstractions for establishing correspondence between the source and the target situations. but it provides neither any content account of the high-level abstractions nor a process account of their acquisition. mba provides both a content account of generic abstractions in relation to device design  and also a process account of the acquisition  access  and use of the abstractions. as in  kedar-cabelli  1   the generic abstractions in mba are purpose-directed. in particular  in mba the design patterns are indexed by the problem-solving goals stated in terms of functional differ-
bhatta & goel 

ences between two design situations. 
　case-based theories of design mostly involve direct transfer of the structure of familiar designs to new design situations. that is  the transfer is not mediated by high-level abstractions. in some case-based theories  e.g.  shinn  1   however  high-level abstractions do enable case reminding  but still play little role in analogical transfer. also  the high-level abstractions in these case-based theories are generalizations over features of a problem  and do not specify relations that characterize a problem and its solution. finally  design adaptations in case-based design are in general limited to local  typically parametric  design modifications. 
　the mba theory evolves from an earlier theory of case-based design called adaptive modeling  goel 1a; 1b . the adaptive-modeling theory described casespecific structure-behavior-function  sbf  models. it showed how case-specific sbf models enable local  i.e.  parametric or componential  modifications to source designs for solving target design problems. it also showed how case-specific sbf models of new designs can be acquired by adapting the models of known designs. stroulia and goel  described how case-independent generic models enable topological modifications to source designs in the same domain as that of target problems. bhatta and goel   1; 1  showed how generic models can be acquired by abstraction over case-specific sbf models. the mba theory completes the circle by showing how generic models mediate analogical transfer of design knowledge from the source domain to a target domain  e.g.  from amplifiers to gyroscopes . 
1 conclusions 
design patterns in general specify generic relations among abstract design elements. gtms  that specify generic functional relations and abstract causal structure of a class of devices  are a kind of design patterns useful for conceptual device design. in particular  gtms mediate analogical transfer of design knowledge from one device domain to another  and enable topological modifications to familiar designs for meeting new functional requirements. sbf model of a specific device specifies the internal causal behaviors of the device which explain the functioning of the device. the sbf ontology provides a language for representing gtms and a vocabulary for indexing them. in addition  knowledge of sbf models of familiar designs appears sufficient for acquisition  access  and use of 
gtms. 
acknowledgments 
this paper has benefited from numerous discussions with members of the intelligence and design research group at georgia tech. this work has been supported in part by research grants from nsf  iri-1 and dmi-1  and onr  research contract n1-j-1 . 
