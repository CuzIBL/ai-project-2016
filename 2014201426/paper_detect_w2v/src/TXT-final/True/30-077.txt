 
in automated negotiation systems consisting of self-interested agents  contracts have traditionally been binding. leveled commitment contracts-i.e. contracts where each party can decommit by paying a predetermined penalty were recently shown to improve pareto efficiency even if agents rationally decommit in nash equilibrium using inflated thresholds on how good their outside offers must be before they decommit. this paper operationalizes the four leveled commitment contracting protocols by presenting algorithms for using them. algorithms are presented for computing the 
nash equilibrium decommitting thresholds and decommitting probabilities given the contract price and the penalties. existence and uniqueness of the equilibrium are analyzed. algorithms are also presented for optimizing the contract itself  price and penalties . existence and uniqueness of the optimum are analyzed. using the algorithms we offer a contract optimization service on the web as part of  'mediator  our next generation electronic commerce server. finally  the algorithms are generalized 
to contracts involving more than two agents. 
1 	introduction 
in multiagent systems consisting of self-interested agents  contracts have traditionally been binding  rosenschein and zlotkin  1; sandholm  1; kraus  1 . once an agent agrees to a contract  she has to follow through no matter how future events unravel. although a contract may be profitable to an agent when viewed ex ante  it need not be profitable when viewed after some future events have occurred  i.e. ex post. similarly  a contract may have too low expected payoff ex ante  but in some realizations of the future events  it may be desirable when viewed ex post. normal full commitment contracts are unable to take advantage of the possibilities that such future events provide. 
　on the other hand  many multiagent systems consisting of cooperative agents incorporate some form of decommitment in order to allow agents to accommodate 
   *thi1 material is based upon work supported by the national science foundation under career award iri-1  grant iri-1 and grant iis-1. new events. for example  in the original contract net protocol  smith  1   the agent that contracts out a task could send a termination message to cancel the contract even when the contractee had partially fulfilled it. this was possible because the agents were not selfinterested: the contractee did not mind losing part of its effort without a monetary compensation. similarly  the role of decommitment among cooperative agents has been studied in meeting scheduling  sen  1 . 
   contingency contracts have been suggested for utilizing the potential provided by future events among selfinterested agents  raiffa  1 . the contract obligations are made contingent on future events. in some games this increases the expected payoff to both parties compared to any full commitment contract. however  contingency contracts are often impractical because the space of combinations of future events may be large and unknown. also  when events are not mutually observable  the observing agent can lie about what transpired. 
   leveled commitment contracts are another method for capitalizing on future events  sandholm and lesser  1 . instead of conditioning the contract on future events  a mechanism is built into the contract that allows unilateral decommitting. this is achieved by specifying in the contract the level of commitment by decommitment penalties  one for each agent.1 if an agent wants to decommit-i.e. to be freed from the obligations of the contract-it can do so simply by paying the decommitment penalty to the other party. the method requires no explicit conditioning on future events: each agent can do her own conditioning dynamically. no event verification mechanism against lying is required either. 
　principles for assessing decommitment penalties have been studied in law  calamari arid perillo  1; posner  1   but the purpose has been to assess a penalty on the agent that has breached the contract after the breach has occurred. similarly  penalty clauses for partial failure -such as not meeting a deadline-are commonly used in contracts  but the purpose is usually to motivate the agents to follow the contract. instead  in leveled commitment contracts  explicitly allowing decommitment from the contract for a predetermined price is used as an active method for utilizing the potential provided by an uncertain future.1 the decommitment possibility increases each agent's expected payoff under very 

general assumptions  sandholm and lesser  1 . 
　we analyze contracting situations from the perspective of two risk neutral agents each of which attempts to maximize his own expected payoff: the contractor who pays to get a task done  and the contractee who gets paid for handling the task. handling a task can mean taking on any types of constraints. the method is not specific to classical task allocation. the contractor tries to minimize the contract price that he has to pay. the 
contractee tries to maximize the payoff  that she receives. 
　　we study a setting where the future of the agents involves uncertainty. specifically  the agents might receive outside offers.1 the contractor's best outside offer  is only probabilistically known ex ante by both agents  and is characterized by a probability density function if the contractor does not receive an outside offer  corresponds to its best outstanding outside offer or its fallback payoff  i.e. payoff that it receives if no contract is made. the contractee's best outside offer is also only probabilistically known ex ante  and is characterized by a probability density function if the contractee does not receive an outside offer  corresponds to its best outstanding outside offer or its fall-back payoff.1 the variables  and  are assumed statistically independent. 
　　the contractor's options are either to make a contract with the contractee or to wait for  similarly  the contractee 's options are either to make a contract with the contractor or to wait for  the two agents could make a full commitment contract at some price. alternatively  they can make a leveled commitment contract which is specified by the contract price  the contractor's decommitment penalty  a  and the contractee's decommitment penalty  1. we restrict our attention to contracts where a  1 and b  1  i.e. agents do not get paid for decommitting. the contractor has to decide on decommitting when he knows his outside offer but does not know the contractee's outside offer similarly  the contractee has to decide on decommitting when she knows her outside offer but does not know the contractor's. this seems realistic from a practical automated contracting perspective. 
　the theory of these leveled commitment protocols was presented by  sandholm and lesser  1   but to date no algorithms have been presented for agents to compute when they should decommit given a contract  or for agents to choose beneficial contracts. this paper operationalizes leveled commitment contracts by presenting an algorithm for computing how the agents should de-
there is a constant inflow of agents  and they have a time cost for searching partners of two types: good or bad  diamond and 
maskin  1 . 
commit  section 1   and an algorithm for constructing the optimal leveled commitment contract for any given setting defined by  and   section 1 . 
1 	nash equilibria for a given contract 
one concern is that a rational agent is reluctant in decommitting because there is a chance that the other party will decommit  in which case the former agent gets freed from the contract  does not have to pay a penalty  and collects a penalty from the breacher.  sandholm and lesser  1  showed that despite such insincere decommitting the leveled commitment feature increases each contract party's expected payoff  and enables contracts in settings where no full commitment contract is beneficial to all parties. to set the context  we first review their analysis of how rational agents would decommit  i.e. we derive the nash equilibrium  ne   nash  1  of the decommitting game where each agent's decommitting strategy is a best response to the other agent's decommitting strategy. the new contributions begin in section 1. 
　the contractor decommits if he gets a low enough outside offer  e.g.  he can get his task handled at a low cost. we denote his decommitting threshold by  so his decommitting probability is 
	 i  
　the contractee decommits if she gets a high enough outside offer  e.g.  gets paid for handling a task. we denote her decommitting threshold by  so her decommitting probability is 
	 1  
1 	sequential decommitting  seqd  game 
in our sequential decommitting  seqd  game  one agent has to reveal her decommitting decision before knowing whether the other party decommits. while our implementation analyzes both orders of decommitting  due to space limitations we only discuss the setting where the contractee has to decide first. the case where the contractor decides first is analogous. there are two alternative leveled commitment contracts that differ on whether or not the agents have to pay the penalties if both decommit. 
　if the contractee has decommitted  the contractor's best move is not to decommit because 
 because a  1 . this also holds for a contract where neither agent has to pay a decommitment penalty if both decommit since  in the subgame where the contractee has not decommitted  the contractor's best move is to decommit if  
	 1a  
　　the contractee gets  if she decommits  if she does not but the contractor does  and if neither decommits. thus the contractee decommits if  
this is equivalent to 
1 and 1  1. in other 
words  if the contractee surely decommits  the contractor does not. on the other hand  the above is equivalent to 

	1 	uniqueness of the nash equilibrium 
we now consider uniqueness of the nash equilibrium. 
proposition 1 for the sequential games  the ne is unique. for the simultaneous games the ne need not be unique. 
proof. for the sequential games  uniqueness follows from the forms of  1  and  1 : one threshold is expressed as a function of p and a penalty  and the other is defined as a function of this threshold. fig. 1 shows an example where multiple equilibria exist for a simudbp game. we constructed a similar example for simudnp. d 
1 algorithm for finding the nash equilibria 
we now discuss the algorithm for computing the nash equilibria. we assume that the probability density functions  and  are piecewise linear with n and m pieces respectively. this is reasonable since any continuous function can be approximated arbitrarily closely by a piecewise linear curve  and piecewise linear curves are easy for the user to input. 
　the algorithm for computing the equilibrium of a sequential game is straightforward. it simply substitutes the contract parameters  p a 1  into  1  and  1 . 
	sandholm  sikka  and norden 	1 


1 	distributed al 

occur in a gap in / or g. in such cases  there necessarily is another pair of optimal thresholds where the old optimal threshold that was in the gap is now at the end of the gap. this is because the probability mass in the gap is zero so moving a decommitting threshold to the end of the gap cannot affect the path of play. therefore  we can restrict our analysis to the case where and 

the first order constraints above are satisfied if  
conditions give a pair of simultaneous equations: 
 1  
 1  
equation  1  describes  as a function of  and equation  1  gives  as a function of  a local optimum of  exists where the curves intersect. they may or may 
not intersect  and they can intersect at multiple points: 
proposition 1 	curves  1  and  1  intersect if  
 and they do not intersect otherwise they may or may not intersect. the intersection point is unique if  
curves represent strictly increasing functions  the first derivatives are always positive . note that  
thus they intersect 
this intersection point is 
　　　　　　　　　　　　they do not intersect otherwise they may or may not intersect.  
   figure 1 shows that  1  and  g  can intersect at multican have multiple  local  optima. 
　　we now show that if these locally optimal solutions exist  they lie within the feasible set  i.e. there exists a nonempty range  lb  ub  for the contract price which satisfies the ir constraints. we derive lb and u b using the expressions for and the iii constraints   
seqd: 

　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　for simudnp  this occurs from the form of the integrals  and the fact that they are always between 1 and 1 because they are defined over probability density functions. for each game above  
which can be shown true by the form of  1  and  1 . 
1 	a l g o r i t h m for f i n d i n g o p t i m a l contracts 
our algorithm determines the optima by computing the intersection points of curves  1  and  1 . multiple solutions might exist  which rules out the use of iterative methods that only find one solution. our algorithm uses the same rectangular decomposition as our equilibrium finding algorithm presented above. in each rectangle it 
1. solves t1 t1 t1  and t1 to get quadratic equations for them  because  and | are linear within the rectangle . 
1. substitutes these into  1  and  1 . 
1. substitutes  from  1  into  g . 
1. reduces the resulting equation to a 1th degree polynomial in  
1. solves for the roots of this polynomial. 
1. calculates the corresponding values of  from  1 . 
1. accepts solutions  that lie in the rectangle. the algorithm runs in 1{nm  time because it is o 1  within each rectangle  and there are 1 nm  rectangles. finally  the candidate set of local optima is scanned for global optima. 
1 	t h e fair o p t i m a l contract 
an optimal pair  defines a set of welfare maximizing contracts  p a b  which differ based on how the excess-i.e. expected gain over full commitment contracts-is divided among the contract parties. our implementation shows all the optimal feasible contracts to the user and visualizes how the different choices lead to different division of expected payoff  and  as linear functions of p   lb ub  . it also suggests a fair contract which divides the excess equally. it  turns out that the fair contract price is p =  the fair values for the penalties are then calculated using  1  and 
 1 . 
1 	implementation 
using the algorithms of this paper  we provide a clientserver based contract optimizing service on the web  http://ecommerce.cs.wustl.edu/contracts.html  as part of emediator  our next generation electronic commerce server. the client  a java applet  implements the 
	sandholm  sikka  and norden 	1 

gui and communicates to the server over the web using cgi/perl. the server  written in c  executes the computations. the client accepts piecewise linear functions  and  the user can input these graphically or as text. each probability density functions is automatically scaled so that its integral is 1. the output interface displays either the decommitting thresholds and probabilities for a given contract  or the optimal feasible contracts together with the fair optimal feasible contract. 
　the server computes the roots of polynomials in our rectangular decomposition algorithms. we use laguer's root finding method to compute the roots  press et al.  1 . it finds all roots simultaneously and polishes roots to reduce numerical imprecision. if the roots are close to the boundaries of the rectangle  imprecision may result in these roots being calculated just outside the rectangle. to accommodate for this  we extend the rectangle in all directions by  that allows us to capture all those roots that would otherwise be overlooked. 
1 	generalization to 1-agent contracts 
the method can be generalized to contracts involving more than two agents. we demonstrate this via 1-agent games. let there be one contractor   and two contractees  b and c. if even one party decommits the contract breaks down between all 1 parties. let the density functions of outside offers be and 
1r constraints are and 
the contract price  p  paid by the contractor  is paid in two parts  to c. the decommitment 
penalties are 
　the sequential game will have 1! variants depending on the decommitting order. the simultaneous games differ based on whether two parties on simultaneous decommitment pay each other or not. due to limited space we only present the formulae for simudbp: 

these expressions are analogous to 1-agent simudbp. 
we get similar expressions for  our rectangular decomposition algorithms for computing the nash equilibria extend by using cuboids instead of rectangles. nonuniqueness extends to this case. the optimization problem also has similar characteristics.  is a function of  solving for the roots of the first derivatives yields three equations in three variables. our rectangular decomposition algorithms for calculating the 
1 	distributed al 
optima extend to this case by using cuboids instead of rectangles. similar expressions/results occur for the 1agent generalization of simudnp. 
1 	conclusions 
leveled commitment contract are a practical way of capitalizing on future uncertainties in negotiation among self-interested agents. this paper operationalizes them by presenting two algorithms. the first one takes a given contract and computes the nash equilibrium decommitting thresholds and decommitting probabilities for rational agents. the second algorithm optimizes the contract price and penalties so as to maximize the sum of the agents' expected payoffs -taking into account that agents decommit insincerely. using these algorithms  a contract optimizing service is provided on the web. 
