 
we present a theorem-prover for quantified 
boolean formulae and evaluate it on random quantified formulae and formulae that represent problems from automated planning. even though the notion of quantified boolean formula is theoretically important  automated reasoning with qbf has not been thoroughly investigated. universal quantifiers are needed in representing many computational problems that cannot be easily translated to the propositional logic and solved by satisfiability algorithms. therefore efficient reasoning with qbf is important. the davis-putnam procedure can be extended to evaluate quantified boolean formulae. a straightforward algorithm of this kind is not very efficient. we identify universal quantifiers as the main area where improvements to the basic algorithm can be made. we present a number of techniques for reducing the amount of search that is needed  and evaluate their effectiveness by running the algorithm on a collection of formulae obtained from planning and generated randomly. for the structured problems we consider  the techniques lead to a dramatic speed-up. 
1 	introduction 
many computational problems can be conveniently formulated in classical propositional logic. examples of such are many constraint satisfaction problems  forms of planning  and many problems in graph-theory. a common property of these problems is that they belong to the complexity class np and that there are therefore polynomial-time translations from them to the satisfiability of formulae in the classical propositional logic. 
　however  there are many important problems that are  under plausible complexity-theoretic assumptions  outside the complexity class np  and therefore cannot be in general efficiently translated to the problem of satisfiability of propositional formulae. many such problems are pspace-hard or harder and can be forced to np only by making restrictions that make the problems lose most of 
1 	search 
their practically interesting aspects. there are  however  a number of problems that belong to the classes in the polynomial hierarchy  many of them to its lower levels. these include determining the truth-value of quantified boolean formulae  meyer and stockmeyer  1   computing the radius of a covering code  mcloughlin  1   many decision problems in nonmonotonic logics  gottlob  1   some forms of abduction  eiter and gottlob  1   and determining the vapnik-cervonenkis dimension in probability theory  schafer  1 . 
　like satisfiability algorithms can be used for solving problems in np  a similar approach is applicable to problems higher in the polynomial hierarchy: implement an efficient decision procedure for one problem  and give good polynomial-time translations from other problems to that problem. the use of qbf this way has not been investigated partly because there have been no efficient decision procedures. translation to qbf1 has recently been proposed as a solution method for conditional planning  rintanen  1 . 
　in this work we present an algorithm for determining the truth of quantified boolean formulae  and evaluate it with randomly generated quantified boolean formulae and formulae from conditional planning. 
1 	preliminaries 
 quantified 	boolean 	formulae 	are 	of 	the 	form  where  is a propositional formula and the prefix consists of universal  and existential  quantifiers qi and the propositional variables  occurring in  as the formula obtained from  by re-
placing occurrences1 of the propositional variable x by the formula  the truth of formulae is defined recursively as follows. the truth of a formula that does not contain variables  that is  that consists of connectives and the constants true and false  is defined by the truth-tables for the connectives. a formula is true if and only if is true. a f o r m u l a i s true if and only if ire true. examples of true formulae are and the formulae 	are false. 
1
   we assume that nested quantifiers do not quantify the same variable. 

procedure 	decide 
begin 
c := unit c ; 

	if e 	then 

	then return 	true; 
else 
if not 
	then 	return false; 
	return 	
end 
figure 1: the algorithm 
1 	the basis algorithm 
we have designed and implemented an algorithm that determines the truth-value of quantified boolean formulae. the davis-putnam procedure  davis et a/.  1  is a special case of the algorithm. the main differences are that instead of only or-nodes  the search tree* for quantified boolean formulae contains also arid-nodes that correspond to universally quantified variables  and that the order of the variables in the prefix constrains the order in which the variables generate a search tree. 
the main procedure of the algorithm sketched in 
figure 1 takes three parameters.1 the variable e is true if the first  quantifier in the prefix of the formula is the sequence represents the prefix. for example  if the prefix is then and the set c 
consists of clauses w h e r e a n d are literals. the empty clause is false. 
　the subprocedure unit performs simplification by unit resolution and unit subsumption; unit 1  is defined as the fixpoint of f under a set of clauses. 

so for the purposes of this paper  our definition of unit subsumption retains unit clauses in the clause set. 
1 	pruning techniques 
an important difference between the davis-putnam procedure and the algorithm for qbf is that the order in which branching variables are chosen is dependent on 

figure 1: inversion of quantifiers 
their location in the prefix. the branching variable is always quantified by the outermost quantifier. in structured problems it is often the case that many of the first variables occur onlv in clauses that also contain variables quantified by inner quantifiers  and an almost exhaustive search through all truth-values for the variables may be needed because unit propagation does not yield the truth-values. already for a small number of variables this can be prohibitively expensive;. for example in a formula  the variables in a' 
induce a search tree with 1 leaf nodes  with a potentially difficult qbf to evaluate in each. 
　in this section we first propose two pruning techniques that are based on reasoning with variables that are not quantified by the current outermost quantifier. the third technique is an extension of the use of unit propagation for detecting failed literals  and the fourth reduces the computation needed in going through all valuations of universally quantified variables. 
1 	i n v e r t i n g quantifiers 
given 	it is useful to look also at the formula 
                 if for- some valuation of variables in y only certain valuations of a  are possible  these valuations are the only possible ones also for the formula 
　　the technique we propose is based on the above idea  and we therefore call it the inversion of the quantifiers. we randomly assign some truth-values to variables in y  it  may be possible and useful to try out all possible valuations of v   and then try to detect failed literals with unit propagation  li and anbulagan  1 . any truth-values obtained for variables in x are those that must be chosen when evaluating inversion is only applicable to formulae with as the first quantifier. the program code in figure 1 outlines how quantifier inversion is performed. this code is run before the first call to the main procedure is made. the function  produces a set of unit clauses from a set of literals. 
	'the formula 	may contain quantifiers. 
	rintanen 	1 

end 
end 
figure 1: sampling 
1 	sampling 
when choosing a truth-value for a variable  in a formula  it would be useful to check that the choice is possible under all valuations of variables in y. this is  however  expensive. nevertheless  it has turned out that trying out at least some valuations of y and performing unit propagation helps in the detection of wrong choices. the valuations of a small number of variables in y are chosen randomly. we call this sampling of y. this technique is similar to the first one  but because it is performed for many variables in every node of the search tree  valuations of y cannot be covered very exhaustively. 
　sampling is best combined with the use of unit propagation in choosing branching variables and detecting failed literals  but here we describe it separately. the program code in figure 1 outlines how sampling is performed. the code is inserted right after the first call to the function unit in the main procedure. 
1 	failed literal detection 
the third technique is the use of unit propagation for detecting failed literals  li and anbulagan  1  also for variables quantified by inner quantifiers. this proceeds by adding a literal to the clause set  and then performing unit propagation. if an empty clause is obtained and the literal is existential  the complement of the literal must be true and it is added to the clause set. if the literal is universal  the formula is false. 
　　in the quantified case also the occurrence of a clause with universal variables only may yield a failed literal. here the ordering of variables in the prefix has to be observed. consider the formula which is in clausal form if we try to see whether y is a failed literal by adding the literal y to the clause set and performing unit propagation  we get the unit clause x with a universal variable. this would seem to indicate that y should be assigned false. however  the value of y is a function of the value of x  and y may assume different values for different values of x. 
lemma 1 let 	be a qbf. 
assume 	such that the propo-
1 	search 
apart from the above techniques specific to qbf  we maintain a graph describing the dependencies between variables: there is an edge between two variables if they occur in the same clause. in each node of the search tree  for separate connected components separate recursive calls to the main procedure of the algorithm are made. this has a noticeable effect on the efficiency of the algorithm on certain random problems as well as on some structured problems. for example  for a true qbf not all combinations of truth-values for universally quantified variables have to be considered if the variables occupy different connected components. this is often the case for random qbf with a low clauses/variables ratio. consider a formula with n universal variables. normally a tree with  leaves has to be traversed  but if the clause set is split so that universal variables are evenly in m components  m search trees with only leaves have to be traversed. for example  for = 1 and m = 1 this means a decrease from about to 1. 
1 	experiments 
we have tested the implementation of our algorithm and the new techniques on a number of problems from conditional planning and on a number of random quantified boolean formulae. our davis-putnam implementation that we have extended to handle qbf and on top of which all the new techniques have been implemented  is closest to li and anbulagan's  sato  but slower. 
the basis of the generation of random quantified 
boolean formulae is the fixed clause length model  mitchell et al.  1  for generation of random propositional formulae  in which 1-literal clauses are generated by randomly choosing three variables from a set of n variables and negating each with probability 1. the presence of clauses with less than two existential variables asymptotically causes all formulae to be false when the number of variables increases  gent and walsh  1 . this is because the probability of a clause with universal literals only or two clauses with complementary existential literals and both with two universal literals becomes very high. hence for the generation of random quantified formulae we use model a of gent and walsh  in which no clauses with less than two existential literals are generated. in our test runs n = 1 and the qbf have the prefix effect of the techniques on formulae with prefixes and  is similar. we ran our program by varying two parameters  the proportion of universal variables in the prefix and the number of clauses. the proportion of universal variables was increased by 1 per cent steps and the clauses/variables ratio by steps of 1. if we have 1 variables and 1 per cent of them are universal  the first quantifier quantifies the variables 1  the second quantifier the variables 

	figure 1: runtimes on random formulae without s1 

	figure 1: runtimes on random formulae 	figure 1: runtimes on random formulae without s1 
1  and the third quantifier the variables 1. we 
considered. when increasing the proportion of universal variables  the region of formulae that are more difficult  to evaluate shifts to the direction of lower clauses/variables figure 1: runtimes on random formulae without s1 have observed that  in the presence of the other techniques  both inversion and sampling the techniques that turn out to be most effective for the structured prob-
lems we consider - affect very little the number of nodes in search trees. therefore the test runs were with these techniques disabled. 
the results from the test runs are depicted in figures 
1  1  1  1 and 1. the runtime for every combination of parameter values is the average of runtimes for 1 formulae. all the runs were on a sun ultra ii workstation with a 1 mhz processor. the execution times are not very accurate because the smallest measurable unit of cpu time was 1 milliseconds. figure 1 depicts the proportion of true formulae for all parameter values 
rintanen 

ratios. the phase transition region from true to false shifts similarly. figure 1 shows the runtimes with full detection of failed literals  section 1  and partitioning of clause sets  section 1.  figure 1 shows runtimes without full detection of failed literals and figures 1 and 1 runtimes without partitioning. the peak in figure 1 is due to a very small number of difficult formulae. as is obvious from a comparison between figures 1 and 1  the effect of partitioning on formulae with few universal variables is small. 
　　the diagrams show that detection of failed literals for all variables is useful  although the effect is not dramatic. partitioning of clause sets reduces the amount of computation dramatically for a small number of formulae with many universal variables and a small clauses/variables ratio. this is because partitioning produces several small clause sets with disjoint variables  and hence considering all valuations of  universal variables takes much less than time. 
　　the structured problems we consider are translations from conditional planning to qbf  rintanen  1 . the most basic form of planning is the identification of sequences of operations that  reach a goal state from a given initial state. that problem has been successfully solved by algorithms that test propositional satisfiability  kautz and selman  1 . in conditional planning  plans that work under several different circumstances are constructed. a conditional plan is essentially a program in a simple programming language with conditional statements that chooses at execution time which operations to apply. when there is only one initial state  planning can be represented by formulae  that say that there is a plan  represented by the variables such that its execution  represented by the variables produces a goal state. 
 conditional planning can be represented by formulae  where variables  repre-
sent  the different circumstances the plan has to work in. 
　runtimes for formulae from conditional planning are given in table 1. these formulae encode the problem of existence of conditional plans for taking three or four blocks from all possible initial configurations to a unique goal configuration. we have evaluated the effect of each technique separately. the first column identifies the formulae in question. the second column gives the number of propositional variables in each qbf  and the third the number of clauses. the fourth column gives the truthvalue of the formula. the fifth gives the runtime of our theorem-prover with all techniques enabled. the sixth gives the runtime with inversion disabled. the seventh with sampling disabled. the eighth with detection of failed literals for inner quantifiers disabled. the ninth without partitioning of clause sets. for sampling the number of samples was 1 with at most 1 variables in each sample  the formulae all have less than 1 universal variables   and for inversion the number of valuations considered was at most 1. 
　in some cases disabling one of the pruning techniques leads to a better runtime  but these are the easier for-
1 	search 
mulae and the differences are relatively small. the only technique that in most cases does not have any effect is the partitioning of clause sets. only for three formulae there is a significant decrease in the runtimes  from 1 to 1  from 1 to 1 and from 1 to 1. we would expect that on many structured problems the decrease is small. when none of the techniques is used  none of the runs end in 1 hours. sampling and inversion are the most effective techniques: without them four of the formulae could not be evaluated in 1 hours. 
1 	related work 
automated reasoning with quantified boolean formulae has been investigated by kleine blining et al.  who define a resolution rule for quantified boolean formulae and a polynomial time decision procedure for quantified horn clauses. asp vail et al.  give a polynomial time decision procedure for quantified 1-literal clauses. 
　cadoli et al.  extend the davis-putnam procedure to handle quantified boolean formulae. their algorithm is similar to the one in section 1. cadoli et al. generalize techniques familiar from the davisputnam procedure to qbf. for example  they introduce the pure literal rule for universal variables and a rule that concludes that formulae with clauses without existential variables are false. a technique not employed by us is testing whether the set of clauses with all universal literals deleted is satisftable. if it is  the formula is true. cadoli et al. perform this test in every node of the search tree. it seems to us that on random problems with many universal variables and a low clauses/variables ratio it may be beneficial like the technique we present in section 1. the algorithm by cadoli et al. does not evaluate any of the formulae in table 1 in 1 hours. we also ran an experiment on a small set of random formulae with 1 variables and parameters varying like in the experiments reported in this paper. a small number of the formulae were much more difficult for the program by cadoli et al. and some of the very easy formulae were 
evaluated faster. the sum of the runtimes for our program was 1 seconds versus 1 seconds for the cadoli et al. program. for a bigger set of random formulae with 1 variables the runtimes were 1 seconds versus 1 seconds. 
1 	conclusions and future work 
future work includes a systematic study of computational properties of qbf arising from applications  including al planning  automated theorem-proving and computer-aided verification  and then improving the qbf algorithm accordingly. there are several degrees of freedom in the use of the new techniques  and only by analyzing a wider range of problems it is possible to determine what is the best way of using them. 
　as an important research topic we see the reduction of exhaustive search needed in handling universal quantifiers. the technique presented in this paper is applicable only in relatively simple cases. 


table 1: runtimes of our program on formulae from planning  in seconds  

acknowledgements 
this research was funded by the deutsche forschungsgemeinschaft through the sfb 1. we thank the referees for comments on the generation of random qbf and marco cadoli et al. for access to their program. 
