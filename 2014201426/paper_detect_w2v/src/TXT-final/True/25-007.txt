 
traditional algorithms for prime implicate generation  quine  1; mccluskey  1; tison  1; kean and tsiknis  1; de kleer  1  require the input formulas to be first transformed into a cnf formula. this process  however  requires exponential time in the worst case and can result in an exponential blow up of the input size. such cases occur frequently when the problem domains are best characterized by some dnf formulas. in this paper  we study a new algorithm which allows a more general input: a conjunction of dnf formulas. we will present empirical results comparing the new algorithm with some existing implementations  and discuss how it can be used in a propositional abductive reasoning system. 
1 	introduction 
in the early 1's  when researchers were studying various ways of minimizing boolean circuits  they discovered that the notion of prime implicant played an important role  quine  1. in particular  it was shown that the sum of products minimization of boolean circuits will consist of only the prime implicants of the propositional description of the circuit. subsequently  many algorithms were proposed for the purpose of prime implicant generation  mccluskey  1; slagle et al.  1; tison  1 . 
　recently  in an attempt to generalize the atms  it was realized that the dual notion  prime implicate  subsumes the concept of labels calculated by an atms. this has lead to the study of clause management systems  cms   reiter and de kleer  1  which essentially accepts a set of propositional clauses and outputs the corresponding set of prime implicates. similar to an atms  the applications for a cms include diagnosis  de kleer and williams  1; reiter  1   qualitative physics  forbus  1  and nonmonotonic reasoning  mccarthy  1; reiter  1 . 
　in this paper  we present a new algorithm for computing the prime implicates  hence  the prime implicants for the dual problem  based on a operation described in the next section. the major differences between this algorithm and the existing prime implicate generation algorithms are 1. it was originally motivated entirely from the order-theoretic point of view; and 1. it allows input in a more general form: a conjunction of 
1 	automated reasoning 
dnf formulas. 
　the latter is especially important for problem solving because the existing algorithms can only accept as input a single cnf formula  or a single dnf formula as in  slagle et al  1   which is a special case of conjunction of dnf formulas. these algorithms are needlessly expensive for problems that are naturally encoded by a conjunction of some complex dnf formulas  because these dnf formulas need to be transformed into their cnf equivalence first. this additional step is very expensive computationally and can lead to an exponential increase in the input size. on the other hand  our new algorithm does not suffer from this shortcoming and we will present empirical results to demonstrate its superior performance. furthermore  we will describe an application in abductive reasoning to show how its generality can be useful to problem solving. 

our new algorithm for prime implicate generation is based on order theory. in this section  we introduce the basic definitions 
     1  our definition of prime implicate/implicant is slightly more general than the definition used by some other authors. in particular  we allow clauses that contain complementary literals to be prime. however  one can easily derive one set from the other. 

	ngair 	1 

1 	automated reasoning 


table 1: an example of executing the  operation 

the second example is kean and tsiknis's propositional encoding of a familiar diagnosis problem; the 1-gate adder circuit  see  kean and tsiknis  1  . 
   the gen-pi and the cltms algorithms are both implemented in common lisp and run on a sun 1 machine. on the other hand  the ipia algorithm is implemented in quintus prolog running on a sun sparc-1 machine.1 the results of the comparison are listed in table 1 where all liming information are in seconds and pi# is the number of non-tautological prime implicates. 
   1 the latter algorithm is also called ipia in the actual paper. we use cltms here to avoid confusion. 
   1 both examples were originally proposed by alex kean in a series of e-mail correspondences between alex kean  johan de kleer and the author. 1
　　the timing information of the ipia program was provided by alex kean. 
table 1: comparison of three pi generation algorithms 
　note that the cltms algorithm is sensitive to the input order of the clauses. this is reflected by the two-value entries for the and examples. in both the examples  input of the horn clauses are given in lexicographical order based on the two indices of s. the two values represent the times needed depending on how we prioritize the two indices. 
　from the results of the comparison  we can conclude that if the input is already in a cnf  the gen-pi algorithm will perform as efficiently as  or better than  some of the existing prime implicate generation systems. in the following  we show that the gen-pi algorithm will greatly outperform the existing algorithms if the input is in a more general form. 
the generality of the gen-pi algorithm 
as already emphasized earlier in this paper  the gen-pi algorithm naturally allows input formula to be a conjunction of dnf formulas. therefore  an obvious advantage to this new algorithm is its flexibility in terms of what it can take as input  i.e. a set of dnf formulas instead of just a set of disjunctive clauses. although a set of dnf formulas can be converted to a single cnf formula by converting each dnf formula to an equivalent cnf formula. we will show in the following  however  that such a conversion is computationally very expensive. 
　since the conversion of a dnf formula to a cnf formula is computationally equivalent to the process of covcrting a cnf formula to a dnf formula  modulo a linear term   it suffices to demonstrate a particular cnf formula of length o n  such that any of its dnf equivalence is necessary of length exponential in n. let us consider the dnf formula: where each 
is a distinct propositional symbol. it can be shown that: 
theorem 1 any dnf formula equivalent to the propositional formula f has at least 1n conjuncts. 
hence  the problem of converting a cnf formula to an equivalent dnf formula  or vice versa  is a provably intractable problem. 
examples: the following shows some instances where dnf 
	ngair 	1 


1 	automated reasoning 


1 	conclusion 
traditional algorithms for prime implicate generation can only accept a cnf formula as their input. for problems that are naturally encoded by a conjunction of some dnf formulas  these algorithms can be needlessly expensive. this is because the transformation of the input formulas into their cnf equivalence is a very expensive process and can result in a dramatic explosion of the input size. 
   in this paper  we studied a more general algorithm gen-pi for prime implicate generation. the algorithm is based on a  operation originally inspired by the order-theoretic study of the extended atms  gunter et al.  1 . it is superior to the existing approaches in that it allows a larger class of input formulas  namely  any conjunction of dnf formulas. 
   we also presented empirical comparisons between the genpi algorithm and two existing implementations that are mainly based on the generalized consensus theory itison  1 . in the more restrictive case of a cnf formula  the results show that the gen-pi algorithm performs at least as efficiently as 
     1 of course  a dnf formula or a cnf formula would suffice  but disjunction of cnf formulas allows a greater flexibility and better efficiency in encoding a formula  see previous section . 
these algorithms  while it greatly outperforms them when the input contains some dnf formulas. 
   the usefulness of the gen-pi algorithm is further demonstrated by its application in generating explanations for complex formulas in a propositional abductive reasoning system. 
