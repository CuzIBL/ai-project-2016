 
computing the least common subsunier  les  is an inference task that can be used to support  the  bottom-up  construction of knowledge bases for kr systems based on description logics. previous work on how to compute the lcs has concentrated on description logics that allow for universal value restrictions  but not for existential restrictions. the main new contribution of this paper is the treatment of description logics with existential restrictions. our approach for computing the lcs is based on an appropriate representation of concept descriptions by certain trees  and a characterization of subsumption by homomorphisins between these trees. the lcs operation then corresponds to the product operation on trees. 
1 	introduction 
knowledge representation systems based on description logics  dl  can be used to describe the knowledge of an application domain in a structured and formally wellunderstood way. traditionally  the knowledge base of  a dl system is built in a  top-down'' fashion by first formalizing the relevant concepts of the domain  its terminology  by concept descriptions  i.e.  expressions that are built from atomic concepts  unary predicates  and atomie roles  binary predicates  using the concept constructors provided by the dl language. in a second step  the concept descriptions are used to specify properties of objects and individuals occurring in the domain. dl systems provide their users with inference services that support both steps: classification of concepts and of individuals. classification of concepts determines subconcept/supereoncept relationships  called subsumption relationships  between the concepts of a given terminol-
ogy  and thus allows one to structure the terminology in the form of a subsumption hierarchy. classification of 
     this work was partially supported by the ec working group ccl ii  the studienstiftung des dentschc.n volkes  and the deutsche forschunqsgemeinschaft grant no. grk 1-1. 
1 	automated reasoning 
individuals  or objects  determines whether a given individual is always an instance of a certain concept  i.e.  whether this instance relationship is implied by the descriptions of the individual and the concept . 
　this traditional  top-down  approach for constructing a dl knowledge base is not always adequate  however. on the one hand  it need not be clear from the outset  which are the relevant concepts in a particular application. on the other hand  even if it is clear which  intuitive  concepts should be introduced  it is sometimes difficult to come up with formal definitions of these concepts within the available description language. for example  in one of our applications in chemical process engineering  sattler  1; baader and sattler  1   the process engineers prefer to construct the knowledge base  which consists of descriptions of standard building blocks of process models  such as reactors  in the following  bottom-up  fashion: first  they introduce several  typical  examples of the standard building block as individuals  and then they generalize  the descriptions of  these individuals into a concept description that  i  has all the individuals as instances  and  ii  is the most specific description satisfying property  i . the task of computing a description satisfying  i  and  ii  can be split into two subtasks: computing the most specifie concept of a single individual  and computing the least common subsumer of a given finite number of concepts. the most specific concept  mse  of an individual b is the most specific concept description c  expressible in the given dl  that has b as an instance  and the least common subsumer  lcs  of concept descriptions is the most specific concept  description in the given dl that subsumes 
　　the present paper investigates the second subtask for the sub-language of the dl employed in our process engineering application. this language allows both for value restrictions and existential restrictions  but not for full negation and disjunction  since the lcs operation is trivial in the presence of disjunction  and thus does not provide useful information . it can  e.g.  be used to introduce the concept of a reactor with cooling jacket by the description reactor to.cooling-jacket functionality.-vaporize  where is a primitive concept  i.e.  not further defined . previous work on 

how to compute the les  cohen and hirsh  1; frazier and pitt  1  has concentrated on sub-languages of the dl used by the system classic  brachman et al  1   which allows  among other constructors  for value restrictions  but not for existential restrictions. thus  the main new contribution of the present paper is the treatment of existential restrictions. 
　for didactic reasons  we will start by showing how to compute the les in the small language  which allows for conjunction and existential restrictions only and extend our treatment in two steps to  by adding value restrictions  and then to  by further adding primitive negation. for all three languages  we proceed in the following manner. first  we introduce an appropriate data structure for representing concept descriptions  so-called description trees   and show that subsurnption can be characterized by the existence of homomorphisms between description trees. from this characterization we then deduce that the les operation on concept descriptions corresponds to the product operation on description trees  which can easily be computed. we will also comment  on the complexity of subsurnption and the les for the languages under consideration. because of the space limitation  we cannot give all the technical details. these details as well as complete proofs can be found in  baader et a/.  1 . 
1 	preliminaries 
concept descriptions are inductively defined with the help of a set of constructors  starting with a set a'nc of primitive concepts and a set nr of primitive roles. the constructors determine the expressive power of the dl. in this paper  we consider concept descriptions built from the constructors shown in table 1. in the description logic  concept  descriptions are formed using the constructors top-concept   conjunction. and existential restriction . the description logic additionally provides us with value restrictions and allows for all the constructors shown in table 1. 
　　the semantics of a concept description is defined in terms of an interpretation . the domain  of is a non-empty set of individuals and the interpretation function maps each primitive concept to a set and each primitive role to a binary 
	the extension of 	to arbitrary 
concept descriptions is inductively defined  a-s shown in the third column of table 1. 
　　one of the most important traditional inference services provided by dl systems is computing the subsurnption hierarchy. the concept description c is subsumed by the description holds for all interpretations the concept descriptions c and d are equivalent iff they subsume each other. 
　　in this paper  we are interested in the non-standard inference task of computing the least common subsumer  les  of concept descriptions. given 1 concept descriptions  in a description logic a concept description c of c is an les of  for short  

figure 1: -description trees. 
 and  ii   1 is the least concept  description with this property  i.e.  if c satisfies 
　depending on the dl under consideration  the les of two or more descriptions need not always exist  but if it exists  then it is unique up to equivalence. in the following  we will show that  for the  and the les always exists and can effectively be computed. we will mostly restrict the attention to the problem of computing the les of two concept descriptions  since the les of  1 descriptions can be obtained by iterated application of the binary les operation. 
1 	getting started 	the les in 
as mentioned in the introduction  our method for computing the les is based on an appropriate representation of concept descriptions by trees. in the case of the small dl these trees  called-description trees  are of the form where is a tree with root  whose edges vrw g e are labeled with primitive roles 
	nr  and whose nodes 	v are labeled with sets 
  v  of primitive concepts from the empty label corresponds to the top-concept. 
　intuitively  such a tree is merely a graphical representation of the syntax of the concept description. more formally  every -concept description c can be written 
 modulo equivalence  as 
 with 	this description can now be translated into an 	description tree as follows. the set of all primitive con-
cepts occurring in the top-level conjunction of c yields the label of the root vq  and each existential restriction in this conjunction yields an successor that is the root of the tree corresponding to for example  the -concept description 
yields the tree 	depicted on the left-hand side of fig. 1. 
　　conversely  every description tree can be translated into an concept description intuitively  the primitive concepts in the label of yield the primitive concepts in the top-level conjunction of  and each -successor  of yields an existential restriction where c is the -concept description obtained by translating the subtree of  with root v. for a leaf  v  the empty label is translated into the top-concept. for example  the  description tree  in 
baader  kusters  and molitor 


table 1: syntax and semantics of concept descriptions. 

fig. 1 yields the concept description 

these translations preserve the semantics of concept descriptions in the sense that 
　　subsumption in 	can be characterized using the following notion: a homomorphism from an 	description tree 	to an 	-description tree is a mapping 	: 	such that 	for all 	  
and 	for all 
theorem 1 let 	concept 	descriptions 	and the 	corresponding 	description trees. 	then 
	iff there exists a homomorphism 	from 	to 
in our example  the -concept description   subsumes c  because mapping onto for all 1 yields a homomorphism from = to  see fig. 1 . 
　theorem 1 is a special case of the characterization of subsumption between simple conceptual graphs in  chein and mugnier  1   and of the characterization of containment of conjunctive queries in  abiteboul et al.  1 . in the more general setting of simple conceptual graphs and conjunctive queries  testing for the existence of a homomorphism is an np-complete problem. in the restricted case of  description trees  however  testing for the existence of a homomorphism can be realized in polynomial time  reyner  1; baader et al.  1   which shows that subsumption between -concept de-
scriptions is a tractable problem. 
least common subsumer in 
the characterization of subsumption by homomorphisms allows us to characterize the les by the product of 
	-description trees. 	the 	product 	of two 
	-description trees 	and 
　　　　　　　　　is denned by induction on the depth of the trees. denote the subtree of g with root 
     we define  vo wo  to be the root of labeled with . for each -successor of in 
and of in 	  we obtain an 	successor 	of in 	that is the root of the product of 
and 
	for example  consider the 	description tree 
  fig. 1  and the description tree  fig. 1   where  corresponds to the -concept description d := 
1 	automated reasoning 

 the product  is depicted 
on the right-hand side of fig. 1. 
theorem 1 let c  d be two -concept descriptions and the corresponding description trees. then   is the les of c and d. 
in our example  we thus obtain 
the size of the les of two   concept descriptions c  d can be bounded by the size of which is polynomial in the size of  and . since the size of the description tree corresponding to a given description is linear in the size of the description  we obtain: 
proposition 1 the size of the les of two  -concept descriptions c d is polynomial in the size of c and d  and the les can be computed in polynomial time. 
　in our process engineering application  however  we are interested in the les of  1 concept descriptions 
this les can be obtained from the product of their corresponding -description 
trees. therefore  the size of the les can be bounded by the size of this product. it has turned out  baader et a/.  1  that  even for the small dl this size cannot be poly normally bounded. 
proposition 1 the size of the les of n concept descriptions  of size linear in n may grow exponential in n. 
1 	extending the results to tfx 
our goal is to obtain a characterization of the les in analogous to the one given in theorem 1 for . to achieve this goal  we first extend the notion of a description tree from . in order to cope with value 


restrictions occurring in -concept descriptions  we allow for two types of edges  namely those labeled with a primitive role  corresponding to existential restrictions of the form and those labeled with  for 
 corresponding to value restrictions of the form 
         . 	just as for  there is a 1 correspondence between 	-concept descriptions and  description trees. 
　　the notion of a homomorphism also extends to description trees in a natural way. a homomorphism from a n description t r e e i n t o an -description tree is a mapping : that satisfies the conditions  1   1  on homomorphisms between -description trees  and additionally 
　　however  these straightforward extensions are not sufficient to obtain a sound and complete characterization of subsumption in  based on homomorphisms between description trees. for example  consider the -concept descriptions and their translations into description trees depicted in fig. 1. ft is easy to see that   but there exists neither a homomorphism from qp to qc nor one from 
　　to avoid these problems  we must normalize the concept descriptions before translating them into description trees. the normal form of an concept description c is obtained from c by exhaustively applying the following normalization rules: 

since each normalization rule preserves equivalence  the resulting normalized concept description is equivalent to the original one. the rules should be read modulo eommutativity of conjunction; e.g.  is also normalized to 
　now  the description tree corresponding to c is obtained from c by first normalizing c  and then translating the resulting normalized -concept description into a tree. each . -description tree  obtained this way satisfies the following 
properties  baader et al  1 : 
  for each node  v and each primitive role  has at most one outgoing edge labeled 
  let  e  and let c denote the 
concept description corresponding to the subtree of  / with root  and c  the one corresponding to the subtree of g with root  then 
  leaves in q labeled with the empty set cannot be reached via an edge labeled 	for some 	nr   does not contain a subconcept of the form 
the proof of soundness and completeness of the characterization of subsumption in  stated in the next theorem makes heavy use of these properties  baader et a/.  1 . 
theorem 1 let c  d be two -concept descriptions and their corresponding-description trees. then iff there exists a homomorphism from to gc. 
　it should be noted that there is a close relationship between the normalization rules introduced above and some of the so-called propagation rules employed by tableaux-based subsumption algorithms  as e.g. introduced in  donini et al.  1 . the main idea underlying our second normalization rule and the propagation rule treating value restrictions is to make the knowledge implicitly given by a conjunction of the form 
f explicit by propagating e onto the existential restriction according to the equivalence 
 as shown in  donini et al.  1   this 
propagation rule may lead to an exponential blow-up of the tableau  and the same is true for our normalization rule. more precisely  applying the normalization rules introduced above to an -concept  description c may lead to a normalized concept description  and hence a corresponding description tree   of size exponential in the size of c. this exponential blow-up cannot be avoided since  i  as for  existence of a homomorphism between -description trees can be tested in polynomial time; and  ii  subsumption in  is an npcomplete problem  donini et a/.  1 . 
least common subsumer in 
just as for we can now use the characterization of subsumption in ' by homomorphisms to characterize the les of two -concept descriptions by the product of -description trees. the product of two -description trees 
is again defined by induction on 
the depth of the trees. as before   is the root of   and -successors of  vo wq  are obtained in the same way as for additionally  we now obtain a successor of   in is the 
successor of in q and the one of wq in   and is the root  of the product of and 
theorem 1 let c  d be two concept descriptions and their corresponding-description trees. then   is the les of c and d. 
baader  kusters  and molitor 

　　as mentioned above  differs f r o m i n that the -description t r e e c o r r e s p o n d i n g to an 
concept description c may be of size exponential in the size of c. therefore  even for two concept descriptions c  d  the size of their les cannot be poly normally bounded by the size of c and d  baader et a/.  1 . 
proposition 1 the size of the les of two  -concept descriptions c  d may be exponential in the size of c and d. 
1 	extending the results to 
in order to characterize the les of two -concept descriptions by the product of description trees  we must adapt the notions description tree  homomorphism  and product appropriately  taking into account the additional constructors primitive negation and bottomconcept. 
　　first  we extend the notion of -description trees to description trees by additionally allowing for negated primitive concepts -p and the bottom-concept  in the labels of nodes. again  as for and 
there is a 1 correspondence between -concept descriptions and -description trees. 
　　since is an extension of  and since we are again interested in a characterization of subsumption by homomorphisms  we must normalize -concept descriptions before translating them into their corresponding -description trees. in addition to the normalization rules for   we need three more rules  which deal with the fact that . . concept descriptions may contain inconsistent sub-descriptions 
for 
concept description c  the exhaus-
tive application of these rules  together with the rules for  yields an e q u i v a l e n t - c o n c e p t description in normal form  which is used to construct the 
description 	tree  corresponding to c. 
　in addition to the conditions for  description trees  the -description trees obtained this way satisfy the following condition: if the labe' of a node contains then its label is  and it is a leaf that cannot be reached by an edge with label 
　unfortunately  the straightforward adaptation of the notion of a homomorphism from -description trees to 
-description trees does not yield a sound and complete characterization of subsumption in   . as an ex-

the description d is already in normal form  and the normal form of c is c the corresponding 	are depicted in figure 1. 
1 	automated reasoning 

　　it is easy to see that there does not exist a homomorphism  in the sense of section 1  from into   although we have in particular  the -concept description p corresponding to the subtree with root subsumes  which is the concept 
description corresponding to the subtree with root in therefore  a homomorphism from into 
should be allowed to map the whole tree corresponding 

conditions are satisfied  i.e.  this mapping yields a homomorphism from 
　with this new notion of a homomorphism between description trees  we can again characterize sub-
sumption in  in a sound and complete way  baader et al.  1 .1 
theorem 1 let c  d be two -concept descriptions and the corresponding-description trees. then iff there exists a homomorphism from into 
least common subsumer in 
the definition of the product of -description trees must be adapted to the modified notion of a homomorphism. in particular  this definition must treat leaves with label  in a special manner. in fact  such a leaf corresponds to the bottom-concept  and since for all concept descriptions c  we have l . 
thus  our product operation should be defined such that 

	more precisely  the 	product 	of two 
description 	trees 	and 
is defined as follows. if 
　　　　　　　　　　　　　  then we define g x h by replacing each node w in ' 	otherwise  we 
   1note that subsumption in is also an np-cornplete problem  donini et a/.  1 . 

define  by induction on the depth of the trees analogous to the definition of the product of  description trees. 
	in the example  	can be obtained from 
replacing wo by i for i = 1 1  by    a n d b y  see fig. 1 . 
theorem 1 let  1  d be two concept descriptions and their' corresponding description trees. then is the les of c and d. 
the proof of proposition 1 also works if we view the concept descriptions used in this proof as special concept descriptions. tims  we have: 
proposition 1 the size of the les of two -concept descriptions c d may be exponential in the size of cd. 
1 	conclusion and future work 
we have described a method for computing the least  common subsuiner in the description logic . in the worst ease  the result of this computation may be exponential in the size of the input descriptions. however  the examples that show this exponential behavior  baader et ai  1  are rather artificial  and thus we believe that 
this complexity will not pose a problem in practice. 
　our method depends on the characterization of subsumption by homomorphisms on description trees  because this allows us to construct the les as the product of the description trees. for sub-languages of classic  a similar method has been used to construct the les  cohen and hirsh  1; frazier and pitt  1   even though the characterization of subsumption  via a structural subsumption algorithm  borgida and patelschneider  1   is not explicitly given in terms of homomorphisms. the main difference is that these languages do not allow for existential restrictions. the results for simple conceptual graphs  conjunctive queries  mentioned below theorem 1 characterize subsumption  resp. containment  with the help of homomorphisms  but they do not consider the les  and they cannot handle value restrictions. 
　the language is expressive enough to be quite useful in our process engineering application. in fact   the descriptions of standard building blocks of process models that we currently represent in our dl system can all be expressed within this language. however  in order to support the  bottom-up  approach for constructing knowledge bases outlined in the introduction  we must also be able to compute the most specific concept for individuals. unfortunately  the msc need not always exist in  for the d l i t was shown in  baader and kiisters  1  that this problem can be overcome by allowing for cyclic concept descriptions  but  does not allow for existential restrictions. thus  we must either extend the approach of  baader and kiisters  1 to   or resort to an approximation of the mse  as proposed in  cohen and hirsh  1 . in the process engineering application  we can also use the les operation directly to structure the existing knowledge base. 
in fact  it has turned out that the subsumption hierarchy obtained from the knowledge base of standard building blocks is rather flat. to obtain a deeper hierarchy  which better supports search and hence reuse of building blocks   we will try to construct intermediate levels of concepts by applying the les operation. of course  this only makes sense if the les yields concepts that have an intuitive meaning in the application domain. 
