
many constraint toolkits provide logical connectives like disjunction  negation and implication. these permit complex constraint expressions to be built from primitive constraints. however  the propagation of such complex constraint expressions is typically limited. we therefore present a simple and light weight method for propagating complex constraint expressions. we provide a precise characterization of when this method enforces generalized arc-consistency. in addition  we demonstrate that with our method many different global constraints can be easily implemented.
1	introduction
real world problems often contain logical combinations of numerical and symbolic constraints. for example  many configuration problems are naturally specified using implication and other logical connectives  e.g. if the car is a coupe or a convertiblethen a roof rack is not a valid option . to facilitate the modeling of such problems  constraint toolkits allow logical combinations of primitive constraints to be posted. however  such combinations are typically not propagated very effectively. for example  the propagation of a disjunction of constraints is generally delayed until all but one of the disjuncts are falsified after which the remaining disjunct  which must now hold  is propagated.
﹛we will present a simple and light weight method to propagate constraint expressions built up from logical connectives and primitive constraints. this method can be incorporated into any current constraint toolkit by a simple extension to the propagators for the primitive constraints. we can therefore providethe user with a rich languagefor specifyingproblems  whilst preserving the ability to prune the search space. to demonstrate the usefulness of such a facility  we show that many global constraints can be easily specified and  in some cases  effectively propagated  using simple constraint expressions. thus our method can often provide the toolkit user with a very low cost alternative to the enterprise of designing and implementing special purpose propagators for unusual global constraints that might appear in their problem.
1	inconsistent and valid assignments
a constraint satisfaction problem consists of a set of variables  each with a domain of values  and a set of constraints. each constraint consists of a scope of variables to which it is applied  and a relation of allowed values for those variables. for convenience  we represent the domains d of the variables by the set of possible assignments. for example  if we have two 1 variables  x and y then d = {x = 1 x = 1 y = 1 y = 1}. we let domain x  be the set of values in the domain of the variable x: domain x  = {a | x = a ﹋ d}.
an assignment set 而 is a set of assignments to variables such that no variable is assigned more than one value by 而. the scope of an assignment set 而  constraint c  is the set of variables in 而  c  and is denoted by scope 而   scope c  . given a constraint c and an assignment set 而 with scope c    scope 而   we write c 而  iff the assignments in 而 satisfies c. that is c 而  iff there exists x1 = a1 .. xk = ak ﹋ 而 with scope c  = {x1 .. xk} and x1 = a1 .. xk = ak satisfies c. we write  c 而  otherwise.
   an assignment is  generalized arc  inconsistent for a constraint iff no assignment set containing it satisfies the constraint. that is  x = a is inconsistent for c iff scope c    scope. a constraint c has an unique maximal set of inconsistent assignments maxinc c . for example  giventhe constraintx   y with x = {1 1} and y = {1}  then {x = 1} is the maximal set of inconsistent assignments. assignments that are consistent have at least one witness falsifying the above condition; i.e.  x = a is consistent iff there is an assignment set 而  called a support  with scope 而  = scope c  ＿ x = a ﹋ 而 ＿c 而 . a constraint c is gac  generalized arc consistent  iff every value of every variable in scope c  has at least one support. if x = a is inconsistent  we can prune a from the domain of x. a constraint c can be made gac by simply pruning all values in maxinc c  from the domains of their respective variables.
﹛an essential notion for our approach is the concept of a valid assignment. valid assignments are the dual of inconsistent assignments. an assignment is valid for a constraint iff all assignment sets containingit satisfy the constraint. that is  x = a is valid forscope c    scope 而 ＿x =
. as with inconsistent values every constraint c has a unique maximal set of valid assignments  maxvalid c . for example  given the constraint x   y withsatisfy the constraintx = {1 x1} = 1and}y. all possible extensions of=  but all other assignments to{1}  the maximal set of validx = 1x assignments is { x   y
can be extended so that they fail to satisfy the constraint.
﹛all of the concepts presented for inconsistent assignments have dual versions for valid assignments. for example  the dual of consistent assignments is the notion of non-valid assignments. an assignment x = a is non-valid if there is at
support is a non-support.aleast one assignment set﹋ 而 ＿  c 而 .	another example is that the dual of a而 withan assignment setscope 而  = scope而 cis a ＿non-x =
support for an assignment x = a in a constraint c iff scope 而  = scope c ＿x = a ﹋ 而 ＿ c 而 . a non-support witnesses the non-validity of x = a.
1	constraint expressions
to build complex constraints  we combine primitive constraints using negation  disjunction and conjunction. a constraint expression is either a primitive constraint c or any well-founded boolean expression of the form: true  false  notself a constraint expression. c1   or c1 .. ck  or andtrue c1 .. is the primitive constraintck   where each ci is itwhich is always valid  whilst false is always inconsistent. xorwe also allow the expressions c1 c1  and ifthen c1 c1 impliesc1   but regard these addi- c1 c1   iff  c1 c1  
tional connectives to be abbreviations:
implies c1 c1    or not c1  c1 
 iff  c1 c1    and or not c1  c1  or not c1  c1  xor c1 c1    and or c1 c1  or not c1  not c1  
ifthen c1 c1 c1    and or not c1  c1  or c1 c1  
whose scope is equal to the union of the scopes of the prim-each constraint expression c represents a new constraint
primitive constraints underingitive constraints inscopec evaluates to true given the truth values of the component c    scope 而c .and the boolean expression represent-an assignment set而. for example  an absolute value而 satisfies c iff
constraint x = abs y   can be written as the constraint expression ifthen y ≡ 1 x = y x =  y  . similarly  a max constraint x = max y z  can be written as the constraint expression and x ≡ y x ≡ z or x = y x = z  .
﹛since a constraint expression is itself a constraint  associated with every constraint expressionset of inconsistent assignments  c  and a maximalis a maximal
generalized arc consistent by prun-
constraint expressionserve that the duality betweenvalid assignments and inconsis-set of valid assignmentscmaxincmaxvalid maxincc . it is also useful to ob- c . cwe can make the 
ing all assignments in tent assignments implies maxinc c  = maxvalid not c  :
x=a ﹋ maxinc	maxvalid not c  .
1	constraint propagation
incvalidvalidinc  notor not c c1  .. 1c  1d c k d   d 	===	validinc c 1c c1d  dd 
inc and c1 ..  .. ckk    d  	==	itincitvalid and or  c1 ..  .. ckk    d  
valid or not surprisingly  it is np-hard to compute maxinc for an arbitrary constraint expression. more precisely  decidingif a set of assignments is the maximal inconsistent set for an arbitrary c	c	d	c	c	d
itincinc := and   c1 .. ck  d  repeatitvalidvalid := or  c1 .. ck  d  repeatinc	:= inc	inc:= i
       := valid	:= valid untilreturn inc return valid table 1: functions for computing valid and inconsistent assignments of a constraint expression.valid false d  =    and valid truein addition  d  = inc incfalse true d  = d  =d.
constraint expression is dp-complete in general.1 there are results on tractable languages that identify tractable cases for computing maxinc and maxvalid. however  we are interested here in computing inconsistent assignments for arbitrary constraint expressions  which is intractable in general.
﹛we propose a simple and light weight method for computing subsets of maxinc and maxvalid in polynomial time. the method is compositional  computing the inconsistent and valid assignments of a constraint expression from the inconsistent and valid assignments of its parts. for a constraint expression c  and variable domainsc d  return subsets ofdmaxinc  the functions c  and
inc c d  and valid
maxvalid c  respectively. these functionsrecursively apply the rules in table 1  until they reach the primitive constraints. we assume that each primitive constraint has a poly-time algorithm to compute inconsistent and valid assignments.
﹛the algorithm can be optimized by a simple caching scheme in which we remember the previously computed
valueworks forquent callto the variables ininc validci d  cfor each subexpressioni scoped . in addition  if we compute and prune cis identical toi   then we can reuse the previ- ci d . a similar optimizationcdi. if in a subse-when restricted ously computed result for inc
inconsistent values incrementally  we can stop as soon as any variable has a domain wipeout.
1	entailment and disentailment
a constraint expression is entailed iff it holds for all possible assignments. a constraint is disentailed iff it does not hold for any possible assignment. as we show below returns only valid assignments. hence  ifthe domains of all of the variables in the scope ofvalid cvalidc  dc  must be equalsc d 
entailed. in such a situation  we modify the computation of valid so that valid c d  = d  note that d might include domains of other variables besides those in thesimilarly  if	scope c  . inc c d  equals the domains of all of the vari-
ables in the scope of c so thatthen c incis disentailed; and we modify c d  = evend. x  odd y    the computation of inc to show the benefit  consider implies
with	d={x=1 	x=1 	y =1 	y =1}.	now
inc impliesinc odd even y    dxwill return just valid values for  .  oddusing the unmodified versions  y     d  = valid evenx   whilstx  d 
﹎
incvalidwould then compute the empty set of inconsistent assign- odd even y    x  d   dreturns just inconsistent values for 	y . inc ments for implies even x   odd y   . note  however  that domain x  only contains even numbers. hence even x  is entailed. therefore the modified valid even x   d  can
=returnd ﹎dinc  in which case odd y    d  =inc {impliesy =1}. as required  this is the even x   odd y    d 
maximal set of inconsistent assignments.
1	correctness
we prove that inc and valid are correct. that is  they only return inconsistent and valid assignments respectively.
theorem 1 inc and valid are correct assuming that inconsistent and valid assignments are correctly computed for the constituent primitive constraints.
proof: by induction on the structure of the constraint expression. the base case holds by assumption. the step case uses case analysis.
incfor a constraint expression not c1  d  = valid  1 not   cby induction  the as-1 d   we have that
c  d .
signments in valid c1 d  are valid. hence all of these assignments are inconsistent for not c1 d . a dual argument shows that the assignments in valid not c1 ..   dc kare valid.   we have
for a constraint expression c = and c1

validvalid ci d= . asuppose﹋ validx cvalidi =d . bya c=i﹋  valid c d . then for all i  x the induction hypothesis  the assignments in each are valid.	consider any assignment set 而 such that x
for eachaincconjunction. hence﹋ and而 and ci1  .. scope而 must satisfy allck  c d    a similar argument shows that the as-scopeare inconsistent. deleting thesec 而i and thus must satisfy the. since x =. fora is validc =
	c	x = a is also valid for c
signments in
assignments from d cannot cause any consistent assignmentincon the reduced domain to lose its support  hence 
dcomputes must still return inconsistent assignments. until we reach a fixed point.itinc then re-
﹛similar arguments hold for constraint expressions of the form or c1 .. ck . 
1	termination
the itinc and itvalid functions only require a linear  in the size of the csp  numberof iterations to reach their fixed point in the worst case.
theorem 1 itinc and itvalid take o nd  iterations to reach their fixed points for a constraint expression with n variables and domains of size d. there exist constraint expressions which take 成 nd  iterations to reach the fixed point.
proof: as each iteration removes at least one value  we must reach the fixed point in at most nd steps. we can give a simple example in which this bound is reached. consider
	. then in the first iteration 	{
andas this value is not supported inis pruned fromthis value is now not supported inxeveryn  = 1ci1 .. forcni =whered  a second iteration returnsn. supposeci is xi domain=xx1itincix+1 xxfor=returnsni  =i   nx= 1. and so onx{. after this1and .. dx= 1 x= 1}}1foras }
value is now not supported inis pruned  theup to the nth iteration which returnsn + 1th iteration returnsx1   x{xn nx= 1 = 1}. after this} as this
{= 1. hence  there
are nd iterations before all the values of all the variables are removed. note that even if we stop when the first variable has a domain wipeout  it will still take  n   1 d+ 1 iterations. 
1	maximality
these functions do not always compute maximal sets  even if maximal sets are computed for the primitive constraints from which they are composed. this is not surprising given that computing maximal sets for an arbitrary constraint expression is intractable in general. the following result precisely characterizes when inc returns the maximal inconsistent set of assignments. in other words  the following result identifies exactly when pruning the values returned by inc ensures that a constraint expression is gac.
﹛we start with a number of definitions. a hypergraph h =  h eh  is a set of vertices h and hyperedges eh
acyclic tree decompositioneach of which is a subset of flumh. a hypergraphet al.  1  iff there ish has an a tree t satisfying:  1  there is a one-to-one correspondence peredge corresponding to a tree nodebetween the hyperedges of h and the nodes oft is calledt; the hy-t's label
 label t  ;  1  for every vertex v ﹋ h the set of nodes t of t such that v ﹋ label t  form a subtree of t. the hypergraph of a conjunctive or disjunctive constraint expression 
cin =scopeand c cas hyperedges. we will relax this definition to take 1as vertices and the sets of variables .. ck  or c = or c1 .. ck   has the variablesscope ci   i = 1 .. k
account of  dis entailment. ifignore any entailed subexpression when constructing the hy-c = and c1 .. ck  then we disentailed subexpression. under this relaxation we define apergraph. similarly  if c = or c1 .. ck  then we ignore any
conjunctive or disjunctive constraint expression to be acyclic if its corresponding hypergraph has an acyclic tree decomposition. for example  a conjunctionin which the primitiveconstraints are in a chain  and each has only one variable in common with the previous and next constraint is acyclic. acyclicity is  however  more general than being a chain. we will use acyclicity to characterize when inc computes maxinc.
theorem 1able domainsfor any constraint expressiond  inc c d  = maxinc c dc  if:and any vari-
1.1. cccmaxinc==isornot a c c 1primitived  and ;	validconstraint c1  cdi   =d  =andmaxvalidmaxincinc c  cc d1i   dd  ;for=
c .. ck  and inc
1
i ﹋  1 .. k ;
1. cand  c maxinc= | scopeciand d  c cifor 1 .. ﹎iscopeck﹋    1candj .. k | ≒  a1;  b  forinci jc c﹋is acyclic;i  1d .. k 	= ;
1. inc c d  = d.
proof:	1. immediate.
 c1. suppose 而valid . hence c1valid dx   there exists= c1a dcannot be in  is maximal. then for any而 withincx not= ca1  ﹋d 而xasand=而
is one assignment that prevents it being inconsistent. hence incinc  not c1  dinc  is maximal. ci  . thend  are maximal. consider .
1. supposeor c1 .. ck  d	
cthat is incis one assignment that prevents it being inconsistent. hencej 而 c . thus    is maximal  there existsfor some而 withjx﹋ = 1 .. ka ﹋   而. asasand而 j d x = a cannot be in inc or c1 .. ck  d
inc or c1 .. xck ﹋ dscope  is maximal.
1. suppose	

dincing in the variable domains. from table 1 we observe that c d . we must show thatinc c d   i.e.  the consistent assignments remain-maxinc c d . let c = d 
inc cii d﹋c 1  = .. k  . orient this tree so that the root is labeledand by condition  a  . consider the acyclic tree decompositionmaxinc ci dc  =   for all associated with c
with scope ci  for some ci with x ﹋ scope ci . note that by property  1  of an acyclic tree decomposition and condition  c   each of the subtrees below ci can have at most one variable in common with the other subtrees. furthermore if two subtrees do have a variable in common that variable must
since x = a ﹋ d
tree decomposition to the children ofbe in thethat 而 ﹋ dscopec. now we extend this support downwards in the ci . c it must have some support 而. each suchon ci such

child cj shares only one variable with ci  say y   and y must be assigned some value in 而  say y = b. since y = b ﹋ dc it must have a supportcan extend 而 to a support for而j in andcj such that ci cj  for each child of而j ﹋ dc. thus weci.
cannot be in conflict:furthermore the supports 而j for the individual children ofcan only share a variable al-ci ready assigned by 而  hence must agree with 而 and with each other on the value assigned to this variable. thus we can extend 而 to a support for all of ci's children. further-
can be extended to a support for all of the conjuncts in themore  by the same argument each support 而j for the child cj subtree below cj. hence  而 can be extended to a support for all ofnote that ifc  and sinceand c1 .. ck  contains any entailed conjuncts maxinc c d . these can be eliminated without changing the maximal set of inconsistent assignments. we can then apply the argument above to the remaining acyclic part of the conjunction.
1. immediate since maxinc c d    d. 
﹛in fact  we can show that these five cases are the only ones in which inc is always guaranteed to be maximal. this reverse direction needs a little care as inc may compute maxinc by chance. however  these five cases are the only ones in which  irrespective of the constraint subexpressions  inc is guaranteed to compute maxinc. a dual result holds  and characterizes precisely when valid computes maxvalid.
﹛previous related results have shown that acyclic database queries of bounded tree width are tractable. bounded tree width  tree width one  is also known to be the condition that characterizes when arc consistency achieves gac on conjunctions of binary constraints. the main difference between our result and these previous results is that we do not place any restriction on the arity of the primitive constraints. hence  our result does not depend on bounded tree width  the tree width of the constraint graph is at least as large as the arity of the primitive constraints . given primitive constraints for which gac can be efficiently computed  no matter their arity   our result characterizes when this efficiency can be lifted to complex combinations of these constraints.
1	some applications
to demonstrate the usefulness of constraint expressions and our propagation algorithm  we show that a wide range of global and other constraints can be specified and propagated using simple constraint expressions. in many cases  our light weight propagation algorithm is able to achieve gac. our method is then an effective and low cost means to implement these constraints. this is especially valuable when the constraints useful for a particular problem are too specialized to be in the user's constraint toolkit.
domain constraint. this channels between a variable and a sequence of 1 variables representing the possible values taken by the variable. more precisely  domain x  x1 .. xn   ensures x = i iff xi = 1  refalo  1 . we can decompose this into a disjunction: or and x = 1 x1 = 1 .. xn = 1  .. 
and x = n x1 = 1 .. xn = 1  
the equality constraints in each conjunct again have no variables in common. hence pruning the values returned by inc enforces gac.
element constraint. this indexes into an array with a variable  van hentenryck and carillon  1 . more precisely  element i  x1 .. xn   j  holds iff xi = j. we can use this to look up the price of a particular component included in a configuration problem. it decomposes into a simple disjunction:
or and i = 1 j = x1  .. and i = n j = xn  
the equality constraints within each conjunct share no variables. hence pruning the values returned by inc enforces gac.
member constraint. this ensures that a particular value is used. more precisely  member i  x1 .. xn   holds iff there exists j with xj = i. we can decompose this into a disjunction:
or x1 = i .. xn = i 
pruning the values returned by inc enforces gac.
max constraint. this computes the maximum value taken by a sequence of variables. more precisely  max n  x1 .. xn   holds iff there exists i with n = xi and xi ≡ xj for all j. a max constraint can be decomposed into a disjunction:
or and n = x1 x1 ≡ x1 .. x1 ≡ xn 
and
.. 
pruning the values returned by inc on such a decomposition enforces gac.
channelling constraints. it is often advantageous to specify multiple viewpoints of a problem. constraints may be easier to specify in one viewpoint and propagate better in another. channelling constraints are then needed to link the different viewpoints. for example  multiple viewpoints have proved useful in the orchestra rehearsal problem  prob1 in csplib. the channelling constraints used here can be specified as constraint expressions:
iffiff z xk i== 1j and or  xxij = 1 = 1 x yj i1= 1  = 1  
the problem also contained a specialized optimality constraint which can be specified as the constraint expression:
implies x   y wx = 1 
where wx = 1 can itself be specified with an element constraint.
lex constraint. this lexicographically orders two vectors of variables. it has manyapplications when dealingwith symmetry  frisch et al.  1 . we can decompose it into a disjunction:
or x1   y1 
and x1 = y1 x1   y1   and x1 = y1 x1 = y1 x1   y1  ..  and x1 = y1 .. xn 1 = yn 1 xn ≒ yn  
as the constraints in each conjunct share no variables  pruning the values returned by inc enforces gac on the lex constraint. in addition  if we memoize previous results  inc will be comparable to the efficient algorithm in  frisch et al.  1 .
﹛the choice of decomposition of a global constraint is important for ensuring as much propagation as possible. for instance  an alternative decomposition is the conjunction: and x1 ≒ y1 
implies x1 = y1 x1 ≒ y1  .. implies and x1 = y1 .. xn 1 = yn 1  xn ≒ yn  
pruning the values returned by inc on this decomposition may not enforce gac on the lex constraint. consider x1 and y1 ﹋ {1}  x1 = 1 and y1 = 1. then x1 = 1 and
y1 = 1 are both inconsistent assignments. however  inc applied to this decomposition will return the empty set.
value precedence constraint. this breaks symmetries in a sequence of variables  x1 to xn caused by two indistinguishable values s and t  law and lee  1 . we can decompose it into a simple conjunction:
andimplies x1 = t x1 = s  .. 
implies xn = t or x1 = s .. xn 1 = s   
theorem1 of  law and lee  1 shows that enforcinggac on each conjunct achieves gac on the global constraint. as each conjunct expands out into a simple disjunction  pruning the values returned by inc enforces gac on the global constraint.
among constraint. this limits the number of variables taking values from a set  beldiceanu and contejean  1 . more precisely  among  x1 .. xn   d1 .. dm  n  holds iff n = |{i|xi = dj}|. the constraint is useful in many
resource allocation and scheduling problems. by introducing additional variables ni in which to accumulate a count  we can decompose this into a relatively simple constraint expression:
and ifthen x1 ﹋ d n1 = 1 n1 = 1  
ifthen x1 ﹋ d n1 = n1 + 1 n1 = n1  
.. ifthen xn ﹋ d n = nn 1 + 1 n = nn 1   
where xi ﹋ d is an abbreviation for or xi = d1 .. xi = dm .
﹛unfortunately  inc does not achieve gac on such a decomposition. consider  for example  x1 x1 ﹋ {1}  n ﹋ {1 1} and n1 ﹋ {1}. enforcing gac on among  x1 x1   1  n  will prune 1 and 1 from n whilst inc returns the empty set. similar decompositions and results hold for the atmost  atleast  change  and count constraints.
notallequal constraint. this ensures that not all variables take the same value  beldiceanu and contejean  1 . more precisely  notallequal  x1 .. xn   holds iff there exists. this can be decomposed into the following constraint expression: or
pruning the values returned by inc enforces gac.
nvalue constraint. this counts the number of values used by a sequenceof variables  pachet and roy  1 . more precisely  nvalue  x1 .. xn  n  holds iff |{xi|1 ≒ i ≒ n}| = n. the constraint is useful in a wide range of problems involving resources the alldifferent constraint is a special case of the nvalue constraint in which n = n. unfortunately  it is np-hard in general to enforce gac on a nvalue constraint  bessiere et al.  1 .
﹛one way to propagate this constraint in polynomial time is to decompose it with an additional set of 1 variables representing the characteristic function of the set of values used: and iff  s1 = 1 or x1 = 1 .. xn = 1   
 
where the domains of the xi are assumed to be from 1 to m. not surprisingly  inc does not compute the maximal set of inconsistent assignments for this constraint expression. for example  suppose x1  x1 ﹋ {1}  x1 ﹋ {1 1}  n = 1 and si = 1 for 1 ≒ i ≒ 1. then inc returns the empty set  even though x1 = 1 and x1 = 1 are inconsistent.
﹛a similar decompositionand result holds for the common constraint  which is also np-hard to propagate.
1	related work
lhomme has proposed gac algorithms for logical combinations of primitive constraints  focused primarily on those that are given in extension  lhomme  1 . for example  on a disjunction like or c1 .. ck   the algorithm tests each assignment for membershipin i maxinc ci . if the assignment is not in maxinc ci  for some i  the remainingmaxinc sets do not have to be tested. however  in the worst case  we still have to compute maxinc for all of the primitive constraints  as we require in our method.
﹛bessie`re and r∩egin have proposed an algorithm for enforcing gac on a conjunction of primitive constraints  bessie`re and re∩gin  1 . however  as could be expected  this requires o dn  time in the worst case.
﹛other approaches to propagatingconstraint expressions are based on reification or delaying. it is not hard  however  to show that inc provides strictly more pruning. suppose we have a disjunction like or x   1 x   1 . we can reify this into b1   x   1  b1   x   1  and b1 + b1   1.
these constraints are delayed until either inequality is entailed or disentailed. however  inc can prune values immediately. consider x ﹋ {1 1}. then neither inequality is entailed or disentailed. however  inc will return the inconsistent assignment x = 1.
﹛to perform more pruning on such disjunctions  cc fd  introduced constructive disjunction  van hentenryck et al.  1 . if any of the disjuncts  ci in a constructive disjunction  c1 ˍc .. ˍc ck is entailed by the constraint store  then the constructive disjunction is satisfied. otherwise  each constraint ci is added in turn to the constraint store and propagated. the resulting inconsistent assignments are recorded  the state restored  and the next constraint is processed. the intersection of the inconsistent assignments found for each constraint are then taken to be the inconsistent assignments for the disjunction. constructive disjunction can do more pruning than enforcing gac. for example  even though both or x = 1 y = 1  and x = y on 1 variable are
gac  propagating x = 1 ˍc y = 1 and x = y prunes
x = y = 1. this extra pruning arises from interaction between the disjunctive constraint and the other constraints in the constraint store. for this reason  constructive disjunction can be very expensive and may not justify its costs in practice  j. wu“rtz and t. m“uller  1 .
﹛the cardinality constraint can be used to implement conjunction  disjunction  negation  as well as a host of other useful constraints  van hentenryck and deville  1 . however  only a very restricted form of consistency is enforced on the cardinality constraint  and inc does more pruning in general. for example  if c1 is x = 1  c1 is x = 1 and d = {x = 1 x = 1 x = 1} then inc or c1 c1  d  =
{x = 1}. pruning x = 1 makes the problem gac. however  the equivalent cardinality constraint  card n  c1 c1   where n ≡ 1 is consistent without any prunings.
﹛in contrast to these previous works  we have provided a tractable method for computing a subset of maxinc that does a useful amount of constraint propagation. our algorithm is compositional as it uses the propagators provided for the primitive constraints. hence it can be applied to complex  nested logical expressions.
1	conclusion
we have proposed a simple and light weight method for propagating logical combinations of primitive constraints. since computing the maximal set of inconsistent assignments for such constraint expressions is intractable in general  we have given a polynomial time function which computes a tractable subset compositionally. we characterized precisely when this function computes the maximal set of inconsistent assignments. finally we have shown that many different global constraints can be implemented using these methods. there remain many interesting directions to follow both from a theoretical and practical perspective. for example  how do we compute and use nogoods for constraint expressions 
