 
instantiation orderings over formulas  the relation of one formula bemg an instance of another  have long been central to the study of automated deduction and logic programming  and are of rapidly-growing importance in the study of database systems and machine learning a variety of instantiation ordenngs are now ip use  many of which incorporate some kind of background information in the form of a constraint theory even a casual examination of these instantiation orderings reveals that they are somehow related  but in exactly what way  this paper presents a general instantiation ordering of which all these orderings are special cases  as are other instantiation ordenngs the paper shows that this general ordering has the semantic properties we desire in an instantiation ordering  implying that the special cases have these properties as well the extension to this general ordering is useful in applications to inductive logic programming  automated deduction and logic programming  knowledge-base vivification  and database systems 
1 	introduction 
instantiation orderings over formulas  the relation of one formula bemg an instance of another  have long been central to the study of automated deduction and logic programming  and are of rapidly-growmg importance to the study of database systems and machine learning  e g   in inductive logic programming  one common way-perhaps the most common way-to build a theory of background information into a computational system based on instantiation is to generalize the ordinary definition of instantiation to take account of the theory the earliest work of this kind was plotkin's 
    emall frisch minster york ac uk world-wide web http //dcpul cs york ac uk 1/ug/frisch/home html 
   'email dpageocomlab ox ac uk supported by esprit basic research action 1 on inductive logic programming 
1 	learning 
 method of building an equational theory into resolution merely by replacing unification with the more general operation of unification with respect to the theory  an operation he called t-unification  and is today called  e-unification   e-unification can be thought of as an operation used to obtain the greatest lower bound in an instantiation ordering that is relative to the built-in 
equational theory sorted jogics can be thought of as logics that incorporate background information about sorts  which are sets of objects in the domain all automated deduction systems for sorted logic  e g    walther  1  conn  1  schmidt-schauss  1  frisch  1   perform sorted unification  which  once again  can be thought of as an operation used to obtain the greatest lower bound in an instantiation ordering with a built-in theory about sorts 
　this paper presents an instantiation ordering for con straint logic  a logic that generalizes previous logics that incorporate background information  and proves that previous instantiation ordenngs are special cases of this ordering furthermore  section 1 shows the utiliy of this generalized instantiation ordering by discussing applications to  1  induction and inductive logic programming   1  deduction and logic programming  and  1  knowledge-base vivification we are currently investigating applications to constraint databases and database query languages as well the extension to constraint logic is vital for each of these applications 
　after defining our generalized instantiation ordering  we identify two semantic properties that one should expect of instantiation orderings  properties that make instantiation orderings useful theorem 1 establishes that our general instantiation ordering has these properties  consequently  because of the nature of these properties  all special cases of the general ordering must have these properties 
　a major consequence of defining instantiation in such a general setting is that the traditional substitutionbased definitions are inadequate the definition of instantiation presented in this paper  section 1  does not involve substitutions  it is primarily semantic two of the principle theorems of this paper  theorems 1 and 1  each identify conditions under which an instantiation ordering can be based on substitution examples are presented that show that substitution-based definitions cannot be guaranteed to work when these condi-

tions are not met thus  this paper demonstrates that substitution-based definitions  such as that embodied in e-unification  are not applicable in all generalized settings  and the paper identifies some of the limits of applicability for example  we see that the instantiation ordering for sorted logic can be generalized from sorts to arbitrary predicates provided that there are no built-in equations however  if there are built-in equations  then additional conditions  which are identified in the paper  must be met 
　by showing that sorted logic meets the conditions of theorem 1  and that logic with built-in equations meets the conditions of theorem 1  we are able to prove that the instantiation orderings associated with these two logics are special cases of our general instantiation ordering these proofs are simple  suggesting that it also may be simple to prove that other instantiation ordenngs are special cases of the general ordering other properties  such as the existence of least upper bounds and greatest lower bounds and the finiteness of antichains  ascending 
chains  ard descending chains  hold only in some instantiation ordenngs elsewhere sufficient conditions for obtaining these algebraic properties are presented  page  1  
1 	constrained formulas and constraint theories 
a constrained formula is composed of two ordinary formulae  one called the head and the other called the constraint the constraint can be any formula whose pred-
icates are drawn from a distinguished set of predicates called constraint predicates in addition  true is a constraint and has the obvious interpretation we stipulate that the interpreted equality predicate   =   is a constraint predicate for clarity  constraint predicates  except equality  are written in email capital letters  e g  elephant   the head of a constrained formula can be any formula that contains no constraint predicates we require that every variable that has a free occurrence in the constraint also has a free occurrence in the head 
constraint formulas are written m the form where is the head and c is the constraint 
but what does a constrained formula mean1 in all the applications of constrained formulas that we know 
about  the variables in the formulas are either all universally quantified or all existentially quantified 1 where is any formula  ordinary or constrained   we say that the universal closure of is the result of universally quanti-
fying all free variables in and we denote the universal closure of  p by similarly  the existential closure of  t  is the result of existentially quantifying all free variables in o/  and it is denoted by is a constrained formula  then we define to be logically equiva-
lent to 	and 	to be logically equivalent to 
　operations on constrained formulae act with respect to background information about the constraint predicates this background information takes the form of a 
	l in fact  substantia  difficulties confront attempts to mix 	1 monadic constraint predicates are often referred to as 
the quantifiers on constrained formulas 	boris 
	frisch and page 	1 


	1 	learning 


	frisch and page 	1 


1 	applications 
the introduction to this paper mentioned many applications of the instantiation ordenngs for ordinary firstorder logic  for logic with built-in equations! theories and for sorted logic this section extends the discussion to applications that employ the generalized order ings characterized by definition 1 and by theorems 1 and 1 the application areas discussed are  1  induction and inductive logic programming   1  deduction and logic programming  and  1  knowledge-base vivification 
　　1 jaffar  lanez  and maher  jaffar et ai   1  relax this reatnctiod to allow e to be any set of definite clauses whose only predicate is the equality predicate 
＜for example  see the survey by siekmann  
1 	learning 
inductive logic programming hp focuses on inductive learning using a first-order representation  specifically a definite clause representation  muggleton  1  at the foundation of ilp is the work of plotkin  and reynolds  on the computation of least upper bounds for ordinary logic this foundational work has been extended by fnsch and page to cover sorted logic  based on theorem 1   pnech and page  1   and then further to constraint logic  using a special case of the characterizations of theorem 1 and theorem 1   page and fnsch  1  the extension to constraint logic can also be viewed as an extension of buntine's  definition of generalized subsumption. 
　one active area of ilp research over the last four years has been the study of pac-leamability of restricted classes of definite clause concepts  relative to various classes of definite clause background theories  this work is summarized in  cohen and page  1  the earliest results  both positive and negative  within this area actually were proven using the aforementioned extensions of the work of plotkin and reynolds based on special cases of the ordenngs developed in this paper  page and frisch  1  crucial to these results are the semantic properties of these ordenngs  as provided in the theorems of this paper 
　these early results on learnabuity in ilp have been extended significantly to yield a positive result that applies to structural domains  such as molecular biology or blocks world problem solving  page  1  the foundation of this extended result is the characterization of instantiation in theorem 1  which allows equality in the background theory the extended result generalizes haussler's  learnabihty result for structural domains with subset queries in a number of ways  the most significant of which are  1  the ability to learn disjunctive concepts  and  1  the use of much richer background theories  for example  background theories that are not restricted to use only unary predicates  furthermore  it can be shown that this result subsumes most of the positive pac-learnability results for ilp  though not the positive pac-predtction results  1 
deductive systems constraint logic has been used as the basis of constraint logic programming  jaffar and lassez  1  hohfeld and smolka  1  and in generalizations of certain deductive systems  burckert  1  friech  1  such systems typically employ a resolu tion inference rule that generalizes the ordinary rule of resolution let us first observe how the ordinary rule of resolution is based on the ordinary instantiation ordering  and then consider how this inference rule can be generalized to constraint logic by basing it on our instantiation ordering for constraint logic 
　the ordinary rule of resolution operates by taking most-general instances of the two parent clauses such that the two literals being resolved upon become complements  that is  identical but opposite m sign  
     1for pac-predictability as opposed to pac-learnability  the final hypothesis need not have any particular form  e g  a logic program or a propositional dnf formula  

　in some simple constraint logics  such as some sorted logics  a most general common instance may not exist  in which case the above re1olutiod rule must generate many resolvents to take account of the multiple maximallygeneral  but incomparable  common instances the 
longer version of this paper identifies conditions surficient for the existence of greatest lower bounds 
　the completeness of resolution and similar inference systems is usually proved by a herbrand theorem  which relates the satisfiability of non-ground clauses to the satisfiability of their ground instances  and a lifting theorem  which relates non-ground derivations to thenground instances in a series of papers  frisch has shown how  under certain conditions  the proofs of these theorems can be systematically transformed to obtain proofs of the corresponding theorems for inference systems based on instantiation with built-in theories these results have been formulated for sorted logic based on the characterization of theorem 1  frisch  1   for modal logic based on the characterization of theorem 1  frisch and scherl  1   and for arbitrary constraint logic based on a characterization equivalent to that of 
definition 1  frisch  1  
　though not immediately obvious  the preceding discussion applies equally to many systems for automated deduction in modal logic as is well-known  modal logic often can be viewed as implicit discourse about possible worlds and  therefore  can be translated to non-modal logic that explicitly discusses possible worlds frisch and scherl  show that for many modal logics the sentences resulting from this translation can be transformed into constrainted formulas in which the accessibility conditions among possible worlds appear solely in the constraints from this point of view  the path unification algorithms employed by many modal deduction systems  ohlbach  1  jackson and reichgelt  1  wallen  1  can be seen to be solvere for such constraints in other words  these path unification algorithms compute the greatest lower bounds m the instantiation ordering 
knowledge base viviflcation the premise of vivlfication is that much of the complexity of automated deduction arises from incomplete knowledge m knowledge bases  kbs   m particular from disjunctions leading to reasoning by cases  borgida and etherington  1  ethenngton et ol  1  levesque  1  to use an example from levesque   suppose our kb includes age{jreo 1   v age{jrea 1  many of the interesting con-
1 	conclusion 
this paper has presented a general instantiation ordering for constrained formulas to which the established instantiation orderings for various rest ricted classes of constrained formulas are equivalent this ordering allows us to prove  at once  semantic properties of all these instantiation orderngs the utility of building theories into instantiation has been established by a long history of applications in automated deduction and a short history of applications m automated induction we anticipate that instantiation with built-in theories will continue its key role in deductive reasoning and will play an increasing role in non-deductive reasoning 
