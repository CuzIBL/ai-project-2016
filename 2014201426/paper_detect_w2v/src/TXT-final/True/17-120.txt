 
this paper describes a program that learns procedures b  examining worked-out examples in a textbook and bv working problems i wo kinds of production  if-then  rules are created: working forward rules that produce an action when a proceduie is executed and difference rules that suggest operators from observed transformations. dining example learning  the program examines two states in an example  fig tires out the operator that produced the second state and creates a production with some part ot the first line in the condition with the operatortor in the action. during learning b  working problems  the progiam generates its own example trace b  problem solving and uses the same example learning techniques. 
introduction 
alex  algebra example learner  is a program that learned to solve simple linear algebraic equations b  examining worked-out examples and bv working test problems. the work  neves  1  also included learning simple list algorithms  such as sorting and reversing a list. that work will not be reported here. an earliee version of the program was presented in ne es. 1 . 
two important characteristics of these textbook examples   / r / n conditions for learning  c.l. vanlehn  1  are that a. one procedure is taught per example and b. there are no hidden variables  however creating programs from examples or learning the commands of an operating system often requires the learner to induce variables that are not observable - dieiterich  1 . 
the sub|ect mallei for learning comes fiom a high school textbook 
 stem and crabill  1  on elementary algebia. the particular section of interest occurs after students are taught  in preceding chapters  exponents  the distributive rule  factoring  and tractions i hev then come to the first chapter in which the notion of solving an equation by manipulating symbols is introduced. i will describe the contents of this section to give an idea of what information is presented in this textbook  and which information alex uses to learn. 
the chapter on equation  solving tries to give an understanding of what an equation is and what operations can be applied to it by using a seesaw analogy with the equal sign at the fulcrum. only operations which preserve the balance of the seesaw can be applied to the equation. alex does not use this information. a problem with analogy here is that it is difficult to draw the correspondence between a weight on a seesaw  and an operation on an equation for the novice user. which math operaiions preserve equation  weight   
the next part of the chapter section teaches the legal operators of algebra by showing examples of how they work. these examples show how to add a number to both sides of an equation  how to subtract a number from both sides  how to multiply both sides by a number  and how to divide both sides by a number. the example for adding to both sides looks something like: 

alex uses these examples to learn the legal operations in algebra. 
next  the book demonstrates the futility ot solving for the unknown bv randomly plugging in numbers. alex does not use this information 
finally  the textbook presents a five step example that solves for the unknown  in the equation  1x - 1 = 1   using legal operations  such as adding a number to both sides of an equation. after this single example six test problems are given and this section ends. 
the goal ot this research is to demonstrate how learning can take place by looking at the examples and b  working the problems. examples especially are well suited for procedute instruction as thev contain steps that will lead to the goal text  1 teacher  explanation  on the other hand  can be misleading  incomplete  1r false. example learning will not generally result in a complete procedure however. the student must be prepared to use problem solving along with incomplete procedures in working the problems at the end of a section. working problems can produce learning behavior b  having the student  1f program  generate an example trace through problem solving behaviou. 
basic ideas 
here i will describe some ot the basic ideas behind the alex program. a more detailed explanation follows this section. 
while learning from an example aeex looks at two consecutive equation lines at a time. the fust line is viewed as having some operation applied to it to yield the next line the task ot the learner is to figure out the operation that took place and why it was applied in that circumstance. once the system has this knowledge a working forward production rule is built with some part of the first line as the condition and the operator as the action. when done with those two lines the pro gram goes to the next pair of example lines  continuing until the end of the example. at the end of the example the procedure is indexed with a difference production rule. the condition of this rule is made up of the difference between the first and last lines of the example. the action is the procedure name. 
procedure knowledge 
procedural knowledge in alex is encoded as production rules  newell & simon  1; anderson  1 . rules in alex are coded in an older version  ops1  of the ops family of production languages  forgv  1 . i will use a less formal  more english-like presentation of productions in this paper. productions have been a popular medium for learning since waterman  1  because ot their modularity. the unit of knowledge is the production. a newly created production is added to the set of productions already in production memory. there is no need to look at the other productions in the set. contrast this with a programming language where the placement ot code has important implications for what action is produced. 

pioduction system languages  such as ops. are flat. that is  anv production can apply at an  point. to get some top-down control ol the system some method must be developed that parimons the production set so that only a few productions can apply the usual way this is done  as is done in alex  is to group the productions in subroutines  goals  by placing a goal name in the condition side ol the production when a subroutine of productions is to be called that name is placed in working memory. 
in addition to partitioning there must be some method ol passing information to the subroutines and of passing back results. alex does this b  emulating a traditional progiamming language control structure in its working memory. a subioutine call generates a new node in memory. thai node has attached to n several pieces ol information: the name ol the subroutine  a list ot arguments  and the node ol the subroutine that called it. when a subioutine finishes it attaches the lesult to that subioutine node. e.g. 
call-1 name divide-both-sides args  1x=1. 1  calledby call-1 result   
declarative knowledge 
} acts are stored in working memory. during example learning the example is stored in working memory. an example is made up ol equation lines connected b  a next relation. each equation is represented as a tree structure  propositions  with the top node being the equation  the next level being the lelt side  the equal sign  and the right side; the level after that contains terms each side can contain 1 or more terms connected by a next relation. for example 1  1 - 1 
would have 1x before -1 on the lelt and a 1 on the hight 
simple example learning 
this section presents some ol the basic ideas behind example learning without the complications described in the next section. 
the production system has two kinds ol productions toi example learning. it has difference pioductions which are used dining the learning and it has working lorward productions which are the results of the learning process. a dilleience production has some information about the dilleience between two lines on the condition side ol the production and has an operator  which will cause that difference  on the action side. a working forward pioduction is part ol the subroutine ol productions. it is used when the subroutine is called  lor example  working forward pioductions to solve lor x are shown in figure 1. these productions will move numbers from the left hand side to the right  will move terms with the unknown from the right side to the left  will combine like terms  and will halt when the value of the unknown is found. 
when it is given an example the program starts at the first two lines and computes the difference between them. from this difference it determines which operation was applied to turn the first line into the second line. it then calculates why that operator was applied and creates a new working forward pioduction. after this it repeats the process on the next pair of lines in the example  until the end of the example is reached. at the end it creates a stopping production with the last line as the condition of the production rule  as in p1 above . these steps of example learning are called compute-difference  retrieve-operator  create-condition  and create-production below. 
	d. neves 	1 
pi it there is  a number on the left hand side of an equation  then subtract it from both sides. p1. it there is a term with  in it on the right hand side  then sub tract it from hoth sides p1. it there are two like temis on the left  or right  hand side  then combine them. p1. ii the equation is  then divide both sides by num i ps. 	ii the equation is then stop 
figure i. a working forward production system to solve for v. 
computing the difference. 
the fust thing alex does is lo compute the difference between two consecutive lines in the example. this dilleience is a list ol terms that are in the first line but not in the second  i.e. terms that have been removed  and a list ol terms that are in the second line but not in the list  i.e terms that have added . i;or example  the two lines below: 
+ 1 	: = 1 
   + 1 - 1 = 1 produce a dilleience ol  add   1    add   + 1    remove  + 1  . the actual terms ol the dilleience  e.g.   1   are nodes in a network representation ol the equation and contain othet information  such as whether they are belore or after the equal sign. 
retrieving the operator 
when the dilleience is calculated it is plated in working memory 
then the difference productions are called. these productions contain dilleience information in the condition side and supply an operator that produces that dilleience on the action side. one ol the pioductions matches the difference and returns an operator a dilleience production to recognize adding to both sides looks like. 
1. 1  add  + num 1   and numl is on the left and  add   + num1   and num1 is on the right and numl equals num1  then the operator is add-to-both-sides and the argument to the operator is numl. if the two lines in the example are: 

then production d1  above  will fire and assert that the operator used was add-to-both-sides with an argument ol 1. 
making the condition side 
i will talk more about this stage later. the condition side ol the working forward pioduction to be created will contain some  or all  ol the first ol the two equation lines being looked at. in the least we must include the argument of the operator  plus some context information. 
making the working forward rule 
once we have an operator and condition side a working forward production can be built and stored in production memory. a sample rule: 
rl. 1  - numl  is on the left side  then add-to-both-sides num1  
1 d. neves 
the shipping and difference rules 
when alex reaches the last line of the example it creates a stopping production with the line as the condition side and the action ol returning from the current production system subroutine. it also computes the difference between the first and last lines and create a difference production with the difference as the condition and the operator name as the action. 
details of alex 
the above description is a basic introduction to learning from examples. in actual practice there are complications  such as skipped steps  and inability to retrieve an operator after calculating the difference between two lines. 
figure 1 shows the top level of alex. two lines are worked on at a time. in the description above  this step was described as if the lines were compared and an operator was retrieved. however  alex actually uses a means-ends subroutine. 
t1. 	start with the first 1 lines of the example. 
t1. 	represent both lines. 
t1. 	call means-ends linel line1 . 
t1a if not at the end of the example then look at the next two lines and goto t1. 
t1b if at the end of the example then create a difference production with the difference of the first and last lines of the example as the condition  and the name of the routine being learned as the action. stop. 
figure 1. the top-level of the example learner. 
means-ends routine 
the means-ends routine places problem solving capabilities within the learning program. this routine  shown in figure 1  takes two lines as input. its goal is to apply operators to the first  and successively gen-
erated lines  until the second line is reached. 
the routine is modeled after the newell  shaw  and simon  newell and 
simon  1  general problem solver  gps  program. gps is given operators  a table of connections  a table connecting differences to operators that produce those differences   a start and a goal state. alex has no table of connections  but instead uses difference productions which connect operators to a group of changes  the difference . 
the means-ends routine below computes the difference between the two lines of the example and calls get-apply. get-apply retrieves an operator  by using a difference production  that will reduce the difference between the two lines. after retrieving an operator get-apply applies the operator to the first line and returns the result  a new line for the first line . now means-ends is called recursively with the new line to see if the goal line is reached. if this recursive call is successful  i.e. the goal line was reached  alex creates a working forward production with some part of the first line as the condition  and a call to the operator as the action. if the recursive call to means-ends fails then alex calls get-apply again to get and apply a different operator. 
inputtwo lines 
m1 compute the difference between the two lines. 
m1a if no difference  return success. 
m1b if there is a difference  call get-apply. 
m1a if get-apply is successful call means-ends new line  goal line . 
m1b if get-apply failed and this is an example  then trv a simple transformation. 
m1c if the simple transformation failed then return failure. 
m1d if the simple transformation was successful then build a working forward production  build a difference production  return the new line. 
m1a if means-ends failed  go to m1b  i.e. call get-applv again . 
m1b if means-ends was successful then build a working forward production and return the new line. 
figure 1. the means-ends subroutine. 
skipped 	steps 
one major reason for using means-ends to work through an example is that the book might have skipped steps in its presentation. for example  suppose two steps in an example are 1x - 1 = 1 and 1x = 1. 
several steps have been skipped. the full example is: 
1x - 1 = 1 
1x - 1 + 1 = 1- 1 
1x + 1 = 1 + 1 
1x = 1 + 1 
1x = 1 
the means-ends routine fills in the skipped steps by applying operators until the second line  1x = 1  is reached. these generated steps are used in the learning process just as though they were there in the original example. 
the novice user must fill in the skipped steps. the expert algebra problem solver probably has an operatoi  add-to-both-sides-&-simplify  that goes directly from the first to the second line above. this is an important operator to have because it gives purpose to the add-to-both sides operator. adding to both sides seems counter-productive because it takes the problem solver away from the goal of solving for the unknown by introducing two new terms. however  once simplification is done  it is seen that the operator is the first step in moving a term from the left to the right hand side of the equation. skipped steps are a signal for the novice user  as they were to an earlier version of alex  to treat the skipped steps as a subroutine to be learned. this subroutine is indexed by a difference production created from the first and second lines of the example  
creating new transformation 
so far i have described get-apply as retrieving an operator and applying it to the line. sometimes a new transformational operator is being learned  such as in the example teaching to add to both sides below. 
x = 1  argument is 1 x + 1 = 1 + 1 
in this example there is no operator to be recognized. instead one is being taught. what alex does here  when it does not retrieve an operator  is to construct a new operator with calls to primitive symbol manipulating functions such as  insert-after . the operator created 
above is a single production that inserts its argument in the left side of the equation and in the right side of the equation. also a difference 

production is created so the operator will be recognized in the future. 
alex only creates a new transformation operator when learning from an example. it is too dangerous to allow it to try to construct operators while problem solving because non-legal operators could be generated  even when learning from examples it is possible to learn such operators. for example  alex could learn an operator  from 1x - 1 = 1   1x = 1 + 1  that moves a number from the left to the right  inverting its sign. it could also learn to delete equal terms on opposite sides of the equal sign from  1 = 1  - 1  1 = 1x  these are operators that can be proven valid mathematically  however their use may mask 
ignorance. 
creating he condition side 
cieatmg the condition side of the production is difficult  and alex has some problems here. learning from examples is often associated with concept learning. anderson  kline  & beasley  1  call this of a production by applying it to different situations. 1 an operator is seen to apply in several different situations a general condition side can be constructed. if a production fites when it should not have fired  then it is punished and clauses have to be added to the condition to make it more specific. these tuning capabilities can take some time. alex does not have them instead  alex has several heuristics which do a good  but not perfect  |ob in cieatmg condition sides for productions. these are described below 
working forward productions call an operator with some arguments. 
the condition side of the working forward production must contain those arguments. the condition creator does a breadth-first search from the equation node of the first of the two lines looking for the argument. when it finds the argument it places it  along with some of its context  the path from the equation node to the argument  in the condition side. this procedure is outlined below. 
1. find a path from the current line to the argument. this path will be included in the production. often this path leads from the equation node to a term within the equation. sometimes the argument may occur elsewhere in the example  such as at the start of the example in the adding-to-both sides example . the program now tries to specify enough of the path to make it unique  i.e. to distinguish this path from other potential paths from the equation node. 
a. if there is no other path ol this length  from the current equa-tion node to the argument  then quit. 
b. otherwise check to see if the type  i.e. isa property  of the argument is unique. if so  include the isa property in the condition and quit 
c. otherwise  check to see if the argument is in a special location in its list  i e. first location  last . if so  include that information 
and quit. 
d. otherwise  put in absolute location information. 
1. note which nodes in the network are equal and include this information in the condition. 
1. add any constraints of the operator to the condition. each operator needs a certain state configuration to operate successfully  litis information is included in the difference production for that operator and is added to the working forward production being built. for example  canceling two terms requires that thev be equal but of opposite signs   + 1 + -1 . 
1. generalize the condition by deleting all constants. 
d. neves 1 
the performance system 
alex uses two methods to work problems in the textbook. when it is given a problem to solve it first tries to use its working forward productions to solve the problem if the goal is reached then the problem is solved and the system halts. it the working forward rules are not sufficient to solve all the problem it will halt at some point  short of the goal here the problem solving  means ends  component takes over and suggests an operator to try next. if this operator leads to the goal then a working forward production is built so that problem solving will not have to be done in the future. alex starts out with slow problem solving behavior  gradually working its wav to fast expert  working forward  behavioi with experience in working problems the perfor mance system will be discussed in more detail later 
traces of algebra learning 
this section describes how alex dealt with the 1 examples in the textbook . 
learning to add to both sides 
alex first learns the legal algebra operations  such as adding a number to both sides. it is given an example like: 

it looks at the two lines and notes that two  + 1 's have been introduced. it does not have an operator that will do this transformation so it makes one with its primitive list operations. it creates a single production procedure a l . 
ai. if the goal is add-to-both-sides argl is -equation  arg1 is =loadd 
= lterm is a left side term 
= rterm is a right side term 
then insert  + =toadd  after = lterm insert   + =loadd  aftei = rteim return from add-to-both-sides 
alex also creates a difference production  1  with the difference in the condition side and the add-to-both-sides name in the action side. 
d l . if the goal is get-action 
 add  + =lterm    add  + =rterm   
  = lterm equals = rterm  
= lterm is a left side term  -rterm is a right side term 
then the operator is add-to both-sides the argument is =lterm 
learning to divide both sides 
alex next learns how to divide both sides by a number with the following example. 

no operator is found that will transform the first line to the second so the system must construct an operator  a1 . 
a1. if the goal is divide-both-sides arg1 is =div 
= lterm is a left side term 
= rterm is a right side term 
then replace =lterm with  /  lterm =div  replace = rterm with  / =rterm -div  return from divide-both-sides 

1 d. neves 
the problem with production a1 is thai it is dividing terms on both sides and not the sides themselves. the example is ambiguous because there is only one term on a side. the production will not generate an error until it is applied to a side with more than one term. in that case it will divide just one term  as in: 

it turns out this is an error generated by novice algebra solveis as well  davis & cooney  1 . 
the difference production created for dividing both sides  d1  shows some propositions  under consitions  on the action side. these are pio positions that are needed in order for the operator to successfully apply  i.e. in order to divide you need something to divide . when a working forward production is created from this rule these propositions are added to the condition side of that newly created rule. this is step 1 of the condition creation routine explained above. 
1. ii the goal is get-action 

alex also learns how to subtract both sides of an equation by a number and how to multiply both sides b  a number. these productions are similar to the ones above for addition and division. 
learinig to solve for   
alex now knows the legal operators of algebra. it next is given an example to learn when to use these operators in solving for the unknown. 

lines j and 1 are processed first. the difference production for subtract-both-sides fires  suggesting a number was subtracted from both sides of the equation. the operator is applied to line 1 and line 1 is leached. the hypothesis is confirmed. to compute the condition side it searches the first line for a  1   the argument to the operator it found. it finds 1 on the left side of the equation and builds a1. 

alex has learned when to use subtract-both-sides when solving for x. 
alex now examines lines 1 and 1. a difference production for delete-terms fires. this difference production was learned in previous chapters as part of instruction on simplification  it is given to the alex program . delete-terms takes as input two equal terms  but having different signs  and deletes them. a1 is built from lines 1 and 1.: 

note here that the production is a bit loo specific. it will not f it two like terms are on the right hand side of the equation. 
lines 1 and 1 show another arithmetic operation in progress. a production that is veiy similar to a.1 above is created 
lines 1 and 1 demolish ate when to divide both sides by a number. a difference production for divide-both-sides fues and a1 is built. 

there is a term on the left and a term in on the right 
;dividing both sides requites there be something on the 
;right hand side to divide 
then divide-both-sides  + =numl  
the problem with a1 is that it is too general. there is a possibility that the rule could fire if there were moie than i term in either side of the equation. 
the last two lines of the example suggest another simplification operator. two numbei s are canceled. production a1 is built. 

after finishing this example alex has 1  including the stopping pioduction  working forward productions that will solve the same problem shown to it as well as other similai problems. in addition it has the 1 working forward pioductions which are legal operations in algebra and their 1 ditfeience productions. solve lor x also has a difference pioduction associated with it. 
learning b  doing 

just the working forward productions built from the example. others will require some problem solving. during that problem solving new learning can take place. 
problem c is very similar to the example and is solvable with the existing productions. both sides of the equation are divided by 1  then the two 1's on the left are canceled to yield x = 1. 
problem d is very nearly solved also. the problem comes with the too general production that divides both sides by a number. for the first step either both sides can be divided by 1 or 1 can be subtracted from both sides. because ops production system conflict resolution prefers productions with larger condition sides the incorrect  division  pioduction is picked. if the subtracting-from-both-sides routine is executed  i.e. after backing up from the other production application  the problem is solved. the division production needs some discrimination tuning  anderson  kline  & beasley  1  which would compare the problem state during a successful invocation of the production with the failure state. see the discussion at the end of the paper. 


summary 
alex learned to solve simple equations from two pages in a textbook. it first learned the torn legal operators by looking at examples showing what they do. alex then learned when to use those operators  as well as when to use simplification operators  by going through an example solving for x. alex was then given six problems to solve. two of the six problems can be solved with the working forward productions built during example learning. 
	d. neves 	1 
al.lx needed to use problem solving to solve two of the other three problems. as it found an operator that would get it to the goal it created a working forward production so that it would not have to problem solve again in similar situations. the third problem used a production built dining a previous problem and did not need problem solving. 
the last problem  was too hard for alex. the solution involves some steps that take one awav from the goal of solving for this problem is difficult for human beginners as well. 
problems 
creating the condition side 
there were both good and bad points on the development ol the condition side of the productions the worst part was that there was no facility for changing the condition side given feedback on how the production did. this resulted in many productions that were too specific and a couple that were too general. one way to correct the general rules is to use a discrimination procedure  anderson  1  on the general rule. in order for discrimination to work the aberrant rule must be first be identified. one way of identifying the aberrant rule is to use a check procedure  substitute the correct answer for the unknown and see where equation equality is violated . unfortunately  checking is is not taught until the next section of the equation chapter. the rule can also be identified by comparing its application with one in an example. if it is fired in a very different situation then it is a candidate tor change. in the case of dividing both sides above  the rule flies when there are two terms on the left hand side. this looks different from the equation in the example which has a single term on the left 
once a bad rule has been identified it must be changed by comparing the situation of incorrect application with a situation of correct application. in our case we have an instance of correct application in the worked-out example. it we compare the example of dividing both sides with the incorrect application in 
problem d  we notice that the left side has an extra term  the 1 . we change our rule  an  by adding that constiaint  see the proposition in italics below . 

the best part of how condition creation was done was that the program did not need many examples in ordei to form rules that would work. the textbook only provides a single example of solving an equation in this section. it is not unreasonable to expect that students  or program  have learned something about generalization in the mathematics domain before coming into equation solving. experience with simplification shows that particular number constants are not important and neither are terms not directly involved in the simplification. 
goal .sensitive differences 
during problem solving alex made use of the fact that arithmetic operators were sensitive to the changes they eventually produced. for example  to get rid of a number one can add its inverse. alex can learn to index operators this way it skipped steps are used. another way of learning to index operators in this manner is to observe how well each operator gets one closer to the goal when either going through an example or problem solving. it an operator takes one away 
1 	d. neves 
 torn the goal  such as adding to both sides ol an equation  then follow the example until at a state that is closet to the goal. the is analogous to an inquisitive student saying  why was that operator applied  it doesn't seem to help get me to the goal.  as the example is followed one of the steps will be closer to the goal than the original step  see the skipped steps example above for such a sequence . the original operator is then indexed by the change it eventually brings about. 
conclusion 
one of the main results ol this research is to show how learning  problem solving  and performance can be combined into a single system. learning from examples creates working forward productions that can be used in the performance system. while learning one must sometimes problem solve to fill in skipped steps. also  as new procedures are being learned they are indexed by their changes  i.e. a difference production is created . this means that the learning system can then recognize more complex examples and the problem solving system can bring to bear high level operators to work on difficult problems. 
footnote 
special thanks go my ph.d. committee at carnegie-mellon  h.a. 
simon  chairman; d. klahr  j. greeno  and j. larkin  for all their help in the area of learning and instruction as well as encouragement throughout. thanks also to jola jakimik and to an anonymous reviewer. the alex program was run on a kl1 computer and was made up of about 1 ops productions and 1 pages of uci lisp code. 
