 
in a recent paper  ginsberg shows how a backward-chaining atms can be used to construct a theorem prover for circumscription. here  this work is extended to handle prioritized circumscription. the ideas to be de-
scribed have been implemented  and examples are given of the system in use. 
1 introduction 
of all the approaches to nonmonotonic reasoning  mccarthy's circumscription  mccarthy  1  mccarthy  
1  seems to be the most popular. a great deal of work has gone into the development of new versions of circumscription designed to address various problems in commonsense reasoning. much less work  however  has gone into the development of methods by which these formalisms might be implemented. in  ginsberg  1   ginsberg shows how a backward-chaining atms can be used to construct a theorem prover for circumscription. here  this work is extended to handle prioritized circumscription. 
   in  ginsberg  1   the following procedure is given to determine whether a particular sentence q follows from the circumscription axiom. first  you construct a default proof d for g  where d is a formula obtained by conjoining and disjoining instantiations of negations of the predicate being circumscribed. then  you attempt to undermine this proof by constructing a default proof for  d. if you cannot undermine the original proof  then q is a consequence of the circumscription. 
   this procedure implements parallel circumscription since all the defaults are treated equally. for almost all applications of nonmonotonic reasoning  however  it is necessary to establish a prioritization among the defaults. in inheritance hierarchies  for example  the general view is that defaults about a subclass should override defaults about its superclasses. so if tweety is both a penguin and a bird  the default that penguins generally do not fly should have a higher priority than the default that birds generally do. 
   in this paper  we show that the above method for computing parallel circumscription can be generalized to handle prioritized circumscription by extending the argument chain to consider arguments against the pro-
posed proof of  d. one can view the procedure as a dispute between a believer b and an unbeliever u. b 
begins by presenting an argument for the desired conclusion. v then tries to rebut this argument by finding a counterargument at the same or higher priority. b now tries to refute the counterargument by finding a countercounterargument at a strictly higher priority. this process of alternating rebuttals and refutations continues until one side cannot answer the other's last argument. if b gets the last word  the original sentence follows; if u gets the last word  the sentence does not follow. 
　in the next section  section 1  we formalize these intuitions and show that this procedure does in fact correctly compute prioritized circumscription. in section 1  we provide examples of the implementation at work. we finish in section 1 with some concluding remarks. 
1 arguments  rebuttals  and refutations 
rather than working with the circumscription axiom  we will work directly with a set of sentences t and sets of sentences d1 .. .  dn. t contains the certain facts  dn contains the defaults with the highest priority  and so on down to d1  which contains the defaults with the lowest priority. in the partial order corresponding to prioritized circumscription  a model m1 is better than another model m1 if for one of the default sets di the set of sentences in di that hold in m1 is a proper superset of the set of sentences in di that hold in m 1   and if m1 and m1 agree on all the the default sets that have a higher priority than di: 
definition 1 let t be a consistent set of sentences  and let d1  d1 ...  dn be finite sets of sentences. define a 
partial order on models of t  writing m1   m1  if the following condition holds: 
; and for 
a model that is maximal in this partial order will be called d-maximal. 
proposition 1 let t be a set of sentences without function symbols  such that t includes domain closure and uniqueness of names assumptions. let p be a collection of predicates that are prioritized into n levels such that 
　　1  m d  denotes the set of sentences in d that are satisfied by m. the symbol indicates strict set inclusion. 
	baker and ginsberg 	1 

the ones in level n will be circumscribed at the highest 
priority  and the ones at level 1 will be circumscribed at the lowest priority. let d i b e the set of all propositions of the form  p x  where p is a predicate at level i and x is a ground instantiation of p's arguments. now 
for any sentence q  q follows from the prioritized circumscription of all the predicates in p in t while allowing all other predicates to vary if and only if q is true in all d-maximal models of t. 
proof this is an easy consequence of proposition 1' in  lifschitz  1 . d 
　the assumptions made by proposition 1 are rather strong. it may be possible to relax some of these assumptions  but this particular issue is not the concern of the current paper. 
now let us define what we mean by an argument: 
definition 1 let p be a sentence. we will say that p is an argument if the following conditions hold: 
1. p is of the form v dij 
for some collection of dij e d1 u ... u d n   and 
1. t u {p} is satisfiable. 
the priority of an argument is the least k such that the argument contains some dij ♀ dk .1 
definition 1 let p and q be sentences. 	we will say that p is an argument for q if p is an argument  and tu{p}i=q. 
　as discussed in the introduction  a prioritized circumscription proof will be viewed as a dispute between a believer b and an unbeliever u. it is important to understand that b and u are not playing by the same rules. b is trying to prove that some query q follows from the available assumptions  while u is trying merely to undermine b's efforts. thus the unbeliever u does not need to actually refute b's arguments; it is sufficient for him to generate counterarguments that b cannot refute himself.1 therefore  u's arguments may be at the same priority level as the arguments they are rebutting; b's arguments must be at a higher level than the arguments they are refuting: 
definition 1 letp and q be arguments. then  p rebuts q if and only if p is an argument for  q  and the priority of p is greater than or equal to the priority of q; p refutes q if and only if p is an argument for  q  and the priority of p is strictly greater than the priority of q. 
this is really a definition of attempted rebuttals and refutations. what we are most interested in is which arguments ultimately survive: 
1
　　note that p may be the empty conjunction  i.e. true; in this case  we leave the priority undefined. 
1
　　 in conventional nonmonotonic terms  b is trying to show that q holds in all relevant extensions of some default theory  while u is trying only to show that q does not hold in some extension. were it our intention to accept a conclusion valid in any extension  as suggested by reiter    the roles of b and u would be reversed. this remark is made formal in proposition 1. 
1 	automated deduction 
definition 1 let p and q be arguments. then  p ultimately rebuts q if and only if p rebuts q  and p is not ultimately refuted; p ultimately refutes q if and only if p refutes q  and p is not ultimately rebutted. 
at first glance  this definition may look circular since ultimate rebuttals and ultimate refutations are defined in terms of one another. but since a refuting argument must always have a higher priority than the argument that it is refuting  we have really defined an ultimate rebuttal at level k in terms of ultimate refutations at levels of at least k + 1. since there are only a finite number of prioritization levels  the definition is well-founded. we can now state our result: 
proposition 1 let q be a sentence. then q holds in all d-maximal models of t if and only if there is an argument for q that is not ultimately rebutted. 
the proofs of proposition 1 and of subsequent propositions are contained in appendix a. 
　one might conjecture that there would be an analogous result stating that q holds in some d-maximal model if and only if there is an argument for q that is not ultimately refuted. the  only if  claim  however  is incorrect. if q were a new symbol  for instance  there would be no arguments for g  and yet q would still hold in some maximal model  since there also would be no arguments for  q.  in order to state the correct corollary  we define the notion of an extension: 
definition 1 define the following equivalence relation on d-maximal models of t: m1 ~ m1 if for all i where 1   i   n  m1  di  - m 1  d i  ; that is  if m1 and m1 agree on all the defaults. we will call these equivalence classes extensions. we will say that a sentence holds in an extension if it holds in every model in that extension. this corresponds to the usual meaning of an extension. 
proposition 1 let q be a sentence. then q holds in some extension of the default theory if and only if there is an argument for q that is not ultimately refuted. 
1 implementation 
to use proposition 1 effectively  we need some way to determine the various arguments for a given sentence. since there may be many such arguments  and since each of them may in turn have many counterarguments  it would be inefficient to consider each of them individually. the following proposition  however  lets us limit our attention to the single weakest argument. this is obtained by disjoining all the minimal conjunctive arguments that have appropriate priorities. 
proposition 1 let q be a sentence  let i be a priority level  and assume that there is some argument for q with at least this priority. let p be the disjunction of all the minimal conjunctive arguments for q that have priorities of at least i. then   1  p is an argument for q with priority of at least i  and  1  p is ultimately rebutted  refuted  if and only if every argument for q with priority of at least i is ultimately rebutted  refuted . 
　it turns out that these weakest disjunctive-normalform arguments correspond exactly to the labels in an atms  de kleer  1  reiter and de kleer  1 . therefore  we can calculate these arguments using the backward-chaining atms provided with ginsberg's multivalued logic system  mvl  ginsberg  1 . whenever the prioritized circumscriptive theorem prover invokes mvl  it supplies it with the relevant priority limit. this makes sure that default assumptions whose priorities are not high enough will not be considered. 
　we now present two examples of the system at work: the standard nonflying penguin example and reiter's nixon diamond  reiter and criscuolo  1  . the output is as produced by the program  except for minor textual modifications.  for example  the database is maintained in clausal form  but is displayed below using a prologlike syntax.  
1 	tweety the penguin 
this is the database for the penguin example: 
penguin tweety . 
bird x  :- penguin x . 
flies x  :- bird x . 	p1  priority 1  
not flies x   :- penguin x . 	p1  priority 1  
　tweety is a penguin and therefore a bird. birds normally fly; penguins normally do not fly. the p1 and p1 tags are used by the atms to keep track of the default assumptions. note that we have assigned a higher priority to the penguin default. we ask the theorem prover to find something that does not fly: 
not flies x    
trying to prove not flies x  . 
invoking mvl. 
values returned are: bindings: - x = tweety}  argument: p1 with x - tweety. trying to rebut  not flies tweety   :- penguin tweety  . 
invoking mvl at priority  = 1. 
values returned are: n i l . 
rebuttal f a i l s . 
     proof succeeds! x = tweety. 
　the theorem prover begins by finding a default proof that tweety does not fly. it then tries to rebut this argument. but since the default that penguins do not fly has a higher priority than the default that birds do  the prover is unable to rebut the argument. thus  the proof ultimately succeeds with x bound to tweety. 
　when we ask the prover to find something that flies  we get the following: 
flies x   
trying to prove f l i e s   x   . 
invoking mvl. 
values returned are: bindings: {x = tweety}  argument: p1 with x = tweety. trying to rebut  flies tweety  : bird tweety  . 
invoking mvl at p r i o r i t y  = 1. 
values returned are: 
	argument: 	p1 with x = tweety. 
trying to refute 
 not flies tweety   	:penguin tweety  . 
invoking mvl at p r i o r i t y   1. 
values returned are: n i l . 
refutation f a i l s . 
　　　rebuttal succeeds. proof f a i l s ! 
at first  an argument is found that tweety flies. but since the argument that birds fly has a priority of only 1  it is rebutted by the argument that penguins do not fly. since this rebuttal cannot be refuted  the original query has no solution. 
1 	the nixon diamond 
in the penguin example  the competing defaults were at distinct priority levels. here  we consider the classic example of competing defaults with the same priority: 
republican nixon . 
quaker nixon . 
hawk x  :- republican x . 	p1  priority 1  
dove x  :- quaker x . p1  priority 1  not hawk x   :- dove x . 
　nixon is both a republican and a quaker. republicans are typically hawks  but quakers are typically doves  and therefore not hawks. we ask the system to find a hawk: 
hawk x   
trying to prove hawk x . 
invoking mvl. 
values returned are: bindings: {x = nixon}  
argument: p1 with x = nixon. trying to rebut  hawk nixon  :republican nixon  . 
invoking mvl at p r i o r i t y  = 1. values returned are: 
argument: p1 with x = nixon. trying to refute  dove nixon  :- quaker nixon  . 
invoking mvl at p r i o r i t y   1. 
values returned are: n i l . 
refutation f a i l s . 
　　　rebuttal succeeds. proof f a i l s ! 
　since p1 and p1 have the same priority  the argument that nixon should be a hawk is rebutted by the argument that he should be a dove. thus  there is no solution to the original query.  if the priorities had been different  this would not be the case. thus  for example  if p1 had a higher priority than p1  we would be able to conclude that nixon is a hawk.  it should be noted that since default p1 has the same priority as default p1  p1 can rebut p1  but it cannot refute it. that is  p1 has enough force to prevent p1 from being accepted as a conclusion  but it does not have enough force to stop p1 from interfering with other arguments. in particular  if we considered the argument that nixon is a dove  then p1 would ultimately rebut this argument. 
	baker and ginsberg 	1 
   things would not work as smoothly if we allowed arguments to refute other arguments with the same priority. b might start by asserting an argument p. u might rebut with some argument q at the same level. at this point  b could simply repeat his original argument!  if tu {q}  =:  p  then tu { p } i=  q.  a n d so the dispute would continue interminably. 
1 conclusion 
in this paper  we have presented a method of computing prioritized circumscription  for theories that contain uniqueness of names and domain closure axioms . some comparisons to other work should be mentioned. 
   using ideas from  gelfond et a/.  1   przymusinski  also presents an algorithm for prioritized circumscription  but it does not make full use of the priorities of the relevant arguments. regardless of the query  przymusinski's algorithm steps mechanically through each prioritization level  invoking his parallel circumscriptive theorem prover at each stage. this would be rather inefficient if the default theory had many prioritization levels  but only a few of these levels contained arguments that were relevant to the given query. furthermore  przymusinski's algorithm is described in terms of a specific first-order inference algorithm: mllo-resolution  a variant of ordered resolution. ours  on the other hand  can use an arbitrary first-order theorem prover. this decomposition of the problem makes our method easier to understand  and it puts us in a position to benefit more easily from future advances in theorem-proving technology. 
   much of the interesting research on defeasible reasoning has been described in procedural  rather than model-theoretical  terms. using proposition 1  we can now make some comparisons between this procedurally oriented work and prioritized circumscription. 
   loui   for example  discusses the general question: when is a defeater defeater a reinstater  in other words  if p is an argument against q  and q rebuts r  under what circumstances does p allow us to conclude r after all  for prioritized circumscription  we can give a sharp answer to this question: p reinstates r if and only if p ultimately refutes q as defined in definition 1; it is not sufficient for p merely to ultimately rebut q. 
   our proof procedure is also similar to some of the work by horty and thomason on inheritance hierarchies  horty and thomason  1 . they present a recursive definition of entailment that accepts any argument all of whose rebutters are themselves defeated by acceptable arguments. there are a number of differences  however  between the proposals; we will list only a few of these differences. first  since our system uses first-order logic instead of a graph-based formalism  it can handle dis-
junctive arguments. consider  for example  ginsberg's extension to the nixon diamond where it is known that both hawks and doves are  politically motivated.  circumscription will conclude that nixon is politically motivated since hawk nixon  v dove nixon  cannot be rebutted; horty and thomason will not reach this conclusion since there is no single path in the inheritance network that sanctions it. 
1 	automated deduction 
   second  it appears that horty and thomason's graphbased formalism can support a richer structure of default orderings than can prioritized circumscription; for many of their hierarchies  there is no obvious way of assigning priorities to the default links in order to translate the hierarchy into prioritized circumscription. third  and most importantly  they derive priorities based on specificity while we have to state the priorities explicitly. therefore  the whole class of issues related to specificity is simply not addressed by our work. one intriguing possibility would be some kind of  dynamic circumscription  in which the theorem prover could be recursively invoked to determine whether one argument had a higher priority than another. this prioritization could be based on specificity or perhaps some more general scheme. we have implemented a primitive version of such a system although its formal properties are not entirely clear. 
   finally  it is interesting that the proofs generated by our prioritized circumscriptive theorem prover resemble the way a person might reason: first tentatively drawing a conclusion  then thinking of possible objections to this conclusion  and finally trying to dispose of these objections. we find it encouraging that the proofs have this intuitive quality. 
acknowledgements 
this work has been supported by the rockwell palo alto 
laboratory  by general dynamics  and by nsf under grant number dcr-1. the first author is supported by an a f o s r graduate fellowship. 
a 	proofs 
it will be convenient to describe the d-maximal models of t in terms of the defaults holding in them. given a d-maximal model m  let plm be the conjunction of all the defaults of priority at least i that hold in m . 1 
   the following lemma will be useful in proving propositions 1 and 1. 
l e m m a 1 let q be an argument. then   1  q holds in some d-maximal model of t if and only if it is not ultimately refuted; and  1  q holds in all d-maximal models of t if and only if it is not ultimately rebutted. 
p r o o f we will prove this by induction on the priority i of q. specifically  when proving part  1  of the lemma for an argument of priority i  we will assume that both parts of the lemma hold for arguments with priorities greater than t; when proving part  1  for an argument of priority i  we will assume that both parts of the lemma hold for arguments with priorities greater than z  and that part  1  holds for arguments with priorities equal to i. 
    1  =   if q is ultimately refuted by p  then p has a higher priority than q   and p is not ultimately rebutted. by our inductive assumption  p holds in all d-maximal models  and hence q does not hold in any d-maximal models. 
1
　　this definition and the following proofs are based on less general versions in  ginsberg  1 . 


	baker and ginsberg 	1 
