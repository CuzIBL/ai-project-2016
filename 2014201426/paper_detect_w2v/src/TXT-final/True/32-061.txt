 
structure-based approaches to diagnosis provide useful computational guarantees based on a device structure. in particular  these approaches can identify device structures for which the complexity of model-based diagnosis is guaranteed to be linear. structure-based approaches  however  can fail to answer even the simplest diagnostic queries if the device structure is not well behaved  strongly connected . we show in this paper that this deficiency can be addressed to a reasonable extent by utilizing device behavioral properties  its component models in particular  which are typically ignored by structure-based approaches. specifically  we present a structure-based algorithm for diagnosis which takes advantage of a device behavior and then present experimental results indicating that our algorithm can lead to significant  orders-of-magnitude  savings over pure structural approaches when applied to strongly connected devices. 
1 	introduction 
1 	qualitative reasoning and diagnosis the utilization of problem structure in automated reasoning has become a major computational technique in certain communities and is gaining momentum in others. in probabilistic reasoning and constraint satisfaction  structure is the main aspect of a problem which is used to control the complexity of inference  dechter and dechter  1; .jensen et al  1; pearl  1 . in probabilistic reasoning  structure refers to the topology of a bayesian network  and in constraint satisfaction it refers to the topology of a constraint network. structurebased reasoning has also been introduced to modelbased diagnosis  where structure refers to the intereonnectivity of device components  hamscher et a/.  1; dechter and dechter  1; geffner and pearl  1; darwiche  1 . 
　one of the most interesting aspects of structure-based diagnosis is that it ties the complexity of computing diagnoses to a very intuitive measure: component interconnectivity. as it turns out  the less connected a device is  the easier it is to diagnose using structure-based methods. the connectivity of a device structure is typically summarized by a measure known as the structure width. it is well known that the best-case and worst-case complexities of standard structure-based algorithms are exponential  only  in the width of a device structure. therefore  if the width is small  all is well. however  if the device structure has a large width  then structurebased algorithms are effectively non-usable. 
　this is probably one of the greatest challenges to structure-based reasoning especially that some problems which are known to be easy  such as inference with horn clauses  can sometimes be posed as problems with complex structures; therefore  making them intractable to structure-based methods. stated differently  one can identify problems that have a varying level of difficulty  yet posses the same structure. this means that the difficulty of a problem cannot be measured only by its structure. it also means that some non-structural properties must be appealed to if one is to optimize the performance of structure-based methods. 
　the contribution of this paper is in pursuing this intuition in the context of model-based diagnosis. specifically  we provide a structure-based algorithm for modelbased diagnosis which exploits non-structural properties of a device. the properties we exploit are the behavioral models of device components  which are typically ignored by structure-based methods. 
　our refined algorithm still maintains the standard worst-case complexity of structure-based methods  but its average-case complexity appears to be significantly better as illustrated by our preliminary experimental results. according to these results  our refined algorithm can lead to orders-of-magnitude savings over pure structure-based methods especially when the device structure is strongly connected. 
　this paper is structured as follows. section 1 presents some technical preliminaries which are needed to phrase the model-based diagnosis problem formally. section 1 discusses standard approaches to structure-based diagnosis  explaining their use of a device structure and stressing their non-use of a device behavior. section 1 
　turns to the basic intuition underlying our use of a device behavior where we introduce decomposition trees  which 


figure 1: a simple device. 
are a key tool we shall use in realizing our intuitions. section 1 presents the technical details of our approach and discusses our experimental results. section 1 closes with some concluding remarks. 
1 model-based diagnosis 
our goal in this section is to present a particular formalization of the model-based diagnosis problem. our formalization is not very standard  but it appears crucial to exposing the intuitions behind structure-based approaches and our proposed extension to them. 
　components: we start by defining a device  component c as an object which is characterized by an id  a set of ports  and a diagnosis function. specifically  id{c  is a number representing a unique identifier for the component; ports c  is a set of variables  with finite values  representing the component's inputs and outputs; and dg c a  is a function capturing the health of component c given an instantiation  of its ports.1 the value of is if instantiation  is inconsistent  with the normal behavior of component c and is {{}} otherwi.se. 
　consider the device in figure 1 for an example. let c refer to the first buffer. then id c  = 1  ports c  - 
	= {{1}} if 	instantiates a and b 
to different values and .dg  	= {{}} otherwise. 
devices: a device is defined as a set of components 
               . for example  the device in figure 1 is defined by the set   which refer to the four buffers from left to right  respectively. here   = {a  b} and ports  = {b c}. note that one can figure out how components are interconnected by examining the components' ports. 
　model-based diagnosis: a key question of concern to model-based diagnosis is this: given a device d = c1 ...  cn and an instantiation  of some of the device ports  compute the diagnoses consistent with d and fi. 
　our goal in the remainder of this section will be to present a simple  brute-force method for answering this question. we shall then argue that structure-based methods refine this method by exploiting device structure. our proposal will then be presented as a further refinement of this method based on device behavior. 
　our treatment will make two assumptions:  1  components have no fault modes  they are either broken or ok ; and  1  only minimum-cardinality diagnoses are of interest. the first assumption simplifies the discussion considerably but without reducing the generality of our 
　　1 an instantiation of a set of variables is an assignment of values to these variables. 
treatment. the second assumption  however   or a similar assumption for preferring some diagnosis over others  is crucial to the techniques we shall propose. 
　the brute-force method for computing minimumcardinality diagnoses is based on diagnosis-sets: 
- a diagnosis is a set of component ids. example: 
{1} is a diagnosis with respect to the device in figure 1. it indicates that components 1 and 1 are faulty. 
- a diagnosis-set is a set of diagnoses with equal cardinalities. the cardinality of a diagnosis-set is the cardinality of any of the diagnoses it contains. example: {{1}  {1}  {1}} is a diagnosis-set with cardinality 1. it indicates three possible problems  each involving two faults.1 
- the union of two diagnosis-sets is defined as follows: 
note that the diagnosis function troduced earlier  returns a diagnosis-set representing the health of component c given an instantiation  of the component ports. 
　computing minimum-cardinality diagnoses can be viewed as extending the diagnosis function  to sets of components  devices . we shall see that this is straightforward given the above operations on diagnosis-sets. 
　we will first extend  while assuming that a is an instantiation of all of the device ports. specifically  let  be a device and let a be an instantiation 
of all of d'.s ports. it should be easy to verify that 
		 1  
represents the minimum-cardinality diagnosis for device d and instantiation consider figure 1 and let  be the instantiation . we have three faults here involving buffers 1  1 and 1: 

	darwiche 	1 

suppose now that   is an instantiation of only a subset of the device ports ports  d . it is not hard to verify that is the set of minimum-cardinality diagnoses for device d and instantiation . here  : ports d  | means that is an instantiation of ports d  which is consistent with 

　given the notions above  the key question of concern to us here is: given a device  and an 
instantiation   of some of its ports  compute dg d     as defined by equation 1 as efficiently as possible. in the following section  we show the key technique used by structure-based approaches to perform this computation. we then follow by our own proposed techniques for improving on this computation. 
1 	structure-based diagnosis 
structure-based diagnosis systems can be viewed as evaluators of equation 1 based on the following theorem: 

intuitively  the theorem shows how one can decompose a diagnostic query with respect to a device 
into a set of simpler diagnostic queries with respect to the smaller devices  and . moreover  this decomposition is exponential only in the number of common ports between sub-devices  and 
　we have a number of observations about this theorem. first  if applied recursively  it can reduce the computation of any diagnosis-set of the form dg d .   where d is a device  into the union and product of diagnosis-sets of the form  .   where c is a component. second  the amount of work to compute dg d .  by theorem 1 can be measured by the number of union operations performed during the application of the theorem. third  if it is possible to decompose the components of a device into sets which share a small number of ports  then diagnosing such a device is easy according to theorem 1. the main technique underlying structure-based methods is to compute good device decompositions and use them to apply theorem 1 or a variant. moreover  the main technique used for obtaining such decompositions is to compute a jointree for the device structure  dechter and dechter  1; darwiche  1 . 
　we will not discuss jointrees in this paper since we will not be using them in our approach. instead  we will use a simpler variant on jointrees  called decomposition trees  which we introduce later. 
1 	qualitative reasoning and diagnosis 
figure 1: a device with two decomposition trees. 
　we are now ready to introduce the key observation underlying our contribution in this paper. there are two ways to reduce the number of union operations performed while applying theorem 1; one is structural  the other is behavioral: 
1. structural: minimize the common ports between devices 
1.behavioral: skip any instantiation for which because the 
contribution of in this case will be ignored by the union operation. 
the first method is structural because it can be achieved by reasoning about the structure of the device. the second method is behavioral because it requires knowledge of the specific components comprising the device and cannot be accomplished based on the device structure alone. in particular  whether 
 holds depends on the diagnosis function dg c .  associated with each device component c. this behavioral dimension for optimizing the application of theorem 1 can be formalized by the following refined version of the theorem: 

this is exactly like theorem 1 except that we have added an extra condition on the instantiation 
　whereas structure-based methods have been mainly concerned with reducing the size of 
- therefore  reducing the number of instantiations  to consider - by appealing to structural device 
properties  our focus will be on identifying those instantiations that do not satisfy the extra condition 
. for this we must 
consult non-structural properties of devices. this new technique  as we shall demonstrate  can lead to significant savings. 
　the next section introduces decomposition trees which allow us to provide a simple implementation of theorem 1. we then follow by refining the algorithm to reflect the improvement introduced by theorem 1. 


figure 1: computing minimum-cardinality diagnoses. 
1 decomposition trees 
a decomposition tree for a device is a full binary tree whose leaves correspond to the device components; see figure 1. a decomposition tree is simply a control strategy for applying theorem 1. to be employed for this purpose  however  we must associate a few properties with each node tv in the tree. first  for a leaf node 
n    where c is the component associated with node n. second  for an internal node n  ni and nr are the left and right children of n  respectively  and . finally  for any node n  ports n  are the ports of components appearing in comps n . for example  in figure 1 c   
　here is the intuition behind a decomposition tree. the root node n represents the whole device which is decomposed into two sub-devices  one represented by ni and another by . therefore  to compute minimum cardinality diagnoses  all we have to do is apply theorem 1 
with  and  being  and . figure 1 presents a simple recursive algorithm  based on theorem 1  for computing minimum-cardinality diagnoses given a device decomposition tree. 
　　we have a number of observations on figure 1. first  note the boundary case where node n is a leaf node. in such a case  component c is associated with node n and we simply return        which is either or  as stated earlier.1 second  we have included a counter on line 1 to count the number of union operations performed. this is needed to explain our experimental results later. finally  we have included a caching mechanism on lines 1 and 1 because  by definition  two calls  will return 
equal diagnosis-sets whenever   and  ' agree on the values of ports n . therefore  we keep a cache at each node 
1
　　　when a call is made on the root node  we assume that is an instantiation of all input and output ports of the device. this guarantees that when we reach the boundary case on line 1   would instantiate all ports of the component c. 
n which stores the result of call diag i indexed by the projection of instantiation   on ports n . if another call  is made  the cache is checked first to see whether we have an entry for the projection of  on ports n . if there is  the entry is returned. otherwise  the call  recurses. 
　the quality of a decomposition tree is measured by its width and the complexity of algorithm a is linear in the number of nodes in the decomposition tree and exponential only in its width. following is the formal definition of a decomposition tree width. 
definition 1 let n be a node in a decomposition tree 
t. the cluster of node n is defined as follows. if n is a leaf node  then its cluster is ports n . if n is an internal node  then its cluster is the set of ports that appear either above and below node n in the tree  or in the left and right subtrees of node n. the width of a decomposition tree is the size of its maximal cluster minus one. 
consider node n1 in figure 1 c . then {b c d} and {a b c} are the ports that appear above and below node n1  respectively. moreover  {a b} and { a c } are the ports that appear to the left and right of n1  respectively therefore  the cluster of node n1 is 

theorem 1 let t be the decomposition tree used in algorithm a. the running time of algorithm a is where n is the number of nodes in t and w is its width.1 
　in standard structure-based approaches  where a jointree is used  complexity is also linear in the size of a jointree and exponential in its width  dechter and dechter  1; darwiche  1 . moreover  for every jointrce of width w  we can construct in linear time a decomposition tree with the same width  darwiche  1 .1 therefore  although we are using decomposition trees instead of jointrees  we still have the classical complexity result which characterizes structure-based approaches to diagnosis. the use of decomposition trees  however  is essential for exploiting device behavior  as suggested by theorem 1   a topic which we discuss next. 
1 	exploiting device behavior 
our aim in this section is to refine algorithm a so it implements the suggestion of theorem 1 as much as possible. we will do this in two steps: 
1.if on line 1 of algorithm a we are able to predict  
  we will skip 
1. otherwise  we will execute line 1  and then line 1  but we shall abort the execution once it is clear that the resulting diagnosis-set will have a cardinality which is greater than card  dlag n    . 
we will implement the second proposal first. 
   1 this result assumes that the diagnosis-set operations take constant time. 
   1  an algorithm for constructing good jointrees is then an algorithm for constructing good decomposition trees. 
1
note here that 
	darwiche 	1 


figure 1: first improvement on algorithm a. 

table 1: evaluating algorithm b  
1 	aborting computations 
our second proposal above is implemented in figure 1. 
we have basically introduced a new parameter a: which is passed to diag in addition to node n and instantiation 
 the meaning of this parameter is as follows. when executing the call   abort the computation and return {} once it is clear that the diagnosis-set to be returned will have a cardinality greater than k. 
　note that this cardinality threshold is updated after each iteration of the for-loop on lines 1  where the updated value is stored in the variable t. if during one iteration of the loop we compute a diagnosis-set   dr which has a cardinality smaller than t  we update the value of t to take this smaller cardinality. 
　the two places where this threshold is used are lines 1 and 1. on line 1  we require the computation to be aborted if it will lead to a diagnosis-set with cardinality greater than t.. if the call on line 1 succeeds and returns a diagnosis-set with cardinality t''  the call on line 1 should be aborted once it is clear that the cardinality of the diagnosis-set it will return is greater than t - / '. 
　note that we must supply a cardinality threshold k for the very first call    where n is the root of the decomposition tree. we can start by choosing k = 1 as the threshold. if this call fails  returns {}   we set the threshold to k = 1 and try again. if this fails too  we set the threshold to a: = 1  and so on. 
   table 1 shows five randomly generated devices  each 1 qualitative reasoning and diagnosis containing a 1 components.1 with respect to each device  we generated 1 random instantiations of the device input and output ports. each of the instantiations represents a normal behavior or induces a single fault. the table shows the average number of union operations performed by each of algorithm a and algorithm b. it also shows the average improvement factor over the 1 observations generated for each device  where the improvement factor for a particular observation is defined as the number of union operations performed by algorithm a divided by the number of union operations performed by algorithm b. the passing of cardinality threshold has clearly reduced the number of union operations but the reduction is marginal. the next improvement will be much more dramatic though. 
1 	skipping instantiations 
we will now present a refinement of algorithm b which will bring us even closer to realizing theorem 1. 
specifically  we will compute a lower bound  cardinality of the diagnosis-set 
                                   : n line 1  and skip the instantiaon line 1 if the bound is greater than threshold t. we implement this by replacing line 1 in figure 1 with for each 
we shall refer to the result as algorithm c. 
　we will now explain how to compute the lower bound  on the cardinality of . we precompute for each component c in the device a cardmality table which gives the cardinality of  for any in-
stantiation   that is   does not need to instantiate all ports of the component c . suppose that c is a buffer with a and b as its ports. the cardinality table for this component will then be as follows: 
   the devices used in the experiments where generated as follows. each device has a 1 components  inputs are considered components . on average  1% of the components have one port  input   1% have two ports  1% have three ports and 1% have four ports. the components are either buffers or and/or-gates. 
　　1 the cardinality table can be constructed on demand if it is too big to be precomputed. 


table 1: evaluating algorithm c. 
and  hence  the soundness of the extra test on line 1 of algorithm c. 
　this simple extension to algorithm b leads to dramatic savings as shown in table 1. the table depicts 1 devices  each containing a 1 components. the devices vary in their connectivity and are listed from the least connected to the most connected. with respect to each device  we generated 1 observations involving zero or one faults. we recorded the number of union operations performed by each of algorithms a and c. with respect to each device we report x/y where x is the average number of operations per 1 observations and y is the minimum such number. we also report similar statistics for the factor of improvement. 
　for algorithm a  the number of union operations does not depend on the device observation. it only depends on the decomposition tree which depends on the device structure. therefore  the number of union operations is effectively a reflection of the device connectivity. 
　the results in table 1 are quite dramatic  showing factors of improvement that exceed a 1 in some cases. this clearly illustrates the promise of augmenting structure-based methods with non-structural techniques. table 1 also appears to suggest that the improvement increases as the device becomes more connected  although a more comprehensive and principled experimental analysis is needed to verify this. 
　we have observed  however  that the improvement factor reduces as the number of faults increases. to illustrate this point  table 1 shows five scenarios with respect to device 1. each scenario involves 1 randomly generated observations with an increasing number of device faults. notice how the factor of improvement reduces from 1 to 1! this should not be surprising because as the cardinality threshold increases  the test on line 1 of algorithm c tends to succeed  therefore  permitting an increasing number of instantiations f1 to be considered. 
1 	conclusion 
we have proposed a relatively simple extension to structure-based methods for model-based diagnosis. the extension exploits the behavioral model of a device in addition to its structure. the utilization of structure re-

table 1: evaluating the impact of diagnosis cardinality. 
tains the desirable guarantees of structure-based methods  while the utilization of behavior seems to preempt combinatorial explosions that are typically caused by a strongly connected device structure. to operationalize our device-behavior utilization techniques  however  we had to provide a structure-based formulation for modelbased diagnosis which is based on decomposition trees instead of jointrees. decomposition trees are more intuitive than jointrees and yet they guarantee the same worst-case complexity result as jointrees. 
　we conclude by stressing that our results are only a first step in augmenting structure-based methods with non-structural techniques. we clearly did not take full advantage of the optimization suggested by theorem 1  but  through the introduction of decomposition trees  we have positioned structured-based algorithms to potentially realize that objective in the future. 
