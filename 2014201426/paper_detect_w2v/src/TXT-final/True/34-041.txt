 
       prograin s y n t h e s i s is the c o n s t r u c t i o n of a computer program from g i v e n s p e c i f i c a t i o n s . an automatic program s y n t h e s i s system must combine reasoning and programming a b i l i t y w i t h a good deal of knowledge about the s u b j e c t m a t t e r of the program. this a b i l i t y and knowledge must be m a n i f e s t e d b o t h p r o c e d u r a l l y  by programs  and s t r u c t u r a l l y  by choice o f r e p r e s e n t a t i o n   . 
       we d e s c r i b e some of the reasoning and p r o gramming c a p a b i l i t i e s of a p r o j e c t e d s y n t h e s i s system. s p e c i a l a t t e n t i o n i s paid t o the i n t r o d u c t i o n o f c o n d i t i o n a l t e s t s   l o o p s   and i n s t r u c t i o n s w i t h s i d e e f f e c t s i n the program being cons t r u c t e d . the a b i l i t y t o s a t i s f y s e v e r a l i n t e r a c t i n g goals s i m u l t a n e o u s l y proves to be i m p o r t ant in many c o n t e x t s . the m o d i f i c a t i o n of an a l r e a d y e x i s t i n g program to solve a somewhat d i f f e r e n t problem has been found to be a p o w e r f u l approach. 
       some of these techniques have a l r e a d y been implemented  some are in the course of implementat i o n   w h i l e o t h e r s seem e q u i v a l e n t t o well-known unsolved problems i n a r t i f i c i a l i n t e l l i g e n c e . 
	i 	i n t r o d u c t i o n 
       in t h i s paper we d e s c r i b e some of the k n o w l edge and the reasoning a b i l i t y t h a t a computer system must have in order to c o n s t r u c t computer programs a u t o m a t i c a l l y . we b e l i e v e t h a t such a system needs to embody a r e l a t i v e l y small c l a s s of reasoning and programming t a c t i c s combined w i t h a g r e a t deal of knowledge about the w o r l d . these t a c t i c s and t h i s knowledge are expressed both p r o c e d u r a l l y   i . e .   e x p l i c i t l y i n the d e s c r i p t i o n of a p r o b l e m - s o l v i n g process  and s t r u c t u r a l l y   i . e .   i m p l i c i t l y i n the choice o f 
       r e p r e s e n t a t i o n   . we c o n s i d e r the a b i l i t y to reason as c e n t r a l to the program s y n t h e s i s process  and most of t h i s paper is concerned w i t h the i n c o r p o r a t i o n of common-sense reasoning techniques i n t o a program s y n t h e s i s system. however  symbolic reasoning alone w i l l not s u f f i c e t o s y n t h e s i z e complex programs; t h e r e f o r e other techniques are necessary as w e l l   such as 
the c o n s t r u c t i o n of  almost c o r r e c t   programs t h a t must be debugged   c f . sussman   1 1     . 
* the m o d i f i c a t i o n of an e x i s t i n g program to perform a somewhat d i f f e r e n t task   c f . b a l z e r   1 1     . 
# the use of   v i s u a l   r e p r e s e n t a t i o n s to reduce the need f o r d e d u c t i o n   c f . bundy   1 1       
       we regard program s y n t h e s i s as a p a r t of a r t i f i c i a l i n t e l l i g e n c e . many o f the a b i l i t i e s we r e q u i r e of a program s y n t h e s i z e r   such as the a b i l i t y to r e p r e s e n t knowledge or to draw commonsense c o n c l u s i o n s from f a c t s   we would a l s o expect from a n a t u r a l language u n d e r s t a n d i n g system or a robot problem s o l v e r . these g e n e r a l problems have been under study by researchers f o r many y e a r s   and we do not expect t h a t they w i l l a l l be solved in the near f u t u r e . however  we s t i l l p r e f e r to address those problems r a t h e r than r e s t r i c t o u r s e l v e s to a more l i m i t e d program s y n t h e s i s system w i t h o u t those a b i l i t i e s . 
       thus  a l t h o u g h implementation of some of the techniques in t h i s paper has a l r e a d y been comp l e t e d   o t h e r s r e q u i r e f u r t h e r development b e f o r e a complete implementation w i l l be p o s s i b l e . we imagine the knowledge and reasoning t a c t i c s of the system to be expressed in a plainer-type language   h e w i t t   1 1     ; our own i m p l e m e n t a t i o n is in the qlisp language  reboh and s a c e r d o t l   1 1     . f u r t h e r d e t a i l s on the implementation are discussed i n s e c t i o n i i i - a . 
       part i i o f the paper g i v e s the b a s i c t e c h niques of reasoning f o r program s y n t h e s i s . they i n c l u d e the f o r m a t i o n of c o n d i t i o n a l t e s t s and l o o p s   the s a t i s f a c t i o n o f s e v e r a l simultaneous g o a l s   and the h a n d l i n g o f i n s t r u c t i o n s w i t h s i d e e f f e c t s . in part i i i we g i v e some of the h i s t o r i c a l background of a u t o m a t i c program s y n t h e s i s   and we compare t h i s work w i t h o t h e r recent e f f o r t s . 
       a l o n g e r v e r s i o n of t h i s paper   t o appear i n the a r t i f i c i a l i n t e l l i g e n c e j o u r n a l   w i l l apply the techniques of part ii to s y n t h e s i z e two 
  p a t t e r n m a t c h i n g   programs of 	some c o m p l e x i t y . 
	1 - 	fundamental reasoning 
       in t h i s s e c t i o n we w i l l d e s c r i b e some of the reasoning and programming t a c t i c s t h a t are b a s i c t o the o p e r a t i o n o f our proposed s y n t h e s i z e r . these t a c t i c s are not s p e c i f i c to one p a r t i c u l a r domain; they apply to any programming problem. in t h i s c l a s s of t a c t i c s   we i n c l u d e the f o r m a t i o n of program branches and loops and the h a n d l i n g o f statements w i t h s i d e e f f e c t s . 
a  	s p e c i f i c a t i o n s and t a c t i c s language 
1        we must f i r s t say something about how p r o gramming problems are to be s p e c i f i e d . in t h i s d i s c u s s i o n we c o n s i d e r o n l y c o r r e c t and exact s p e c i f i c a t i o n s i n a n a r t i f i c i a l language. thus  
we w i l l not discuss input-putput examples   c f . green et a l .  1  hardy    traces   c f . blermann et a l . 	   or natural language descriptions as methods for specifying programs; nor w i l l we consider i n t e r a c t i v e s p e c i f i c a t i o n of programs   c f . balzer  . 	neither are we l i m i t i n g ourselves to the f i r s t - o r d e r predicate calculus   c f . kowalski  1 . 	instead  we t r y to introduce s p e c i f i c a t i o n constructs that allow the natural and i n t u i t i v e description of programming problems. 	we therefore include constructs 
such as 
　　　find x such that p x  and the e l l i p s i s n o t a t i o n   e . g .   a 1  af1j  	. . . 	  a{n1 	. furthermore  we introduce new constructs that are s p e c i f i c to c e r t a i n subject domains. 	for instance  
in the domain of sets we use 
　　　 xj p x } for  the set of a l l x such that p x  . as we introduce an example we w i l l describe features 
of the language that apply to that example. since the s p e c i f i c a t i o n language is extendible  we can introduce new constructs at any time. 
　　　we use a separate language to express the system's knowledge and reasoning t a c t i c s . in the paper  these w i l l be expressed in the form of rules written in english. in our implementation  the same rules are represented as programs in the qlisp programming language. when a problem or goal is presented to the system  the appropriate rules are summoned by  pattern-directed function invocation   hewitt  1 . in other words  the form of the goal determines which rules are app l i e d . 
       in the following two sections we w i l l use a single example  the synthesis of the set-theoretic union program  to i l l u s t r a t e the formation both of conditionals and of loops. the problem here is to compute the union of two f i n i t e sets  where sets are represented as l i s t s with no repeated rlfiments. 

　　　before proceeding with our example we must discuss the formation of conditional expressions. 
b. 	formation of conditional expressions 
       in addition to the above constructs  we assume that our programming language contains conditional expressions of the form 

the conditional expression is a technique for dealing with uncertainty. in constructing a program  we want to know if condition p is true or not  but in fact p may be true on some occasions and false on others  depending on the value of the argument. the human programmer faced with t h i s problem is l i k e l y to resort to  hypothetical reasoning : he w i l l assume p is false and w r i t e a program r that solves his problem in that case; then he w i l l assume p la true and w r i t e a program q that works in that case; he w i l l then put the two programs together i n t o a single program 
  i f p then q else r   . 
conceptually he has solved his problem by s p l i t t i n g 
his world i n t o two worlds: 	the case in which p is true and the case in which p is false. 	in each of these worlds  uncertainty is reduced. 	note that we must be careful that the condition p on which we are s p l i t t i n g the world is computable 

in our programming language; otherwise  the conditional expression we construct also w i l l not be computable  cf. luckham and buchanan   
we cannot 
 we know that empty s  is 
in the case in which s is 
            since sets are represented as l i s t s   head and t a l l may be applied to sets as well as l i s t s their value then depends on our actual choice of representation. 1 

an acceptable program segment in our language -
       in the other world-the case in which s is not empty-we cannot solve the problem without resorting to the recursive loop formation 
mechanism  which is the subject of the next 
section. however  we know at t h i s point that the program w i l l have the form 

where the else clause w i l l be whatever program segment we construct for the case in which s is not empty. 
c. formation of loops 
　　　the term  loop  includes both i t e r a t i o n and recursion; however  in this paper we w i l l only discuss recursive loops  cf. manna and waldlnger  . i n t u i t i v e l y   we form a recursive c a l l when  in the course of working on our problem  we generate a subgoal that is i d e n t i c a l in form to our top-level goal. for instance  suppose our top-level goal is to construct the program r e v e r s e   l     that reverses the elements of the l i s t l   e . g .   reverse a  b c  d  =  d  b c  a  . if in the course of constructing t h i s program we generate the subgoal of reversing the elements of the l i s t t a l l   t     we can use the program we are constructing to s a t i s f y this subgoal. in other words we can introduce a recursive c a l l 
reverse t*il j&   to solve the subsidiary problem. we must always check that a recursive c a l l doesn't lead to an i n f i n i t e recursion. no such i n f i n i t e loop can occur here because the input t a l l   i   is  shorter  than the o r i g i n a l input i. 

as presented in t h i s section  the loop formation technique can only be applied if a subgoal is generated that is a special case of the top-level goal. we s h a l l see in the next section how t h i s r e s t r i c t i o n can be relaxed. i  generalization of specifications 
　　　when proving a theorem by mathematical i n duction  it is often necessary to strengthen the theorem in order f o r the induction to  go through.  even though we have an apparently 
more d i f f i c u l t theorem to prove  the proof is f a c i l i t a t e d because we have a stronger induction hypothesis. for example  in proving theorems about lisp programs  the theorem prover of boyer and moore  often automatically generalizes the statement of the theorem in the course of a proof by induction. 
　　　a s i m i l a r phenomenon occurs in the synthesis of a recursive program. it is often necessary to strengthen the s p e c i f i c a t i o n s of a program in order for that program to be useful in recursive c a l l s . we believe that this a b i l i t y to strengthen specifications is an essential part of the synthesis process  as many of our examples w i l l show. 

this is a good way to compute reverse: it uses very p r i m i t i v e lisp functions and i t s recursion is such that it can be compiled without use of a b tack. howe ver  w r l t l n g such a program ent a1a w r i t i n g the function rev  which is apparently more general and d i f f i c u l t to compute than reverse i t s e l f   since it must reverse i t s f i r s t argument as a subtask. the synthesis of this reverse function involves generalizing the o r i g i n a l specifications of reverse i n t o the specifications of rev. 
tne
	 a v e r s e function requires that 	the top-
level goal be generalized in order to match the lower level goal. another way to strengthen the specifications is to propose additional requirements for the program being constructed. for instance  suppose in the course of the synthesis of a function f   x     we generate a subgoal of the 
form p   f   a       where f a  	is a p a r t i c u l a r recursive 
c a l l . instead of proving p f a   it may be easier to strengthen the specifications f o r f   x   so as to also s a t i s f y p   f   x     for a l l x. this step may require that we a c t u a l l y modify portions of the program f that have already been synthesized in order to s a t i s f y the new s p e c i f i c a t i o n p. the recursive c a l l to the modified program w i l l then be sure to s a t i s f y p   f   a     . this process is i l l u s t r a t e d in more d e t a i l during the synthesis of the pattern matcher in the f u l l version of this paper. 
1 　　　the same recursion-introduction mechanism has been found independently by burstall and darlington  1 . 
e. c o n j u n c t i v e 	goals 
       the problem of s o l v i n g c o n j u n c t i v e goals is the problem of s y n t h e s i z i n g a program t h a t s a t i s f i e s s e v e r a l c o n s t r a i n t s s i m u l t a n e o u s l y . the 
general 	form 	for t h i s 	problem 	is 
	find z such 	t h a t p z  	and q z  
       the 	c o n j u n c t i v e 	g o a l s 	problem 	i s 	d i f f i c u l t because  	even 	if we have methods 	f o r s o l v i n g 	the 
goa is 
       find z such t h a t 	p z  and 
       find z such t h a t q z  i n d e p e n d e n t l y   the two s o l u t i o n s may not merge t o g e t h e r n i c e l y i n t o a s i n g l e s o l u t i o n . moreover  there seems to be no way of s o l v i n g the c o n j u n c t i v e 
goal problem in g e n e r a l ; a method t h a t works on one such problem may be i r r e l e v a n t to a n o t h e r . 
       we w i l l i l l u s t r a t e one i n s t a n c e of the c o n j u n c t i v e goals problem: the s o l u t i o n of two simultaneous l i n e a r e q u a t i o n s . a l t h o u g h t h i s problem is not i t s e l f a program s y n t h e s i s problem  1t c o u l d be rephrased as a s y n t h e s i s problem. moreover the di f f i c u l t i e s i n v o l v e d and the t e c h nique to be a p p l i e d extend a l s o to many r e a l s y n t h e s i s problems  such as the p a t t e r n - m a t c h e r s y n t h e s i s of the f u l l paper. suppose our problem i s the f o l l o w i n g : 

suppose f u r t h e r t h a t a l t h o u g h we can solve s i n g l e l i n e a r equations w i t h ease  we have no b u i l t - i n package f o r s o l v i n g s e t s o f equations s i m u l t a n e o u s l y . we may t r y f i r s t to f i n d a s o l u t i o n to each equat ion s e p a r a t e l y . s o l v i n g the f i r s t 
e q u a t i o n   	we might come up w i t h 

whereas 	s o l v i n g the second e q u a t i o n might 	g i v e 

there 	is no way of combining these 	two s o l u t i o n s . furthermore  	i t d o e s n ' t 	h e l p m a t t e r s 	t o reverse the o r d e r 	in which we approach the two subgoals. whet 	is necessary 	is 	to make 	the s o l u t i o n of 	the f i r s t goal as general as p o s s i b l e   	so 	that some 
s p e c i a l case of the s o l u t i o n might s a t i s f y the second goal as w e l l . for i n s t a n c e   a   g e n e r a l   s o l u t i o n to the f i r s t e q u a t i o n might be 

this s o l u t i o n is a g e n e r a l i z a t i o n of our e a r l i e r s o l u t i o n  the problem is how to f i n d a s p e c i a l case of the general s o l u t i o n t h a t a l s o solves the second equat i o n . in o t h e r words  we must f i n d a w such t h a t 

this s t r a t e g y 	leads us 	to a s o l u t i o n . 
the above approach of f i n d 1 n g a genera1 s o 1 u t i o n to one of the conjunets and p l u g g i n g it i n t o the o t h e r s i s not e f f e c t i v e i n t h i s case. 
f. 	side e f f e c t s 
       up to now we have been c o n s i d e r i n g programs in a l . i s p - l i k e language: these programs r e t u r n n value but e f f e c t no change in any data si r u e t u r e . in the next two s e c t i o n s we wi1 consider the s y n t h e s i s of programs w i t h   s i d e e f f e c t s   t h a t may modify the s t a t e o f the w o r l d . 
       for i n s t a n c e   a l i s p - l i k e program to s o r t two v a r i a b l e s x and y would r e t u r n as i t s value a l i s t of two numbers  e i t h e r  x y  or  y x     w i t h o u t a l t e r i n g the c o n t e n t s of x and y. on the o t h e r hand  a program w i t h s i d e e f f e c t s to s o r t x and y might change the c o n t e n t s of x and y. 
       in o r d e r to i n d i c a t e t h a t a 	program w i t h s i d e e f f e c t s is to be c o n s t r u c t e d   	we p r o v i d e a s p e c i f i c a t i o n 	o f 	form achieve 	p. 
this c o n s t r u c t means t h a t the world is to be changed so as to make p t r u e . for i n s t a n c e   1f we s p e c i f y a program 
       achieve x = y  we i n t e n d t h a t the program a c t u a l l y change the value of x or y  say by an assignment s t a t e m e n t . 
however  	if we s p e c i f y 
       find x such t h a t x = y  the program c o n s t r u c t e d would 	r e t u r n the value of y  	but would not change the value of x or y. 
       many of the techniques we used in the s y n t h e s i s o f 	i j s p - l i k e 	programs 	a l s o apply 	t o 	the c o n s t r u c t i o n o f programs w i t h s i d e e f f e c t s . 	i n p a r t i c u l a r   	we can use pat t e r n - d i r e c t e d 	f u n c t i o n i n v o c a t i o n t o r e t r i e v e 	t a c t i c a l 	knowledge. 	the s y n t h e s i s of 	the program 	in the 	f o l l o w i n g example has the same 	f l a v o r as our e a r l i e r union example  but 	involves 	the 	i n t r o d u c t i o n o f 	side e f f e c t s . 
       the program s o r t   x y  to be c o n s t r u c t e d is to s o r t the values of two v a r i a b l e s x and y for s i m p l i c i t y we w i l l use the statement i n t e r c h a n g e   x y  to exchange the values of x and y  instead 
of the usual sequence of assignment s t a t e m e n t s . our s p e c i f i c a t i o n w i l l be simply 
	achieve x 	& y. 
s t r i c t l y s p e a k i n g   	we should i n c l u d e in the s p e c i f i c a t i o n 	the a d d i t i o n a l 	requirement 	t h a t 	the s e t 
of 	values of x and y a f t e r the s o r t should be the same as b e f o r e the s o r t . 	however  we w i l l not c o n s i d e r such compound goals u n t i l 	s e c t i o n h  	and we can achieve the same e f f e c t by r e o u i r i n g t h a t the 	i n t e r c h a n g e statement be 	the only 	i n s t r u c t i o n w i t h s i d e e f f e c t s 	t h a t appears 	in 	the program 

       of course 	the method of g e n e r a l i z a t i o n does not apply to a l 1 c o n j u n c t i v e goal problems 	for i n s t a n c e   	the s y n t h e s i s of an i n t e g e r squareroot 	program has 	s p e c i f i c a t i o n s 

       the f i r s t step in a c h i e v i n g a goal is to see if it is already t r u e .   i f a goal is a theorem  f o r i n s t a n c e   we do not need to c o n s t r u c t a p r o gram to achieve i t .   we cannot prove x＼y  but we can use it as a b a s i s f o r a h y p o t h e t i c a l world s p l i t . this s p l i t corresponds to a c o n d i t i o n a l e x p r e s s i o n in the program being c o n s t r u c t e d . in f l o w c h a r t n o t a t i o n the c o n d i t i o n a l expression i s w r i t t e n as a program branch: 

1 

and we wish to determine if x 1 at point 1. in order to do t h i s it suffices to check if what we know at point 1 implies that y 1. in general  to determine an assertion of form p x  at point 1  check p y  at point 1. we w i l l say that the assertion p y  is the result of  passing back  the assertion p x  from point 1 to point 1.  this is 
precisely the process outlined by floyd  
and hoare  - see also manna  - in references to program v e r i f i c a t i o n .   
　　　furthermore  	if our program contains the instruction 
　　　often the s p e c i f i c a t i o n of a program will require the simultaneous s a t i s f a c t i o n of more than 
　　one goal. as in the case of conjunctive goals in m s p - l i k e programs  the special interest of t h i s problem lies in the inter-relatedness of the goals. the techniques of t h i s section w i l l now be applied to handle the i n t e r a c t i o n between goals. 1 

h. 	simultaneous goals 
a simultaneous goal problem has the form achieve p and q. 
sometimes p and q w i l l be independent conditions  so that we can achieve p and q simply by achieving p and then achieving q. for example  if our goal i s 
             achieve x = 1 and y = 1  the two goals x=1 and y=1 are completely independent in t h i s s e c t i o n   however  we w i l l be concerned with the more complex case in which p and q i n t e r act .. in such a case we may make p false in the course of achieving q. 
　　　consider for example the problem of 	sorting three variables 	x y  and z. 	we w i l l assume that the only i n s t r u c t i o n we can use is the subroutine s o r t   u v     described in the previous 
s e c t i o n   which sorts two variables. 	our goal is then 
achieve x y and y z 
we know that the program s o r t   u v  w i l l achieve a goal of form u' v. if we apply the straightforward technique of achieving the conjunct x y f i r s t   and then the conjunct y z  we obtain the program 

however  this program has a bug in that sorting y and z may disrupt the r e l a t i o n x y: if z is i n i t i a l l y the smallest of the three  in i n t e r changing y and z we make y less than x. reversing the order in which the conjuncts are achieved is useless in t h i s case. 
　　　there are a number of ways in which t h i s problem may be resolved. 	one of them involves the notion of program m o d i f i c a t i o n   	 cf. sussman   	the general strategy is as follows: 	to achieve p and q simultaneously  f i r s t w r i t e a program to achieve p; 	then modify that program to achieve q as w e l l . 	the essence of this strategy  then  	l i e s in a technique of program m o d i f i c a t i o n . 


we s t i l l need to achieve goal 	  i i   at point 1; we can achieve this goal simply by i n s e r t i n g the i n s t r u c t i o n s o r t   x z  at that point. 	this i n s e r t i o n is seen not to v i o l a t e any protected r e l a t i o n . 	our f i n a l program is thus 

if the subgoals are pursued in a d i f f e r e n t order  d i f f e r e n t variations on t h i s program are obtained 
　　　the program modification strategy seems to be a f a i r l y general approach to the simultaneous goal problem. it also is a powerful program synthesis technique in general. an expanded treatment of this strategy is contained in waldinger . 
　　　this concludes the presentation of our basic program synthesis techniques. in the longer version of t h i s paper we show how these same techniques work together in the synthesis of some more complex examples. 
i i i . 	discussion 
a. 	implementation 
       implementation of the techniques presented in t h i s paper is underway. some of them have already been implemented. others w i l l require f u r t h e r development before an implementation w i l l 
be possible. 
　　　we imagine the r u l e s   used to represent reasoning t a c t i c s   to be expressed as programs in a planner-type language. our own implementation is in qlisp  reboh and sacerdoti  . rules are summoned by pattern-directed function invocation . 
　　　w o r l d - s p l i t t i n g has been implemented using the context mechanism of qlisp  which was i n t r o duced in qa1  rulifson et al 	 . 	the c o n t r o l - s t r u c t u r e necessary 	for the hypothetical worlds  which involves an actual s p l i t t i n g of the control path as well as the assertlonal data base  	is expressed using the multiple environments 
 bobrow and wegbreit   of interlisp  teltelman   	although the w o r l d - s p l i t t i n g has been implemented  we have yet to experiment with the various strategies for c o n t r o l l i n g i t . 
　　　the existing system is capable of producing simple programs such as the union function  the program to sort three variables from part i i   or 

1 

the l o o p - f r e e segments of the p a t t e r n - m a t c h e r from the f u l l v e r s i o n o f t h i s paper. 
       the g e n e r a l i z a t i o n o f s p e c i f i c a t i o n s   s e c t i o n s ii-d  is a d i f f i c u l t t e c h n i q u e to apply w i t h o u t i t s g o i n g a s t r a y . we w i l l d e v e l o p h e u r i s t i c s t o r e g u l a t e i t i n the course o f the i m p l e m e n t a t i o n . s i m i l a r l y   our approach t o c o n -
j u n c t i v e g o a l s 	  s e c t i o n 	1-e  	needs 	f u r t h e r e x p l i c a t i o n . 
b. 	h i s t o r i c a l context and contemporary research 
       e a r l y work in program s y n t h e s i s   e . g . simon   1 1     green   1 1     waldinger and l e e   1 1     . was l i m i t e d by the p r o b l e m - s o l v i n g c a p a b i l i t i e s o f the r e s p e c t i v e formalisms i n v o l v e d   t h e general problem s o l v e r in the case of simon  r e s o l u t i o n theorem p r o v i n g in t h e case of t h e o t h e r s   . our paper on loop f o r m a t i o n  manna and waldinger 1   was s e t in a t h e o r e m - p r o v i n g framework  and paid l i t t l e a t t e n t i o n t o the implementation problems. 
       i t i s t y p i c a l o f contemporary program s y n t h e s i s work n o t t o a t t e m p t t o r e s t r i c t i t s e l f to a f o r m a l i s m ; systems are more l i k e l y to w r i t e programs the way a human programmer would w r i t e 
       them. for example  the r e c e n t work of sussman  i s modelled a f t e r the debugging p r o c e s s . rather than t r y i n g to produce a c o r r e c t program at once  sussman's system r a s h l y goes ahead and w r i t e s i n c o r r e c t programs which i t then proceeds t o debug. the work r e p o r t e d i n green e t a l .  a t t e m p t s to model a very e x p e r i e n c e d programmer  r e l y i n g on knowledge more than r e a s o n i n g in producing a program. 
       the work r e p o r t e d here emphasizes r e a s o n i n g 
       more h e a v i l y than the papers of sussman and green. for i n s t a n c e   i n our s y n t h e s i s o f the p a t t e r n matcher we assume no knowledge about p a t t e r n matching i t s e l f . of course we do assume e x t e n s i v e knowledge o f l i s t s   s u b s t i t u t i o n s   and o t h e r aspects of the s u b j e c t domain. 
       a l t h o u g h sussman's debugging approach has i n f l u e n c e d our t r e a t m e n t of program m o d i f i c a t i o n and the h a n d l i n g of simultaneous g o a l s   we tend to r e l y more on l o g i c a l methods than sussman. furthermore  sussman d e a l s o n l y w i t h programs t h a t manipulate b l o c k s on a t a b l e ; t h e r e f o r e he has not been forced to deal w i t h problems t h a t are more c r u c i a l in c o n v e n t i o n a l programming  such as the f o r m a t i o n of c o n d i t i o n a l s and l o o p s . 
       the work of buchanan and luckham   see a l s o luckham and buchanan  1  is c l o s e s t to ours in the problems it addresses. however  t h e r e are d i f f e r e n c e s in d e t a i l between our approach and t h e i r s : 
       the buchanan-luckham s p e c i f i c a t i o n language is f i r s t - o r d e r p r e d i c a t e c a l c u l u s ; ours a l l o w s a v a r i e t y o f o t h e r n o t a t i o n s . t h e i r method o f 
       forming c o n d i t i o n a l s i n v o l v e s a n a u x i l i a r y s t a c k ; ours uses c o n t e x t s and the bobrow-wegbrelt c o n t r o l s t r u c t u r e s . in the buchanan-luckham system the loops in the program are i t e r a t i v e   and are 
s p e c i f i e d in advance by the user as   i t e r a t i v e r u l e s   whereas in our system the   r e c u r s i v e   l o o p s are i n t r o d u c e d by the system i t s e l f when it r e c o g n i s e s a r e l a t i o n s h i p between the t o p - l e v e l g o a l and a subgoal- the treatment of programs w i t h 
s i d e 	e f f e c t s 	i s a l s o q u i t e d i f f e r e n t 	i n 	the buchanan-luckham system  	in which a model of 	the w o r l d 	is m a i n t a i n e d and u p d a t e d   	and a s s e r t i o n s are 	removed 	when 	they 	are 	found 	to 	contradict o t h e r a s s e r t i o n s 	in 	the model. 	our use of c o n t e x t s a l l o w s 	the system 	t o 	r e c a l l 	past s t a t e s o f the w o r l d and avoids 	the 	t r i c k y problem of d e t e r m i n i n g when a model 	is i n c o n s i s t e n t . 	it should be 
added t h a t the implementation of the buchananluckham system is c o n s i d e r a b l y more advanced than o u r s . 
c. 	conclusions and future work 
       we hope we have managed to convey in t h i s paper the promise of program s y n t h e s i s   w i t h o u t g i v i n g t h e f a l s e impression t h a t automatic s y n t h e s i s is l i k e l y to be i m m i d a t e l y p r a c t i c a l . a computer system t h a t can r e p l a c e the human p r o grammer w i l l very l i k e l y be a b l e to pass the r e s t o f the t u r i n g t e s t a s w e l l . 
       some of the approaches to program s y n t h e s i s t h a t we f e e l w i l l be most f r u i t f u l in the f u t u r e 
have been g i v e n l i t t l e emphasis in t h i s paper because they are not yet f u l l y d e v e l o p e d . for example  the technique o f program m o d i f i c a t i o n   which occupied only one s m a l l p a r t of the c u r r e n t paper  we f e e l to be c e n t r a l to f u t u r e program s y n t h e s i s work the r e t e n t i o n of p r e v i o u s l y c o n s t r u c t e d programs is a p o w e r f u l way to a c q u i r e 
and s t o r e knowledge furthermore program o p t i m i z a t i o n   c f . d a r l i n g t o n and b u r s t a l l   1 1     and program debugging are j u s t s p e c i a l cases of p r o gram m o d i f i c a t i o n 
       another t e c h n i q u e t h a t we b e l i e v e w i l l be v a l u a b l e is the use of more v i s u a l or graphicr e p r e s e n t a t i o n s   that convey more of the p r o p e r t i e s of the o b j e c t being discussed in a s i n g l e s t r u c t u r e . a m a t h e m a t i c i a n w i l l o f t e n i n f o r m a l l y use a d i a g r a m i n s t e a d of a symbolic r e p r e s e n t a t i o n to h e l p h i m s e l f f i n d a p r o o f . the t h e o r e m - p r o v i n g systems of 
g e l e r n t e r  	  i n geometry  	and bundy 	   i n a l g e b r a     	f o r example  	use d i a g r a m - l i k e n o t a t i o n s t o f a c i l i t a t e p r o o f s . 	w e suspect 	t h a t p r o gram s y n t h e s i s would a l s o b e n e f i t 	from such 	n o t a t i o n s . 
acknowledgements 
       we wish to thank robert boyer  	nachum d e r s h o w i t z   	bertram raphael  	and georgia s u t h e r l a n d f o r g i v i n g d e t a i l e d c r i t i c a l 	r e a d i n g s o f 	the manu-
s c r i p t . we would a l s o l i k e to thank peter d e u t s c h   richard f i k e s   a k i r a fusaoka  c o r d e l l green and h i s s t u d e n t s   irene g r e i f   c a r l h e w i t t   shmuel k a t z   david luckham  e a r l s a c e r d o t i   and ben wegbrelt f o r c o n v e r s a t i o n s t h a t aided i n f o r m u l a t i n g the ideas in t h i s paper. the s e t - t h e o r e t i c e x p r e s s i o n h a n d l e r is based on the work of jan derksen. we would a l s o l i k e to thank linda katuna  c l a i r e c o l l i n s and hanna z i e s f o r t y p i n g many v e r s i o n s o f t h i s m a n u s c r i p t . 
	this research was p r i m a r i l y sponsored by 	the 
n a t i o n a l science foundation under g r a n t s gj-1 and gk-1. 

1 

