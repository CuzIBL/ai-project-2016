 
oz is an experimental higher-order concurrent constraint programming system under development at dfki. it combines ideas from logic and concurrent programming in a simple yet expressive language. from logic programming oz inherits logic variables and logic data structures  which provide for a programming style where partial information about the values of variables is imposed concurrently and incrementally. a novel feature of oz is that it accommodates higher-order programming without sacrificing that denotation and equality of variables are captured by first-order logic. another new feature of oz is constraint communication  a new form of asynchronous communication exploiting logic variables constraint communication avoids the problems of stream communication  the conventional communication mechanism employed in concurrent logic programming. constraint  communication can be seen as providing a minimal form of state fully compatible with logic data structures 
based on constraint communication and higher-order programming  oz readily supports a variety of object-oriented programming styles including multiple inheritance 
1 	introduction 
oz is an attempt to create a high-level concurrent programming language bringing together the merits of logic and object-oriented programming m a unified language. 
　our natural starting point was concurrent constraint programming  saraswat and rinard  1   which brings together ideas from constraint and concurrent logic programming. constraint logic programming  jaffar and lassez  1  colmerauer and benhamou  1   on the one hand  originated with prolog ii  colmerauer tt al.  1  and was prompted by the need to integrate numbers and data structures in an operationally efficient  yet logically sound manner concurrent logic programming  shapiro  1   on the other hand  originated with 
   *this work has been supported by the bundesminister fiir forschung und technologic  contract itw-1. 
1 	distributed al 
the relational language  clark and gregory  1  and was promoted by the japanese fifth generation project  where logic programming was conceived as the basic system programming language and thus had to account for concurrency  synchronization and indeterminism. for this purpose  the conventional sld-resolution scheme had to be replaced with a new computation model based on the notion of committed choice. at first  the new model developed as an ad hoc construction  but finally maher  maher  1  realized that commitment of agents can be captured logically as constraint entailment. a major landmark in the new field of concurrent constraint programming is akl  janson and haridi  1   the first implemented concurrent constraint language accommodating search and deep guards 
　saraswat's concurrent constraint model  saraswat and rmard  1  can accommodate object-oriented programming along the lines of shapiro's stream-based model for concurrent prolog  shapiro and takenchi  1 . however  this model is intolerably low-level due to the clumsiness of stream communication and the lack of higher-order programming facilities. this becomes fully apparent  when the model is extended to provide for inheritance  goldberg et al.  1 . 
　thus the two essential innovations oz has to provide to be well-suited for object-oriented programming are better communication and a facility for higher-order programming both innovations require stepping outside of established semantical foundations. the semantics of oz is thus specified by a new mathematical model  called the 
oz calculus  whose technical set-up was inspired by the calculus  milner  1   a recent foundationally moti-
vated model of concurrency. 
　the way oz provides for higher-order programming is unique in that denotation and equality of variables are captured by first-order logic only. in fact  denotation of variables and the facility for higher-order programming are completely orthogonal concepts in oz. this is in contrast to existing approaches to higher-order logic programming  nadathur and miller  1  chen et a/.  1 . 
　constraint communication is asynchronous and indeterimnistic. a communication event replaces two complementary communication tokens with an equation linking the partners of the communication. constraint communication introduces a minimal form of state that 

is fully compatible with logic data structures. effi- variables in with scope free variables of an exprescient implementation of fair constraint communication sion are defined accordingly. is straightforward. 

	henz  smolka  and wurtz 	1 


1 	distributed al 


	henz  smolka  and wurtz 	1 

when a message is received by the object o  the method associated with the method name is retrieved using the method table of the object  i.e.  late binding . then the state of the object is replaced by the state obtained by applying the method. 
　the following procedure provides a generic scheme for creating objects from a method table and an initial message 
observe thai the notion of  self  is provided in a natural way by starting with the initial state state self :    . object initialization is provided by applying an initial message to that state. the resulting state is written on the blackboard. now  the object is ready to receive messages. we abbreviate message sending of the form {o m  by o m note that quantification of the communication link c hides the state and provides for data encapsulation 
1 	methods 
assume that we want to model a counter as an object. 
first  we fix the methods to be stored in the method table. to initialize the counter we use the method 
observe that init will add the attribute val if it is not present in the state ins  see the semantics of adjoinat in section 1 . to ease the treatment of the state and to get a more elegant notation we abbreviate this abstraction by 
1 	inheritance 
in our framework  inheritance amounts to using the method tables of other objects to build the method table of a new object we modify the procedure create to provide for inheritance. 
the procedure adjoin all  not shown  adjoins the method tables of ancestors and newmethods from left to right: for any method name  the rightmost method definition is taken  cf. adjoin at in section 1 . 
　to make the methods of objects accessible  an object is now represented as a record containing the methods and the send procedure. therefore  message sending changes slightly:  counter *inc stands now for 
{counter.send 	inc  
for which we introduce the following syntactic sugar 

1 	distributed al 


where the method expands to 

that the former tranforms the local state immediately  whereas other messages can be taken before the latter is eventually executed. 
1 	m e t a object protocol 
now  we modify the object system such that the essentials of object creation and message sending can be inherited  providing the object-system with a meta object protocol like in  kiczales et al.  1  for  'los. the new definition of create uses the meta-method create to describe the object's behavior. 

the underscore v' denotes an anonymous variable occurring only once 
   like an organism  an object can inherit the way it and its heirs are created  and the basic structure how it communicates with its environment. 
   we can further modularize the object protocol such that  e.g.  each method call is performed by a call to the meta-method methodcall. assume that the metamethods create and methodcall are defined in the object metaohject in this case  a visihleohject that sends a message containing its current state to a display whenever it  executes a method  can be created as follows: 
