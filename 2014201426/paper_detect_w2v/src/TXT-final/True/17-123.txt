 
　over the past ten years  significant progress has been made in understanding how the knowledge acquisition process for classification systems can be automated. but during this period little attention has been paid to the problem of how to automate the knowledge acquisition process for systems that solve problems by constructing solutions. this paper describes salt  a tool designed to assist with knowledge acquisition for configuration tasks. salt1 assumes a problem-solving strategy involving stages of generate  test  backup  modify  and regenerate. it exploits this problem-solving strategy to guide its interrogation of domain experts and to represent the knowledge they provide in a way that insures it will be brought to bear whenever relevant.1 
1. introduction 
　one of the great things about mycin  shortliffe 1  and other such systems is that their domain knowledge is kept distinct from the knowledge of how and when to apply that knowledge. the separation is achieved by defining a problem-solving strategy for classification  clancey 1  which completely determines the use to which the domain knowledge will be put. although more recent work  eg   clancey 1    neches 1   has shown that in the early systems the separation left something to be desired  even in its early form  the particular way in which it was achieved had important implications for knowledge acquisition. 
　in general  a knowledge acquisition tool can provide two kinds of assistance:  1  it can make it easy for someone with a particular expertise to communicate that expertise  and  1  it can somehow organize  or proceduralize  the knowledge that is communicated so that ail of the knowledge that is relevant in a 
　particular situation gets brought to bear. the mycin work suggested an approach to knowledge organization that has turned out to be quite powerful. the idea is to use a problemsolving strategy appropriate to some possibly quite narrow problem type to define the roles that the problem-solver's knowledge can play. a number of knowledge acquisition tools that exploit this approach to knowledge organization in classification problem-solvers have been developed  eg   davis 1    boose1   kahn1  . 
　the work described in this paper extends this idea to another type of problem-solver; the work is a first attempt to define the roles knowledge can play in configuring electro-mechanical systems. section 1 identifies the task demands and one strategy for solving the problem. section 1 describes salt  a tool for developing and maintaining knowledge-based configurers. section 1 discusses salt's current usefulness and plans for its extension. 
1. a problem-solving strategy for configuration tasks 
　salt was developed as a knowledge acquisition tool for vt  an elevator system configurer. the input to the configurer was to include functional requirements for the completed configuration  preferences for specific parts and a description of the spatial structure within which the configured system must fit. the system's output was to consist of quantities  descriptions and model numbers of parts selected and a specification of spatial relationships among parts and between parts and structural landmarks. 
　an isolated selection step might entail consulting a database of part specifications and selecting the least costly part whose specifications match the demands of the current partial configuration. an isolated layout step might consist of defining a distance between two parts as some algebraic function of the space available. what these steps have in common is that they are procedures for arriving at a piece of data needed to describe a configuration  a part type  a distance between two parts  by applying a relatively small class of methods  database lookups  calculations  assignment of constants  to other pieces of data  demands of the current configuration  available space . 
　what makes this type of configuration task interesting is that steps which appear acceptable in isolation may result in unacceptable configurations when combined. the problemsolving strategy we will focus on allows the configuring to proceed using the step sizes that are produced most naturally by configuration experts. it then employs other domain knowledge for spotting unacceptable configurations and deciding how to backtrack and effect a change that will avoid the original problem. this strategy has the following stages: 
1. generate each piece of the configuration  parts and relationships  using an appropriate method. 
1. identify constraints 	 ie  	limits on 	configuration values . 
1. compare each constrained value with its constraints. 
1. if a constraint is violated  determine what values could be changed to remedy the violation. 
1 	s. marcus et al. 
1. choose the least damaging change or change combination that remedies the violation. 
1. make the change and remove any values that depended on the old value. 
1. return to the generate phase. 
this strategy defines a problem-solving shell to which more specific domain knowledge can be added. three roles are specified:  1  a piece of knowledge can indicate how to determine the value of some piece of a configured system   1  a piece of knowledge can indicate how to spot a constraint violation  and  1  a piece of knowledge can indicate how to remedy a constraint violation. 
　use of data-driven procedures in the first stage of the problemsolving shell require knowledge that indicates how to determine the value of some piece of a configured system. needed are the details of the appropriate method  eg  an algebraic formula for a calculation or parameters for a database lookup  along with any preconditions on the applicability of the method. other configuration values used in specifying preconditions or methods define what values must already be available during configuration in order to apply this method. 
　steps 1 and 1 require knowledge that indicates how to spot a 
　constraint violation. wherever a criterion exists for deciding whether a configuration value is acceptable  the test must be specified. this requires a comparison of the configuration value to some reference value or set of values using tests such as less than  equal to  member of set. 
　steps 1  1 and 1 define the need for knowledge that indicates how to remedy each potential constraint violation. specific domain knowledge is needed to identify alternative changes to particular configuration values that alone or in combination might solve the constraint violation. domain knowledge is also required to weight these potential  fixes  according to their negative effect on the configuration. once changes are implemented  these define the points to backtrack to. 
1. salt 
　salt consists of two subsystems that share a knowledge base. one subsystem interviews the domain expert to elicit the three kinds of knowledge the problem-solver requires and builds up a representation of that knowledge which can be accessed both by itself and by the second salt subsystem  the rule generator. the rule generator translates this representation into ops1 rules that are then combined with the shell  the ops1 interpreter plus some ops1 rules  to form a configurer. salt can help with knowledge acquisition because it knows the roles knowledge can play. the roles provide salt with a way of focussing the experts' attention on the knowledge required to perform a task. moreover  since a role defines the way in which a piece of knowledge is to be used  salt can represent the knowledge in a way that insures that whenever it is relevant it will be brought to bear. 
1. the interview 
　salt was designed to be used by a domain expert with no background in al. in order to avoid natural language issues  the expert is required to use a somewhat structured language. a three page document familiarizes the user with some of the terms and questions that will be used in the interview. most questions are answered with yes or no  a name  or a selection from a menu. salt makes it easy to edit the knowledge base as well as enter new knowledge. the user is asked to indicate the kind of knowledge to be entered or modified  method  constraint  or fix . 
describing a new method involves filling in slots in a schema. if two methods presuppose the results of each other  salt will ask the user to supply an  optimal  estimate for one. salt will then use the original procedure as a constraint on the estimate and will ask the user how it limits the estimate. for any new method  the user will be asked if there are any constraints on its value. for any new constraint the user will be asked for potential fixes. when the user asks to work on a piece of knowledge previously entered  that knowledge is displayed. in cases where the request is ambiguous  salt will supply additional information that distinguishes among the possible targets. examples below are taken from a knowledge base for configuring elevators: 
1 method 	enter a method for determining a value 1 constraint 	enter a constraint on a value 1 fix 	enter a remedy for a constraint violation 1 synonym 	enter a synonym 
enter your command  exit : 1 
the value requiring a method  car-buffer-model 
there are multiple methods to determine car-buffer-model 
1 precondition 	speed   1 precondition 	speed = 1 
specify the one you want to work on  1 for new  : z 
the information for the candidate requested is then displayed: 
method 1 name: 	car-buffer-model 1 entity type: 	object 1 object name: 	car-buffer 1 object property: 	model 1 constraint type: 	actual 1 precondition: 	speed  = 1 method: 	database lookup 1 table name: 	buffer 1 column of needed value: 	model 1 parameter test: 	stroke = 	minimum-stroke 1 ordering column: 	height 1 optimal: 	smallest 
enter your command  exit : 1 oil-buffer 
　specifications are entered by typing the number of the line and the new value desired. the display is then refreshed with the change. the parameter test in line 1 states that for the value retrieved the entry in the table column  stroke  must be greater than or equal to the value of  minimum-stroke  which must be supplied by another method. some lines are dependent on others; if the user had specified calculation for the method  lines 1 through 1 would be replaced by a line asking for the formula. the schema for specifying constraints is very similar to the method schema. an example of a fix schema is shown below: 
fix 
1 violated constraint: 	maximum-buffer-load 1 constrained value: 	buffer-load 1 value to change: 	bufferquantity 1 change type: 	increase 1 step type: 	bystep 1 step size: 	1 rating of undesirability: 	1 reason for undesirability: changes minor equipment selection/sizing 
enter your command  exit : 
requesting help for the rating of undesirability as shown above will display the menu below: 
1 no problem 1 increases maintenance requirements 1 makes installation inconvenient 1 changes minor equipment selection/sizing 1 violates minor equipment constraint 1 changes minor contract specifications 1 requires special part design 1 changes major equipment selection 1 changes the building dimensions 1 changes major contract specifications 1 compromises system performance 1 violates safety code 
enter your command  exit : z 
typing  1  will substitue that value for rating of undesirability and will fill in the appropriate reason in the next line. 
	s. marcus et al. 	1 
values  depending on the boundary that was crossed  that will lead to an acceptable solution. our plan is to test the applicability of salt on a range of constructive tasks including scheduling tasks. some scheduling tasks require coming up with initial plans  recognizing unexpected situations that make the plans infeasible and making the minimally disruptive changes that make the plans acceptable once more. salt appears to be well-suited to building schedulers of this sort. 
1. conclusion 
　salt is interesting if its problem-solving strategy is sufficiently specific to strongly constrain the roles that the knowledge it needs can play  while at the same time being sufficiently general to apply to a variety of problems. the fact that salt's strategy imposes three roles on the knowledge it uses does  in fact  provide substantial help both in focussing attention on what knowledge needs to be collected and in defining the conditions under which pieces of knowledge are relevant. there is some reason to believe that salt's strategy will apply to tasks that are apparently quite diverse  but this has yet to be demonstrated. 
　
1. rule generation 
　the rule generator can be revised as the shell is changed to make the problem solving strategy more robust and efficient. because of this the exact form and numbers of rules produced is not stable. currently  for every method or constraint schema  salt writes at least one rule. for every constraint that has at least one potential fix  there is one rule written to make available at runtime all of the information in each fix schema. there are also one or more rules used to assess the ability of fix alternatives to produce a configuration acceptable up to the point of the original violation; these are generated using fix knowledge as well as that from the method and constraint schemas for contributors to the violation. in addition  a single rule is generated that matches synonyms to the schema name. all of these rules are written so that when they fire  they leave a trace describing how it was that they came to be applied and what they did; this information is used for explanation. 
1. salt's potential 
　the first task salt was given was to re-generate vt. the version of vt built by hand took about 1 worker-years to develop and consisted of about 1 rules. about half of the effort and half of the rules belong to vt's i/o package and the shell that can use both the hand-coded and salt generated rules. salt was used to regenerate the remaining half of the rules  the knowledge base . using the hand-coded vt as the knowledge source  it took about 1 hours to enter half of the knowledge that version had. our domain expert then spent another 1 hours refining this knowledge and entering the remaining knowledge. the salt rule generator took 1 vax-1 cpu minutes to produce 1 rules. 
　salt was also used successfully to develop a system that could select elevator control cables. this task is done after an elevator system has been configured; the task requires using the layout and functional requirements for the wires to order cable s  that meet local safety codes and are available in stock. the only change required to salt was to provide it with a new piece of fix knowledge: the additional cost of repeating a fix. 
　salt makes the strong assumption that a task can be structured so that the domain expert can provide a method to establish initial values  a method to define the boundary between acceptable and unacceptable solutions  and a way of changing 
