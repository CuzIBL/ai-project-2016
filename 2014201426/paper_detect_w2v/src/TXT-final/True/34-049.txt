 
　　　a hypergraph model is introduced  which besides including the and/or graph and state space graph models as particulars  is adequate for problem solving tasks involving non independent subproblems. the hypergraph model is shown to be grounded on a nonstandard notion of conjunction such that the truth of a conjunction does not necessarily imply the truth of the conjuncts. a hypergraph search algorithm is given and shown to be equivalent to a resolution-based theorem prover in a first order logic augmented with the special conjunction. a characterization is given of the class of problems requiring the full descriptive power of our model. the class includes problems involving resources  plan formation  simplification of predicate logic programs. 
	i 	introduction 
　　　and/or graphs arc widely used as problem solving model through problem reduction  /  the assumption underlying both the model and the existing search algorithms is that subproblems can be solved independently  i.e. the solutions to the original problem can be obtained by linear composition of the solutions to the reduced subproblems. the independence assumption yields a nice and clean yet not sufficiently genera  model. examples have been proposed in the literature  1  of problems for which the and/or graph model is inadequate because the independence assumption is not valid the examples fall into three classes we will try to briefly outline. 
　　　the first class consists of problems in which the solution to a subproblem may modify other subproblems. problems in this class  which will be called interaction problems  arise when variables are needed for problem descriptions and subproblem descriptions exhibit common variables 
　　　the second class consists of problems whose solution involves the expenditure of scarce resources  resource problems  a typical example is the one given by simon  1   where john  owning s1  needs a car costing $1| and a yacht  costing $1  in order to seduce an actress. the independence assumption would lead to a positive  yet erroneous  solution to the problem  can john seduce the actress1  . 
　　　the third and more general class consists of problems whose formulation requires the use of concepts defined as conjunctions of non independent terms. examples of problems in this class  which we call conjunction problems  are also given in  we will give in section s a detailed description of conjunction problems and show their relevance to artificial intelligence. 
　　　difficulties arising from the and/or graph model inadequacy are generally duped by means of problem dependent tricks. the authors have introduced a model   based on a generalization of and/or graphs  which is adequate for problem reduction in the most general case. this model  which is defined in the next section  provides a unifying framework for representing the above classes of problems. 
1. problem reduction hypergraphs 
　　　a problem solving task is defined as a set of problems d and a finite set of reduction operators f set d must contain two distinct elements 1  bottom  and i  lop  denoting the  undefined solution problem' and the  terminal  trivially solved  problem''  respectively each reduction 
operator ft maps an m -tuple of p r o b l e m s i n t o an n tuple of and 	fioutput 	problems  respectively. 
　　　a problem solving task can be represented by a problem reduction hypergraph  prh  h which is defined as a finite directed hypergraph* whose nodes are in one-to-one correspondence with  and labelled by  the elements of d and whose edges are in one-to-one correspondence with 
 and labelled by  the elements of f. note that prh's include both and/ or graphs and state space graphs as particulars. and/or graphs are prh's whose edges have a single initial node  while state space graphs are prh's whose edges have both a single initial node and a single final node  hence are edges in the usual sense . 
　　　an edge labelled f can be graphically represented by a special node whose input edges come from the nodes labelled by f -initial problems and whose output edges lead to fi-final problems. figure i represents the prh corresponding to the problem solving task in table i when a prh reduces to an and/or graph  prh edges and nodes obviously correspond to or nodes and and nodes  as defined by nilsson |/|. 


     prh's are searched in order to find solutions  to show how the untiefined solution problem 1 can be solved by reducing it to the trivially solved problem t solutions arc defined over the  generally infinite  hypertree 1' 
associated to the prh ii and which is obtained by unfolding ii. i.c. by re-
1 

cursivcly duplicating the output edges of those nodes having more than one input edge  starting from the node labelled by i. 
　　　in order to exactly define solutions  let us firstly give the definition of context. a context of a prh h is any subgraph c of the hypertree h' associated to h. such that: 
i  the node labelled 1 belongs to c  ii   or any node n belonging to c  either n has no output edges 
in c  i.e. n is a leaf   or e contains exactly one edge v such that n is an initial ndo of e in ll' and all the initial nodes of e in l l ' belong  to c  iii  lor any edge e belonging to c  all the final nodes of c in h' 
belong to c. 
a solution is a context such that all its leaves arc labelled by t. 
and iterate step 1 
　　　step 1. if s is empty  exit with failure; otherwise set co to the head of s  pop s and go to step 1 
　　　when the backtrack algorithm is applied  for example  to the problem solving task of table 1. the contexts represented in figure 1 are expanded in the following sequence 
the successor c1 of c1 is the solution 
.v interaction problems and nunileu'inunistii algorithms 
　　　problem reduction hypcrgraphs go beyond the capacity of and/ok graphs with respect to two characteristics 
	i  	the prh reduction operators arc context-sensitive  i.e. the may 
have more than one input problem  ii  the prh search space is the space of prh's contexts  while the and/or graph search space is the and/or graph itself  /. 1. 1 *. 
　　　the first characteristic will be discussed later at lenght. in order to show the relevance of the second one  we will consider the interaction problems  i.e. problems whose reduction operators contain variables and therefore must be represented by production schemes a classical example  often used to explain the behavior of planner programs  is the 
	following. 	
since variables occur in problem descriptions  the application of a production requires a problem description matching operation and results in a unifying substitution associated to the edge corresponding to the production application. 

figure 1 - the problem reduction hyper tree corresponding to the falliblegreek problem. variable bindings are associated to the edges. 
　　　the prh describing the example is shown in figure 1. in this case  the prh is an and/or tree and represents also the search space of the and/or algorithm. it is clear that the problems fallible/x  and greek/x  cannot be solved independently. once a solution is found to fallible/x  in which a substitution for variable x occurs  the substitution must be carried over to greek/x . a depth-first and/or search algorithm will first solve fallible/x  binding x to turing the modified problem greek/turing} is then unsolvable  thus making unsolvablc the 1 problem. the only way out is to backtrack to the already solved problem human/x  to find a different solution. the need then arises of bringing the search tree back to the state in which human/x  was firstly expanded this may be obtained by undoing all the operations performed from that expansion on. in conclusion  the machinery that is needed for correctly handling interaction problems is a substantial running over the and/or graph model. 
   * the algorithm in  is the only known and/or graph search algorithm whose search space is tomewhat akin to prh's. 
1 

　　　alternatively  the state of the and/or tree could be saved every time a nondeterministic expansion occurs. such a state saving leads to a modification of the search space i.e. to the prh's context space. in the above example  when context c1 is expanded  see figure 1  context c1 is considered for further expansion  while the other successor contexts  among which is c }   are saved onto the stack. note that problem interaction is accounted for by applying the unifying substitution to all the leaves of the newly generated context when context c1 is recognized to be a failure  the search algorithm backtracks to context c1 whose successor is the solution. 

　　　the nature of interaction problems  which need either undoing or state saving  shows a close relationship to nondeterministicalgohthmsthe search for a solution to a problem defined by a set of productions can be seen as the execution of a nondeterministic algorithm the state of a possible problem solution is described by the leaves of a context  and corresponds to the state of a nondeterministic algorithm computation. actually  the name  context  has been borrowed from the context mechanism used by some languages for artificial intelligence  for example  qa1  and magma lisp  to allow nondeterministic programming. 
1. resource problems and context dependency 
we will now discuss the first prh's characteristic we mentioned above  
i.e. the context-dependency of prh reduction operators and show how this feature is crucial to handle resource problems. a resource problem is formulated as a set of  goals  to be achieved through the expenditure of  some of the  limited available resources. the task can be tackled by problem reduction  where reduction operator application may depend upon the availability of some resource and result in the consumption of the resource. resources are then represented as problems themselves  which act as context for problem reduction. since the solution of a resource problem does not require the expenditure of all available resources  suitable productions reduce each resource to the terminal problem t. as an example  the actress problem described in section i can be represented in the following way. 

productions f1 and f1 are context-sensitive because they have more than one input problem. actually  they represent that interaction between problems and the available resource  having-$1  which makes this problem solving task unsolvable 
　　　let us note that interaction problems can be seen as resource problems. in fact  the state of a variable acts as a  context  for the application of reduction operators and could accordingly be represented as a resource. 
　　　an important class of problems that can be handled as resource problems is the class of problems dealing with changing world states  typically robot planning problems  in which world states are modified by reduction operators each state component |1  describes a slate property each component may act as a  context  for  and be modified by  the application of reduction operators  hence is represented by a problem. the planning task is reduced to the description of the desired final state while the description of the initial state is reduced to the terminal problem t. 
this representation is similar to the state-space representation proposed in  and similarly it is not subject to the frame problem. on the other side  our representation docs not constrain an operator to have a single input problem. 
　　　as an example  we will consider the following simple planning problem. 

the initial state of this task is represented by production start and consists of two boxes and two robots  at locations a.b.c and d respectively. robot rl can move around and push bo es  while robot r1 can only lift boxes up into a shelf the reduction operator go w x  describes ri's action of moving from location w to location x. note that since the task is solved working backward the reduction operators are inverted descriptions of the actual actions. reduction operator push/b.z.x  described k/'s action of pushing box b from location z to location x  and reduction operator liftfb  describes r1's action of storing box b in a shelf. finally  production stop describes the desired state in which both boxes are stored on a shelf note that action describing productions are similar to 
strips' operators  
　　　figure 1 shows one prh solution to the above planning task. the plan is obtained by  reading back  the prh solution from node t. note that the plan is not bound to be an action sequence but it is in generat represented by a partial ordering showing that subptans can be done in parallel. the plan obtained by the solution in figure 1 is shown in figure 1 
　　　we have thus considered the classes of interaction problems and resource problems. the next section is concerned with the relationship between problem reduction hypergraphs and first order logic theorem proving. we will then be able to introduce the most'general class of problems that can be modelled by problem reduction hypergraphs 

1 

problems arc first order logic atomic formulas whose terms are built from universally quantified variable symbols  the only constant symbol 1  zero   the monadic function symbol s successor . the symbols 1 and t can be 
interpreted as the truth values 'false' and 'true' respectively. any contextfree production is therefore a horn clause |1   whose equivalent clause is the disjunction of the left hand formulas and the negated right-hand for 
mulas the clauses  equivalent to the following. 
   * 	note that hyper-clauaei arc difti'icnl from non-horn clauses |1| hn-aynr thru left-hind sidcs arc not disjunctions. 
1 

in addition to the usual one  i.e problems in which the interdependence among some of the subproblems cannot be ignored. this class includes the class of problems described in sections1and 1. in fact  in interaction problems  variables introduce a simple kind of interdependence among conjunct subproblems. the context-sensitive productions for resource problems define compound relations among interdependent state components. therefore  conjunction problems are the most general class of problems with subproblem interdependence the problem reduction hypergraph model is the only known model which is adequate for this class of problems. 
　　　wc will conclude by showing that problem reduction hypergraphs come forth as candidate model for an extension of artificial intelligence goal oriented languages let us consider kowalski's predicate logic  which is a model of present goal oriented languages the context-free productions shown at the beginning of this section are actually statements of kowalski's language. in the example  statements k1 and k1  are procedures defining  by means of relations  the function plus over the domain of the integers  defined in terms of the successor function s and the constant 1. statements a1 and k1 are procedures defining the function times and *  is a goal statement requiring to compute r as  statement 
k1 cannot be interpreted tn kowalski's language and means that 
 represents one possible way of applying the 
distributivity property this context-sensitive production  which can be seen as a multi-name procedure  is intended to reduce the task of com-
puting an expression of the form into the task of computing the simpler expression . this production conveys therefore a pragmatic meaning which can only be expressed in terms of a complex relation involving three non independent predicates. the above example has been introduced in order to show the relevance of context-sensitive productions to the issue of computation optimization 
　　　as a final remark  let us note that  similarly to goal oriented languages  a bidirectional search of problem reduction hypergraphs is possible  since a bottom-up search algorithm can easily be defined. 
conclusions 
　　　problem reduction hypergraphs have been shown to be adequate models for problem solving tasks involving interdependent subproblems  and provide a unifying view of problems apparently of different nature  as problems involving variables  resource problems  plan formation  and program simplification problems. the two features which are essential to a correct treatment of conjunction problems are related to the search space and the context-sensitivity of the productions. the search algorithm is a 
　　　correct and completely general implementation of nondeterminism and minors the state-saving approach to nondeterministic algorithm interpretation. the context-sensitive productions  which intend to augment first order logic with a special kind of conjunction  are a generalization of horn clauses and provide a basis for an extension of goal oriented laguages. 
