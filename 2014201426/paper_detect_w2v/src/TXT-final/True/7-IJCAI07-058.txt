
the definition of a stable model has provided a declarative semantics for prolog programs with negation as failure and has led to the development of answer set programming. in this paper we propose a new definition of that concept  which covers many constructs used in answer set programming  including disjunctive rules  choice rules and conditional literals  and  unlike the original definition  refers neither to grounding nor to fixpoints. rather  it is based on a syntactic transformation  which turns a logic program into a formula of secondorder logic that is similar to the formula familiar from the definition of circumscription.
1 introduction
two widely used definitions of the semantics of logic programs-in terms of program completion  clark  1  and in terms of stable models  gelfond and lifschitz  1 -look very differentfromeach other. the formertreats a logic program as shorthand for its completion  which is a first-order formula. for instance  the program
p a  
q b  	 1  r x  ¡û p x  not q x 
is shorthand for
		 1 
on the other hand  according to the stable model semantics   1  is shorthand for the set of the ground instances of its rules: p a   q b  
                                1  r a  ¡û p a  not q a   r b  ¡û p b  not q b .
the definition of a stable model describes a fixpoint construction that determines which sets of atomic formulas from  1  are considered  stable models ; it turns out that the only stable model of  1  is
	{p a   q b   r a }.	 1 
¡¡in spite of this differencebetween the two definitions  there is often a close relationship between the completion of a program and its stable models. for instance  in every model of  1   in the sense of first-orderlogic  that satisfies the unique names assumption  the elements of set  1  are true  and all other ground atoms are false.
¡¡practical needs of answer set programming  asp  have led to the invention of several declarative programming constructs that are not used in prolog. clark's completion semantics is not applicable to these constructs  at least directly. for instance  the last rule of the program
p a  
	p b  	 1 
{q x  : p x }
is a  choice rule  containing a  conditional literal   simons et al.  1 . intuitively  this rule says: for any x such that p x   choose arbitrarily whether or not to include q x  in the stable model. the semantics of programs with choice rules  like the original stable model semantics  is defined in terms of grounding and a fixpoint condition. for instance  grounding turns the last line of  1  into the ground choice rule {q a  q b }.
as it turns out  program  1  has 1 stable models:
{p a   p b } 
{p a   p b   q a } 
 1 
{p a   p b   q b }  {p a   p b   q a   q b }.
¡¡in this paper we propose a new definition of a stable model  which covers many constructs used in asp  including disjunctive rules  choice rules  cardinality constraints and conditional literals  and refers neither to groundingnor to fixpoints. rather  like the definition of program completion  the new definition of a stable model is based on a transformation that turns the given logic programinto a formulaof classical logic. to be precise  the result of this transformation is a second-
order formula  which looks similar to the formula familiar from the definition of circumscription  mccarthy  1; 1  in the form adopted in  lifschitz  1 .
¡¡the new definition and examples of its use are discussed in section 1 below. in section 1 we relate our definition to a theorem from  lin  1   to the encoding of propositional logic programs by quantified boolean formulas due to pearce  tompits and woltran  1 and to recent research on first-order equilibrium logic  pearce and valverde  1; 1 . a theorem about strong equivalence  illustrating the nature of the ongoing work on reformulating the theory of stable models on the basis of the new definition  is stated in section 1. finally  in section 1 we propose a way to generalize the concept of program completion that is similar to the new definition of a stable model.
¡¡our treatment of stable models may be of interest for three reasons. first  it provides a new perspective on the place of stable models within the field of nonmonotonic reasoning. we can distinguish between  translational  nonmonotonic formalisms  such as program completion and circumscription  and  fixpoint  formalisms-default logic  reiter  1 and autoepistemic logic  moore  1 . in the past  stable models were seen as part of the  fixpoint tradition.  in fact  the invention of stable models was an outgrowth of earlier work on the relationship between logic programming and autoepistemic logic  gelfond  1 ; the first journal paper on answer sets  gelfond and lifschitz  1  emphasized their relation to default logic. the remarkable similarity between the new definition of a stable model and the definition of circumscription is rather curious from this point of view.
¡¡second  we expect that the new definition of stable models will provide a unified framework for useful answer set programming constructs defined and implemented by several different research groups  such as choice rules  cardinality constraints and conditional literals  helsinki university of technology   disjunctive rules and aggregates  faber et al.  1   vienna university of technology and university of calabria   and aset-prolog constructs  gelfond  1  section 1   texas tech university .
¡¡finally  we hope that this definition of a stable model will serve as a basis for a new approach to proving program correctness in asp  which will be more straightforward than the one based on grounding and fixpoint definitions  ferraris and lifschitz  1a  sections 1-1  1 . these correctness proofs will use equivalent transformations of formulas of classical logic as the main tool.
1 definition and examples
1 logic programs as first-order formulas
the concept of a stable model will be defined here for firstorder sentences  formulas without free variables ; logic programs are viewed in this paper as alternative notation for firstorder sentences of special kinds.1
¡¡to rewrite a  traditional  program  such as  1   as a firstorder sentence  we
  replace every comma by ¡Ä and every not by   
  turn every rule head ¡û body into a formula by rewriting it as the implication body ¡ú head  and
  form the conjunction of the universal closures of these formulas.
for instance  we think of  1  as alternative notation for the sentence
	p a  ¡Ä q b  ¡Ä  x  p x  ¡Ä  q x   ¡ú r x  .	 1 
we are going to treat  f as shorthand for f ¡ú ¡Í  so that the last conjunctive term can be further expanded into  x  p x  ¡Ä  q x  ¡ú ¡Í   ¡ú r x  .
¡¡in the spirit of  ferraris and lifschitz  1b    1  is understood as
	p a  ¡Ä p b  ¡Ä  x p x  ¡ú  q x  ¡Å  q x   .	 1 
since the last conjunctive term is logically valid  the class of models of formula  1  would not change if we dropped that term; but the class of its stablemodels  as defined below  would be affected. in this sense  the last conjunctive term is essential.
¡¡finally  here is an example of turning a cardinality constraint  simons et al.  1  into a first-order formula. the rule
p ¡û 1{q x  : r x }1
corresponds to the sentence
     1x q x  ¡Ä r x   ¡Ä   1x q x  ¡Ä r x    ¡ú p 	 1  where  nxf x  is understood as an abbreviation for
 .
1 review of circumscription
since the new definition of a stable model looks similar to the definition of circumscription  we will begin with a brief review of the latter  for the special case when all predicate constants occurring in the formula are circumscribed in parallel  lifschitz  1  section 1 .
¡¡both definitions use the following notation. if p and q are predicate constants of the same arity then p = q stands for the formula
 x p x    q x   
and p ¡Ü q stands for
 x p x  ¡ú q x   
where x is a tuple of distinct object variables. if p and q are tuples p1 ... pn and q1 ... qn of predicate constants then p = q stands for the conjunction
p1 = q1 ¡Ä ¡¤¡¤¡¤ ¡Ä pn = qn 
and p ¡Ü q for
p1 ¡Ü q1 ¡Ä ¡¤¡¤¡¤ ¡Ä pn ¡Ü qn.
finally  p   q is an abbreviation for p ¡Ü q ¡Ä   p = q .
¡¡in second-order logic  we will apply the same notation to tuples of predicate variables.
¡¡given a first-order sentence f  by circ f  we denote the second-order sentence
f ¡Ä   u  u   p  ¡Ä f u   
where p stands for the list of all predicate constants occurring in f  u is a list of distinct predicate variables of the same length  and f u  is the formula obtained from f by substituting the variables u for the constants p. intuitively  the second conjunctive term of circ f  expresses that the extents of the predicates p are minimal subject to condition f.
for example  if f is
	p a  ¡Ä  x p x  ¡ú q x  	 1 
then circ f  is p a  ¡Ä  x p x  ¡ú q x  
¡Ä  uv   u v     p q   ¡Ä u a  ¡Ä  x u x  ¡ú v x   .
                                              1  using methods for eliminating second-order quantifiers discussed in  lifschitz  1  and  doherty et al.  1   we can simplify  1  and convert it into
	 x p x    x = a  ¡Ä  x q x    x = a .	 1 
¡¡there are cases when circ f  is not equivalent to any first-order formula  as  for instance  when f is
	p a  ¡Ä  x p x  ¡ú p f x   .	 1 
in this example  a model of circ f  is any interpretation that represents p as the set of the values of the terms a f a  f f a   ....
1 stable models
given a first-order sentence f  by sm f  we denote the second-order sentence
¡¡¡¡¡¡¡¡¡¡¡¡f ¡Ä   u  u   p  ¡Ä f  u    where p stands for the list of all predicate constants p1 ... pn occurring in f  u is a list of n distinct predicate variables u1 ... un  and f  u  is defined recursively:
  pi t1 ... tm   = ui t1 ... tm ;
   t1=t1   =  t1=t1 ;
  ¡Í  = ¡Í;
  where;
   f ¡ú g   =  f  ¡ú g   ¡Ä  f ¡ú g ;
   qxf   = qxf   where q ¡Ê {   }.
note that the operator replaces each predicate constant with the corresponding predicate variable  and that it commutes with all propositional connectives except implication and with both quantifiers. if  in the definition of this operator  we drop the second conjunctive term in the clause for implication  then f  u  will turn into the formula f u  referred to in the definition of circumscription. that conjunctive term is the only difference between the definitions of circ and sm.
a model of f is stableif it satisfies sm f .
example 1 if f is  1  then f  u v  is u a  ¡Ä  x  u x  ¡ú v x   ¡Ä  p x  ¡ú q x    and sm f  is
p a  ¡Ä  x p x  ¡ú q x  
¡Ä  uv   u v     p q   ¡Ä u a  ¡Ä  x  u x  ¡ú v x   ¡Ä p x  ¡ú q x    .
it is clear that this formula is equivalent to  1   and consequently to  1 .
in logic programming notation   1  can be written as
p a   q x  ¡û p x .
the completion of this program
 x p x    x = a  ¡Ä  x q x    p x  
is equivalent to  1  as well. in this example  all three transformations-sm  circ and completion-produce essentially the same result.
example 1 if f is  1  then  as in the previous example  it is clear that sm f  is equivalent to circ f . consequently  the stable models of  1  can be characterized by the condition stated at the end of the previous section: p is represented by the set of the values of the terms a f a  f f a   ....
in logic programming notation   1  can be written as
p a  
¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡ 1  p f x   ¡û p x .
the completion of this program
 x p x     x = a ¡Å  y x = f y  ¡Ä p y   
is weaker than sm f : some  non-herbrand1  models of the completion of  1  are not stable.
¡¡it is easy to see that the operator sm produces essentially the same result as circ whenever it is applied to a formula corresponding to a set of horn rules  as in the examples above.1 but if negation in the bodies of rules is allowed then this may be no longer the case  as we will see section 1.
¡¡what we can say  on the other hand  about this more general case is that stable herbrandmodels of the corresponding formula exactly correspond to the stable models of the program in the sense of the original definition from  gelfond and lifschitz  1 :
proposition 1 let ¦Ò be a signature containing at least one object constant  and ¦° a finite set of rules of the form
       a1 ¡û a1 ... am not am+1 ... not an   1  where a1 ... an are atomic formulas of ¦Ò not containing equality. for any set x of ground terms of ¦Ò  the following conditions are equivalent:
  x is a stable model of ¦° in the sense of the 1 definition;
  the herbrand interpretation of ¦Ò that makes the elements of x true and all other ground atoms false is a stable model of the formula corresponding to ¦°.
¡¡this theorem shows that the new definition of a stable model  restricted to the  traditional  syntax  is a generalization of the 1 definition to non-herbrand models. in section 1 we will see that our definition generalizes also the definition proposed in  ferraris  1  and used in  ferraris and lifschitz  1a; ferraris et al.  1 .
1 further examples
proposition 1 below allows us to simplify the application of the operator sm to formulas containing negation. in its statement  p is the list of predicate constants occurring in f  and u is a list of distinct predicate variables of the same length as p.
proposition 1 if a formula f begins with   then the formula u ¡Ü p ¡ú  f  u    f 
is logically valid.
example 1 let f be formula  1   corresponding to logic program  1 . then sm f  is
p a  ¡Ä q b  ¡Ä  x  p x  ¡Ä  q x   ¡ú r x  
¡Ä  uvw   u v w     p q r   ¡Ä u a  ¡Ä v b  ¡Ä x   u x  ¡Ä   q x     ¡ú w x   ¡Ä  p x  ¡Ä  q x   ¡ú r x    .
it is clear that the implication in the last line can be dropped. furthermore  since the subformula  u v w     p q r  contains the conjunctive term v ¡Ü q  from proposition 1 we can conclude that   q x    can be equivalently replaced here by  q x . consequently  sm f  can be rewritten as p a  ¡Ä q b  ¡Ä  x  p x  ¡Ä  q x   ¡ú r x   ¡Ä  uvw   u v w     p q r   ¡Ä u a  ¡Ä v b  ¡Ä x  u x  ¡Ä  q x   ¡ú w x   .
using the methods for eliminating second-order quantifiers described at the end of  lifschitz  1  section 1   we can convert this formula into the completion  1  of program  1 . we concludethat in this case the stable models of the program are identical to the models of its completion.
¡¡we can further conclude that there is a unique herbrand stable model in this case  and that it corresponds to the set  1  of ground atoms. this fact follows also from proposition 1.
example 1 if f is formula  1   corresponding to logic program  1   then a similar calculation converts sm f  into p a  ¡Ä p b  ¡Ä  x p x  ¡ú  q x  ¡Å  q x    ¡Ä  uv   u v     p q   ¡Ä u a  ¡Ä u b  ¡Ä x u x  ¡ú  v x  ¡Å  q x    .
after the elimination of second-orderquantifiers  this formula becomes
.
the stable models of  1  can be characterized as the interpretations that  i  represent p by the set of values of a and b  and  ii  represent q by a subset of that set. consequently   1  has 1 herbrand stable models  and they correspond to sets  1 .
¡¡we call a formula negative if every occurrence of every predicate constant in this formula belongs to the antecedent of an implication. clearly any formula of the form  f is negative  because this expression is shorthand for f ¡ú ¡Í  section 1 . proposition 1 can be generalized to arbitrary negative formulas.
1 relation to earlier work
1 propositional case
in the propositional case  the operator sm turns into the encoding of formulas of equilibrium logic by quantified boolean formulas proposed in  pearce et al.  1  and reviewed in  ferraris et al.  1  appendix b . in view of the pearce-tompits-woltran theorem  as restated in that review  it follows that in the propositional case our definition of a stable model is equivalentto the definition of a stable model  answer set  proposed in  ferraris  1  and reviewed in  ferraris et al.  1  appendix a .
1 lin's transformation
theorem 1 from  lin  1  relates stable models of  traditional programs   as in proposition 1 above  to circumscription. it involves a syntactic transformation that can be described as a sequence of three steps. first  each rule is turned into a formula that may contain new predicate constants-  doubles  p of the predicate constants p occurring in the rule. second  the new predicate constants are circumscribed in parallel. third  the result is conjoined with the equivalences
. we will show that this idea is applicable to arbitrary first-order sentences  and that the result of this transformation is closely related to the operator sm.
¡¡to do this  we need parallel circumscription of a slightly more general kind than defined in section 1. in the definition of circumscription  there is no need to assume that p stands for the list of all predicate constants occurring in f; p may include only some of these constants. the result of circumscribing the predicate constants p in a first-order sentence f will be denoted by circ f;p . for instance  if f is  1  then circ f;q  is p a  ¡Ä  x p x  ¡ú q x  
¡¡¡¡¡¡¡¡¡Ä  v  v   q  ¡Ä p a  ¡Ä  x p x  ¡ú v x     which is equivalent to p a  ¡Ä  x p x    q x  .
¡¡let f be a first-order sentence  and let p be the list of all predicate constants occurring in f. take a list p of distinct predicate constants that do not occur in f  of the same length as p. by l we denote the formula
circ.
this formula turns out to be equivalent to sm f  conjoined with explicit definitions of the new predicate constants p:
proposition 1 l is equivalent to sm.
this is immediate from the definitions of l and sm  using the fact that f  p  is equivalent to f.
¡¡it follows that sm f  is equivalent to l with the predicate constants p replaced by existentially quantified predicate variables:
corollary 1 sm f  is equivalent to  ul f;u .
1 equilibrium logic
the definition of first-order equilibriumlogic below is similar to the one proposedin  pearce and valverde 1  section 1   except that ground terms are not identified here with their values; as a result  different ground terms are allowed to have the same value. our definition describes essentially kripke models with two worlds   here  and  there   that have the same universe  interpret all function constants in the same way  and satisfy the minimality condition introduced in  pearce  1 .
¡¡if i is an interpretation of a signature ¦Ò  in the sense of classical logic  then by ¦Òi we denote the extension of ¦Ò obtained by adding pairwise distinct symbols ¦Î   called names  for all elements ¦Î of the universe of i as object constants. we will identify i with its extension to ¦Òi defined by i ¦Î   = ¦Î. the value that i assigns to a ground term t of signature ¦Òi will be denoted by ti.
¡¡by ¦Òf we denote the part of ¦Ò consisting of its function constants  including object constants  which are viewed as function constants of arity 1 . we will represent an interpretation i of ¦Ò as the pair   where i is the set of all atomic formulas  formed using predicate constants from ¦Ò and names ¦Î   which are satisfied by i.
an ht-interpretationof ¦Ò is a triple  where
  if is an interpretation of ¦Òf  and
  ih  it are sets of atomic formulas formed using predicate constants from ¦Ò and object constants ¦Î  for arbitrary elements ¦Î of the universe of if  such that ih   it.
the satisfaction relation between an ht-interpretation  and a sentence f of the signature is defined recursively:
;
;
;
  i |= f ¡Ä g if i |= f and i |= g; similarly for ¡Å;
  i |= f ¡ú g if
  and
;
  i |=  xf x  if  for each ¦Î from the universe of if  i |= f ¦Î  ; similarly for  .
 in  ii  we understand satisfaction as in classical logic. 
¡¡an ht-interpretationof the formis anequilibrium modelof f if
  and
  for any proper subset.
¡¡this definition provides a precise model-theoretic counterpart of the operator sm:
proposition 1 an interpretationis a stable model of a sentence is an equilibrium model of f.
1 strong equivalence
to turn the definition of a stable model proposed in this paper into a tool that can help us in the design of provably correct asp programs  we need to find appropriate counterparts of the theorems that are used in correctness proofs today.1 the  traditional  theorems about stable models will roughly correspond to the special cases of these new theorems in which the formulas involved are propositional combinations of ground atoms  perhaps of a special syntactic form  and our attention is restricted to herbrand models.
¡¡to give an example illustrating this general point  we state here a counterpart of the characterization of strong equivalence  lifschitz et al.  1  due to fangzhen lin .
¡¡about first-order sentences f and g we say that f is stronglyequivalent to g if  for every sentence h  possibly of a larger signature   f ¡Ä h has the same stable models as g¡Äh  or  to put it differently  if  for every h  sm f ¡Äh  is equivalent to sm g ¡Ä h  . in the following theorem  p is the list of predicate constants occurring in at least one of the sentences f  g  and p is a list of new  distinct predicate constants of the same length as p.
proposition 1 f is strongly equivalent to g iff the formula
¡¡¡¡¡¡¡¡¡¡¡¡p is logically valid.
¡¡using this theorem we can show  for instance  that   xf x  is strongly equivalent to  x f x .  this is a predicate logic counterpart of the fact that   f ¡Ä g  is strongly equivalent to  f ¡Å g.  indeed  in view of proposition 1  the implications
p  p	  ; are logically valid; the right-hand sides of the two equivalences are classically equivalent to each other.
¡¡for our proof of the  only if  part of proposition 1 it is not essential that the definition of strong equivalence allows the signature of h to be larger than the signature of f and g. it follows that f is strongly equivalent to g whenever f ¡Ä h has the same stable models as g ¡Ä h for all sentences h of the same signature as f and g.
¡¡relations between logic programs with variables  somewhat similar to strong equivalence as defined above but more limited in scope  are discussed in  pearce and valverde  1  section 1  and  eiter et al.  1 .
1 a new perspective on program completion
1 pointwise stable models
as observed in  lee and lin  1   program completion is similar in some ways to the concept of pointwise circumscription-the modification of mccarthy's original definition that was proposed in  lifschitz  1 . according to either definition  circumscribing a predicate constant p makes the extent of p  minimal   but minimality is understood in different versions differently. according to the original definition of circumscription to make the extent of a predicate smaller means to replace it by a proper subset. in the pointwise version  to make the extent of a predicate smaller means to decrement it by a single point. the pointwise minimality condition is  generally  weaker than minimality according to mccarthy; similarly  program completion is generally weaker than the stability condition.
¡¡in this section  we define a weakened   pointwise  version of the operator sm that can be viewed as a generalization of program completion to arbitrary first-order formulas.
if p and q are predicate constants of the same arity k then
1
p   q stands for the formula
 
where x  y are disjoint tuples of distinct object variables x1 ... xk  y1 ... yk  and x = y is shorthand for   x1 = y1 ¡Ä ¡¤¡¤¡¤ ¡Ä xk = yk .
this formula expresses that the extent of p can be obtained from the extent of q by removing one element. if p and q are tuples p1 ... pn and q1 ... qn of predicate constants then
1
p   q stands for the disjunction
  
and similarly for tuples of predicate variables.
¡¡given a first-order sentence f  by psm f  we denote the second-order sentence
1
¡¡¡¡¡¡¡¡¡¡¡¡f ¡Ä   u  u   p  ¡Ä f  u    where p  u and f  u  are as in the definition of sm  section 1 . a model of f is pointwisestable if it satisfies psm f . clearly  every stable model is pointwise stable.
¡¡unlike sm f   the weaker formula psm f  can be always rewritten without second-order quantifiers:
proposition 1 formula psm f  is equivalent to
 
where gi xi  stands for

and xi  yi are disjoint tuples of distinct variables.1
for instance  if f is p a ¡Äp b  then f  u  is u a ¡Äu b  
so that is

and psm f  is
.
this formula can be simplified:
.
¡¡in this example  psm f  is obviously equivalent to the completion of f:
 x p x     x = a ¡Å x = b  .
this fact is an instance of the general theorem stated below.
1 relation to program completion
lloyd and topor  noted that the process of completing a program can be extended in an obvious way to rules of a more general form than allowed in  clark  1 . it is essential that the head of a rule be an atom  but the body can be an arbitrary first-order formula.
¡¡proposition 1 below refers to completion in this more general sense  but it does introduce a restriction on the syntactic form of the bodies of rules. the rules we consider in this section have the form
         p1 t1  ¡û p1 t1  ¡Ä ¡¤¡¤¡¤ ¡Ä pm tm  ¡Ä n   1  where ti are tuples of terms and n is a negative formula  see section 1 . for instance  every rule of form  1  has also form  1 : take n to be  am+1 ¡Ä ¡¤¡¤¡¤ ¡Ä  an.
¡¡a rule of form  1  is acyclicif for each i = 1 ... m such that pi is p1  the formula

is logically valid. for instance  each of the rules  1  is obviously acyclic-its body doesn'tcontain the predicateconstant occurring in the head. any rule of form  1  can be made acyclic by a strongly equivalent transformation: conjoin the body with the formulastti for all i = 1 ... m such that pi is p1. for instance  the second rule of  1  can be rewritten as the acyclic rule

for this reason  the requirement in the statement of the theorem below that each of the given rules be acyclic is not an essential limitation.
proposition 1 for any finite set f of acyclic rules  the completion of f is equivalent to psm f .
¡¡in view of this fact  psm f  can be viewed as an extension of the concept of program completion to arbitrary first-order formulas.
1 tight formulas
franc ois fages showed that if a logic programsatisfies a certain syntactic condition  which is now called  tightness   then its stable models can be characterized as the models of its completion. this theorem and its generalizations  see  erdem and lifschitz  1   play an important role in answer set programming.
¡¡consider  for instance  logic programs consisting of rules of form  1 . according to the definition of a tight program  to decide whether such a program is tight we should look at its  predicate dependency graph.  the vertices of this graph are the predicate constants occurring in the program  and its edges lead from p1 to p1 ... pm for the rules  1  that the program consists of. the program is called tight if its predicate dependency graph is acyclic.
¡¡proposition 1 below extends fages's theorem to the general framework introduced in this note. to define the predicate dependency graph for an arbitrary first-order sentence  we need a few auxiliary definitions.
¡¡recall that an occurrence of a subformula or a predicate constant in a formula f is positive if the number of implications in f containing that occurrence in the antecedent is even; it is strictlypositiveif that number is 1 in  1   for instance  both occurrences of q are positive  but only the first is strictly positive. the key idea of our definition of the predicate dependency graph for an arbitrary formula f is to concentrate on the implications g ¡ú h that have strictly positive occurrences in f; such implications generalize the concept of a rule in traditional logic programs.
¡¡we say that a predicate constant p dependson a predicate constant q in an implication g ¡ú h if
  p has a strictly positive occurrence in h  and
  q has a positive occurrence in g that does not belong to any occurrence of a negative formula in g.
the predicatedependencygraph of a formula f is the directed graph such that
  its vertices are the predicate constants occurring in f  and
  it has an edge from a vertex p to a vertex q if p depends on q in an implication that has a strictly positive occurrence in f.
for instance  the predicate dependency graph of formula  1  has three vertices p  q  r and one edge  from r to q. this is the same graph as the one given by the more special definition reviewed above applied to the  logic programming representation   1  of formula  1 .
¡¡just as in the special case above  we say that a formula f is tight if its predicate dependency graph is acyclic. for instance  formulas  1 - 1  are tight; formula  1  is not tight  because its predicate dependency graph is a self-loop.
proposition 1 for any tight sentence f  psm f  is equivalent to sm f .
1 conclusion
the definition of a stable model proposed in this paper is applicable both to rules covered by the original 1 definition and to rules of several more general kinds used in answer set programming. instead of grounding and fixpoints  it refers to a translation into classical logic  and is in this sense close to the definitions of program completion and circumscription.
¡¡the relationship between the original definition of a stable model and the definition proposed here can be compared with the relationship between two definitions of a causal theory- the original definition introduced in  mccain and turner  1  and its generalization proposed in  lifschitz  1 . the original definition uses a fixpoint construction; the generalization is based on a translation into classical logic.
¡¡another definition of a stable model for first-order order sentences is given independently by lin and zhou . it refers to grounding  but in other ways it is similar to ours.
¡¡extending main results of the theory of stable models to the general framework described above is a topic of future work.
acknowledgements
we are grateful to pedro cabalar  martin gebser and hudson turner for useful comments on this paper.
