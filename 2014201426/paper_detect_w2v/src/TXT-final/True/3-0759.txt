
this paper presents a tableaux decision procedure for shoiq  the dl underlying owl dl. to the best of our knowledge  this is the first goal-directed decision procedure for shoiq.
1 introduction
description logics  dls  are a family of logic based knowledge representation formalisms. although they have a range of applications  e.g.  configuration  mcguinness&wright  1   and information integration  calvanese et al.  1    they are perhaps best known as the basis for widely used ontology languages such as oil  daml+oil and owl  horrocks et al.  1   the last of which is now a w1c recommendation  bechhofer et al.  1 . two of the three language  species  described in the owl specification are based on expressive dls: owl lite is based on shif  and owl dl is based on shoin. this decision was motivated by a requirement that key inference problems  such as ontology consistency  be decidable  and that it should be possible to provide reasoning services to support ontology design and deployment  horrocks et al.  1 .
¡¡although the ontology consistency problem for shoin is known to be decidable 1 to the best of our knowledge no  practical  decision procedure is known for it  i.e.  no goal directed procedure that is likely to perform well with realistic ontology derived problems  tobies  1; horrocks&sattler  1 . in this paper we present such a decision procedure for shoiq  i.e.  shoin extended with qualified number restrictions  baader&hollunder  1 . the algorithm extends the well-known tableaux algorithm for shiq  horrocks et al.  1   which is the basis for several highly successful implementations  horrocks&patel-schneider  1; haarslev&moller ¡§ 1; pellet  1 .
¡¡the o in shoiq denotes nominals  i.e.  classes with a singleton extension. nominals are a prominent feature of hybrid logics  blackburn&seligman  1   and can also be viewed as a powerful generalisation of abox individuals  schaerf  1; horrocks&sattler  1 . they occur naturally in ontologies  e.g.  when describing a class such as eucountries by enumerating its members  i.e.  {austria ...  unitedkingdom}  such an enumeration is equivalent to a disjunction of nominals . this allows applications to infer  e.g.  that persons who only visit eucountries can visit at most 1 countries.
¡¡one reason why dls  and propositional modal and dynamic logics  enjoy good computational properties  such as being robustly decidable  is that they have some form of tree model property  vardi  1   i.e.  if an ontology is consistent  then it has a  form of  tree model. this feature is crucial in the design of tableaux algorithms  allowing them to search only for tree like models. more precisely  tableaux algorithms decide consistency of an ontology by trying to construct an abstraction of a model for it  a so-called  completion graph . for logics with the tree model property  we can restrict our search/construction to tree-shaped completion graphs.
¡¡tableaux algorithms for expressive dls employ a cycle detection technique called blocking to ensure termination. this is of special interest for shiq  where the interaction between inverse roles and number restrictions results in the loss of the finite model property  i.e.  there are consistent ontologies that only admit infinite models. on such an input  the shiq tableaux algorithm generates a finite tree-shaped completion graph that can be unravelled into an infinite tree model  and where a node in the completion graph may stand for infinitely many elements of the model. even when the language includes nominals  but excludes one of number restrictions or inverse roles  horrocks&sattler  1; hladik&model  1   or if nominals are restricted to abox individuals  horrocks et al.  1   we can work on forestshaped completion graphs  with each nominal  individual  being the root of a tree-like section; this causes no inherent difficulty as the size of the non-tree part of the graph is restricted by the number of individuals/nominals in the input.
¡¡the difficulty in extending the shoq or shiq algorithms to shoiq is due to the interaction between nominals  number restrictions  and inverse roles  which leads to the almost complete loss of the tree model property  and causes the complexity of the ontology consistency problem to jump from exptime to nexptime  tobies  1 . to see this  consider an ontology containing the following two axioms that use a nominal o to impose an upper bound  say 1  on the number of instances of the concept f:
	  v¨b  r .o 	o v¨b  1r.f 
the first statement requires that  in a model of this ontology  every element has an incoming r-edge from o; the second statement restricts the number of r-edges going from o to instances of f to at most 1. in this case  we might need to consider arbitrarily complex relational structures amongst instances of f  and thus cannot restrict our attention to completion trees or forests. let us assume that our ontology also forces the existence of an infinite number of instances of another concept  say n  which requires the above mentioned  block and unravel  technique. the consistency of the whole ontology then crucially depends on the relations enforced between instances of f and n  and whether the unravelling of the n-part violates atmost number restrictions that instances of f must satisfy. summing up  a tableaux algorithm for shoiq needs to be able to handle both arbitrarily complex relational structures and finite tree structures representing infinite trees  and to make sure that all constraints are satisfied  especially number restrictions on relations between these two parts   while still guaranteeing termination.
¡¡two key intuitions have allowed us to devise a tableaux algorithm that meets all of these requirements. the first intuition is that  when extending a shoiq completion graph  we can distinguish those nodes that may be arbitrarily interconnected  so-called nominal nodes  from those nodes that still form a tree structure  so-called blockable nodes . fixing a  double exponential  upper bound on the number of nominal nodes is crucial to proving termination; it is not  however  enough to guarantee termination  as we may repeatedly create and merge nominal nodes  a so-called  yo-yo  .
¡¡the second intuition is that the yo-yo problem can be overcome by  guessing  the exact number of new nominal nodes resulting from interactions between existing nominal nodes  inverse roles  and number restrictions. this guessing is implemented by a new expansion rule  ro   which  when applied to a relevant  1nr.c  concept  generates  nondeterministically  between 1 and n new nominal nodes  all of which are pairwise disjoint. this prevents the repeated yo-yo construction  and termination is now guaranteed by the upper bound on the number of nominal nodes and the use of standard blocking techniques for the blockable nodes. the nondeterminism introduced by this rule could clearly be problematical for large values of n  but large values in number restrictions are already known to be problematical for shiq. moreover  the rule has excellent  pay as you go  characteristics: in case number restrictions are functional  i.e.  where n is 1  1 the new rule becomes deterministic; in case there are no interactions between number restrictions  inverse roles and nominals  the rule will never be applied; in case there are no nominals  the new algorithm will behave like the algorithm for shiq; and in case there are no inverse roles  the new algorithm will behave like the algorithm for shoq. for more examples and full proofs  we refer the reader to  horrocks&sattler  1 .
1 preliminaries
in this section  we introduce the syntax  semantics  and inference problems of the dl shoiq.
definition 1 let r be a set of role names with both transitive and normal role names r+¡Èrp = r  where rp ¡Ér+ =  . the set of shoiq-roles  or roles for short  is r ¡È {r  | r ¡Ê r}. a role inclusion axiom is of the form r v s  for two roles r and s. a role hierarchy is a finite set of role inclusion axioms.
¡¡an interpretation i =   i ¡¤i  consists of a non-empty set  i  the domain of i  and a function ¡¤i which maps every role to a subset of  i ¡Á  i such that  for p ¡Ê r and r ¡Ê r+  hx yi ¡Ê pi iff hy xi ¡Ê p i 
and if hx yi ¡Ê ri and hy zi ¡Ê ri  then hx zi ¡Ê ri.
an interpretation i satisfies a role hierarchy r if ri   si for each r v s ¡Ê r; such an interpretation is called a model of r.
we introduce some notation to make the following considerations easier.
1. the inverse relation on roles is symmetric  and to avoid considering roles such as r    we define a function inv which returns the inverse of a role: for r ¡Ê r  inv r  := r  and inv r   := r.
1. since set inclusion is transitive and ri   si implies inv r i   inv s i  for a role hierarchy r  we introduce v* r as the transitive-reflexive closure of v on r¡È{inv r  v inv s  | r v s ¡Ê r}. we use r ¡Ôr s as an abbreviation for r v* rs and s v* rr.
1. obviously  a role r is transitive if and only if its inverse inv r  is transitive. however  in cyclic cases such as r ¡Ôr s  s is transitive if r or inv r  is a transitive role name. in order to avoid these case distinctions  the function trans returns true if r is a transitive role-regardless whether it is a role name  the inverse of a role name  or equivalent to a transitive role name  or its inverse : trans s r  := true if  for some p with p ¡Ôr s  p ¡Ê r+ or inv p  ¡Ê r+;
trans s r  := false otherwise.
1. a role r is called simple w.r.t. r if trans s r  = false for all s v* rr.
1. in the following  if r is clear from the context  we may use v* and trans s  instead of v* r and trans s r .
definition 1 let nc be a set of concept names with a subset ni   nc of nominals. the set of shoiq-concepts  or concepts for short  is the smallest set such that
1. every concept name c ¡Ê nc is a concept 
1. if c and d are concepts and r is a role  then  c u d    c t d     c     r.c   and   r.c  are also concepts  the last two are called universal and existential restrictions  resp.   and
1. if c is a concept  r is a simple role1 and n ¡Ê in  then  1nr.c  and   nr.c  are also concepts  called atmost and atleast number restrictions .
the interpretation function ¡¤i of an interpretation i =   i ¡¤i  maps  additionally  every concept to a subset of  i such that
 c u d i = ci ¡É di 	 c t d i	= ci ¡È di 
	 ci =  i   ci 	 oi	= 1 for all o ¡Ê ni 
  r.c i= {x ¡Ê  i | ri x c  1=  }   r.c i= {x ¡Ê  i | ri x  c  =  }  1nr.c i= {x ¡Ê  i |  ri x c  1 n}  and  nr.c i= {x ¡Ê  i |  ri x c    n} where  m is the cardinality of a set m and ri x c  is defined as {y | hx yi ¡Ê ri and y ¡Ê ci}.
¡¡for c and d  possibly complex  concepts  c v¨b d is called a general concept inclusion  gci   and a finite set of gcis is called a tbox.
¡¡an interpretation i satisfies a gci c v¨b d if ci   di  and i satisfies a tbox t if i satisfies each gci in t ; such an interpretation is called a model of t .
¡¡a concept c is satisfiable w.r.t. a role hierarchy r and a tbox t if there is a model i of r and t with ci 1=  .
such an interpretation is called a model of c w.r.t. r and t . a concept d subsumes a concept c w.r.t. r and t  written
c vr t d  if ci   di holds in every model i of r and
t . two concepts c d are equivalent w.r.t. r and t  written c ¡Ôr t d  if they are mutually subsuming w.r.t. r and t .
¡¡as usual  subsumption and satisfiability can be reduced to each other. like shiq  in shoiq  we can reduce reasoning w.r.t. tboxes and role hierarchies to reasoning w.r.t. role hierarchies only: we can use an  approximation  of a universal role to internalise a tbox  horrocks et al.  1; horrocks&sattler  1 . hence  in the remainder of this paper  we restrict our attention without loss of generality to the satisfiability of shoiq concepts w.r.t. a role hierarchy.
¡¡finally  we did not choose to make a unique name assumption  i.e.  two nominals might refer to the same individual. however  the inference algorithm presented below can easily
be adapted to the unique name case by a suitable initialisation
.
of the inequality relation 1= used in our algorithm.
1 a tableau for shoiq
for ease of presentation  as usual  we assume all concepts to be in negation normal form  nnf . each concept can be transformed into an equivalent one in nnf by pushing negation inwards  making use of de morgan's laws and the duality between existential and universal restrictions  and between atmost and atleast number restrictions   horrocks et al.  1 . for a concept c  we use  ¨b c to denote the nnf of  c  and we use sub c  to denote the set of all subconcepts of c  including c . as usual  for a concept d and a role hierarchy r  we define the set of  relevant sub-concepts  cl d r  as follows  we will often use cl d  instead of cl d r  : cl d r  := sub d  ¡È { ¨b c | c ¡Ê sub d } ¡È
{ s.e | { r.e   ¨b r.e} ¡É sub d  1=   and s occurs in r or d}.
definition 1 if d is a shoiq-concept in nnf  r a role hierarchy  and rd is the set of roles occurring in d or r  together with their inverses  a tableau t for d w.r.t. r is defined to be a triple  s l e  such that: s is a set of individuals  l : s ¡ú 1cl d  maps each individual to a set of concepts which is a subset of cl d   e : rd ¡ú 1s¡Ás maps each role in rd to a set of pairs of individuals  and there is some individual s ¡Ê s such that d ¡Ê l s . for all s t ¡Ê s  c c1 c1 ¡Ê cl d   r s ¡Ê rd  and
st s c  := {t ¡Ê s | hs ti ¡Ê e s  and c ¡Ê l t } 
it holds that:
 p1  if c ¡Ê l s   then  c ¡Ê/ l s  
 p1  if c1 u c1 ¡Ê l s   then c1 ¡Ê l s  and c1 ¡Ê l s    p1  if c1 t c1 ¡Ê l s   then c1 ¡Ê l s  or c1 ¡Ê l s  
 p1  if  r.c ¡Ê l s  and hs ti ¡Ê e r   then c ¡Ê l t  
 p1  if  r.c ¡Ê l s   then there is some t ¡Ê s such that hs ti ¡Ê e r  and c ¡Ê l t  
 p1  if  s.c ¡Ê l s  and hs ti ¡Ê e r  for some r v* s with
trans r   then  r.c ¡Ê l t  
 p1  if   ns.c  ¡Ê l s   then  st s c    n 
 p1  if  1ns.c  ¡Ê l s   then  st s c  1 n 
 p1  if  1ns.c  ¡Ê l s  and hs ti ¡Ê e s   then {c  ¨b c}¡É
l t  1=   
 p1  if hs ti ¡Ê e r  and r v* s  then hs ti ¡Ê e s    p1  hs ti ¡Ê e r  iff ht si ¡Ê e inv r    and
 p1  if o ¡Ê l s  ¡É l t  for some o ¡Ê ni  then s = t.
lemma 1 a shoiq-concept d in nnf is satisfiable w.r.t. a role hierarchy r iff d has a tableau w.r.t. r.
¡¡the proof is similar to the one found in  horrocks et al.  1 . roughly speaking  we construct a model i from a tableau by taking s as its interpretation domain and adding the missing role-successorships for transitive roles. then  by induction on the structure of formulae  we prove that  if c ¡Ê l s   then s ¡Ê ci. most cases are straightforward. as for shiq   p1  and  p1  together with the fact that only simple roles occur in number restrictions ensure that this implication holds for number restrictions c  and  p1  ensures that nominals are indeed interpreted as singletons. for the converse  we can easily transform any model into a tableau.
1 a tableau algorithm for shoiq
from lemma 1  an algorithm which constructs a tableau for a shoiq-concept d can be used as a decision procedure for the satisfiability of d with respect to a role hierarchy r. such an algorithm will now be described in detail.
definition 1 let r be a role hierarchy and d a shoiqconcept in nnf. a completion graph for d with respect to r g =  v e l 1= . where each node x ¡Ê v is a directed graph
is labelled with a set l x    cl d  ¡È ni ¡È { 1mr.c  |  1nr.c  ¡Ê cl d  and m ¡Ü n} and each edge hx yi ¡Ê e is labelled with a set of role names l hx yi  containing  possibly inverse  roles occurring in d or r. additionally  we keep track of inequalities between nodes of the graph with a symmetric binary relation 1=. between the nodes of g.
¡¡if hx yi ¡Ê e  then y is called a successor of x and x is called a predecessor of y. ancestor is the transitive closure of predecessor  and descendant is the transitive closure of successor. a node y is called an r-successor of a node x if  for some r1 with r1 v* r  r1 ¡Ê l hx yi ; x is called an r-predecessor of y if y is an r-successor of x. a node y is called a neighbour  r-neighbour  of a node x if y is a successor  r-successor  of x or if x is a successor  inv r successor  of y.
¡¡for a role s and a node x in g  we define the set of x's s-neighbours with c in their label  sg x c   as follows:
sg x c  := {y | y is an s-neighbour of x and c ¡Ê l y }.
g is said to contain a clash if
1. for some a ¡Ê nc and node x of g  {a  a}   l x  
1. for some node x of g   1ns.c  ¡Ê l x  and there are n + 1 s-neighbours y1 ... y. n of x with c ¡Ê l yi  for
each 1 ¡Ü i ¡Ü n and yi 1= yj for each 1 ¡Ü i   j ¡Ü n  or
	.	l x ¡Él y .
1. for some o ¡Ê ni  there are x 1= y with o ¡Ê
¡¡if o1 ... o` are all the nominals occurring in d  then the tableau algorithm starts with the completion graph g =  {r1 r1 ... r`}   l    with l r1  = {d} and l ri  = {oi} for 1 ¡Ü i ¡Ü `. g is then expanded by repeatedly applying the expansion rules given in figures 1 and 1  stopping if a clash occurs.
¡¡next  we define and explain some terms and operations used in the expansion rules:
nominal nodes and blockable nodes we distinguish two types of nodes in g  nominal nodes and blockable nodes. a node x is a nominal node if l x  contains a nominal. a node that is not a nominal node is a blockable node. a nominal o ¡Ê ni is said to be new in g if no node in g has o in its label.
comment: like abox individuals  horrocks et al.  1   nominal nodes can be arbitrarily interconnected. in contrast  blockable nodes are only found in tree-like structures rooted in nominal nodes  or in r1 ; a branch of such a tree may end with an edge leading to a nominal node.
¡¡in ro   we use new nominals to create new nominal nodes-intuitively  to fix the identity of certain  constrained neighbours of nominal nodes. an upper bound on the number of nominal nodes that can be generated in a given completion graph will be crucial for termination of the construction  given that blocking cannot be applied to nominal nodes.
blocking a node x is label blocked if it has ancestors x1  y and y1 such that
1. x is a successor of x1 and y is a successor of y1 
1. y  x and all nodes on the path from y to x are blockable  1. l x  = l y  and l x1  = l y1   and 1. l hx1 xi  = l hy1 yi .
in this case  we say that y blocks x. a node is blocked if either it is label blocked or it is blockable and its predecessor is blocked; if the predecessor of a blockable node x is blocked  then we say that x is indirectly blocked.
comment: blocking is defined exactly as for shiq  with the only difference that  in the presence of nominals  we must
ru:	if 1. c1 u c1 ¡Ê l x   x is not indirectly blocked  and
¡¡1. {c1 c1} 1  l x  then set l x  = l x  ¡È{c1 c1}
rt:	if 1. c1 t c1 ¡Ê l x   x is not indirectly blocked  and
¡¡1. {c1 c1}¡Él x  =   then set l x  = l x  ¡È{c} for some c ¡Ê {c1 c1}
r :	if 1.  s.c ¡Ê l x   x is not blocked  and
¡¡1. x has no safe s-neighbour y with c ¡Ê l y   then create a new node y with l hx yi  = {s} and l y  = {c}
r :	if 1.  s.c ¡Ê l x   x is not indirectly blocked  and
¡¡1. there is an s-neighbour y of x with c ¡Ê/ l y  then set l y  = l y  ¡È{c}
r +: if 1.  s.c ¡Ê l x   x is not indirectly blocked  and
¡¡1. there is some r with trans r  and r v* s 
¡¡1. there is an r-neighbour y of x with  r.c ¡Ê/ l y  then set l y  = l y  ¡È{ r.c}
r :	if 1.  1ns.c  ¡Ê l x   x is not indirectly blocked  and there
¡¡1. is an s-neighbour y of x with {c  ¨b c}¡Él y  =   then set l y  = l y  ¡È{e} for some e ¡Ê {c  ¨b c}
r :	if 1.   ns.c  ¡Ê l x   x is not blocked  and
	1.	y1 ... yn of x with
	¡Ê l yi  and yi = yj for 1	i   j	n
then create n new nodes y1 ... yn with l hx yii  = {s} 
.
l yi  = {c}  and yi 1= yj for 1 ¡Ü i   j ¡Ü n.
r1:	if 1.  1ns.c  ¡Ê l z   z is not indirectly blocked  and
1.  sg z c    n and there are two s-neighbours
.
x y of z with c ¡Ê l x  ¡Él y   and not x 1= y
then 1. if x is a nominal node  then merge y x 
1. else if y is a nominal node or an ancestor of x  then merge x y  1. else merge y x figure 1: the tableaux expansion rules for shiq
take care that none of the nodes between a blocking and a blocked one is a nominal node.
generating and shrinking rules and safe neighbours
¡¡the rules r   r   and ro  are called generating rules  and the rules r1 and ro are called shrinking rules. an rneighbour y of a node x is safe if  i  x is blockable or if  ii  x is a nominal node and y is not blocked.
pruning when a node y is merged into a node x  we  prune  the completion graph by removing y and  recursively  all blockable successors of y. more precisely  pruning a node
                   g =  v e l 1= . yields a graph that y  written prune y   in is obtained from g as follows:
1. for all successors z of y  remove hy zi from e and  if z is blockable  prune z ;
1. remove y from v .
merging merging	a	node y into	a	node x  written
.
merge y x   in g =  v e l 1=  yields a graph that is obtained from g as follows:
1. for all nodes z such that hz yi ¡Ê e
 a  if {hx zi hz xi}¡Ée =    then add hz xi to e and set l hz xi  = l hz yi  
 b  if hz xi ¡Ê e  then set l hz xi  = l hz xi  ¡È
l hz yi  
 c  if hx zi ¡Ê e  then set l hx zi  = l hx zi  ¡È
{inv s  | s ¡Ê l hz yi }  and
 d  remove hz yi from e;
1. for all nominal nodes z such that hy zi ¡Ê e
 a  if {hx zi hz xi}¡Ée =    then add hx zi to e and set l hx zi  = l hy zi  
 b  if hx zi ¡Ê e  then set l hx zi  = l hx zi  ¡È
l hy zi  
l hz xi  = l hz xi  ¡È
	inv   	¡Ê l 	    and
 d  remove hy zi from e;
1. set l x  = l x  ¡È l y ;
	.	.
1. add x 1= z for all z such that y 1= z; and
1. prune y .
if y was merged into x  we call x a direct heir of y  and we use being an heir of another node for the transitive closure of being a  direct heir .
comment: merging is a generalisation of what is often done to satisfy an atmost number restriction for a node x in case that x has too many neighbours. in shoiq  we might need to merge nominal nodes that are related in some arbitrary  non-tree-like way  so we must take care of all incoming and outgoing edges. the usage of  heir  is quite intuitive since  after y has been merged into x  x has  inherited  all of y's properties  i.e.  its label  its inequalities  and its incoming and outgoing edges  except for any outgoing edges to blockable nodes  which are removed by prune .
level  of nominal nodes  let o1 ... o` be all the nominals occurring in the input concept d. we define the level of a nominal node y inductively as follows:  i  each  nominal  node x with an oi ¡Ê l x   1 ¡Ü i ¡Ü `  is of level 1  and  ii  a nominal node x is of level i if x is not of some level j   i and x has a neighbour that is of level i   1. comment: if a node with a lower level is merged into another node  the level of the latter node may be reduced  but it can never be increased because merge preserves all edges connecting nominal nodes. the completion graph initially contains only level 1 nodes.
strategy  of rule application  the expansion rules are applied according to the following strategy:
1. ro is applied with highest priority.
1. next  r1 and ro  are applied  and they are applied first to nominal nodes with lower levels. in case they are both applicable to the same node  ro  is applied first.
1. all other rules are applied with a lower priority.
comment: this strategy is necessary for termination  and in particular to fix an upper bound on the number of applications of ro .
¡¡we can now finish the description of the tableau algorithm: a completion graph is complete if it contains a clash  or when none of the rules is applicable. if the expansion rules can be applied to d and r in such a way that they yield a complete and clash-free completion graph  then the algorithm returns  d is satisfiable w.r.t. r   and  d is unsatisfiable w.r.t. r  otherwise.
ro:	if	for some o ¡Ê ni there are 1 nodes x y with
.
¡¡¡¡o ¡Ê l x  ¡Él y  and not x 1= y then merge x y 
ro : if 1.  1ns.c  ¡Ê l x   x is a nominal node  and there is
a blockable s-neighbour y of x such that c ¡Ê l y  and x is a successor of y
1. there is no m with 1 m 1 n   1ms.c  ¡Ê l x   and there are m -neighbours z1 ... zm of x with ¡Ê l zi  and yi = yj for all 1 ¡Ü i   j ¡Ü m.
then 1. guess m 1 n and set l x  = l x  ¡È{ 1ms.c }
1. create m new nodes y1 ... ym with
l hx yii  = {s}  l yi  = {c oi} for oi ¡Ê ni g  and yi 1=. yj for 1 ¡Ü i   j ¡Ü m 
new infigure 1: the new expansion rules for shoiq
lemma 1 let d be a shoiq concept in nnf and r a role hierarchy.
1. when started with d and r  the completion algorithm terminates.
1. d has a tableau w.r.t. r if and only if the expansion rules can be applied to d and r such that they yield a complete and clash-free completion graph.
proof  sketch : let m = |cl d |  k the number of roles and their inverses in d and r  n the maximal number in atmost number restrictions  and o1 ... o` be all nominals occurring in d  and let ¦Ë := 1m+k.
¡¡termination is a consequence of the usual shiq conditions  1 - 1 below  with respect to the blockable tree parts of the graph  horrocks et al.  1   plus the fact that there is a bound on the number of new nominal nodes that can be added to g by ro   1 below :  1  all but the shrinking rules strictly extend the completion graph by adding new nodes and edges or extending node labels  while neither removing nodes  edges  or elements from node labels;  1  new nodes are only added by the generating rules  and each of these rules is applied at most once for a given concept in the label of a given node x or its heirs;  1  the length of a path consisting entirely of blockable nodes is bounded by ¦Ë: this is due to the blocking condition and the fact that  if x is blockable  then l x    cl d r  and thus does not contain nominals; and  1  at most o ` mn ¦Ë  nominal nodes are generated.
¡¡to see  1   observe that ro  can only be applied after a nominal oi  for i ¡Ü `  has been added to the label of a blockable node x in a branch of one of the blockable  trees ; otherwise  a blockable node cannot have a nominal node as a successor. in this case  ro will immediately merge x with an existing level 1 node  say ri. as a consequence of this merging  it is possible that the predecessor of x is merged into a
¡¡nominal node n1 by r1  due to the pruning part of merging  this cannot happen to a successor of x . by definition  n1 is of level 1 or 1. repeating this argument  it is possible that all ancestors of x are merged into nominal nodes. however  as the maximum length of a sequence of blockable nodes is ¦Ë  blockable ancestors of x can only be merged into nominal nodes of level below ¦Ë. given the preconditions of ro   this implies that we can only apply ro  to nominal nodes of level below ¦Ë. this  together with  1  above and some counting  yields the bound of o ` mn ¦Ë .
¡¡the remainder of the proof is very similar to the shiq case. for the second claim in lemma 1  for the  if  direction  we can obtain a tableau t =  s l1 e  from a complete and clash-free completion graph g by unravelling blockable  tree  parts of the graph as usual. for the  only if  direction  using a tableau  w.r.t. r to steer the non-deterministic rules rt  r   r1  and ro   we can indeed construct a complete and clash-free graph. 1
¡¡since subsumption can be reduced to  un satisfiability and shoiq can internalise general tboxes  we have the following result.
theorem 1 the shoiq tableau algorithm is a decision procedure for satisfiability and subsumption of shoiq concepts w.r.t. tboxes and role hierarchies.
1 discussion
we have presented what is  to the best of our knowledge  the first goal-directed decision procedure for shoiq  and so shoin . given that shoiq is nexptime-complete  tobies  1   it is clear that  in the worst case  any decision procedure will behave very badly  i.e.  not terminate in practice. however  the algorithm given here is designed to behave well in many typically encountered cases  and to exhibit a  pay as you go  behaviour: if an input tbox  role hierarchy  and concept do not involve any one of inverse roles  number restrictions  or nominals  then ro  will not be applied  and the corresponding non-deterministic guessing is avoided. this is even true for inputs that do involve all of these three constructors  but only in a  harmless  way. hence  our shoiq algorithm can be implemented to perform just as well on shiq knowledge bases as state-of-the-art dl reasoners for shiq  horrocks&patel-schneider  1; haarslev&moller ¡§ 1; pellet  1 . to find out whether our algorithm can handle some non-trivial   true  shoiq inputs  we are currently extending a highly optimised dl reasoner  fact++  tsarkov&horrocks  1   to implement the algorithm described here.
