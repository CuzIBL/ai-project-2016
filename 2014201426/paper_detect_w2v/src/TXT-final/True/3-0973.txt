
in a recent paper  we presented a new logic called es for reasoning about the knowledge  action  and perception of an agent. although formulated using modal operators  we argued that the language was in fact a dialect of the situation calculus but with the situation terms suppressed. this allowed us to develop a clean and workable semantics for the language without piggybacking on the generic tarski semantics for first-order logic. in this paper  we reconsider the relation between es and the situation calculus and show how to map sentences of es into the situation calculus. we argue that the fragment of the situation calculus represented by es is rich enough to handle the basic action theories defined by reiter as well as golog. finally  we show that in the full second-order version of es  almost all of the situation calculus can be accommodated.
1	introduction
in a recent paper  we  lakemeyer and levesque  1  presented a new logic called es for reasoning about the knowledge  action  and perception of an agent. our main justification for introducingyet anotherknowledgerepresentationformalism was twofold. first  we claimed that the language was not a new formalism at all  but merely a situation-suppressed version of part of the situation calculus  as originally presented by mccarthy and hayes  mccarthy and hayes 1  and subsequently formalized by reiter  reiter 1a . second  we claimed that because the language was defined semantically rather than axiomatically  certain mathematical arguments about the formalism were considerably simpler than in the original situation calculus. we presented evidence for this by showing a very compact proof of the correctness of reiter's regression operator  and another involving a property called the determinacy of knowledge.
¡¡however  our first claim  which was that es is in fact just an alternate way of writing some formulas of the situation calculus  was left unsubstantiated. in this paper  we remedy this. the main result we prove is the correctness of a simple mapping between sentences of es and their counterparts in the classical language of the situation calculus. in addition  we show that the fragment of the situation calculus expressed by es is rich enough to handle  among other things  basic action theories  as defined by reiter  and the do operator which is the basis of the golog language  levesque et al. 1 . we also illustrate this richness more informally using an example involving the knowledge  action  and sensing of a simple robot. however  there are sentences of the situation calculus that cannot be expressed directly in es  and which may be useful in some contexts. in the final part of the paper  we show that if we are prepared to use second-order quantification  there is a way to encode  almost  every sentence of the situation calculus in es. this encoding is a bit of a trick  and not something we advocate for everyday use. but it does exist. so we gain the clarity that comes from having a real semantic basis  and the ability to present concise semantic arguments  without any significant loss of expressiveness.
¡¡the rest of the paper is organized as follows. in the next section  we define the full language of es  its syntax and semantics. this generalizes the version of es presented in  lakemeyer and levesque  1  in a variety of ways  the most important of which is that it allows functions  predicates  and second-order variables that are fluent  vary from situation to situation  as well as rigid  fixed for all situations . in section 1  we consider the mapping from es to the situation calculus and prove that a sentence of es is valid iff its mapping is a logical entailment of a suitable situation calculus theory. in section 1  we consider the expressiveness of es  first with an example basic action theory and then with do. in section 1  we consider the inverse mapping from the situation calculus to es  followed by some remarks on related work and conclusions. then we stop.
1	the language: syntax and semantics
the full language es consists of formulas over symbols from the following vocabulary:
  first-order variables: x1 x1 ... y1 y1 ... a1 a1 ...;
  fluent second-order variables of arity;
  rigid second-order variables of arity;
  standard names: n1 n1 ...;
  fluent function symbols of arity; for example  location  bestaction;
  rigid function symbols of arity; for example  block1  repair;
  fluent predicate symbols of arity; for example  broken;1
  rigid predicate symbols of arity; for example  fragile;
  connectives and other symbols: =  ¡Ä        know    round and square parentheses  period  comma.
we assume that first-order variables  standard names  and function symbols come in two sorts  action  like repair and bestaction  and object  like block1 and location . constants are function symbols of 1 arity.1 we let n denote the set of all standard names and z denote the set of all sequences of standard names for actions  includinghi  the empty sequence.
1	terms and formulas
the terms of the language are of sort action or object  and form the least set of expressions such that
1. every standard name and first-order variable is a term of the corresponding sort;
1. if t1  ...  tk are terms and h is a k-ary function symbol then h t1 ... tk  is a term of the same sort as h.
by a primitive term we mean one of the form h n1 ... nk  where h is a  fluent or rigid  function symbol and all of the ni are standard names.
the well-formed formulas of the language form the least set such that
1. if t1  ...  tk are terms  and h is a k-ary predicate symbol then h t1 ... tk  is an  atomic  formula; 1. if t1  ...  tk are terms  and v is a k-ary second-order variable  then v  t1 ... tk  is an  atomic  formula;
1. if t1 and t1 are terms  then  t1 = t1  is a formula;
1. if t is an action term and ¦Á is a formula  then  t ¦Á is a formula;
1. if ¦Á and ¦Â are formulas  v is a first-order variable  and v is a second-order variable  then the following are also formulas:  know ¦Á .
we read  t ¦Á as  ¦Á holds after action t   and ¦Á as  ¦Á holds after any sequence of actions.  as usual  we treat  ¦Á ¡Å ¦Â  
 ¦Á   ¦Â    ¦Á ¡Ô ¦Â    v.¦Á  and  v.¦Á as abbreviations. we call a formula without free variables a sentence. by a primitive sentence we mean a formula of the form h n1 ... nk  where h is a  fluent or rigid  predicate symbol and all of the ni are standard names. 1 the semantics
the language contains both fluent and rigid expressions. the former vary as the result of actions and have values that may be unknown  but the latter do not. intuitively  to determine whether or not a sentence ¦Á is true after a sequence of actions z has been performed  we need to specify two things: a world w and an epistemic state e. we write e w z |= ¦Á. a world determines truth values for the primitive sentences and co-referring standard names for the primitive terms after any sequence of actions. an epistemic state is defined by a set of worlds  as in possible-world semantics. more precisely:   a world w ¡Ê w is any function from the primitive sentences and z to {1}  and from the primitive terms and z to n  preserving sorts   and satisfying the rigidity constraint: if r is a rigid function or predicate symbol 
then w r n1 ... nk  z  = w r n1 ... nk  z1   for all z and z1 in z.
¡¡  an epistemic state e   w is any set of worlds. we extendthe idea of co-referringstandard names to arbitrary ground terms as follows. given a term t without variables  a world w  and an action sequence z  we define |t|zw  read: the co-referring standard name for t given w and z  by:
1. if t ¡Ê n  then |t|zw = t;
1. |h t1 ... tk |zw = w h n1 ... nk  z   where ni = |ti|zw.
to interpret formulas with free variables  we proceed as follows. first-order variables are handled substitutionally using the standard names. to handle the quantificationover secondorder variables  we use second-order variable maps defined as follows:
the second-order primitives are formulas of the form v  n1 ... nk  where v is a  fluent or rigid  second-order variable and all of the ni are standard names. a variable map u is a function from worlds  second-order primitives  and z to {1}  satisfying the rigidity constraint: if q is a rigid
	 	  1	k 	  =
u w1 q n1 ... nk  z1 .
let u and u1 be variable maps  and let v be a  fluent or rigid  second-order variable; we write u1 ¡«v u to mean that u and u1 agree except perhaps on the second-order primitives involving v . finally  to interpret what is known after a sequence of actions possibly including sensing has taken place  we define w1 'z w  read: w1 and w agree on the sensing throughout action sequence z  inductively by the following: 1. w1 'hi w iff w1 and w agree on the value of every primitive rigid term and sentence;
1. w1 'z¡¤n w iff w1 'z w and w1 sf n  z  = w sf n  z .
putting all these together  here is the semantic definition of truth. given e   w and w ¡Ê w  we define e w |= ¦Á  read: ¦Á is true  as e w hi |= ¦Á  where for any z ¡Ê z and any second-order variable map u:
1. e w z u |= h t1 ... tk  iff w h n1 ... nk  z  = 1  where ni = |ti|wz ;
1. e w z u |= v  t1 ... tk  iff u w v  n1 ... nk  z  = 1  where ni = |ti|wz ;
1.
where ni = |ti|wz ;
1. e w z u |=  t ¦Á iff e w z¡¤n u |= ¦Á  where n = |t|wz;
1. e w z u |=  ¦Á ¡Ä ¦Â  iff e w z u |= ¦Á and e w z u |= ¦Â;
1. e w z u |=  ¦Á iff e w z u 1|= ¦Á;
1. e w z u |=  v.¦Á iff e w z u |= ¦Áxn  for every standard name n  of the same sort as v ;
1. e w z u |=  v. ¦Á iff e w z u1 |= ¦Á  for every u1 ¡«v u;
1. for every z1 ¡Ê z;
1. e w z u |= know ¦Á  iff e w1 z u |= ¦Á  for every w1 ¡Ê e such that w1 'z w. when ¦Á is objective  has no know operators   we can leave out the e and write w |= ¦Á. when ¦² is a set of sentences and ¦Á is a sentence  we write ¦² |= ¦Á  read: ¦² logically entails ¦Á  to mean that for every e and w  if e w |= ¦Á1 for every ¦Á1 ¡Ê ¦²  then e w |= ¦Á. finally  we write |= ¦Á  read: ¦Á is valid  to mean {} |= ¦Á. 1 mapping to the situation calculus
how do we know that the semantics of es is correct  in this section  we argue that it is indeed correct by showing how formulas ¦Á in es can be translated in a direct way to formulas ¦Á  in the situation calculus as defined by reiter.1
¡¡the most desirable and simplest outcomeof this translation would be that |= ¦Á iff ¦² |=fol ¦Á   where |= is validity in es  ¦² is the set of foundational axioms of the situation calculus  see  levesque et al  1   for example   and |=fol is ordinary classical logical consequence. unfortunately  we do not get exactly this correspondencefor a variety of reasons we will discuss below. but we do get something close:
	|= ¦Á	iff	¦² ¡È ¦´ |=fol ¦Á  
where ¦´ is a set of four axioms that we will justify separately.
¡¡to prove this result it will be necessary to work with ordinary tarski models of sentences of the situation calculus. as argued in  lakemeyer and levesque  1   this is difficult and painstaking  and is indeed one of the main reasons to prefer es over the situation calculus. so while the proof of the theorem is quite laborious  we remind the reader that this can be thought of as a final reckoning for a formalism that is unworkable semantically. for space reasons  we do not review the conventional notation used for talking about tarski interpretations  denotations  extensions  variable maps. see  for example   enderton 1 . 1 definition of the translation before describing ¦´  we present the translation from es into the situation calculus. in the simplest case  the idea is that a formula like broken c   where broken is a fluent  will be mapped to the situation calculus formula broken c s1   where we have restored the distinguished situation term
s1 for the fluent. similarly   repair c   broken c  will be mapped to  broken c do repair c  s1  . so es formulas can be thought of as  situation-suppressed   in situationcalculus terminology  and the   mapping restores the situation argument to the fluents  leaving the rigids unchanged. more precisely  we have the following:
definition 1 let ¦Á be any term or formula of es without standard names. the expression ¦Á  is defined as ¦Á s1  where  for any situation term ¦Ò  ¦Á ¦Ò  is defined inductively by:
1. v ¦Ò   where v is a first-order variable  is v;
1. g t1 ... tk  ¦Ò   where g is a rigid function  predicate  or second-order variable  is g t1 ¦Ò  ... tk ¦Ò  ;
1. f t1 ... tk  ¦Ò   where f is a fluent function  predicate  or second-order variable is f t1 ¦Ò  ... tk ¦Ò  ¦Ò ;
1.  t1 = t1  ¦Ò  is  t1 ¦Ò  = t1 ¦Ò  ;
1.   t ¦Á  ¦Ò  is ¦Á do t ¦Ò  ¦Ò  ;
1.  ¦Á ¡Ä ¦Â  ¦Ò  is  ¦Á ¦Ò  ¡Ä ¦Â ¦Ò  
1.   ¦Á  ¦Ò  is  ¦Á ¦Ò ;
1.   v.¦Á  ¦Ò  is  v.¦Á ¦Ò ;
;
1. know ¦Á  ¦Ò  is knows ¦Á now  ¦Ò .
note that the translation of ¦Á introduces quantification over situations  where the introduced variable s1 is assumed to be one that does not appear in situation term ¦Ò.
1 the situation-calculus axioms ¦´ the axioms we assume in ¦´ are the following:
1. domain of objects is countably infinite;1. domain of actions is countably infinite  as above ;
1. equality is the identity relation:
 x y. x = y  ¡Ô  q q x  ¡Ô q y  .
1. the k
	 	  ¡Ô	 ...  	 	   
where the ellipsis stands for the universal closure of
 k s1 s1  ¡Ä ini s1    p s1 s1   ¡Ä  p s1 s1  ¡Ä sf a s1  ¡Ô sf a s1   
p do a s1  do a s1   .
axioms  1  and  1  talk about the cardinality of the set of objects and actions respectively: they are both countable and infinite. the countability aspect is not very controversial. in the first-order case  every satisfiable set of sentences is satisfiable in a countable domain  and we do not expect users of the situation calculus to use second-order logic to defeat this.
note that this does not rule out having theories that talk about real numbers or other continuous phenomena; it simply rules out using second-order logic to force the interpretations of these theories to be uncountable. we can  however  imagine contexts where finiteness might be desirable. in such cases  we can introduce a new predicate o and instead of asserting that there are finitely many objects  assert that there are finitely many objects in o.
¡¡as for axiom  1   it is hard imagining anyone taking the negation of this one seriously. the usual first-order axiomatization of equality is often enough  but the intent is invariably for the equality symbol to be understood as the identity relation  which this second-order axiom ensures.
¡¡finally axiom  1  is a second order definition of the k predicate in terms of the value it has at s1. this is just another way of capturing the successor state axiom for k introduced by scherl and levesque   and the added machinery to make knows be a weak-s1 operator  hughes and cresswell  1 . other knowledge operators are possible in the situation calculus  but weak-s1 and its extensions  such as strong-s1  are the most often used.
1	the embedding theorem
what we show is that provided certain properties hold between a tarski structure on one side and an epistemic state  and a collection of worlds on the other  sentences will be true in es iff their translations are true in the tarski structure.
¡¡let m be a tarski structure for the situation calculus over the domain d = dsit ¡È dact ¡È dobj  with dini   dsit as the set of initial situations  and . let e be an epistemic state  and assume that we are given three mappings ¦Ø ¡Ê  dini ¡ú w   ¦È ¡Ê  n ¡ú dact ¡È dobj   and ¦Ð ¡Ê  z ¡Á dini ¡ú dsit . these mappings need to satisfy variousconsistency propertiesthat we cannot enumeratehere. but we can at least quote the lemma that uses them:
lemma 1 let ¦Á be a formula of es with no standard names and whose free variables are among x1 ... xm. then  given the consistency properties  for any variable map ¦Ì  the es variable map u¦Ì  defined in terms of ¦Ì   any variable s  any z ¡Ê z  any ¦É ¡Ê dini  and w = ¦Ø ¦É  
e w z u¦Ì |= ¦Áxn1 ...xnmm
iff
   m ¦Ì{x1/¦È n1  ... xm/¦È nm  s/¦Ð z ¦É } |= ¦Á s . this is provedby a  long  induction on the structure of ¦Á. the main result is then the following:
theorem 1 let ¦Á be any sentence of es without standard names. then ¦Á is valid iff ¦² ¡È ¦´ |=fol ¦Á .
proof:  sketch  first assume that ¦Á is not valid. then there is an e  w1 such that e w1|= ¦Á. we define a tarski structure
m whose domain is d = dobj ¡È dact ¡È dsit  where dobj
 resp. dact  is the set of standard names of objects  resp. actions   and dsit = z ¡Á w. then we define   vm  km  as well as the extension of every rigid and fluent predicate and function symbol using e and w1 in a way that ensures that m satisfies ¦²¡È ¦´. next  define the mappings ¦È  ¦Ð  and ¦Ø by letting ¦È n  = n  and for any initial ¦É =  hi w   letting ¦Ð z ¦É  =  z w   and ¦Ø ¦É  = w. this ensures that the

	1
close
figure 1: a simple robot

properties needed for lemma 1 are satisfied  and therefore
m 1|= ¦Á . consequently  ¦² ¡È ¦´ 1|=fol ¦Á .
conversely  assume that ¦² ¡È ¦´ |1=fol ¦Á . then there is a tarski structurem that satisfies ¦²¡È¦´ but such that m |1= ¦Á .
the domain d must be dsit ¡È dact ¡È dobj  with dini   dsit as the set of initial situations  ini.
since m |= ¦´  both dobj and dact are countably infinite 
dobj = {¦Ä1 ¦Ä1 ...}  and dact = {¦Ë1 ¦Ë1 ...}. we define ¦È to map the i-th standard name for objects to ¦Äi and analogously for actions. we then define ¦Ð using dom  and ¦Ø using the extensionsof the functionand predicatesymbols givenby m.
finally  we let e = {¦Ø ¦É | ¦É ¦É1  ¡Ê km}  and w1 = ¦Ø ¦É1 . these ensure that the properties needed for lemma 1 are satisfied  and so e w1|= ¦Á. consequently  ¦Á is not valid. 
1	the expressiveness of the language
now that we have established that es is actually a disguised fragment of the situation calculus  we next consider the expressiveness of this fragment  starting with a simple example problem  adapted from  levesque and lakemeyer 1 .
¡¡imagine a robot that lives in a 1-dimensional world  and that can move towards or away from a fixed wall. the robot also has a sonar sensor that tells it when it gets close to the wall  say  less than 1 units away. see figure 1. so we might imagine three actions  forward and backward which move the robot one unit towards and away from the wall  and a sonar sensing action which tells the robot if it is close to the wall. each of these is a rigid constant  but for simplicity  we will simply assume that they are standard names. we have a single fluent  distance  which gives the actual distance from the robot to the wall. we can use close as an abbreviation for the formula  distance   1.  1 we begin our formalization by writing preconditions for the three actions:

a = forward ¡Ä distance   1 ¡Å a = backward ¡Ä true ¡Å a = sonar ¡Ä true.
next  we define the sensing results for the actions:

a = forward ¡Ä true ¡Å a = backward ¡Ä true ¡Å a = sonar ¡Ä close.
finally  we write a successor state axiom for our only fluent:
distance = x  ¡Ô
a = forward ¡Ä distance = x + 1	¡Å backward ¡Ä distance = x   1	¡Å = forward ¡Ä a 1= backward ¡Ä distance = x.
now we are ready to consider some specifics having to do with what is true initially by defining an action theory ¦². let ¦Õ denote the conjunction of the sentences above. we assume that ¦Õ is true and the robot knows it. we also assume the robot is located initially 1 units away from the wall  but that the robot has no idea where it is. so  we let ¦² be {¦Õ  know ¦Õ   distance = 1   x know distance 1= x } 
and we get this:
theorem 1 the following are logical entailments of ¦²:
1. close ¡Ä  know close  ¡Ä  forward  know close  the robot is close to the wall  but does not know it  and continues not to know it after moving forward; 1.  sonar  know close  ¡Ä  forward know close   after reading the sonar  the robot knows it is close  and continues to know it after moving forward; 1.  sonar  backward  know close  after reading the sonar and then moving backward  the robot no longer knows that it is close to the wall; 1.  backward  sonar know close  after moving backward and then reading the sonar  the robot knows that it is close to the wall; 1.  sonar  forward  backward know close  after reading the sonar  moving forward  and then backward  the robot knows that it is still close to the wall;
1.  sonar know  forward close  after reading the sonar  the robot knows that it will remain close after moving forward; 1.  know  sonar know close   the robot does not know initially that it will know that it is close after reading the sonar; 1. know  sonar  know close  ¡Å know  close    the robot does know initially that after reading the sonar  it will then know whether or not it is close to the wall;
 1. know  sonar  backward  know close   the robot knows initially that it will not know that it is close after reading the sonar and moving backwards. proof: the proofs of these are similar. here we will only do item 1. let z = hsonar ¡¤ backwardi  and suppose that e w |= ¦²; we must show that e w z |=  know close . because e w |=  know distance 1= 1   there exists w1 ¡Ê e such that w1 'hi w and w1 distance hi  = 1. since 1   1  we also have that w1 'z w. however  w1 distance z  = 1. so there exists w1 ¡Ê e such that w1 'z w and w1 z |=  close. therefore  e w z |=  know close . 
although we will not attempt to formulate a theorem here  it should be clear from this example that any basic action theory  reiter 1a  including those involving the scherl-levesque knowledge operator can be expressed in es.
1	the do operator
we now turn our attention to the do operator which is the basis of the golog language  levesque et al. 1   and show that a variant of do can be represented in es. we cannot encode do ¦Ä s s1  directly since we do not have situations as terms. instead we will use do  ¦Ä ¦Á  which intuitively means that ¦Á holds after doing golog program ¦Ä. there are two possible readings: one says that ¦Á holds in all final states  and the other says that ¦Á holds in some final state. they can be interdefined  so we consider only the latter. we treat do  ¦Ä ¦Á  as an abbreviation for a formula of es  defined recursively on the ¦Ä as follows:
1. for any action a  do  a ¦Á  def=  poss a  ¡Ä  a ¦Á ;
1. do  ¦Õ   ¦Á  def=  ¦Õ ¡Ä ¦Á ;
1. ;
1. do  ¦Ä |¦Ä1  ¦Á  def=  do  ¦Ä ¦Á  ¡Å do  ¦Ä1 ¦Á  ;
1. do  ¦Ðx. ¦Ä  ¦Á  def=  x. do  ¦Ä ¦Á ;
1.
	{	}	.
as usual  we can define while-loops and if-then-else as abbreviations. the main theorem that we state here is that this account of do  is correct relative to the original account of do and the mapping from es defined above:
theorem 1 let ¦Ä be any program  ¦Á be any sentence of es  and ¦Ò be any situation term of the situation calculus. then |=fol do  ¦Ä ¦Á  ¦Ò  ¡Ô  s. do ¦Ä ¦Ò s  ¡Ä ¦Á s .
this is proved by induction over ¦Ä  the only troublesome case being for the nondeterministic iteration  ¦Ä .
1	mapping from the situation calculus
when mapping the situation calculus into es  the main issue is the treatment of quantified situations. while simple formulas can be translated using the inverse of   from section 1  a sentence like  s s1.s v s1 ¡Ä s 1= s1 ¡Äf s  ¡Ô f s1   which says that from every situation another situation is reachable that agrees on the truth value of f  has no counterpart in es.
¡¡to deal with situation-calculus sentences like these  our proposal is to encode action sequences in second-order es. let nil be a  rigid  constant and seq a  rigid  binary function symbol of es. we define actionseq x  as an abbreviation for
    q.q nil  ¡Ä  y a. q a    q seq a y      q x . in the situation calculus  a fluent like f do ¦Á do ¦Â s1    actually means that f holds after doing ¦Â then ¦Á. so the actions are in reverse order in a situation term. it is therefore useful to be able to reverse a sequence as follows:
def
definition 1 rev x y  =  r ...   r x nil y    where the ellipsis stands for the universal closure of
¡¡r nil x x  ¡Ä  r x seq a y  z    r seq a x  y z  . next we define what it means for a formula ¦Á to be true after a sequence of actions.
def
definition 1 after s ¦Á  =  p. ...   p s   where the ellipsis stands for the universal closure of
{ ¦Á   p nil   ¡Ä   a p x  ¡Ä rev seq a x  y    p y  }.
the fluent  broken do repair do drop s1    will then be translated as after seq repair seq drop nil    broken . in order to deal with quantification over situations  we define ¡Ü as a relation over action sequences  similar to the situation calculus relation v.
definition 1  x ¡Ü x1  def=  q. ...   q x x1   where the ellipsis stands for the universal closure of
     q nil x  ¡Ä  q x y    q seq a x  seq a y   . the formula  s s1.s v s1 ¡Ä  s 1= s1  ¡Ä f s  ¡Ô f s1  of the
situation calculus will then be translated as
¡¡ x.actionseq x     x1.actionseq x1  ¡Ä  x ¡Ü x1  ¡Ä  x 1= x1  ¡Ä  after x f  ¡Ô after x1 f  . the final problem we must deal with concerns unrestricted quantification over initial situations. to simplify things  we restrict ourselves to scr  the rooted situation calculus  where all situation quantification is of the form  s. ¦Ò v s   ¦Á  for some situation term ¦Ò. note that this is no restriction at all for the non-epistemic situation calculus  since  s.¦Á is equivalent to  s.s1 v s   ¦Á. we handle the knows operator separately.
¡¡to ease the translation  we assume that situation-calculus formulas are in the following normal form: all arguments of predicates and functions are variables; equality expressions have the form  x = t   where x is a variable and t is a term mentioning at most 1 function symbol. it is easy to show that every formula of scr is equivalent to one in this normal form. the mapping from the situation calculus into es begins with a mapping   from situation terms into sequences of actions in es. we assume that there is a countably infinite set vs of extra object variables in es for this purpose. for any situation variable s  we assume that s  ¡Ê vs and that   is 1-to-1 and onto wrt vs when restricted to situation variables. we also have  now  = nil  and that do a s   = seq a s  . we extend   to formulas as follows:
definition 1 let ¦Á be any formula of scr in normal form. then its translation into es  ¦Á   is defined inductively by:
1. g x1 ... xk    where g is a rigid predicate or rigid second-order variable  is g x1 ... xk ;
1. f x1 ... xk s    where f is a fluent predicate or fluent second-order variable  is after s  f x1 ... xk  ;
1.  x = g x1 ... xk     where g is a rigid function  is  x = g x1 ... xk  ;
1.  x = f x1 ... xk s     where f is a fluent function  is after s  x = f x1 ... xk  ;
1.  s = ¦Ò   is  s  = ¦Ò  ;
1. ;
1.   ¦Á   is  ¦Á ;
1.  ¦Á ¡Ä ¦Â   is ¦Á  ¡Ä ¦Â ;
1.   x.¦Á  is  x.¦Á  for an object or action variable x;
1.   s.¦Ò v s   ¦Á   is
 s .actionseq s   ¡Ä ¦Ò  ¡Ü s    ¦Á  ;
1.   v.¦Á   is  v.¦Á  for a second-order variable v ;
1. knows ¦Á s   is after s  know ¦Á   .
to show correctness of the translation  we need two more axioms ¦·  which are the universal closure of the following:
seq a x  1= nil; seq a x  = seq a1 x1    a = a1 ¡Ä x = x1.
theorem 1 let ¦Á be a sentence of scr in normal form. then ¦² ¡È ¦´ |=fol ¦Á iff ¦· |= ¦Á .
1	related work
the situation calculus  which has been the sole focus of this paper  is of course not the only language for reasoning about action. over the years  there have been many other proposals such as the event calculus  kowalski and sergot 1   sandewall's features and fluents  sandewall 1   the language a  gelfond and lifschitz 1   or the fluent calculus  ho¡§lldobler and schneeberger 1   to name but a few. what distinguishes the situation calculus perhaps most from its alternatives is that it admits an elegant monotonic solution to the frame problem  reiter 1   which is shared by its close relative  the fluent calculus  thielscher 1 . however  the fluent calculus also has situation terms as part of the language and hence suffers from the same shortcomings which es tries to address.
¡¡es itself has much in common with dynamic logic  pratt 1; harel 1   which has also been applied to reasoning about action  castilho  gasquet  and herzig 1 . a new feature of es  compared to dynamic logic  are quantified modalities as in  a. a ¦Á  which are key in expressing successor state axioms  among other things.
¡¡dynamic logic has been combined with epistemic logic  herzig et al. 1; demolombe 1 . in the language of  herzig et al. 1   it is possible to express things like  backward  sonar know close  using an almost identical syntax and where know also has a possible-world semantics. despite such similarities  there are significant differences  however. in particular  their language is propositional. consequently  there is no quantification over actions. demolombe 1 proposesan axiomatictranslation of parts of the epistemic situation calculus into modal logic. while his modal language is first-order  he does not consider quantified modalities.
¡¡although they do not consider epistemic notions  the work by  blackburn et al. 1  is relevant as it reconstructs a version of the situation calculus in hybrid logic  blackburn et al. 1   a variant of modal logic which was inspired by the work on tense logic by prior  prior 1 . in a sense  though  this work goes only part of the way as an explicit reference to situations within the logic is retained. to us this presents a disadvantage when moving to an epistemic extension. the problem is that the epistemic situation calculus requires us to consider uncountably many situations  which precludes a substitutional interpretation of quantification.
1	conclusion
in this paper  we have substantiated the claim made informally in a previous paper that es is a fragment of the situation calculus that admits an intuitive possible-world semantics. we arguedthat this fragmentis expressiveenoughto represent basic action theories by presenting a simple example involving the action  knowledge  and sensing of a robot. we also showed how a version of the do operator of the golog language could be accommodated within the language. finally  we proved that by using second-order encodings of sequences  virtually all of the situation calculus can be represented in es. so what we get out of es is a tool with practically the same expressive power as the standard situation calculus  but which is much more amenable to analysis due to its simple semantic basis.
¡¡in work currently under way  cla en 1   es is used to simplify and extend results by reiter on knowledge-based programs  reiter 1b . there are also a number of directions for future research  but perhaps the most immediate would be to implement a new version of golog based on es and put it to work.
acknowledgments
we thank the anonymous reviewers for their helpful comments.
