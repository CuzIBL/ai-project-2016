
in my previous paper  ryan  1  i introduced the concept of subgraph decomposition as a means of reducing the search space in multi-robot planning problems. i showed how partitioning a roadmap into subgraphs of known structure allows us to first plan at a level of abstraction and then resolve these plans into concrete paths without the need for further search so we can solve significantly harder planning tasks with the same resources. however the subgraph types i introduced in that paper  stacks and cliques  are not likely to occur often in realistic planning problems and so are of limited usefulness.
in this paper i describe a new kind of subgraph called a hall  which can also be used for planning and which occurs much more commonly in real problems. i explain its formal properties as a planning component and demonstrate its use on a map of the patrick's container yard at the port of brisbane in queensland australia.
1 introduction
coordinated path planning for multiple robots is difficult because the search space grows combinatorially with the number of robots  lavalle  1 . we need to plan not only for the paths of individual robots but also for the ordering of their movements to prevent them from colliding with one another. often it is necessary for robots to detour away from their shortest paths in order to let other robots pass. as a result centralised planning methods  eg barraquand & latombe  1   which plan for all robots at once  have traditionally been abandoned in favour of prioritised planners which plan for only one robot at a time in priority order  erdmann & lozano-pe뫣rez  1; lavalle & hutchinson  1; berg & overmars  1 . collisions are avoided by requiring lower priority robots to plan to avoid those of higher priority. this is much faster since the search space is kept relatively small but can be incomplete. it is not difficult to construct a problem for which there is no prioritised solution.
모in my previous paper  ryan  1  i proposed a way to perform centralised planning in a much more efficient manner by dealing with the problem at a higher level of abstraction. if we partition the map into a set of connectedsubgraphs then we can first of all plan for the movement of the robots between the subgraphs and then resolve these abstract plans into sequences of more concrete steps. if the subgraphs we use have well-chosen structure then this abstraction will significantly reduce the size of the search space  and the resolution process can be done deterministically without the need for further search.
모the subgraphs that i have previously described  stacks and cliques  work well for illustrating this idea but are seldom found in real planning problems. in this paper i introduce a more complex kind of subgraph called a hall which is much more common in real planning problems. i explain its structure and its formal properties below and i shall demonstrate its value by using it to do multi-robot planning on a real problem: moving cargo-handler robots around a map of the patrick container yard at port brisbane.
1 problem formulation
we assume for this work that we are provided with a roadmap in the form of a graph g =  v e  representing the connectivity of free space for a single robot moving around the world. we consider our robots to be homogeneousso a single map suffices for them all.
모we make some further simplifying assumptions about the map:
  the map is constructed such that two robots will only collide if they try to simultaneously occupy the same vertex in the graph. that is  the vertices must be spaced sufficiently far apart that two robots can occupy any pair of distinct vertices without colliding.
  a robot at vertex vi can move to neighbouring vertex vj provided vj is unoccupied and no other robot is simultaneously entering or leaving vj. robots occupying other vertices in the graph do not affect this movement.
  the initial and goal locations of all robots lie on the roadmap.
with appropriate levels of underlying control these assumptions should not be too difficult to achieve or approximate for most problems.
모we also have a set of robots r = {r1 ... rk}  and two mappings s1 s+ : r 뫸 v representing the initial and goal positions of the robots respectively  with algorithm 1 planning on the reduced graph

function plan g  x  r  s1  s+ 
pr 뫹    r 뫍 r
 뫹  
for r 뫍 r do
모g1 r  뫹 g 뫍 g s.t. s1 r  뫍 g end for p 뫹 plan g  x  r  p  g1  s+  for g 뫍 g do
모p 뫹 g.resolve p  end for return p
end function
function plan g  x  r  p  g  s+ 
if  r : s+ r  뫍 g r  then
for r 뫍 r do
모p 뫹 g r .terminate p  r  s+ r   end for return p
end if
choose r 뫍 r

p 뫹 gt.enter p  r  vt  add  vf vt  to pr g r  뫹 gt return plan g  x  r  p  g  s+ 
end function

j. given this information we wish to construct a set of plans p = {pr | r 뫍 r} for each robot to reach its goal. we also construct a partial-ordering   between plan steps so that two robots can never occupy the same the vertex of the map.
1 subgraph planning
at this stage a naive centralised planner would proceed as follows: first  initialise every robot at its starting position  then select a robot and move it to a neighbouring vertex  checking first that no other robot is currently occupying that vertex. continue in this fashion selecting and moving one of the robots at each step until all robots are at their goals. of course  each choice presents multiple possibilities and all alternatives have to be searched in some systematic fashion  usually by breadth-first or a  search.
모subgraph planning proceeds in a similar fashion  as illustrated in algorithm 1. before we begin the map g is partitioned into a collection of subgraphs g = {g1 g1 ... gm} and then a minor x of g is constructed by contracting each subgraph to a single vertex;
v  x 	=	g e x 	=	{ gi gj  |  x 뫍 gi y 뫍 gj :  x y  뫍 e g }
모given this partitioning the planning algorithm proceeds as before. we initialise the robots in their starting positions and then search through a sequence of steps. each step consists of selecting and moving one of the robots  but in this case we consider how the robot might be moved from the subgraph it currently occupies to one of its neighbours in x. this is more complex than in the naive planner. when we attempt to move a robot from one subgraph to another we must first check that it is possible to do this without forcing any of the other robots within the subgraph to exit. similarly  we must check that the robot can validly enter the neighbouring subgraph. rearranging robots within the subgraph is permissible but movement between subgraphs must only occur as a deliberate plan step.
모once a robot has reached the target subgraph in which its goal vertex lies it must also check that is is possible for it to terminate there. it may be that other robots within the subgraph prevent it from reaching its goal location without any robots exiting the subgraph.
모thus for each subgraph structure we use  we need to implement three test methods used in the search progress:
  enter p r v  test if robot r can enter a vertex v in the subgraph.
  exit p r v  test if robot r can exit the subgraph via vertex v.
  terminate p r v  test is robot r in the subgraph can move to its goal vertex v.
모the key to efficient subgraph planning is to carefully constrain the allowed structure of the subgraphs in our partition  so that the enter  exit and terminate methods are simple to implement  and do not require expensive search. the advantage of this approach is that each of these functions can always be computed based only on the arrangement of other robots within that particular subgraph and do not rely on the positions of robots elsewhere.
모if these three methods are correctly implemented then once a subgraph-based plan has been found  we can guarantee that there is a concrete resolution of this plan into edge transitions in g which fits this abstraction. furthermore  if no subgraph plan can be found then no concrete plan exists either  as every concrete plan has an abstract representation1 and our search algorithm is complete.
모when subgraph planning is complete  we need an additional method:
  resolve p  to resolve an abstract plan of enter/exit/terminate events into a concrete sequence of movements between vertices.
모under our assumptions stated earlier  we can resolve the movements of robots within one subgraph without reference to robots elsewhere. so we can implement a resolve method for each subgraph type which performs this operation. once again  the key is to choose our subgraph structure so that this method can be implemented efficiently without the need for additional search.

figure 1: a graph containing a hall subgraph.
1 subgraph structures
what  then  are these 'subgraph structures' that allow efficient subgraph planning  previously i have described the use of stacks and cliques as subgraphs. a stack is a chain of vertices with only a single exit at one end. robots can only enter and leave a stack in a last-in-first-out order. cliques are fully-connected subgraphs and may have many exits to other subgraphs from different vertices. because every vertex in a clique is connected to every other  robots can move in and out of a clique in arbitrary order as long as the clique never becomes full.
모the enter and exit methods for these types of subgraphs are so simple because they place very strong constraints on the structure of the subgraph and its connections to other subgraphs. unfortunately  for this reason  these kinds of subgraphs rarely occur in realistic planning problems. we therefore need to find other structures that are complex enough to represent real problems  yet still simple enough to implement efficiently. the hall is such a structure.
1 the hall subgraph
a hall  figure 1  is a generalisation of a stack to include multiple entrance and exit points along its length. formally it is an induced subgraph h   g consisting of a chain of vertices v  h  = {v1 ... vk} each linked to its two neighbours without any 'shortcuts'  ie:
 vi vj  뫍 e h   iff |i   j| = 1  vi vj 뫍 v  h 
as its name suggests  we may imagine a hall as a long narrow passageway with multiple exits along its length. the passage is too narrow for robots to pass one another  so the sequence of robots within the hall will constrain which exits can be used by a given occupant at a particular time.
모to implement the four planning methods enter  exit and terminate  resolve for halls  we need to keep track of the sequence of robots within the hall at any given moment  including not just their names but also their order  but not  importantly  their actual vertices . i shall denote this sequence as. for each method  i shall now describe how it depends on and affects s.
enter  
when a robot r enters the hall  we can compute the possible sequences this creates. if the robot enters at vertex vi of a hall of length k which already contains n   k robots in sequence s  then the resulting sequence can be of the form:


figure 1: example of entering a hall subgraph  with n = 1  k = 1 and i = 1. robot d can enter at three possible sequence positions j = 1  1 or 1 but not at j = 1
for any j satisfying:
j 뫟 max 1 n   k + i  j 뫞 min n i   1 
if several different values of j are possible then the planner must consider all of these alternatives sequences in the ongoing plan  as they may lead to different outcomes. an example is shown in figure 1.
exit  
similarly  the position that a robot occupies in the sequence s determines which edges it can use when exiting the hall. if robot r j  wants to exit from a hall of length k  then it can do so only via edges which connect to a vertex vi with:
i	뫟	j i	뫞	k   n + j
this constraint limits which of the neighbouring subgraphs can be entered by this robot at a particular time.
terminate  
we can terminate the robots in the hall provided that the sequence s matches the sequence termination positions. that is  if r i  r j  뫍 s with i   j terminate at va and vb respectively then we must have a   b.
resolve  
to resolve a subgraph plan which uses a particular hall we need to know three pieces of information:
1. the list of robots which entered and exited the hall 
1. the edges by which they entered and exited 
1. the sequence positions at which they entered.
given this information we can construct a concrete plan by moving the robots on an as-needs basis. when a robot enters we shuffle the existing occupants left or right as necessary to open up a gap at the appropriate sequence position and we move the newcomer into this gap. when a robot leaves we shuffle the robots appropriately so that it will be at the right vertex from which to depart. none of this requires any kind of search and we are guaranteed that it will succeed because of the checks already done in the enter and exit methods.
모finally  when we have processed all the entrances and exits the remaining robots should be in the correct sequence to terminate. we can now just move each one to its terminal position  shuffling any that are in the way further up the hall  close to their own terminating positions .
1 complexity
the enter and exit methods for a hall are both o m  where m is the number of different sequence positions permitted by the formulae above  which is guaranteed to be less than or equal to the size of the hall |h|. terminate is o 1   amortised over all robots in the hall and the resolve method adds a further o h  term  where h is the number of visits to the hall. since each subgraph must be resolved in this fashion  this post-processing takes extra time equal to the sum of the lengths of the robots' plans.
1 experiments
to evaluate the advantage of planning with the hall subgraph structure  i applied it to a large realistic planning task. a map of the patrick port facility at port brisbane in queensland was provided by the company  figure 1 . this map is used by their computersystem to plan the movementsof automated straddle carriers - large vehicles which transport shipping containers around their yards. efficient planning of coordinated paths for these vehicles is important for the smooth running of the facility.
모the map is an undirected graph of 1 vertices and 1 edges. the vertices are naturally connected in long straight chains representing the roads around the facility. these roads mean that the vertices can be partitioned into 1 hall subgraphs  with only 1 vertices left over  which must be treated as singletons  figure 1 . the reduced graph has 1 edges connecting neighbouring subgraphs.
모this reduced graph was constructed by hand with the aid of a simple interactive tool. choosing the partition was not difficult; the roads around the port are obvious in the map and provide a natural set of halls. no effort was made to optimise this partition in any fashion to suit the algorithm.
모using this map  i ran the following experiment: n robots were placed in the graph at randomly selected vertices. to force some amount of interaction  each robot was then required to move to the starting location of the next robot in the list  with the final robot moving to the location of the first. two plans were constructed  one using a naive centralised planner and one using the subgraph planner. both planners performed a best-first search of the plan space using a distance heuristic based on the all-shortest-paths matrix for a single robot in the map.

figure 1: the reduced map. each vertex represents a single subgraph.
모the experiment was repeated 1 times each for values of n from 1 to 1 and the median running time was calculated1. these values are plotted in figure 1. medians are shown rather than means  as in some cases the planners failed due to lack of memory. such instances are treated as having an infinite running time. figure 1 shows the percentage of cases which ran out of memory for each planner  exceedingthe 1gb limit placed on the heap.
모as can be seen from these two graphs  the naive planner works more efficiently on small problems  due to the extra overhead of subgraph planning  but quickly blows up as the number of robots is increased  taking much more time and memory. subgraph planning is able to handle significantly larger problems with many more robots before its search space also becomes too large.
모with regard to plan length  the use of best-first search meant neither planner was designed to achieve optimality and outcomes were mixed. in some cases by keeping to the halls the subgraph planner produced much shorter plans. in other cases poorly chosen sequencing decisions meant that these plans were much longer. work is in progress to construct sensible measures of the length of an abstract plan and heuristics to estimate the cost to completionso that a* search can be applied to the abstract planningproblem  to optimise the lengths of plans. nevertheless we feel that it is better to be producing a sub-optimal plan quickly than to search for an optimal plan and fail.

figure 1: a map of the patrick port facility at port brisbane.1 related work
hierarchical planning has been applied to path-planning before with abstractions such as approximate cell decomposition  barbehenn & hutchinson  1    conte & zulli  1   generalised voronoi graphs  choset & burdick  1   and general ad-hoc hierarchical maps  zivkovic  bakker  & kro몮se  1   but the structures identified in these examples do not carry over well to the multi-robot scenario.
모in the domain of task-planning the discovery and use of well-defined subproblems has shown recently popularity  long & fox  1; mccluskey & simpson  1 . the subgraphs i describe here may be considered 'generic types' for the multi-robot planning domain.
1 conclusion and further work
abstraction has always been a valuable tool in improving the efficiency of planning  but the difficulty is in finding a good abstraction that is  i  commonly occurring   ii  easy to recognise and represent and  iii  easy to reason about. in the domain of multi-agent path planning the hall subgraph is such an abstraction. halls can be found in many different kinds of graphs and are especially common in maps of man-made domains such as corridors and roads. in domains such as these  it is relatively easy to identify halls by hand but the structure is also simple enough that automatic partitioning should not difficult to implement.
모i have shown how this structure allows us to do planning in a large real world domain with many robots  where a naive centralised planner without abstraction rapidly runs out of memory. the key to this improvement is the efficient implementation of the enter  exit  terminate and resolve methods. this improvement is available without having to sacrifice completeness  unlike other solutions such as prioritisation.
모that said  there is no reason why this abstraction should be incompatible with prioritised planning. a prioritised subgraph planner would have the advantage that plans could remain abstract until plans were constructed for all robots. by delaying some of the conflict resolution to the resolution step  the could allow the planner to produce a wider range of plans

figure 1: median running times for planning in the port map. with more than three robots the naive algorithm ran out of memory before completing the task  so no result is shown.
than a naive prioritised planner. i intend to investigate this possibility as future work.
모another avenue for improvement would be to examine the symmetries created by the subgraph representation. recent work in symbolic task-planning  porteous  long  & fox  1  has shown that recognising and exploiting symmetries and almost-symmetries in planning problems can eliminate large amounts of search. subgraph configurations provide a natural ground for similar work in our problem domain and we expect similar improvements are possible.
acknowledgements
i wish to thank daniel pagac and the people at patrick for providing me with the map data used in this project.
