 
     two notions of process have been used in programs that reason about change* discrete models  which represent changes as instantaneous  and continuous models  which represent changes as processes that act gradually over time. we describe a technique called aggregation which unifies the two types of models and allows both to be used when performing qualitative simulation. 
     aggregation is a technique for recognizing cycles of processes and generating a continuous process that is equivalent to each cycle. a qualitative simulator may start prediction with a simple discrete model and use aggregation to generate a continuous process model when discrete simulation bogs down in a cycle. aggregation thereby allows a simulator to switch back and forth between different types of models depending on which type is most expedient. 
     to test these ideas  we have written a program  peptide  which performs qualitative simulation in the domain of molecular genetics. the flexibility of peptide's aggregator allows the program to detect cycles within cycles and predict the behavior of complex situations. 
i introduction 
     a number of al programs perform some type of qualitative simulation -- they predict the future behavior of a system in qualitative terms why is this an interesting problem  any program which does planning or problem solving  needs to predict the effects of proposed actions; qualitative simulation provides a useful description since it removes often irrelevant numeric detail. qualitative simulation is also useful when generating explanations  especially when describing the mechanism of a complex device  1 1 1 . finally  qualitative simulation is the only way to predict the behavior of the many systems which are incompletely specified. 
     to simulate a system  a program needs to represent the processes that cause change. two fundamentally different qualitative models of change have been developed: discrete and continuous process models. strips  illustrates a discrete model  in which actions are atomic; each action has add and delete lists 
thin report describes research done at the artificial intclligence laboratory of the 
massachusetts institute of technology support for the laboratory's artificial intelligence: research is provided in part by the advanced research projects agency ct the department of defense under office of naval research contract n1c-1 and the office of naval research under contract number n1-c-1. which define the action's effect on the state by an abrupt change qualitative process theory   on the other hand  employs continuous process models  in which actions take time and gradually change the value of quantities such as the level of fluid in a container. 
     in this paper we discuss the factors that make a domain well suited to using either a discrete or continuous process model  and we present a new technique  aggregation  that can be used to unify the two models of change* the essential motivation behind aggregation is that processes often repeat--consider the cycles of an internal combustion engine when reasoning about repeating cycles of processes  it is frequently useful to eliminate irrelevant detail by considering the whole cycle as a single  more abstract process this is what an aggregator does: it recognizes cycles of discrete and continuous processes  and it generates a continuous process abstraction of the cycle a program called peptide has been written to test this idea in the domain of molecular genetics implemented in zetalisp on a symbolics 1  peptide has run a dozen examples including the one in this paper and several thai are considerably more complex . 
ii representation 
     the operation of any simulator is crucially dependent on the representations used to model quantities of interest and the processes which cause change. we describe our assumptions about these representations below. 
a. quantities 
     the system parameters that the simulator models are called quantities  we distinguish between two types of quantities' linear and nominal. linear quantities have an associated total order while nominal quantities represent categories with no internal structure. for example  the charge of a battery and the strength of the current through a circuit could be modeled with a linear quantity  but the state of a switch in the circuit might be better represented by a nominal quantity with two possible values: open and closed. 
b. processes 
     we assume that time is composed of both instants and intervals. instants a''e infinitesimal  while intervals are extended. between any two non-oveilapping intervals lie one or more instants. 
the distinction between instants and intervals allows us to classify types of change. if a change is best considered as occuring in an instant  we model it with a discrete process. if the change occurs 
   it should be emphasized that we do not attempt to extend either model. considerable work is already being done on that front.  1 1. 1 . 

d. weld 1 
over an interval  we use a continuous process 

     discrete processes are appropriate when modeling changes in nominal quantities  e.g. the flip of a circuit's switch  and abrupt changes in linear quantities  e.g. the change in the current through a circuit following the switch's flip  it is often useful to assume that discrete processes are atomic- they either happen fully or not at all. atomicity is useful when modeling situations where mutually exclusive actions are possible  situation action rules are an efficient means for representing discrete processes. 
     continuous processes  on the other hand  are appropriate when modeling gradual  strictly monotonic changes in linear quantities. it is important to note that continuous processes can't affect nominal quantities because there is no way to monotonically change a quantity with no inherent order. continuous processes are ideal for describing the change that occurs when a battery is connected through a resistor to ground. we define continuous processes by a set of preconditions and a set of influences. the preconditions are predicates on quantities that tell when the process is active  i.e. when the influences are enfoiced. the influences say how various quantities will be modified by the activity of the process. the electric current process would be active whenever the switch was closed and the battery's voltage was greater than zero. the process would have two influences: a decrease in the charge in the battery and an increase in the temperature of the resistor. 
     the power of continuous models comes from a technique called limit analysis . when a simulator performs limit analysis  it takes influences of a continuous process and predicts when these influences will cause the preconditions to be violated or the preconditions of another  inactive process to become satisfied. thus  limit analysis predicts that the electric current process will be active until the battery's voltage drops to zero. 
ill an example of aggregation 
     with two fundamentally different ways of thinking about how a system behaves  an important problem is how to choose which one to use at a given time. since discrete processes are simpler  we make them the default. we only use continuous processes when the simulator needs the power of limit analysis  i.e. when there are repeating cycles. 
     the system starts by simulating the effects of discrete processes until it recognizes a cycle. then the aggregator produces a continuous process with the same preconditions as the cycle's  and with influences equivalent to the net result of a single iteration of the cycle. at this point the continuous simulator can use limit analysis to predict the eventual result without laboriously simulating each iteration of the loop. 
     to make this clear  we present a simple example in the domain of molecular genetics. 
a. example definition 
     consider a container with two individuals  e and dna.*  dna is a long chain  and e has a large cleft  figure 1 . 
     for clarity of presentation  the example is described graphically. the appendix contains the actual peptide description 
we define two discrete processes: 
 bind 
if there is an e whose cleft is empty and there is a dna with nothing bound to its right end  then the e will bind the right end of the dna. 
*snarf 
if there is an e bound to the right end of a dna  then the e will digest the rightmost segment of the dna. the result will have e floating free  and the length of dna one shorter than before. 
b. discrete simulation 
　　　initially the process bind is active  and snarf is not. peptide creates an instance of bind that is associated with e and dna and simulates it. the resulting situation is shown in figure 1. 

figure 1: situation after e binds dna 
　　　then the process snarf is active; an instance is created and simulated. figure 1 shows the result. 
　　　next the process bind is again active  but before the discrete simulator can predict its effects  the aggregator recognizes a cycle. 

	dna 	e 
figure 1: situation after e digests a section 
c. cycle recognition  
　　　the notion of a repeating cycle of processes implies that the process instances in each iteration are  the same  in some sense. for the aggregator to recognize cycles  it must be able to detect when two processes are the same. but sameness is not equivalent to equality  as the example above shows. the two instances of the bind process are not equal since they involve dna chains of differing length  but the processes are clearly the same in an important sense. 
　　　we define two instances of a process to be the same if each of the individuals associated with the two instances are the same. two individuals are the same if all their nominal quantities are equal; their linear quantities can be different. thus the two instances of bind are seen to be the same because the only difference is in the 

1 	d.weld 
length of dma  and length is a linear quantity. ignoring differences in linear quantities makes sense when looking for cycles  because we wish to consider cycles as continuous processes which cause changes in linear quantities but not in nominal quantities. for the domain of molecular genetics  there are two other linear quanties  besides the length of a chain  which are important: the number of identical molecules in a group  and the position of a binder on a chain. 
　　　once two processes instances have been recognized to be the same  peptide searchs through a history record  of the past simulation to determine exactly which processes are in the cycle . in the case of our example  this is quite easy; the cycle is simply  bind snarf . 
d. generation of a continuous process 
　　　a continuous process consists of a set of preconditions and a set of influences. first  the aggregator analyzes one iteration of the cycle to determine the influences. for the simple  bind snarf  cycle  it is easy to determine that there is only one influence: a 
　　　decrease in the length of dna. complex cycles  however  can require more sophisticated analysis  e.g. resolution of contradictory influences  . 
　　　to generate the continuous process' preconditions  the aggregator simply combines from each of the discrete processes in the cycle the preconditions that refer to linear quantities; nominal preconditions cancel out. for our example  this results in only two preconditions: 
* there must be at least one free dna. 
  there must be at least one free e. 
e. continuous simulation 
　　　finally  the continuous simulator can predict the eventual result of the repeating cycle by performing limit analysis. since peptide knows that if the length of a chain is zero the individual doesn't exist  it is easy for the continuous simulator to predict that eventually dna will be gone and only e will remain. at this point the simulator summarizes the net effect of the continuous process and adds it to the history structure with the name cp1. then peptide switches back to discrete mode. since dna is gone  no processes are active; thus simulation is complete. 
f. cycles within cycles 
　　　if we had specified that initially there were many dna individuals in the container  then there would still be dnas present and bind would be active. but before it could be simulated discretely  the aggregator detects that this bind is the same as the first  since the only difference between the initial situation and the current one is a change in the linear quantity  the number of identical dna molecules. a search of the history structure reveils the following cycle:  bind snarf cp1 . the influence of this new cycle is a decrease in the number of dnas. continuous simulation of this cycle again results in the conclusion that eventually all the dnas will be eaten. 
　　　the occurrence of nested cycles in this simple example demonstrates their ubiquity; it is essential that an aggregator be capable of handling them. the key point is that when aggregating  peptide considers each previous continuous processes  i.e. whole cycles of processes  as a single discrete process. without this ability the aggregator could not use the information from previous aggregations when constructing the continuous process for the outside cycle. 
iv limitations and future work 
　　　although aggregation is a powerful technique  it can't detect all cycles  and should be tested on more domains. 
a. failure to recognize all cycles 
　　　as explained above  the aggregator recognizes cycles by ignoriny the value of linear quantities. although this method works in many cases  it fails when new linear quantities are generated dynamically. 
　　　we have not discovered any cases where this happens naturally in the domain of molecular genetics  but we can create artificial pathological situations. this is unsurprising because peptide's representation language is powerful enough to specify an arbitrary type 1  unrestricted  grammar. since this implies that we could use the discrete model to build a turing machine  it becomes quite clear why peptide can't always decide whether simulation should halt. 
b. qualitative simulation of other domains 
　　　for aggregation to be useful as a qualitative simulation technique  two conditions must hold for the domain in question: 
* it must be possible to characterize interesting parts of the domain by continuous processes and linear quantities. 
* some processes must repeat their actions cyclically. these repetitious actions can be either discrete  continuous or both. 
　　　we suspect that aggregation could be useful in many other domains. digital electronics is a natural domain in which aggregation could be applied. there are many devices at different levels of detail whose states are usefully considered as linear quantities: counters  lifo queues  and processor pipelines. furthermore  many processes repeat cyclicly detailed paper simulations suggest that aggregation could be usefully applied to this domain. 
　　　another potentially fruitful domain is that of complex machinery. internal combustion engines have many repetitious processes: the strokes of the pistons  the movements of valves  the rotation of gears and differentials. these cycles affect numerous interesting linear quantities. for example  the friction from each piston's stroke increases the engine temperature  and the spurt of fuel-injected gas lowers the level in the tank and increases it in the combustion chamber. 
　　　we feel that it is very important to test the utility of aggregation for prediction  instruction  and diagnosis in another domain. 
　　　both discrete and continuous process models have their strengths. discrete process models are simple  and can model changes in nominal as well as linear quantities. continuous process models facilitate limit analysis of gradual changes in linear quantities. we described a technique  called aggregation  which 

allows a qualitative simulator to use either model depending on which best fits the situation. 
     the aggregator recognizes cycles of processes by ignoring the values of linear quantities and generates a continuous process abstraction of the cycle by deducing the nut influences of one iteration of the cycle. a test program  peptide  has used aggregation to solve a dozen problems in the domain of molecular genetics. the flexibility of peptide's aggregator allows the program to predict the behavior of complex systems by detecting cycles 
nested within other cycles. 
acknowledgments 
i owe many thanks to my advisor  randy davis; to ken forbus  
dave chapman  and brian williams who contnbuted greatly; to 
bruce donald for insightful comments on a draft  and to the many other people who form the stimulating environment of the mit al lab. 
appendix 
     the actual peptide code for the example  with only formatting changes  is displayed in figure 1. capitalized words are keywords defined by peptide. 
 def-example exonuclease 
	 def-individual dna 	 chain   
 dtf-imdividual exonuclease  binder  cleft    
 def-process bind 
 if  at-end   x right dna  
 bind oxonuclease cleft dna  x    
 def-process snarf 
 if  and  bound  exonuclease clef t dna  x  
 at-end   x right dna   
 react exonuclease cloft dna  x 
	  decr-chain 	r i g h t         
 assert  complementary exonuclease cleft dna  a   
 assert  eq one  number-of dna    
 assert  eq one  number-of exonuclease     
figu re 1: peptide code for the example 
