 
for more than two decades there has been consensus that bidirectional heuristic search is afflicted by the problem of search wavefronts missing each other. however  our results indicate that a different problem appears to be of primary importance. the fronts typically meet rather early even without using wave-shaping techniques. especially when aiming for optimal solutions  however  much effort has to be spent for subsequently improving the solution quality  and finally for proving that there is indeed no better solution possible. therefore  only slightly relaxing the requirements on the solution quality already leads to strong improvements in efficiency. 
   we describe several new e-admissible bidirectional search algorithms which do not use wave-shaping techniques. the most efficient 
of these use a novel termination criterion designed to address the suspected primary problem of bidirectional heuristic search. we prove ¡ê-admissibility and a dominance result based on this termination criterion. in summary  we show that and how bidirectional best-first search can be more efficient than the corresponding unidirectional counterpart without using computationally very demanding waveshaping techniques. h e r m a n n kaindl 
siemens ag osterreich 
geusaugasse 1 
a-1 wien 
austria  europe 

1 	introduction and background 
k1ii and kaindl 
ing  compensates for the error made by the heuristic component using learnt weights  and it is  -admissible without the need for a given upper bound like n. the e-admissible algorithm a*  is designed to allow for incorporating an additional heuristic to estimate the effort for finishing a search  which is used as focal-heuristic. all these algorithms perform unidirectional search  and for they are typically more efficient than a*. 
   bhpa1  1  1  was the first bidirectional algorithm using a heuristic evaluation function for finding optimal solutions. while bs*  improved bhpa technically  its performance was only nearly as good as the unidirectional a*. there was consensus that the main reason for the superiority of unidirectional search is that the bidirectional heuristic search is afflicted by the problem of search wavefronts missing each other  cf. the missile metaphor in  . 
wave-shaping techniques like those used in bhffa 
  bhffa1  and d-node retargeting  showed that bidirectional heuristic search can be rather efficient  especially in terms of the number of expanded nodes. davis  presented a generalized algorithm  containing bhpa and bhffa1  and analyzed it theoretically. however  these algorithms are either excessively computationally demanding  or they have no restriction on the solution quality. 
   considering the missile metaphor of pohl  the use of admissible approaches in bidirectional search should be dangerous without wave-shaping  since the chance of search wavefronts missing each other could be even increased. however  we found that in bidirectional searches the first meeting of the fronts typically occurred early  compared to the effort for finally satisfying the termination condition. 
   fig. 1 illustrates this phenomenon.1 these data are normalized in the sense that every data point represents the ratio of the number of nodes expanded by the corresponding algorithm to that expanded by a*. in the average  the fronts meet rather early even without using wave-shaping techniques  requiring only slightly more than half the effort of complete a* on the 1-puzzle for 
 on the much more difficult 1-puzzle  the fronts meet already when about 1 orders of magnitude fewer nodes are generated than by complete ida*  searches  data for a* are unavailable here . 
   especially when aiming for optimal solutions  however  much effort has to be spent for subsequently improving the solution quality.  in the average  this is achieved with less effort than that of a complete a* search on the 1-puzzle.  finally  for proving that there is indeed no better solution possible  many more nodes have to be expanded. therefore  we were interested in investigating e-admissible bidirectional search and in comparing its efficiency to the corresponding unidirectional case. 
to open  if a new better g-value is found. moreover  we include a check whether open has become empty. since this is like a*   we call this variant hpa*. 
1
¡¡¡¡ the earlier version named vgha in  did not move nodes back from closed to open. hence  it needed a consistent heuristic function for being admissible. 
 one of our new algorithms as intro-
duced below - is identical to bs*. 
1 	constraint satisfaction problems 

1 	improved bidirectional search 
in the following  we describe several  -admissible bidirectional search algorithms which do not use wave-shaping techniques. we relate them to the earlier known algorithms in pointing out the differences. the origin is clearly bhpa  1  1   which can be intuitively viewed to consist of two hpa searches in opposing directions. the termination condition compares the length of the best path found so far to an optimistic estimate computed from the nodes in both search frontiers  see also below . while bhpa only considered meeting points between 
c l o s e d nodes from both sides  kwa  showed that meeting of a newly generated node with any node in the opposing front is sufficient. all the algorithms described below use this improvement. this technical change together with the incorporation of checks for empty o p e n lists results in a version we call bhpa'. 
1 	c o n s t a n t w e i g h t i n g 
there are two ways of achieving an  -admissible variant of bhpa': 

 in fact  pohl  proposed such a change in the evaluation function  when not concerned with finding a shortest path. for this reason  he suggested to simplify the termination condition to just meeting. in contrast  using  1  or equivalently  1  as termination condition is admissible when h is admissible. 

as follows: 
admissibility. 
¡¡another approach is to modify bs*  similarly  in order to utilize its technical improvements. when a node is selected for expansion which is already closed in the opposite search tree  it can just be closed without expansion  nipping . moreover  it is possible in such a situation to remove the descendants of this node in the opposing open set  pruning . likewise  it is possible to remove all those open nodes  in both directions  whose /-values are greater or equal than lmin  trimming . of course  such newly generated nodes are not placed in the open sets at all  screening . the interested reader will find a pseudo-code formulation of these improvements in appendix a. 
   generally  the provision for reopening nodes must be incorporated  since otherwise e-admissibility cannot be guaranteed. in particular  without this provision there could be no guarantee that the shallowest open node n' on an optimal path always satisfies  in addition  we have to assume a consistent h because of the bs* specific actions nipping and pruning.1 
  
is empty or  1 . 
   again  these modifications can be combined  resulting in an improved algorithm we call ibs*. 
1 	derivatives of 
especially  when there is another heuristic function available that estimates the effort for completing a search  it can serve as a focal-heuristic in the unidirectional ae* .1 using  type of search in both directions and the termination condition  1    arises  which is eadmissible. 
   in contrast to the bidirectional algorithms ibhpa € and ibsb* described above   is normally less efficient than the corresponding unidirectional algorithm we found out that its searches are too greedy  leading to comparably bad solutions at the first meeting and consequently to much effort for subsequent satisfaction of the termination condition guaranteeing e-adrnissible solutions. generally  we conjecture that bidirectional searches without wave-shaping tend to meet first with a solution quality which is worse than that achieved by the respective evaluation function in a corresponding unidirectional search. 
1
¡¡¡¡ despite consistency  reopening of nodes is necessary because of the factor in the evaluation function. 
1
¡¡¡¡this variant is only of interest for showing the genesis of the improved algorithm below  since by itself it is very inefficient due to lacking an appropriate termination condition. 
1
¡¡¡¡ pearl and kim propose to use the same heuristic for both purposes if no estimator for the effort of completion is available. we wanted to compare all the algorithms with the same domain-specific knowledge  and consequently used the available admissible heuristic h also as a focal-heuristic. 
figure 1: overview of e-admissible bidirectional search algorithms. 
¡¡therefore  we found an improvement by adding another parameter  uses 1 for creating the f o c a l lists  and ¡ê for termination. much better results were achieved  for instance  with 
¡¡of course  it is also possible to incorporate the approach of into the framework of bs*. bsa* arises from by the following changes: 
  reopening of closed nodes if a new better path to them has been found  
  the termination condition  in step 1 of  1  p. 1   analogously to   see above   
  the selection of a node m for expansion  in step 1 of 
 1  p. 1   as usual for 
¡¡moreover  another parameter can be used  arises from  analogously to this algorithm is already somewhat different from bs*  we present a complete pseudo-code description in appendix a. 1 
¡¡fig. 1 provides an overview of all the presented algorithms and their genesis. 
1 	theoretical results 
due to lack of space we cannot present here all the proofs for the various algorithms introduced above  the interested reader is referred to  . since the proofs for and are the ones most different from simi-
lar proofs for bhpa and bs*  we selected them for presentation below. moreover  we will show an interesting result about dominance between bidirectional algorithms which is due to the improved termination condition  1 . we assume that the branching degrees of all nodes are finite  the arc costs  for some c  and a consistent heuristic estimator is used. d e f i n i t i o n 1 a path p from s to t is optimal  if 

d e f i n i t i o n 1 a search algorithm is said to be admissible  if it terminates with an solution whenever a solution exists  1  . 
d e f i n i t i o n 1 an algorithm a  is said to dominate a1 if every node expanded by a  is also expanded by a1 . 
1
¡¡¡¡ due to the inclusion of reopening of nodes in our algorithms and a technical bug in step 1 of the bs* description in  1  p. 1   we restructured the code. 

lemma 1 // a path exists from s to t   termi-
proof: either the graph is finite and exhausted  or it is infinite and the costs become unbounded  analogous proofs can be found in  1  1  is  1  . d 
theorem 1 if a path exists from s to t  bsa*1 c terminates with a solution whose cost does not exceed the optimal cost by more than a factor admissible. 
	proof: this result follows from the lemmas above. 	
corollary 1 admissible. 
theorem 1 a bidirectional algorithm b  using the termination condition  s  dominates another bidirectional algorithm b1 differing from b  only in using the condition  1  instead. 
proof: since the right side of  s  is always greater than or equal to the right side of  1   algorithm b  cannot terminate 
later than d 
	corollary 1 	dominates 
experimental results 
experiments were conducted to compare the performance of these bidirectional algorithms. the test domains used were sliding-tile puzzles and route planning.1 these puzzles have been often used in the literature for explanations and comparisons of search algorithms in ai. therefore  we also used them in order to make it easier to compare our results with published ones. since finding optimal solutions is np-complete  it is interesting to study finding approximate solutions  and the effects of scaling up. 
¡¡however  while the puzzle is illustrative  it is just a game. in contrast  the route planning domain we selected has more real world flavor  though it is easier to scale up . we used randomly generated route planning problems in a map of the viennese network of public transportation  rather than synthetically generated problems as used in . 
constant weighting 
we were primarily interested in comparing the bidirectional best-first search algorithms with their corresponding unidirectional counterparts. let us first summarize the 1-puzzle results. the case of is identical to a comparison of with and there  the unidirectional hpa* is clearly more efficient. however  already for  the bidirectional search algorithms are in terms of the number of generated nodes more ef-
ficient than the corresponding unidirectional algorithm. the linear-space algorithms wida*  an e-admissible extension of ida*  and rbfs  showed relatively bad performance in terms of generated nodes. however  since node generation and evaluation is very efficient for the puzzle  they are still competitive in terms of running time  due to avoiding the overhead for managing the lists used for implementing classical best-first search. 
¡¡¡¡these domains are not especially selected to fulfill the conditions under which classical best-first search is best. in particular  the puzzles have uniform cost and the usual evaluation functions there do not have many distinct values. 
1 	constraint satisfaction problems 
	1 	1 	1 	1 	1 	
c 
figure 1: comparison on the 1-puzzle  1 instances . 
¡¡an important question is how significant the results are. in addition to comparing the numbers of nodes searched  we look at the empirical data from a different viewpoint. instead of summing up the numbers of generated nodes for each sample  we compare the performance on each instance. we count how often one or the other algorithm  wins  in the sense that it expands fewer nodes than its competitor when solving the same instance. the statistical details of using the sign test can be found in . although it is statistically significant according to this test that for expands more often fewer nodes than on the same instance  the inverse is true for 
¡¡since the sliding-tile puzzle is np-complete  it is interesting to investigate scaling up. in particular  it is interesting to see the effect of relaxing the solution quality . fig. 1 compares 1bhpa¡ê and 
wida* and rbfs on the 1-puzzle  using the sample of 1 instances in  . due to their memory problem  it is infeasible for even to guarantee optimal solutions here. 
   for  can solve all the 1 instances of   but it requires memory for nearly 1 million nodes in the maximum. in contrast   requires only a storage of slightly more than 1k nodes in maximum  and ibs* slightly more than 1k nodes. 
more efficient than the others in terms of nodes generated. interestingly  hpa*  wins  against both and  slightly more often  but the results arenot statistically significant according to the sign test. while the worst case bound would allow solutions with twice the cost of optimal ones  the solutions actually found by these best-first algorithms are in the average just about 1 percent worse. 
for require storage of 
slightly more than 1k nodes in maximum. in contrast  hpa* requires to store nearly 1 million nodes for this task. the advantage of our bidirectional algorithms over hpa* in terms of the total number of nodes searched is highly statistically significant  testing the means   but it is not according to the sign test. from this we can conclude that they are better especially on the difficult problems. generally  the advantage of and is 
even clearer than for 


   although the bs derivatives do not strictly dominate the corresponding derivatives of hp a  especially because of the cardinality criterion for selecting the search direction   they generally  lose  very seldom. therefore  ibs* and bsa* e with 1 = e/1 are candidates for being the best bidirectional heuristic search algorithms. we could not find that one of these is generally better than the other 
   in general  it strongly depends on the properties of the given problem which algorithm is  best . of course  linear-space algorithms must be used when there is insufficient memory available. however  whenever there is  our bidirectional algorithms should be considered. of course  running time is another important issue. again  it strongly depends on the domain  whether the overhead of maintaining the lists deteriorates the performance or not. in particular  it depends on the effort for computing heuristic values. finally  of course  also the efficiency of implementation plays an important role regarding the running time. 
1 	constraint satisfaction problems 
1 	conclusion 
for more than two decades there has been consensus that the main reason for the superiority of unidirectional search is that the bidirectional heuristic search is afflicted by the problem of search wavefronts missing each other. however  our results show that the missile metaphor of 
pohl  is not really applicable. the primary problem appears to be that after the first meeting especially an algorithm aiming for optimal solutions has to spend much effort for subsequently improving the solution quality  and finally for proving that no other open node can give a better solution. therefore  only a slight relaxation of solution quality already leads to strong improvements in efficiency  and in particular to even more than in the unidirectional case. our novel termination criterion contributes strongly to this result because of the importance of this problem. 
¡¡however  a serious limitation of classical best-first search is its memory problem. in contrast  wida* and rbfs have only linear space requirements. rao et al.  compared depth-first with best-first search generally. while the latter has the serious disadvantage of its memory problem  there are conditions  where classical best-first search is still most efficient. in particular  it is useful when both density of solutions and heuristic branching factor are very low  and there is sufficient memory available . moreover  both ida* and rbfs have large search overhead when there are many distinct values  and when the problem graph is not a tree . 
¡¡our bidirectional algorithms are designed to improve the performance under these conditions. while there are some differences  for both domains used for our experiments the main result about these algorithms is the same. we showed that and how bidirectional best-first search can be more efficient than the corresponding unidirectional counterpart without expensive wave-shaping therefore  even for only slightly relaxing the requirements on the solution quality  the best of our algorithms are the most efficient e-admissible algorithms known for those domains where sufficient memory is available. such domains are not the most difficult ones addressable by search techniques like wida* and rbfs. but in those areas dominated by classical best-first search we found even better algorithms  based on a paradigm that was thought for long to be bad. 
¡¡currently  we are investigating a bidirectional combination of best-first search with linear-space search  in order to mitigate the issue of storage requirements. we hope that this will renew the interest in bidirectional search  which has additional potential for efficient implementation on parallel hardware. 
acknowledgements 
the original implementation of our algorithms was based on a program written by max hofferer. a more efficient implementation was done by angelika gangl-ehrenwerth and harald smetana  and the most efficient implementation based on code provided by richard korf is due to ah khorsand. the help of harald smetana and ah khorsand in running the 1puzzle experiments is highly appreciated. the experiments requiring very large memory were run on a machine of the computing center of the technical university of vienna. 

