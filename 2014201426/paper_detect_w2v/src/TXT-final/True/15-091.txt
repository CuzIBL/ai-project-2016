 
　　　this experiment in representing knowledge has the goal of studying what kind of help existing knowledge representation tools might provide  for the process of designing switching systems. we offer some tentative positive as well as negative conclusions. the experiment is principally successful in that it has allowed us to point out some important representation problems  particularly in the checking and maintenance of consistency  and the expression of several points of view of a model. 
i - introduction 
　　　we have been addressing the task of representing and modeling the knowledge contained in a part of the general specifications of the french switching systems. these specifications  called  nef  for :  functioning and 
exploitation norms   give many sorts of informations  from the general missions of the system to the environment constraints and some basic know-how  all expressed informally in natural language. 
　　　the goal of this endeavor is to study the possibilities of bringing some help in the design process  especially for switching system software  mainly by providing some knowledge representation tools  suitable for all the stages of the design  and that fit a general method. 
ii - the experiment 
a. abstract model of the specifications 
　　　representing the specifications as an  abstract model  is the first stage in the design process  so  we have first implemented a knowledge model related to a part of our specifications  the management procedure of the switching system  summarized by the following figure : 
　　　so  the representation problems to cope with at this level are : 
how to represent the objects   
how to model their dynamic behavior and the manmachine commands   
how to express the constraints on the model and the rules to check and enforce consistency   
how to represent and deal with the multiple points of view of objects   
b. representation tool for the experiment; aimds 
	aimd1  artificial 	intelligence 	meta 	description 
system  	is 	a 	knowledge 	representation 	system 
 n.s. sridharan   1     that provides powerful representation schemes for our experiment : it allows generic objects and actions  instantiation of facts in a multicontexts base  simulation of state changes with backtracking facilities  ability to describe definitional knowledge by means of meta-relations and to define consistency conditions used by the system to deduce facts and to check and/or restore the consistency of a model. 
c. building the model 
　　　we want to use only declarative descriptions so that we can translate easily and explicitly the non-procedural specifications  and obtain an extensible model easy to reason with. nethertheless  this model must be executable so that we can demonstrate its validity by simulating its behavior and show that it tallies with the specified one. 
　　it has been very easy to describe the objects of the model. for example  here is a part of the definition of the single-line object : 

1 	j.-f. cloarec and j.-f. cudelou 
　　　it has been easy also to describe the commands and the associated actions. for instance  the action to create a new single-line user is defined as follows : 
 tdn :    action-abocr a  
  nd = fn  designation  
  ne = fn  equipment  
  nc = fn  counter  default  lambda  v  
 find  a counter  free yes       
  ty= l  types ...   
with  for transition rules : 
 rulesfor 'opportunity  
  action-abocr a  nc= c   nd= d   ne= e   
 counter c  free yes   
 designation d  free yes   
 equipment e  free yes     
 rulesfor 'pgoal  
  action-abocr a  nc= c   nd= d   ne= e   ty= t ...  
 single-line nil nc= c  ne= e  nd= d  ty= t ...   
 rulesfor 'outcomes  
  action-abocr a  nc= c   nd= d   ne= e  
 counter c  taken yes   
 designation d  taken yes   
 equipment e  taken yes     
　　　the opportunities are the preconditions to be checked before performing an action  the goals are the primary effects of the action  and the outcomes are the additional effects. taken and free have been declared complement relations in the model. 
　　　these specifications permit aimds to simulate state changes. 
d. the control structure 
　　　the control structure of the program is very simple  we just translate a given command into an aimds description and instantiate it as an action. this produce  via pgoal and outcomes  the instantiation of the corresponding objects. if there is a failure in one of the action rules or in a consistency checking  an explicative message is issued and a backtrack performed. 
e. the main representation difficulties 
　　　it has been far more difficult to solve the following problems : 
　1. how to deal with both consistency checking and consistency maintenance   that is  what actions are permissible to restore consistency   
　　　we need both to express automatic enforcement of consistency  for example : 
　　　 a  ty = kla ==  not-ty = cad. that is to say that if a user had first a dial  and later is given a keyboard phone ty = kla  his type dial ty = cad must be changed to not-ty = cad to restore consistency. and strict consistency checking like : 
　　　 b  ty = mod and ty = cad ==  consistency failure. a user with a dial phone cannot have the modification privilege ty = mod. 
- first difficulty : a consistency condition  cc of aimds  used to maintain consistency has also failure effects. 
for example  the condition  a  is expressed by the cc : 
 cc1    single-line x  not-ty =  types cad  if  x ty = kla   
　　　the value of the relation not-ty= is -checked by the value of the logical expression  and conversely  a change of the value of this expression yields to the according change of the relation. so  the assertion 
 line-1  ty= kla   	with the previous value 
 line-1  ty= cad   leads to the correct result  line-1  ty= kla   not-ty= cad  . but we need the symmetrical behavior expressed by the cc : 
 cc1    single-line x  not-ty=  types kla  if  x ty- cad   
　　　with these two ccs  the very same assertion will produce a failure because ty = kla is forbidden by  cc1 . so we can't express so easily the desired consistency maintenance. 
　　　the solution has been to express the consistency maintenance between an object and the action that modifies or creates this object. in fact  to avoid the repetition of the ccs for each action  we regroup their common attributes to be maintained in a single generic object  called m-attribute. the ccs become like : 
  single-line x  not-ty =  types cad  
if  x  single-line-objectof-m-attribute m-attribute-ty = -types  kla  1 
so  the consistency of the object is maintained by using the new asserted attribute values in the action  without any undesirable effect. 
- second difficulty : how to perform consistency maintenance first and then consistency checking   
　　　when we have both consistency checking cases like  b   and consistency maintenance like  a   we need to execute the checking after the maintenance. so  if the previous value is ty = cad  when asserting ty = mod + kla we expect that first ty = kla will enforce not-ty = cad  so that ty = mod will be accepted. 
　　　the solution has been to define a second generic object  called c-attribute  with the relations to be checked. the right order is assumed in instantiating mattribute before c-attribute. 
so  the final meta-model is : 
	 1  	 1  
	command 	  	action   	object 
	i 	1  	 1  	  
	 1  	i- to-maintain-j  1  
 i  = sequence order 	1 	 to-check 
1. how to give the model some knowledge about its own generic structure   
　　　to reason on the structure  we need  at least  to know what kind of action is associated with a given command and which object is concerned. 

but most of the representation languages  and this includes aimds  give us only facilities to reason upon facts and instantiated objects. 
　　　our solution has been to describe the structural relations in each command with default values  for example in abocr : 
  action fn  template  default action-abocr   
  object fn  template  default single-line   
　　　so  it is easy to find the action and the object template-names related to a command. this is a specialized solution to this specific version of the problem. but the general problem of knowing  reasoning on  and modifying the generic structure of knowledge still remains. 
1. how to represent distinct points of view of the model   
　　　the specifications address several functional aspects of systems  such as services to users  bill and management ; and the design process involves new aspects as electronics and layout. it is easy to represent these points of view in using several perspectives  krl c 1   frl   or super-concepts  klone   1     ako of 
aimds . but  in fact  these representations would mix all the different aspects in the instantiated objects  via the inheritance mechanism. what we need  is to split the model in multiple views  to be able to reason sometimes in a subdomain  sometimes in another  without hampering ourselves with irrelevant aspects. 
　　　our solution has been to define new meta-relations  one called semantic to jump from the objective view of constructed objects to a given subjective semantic  inverse semantic-of  ; and one called aspect to jump from one point of view to another. 
　　　but we have still to study the properties of these relations and what could be the problems of consistency between all these different views. 
iii continuation of the experiment 
　　　the continuation will have to cope with the problem of scaling-up and with new representation problems linked to the design process. 
a. scaling up ; 
　　　the present experiment included the generic definition of 1 commands  1 actions and 1 objects  and in a typical simulation about 1 objects might be instantiated and 1 actions result from commands. 
　　　although the full specification of the nef commands would require 1 times more commands  it is our judgment  since we have experimented a representative sample  that scaling up will not reveal any new conceptual problem. 
b. design process and knowledge representation ; 
　　　the design process will have to manipulate both the top-down and bottom-up approaches. this involves : developing design alternatives  since there are always several choices to be had  from different functional organizations  to the use of different technologies. the context mechanism as in pie   1     conniver  1  or aimds could be a solution. this needs the definition of a distance measure between structural objects to find whether a 
	j.-f. cloarec and j.-f. cudelou 	1 
solution could fit and with what conditions and constraint propagations. 
　　　we plan to tackle these problems in using our model to study the design of the corresponding software of the system management center. 
vi conclusions 
　　　this experiment allowed us to show some non-trivial problems in knowledge representation and to clarify what a good knowledge representation system could do for us. 
we will emphasize upon : 
- the need to deal with several points of view with the aim of reasoning and building objects in one or in others  and to bring back partial subjective solutions to be merged in an objective design. 
- the greater importance for us to manipulate structural knowledge than facts. but these latter are nevertheless used to simulate dynamic behavior in validation phases. - the tremendous importance of the consistency problem  where we need to deal both with checking and maintenance aspects  on generic knowledge as on facts. 
　　　but none of the existing knowledge representation systems seems to give solution to all these problems. particularly  the multi-points of view approach is confused with the multiple inheritance mechanism ; and even in aimds  there is no clear separation between checking and maintenance of consistency. futhermore  these representation tools are mainly applicable to the instantiated knowledge and are never concerned with the consistency of definitional  structural knowledge. 
　　　nevertheless  the approach of aimds that allows objects and actions  multi-contexts and states  definitional knowledge by means of meta-relations  seems particularly powerful for its uniformity of representation and its possibilities in dynamic behavior representations. 
acknowledgments 
　　　we thank rutgers university and especially n.s. sridharan  without whom this experiment would not have been possible. 
