 
based on the research done in the last decade  attempts have been made to propose description logics as unifying formalisms for the various class-based representation languages used in different areas. these attempts have made apparent that sound  complete  and decidable description logics still suffer from several limitations  regarding modeling classes of aggregate objects  expressing general inclusion axioms  and the ability of navigating links between classes. in this paper we make description logics accomplish the necessary leap in order to become suitable for the new challenging applications they are faced with. in particular  we propose a powerful description logic overcoming the above limitations and we show that its reasoning tasks are decidable in worst case exponential time. 
1 	introduction 
description logics are ai formalisms that allow one to represent domain knowledge by focusing on classes of ob-
jects  brachman  1  and their relationships  woods  1   and by offering specialized inferences on the class structure. 
　the research developed in the last decade offers a quite complete picture of several issues related to the expressive power of the logics and the computational complexity of the reasoning tasks  see  woods and schmolze  1  . based on the outcome of this research  attempts have been made to propose description logics as unifying formalisms for the various class-based representation languages used in different areas  such as semantic networks  feature logics  conceptual and object-oriented database models  type systems  and other formalisms used in software engineering  bergamaschi and sartori  1; piza et a/.  1; borgida  1; calvanese et a/.  1; schreiber et ai  1 . however  these attempts have made apparent that description logics that are equipped with sound  complete  and terminating reasoning procedures still suffer from several limitations that are not acceptable when representing complex domains in the different fields mentioned above. here is a list of the most important limitations. 
  the domain of interpretation is flat  in the sense that the logics consider the world as constituted by elementary objects  grouped in concepts  and binary relations between them. one consequence of this property is that n-ary relations are not supported  an exception is the logic proposed in  schmolze  1   for which no complete decision procedure was proposed . in fact  n-ary relations have been shown to be important in several contexts  see  catarci and lenzerini  1    especially in databases and in natural language. for example  exam is correctly modeled as a ternary relation over student  professor and course. note that supporting n-ary relations means that the logic offers suitable mechanisms for their definition and their characterization. for example  one has to ensure that no pair of instances of exam exist connecting the same triple of objects; also  one may want to assert that students linked to graduate courses by the relation exam are graduate students. these kinds of properties cannot be represented by simply modeling the n-ary relation in terms of n binary relations. 
  usually  general inclusion axioms are not supported. although inclusion axioms are essential when we want to assert properties of classes and relations  as required in complex domains  most of the research on description logics either deals with class descriptions only  or impose severe restrictions  such as acyclicity  on axioms. exceptions are  for example   nebel  1; baader  1; schild  1; de giacomo and lenzerini  1; buchheit et ai  1 . an important outcome of this research is that reasoning with axioms is computationally hard  even for the simplest description logics  weaker than tct  woods and schmolze  1  . all these works  however  limit their attention to axioms on concepts  and do not consider the problem of expressing inclusion axioms on relations. 
  relationships between classes are generally described by means of poor representation mechanisms. indeed  when trying to use description logics for capturing representation formalisms used in different fields  one realizes that three features are essential: the ability of navigating relationships  say of a semantic network or of an 
entity-relationship schema  in both directions. the ability of stating cardinality constraints of general forms on relationships. the possibility of conceiving a relationship like a set  thus applying set theoretic operators on 
	de giacomo and lenzerini 	1 

them  including the notorious role value map  woods and schmolze  1  . 
　the aim of the present work is to devise a description logic  called cats  that finally addresses the above issues. the basic ingredients of cats are classes and links. differently from traditional description logics  classes are abstractions not only for a set of individu-
als  corresponding to the usual notion of concept  called simple class here   but also for sets that have aggregates as instances  called aggregate classes . there are two types of aggregates: property aggregates and instance aggregates. a property aggregate is an abstraction for an object that is considered as an aggregation of other objects  one for each attribute belonging to a specified set  smith and smith  1 . a typical example of such an aggregate is a date  which is seen as an aggregation of three objects  one for the attribute day  one for the attribute month  and one for the attribute year. another example of property aggregate is an exam  which again is seen as an aggregation of three objects  one professor  one student and one course . this makes it clear that nary relations can be modeled as classes whose instances are aggregates. an instance aggregate is an abstraction of a group of other objects belonging to a certain class  brodie and ridjanovic  1 . a typical example of such an aggregate is a team  which can be seen as a group of players. like any other description logics  cats allows one to form complex classes by applying suitable constructors to both simple and aggregate classes. notably  cats includes a form of role value map  and the most general form of number restrictions  called qualified . 
   links are abstractions for atomic  basic  and complex relationships between classes. an atomic link  denoted simply by a name  and also called attribute  is the most elementary mean for establishing a relationship between classes. a basic link is formed by applying certain constructors  like inverse  union  intersection and difference  to atomic links  and a complex link is formed by applying more complex constructors  like chaining  transitive 
closure  and identity  to basic links. 
   a knowledge base in cats is simply a set of inclusion axioms. we point out that cats allows inclusion assertions to be stated on classes of all kinds  simple  aggregate  and complex   and on basic links  with no limitation  for example on cycles . a particular care is put in devising cats so that its reasoning tasks remain decidable and even with the same computational complexity as the simplest description logics where inclusion axioms are allowed. indeed  we describe a technique for computing logical implication in cats  and show that this problem is both exptime-hard  and decidable with exponential time in the worst case. 
　the paper is organized as follows. section 1 briefly recalls the description logics cxt  de giacomo and lenzerini  1   which is the basis of the present work. section 1 presents our logic cats  which adds to cxt suitable constructors for representing aggregations  complex links  and qualified number restrictions. in section 1  we show examples of knowledge bases built using cats  and compare the expressive power of the logic with other similar formalisms for knowledge representation. sec-
1 	knowledge representation 
tion 1 illustrates the salient features of the technique we use for computing logical implication in cats  and discusses the computational complexity of this problem. finally  conclusions are drawn in section 1. 
1 	preliminaries 
traditionally  description logics allow one to represent a domain of interest in terms of concepts and roles. concepts model classes of individuals  while roles model binary relations between classes. starting with atomic concepts and atomic roles  which are concepts and roles described simply by a name  complex concepts and roles can be build by means of suitable constructors. 
　in the following  we focus on the description logic cxt studied in  de giacomo and lenzerini  1   whose language has the following syntax: 

where a denotes an atomic concept  c  possibly with subscript  a generic concept  p an atomic role  r  possibly with subscript  a generic role. 
　in description logics  an interpretation x = consists of a nonempty domain of interpretation and an interpretation function -i satisfying the following conditions  # {} denotes the cardinality of a set  and a = p p-y. 

note that cxt has a very expressive language  comprising all usual concept constructs  and a rich set of role constructs  namely: union of roles r1 r1  chaining of roles r1 o r1  reflexive-transitive closure of roles r*  inverse roles r-  and the identity role id c  projected on c. moreover cxt supports the simplest form of cardinality constraints  namely functional restrictions of the form    1p   interpreted as the set of individuals for which the role p is functional. notably  functional restrictions can be applied to both atomic roles and inverse of atomic roles. in fact  in cxt there is a perfect symmetry between roles and inverse roles  that will be the basis for the extensions of the logic discussed in this paper. 
	let c be any description logic. 	an 	is a 
finite set of axioms of the form c  c1  called inclusion assertions  where c  and ci are c concepts. an interpretation x satisfies an inclusion assertion c  ci 
1
　　tbox is the term traditionally used for naming the set of axioms constituting the intensional level  schema level  of a knowledge base. 

　 actually  in description logics having a language rich enough  logical implication can in turn be  polynomially  reduced to satisfiability of a single concept. this is basically due to the ability of expressing reflexive-transitive closure of 
roles  together with the  connected model property   i.e. if 
                                                                                                   1 a tbox has a model  it has a model which is connected  see this notation makes it clear that a tuple is indeed a  schild  1; de giacomo and lenzerini  1  . function assigning one element of o1 to some of the elements 
1
 we assume that integers are coded in unary. 
	de giacomo and lenzerini 	1 


1 	knowledge representation 

family can indeed be considered as a relation with four arguments. the x constructor is used to define keys for  n-ary  relations: for example  the fact that every instance of family is an instance of x family  lather  mother  date  implies that the three attributes form a key for the class. on the other hand  stillfamily  representing families whose father and mother are still married  has a more specialized key  constituted by the attributes lather and mother. observe that several keys can be defined for a class  see city . 
  qualified number restrictions and role value maps on basic links can be used without any limitation. i n d e e d   l a t h e r u mother u children  is a role value map on basic links. 
  complex links can be used for modeling interest-ing relationships. for example  the relationship haslather between a person and her/his father is captured in k by children  o lather  similarly for hasmother . also  ancestor is captured by  haslather u hasmother  o  haslather u hasmother *  see the definition of veryphd . 
as an example of inference that can be draw from /c  observe that: 
objects data models are expressed in cats by imposing suitable limitations on tuples and sets. 
　as a final observation  we would like to note that cats can also be used for expressing knowledge bases that go beyond classes and links. in  de giacomo and lenzerini  1   we show that a weak version of cats can be used as a sort of monotonic propositional situation calculus extended with complex and concurrent actions. roughly speaking  states are modeled by elementary objects  and atomic actions are modeled by atomic links. a propositional fluent then simply becomes a class  whose instances are those states where the fluent is true   and preconditions  postconditions  effects of actions  as well as frame axioms are expressed by inclusion assertions. finally  basic links  complex links  and qualified number restrictions are used to model complex properties of actions  including concurrency. for example  a1 n a1 denotes the concurrent execution of the actions a1 and a1   while an inclusion assertion of the form 
 where 	are all 
the atomic actions  can be used to impose that the past is backward linear -i.e.  that every state as at most one predecessor. 
1 
	de giacomo and lenzerini 	1 




1 	conclusions 
it is our opinion that the work described in this paper makes description logics accomplish the necessary leap in order to be well equipped for the new challenging applications they are faced with. our first investigations show that cats can indeed capture and extend most classbased representation formalisms used in different areas as ai  databases  software engineering  etc.. one main issue still remains to be addressed  namely  the possibility of adding to cats suitable constructs for expressing finiteness of nested aggregates  and  correspondingly  suitable techniques for reasoning in finite models  in the style of  calvanese et al.  1  . this will be the subject of further research. 
