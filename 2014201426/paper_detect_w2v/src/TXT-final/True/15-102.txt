 
　　this paper describes lp*  a program that learns new techniques f o r solving equations by examining worked examples. unlike most of the work in t h i s f i e l d   e.g.  neves  1   where the equations used have been very simple  lp uses complex equations  see below. lp can learn from one example  using concepts from the planning f i e l d . 
　　in 	order 	to 	be able 	to 	successfully use a new technique  	lp 	learns 	many 	d i f f e r e n t 	types 	of i n f o r m a t i o n . 	to 	learn 	new 	r e w r i t e 	r u l e s   	lp compares 	consecutive 	l i n e s 	in 	the worked 	example  

f i n d i n g differences between them. it also learns the s t r a t e g i c purpose of the steps  by considering the worked example as a type of plan f o r solving the equation. lp e x t r a c t s the necessary i n f o r m a t i o n   and b u i l d s a plan which is stored f o r f u t u r e use. lp executes the plan in a f l e x i b l e 
way to solve new equations. 
i . i n t r o d u c t i o n 
　　this paper describes lp  a program which learns new techniques for solving symbolic equations by examining worked examples. these techniques can then be tested on some new problems. lp can l e a r n from one t r i a l by using concepts from planning. 
　the equations used by lp are symbolic  transcendental  n o n - d i f f e r e n t i a l equations  e . g . 

lp 	is 	b u i l t 	around 	the 	equation 	solving 	program 
press  	 bundy 	and 	welham  	1  	s t e r l i n g 	et a l   
1 . 
worked examples 
　　a t y p i c a l instance of the type of worked example used by lp is shown below. 

i i . methods aid operators 
   the basic operators of lp are called methods. each method has an associated set of rewrite rules  and some control information which indicates when the method should be applied. 
   equations are solved by applying methods  which in turn may apply rewrite rules. an example of a method is collection  which applies to equations containing more than one occurrence of the unknown. collection reduces the number of occurrences of the unknown. collection is used in the example above to obtain line   i i i   from line   i i     using the collection rewrite rule 

   the control information includes preconditions  facts which must be true before the method can be applied and postconditions  which must be true after the application of the method. the postconditions are used both to ensure that the method has achieved the desired effects  and to allow planning. 
   many learning programs work in domains where the basic operators are similar to those of strips. the operators of strips   fikes et a l   1   have preconditions  an add l i s t which contains the facts that the operator makes true  and the delete l i s t which contains the facts that are no longer true after the application of the operator. if the preconditions are satisfied the operator can be applied. 

1 b. silver 
　　in contrast  lp methods do not have this desirable property. in general  a method is not certain to succeed  even if the preconditions are applicable. this is because the preconditions are too general  but we can not give stronger preconditions that do not involve actually applying the method to test if it is applicable! it seems that this might be a problem in many domains. 
　　similarly  the effects of a method are hard to classify. the postconditions are used specify what should be true after a method has been applied in the desired way  but there is no guarantee that the method w i l l produce these effects. 
	iii. 	what lp weeds to learn 
　　in order to learn a  new technique   lp may need to learn at several levels. at the lowest level  it may need to learn new algebraic identities. these w i l l be used as rewrite rules. we are not particularly concerned with this low level task. at the next level up  lp needs to learn new operators  i.e. methods. this w i l l involve learning the control information for the method  and associating with it some rewrite rules. these rewrite rules may be new or old rules. the control information does not depend on 
which equation is being used. 
　　however  lp needs also to learn the metacontrol information  which controls the order in which methods are used. this information is recorded in a plan  called a schema. this records how the equation is solved  and can be used to solve new equations. the plans may be equation dependent. for example  the plan may record that the solution involved applying method m followed by method n. in the general case however  even if method m can be applied  it may not be the case 
that method n w i l l then be applicable. 
iv. leashing from examples 
step justification 
　　the f i r s t task for lp is to discover how each line in the worked example is transformed into the next  we call this step justification. to do this  it examines consecutive pairs of lines  trying to find the method that transforms each line to the next. 
　　suppose that lp is working on the step from a line p to the next l i n e   called q. lp f i r s t tries to see if an existing method can account for the step. to do this  lp computes the characteristic tuple  henceforth ct  for each of the lines p and q. the ct is a tuple of meta-level characteristics of the equation  consisting of facts such as the number of occurrences of the unknown  the type of function symbols occurring in the equations  e.g. trigonometric  whether the equation is a single equation or a disjunction etc. for example  the 
ct of 
sin x  - 1.sin 1.x  + sin 1.x  - 1 
is 
 occ multiple 1    t r i g   eq  functor  +   1     
meaning that there are multiple occurrences of the unknown  1 in a l l . the expression is trigonometric  it is an equation  rather than a disjunction   and the dominating functor on the lhs is     of arity 1. 
　　lp then looks for a method that can transform the ct of p into the ct of q.* use of the ct to constrain search is an example of the technique of meta-level inference which is used extensively in the press and lp projects. 
　　if lp finds a method  it attempts to use it to transform p into q  a method may not apply even if i t s ct and other control information indicate that it is suitable . if the method is successful  lp records that the step from p to q was performed by that method  and proceeds to the step from q to the next line. otherwise  it tries to find another possible method. if no more possible methods can be found  lp conjectures a rewrite rule that would explain the step. 
　　the rewrite rule is obtained by removing common terms from p and q and equating the remaining terms. for example  consider the lines   i   and   i i   in the above example. both lines contain the additive term -1.sin 1.x  and the right hand side of both is 1. deleting these and equating the remainder produces the conjecture sin x  + sin 1.x  = 1.sin 1.x .cos 1-x . 
　　if the conjecture is correct the user is asked to provide the general rule. in this case  the user gives lp the rule 
sin a  + sin b  -  
	1.sin  a + b /1 .cos  a - b /1 . 	 iv  
　　lp avoids generalizing at this level by asking the user for the general rule. given that lp is learning from one t r i a l   there seems to be no easy way for the program to correctly generalize rules of this sophistication. unlike neves   neves  1   it is no longer sufficient just to replace numbers with variables. 
creating new methods 
　　once every step has been processed  lp examines i t s analysis to see if any new methods need to be created. new methods are created to explain the application of new rules. suppose a new rule has been applied at line i  to produce the next line j. lp f i r s t finds the preconditions p of the 
　 this information is part of the control information of the methods. 
method m applied at line j to give line k. it then finds which of these preconditions are satisfied at line i  call this set s. the remaining preconditions are not satisfied at line i  but satisfied at j  call this set u. if u is nonempty  lp assumes that the purpose of applying the rule is to satisfy u so that m can be applied. the set u is called the major effectb of the rule. 
　　the above analysis is performed for each application of a new rule in the worked example. if no suitable method exists  see below  lp creates a new one. this method applies the rule and then method m. the preconditions of the method are s  plus any preconditions of the rule. the postconditions of the method are those of m. 
　　in other cases  lp w i l l find that it already has a method with the preconditions s  and the postconditions of method m. in this case  lp adds the rule to the set of rules that can be used by that method. in this way  methods gradually build up larger sets of associated rewrite rules. 
　　if lp finds that a l l the preconditions of m were satisfied  i.e. u is empty  it looks for another explanation. one possibility is that the rule is used to manipulate the equation so that m can be applied  although no new preconditions are satisfied. this kind of behaviour occurs because the methods are not strips type operators. 
　　the schema is now created. this is a l i s t consisting of a l l the methods used in the worked example. each step is tagged with the conditions that it is used to satisfy  i.e. the major effects  plus any conditions that must also be maintained. 
v. solving new equations 
　　schema are used to solve new equations. when lp is given an equation it f i r s t tries to find a schema that seems to be relevant. a schema is relevant if the equation that produced it has the same ct as the current equation. if one is found  lp tries to apply the steps listed in the schema. suppose that the current line in the schema suggests the application of method m. lp uses the following procedure: 
1. try to apply method m. if this succeeds  continue with the next step in the schema. 
1. otherwise  try to find another method that has the same major effects as m  and apply i t . if this succeeds  continue with the next line in the schema. 
1. if the two steps above both f a i l   try to find a method that does not undo already satisfied conditions  and apply i t . if this succeeds  go to 1. 
1. if none of the above steps have succeeded  and if m has no major effects  omit the step 
b. silver 1 
entirely  	and 	proceed with the next schema step. 
if none of these attempts are successful  lp tries to solve the equation without the schema  in a similar way to press. 
　　the schema acts as a simple plan that can be executed in a flexible way. 
v i . results and conclusions 
　　lp has learned several new techniques from worked examples. one result is that lp has been able to solve d i f f i c u l t equations after examining much easier examples. for instance  after lp has been given worked examples for the equations such 
as 
cos 1.x  + cos 1.x  = 1 	 v  
i t 	i s able 	t o 	solve 
s i n   1 . x   + s i n   1 . x   + sin 1 x  = 1. 	  v i   
the worked example f o r equation  v  contains 1 l i n e s . the s o l u t i o n f o r equation   v i   contains 1 major steps  and includes a v a r i a n t of equation  v  as a subproblem. 
　　the techniques used by lp seem to be a p p l i c a b l e to many domains. for example  symbolic i n t e g r a t i o n is performed by transforming i n t e g r a l s using a sequence of o p e r a t o r s   and t h i s process seems s i m i l a r to that of equation s o l v i n g . it seems t h a t lp could learn i n t e g r a t i o n techniques from worked examples  using our planning s t y l e approach. 
　　using concepts from p l a n n i n g   the technique of l e a r n i n g from examples seems to work w e l l in the algebra domain  even when the equations are much harder than those considered by e a r l i e r workers. 
