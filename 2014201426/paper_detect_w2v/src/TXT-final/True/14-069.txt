 user-oriented evaluable predicates. 
a portable version of prolog  an a r t i f i c i a l 
1. powerful new b u i l t - i n features such as 
i n t e l l i g e n c e language  is presented. a complete coroutines  i n f i n i t e - t r e e s processing    error system has been implemented on a micro-computer recovering and user controlled execution thanks using a floppy-disk v i r t u a l memory. the general 
                                                                       to the concept of  block . methodology of the implementation is discussed in 
terms of an abstract machine  micromegas  support i n g a language  candide  in which the prolog sys-	1. i n t e r a c t i v i t y by including clause editing tem is w r i t t e n . 	c a p a b i l i t i e s . 
	i l l 	realization 
	i 	introduction 
we exhibit a complete  self-contained system 
prolog has been developed in our research 
                                                                       which includes : laboratory in 1 by a. colmerauer and p. roussel 
  1 . 1   1     mainly for natural 	language processing 
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　1. a high level programming language  systems. since then  	it has been applied to v a r i -
                                                                       candide  designed to provide the software tools ous a . i . f i e l d s . several prolog i n t e r p r e t e r s have needed to w r i t e the i n t e r p r e t e r . been w r i t t e n   and even a compiler by d. warren for a dec 1 computer. practice and theory of 
1. a candide compiler which emits code for 
prolog have been also studied and extensively desan abstract machine  micromegas. featuring the cribed  see   1   1   1   1     . amazingly  	the influence hardware viewpoint of the system. of prolog has been u n t i l now r e s t r i c t e d to europe  where the language has been largely d i s t r i b u t e d 
                                                                               1. a micromegas emulator which interprets and used. however  some recent papers in the l i t the micromegas code at run-time. this is the only terature show a growing i n t e r e s t from the u.s. part which depends on the host machine on which community   1   1   . the prolog system is implemented. 
	ii 	motivations 
　　　　1. the prolog i n t e r p r e t e r i t s e l f   which is the heart of the system  and consists of 1 pages 
during the past years  prolog users clamored 
                                                                       of candide code. for more f a c i l i t i e s to write very large programs. 
for these reasons  we decided to s t a r t a new ge-
	a complete  	f u l l y documented version of t h i s 
neral version required to be usable on large comsystem is operational on apple i i . the implemen-
puters as well as on micro-computers. our f i r s t t a t i o n on a solar 1  french minicomputert r y in that d i r e c t i o n was the design of a prolog equivalent to pdp 1  is on progress and w i l l system on an { xorciser m1 micro-computer. this 
                                                                       be done by september 1. work is reported in  1  and gave encouraging r e s u l t s   specially in the use of floppy disks for 
                                                                               the abstract machine micromegas is embedded v i r t u a l memory management. 
into the operating system of the host computer  leaving free access to the b u i l t - i n resources 
the prolog system reported here is intended 
	 e.g. 	in the apple ii implementation  the u.c.s.d. 
to be the   u l t i m a t e   one in the sense that it is 
pascal system procedures and functions can be 
specially designed to f u l l f i l the requirements of 	: reached from the micromega1 l e v e l   . 
1. easy 	t r a n s p o r t a b i l i t y . 
　　　　the abstract machine uses c e l l s and words : a c e l l is the smallest part of memory addressable 
1. running large applications thanks to a both by the host computer and by the micromegas 
large memory space dynamically organized as a tree machine. a word is a sequence of contiguous c e l l s 
structured hierarchy of sub-worlds to achieve s o f t containing a large address : in the apple ii im-
ware protection and management of memory space. plementation  we have 1-bit c o l l s and 1-bit words. 
1 1 

thin provides an addressing space of 1 megabytes  simulated hy a v i r t u a l memory management system implemented hy software on a floppy disk. the micromegas machine has also 1 general purpose registers and a user memory which contain   the pro gram and a local variable stack. 
　　　　the micromegas i n s t r u c t i o n s perform arithmet i c   transfers  comparisons. the operands are c e l l s or words from the v i r t u a l memory  the registers and the stack. other i n s t r u c t i o n s perform condit i o n a l   unconditional or computed g a t e ' s   procedure invocation and r e t u r n   external procedure a c t i v a t i o n   and so on. 
iv prolog on apple ii 
this implementation needs : 
1. an apple ii with 1 k bytes of memory. 
1. two 1 k bytes floppy disks. 
1. the language card. 
the micromegas emulator is embedded into the 
apple pascal system and consists in 1 pages of pascal code   i n i t i a l i s a t i o n   i/o  and v i r t u a l memory management  plus 1b pages of 1 assembler code  performing the 1 instructions of the micromegas machine . the micromegas code for the prolog i n t e r p r e t e r needs 1 k bytes. the v i r t u a l memory system in implemented on the two floppies and the main memory paging area occupies 1-byte pages. such a configuration allows up to 1-pages prolog programs. 
v conclusion 
　　　　the performance of a micro-computer implementation is slow compared with a large computer one. nevertheless  the system remains usable thanks 
to the large v i r t u a l memory. a micro-computer im-
plementation can be used hy a. i. students  eleven by researchers for testing and debugging programs  thus performing  at home  on a personnal computer the more tedious and time consuming part of programming work. naturally  the d e f i n i t i v e application w i l l be run on a bigger computer. 
　　　　is it r e a l l y the ultimate prolog   certainly yes for us ! 
　　　　in f a c t   we have d e l i b e r a t e l y spent three years to design the system and build the adequate tools to perform our research. this goal is now achieved and we have d e f i n i t e l y moved back to the prolog users family. 
acknowledge ments 
　　　　this work has been sponsored by the centre national do la recherche scientifique  iquipo do recherche associated 1  . 
