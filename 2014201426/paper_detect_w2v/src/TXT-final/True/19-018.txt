 
　x-aid is an intelligent shell to design and operate user interfaces. its surface offers an integrated and extendable structure of icons  windows  menus  natural text  universal operations  and special service functions. x-aid consists of a set of specialized knowledge interpreters  implemented as asynchronous processes exchanging messages. 
　x-aid operates based on declarative knowledge. it embodies common sense about  working with a computer  in general  expert knowledge about the supported applications behind it  and collected knowledge about each of its users. knowledge is described using the representation language hal. hal enables comfortable declaration of object schemes with multiple inheritances and extensive default-handling. all hal object schemes may contain specialized rulcsets related to human-computer communication topics  eg. syntax  semantics  display . 
　the system is prepared to work in a  learning by being used -mode where it memorizes protocols about all occuring actions  including undo/redo operations. later on it analyses those protocols extracting new object schemes  fluctuation of defaults  new semantics rules  and frequent plans-of-action which the specific user mainly followed. this learned knowledge is applied vice versa to aid this user eg. by preparing for him situation-dependent menus and object instances down the mainstream of his work or explaining to him his dialog state and how he got there. 
l introduction 
　human-computer interfaces are commonly considered to play a very important role in future computer systems. many statements concerning this are made. we at gmd felt already 1 that besides the classical field of natural language processing al can contribute much to the development of smarter human-computer interfaces. so with the beginning of 1 the research group man-machine communication at the gmd institute for applied information technology started developing a system called aid . the following primary system characteristics then had been defined: 
vlmah/q-hindltn 
* aid is a computer interface which is special to each user but similar for any application. 
* aid is a knowledge-based system which learns  by being used  and is able to act on its own initiative. 
* aid is an application independent assistant for users of any stage of computer literacy. 
　the resulting system  now x-aid  has been implemented on symbolics 1xx machines using commonlisp and flavors for the functional kernel. all the knowledge bases and other parts of the x-aid system are declared using the knowledge representation language hal. x-aid provides users with a rich set of facilities including rapid prototyping with hal  structure-oriented editing of object instances  different undo/redo strategies  following predefined plans-of-action  holopttrasted displays  active help  and different types of learning. 
1. x-aidsyiiem overview 
　the main functional x-aid components are a collection of asynchronous knowledge interpreters fspecialiati  and some additional programs  sfiyjfifil . the main declarative x-aid components are the sliik and dynamic knowledge b cj described in the language hal. 
　the specialists are providing the knowledge-based support of a user's dialog with his collection of interactively manipulateable object instances in the dynamic knowledge bases. we call the set of all user-accessible operations of the specialists the univefttli  or unlver-i opgratinml of x-aid. specialists in the x-aid repertoire  generally applicable across a wide range of x-aid applications  are handlers for: 
* dialog with the user  
* input/output according different media  
* memory of object schemes and instances  
* displaying independent of the medium  
* navigating within the logical structure of object instances  
* constructing operations inside object instances  
* semantical evaluations across larger parts of the knowledge bases  * active helping. 
audlq-1/q-handttri 


h#tn  koltoriran  and thomas 	′1 

　fig. 1 shows the modular design of the x-aid system with the dialog handler at the center serving a monitor role in initiating and coordinating communication among the other specialists. not shown in this diagram are the collection of rule interpretation strategies accessible to the dialog handler and to each of th* specialists in the system  together with the 
knowledge bases over the user and dialog history  each of which are  potentially  consulted at every interaction cycle with the user in order to interpret his command with respect to the current state and the diverse knowledge embedded in the computing environment. 
it has been an important milestone in the x-aid development when in 
1 we finished the implementation of the first versions of constructor  navigator  and displayer. these three specialists are forming an universal syntax-directed editor for instances of any possible hal object scheme  for more about specialists see  . 
1. the knowledge representation language hal 
　the knowledge bases of x-aid consist of objects declared by using the knowledge representation language hal  1j and are organized in three dimensions: 
* first they are divided into static knowledge bases  containing object schemes and dynamic knowledge bases  containing object instances  
* second they are modularized thematically according to a semantical classification of the objects  
* third they are grained by means of the object formalism itself  because in hal all represented knowledge for any object strictly is contained 
inside this object. 
　fig. 1 shows an example of a hal object scheme   town   and the resulting default display of a 'town  instance. 
 object-scheme town :public 
 documentation  purpose  ijcai town example    
  .inheritance x-aid-basic-object  
 rattributes 
 postal-code :display  :instance-of primitive-string  
: undefined  
 town-name :display  :instance-of identifier  
undefined  
 country :display  :p1nter-to country  undefined   icon .hidden  :instance-of icon  
  picture-file  aid-host: aid; graphics; icons; town.pic   
 width 1   height 1     
osyntax 
  postal-code  	-   :or european-postal-code us-zip-code     european-postal-code -    :and {country-code - } 
copt 1 digit     
	  country-code  	-   :or  i   gb   f   d    
  us-zip-code  -    :and us-country-code  :opt1 digit       us-country-code  -   :or  ny   ca   ma   tx   pa   md     
	  digit  	-   :or  1   1   1   1   1   1   1   1   1   1     
 rsemantics 
  :and  :is country-name  italy    
-   :and   -town-name  milano     - postal-code  1    
  :and  :is town-name  los angeles    
-   :and   -postal-code  1     - country usa   
  :and  :is postal-code  d-1    
-   :and  otown-name  karlsruhe     - country w-germany    
oheuristics  
 tdisplay  
end town  	
figure 1: a hal object scheme and instance 
1 	architectures and languages 
　hal is easily extendable with new features  i.e. the current slots are not fixed ultimately. for example a new slot :aliases may be useful in realizing a multi-language user interface  in which for each english object-name and attribute-name there is specified a 
japanese/german/arabic etc. alias. 
within x-aid a very wide range of knowledge is represented in hal: 
* common sense about the business world  office environment and human communication  e.g. object schemes  organization    document    
* knowledge of prototype applications concerning spreadsheets  calcaid   electronic mail  mailaid   papers  authoraid  etc.  
* system internals  e.g. knowledge necessary for communicating with and supporting the user dialog-management. user-profile  plan-of-action ... . 
　it is a long-term goal of the x-aid-project to describe as much of the shell itself in terms of hal object schemes and instances. this facilitates a 
　portation of x-aid to target computers  since only the procedural kernel of the system  written in the  development host language  commonlisp  needs to be transformed into other programming languages   target host languages  . 
　currently we are developing a declarative description of hal in hal  that yields a syntax directed editor for hal schemes  when finished. an interesting consequence of  hal-in-hal  is the fact  that this consequently removes the difference between schemes and instances  at least in theory   because all hal schemes become instances of the root scheme  hal-in-hal . with  hal-in-hal  we create a remarkable object scheme which is recursive in the sense that it is an instance of itself. 
　a main feature of hal is the modularization of the rules first by inserting them into the object schemes and second by dividing them into different classes. a common property of all strategies and of all hal rule interpreters is the independence from rule-ordering. therefore it is not possible to hide an algorithm in a rule sequence. 
　the :syntax rules take the form of productions of a context-free grammar with an attribute name as the start symbol. they restrict the feasible values of the attribute in question to the formal language specified by the relevant rules. when the user inserts or alters a value for this attribute  the typed input is parsed character-wise by an interactive parser-generator associated with the :syntax slot of the hal scheme. 
　the semantics rules permit the examination and comparison of attribute values on the left-hand side and the setting of them  perhaps with access to some other attribute values  on the right-hand side. there arc different strategies available for interpreting semantics rules: do all  do one  while all  while one as in loops . the programming of side-effects in the rule's action part is enabled through hostlanguage calls  e.g.   :lisp  arbitrary commonlisp expression   . 
　the ;heurlgtics rules are used for controlling the dynamic behaviour of instances. with heuristics rules the functioning of the universals can be adjusted to a particular task. while the x-aid universals are the default meiliojis of the object-based language hal  the :heuristics rules offer a controllable opportunity to include application-dependent special methods to the x-aid knowledge bases. 
　the :display rules fit for organizing the graphical and textual layout of the instances the user works with. this will be expanded systematically by acoustical and linguistical display rules. it is not necessary to specify some display rules - without them the displayer specialist produces a 
　default layout that is sufficient in most cases. 
　all four rule sets are included in the inheritance mechanism  i.e. in hal not only the attributes are inherited but also the rule sets  according to their classification. so the :syntax rule sets in an inheritance line are joined separately to a new more specific :syntax rule set  the :semantics rule sets are joined separately  and so forth. the important advantage of this thematic rule modularization is a very significant gain in effiency  since only the rules relevant to the current thematic context have to be interpreted when performing a x-aid universal operation on a hal instance. therefore the rule interpretation remains efficient  even if the total number of rules in the knowledge bases becomes very large  i.e. millions . 

1. adaplivcness 
　man-machine surfaces built with x-aid may be viewed as intelligent personal assjstents which should know many facts and rules about their users to be able to help them appropriately. you may consider x-aid plus its knowledge bases about an user x to be an expert system for the needs and tastes of user x. wherefrom should the knowledge come  there is no human expert to be asked about user x and x neither knows what he really wants nor ever has spare time to think about this topic. the only feasible way was to make x-aid learn itself what it needs to know  starting from a default user profile. this user profile might be a description  made by knowledge engineers  of any existing unintelligent well-known interface  
e.g. the apple macintosh's. x-aid then first of all simply emulates such an interface. 
　now the user may change things using the prototyping features and x-aid will remember those changes. but besides this trivial  rote learning  the interface operates in a mode we named  learning by being used . anything happening at the computer surface is protocol led scmamically using the plan-of-action scheme. this is very different to keystroke-level protocols which only contain purely syntactical information. the protocols are a primary source for the learning mechanisms of x-aid. evaluation by graph pattern matching and statistics is performed during longer periods of user inactivity. based on the hal knowledge representation language and the plan-of-action scheme the following will be learned 1 : 
* new or variatcd hal object schemes  
* new or revised attribute defaults  
* semantics rule hypotheses  * abstracted plans-of action. 
1. learning oj .object schemes 
　with the surface of x-aid based on the language hal it is possible to enable users to create object instances within the given limits of those object schemes already contained in the knowledge bases. if we now add the description of a totally universal object scheme  fig. 1   users as well as the x-aid system itself may create any possible hal instance avoiding to declare some specific object scheme. virtually the memory now contains instances of arbitrary kind without a joint scheme. those orphaned instances can be handled by x-aid like any others. 
　at any time the orphaned instances can be sampled from the memory and compared by pattern matching techniques. if it appears that some instances are structurally equivalent  this equivalence class can be described in a new machine-generated hal scheme. the universal-scheme instances of that cluster are then to be transformed to instances of that newly learned and maximal specific hal object scheme. 
 object-scheme universal-scheme :public 
 :inheritancex-aid-basie-objcct  
 : attributes 
 inheritance .display  :set-of universal-scheme  .undefined  
 attributes :d1splay  :set-of universal-altributc undefined  
 syntax .display  :set-of universal-rule  undefined   semantics .display  :set-of universal-rule  undefined   heuristics :d1splay  :set-of universal-rule  undefined  
	 display 	:d1splay  :set-of universal-rule  	undefined   
end universal-scheme  
 object-scheme universal-attribute internal 
 :inheritancex-aid-basic-object  
 :attributks 
	 name .display identifier 	undefined  
	 type 	:display  possible-values 
uisplay :read :h1dden  uisplay  
	 scheme :display universal-scheme 	.undefined  
	 default uisplay universal-scheme 	uefault   
end universal-attribute  
 object-scheme universal-rule :internal 
 inheritance x-aid-basic-object  
  .attributes 	 name 	:d1splay identifier undefined  
 left-side   
etc. 
end universal-rule  
figure 1: hal-declarcd inventory to handle  orphaned instances  
1. learning of semantics rules 
　semantics rules typically define consistency between attribute values of an object instance. those values may be parts  i.e. simple or complex instances inside  or pointers to other independent instances with non-hidden attributes. all these accessible pathnames may be used in the condition predicate of a semantics rule. if an inconsistency occurs  x-aid knows three types of handling this. 
　one is the  lazy mode   where x-aid just waits until its user finishes an expected series of value changing actions. the second mode is to automatically recover consistency by executing the rule's action part. this is the  expert mode   useful for diagnosis and simulation subtasks. 
　the third and most interesting type of inconsistency handling is using the whole rule as an explanation source in the  helper mode . x-aid then asks its user if he wants to correct some of his last inconsistency-causing value changes  or if he insists in his changes. if the user declares in such a situation the new object instance state to be consistent  x-aid has to modify or delete its now  user inconsistent  semantics rule. 
　this prerequisite behaviour enables a learning mode where x-aid hypothesizes semantics rules about specific object schemes. it only requires a statistical significant number of instances. then cluster analysis and classifier dimensioning methods from the pattern recognition field  1j are easily applicable because the therefore often questionable necessary set of  simple constituents  here always is algebraically at hand: it is the focusscd object scheme's complete has-a relation. 
　if a semantics rule  hypothesized statistically  stays  user consistent  for a while  i.e. it is used succssfully several times in  helper mode   then it may be used by x-aid in  expert mode   too. 
1. conclusion 
　based on the operational level of x-aid in its current state  research and development now will concern mainly these goals: 
* including acoustical and speech media in the user's communication surface  
* installing a language switch feature  where a user may switch 
x-aid's language  fonts  and cultural habits just  pushing a button   
* integrating the now separate types of learning and some more types to a synergic adaptive system. 
　we like to thank all other colleagues and students of the aid team for their contributons to the project  in particular elke finkc  uwe horn  and jucrgen krcuziger. 
