 
identifying and breaking the symmetries of cnf formulae has been shown to lead to significant reductions in search times. in this paper we describe a more systematic and efficient construction of symmetry-breaking predicates  sbps . in particular  we use the cycle structure of symmetry generators  which typically involve very few variables  to drastically reduce the size of sbps. furthermore  our new sbp construction grows linearly with the number of relevant variables as opposed to the previous quadratic constructions. our empirical data suggest that these improvements reduce search run times by one to two orders of magnitude on a wide variety of benchmarks with symmetries. 
1 	introduction 
modern boolean satisfiability  sat  solvers  based on backtrack search  are now capable of attacking instances with thousands of variables and millions of clauses  velev and bryant  1  and are being routinely deployed in a wide range of industrial applications  biere et al.  1    nam et al  1    stephan et a/.  1 . their success can be credited to a combinational of recent algorithmic advances and carefully-tuned implementations  silva and sakallah  1    moskewicz et al.   1    goldberg and novikov  1 . still  there are problem instances that remain beyond the reach of most sat solvers. 
   one aspect of intractability is the presence of symmetry in the conjunctive normal form  cnf  of a sat instance. intuitively  a symmetry of a discrete object is a transformation  e.g.  a permutation  of its components that leaves the object intact. the symmetries of a cnf formula are permutations of its literals  variables and their negations  that result in a re-ordering of its clauses  and the literals within clauses  without changing the formula itself. such symmetries induce an equivalence relation on the set of variable assignments such that two assignments are equivalent if and only if the formula assumes the same truth value  either 1 or 1  at each of these assignments. a search algorithm that is oblivious to the existence of these symmetries may end up  wastefully exploring a set of equivalent unsatisfying assignments before moving on to a more promising region of the search space. 
constraints 
on the other hand  knowledge of the symmetries can be used to significantly prune the search space. symmetries are studied in abstract algebra in terms of groups. we assume the reader to be familiar with the basics of group theory; in particular  we assume familiarity with permutation groups and their representation in terms of irredundant sets of generators. a good reference on the subject is  fraleigh  1 . 
   the rest of the paper is organized in five sections. section 1 provides a brief review of permutations and permutation groups. section 1 describes pervious work on symmetry breaking for sat our main contribution on efficient constructions of symmetry-breaking predicates is detailed in section 1. these constructions are evaluated empirically in section 1  and we end with conclusions in section 1. 
1 	notation and preliminaries 

   permutations will be expressed either in tabular form or in cyclic notation. for example  
1 
		 1  
denotes a permutation that maps  etc. the same permutation can be expressed as a set of disjoint cycles such as 
		 1  
here a cycle  a   b   . . .   z  is a shortcut for  a maps to b  b maps to c  . .. and z maps to a.  the length of a cycle is equal to the number of literals in it; we will refer to a cycle whose length is k as a k-cycle. we define the support of a permutation   supp   to be the set of indices appearing in its cyclic representation  i.e.  
		 1  
the number of cycles in a permutation д░ will be denoted by cycles дл . we also define phase-shift 1r  to be the index of 
the smallest variable  according to the assumed total ordering  that is mapped to its complement by tt : 
	phasc-shift  дл  = min {i e in xдл - x' } 	 1  
we should note that a phase-shift permutation must have one or more phase-shift cycles  i.e.  length-1 cycles that have the form . finally  we define ends as follows: 
ends / is largest index of a variable in a  1  non-phase-shift cycle of 
   a permutation group g is a group whose elements are permutations of some finite set and whose binary operation is function composition  also referred to as permutation multiplication. the order of a group is the number of its elements. a subgroup h of a group g  denoted h   g is a subset of g that is closed under the group's binary operation. 
the cyclic subgroup of denoted b  is the subgroup consisting of and its integer powers: 
 1  
and 	is said to generate 	. a set of permutations 
         ...   generates g if the subgroup resulting from taking all possible products of the integer powers of these permutations is equal to g. the permutations  are called generators of g. a set of generators is irredundant if it is not possible to express any of its permutations as a product of powers of its other permutations. a set of irredundant generators serves as an implicit representation of the group it generates and  in general  guarantees exponential compression in the size of the representation. note that a set of irredundant generators is not a group since it is not closed under multiplication and taking inverse. in the sequel  a set of permutations g that is not necessarily closed will be indicated by placing a  hat  on the variable denoting the set  i.e.  g. additionally  and with a slight abuse of notation  we will indicate that g is the group generated by g by writing 
1 	previous work 
the basic framework for utilizing the symmetries in a cnf instance to prune the search space explored by a sat solver was laid out in  crawford et al.  1 . this framework was extended later  in  aloul et a/.  1   to account for phaseshift symmetries  take advantage of the cycle structure of permutations  and consider only generators of the group of symmetries. in outline  the procedure consists of the following steps: 
1. convert a cnf formula  to a colored graph whose symmetries are isomorphic to the symmetries of the formula. 
1. find the symmetries of the graph in terms of a set of irre-dundant generators  using a suitable graph automorphism program  mckay  1    spitznagel  
1 . 
1. map the graph symmetries back to symmetries of the formula. 
1. construct an appropriate symmetry-breaking predicate  sbp  p and conjoint it to the formula. 
1. solve  using a suitable sat solver  moskewicz et a/.  1 . 
   our concern in this paper is step 1. noting that the group of symmetries induces an equivalence relation on the set of assignments in the n-dimensional boolean space  the basic idea is to construct a  filter  that picks out a single representative from each equivalence class. in particular  choosing the lexicographically smallest representative-according to the assumed total ordering on the variables-leads to the following lex-leader sbp  crawford et al.  1 : 
 1  
 1  
 1  
where the index set / in  1  and  1  is equal to ln. in these equations  the lex-leader sbp is expressed as a conjunction of permutation predicates  pps  each of which is a conjunction of bit predicates  bps 1. introducing n auxiliary  equality  variables ei =  xt = xдл  makes it possible to express the ith bp as an  i + l -literal cnf clause. this leads to a cnf representation of the pp in  1  that has n clauses with a total literal count of 1  n1 + 1n . additionally  each of the introduced equality constraints yields 1-literal clauses bringing the total cnf size of  1  to: 
clauses pp 1r   = 1n 
 1  
literals pp 1r   = 1 n1 + 1n  
   in its present form  the lex-leader sbp in  1 -  1  can lead to an exponentially large cnf formula because the order of the symmetry group can be exponential in the number of variables. thus  its value in pruning the search space is negated by the need of the sat solver to process a much larger cnf formula. to remedy this problem  crawford et al.  1  suggested the construction of a symmetry tree to eliminate some redundant permutations. however  in the worst case the number of symmetries in the tree remains exponential. empirical evidence in  aloul et al.  1  
1  note that x   y in the bit predicate means  x implies y . 
constraints 

 c  bit predicates according to  1 . bps enclosed in boxes with square corners arc tautologous because дл maps the corresponding bits to themselves. bps enclosed in boxes with rounded corners are tautologous because they correspond to cycle  ends.  the bps for bits 1 to 1 are tautologous because n maps bit 1 to its complement. 
showed that full symmetry breaking  i.e.  insuring that the sbp selects only the lex-leader from each equivalence class  is not necessary to obtain significant pruning of the search space. an sbp that breaks some  but not necessarily all  the symmetries of the formula can  in fact  provide a much better space/time trade-off during the search. this is accomplished by replacing the group of symmetries in  1  by a suitable  and much smaller  set of permutations 
 1  
in particular   aloul et ai  1  advocated the use of the set of generators g returned by the graph automorphism program in step 1. 
1 	efficient formulation of permutation predicate 
even when only a small number of permutations is used in constructing an sbp as in  1   the corresponding cnf formula may still be too large because each pp requires a cnf formula whose size is quadratic in the number of variables n. in this section we introduce two refinements that lead to much smaller pps. the first refinement utilizes the cycle structure of a permutation to eliminate redundant bit predicates and can be viewed as replacing n in  1  by a much smaller number m and represents a more comprehensive and systematic treatment of cycles than that in  aloul et al  1 . the second refinement takes advantage of the recursive bit-by-bit structure in  1  to yield a cnf formula whose size is linear  rather than quadratic  in m. figure 1 provides an example illustrating these refinements. 
elimination of redundant bps. careful analysis of  1  reveals three cases in which a bp is tautologous  and hence redundant. the first corresponds to bits that are mapped to themselves by the permutation  i.e.  xд░ - xi. this makes the consequent of the implication in  1   and hence the whole bit predicate  unconditionally true. removal of such bps is easily accomplished by setting the index set / in  1  and  1  to supp 1r  rather than in . for sparse permutations  i.e.  permutations for which |supp 1r |    n  this change alone can account for most of the reduction in the cnf size of the pp. 
   the second case corresponds to the bp of the last bit in each cycle of д░.  last  here refers to the assumed total ordering on the variables. assume a cycle involving the variables {xjij ђ ./} for some index set j and let i = max  j . then 
		 1  
causing the corresponding bit predicate bp дл  i  to be tautologous. elimination of these bps is accomplished by restricting the index set / in  1  and  1  further to just supp 1r    ends 1r  and corresponds to a reduction in the 
number of bps from n to m = |supp 1r | - cycles 1r . 
   the third and last case corresponds to the bps of those bits that occur after the first  phase-shifted variable.  let i 

be the index of the first variable for which xi = xi'. thus  
constraints 	1 
	 and all  have the 1 	experimental 	evaluation 

making them unconditionally true. 
   taken together  the redundant bps corresponding to these three cases can be easily eliminated by setting the index set in  1  and  1  to: 

in the sequel we will refer to the bits in the above index set as  irredundant bits.  note that the presence of a phaseshifted variable early in the total order can lead to a drastic reduction in the number of irredundant bits. for example  if дл=  x1    x1 ... then pp 1r  is simply  x1   regardless of 
how many other variables are moved by дл . 
linear construction of pps through chaining. the pp in 
 1  and  1  has a recursive structure that can be utilized to produce a cnf formula whose size is linear  rather than quadratic  in the cardinality of the index set /. specifically  we introduce the  ordering  predicates /i-=  xi   xдл  and gi  =  xi   xi  and  after algebraic manipulation  write the following equivalent expressions for the permutation predicate: 
		 1  
where g1 = 1   k = next 1   /  and k = succ k   i  . noting that  except for the index set used  the parenthesized expression on the second line of the above equation is identical to the expression on the first line  we introduce a sequence of chaining predicates {pi i ђ /} defined according to: 
		 1  
where k= {i} u succ i  /  = {k e k   i}. the recursive structure of  1   now  makes it possible to express each chaining predicate in terms of the one that follows it 

and yields the following alternative representation of the permutation predicate: 

which can be simplified further by replacing the equalities by one-way implications leading  finally  to: 

the cnf representation of each conjunct in  1  is obtained by substituting the definitions of the / and g variables and using the distributive law. thus  using this construction the permutation predicate requires | additional variables  the chaining predicates  and consists of     -literal and 1|/| 1literal clauses for a total of 1|/| literals. 
we conducted a number of experiments to evaluate the effectiveness of the symmetry breaking constructions described above in reducing search times. we ran the experiments on representative cnf instances from the following seven benchmark families: 
1. hole-n: unsatisfiable pigeon-hole instances  dimacs  
1. urq: unsatisfiable randomized instances based on expander graphs  urquhart  1  
1. groute: difficult satisfiable instances that model global wire routing in integrated circuits  aloul et al  1  
1. fpgaroute and chnlroute: large satisfiable and unsat-isfiable  instances that model the routing of wires in the channels of field-programmable integrated circuits  nam et al  1  
1. xor: various exclusive-or chains  sat 1  
1. 1pipe: difficult unsatisfiable instances that model the functional correctness requirements of modern out-oforder microprocessor cpus  velev and bryant  1  
each of the benchmarks was converted to a colored graph as described in  aloul et al  1  and processed by the graph automorphism program nauty  version 1   mckay  1  using the gap package  version 1  release 1   spitznagel  1 . the symmetries returned by nauty were then mapped back to symmetries of the benchmark and appropriate sbps constructed and added. the mchaff sat solver  moskcwiez et al  1  was then run on the original and sbp-augmented versions of each benchmark. all experiments were run on a linux workstation with a 1ghz amd athlon processor and 1gb of ram. a time-out limit of 1 seconds was set for all runs  and run time results represent averages over 1 to 1 independent runs. 
   table 1 lists  for each benchmark family  the number of instances tested  col. 1   their total cnf sizes  cols. 1 and 1   the order of their symmetry groups  col. 1   the total number of generators returned by nauty  col. 1   and the number of those that include phase shifts  col. 1 . columns 1 and 1 list the cardinality of the generators' support and the degree of sparsity present in these generators. the remaining columns in the table list the cnf sizes of three sbp constructions based on generators: 
  the quadratic construction  using extra equality variables  based on all bits; this represents the previous state-of-theart 
  the quadratic construction based only on irredundant bits 
  the linear construction  using extra chanining variables  based only on irredundant bits 
several observations can be made about the data in 
table 1. the number of symmetries in these benchmarks is large  but all symmetries  including phase shifts in benchmark families urq  xor and 1pipe  can be represented by fairly small sets of generators. the generators returned by nauty appear very sparse on average  i.e.  a typical generator affects only a small number of variables.1 this explains the reduction  by 1 orders-of-magnitude  in the size of symmetry-breaking predicates in column 1  our first construction  versus column 1   crawford et al  1  . both the number of variables and the number of literals are reduced. while our construction in column 1 only slightly extends the qua-
constraints 

dratic-size construction in  aloul et al.  1   our more advanced linear-size construction  column 1  offers an additional reduction by up to an order of magnitude. note  however  that the number of variables is unchanged-the extra variables added by the two constructions have different function  but can be mapped to each other one-to-one. 
   table 1 empirically compares the effectiveness of the symmetry-breaking predicates described in table 1. first  in 
1  while our experiments clearly confirm that such generators exist  finding them is a function of the graph automorphism program. since we used nauty as a black box  we do not have a clear explanation of what causes nauty to find such sparse generators  whether even sparser generators can be found and whether nauty will in some cases return less sparse generators. 
most cases it takes much less time to find symmetries of a cnf instance than to solve it. the 1pipe instances are an exception  but we believe that further advances in symmetryfinding can rectify this exception. second  the all-bits quadratic construction due to  crawford et al  1  is dramatically slower than our variants based on the cycle structure. our linear-sized construction provides a further speed-up. 
exceptions are the hole-n benchmarks  where the difference between our two constructions is small  and the 1pipe benchmarks where the quadratic-sized sbps led to shorter run times despite being almost thirteen times larger. further investigation showed that this was a side-effect of mchaff's vsids decision heuristic which tended to choose the auxiliary variables first because they occur in many more clauses than the original instance variables. using berkmin  gold-

constraints 	1 


table 1: mchaff search run times of  randomized  hole-n instances augmented with linear sbps based on different sets of permutations. tot denotes the total number of permutations used in constructing each sbp. 

berg and novikov  1  or grasp  silva and sakallah  1  in the same experiment yielded opposite results as expected. 
   table 1 offers additional data to evaluate symmetrybreaking by generators  which may not be complete. we added symmetry-breaking predicates built for pairwise products of generators  but the overall runtimes increased. while additional sbps may break more symmetries  their overhead does not justify their use. 
   table 1 describes experiments with generators that have long cycles in which we evaluated extensions to symmetrybreaking by generators. namely  we tried adding powers of all generators and  alternatively  adding pairwise products of generators. neither extension proved useful  which supports our main symmetry-breaking approach. 
1 	conclusions 
the main contribution of our work is a better construction of symmetry-breaking predicates for boolean satisfiability. we empirically demonstrate improvements both in the size of predicates and the run time of sat solvers after these predicates are added to the original cnf instances. we also show that  1  symmetry-breaking by generators is difficult to improve upon  and that  1  the efficiency of symmetrybreaking does not improve when larger cycles are found in generators. 
   our work articulates that better symmetry finding algorithms would be useful  especially if tailored to cnf formulas and  perhaps  the kinds of symmetry groups commonly found in structured cnf instances. 
acknowledgments 
this work was funded by the darpa/marco gigascale 
silicon research center and by an agere systems/src research fellowship. 