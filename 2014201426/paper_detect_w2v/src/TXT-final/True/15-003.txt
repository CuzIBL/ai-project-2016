: symbolic execution can help clarify the behavior implied by a program specification without implementing that specification  and can thereby assist the difficult process of developing a correct specification. however  symbolic execution of specifications poses problems that do not arise in symbolic execution of ordinary programming languages. we describe a symbolic evaluator  named koko 1   for the gist specification language  and show how it copes with such high-level constructs as nondeterminism  constraints  and reference by description 
1. introduction 
　current research at isi approaches software development in two steps. first a user translates his informal requirements into a formal specification. the specification language. gist  balzer 1 . is significantly more powerful and expressive than a programming language  allowing the user to concentrate on specifying what is required rather than how it is to be accomplished. the second step is the implementation of the specification with the help of a transformation system. a sound transformation system guarantees a correct implementation of the specification to support this specification-based paradigm we are developing tools to help a user create a specification  to explain its behavior to the user  and to allow a user to guide the implementation process at an appropriate level  london & feather 1   fickas 1 . two tools especially relevant to this work are the gist to english paraphraser  swartout 1  and the trace explainer  swartout 1 . 
　an important part of developing a specification is validation  i.e.. trying to be sure that what is specified is what is really desired. specifications  like programs  may contain widely separated parts that interact in non-obvious ways. finding such interactions is the job of symbolic execution. symbolic execution derives information about the specified behaviors and tries to integrate it into a coherent description. this can help the user find errors in the specification by revealing unexpected consequences or increase his confidence by deducing consequences he desires. 
1. overview of gist - the problem 
　gist was designed to allow people to specify behaviors in a natural way. it models the state of the world as a relational database consisting of a set of objects and relations among them. 
this research is supported by the air force systems command  rome air 
development center under contract no f1 b1 k 1. and by the defense 
advanced research projects agency under contract no mda1 c 1 views and conclusions contained in this report are the authors and should not be interpreted as representing the official opinion or policy of radc  darpa. the 
u.s. government  or any person or agency connected with them 
1 
koko was the lord high executioner in gilbert and sullivan's mikado  sullivan 
1  he never actually executed anyone  but he did manage to describe in detail what would have happened if he had. the world may change by the addition or deletion of relations among objects  the creation of new objects  or the destruction of existing objects  which implies the deletion of any relationships in which they participate . a specification defines a set of allowable behaviors  i.e.  sequences of world states. gist allows reference to objects by description  e.g.  a box that contains a big red ball  where contains  big  and red are relations. 
　gist is inherently nondeterministic. the descriptive reference above can refer to any box containing a big red ball.  nondeterministic control constructs are also supported.  however  the set of allowable behaviors may be pruned by constraints. any behavior which violates a constraint is excluded from the set of permissible behaviors. for example  a constraint that every yellow box be empty after a big red ball is put into a box restricts which box the ball can be put into. constraints may be regarded as providing arbitrary look-ahead  in that all nondeterministic choices are constrained to the subset which do not eventually force the violation of a constraint. 
　in addition  gist provides control constructs such as conditional statements  procedure calls  demons  parallelism and others that are less common. 
　it should be clear at this point that symbolic execution as the term applies to implementation languages  clarke 1  is out of the question. massive  even unbounded  nondeterminism makes the enumeration of execution paths infeasible. reference by description poses severe problems of aliasing. the way the world changes is more complex than the familiar semantics of assignment statements  and constraints seem to have no analog at all. 
1. example of symbolic execution 
following is a very small specification  translated from gist into 
english by the gist paraphraser  swartout 1 .  this has been edited because the original translation raises issues that we don't want to address here . 
　there are sexes and persons. male and female are the only sexes. each person has one gender which is a sex. each person may have a spouse which is a person. 
　to marry a person p1 to a person p1  the following happen atomically  simultaneously . 
1. the person p1 becomes the spouse of the person p1. 1. the person p1 becomes the spouse of the person p1. 
　it is always   squired that for all persons y and x  if the spouse of x is y then the spouse of y must be x. 
　it is always prohibited that there exists a person where the person's gender is the gender of the person's spouse. 
　the results of symbolically executing the action  marry  are paraphrased below by hand.  the trace explainer is currently being extended to explain such results in english.  
　since spouses cannot have the same gender and every person has a gender  no person can ever be his own spouse. 
1 d. cohen 
　suppose two persons  p1 and p1  get married. afterwards  p1 is the spouse of p1 and p1 is the spouse of p1. since spouses of the same gender are prohibited  p1 must not have the same gender as p1. also  p1 is distinct from p1. before the marriage p1 must have no spouse other than p1 and p1 must have no spouse other than p1 
　this example confirms some of our expectations  e.g.  that a person cannot marry himself. on the other hand  one might have expected that the two people originally have no spouses  koko shows that this is not necessarily the case. since gist allows the insertion of relations that already hold  there is nothing in the specification to prevent the marriage of people who are already married -＊ provided that they are already married to each other! if this is not what the specifer intended  then symbolic execution has revealed a bug in the specification. 
1. overview of the solution 
　our approach to symbolic execution regards a specification as a large set of domain axioms  expressed in a first order temporal logic with typed variables. the axioms define the set of acceptable behaviors  i.e.. the specified behaviors correspond to the models of the set of axioms. symbolic execution is a process of forward inference  computing consequences of these axioms notice that a specification need not determine the truth or falsehood of every relation  i.e.  a relation may be true in some behaviors and false in others. 
this approach factors symbolic execution into two processes. 
first  each statement in the specification is translated into axioms about successive world states. second  these axioms are used to derive certain interesting consequences  e.g.. hidden interactions among different parts of the specification. the success of this approach depends in large part upon the ability of the forward inference engine to find interesting consequences and avoid uninteresting ones however  the control of forward inference is outside the scope of this paper. the rest of the paper describes how various gist constructs are treated as axioms. we start with primitive constructs and then show how compound constructs are handled in terms of their components. 
1. constraints 
　constraints are the easiest gist construct to handle  in that they are already in the form of axioms. for example  the constraint that the spouse relation be symmetric is expressed as 

actually  in the current implementation  facts about different states are stored separately: more on this later. 
1. descriptive reference 
　part of the meaning of a gist statement like the constraint  require contains a box. a ball   is that there must be referents of the object descriptions. koko creates a typed  symbolic instance  for each such description. if we call these symbolic instances boxl and ball1  symbolic execution simply proceeds by adding the axiom contains box1 ball1 . the interpretation in which this makes sense is that boxl and ball1 are not actually objects in the world  but rather names of objects. the distinction is that several names can refer to the same object. thus we do not preclude the possibility that ball1 is actually the same object as some other ball that was referred to earlier. 
　descriptive reference is merely a constrained form of nondeterministic reference  e.g.  requiring a box to contain a red ball is modelled by adding the axioms contains box1 ball1  and red ball1 . 
　one kind of consequence koko considers interesting is that two descriptions must  or cannot  refer to the same object. 
specifications often contain constraints that imply the identity or non-identity of such descriptions. the most common such constraint requires that a relation be a single-valued function of one of the arguments  e.g.  gender. another common constraint specifies that a relation describes an optional attribute  e.g.. 
spouse. 
　the consequences of uniqueness constraints are found by forward inference. for instance  from spouse pl p1  and spouse pl p1   deduces p1 = p1. conversely  from 
spouse pl p1  and ~spouse pl p1  it deduces p1*p1. koko also uses uniqueness constraints to find consequences of facts with universally quantified variables or several arguments to compare  e.g.  from gender pl sexl  and gender p1 sex1  it 

1. primitives that change the world 
　the most direct effects of primitive changes are easy to axiomatize  e.g.. in the state after  insert spouse pl p1   it is required that spouse p1 p1  however  such constraints cannot completely capture the effect of a change. in particular  first order predicate calculus cannot represent the notion that the before and after states are the same except for the effects of the change. 
this notion is captured by predicate transformers  dijkstra 1 . 
koko stores each state explicitly along with the set of tacts known to be true in that state. facts are propagated between neighboring states. notice that propagating a constraint backward in time allows koko to identify its implications for earlier choices. we use pre s.f  to denote the consequences koko derives about the state preceding execution of the statement s given that the tact f holds afterward similarly. post s.f  denotes the consequences about the state resulting from s given that f was true beforehand. for readability  we use the notation  f1 before s =  afterwards f1  for  post s fl  = f1  and  f1 after s =  beforehand f1  for  pre s.fl  = f1 . 
　the computation of pre- and post-conditions'is considerably simplified by the following considerations. for any executable statement s and any propositions p and o 

　quantifiers are eliminated by skolemization. this reduces the problem of computing pre and post-conditions of general propositions to the special case of literals i.e.  positive or negative instances of relations with constants  universally quantified variables  and function applications as arguments.  in the rest of this paper   x  and  y  are universally quantified variables   f  and  g  are functions  and other unquantified symbols are constants.  the rest of this section describes how this is done for different kinds of primitives. 
1. changing a relation 
　in gist  the insert and delete statements add and remove relations. the relation is named explicitly  but the objects may be named by description  and thus nondeterministically   e.g..  insert red a ball  . only one instance of a single relation is changed by each such statement;  insert red ball  v 
green balm   has no meaning. an insertion results in a new state containing the inserted fact. deletion is treated as insertion of a negated fact. 
　the problem of computing pre- and post-conditions of other facts with respect to insertion and deletion is simplified by the following considerations. gist is a first order language  i.e.  there are no variables ranging over relations. thus any literal whose 

d. cohen 1 

1 d. cohen 
represent the truth of the branch condition as of the branching state. it should be mentioned that the branches are combined into a common state after a conditional  i.e.  rather than producing a tree of behaviors  koko describes the state after the conditional in terms of which branch was taken. 
1 . 1 . loops 
　we distinguish between  simple  loops  which can currently be handled and  non-simple  loops which cannot. simple loops are those in which the iterations are independent of each other  i.e.. the same thing is done to each of a set of objects  as in  move all old files off line  
　most loops in implementations are not simple  e.g.-  for each file  if age file  age oldestfile  set oldestfile to file' however  these loops tend not to appear in gist specifications. they are replaced by descriptive reference  e.g.  
 a file 1 such that vfile1 age file l  age file1   
　simple loops are symbolically executed for the entire set at once. basically  the loop variables turn into universally quantified variables in the facts that are inserted. after  if filel is old move it offline  we know   whereas after  for all files f  if f is old move it offline  we know vxf||e old x doffline x . all of the symbolic instances that are generated in a loop are skolem functions of the loop variables. in general the computation of pre- and postconditions introduces existential quantifiers  but is otherwise similar to the versions described above  e.g.. 

1. atomic statements 
　the gist  atomic  construct combines the effects of several constituent statements into a single state transition. an example is the marriage action that simultaneously inserts two spouse relations. it would not have been sufficient to insert one at a time because this would have led to an intermediate state of the world that violated the constraint that the spouse relation be symmetric  actually  that specification would still have been consistent  but now it would be possible to marry two people only if they were already each others' spouse    another interesting result of symbolic execution.  of course  the constituent statements of an atomic must themselves cause no more than one state transition. 
　the facts that become true because of the statements in the atomic must all be true in the final state  e.g.  if an atomic contains both insert p a  and delete p b   then a and b must be distinct. this points out a difference between executing two statements atomically and executing them in either order. there is no problem with inserting p a  and then deleting it. a fact that is propagated through an atomic can be affected by any combination of the statements in the atomic. the pre- or postcondition of a fact with respect to an atomic statement is the disjunction of the pre- or post-conditions of the fact with respect 
to each constituent statement. 
1. conclusion 
　we have described a system that characterizes the behaviors permitted by a formal specification containing such constructs as descriptive reference  nondeterminism  and constraints. it translates a specification into a set of axioms and uses forward inference to compute interesting consequences of them. it uses predicate transformers to propagate facts between neighboring states; the computation of pre- and post-conditions in the relational database model has  to the author's knowledge  never been described before. 
　we have been pleasantly surprised to find that  although many problems that arise are very difficult  or even impossible  to solve in general  the most common and useful cases tend to be the easiest. we have also found that a high level specification can be easier to execute symbolically than a low level program. in retrospect this is not surprising  since the characterization of low level implementations involves a lot of work that could be described as de-compilation. 
　the decision to represent each state explicitly imposes certain limitations. in particular  arbitrarily long sequences of states cannot be represented. this precludes the description of nonsimple loops and certain types of historical reference historical reference  a special case of descriptive reference  is not yet handled. we also currently do not attempt to handle the arbitrary interleaving and merging of lines of control provided by gist. we hope to attack these problems  but a great deal can be done without solving them. in particular  koko examines the 
 execution  of one line of control in isolation 
　koko has produced fairly complete descriptions of some small but non-trivial specifications sample domains include a simplified postal package router  a world of ships and a simplified file system. of course we expect to increase the coverage of the specification language so that more specifications can be so characterized. we believe that even without solving the difficult problems that remain  koko can be extended to characterize the behavior of a large class of interesting specifications. 
　acknowledgements: this work was done in the context of a larger effort on the part of the gist group at isi. in particular  the specification language and the entire approach to the development of software defined the problem whose solution is presented  in part  here. this paper was greatly improved by the suggestions of jack mostow and other members of the group. 
references 
 balzer 1  balzer r . design specification validation. university of southern california information sciences institute 
technical report. 1. published by rome air development center as radctr-1 
 clarke 1  lon a. clarke  debra j. richardson. symbolic 
evaluation methods  university of massachusetts at 
amherst  technical report coins tr1 -1. may 1. 
 dijkstra 1  edsger w. dijkstra  a discipline of programming  prentice hall  1. 
 fickas 1  s fickas. automating the transformational development of software. ph.d. thesis. university of california at irvine. 1. 
 london & feather 1  london. p.e. & feather. m.s..  implementing specification freedoms.  science of computer programming   1 . 1. 1. 
 sullivan 1  sir arthur s. sullivan & w. s. gilbert  the mikado. w. a. pond & co.. new york. 1. 
 swartout 1  bill swartout.  gist english generator.  in proc. 
aaal-1  pp. 1. august 1. 
 swartout 1  bill swartout  the gist behavior explainer. 1. submitted to aaai1-
manipulating descriptions of programs for database access 
	p.m.d.gray 	and 	d.s.moffat 
　　　dept. of computing science  university of aberdeen  scotland  u.k.. abstract 
a method is described for manipulating descriptions of programs to access codasyl databases to meet a specification given in relational algebra. the method has been implemented as a prolog program which is compared with the previous pascal version. the methodology is discussed as an automatic programming technique which explores the transformations on a program induced by changes of data structure representation at two levels. 
i  introduction 
     the problem of generating equivalent programs under changes of data representation is an important one. in the case of l i s t processing  a change of data structure representing sets of objects and their relationships can completely change the program. the same applies to codasyl databases which are essentially enormous l i s t structures on secondary storage. however because of the variety of redundant pointers it is possible to traverse the same l i s t structure in many different ways. thus it is not just a 
     question of changing the program but of generating alternative programs whose run-times  because of disc access  may differ by factors of 1 or more. 
     this paper concerns the manipulation of abstract descriptions of such programs. a query is formulated in a functional language  relational algebra  which specifies the logical relationships between the retrieved data values and the stored data items but does not specify the sequence used to access them   the access path  . the aim is to generate a program that produces the desired items efficiently by exploring a variety of alternative program structures  which are the consequence of following different access paths. 
     a method of doing this has been developed  bell 1  and embodied in a system  astrid   gray 1  for typing in queries in relational algebra and generating and running programs on codasyl databases  ids-ii and idms . from the user's point of view the benefits are twofold. 
     1. it gives the user a relational view of the codasyl database. thus he is able to think about his retrieval problem in terms of table manipulations using the high level operations of relational algebra instead of having to work at the low level of record access operations following pointers through the database and embedding these operations in fortran code. 
     1. he can write complicated multi-line queries that compute derived data both from records and groups of records  averages  counts etc.  and appear to generate several intermediate tables. the system will endeavour to find an access path that computes the same result without storing these tables  which could be very costly for large databases. the program generated may be quite complicated to write by hand and should be competitive with a trained programmer's code. 
     the system goes through several stages. first the user types a query in relational algebra which is parsed and checked. then it is manipulated at two levels. at the top level the query is rewritten s t i l l in algebraic form using rewrite rules so as to assist transformations at the next level. the lower level uses a concrete representation of the codasyl data structure by a traversal  see below . the system reads in a number of stored traversals for each relation. these have each to be manipulated and combined in various ways to satisfy the requirements of the query. some combinations w i l l represent very slow and inefficient programs and be discarded. however this cannot be done immediately  as a good program for part of the query may later turn out to be second best after modification to f i t the remainder. finally the descriptions are costed according to information on database access times and the selected version is used to generate fortran code to run against the actual database. the system is oriented towards complex queries accessing thousands of records which can only run in batch producing substantial printout. thus it is not the run-time for the translator which matters but the complexity of query which it can handle. currently other systems only handle a very restricted relational view or a rather restricted query language. 
	the astrid system was 	originally 	written 	in 
pascal. more recently the two levels of manipulation have been rewritten in prolog. this paper describes the basic methodology and shows how prolog is well adapted to this task. 
     the layout of the paper is as follows. section {ii} describes some transformations which affect the resultant program but are best carried 

1 p. gray and d. moffat 
out on the relational algebra in prolog. section { i i i } describes the basic notion of a traversal and how it is used to represent a piece of program. section {iv} describes the combination of traversals and how this is used to build descriptions of more complex programs. section {v} illustrates some of the prolog used to combine traversals and discusses its advantages and snags in this application. the final section draws conclusions for future work. 
a. 	relation to other work 
     burstall and darlington  1  describe a system for specifying a program by recursion equations. these can be manipulated and play a role similar to relational algebraic expressions in our system. they discuss a way to rewrite the abstract program given a concrete data representation in terms of a  coding function . however our use of a traversal represents the data in a rather different way. apart from tarnlund  1  few have addressed the problem of efficient access to relations using information about the mode of storage. tarnlund has studied ways to answer queries efficiently by representing them as theorems to be derived in the f i r s t order calculus and looking for efficient derivations where relations are held as a binary tree structure. 
ii  relational algebra transformations 
     the user asks his query in relational algebra. we f i r s t describe this and then see how the system improves the query by rewriting i t . 
a. 	relational databases 
     a relation is a set of tuples each containing values for a fixed set of attributes. viewed as a table the attribute values are in columns. a relational database usually contains several relations which have attributes in common. the examples used come from a database on world cup football results. the two relations of interest are shown in table 1. 
table 1. 	relational view of world cup database 
b. 	relational algebra 
     relations can be treated as tables and new relations derived from them by the operations of relational algebra. the operations used are adapted from codd. they are selection  projection  join  extend and group by  gray 1 . the join operation is a generalised intersection  formed from the cartesian product of two relations by selecting those tuples with matching values for the common attributes. a typical query starts by joining several relations  then selects tuples  then extends and or groups these tuples and finally projects to required columns. 
     the relational algebra can be rewritten  just like standard algebra  by using rewrite rules in prolog. we have 1 such rules with special predicates for handling commutation. a typical transformation would move a projection operation %  in an expression involving join *  and selection ;  to ease the join method. 
 stadium allocation ;  stadium =  cordoba''  %year  group * group placings ; placing=1  *year group  becomes 
 stadium allocation ; stadium= cordoba   * 
group placings ;  placing = 1    %year group 
	i i i 	traversals of codasyl database structures 
     although the user thinks of relations just as tables  they are actually complicated doublylinked l i s t structures. at the second level of transformation we need to represent possible paths through these structures by traversals in order to search for an efficient one. thus we f i r s t explain the codasyl  set  relationship used to link different records. we then see how a number of alternative  base traversals  can be defined for each relation and held on f i l e . 
   a codasyl database consists of sets of records of the same type which are linked by pointers to other records in the set and to a common owner record which uniquely identifies an instance of a given set type. figure 1 shows the linkages 

more precisely. it is a description of a piece of code which realises the tuples of the relation one 

at a time by accessing the records in some sequence following the set pointers and modifying the values as necessary. thus it is a generator for a relation. corresponding to each relation stored in the database  e.g. group placings  we hold on f i l e one or more base traversals. each one is essentially a description of a piece of code with a number of nested loops. 
	we have a notation for traversals as 	follows. 
internally it is represented by a prolog l i s t structure. there are three obvious base traversals of stadium-allocation and two for group placings. each {sa} traversal visits the same number of game records  generating one tuple for each. 
s year  -  d group  -  d game  -  u venue  
v venue  -  d game  -  u group  -  u year  
b group  -  u year  -  d game  -  u venue  
s year  -  d group  -  d link  -  u team  b group  -  u year  -  d link  -  u team  {sa1} 
{sa1} {sa1  
{gp1} 
{gp1} 	p. gray and d. moffat 	1 
a. 	combination by join 
     since join is based on a cartesian product it can be formed by a nested for loop with one iteration for each record type involved. this is very similar to a traversal structure and it turns out that the traversal representing the join can often be formed just by concatenating parts of the separate traversals {bell 1  gray 1}. the selections for matching are then performed automatically by the fact that a codasyl owner record will in many cases be linked to just those records whose values would have been selected by the join operator! let us consider examples of this using 
	res:= stadium-allocation 	joined to 	group-
placings 
     if we use sa1 and gp1 then these both have  common start  section. 
s year  -  d group  

     here s means a singular set a ccess to visita l l records of a given type  there is only one set owning a l l year records   d mean go down to visit a l l member records belonging to the given owner using the appropriate set type   i f this is ambiguous it is specified  and u means go up to v i s i t the owner of a given record  v means direct access to the record containing a value  usually given by selection . b means vi it every record of that type in the database  in an algol-like syntax we can represent the corres ponding code for sa1 as :-
for each year record do 
for each group record owned by year do 
for each game record owned by group do 
for the venue owner of game do print year.year  group.group  game.game  venue.stadium  game.date. 
     thus each arrow in a traversal represents an inner level of nested code. note that the record generations such as d game  in sa1 must follow those such as b group   which generates the owner for game  but they need not be consecutive. 
	iv 	combination & modification of traversals 
which generates the common attributes in the two cases. if we concatenate the traversals keeping one copy of the common start we get 
s year  -  d group  -  d game  -  u venue  -  
d link  -  u team  
we can also get in the other order :-
s year  -  d group  -  d link  -  u team  -  d game  -  u venue  
     both traversals correspond to nested loop code which w i l l produce the desired tuples though in a different sequence. which is best depends on subsequent selections. if a selection on  placing=1  is made after  d link   then the second method is best as it visits fewer records. 
     one can also join traversals where the head of one traversal matches the t a i l or middle of the second. we can do this with the alternative traversals sa1 & gp1 giving :-
v venue  -  d game  -  u group  -  u year  -  
d link  -  u team  
     we notice here that a b group  since it visits all records can match a u group  which visits only certain records because join has the properties of an intersection. 

     corresponding to every algebraic operation on a given relation there is a modification to its traversal which produces a derived traversal  which is a generator for the new relation. thus the method is complete. this derived traversal can then be modified by the next operation and so on. for example a selection can be done by inserting   i f  year=1  then  just after  for each year record do . the resulting traversal depends somewhat on the order of application of operations specified by the user. however many of these are commutative and the order of others can be improved by top level rewriting. 
     the second traversal  using sa1 gp1  would be preferred if a subsequent selection were made on stadium as it could use v venue  efficiently. general conditions for choosing an optimum are discussed in  esslemont & gray 1 . 
	1 	overview of the join algorithm in prolog 
     the basic method is given in figure 1. it starts by reading in a number of traversals for each relation and holds them as unit clauses trav x . the term x contains a record generation l i s t giving the sequence of record and set accesses  which we have symbolised. the procedure join trav  see below  then picks the f i r s t clause 

1 p. gray and d. moffat 
for each r e l a t i o n and t r i e s to f i n d an overlap in accordance with the conditions given in   b e l l 1 . prod overlap is called twice with the record generation l i s t s reversed in order to t r y the two cases of common s t a r t and likewise for head to t a i l   i v . a   . if t h i s is successful the r e s u l t t r a v e r s a l is asserted. a ' f a i l ' clause then causes backtracking and another pair of t r a v e r s a l clauses is chosen thus t r y i n g a l l combinations of the operand t r a v e r s a l s . the ' f a i l ' also has the e f f e c t of reclaiming much-needed space once the t r a v e r s a l i s s a f e l y asserted. i f a l l attempts f a i l an operation node to j o i n by sort-merge is i n s e r t e d . 
     it is possible for a t r a v e r s a l to pass through two instances of the same record type. in order to d i s t i n g u i s h which instance is being used for accessing subsequent record types it is necessary to assign a unique number to each record generation element in the t r a v e r s a l . 
correspondences are established by clauses of the form e q u i v   c u r r   x . y   . 

a. 	effect 	of joining modified 	traversals 
     traversals which have been modified by s e l e c t i o n   extension  p r o j e c t i o n or group-by w i l l have elements in t h e i r record generation l i s t s to i n d i c a t e these o p e r a t i o n s   o p e r a t i o n nodes . such t r a v e r s a l s are joined as before but w i t h a l l operation nodes being copied d i r e c t l y i n t o the r e s u l t t r a v e r s a l . 
b. 	comparison of pascal and prolog versions 
     the pascal version takes several thousand l i n e s whereas prolog needs several hundred and is much easier to read and modify. pascal is a very much wordier language for l i s t processing. also one has to w r i t e m u l t i p l e versions of many functions such as  member  because the type of l i s t argument must be known at compile time. further the use of prolog d e f i n i t e clause grammars saves pages of recursive pascal procedures to parse base t r a v e r s a l s e t c . . f i n a l l y because pascal has no backtracking f a c i l i t i e s it has to keep r e t u r n i n g sets of a l t e r n a t i v e combined t r a v e r s a l s and c u r r e n t l y runs out of l i s t space on large queries. the prolog version can handle these because i t reclaims space f o l l o w i n g f a i l . 
	vi 	conclusions 
     although the d i r e c t use of codasyl databases for storage o f f a c t s i s u n l i k e l y i n a . i . the general problem of generating programs that traverse and manipulate l i s t s t r u c t u r e s is important and the techniques described could have other a p p l i c a t i o n s . the methodology used is :-
　　　1. arrange that the s p e c i f i c a t i o n of the r e s u l t to be computed by the generated program is given in f u n c t i o n a l form such as r e l a t i o n a l algebra but not in procedural form with loops and assignment. this is easier for the user to t h i n k about and also does not commit him to an unsuitable r e p r e s e n t a t i o n . i t allows easier o v e r a l l program t r a n s f o r m a t i o n ; in p a r t i c u l a r some transformations are easier in the f u n c t i o n a l form than the t r a v e r s a l form. 
　　　1. prolog is p a r t i c u l a r l y s u i t a b l e for t h i s work because of i t s good l i s t - m a t c h i n g and backt r a c k i n g f a c i l i t i e s . the use of  assert and f a i l   was necessary  but given t h i s it out-performs pascal by running larger problems in the pdp 1 address space in s i m i l a r time. 
acknowledgements 
     the r e w r i t e rules described in section ii were developed by t.n. scott  now at scicon  london . ben du boulay gave us many valuable comments during the preparation of t h i s paper. the generous assistance of the u.k. serc is also acknowledged. 
