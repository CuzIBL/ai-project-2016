 
many optimization problems can be expressed using some form of soft constraints  where different measures of desirability arc associated with different combinations of domain values for specified subsets of variables. in this paper we identify a class of soft binary constraints for which the problem of finding the optimal solution is tractable. in other words  we show that for any given set of such constraints  there exists a polynomial time algorithm to determine the assignment having the best overall combined measure of desirability. this tractable class includes many commonly-occurring soft constraints  such as  as near as possible  or  as soon as possible after   as well as crisp constraints such as  greater than'1. 
1 introduction 
the constraint satisfaction framework is widely acknowledged as a convenient and efficient way to model and solve a wide variety of problems arising in artificial intelligence  including planning and scheduling  image processing and natural language understanding. 
　in the standard framework a constraint is usually taken to be a predicate  or relation  specifying the allowed combinations of values for some fixed collection of variables: we will refer to such constraints here as crisp constraints. a number of authors have suggested that the usefulness of the constraint satisfaction framework could be greatly enhanced by extending the definition of a constraint to include also soft constraints  which allow different measures of desirability to be associated with different combinations of values  bistarelli et al.  1 . in this extended framework a constraint can be seen as a function  mapping each possible combination of values to a measure of desirability or undesirability. finding a solution to a set of constraints then means finding an assignment of values to all of the variables which has the best overall combined desirability measure. 
example 1 for example  consider an optimization problem where we have 1n variables  v1 v1 . .- v1n  and we wish to assign each variable an integer value in the range 1 ...  n  subject to the following restrictions: 
  each variable v1 should be assigned a value that is as close as possible to i/1. 
  each pair of variables v1 v1  should be assigned a pair of values that are as similar as possible. 
to model this situation we might impose the following soft constraints: 
  a unary constraint on each v1 specified by a function where 
  a binary constraint on each pair v1 v1i specified by a function 
we would then seek an assignment to all of the variables which minimizes the sum of these constraint functions  

lj 
the cost of allowing additional flexibility in the specification of constraints  in order to model requirements of this kind  is generally an increase in computational difficulty. in the case of crisp constraints there has been considerable progress in identifying classes of constraints which are tractable  in the sense that there exists a polynomial time algorithm to determine whether or not any collection of constraints from such a class can be simultaneously satisfied  feder and vardi  1; jeavons et ail 1 . in the case of soft constraints there has been a detailed investigation of the tractable cases for boolean problems  where each variable has just 1 possible values   creignou et al  1   but very little investigation of the tractable cases over larger domains1  even though there are many significant results in the literature on combinatorial optimization which are clearly relevant to this question  nemhauser and wolsey  1 . 
　in this paper we make use of the idea of a submodular function  nemhauser and wolsey  1; topkis  1  to identify a general class of soft constraints for which there exists a polynomial time solution algorithm. submodular functions are usually defined as real-valued functions on boolean tuples  =sets   nemhauser and wolsey  1   but we consider 
   'the only previous work we have been able to find on nonboolean tractable soft constraints is  khatib et ai  1   which describes a family of tractable soft temporal constraints. 

constraints 	1 

the more general case of functions on tuples over an arbitrary finite domain. we also allow our functions to take infinite values. by establishing a new decomposition result for this general class of binary submodular functions  theorem 1   we obtain a cubic time algorithm to find the optimal assignment for any set of soft constraints defined by such functions. 
　we give a number of examples to illustrate the many different forms of soft constraint that can be defined using binary submodular functions  and we also show that this class is maximal  in the sense that no other form of binary constraint can be added without sacrificing tractability. 
1 	definitions 
to identify a tractable class of soft constraints we will need to restrict the set of functions that are used to specify constraints. such a restricted set of possible functions will be called a soft constraint language. 
definition 1 let d and e be fixed sets. a soft constraint language over d with evaluations in e is defined to be a set of functions  t  such that each  is a function from dk to e  for some  where k is called the arity of 
for any given choice of soft constraint language  t we define an associated soft constraint satisfaction problem  which we will call scsp r   as follows. 
definition 1 let t be a soft constraint language over d with evaluations in e. an instance v of scsp r  is a triple  v d c   where: 
  v is a finite set of variables  which must be assigned values from the set d. 
  c is a set of soft constraints. each is a pair  a  d   where: is a list of variables  called the scope of c and is an element of t of arity   called the evaluation 
function of c. 
note that  for any constraint the arity of the constraint is given by the length of the constraint scope. the evaluation function will be used to specify some measure of desirability or undesirability associated with each possible tuple of values over 
　to complete the definition of a soft constraint satisfaction problem we need to define how the evaluations obtained from each evaluation function are combined and compared  in order to define what constitutes an optimal overall solution. several alternative mathematical approaches to this issue have been suggested in the literature: 
  in the semiring based approach  bistarelli et al  1   the set of possible evaluations  e  is assumed to be an algebraic structure equipped with two binary operations  satisfying the axioms of a semiring. 
  in the valued csp approach  bistarelli et al  1   the set of possible evaluations e is assumed to be a totally ordered algebraic structure with a top and bottom element and a single monotonic binary operation known as aggregation. 
for our purposes in this paper we require the same properties as the valued csp approach  with the additional requirement that the aggregation operator has a partial inverse  so that any evaluation can be  subtracted  from any larger evaluation . for concreteness  we shall simply assume throughout this paper that the set of evaluations e is either the set of non-negative integers together with infinity  or else the set of non-negative real numbers together with infinity. hence  for 
any two evaluations the aggregation of p1 and p1 is given by 	we also have 
 note that we set 
　the elements of the set e will be used to represent different measure of undesirability  or penalties  associated with different combinations of values. this allows us to complete the definition of a soft constraint satisfaction problem with the following simple definition of a solution to an instance. 
 definition 1 for any soft constraint satisfaction problem instance v -  v  d  c   an assignment for v is a mapping t from v to d. the evaluation of an assignment t  denoted  is given by the sum  i.e.  aggregation  of the evalua-
tions for the restrictions of t onto each constraint scope  that is  

a solution to v is an assignment with the smallest possible evaluation  and the question is to find a solution. 
example 1 for any standard constraint satisfaction problem instance v with crisp constraints  we can define a corresponding soft constraint satisfaction problem instance v in which the range of the evaluation functions of all the constraints is the set . for each crisp constraint c of p  we define a corresponding soft constraint cofv with the same scope; the evaluation function of c maps each tuple allowed by c to 1  and each tuple disallowed by c to oo. 
　in this case the evaluation of an assignment t for  equals the minimal possible evaluation  1  if and only ift   satisfies all of the crisp constraints in v. 	d 
note that the problem of finding a solution to a soft constraint satisfaction problem is an np optimization problem  that is  it lies in the complexity class npo  see  creignou et al  1  for a formal definition of this class . if there exists a polynomial-time algorithm which finds a solution to all instances of scsp t   then we shall say that scsp t  is tractable. on the other hand  if there is a polynomial-time reduction from some np-complete problem to scsp t   then we shall say that scsp r  is np-hard. 
example 1 let y be a soft constraint language over d  where  = 1. in this case scsp r  is a class of boolean soft constraint satisfaction problems. 
　if we restrict t even further  by only allowing functions with range  as in example 1  then scsp r  corresponds precisely to a standard boolean crisp constraint satisfaction problem. such problems are sometimes known as 

1 	constraints 

generalized satisfiability problems  schaefer  1 . the complexity of scsp f  for such restricted sets t has been completely characterised  and the six tractable cases have been identified  schaefer  1; creignou et al  1 . 
　alternatively  if we restrict y by only allowing functions with range {1   then scsp r  corresponds precisely to a standard boolean maximum satisfiability problem  in which the aim is to satisfy the maximum number of crisp constraints. such problems are sometimes known as max-sat problems  creignou et al  1 . the complexity of scsp r  for such restricted sets f has been completely characterised  and the three tractable cases have been identified  sec theorem 1 of  creignou et al.  1  . 
　we note  in particular  that when t contains just the single binary function defined by 
then scsp r  corresponds to the max-sat problem for the exclusive-or predicate  which is known to be np-hard  see 
lemma 1 of lcreignou et al.  1  . 	＆ 
example 1 let t be a soft constraint language over d  where  and assume that t contains just the set of all unary functions  together with the single binary function 

even in this very simple case it can be shown that scsp t  is np-hard  cohen et al  1   by reduction from the 
m i n i m u m multithrminal cut problem  dahlhausc/a/.  
1 . 	u 
the examples above indicate that generalizing the constraint satisfaction framework to include soft constraints docs indeed increase the computational complexity  in general. for exam-
ple  the standard 1-satisfiability problem is tractable  but the soft constraint satisfaction problem involving only the single binary boolean function   defined at the end of example 1  is np-hard. similarly  the standard constraint satisfaction problem involving only crisp unary constraints and equality constraints is clearly trivial  but the soft constraint satisfaction problem involving only soft unary constraints and a soft version of the equality constraint  specified by the function Φeq defined at the end of example 1  is np-hard. 
　however  in the next two sections we will show that it is possible to identify a large class of functions for which the corresponding soft constraint satisfaction problem is tractable. 
1 	generalized interval functions 
we begin with a rather restricted class of binary functions  with a very special structure. 
definition 1 let d be a totally ordered set. a binary function  Φ : d1 -  e will be called a generalized interval function on d if it has the following form: 

we can explain the choice of name for these functions by considering the unary function . this function returns the value p if and only if its argument lies in the interval  a  b ; outside of this interval it returns the value 1. 
　we shall write tgi to denote the set of all generalized interval functions on d  where d = {1 ...  m} with the usual ordering. 
　the main result of this section is corollary 1  which states that scsp tgi  is tractable. to establish this result we first define a weighted directed graph1 associated with each instance of scsp ff;/ . 
definition 1 let v =  v  { 1   . . .   m }   c  be an instance of scsp tgi . we define the weighted directed graph g-p as follows. 
  the vertices of g-p are as follows: 

  the edges of gp are defined as follows: 
- for each 	there is an edge from s to 	with weight 
- for each 	  there is an edge from 	with weight 
there is an edge from vci to vd+  with weight 
- for each constraint there is an edge from with weight p. these edges are called  constraint edges . 
example1 let v =  {x y  z}  {1 1} c  be an instance of scsp tgi  with the following four constraints: 

the corresponding weighted directed graph gp  is shown in 
figure 1. 	u 

figure 1: the graph gp associated with the instance v defined in example 1. 

   1 this construction was inspired by a similar construction for certain boolean constraints described in  khanna et al.  1 . 
constraints 	1 

any set of edges c in the graph gp whose removal leaves the vertices s and t disconnected will be called a cut. if every edge in c is a constraint edge  then c will be called a proper cut. the weight of a cut c is defined to be the sum of the weights of all the edges in c. 
example 1 consider the graph gp shown in figure 1. 
the set { y1 } is a proper cut in gp with weight 
1  which is minimal with respect to inclusion. the set { x1 y1    z1 y1 } is a proper cut in gp with weight 1  which is again minimal with respect to inclusion. d 
proposition 1 let v be any instance of scsp{tgi   and let gp be the corresponding weighted directed graph. 
1. for each minimal proper cut in gp with weight there is an assignment for v with evaluation 
1. for each assignment t for v with evaluation   there is a proper cut in gp with weight 
proof: 
1. let c be any minimal proper cut of the graph gp  and let cs be the component of gp   c connected to s. define the assignment tc as follows: 

 note that tc is well-defined because cs always contains vm  and never contains v1  by construction.  by the construction of gp  it follows that: 

now consider any constraint  of p  and its associated edge e in gp. by the definition of generalized interval constraint and the choice of tc  if and only if  and 
and hence if and only if e joins a vertex in cs 
to a vertex not in cs- since c is minimal  this happens if and only if  hence  the total weight of the cut c is equal to the evaluation of tc-
1. conversely  let t be an assignment to p  and let a' be the set of constraints in v with a non-zero evaluation on t. now consider any path from s to t in gp. if we examine  in order  the constraint edges of tnis path  and assume that each of the corresponding constraints evaluates to 1  then we obtain a sequence of assertions of the following form: 

since the second disjunct of each assertion contradicts the first disjunct of the next  these assertions cannot all hold simultaneously  so one of the corresponding constraints must in fact give a non-zero evaluation on t. hence  every path from s to t includes at least one edge corresponding to a constraint from k and so the edges corresponding to the set k form a cut in gp. furthermore  by the choice of k the weight of this cut is equal to the evaluation of/. 
d 
hence  by using a standard efficient algorithm for the minimum weighted cut problem  goldberg and tarjan  
1   we can find an optimal assignment in cubic time. 
corollary 1 the time complexity of scsp tgi  is 
  where n is the number of variables. 
1 	submodular functions 
in this section we will consider a rather more general class of functions  as described in  topkis  1 . 

it is easy to check that all unary functions and all generalized interval functions are submodular. for binary functions  the definition of submodularity can be simplified  as follows. 

it follows from definition 1 that the sum of any two submodular functions is submodular. this suggests that in some cases it may be possible to express a submodular function as a sum of simpler submodular functions. for example  for any unary function : d -  e we have 
the main result of this section is theorem 1  which states that any binary submodular function can also be expressed as a sum of generalized interval functions. 
theorem 1 let d be a totally ordered finite set. a binary function   : d1 -  e is submodular if and only if it can be expressed as a sum of generalized interval functions on d. 

1 	constraints d 
constraints 	1 

example 1 the euclidean length function is submodular  and can be used to express the constraint that a 1-dimensional point  x  y  is  as close to the origin as possible . 	g one of the several possible cuts with this weight is indicated by the gray line across the graph  which corresponds to the solution 
＆ 

example 1 the following functions are all submodular: 	references 
                                bistarelli et al.  1  s. bistarelli  u. montanari  f. rossi  t. schiex  g. vcrfaillic  and h. fargier. semiring-based csps can be used to express the constraint 
that:  the values assigned to the variables x and y should be as similar as possible . and valued csps: frameworks  properties  and comparison. con-
	straints 1: 1 	1  1. 
 cohen et al  1  d. cohen  	m. cooper  	p. jeavons  	and 	a. krokhin. 	a tractable class of soft constraints. 	technical 
	can be used to express the constraint 	report csd-tr-1  computer science department  royal 
that:  the value of x is either less than or as near as possible to y'' holloway  university of london  egham  surrey  uk  december 1. |crcignourt a/.  1  n. creignou  s. khanna  and m. sudan. complexity classifications of boolean constraint satisfaction problems volume 1 of si am monographs on discrete mathematics and applications. 1. 
	can be used to express the temporal 	 dahlhaus et al.  1  e. dahlhaus  d.s. johnson  c.h. papadim-
constraint that:  x occurs as soon as possible after y . 
d 
example 1 reconsider the optimization problem defined in example 1. since  is unary  and  is binary submodular  example 1   this problem can be solved in cubic time  using the methods developed in this paper. 
   let v be the instance with n = 1 and r = 1. the values of  are given by the following table: itriou  p.d. seymour  and m. yannakakis. the complexity of multiterminal cuts. si am journal on computing  1 :1  1. 
 feder and vardi  1  t. feder and m.y. vardi. the computational structure of monotone monadic snp and constraint satisfaction: a study through datalog and group theory. si am journal of computing  1-1  1. 
 goldberg and tarjan  1  a. goldberg and r.e. tarjan. a new approach to the maximum flow problem. journal of the acm  1-1  1.  jeavons et al.  1  p.g. jeavons  d.a. cohen  and m. gyssens. closure properties of constraints. journal of the acm  1 1  1. 
 khanna et al  1  s. khanna  m. sudan  l. trevisan  and 
hence  d. williamson. the approximability of constraint satisfaction problems. si am journal on computing  1 : 1  1.  khatib et al  1  l. khatib  p. morris  r. morris  and f. rossi. temporal constraint reasoning with p