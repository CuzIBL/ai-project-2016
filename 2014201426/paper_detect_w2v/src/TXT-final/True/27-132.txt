  description of a consistent product. for example  if the user chooses a high-quality combination system  then classic deduces that the target system must have an amplifier  preamplifier  tuner  main  surround  and center speakers  a subwoofer  vcr  and tv  and presents this information graphically. classic calculates the deductive closure of the information provided  which usually implies properties of the system as a whole as well as properties of all the individual components. the user can view the completed information on any component 
just by clicking on the icon. for example  if she clicks on the tv  she sees  among other things  that the list price must be at least $1. 
¡¡explanation: classic can justify all of its beliefs.. in the example above  if the user asks how 
	mcguinness  resnick  and isbell 	1 

the tv acquired its price restriction  she learns that a rule fired which says that high-quality systems must have high-quality components  which for tvs enforces a minimum price of $1. the explanation facility can also answer other questions such as why one object does or does not  subsume   is or is not more general than  another object  why a rule fired on an object  or why an error occurred. 
	incomplete 	a n d 	evolving 	knowledge 	bases: 
classic allows refinement of  and changes to  a system specification. for example  a user could add new components  e.g.  a turntable   chosen from a panel of icons. she might also  instantiate  a component description by choosing a particular make and model. the interface will only generate choices that appear to be consistent with the information that classic has derived about the component  by using the specification of the component as a query to the database of individuals . the user may also delete a requirement on the system  in which case any deductions that were made as a result of this requirement are removed from the specification. when the user has finished refining the system to her satisfaction  she can ask the application to complete the specification for her. the application will then choose consistent makes and models for all the components she has left unspecified. she can then view a parts list  after which she might want to ship the order off to the factory. 
   if the user is not familiar with different types of stereo equipment  she may wish to trust our expert  and build a system starting with one of the example systems  where all the components are known to work well together. she can then refine this system according to her needs  requesting alternative makes and models to the ones chosen  and adding and removing components. 
   errors: although classic and the application minimize the places where a user can make an error  errors can still occur the application does not ask classic to precalculate all possible consequences of a given choice. the user could make a choice which would cause a rule to fire  which would then cause a propagation of some inconsistent information. for example  suppose the user wants to build a system  starting with a few components she already owns  including a small tv. she may later add a price range for the whole system  and based on this information  classic classifies her system as a highquality system. all the high-quality system rules then fire  including one which requires the system's tv to have at least a 1-inch diagonal. this information gets propagated onto the user's small tv  which causes an error  classic does not allow the knowledge base to be in an inconsistent state  so it will roll back the knowledge base to the previous consistent state  meanwhile saving copies of all the individuals that led to the error  in their inconsistent states. if the user asks classic for an explanation of the error  classic can access the inconsistent state information to generate an explanation. 
   we feel that description logic technology is particularly well matched to this style of configuration problem for the following reasons: first  the application is fairly logical  not heuristic  so we would either have to implement the logic in a programming language or start 
1 	videos 
with a tool like classic that incorporates a formal logic. second  this domain is naturally hierarchical and rule information is appropriate at many different levels of the taxonomy. dlss support hierarchical rules instead of using a more traditional  flat rule-based approach. this may simplify knowledge engineering and maintenance. classic rules can be simpler because they only need to contain content appropriate to a certain level of concept in the hierarchy  and they do not need to contain any control information. finally  the application naturally incorporates many different types of inference; a few of which include: inheritance  propagation  bounds constraints  and rules. these can be encoded directly in dlss instead of needing to be paraphrased into rules. possibly more importantly  explanations of the reasoning process may be in terms of the naturally occurring inferences. 
   this home theater system is a simple example of a family of applications where a description logic-based platform is used to implement standard configuration tasks and provide the basis for additional functionalities. the deployed applications built on this design have provided many advantages including decreased order processing intervals  facilitating hypothetical configuration evaluations  which were previously infeasible   reductions in personnel required to maintain product information  accurate and up-to-date pricing for sales quotes  elimination of duplication in databases  and identification of incompatible knowledge. 
a c k n o w l e d g e m e n t s 
we wish to thank the entire classic group  particularly peter patel-schneider and ron brachman  for their insightful comments on this work. 
references 
 r. j. brachman  d. l. mcguinness  p. f. patelschneider  l. a. resnick  and a. borgida. living with classic: when and how to use a kl-one-like language. in principles of semantic networks: explorations in the representation of knowledge  j. sowa  editor  morgan-kaufmann  pp. 1  1. 
 d. l. mcguinness and a. borgida. explaining subsumption in description logics. in proc. ijcaj  montreal  august 1. 
 j. r. wright  d. l. mcguinness  c. foster  and g. t. vesonder. conceptual modeling using knowledge representation: configurator applications. in proc. artificial intelligence in distributed information networks  ijcai-1  montreal  1. 
 wright  j. r.  weixelbaum  e. s-  brown  k.  vesonder  g. t.  palmer  s. r.  berman  j. i.  moore  h. h.  a knowledge-based configurator that supports sales  engineering  and manufacturing at at&t network systems. in proceedings of the innovative applications of artificial intelligence conference  pp.1  1. 

revealing collection structure through information access interfaces 
	marti a. hearst 	jan o. pedersen 
xerox palo alto research center 
1 coyote hill road palo alto  ca 1 
 1  1 
{hearst pedersen } parc.xerox.com 

   information access research at xerox parc focuses on amplifying the users' cognitive abilities  rather than trying to completely automate them. this framework emphasizes the participation of the user in a cycle of query formulation  presentation of results  followed by query reformulation  and so on. this framework is intended to help the user iteratively refine a vaguely understood information need. since the focus is on query repair  the information presented is typically not document descriptions  but rather intermediate information that indicates relationships between the query and the retrieved documents. we have developed information access tools intended to supply some of this functionality  and describe two of these here. 
¡¡as an illustration  suppose a user is interested in medical diagnosis software. assume that initially the user has available a large  unfamiliar information source. in our example  this source is the 1 gigabyte tipster text collection  harman  1 . because the collection is unfamiliar  the user will be unsure whether it contains relevant information  and if so  how to access it. 
   to address this situation  we have developed a browsing method  called scatter/gather  cutting et a/.  1; 1   that allows a user to rapidly assess the general contents of a very large collection by scanning through a dynamic  hierarchical representation that is motivated by a table-of-contents metaphor. initially the system automatically scatters  or clusters  the collection into a small number of document groups  and presents short summaries of the groups to the user. these summaries consist of two types of information: topical titles  titles of documents close to the cluster centroid  and typical terms  terms of importance in the cluster . based on these summaries  the user selects one or more of the groups for further study. the selected groups are gathered  or unioned  together to form a subcollection. the system then applies clustering again to scatter the new subcollection into a small number of document groups  which are again presented to the user. with each successive iteration the groups become smaller  and therefore more detailed. the user may  at any time  switch to a more focused search method. figure 1 shows a portion 

figure 1: a portion of a top-level view of the scatter/gather algorithm over the tipster corpus. 
of the top level clusters on the tipster collection. 
¡¡by browsing the collection in this manner  the user obtains an idea about the technical contents of the corpus  and can choose whether or not to further explore here or try another text collection. from the titles and terms retrieved  it becomes apparent that the collection contains commercially oriented discussions of technology  rather than predominantly academic ones. from this overview information  the user can conclude that this is indeed a promising collection for the user's information need. 
¡¡once a premising collection has been identified  the user can issue a search. in a typical information retrieval system  documents satifying the query are returned and are rank-ordered according to some function of the number of hits for each term  salton  1 . but this kind of ranking is opaque to the user; it is not clear how well each term is represented in the retrieved documents. 
	to 	address 	these 	issues  	the 	tiiebars 	interface 
 hearst  1  allows the user to make informed decisions 
	hearst and pederson 	1 


figure 1: the tilebar display on a query about automated systems for query diagnosis. 
about which documents and which passages of those documents to view  based on the distributional behavior of the query terms in the documents. the goal is to simultaneously and compactly indicate  i  the relative length of the document   ii  the frequency of the term sets in the document  and  iii  the distribution of the term sets with respect to the document and to each other. each document is partitioned in advance into a set of multiparagraph subtopical segments using an algorithm called texttiling  hearst  1 . 
   figure 1 shows an example run on a query about automated systems for medical diagnosis  run over the ziff portion of the tipster collection. each large rectangle indicates a document  and each square within the document represents a coherent text segment. the darker the segment  the more frequent the term  white indicates 1  black indicates 1 or more hits  the frequencies of all the terms within a term set are added together . the top row of each rectangle correspond to the hits for term set 1  the middle row to hits of term set 1  and the bottom row to hits of term set 1. the first column of each rectangle corresponds to the first segment of the document  the second column to the second segment  and so on. 
   the tilebars representation allows the user to sort the retrieved documents according to which aspects of the query are most important. for example  in the figure the query is formulated as:  patient or medicine or medical  a n d  test or scan or cure or diagnosis  a n d  software or program . this formulation allows the interface to indicate the role played by each conceptual part of the query: the medical terms  the diagnosis terms  and the software terms. in figure 1  the user has indicated that the diagnosis aspect of the query must 
1 	videos 
be strongly present in the retrieved documents  by setting the minimum term distribution percentage to 1% for the second termset. the document whose title begins ''va automation means faster admissions  is quite likely to be relevant to the query  and has all three term sets well-distributed throughout. by contrast  the document whose title begins  it's hard to ghosibust a network ...  is about computer-aided diagnosis  but has only a passing reference to medical diagnosis  as can be seen by the graphical representation. if the user decides that medical terms should be better represented  the constraint on this term set can be adjusted accordingly. 
   note that a system that simply ranks the documents does not make these kinds of distinctions available to the user. the graphical representation allows the users to rapidly assess the structure of the retrieved documents with respect to the query  to better aid their decisions about which documents to view  or how to refine the query. 
