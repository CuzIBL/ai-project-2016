ion-based action ordering in planning
maria fox and derek long and julie porteous
department of computer and information sciences
university of strathclyde  glasgow  uk
　
abstract
many planning problems contain collections of symmetric objects  actions and structures which render them difficult to solve efficiently. it has been shown that the detection and exploitation of symmetric structure in planning problems can dramatically reduce the size of the search space and the time taken to find a solution. we present the idea of using an abstraction of the problem domain to reveal symmetric structure and guide the navigation of the search space. we show that this is effective even in domains in which there is little accessible symmetric structure available for pruning. proactive exploitation represents a flexible and powerful alternative to the symmetry-breaking strategies exploited in earlier work in planning and csps. the notion of almost symmetry is defined and results are presented showing that proactive exploitation of almost symmetry can improve the performance of a heuristic forward search planner.
1 introduction
symmetries frequently occur in search problems such as planning problems  joslin and roy  1; fox and long  1; rintanen  1   csps  roy and pachet  1; gent and smith  1; roney-dougal et al.  1  and model checking  ip and dill  1; audemard and benhamou  1 . many techniques have been developed for symmetrybreaking to improve search performance  with emphasis on using symmetries to prune search spaces rather than to suggest branches to pursue. in this paper we propose the use of symmetries to direct the forward search of an ff-style planner in a positive way. we show that the proactive use of symmetries can lead to significant performance improvements across a variety of planning domains.
　the automatic identification of all of the symmetries of a problem is np-hard. because of the complexity of the identification problem most researchers working in symmetry have broken symmetries by hand by expressing specific symmetrybreaking constraints in the modelling of the problem  gent and smith  1; ip and dill  1; roney-dougal et al.  1 . planning domain models are structured in a way that often makes some of the underlying symmetric structure accessible and a subset of the available symmetries can be efficiently identified using automatic techniques  fox and long  1; 1 . however  it has been observed that the most directly accessible symmetries are often not the ones that would be most useful to exploit.
　it happens that structures within a planning problem are often almost  but not quite  symmetric  and that treating them as symmetric would increase the efficiency of the search. almost symmetries are revealed by the application of an appropriate abstraction to the domain. as we will see  the term almost refers to the fact that the associated symmetry belongs to the abstracted domain and might be unsound with respect to the original domain. such symmetries can only be exploited in a positive way  to suggest how best to develop the plan  because using them for pruning would compromise completeness. in this paper we consider how the application of a certain simple abstraction  which we call the propertybased abstraction  can reveal a form of almost symmetry which we then show can be effectively exploited to solve the original problem. we begin with a simple motivating example  then we present the definitions and examples that support the following discussion. we then describe the extension of ff that enables the proactive exploitation of symmetric problem structure and discuss a collection of results obtained from strips domains used in the 1 planning competition.
1 identifying almost symmetry
consider the problem of transporting a number of crates from one location to another  as in the depots domain  fox and long  1  . the crates are stacked in several different piles in the initial state and must be moved into new configurations. any solution plan will involve unstacking the crates  loading them onto transport and then delivering and unloading them. at an abstract level at which the precise locations of the crates are ignored  the crates can be treated as symmetric because the same sub-plans are required to get all of the crates into their goal configurations.
　the fact that the cargoes start stacked in different piles means that they cannot be automatically identified as functionally equivalent  fox and long  1  . furthermore  since their initial configurations are different they cannot be identified as symmetric in the sense exploited in  joslin and roy  1  . nevertheless  there is a high degree of symmetry in the structure of the problem even though it is not immediately accessible to automatic analysis. the crates are almost symmetric because they can be made symmetric by abstracting out the specific domain objects to which they are related  eg: crate1 is on something  but it doesn't matter what   without losing sight of the properties  being on something as opposed to having something else on top  that distinguish them. when a collection of objects  in this case crates  are almost symmetrical we reason that we may well need to perform the same operations on these objects during the course of any eventual solution plan.
　we say that two actions are almost symmetric if they are two different instances of the same operator in which objects in the corresponding argument positions are symmetric in the abstracted domain. the stategy we describe below favours the selection of actions that are almost symmetric to actions that have already been applied in the plan.
1 symmetries in planning domains
in this section we develop a formal framework for defining symmetries in planning problems. we begin with familiar definitions of a planning domain  a planning problem and a plan. symmetries have been studied for decades by mathematicians as groups. we therefore adopt a group-theoretic characterisation  defining each symmetry as a permutation that preserves the equivalence of the domain configurations to which it is applied. the elements of our groups act on the objects in a domain.
definition 1 a planning problem  p  is a tuple  o i g c   where o is a set of operator schemas  i is a set of initial state facts  g is a set of goal propositions and c is a set containing all of the constants appearing in i“g.
definition 1 a plan  p  for a planning problem   o i g c   is a sequence of operator schemas from o each instantiated with constants from c such that each instantiated operator schema can be applied from the preceding state  starting at i  and the final state satisfies g.
　the first symmetry we consider is the form explored by joslin and roy  joslin and roy  1  and subsequently considered by rintanen  rintanen  1 .
definition 1 a configuration symmetry of a planning problem p =  o i g c  is a group  s  acting on the constants in c  such that under the action of the elements of s  the initial and goal states are invariant and every plan for p remains a valid plan for p.
this definition requires that a plan should remain valid under the action of elements of the symmetry s  but it does not require that the plan should be invariant. for example  consider the simple blocks problem illustrated in figure 1. the group {id  ce  df }1 is a configuration symmetry. however  although valid plans will remain valid  plans will not be invariant under the transpositions of c with e and d with f  since this will rearrange the steps of a plan.
　a special subclass of configuration symmetries contains those symmetries that have proved to be amongst the most fruitful in existing exploitations of symmetries  fox and long  1; 1 . this is the class that is generated by all pairwise transpositions of a set of symmetric objects:
definition 1 a configuration symmetry  s  of p =  o i g c   is a functional symmetry if it is a permutation group  sn  acting on a subset of n of the constants in c.
1 the property-based abstraction
all symmetries can be seen as a consequence of some form of abstraction. the abstraction renders certain groups of actions  objects or structures equivalent by not specifying the details of the relationships that differentiate them. in some problems  applying an abstraction to remove the distinctions between objects can lead to the discovery of new potential symmetries that are not present in the base domain. it is this observation that leads us to make the following definition:
definition 1 an abstraction of a planning problem  p  is a mapping  f  from p onto a new planning problem  q.
this definition is deliberately permissive  since we do not wish to exclude any possible abstractions. in general we will be considering compositional mappings in which the components of q are constructed by applying an abstraction independently to the different components of p. the following definition formalises the property-based abstraction described earlier. properties were first defined in  fox and long  1 . a property of an argument to a predicate is the pair containing the predicate name and the argument position index  this is denoted below by subscripting the predicate name with the argument position .
definition 1 the following mapping is the property-based abstraction for planning problem p.
　for each proposition in a planning problem  p  formed from predicate p applied to k arguments  x1 ... xk  f p x1 ... xk   = {p1 x1  ... pk xk }. the k unary target predicates  p1 ... pk are called properties.
the property-based abstraction simplifies the structure of a problem by removing the linkage between pairs of objects and considering the problem as the union of separate projections of the original problem for each constant. this has the effect of abstracting out which objects play which roles with respect to other objects.
　if we apply an abstraction to a planning problem and then identify a symmetry in the abstracted problem  this symmetry can have a useful relationship to the original problem:
definition 1 given a planning problem  p  and an abstraction  f  mapping p into the planning problem q  a symmetry of q is called an almost symmetry for p with respect to the abstraction f.
abstractions can throw away so much of the structure of a problem that the abstracted domain has no useful connection with the original domain. in practice we are interested in abstractions that preserve significant structure from the original problem. one way in which structure might be preserved is in the behaviour of plans under an abstraction:
acedfbbdfeca	initial state	goal state
figure 1: a simple example blocks problem
definition 1 an abstraction  f  of planning problem p is plan preserving if  when p is a plan for p  f p  is a plan for f p .
the property-based abstraction of a problem is not necessarily plan preserving because each property is available only once in the abstracted domain and once it is deleted it cannot be replaced. thus  in cases where a set of propositions collapses to a single property there may be no solution to the abstracted problem.
definition 1 an almost symmetry of planning problem p with respect to the abstraction f is a strong  weak  almost symmetry if f is  is not  plan preserving.
　in the case where f is the identity  any symmetry on p with respect to f is  trivially  a strong almost symmetry.
　the property-based abstraction is just one abstraction function that reveals exploitable almost symmetries. in general  the abstraction process can remove important constraints from the original problem  so can only act as a guide to the solution of the original problem: indeed  even for use as a guide  an abstraction must be chosen with care. for this reason  almost symmetries must be handled cautiously: pruning a search space using an almost symmetry is very likely to compromise completeness.
　our starting point for identifying almost symmetries between objects is the method used by joslin and roy  joslin and roy  1 . for a given planning problem we build a
　graph representing the object relationships in the initial and goal states of the problem and then use nauty  mckay  1   the graph automorphism discovery tool  to identify automorphisms in the graph. the key difference in our approach is the way in which the graph is constructed. given a planning problem  our approach identifies a subset of the almost symmetries of the domain. we construct a coloured graph that represents an abstraction of the problem under the property-based abstraction. this construction is performed by the makegraph algorithm shown in figure 1. nauty is then used to find the symmetries in the abstracted problem. the colouring of the nodes distinguishes between the properties that arise in the property-based abstraction described in definition 1. thus  nauty finds the almost symmetries of the problem with respect to the property-based abstraction.
　the following theorem guarantees that makegraph generates an almost functional symmetry with respect to the property-based abstraction. the proof is omitted for brevity.
theorem 1 the automorphisms of the graph make-
graph p   for planning problem p  restricted to the constants in p  form an almost functional symmetry with respect to the property-based abstraction of p.
1: makegraph p 
1: input: planning problem p =  o i g c  1: output: coloured graph n 1: initialise an empty graph n. 1: for all c （ c do1:create vertex vc with colour equal to its type1:add vc to n1:initialise an empty set of propositions  qi1:for all propositions p （ i do1:if p contains c then1:add p to qi1:let props = the bag of properties of c in qi1:create a vertex vqi with colour equal to  |qi| props 1:{the names of the properties in props identify the arities of the predicates and the types of their arguments}1:add vqi to n1:create an edge e between vc and vqi1:add e to n1:initialise an empty set of propositions  qg1:for all propositions p （ g do1:if p contains c then1:add p to qg1:let props = the bag of properties of c in qg1:create a vertex vqg with colour equal to  |qg| props 1:add vqg to n1:create an edge e between vc and vqg1:add e to n1: return nfigure 1: the construction of the coloured graph.

figure 1: the graph constructed by makegraph for the blocks example. nodes with the same shape and outline have the same colour and are numbered 1.
　having identified the almost symmetries that exist at the object level in the domain we can construct the almost symmetric relation on actions  as described above. the application of a property-based abstraction  as described in definition 1  allows the identification of the symmetry in figure 1 between the blocks on the tops of the stacks and between the blocks on the bottoms of the stacks. in such an interpretation it can be seen that the blocks a  c and e  which are on other blocks and therefore at the tops of the three stacks  will move to being at the bases of the three new stacks in the goal. similarly  b  d and f will move from being beneath other blocks to being at the tops of the new stacks. by abstraction  the fact that these groups of blocks start in different positions has been made irrelevant and the symmetry in their behaviour becomes apparent.
　the coloured graph that we construct for this problem is shown in figure 1. the round nodes are the 1 blocks in the problem. these nodes have the same colour because the blocks are all of the same type  so can be considered to share the same unary type predicate . each of these nodes is connected to the set of propositions that mention the corresponding block in the initial state  and the set of propositions that mention the block in the goal state. it can be seen that when the properties obtained from the propositions in these sets are different the corresponding nodes have different colours. for example  nodes 1 and 1 have different colours because  although they contain the same proposition  the colour of node 1 contains the property on with respect to block a  the property on1  while the colour of node 1 contains the property on with respect to block b  the property on1 .
　the output from nauty is the generators for the graph automorphism group. when restricted to domain objects  the output for this problem is: vertices 1  1  1 or {a c e} and vertices 1  1  1 or {b d f}
　the almost symmetry that is obtained by first applying the property-based abstraction to this blocks world problem  and then applying nauty to the resulting graph  belongs to the abstracted problem in which the detailed relationships between particular blocks have been removed. it can be seen that the blocks a  c and e are interchangeable in the propertybased abstraction  as are the blocks b  d and f. interestingly  in this particular simple example these collections of blocks are interchangeable in the plan as well  so that the propertybased abstraction is plan preserving in this case and the almost symmetry is strong  as defined in definition 1 .
1 proactive symmetry exploitation
in most existing work exploiting symmetry in search problems  the exploitation has been negative  in the sense that it is used to prune the search space in order to avoid searching symmetrically equivalent parts of the search space. this is useful when one part of the space has been searched fruitlessly  since the symmetry implies that the symmetrically equivalent parts of the space will also prove fruitless. various approaches can be used to prune the search space  including the introduction of symmetry breaking constraints into the problem encoding itself  this technique is used in the planning context in  joslin and roy  1; rintanen  1    by forcing an ordering between otherwise symmetric choices for example  and monitoring choices in the search machinery itself  pruning equivalent choices as they arise  the approach followed in  fox and long  1; 1; long and fox  1  . however  in the context of certain heuristic search strategies the utility of these approaches is significantly reduced. in particular  the forward search approach of ff effectively breaks symmetries by not backtracking over action choices. although some benefit might be obtained by avoiding the consideration of symmetric action choices during a breadth-first search of a plateau  pruning symmetric branches appears likely to be less useful in heuristic search planners than in systematic search planners.
　in order to exploit symmetry in heuristic search planners  we propose an alternative strategy to the pruning approach: in cases where action choices are available that are symmetric with choices that have already been made and adopted  we propose to encourage those choices.
1: actionselect h g as h 
1: input: the heuristic value of the current state h  a symmetry g  a set of proposed actions as  a plan head h
1: output: an extended plan head h'
1: initialise a vector vs of counts  one for each action in as.
1: for all actions a in as do
1:	for all actions b in h do
1:	if a uses object c and b uses object d and  b d  （ g then
1:	increment vs a 
1: sort as according to vs
1: for all a in as do
1:	if heuristic value of a   h then
1:	h' = h+a
1:	return h'
figure 1: a modified version of ff favouring symmetric action choices.
1 exploitation of symmetry information
in the work described in this paper we have explored a simple strategy where the symmetry information was used as a heuristic guide for selection between proposed action choices. during plan generation ff performs a forward state space search and at each stage proposes actions to apply at the current state. we amend the action selection strategy of ff to favour actions that are almost symmetric to actions selected earlier in the plan. this is a positive exploitation of symmetry because we use the symmetric structure of the problem to propose rather than to prune action choices.
　the heuristic prefers actions that use objects that are symmetrical to objects that have appeared in the same actions earlier in the plan. this exploits the observation that where symmetric objects each require treatment in a plan they are likely to require symmetric treatment.
　this heuristic is straightforward to implement in ff. at each stage during plan generation we have a current plan which consists of the actions applied so far to get from the initial state to the current state. at this stage a set of possible next actions are proposed by ff. these are the helpful actions  all of which occur in the first layer of the relaxed plan from the current state and are immediately applicable in the current state. ff normally chooses between these by applying its relaxed distance measure to the states that they produce and choosing the first helpful action that produces the state closest to the goal. we modify the strategy that ff uses for selecting between these by ordering the helpful actions so that those that use objects that are symmetrical to any that have appeared in actions in the plan so far are visited first in the selection strategy. the consequence of this is that only actions that improve the heuristic distance will be selected by the modified strategy. we do not modify the heuristic estimate itself. to order the actions we record  for each action  a count of the number of symmetric objects it uses and sort the actions into descending order of this count. any ties are broken using ff's standard action selection strategy. the necessary modifications to the action selection step are shown in figure 1.
　to illustrate the use of the symmetry information in ff version 1  ff-v1   consider a simple depots example  pfile1 in the ipc1 archive . the following sets of objects are found
actionsymmetric argsscore a  distributor1 depot1 1 b  distributor1 depot1    depot1 distributor1 1 c  hoist1 hoist1 1 d 1 e  hoist1 hoist1    crate1 crate1 1table 1: scoring helpful actions for symmetric arguments.
to be symmetric according to their properties in the initial and goal states of the problem: {pallet1  pallet1  pallet1}  {crate1 crate1}  {crate1  crate1}  {truck1  truck1}  {depot1  distributor1} and {hoist1  hoist1  hoist1} at some intermediate point during plan generation the plan contains the following actions:
drive truck1 distributor1 depot1  drive truck1 depot1 distributor1  drive truck1 depot1 distributor1  lift hoist1 crate1 crate1 distributor1  load hoist1 crate1 truck1 distributor1 
　the set of helpful actions proposed by ff at this point in the plan contains:
 a  drive truck1 distributor1  distributor1 
 b  drive truck1 distributor1 depot1 
 c  lift hoist1 crate1 pallet1 distributor1 
 d  lift hoist1 crate1 pallet1 depot1 
 e  lift hoist1 crate1 crate1 distributor1 
　the scores associated with these actions are obtained by counting the number of corresponding pairs of symmetric arguments between each action and an occurence of the same action in the plan so far. in scoring  we do not increment the score in the case where the argument in the helpful action is identical to the corresponding argument in the earlier action as we want to encourage acting on other objects in the same symmetric set.
　we now consider the helpful actions in turn  scoring them  as shown in figure 1. the heuristic must choose between the two actions weighted 1. in this case the lift action is selected  it is likely that the competing drive action was not highly valued by the distance heuristic because it undoes the effect of an immediately preceding step .
　it can be seen that our strategy is forcing the planner to commit earlier to actions that have already proved successful for symmetrical objects  we needed to lift up crate1 and  since crate1 and crate1 are symmetric it may be a good idea to do the same thing with crate1 .
1 experimental results
in this section we report results of experiments that compare the performance of the planner ff-v1  hoffmann and nebel  1; hoffmann  1  with a version of the same planner that uses symmetry information as a positive heuristic in deciding which action to apply next. we refer to this planner as ff-v1+symm. we consider six domains: two of these are artificially constructed to contain a high degree of directly exploitable symmetry  whilst the remaining four are more natural domains  taken from the ipc1 competition bench marks. in the latter group  depots  driverlog  rovers and freecell   there is very little directly exploitable symmetry - existing

figure 1: comparison of states visited.
techniques discover at most 1 symmetric objects in any of these problems. our results show that we obtain significant advantages in both the artificial and the natural domains. the gripper results we present are for randomly generated problems in which the number of balls and the number of grippers both vary. the ferry problems are randomly generated with varying numbers of ferries and cars. increasing the numbers of grippers and ferries in these problems reduces the number of times that a move or a sail is the only helpful action and therefore increases the relative density of choicepoints at which symmetric actions are available. we begin by presenting graphs of the results comparing numbers of states explored and time taken  which includes the time required to carry out the symmetry analysis itself .
　figure 1 shows the comparison of the performances of ffv1 and ff-v1+symm in terms of the number of states visited in the search. the plot is log-scaled and the middle of the three lines represents equal performance. the other lines represent a 1% performance difference either side of equal. again  points below the line represent a performance advantage for ff-v1+symm. it can be seen that five of the freecell problems and one rovers problem  six problems in total  were solved at least 1% more efficiently by ff-v1. by contrast  twenty eight problems were solved at least 1% more efficiently by ff-v1+symm.
　figure 1 shows the comparative time performance on problems taken from the six domains. in this plot  and in the statistical reported below  we exclude instances solved in under one second. there are two reasons for this: firstly  noise effects in the measurements are more severe in values this small and  secondly  the implementation of our symmetry analysis is not optimised for speed  making its overhead a relatively distorted penalty for these small problems. the line represents equal performance and points below the line represent better performance by ff-v1+symm. it can be seen that ffv1 outperforms ff-v1+symm in only four cases.
　to confirm statistical significance of our results  we have used the wilcoxon-mann-whitney matched pairs signed ranks test. this test is more appropriate than a matched pairs t-test  since the distribution of the differences in performance

figure 1: comparison of time performance.
timestates visitedtestorigsplzpsplzp1 doms1111.1 11 doms1111.1.1symm11 11.1 1table 1: results from matched pairs ranked signs tests showing sample size  z-value  and significance  all less than 1% . tests are for all domains  1 doms   1 ipc1 domains  1 doms  and gripper+ferry  symm .
is certainly not normal: where problems are solved with little search the potential advantage is restricted  while it can be larger in harder problems. the matched pairs signed ranks test is more sensitive and more robust in cases where the underlying distribution is not known. we show  in figure 1  that in both sets of domains the performance of ff-v1+symm is statistically significantly better than that of ff-v1  both in terms of time taken and in terms of number of states visited. for each of the tests we performed we provide the sample size  the z-value obtained  using the wilcoxon-mannwhitney test  and the corresponding p-value. since equal performance cases are discarded in performing the test  we also report the original sample size  including equal performance cases   for comparison. since the gripper and ferry domains contain artificially high degrees of symmetry  we perform the tests both including and excluding these domains  although note that only 1 problems were considered for these domains . we do not report results for individual domains  but it is interesting to note that these are not significant  indicating that the effects of almost symmetry across the whole problem set are not the consequence of strong performance in a subset of the domains  but are distributed across all of them.
1 conclusions and further work
in this paper we have introduced a method for extracting almost symmetries from a planning problem and exploiting them proactively in a forward search planner. we have presented results showing that proactive symmetry exploitation can improve the search performance of a planner and sometimes result in the discovery of higher quality plans. specifically  using symmetry information to inform the heuristic selection of the next action can reduce the number of states expanded during search  the number of steps added to the plan and also the overall time taken to generate a solution plan.
　a useful aspect of the proactive approach is that it can be combined with negative symmetry-breaking techniques. it is feasible to combine the action choice heuristic with a completeness preserving pruning strategy such as has been exploited by rintanen  rintanen  1  and fox and long  fox and long  1   since these approaches are not in any way mutually exclusive.
