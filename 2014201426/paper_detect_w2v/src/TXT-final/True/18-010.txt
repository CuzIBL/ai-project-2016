 
　　the fde has been designed to support multiple search strategies for logic programs. this machine represents the knowledge base in a strategy independent fashion as a predicate connection graph which encodes potential unifications between predicates. it facilitates knowledge representation in the language of full first order predicate calculus immediate developments include implementation of various database access strategies and addition of evaluable predicates and functions to the language. long-term research will focus on exploration of search strategies  especially for parallel logic machines. 
i. introduction 
　　the flexible deductive engine  fde   is designed to serve as the deductive core for both logic programming environments and knowledge management systems involving database access. the intent is to create a single module which supports the full functionality of logic programming  as well as alternate forms of deduction appropriate to a knowledge management system  kellogg  1. support of logic programming applications and deductive querying of databases in a single environment requires flexibility in search strategy through control customized to the application. such flexibility results in a highly modular search engine  operating on a strategy-independent representation of the search space. 
　　one goal of the fde is to provide an experimental framework where the issues of control of inference  database access  and function evaluation are treated as part of a general problem of search control. for this reason  we have designed the core of the fde with a set of well-defined interfaces; the person developing a logic system then specifies the search strategy by choosing a set of control functions  which can be augmented as needed to fit the application. the current repertoire of strategies includes at one extreme prolog-style depth-first left to-right search and at another loglisp-style breadth-first search with cost functions for limiting depth-first expansions. other strategies may combine depth-first and breadth-first expansion at different points in the deduction cycle depending on heuristic choice functions. 
　　the fde draws upon previous research carried out at sdc over the past several years in the general area of knowledge management and specifically in dadm  the deductively augmented data management project  kellogg & travis  1 . 
the fde preserves the general knowledge management architecture underlying dadm i kellogg  1; kogan  1  through decomposition of computational functions into an inference engine  with its associated intensional set of rules  and a search engine  with its associated external extensional dbmss. this division of relations into those with intensional support and those with extensional support has been a central feature of the dadm architecture  cf. klahr  1 as well as other logic-based systems attempting to deal with external dbmss  chang  1; henschen & naqvi  1. the intensional rules are encoded in a predicate connection graph  pcg  which records both the possible resolvents for each rule and the relations which have extensional database support. our implementation of the pcg is the main topic of this report. 
the fde provides: 
　　-uniform interface to a collection of diverse relational dbmss with different query languages  data presentation 
strategies  and functionalities; 
　　-alternative views to the data in extensional dbs by hiding irrelevant fields or defining new relations derived from the stored data via shallow deductions; 
　　-an interface to the extensional db allowing external relations to act as ground clauses to the logic programming environment. 
the core of the fde consists of four main parts  figure 1 
　　 1  the knowledge base contains a rule base  the collection of procedures of a logic program or the set of definitions of virtual relations for a high-order query language  and a collection of database facts maintained in multiple relational dbs external to the deductive core the predicate connection graph encodes the rule base in the deductive core and also identifies the points of contact to the relations represented in the database components. to support the relational db component of the knowledge base  the 
fde maintains its own internal relational dbms as well as communication links to external intelligent db systems. as much as possible  the specialized functions of the external dbmss will be exploited by the deductive core. 
　　 1  the unification engine  central to any logic-based system  supports multiple parallel breadth-first search processes in the fde. it is based on the unification algorithm of loglisp  robinson & sibert  1   extended to allow for multiple simultaneous contexts  i.e. multiple collections of variable bindings in force for a deduction each search state has its own associated context to represent the variable bindings in effect in that state  mckay & travis  1  
　　 1  the search engine explores the search space by constructing an and/or tree from the pcg representation of the rule base. a list of search states keeps track of the different search paths concurrently under investigation the search engine proceeds through a deduction cycle which performs reduction on a particular search state. if this search state represents a solution  the deduction cycle returns it and its continuation; otherwise  the deduction cycle continues exploring the search space. 
　　 1  the search control strategy is invoked by the search engine to control its deduction cycle through a suite of functions which stipulate how to choose and prune states from the search space. it is this set of functions which allows the control strategy to vary with the application. 
　　the following sections describe our implementation of the predicate connection graph and its representation of first order predicate calculus. the fde is implemented in interlisp-don xerox 1-series lisp machines. 

1 r. whitney et al. 
ii. the predicate connection graph in the fde 
　　the purpose of any pcg is to encode the potential unifications between the predicates  literals  as used in rules 
 kowalski  1; sickel  1 . as the internal specification in the fde of the logic program  it represents an extended form of indexing the rules submitted to the fde are normalized and encoded in the pcg; growth of a proof tree through the deductive cycle is determined by the deductive interactions contained in the 
pcg 
　　we chose a predicate connection graph to represent the rules of a logic program primarily because such a formulation lends itself to the central design consideration of flexibility in search strategy. also  we have substantial prior experience with such structures in database question answering; the present implementation of the predicate connection graph form of rule representation is a refinement of the pcg of dadm. 
　　our pcg facilitates a language with the expressive power of first order predicate calculus its inner representation of a rule set is a skolem normal form of conjuncts which in turn comprise disjunctions of literals or negations of literals simple syntactic transformations reduce a given formula to an equivalent set of normalized pcg entries. the availablility of full first order predicate calculus allows convenient expression of complicated rules and submission of queries involving hypothetical or counterfactual antecedents. moreover  divorcing the language from a limited canonical form is important when a range of search strategies is available: horn clauses may be appropriate for prolog's depth-first left to right strategy  but such forms should not prejudice search control in the general case. 
　　one example of the kind of problem that the fde simplifies is a general treatment of negation. as a database question answering system  the fde allows for both open and closed worlds  reiter  1. domains where the open world assumption is in effect require that we express and use negated literals in our rule base  since the prolog technique of negation as failure is inadequate and logically incorrect in such cases. but even in closed worlds  where negation as failure yields desired results  a more robust language provides additional benefits. consider the definition of bachelor as unmarried male. a straightforward prolog interpretation of this 
definition would be: 
bachelor x :-not married x   male x . 
　　with ground clauses marriedlb  and male a   however  the particular goal bacheloria 1 will succeed while the general goal bachelorix   will fail  due to the combination of prolog's search strategy and the handling of negation as failure in order to compute the relative complement of a database relation  the fde will first determine which individuals satisfy the positive relations  in this case  which are males . then it will determine which individuals satisfy the negated relations in a positive sense  i.e. which are married . the relative complement of the first set with respect to the second  members of the set of males which are not members of the married set  then determines the answer. the 
delayed negation is a feature of the database operations  unlike the more general solution of mu-prolog  naish  1   where it is a function of search control. 
the solution in prolog is to reorder the defining literals: bachelor x :-male x  not married x  . 
now  with the ground clause male a   the goal bachelorix   will succeed for individual a however  asserting bachelor a  does not allow any conclusion to be drawn about a's marital status. in the fde  we can express the definition in biconditional form  

and infer  from the assertion bacheloiia   the conclusion not married a  . and this is achieved within a depth-first left-to-right search strategy simply through the flexibility of the language provided by rule and query encoding in the pcg. 

a. the rationale of the pcg 
　　the pcg is composed of two kinds of abstract objects: relations and occurrences. relations correspond to symbols used as the name of a relation  e.g. p in p a . occurrences represent instances of literals in rules; they also represent instances of literals in queries. since a single relation may occur many times in a collection of rules  we distinguish the properties pertinent to the relation itself from those pertinent to the occurrences of it 
　　relations are objects with two properties  namely  ordered sets of the uses of this relation in literals in  1  a positive sense and  1  a negative sense. the ordering reflects the order in which rules are made known to the system  to preserve the sequential nature needed for prolog-style programming for some alternate modes of deduction  it will be possible to express the measure of confidence in each rule by means of a plausibility factor this factor can then be used to control deduction by ordering the rule set or the uses of rules according to the strength of the plausibility factors. 
r. whitney et al. 1 
　　in the only-if   ＊  direction of the biconditional  the horn clause equivalent of the prolog definition is simply transformed as represented in the upper branch of the tree from bachelor  figure 1 . distribution of negation by de morgan's law causes the reversal of sign in the components of the original conjunct  so the equivalent disjunctive form would read: x is a bachelor or x is not male or x is married. 
　　in the case of the if  ＊   direction of the biconditional  a new literal  not gpred1 x    is generated to represent the conjunction in the consequent of the rule  so we first rewrite the original as two rules: 
bachelor x  -  not gpred   x   
and not gpred1 x   -  male x  a not  married x   

　　literal occurrences are objects with a number of properties. these properties are: 
sign: whether usage is  p -   or  now --  . 
literal: the literal exclusive of any negation  e.g.  p --   
ormates: links of this occurrence to other parts of the rule containing this occurrence  
unifiers: links to occurrences which represent potential resolvents when this occurrence is a goal 
　　the internal representation of a rule set as a conjunctive normal form expects each rule to be convertible to a disjunction of literals and negated literals. pure horn clause rules  which consist of a conjunction of literals as antecedent and a single literal as conclusion  meet this expectation by using the transformation: 

de morgan's law then converts the conjunctive antecedent to a disjunction: 

　　other logical forms are transformed by the generation of new  unique literals to replace complex forms in the disjunction and the creation of new rules connecting the new literals with the forms replaced. such a situation is encountered with the pcg representation of the rule defining bachelorhood previously mentioned  figure 1 : 

　　in the only-if   -  direction of the biconditional  the horn clause equivalent of the prolog definition is simply transformed as represented in the upper branch of the tree from bachelor  figure 1 . distribution of negation by de morgan's law causes the reversal of sign in the components of the original conjunct  so the equivalent disjunctive form would read: x is a bachelor or x is not male or x is married. 
 negation of generated literals is introduced to minimize negated terms in the ultimate normal forms   the first of these is equivalent to the normal form: 
  
the second is rewritten into two more rules  

and 

which find equivalent normal forms in 
gpredo x  v male x  
and 
gpredo x  v not married x  . 
this situation can now be read off from the lower branch of the tree from bachelor.  since the unifiers field of a given occurrence represents potential unifications for the purpose of resolution  there is a difference of sign between occurrences so connected . 
　　queries are also treated as occurrences of relations which are connected to the pcg. because the fde uses resolution as its main technique and resolution is a form of proof by contradiction  the negation of a query is actually entered into the pcg for queries  resolution is done primarily by backchaining  and exclusively so when emulating prolog  so unifications for queries are actually connected in only one direction  from query occurrence to pcg occurrence  instead in the bidirectional form of the pcg proper the main reason for using the unidirectional links is robustness of the implementation. because there are no links from the pcg to the query  abnormal termination of query processing never leaves any unwanted connections. another reason for avoiding reverse links is to avoid begging the question  since queries are not rules  so they should not be backchaining resolvents 

1 r. whitney et al. 
b. the pcg and the deduction cycle 

iii. work in progress 

　　the search engine of the fde uses an and/or tree to represent progress through the knowledge base. growth of this tree is governed by the suite of functions which encode the control strategy the tree contains alternating levels of and nodes and or nodes. an or node represents a literal to be resolved. each or node contains a list of alternate potential unifiers obtained from the pcg  the and-node children of the or node represent the resolvents of the goal literal obtained from the alternates 
　　submitting a query causes it to be conjoined to the pcg and a root and-node initialized with its children or nodes. resolution of an or-node causes a new branch to be added to the tree if the alternative unified with has ormates. in that case  the resolved or acquires a child and-node representing each alternative. if there are no ormates  then the or node is solved 
　　a trace of the deduction cycle and the and/or tree for the sample query not married   -x    are shown in figure 1 and illustrate some of the details of this process  and can be compared with the pcg structure of figure 1 the goal under and 1 in figure 1 corresponds to the pcg node  not marriel   -x   connected to the root of the pcg display for married  fig 1   and is the first chosen goal node. the immediate subgoal is found by following the ormates arc to the single goal  gpredo  -x  the goal under and-1 is one of the unifiers  in this case  the only  of this node   notfgpredo *-x  . from here  we again follow the ormates arc of  not  gpredo  -x   to its immediate subgoal  not bachelor  -x  . the goal under and 1  fig. 1  is the only unifier of the node  bachelor a  since this node has no 
ormates  	it 	is 	resolved. 	this 	represents 	deducing 
not married a   from bachelor a  

　　one of the primary targets of the current development is an effective solution to problems of aggregation and the related problems associated with the setof and bagof predicates of prolog  as well as a general treatment of evaluable predicates and functions. one case concerns the problem of determining a value for  e.g.  the number of bachelors in our database. in line with the overall adaptability of the fde  we intend to allow different strategies for different predicates: a prolog style for computing this number would abort the inference procedure if an evaluable predicate were called with not all of its arguments instantiated. the da dm strategy would be to check the status of the arguments routinely during the course of deduction until all are instantiated  and then perform the computation. 
　　we are also developing a more general treatment of database access than exists in dadm. the fde will allow for a relation to be defined in both the intensional rule base and in the extensional database. a special choice function will control the point at which database access is performed: eagerly  as in prolog  or in batched  deferred mode as in the current dadm 
iv. bibliography 
chang  c l.   on evaluation of queries containing derived relations in a relational data base   advances in data base theory  vol. 1  h. gallaire  j. minker  and j nicolas  eds.   plenum  new york  1 
henschen  l. j. and naqvi  s.   representing infinite sequences of resolvents in recursive first order horn databases   1th conference on automated deduction  g. goos and j hartmanis  eds   new 

figure 1. the and/or tree and trace of the deduction cycle for not married *-x    

york  1. 
kellogg  c. and travis  l.   reasoning with data in a deductively 
augmented data management system   advances in data base 
theory  vol. 1  h. gallaire  j minker and j. m nicholas  eds.   plenum  new york  1 
kellogg  c   knowledge management: a practical amalgam of 
knowledge and data base technology.  proceedings of the second national conference on artificial intelligence  1 
klahr  p.   planning techniques for rule selection in deductive 
question-answering   pattern-directed inference systems  d a 
waterman and f. hayes-roth  eds.   academic press  new york  1. 
kogan  d.   the manager's assistant: an application of knowledge mangement.  in ieee international conference on data engineering proceedings  los angeles  april 1. 
kowalski  r    a proof procedure using connection graphs   j acm  1  october  1  pp. 1 
mckay  dp. and travis  l.  unification engine  lbs technical memo  system development corporation  paoli  pa  april  1  
naish  l.  an introduction to mu-prolog  technical report 1  
department of computer science  university of melbourne  january  1. 
reiter  r.   deductive question answering on relational data bases.  logic and data bases  h. gallaire and j. minker  eds.   1. 
robinson  j. a. and sibert  e. e.   loglisp: motivation  design and implementation.  logic programming  k.l. clark and s-a tarnlund  eds   academic press  new york  1. 
sickel  s.   a search technique for clause interconnectivity graphs.  ieee transactions on computers c-1  august  1. 
