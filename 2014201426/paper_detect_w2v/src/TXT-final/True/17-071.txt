. we make use of the tree structure for a stepwise presention of the proof tree. the first step of the explanation includes the root and its sons. the next step focus on some of the sons. this also offers the user possibilities to direct the presentation according to the her interests. 

grasp by deducing further redundant rules. the rule 
　　　　　　　related x y  - father x z   ancestor y z   1  can be derived from rules  1  and  1 . the rules 
	ancestor x y  - 	father 	 x z   	ancestor z y  	 1  
             ancestor x y  - m other  x z   ancestor z y   1  can be derived from rale  1  together with  1  and  1  respectively. 
from  1  and  1  we can derive 
	ance$tor x y  - father x z   father z y  	 1  
　　the proof tree for a proof that john is an ancestor of ada is a subtree of the tree in figure 1. applying the derived rules   1  -  1  we get the following tree 


figure 1. a proof tree for the formula related platom  
　　in the presentation we start to explain why pia and tom are related in terms of the information in the nodes at the underlying level in the tree. 
rdated pia  tom   - slster pia eva   mother tom eva  
we can continue the presentation with explaining why tom's mother is a sister of pia. 
sister pia eva   - father pla per   father  eva  per   woman eva  
　　in order to make the explanation easier to read we present a clause using expressionforms connected to the predicates. for example the predicate father x y  has the form  the father of x is y . in a corresponding way we write ancestor x y  and related x y  as  an ancestor of x is y  and  x and y are related . 
　　an instance of a rule  i. e. a node with its directly underlying nodes  we express  a since b  if the rule is a  - b. for example  

we express as  an ancestor of ada is john since the father of ada is john . 
b. 	filtering uninteresting values 
　　in a proof tree  the arguments of the predicates have been in* stantiated to values that satisfy the formula in the root node. in an explanation we are not interested in all of the values. to present all of them is inconvenient. 
　　a conjunction where two parts share values can be expressed in a form where the shared values are eliminated. to explain why ada and tom are related  see figure 1  by naming every person in the tree is more unclear than if we rewrite the expression omitting some names. the presentation   ada and tom are related since the father of ada is john and a grandfather of eva is john and the mother of tom is eva  is less clear than  ada and tom are related since the father of ada is a grandfather of the mother of tom . 
     we can eliminate  uninteresting  values by reformulating predicates as functions and use these as values. for example  a conjunction of two predicates sharing a value can be reformulated as one of the predicates taking a representing function of the other as value. analogously for conjunctions of three or more predicates. we illuminate it by an example 
father ada x   grandfather eva x  
 the father of ada is a grandfather of eva . in this explanation   a grandfather of eva  is a representing function for the grandfather relation and is substituted for x in the father relation. 
　　our approach is to avoid including instantiations that don't appear in the current root. we want to explain the conclusion without including values appearing only in the precondition of a rule. our example in previous section would become 
rdated pia tom   - sister pia eva   mother tom eva  
 pia and tom are related since a sister of pia is the mother of tom   thus suppressing the value  eva . 
　　reordering of conjunctions with common values can be necessary. a rule with a conjunction like 

has to be reordered according to the common values. this rule becomes 

the explanation is  tom and tim are cousins since the mother of tom is a sister of the mother of tim . 
c. same values at corresponding places 
　　if there is a conjunction of instantiations of the same predicate and the common uninteresting values are corresponding arguments  the expression will be clearer if we point out this fact. we express 
father ada x   father per x  
as  the father of ada is the same as the father of per . 
d. customised explanations 
　　an important issue for obtaining clarity of explanations is to avoid presenting facts that already are known to the user. 
general knowledge in onr domain could for example be what names 
	a. eriksson and a.-l johansson 	1 
are names of women and what are names of men. if we are going to present the following rule 

we can assume that the tact that eva is a woman is general knowledge and suppress it. the explanation vill be  eva is a sister of pia since the father of eva is the same as the father of pia . 
　　specific knowledge possessed by the user would also be taken care of. it is possible that the user is not totally naive  some facts may be well known to her and it would only be negative to repeat them. 
　　we assume that the user is a near friend of parts of our example family and knows that eva is the mother of tom. then we present 
　　　　related pia  tom  - sister pia eva   mother tom eva  as  pia and tom are related since a sister of pia is eva . 
	v 	conclusions 
　　the transformation of proof trees is a way to view the problem of explaining the reasoning of an expert system. the principal ideas presented in this paper are fairly easy to implement. furthermore the transformation for reducing chains of specifications of concepts seems to be generally applicable. the transformation for introducing a new name for a compilation of concepts depends on the problem domain. 
　　the solution to the problem of presenting the proof trees described in this paper is simple. further work to improve upon the naturalness of the presentations lead into the area of natural language processing. 
