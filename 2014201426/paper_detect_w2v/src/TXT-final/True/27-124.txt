computing ramifications by postprocessing 
	m i c h a e l 	t h i e l s c h e r 
intellektik  i n f o r m a t i k   t h d a r m s t a d t 
alexanderstrafle 1  d-1 d a r m s t a d t   g e r m a n y   mit intellektik.informatik.th-darmstadt.de 

a b s t r a c t 
a solution to the ramification problem caused by underlying domain constraints in stripslike approaches is presented. we introduce the notion of causal relationships which are used in a post-processing step after having applied an action description. moreover  we show how the information needed for these post-computations can be automatically extracted from the domain constraints plus general knowledge of which fluents can possibly af-
fect each other. we illustrate the necessity of causal relationships by an example that shows the limitedness of a common method to avoid unintended ramifications  namely  the distinction between so-called frame and non-frame fluents. finally  we integrate our solution into a recently developed  strips-iike yet purely deductive approach to reasoning about actions based on equational logic programming. 
1 	introduction 
the ramification problem  finger  1  is usually regarded as one of the challenges to all formal frameworks for reasoning about actions and change. it states that it is unreasonable to specify explicitly all changes that are caused by the execution of some action. rather the specification should concentrate on immediate effects  and socalled indirect effects are then implicitly derived by some additional general knowledge of dependencies. consider  as an example  an electric circuit containing a switch and a light bulb. here one might wish to specify that the only direct effect of toggling the switch is a change of its position while the state of the bulb is indirectly affected via a general law  called domain constraint  that describes the causal connection between the switch's state and the bulb  lifschitz  1 . 
   it has often been argued  see  e.g.   ginsberg and smith  1   that strips-like approaches  fikes and nilsson  1  are inherently unsuited to tackle the ramification problem since they are based on the idea that all fluents remain unchanged which are not explicitly mentioned in an action description. in this paper  however  we propose to regard the set of fluents which is obtained 
1 	temporal reasoning 
after having applied some action description merely as a preliminary approximation of the resulting situation- which then is computed by performing additional postprocessing steps that model indirect effects according to given domain constraints. 
   our approach consists of two steps. first  we show how the post-processing computations just mentioned can be performed on the basis of additional knowledge of so-called causal relationships. these define how the occurrence of a particular atomic effect might cause the additional occurrence of certain other effects. the intention is to apply such rules if and as long as the situation at hand  which has been obtained by computing the direct effects of an action  violates the domain constraints. second  we illustrate how causal relationships can be automatically generated from given domain constraints by taking into account general knowledge of how facts can possibly affect each other. 
   the applicability of our solution is demonstrated by extending a concrete strips-iike yet purely deductive method which is based on equational logic programming  elp   holldobler and schneeberger  1 . in contrast to strips  this approach has recently turned out to have a wide range of applicability as regards general aspects of topical interest  e.g.  postdiction problems  reasoning about nondeterministic and concurrent actions  etc.  thielscher  1; bornscheuer and thielscher  1 . moreover  this method is provably equivalent to a modification of the connection method designed for planning problems  bibel  1  and to an approach to planning based on linear logic  masseron et al.  1   see  grobe et al  1  . 
	the rest of this paper is organized as follows. 	in 
section 1  we introduce the formal notion of a causal relationship. based on this concept  we define postprocessing steps used to compute ramifications according to underlying domain constraints. in section 1  we present an algorithm to generate causal relationships automatically given some domain constraints and a formal specification of which fluents are causally connected. in section 1  we turn to the elp-based approach and show how to integrate our solution to the ramification problem. to this end  we extend the basic logic program by clauses expressing domain constraints and modeling the successive application of single causal relationships. the adequateness of this extension is proved 


	thielscher 	1 
e x a m p l e 1  continued  the yale shooting scenario is extended by two fluents  dead and walking   stating whether the turkey is dead and whether he is walking around  respectively  baker  1l   the constraint alive  -  dead then formalizes the obvious connection between these two fluents while walking =  alive states that our turkey must be alive to take some exercises. ¡ö 
e x a m p l e 1  continued  we assume that our electric circuit is designed such that the light bulb is on if and only if the two switches are in the same position  see also figure 1 in section 1 . this is expressed via the domain constraint light  switch -  switch1 . ¡ö 
   the ramification problem now arises as soon as domain constraints describe dependencies which are not reflected in some action description. since the frame assumption tells us that fluents keep their value unless they are explicitly mentioned in such an action description  the domain constraints become violated through the execution of that action. for instance  applying  1  to the  reasonable  situation {loaded  alive  dead  walking} yields the set s' = {loaded  alive  dead  walking} according to definition 1  which now violates both underlying domain constraints from above. 
   from a theoretical point of view it is of course conceivable to integrate all domain constraints into the various action descriptions  by making intensive use of our specificity criterion. from a practical point of view  however  this would soon lead to an intractable number of action descriptions when trying to model slightly more complex scenarios. moreover  adding a new domain constraint to a scenario might force  in the worst case  the reconstruction of a completely new set of action descriptions. 
   instead of exhaustively integrating domain constraints into action descriptions  we should view these constraints as reason for certain indirect effects in addition to the effects explicitly occurring when executing actions according to definition 1. these indirect effects are computed by performing additional post-processing steps. hence  the basic idea is to regard a set like s' - {loaded  alive  dead  walking} from above as a mere approximation which requires further investigation to obtain the finally resulting situation. if and as long as the preliminarily obtained set violates the given domain constraints  particular indirect effects are generated. to this end  we need information of the various causal connections between the fluents in the domain under consideration. for instance  our domain constraint alive  =  dead suggests that if some action affects the 
fluent alive then it also influences  indirectly  the fluent dead . in particular  this information should lead to the replacement of dead by dead in s'. such a replacement-triggered by what will be called a causal relationship below-is considered as a single step in the post-process to be performed in order to address ramifications. it is of course inevitably necessary to know which of the two fluents alive and dead in s' was an immediate effect of the action that has just been executed. otherwise  one could as well argue that the occurrence of dead should lead to the replacement of alive by alive   which is clearly not intended in this example. 
1 	temporal reasoning 


	thielscher 	1 

1 	temporal reasoning 

figure 1: an extended electric circuit consisting of five fluents. the current state is described by switch1  the first switch is up   switch1  the second switch is down   switchz  the third switch is closed   light  the light bulb 
is off  and relay  the relay is deactivated . 
	1 	discussion 
we have proposed the application of single causal relationships in a post-processing step in order to address the ramification problem. moreover  it has been illustrated how an adequate set of such relationships can be automatically extracted from given domain constraints by taking into account general knowledge of how fluents can possibly affect each other. finally  we have integrated both domain constraints and our method to comply with them into an approach to reason about actions and change based on equational logic programming. 
¡¡the merits of causal relationships shall be illustrated by an example that shows the limitedness of a common  simpler way to avoid unintended ramifications  namely  the distinction between so-called frame and non-frame fluents  lifschitz  1; kartha and lifschitz  1 :1 consider the extended electric circuit scenario depicted in figure 1. two switches and the light bulb are related as usual  i.e.  light  =   switchi  =  switchi ; the additional relay is controlled by the first and third switch through relay  =  switchi a switch1 ; and the relay is intended to force the second switch into the upper position if activated  i.e.  relay =  switch1 . now  in order to prefer the light bulb changing its state to a switch unexpectedly jumping its position  see section 1   we are supposed to consider switch1 and switch1 frame and light non-frame. accordingly  switch1 and relay should be considered frame and non-frame  respectively. however  if we take the situation depicted in figure 1 and change the position of the first switch then it is impossible to distinguish between these two outcomes: either the relay becomes activated and causes the second switch to jump into the upper position  as intended  or else the relay remains deactivated and the third switch opens magically! this is because in both cases a second frame fluent  aside from switchi   is affected  yet no preference is discernible. in contrast  and the reader is invited to verify this  given the natural influence relation 
	z 	= 	{ switch1  	light   	 switch1  light   	 switchi  relay   
1
¡¡¡¡ roughly spoken  the idea there is to prefer changes of non-frame fluents to changes of frame fluents whenever additional effects have to be considered in order to satisfy domain constraints. 
	thielscher 	1 

 switch1  relay    relay  switch1 }   algorithm 1 generates an adequate set of causal relationships whose application according to definition 1 yields the intended  unique resulting situation. 
   a second merit of causal relationships is that they enable us to comply with the observation that domain constraints might give rise to qualifications rather than ramifications  lin and reiter  1 . consider  for instance  the action of enticing the turkey to walk.1 the effect of executing this action shall be {walking} . yet in case the turkey is not alive  the constraint walking =  alive should clearly not lead to his revival. rather it imposes an additional qualification on our new action. this is reflected in the causal relationships  1 : none of them is applicable to s - {alive  dead  walking}    - {walking} ; hence  no resulting situation is obtained here following definition 1. our logic program developed in section 1 behaves accordingly-the reader is invited to verify that  - causes  alive o dead o walking   entice   g  has no sldenf-refutation given the encoding of  1  and the action description action  walking  entice  walking  . 
   the example just discussed illustrates the possibility that a resulting situation does not at all exist  i.e.  the available causal relationships might not always be sufficient to satisfy the underlying domain constraints. as we have seen  this induces  additional  qualifications. on the other hand  it is also conceivable that multiple successor situations can be obtained by applying different sequences of causal relationships all resulting in the satisfaction of the domain constraints. this induces nondeterminism. both non-existence as well as multitude of resulting situations rise the important question of general criteria that guarantee a unique successor. a comparison with the concept of revision programs  introduced in  marek and truszczyriski  1   might help to address this problem. revision programs along with their application in order to modify states of databases resemble causal relationships and their application in order to compute ramifications. in  marek and truszczynski  1   two syntactic conditions have been proved guarantee of a unique revised database. whether and how these results can be adapted to our approach depends on the formal correspondence between the two concepts and is left as future wotk. 
acknowledgments 
the author is grateful to christoph herrmann and the anonymous referees for helpful comments on an earlier version of this paper. thanks also to the participants of the a a a i 1 spring symposium on theories of actions for several interesting discussions related to the work reported here. 
