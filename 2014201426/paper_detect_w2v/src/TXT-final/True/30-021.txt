 
finding a solution to the frame problem that is robust in the presence of actions with indirect effects has proven to be a difficult task. examples that feature the instantaneous propagation of interacting indirect effects are particularly taxing. this article shows that an already widely known predicate calculus formalism  namely the event calculus  can handle such examples with only minor enhancements. 
introduction 
the ramification problem  that is to say the frame problem in the context of actions with indirect effects  has attracted considerable attention recently  mccain & turner  1   
 lin  1    gustafsson & doherty  1    sandewall  
1    shanahan  1    thielscher  1    kakas & miller  1    denecker  et al  1 . the purpose of this paper is to demonstrate that the standard benchmark scenarios for the ramification problem can be handled by the event calculus  as presented in chapter 1 of  shanahan  1   without introducing any significant new logical machinery. 
following  shanahan  1   this article presents the event calculus in the first-order predicate calculus  augmented with circumscription. in this form  it can be used to represent a variety of phenomena  including concurrent action  actions with non-deterministic effects  and continuous change  shanahan  1 . 
the event calculus can also be used to represent actions with indirect effects  as shown in  shanahan  1 . however  certain types of domains are problematic. these involve the instantaneous propagation of interacting indirect effects  as exemplified by thielscher's circuit benchmark . staying within the framework of the event calculus  and introducing just two new predicates and two new axioms  this article presents a general technique for representing actions with indirect effects that encompasses such domains. 
1 event calculus basics 
the event calculus used in this paper is drawn directly from 
chapter 1 of  shanahan  1 . its ontology includes 
1 	automated reasoning 
actions  or events   fluents and time points. the formalism's basic predicates are as follows. initiates means fluent starts to hold after action  at time   terminates means fluent ceases to hold after action at time releases means fluent is not subject to inertia after action at time  initiallyp means fluent  holds from time 1  initiallyn p  means fluent  does not hold from time 1  happens a   means 
action a occurs at time  and holdsat  means fluent holds at time 
given a collection of effect axioms  expressed as initiates  terminates and releases formulae  and a narrative of events  expressed as happens  initially n  initiallyp and temporal ordering formulae  the axioms of the event calculus yields holdsat formulae that tell us which fluents hold at what time points. here are the axioms  whose conjunction will be denoted ec. 

the frame problem is overcome using circumscription. 
given a conjunction of initiates  terminates and releases formulae  a conjunction of initiallyp  initially n  happens and temporal ordering formulae  and a conjunction  of uniqueness-of-names axioms for actions and fluents  we're interested in  
initiates  terminates  releases 
; happens  
in all the cases we're interested in  and  are in a form which  according to a theorem of lifschitz  guarantees that 

these circumscriptions are equivalent to the predicate completions of initiates  terminates  releases and happens. 
1 state constraints 
the ramification problem is the frame problem for actions with indirect effects  that is to say actions with effects beyond those described explicitly by their associated effect axioms. although it's always possible to encode these indirect effects as direct effects instead  the use of constraints describing indirect effects ensures a modular representation and can dramatically shorten an axiomatisation. one way to represent actions with indirect effects is through state constraints  the focus of this section. these express logical relationships that have to hold between fluents at all times. 
in the event calculus  state constraints are holdsat formulae with a universally quantified time argument. here's an example  whose intended meaning should be obvious. 

note that this formula incorporates fluents with arguments. actions may also be parameterised  as in the following effect axioms. 
terminates feed x  hungry x  t   h1  ¡¡terminates clothe x  cold x  t  here's a narrative for this example.  h1  	initially 	p hungry  fred    h1  initiallyn cold fred    h1  happens feed fred   1   h1  finally we need some uniqueness-of-names axioms. 
	un 	a feed  	clothe  	 h1  
	una hungry  cold  	 h1  
the incorporation of state constraints has negligible impact on the solution to the frame problem already presented. however  state constraints must be conjoined to the theory outside the scope of any of the circumscriptions. given a conjunction  of initiates  terminates and releases formulae  a conjunction of initiallyp  initiallyn  happens and temporal ordering formulae  a conjunction  of state constraints  and a conjunction  of uniqueness-of-names axioms for actions and fluents  we're interested in  
; initiates  terminates  releases  
; happens 
for the current example  if we let 	be the conjunction of 
 h1  and  h1   be the conjunction of  h1  to  h1   be  hl.l   and be the conjunction of  h1  and  h1   we have  
; initiates  terminates  releases 
 ; happens holds at happy  fred  1 . 
state constraints must be used with caution. as can be seen by inspection  axioms  ec1  to  ec1  enforce the following 	principle: fluent 	that 	has 	been 
initiated/terminated directly through an effect axiom cannot then be terminated/initiated indirectly through  state constraint  unless it is released beforehand. similarly  a fluent that holds at time 1 because of an initiallyp formula cannot then be terminated indirectly through a state constraint  unless it's released beforehand  and a fluent that does not hold at time 1 because of an initiallyn formula cannot then be initiated indirectly through a state constraint  unless it's released beforehand. 
suppose  in the present example  we introduced an upset x  event whose effect is to terminate happy x . then the addition of happens upset fred  1  would lead to contradiction. similarly  the addition of 
initiallyn happy fred   would lead to contradiction. 
state constraints are most useful when there is a clear division of fluents into primitive and derived. effect axioms are used to describe the dynamics of the primitive fluents and state constraints are used to describe the derived fluents in terms of the primitive ones. 
1 effect constraints 
state constraints aren't the only way to represent actions with indirect effects  and often they aren't the right way  as emphasised by lin  and mccain and turner . to see this  we'll take a look at the so-called  walking turkey shoot   a variation of the yale shooting problem in which the shoot action  as well as directly terminating the alive fluent  indirectly terminates a fluent walking. 
the effect axioms are inherited from the yale shooting problem. 
	initiates load loaded t  	 w1.. 1  
¡¡terminates shoot alive t   holds at loaded t   w1  the narrative of events is as follows. 
	initially 	p  	alive   w1  initiallyp loaded   w1  initiallyp walking   w1  happens shoot tl   w1  tl t1 
we have two uniqueness-of-names axioms.  w1  una load  shoot   w1  una loaded  alive  walking   w1  now  how do we represent the dependency between the walking and alive fluents so as to get the required indirect effect of a shoot action  the obvious  but incorrect  way is to use a state constraint. 
holdsat alive t  holdsat walking t  
the addition of this state constraint to the above formalisation would yield inconsistency  because it violates the rule that a fluent  in this case walking  that holds directly through an initiallyp formula cannot be terminated indirectly through a state constraint.  the same problem would arise if the walking fluent had been initiated directly by an action.  
	shanahan 	1 

a better way to represent the relationship between the 
walking fluent and the alive fluent in the walking turkey shoot is through an effect constraint. effect constraints are initiates and terminates formulae with a single universally quantified action variable. the constraint we require for this example is the following. 
terminates a walking t  terminates a alive t   w1  
notice that effect constraints are weaker than state constraints: the possibility of resurrecting a corpse by making it walk  inherent in the faulty state constraint  is not inherent in this formula. 

effect constraints are adequate for the representation of many actions with indirect effects. but there is still a class of examples for which they don't work. consider the following benchmark problem due to thielscher . a circuit comprising a battery  three switches  a relay  and a light bulb is wired up as in figure 1. 

figure 1: thielscher's circuit 
five fluents represent the state of each component in the circuit: switch 1  switch1  switch1  relay  and light. their initial configuration is as in figure 1. there are various dependencies among the fluents. the light is on if switches one and two are closed. switch two is open if the relay is on. finally  the relay is on if switches 1 and 1 are closed. when switch 1 is closed  the relay becomes activated  switch 1 will open  and the light stays off. the awkward nature of this example derives from the fact that closing switch 1 has one indirect effect  closing the relay  which opens switch 1  that disables another indirect effect  the light coming on . 
a first  naive attempt to formalise this example might include an effect constraint like the following. 
initiates a light t  
initiates a s witch 1  t  holdsat s witch1 t  
but this formula is obviously a false start  because in this scenario  initiating switch 1 also indirectly terminates switch1  and the event calculus axioms entail that switch1 still holds at the instant of termination. a better attempt would be the following effect constraint. 
initiates ajlighu  lnitiates a s witch l t  	holds at switch1 t  
-i terminates a switch1 t  
this formula is adequate for this particular scenario  but doesn't fully capture the dependency between the fluents. suppose  for example  that switch 1 is initially closed  while switch 1 and switch 1 are initially open. then closing switch 1 causes the light to go on  something not captured by this constraint. we need a counterpart to the above formula for this case. 
lnitiates a light t  
initiates a switch1 t   holds at s witch 1  t  
-i terminates a s witch l t  
once again  while this is adequate for the present example  it's not a general solution. in particular  neither of these formulae accounts for the possibility of independent but concurrent switch events. 
in the following section  a method for representing the indirect effects of actions is presented whose generality is comparable to that of other recently published solutions to the ramification problem  but which doesn't require the development of significantly more logical machinery than is already present in the event calculus defined above. 
1 causal constraints 
following a common practise in recent literature on the ramification problem  let's introduce some shorthand notation for expressing dependencies between fluents. 
definition 1. a fluent symbol is any string of characters starting with an upper-case letter. 
definition 1. any fluent symbol is also a fluent formula. if and are fluent formulae  then so are 
definition 1. following the notation of idenecker  et  /.  
1   a causal constraint is a formula of the form  initiating causes or  
	initiating 	causes 
where 	is a fluent formula and  is a fluent symbol. 	
here's a subset of the fluent dependencies in thielscher's circuit expressed using this notation. initialing switch l  switch1 causes light initiating relay causes -  switch1 
moating switchl switch1 causes relay 
there are other dependencies in the circuit. for example  this set of dependencies neglects to specify the conditions under which the light goes off. but these can be ignored for the example narrative we're interested in here. 
formulae like these are intended to have an intuitive meaning. the translation into the event calculus detailed below could be thought of as one attempt to give them a 

precise semantics. alternatively  these formulae can be 
1 	automated reasoning 

thought of simply as syntactic sugar for more long-winded event calculus formulae of the particular form defined below. 
1 causal constraints in the event calculus 
the key to correctly representing causal constraints in the event calculus is first to introduce new events that update each fluent whose value is dependent on other fluents  and second to write formulae ensuring that these events are triggered whenever those influencing fluents attain the appropriate values.  a related proposal is made by pinto  in the context of the situation calculus.  
to guarantee the instantaneous propagation of the effects of such events  they must be triggered not just when the influencing fluents already have their appropriate values  but also when they are about to get those values thanks to other events occurring at the same time. this motivates the introduction of four new predicates  started  stopped  initiated and terminated. the formula started  means that either already holds at  or an event occurs at x that initiates conversely  the formula stopped  means that either already does not hold at  or an event occurs at  that terminates  the predicates started and stopped are 
defined by the following axioms. 
started f t   cc1  
holdsat f t  
  happens a t   initiates a f t   
stopped f t   cc1  
-i holdsat f t  a fhappens a t  terminates a f t j 
note that at the instant of a fluent's transition from one value to another  we have both stopped and started at the same time. 
the formula initiated  means that  has been  started  at in the above sense  and furthermore no event occurs at that terminates likewise  the formula terminated 
means that has been  stopped  at in the above sense  and no event occurs at  that initiates the predicates initiated and terminated are defined by the following axioms. 
	initiated f t  	 cc1  
started f t  
-i 1 a  happens a t   terminates a f t   
terminated f t   cc1  
stopped f t  a  happens a t   initiates a f t   
to represent the causal constraints in thielscher's circuit example  we introduce three events  lighton  open1 and closerelay  which are triggered under conditions described by the following formulae. 
	happens lighton t  	 l 1  
stopped lighm   initiated s witch l t  initiated switch1 t  
	happens open1 t  	 li .1  
started switch1 t   initiated relay t  
	happens closerelay  t  	 1.1  
stopped relay  t  	initiated s witch 1  t  initiated switch1 t  
these triggered events govern the transition of fluents from one value to another when certain conditions come about  as prescribed by the corresponding causal constraints. hence the need for the stopped and started conditions in the above formulae. these ensure that an event occurs only at the time of the transition in question. the effects of these events are as follows. a close 1 event is also introduced. 
initiates lighton light t   l1  terminates open1 switch1 t   l1  initiates closerelay relay t   l1  	initiates close 	1 	 s 	witch 	1 	 t  	 1 a  
the circuit's initial configuration  as shown in figure 1  is as follows. 
initiallyn switchl   l1  initially p switch1   l1  initiallyp switch1   l1  initiallyn relay   l1  initially n light   l1  the only event that occurs is a close 1 event  at time 1. 
	happens close 1  	 l1  
two uniqueness-of-names axioms are required. 
	una lighton  close 1  open1  closerelay  	 l1  
	unafswitchl  switch1  switch1  relay  light  	 l1  
as the following proposition shows  this formalisation of thielscher's circuit yields the required logical consequences. in particular  the relay is activated when switch 1 is closed  causing switch 1 to open  and the light does not come on. 
proposition 1. let  be the conjunction of  l1  to be the conjunction of  ll.l  to  li.1  with  l1  
to  l1   be the conjunction of  co  to  cc1   and q be the conjunction of  l1  and  l1 . we have  
	circ 	; initiates  terminates  releases  
	circ 	 ; happens  
holdsat relay 1  -! holdsat switch1  -i holdsat light 1 . 
proof. from circ ; initiates  terminates  releases  we get the completions of initiates  terminates and releases. from circ  ; happens  we get the completion of happens  namely  
happens a t  1  
	 a = close 1 	t=1j 
 a = lighton stopped light.t  lnitiated s witch l t   inttiatcd switch1 t j 
	 a = open1 	started switch1 t   initiated relay t   
 a = closerelay stopped relay t  initiated s witch l t  initiated switch1 t |. 
	shanahan 	1 

at the time of the first event  the fluents switch1 and switch1 hold and the fluents switch1  relay and light don't hold. 
first we prove that the close1 event at time 1 is the first event. consider any 1. there can't be a closel event at t  since  from  1   the only closel event is at 1. since we have - holdsat switchl t  and only a closel event can initiate switch!  we have -i initiated switchl t   so  from  1   there can't be a lighton or closerelay event at t. since we have -i holdsat relay t  and there can't be a closerelay event at t  we have -  lnitiated relay t   and therefore  from  1   there can't be an open1 event at t. from  1   this exhausts all the possible types of event  so there can't be any event occurrence at time t. so the closel event at time 1 is the first event. 
now we prove that a closel event  a closerelay event and an open1 event all occur at time 1  but that no lighton event occurs at time 1. we know directly from  1  that a closel event occurs at 1. therefore  since there is no type of event that can terminate switch 1  we have initiated switchl 1   given  l1 . we know that stopped rclay 1  since we have -i holdsat relay  1   and since we have holdsat switch1   we also have lnitiated switch1 . so  from  1   we know that a closerelay event occurs at 1. since a closerelay event occurs at 1 and there is no type of event that can initiate relay  we have lnitiated relay 1   given  l1 . we also know that holdsat switch1  and therefore started switch1 . so  from  1   we know that an 
open1 event occurs at time 1. since there is an open1 event at 1  which  from  l1   terminates switch1  we have -i initiated switch1 l1   and therefore  from  1  there cannot be a lighton event at 1. 
using a similar argument to the paragraph before last  we can show that no events occur after time 1. given the events that occur at time 1  it's then straightforward to prove  from axioms  ec1  and  ec1   that the fluent relay holds at time 1  but the fluents switch1 and light do not.d 
let's briefly consider a couple of minor variations on this example. first  suppose we augment the formalisation with a close1 action which initiates switch1. then the addition of the formula happens close1  will give rise to a contradiction  since we would have both a close1 event at time 1 and  from  li.1   an open1 event  enabling us to prove  for any time t after 1  both holdsat switch1 t  and -i holdsat switch1 . in other words  switch 1 cannot be manually closed while switches 1 and 1 are closed  thanks to the relay. 
now consider the original narrative of events  but with a different initial situation  one in which switch 1 is open  then  as desired  we get a different result: the relay isn't activated  switch 1 doesn't open  so the light does come on. 
initiallyn switchl   l1  lnitiallyp switch1   l1  initiallyn switch1   l1  initiallyn relay   l1  initiallyn light   l1  1 	automated reasoning 
proposition 1. retaining  and  as above  let 
be the conjunction of  l1  to  l1  with  l1 . then we have  
	circ  	; initiates  terminates  releases  
       circ 	; happens  holdsat light 1 . 
proof. the proof is similar to that of proposition 1. 	
1 from causal constraints to event calculus 
this section presents a general translation from the shorthand notation for causal constraints presented above into the event calculus  along the lines suggested by the preceding example. 
definition 1. a negated fluent symbol is a fluent formula of the form where is a fluent symbol. 
first we define the function tc  which translates a single causal constraint into a pair of event calculus formulae. 
definition 1. let be a causal constraint of the form  initiating causes 
where is a fluent formula and  is either a fluent symbol or a negated fluent symbol. the translation with new action name is the pair   where are defined as follows. let be with every negated fluent symbol   replaced by terminated and every other fluent symbol replaced by initiated i f i s a negated fluent symbol then is  
¡¡terminates and 1 is  
happens started 
otherwise  is  
¡¡initiates a y t  and 1 is  
	happens  stopped 	
next we define the function   which translates a set of causal constraints into a pair of conjunctions of event calculus formulae. 
definition 1. let  be a finite set of causal constraints 
                     the translation 	with new action names 	is the pair 	where and 	  given that for any 
with new action name 
1 limitations: the gear wheels example 
although the technique described here can represent the indirect effects of many different types of actions  it does not work well in scenarios involving mutually dependent fluents  such as the following example  which is taken from  denecker  et al.y 1 . there are two interlocking gear wheels. if one is turning  the other must be turning  and if one is stationary  the other must be stationary. the example is formalised using two fluents  turning 1 and turning1. 
initiating turning 1 causes turning1 initiating tuming1 pauses turning 1 initiating -turning 1 causes -turning1 

initiating - turning1 causes - turning1 
the proposed event calculus translation of these causal constraints does not yield the desired conclusions  as it cannot rule out phantom self-starting events that cause the wheel to turn.  note  however  that this example can be correctly formalised using the state constraints of section 1.  as illustrated in the next section  other examples with cycles of dependencies are handled more satisfactorily. 
1 vicious cycles 
consider the modification of thielscher's circuit depicted in figure 1. this circuit incorporates a potentially vicious cycle of fluent dependencies. if switch 1 is closed  the relay is activated  opening switch 1  which prevents the relay from being activated. given axioms  cc1  to  cca  in their present form  the formalisation of this scenario using causal constraints will yield inconsistency. 
here are the causal constraints miiatjj1¡ê relay causes -i switch1 initiating switch 1 switch1 switch1 causes relay 
figure 1: a modification of thielscher's circuit 
let  with new action names open1 and 
closerelay. then a is the conjunction of the following 
happens formulae  and  is the conjunction of the following initiates and terminates formulae. 
happens open1 t   v1  
	started switch1 t  	initiated relay t  
	happens closerelay  t  	 v1  
stopped relay t  	initiated s witch 1  t  initiated switch1 t  	initiated switch1 t  
terminates open1 switch1 t   v1  initiates closerelay relay t   v1  	initiates close 	1 	 s 	witch 	1 	 t  
the circuit's initial configuration is as follows.  v1  initiallyn switchl   v1  lnitiallyp switch1   v1  initiallyp switch1   v1  initiallyn relay   v1  the only event that occurs is a close 1 event  at time 1. 
happens closeuo  	 v1  here are the customary uniqueness-of-names axioms. 
	una closel  open1  closerelay  	 v1  
	una switchl  switch1  switch1  relay  	 v1  
proposition 1. let  be the conjunction of  vi.1  and  v1    be the conjunction of  v 1  and  vi.1  with  v1  to  v1    be the conjunction of  cc1  to  cc1   and  be the conjunction of  v1  and  v1 . the following formula is inconsistent. 
circ l ; initiates  terminates  releases  circ ; happens  
proof. from circ 	; happens  we get  
	happens a t  	 1  
 a = close 1 =1  
	 a = open1 	started switch1 t  	initiated relay t   
 a = closerelay stopped  relay  t  initiated s witch l t  initiated switch1 t  initiated switch1 t  . 
using the techniques of the proof of proposition 1  we can show that the formula entails that the first event occurs at time 1. at time 1  switch1 and switch1 hold  but switch 1 and relay do not hold. we know that a closel event occurs at 1. now suppose no open1 event occurs at 1. then  since open1 is the only event type that can terminate switch1  we have initiated switch1   which  since we have stopped relay 1   initiated switch 1  and lnitiated switch1   entails that a closerelay event occurs at 1 from  1   but if a closerelay event occurs at 1  then we have initiated relay 1  and  from 1   an open1 event also occurs at 1  which contradicts out initial assumption. 
so an open1 event must occur at 1. but then  from  1   we must have initiated relay 1 . from  cc1  and 1   this entails that a closerelay event must occur at 1. from 
 1   this gives us initiated switch1 . but since an open1 event occurs at 1  which terminates switch1  this contradicts  cc1 . therefore the formula has no models. 
note that the cycle in this example is only  dangerous*' if switch 1 is initially closed. if switch 1 is initially open  the correspondingly modified theory is consistent  and yields the expected conclusion that the relay remains inactive after the closel event. 
arguably  inconsistency is not the most desirable response to an example with a vicious cycle. a formalisation that yielded non-determinism instead would at least permit other useful conclusions to be drawn. moreover  suppose the initial state of switch 1 is unknown  and  v1  is omitted. then  the threat of inconsistency ensures that initiallyn switch1  follows from the theory  even though no initially  formula to that effect is included. this seems a little counter-intuitive. 
on the other hand  the aim of formalisation should be to avoid inconsistency. the fact that inconsistency can result here simply from selecting an inappropriate initial state for switch 1 indicates that the wrong level of abstraction has been chosen for representing this particular domain. if we want to represent it in earnest  not just for illustrative 
	shanahan 	1 

purposes   a level of abstraction should be chosen in which every possible narrative that is itself consistent results in a consistent theory.  in the present case  this would demand the inclusion of explicit delays in the model.  
concluding remarks 
the works of lin   of gustafsson and doherty 
  and of thielscher  all share an important feature with the present paper. in each case  an existing predicate calculus-based action formalism  respectively the situation calculus  the fluent calculus  and pmon  is extended to handle actions with indirect effects. moreover  in  lin  1  and  gustaffson & doherty  1   as in the present article  circumscription policies are deployed which minimise parts of the theory separately. 
the solution to the ramification problem offered in the present article is also based on an existing predicate calculus action formalism  namely the event calculus. as such  it doesn't demand the introduction of any new semantic machinery. moreover  the proposal is conservative in the sense that it only adds to the existing calculus  the extension comprising four new axioms and four new predicates. with these axioms in place  the proposed solution is little more than a novel style of writing certain event calculus formulae. 
no formal assessment has yet been undertaken of the range of applicability of the proposed solution to the ramification problem  as recommended by  sandewall  1 . this  along with a more formal comparison with other approaches  would be a good topic for future research. 
acknowledgments 
thanks to patrick doherty  rob miller  michael thielscher  
kristof van belleghem and mark witkowski for 
discussions related to the topic of this paper. thanks also to the anonymous referees who spotted flaws in an earlier version of the paper. 
