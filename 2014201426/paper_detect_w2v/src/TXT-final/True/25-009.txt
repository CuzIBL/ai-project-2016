 
in this paper i extend the standard first-order resolution method with special reasoning mechanisms for sorts. sorts are unary predicates. literals built from unary predicates are called sort literals. negative sort literals can be compiled into restrictions of the relevant variables to sorts or can be deleted if they fulfill special conditions. positive sort literals define the sorttheory. sorted unification exploits the sort restrictions of variables with respect to the sort theory. as occurrences of sort literals are not restricted  it may be necessary to add additional literals to resolvents and factors and to dynamically change the sort theory used by sorted unification during the deduction process. the calculus i propose thus extends the standard resolution method with sorted unification  residue literals and a dynamic processing of the sort information. i show that this calculus generalizes and improves existing approaches to sorted reasoning. finally  i give some applications to automated theorem proving and abduction. 
1 	introduction 
one promising approach for increasing the strength of automated reasoning systems is the integration of theories into the standard first-order resolution calculus. for special theories there are more efficient methods than standard resolution. one theory that has been investigated is the theory of unary predicates called  sorts   see e.g. the logics of beierle et al.  beierle et al.  1   cohn 
 cohn  1   frisch  frisch  1   schmidt-schaub 
 schmidt-schaufi  1   walther  walther  1   or weidenbach et al.  weidenbach and ohlbach  1 . all these approaches offer special language constructs and reasoning facilities for sorts. they differ in the restrictions imposed on the sort theory and the way the sort theory is processed. this will be discussed in more detail in section 1. in the following 1 will explain why the approach presented in this paper generalizes and improves 
   *this work was supported by the esprit project 1 medlar of the european community 
1 	automated reasoning 
existing results. what all approaches have in common is the incorporation of sorted reasoning in the unification algorithm. here is an example for sorted resolution in comparison with standard resolution. 
the database a consisting of the clauses 

can be represented in a sorted formalization by the 


standard resolution this has to be taken into account. for nearly all examples the behaviour of sorted unification is not harmful. in particular  for sort theories that are difficult the sorted unification process is much more efficient than standard resolution. this will be explained in section 1. for  the complexity of sorted unification is the same as for standard unification   is a simple database. it can be processed  after translation in the respective formalism  in the described way by all approaches mentioned above  beierle et al.  
1; cohn  1; frisch  1; schmidt-schaufi  1; walther  1; weidenbach and ohlbach  1 . for the next database  this is not the case. the unary predicates man and woman cannot be represented as a sort in the logics of frisch  schmidt-schaufi  and walther. they can be represented in the logics of beierle et al.  
cohn  and weidenbach  but their calculi consist of more rules other than the usual resolution and factorization rule. in this paper i will show how any unary predicate can be processed as a sort just by modifying the standard resolution method. now consider 
 1  
 1  
 1  
 1  man peter  	woman peter  
love xman  mary  
love ywoman  paul  
love peter paul  from  the query love peter   mary  must be derivable. 
adding the clause  1  love peter  mary  to  offers only two resolution possibilities between  1 and  1 and between  1 and  1. for the two resolution steps sorted unification has to guarantee that peter is of sort woman or peter is of sort man  respectively. clause 
 1  is valid if peter is of sort man or peter is of sort woman. therefore at least one declaration of clause  1  has to be considered for sorted unification. for the sort theory consists of sort literals occurring in unit clauses. now it becomes obvious that considering such sort theories is too restrictive to get a complete calculus. from every clause consisting of positive sort literals exactly one literal must be chosen for the sort theory  see also theorem 1 . for  if we choose  1  man peter  as the sort theory  from  1 and  1 we derive by resolution  1  woman peter . the literal woman peter  is the result of sorted unification  because  1 is not the only literal of clause  1 . clause  1  subsumes clause  1 . the sort theory must be changed to the sort literal  1  
woman peter . then the empty clause is derived from  1 and  1. 
¡¡the example demonstrates three important aspects of the resolution method extended with sorts: 
  a notion of  conditional well sortedness  is needed  where the additional literals of declarations coming from non-unit clauses are collected.  see section 1.  
  the declarations considered by sorted unification have to be changed dynamically during the deduction process.  see theorem 1.  
  from each clause which consists of declarations only  at least one declaration must be chosen for sorted unification in order to obtain a complete calculus. 
 see theorem 1.  
¡¡the next section introduces the new sorted resolution method. the method is applied to two examples in section 1. section 1 relates the new sorted resolution method to existing work in a more abstract way. the paper ends with a short summary in section 1. all roofs are omitted and can be found in an internal report weidenbach  1 . 
1 	the sorted resolution method 
the starting point of the new method is the standard resolution method for first-order logic. first  the standard syntax is extended with sorts. then the notion of well sortedness is introduced. finally  the modified resolution and factorization rule and the sorted unification procedure are presented. 
1 	conditional well sorted expressions 
the processing of  showed the need for an extended notion of well-sortedness. a conditional well sorted expression consists of a well sorted expression in the usual sense  schmidt-schaufi  1; frisch  1  plus a set of literals. conditional expressions are written with a prime. 
	weidenbach 	1 


1 	automated reasoning 


table 1: the sorted rules of gsoup 
lemma 1  gsoup is sound and complete  if 
is a conditional substitution computed by the procedure  then  solves t and  is conditional well sorted. if is a cws. ground substitution solving t  then there is a cws. substitution computed by the unification procedure and a cws. substitution such that respect to if in the rule sorted fail  the condition concerning empty sorts is erased  the unification procedure is complete with respect to all cws. substitutions. 
lemma 1 sorted unification is undecidable and of unification type infinitary. 
   lemma 1 is a worst case result. for restricted sort theories better results are known  see  schmidt-schaub  1; uribe  1; cohn  1; weidenbach  1  . gsoup can be implemented in a way such that it has the appropriate complexity properties for restricted sort theories. 
	weidenbach 	1 

1 	applications 
the first application is a puzzle called  the lion and the unicorn  which can be found in one of smullyan's books  smullyan  1  and was previously discussed by ohlbach  schmidt-schaub  and weidenbach  ohlbach and schmidt-schaus1  1; weidenbach and ohlbach  1 . the lion and the unicorn are strange creatures which lie on certain days of the week and tell the truth on the other days. the lion lies on mondays  tuesdays and wednesdays and the unicorn lies on thursdays  fridays and saturdays. in order to solve the puzzle it must be figured out what day we have if they both make the 
statement  yesterday was one of my lying days . 
   in standard first-order logic the example is expressed by 1 clauses with 1 literals. after the application of comp 1 clauses with 1 literals are left. the example is complicated because it contains recursive clauses and sort literals occur together with three place literals.the query is 

which states that there is a day x when both the lion and the unicorn say that yesterday was one of the days they lie. the query can be further complicated by increasing the nesting depth of the function /  for  yesterday  . 
   using existing sorted approaches not all sorts can be processed by sorted unification due to the restrictions imposed on the sort theory. a consequence is that solving the puzzle with these approaches compares to solving the problem with the standard resolution method. we solved the problem on a sparc elc workstation with 1mb using o t t e r 1 and stop 1  sorted theorem prover- a first prototype implementation of the new resolution method with sorts. . the table shows the number of clauses generated and the time spent by the provers in order to derive the query depending on the nesting depth of the function / in the query: 

a second application concerns abduction. there are many applications for automated reasoning where abductive reasoning has to be applied. of course  when using abduction one is interested in finite representations of answers. demolombe and farinas  demolombe and farinas  1  proposed an inference rule  called l-inference  which can be used to automatize abductive reasoning. the l-inference rule is a special resolution rule. i will show that extending this rule with sorts allows the generation of finite answers to abductive queries  where the standard rule without sorts computes infinite answers. assume the query  which assumptions guarantee that love{x y  holds    is asked to the database   see section 1 . applying the standard rule amounts to compute all resolvents between the 
1 	automated reasoning 
clause 
and the clauses in the literal l{x y  is an extra literal introduced by demolombe and farinas method which is used to collect the instantiations made to the variables in the query literal. it is possible to derive infinitely many non-redundant clauses  e.g. clauses of the form 
applying l-inference to step uses clause  1  and results in 

thus the sorted answer is that two objects love each other if they are humans. this is the natural answer. the example demonstrates that the resolution method with sorts terminates in more cases and derives natural answers. 
1 	discussion 
the approach of schmidt-schaub  schmidt-schaub  1  extends walther's work  walther  1 . the resolution method with sorts is an extension of schmidtschaub's approach. if all declarations occur in unit clauses and all negative sort literals can be compiled by comp then all conditional parts of cws. terms are empty. if in addition all sorts s are non-empty  the resolution method with sorts is the same as schmidtschaub's order-sorted resolution calculus. 
   the framework presented by frisch  frisch  1  is more restricted than my approach. he separates the sort theory from the database. a sort theory is built from sort literals only and must be equivalent to a horn theory. sort literals are not allowed to occur with other literals in the database. as a consequence all sorts are a priori assumed to be non-empty. in addition  he does not answer how the sorted reasoning is to be performed  which in my approach is done by the notion of cws. terms and gsoup. 
   the logic of cohn  cohn  1  also does not give an answer how sorted reasoning has to be performed  an oracle is assumed . he imposes no restrictions on the occurrence of sort literals  but does not incorporate declarations occurring together with other literals in the sorted reasoning process. this leads to a calculus which consists of more inference rules than the usual resolution and factoring rule. in addition  unifiers which are not well sorted  with respect to definition 1  have to be considered for the inference rules also. therefore  the resolution method with sorts is much more restrictive in the number of applicable inference steps. 
   the same arguments that hold for cohn  apply to the work of beierle et al.  beierle et al.  1 . although he gives a fully developed calculus  his extended order-sorted unification algorithm is nothing else than unsorted unification plus the collection of a negative sort literal for each component of the unsorted unifier. hence  his resolution method is also less restrictive in the number of applicable inference steps than the method proposed in this paper. 
compared to the work of weidenbach and ohlbach 
 weidenbach and ohlbach  1  i switched from a static processing of the sort theory to a dynamic one. as a consequence the number of declarations considered by the unification algorithm has been reduced significantly. the new method also needs fewer inference rules. thus the method presented in this paper is more restrictive in the number of applicable inference steps than our own previous work. 
   the frameworks of stickel  stickel  1  and biirckert  biirckert  1  propose methods for integrating theories into the resolution method. the resolution method with sorts is not an instance of these frameworks  because it is assumed that the theory is static during the deduction process. the sort theory c changes during the deduction process. this allows for less inference rules and a more restricted calculus in the number of applicable inference steps. 
   sorted unification in our resolution method is undecidable and of type infinitary  see lemma 1 . it is often argued that unification procedures having this property are not useful. but the result means that the sort theory processed by sorted unification has this properties in general. hence the question is whether it is more efficient to process the theory by the unification procedure or by standard resolution. the notion of cws. terms prevents sorted unification from performing inference steps which are performed by standard resolution. in general there may be infinitely many such steps. thus using gsoup is much more efficient than weaker unification algorithms combined with resolution. 
1 	summary 
every standard first-order database can be thought of as a database with sorts where all variables have sort  any   t . the algorithm comp can be used to compile negative sort literals into variable restrictions. if comp can save sort literals  applying the resolution method with sorts is more efficient than standard resolution. if comp cannot save literals  all variables have sort t  the resolution method with sorts derives exactly the same clauses than the standard resolution method. 
¡¡the resolution method with sorts generalizes and improves existing approaches to sorted reasoning. 
¡¡the resolution method with sorts terminates in more cases than the standard resolution method. this is use-
ful for abductive reasoning  for example. 
acknowledgements 
i would like to thank alan m. frisch  renate schmidt  and the reviewers for many helpful comments on this paper. 
