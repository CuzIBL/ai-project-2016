 
in  jegou  1   a decomposition method has been introduced for improving search efficiency in the area of constraint satisfaction problems. this method is based on properties of micro-structure of csps related to properties of triangulated graphs. 
this decomposition allows to transform an instance of csp in a collection of sub-problems easier to solve  and then gives a natural and efficient way for a parallel implementation  habbas et al  1 . in this paper  we present a generalization of this approach  which is based on a generalization of triangulated graphs. this generalization allows to define the level of decomposition which can be fixed by a graph parameter. the larger this parameter is  the more level of decomposition that is the number of sub-problems is. as a consequence  we can then define the level of decomposition  with respect to the nature of the parallel configuration used  the number of processors . 
first experiments reported here show that this extension increases significantly the advantage of the basic decomposition  already shown in  habbas et al  1 . 
1 introduction 
constraint-satisfaction problems  csps  involve the assignment of values to variables which are subject to a set of constraints. examples of csps are map coloring  conjunctive queries in a relational databases  line drawings understanding  pattern matching in production rules systems  combinatorial puzzles... csp is known to be a np-complete problem. so  during last twenty years  many works have been proposed to optimize the classical backtrack procedure  as constraint propagation  intelligent backtracking or network decompositions. 
　in  jegou  1   another approach has been proposed which is based on the decomposition of the  micro-structure  of the csp. the micro-structure of a csp is the graph defined 
　*this work has been supported in part by the iut de lens  the cnrs and the region nord/pas-de-calais under the tact programme 
by the compatible relations between variable-value pairs: vertices are these pairs  and edges arc defined by pairs of compatible vertices. given the micro-structure of a csp and using graph properties  the method realizes a pre-processing to simplify the problem with a decomposition of the domains of variables. for a csp v  the decomposition generates a collection of subproblems p1  p1   .   pk  which is equivalent to the initial problem v. each subproblem pi has the size of its domains less or equal to the size of domains of p  so the time complexity of each pi is necessarily less than for the initial csp. moreover  given this collection of subproblems  we can separately solve them  or recursively apply again the decomposition. 
　this decomposition allows to transform an instance of csp in a collection of subproblems the domains size of which is less than domains size of the csp. so  these sub-problems are theoretically easier to solve. moreover  this decomposition defines and then gives a natural and efficient way for a parallel implementation to solve csp. in  habbas et al  1   an experimental analysis of this approach is presented  realized on a parallel configuration. these experiments show clearly the efficiency of the approach: the decomposition generally offers better results than the results obtained to solving the problems without decomposition. this advantage is related to the natural parallelization of the approach since each subproblem is solved independently. this fact is clear for consistent csps. moreover  if we consider inconsistent csps  the results are more insteresting: without parallelization  solving the problem after its decomposition is clearly better as solving it without decomposition. 
　in this paper  we present a generalization of this approach. this approach is based on a generalization of triangulated graphs. this generalization allows to define the level of decomposition which can be fixed by a graph parameter. the larger this parameter is  the more level of decomposition  that is the number of sub-problems  is. as a consequence  we can then define the level of decomposition  with respect to the power of the parallel configuration used. 
　to define this generalization  we exploit a generalization of triangulated graphs called csgk graphs which has been introduced in  chmeiss and jegou  1 . this class of graphs possesses the same kind of properties as triangulated graphs do. the most important here is the fact that the clique problem has a polynomial time complexity on these graphs. 
   first experiments reported here show that this extension increases significantly the advantage of the basic decomposition  already shown in  habbas et al  1 . indeed  we present experiments with two levels of decomposition. the basic decomposition  and the second level  csg1 graphs . the results show that for the second level of decomposition we obtain better results. 
   the section 1 recalls the decomposition method while section 1 presents the generalization of the decomposition. experimental results and a discussion about these result are presented in the section 1. 
1 preliminaries 
1 	constraint satisfaction problems 
a finite csp  constraint satisfaction problem  is defined as four tuple p = {x d c r . x is a set of n variables x1 x1 --.xn. d is a set of finite domains d1 d1  ..... dn  and c is a set of rn constraints. here we only consider binary csps  that is the constraints are defined on pairs of variables 
{xi  xj } and will be denoted ci j. to each constraint   we associate a subset of the cartesian product  di x dj  which is denoted rij and specifies which values of the variables are compatible with each other. r is the set of all rlj. a solution is an assignment of values to variables which satisfies all the constraints. for a csp p  the pair  x' c  is a graph called the constraint graph. given a csp  the problem is either to know if there exists any solution  to find solution  or to find all solutions. the first problem is known be to np-complete. 
   csps are normally solved by different versions of backtrack search. in this case  if d is the size of domains  maximum number of values in domains a     the theoretical time complexity of search is then bounded by the size of the search space  that is dn. consequently  many works tried to improve the search efficiency. at present time  it seems that the most efficient algorithm is the procedure mac which has been introduced in  sabin and freuder  1 . other approaches use decomposition techniques based on structural properties of the csp. these methods exploit the fact that the tractability of csps is intimately connected to the topological structure of their underlying constraint graph. moreover  these methods give an upper bound to the complexity of the problem. as example of such decompositions  we have tree-clustering scheme  dechter and pearl  1 . the time complexity of this method is bounded by dk where k is induced by the topological features of the constraint graph. intuitively  more the constraint graph is dense  more the value k is large. for example  if the constraint network is a complete graph  then k = n. so  the complexity of these decomposition methods is the same as for classical backtracking  that is dn. so  in  jegou  1   jegou proposed an alternative way to decompose csps which is not based on the constraint graph but on the micro-structure of a csp. in the sequel  we called this decomposition scheme tr-decomposition. 

   in other words  transforming a csp as its micro-structure is clearly a polynomial reduction from csp to clique  which is the problem of finding a clique of a given size belongs to a graph. as a consequence of this fact  as csp  the clique problem is np-complete. since the problem of finding a n-cliquc is np-hard  tr-decomposition exploits the fact that triangulated graphs constitute a polynomial class of instances for this problem. we recall briefly basic properties of these graphs. given a graph g -  v  e  and an ordering of v  the successors of a vertex u1 
are the elements of the set 
w	h	e	r	e	a 	vertex 	v	i is 	simplicial in 	is a clique. 	the ordering of v is a perfect elimination ordering if  for 	  the vertex v1 is simplicial in the ordering 
　　a graph g =  v e  is triangulated if and only if v admits a perfect elimination ordering. triangulated graphs satisfies desirable properties. a triangulated graph on n vertices has at most n. maximal cliques  a clique is maximal iff it is not included in an other clique   fulkerson and gross  1 . moreover  the problem of finding all maximal cliques in a triangulated graph is in 1 n + m  if n is the number of vertices and m the number of egdes  gavril  1 . 
　given the micro-structure of any csp  it is not possible to immediately use these properties because any micro-structure is not necessary a triangulated graph. so  in adding edges in e  we can build a new graph t g  =  v  ef  which is triangulated. this addition of edges is called triangulation  and can be realized in a linear time in the size of the graph. so  after the triangulation  all maximal cliques of g can be found in linear time. applied to a the triangulation of its micro-structure 
produces the graph the set of maximal cliques of which is i. every y  is a set of values  and then defines a subproblem of p. more formaly  given a binary csp p =  x d c  r   its micro-structure  =  the csp induced by y on 
1
1 	constraints 　　note that in  hamadi  1   tr-decomposition has been generalized to general csps  that is csps were constraints can be defined on more than two variables. 
v  denoted v{y  is defined by: 

　finally  to ensure the validity of the decomposition  presents the theorem below: 
theorem 1  jegou  1  given a binary csp p  its 
m i c r o - s t r u c t u r e   the set of the maxi-
mal cliques of t 
solutions 
to summarize the approach  we recall the algorithm: 
algorithm: tr-decomposition 
begin 
1 build the micro-structure 
1 triangulation 
1 maximalcliquesi 
1 for all yi do 
1 if yi is a covering of all the domains in d 
1 then solve 
1 else 	has no solution endfor 
end; { tr-triangulation } 
　the steps 1  1 and 1 can be realized in a linear time w.r.t. the size of the problem v. the procedure triangulation returns a perfect elimination ordering a which allows to the procedure maximal cliques to find sets yi. the step 1  that is the iteration for  can be replaced by a parallel execution on independent subproblems p yl . in this case  if the csp v is consistent  the cost is related to the cost of solving the easiest subproblem  while it is the cost of the hardest subproblem for inconsistent csps. a such implementation has been realized in  habbas et al  1 . in step 1  a set yi is not a covering of all the domains in d if there is a subdomain dy.j induced by yi which is the empty set. this subproblem is then trivially inconsistent. in step 1  to solve v yi   we can use any classical search method such that standard backtracking  forward-checking or mac  sabin and freuder  1 . finally  note that the quality of decomposition depends on the quality of the triangulation step. 
　the last point is the most important. nevertheless  it's well known that the problem of finding an optimal  w.r.t. the size of the largest induced clique  triangulation is np-hard  see  arnborg et al  1  . several algorithms have been proposed for triangulation. in all cases  the aim is to minimize either the number of added edges or the size of cliques in g'. three classes of approaches are usable. the first one consists in finding an optimal triangulation which produces a graph the maximum size clique of which has minimum size over all triangulations.  shoikhet and geiger  1  propose a such algorithm the time complexity of which is exponential. the second is to find a minimal triangulation  that is a triangulation computing a set e  such as if for any other triangulation  is not triangulated. note that a triangulation can be minimal and not optimal. see  berry  1  who presents an algorithm in 1 n n + m  . the last one consist in using a triangulation consuming a linear time which does not gurantee the minimality. nevertheless  the purpose of this paper is not to propose a good triangulation  but to exploit a generalization of triangulated graphs to generalize this decomposition. one of the aims of this generalization is to avoid the problem of finding optimal triangulations. 
1 generalizing tr-decomposition 
1 	a first basic property 
to generalize tr-decomposition  we can extend theorem 1. consider a      ..  and its m i c r o - s t r u c t u r e c o n s i d e r a graph 
consider 
now the set 	of maximal cliques of 
every zi is a set of values  and then  as in section 1  defines a subproblem of p which is the csp induced by z i  on v  it is denoted v zi  . 
theorem 1 given a binary csp p  its micro-structure and {z 1  ... zj   the set of the maximal cliques of 
then solutions 
　proof. given a binary csp v  its micro-structure and by theorem 1  we know that each solution of v is a clique of size n. if we consider 
w h e r e e a c h clique of is included in a maximal clique therefore  each solution of 
v appears in the associated subproblem 
　while tr-decomposition is limited to triangulated graphs  theorem 1 allows to define a larger class of decomposition of domains. nevertheless  because the number of maximal cliques can be exponential in an arbitrary graph  and then  the number of induced subproblems  we must consider graphs  which possess a limited number of maximal cliques 
as triangulated graphs do. so  we exploit here a class of graphs which is a generalization of triangulated graphs. 
1 	a generalization of triangulated graphs 
in  chmeiss and jegou  1   a new class of graphs  called 
csgk graphs has been introduced. these graphs which generalize triangulated graphs  possess the same kind of properties as triangulated graphs  e.g. hereditary property of subgraphs  existence of an elimination scheme  polynomial time recognizing algorithm  and polynomial class of graph for clique problem. informally  a csg1 graph is a complete graph  a csg1 graph is a triangulated graph  and a csg1 graph is a graph allowing an elimination vertex scheme where the successors of every vertex induce triangulated graphs. more generally  csgk graphs are defined inductively. 
　definition  chmeiss and jegou  1  the class of csg1 graphs is the class of complete graphs. given k   1  the class of csgk graphs is the class of graphs g =  v  e  such that there exists an ordering  of v such that for i = l 1  ...n  the graph  graph. 
the ordering a is then called a csgk scheme. 
it's easy to see that csg1 graphs is the class of trian-
gulated graphs. as for triangulated graphs  there exists a polynomial time algorithm for recognizing csgk graphs;  its time complexity is 
in the context of decomposition of micro-structure  the number of maximal cliques is an important criteria. csgk graphs inherit of a generalization of the property of fulkerson and gross  fulkerson and gross  1  related to this number since  a  graphs with n vertices have less than nk maximal cliques. moreover  a  graph with n vertices and m edges has at most n + m maximal cliques. finding these cliques is easy  since  given a constant value k the clique problem is polynomial on this class of graphs since the time complexity of finding the clique of maximum size in an undirected graph is bounded by 
1 	trk-decomposition 
csgk graphs can be exploited as a way to generalizing of tr-
decomposition  defining trk-decomposition as decompositions corresponding to the class of associated graphs. for k= 1  trk-decomposition is exactly tr-decomposition  while for k= 1  trk-decomposition  that is tr1-decomposition  it's the decomposition induced by csg1 graphs. more generally  trk-decomposition is summarized as: 
algorithm: trk-decomposition 
begin 
1 
1 
1 
1 
1 
1 
1 
end; 
note that: 
 the procedure 	k-triangulation 	produces a graph which is a csgk graph and returns an order-
ing a which allows to the procedure k-maximalcliques to find all the maximal cliques 
  as for tr-decomposition the step 1  that is the iteration for  can be replaced by a parallel execution on independent subproblems  in this case  if the csp v is consistent  the cost is related to the cost of solving the easiest subproblem  while it is the cost of the hardest subproblem for inconsistent csps. 
  for steps 1 and 1  remarks given for tr-decomposition hold. 
  finally  the quality of decomposition depends on the quality of the k-triangulation step. 
　because of the time complexity of managing graphs  that is  it seems reasonable to focus our attention on small values of k;. so  in the sequel we limit our study to csg1 graphs. therefore  the number of maximal 
cliques will be bounded now by  nevertheless  two problems must be adressed here. finding an efficient algorithm for 1-triangulation  and an operational algorithm to find maximal cliques of a  graph. 
　for 1-triangulation  we can imagine an algorithm the time complexity of which is theoreticaly bounded by 1 nm n. + 
m  . this algorithm consider an ordering on vertices which is obtained by the maximum cardinality search of tarjan and yannakakis. given this ordering  we consider vertices vi and then  we run a triangulation on . this first step is in 1 n n + m   but this approach does not guarantee to get 
a 1-triangulation. indeed  given two vertices vl and vj  with i   j  the triangulation of which is realized after the triangulation of can add edges that restore the new subgraph not triangulated. so  a second step of verification and repairing the subgraphs in adding new edges must be realized. this additionnal work induces a theoretical complexity of 1 nm n + 1   . never-
theless  expermients show that this additionnal work will be rarely reached in practical cases  see section 1 . 
1 experiments 
our aim in this section is to show the usefulness of the generalized decomposition method comparing to the mac  maintaining arc consistency  algorithm and the decomposition method by triangulation of the micro-structure and to give an idea about the efficiency of the proposed method. for the generalized decomposition method we will consider the tr1decomposition  i.e. k = 1. 
　as mentionned in section 1  we will not focus on the triangulation and 1-triangulation algorithms because it is not the principal objective of this paper. in experiments  we will use the tarjan and yannakakis's triangulation algorithm  tarjan et al  1 . this algorithm requires a precomputed elimination ordering on the vertices. then  it adds edges  with respect to the ordering  which maintain the chordality property  i.e. when a vertex is treated  its successors must form a clique . also  for the 1-triangulation  we will use an algorithm based on the tarjan and yannakakis's triangulation one as described in section 1. in practice  we have observed that the additionnal step is rarely realized and then the observed time of the 1-triagnluation is in n n + m   . so  for csps of great size  the cpu time used to decompose the problem is generally not significant with respect to the time ofsolving the csp. 
　we have expermiented these methods on random csps generated at the phase transition. these csps are generated according to the model b generator  prosser  1 . such a generator admits four parameters: 
  the number n of variables 
  the common size of the initial domains d 
  the proportion p1 of constraints in the network  or the number c = p1 * n    n - l /1 of constraints  

1 	constraints 


table 1: experimental results 

  the proportion p1 of forbidden pairs of values in a constraint  or the number t = p1 * d * d of forbidden pairs  
　in the following  we will use c and t instead of p1 and p1. c is called the density of the constraint graph and t the tightness of the constraints. we have analysed decomposition using the procedure mac as basic search algorithm  the used heuristic is dom/deg  bessiere and regin  1  . that is mac has been used before decomposition on the initial problem and after decomposition on each induced subproblem. 
　in order to have a credible idea on the performance of these methods  we consider several classes of problems. we vary two parameters  the number of variables n and the domains size d . in order to deal with classes near the phase transition  we search the appropriate values of the tightness  t  and the density  c . 
　for each value of n  we vary d from small domains size to larger ones. so  we can observe the behavior of the decomposition when d grows. also  we have remarked that the performance of the decomposition method was not the same for satisfiable and unsatisfiablc problems. so  we have chosen to present the results seperately. 
　results are reported in three tables. each table represents results for a given number of variables tv. as measures of comparison  we used the number of consistency checks  #checks  performed by each of the methods and the number of visited nodes  #nodes . we mention that  the execution time is proportional to the number of checks. 
　in the tables  results are organized as following : the first column contains the calsses of problems represented by the four parameters   n d t  c  . for each class  we give results of the differents methods for satisfiable  sat  and unsatisfiable  unsat  problems seperately. so  we have two lines per class. the second and the third columns give the number of subproblems induced by the tr-decomposition and the tr1-decomposition respectively. the fourth column indicates the number of satisfiable and unsatisfiable problems over the 1 randomly generated csps. the next three columns give the number of consistency checks for mac  tr-decomposition and the tr1-decomposition respectively. the last three columns present the number of visited nodes by the different methods. 
　as the subproblems induced by the decomposition are independent  we can envisage a parallel implementation. in other words  we can imagine one process by subproblem. so  for saisfiable problems we consider the faster subproblem 
 the firstly solved subproblem since we have the response the it is satisfiable  while we consider the hardest subproblem for unsatisfiable ones. 
　tables show  that decomposition improve the mac algorithm on all classes. the improvement is more significant for larger domains. also  the performance of mac is improved more significately for denser constraint graphs. if we look at table 1 where n = 1  we remark that the tr1-decomposition is five times faster than mac for the   1 1  . for classes with d = 1 the improvement is more significant. this remark is confirmed when 

the constraint graphe is denser. for example  for the class   1 1   and for satisfiable problems  the performance ratio between tr1-decomposition and mac is about 1 tp 1. in other words  for each consistency check performed by tr1-decomposition l'algorithm mac performs 1 checks for satisfiable problems. for unsatisfiable problems  the performance ratio is about 1 to 1. 
　this overall view on experiments shows that the generalized decomposition method is promising and results are encouraging. finally  we would like to mention the importance of the triangulation  1-triangulation  phase. we think that the efficieny of the decomposition method is related to the quality of the triangulation  1-triangulation . we believe that other triangulation algorithms might offer a better decomposition. 
1 conclusion 
in this paper  we have presented a generalization of the decomposition of micro-structure  introduced in  jegou  1 . this decomposition allows to transform an instance of csp in a collection of sub-problems easier to solve  and then gives a natural and efficient way for a parallel implementation  habbas et al  1 . while the original method is based on triangulated graphs  our generalization is based on a generalization of triangulated graphs called csgk graphs. for a given value a:  we get a special sub-class of graphs. e.g. csg＜ graphs are complete graphs and csg1 graphs are triangulated graphs. the value k allows to define a particular level of decomposition. so  we have introduced trk-decomposition as the generalized decomposition based on csgk graphs. 
　there are two motivations for this generalization of the decomposition: 
  to extend the level of decomposition  
  to be able to fix this level to give an optimal exploitation for the parallel configuration used. 
　indeed  it has been experimentally observed in  habbas et al.  1  that the first level of decomposition  that is tr1decomposition  outperforms classical algorithms  and that the more the number of sub-problems is  the more the efficiency of tr1-decomposition is. 
　our experimental results confirm these facts. we have studied two levels of decomposition  for k = 1 and k = 1 and the experiments show that tr1-decomposition outperforms tr1-decomposition. moreover  the number of sub-problems is greater for k - 1 than for k = 1. 
　we have limited our experiments to k = 1 because the time complexity of managing graphs is related to the value k. more precisely  is the time complexity to recognize these graphs. so in future works  we will try to propose efficient algorithms to realize decomposition. 
