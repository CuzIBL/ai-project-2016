 
mitchell's version-space approach to inductive concept learning has been highly influential in machine learning  as it formalizes inductive concept learning as a search problem-to identify some concept definition out of a space of possible definitions. this paper lays out some theoretical underpinnings of version spaces. it presents the conditions under which an arbitrary set of concept definitions in a concept description language can be represented by boundary sets  which is a necessary condition for a set of concept definitions to be a version space. furthermore  although version spaces can be intersected and unioned  version spaces are simply sets  albeit with special structure   the result need not be a version space; this paper also presents the conditions under which such intersection and union of two version spaces yields a version space  i.e.  representable by boundary sets . finally  the paper shows how the resulting boundary sets after intersections and unions can be computed from the initial boundary sets  and proves the algorithms correct. 
1 	introduction and motivation 
the problem of inductive concept learning-to form general rules from data-has been well-studied in machine learning and artificial intelligence  buchanan and mitchell  1; michalski and chilausky  1; mitchell el al  1; quinlan  1 . the problem can be stated as follows: 
given: 
  training data: positive and negative examples of a concept to be identified. 
  concept description language: a language in which the final concept definition must be expressed. 
determine: 
  the desired unknown concept. 
mitchell  1; 1  proposed an approach to this problem that maintains all elements of the concept description language that could be the desired unknown concept  namely  those that correctly classify the given training data  i.e.  that are consistent with the data ; this set is known as a version space. however  this set can be cleverly represented by only maintaining the minimal and maximal elements of the set  known as the boundary sets of the version space. as further data are obtained  the set of possibilities is refined until ideally only one consistent result remains. this approach has been highly influential to work in concept learning  as it formalizes inductive concept learning as a search problem-to identify some concept definition out of a space of possible definitions. 
　this paper presents the theoretical underpinnings of version spaces  beginning with the conditions under which a set of concept definitions can be represented by boundary sets. it also presents the conditions under which the intersection and union of two version spaces is a version space  and how the resulting boundary sets can be computed from the boundary sets of the original version spaces. 
　these questions are important for a number of reasons. first  they clarify mitchell's own formalization of version spaces and its central term  admissibility  mitchell  1  page 1 . second  his version-space learning algorithm  the candidate-elimination algorithm  can be expressed as a version-space intersection process  hirsh  1a; hirsh  1b   and thus answering the question of when intersections are legal also answers the question of when the candidateelimination algorithm can be used. finally  both versionspace intersections and unions have proven useful in extending version spaces beyond strict consistency with data  hirsh  1a; hirsh  1c . 
1 	background 
the traditional scenario for inductive concept learning begins with a set of training data-examples classified by an unknown target concept-and a language in which the desired concept must be expressed  which defines the space of possible generalizations concept learning will search . mitchell defines a version space to be  the set of all concept descriptions within the given language which are consistent with those training instances   mitchell  1  page 1 . mitchell noted that the generality of concepts imposes a partial order that allows more efficient representation of the version space by the boundary sets s and g representing the most specific and most general concept definitions in the space. the s- and g-sets delimit the set of all concept definitions consistent with the given data-the version space contains all concepts as or more general than some element in s and as or more specific 
	hirsh 	1 
than some element in g. 
　given a new instance  some of the concept definitions in the version space for past data may no longer be consistent with the new instance. the candidate-elimination algorithm manipulates the boundary-set representation of a version space to create boundary sets that represent a new version space consistent with all the previous instances plus the new one. for a positive example the algorithm generalizes the elements of the 1-set as little as possible so that they cover the new instance yet remain consistent with past data  and removes those elements of the g-set that do not cover the new instance. for a negative instance the algorithm specializes elements of the g-set so that they no longer cover the new instance yet remain consistent with past data  and removes from the 1-set those elements that mistakenly cover the new  negative instance. the unknown concept is determined when the version space has only one element  which in the boundary set representation is when the s- and g-sets have the same single element. 
1 	terminology and notation 
throughout this paper  cdl  is used to refer to the  potentially infinite  set of concept definitions describable in the concept description language and considered in the concept learning task. there is a space of possible objects  instances   and each concept definition divides a set of objects into those ob-
jects it covers and those it does not. the subset of the entire space of possible objects that a concept definition covers is known as its extension. concept definitions are partially ordered by generality  should be read as  ci is less general than or equal to ci  which means that the extension of c  is a subset of the extension of ci.  and have similar  obvious meanings. 
theorem 1  mitchell  1  the relation is a partial ordering. 
proof: the reflexivity  asymmetry  and transitivity fall out of the definition of using subset. since the subset relation is a partial ordering  so  too  is a partial ordering.  
　the concept learning problem is to identify one concept definition out of the set of potential concept definitions in the cdl  given information from some outside source about the nature of the unknown concept. usually this information is of the form of positive and negative examples of this taiget concept  that is  classified training data of the concept. 
1 	c r i t e r i a f o r representability by b o u n d a r y 
sets 
this section presents the first major results of this paper  namely  criteria that  if satisfied by a subset of a concept description language  make that subset representable by boundary sets. first  however  it is necessary to define two terms  convexity and definiteness.1 this section will show that a subset of a concept description language is representable by boundary sets if and only if it is convex and definite. 
　　1  earlier versions of this work  hirsh  1a  used the terms  closure  and  boundedness . convexity and definiteness better reflect existing terminology in lattice theory. 
1 	learning and knowledge acquisition 
1 	convexity 
a set c of concept definitions in the cdl is said to be convex if  given any two elements of c  any element of the concept description language between them  in the partial order  is also in g. this basically says that there are no  holes  in the set. more formally: 
definition 1 a subset c cdl is said to be convex if and only if for all c1 c1 c  c1 cdl  implies c1  c. 
examples: 
1. if the cdl is the set of all closed ranges over a single real-valued attribute x of the form  {x | a   x   b}  where a and b are reals  in less formal terms  this corresponds to the case where data are described using a single real-valued feature  and concept descriptions can only constrain the possible values for this feature to various closed intervals : 
 a  if c = cdl  then c is convex. 
 b  if c = {c cdl | a b are integers}  then c is not convex  since between any two concept definitions there will be another whose range delimiters a and b are reals but not integers. 
 c   then c is convex. 
1. given any cdl  if c is the set of all concept definitions consistent with a set of classified instances  c is convex. 
1 definiteness lb define definiteness  it is necessary to state what the minimal and maximal elements of a partially ordered set are: 
definition 1 the set of minimal elements of c is written min c   and is defined by 

similarly  the set of maximal elements of c  max c   is 

　c is said to be definite if all elements of c are greater than or equal to some element of min c  and less than or equal to some element of max c . more formally: 
definition 1 c is definite if and only if for all c c there exists some & 	min c  and some g  max c  such that 
min c  is often referred to as c's 1-set  and max c  is cs g-set  and s and g should be viewed as shorthand for min c  and max c . note that this definition of definiteness docs not constrain either 1 or g to be finite. 
examples: 
1. if the cdl is the set of closed ranges of the form   where a and b are reals: 
 a  if c = cdl  then c is not definite  since g = { }  for every concept definition in the language there is another concept definition more general than it   
and thus for every element c c there is no g  g 
with  
orem: proof: 
1 definition 1 if c cdlt s = min c   and g = max c   
c is said to be representable by boundary sets if and only if 

this definition states that c is representable by boundary sets if the set of elements between the minimal and maximal elements of c gives back c. 
　it can now be shown that any convex  definite subset c cdl can be represented by boundary sets: 
theorem 1 all convex  definite subsets c of a cdl can be represented by boundary sets. 
proof: showing that a set c can be represented by boundary sets is done by first demonstrating that 

 where 1 = min c  and g = max c   then demonstrating 
that 

c' 
     1 mitchell defines a concept description language to be admissible if and only if every chain has a maximum and minimum element 
1 	generalizing version spaces 
mitchell defined a version space to be the set of all concept descriptions in a prespecified language that are consistent with data. the important quality that such sets have is that they can be represented by their boundary sets. this section has shown that representability by boundary sets is equivalent to convexity plus definiteness. this section can thus can be viewed as generalizing mitchell's consistency-based version spaces to arbitrary subsets of a concept description language representable by boundary sets  or equivalently  to convex and definite subsets of the concept description language. the results of the remainder of this paper apply to both mitchell's original notion of version space as well as this more general form. the term  version space  will be used throughout  but can be replaced with  convex definite subsets of the cdl   
1 	version-space intersections 
this section presents conditions under which the intersection of two version spaces is a version space  an important question since mitchell's candidate elimination algorithm can be expressed as a version-space intersection process. this section furthermore provides a method for doing this intersection 
　　　1the results presented here apply more generally to convex spaces; gunter et al.  have explored this generalization of the work presented here and apply it to atmss  where convex spaces also arise. 
	hirsh 	1 


1 	learning and knowledge acquisition 

　note that theorem 1 presents a method for computing intersections in theory  but to be practical the computations must take a finite amount of time. in particular  computing msgi  must take a finite amount of time. if there are infinite chains in the concept description language  the procedure for computing msg might never halt if it traverses the partial order. thus in real applications msg will often be computed from the syntactic form of 1 and 1  rather than traversing the partial order. for example  to determine 
msg a procedure for computing msg directly from the partial order would never halt  since there are an infinite number of concept definitions more general than each of the concept definitions. however  it is a simple matter to compute their most specific common generalization from their syntactic form: 
 typically msg is 
defined for specific concept description languages to manipulate the syntactic structures so it need not face infinite-chain difficulties. 
1 	version-space unions 
this section discusses unions of version spaces  and presents conditions under which the union of two version spaces is a version space  as well as a method for doing unions in boundary-set representation. such version-space union has proven useful for dealing with certain forms of noisy data  hirsh  1a; hirsh  1c . 
　it is first useful to note that the union of two version spaces is always definite: 


1 	concluding remarks 


a simple corollary of this is 
corollary 1 the union of two version spaces is a version space if and only if the union is convex. 
　note that just as the intersection of two version spaces need not be a version space  similarly the union of two version spaces need not be a version space. to see this consider any concept description language with three elements 
 the union of 
the two version spaces is {c   c1}  but this doesn't include c1  which it must if it is to be convex and a version space. 
　just as for intersections  the minimal and maximal elements for the union of two version spaces can be determined directly from the boundary sets for the two version spaces being this paper has presented formal results on the range of applicability of version spaces. it analyzed when a set of concept definitions is a version space  as well as when the intersection and union of version spaces yields a version space. it also gave methods to do such intersection and union in boundaryset representation  and proved that the algorithms to do so are correct. 
　an interesting open problem is how a version-space-like approach can be used even for arbitrary  nonconvex or nondefinite  sets of concept definitions. one approach would be to represent arbitrary sets as nested differences of version spaces. the intersection and union procedures could utilize 
facts such as  as well as simplifications such as  
and ultimately operations will bottom out at intersections and unions of version spaces. 
　a final issue to consider is the size of boundary sets. the simplest question that should be answered is under what conditions can a version space be represented by finite boundary sets. clearly one sufficient condition for finite boundary set size is if the version space is itself finite. gunter et al.  1   generalize the work presented here to give comparable conditions on when a version space is representable by finite boundary sets. equally important is answering the question of how large the finite boundary-set size is. haussler  has shown that boundary sets can grow exponentially in the number of instances processed. however  smith and rosenbloom  smith and rosenbloom  1  show that  for tree-structured languages under certain conditions data can be processed to guarantee that boundary sets stay singleton. understanding under what conditions exponential growth happens and how 
	hirsh 	1 
to avoid it is important in determining the practical utility of version spaces. these are questions for future work. 
acknowledgments 
this paper presents an updated version of chapter 1 of the author's doctoral dissertation  hirsh  1a   where more lengthy acknowledgments can be found. johanna seibt helped with initial formalizations. dave smith provided feedback on a very early draft  and william cohen on a more recent one. discussions with bruce buchanan  carl gunter  jeff kahn  bill landi  tbm marlowe  tom mitchell  teow-hin ngair  paul rosenbloom  and devika subramanian were invaluable. 
