
one of the main ways to specify goals of agents is to use temporal logics. most existing temporal logics are monotonic. however  in representing goals of agents  we often require that goals be changed non-monotonically. for example  the initial goal of the agent may be to be always in states where p is true. the agent may later realize that under certain conditions  exceptions it is ok to be in states where p is not true. in this paper  we propose a simple extension of ltl  which we call n-ltl  that allows non-monotonic specification of goals. we study properties of n-ltl. we also consider a translation from n-ltl to logic programs and study the relationship between n-ltl and logic programs.
1 introduction and motivation
in specifying goals of agents  bacchus and kabanza  1; niyogi and sarkar  1; baral et al.  1; baral and zhao  1; 1  many have used temporal logics such as linear temporal logic ltl  branching time temporal logics ctl   羽-ctl   and their extensions. however  all these logics are monotonic. in specifying goals of agents  often there is a need of being able to specify goals non-monotonically. for example  initially  an agent may be given a goal of having p true through the trajectory while reaching s. later  the agent may decide to weaken its goal so that in certain exceptional cases p does not have to be true. one way to do that would be for the agent to replace its original goal by a revised goal. coming up with a completely new revised goal  or obtaining the revised goal by doing surgery on the original goal specification violate the principle of elaboration tolerance  mccarthy  j.  1 . but if we use existing temporal logics  we do not have a choice. what we need is a goal specification language that allows us to update the goal specification by simply adding new statements to the original specification. such a goal specification language would be non-monotonic.
﹛another motivation for having a non-monotonicgoal specification language that allows easy updating through adding
is that we may not want to give the agent a directive that is too specific  too complicated  and that takes into account all possible exceptions  from the very beginning. besides we may not even know all the exceptions initially. a good non-monotonic goal specification language should allow us to specify a simple goal initially and should allow us to refine it by adding new exceptions.
﹛although non-monotonic versions of various modal logics  mcdermott  1  have been proposed in the past  so far we have come across only two1  fujiwara and honiden  1; saeki  1  non-monotonicversions of temporal logics. the first extends auto-epistemic logic with temporaloperatorsand does not explore issues such as elaboration tolerant representation of exceptions and weak exceptions. the second has semantics issues that are mentioned in the first.
﹛in this paper we start with developing a non-monotonic temporal logic based on the linear temporal logic ltl and then briefly mention non-monotonic versions of a branching time temporal logic. in designing our non-monotonic versions of temporal logics  we keep focus on our overall aim of having non-monotonic goal languages. so rather than follow the path of non-monotonic modal logics and auto-epistemic logic we focus on specific aspects of knowledge representation that need non-monotonicity and borrow some specific techniques that allow such non-monotonicity.
﹛one of the important use of non-monotonicityis the ability to express normative statements such as  normally q's have the property p.  this resonates well with our need of nonmonotonic goal languages as we may need to specify that  normally a state should satisfy the property p . accompanying normative statements we have various kinds of exceptions. for example  consider the age old normative statement  birds normally fly . one kind of exception  called  strong exceptions   to such a statement is that  penguins are birds that do not fly . another kind of exception  referred to as weak exceptions  is that  injured birds are weak exceptionsto the normative statement about birds flying;  as for wounded birds we do not know whether they fly or not. there is a need of similar exceptions with respect to goal specifications. a normative goal specification may specify that  normally a state should satisfy the property p . strong exceptions may be states that satisfy some specific conditions  while weak exceptions may be other states that satisfy some other specific conditions.
﹛to accommodate the above we introduce two special notations1
   r 耳
    r  耳
the intuitive meaning of the first one is that normally 耳 holds in a state and the label r lists the weak exceptions. the intuitive meaning of the second one is that normally 耳 holds in a state and the label r lists the strong exceptions.
﹛the role of r here is similar to the role of labeling defaults and normative statements when representing them in logic programming. there  often the label is used as a parameter with respect to the ab predicates.
﹛since the non-monotonicity in goal languages is not due to having incomplete knowledge about the states  but rather due to the specifier not quite precisely knowing what she wants  we do not use operators such as the negation as failure operator 'not' from logic programming. here the issue is different from inferring or assuming negation by default.
﹛on the other hand we borrow the idea behind program completion in logic programming to specify and interpret the conditions listed correspondingto the label r. thus there may be a set of conditions written as

that specify the strong exception or weak exception conditions with respect to r. given the above  the overall condition associated with r becomes 肉1 ˍ ... ˍ 肉k. one is allowed to add additional conditions. for example  if is added to the above set then the overall condition associated with r becomes 肉1 ˍ ... ˍ 肉k ˍ 肉k+1.
we now illustrate the above with respect to an example.
example 1 suppose initially we want to maintain p true while reaching for s. we know beforehand that our aim to maintain p is not strict; it is just that we do not know yet  under what conditions truth of p may not be necessary. after a while  we realize that when q is true we may not need to have p true.
the initial goal can be written in our language as g :
. it says that we should maintain p while reaching s. if the strong exception r happens in some states  we may not need to maintain p in those states. the weak exception r is then specified as.
﹛to informally illustrate how non-monotonicity is manifested in the above example  we first define when a language is monotonic.
definition 1 a logic l together with a query language q and entailment relation |= is monotonic if for all   in and in q  t |= t implies. 
with respect to example 1 let 
. intuitively is equivalent to in ltl; thus. this illustrates the non-monotonicity of our proposed language. we now move to the formal definition of our language and its semantics.
﹛the rest of this paper is organized as follows: since our first non-monotonic goal language n-ltl is based on ltl  we first give an overview of the temporal logic ltl. then  in section 1  we propose the syntax and semantics of a new language n-ltl  together with its properties. in section 1  we study the relationship between n-ltl and logic programs. we then briefly discuss how one can use a similar approach to develop non-monotonic versions of other temporal logics such as ctl .
1 background: goal representation using ltl
in this section  we summarize the linear temporal logic ltl and what it means for a sequence of actions to be a plan with respect to a goal in ltl. syntactically  ltl formulas are made up of propositions  propositional connectives ˍ  ＿  and    and future temporal connectives      and u. we now formally define truth values of temporal formulas with respect to trajectories. a trajectory is an infinite sequence of states.
definition 1 let be an atomic proposition  an ltl formula.



definition 1 let 考 given by s1 s1 ... sk  sk+1 ... be a trajectory  p denote a propositional formula  sj  j ≡ 1  denote a state  and f and fis  i = 1  denote ltl formulas.
   sj 考  |= p iff p is true in sj.
.  and  sj 考  |= f1.
  for all k ≡ j.
  for some k ≡ j.
   sj 考  |= f1 u f1 iff there exists k ≡ j such that  sk 考  |= f1 and for all i  j ≒ i   k   si 考  |= f1. 
﹛often  bacchus and kabanza  1; baral et al.  1  planning with respect to ltl goals are formalized with the assumption that there is complete information about the initial state  and the actions are deterministic. let 朴 be a transition function that defines transitions between states due to actions. 朴 si ak  = sj iff the action ak transits the agent from state si to state sj. let s be a state designated as the initial state  and let a1 ... an be a sequence of deterministic actions whose effects are described by a domain description.
﹛since truth of ltl formulas are defined with respect to a reference state and a trajectory made up of an infinite sequence of states  to define the correctness of a plan consisting of a finite sequence of actions with respect to an initial state and an ltl goal  the finite sequence of states obtained by applying the plan to the initial state is appended with the last state infinitely.
﹛the trajectory corresponding to s and a1 ... an is the sequence s1 s1 ...  that satisfies the following conditions: s = s1  si+1 = 朴 si ai+1   for 1 ≒ i ≒ n   1  and sj+1 = sj  for j ≡ n.
definition 1  plans with respect to ltl goals  the sequence of actions a1 ... an is a plan from the initial state s for the ltl goal f  if  s 考  |= f  where 考 is the trajectory corresponding to s and a1 ... an. 
﹛the role of ltl in specifying planning goals has been well studied and examples of that can be found in  bacchus and
kabanza  1; niyogi and sarkar  1; baral et al.  1 .
1 n-ltl: a non-monotonic extension of ltl
in this section  we extend ltl to capture non-monotonic requirements in specifying a goal. we call the new language n-ltl which stands for non-monotonic ltl. we first define the syntax and semantics of the language.
1 syntax
while designing the language we asked ourselves two questions.
  if syntactically the goal is one temporal formula  how can we revise it to have new goals by just adding to the original formula 
  how to refer to one part of a specification in another part of the specification 
for the first we borrow ideas from reiter's approach to reason about actions  reiter  1  where he compiles his specification to classical logic. while the classical logic part is monotonic  reasoning with respect to the specification language is non-monotonic and the non-monotonicity is achieved through the compilation process. for the second we borrow ideas from logic programming. similar to a logic program consisting of a set of rules  we consider each n-ltl formula to be a set of rules and we use rule labels such as r in example 1 to link these rules into one temporal formula.
definition 1 let {g}  r  and p be three disjoint sets of  be an atom in r   be an atom in p   is a formula defined below:


﹛an n-ltl formula is a set of rules  where e is the head  and f is the body of the rule. 
in an n-ltl formula  g is a special symbol that stands for the final goal formula. r is the set of labels to be used to define corresponding strong exceptions and weak exceptions. a formula f defines the conditions of atoms in r or the conditions of g. intuitively   means that normally f is true  with the weak exceptionsdenoted through means that normally f is true  with the strong exceptions denoted through r. the weak and strong exception conditions corresponding to r are defined through other rules.
definition 1  atom dependency  let be a rule in an n-ltl formula. if e1 ﹋ r occurs in the body of  then e1 depends on e1. the dependency relation is transitive.

definition 1  loop free  an n-ltl formula is loop free if in the formula  no atom in r depends on itself.  example 1 the following formula

is not loop free as r1 depends on r1 and r1 depends on r1.
an n-ltl specification is a loop free n-ltl formula.
1 semantics of n-ltl specifications
as we mentioned earlier  we define the semantics of n-ltl specifications by following the approach taken by reiter to reason about actions: we compile n-ltl specifications to ltl theories.
definition 1 given a loop-free n-ltl formula  i.e.  an nltl specification  t  we translate it to an ltl formula tr t  as follows:
1. letbe all the rules in t with e in the head  e ﹋ {g}﹍r. we construct a formula f1ˍf1ˍ﹞﹞﹞ˍfn  and we call it e e . we do this for any atom e if the set of rules with e in the head is not empty.
1. if atom a1 depends on atom a1  and e a1  is defined  we replace any occurrence of  a1  f  in e a1  with f ˍ e a1 . the revised formula is still called e a1 .
1. if atom a1 depends on atom a1  and e a1  is defined  we replace any occurrence of   a1   f  in e a1  with e a1 . the revised formula is still called e a1 .
1. we do step 1 and step 1 recursively until no atoms e depending on g while e e  is not empty occurs in e g .
1. finally  in e g   we replace all remaining  r  f  and   r   f  with f. the revised goal formula is tr t .

example 1 let us consider the n-ltl formula t as follows:

according to the definition  we know initially e g 	=
  and e r1  = s.
by replacing the formulas according to the dependence relations  we have
q . there is no rules with r1 as the head. thus
. further .
﹛loop-free n-ltl formulas  also called n-ltl specification  have the following properties.
proposition 1 given an n-ltl specification t  tr t  is a well defined ltl formula.
﹛given this property  we can define when a plan satisfies an n-ltl goal.
definition 1 let t be an n-ltl specification. given a state s  and a trajectory 考 = s1 s1 ﹞﹞﹞  sk ﹞﹞﹞   s 考  |= t in n-ltl if  s 考  |= tr t  with respect to ltl. 
definition 1  plans with respect to n-ltl goals  let t be an n-ltl specification. a sequence of actions a1  ﹞﹞﹞  an is a plan from the initial state s for the n-ltl goal t  if 考 is the trajectory corresponding to s and a1  ﹞﹞﹞  an  and
 s 考  |= t in n-ltl.	
﹛n-ltl specifications that do not have any strong exceptions  but may have weak exceptions  always make the goal weaker by accepting more plans when adding new rules.
proposition 1 for any n-ltl specification  if p is a plan with respect to t which does not have any strong exceptions  but may have weak exceptions   then p is a plan with respect to.
﹛temporal logics such as ltl have a different property when we consider an ltl goal formula to be a set of temporal formulas and add new formulas to an existing theory. if p is a plan with respect to an ltl goalthen p is also a plan with respect to t. in ltl  adding more formulas reduces  or at best leaves it unchanged  the set of plans satisfying it while in n-ltl that does not have strong exceptions  adding more rules enlarges the set of plans satisfying it  or at least leaves it unchanged . this is not the case when the n-ltl theory has strong exceptions.
example 1 consider the problem in example 1. the initial n-ltl formula is the specification t given as:

according to the definition  since there are no rules with head r1  we have  sj 考  |= t in n-ltl iff in
ltl.
suppose we add t  as given below  to it:

according to the definition  we know and e r1  =  q . further revision makes  in n-ltl iff  sj 考  |= in ltl.
﹛we can check that any plan satisfies ltl formula p ＿ s also satisfies  does not have strong exceptions  and proposition 1 holds here.
﹛now  let us define what do we mean when we say that nltl is non-monotonic. ltl is monotonic since t |= t implies where are two sets of ltl temporal formulas and t is an ltl temporal formula. we consider the following entailment in n-ltl.
definition 1  entailment  t |= t if tr t  |= t  where t is an n-ltl specification and t is an ltl formula. 
proposition 1 the entailment in definition 1 is nonmonotonic.
let us consider one example to illustrate the use of n-ltl.
example 1 one professor asks his robot to make a photocopy of one document and fetch a cup of coffee. however  before the robot goes out the office  the professor finds out that the coffee is sold out. no plan can satisfy the goal given to the robot. the professor would now like to weaken the goal. following are three possibilities:
1. he would be happy with a cup of tea instead;
1. he just needs the copy of the document and is willing toforget about the coffee;
1. the robot may come back to his office with the documentcopied and go about looking for the coffee later.
﹛if the professor was using n-ltl and from past experience knows that he may have to revise his goal  especially with respect to coffee  he can express his initial goal as:

﹛it is equivalent to satisfying  in ltl.
﹛later on  according to the new conditions and new alternatives  the professor may revise his original goal by adding one of the following three rules:
1. adding the new rule which makes the overall goal equivalent to  in ltl;
1. let  denote true and ﹠ denote false. adding the new rule which makes the overall goal equivalent to
 in ltl  which is equivalent to  in ltl;
1. adding the new rulemakes the overall goal equivalent to  coffee＿copy＿

in ltl. now it allows the agent to get the document copied first before waiting for the coffee.
﹛if we want to get tea instead of coffee  we should know initially that the sub-task of getting coffee can be replaced by a different goal.1 now  the initial formulation is

when we add a new goal. the goal afterwards is equivalent to  in ltl.
﹛note that  copy  must be satisfied in this domain as the professor does not want to weaken this condition. while the robot is on its way of getting things done  some other exceptions may happen. with n-ltl  we may further refine part of the goal.
﹛note that if a rule in the formula has a substring   r1   f   then removing rulesmay affect the semantics of the formula. if there is no substring   r1   f  in any part of the formula  then we can remove ruleswithout affecting the semantics of the formula.
1 complexity of n-ltl
the complexity of various problems  planning etc.  with respect to n-ltl specifications is at the same level of the polynomial hierarchy as with respect to ltl specifications. this is because  the loop-free criteria and the fact that there are polynomial number of special symbols like  r  and   r   ensure that an n-ltl specification can be converted to an ltl specification in polynomial time and the increase in size is also polynomial.
1 relation to logic programs
we now consider the relation between n-ltl goals and logic programs  especially with respect to planning. use of temporal domain knowledge in planning was first proposed in  bacchus and kabanza  1 . planning with temporal logic ltl has also been studied in  neljanko and niemela“  1; son et al.  1 . in this section  we translate a domain description and a goal specified in n-ltl to a logic program. we consider the relations of stable models of the translated programs and the original planning problems. in the following translation  for  even if si and sj in the trajectory are referring to the same state  we assign them different labels.
definition 1 let 考 given by s1 s1 ﹞﹞﹞  sk ﹞﹞﹞ be a trajectory  p denote an atom  sj denote a state  f  f1  and f1 denote ltl formulas that also take elements in r as atoms. we now define an encoding of 考  called encoding 考 t   where t is an n-ltl formula. the encoding consists of the following parts:
1. for any i such that 1 ≒ i  there is a rule next si si+1  ↘ .
1. for any 1 ≒ i   j  there is a rule future si sj  ↘ .
1. if p is true in state s  there is a rule
holds si p  ↘ .
where si is the ith state in the trajectory and it corresponds to the state s.
1. the following rules corresponding to    ˍ  and ＿ are in
the programholds s  f ↘not holds s f .holds s f1 ˍ f1 ↘holds s f1 .holds s f1 ˍ f1 ↘holds s f1 .holds s f1 ＿ f1 ↘holds s f1  holds s f1 .1. the following rules correspondingto temporal operators    and  are in the program:
. 	not .
1. the following rules corresponding to the temporal operator u are in the program:
nfirst s s1 f ↘future s s1   future s1 s1  holds s1 f .first s s1 f ↘not nfirst s s1 f   future s s1  holds s1 f .nholds s f1uf1 ↘first s s1 f1  future s s1   future s1 s1  holds s1  f1 .holds s f1uf1 ↘not nholds s f1uf1 .
definition 1 we encode an n-ltl formula t into a logic program  denoted by lp t  as follows:
﹛for each rule   we create a list of the atoms from r  the set of rule labels  that occur in f. if one atom occurs multiple times in f  we include it as many times in the list. we now revise f to a set of new formulas simplify f :
  for any atom rk in the list  if it is not in the head of any rule  then we replace all occurrences of  rk  fk  or   rk   fk  with fk;
  otherwise  suppose the ith atom in the list is ej. if it occurs in the formula f as   ej   fj   then we replace this sub-formula   ej   fj  in f with ej.
  suppose a list of atoms ei1 ei1 ﹞﹞﹞  eil remain in formula f. we calculate a cartesian productof l sets  where the sth set is {eis fis} and the sth atom eis occurs in the formula f as  eis  fis . we replace each occurrence
 eis  fis  by either eis or fis according to its value in one element of the cartesian product. thus we have 1l different combinations. we consider each combination as one instance of simplify f   the revised formula of f.
we then add the rule holds s e  ↘ holds s simplify f  .
into lp t  for each of formula in simplify f .	
example 1 suppose one rule in an n-ltl goal t is as follows:

there are rules in t with the head r1 and also rules with the head r1. there are no rules in t with the head r1. we need to add the following 1 rules into lp t :
holds s r ↘holds s f ＿ h ＿ r1 ＿ t .holds s r ↘holds s f ＿ r1 ＿ r1 ＿ t .holds s r ↘holds s r1 ＿ h ＿ r1 ＿ t .holds s r ↘holds s r1 ＿ r1 ＿ r1 ＿ t .﹛note that in the translated program  we have an atom holds s f ＿ r1 ＿ r1 ＿ t . r1 and r1 are not atoms in the transition system. they are defined by other rules.
example 1 consider the n-ltl goal as follows:

it is known that this formula is equivalent to the ltl formula . we have the following rules in lp t :
.
﹛consider a trajectory 考 = s1 s1 s1 ﹞﹞﹞  s1 ﹞﹞﹞ where only t is true in state s1. no fluent is true in state s1.
in the program encoding 考 t   we know is true in all its stable models. thus we have holds s1 r1  in all stable models of encoding 考 t  ﹍ lp t . further  according to item 1 in definition 1  since there is a rule
. we know
. thus holds s1 g  is true in all stable models of the program.
proposition 1 given a trajectory 考 = s1 s1 ﹞﹞﹞  sn ﹞﹞﹞.
 in n-ltl iff
1 non-monotonic extension of ctl   羽-ctl   and p-ctl 
different from ltl  in ctl   emerson and srinivasan  1; emerson  1   羽-ctl   baral and zhao  1   and pctl   baral and zhao  1   formulas are categorized as state formulas and path formulas. as a consequence  the corresponding non-monotonic languages should be defined with respect to path formulas and state formulas respectively. we now define the way of extending the definition of nonmonotonic temporal logics for ctl   called n-ctl . we base the language n-ctl  on ctl .
﹛we refer readers to  emerson and srinivasan  1; emerson  1  for the syntax and semantics of ctl . there are two kinds of formulas in ctl : state formulas and path formulas. normally state formulas are properties of states while path formulas are properties of paths. recall that the symbols a and e are the branching time operators meaning 'for all paths' and 'there exists a path' respectively.
definition 1 let {g}  rpf  rsf and p be four disjoint sets of atoms. let be an atom in rpf be an atom in  be an atom in p  e ﹋ {g} ﹍ rsf. letdenote a state formula  anddenote a path formula.

an n-ctl  formulais a set of rules.
each of e or rpf is the head of the rule  and each of sf or pf is the body of the rule.	
﹛the semantics of n-ctl  is defined in a way similar to the definition of the semantics of n-ltl. we now illustrate the usefulness of n-ctl  through two examples.
example 1 the initial goal is to require that p be true until q is reached. however  it is realized that in some domain  this goal is too strong as no plan can always have p until reaching q. if in some states in the main path  all possible trajectories will have p true in the future  then we may consider it as a strong exception and may allow not to have p. the initial goal can be represented as in n-ctl . this goal is equivalent to puq in ctl . it can be further refined by addingonerule aboutthe weak exception. the revised goal is equivalent to   which is equivalent to .
example 1 initially  the goal is to make sure that in most trajectories starting from the initial state  p is true. however  later on  we may require that once q is satisfied by some trajectories  those trajectories are considered as exceptional ones and we do not require them to satisfy p. the initial goal is represented as: . later  the goal can be weakened by adding the weak exception rule.
﹛the initial goal is equivalent to the ctl  formula and the revised goal is equivalent to a.
1 conclusion and future work
in this paper  we proposed a non-monotonic temporal logic based on ltl and hinted at a branching time non-monotonic temporal logic based on ctl . we motivated the need for such non-monotonic temporal logics from the point of view of needing ways to express goals that can be changed in an elaboration tolerant manner. we presented several properties of our non-monotonic goal language n-ltl and briefly discussed its encoding using logic programming.
﹛one possible controversial design decision that we made is to empower the specifier to decide whether weak exceptions or strong exceptions are allowed. this is in contrast to use of defaults in standard non-monotonic logics where the normative statement itself does not refer to strong exception or weak-exception  but rather they are added separately. further study to compare the two approaches is an immediate future work.
1 acknowledgement
this work was supported by a contract from arda and nsf grant 1. we thank the anonymous reviewers for their comments  especially for pointing us to the earlier work  fujiwara and honiden  1 .
