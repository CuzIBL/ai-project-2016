
we propose an approach for extending both the terminological and the assertional part of a description logic knowledge base by using information provided by the knowledge base and by a domain expert. the use of techniques from formal concept analysis ensures that  on the one hand  the interaction with the expert is kept to a minimum  and  on the other hand  we can show that the extended knowledge base is complete in a certain  well-defined sense.
1 introduction
description logics  dls   baader et al.  1  are a successful family of logic-based knowledge representation formalisms  which can be used to represent the conceptual knowledge of an application domain in a structured and formally well-understood way. they are employed in various application domains  such as natural language processing  configuration  databases  and bio-medical ontologies  but their most notable success so far is due to the fact that dls provide the logical underpinning of owl  the standard ontology language for the semantic web  horrocks et al.  1 . as a consequence of this standardization  several ontology editors support owl  knublauch et al.  1; oberle et al.  1; kalyanpur et al.  1a   and ontologies written in owl are employed in more and more applications. as the size of these ontologies grows  tools that support improving their quality become more important. the tools available until now use dl reasoning to detect inconsistencies and to infer consequences  i.e.  implicit knowledge that can be deduced from the explicitly represented knowledge. there are also promising approaches that allow to pinpoint the reasons for inconsistencies and for certain consequences  and that help the ontology engineer to resolve inconsistencies and to remove unwanted consequences  schlobach and cornet  1; kalyanpur et al.  1b . these approaches address the quality dimension of soundness of an ontology  both within itself  consistency  and w.r.t. the intended application domain
 no unwanted consequences . in the present paper  we are concerned with a different quality dimension: completeness. we provide a basis for formally well-founded techniques and tools that support the ontology engineer in checking whether an ontology contains all the relevant information about the application domain  and to extend the ontology appropriately if this is not the case.
모a dl knowledge base  nowadays often called ontology  usually consists of two parts  the terminological part  tbox   which defines concepts and also states additional constraints  so-called general concept inclusions  gcis  on the interpretation of these concepts  and the assertional part  abox   which describes individuals and their relationship to each other and to concepts. given an application domain and a dl knowledge base  kb  describing it  we can ask whether the kb contains all the relevant information1 about the domain:
  are all the relevant constraints that hold between concepts in the domain captured by the tbox 
  are all the relevant individuals existing in the domain represented in the abox 
모as an example  considerthe owl ontologyfor human protein phosphatases that has been described and used in  wolstencroft et al.  1 . this ontology was developed based on information from peer-reviewed publications. the human protein phosphatasefamily has beenwell characterised experimentally  and detailed knowledge about different classes of such proteins is available. this knowledge is represented in the terminological part of the ontology. moreover  a large set of human phosphatases has been identified and documented by expert biologists. these are described as individuals in the assertional part of the ontology. one can now ask whether the information about protein phosphatases contained in this ontology is complete. are all the relationships that hold among the introduced classes of phosphatases captured by the constraints in the tbox  or are there relationships that hold in the domain  but do not follow from the tbox  are all possible kinds of human protein phosphatases represented by individuals in the abox  or are there phosphatases that have not yet been included in the ontology or even not yet been identified 
모such questions cannot be answered by an automated tool alone. clearly  to check whether a given relationship between concepts-which does not follow from the tbox-holds in the domain  one needs to ask a domain expert  and the same is true for questions regarding the existence of individuals not described in the abox. the ro le of the automated tool is to ensure that the expert is asked as few questions as possible; in particular  she should not be asked trivial questions  i.e.  questions that could actually be answered based on the represented knowledge. in the above example  answering a nontrivial question regarding human protein phosphatases may require the biologist to study the relevant literature  query existing protein databases  or even to carry out new experiments. thus  the expert may be prompted to acquire new biological knowledge.
모attribute exploration is an approach developed in formal concept analysis  fca   ganter and wille  1  that can be used to acquire knowledge about an application domain by querying an expert. one of the earliest applications of this approach is described in  wille  1   where the domain is lattice theory  and the goal of the exploration process is to find  on the one hand  all valid relationships between properties of lattices  like being distributive   and  on the other hand  to find counterexamples to all the relationships that do not hold. to answer a query whether a certain relationship holds  the lattice theory expert must either confirm the relationship  by using results from the literature or carrying out a new proof for this fact   or give a counterexample  again  by either finding one in the literature or constructing a new one . although this sounds very similar to what is needed in our context  we cannot directly use this approach. the main reason is the open-world semantics of description logic knowledge bases. consider an individual i from an abox a and a concept c occurring in a tbox t . if we cannot deduce from the tbox t and a that i is an instance of c  then we do not assume that i does not belong to c. instead  we only accept this as a consequence if t and a imply that i is an instance of  c. thus  our knowledge about the relationships between individuals and concepts is incomplete: if t and a imply neither c i  nor  c i   then we do not know the relationship between i and c. in contrast  classical fca and attribute exploration assume that the knowledge about individuals is complete: the basic datastructure is that of a formal context  i.e.  a crosstable between individuals and properties. a cross says that the property holds  and the absence of a cross is interpreted as saying that the property does not hold.
모there has been some work on how to extend fca and attribute exploration from complete knowledge to the case of partial knowledge  obiedkov  1; burmeister and holzer  1 . however  this work is based on assumptions that are different from ours. in particular  it assumes that the expert cannot answer all queries and  as a consequence  the knowledge obtained after the exploration process may still be incomplete and the relationships between concepts that are produced in the end fall into two categories: relationships that are valid no matter how the incomplete part of the knowledge is completed  and relationships that are valid only in some completions of the incomplete part of the knowledge. in contrast  our intention is to complete the kb  i.e.  in the end we want to have complete knowledge about these relationships. what may be incomplete is the description of individuals used during the exploration process.
모in the next section  we introduce our variant of fca that can deal with partial contexts  and describe an attribute exploration procedure that works with partial contexts. in section 1  we show how a dl knowledge base gives rise to a partial context  define the notion of a completion of a knowledge base w.r.t. a fixed model  and show that the attribute exploration algorithm developed in the previous section can be used to complete a knowledge base. in section 1 we describe ongoing and future work. this paper is accompanied by a technical report  baader et al.  1  containing more details and in particular full proofs of our results.
1 exploring partial contexts
in this section  we extend the classical approach to formal concept analysis  fca   as described in detail in  ganter and wille  1   to the case of individuals  called objects in fca  that have only a partial description in the sense that  for some properties  called attributes in fca   it is not known whether they are satisfied by the individual or not. the connection between this approach and the classical approach is explained in  baader et al.  1 . in the following  we assume that we have a finite set m of attributes and a  possibly infinite  set of objects.
definition 1 a partial object description  pod  is a tuple
 a s  where a s   m are such that a 뫌 s =  . we call such a pod a full object description  fod  if a 뫋 s = m. a set of pods is called a partial context and a set of fods a full context.
intuitively  the pod  a s  says that the object it describes satisfies all attributes froma and does not satisfy any attribute from s. for the attributes not contained in a 뫋 s  nothing is known w.r.t. this object. a partial context can be extended by either adding new pods or by extending existing pods.
definition 1 we say that the pod  extends the pod
  and write this as  and
s   s . similarly  we say that the partial context k extends the partial context k  and write this as  if every pod in k is extended by some pod inis a full context and
k 뫞 k  then k is called a realizer of k. if  a s  is a fod
  then we also say that  a s  realizes
모next  we introduce the notion of an implication between attributes which formalizes the informal notion  relationship between properties  used in the introduction.
definition 1 an implication is of the form l 뫸 r where
l r   m. this implication is refuted by the pod  a s  if
 . it is refuted by the partial context k if it is refuted by at least one element of k. the set of implications that are not refuted by a given partial context k is denoted by imp k . the set of all fods that do not refute a given set of implications l is denoted by mod l .
for a set of implications l and a set p   m  the implicational closure of p with respect to l  denoted by l p   is the smallest subset q of m such that
  p   q  and
  l 뫸 r 뫍 l and l   q imply r   q.
a set p   m is called l-closed if l p  = p.
definition 1 the implication l 뫸 r is said to follow from a set j of implications if r   j l . the set of implications j is called complete for a set of implications l if every implication in l follows from j . it is called sound for l if every implication that follows from j is contained in l. a set of implications j is called a base for a set of implications l if it is both sound and complete for l  and no strict subset of j satisfies this property.
모the following is a trivial fact regarding the connection between partial contexts and the implications they do not refute  but it will turn out to be crucial for our attribute exploration algorithm.
proposition 1 for a given set p   m and a partial context  is the largest subset of m such that p 뫸 k p  is not refuted by k.
attribute exploration with partial contexts
the classical attribute exploration algorithm of fca assumes that there is a domain expert that can answer questions regarding the validity of implications in the application domain. accordingly  our approach requires an expert that can decide whether an implication is refuted in the application domain or not. in contrast to existing work on extending fca to the case of partial knowledge  obiedkov  1; burmeister and holzer  1   we do not assume that the expert has only partial knowledge and thus cannot answer all implication questions.
모to be more precise  we consider the following setting. we are given an initial  possibly empty  partial context k  an initially empty set of implications l  and a full context k that is a realizer of k. the expert answers implication questions  l 뫸 r   w.r.t. the full context k. more precisely  if the answer is  yes   then k does not refute l 뫸 r. the implication l 뫸 r is then added to l. otherwise  the expert extends the current context k such that the extended context refutes l 뫸 r and still has k as a realizer. consequently  the following invariant will be satisfied by:

k 뫞 k   mod l .
our aim is to enrich k and l such that eventually l is not only sound  but also complete for imp k   and k refutes all

other implications  i.e.  all the implications refuted by k . as in the classical case  we want to do this by asking as few as possible questions to the expert.
definition 1 let l be a set of implications and k a partial context. an implication is called undecided w.r.t. k and l if it neither follows from l nor is refuted by k. it is decided w.r.t. k and l if it is not undecided w.r.t. k and l.
in principle  our attribute exploration algorithm tries to decide each undecided implications by either adding it to l or extending k such that it refutes the implication. if all implications are decided  then our goal is achieved.

proposition 1 assume that k 뫞 k   mod l  and that all implications are decided w.r.t. k and l. then l is complete for imp k  and k refutes all implications not belonging to

imp k .
모how can we find-and let the expert decide-all undecided implications without considering all implications  the following proposition motivates why it is sufficient to consider implications whose left-hand sides are l-closed.
proposition 1 let l be a set of implications and l 뫸 r an implication. then  l 뫸 r follows from l iff l l  뫸 r follows from l.
모concerning right-hand sides  proposition 1 says that the largest right-hand side r such that l 뫸 r is not refuted by k is r = k l . putting these two observations together  we only need to consider implications of the form l 뫸 k l  where l is l-closed. in orderto enumerateall left-hand sides  we can thus use the well-known approach from fca for enumerating closed sets in the lectic order  ganter and wille  1 .
definition 1 assume that m = {m1 ... mn} and fix some linear order m1   m1   몫몫몫mn on m. the lectic
order   is defined as follows: for mi 뫍 m and a b   m we define
a  i b iff mi 뫍 b   a and
a 뫌 {m1 ... mi 1} = b 뫌 {m1 ... mi 1}.
the order   is the union of the orders  i.
obviously    extends the strict subset order  and thus   is the smallest and m the largest set w.r.t.  .
proposition 1 given a set of implications l and an lclosed set  the next l-closed set following a in the lectic order is l  a 뫌 {m1 ... mj 1}  뫋 {mj}  where j is maximal such that a  j l  a 뫌 {m1 ... mj 1}  뫋 {mj}.
모if an implication is added because the expert has stated that it holds in k  then we can extend the current context k by closing the first component of every pod in k w.r.t. the new set of implications l. in fact  l   imp k  makes sure that

the extended context is still realized by k. to allow for this and possible other ways of extending the partial context  the formulationof the algorithm just says that  in case an implication is added  the partial context can also be extended. when-
ever an implication is not accepted by the expert  k will be extended to a context that refutes the implication and still has k as a realizer.
모based on these considerations  our attribute exploration algorithm for partial contexts is described in algorithm 1. it takes a partial context k1 and a set m of attributes to be explored  and interacts with an expert who has information about a full context k that realizes k1. it goes through the set of implications over m in the lectic order of their left hand sides and  in case they are undecided in the current partial context  asks the expert to decide them. in case an implication holds in k   a less redundant version of  it is added to the implication base. otherwise  the partial context is extend with a counterexample from k provided by the expert.
모the following theorem states that this algorithm always terminates  and in which sense it is correct. in section 1  we will briefly remark on its complexity.

theorem 1 let m be a finite set of attributes  and k and
k1 respectively a full and a partial context over the attributes algorithm 1 attribute exploration for partial contexts

1: input: m = {m1 ... mn} k1	{attribute set and

partial context  realized by full context k}
1: k := k1 {initialize partial context} 1: l :=   {initial empty set of implications} 1: p :=   {lectically smallest l-closed set}
1: while
1:	compute k p 
1:	if then {p 뫸 k p  is undecided}
1:	ask the expert if p 뫸 k p  is refuted by k
 1:	if no then {p 뫸 k p  not refuted} 1:	where k is a partial context such that
optionally extend k}
1:	:=	   
1:	pnew := l  p 뫌 {m1 ... mj 1}  뫋 {mj} 
for the max. j that satisfies
p  j l  p 뫌 {m1 ... mj 1}  뫋 {mj} 
1:	else {p 뫸 k p  refuted}
1:	get a partial context k from the expert such that is refuted by k
1:
1:	pnew := p	{p not changed}
1:	end if
1:	else {trivial implication}
1:	pnew := l  p 뫌 {m1 ... mj 1}  뫋 {mj} 
for the max. j that satisfies
p  j l  p 뫌 {m1 ... mj 1}  뫋 {mj} 
1:	end if 1:	p := pnew
1: end while


in m such that k1 뫞 k. then algorithm 1 terminates and  upon termination  it outputs a partial context k and a set of implications l such that

1. l is a base for imp k   and

1. k refutes every implication that is refuted by k.
1 completing dl knowledge bases
in order to represent knowledge about an application domain using description logics  dls   see  baader et al.  1  for more details and references   one usually first defines the relevant concepts of this domain  and then describes relationships between concepts and between individuals and concepts in the knowledge base. to construct concepts  one starts with a set nc of concept names  unary predicates  and a set nr of role names  binary predicates   and builds complex concept descriptions out of them by using the concept constructors provided by the particular description language being used. in addition  a set ni of individual names is used to refer to domain elements. in this paper  we do not fix a specific set of constructors since our results apply to arbitrary dls as long as they allow for the constructors conjunction and negation  see the upper part of table 1 . a tbox is a finite set of general concept inclusions  gcis   and an abox is a finite set of concept and role assertions  see the lower part of table 1 .
a knowledge base  kb  consists of a tbox together with an
name of constructorsyntaxsemanticsnegation c붟i   ciconjunctionci 뫌 digeneral concept inclusionci   diconcept assertionc a ai 뫍 cirole assertionr a b  ai bi  뫍 ritable 1: conjunction  negation  gcis  and abox assertions.
abox. the semantics of concept descriptions  tboxes  and aboxes is given in terms of an interpretation  where 붟i  the domain  is a non-empty set  and 몫i  the interpretation function  maps each concept name a 뫍 nc to a set ai   붟i  each role name r 뫍 nr to a binary relation ri   붟i 뫄 붟i  and each individual name a 뫍 ni to an element ai 뫍 붟i. concept descriptions c are also interpreted as sets ci   붟i  which are defined inductively  as seen in the semantics column of table 1 for the constructors conjunction and negation. an interpretation i is a model of the tbox t  the abox a  if it satisfies all its gcis  assertions  in the sense shown in the semantics column of the table. in case i is a model of both t and a  it is also called a model of the knowledge base  t  a . if there is such a model  we call the kb consistent.
모given a kb  t  a   concept descriptions c d  and an individual name a  the inference problems subsumption and instance are defined as follows: c is subsumed by d w.r.t. t  holds for all models i of t ; and a is an instance of c w.r.t. t and a  t  a |= c a   if ai 뫍 ci holds for all models of  t  a . for most dls  these problems are decidable  and there exist highly optimized dl reasoners such as fact  racer  and pellet that can solve these problems for very expressive dls on large practical kbs.
모as mentioned above  our approach for completing dl knowledge bases applies to arbitary dls  provided that the description language allows at least for conjunction and negation  the tbox formalism allows for gcis  the abox formalism allows for concept assertions  and the subsumption and the instance problem are decidable.
dls and partial contexts
let  t  a  be a consistent dl knowledge base  and m be a finite set of concept descriptions. an individual name a occurring in a gives rise to the partial object description podt  a a m  :=  a s  where
a := {c 뫍 m | t  a |= c a }	and s := {c 뫍 m | t  a |=  c a } 
and the whole abox induces the partial context
kt  a m  := {podt  a a m  | a an individual name in a}.
note that podt  a a m  is indeed a pod since  t  a  was assumed to be consistent. similarly  any element d 뫍 붟i of an interpretation i gives rise to the full object description fodi d m  :=  a s  where
a := {c 뫍 m | d 뫍 ci} 	s := {c 뫍 m | d 뫍   c i}  and the whole interpretation induces the full context
ki m  := {fodi d m  | d 뫍 붟i}.
proposition 1 letbe dl kbs such that  and	 
next  we straightforwardly transfer the notion of refutation of an implication from partial  full  contexts to knowledge bases  interpretations .
definition 1 the implication l 뫸 r over the attributes m is refuted by the knowledge base  t  a  if it is refuted by kt  a m   and it is refuted by the interpretation i if it is refuted by ki m . if an implication is not refuted by i  then we say that it holds in i. in addition  we say that l 뫸 r follows from  where respectively stand for the conjunctions c뫍l c and d뫍r d.
obviously  the implication l 뫸 r holds in . as an immediate consequence of this fact  we obtain:
proposition 1 let t be a tbox and i be a model of t . if l 뫸 r follows from t   then it holds in i.
completion of dl kbs: formal definition and algorithm
we are now ready to define what we mean by a completion of a dl knowledge base. intuitively  the knowledge base is supposed to describean intended model. for a fixed set m of  interesting  concepts  the knowledge base is complete if it contains all the relevant knowledge about implications between these concepts. to be more precise  if an implication holds in the intended interpretation  then it should follow from the tbox  and if it does not hold in the intended interpretation  then the abox should contain a counterexample. based on the notions introduced above  this is formalized as follows.
definition 1 let  t  a  be a consistent dl knowledge base  m a finite set of concept descriptions  and i a model of  t  a . then  t  a  is m-complete  or complete if m is clear from the context  w.r.t. i if the following three statements are equivalent for all implications l 뫸 r over m:
1. l 뫸 r holds in i;
1. l 뫸 r follows from t ;
1. l 뫸 r is not refuted by  t  a .
let  t1 a1  be a dl knowledge base and i a model of  t1 a1 . then  t  a  is a completion of  t1 a1  if it is complete and extends  t1 a1   i.e.  t1   t and a1   a.
모an adaptation of the attribute exploration algorithm for partial contexts presented above can be used to compute a completion of a given knowledge base  t1 a1  w.r.t. a fixed model i of this knowledge base. it is assumed that the expert has or can obtain enough information about this model to be able to answer questions of the form  is l 뫸 r refuted by i  . if the answer is  no   then l 뫸 r holds according to the expert's opinion  and is thus added to the implication base computed by the algorithm. in addition  the gci is added to the tbox. since l 뫸 r is not refuted by i  the interpretation i is still a model of the new tbox obtained this way. if the answer is  yes   then the expert is asked to extend the current abox  by adding appropriate assertions on either old or new individual names  such that the extended abox refutes l 뫸 r and i is still a model of this abox. because of proposition 1  before actually asking the expert whether the implication l 뫸 r is refuted by i  we can first check whetheralready follows from the current tbox. if this is the case  then we know that l 뫸 r cannot be refuted by i. this completion algorithm for dl knowledge bases is described in more detail in algorithm 1.

algorithm 1 completion of dl knowledge bases
1: input: m = {m1 ... mn}   t1 a1  {attribute set and
knowledge base  with model i}
1: t := t1 	a := a1
1: l :=  	{initial empty set of implications}
1: p :=   {lectically smallest l-closed subset of m}
1: whiledo
1:	compute kt  a p 1:ifthen {check whether the implication follows from t }1:if 1: 1:	j	j
for the max. j that satisfies
p  j l  p 뫌 {m1 ... mj 1}  뫋 {mj} 1:else1:ask expert if p 뫸 kt  a p  is refuted by i.1:	if	t  a1:	l	l 뫋 {p 뫸 k	p   p}1:
1:
1:
1:get an abox a from the expert such that is a model of a  and
p 뫸 kt  a p  is refuted by a1:		{extend the abox}1:	pnew := p	{p not changed}1:end if1:end if1:else1:pnew := l  p 뫌 {m1 ... mj 1}  뫋 {mj}  for the max. j that satisfies
p  j l  p 뫌 {m1 ... mj 1}  뫋 {mj} 1:end if1:	p := pnew
1: end while모note that algorithm 1 applied to t1 a1 m with the underlying model i of  t1 a1  is an instance of algorithm 1 applied to the partial context kt1 a1 m  with the underlying full context ki m  as realizer. this shows that theorem 1 applies also to algorithm 1  which implies:
theorem 1 let  t1 a1  be a consistent knowledge base  m a finite set of concept descriptions  and i a model of  t1 a1   and let  t  a  be the knowledge base computed by algorithm 1. then  t  a  is a completion of  t1 a1 .
1 conclusion
we have extended the attribute exploration algorithm from fca to partial contexts  and have shown how the extended algorithm can be used to complete dl knowledge bases  using both dl reasoning and answers given by a domain expert. this algorithm inherits its complexity from  classical  attribute exploration  ganter and wille  1 : in the worst case  which occurs if there are few or many relationships between attributes  it is exponential in the number of attributes. regarding the number of questions asked to the expert  it easily follows from results shown in the technical report that our method asks the minimum number of questions with positive answers. for the questions with negative answers  the behaviour depends on the answers given by the expert: fcatheory implies that there always exist counterexamples that  if taken in each step  ensure a minimal number of questions with negative answers. in general  however  one cannot assume that the expert provides these  best  counterexamples.
모based on the results presented in the previous two sections  we have implemented a first experimential version of a tool for completing dl knowledge bases as an extension of the ontology editor swoop  kalyanpur et al.  1a   which uses the system pellet as underlying reasoner  sirin and parsia  1 . we have just started to evaluate our tool on the owl ontology for human protein phosphatases mentioned in the introduction  with biologists as experts  and hope to get first significant results on its usefulness and performance in the near future. unsurprisingly  we have observed that the experts sometimes make errors when answering implication questions. hence we will extend the completiontool such that it supports detecting such errors and also allows to correct errors without having to restart the exploration from scratch.
모from a theoretical point of view  we will also look at extensions of our definition of a complete kb. as a formalization of what  all relationships between interesting concepts  really means  we have used subsumption relationships between conjunctions of elements of the set of interesting concepts m. one could also consider more complex relationships by fixing a specific dl d  and then taking  as attributes  all dconcept descriptions over the concept  names  from m. the immediate disadvantage of this extension is that  in general  the set of attributes becomes infinite  and thus termination of the exploration process is no longer guaranteed. an extension of classical attribute exploration  i.e.  for full contexts  in this direction is described in  rudolph  1 . the main idea to deal with the problem of an infinite attribute set used there is to restrict the attention to concept descriptions with a bounded role depth. but even though this makes the attribute set finite  its size is usually too large for practical purposes. thus  an adaptation of rudolph's method to our purposes not only requires extending this method to partial contexts  but also some new approach to reduce the number of attributes.
