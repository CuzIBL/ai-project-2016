 
we propose a method for compiling propositional theories into a new tractable form that we refer to as decomposable negation normal form  dnnf . we show a number of results about our compilation approach. first  we show that every propositional theory can be compiled into dnnf and present an algorithm to this effect. second  we show that if a clausal form has a bounded treewidth  then its dnnf compilation has a linear size and can be computed in linear time - treewidth is a graphtheoretic parameter which measures the connectivity of the clausal form. third  we show that once a propositional theory is compiled into dnnf  a number of reasoning tasks  such as satisfiability and forgetting  can be performed in linear time. finally  we propose two techniques for approximating the dnnf compilation of a theory when the size of such compilation is too large to be practical. one of the techniques generates a sound but incomplete compilation  while the other generates a complete but unsound compilation. together  these approximations bound the exact compilation from below and above in terms for their ability to answer queries. 
1 	introduction 
compiling propositional theories has emerged as a new technique for enhancing the computational efficiency of automated reasoning systems. the basic idea here is to split the computational effort of such systems into two phases  off-line and on-line. in the off-line phase  a propositional theory is compiled into a tractable form which is then used in an on-line phase to answer multiple queries. the main value of such compilation is that most of the computational overhead is shifted into the off-line phase  which is amortized over all on-line queries. 
   one of the key approaches for compiling propositional theories has been proposed in . here  a propositional theory is compiled in an off-line phase into a horn theory  which is used in an on-line phase to answer multiple 
1 	challenge papers 
queries. as it is not always possible to compile a propositional theory into a horn theory  the propositional theory is generally compiled into two horn theories  which approximate the original theory from below and above in terms of logical strength. 
　in this paper  we propose to compile propositional theories into a new form  which we call decomposable negation normal form  dnnf . this form is a generalization of disjunctive normal form  dnf  and a specialization of negation normal form  nnf   l . dnnf is tractable as the satisfiability of theories expressed in dnnf can be decided in linear time. in fact  a number of other interesting reasoning tasks  such as forgetting   can also be performed in linear time on theories expressed in dnnf. 
　we show a number of results about our compilation approach. first  contrary to compilations into horn theories  we show that every propositional theory can be compiled into dnnf and present an algorithm to this effect. second  we show that if a clausal form has a bounded treewidth  then it has a linear dnnf compilation which can be computed in linear time. here  treewidth is a graph-theoretic parameter which measures the connectivity of a given clausal form. even when the clausal form does not have a bounded treewidth  we show that its dnnf compilation is exponential only in its treewidth and linear in all other aspects. finally  we present two techniques for approximating the dnnf compilation of a propositional theory in case such compilation is too large to be practical. one of the techniques generates a sound but incomplete compilation  while the other generates a complete but unsound compilation. together  these approximations bound the exact compilation from below and above in terms of their ability to answer queries. 
　this paper is structured as follows. section 1 introduces dnnf and its various properties. section 1 discusses the compilation of propositional theories into dnnf. section 1 discusses the two techniques for approximating a dnnf compilation and section 1 focuses on the operation of forgetting. finally  section 1 closes with some concluding remarks. proofs of theorems can be found in the long version of the paper . 


figure 1: a propositional sentence in dnnf. 
1 	decomposable nnf 
a propositional sentence is in negation normal form 
 nnf  if it is constructed from literals using only the conjoin and disjoin operators  l . figure 1 shows a sentence in nnf depicted as a rooted  directed acyclic graph where the children of each node are shown below it in the graph. each leaf node represents a literal and each non-leaf node represents a conjunction or a disjunction. we will also allow true and -  false to appear as leaves in a d n n f to denote a conjunction with no conjuncts. similarly  we will allow false and -trne as leaves to represent a disjunction with no disjuncts. the size of an nnf is measured by the number of edges in its graphical representation. note that every disjunctive normal form  dnf  is an nnf  and that every conjunctive normal form  cnf  is an nnf. there are nnfs  however  that are neither dnfs nor cnfs. 
our concern here is mainly with a subclass of nnfs: 
d e f i n i t i o n 1 	a 	decomposable negation normal form 
 dnnf  is a negation normal form satisfying the decomposability property: for any conjunction /   a  appearing in the form  no atoms are si tared by the conjuncts a . 
the nnf in figure 1 is decomposable. it has ten conjunctions and the conjuncts of each share no atoms. decomposability is the property which makes dnnf tractable. we will explore this property at length later  but we first note that every dnf is also a dnnf. 1 therefore  all properties that we shall prove of dnnfs also hold for dnfs. a question that may arise then is why not compile propositional theories into dnfs  as it turns out  there are propositional theories that have linear dnnf representations  yet exponential dnf representations. for example  consider a propositional theory  over n atoms  which is satisfied exactly by models in which an odd number of atoms is set to true  represents the odd-parity function . the dnf representation of this theory is known to be exponential in n. however  the theory has a d n n f representation which is linear in n. figure 1 depicts such representation for n - a. propositional theories in d n n f are tractable: 
*we assume that in the dnf .   no atoms are 
shared by the literals in 
1. deciding the satisfiability of a d n n f can be done in linear time. 
1. forgetting about some atoms in a d n n f can be done in linear time . 
1. computing the minimum cardinality of models that satisfy a d n n f can be done in linear time  where cardinality is the number of atoms that are set to true  or false  by the model . 
the last task has applications to model-based diagnosis and is outside the scope of this paper. our focus here will be on the first two tasks  which we consider next. 
　by a clause  over distinct atoms p1 ...  p n    we will mean a disjunction where is either or 
 by an instantiation  of distinct atoms   we will mean a conjunction we start with a linear test for deciding the satisfiability of nnfs. 
d e f i n i t i o n 1 let sat  be a predicate over nnfs defined as follows. sat  /  is true where i is a literal. 
  is true iff each sat   is true  is true iff some sat   is true. 
it should be clear that the predicate sat  a  can be evaluated in time which is linear in the size of nnf a. the previous test is sound and complete for dnnfs: 
t h e o r e m 1 	dnnf  is satisfiable 	iff  is true. 
   now that we have a satisfiability test  we can also define an entailment test. specifically  to test whether  entails clause  we only need to test whether 
is satisfiable. note  however  that even though both a and  may be in dnnf  their conjunction is not guaranteed to be in d n n f as  and may share atoms. this can be easily dealt with  however  using the notion of conditioning: 
 d e f i n i t i o n 1 	let  be a propositional sentence and let be an instantiation. 	the conditioning 	of  on 	written  is the sentence which results from replacing each atom p in  with true 	if the positive literal p appears in 
 and with false if the negative 	literal 	appears in 
for example  conditioning the on instantiation conditioning it on 
conditioning allows us to eliminate reference to atoms while preserving satisfiability: 
t h e o r e m 1 for dnnf a and instantiation is in dnnf  and  is satisfiable i f f i s satisfiable. 
therefore  to test whether dnnf entails clause   we only need to test whether a | ---zb is satisfiable  which is guaranteed to be in dnnf. we can now define a linear entailment test for dnnfs. actually  we will  more generally  define it for nnfs: 
d e f i n i t i o n 1 for nnf and clause define to be true when sat  is false  where is the instantiation negating clause .. 
this linear test is both sound and complete for dnnfs: 
t h e o r e m 1 	for dnnf a and 	clause 
	darwiche 	1 


figure 1: a prepositional sentence in dnnf. 
consider the dnnf   in figure 1  the clause 
  and suppose we want to test whether theorem 1 suggests that we condition   on   
　　　　　　　　　　　　  and then test whether s a t     is false. figure 1 depicts the conditioning of a on and the result of applying the sat  test. since sat  
is false  we conclude  and also 
   before we close this section  we present three important results on dnnf entailment. first  that the entailment test  is sound with respect  to sentences in nnf: 
t h e o r e m 1 for 	nnf 
that is  even though  may not be decomposable  the entailment test  is still sound  but not necessarily complete. even completeness of this test  however  can be guaranteed under the following condition. 
d e f i n i t i o n 1 nnf   is decomposable  except on atoms 
x iff for any 	in  only atoms in x are shared by the 
for example  the 	is decomposable except on b. 
t h e o r e m 1 let be an nnf -which  is decomposable except on x. let be a clause which mentions all atoms in x. then 
consider the nnf 	and the queries since is decomposable except on b  the test is sound and complete with respect to the first two queries but is only sound with respect to the third query. partial decomposability is extremely important in practice since the less decomposable a sentence is  the smaller its size will be. finally: 
t h e o r e m 1 for nnfr which is decomposable except on x  and for clause for each clause  over atoms appearing in x but not in b. 
therefore  if the size of x is bounded by a constant  then  can be decided in linear time for any query b  even though   itself is not decomposable. 
1 	compiling knowledge into dnnf 
we established two main results in the previous section. 
first  we identified the class of dnnf theories. second  
1 	challenge papers 

figure 1: a decomposition tree. 
we showed that satisfiability and entailment can be decided in linear time with respect to dnnf theories. our goal in this section is two fold. first  to prove that every propositional theory can be expressed in dnnf. second to provide an algorithm for this purpose. 
　the following theorem is the key to proving that even propositional theory can be converted into dnnf. 
t h e o r e m 1 let and be two propositional sen tences in dnnf. let be the sentence where is an instantiation of all atom: shared by a n d . then  is in dnnf and  i: equivalent to 
here is a recursive algorithm dnnf1    based on the above theorem  which converts any clausal form  intc an equivalent theory in dnnf: 
1. if  contains a single clause    dnnfl 
1. otherwise  
dnnf 
this algorithm converts any theory in clausal form intf an equivalent theory in dnnf  but at the expense o: increasing the theory size. the increase in size comet mainly from the case analysis performed on the atoms 

   we have two key observations about the above procedure. first  the size of resulting dnnf is very sensitive to the way we split the theory  into two sub-theories and . second  the above procedure is not deterministic  since it does not specify how to split the theory  into two sub-theories. to make the procedure deterministic  we will utilize a decomposition tree  which represents a recursive partitioning of the clauses in 
d e f i n i t i o n 1 a decomposition tree t for clausal form  is a full binary tree whose leaves correspond to the clauses in is the leaf node corresponding to 
clause   in 


figure 1: compiling a theory into dnnf. 

figure 1: compiling a theory into dnnf. 
figure 1 depicts a decomposition tree for the theory 
a which contains the clauses 
   for a decomposition tree to be useful computationally  we need to associate some information with each of its nodes. first  for every internal node n: n1 and nr denote the loft and right children of n  respectively  and 
 . second  atoms n  is defined as 
the set of atoms appearing in clauses  ar . for example  in figure 1  i contains the clauses  and  and atoms 1  contains the atoms a b and c. 
   given a. decomposition tree for theory   figure 1 depicts an algorithm which compiles  into dnnf. 
t h e o r e m 1 dnnfl 	returns   ar  	in 	dnnf. 
therefore  to convert a theory into dnnf  we first construct a decomposition tree t for and call dnnfl  n true  with n being the root of tree t. the following is an important observation about dnnfl: 
t h e o r e m 1 if and  agree on atoms n   then dnnfl is equivalent to dnnfl 
therefore  we can improve on dnnfl by associating a cache with each node n to store1 the result of 
dnnfl   indexed by the projection of instantiation  on atoms n   denoted project  . when another recursive call dnnfl is made  we first check the cache of node n to see whether we have an entry for project . if we do. we return it. otherwise  we continue with the recursion. this improvement leads to the refined algorithm in figure 1. 
we now address the complexity of dnnf1. 
d e f i n i t i o n 1 let n be a 'node in a decomposition tree t. the cluster of node n is defined as follows: 
  if n is a leaf node  then its cluster is atoms n . 
  if n is an internal node  then its cluster is the set of atoms that appear either 
- above and. below node n in the tree; or 
- in the left and rigid subtrees of node n. 
the width of a decomposition tree is the size of its maximal cluster minus one. 
in figure 1  wo have cluster  n1  -  c}  cluster  n1  - { b   c }   clustering - {a b}  cluster{na  = {b c} and cluster n1  = {c d}. therefore  the decomposition tree has width 1. 
t h e o r e m 1 let t be the decomposition tree used in 
figure 1. the time and space complexity of the algorithm in figure 1 is 1{nw1w   where n is the number of leaf nodes in tree t and w is its width.1 
therefore  the complexity of compiling a propositional theory into dnnf depends crucially on the quality  width  of decomposition tree used. the question now is how to construct good decomposition trees  ones with small width   as it turns out  there  is a device in the literature on graph-based reasoning  known as a jointree  which can be easily converted into a decomposition tree. a jointree also has a width and good jointrees are those with small width. we can easily convert  a jointree into a decomposition tree while maintaining its width. therefore  any good method for constructing jointrees is also a good method for constructing decomposition trees. a jointree  however  is constructed for an undirected graph while a decomposition tree is constructed for a propositional theory. the following definition makes the connection. 
d e f i n i t i o n 1  let  be a propositional theory in clausal form. the interaction graph for  is the undirected graph g constructed as follows. the nodes of g arc the atoms of . there is an edge between two atoms in g iff the atoms appear in the same clause of 
t h e o r e m 1 let  be a propositional theory in clausal form and let g be its interaction graph. let j be a jointree for g with  width. w there is a decomposition tree for  which has width  w and which  can be constructed from j in time linear in the size of j. 
the width of the best jointree for a graph g is known as the treewidth of g. if the treewidth of a graph is bounded by a constant w  then one can construct an optimal jointree in linear time  1|. a major implication of this result is that if a clausal form  has an interaction graph with a bounded treewidth  then  a  computing an optimal decomposition tree  jointree  for that theory   b  compiling the theory based on the computed decomposition tree  and  c  answering queries based on 
1
note that if t is a decomposition tree for a clausal form 
  then n is also the number of clauses in 
	darwiche 	1 


figure 1: a prepositional sentence in dnnf. 
the resulting compilation  can all be done in linear time. this is our central result on the complexity of compiling theories into dnnf.1 
　we stress  however  that the interaction graph of a 
　theory may not have a bounded treewidth  yet the theory may have a polynomial compilation into dnnf  
consider the theory 	= 
	. 	the interaction graph of 
this theory has treewidth n  yet it has a dnnf compilation of size 1 n1   shown in figure 1 for n = 1 . 
　the theory we just considered is not equivalent to any horn theory. in fact  even its horn approximation is known to be exponential in n   this shows that there are theories with exponential horn approximations  yet polynomial dnnf representations. 
1 	approximate compilation 
what if we have a theory  for which the best decomposition tree has an unacceptable width  we have two key choices to address this problem. first  we can try to improve on algorithm dnnf1. second  we can try to generate an approximate compilation  which is the direction we shall peruse in this section. 
　consider the algorithm dnnf1 in figure 1. it should be clear that the reason for possible intractability in this algorithm is the size of : n/  
atoms - atoms a   which contains some of the atoms shared by sub-theories i and  specifically  the algorithm will consider a number of instantiations which is exponential in the size of  therefore  we can control the size of resulting compilation by reducing the number of instantiations considered. we can do this in two ways: 
1. ignoring atoms: we can ignore some of the atoms in by performing a case analysis on only a subset of . that is  we consider all instan-
     1 the satisfiability of this class of theories can also be do cided in linear time using directional resolution . 
1 	challenge papers 
tiations  of a subset of . this leads to a variation on algorithm dnnf1 which we call dnnfu. 
1. ignoring instantiations: we can ignore some of the instantiations that is  we only consider some instantiations . this leads to a variation on algorithm dnnf1 which we call dnnf/. 
in either case  we can control the size of resulting compilation and to the degree we wish. in fact  using either technique we can ensure a linear compilation if we decide to ignore enough atoms or instantiations. this leaves two questions. first  what atoms or instantiations should we ignore  second  what can we guarantee about the resulting compilations  
　the choice of atoms or instantiations to ignore is typically heuristic and will not be addressed in this paper. we only address the second question here. 
theorem 1 is in nnf and is equivalent to 
that is  ignoring atoms preserves equivalence to the exact compilation  but compromises the decomposability property. the more atoms we ignore  the less decomposable the approximation is. but in all cases  the compilation generated by dnnfu is sound  although not necessarily complete  with respect to entailment. corollary 1 
here is the guarantee about the second approximation: 
	is 	in 	dnnf 	and 
that is  ignoring instantiations preserves the decomposability property but could lead to strengthening the compilation. the more instantiations we ignore  the stronger the approximate compilation is. but in all cases  the compilation generated by dnnf/ is complete  although not necessarily sound  with respect to entailment. 
corollary 1 
therefore  if the size of a dnnf compilation t is too large  we can replace it with two approximations t1 and we first test whether and 
           we have three possibilities: if 	t1 then 	then the approximations are not good enough to answer this query. note that the case 	is impossible. 
　the bounds  and are inspired by the lower and upper horn approximations proposed in . in their approach  however  these bounds are crucial since not every theory has a horn representation. in our case  however  the approximations are only meant to address intractability; our compilation approach would continue to be meaningful without them. 
1 	compiling out atoms 
given a theory   we may only be interested in queries  which do not mention atoms a'. in this case  it makes sense to compile  into a theory which does not mention atoms x either  yet is equivalent to  with respect to 


figure 1: forgetting atoms in a dnnf. 
queries such theory is the result of forgetting about atoms x in . as it turns out  once a theory is converted into dnnf  forgetting takes linear time: 
definition 1 for 	dnnf 	and 	atoms 	x  	define 
forget as the result of replacing each literal in   with true iff that literal refers to an atom in x. 
the following theorem shows that the above linear operation does correspond to forgetting as defined in : 
theorem 1 let  be a sentence in dnnf and let be a clause that does not mention atoms x. then     iff forget 
consider the dnnf in figure 1  which is equiva-

atoms p1  p1  p1 in this theory gives the dnnf in figure 1  which can be easily simplified to 
　　forgetting has three major applications. first  reducing the size of a dnnf compilation by forgetting about atoms that would never appear in queries. second  computing dnnf representations of boolean functions. consider the circuit in figure 1 which implements the odd-parity function  and let be a theory representing this circuit. if we compile into dnnf  and then forget atoms e  f and g  we obtain a dnnf representation of this boolean function. this technique can be used to compile any circuit representation of a boolean function into its dnnf representation.1 a final application of forgetting is in computing the implications of a given theory on a particular set of atoms x  by forgetting about all atoms other than a  . this has proven to be very useful in model based diagnosis . 
1 	conclusion 
we have proposed an approach for compiling prepositional theories into a tractable form  which we refer to as decomposable negation normal form  dnnf . we have 
1
　　in   we compare dnnfs with binary decision diagrams  bdds  as a representation of boolean functions. 

figure 1: an odd-parity circuit. 
shown that once a theory is compiled into that form  a number of reasoning tasks including entailment  satisfiability and forgetting can be accomplished in linear time. we have shown that every propositional theory can be compiled into dnnf and presented an algorithm to this effect. we then presented a key result according to which the time and space complexity of our compilation technique is linear given that the propositional theory has a clausal form with bounded treewidth. finally  we presented two techniques for approximating dnnf compilations. one of the techniques generates sound compilations  the other generates complete compilations. together  the two approximations bound the original theory from below and above in terms of their ability to answer queries. there are at least three key distinctions between our compilation approach and the one proposed in . first  every theory has a dnnf representation  while not every theory lias a horn representation. second  there are theories with exponential horn approximations  yet polynomial dnnf representations. third  we have characterized a class of theories which is guaranteed to have linear dnnf compilations. we are not aware of a similar guarantee on the horn approximations of this class of theories. 
