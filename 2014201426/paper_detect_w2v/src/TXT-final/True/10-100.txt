theorem proving in type theory 
peter b. andrews and eve longini cohen 
mathematics department 
carnegie-mellon university 
	pittsburgh  pennsylvania 	1 
     as one aspect of the endeavor to create new i n t e l l e c t u a l tools for mankind  we wish to enable computers to prove  and to assist in the proofs of  theorems of mathematics and  eventually  other d i s c i plines which have achieved the requisite l o g i c a l precision. for this purpose  a p a r t i c u l a r l y suitable formal language is church's formulation  of type theory with a-conversion. in this language trad i t i o n a l mathematical notations can be expressed very d i r e c t l y   and the i n t u i t i v e distinctions between d i f f e r e n t types of mathematical e n t i t i e s  such as num-
bers  functions  and sets of functions  are made syntactically e x p l i c i t . 
     the program for proving theorems of type theory which we discuss is intended to provide experience relevant to such a project  and was developed with the aid of charles e  blair and john j. grefenstette. 
     after reducing the negation of the sentence to be proved to a set of clauses  basically as in the resolution method   the program seeks an acceptable mating by the method outlined in . the unifying substitutions are found by huet's algorithm   1     augmented by heuristics to minimize branching of the search tree  and a procedure for deleting nodes which are essentially supersets of other nodes. the semi-decision procedures which search for a p o t e n t i a l l y acceptable mating and for the associated unifying substitutions operate in p a r a l l e l   and interact so that information acquired by each procedure l i m i t s the other's search. after an acceptable mating is found  the computer constructs from it a more t r a d i t i o n a l r e f u t a t i o n   using s u b s t i t u t i o n   cut  ground resolution   and s i m p l i f i c a t i o n of disjunctions as rules of inference. 
     the program can be run in automatic or interactive mode. the interactive system embodies a set of l o g i c a l rules which is in a certain sense complete   1     but the user must provide some of the substitutions for predicate variables.  as shown in   1     even completeness in this 
weak sense is not t r i v i a l .   the program in automatic mode is not l o g i c a l l y complete for type theory  though it is complete when applied to sentences of f i r s t 
this research was supported by nsf grants dcr1-a1 and mcs1. 
order l o g i c     since no p r a c t i c a l method is known for automatically generating a l l required substitutions for predicate variables. this is the fundamental t h e o r e t i cal problem of automatic theorem-proving in type theory  and no p r a c t i c a l general solution to it seems imminent  since subs t i t u t i o n s for predicate variables often express the important concepts in a mathematical proof. 
     as noted i n   1     for certain purposes axioms of exte nsionality  descriptions  or choice must be taken as hypotheses  actually  the introduction of skolem functions to e liminate essentially exist e n t i a l quanti f i e r s involves an i m p l i c i t use of the axi om of choice  ac  in type theory  so the system can prove certain consequences o f ac  such as 
vy.1z   ro y z    =  apm vy ¡ì 	on i f f n y j 
     among the theorems which can be proved completely automatically are cantor' s theorems that a set has more subsets than members  and that there are more functions on a non-unit set than members of the set.  thus there are uncountably many functions of natural num-
bers.  following   1     the cantor theorem for sets can be expressed by the sentence ~&h vs aj.  h j = s    which as-
	oh 	ol 	i 	oil 	i 	ol 	' 
serts that there is no function h from individuals to sets which has every set s 
in i t s range. the computer decides to substitute for s  the wff 
oi 
 axj. ~h 	x t x       which denotes the set 
  x | ~ x e h x     and expresses the key idea in the c l a s s i c a l diagonal argument. 
