 
as an alternative to planning  an approach to highlevel agent control based on concurrent program execution is considered. a formal definition in the situation calculus of such a programming language is presented and illustrated with a detailed example. the language includes facilities for prioritizing the concurrent execution  interrupting the execution when certain conditions become true  and dealing with exogenous actions. the language differs from other procedural formalisms for concurrency in that the initial state can be incompletely specified and the primitive actions can be user-defined by axioms in the situation calculus. 
　when it comes to providing high-level control for robots or other agents in dynamic and incompletely known worlds  approaches based on plan synthesis may end up being too demanding computationally in all but simple settings. an alternative approach that is showing promise is that of highlevel program execution . the idea  roughly  is that instead of searching for a sequence of actions that would take the agent from an initial state to some goal state  the task is to find a sequence of actions that constitutes a legal execution of some high-level non-deterministic program. as in planning  to find such a sequence it is necessary to reason about the preconditions and effects of the actions within the body of the program. however  if the program happens to be almost deterministic  very little searching is required; as more and more non-determinism is included  the search task begins to resemble traditional planning. thus  in formulating a high-level program  the user gets to control the search effort required. 
　the hope is that in many domains  what an agent needs to do can be conveniently expressed using a suitably rich highlevel programming language. previous work on the golog language  considered how to reason about actions in programs containing conditionals  iteration  recursion  and nondeterministic operators  where the primitive actions and fluents where characterized by axioms of the situation calculus. in this paper  we explore how to execute programs incorporating a rich account of concurrency. the execution task remains the same; what changes is that the programming language  which we call congolog  for concurrent golog   becomes considerably more expressive. one of the nice features of this language is that it allows us to conveniently formulate agent controllers that pursue goal-oriented tasks while concurrently monitoring and reacting to conditions in their environment. 
　of course ours is not the first formal model of concurrency. in fact  well developed approaches are available  1; 1; 1; 1 and our work inherits many of the intuitions behind them. however  it is distinguished from these in at least two fundamental ways. first  it allows incomplete information about the environment surrounding the program. in contrast to typical computer programs  the initial state of a congolog program need only be partially specified by a collection of axioms. second  it allows the primitive actions  elementary instructions  to affect the environment in a complex way. in contrast to typical computer programs whose elementary instructions are simple predefined statements  e.g. variable assignments   the primitive actions of a congolog program are determined by a separate domain-dependent action theory  which specifies the action preconditions and effects  and deals with the frame problem. 
　the rest of the paper is organized as follows: in section 1 we very briefly review planning in the situation calculus. in section 1  we review the golog programming language and present a variant of the original specification of the high-level execution task. in section 1  we explain informally the sort of concurrency we are concerned with  as well as related notions of priorities and interrupts. the section concludes with changes to the golog specification required to handle concurrency. in section 1  we present a detailed example of a reactive multi-elevator controller formulated in congolog. in section 1  we discuss some of the properties of congolog  its implementation  and topics for future research. 
1 situation calculus 
there are a number of ways of making the planning task precise  but perhaps the most appealing is to formulate a specification in terms of a general theory of action. one candidate 
     1  in  1; 1  a direct use of such approaches to model concurrent  complex  actions in ai is investigated. 
de giacomo  lesperance  & levesque 	1 

language for formulating such a theory is the situation calculus . we will not go over the language here except to note the following components: there is a special constant so used to denote the initial situation  namely that situation in which no actions have yet occurred; there is a distinguished binary function symbol do where do a  s  denotes the successor situation to s resulting from performing the action a; relations whose truth values vary from situation to situation  are called  relational  fluents  and are denoted by predicate symbols taking a situation term as their last argument; finally  there is a special predicate poss a  s  used to state that action a is executable in situation s. 
　within this language  we can formulate domain theories which describe how the world changes as the result of the available actions. one possibility is a theory of the following form : 
  axioms describing the initial situation  so-
  action precondition axioms  one for each primitive ac-tion a  characterizing poss a  s . 
  successor state axioms  one for each fluent f  stating under what conditions  holds as function of what holds in situation s. these take the place of the so-called effect axioms  but also provide a solution to the frame problem . 
  unique names axioms for the primitive actions. 
  some foundational  domain independent axioms. 
for any domain theory of this sort  we have a very clean specification of the planning task  which dates back to the work of green : 
	classical planning: 	given a domain theory 
axioms as above  and a goal formula  with a single free-variable s  the planning task is to find a 
sequence of actions a such that: 
in other words  the task is to find a sequence of actions that is executable  each action is executed in a context where its precondition is satisfied  and that achieves the goal  the goal formula  holds in the final state that results from performing the actions in sequence . 
1 golog 
as presented in   golog is logic-programming language whose primitive actions are those of a background domain theory. it includes the following constructs: 
planning and scheduling 

1 it is convenient to include a special  empty  program nil. 
	de g1acomo  lesperance  & levesque 	1 


p l a n n i n g a n d s c h e d u l i n g 


	de giacomo  lesperance  & levesque 	1 


our implementation requires that the program's precondition axioms  successor state axioms  and axioms about the initial 
1 of course  when an elevator is requested on some floor  both elevators may decide to serve it. it is easy to program a better strategy that coordinates the elevators: when an elevator decides to serve a floor  it immediately makes a fluent true for that floor  and the other elevator will not serve a floor for which that fluent is already true. 
1  although with a different emphasis  this approach is shared by 
 where a logical formalism is proposed for concurrent database transactions. 1 exogenous actions can be simulated by generating them probabilistically or by asking the user at runtime when they should occur. 
planning and scheduling 
state be expressible as prolog clauses. this is a limitation of the implementation  not the theory. 
　in summary  we have shown how  given a basic action theory describing an initial state and the preconditions and effects of a collection of primitive actions  it is possible to combine these in complex ways appropriate for providing highlevel control. the semantics of these complex actions ends up deriving directly from that of the underlying primitive actions. in this sense  we inherit the solution to the frame problem provided by successor state axioms for primitive actions. there are  however  many areas for future research. among them  we mention: 1  incorporating sensing actions  that is  actions whose effect is not to change the world so much as to provide information to be used by the agent at runtime; 1  handling non-termination  that is  developing accounts of program correctness  fairness  liveness etc.  appropriate for controllers expected to operate indefinitely. 
