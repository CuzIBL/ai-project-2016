a computer system for visual recognition using active knowledge* 
eugene c. freuder+ 
computer science department 
	indiana 	u n i v e r s i t y 
	blooraington  	indiana 1 
       this r e p o r t describes research done at the a r t i f i c i a l i n t e l l i g e n c e laboratory of the massachusetts i n s t i t u t e of technology. support f o r the l a b o r a t o r y ' s a r t i f i c i a l i n t e l l i g e n c e research is provided in p a r t by the advanced research p r o j e c t s agency of the department of defense under o f f i c e of naval research contract n1-c1. the report is based upon the a u t h o r ' s ph.d. d i s s e r t a t i o n f o r the department of e l e c t r i c a l engineering and computer science  m . i . t .   1. 
¡¡¡¡¡¡'current address: department of mathematics and computer science  u n i v e r s i t y of new hampshire  durham  n.h. 1. 
overview 
this work is concerned with visual recognition  and with larger issues of description and control 
     the immediate o b j e c t i v e of t h i s work is a computer system that w i l l recognize objects in a 
     v i s u a l scene  s p e c i f i c a l l y hammers. the computer receives an array of l i g h t i n t e n s i t i e s from a dev i c e l i k e a tv camera. it is to locate and i d e n t i f y the hammer if one is present. the system  seer  is d i r e c t e d at the v i s u a l v a r i e t y of unprepared everyday o b j e c t s   not s t y l i z e d models. 
     the computer must produce from the numerical  sensory d a t a   a symbolic d e s c r i p t i o n that const i t u t e s i t s perception of the scene. of primary concern is the c o n t r o l of the r e c o g n i t i o n process: what to do  how and when to do i t . these d e c i sions should be guided by the p a r t i a l r e s u l t s obtained on the scene. if a hammer handle is observed t h i s should suggest that the handle is part of a hammer and advise where to look f o r the hammer head. the p a r t i c u l a r knowledge that a handle has been found combines w i t h general knowledge about hammers to i n f l u e n c e the r e c o g n i t i o n p r o cess. this use of knowledge to d i r e c t c o n t r o l is denoted here by the term a c t i v e knowledge. 
     a d e s c r i p t i v e formalism is presented for v i s u a l knowledge which i d e n t i f i e s the r e l a t i o n ships r e l e v a n t to the a c t i v e use of the knowledge. a c o n t r o l 'structure is provided which can apply knowledge organized in t h i s fashion a c t i v e l y to the processing of a given scene. 
visual knowledge is organized to encourage its active use 
     given a commitment to a c t i v e knowledge how do we implement i t   when seer discovers that  region r is bar shaped  how does it use t h i s information  general v i s u a l knowledge is organized to respond to these questions. 
     a data base object e x i s t s representing  bar shaped . this object knows how a bar shape is u s e f u l f o r a c q u i r i n g f u r t h e r knowledge of a r e g i o n . it knows  f o r example  that hammer handles are bar shaped. this knowledge is represented by a l i n k between data base objects representing 
bar shaped and hammer handle: handle 	bar-shaped 
established results are exploited to make further suggestions 
     when a p a r t i c u l a r region r is found to be bar shaped  t h i s knowledge is e x p l o i t e d as f o l l o w s . the bar shaped element of general knowledge is consulted. the l i n k to hammer handle provides the suggestion that r is also a hammer handle. this suggestion becomes an object in the p a r t i c u l a r knowledge data base. it begins as a  conj e c t u r e     but e v e n t u a l l y may become a  success  or a   f a i l u r e   .  the f a c t that r is bar shaped is a successful p a r t i c u l a r knowledge o b j e c t .   a l i n k is placed between bar-shaped r and handle r corresponding to the general knowledge l i n k between bar-shaped and hammer handle: handle r bar-shaped r 
     bar-shaped is also linked to head in the gene r a l knowledge: the e x p l o i t a t i o n of bar-shaped r w i l l also suggest head r  and the appropriate part i c u l a r knowledge conjecture and l i n k w i l l be c r e ated : 
handle r  
bar-shaped r 
	head r 	/ 
general visual knowledge and particular scene results restde in interacting networks 
     we have then two knowledge s t r u c t u r e s   which we w i l l abbreviate as the gk  general knowledge  and the pk cparticular knowledge  s t r u c t u r e s . both are networks: the nodes represent items of v i s u a l knowledge  o b j e c t s   p r o p e r t i e s   r e l a t i o n s h i p s   and the l i n k s i n d i c a t e how these items help e s t a b l i s h each o t h e r . 
     the knowledge involved is not very e s o t e r i c . it is based on f u n c t i o n a l d e f i n i t i o n s : a hammer requires a handle to hold and a head w i t h which to h i t ; the two should be set at r i g h t angles to t r a n s f e r a swinging motion i n t o a blow; the head requires a s t r i k i n g face at one end; it should be f l a t to contact the n a i l e a s i l y ; and so on. the concern is w i t h the o r g a n i z a t i o n of t h i s knowledge. standard d e s c r i p t i v e networks  where nodes represent p a r t s and l i n k s represent p r o p e r t i e s and r e l a t i o n s h i p s   are good f o r passive matching. seer's networks f a c i l i t a t e a c t i v e knowledge. 
     the gk represents p o t e n t i a l programs for r e cognizing s p e c i f i c instances of the gk concepts. we w r i t e these programs by representing possible d e s c r i p t i o n s of the concepts in a network form. these d e s c r i p t i v e nets seem a n a t u r a l formalism for the procedural embedding of knowledge   1   in the domain of v i s u a l r e c o g n i t i o n  as opposed to theorems  for example . s i m i l a r l y the pk r e presents  at any point of processing  the current state of d e s c r i p t i o n of the scene  and the s t a t e of the s p e c i f i c processes chosen to work on i t . 
     the i n t e r a c t i o n s w i t h i n and between these s t r u c t u r e s implement a c t i v e knowledge  and we have seen a basic example: a pk success c o n s u l t i n g gk to suggest f u r t h e r pk conjectures. conjectures are established by exploration 
vision-1: f r e u d e r 1      we have seen the basic mechanism f o r e x p l o i t i n g r e s u l t s   but how do these r e s u l t s get e s t a b l i s h e d ; once a suggestion is made  how is it pursued  the same l i n k that i n d i c a t e s that a bar shaped region may be a handle  also says t h a t if we wish to e s t a b l i s h a r e g i o n as a handle  we should see if it is bar shaped. thus  analogous to e x p l o i t a t i o n there is an e x p l o r a t i o n process. when the pk conjecture handle r is explored  it consults the gk object handle  which f o l l o w s the l i n k to bar-shaped  p r o v i d i n g the suggestion barshaped r  which enters the pk as a conjecture l i n k e d to the handle r c o n j e c t u r e : handle r bar-shaped r 
     the l i n k s have a d i r e c t i o n : 	if b helps to est a b l i s h a we say that b is  below  a. 	e x p l o i t a t i o n involves looking upward along l i n k s   e x p l o r a t i o n downward. 
     e x p l o r a t i o n of handle r also suggests longand-thin r: 
	handle r 	long-and-thin r 
 bar-shaped r 
let us say t h a t the two p r o p e r t i e s   bar shaped and l o n g - a n d - t h i n   are s u f f i c i e n t to define a hammer handle; the gk knows t h i s . now if e i t h e r of the new c o n j e c t u r e s   bar-shaped r or long-and-thin r  are e s t a b l i s h e d   they w i l l be e x p l o i t e d . we did observe e a r l i e r that e x p l o i t a t i o n of bar-shaped r involves c r e a t i o n of a new pk object f o r handle r. however  obviously t h i s w i l l not be necessary now  as handle r already e x i s t s as a pk conject u r e . what w i l l happen r a t h e r is that the handle r conjecture w i l l be found and t o l d that one of the p r o p e r t i e s it needs to succeed has been est a b l i s h e d . the gk has t o l d handle r to wait f o r two r e s u l t s   i t is an  and gate  if you l i k e   ; it w i l l now count one and wait f o r the o t h e r . when that comes  handle r w i l l in t u r n succeed and be e x p l o i t e d . 
     that is how handle r gets e s t a b l i s h e d ; but what about bar-shaped r and long-and-thin r  which must be established f i r s t   c l e a r l y we can repeat the e x p l o r a t i o n process  but also the process must terminate somewhere. e x p l o r a t i o n of long-and-thin r leads to three f u r t h e r conj e c t u r e s : 
	length 	r 
long-and-thin r -width r 
long-and-thin-comp r 
hammer r 
bar-shaped r 
     let us suppose  as might be the case  that length r and width r are already present and successful in the pk. the e x p l o r a t i o n of longand-thin r would not d u p l i c a t e them; they would be found and l i n k e d t o   and the new l i n k s exp l o i t e d by n o t i f y i n g long-and-thin r that two of i t s requirements have been met.  the a c t u a l numerical values of the l e n g t h and width of r w i l l have been stored as p r o p e r t i e s of the c o r responding pk elements.  
     long-and-thin-computation r  when explored in t u r n   does not pursue f u r t h e r c o n j e c t u r e s   but a c t u a l l y compares the l e n g t h and w i d t h w i t h a threshhold and e i t h e r succeeds or f a i l s on the spot. 	a success w i l l complete the establishment of long-and-thin r. 	a l l pk trees e v e n t u a l l y lead down to such t e r m i n a l computation nodes. 
global monitor and priority modules choose which suggestions to explore 
     we see by now that there w i l l be a l o t of suggestions f l o a t i n g around  proposed by r e s u l t s 
v i s i o n - 1 : 
1 
or pursued by hypotheses. these suggestions form a   p o o l   of processing p o s s i b i l i t i e s ; t h i s pool concept is important because it e l i m i n a t e s the need f o r suggestions to be taken up or r e j e c t e d immediately. instead they can accumulate and  compete   as f u r t h e r r e s u l t s improve our a b i l i t y to d i s c e r n the most promising l i n e s of i n q u i r y . we know how to explore and then e x p l o i t the sugg e s t i o n s   but the question remains: when to explore them  or indeed  which to e x p l o r e . 
       lurking in the background are c r i t i c a l doubts. can we choose i n t e l l i g e n t l y   or w i l l the number of suggestions  blow up  to an unmanageable number  the suggestion making processes  e x p l o r a t i o n and e x p l o i t a t i o n   are b a s i c a l l y l o c a l opera t i o n s   centered around the i n d i v i d u a l r e s u l t s and pieces of general knowledge. one can argue the advantages of such a u n i f o r m   modular s t r u c t u r e ; but how is chaos avoided: is some global r e g u l a t i o n imposed  
       b a s i c a l l y   we are hoping f o r something of a  waltz convergence e f f e c t     1   on the pool of suggestions.  however  it should be noted t h a t t h i s research does not focus on the problems raised by very large data bases. these w i l l probably r e q u i r e f u r t h e r means of p a r t i t i o n i n g our knowledge  e . g . i n t o frames   1   ; seer's basic i n t e r e s t i s f r u i t f u l i n t e r a c t i o n w i t h i n our knowledge.  waltz' program may be viewed as c a r r y i n g 
       a l a r g e number of l i n e l a b e l l i n g conjectures  based on p a r t i a l evidence  forward in p a r a l l e l . since the l e g i t i m a t e combinations of l a b e l s   among parts of the scene  were l i m i t e d   as p r o cessing proceeded e v e n t u a l l y more p o s s i b i l i t i e s were ruled out than were added  and only the one or two complete l a b e l l l n g s for the scene were l e f t . 
       in seer a number of conjectures are also c a r r i e d forward in p a r a l l e l . here too new r e s u l t s can c o n t r a d i c t old c o n j e c t u r e s . however  
we emphasize more the p o s i t i v e e f f e c t that new r e s u l t s can have in encouraging previous conj e c t u r e s   d i r e c t i n g our a t t e n t i o n to the most promising and the most e f f i c i e n t suggestions. a p r i o r i t y system is employed f o r t h i s purpose. a 
monitor uses the p r i o r i t y i n f o r m a t i o n to d e t e r mine the order in which suggestions w i l l be exp l o r e d . these are the global elements of the system  which evaluate the l o c a l a c t i v i t y . 
       the p r i o r i t y of a pk conjecture is b a s i c a l l y a c o s t / b e n e f i t a n a l y s i s . the l i k e l i h o o d of a conjecture h o l d i n g true is compared w i t h the expected d i f f i c u l t y i n e s t a b l i s h i n g i t . these f i g ures can change as r e s u l t s accrue. the conjecture that r is a hammer is i n i t i a l l y d i f f i c u l t and not too l i k e l y  though i t s high   i n t e r e s t   f o r us can also be taken i n t o account . when r is found to have a hammer handle  the d i f f i c u l t y of the hammer conjecture goes down while i t s l i k e l i h o o d goes up  thus i t s o v e r a l l p r i o r i t y increases.   i t i s   a g a i n   the e x p l o i t a t i o n of the hammer handle success which induces that change in p r i o r i t y .   
       to the monitor the pk looks something l i k e a mountain range. the peaks represent those nodes which have as yet nothing above them in the l i n k s t r u c t u r e . below each peak are l i n k e d nodes  and nodes l i n k e d to them in t u r n   c o n t i n u i n g u n t i l we reach as yet unexplored nodes  w i t h no f u r t h e r 

links below them. this structure of nodes below the peak represents the state of the investigation of the peak node. these structures blend into one another  especially in the   f o o t h i l l s     e.g. convex r is l i k e l y to appear in several i n vestigations. the monitor must f i r s t decide which investigation is most promising  then which suggestion within that investigation to explore next. it chooses to further investigate the peak node of highest p r i o r i t y . choosing the next suggestion to explore is not quite so simple  but basically we want to explore the easiest  least likely suggestion f i r s t   in order to resolve the investigation most quickly. 
processing cycles through successive pk states 
     after the i n i t i a l passive stage  in which regions of potential interest are found  an i n i t i a l pk state is established with a few  seed suggestions  about prominent regions. these are  primi t i v e   conjectures like convex r. convex is primitive in the sense that there is essentially nothing below it in the gk network except properties like area and boundary which always can be established. from this point on  processing entails active knowledge  use of previous results and general knowledge. 
     processing consists of a sequence of cycles  which carry us from one state of the pk to the next. each cycle begins with the exploration of a suggestion chosen by the monitor. there may follow one or more exploitations if successful results are obtained.  a similar process makes use of failures.  exploration and exploitation w i l l change the pk: new conjectures may be added  new links  priorities may change  conjectures may become successes or failures. at the conclusion of the cycle  control returns to the monitor to begin the next cycle. 
     thus we have continual review of local interactions by the global mechanisms. seer cannot continue blindly down one avenue  but must evaluate the impact of results in a wider context. a l so while activity within a cycle is local in the sense that it is centered on individual nodes  this activity is not at a l l parochial. there is not  for example  the usual  master/slave  relationship between processes. a result does not report only to the calling process  but is a gregarious fellow who happily t e l l s anyone who might be interested  to whom he might be useful  of his good fortune. even a success in one investigation  may when exploited have a greater effect on another investigation; the monitor can observe this and switch i t s attention to the second i n vestigation. in any case  as investigations 
succeed  they in turn spawn larger investigations  u n t i l eventually we reach a satisfactory level of recognition  e.g. find the hammer. methods advise how to establish results 
     we now have an idea of seer's approach to what to do and when to do i t . there remains the important question of how to do i t . seer makes suggestions about what to do  it also gives advice on how to do i t . actually the primary implementation of advice is as a form of suggestion. seer suggests methods for establishing results. a method is also a node in the gk or pk structure. the discussion up u n t i l now may have 
v i s i o n - 1 : 
1 
given the impression that these structures are intertwined trees of and gates. actually they involve and/or trees. an and node links to a set of subnodes which together define or establish the node  a set of properties or parts; we have seen examples. an or node links down to a set of subnodes each of which is an alternative method for establishing the node. thus handle may actually link to handle-method-1  handle-method-1  etc. handle-method-1  for example  may involve finding the handle when we already have the head to advise us where to look. when the head is found the exploitation of that result w i l l suggest handle-method-1. this approach to advice is very explicit; advice on how to do something is a suggestion of a specific method for doing i t . 
example 
an example will illustrate more of seer in operation 
     as in the and/or business  this discussion was begun by simplifying seer's structure and operation as much as possible  and the picturehas only been complicated as absolutely necessary. for example  we eventually observed that exploitation involved updating priorities as well as creating new conjectures; however  we avoided the fact that priority activities are carried out 
by following a set of priority links which are distinct from the links that indicate how items define one another.  most often  these two link types w i l l occur together; however  they do represent distinct relationships which have been extracted from the basic concept of  relevance  between pieces of visual knowledge.  this is not the place for f u l l detail; however  an example of seer's operation is in order which will provide a feeling for the types of problems and solutions which arise. 
an affinity pass provides an initial set of regions 
     consider a scene consisting of a ball peen hammer on a wooden work bench. first seer makes a region growing pass over the scene using what we term an a f f i n i t y process   1   . briefly  rather than seeking absolute uniformity  which may not be present in the surfaces of a realistic object  the process attempts to find regions which are relatively homogeneous  whose pieces seem to hang together more than they seem to belong with other neighboring pieces of the scene. rather than finding one division of the scene  the process builds up a tree of potentially interesting regions. below each region in the tree are the subregions which were merged to form i t . the 
merging process works upwards from a i n i t i a l d i v i sion of the scene into small cells  forming successively larger regions. 
seer chooses a processing sequence  based on the gk structure and developing results in the scene: seer  zigzags  gradually upward from the seed suggestion that region 1 is convex  to a conjecture that the region is a hammer head 
     the regions that  stand out  in the scene w i l l be found near the top of the tree  and so we begin by making primitive conjectures about these. in this case the i n i t i a l pk w i l l consist of seed 
frender 

conjectures for regions r1  r1  r1  r1. seer explores the conjecture convex r1  region 1 is convex. fig. 1 shows this region superimposed on the scene. 
fig. i. region 1. 

     convex-needs represents the items needed to perform the computation convex-computation which w i l l judge convexity. the computation cannot be made until these items are found  so the gk node 
convex  and this pk instance  convex r1  are  serial  nodes. this means that the process of choosing which suggestion to explore next is constrained at this point. if seer wishes to further investigate convex r1  it must establish convexneeds r1 before it can explore convex-computation r1. convex-needs is explored in the next cycle and the pk investigation of convex r1 expands: 

     both area and convex-hull must be found in order to satisfy the and node convex-needs ri1; however  either may be found f i r s t in this case. in writing up this portion of the gk  we do not need to specify a serial order  but can program in parallel  in some sense. neither do we need to consider explicitly a l l the different possible execution time conditions that might influence the decision on which to explore f i r s t :   i f a has been found  do b  however if c...  the relevant conditions w i l l be reflected in the state of the pk  and the ad hoc local decisions we might make have been generalized and given to seer's priority and monitor modules. these can take a global view  based on the state of processing at decision 
time. 
     if area r1 has been established already  attention w i l l automatically focus on convex-hull r1. perhaps neither is yet a success  but convex-hull r1 has been partially established  a 
vision-1: 
1 
subnode has succeeded. the exploitation of that subnode w i l l have improved the priority of convexhull r1. this may influence the monitor to choose to explore convex-hull r1 before area 
r1. of course  in this example no results have yet been obtained  and seer chooses which node to explore based on i n i t i a l priorities found in the gk. after seer begins developing one branch  however  it is not locked into that direction. perhaps an easy method for obtaining the convex hull f a i l s   priorities s h i f t   and the monitor can shift attention to finding the area. as it happens  finding the area and convex hull are rather straightforward  and r1 is in fact determined to be convex. 
     seer now begins a typical  zigzag  upward flow. exploiting convex r1 leads to several suggestions being placed above convex r1 in the pk. one of these is chosen and investigated. several cycles of explorations expand the investigation back downward in the pk. finally the investigation succeeds and exploitation again expands the pk upward. once again an investigation is chosen to explore  and so it goes. this basic flow i s   of course  subject to many a l terations; results within an investigation can also propose new investigations; most s i g n i f i cantly seer can choose to shift attention between investigations  just as it can between branches 
within an investigation. 
     notice that the processing flow is neither s t r i c t l y  top down  nor  bottom up  but more  middle out    1   . a top down control structure can direct i t s computations very efficiently. in the extreme  we know precisely what we are looking for and can employ a sensitive template to 
merely verify i t s presence. a top down system  however  lacks generality  because it begs the question of how to choose the starting point in an environment with multiple possibilities. seer attempts a compromise. a result proposes a higher hypothesis  which can then be used as a context for proceeding downward. our view of knowledge elements as   l i t t l e men   who know how to explore and exploit themselves  f a c i l i tates this middle out model. 
     seer soon establishes that region 1 is a  bar   a basic shape category. this result proposes several interesting suggestions: r1 is a hammer handle  an occluded hammer handle  a hammer head. the f i r s t two are explored but quickly lead to failures. 
instantiation functions are used to generate arguments for suggestions: 	a region is found for the face of the hammer head  and then another is conjectured for the hammer itself 
     the gk indicates that to establish that r1 is a hammer head  seer must establish that r1 has a striking face. here we are forced to confront another major factor which was glossed over earlier: the generation of arguments. up u n t i l now we have used the same argument  r1  in a l l our pk statements. there has been no problem in making new suggestions; exploring convex-needs r1  seer looks at the gk node for convex-n  finds area node below i t   and suggests 
area r1  what else  but is-a-head r1 cannot suggest ts-a-head-face r1. 
freuder 

     actually the gk nodes also have arguments  variable arguments: convex-needs x  area y  isa-head z. attached to the links in the gk are functions  instantiation functions  which indicate the relationship between the arguments of con-
nected nodes. very often the instantiation function is simply the identity function  i. thus when seer explores convex-needs r1  it consults convex-needs x in the gk  follows a downward link to area y  and then applies the instantiation function i to the value associated with x in the pk  r1  to obtain a value for y:i r1  = r1. the resulting statement area r1  is one of the suggestions to be made in exploring convex-needs r1. 
     these instantion functions can be a r b i t r a r i l y complex; however  we try to keep most of the work involved on the system in the nodes. thus a com-
mon gk structure is generate and test: 
¡¡¡¡¡¡¡¡/ foo-generate a f1 a 
  foo-test a 
  zot b 
here the foo-generate a node computes b and stores it as a property of the node. the instantiation function on the gk link from foo-test x to zot y picks up b from the property l i s t . b is then tested for the zot property. 
     often an additional complication is the need to generate several alternatives for testing. if we search for the hammer head face in the original a f f i n i t y region tree  for example  we want to allow for several tries at finding a region with the right properties. there are various options. the function on the link between foo-test and zot can be multivalued  for example. though zot y only appears once in the gk  several instances of 
it may be suggested when we explore a foo-test 
node in the pk. 	 foo-test w i l l be an or node obviously.  
     it is often painful to generate every option at once  however  and a looping mechanism must be employed. there are methods of implementing these in seer  and one is in fact utilized in searching for the hammer head face in this case. however  they are a bit awkward at present  and such technical details should not delay us here. suffice it to say that the face of the hammer is indeed found in the a f f i n i t y tree  region 1. actually this tree search is just one method for finding a hammer head face: has-a-head-facemethod-1 r1 was the successful node. in general other  techniques are possible for generating desired regions. we are about to see one of these. 
     when is-a-head r1 succeeds  it suggests the presence of an encompassing hammer  and advises a method for finding the hammer handle. 
     actually  there is an intermediary step. isa-head r1 suggests has-a-head dr1  region dr1 has a hammer head as a subregion. this again is a situation where a new argument is required. one of the obvious things to do is to generate a ' dummy  argument. dr1   dummy region one   stands for the hammer region which seer hopes to define by the union of r1 and another region for the handle  yet to be found. the instantiation function in the gk link between is-a-head 
v i s i o n - 1 : 
1 
and has-a-head supplies the argument dr1. relationships provide advice: the established head helps find the handle 
     has-a-head dr1 succeeds immediately; normally a method for establishing has-a-head w i l l need to prove proper relationships hold between the head and the hammer region  or the handle region . however  this is obviously not an issue now. when the handle is found the proper relationships w i l l be checked. better yet we w i l l use these relationships to guide the search for the handle. thus the exploitiation of has-a-head suggests has-a-handle-method-1  a method which uses the head to find the handle. also suggested is is-ahammer-method-1 dr1. 
     investigating 1s-a-hammer-meth1d-1  seer suggests several methods for finding the handle but method two obviously has priority at this point: has-a-head dr1 
is-a-hammer-meth1d-1 dr1 
/has-a-handle-method-1 dr1 
has-a-handle dr1 -has-a-handle-method-1 dr1 
	 has-a-handle-meth1d-1 	dr1 
this method is based on a program developed by tomas lozano-perez which uses an atn grammar to look for regions with specified intensity profiles  1. the program requires a starting point and a direction in which to look  along with a specification of the type of intensity profile being sought. seer uses the head  r1  which it has already found  and the expected relationship between hammer heads and hammer handles to determine a starting point and direction to send to lozano's program  along with the characteristic curved profile of a plot of light i n tensities across the width of a hammer handle. having hypothesized what we are looking for  and guided in where to look  we are able to use this specialized technique  and it is successful. a region nr1   new region one   not in the original affinity tree  is returned. a few additional checks ensure that it w i l l serve for the hammer 
handle. 
     notice that the basic relationships between hammer and head do not need to be checked  they have already been verified in the process of generating nr1. contrast this with the distinct passes of some passive knowledge systems  a descriptive phase would find regions and determine relationships  then a recognition phase would 
match these relationships with those in a model. in seer description and recognition tend to merge together. the importance of this merging is one reason seer was designed to work directly from camera input  as opposed to a  hand coded  sym-
bolic description of the scene. 	we do not wish to beg the key question of acquiring a perceptual description from the sensory data; rather we wish to bring recognition level knowledge to bear on i t . 	the interaction with raw data keeps us honest and ensures that our results have a bearing on real visual problems. 
     seer now has the entire hammer and the recognition is complete. 
freuder 

evaluation 
seer permits a flexible response to the variety in realistic scenes 
     it should be emphasized that the above example does not present the way that seer recognizes hammers. one of seer's aims has been to deal w i t h r e a l i s t i c scenes and to provide a system w i t h the f l e x i b i l i t y t o deal w i t h the v a r i e t y that r e a l i s t i c scenes h o l d .  even a s i n g l e hammer can be given many d i f f e r e n t appearances by v a r y i n g i t s o r i e n t a t i o n   background  l i g h t i n g .   seer's modul a r o r g a n i z a t i o n allows us to program basic a l t e r n a t i v e s   then add others incrementally as we expand seer's competence. seer's mode of p r o cessing  i n s t a n t i a t i n g successive pieces of the modular gk s t r u c t u r e   which is both program and d e s c r i p t i o n   allows it to enter the  hammer p r o gram  at a v a r i e t y of p o i n t s and proceed in a v a r i e t y of paths through the s t r u c t u r e   e x p l o r i n g 
     and e s t a b l i s h i n g d i f f e r e n t subsets of the  hammer d e s c r i p t i o n   i n d i f f e r e n t o r d e r s - a l l i n response to the r e s u l t s being obtained on a given scene. 
     thus  in the example we discussed  seer began by working up to a head r e c o g n i t i o n   then moved back down to f i n d the handle. the handle was narrow and angled s h a r p l y   i t s wooden t e x t u r e blended i n t o the workbench background. it might have been hard to recognize; it was not found in the i n i t i a l a f f i n i t y pass.  a   f i n e r   pass w i t h t h i s process might have succeeded  but could be p r o h i b i t i v e l y expensive in time and space.  however  w i t h the advice provided by the p r e v i o u s l y found head  the handle was found  and r e l a t i v e l y e a s i l y . 
     we could have discussed another scene in which the l i g h t wooden handle stands out w h i l e the r u s t y head blends i n t o the dark background. in t h i s scene seer i d e n t i f i e s the handle f i r s t   using a d i f f e r e n t method than the one employed here  and then goes on to f i n d the head. seer analyzes and implements active knowledge 
     seer is a programming language or system that provides a framework f o r a c t i v e knowledge p r o gramming  in the sense that a language l i k e planner   1   i d e n t i f i e s and implements various processing methods s u i t a b l e f o r problem s o l v i n g 
     a c t i v i t y . some previous v i s i o n systems pioneered by p r o v i d i n g examples of a c t i v e knowledge types of a c t i v i t y   but were not e x t e n s i b l e or general in t h e i r approach. the wizard l i n e f i n d i n g system   1     for example  used l i n e s   as they were found  to suggest the l o c a t i o n of f u r t h e r l i n e s . this 
was accomplished b a s i c a l l y by assuming a p a r a l l e l ipiped environment and t r y i n g to f i n d l i n e s that completed p a r a l l e l o g r a m s . however wizard could not supply ready or d i r e c t answers to questions l i k e : what about wedges; how do i add a f a c i l i t y f o r dealing w i t h wedges to the system and i n t e grate it w i t h what is already there  what is the general nature of the suggestion process; how can i apply it to another body of knowledge; what kind of analysis of the knowledge is r e q u i r e d ; in what ways can i p r o f i t ; what are the basic processes that are required to implement suggestions; how do i handle advice  
seer attempts to provide t e n t a t i v e answers to 
questions like these. a language  gk  is provided for programming visual knowledge. the structure of the gk encourages the user to make use of active knowledge  to think in terms of questions l i k e : if we have x  how does that help us  can it help us get y  is there an easy way to get y given x  the control structure processes the gk representation of relevance relationships and applies them to a scene  implementing active knowledge. seer contains the basic atomic elements  notably exploitation  that one would want for an active knowledge based system. i have analyzed some of the functions  like suggestion and advice  that such a system should carry out  and provided a specific implementation as a concrete basis for further work   1     
¡¡¡¡in short you should be able to come to this work with the idea:  i want to attack my problem with active knowledge.  the response should be:  fine. here is how to organize your knowledge; give the result to a system with the elements of seer  and the knowledge w i l l be applied actively.  it is encouraging to note that there is already in the literature a piece of vision research  
which is good enough to give partial credit for its control principles to an early version of seer   1   . 
seer's practical accomplishments are quite limited 
¡¡¡¡in practical terms seer is quite primitive. it can recognize a hammer in a few scenes. the system is extensible  but it is s t i l l a considerable effort to expand i t s competence. the gk is an awkward language to program in at present. an intermediate program is needed to prompt the user and  compile  simplified input formats  e.g. for loops  into the proper gk network structure.  an earlier version of seer had a primitive input assistant of this sort.  the state of vision research is such that one s t i l l has to design and debug many basic visual mechanisms as one proceeds  e.g. for determining surface shape  particularly where one is looking for methods that can benefit from advice. making and investigating wrong suggestions is painful  and the overhead of building and maintaining the pk data structure is significant: efficiency needs to be increased in many ways. for example  it is con-
venient but often wasteful to search the a f f i n i t y tree in generating region arguments; too many useless regions can be conjectured about. the search process may be subject to improvement  some has already been made; but direct methods for v e r i fying conjectured regions  like the lozano program  should be more efficient  if they can be made as tolerant of nonuniformity as the a f f i n i t y process i s . indeed it may prove that we need to be more definite about the organization of the scene into primitives units before beginning to 
make conjectures. of course  given the d i f f i culty of the visual processing problem  and the non-specialized nature of our computational hardware  we can expect any reasonably general system to be rather demanding of time and space. 
¡¡¡¡seer is limited to hammers at the moment. obviously the basic elements of the system  the control structures  data structures  region generation  etc.  are quite general  and gk knowledge 

vision-1: freuder 1 

could be added f o r other o b j e c t s . the system a l ready deals w i t h many d i f f e r e n t objects and prope r t i e s   in the p a r t s and features of hammers. there are issues that would be raised more f o r c e f u l l y by a more diverse and a l a r g e r domain. however  seer has chosen to concentrate on those problems r a i s e d by the d i v e r s i t y inherent in d i f f e r e n t r e a l i s t i c examples of even a s i n g l e class of o b j e c t . seer was tested on several scenes w i t h r e a l everyday hammers  w i t h a couple of o r i e n t a t i o n   background and l i g h t i n g combinations  and a case of o c c l u s i o n ; as opposed  f o r example  to several o b j e c t s   a s i n g l e s t y l i z e d model of each  u n i f o r m l y p a i n t e d   and on a s i n g l e c o n t r a s t i n g background. 
seer extends and implements several basic a . i . 
principles 
     the immediate impetus f o r seer was the h e t e r archy concept of minsky and papert i 1   1  1  1     and i t s implementations in the m . i . t .  copy demo  system of winston  horn  b i n f o r d   freuder  e t a l .  1 . e a r l i e r ideas i n domain d i r e c t e d processing   1   1  also can be seen in the a c t i v e 
     knowledge approach. the basic implementation mechanisms of e x p l o i t a t i o n and e x p l o r a t i o n r e f l e c t the antecedent/consequent d i s t i n c t i o n most e f f e c t i v e l y analyzed by hewitt   1   . the development  or at l e a s t the d e s c r i p t i o n   of seer has been i n fluenced by several ideas t h a t came to prominence during the progress of t h i s work. the l i t t l e man or actor model  papert  h e w i t t   kay  e t c .   1   1  provides a good metaphor f o r the l o c a l a c t i v i t y centered in the knowledge s t r u c t u r e nodes; m i n s k y ' s frame model   1   can be r e l a t e d to the l a r g e r o r g a n i z a t i o n of the knowledge. related work on h e t e r a r c h i c a l and knowledge-based c o n t r o l s t r u c t u r e s can be found in v i s i o n   1   1  1  1  as w e l l as other f i e l d s   notably speech r e c o g n i t i o n . 
