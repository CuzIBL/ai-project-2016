 
　　　q-trans  which stands for query-translation system  translates formal database queries into english to enhance the usability of both natural and formal language database access systems. q-trans is designed for the database query language sql  whose query expressions serve as an abstract representation from which an english paraphrase is generated. q-trans is also intended to be part of the transformational 
question answering system  tqa system   which provides a natural language interface for database query  analyzing and ultimately translating the english queries into sql expressions. the concepts and methods used in q-trans to arrive at a 
query translation are  however  independent from the tqa system except for compatibility of lexical and grammatical coverage of the paraphrar.es produced. the paraphrases generated are true translations of the sql expressions which are the input to q-trans and serve in a sense as deep structures that get mapped into english imperatives. the grammatical english structures q-trans produces obey somewhat conflicting constraints in that they preserve as much of the sql structure as necessary to reflect the internal logic to the user  and at the same time represent as natural english sentences as possible. 
i. purpose and goals of q-trans 
       formal database query languages represent a welldefined  syntactically constrained  yet powerful means of accessing databases. once users have mastered the syntax and lexicon of such languages  however  they still may not be successful in retrieving the desired data due to the amount of detail that needs to be specified  due to the requirement for exact matching of variables  or due to misconceptions about the contents and structure of the database. should users be fortunate enough to have a natural language interface for database accessing  different problems arise  caused by the inherently vague and ambiguous nature of natural language. that is  the system's interpretation of english queries in terms of database queries can yield ambiguous or otherwise inappropriate results. in any case  whether a formal database language or english is the basis for communication with the database  users might benefit from an independent means of verifying whether the data retrieved is really what they wanted or asked for. 
　　　q-trans has been designed to help users resolve such uncertainties by providing an english paraphrase of the formal 
query  regardless of whether it was produced by the user directly or indirectly via a natural language front end system. q-trans is currently being developed at ibm research in conjunction with the transformational question answering system  tqa   petrick 1  plath 1 . tqa provides a natural language interface to databases  allowing users to pose their queries in english rather than in some formal language. 
the english input is processed in the tqa system by computing its underlying structure using a lexicon  a transformational grammar  and a transformational parser. the underlying structure is translated into logical form  a relational calculus expression  which is then mapped into sql. sql is a relational database language used independently of tqa for accessing  maintaining and updating databases  astrahan et al. 1 . the output of tqa  the natural language front end  is a formal sql expression. the latter serves as input to the back end. system r. which executes the sql query against the database. 
　　　the sql expression also constitutes the only direct link between tqa and q-trans. q-trans translates sql expressions into english requests without utilizing the original english query or any intermediate analysis produced by tqa. the grammatical and lexical coverage of the paraphrase  however  is designed to be compatible with that of tqa. given the q-trans paraphrase  users now can check whether their original query was interpreted correctly by the system or phrased correctly by them  or - in the rare event that tqa produces more than one formal query from the english input they can choose the appropriate one on the basis of the qtrans paraphrases. 
　　　the fact that the english paraphrase is directly generated from the formal database query distinguishes this work from most other research on database response generation  which tends to rely on the natural language front end and its analysis and semantic representation of the input query  mckeown 
1  grishman 1  kaplan 1  or on template matching  codd 1  waltz 1 . whether the intellect system  which is commercially available  uses either of these methods for its paraphrase is not clear. the paraphrase appears to be produced by simply inserting english-like names for the column names of the database into a sentence skeleton. 
1. q-trans processing 
　　　three major steps are involved in producing the english paraphrase from the sql expression. first  the incoming sql expression is parsed by q-trans  producing for the input string a hierarchical description which serves as the underlying structure in the translation process. this is accomplished by using a modified version of the sql grammar which is provided to every user in the sql manual. the original grammar is unambiguously context-free  and processing with it is extreme-
ly fast. the modifications that have been implemented consist of changes in category names and some regrouping of the original structures in the grammar so as to make them more compatible with the english structures to be generated. the end result after the modification is still unambiguously contextfree. 

　　　in the second step  a surface english grammatical structure is produced from the sol parse tree; in other words  the sol parse tree gets mapped into an english parse tree where categories arc  a  renamed  resulting in linguistic categories such as noun phrases and relative clauses;  b  reordered  allowing for post- and prenominal modifications;  c  deleted  suppressing parts of sol statements such as join conditions; and  d  inserted  providing english function words not present in sql. 
　　　the third step involves the actual translation of the terminal elements in the english parse tree  which arc still sol terminals  and the insertion of lexical items for the function words created in the second step. 
　　　the mechanism used to manipulate the sol parse tree in the second and third steps is defined by a set of formal translation rules  in the form of a knuth attribute grammar  knuth 1   which are applied using petrick's knuth translator  petrick 1 . the attribute grammar formalism allows for meaning assignments to nodes and rules in context-free grammars. this is done by defining any number of attributes and their respective values for the nonterminals in specific rules. thus  for o-trans  each nonterminal in the sql grammar has  for example  a category attribute which has as its value some appropriate grammatical category or string of grammatical categories. these values get passed up and down the parse tree until all sol categories have a grammatical value. 
　　　as for generality  the attributes assigned to each rule and category are database/application independent as are the values for attributes other than the specific column names  which have features and translations that vary from application to application. the knuth mechanism is powerful enough to provide for the basic operations necessary to produce valid structures and translations  namely deletion  permutation  and insertion even across phrase boundaries. 
iii. an example 
　　　to illustrate the operation of o-trans  we will start with the example of an english question which belongs to a set of about 1 queries entered by users of a previous toa application. the database for that application contained a variety of information about properties in the city of white plains  damerau 1 . the main entities which are described in the database by various attributes are lots or parcels. the query reads as follows: 
what parcels in the r1 zone on stevens st. have greater than 1 sq. ft.   
the current toa system produces the following sol expression for the query: 
select unique a.jaccn  b.pararea 
from zonef a  parcfl b 
where ajaccn = b.jaccn 
and b.stn = 'stevens st' and b.pararea   1 
	and a.zone = 	r1'; 
to explain briefly  the topic of the query appears in the first line  the select clause in sol. the noun  parcels  from the input query is instantiated in the database as parcel numbers  which correspond to the first item  ajaccn  in the select clause. note that toa realized that the question also concerns parcel area  b.pararea   the second item in the select clause  even though the term does not appear in the 
e.-m. mueckstein 1 
original query. due to the structure of the database  two relations  namely zonef and parcfl  have to be accessed; they are specified in the from clause. these two relations get joined in the first statement of the where clause on the column jaccn  using the tuple variables a and b. the next three lines provide the real modifications or restrictions on the topic by specifying actual values for certain column names  stn  pararea  and zone . from this expression  qtrans - as currently implemented - generates the following translation automatically: 
find the account numbers and parcel areas for lots that have the street name stevens st  a parcel area of greater than 1 sq. ft.  and zoning code r1. 
obviously  the translation provided by o-trans is somewhat longer than the original input by the user; however  it is also more precise as lo the items queried  namely account numbers  jaccn  and parcel areas  pararea . while the sol expression simply lists  1  the names of the columns whose values are to be searched  select clause    1  what tables have to be accessed  from clause   and  1  the conditions and restrictions to be observed in the search  where and and clauses   o-trans connects  1    1   and  1  grammatically and logically: the terms in the select clause  1  become the topic  grammatically the direct object  of the imperative verb   find   and part of the information in  1  is expressed in a relative clause modifying  1 . 
　　　the connecting element  the antecedent of the relative pronoun  is derived from the from clause  1  and represents the  real world  entity lo which the tables and their column attributes apply. in this database  almost all tables and attributes relate to lots or parcels. this information is recorded for each table and column name in the knuth translator  allowing o-trans in this case to generate the prepositional phrase 
 for lots  modifying the preceding conjoined noun phrase and heading the relative clause that follows. the where clause expresses a join condition which is suppressed in the translation. this is accomplished in the knuth translator by assigning features to column names identifying them as keys of certain tables. if a where  or and  clause has column names on either side of an identity equation and if these names are compatible keys for joining  then the translation of the clause is suppressed. 
　　　the features that are currently used in the system pertain to  a  grammatical categories for producing the appropriate translations depending on grammatical function;  b  various counters for conjunction treatment;  c  data type information to determine prenominal versus postnominal modifications  singular versus plural usage;  d  code information for triggering translation of codes into english;  e  database related information regarding joins and table membership; and  f  the lexical translations of column names  sql key words and other inserted function words. 
　　　in this particular example  the values for the column names are all in postnominal position. given no further information other than the english equivalents for the column names  this structure will produce adequate translations. in this case  however  more knowledge is available and the insertion of the  sq. ft.  for parcel area is triggered by a feature for that particular column name. the exclusive generation of postnominal qualifications in this example is due to the fact that we are dealing with descriptive attributes  zoning codes and street names  and a quantitative measure  parcel area  only. whenever there are value specifications for attributes 

1 	e.-m. muecksteln 
that are countable  q-trans provides prenominal descriptions. for example  the partial sql sentence 
and b.jdwl   1 
would result in a translation like 
...  more than 1 dwelling units... 
if  in addition to the above  information is included concerning appropriate prepositions for linking attributes to entities  a shorter version with prepositional phrases instead of the relative clauses is produced by a prepositional version of qtrans: 
vide a complete sentence containing the data retrieved; and  1  for sol well-formedness checking  e.g. for accurate variable binding and data and function compatibility. 
       more generally  the approach that has been taken here to generate english  natural language  paraphrases is not restricted to sol as the formal basis but is applicable to other formal query languages as well. going a step further than that  any formal language that is analyzable by a context-free grammar can in principle be translated with the described mechanisms into english. one of the requirements and challenges in such an undertaking is the definition of the mapping relationship between the formal concepts and natural language. 

find the account numbers and the parcel areas for lots on stevens st  with a parcel area of greater than 1 sq. ft.  and in zone r1. 
	iv 	problems and future work 
while o-trans generates paraphrases for a set of 
1 database queries that were produced by toa  there arc still a few cases which result in unnatural and sometimes misleading paraphrases. for example  harmless appearing questions such as: 
how much vacant land in subplanning area 1 is not residentially zoned  
can be translated into complex sol xpressions with querylevel embeddings introduced by negated existential quantifiers. the reason for such constructions is the configuration of this particular database  where values for  residentially zoned  
constitute a long list  which has to be filtered out in searching for the vacant land in the given subplanning area. the resulting query  containing a subquery with a negated existential quantifier  makes for a long and somewhat awkward abstract representation for the translation. a related problem lies in noun phrase conjunction  as in 
in what wards do smith and jones both own parcels  
since there exists no straightforward way in sol to express conjunctions or groupings in the select clause  toa has to produce sol expressions based on self-joins of a relation  listing the topics to be queried for each relation individually. 
       the difficulties in both examples here stem from the need for the logical rearrangement of the query structure without being too repetitive and without introducing ambiguities in the english paraphrase. both of these problems will be resolved by extending the currently implemented attribute grammar such that it can compare units across non-adjacent phrases and take action accordingly  using grammatical mechanisms like deletion and pronominalization  as well as referencing techniques required for this particular task. these problems are in the process of being solved in a way designed to guarantee logically accurate translations of sol  whether tqaproduced or user-produced. 
       the possible uses of o-trans go beyond the one described in this paper. two immediate applications are its use  1  for full sentence answerback  which is a straightforward extension of the existing system  since o-trans has been designed in such a way that the output sentences can easily be modified from an imperative to a declarative sentence to pro