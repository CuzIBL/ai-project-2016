 
over the last few years  constraint-based grammar formalisms have become the predominant paradigm in natural language processing and computational linguistics from the viewpoint of computer science typed feature structures can be seen as data structures that allow the representation of linguistic knowledge in a uniform fashion type expansion is an operation that makes constraints of a typed feature structure explicit and determines its satisfiability we describe an efficient expansion algorithm that takes care of recursive type definitions and permits the exploration of different expansion strategies through the use of control knowledge this knowledge is specified on a separate layer independent of grammatical information the algorithm as presented in the paper  has been full  implemented in common lisp and is an integrated part of the typed feature formallsm tdc that is employed in several large nl projects 
1 	introduction 
over the last few years constraint-based grammar formalisms  shieber  1g  have become the predominant paradigm in natural language processing and computational linguistics while the first approaches releid on annotated phrase structure rules  e g patr-ii  shieber et al 1    modern formalisms try to specify grammatical knowledge as well as lexicon entries entirely through feature structures in order to achive this goal one must enrich the expressive power of the first unification-based formalisms with different forms of dis-
junctive descriptions later other operations come into play e g    classical  negation 
　however the most important extension to formalisms consists of the incorporation of types  for instance in modern systems like tfs  zajac  1  cuf  dorre and dorna 1  or tdc  kneger and schafer  1  
    this work was funded by the german federal ministry of education science  research and technology as part of the verbmobil project we are grateful to threp anonymous 1jcai reviewers for helpful comments 
1 	natural language 
types are ordered hierarchically as is known from objectoriented programming languageb a feature heavily employed in lexicahzed grammar theories like head-driven phrase structure grammar  hpsg   pollard and sag  1  this leads to multiple inheritance in the description of linguistic entities in general  not only is a type related to other types through the inheritance hierarchy but is also provided  with feature constraints that are idiosyncratic to this type hence a type symbol can serve as an abbreviation for a complex expression and an untyped feature structure becomes a typed one if a formalism it. intended to be used as a stand-alone system it must also implement recursive types if it does not provide phrase-structure tecursion. directly  within the formalism  or indirectly  via a parser/generator  1 in addition certain forms of relations  like append  or additional extensions of the formalism  like functional uncertainty  tan be nicely modelled through recursive types 
　now because types allow us to refer to complex constiaints through the use of symbol names  we need an operation that is responsible for deducing the constraints that are inherent to a type this means  reconstructing the idiosyncratic constraints of a type  plus those that are inherited from the supertypes we will call such a mechanism type expansion  te  or type unfolding 1 thus te is faced with two main tasks 
1 making some or all feature constraints explicit  type expansion is a structure-budding operation  
1 determining th  global consistency of a type or more generally  of a typed feature structure 
　types not only serve as a shorthand  like templates  but also provide other advantages which can only be accomplished if a mechanism for te is available 
　　for instance ale employs a bottom-up chart parser  whereas tfs relies entirely on type deduction note that recursive types can be substituted by definite clauses  equivalences  as is the case for cuf  audi that parsing/generation roughly corresponds to prolog s sld resolution 
　　it ia worth noting that our notion of te shares similarities with ait-kacj's sort unfolding  ait-kaci et al  1  and carpenter's total well typedness  carpenter  1  ch 1  however  the latter notion is not well-defined for true recursive typed feature structures in that such structures cannot be totally well-typed within finite time and space 

  structuring knowledge 
hierarchically ordered types allow for a modular way of representing linguistic knowledge generalizations can be put at the appropriate levels of representation type expansion  then is responsi ble for gathering the distributed information that is attached to the type symbols 
  saving memory 
in practice  it is not possible to hold huge lexica in full detail in memory however  only the idiosyncratic information of a lexicon entry needs to be represented type expansion is employed in making the constraints imposed by lexical types explicit 
  efficient processing 
working with type names onl  or with partially expanded types minmnzes the cotts of copying structures during processing and speeds up unification this can only he at complished if the system makes a mechanism for type expansion available 
  type checking 
type definitions allow a. grammarian to diclare which attributes are appropriate cot a given t pe and which types are appropriate for a given at tribute  therefore disallowing one from writing inconsistent feature structures again typo expansion is necessary to determine the global consistency of a given description 
  recursive types 
recursive types give a grammar writer the oppor tunity to formulate certain function'; or relatione as recursive type specifications working in the type deduction paradigm forces a grammar writer to replace the context-free backbone through recuisive tvpes here  parameterized delayed type expansion 
is the key to controlled linguistic deducation  usikoreit 1  
  anytime behaviour 
complex architectures for nl processing require modules that can be interrupted at any time  returning an incomplete  nevertheless useful result  wahlster  1  such module* are able to continue processing with only a negligible overhead  instead of having been restarted from scratch type cxpart ston can serye as an anytime module for linguistic processing 
   in the next section  we introduce the basic inventory to describe our own novel approach to te we then describe the basic structure of the algorithm  present several improvements  and show how it can be parameterized w r t different dimension finally  we have a few words on theoretical results and compare our treatment with others 
1 	preliminaries 
in order to describe our algorithm  we need onlj a small inventory to abstract from the concrete implementation in tdc  kneger and schafer  1  and to make the approach comparable to others first of all we assume 

   it is worth noting that for the purpose of simplicity and clarity  we restrict tfs to the above two cases actually our algorithm is more powerful in that it handles other cases for instance conjunction disjunction  and negation of types and feature constraints 
   a type system ft is a pair  1 i   where 1 is a finite set of typed feature structures and z an inheritance hierarchy given u we call 1 ♀ 1 a type definition 
   our algorithm is independent of the underlying deduction system- we are not interested in the normalization of feature constraints  i e how unification of feature structures is actually done  nor are we interested in the logic of types  e g whether the existence of a greatest lower bound is obligatory  tfs  zajac  1   ale  carpenter and perm 1   or optional as m tdc  kneger and schafer  1  we assume here that typed unification is simply a black box and can be accessed through 
an interface function  say unify tfs  from this perspective our expansion mecham can be either used as a stand-alone system or as an integrated part of the typed unification machinery 
   we only have to say a few words on the semantic foundations of our approach at the end of this paper this is because we could either choose extensions of feature logic  smolka  1  or directly interpret our structures within the paradigm of  constraint  logic programming  lloyd  1  jaffar and lapses 1  
1 lt should be noted that we define tfs to have a ne-flted 
structure and not to be flat  in contrast to feature clauses in a more logic-oriented approach  e g  ait-kaci el a!   1   in order to make the connection to the implementation clear and to come close to the structured at tribute-value matrix notation 
	krieger and schafer 	1 


	1 	natural language 



is specified all types will be expanded  checked in unify type and node  
  maxdepth integer specifies that all types al paths longer than integer will bt delated anyway  checked in unify-type-and-node  
  attribute-preference {attribute}' defines a partial order on attributes that w ill be considered in the functions depth-first-expand and types-firstcrpand the substructures at the attributes leftmost m the list will be expanded first this nonnunjental preference may speed up expansion if no numerical heuristics are known 
  use-{conj|disj} heuristics {t|nil}  uszkoreit 1  suggested exploiting numerical preferences to speed up unification both keywords control the use of this information in functions dtpth-first-cxpand and types-first-expand 
  resolved-predicate {resolved-p| always-false | } this slot specifies a user definable predicate that may be used to stop recursion  see function expand-tfs  the default predicate is always-false which leads to a complete expansion algorithm if no other delay information is specified 
  ask-disj-pref ere nee {t|nil} if this flag ia set to t  the expansion algorithm interactively asks for the order in which disjunction alternatives should be expanded  checked in depth-first-expand and types-first 
expand  
1 	natural language 

1 	h o w to stop recursion 
type expansion with recursive type definitions is undecidable in general  1 e   there is no complete algorithm that halts on arbitrary input  tfs  and decides whether a description is satisfiable or not  see section 1  however  there are several ways to prevent infinite expansion in our framework 
  the first method is part of the expansion algorithm  lazy expansion  as described before 
  the second way is brute force use the maxdepth slot to cut expansion at a suitable path depth 

  the third method is to define delay patterns or to select the expand-only mode with appropriate type and path patterns 
  the fourth method is to use the attribute-preference list to define the  right' order for expansion 
  finally one ran define an appropriate resolved-predicate that is suitable for a class of recursne types 
1 	a p p l i c a t i o n s 
in section 1 we have already mentioned an nl application in which type expansion was employed viz in the formulation of the interface between allomorphy and morphotactics  krieger et al 1  let us quicklv present two other arces that profit from type expansion parsing/generation as type expansion and distributed parsing with partially expanded information 
　parsing and generation can he seen in the light of type expansion as a uniform process where only the phonology  for parsing  or the semantics  for generation  must be given foi instance 

type expansion together with a sufficiently specified grammar then is responsible in both cases for constructing a fully specified feature structure which it  maximal informative and compatible with the input structure 
　distributed parsing is a strategy which reduces the representational overhead given out grammar which cospecifies syntax and semantics proper constraints  1 e filters  are separated from purely representational constraints the resulting subgrammars are then processed b  two parsers in parallel this presupposes that we can properly handle partially expanded typed feature structures 
1 	t h e o r e t i c a l 	r e s u l t s 
it is worth noting that testing for the satisfiability of feature descriptions admilting recursive type equations/definitions is in general undecidablc  rounds and man aster-ram er  1  were the first to ha e shown that a rasper-rounds logic enriched with recursive t pes allows one to encode a turing machine later  smolka  1  argued that the undecidabihty result is due to the use of coreference constraints he demonstrated his claim by encoding the word problem of time systems hence our expansion mechanism is faeed with the same result in that expansion might not terminate 
　however  we conjecture that non-satisfiability and thus failure of type expansion is  in general  semidecidable the intuitive argument is as follows given an arbitrary recursive tfs and assuming a fair type unfolding strategy  the only event under which te terminates in finite time follows from a local unification failure which then leads to a global one in every other case the unfolding process goes on by substituting types through their definitions recently   ait-kaci et al 1  have formally shown a similar result by using the compactness theorem of first-order logic however  their proof assumes the existence of an infinite osf clause  generated by unfolding a i 
　thus  our algorithm might not terminate if we choose the complete expansion strategy however  we noted above that we can even parameterize the complete version of our algorithm to ensure termination for instance to restrict the depth of expansion  analogous to the offline paisability constraint  the non-complete version 
always guarantees termination and might suffice in practice 
　semanticall   we can formally account for such recursive feature descriptions  with respect to a type system  in different ways either directly on the descriptions  or indirectly through a transformational approach into  first-order  logic both approaches rely on the construction of a fixpomt over a certain continuous function 1 the first approach is in general closer to an implemen tation  and thus to our algorithm  in that the function which is involved in the fixpoint construction corresponds more or less to the unification/substitution of tfs  see for instance  ait-kaci  1  or  pollard and moshier 1   the latter approach is based on the assumption that tfs are only syntactic sugar for firstorder formulae if we transform these descriptions into an equivalent set of definite clauses  we can employ techniques that are fairlv common in logic programming  viz charac terizing the models of a definite program through a fixpoint take for instance our cyc-list example from the beginning to see the outcome of such a transforma tion  assume that cyc-list is a subtype of list  

1 	comparison to other approaches 
to our knowledge  the problem of type expansion within a typed feature-based environment was first addressed by hassan ait-kaci  ait-kaci 1  the language he described was called kbl and shared great simdanties with login  see  ait-kaci and nasr  1  however  the expansion mechanism he outlined was order dependent in that it substituted types by then definition instead of unifying the information moreover it was non-lazy thus it will fall to terminate for recursive types and performs te onl  at definition time as is the case for ale  carpenter and penn  1  however  ale provides recursion through a built-in bottom-up chart parser and through definite clauses allowing te only at definition time is in general space consuming thus unification and copying is expensive at run time 
　another possibility one might follow is to integrate te into the typed unification process so that te can take place at run time systems that explore this strategy are tfs  zajac  1  and life  ait-kaci  1  however  both implementations are not lazy  thus hard to control and moreover  might not terminate in addition  if prototype memoization is not available  te at run time is 

inefficient  cf fig 1  a system that employs a lazy strategy on demand at run tune is cuf  dorre and dorna  1  laziness can be achieved here by specifying delay patterns as is familiar from prolog this means delaying the evaluation of a relation until the specified parameters are instantiated 
1 	s u m m a r y 
type expansion is an operation that makes constraints of a typed feature structure explicit and determines its satisfiability we have described an expansion algorithm that takes care of recursive types and allows us to explore different expansion strategies through the use of control knowledge efbciency is addressed through specialized techniques  l  prototype memoization reduces the number of unifications  and  n  preference information directs the search space because our notion of type expansion is conceived as a stand-alone module here  one can freely choose the time of its invocation  e g   during typed unification  parsing  etc 
   the algorithm as presented m the paper  lias been fully implemented within the tdcjl/dibfe system  kneger and schafer  1  backofen and wejers  1  and is an integrated part of disco  uszkoreit h al  1  
　we are convinced that our approach is also of interest to those who are working with  possibly recursive and hi-
erarchically ordered  record-like data structures in other areas of computer science 
