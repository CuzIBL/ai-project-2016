 
　　　many a r t i f i c i a l intelligence applications require the use of expert systems. as expert systems move into new domains  several significant changes can be expected. among these are an increase in number of rules in the rule base and an increase in the number of data elements contained in working memory. 
　　　also  many new applications require that expert systems move into real-time domains. here  a system must be able to process large quantities of data which are changing rapidly. many problemsolving situations w i l l be time c r i t i c a l   and the system must take into account the availability 
and distribution of scarce system resources. 
　　　for these reasons  the efficiency of a given expert system design and its ability to perform complex memory management tasks w i l l become increasingly important. this w i l l require modifications in the traditional production system 
architectures. in this paper  the design requirements of future expert systems are discussed  and haps  a recently implemented production system architecture designed to address these issues  is presented. 
	i 	introduction 
　　　an expert system is a computer program or set of programs capable of performing near the level of a human expert in some limited domain. previous work in this field has produced systems which can perform medical diagnosis of blood diseases  shortliffe  1   predict the physical structure of complex organic molecules euchanan & feigenbaum  1   and configure vax-1 computer systems  mcdermott  1 . the level of success of such systems indicates that expert systems 
w i l l soon move into broader  more complex domains. 
　　　as this occurs  several new constraints on the design of expert systems can be expected: 
　　　1. the system must be capable of handling larger rule bases. this is due to the fact that the level of expertise exhibited by a given expert system is directly related to the number of rules in its rule base. thus  if a given system is expected to increase both its domain and level of expertise  the size of the rule base must necessarily increase. 
　　　1. the system must be capable of handling a much larger working memory set. one reason for this is that when the domain of a given expert system becomes larger  more domain-specific knowledge is required. 
　　　1. some systems w i l l be required to operate in real-time situations. many new applications  such as the automation of satellite subsystems  w i l l require the processing of data which change in real time. also  these domains often require problem solving in time-critical situations  which means that the expert system must be flexible enough to consider constraints imposed by the availability and distribution of scarce system resources during the problem solving process. 
　　　such constraints imply that efficiency concerns w i l l become increasingly important in the design of future expert systems. this demands the development of new tools for the construction of expert systems which take these efficiency issues into account. 
　　　the remainder of this paper concerns the identification of areas in which the design requirements of future expert systems will strain the current production system architectures. techniques are described which are capable of performing efficiently under these new situations. these techniques are incorporated into the design of a new production system architecture known as haps  the hierarchical  augmentable production 
system   a unique expert system building tool designed to address the needs of future expert systems explicitly. 
	ii 	related work 
　　　most of the research to date concerning the efficiency of production systems focuses on the operation of pattern matching. this is the process by which patterns from the conditional portion of a production are compared to the data elements in working memory. when a l l of the conditionals of a production match  that production may be instantiated. at any given time  the set of a l l possible production instantiations is known as the conflict set. 
　　　pattern matching is the most time consuming operation which the interpreter must perform and i s   therefore  the bottleneck of the system. the most widely known and most efficient of the 
　　　
pattern matching algorithms is the rete match algorithm  forgy  1 . this algorithm takes advantage of the following characteristics of production systems: 
　　　1. pattern similarity-since productions are testing against the same set of data items  
many of the patterns w i l l have similar characteristics. thus  at least some of the matching for 
many of the patterns can be done simultaneously. 
　　　1. temporal redundancy-the contents of working memory change slowly over lime. on any given cycle  a few data items may be added and a few may be modified or removed  but most remain the same. thus  pattern matching information can be saved from cycle to cycle  with only a few modifications. 
　　　taking advantage of these concepts requires the compilation of production patterns into a discrimination network. data elements which enter working memory are sent through at the root of the network. at the terminal nodes  modifications are made to the conflict set. this results in an algorithm where the execution time required for a 
　　　single firing is  in the best case  independent oi the number of data items in working memory. for this reason  the rete match algorithm is implemented in the interpreters of most state-ofthe-art production systems. 
	i ii 	goal directedness 
　　　introducing goal directedness into a production system eases the writing of programs in that system. for example  the ops1 system provides an alternate conflict resolution strategy which facilitates means-ends analysis  forgy  1 . other systems are explicitly goal-directed  e.g.  sauers & farrell  1 ; the system builds an explicit hierarchy of goals during execution. at any given time  such a system is focused on a single goal  and the system objective is to find 
a way of achieving that goal. 
　　　conceptually  productions in a goal-directed system are expressed in the form: 
in a given goal context  if some set of conditions is true then perform some set of actions. 
　　　the use of an explicit goal hierarchy has many advantages. from the user's standpoint  goal-directed programs are easier to construct  since a production is prohibited from f i r i n g unless it is applicable to solving the specific subtask at hand. equally important  however  is the increase in run time efficiency which can be obtained by incorporating goal-directedness into a system design. 
　　　first  note that restricting productions to f i r i n g in a particular goal context forms natural partitions in the rule set. a set of equivalence classes is defined  where productions in the same class are a l l productions which f i r e in the same 
r. sauers and r. walsh 1 
type of goal context. during system execution  we know which class of productions is relevant to achieving the current goal  and only productions in that class need to be considered for instanti-
ation. this means that no class of productions needs to be processed until that class becomes relevant to the problem solving process. 
　　　similarly  the nature of the goal hierarchy can be exploited in the design of the working memory structure. often during the execution of a goal-directed system  data items are inserted into working memory which are relevant only to achieving a given goal. once a method for achieving that goal has been determined  those data items are no longer needed. 
　　　we can take advantage of this characteristic for efficiency reasons by introducing hierarchical levels of working memory. data elements can be declared local to a particular goal; when a goal is achieved  its local data elements disappear. such a scheme allows the working memory structure to grow hierarchically along with the goal structure. this is important because it permits a l l processing resulting from the creation of a given data element to occur only within a limited local environment. 
　　　while the notion of goal directedness is by no means novel  the incorporation of an explicit goal hierarchy into a production system architecture is important in terms of efficiency because it provides two key capabilities: 
　　　1. productions can be integrated into the problem solving process in such a way that system resources are spent in processing only those productions which are applicable to the solution of the current subtask. 
　　　1. a hierarchical working memory scheme can be introduced  which w i l l allow for more e f f i cient management of the large  domain dependent knowledge bases which w i l l exist in future expert systems. 
　　　an explicit goal hierarchy also allows for the construction of expert systems with a much 
more general control structure  which more closely models the problem-solving processes of a human expert in a dynamic environment  see section v i i   . 
	iv 	production hierarchies 
　　　much research has been done concerning the nature of the knowledge contained inside a production. this research has led to a general distinction between productions and meta-productions. in general  a standard production represents a piece of expert knowledge specific to a given domain. a meta-production contains metaknowledge; that i s   knowledge about the system's knowledge and how to use i t . the use of metalevel knowledge allows a system to make highlevel decisions  such as which of a set of given solution paths is most likely to lead to the best answer to the problem at hand. 
　　　
1 r. sauers and r. walsh 
　　　usually  meta-productions have some sort of precedence over regular productions. this is due to the nature of the knowledge encoded in the meta-productions; it is generally preferable to make high-level decisions concerning how the system w i l l attempt to solve a problem before considering the minute details of the solution i t s e l f . 
　　　this idea has been important in the design of state-of-the-art  hierarchical planning systems   e . g .   stefik  1 . a hierarchical planner w i l l f i r s t produce an abstract representation of a plan to accomplish a given task. then  by gradually considering more constraints  this plan becomes increasingly detailed  u n t i l the final plan in complete detail is produced. 
　　　these concepts can be generalized to produce the notion of production hierarchies. in this scheme  productions are grouped together into sets such that those productions which are similar according to some pre-specified c r i t e r i a are in the same set. rules may be grouped according to such c r i t e r i a as level of knowledge represented  or level of detail of problem solution produced. 
　　　next  we provide the capability of fetching selected rule sets into the environment at execution time. the system is provided with i n i t i a l rule sets by the user. existing productions can recognize problem-solving situations which require that additional rule sets be available  and these can be loaded into the environment and declared local to a given goal. the resulting production hierarchy can grow as new levels of subproblems are identified. 
　　　this is best illustrated through an example. suppose an expert system has the task of troubleshooting some malfunction in a s a t e l l i t e system. i n i t i a l l y   only general problem-solving procedures and high-level troubleshooting rules reside in the environment. one production might notice that the malfunction was due to a loss of power  and might suggest focusing on the power subsystem. at this point  the system has the a b i l i t y to load in a new rule set containing productions specific to power subsystems. as the malfunction becomes isolated to a smaller subset of possible faults  we might load a production set specific to the power subsystem of a particular s a t e l l i t e   a pro-
duction set specific to solar arrays  and even a production set particular to environmental causes of solar array failure. 
　　　one advantage of this scheme is that it provides an efficient way to manage large rule bases. individual groups of productions can reside in separate source f i l e s  and on different physical devices . a group of productions does not need to reside in memory u n t i l they are needed. also  the addition of a new production set is often triggered by the system's attention to a particular goal. in these instances  not only can the goal hierarchy be used as a framework for building production hierarchies  but it can also serve as a framework for dismantling them. if a production set was brought into memory as a response to the creation of a particular goal  then it can be removed 	from 	memory 	when 	that 	goal 	has 	been achieved. 
　　　the addition of a hierarchical production scheme into the expert system environment works well in conjunction with the goal-directed partitioning strategy discussed earlier. the resulting system is one in which  conceptually  a library of production sets relevant to different problem solving tasks is available. several sets are selected during system execution  and the goal-directed nature of the system guides the search through these selected sets. together  these techniques provide an efficient mechanism for managing large rule sets. 
	v 	alternate memory structures 
　　　the efficiency of a data representation is usually measured along two dimensions: space and time. we have already considered the space e f f i ciency of working memory; a memory management scheme based on hierarchical levels of working memory has been described. we s t i l l need to address  however  the time efficiency of the operations performed on working memory. 
　　　the operations standardly performed on working memory are pattern matching against the i n d i vidual data elements  and updating the contents of the data base. efficient implementation of these operations is provided through the use of the rete match algorithm previously discussed. 
　　　the rete algorithm was e x p l i c i t l y designed to exploit the following characteristics of production systems: 
　　　1. due to the fact that productions test against the same data set  many patterns w i l l be similar  and matching against features of patterns 
which are the same can be done simultaneously. 
　　　1. the contents of working memory change slowly over time. therefore  pattern matching information can be saved between match cycles to avoid redundant calculations. 
　　　temporal redundancy is c r i t i c a l to the e f f i ciency of the rete algorithm. imagine a situat i o n   however  in which a set of data items changes frequently  for example  during every recognize/act cycle . each time any data element is updated  a l l of the production instantiations in the conflict set which depend on that data item must be removed or tagged invalid. then  the new value of the data item must be matched 
again to form the set of valid instantiations. 
　　　this is clearly i n e f f i c i e n t ; yet  this is precisely the situation which exists in a realtime environment. real-time systems must deal 
with such data as health and status information  links to other real-time information networks  and feedback from sensor systems. such data may change hundreds of times in the interval between production cycles. 
　　　
　　　one solution to the resulting efficiency problem is to provide additional  globally accessible memory structures in addition to standard working memory. a variety of these structures have been implemented in haps  including system attributes  arrays  and tables. pattern matching must now occur in two stages. matching against standard working memory remains a data-driven process; that i s   matching is done at the time the data base changes. matching against alternate memory structures  however  must be perform dynamically  at instantiation time  that i s   at the start of each cycle . 
　　　in addition to solving some of the problems concerning the processing of real-time data  this scheme simplifies the interface to other software systems. this permits the development of expert systems consisting of many components  not a l l of 
which are rule based. finally  this scheme allows for the possibility of creating separate match procedures for each data type. thus  in future systems  the idiosynchratic behavior of each 
memory structure can be identified and exploited  in the same way the rete algorithm takes advantage of the temporally redundant nature of a standard working memory. 
	vi 	conflict resolution 
　　　conflict resolution is the process whereby one production is selected to execute from the set of a l l applicable instantiations. two types of conflict resolution strategies are common: elimination strategies  and selection strategies. an elimination strategy is one which rules out the consideration of certain alternatives. selection strategies are then used to pick among the remainder. an example of an elimination strategy is refraction  which rules out production instantiations which have already fired in the past. a common selection strategy is specificity  which selects specific productions over more general ones. 
　　　the standard conflict resolution strategies have an important flaw: they are in general unaware of the characteristics of the system environment  and are thus unresponsive to changes in this environment. this is especially true of those characteristics which directly concern system efficiency. an intelligent system would be able to maintain a set of system performance statistics over time  and would include in the conflict resolution process strategies which enable the system to make use of these statistics. 
　　　this scheme can be demonstrated through the use of an example. suppose a large expert system has been installed and has been operating in the same environment for a f a i r l y long period of time. assume also that a statistical summary of past system performance is available. now  in a certain context  several productions are able to f i r e   each representing a different approach to the solution of the problem at hand. one production may have a history of consuming large amounts of cpu time  and another may have a history of 
r. sauers and r. walsh 1 
seldomly leading to a satisfactory solution. it might be desirable to eliminate these productions immediately. of the remaining rules  some might be more likely to lead to long-term solutions than others  and it may be desirable to select these f i r s t . thus  conflict resolution can be used to help allocate resources to tasks with the greatest benefit. 
　　　conflict resolution strategies can also address real-time constraints by enabling productions themselves to alter the conflict resolution strategies in c r i t i c a l situations. for example  suppose an expert system is given a limited amount of time to solve a c r i t i c a l problem. if time begins to run out  we may want to consider only those productions which always produce quick solutions. although this w i l l probably provide only a short-term failure workaround  the timec r i t i c a l nature of the situation w i l l have disappeared  and the system will now have more time available to pursue a more permanent solution. 
　　　finally  many systems require that some operations  in this scheme  for example  the matching against alternate memory structures  be performed at instantiation time. the conflict resolution process usually assumes that it is given a valid conflict set-a set of production instantiations a l l of which have a l l of their conditionals satisfied. here  however  the system has at instantiation time a l i s t of candidates for the conflict set. these candidates are not valid members of the conflict set until they are found to satisfy the set of tests performed at instantiation time. 
　　　this suggests that a type of meta-conflict resolution procedure be available. meta-conflict resolution stategies are able to consider such statistics as cost for instantiation and can eliminate selected candidate instantiations before they are tested for validity. for example  if the system is performing under a time-critical condition  it is reasonable to immediately eliminate candidate instantiations which would require a great deal of some expensive processing  e.g.  inferencing; see section viii  to enter the conf l i c t set. 
	vii 	control strategies 
　　　most production systems use the same general control structure; this is the recognize/act cycle. in goal-directed systems  there is an additional issue which needs to be addressed. the system has a hierarchy of goals which need to be achieved  and one must be chosen to be the focus of attention on each cycle. 
　　　one of the most common search strategies applicable here is depth-first search. in this strategy  a goal is pursued u n t i l it is achieved  or  if it sprouts subgoals  u n t i l a l l of i t s subgoals have been achieved. another applicable search strategy is the breadth-first search  in which a l l of the subgoals of a particular goal are expanded one level before any deeper 
　　　
1 r. sauers and r. walsh 
expansion occurs. 
　　　these types of search strategies are adequate for some applications. they do  however  have a basic inherent flaw: both of these blind search strategies are unresponsive to changes in the system environment and are  therefore  unable to take into account the particular characteristics 
of the problem being solved. 
　　　this flaw is an important one when we are concerned with system efficiency. as a simple example  consider the situation in which a system has two methods available to achieve a particular goal  each of which involves the achievement of a different subgoal. the system may not  however  have enough information available to be able to select the more efficient method in this particular case. using a blind depth-first search strategy  the system may waste large amounts of some scarce system resource  for example  cpu time  pursuing one goal when pursuing the other would have led to an immediate solution. 
　　　this problem is closely related to those we have identified during the analysis of conflict resolution. thus  it seems appropriate here to apply techniques which are traditionally reserved for conflict resolution: the use of selection and elimination strategies. we can make use of system performance statistics to produce a more effective search of the goal hierarchy  thereby allowing system resources to be applied in the directions where they w i l l most likely produce desirable results. 
　　　for example  in order to solve the problem discussed above  an elimination strategy can be used which rules out the pursuit of goals which have consumed more than a specified amount of a given system resource. alternatively  a selection strategy may be used which pursues those branches of the goal tree which have produced the largest amount of new information for each unit 
of some selected resource. similarly  these control strategies can be used to prevent the pursuit 
of goals which have failed under similar circumstances in the past  and to prevent i n f i n i t e recursion. 
　　　control strategies work well in conjunction with the e x p l i c i t l y represented goal hierarchy. for example  the goal hierarchy may contain an explicit or branch; that i s   in order to achieve a goal  we can either achieve one set of subgoals or a second set of subgoals. this represents a situation in which there are multiple possible solution paths. the system can begin to pursue one solution path and then decide  through the use of a control strategy which monitors depth of subgoal expansion  that it might be more advantageous to switch to an alternate solution path. the resulting control structure is one which is capable of recovering from situations which human experts would be able to avoid  yet which could not be handled using more traditional production system architectures. 
　　　another problem which is directly related to memory management is the need for inference. this need can be demonstrated quite easily. suppose some pattern in the conditional portion of a production does not match. there are at least two reasons why this may occur: 
　　　1. the data item being tested for represents a proposition which is false in the current context. 
　　　1. the proposition is true in the given context  but is not e x p l i c i t l y represented in 
working memory. 
in the latter situation  we may be able to infer the truth of the desired data element 	from 
other data items which are explicitly represented. in this case  an interpreter which does not permit inferencing w i l l disallow the execution of what we would like to be a valid production instantiation. 
　　　many knowledge representation schemes provide automatic inferencing capabilities  e.g. genesereth  greiner  & smith  1 . in these schemes  inferencing is performed at the time the data base is queried. inference mechanisms such as these usually require the representation of some form of meta-level knowledge. these schemes  however  are not currently applicable in the production system scenario. this is mainly due to the fact that we can take advantage of properties such as temporal redundancy only for data items 
which are explicitly represented in memory. 
　　　for this reason  inferencing in the production system scenario is an expensive operation. one method for increasing its efficiency is to incorporate the following into the inference scheme: 
　　　1. the individual patterns on which inferencing is permitted should be tagged. this ensures that inferencing is permitted only on those clauses for which it is desirable. 
　　　1. inferencing is performed only when the appropriate data elements required for the instantiation of a chosen production are not e x p l i c i t l y represented in memory. furthermore  this inferencing is delayed u n t i l instantiation time and is only executed for instantiations which 
have passed the meta-conflict resolution process. 
　　　under this scheme  we can associate a cost with any given inference mechanism  and potential instantiations which would require extensive calculations during the test for v a l i d i t y can be eliminated by meta-conflict resolution strategies. 
　　　finally  it has been shown that the inference procedures required to derive new data elements are not uniform over a l l data types  e.g.   fox  1 . thus  it is desirable for the user to be permitted to define external inference routines and to indicate which types of data element these 
　　　
v i i i 	inference 
　　　
procedures are designed for. 
	combining 	these 	ideas 	results 	in 	a 	simple 
　　　
r. sauers and r. walsh 1 
inference 	scheme 	which 	provides 	many 	of 	the 
　　　
advantages of automatic inferencing mechanisms without imposing an unnecessary strain on system resources. 
	ix 	concluding remarks 
　　　the research which has been described in this paper has identified some of the problems which w i l l be faced by the designers of future expert systems. it has also suggested several design constraints to be considered in production system architectures designed to handle these new expert systems. 
　　　these considerations have led to the design of a new production system architecture known as haps  the hierarchical  a.ugmentablc production syystem architecture. haps is a goal-directed system  which allows both hierarchical levels of working memory and the dynamic construction of production hierarchies. in addition  haps provides predefined global memory types designed to f a c i l i t a t e the implementation of large expert systems in real-time situations. 
　　　the system also provides modular  modifiable sets of control strategies and conflict resolution strategies which make the system responsive to changes in i t s environment. these strategies take into account cost estimates  history of system s t a t i s t i c s   and availability of scarce system resources in order to guide the problem solving process more effectively. 
　　　user-declared inference procedures are also handled  and cost estimates of operations performed at instantiation time can be included in 
meta-conflict resolution strategies. 
　　　finally  the system is equipped with a sophisticated production compiler designed to increase the overall level of system efficiency. it is hoped that systems such as haps w i l l greatly f a c i l i t a t e the building of the types of expert systems which can be expected in the near future. 
