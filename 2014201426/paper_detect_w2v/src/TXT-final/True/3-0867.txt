
the paper presents a new algorithm for multiobjective heuristic graph search problems. the algorithm presents some nice properties that are easily proven. additionally  empirical tests show that substantial savings in memory can be achieved over previous proposals.
1	introduction
the multiobjective search problem is an extension of the shortest path problem where arc costs become vectors. this is a genuinely different problem since vector costs induce only a partial order relation.
모loui  studied the extension of dijkstra's algorithm to the multiobjective case  and showed that some stochastic search problems can be reduced to multiobjective ones. stewart and white  outlined moa*  a multiobjective extension of a*  and presented proofs on admissibility  node expansion  and comparison of heuristics. dasgupta et al.  extended this work in several ways  including a version for non-monotone heuristics  moa**   with applications in the area of vlsi design and the log cutting problem. perny and spanjaard  presented a generalization of moa* with application to a web access problem. mandow and perez de뫣 la cruz  presented a systematic extension of the heuristic search paradigm to the multicriteria case  and admissibility conditions for algorithms with different multicriteria preference relations  multiobjective  multiattribute  lexicographic  and goal-based .
모this paper reconsiders the extension of a* to the multiobjective case and presents a new algorithm. the basic operations in a* are selection and expansion of open nodes at each iteration. in a* each open node stands for a single partial solution path that can be further expanded. however  as explained in the paper  this is no longer the case in multiobjective problems  where many interesting paths may reach the same node. the moa* algorithm  stewart and white  1   and subsequent extensions  were devised preserving node selection and expansion as the algorithm's basic operations. this paper presents an extension of a* to the multiobjective case that preserves path selection and expansion as the basic operations. admissibility can be proven very easily. the new algorithm also shows important properties  analogous to those of a*  that are not shared by moa*. additionally  empirical tests show that the new algorithm offers substantial savings in memory over moa*.
모the paper is organized as follows. section 1 reviews previous relevant work in scalar search and points out analogies and differences with the multiobjective search problem. section 1 presents a new algorithm and illustrates its behaviour with a simple example. relevant differences with moa* are identified. section 1 proves the admissibility of the new algorithm and a discusses on its efficiency. the performance results of multiobjective search over a set of randomly generated grid search problems is presented in section 1. finally  conclusions and future research are briefly summarized.
1	scalar and multiobjective search
1	previous results in scalar graph search
the shortest path problem can be stated as follows: given a locally finite labelled directed graph g =  n a c   of |n| nodes  and |a| arcs  n n1  labelled with positive costs c n n1  뫍 r  a start node s 뫍 n  and a set of goal nodes
붞   n  find the minimum cost path in g from s to a node in
붞.
모the a* algorithm  hart et al.  1  is an efficient solution to this problem. it is a best-first search algorithm that uses a search tree to store the set of known interesting partial solution paths  a list of open nodes that can be further expanded  and a characteristic evaluation function f n  = g n  + h n  to select the next open node to be expanded. while function g n  denotes the known cost of the path stored in the tree from s to n  the heuristic function h n  estimates of the cost of a solution from node n to a goal node. heuristic functions can be devised for particular problems depending on their semantics.
모beautiful results have been presented to analyse the relation between the accuracy of h n  and the properties of a*. admissibility: let h  n  be the real optimal cost of a path from n to a goal node. when the heuristic is an optimistic estimate  h n  뫞 h  n   n   the search is admissible  i.e. if a solution exists it is guaranteed to find an optimal one. with additional constraints  h n  뫟 1  n  and 1   n n1  뫍 a  a* is admissible even on infinite graphs. efficiency: when  n h n  = 1  a* behaves like dijkstra's algorithm. when h n  is consistent or satisfies the equivalent monotone property 
	h n  + c n n1  뫞 h n1 	  n n1  뫍 a	 1 
a* solves the problem in o |n|  iterations  storing o |n|  nodes in memory  in the worst case. particularly  if c  denotes the optimal solution cost  a* will always expand all nodes with f n    c   but at most those with f n  뫞 c . therefore  given an optimistic estimate  big values of h n  can push the evaluation of more and more nodes beyond the f n  = c  frontier  reducing search effort.
optimality: when the heuristic is monotone a* can also be proven optimal among the class of admissible best-first algorithms that are guided by path-dependent evaluation functions  dechter and pearl  1 .
1	extension to the multiobjective case
the multiobjective search problem can be stated as follows: given a locally finite labelled directed graph g =  n a ~c   of |n| nodes  and |a| arcs  n n1  labelled with positive vectors~c n n1  뫍 rq  a start node s 뫍 n  and a set of goal nodes 붞   n  find the set of non-dominated cost paths in g from s to nodes in 붞.
모in multiobjective problems cost vectors ~c n n1  induce only a partial order preference relation   called dominance 

where fi denotes the i-th element of vector f~.
모therefore  given two q-dimensional vectors f~ and f~1  it is not always possible to rank one as better than the other. for example  in a two dimensional cost space  vector  1  dominates  1   but no dominance relation exists between vectors  1  and  1 .
모the essence of the multiobjective search problem is to find the set of all non-dominated solution paths. therefore  an analogy could be traced to a version of a* that aims at finding all optimal paths. however  some important differences with the scalar search problem can be pointed out.
모first of all  given the dominance preference relation  two  or more  uncomparable  non-dominated  paths may reach any given node from the same or different parents. several important consequences can be identified:
1. the search tree used by a* to record the best known path to generated nodes is no longer sufficient. a directed acyclic graph can be used instead  to record the set of non-dominated known paths to generated nodes.
1. the number of generated nodes may no longer be a realistic estimate of the memory needed by the algorithm. all arcs and non-dominated cost vectors reaching each node need to be recorded as well. let m be an upper bound on the size of the largest set of nondominated vectors in a node  and o m  a bound on the size of the approximations to these sets. in the worst case o mn  cost vectors need to be stored. bentley et al.  prove that the average number of nondominated q-dimensional vectors in a set of size l is o  log|l| q 1   provided all  n! q relative orderings are equally probable.
1. finally  each time a new path is generated to a known node  its cost may need to be tested for dominance with the set of all known costs reaching the node.
모in general  heuristic estimates will involve a set of vectors h n  for each node n  estimating cost vectors of paths from n to each goal node. therefore  for each path psn from s to n with cost ~gp  there will be a set of heuristic evaluation vectors  f psn . this function is the multiobjective analogue to f n  in a* 
모f psn  = f n ~gp  = nondom{f~ | f~ = ~gp +~h 뫇~h 뫍 h n } where nondom x  denotes the set of non-dominated vectors in set x.
모finally  note that at each iteration  a* selects and expands an open node  i.e. considers all the possible extensions of the path stored in the search tree to that node. in a* each open node stands for a single partial solution path that can be further expanded. however  in the multiobjective case  if an acyclic graph is used instead of a tree to record partial solutions  this will no longer be the case. the moa* algorithm  stewart and white  1  was devised preserving node selection and expansion as the algorithm's basic operations. the next section introduces an extension of a* to the multiobjective case that preserves path selection and expansion as the basic operations.
1	a new algorithm for multiobjective a* search
1	brief description
the pseudocode of a new multiobjective a* search algorithm is shown in table 1.
모in accordance to the considerations in sec 1  we will devise our extension of a* to the multiobjective case in the following way:
  the algorithm uses an acyclic search graph sg to record interesting partial solution paths. for each node n in sg two sets  gcl n  and gop n   denote the sets of nondominated cost vectors of paths reaching n that have or have not been explored yet respectively  i.e. closed or open . each cost vector in this sets labels one or more pointers emanating from n to its parents with that cost. initially  s is the only node in sg.
  the algorithm keeps a list open  of partial solution paths that can be further expanded. for each node n in sg and each nondominated cost vector ~g 뫍 gop n   there will be a corresponding triple  n ~g f n ~g   in open. initially   s ~gs f s ~gs   is the only triple in
open.
  at each iteration  the algorithm will consider the extension of an open triple  n ~g f  that stands for a partial solution path from s to n with cost ~g.
  two sets  goaln and costs  record all goal nodes reached and all non-dominated cost vectors to goal nodes respectively. once a solution is known its cost vector can be used to discard  filter  dominated open triples.

figure 1: sample graph and heuristic function.

figure 1: search graph  iteration 1 .
  search terminates only when the open list is empty 
i.e. when all open triples have been selected or filtered.
1	example
we will illustrate the workings of the previous algorithm on the sample graph in figure 1. a heuristic evaluation function h n  is also presented. a single heuristic vector is given for each node for the sake of simplicity. a trace of the search graph is shown in figures 1. values of gop and gcl are shown at each iteration. values that do not change from the previous iteration are omitted for brevity. table 1 shows a trace of open.
모at iteration 1  sg has only node s at its root  gop s  = { 1 }  and gcl s  =  . the only path in open is selected  and its three extensions to nodes n1  n1  and n1 added to sg and open. at iteration 1 two alternatives have nondominated estimates in open  n1 with estimate  1   and n1 with estimate  1  . let's assume ties between nondominated estimates are always broken choosing the smaller first component in estimated cost vectors. the path leading to n1 would be selected  and its extension to n1 generated. at iteration 1 two non-dominated paths lead to node n1  each cost vector in gop n1  would label a different pointer . one of them is non-dominated in open and selected. at iteration 1 a path leading to the goal node 붺 has a non-dominated estimate in open. it is selected  added to goaln  and its cost vector included in costs. at iteration 1 the path leading to node n1 has been filtered  its estimate is dominated by the vector in costs . the only non-dominated alternatives are selected at iterations 1 and 1. at iteration 1 a new solution path leading to 붺 is selected. therefore  the set costs is updated to { 1  1 }. at iteration 1 all remaining alternatives are filtered and open is empty. the algorithm would backtrack from 붺 returning the two paths found with costs  1  and  1 .
table 1: a new path expansion algorithm for multiobjective a* search.
1. create:
  an acyclic search graph sg rooted in s.
  list of alternatives  open = { s ~gs f s ~gs   }.
  two empty sets  goaln  costs.
1. check termination. if open is empty  then backtrack in sg from the nodes in goaln and return the set of solution paths with costs in costs.
1. path selection. select an alternative  n ~gn f  from open with f~ 뫍 f non-dominated in open  i.e.
	  n1 ~gn1 f1  뫍 open  f~1 뫍 f1	|	f~1   f~  1 
delete  n ~gn f  from open  and move ~gn from gop n  to gcl n .
1. solution recording. if n 뫍 붞  then
  include n in goaln and ~gn in costs.
  eliminate from open all alternatives  x gx fx  such that all vectors in fx are dominated by ~gn  filtering .
  go back to step 1
1. path expansion: if n 1뫍 붞  then
for all successors nodes m of n that do not produce cycles in sg do:
 a  calculate the cost of the new path found to m:
~gm = ~gn +~c n m .
 b  if m is a new node
i. calculate fm = f m ~gm  filtering estimates dominated by costs.
ii. if fm is not empty  put  m ~gm fm  in open  and put ~gm in gop m  labelling a pointer to n. iii. go to step 1.
else  m is not a new node   in case
  ~gm 뫍 gop m  or ~gm 뫍 gcl m : label with ~gm a pointer to n  and go to step 1.
  if ~gm is non-dominated by any cost vectors in gop m  뫋 gcl m   a path to m with new cost has been found   then :
i. eliminate from gop m  and gcl m  vectors dominated by ~gm
ii. calculate fm = f m ~gm  filtering estimates dominated by costs.
iii. if fm is not empty  put  m ~gm fm  in open  and put ~gm in gop m  labelling a pointer to n. iv. go to step 1.
  otherwise: go to step 1.

	1	selection and expansion: paths versus nodes
moa* has been for more than a decade the reference multiobjective heuristic search algorithm. unlike the algorithm presented in section 1  moa* is built around the idea of node selection and expansion. particularly  it makes no distinction in sg between the sets gop n  and gcl n   and a single set g n  = gop n  뫋 gcl n  is kept for each node. a
	figure 1: search graph  iteration 1 .	heuristic evaluation function	node 
모모모모모모모모모모모모모모모모모모모모모모f n  = nondom{f | f = ~g+h 뫇~g 뫍 g n 뫇h 뫍 h n } the open list can be considered a list of pairs  n f n   where nodes with non-dominated f~ 뫍 f n  are selected. the distinction between individual paths reaching each node n is lost and  accordingly  all known paths reaching each node n are either simultaneously open or closed. essentially moa* presents two distinguishing features when compared to the algorithm in section 1: figure 1: search graph  iteration 1 .
1. each time a new non-dominated path is found to a closed node  the whole node is put back into open.
1. each time a node is selected for expansion  all known non-dominated paths reaching that node are extended.
모the first difference may result in unnecesary reexpansion of nodes. the second may result in unnecessary extension of paths in sg and storage of uninteresting cost vectors. ad-
figure 1: search graph  iteration 1 . ditionally  when a goal node 붺 is selected  all cost vectors in g 붺  may enter in costs. in general  it is not possible to know which of these cost vectors belong to truly nondominated solutions until all of them have been found.
               these differences can be illustrated with the example presented in section 1. provided ties in the selection of open paths were broken in the same way  search with moa* would produce the same results in the first two iterations. in iteration 1  the selection of node n1 for expansion would produce in moa* the extension of both known nondominated paths to that node. accordingly  all cost vectors figure 1: search graph  iteration 1 . in g n1  = { 1  1 } would be extended resulting in g n1  = { 1  1 } and g 붺  = { 1  1 }  and node n1 would be marked as closed. note that the new algo-
table 1: open alternatives at each iteration  dom = domi-	rithm did not need to store cost vectors  1  in node n1  or nated; 뫹 = selected .	 1  in 붺.
it.open1 s  1    1    뫹1 n1  1    1   
 n1  1    1    뫹
 n1  1    1    dom1 n1  1    1   
 n1  1    1    dom
 n1  1    1    뫹1 n1  1    1   
 n1  1    1    dom
 n1  1    1    dom
 붺  1    1    뫹1 n1  1    1    뫹
 n1  1    1    dom1 n1  1    1    dom
 붺  1    1    뫹
 n1  1    1    dom모at iteration 1 node 붺 would be selected  and two different cost vectors { 1  1 } would be included in costs. one of them does not belong to a truly non-dominated solution  but moa* will not be able to tell until termination.
모finally  note that at iteration 1  the expansion of node n1 results in a new non-dominated path to n1. moa* would place accordingly n1 back in open with all its heuristic evaluation cost vectors. this implies that prior to termination  moa* will need to reexpand n1. this was unnecessary in the new algorithm since the newly found path to n1 can never lead to a non-dominated solution.
	1	properties
this section presents proofs on the admissibility of the new algorithm presented in section 1  and bounds on the number of paths selected and stored in memory.
모a scalar algorithm is said to be admissible if it is guaranteed to return an optimal solution whenever a solution exists.

we extend the definition as follows: a multiobjective search algorithm is n-admissible if it terminates with the set of all non-dominated solutions whenever this set is finite and nonempty  or if it does not terminate whenever this set is infinite.
모let c  be the set of non-dominated solution costs  ~g p  the cost vector of path the relation  dominates or equals . let  denote the ideal optimal cost vector  i.e. a vector that would attain the optimal cost for each individual dimension. note that problems where ideal optimal solutions are reachable are highly unusual.
모the proofs presented in this section rely on a set of reasonable assumptions  analogous to those presented in  stewart and white  1  to prove the admissibility of moa*:
1. the graph g =  n a  to be searched is locally finite.
1. the heuristic function h n  is admissible  i.e. for all non-dominated solution paths
	p 	=	 s n1 ... ni ni+1 ...붺k  붺k	뫍	붞 and
 

1. for infinite graphs 

theorem 1 : for each non-dominated solution path p  =  s n1 ... ni ni+1 ...붺  with cost ~g p   = ~c   there is always before its discovery a subpath of
p  is recorded in sg; b  ~g pi   뫍 gop ni ;
c .
proof. we first consider parts  a   and  b . the proposition is true at iteration 1  when s is in open and at the root of sg. it is also true in subsequent iterations  since subpaths of non-dominated solutions can never be pruned from sg. let pi  make the proposition true for some non-dominated solution p . by definition   is non-dominated to ni  therefore ~g pi   will never be removed from gop ni  unless  is selected for expansion. upon selection  if ni = 붺  then pi  = p  is discovered. if ni 1= 붺  a new non-dominated path to will be generated  included in gop ni+1  and
will satisfy the proposition. part  c  follows then trivially from the definition of f and admissible heuristic. this  in turn  prevents p  or any of its subpaths from filtering.
theorem 1 if there is a solution  the algorithm terminates even on infinite graphs.
proof. all best first search algorithms that prune cycles terminate on finite graphs  pearl  1 . given the assumptions for infinite graphs  all paths p with length longer than

모will trivially attain ~g p  such that ~c    f~ for all ~c  뫍 c  and all f~ 뫍 f p . since the graph g is locally finite  there can only be a finite number of partial solution paths non-dominated by c . therefore  from theorem 1  all nondominated solutions will eventually be found  and all infinite paths will be pruned or filtered from open in a finite number of steps.
theorem 1 the algorithm is n-admissible.
proof. from theorems 1 and 1 follows that the algorithm will always terminate with all non-dominated solutions. it suffices to show that a dominated solution can never be selected. let's assume  for the purpose of contradiction  that a dominated solution p with cost ~gp is selected  i.e. exists ~c  뫍 c  with ~c    ~gp  and f p  = {~gp}. it must be ~c  뫍1 costs  for otherwise p would have been filtered. now  from theorem 1  for all ~c  뫍 c  not found yet there is at least one path pi =
 s ... ni  such that exists f~ 뫍 f pi   with  and  ni ~g pi  f pi   is in open. now  from the transitivity of the dominance relation follows that and p cannot be selected for expansion.
corolary 1 at any time costs   c . therefore  the algorithm may terminate at any time returning the set of nondominated solutions found so far.
corolary 1 all paths p in sg with f~ 뫍 f p  such that
 ~c  뫍 c  ~c    f~ will either be pruned at later iterations  or selected for expansion.
corolary 1 no path p such that  f~ 뫍 f p  ~c  뫍 c  ~c    f~ will ever be selected for expansion.
corolary 1 for each path p recorded in sg such that  f~ 뫍
f p   ~c  뫍 c  ~c    f~  its extensions will never be recorded in sg.
모proofs of corolaries 1  1 and 1 are trivial from the proof of theorem 1. corolary 1 is also trivial since otherwise the algorithm would not terminate.
모note that a version of a* that found all optimal paths would also satisfy corolary 1. corolaries 1 and 1 give lower and upper bounds on the paths selected for expansion. these are analogous to the efficiency bounds of a*  see section 1 .
모the example presented in section 1 shows that corolaries 1  1  and 1 do not apply to moa*. particularly  for moa*  no upper bound can be given for the cost of paths whose extensions will be recorded in sg depending on c .
1	experimental test
1	search space and practical issues
search in square grids of nodes was used to test the algorithms. these experiments provide further insight into the workings of both algorithms  as well as a preliminary evaluation of the memory savings that can be achieved with the new algorithm. in two dimensional grids  each node  identified by its coordinates  has its four neighbours as successors. note that  for this problem  storing each node takes less space than storing each cost vector for q   1.
모vector costs were generated randomly with integer components in the range  1 . a single goal node was generated for each problem instance  at a random distance between 1 and 1 arcs from the start node. manhattan distance to the goal can be used as an optimistic cost estimate for each component of the cost vectors.
모a lexicographic order was used to sort alternatives in the open set  as sugested in  loui  1 . particularly  only the current lexicographically optimal evaluation vector f~ is placed in open for each node with open alternatives. therefore  the size of open is o |n|  in the worst case for both algorithms  and alternatives can be deleted and inserted in o log|n|  in a binary heap. proofs on admissibility are not affected by this selection mechanism  since a lexicographic optimum is always a non-dominated vector.
1	results
table 1 summarizes relevant parameters of the search carried out over a set of 1 problems by both algorithms 1. the set involved two-dimensional grids with three objectives. the number of nodes involved in selections was the same on both cases. the new algorithm performed 1% more iterations  but took only 1% more time on average to complete the searches. in fact the new algorithm performed slower than moa* only in 1 of the searches and faster in 1 of them. on the memory side  the number of nodes stored by the new algorithm was slightly higher  the number of arcs slightly lower  and the number of stored cost vectors was clearly lower. moa* had lower requirements only in two problem instances  and needed 1% more space on average.
모several phenomena can be observed. the higher average size of the open list may slow insertions and deletions in the new algorithm. an average search with moa* needed to expand only 1 goal nodes to find all solution paths  while the new algorithm needed 1 on average  at least one for each cost vector in c  . this suggests moa* may benefit in some cases from earlier filtering  accounting for the slightly lower number of nodes recorded in sg and the two very simple cases in which moa* stored less cost vectos. however  memory consumption is clearly dominated by the number of paths  or cost vectors  stored in sg where the new algorithm performs consistently better.
모in summary  the new algorithm performed much better in memory requirements but found solutions slightly more slowly on average. time values are the only measure subject to implementation details and should be taken with caution  but show clearly that the number of iterations is not a good indicator to compare the running time of both algorithms.
1	conclusions and future work
a new admissible algorithm based on path selection and expansion has been presented for multiobjective heuristic search. the algorithm is amenable to formal analysis and presents several interesting properties: the algorithm may be stopped at any time  returning the subset of non-dominated solutions found so far; bounds can be given on the number of paths stored in sg  and selected for expansion  as a function of c . an example is shown where moa*  a previous algorithm  violates the upper bounds. preliminary experimental tests confirm that the new algorithm consistently saves substantial amounts of memory  though more complete experimental evaluation in needed.
모the properties presented in the paper are a necessary first step in a proper analysis on the influence of monotonicity and table 1: test results  average  min; max; stnd. dev.  .
new algorithm
iterations1   1 ; 1 ; 1 goal nodes sel.1   1 ; 1 ; 1 nodes in sg1   1 ; 1 ; 1 arcs in sg1   1 ; 1 ; 1 cost vect. in sg1   1 ; 1 ; 1 avg. open size1   1 ; 1 ; 1 time  s 1   1 ; 1 ; 1 moa*
iterations1   1 ; 1 ; 1 goal nodes sel.1   1 ; 1 ; 1 nodes in sg1   1 ; 1 ; 1 arcs in sg1   1 ; 1 ; 1 cost vect. in sg1   1 ; 1 ; 1 avg. open size1   1 ; 1 ; 1 time  s 1   1 ; 1 ; 1 heuristic accuracy in the performance of the algorithm. future work includes detailed average time complexity analysis of the algorithms  a detailed study on the influence of heuristic information on time and space efficiency  and  eventually  an extension of dechter and pearl's  analysis on the optimality of a* to the multiobjective case.
