 
feature structures play an important role in linguistic knowledge representation in computational linguistics. given the proliferation of different feature structure formalisms it is useful to have a  common language  to express them in. this paper shows how a variety of fea-
ture structures and constraints on them can be expressed in predicate logic  except for the use of circumscription for non-monotonic devices   including sorted feature values  subsumption constraints and the non-monotonic any values and  constraint equations . many feature systems can be completely axiomatized in the schonfinkel-bernays class of first-order formulae  so the decidability of the satisfiability and validity problems for these systems follows immediately. 
1 	introduction 
the number of different feature structure devices and formalisms proposed in the  unification grammar  literature is growing so fast that it is important to find a  common language  in which they can be expressed. this paper shows how a variety of different types of feature structures and constraints on them can be expressed in predicate logic  or standard non-monotonic extensions thereof   including: 
   parameterized  sorts  
  subsumption constraints  and 
  non-monotonic constraints  specifically lfg  con-straint equations  . 
these were chosen merely to give a feeling for the ease with which fairly complex constructions can be described in predicate logic; they by no means exhaust the class of feature structures and constraints that can be given 
   *the research described here was conducted while i was a gastprofcssor at the institut fur maschinelle sprachverarbeitung  universitat stuttgart  which i would like to thank for providing a supportive environment in which to get this work done. robert garpenter  jochen dorre  andreas eisele  john maxwell  michael moorreau and gert smolka have all made insightful comments on the work reported here; naturally all responsibility for errors remains my own. 
1 	natural language 
first-order axiomatizations. this suggests that instead of requiring radically new types of interpretations  even complex feature structures and constraints on them can be described using standard techniques. not all these extensions have to be used in an implementation  of course  a reasonable policy might be to only implement the decidable extensions described below  for example. since feature structures are a kind of frame representation  the results presented here should be of interest to the wider a.i. community. 
　the results in this paper extend those presented in earlier work  especially  1 1 1   with which  due to space limitations  familiarity is presupposed. 
1 	the schonfinkel-bernays class 
one advantage of axiomatizing feature structures in firstorder predicate logic is that its proof-theoretic  model theoretic and computational properties are well-known. this paper exploits some of the results on dccidable classes of first-order logic  1  to show that the satis fiability and validity problems for certain types of feature structure constraints are decidable. we show that variety of such structures and constraints can be axiomatized using formulae from the schonfinkel-bernays class   called sb below ; since the satisfiability and validity of any formula in sb is decidable  the satisfiability and validity problems for these feature structure constraints must be decidable too. 
a formula is in sb iff it is of the form 
where is a formula containing no function or quantifier symbols.1 sb formulae possess the finite model property  i.e. if a formula has a model then it has a finite model . lewis  investigated the computational complexity of the decision problem for such formulae and showed that the satisfiability and validity problems for sb formulae are pspace-complete  and  by proposition 1 of   that the satisfiability and validity problems for sbn are np-complete  where sbn is the class of sb formulae con taining n or fewer universal quantifiers. 
1
　　 because can always be expanded to disjunctive normal form  schonfinkel-bernays formulae are a generalization of datalog clauses that allow disjunctive consequents. i hope to explore this more fully in later work. 

　the conjunction  and disjunction  of two sb formulae is itself a sb formulae  after quantifiers have been moved outward . this means that sb axiomatizations of different kinds of feature structures can be conjoined  and the satisfiability of the composite system is also decidable. for example  johnson  axiomatizes 'set values* using sb formulae  and these axioms can be combined with e.g. the sb axioms for sorts given below to yield a 
system with both 'set-valued' and 'sorted' objects completely axiomatized in sb  and hence with a decidable satisfiability problem. 
1 	attribute-value features 
attribute-value features  popularized in the work of 
shieber  and others  are the most common type of features used in computational linguistics. the treatment here is effectively the same as that in  1 1   so it is only summarized here. 
at tribute-value features are in effect partial functions 
 see.  1    and they can be formalized in first-order logic either 
  as relations that obey functionality axioms  as is done here   or 
  as  total  functions over a domain that includes a designated element that is interpreted as an  undefined  value  sec  1  . 
these two different formalizations reduce the satisfiability problem for attribute-value feature structure constraints to different classes of first-order formulae  and lead to different insights about the original problem. 
　here  we conceptualize  pure  attribute-value features as instances of an  arc  relation  where arc x a y  is true iff there is an arc labelled a from x to y.  in some expositions the elements x and y are called nodes and a is called an attribute . the following axioms express the constraints that the arc relation must satisfy for it to be an attribute-value structure. the predicate con is true of the attribute-value constants. 
　the first axiom requires that the are relation is functional.  used as an inference rule in a forward chaining system  if requires the  unification  of the  destinations  of a pair of arcs labelled with the same attribute leaving the same node; see  1  for details . 
		 1  
the second axiom requires that requires that attributevalue constants have no attributes.  this axiom is responsible for  constant-compound clashes  . 
		 1  
the attribute-value constants have special properties expressed by the next two axiom schema. these schema stipulate properties of the entities that the attributevalue constants  a subset of the constant symbols of the first-order language  denote. not every constant symbol will be an attribute-value constant  since it is useful to have constant symbols that refer to other entities as well. 
　the first schema requires that every attribute-value constant have the property con. 
	for all attribute-value constants c  con c . 	 1  
the second axiom schema requires that distinct attribute-value constants have distinct denotations.  this is sometimes called a  unique name assumption  . 
for all pairs of distinct attribute-value 
	constants ct and c1  	 1  

this axiomatization is quite permissive  in that it allows 
  cyclic structures  
  infinite structures  
  intensional structures  i.e. different elements may share the same attributes and values   
  disconnected structures  and 
  allows values to be used as attributes. 
additional axioms could have been added to prohibit such structures  but because there seems to be no linguistic or computational motivation for such additional stipulations they are not made here.  axioms prohibiting cyclic structures and attributes from being values can be formulated in sb  an extensionality requirement can be axiomatized using a first-order formula not in sb  while an axiom prohibiting infinite structures cannot be expressed in first-order logic . 
   each node in a syntactic parse tree is associated with an element  different nodes can be associated with the same element; see chapter 1 of johnson  for full details . lexical entries and syntactic rules constrain the elements associated with parse-tree nodes. following kaplan and bresnan  we represent these constraints by quantifier-free formulae. 
　for example  a  simplified  lexical entry for the english verb swim might require that: 
  the attribute-value element u associated with a node dominating the terminal item swim have a semantics attribute whose value is swim  which abbreviates the verb's  semantic value    
  that u have an agreement attribute whose value is  say  v  and 
  that the value of v's number and person attributes  representing the verb's agreement features  not be singular and and 1rd respectively  these are the fea-
tures of the inflected form swims . 
these constraints might be expressed in an extended patr-ii notation  see shieber   as 

and in fdl notation  see smolka  1   as 

this paper takes no position on what notation such feature constraints should be written in  but simply suggests that whatever notation is used to express this constraint it should mean the same thing as the following 
	johnson 	1 
 universal  quantifier-free formula. 

 in this formula u is a constant that is not an attributevalue constant  while semantics   swim  number  singular  person and 1rd are attribute-value constants . arbitary boolean combinations  including negation  of attribute-value constraints can be expressed in this manner.1 
　note that the axioms defining attribute-value features and formulae expressing attribute-value constraints are all in sb  so their conjunction is also  equivalent to  a sb formula  and hence the satisfiability of such systems of constraints is decidablc. further  the only quantifiers appear in the axioms 1 and 1 so this conjunction is infact in sb1  and hence the satisfiability problem for systems of feature constraints is in np.1 since the satisfiability problem for arbitrary conjunctions and disjunctions of atomic feature structure constraints  here  arc atoms  is np-complete   the satisfiability problem for the system described here is np-complete. 
1 	sorts 
the term  sort  is used to mean different things by different authors. we sketch here how two common interpretations of sorts can be axiomatized by considering some simple examples  and follow smolka  1  in modelling sorts by unary predicates  parameterized sorts are modelled by predicates of higher arity . 
　first   suppose that sorts are taken to restrict the possible attributes of an element  so that e.g. something of sort agr can only have the attributes number or person  with perhaps restrictions on the values of these attributes that for simplicity are not dealt with here . the following axiom defines this notion of sort. 
		 1  
 this one place predicate agr could be used in a more refined lexical entry for swim that requires agr{v   i.e. that v be of sort agr.  
　second  suppose that sorts are also to require that certain attributes must have a value  so that e.g. something of sort agr1 must have values for the attributes number or person.  axiom 1 only prevents anything satisfying agr from having any attributes other than person and number . the following axiom defines this sort. 
		 1  
　　1 the proper treatment of negation in  feature logics  has been the subject of considerable discussion  1 1 1 : however i know of no linguistic application in which a classical interpretation of negation yields intuitively  incorrect  results. 
1
　　the axioms 1 and 1 can be replaced with an equivalent axiom that  shares  the universally quantified variables  so systems of attribute-value constraints can be expressed as formulae in sb1. 
1 	natural language 
both kinds of sorts can be optionally augmented by an extensionality requirement  which stipulates that no two distinct elements in the same sort have identical values for their attributes. for example  the following axiom requires that no two elements of sort agr can have the same values for their person and number attributes. 
		 1  
because axioms of the form of 1 and 1 are in sb  the satisfiability of attribute-value systems augmented with sort constraints of the first type is decidable  and  given a fixed set of sorts and hence a fixed number of universal quantifiers  is np-complete. on the other hand  axioms of the form of 1 are not in sb. while this does not imply undecidability  smolka  1  has shown that for systems that allow parameterized sorts  i.e. sort predicates with arity greater than one  this is infact the case. 
　of course  there is no reason to restrict attention to unary predicates. for example  assuming that lists are represented in the standard attribute-value formulation using first and rest attributes  see shieber  or johnson  for details   the following axioms define the predicate membcr x l   which is true iff x appears somewhere in the proper list represented by l.1 
		    
again  since the axioms in 1 are in sb  they can be con joined with any other sb axioms and the system remains 
decidable. 
1 	subsumption 	constraints 
this section and the next focusses on some of the most difficult aspects of the theory of feature structures. subsumption constraints are notoriously tricky to formulate. partly  this is because the term 'subsumptiori' is used to refer to two different notions in the feature structure literature. 
　first  subsumption can be construed as a relation between system of constraints. subsumes u/ iff every feature structure that satisfies also satisfies  this notion of subsumption is used in the prediction step of generalized earley and lr parsing algorithms for feature structure grammars  see shieber  1  for details.  in the framework described here  and are both 
1
　　the axioms in 1 do not require that / be  an attributevalue encoding of  a list. a unary 'sort' predicate that docs require this is easily formulated  however. among other things  this predicate should require that the  empty list  constant nil has neither first nor last arcs leaving it.  this could also be achieved by treating nil as an attribute-value constant . 

quantifier-free formulae  e.g. boolean combinations of arc atoms   so subsumes 
where a is the relevant feature-structure axiomatization. clearly  if a is in sb then this notion of subsumption is decidable. 
　second  subsumption can be construed as a relation between elements within a feature structure  where e subsumes e'  written iff there is a partial en lornorphism h such that h c  = e'  that preserves attribute value constants and attributes and their values  and possibly sorts .  this notion of subsumption is needed to describe the agreement agreement properties of conjoined phrases; see shieber  for details.  it is straight-forward to axiomatize this in second-order predicate logic by treating the partial endomorphism h as a functional relation  i.e. /i x  y  iff h x  is defined and equal to y . 
dorre and hounds  have shown the undecidability of conjunctions of subsumption and attribute value constraints  so clearly this notion of subsumption cannot be axiomatized in sb. perhaps surprisingly  positively occuring subsumption constraints1 can be axiomatized quite directly in first-order logic in a manner discovered jointly with john maxwell. 
　as just formulated  subsumption seems to rely on an existential quantification over partial endomorphisms h  but by 
  replacing the biconditional with an implication  which does not affect satisfiability if all subsumption constraints occur positively   and 
  skolemizing the embedded existential quantification we obtain an equivalent formulation in terms of a fourplace relation h'  where  e  e'  x  y  iff h x  y   where h is the partial endomorphism whose existence is asserted by the existential in the definition of    the first axiom has the same effect as requiring that  
the second axiom requires that h' preserve attributes and their values. 
		 1  
the third axiom requires that h' preserve constants. 
	 ii  the fourth axiom requires that ti is functional. 
		 1  
　　1 a subformula occurs positively iff it is in the scope of an even number of negation symbols. the simplification of a biconditional to an implication when the relation defined by the biconditional appears elsewhere only positively is described and proved not to alter satisfiability in  1 . 
1 	constraint equations and any values 
finally  we turn to perhaps the most thorny problem for any theoretical account of feature structures: default values and other non-monotonic constructions. this section shows how these notions can be formalized by using circumscription to require satisfying models to be minimal models1. this approach has two major advantages 
over other approaches: 
  expansion to disjunctive normal form is not re-quired  and 
  a single notion of satisfiability is defined which treats the monotonic and nonmonotonic construe tions simultaneously. 
several versions of circumscription are discussed in the literature; for an introduction see e.g. genesereth and nilsson . the parallel circumscription formula  f ' for 
relations 
                                   minimal model  in general  / ' is a second-order formula . 
　an important intuition guiding early work in unification grammar  especially that of kaplan and bresnan  and kay   is that only the minimal feature structures satisfying the constraints are of linguistic in terest  and that lexical entries and syntactic rules may impose additional conditions that a minimal model has to satisfy in order to be well-formed. this section shows how these intuitions can be formalized using circumscription. 
　for example  most current theories of natural language syntax posit a requirement that all noun-phrases must be assigned a 'case feature' by some syntactic rule or lexical 
entry. this could be implemented in a feature-structure based system by adding a constraint to all lexical entries for nouns that a minimal model is well-formed only if the associated feature element has a case attribute; this is sometimes called an any-value constraint on the case attribute. similarly  a constraint equation between two entities is satisfied iff x = y in a minimal model of the attribute-value formulae.  see the discussion on pages 1 of johnson  for a more detailed explanation of such constraints.  
    constraint equations  and any values can be treated in the following way. we represent the constraint that an attribute a must be defined on an element x in a minimal model by any x a   and constraint equations by  now let  be the conjunction of the equality axioms  the attribute-value axioms and all of the  formulae corresponding to  feature structure con straints from a given parse  and let  be the parallel circumscription formula for arc  con and - in  we circumscribe precisely these relations because a minimal model is one which possesses as few ares as possible  specifies attribute-value constants as the denotation of as few variables as possible  and identifies as equal or  unified  as few pairs of variables as possible  see the definition of the subsumption ordering on attribute-value models in  . 
1
　　fernando pereira suggested to me that circumscription could be used to provide a formal account of non-monotonic feature structure constraints. 
	johnson 	1 

　then a model m. satisfies all of the constraints  including the so-called  defining equations   the  constraint equations  and the any constraints  iff 
		 1  
the circumscription of equality requires that two constants denote the same entity  i.e. are  unified   in a model ifr interpreting them as denoting distinct entities would result in the violation of some axiom or constraint. the circumscription of arc and con requires that these relations are also minimal. 
   note that this formulation restricts attention to  clas sical  minimal models. however  for some applications this seems to be too strong. for example  the constraint attached to the np child in the lfg rule  

includes an optional feature structure constraint  which would be represented in the framework described here as 

now  the left-hand disjunct contributes nothing to the truth conditions if disjunction is interpreted classically  since   so this is clearly not the intended interpretation. rather  kaplan and bresnan seem to interpret disjunction as a kind of non-deterministic choice operator  so that all of the minimal models of both and are also minimal models of  
1 	conclusion 
this paper has shown how a wide variety of different types of feature structures and constraints on them can be described using predicate logic. the decidability of the satisfiability problem of many interesting feature structure systems follows directly from the fact that they can be axiomatized in the schonfinkel-bernays class. further  axiomatizing feature structures in firstorder logic allows us to apply standard techniques to the formalization of nonmonotonic feature structure constraints. 
