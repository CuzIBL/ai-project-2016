 
we argue that the situation calculus is a natural formalism for representing and reasoning about control and strategic information. as a case study  in this paper we provide a situation calculus semantics for the prolog cut operator  the central search control operator in prolog. we show that our semantics is well-behaved when the programs are properly stratified. we also show that according to this semantics  the conventional implementation of the negationas-failure operator using cut is provably correct with respect to the stable model semantics. 
1 	introduction 
the situation calculus  mccarthy and hayes   is a formalism for representing and reasoning about actions in dynamic domains. it is a many-sorted predicate calculus with some reserved predicate and function symbols. for example  to say that block a is initially clear  we write: 

where h is a reserved binary predicate and stands for  holds   and so is a reserved constant symbol denoting the initial situation. as an another example  to say that the action stack x  y  causes on x  y  to be true  we write:1 

where the reserved function do a  s  denotes the resulting situation of doing the action a in the situation s  and poss a  s  is the precondition for a to be executable in s. this is an example of how the effects of an action can be represented in the situation calculus. generally  in the situation calculus: 
     1 in this paper  free variables in a displayed formula are assumed to be universally quantified. 
temporal reasoning 
  situations are first-order objects that can be quan-tified over; 
  a situation carries information about its history  
i.e the sequence of actions that have been performed so far. for example  the history of the situation do stack a  b   do stack b  c   so   is  1tack b c  stack a b    i.e. the sequence of actions that have been performed in the initial situation to reach this situation. as we shall see later  our foundational axioms will enforce a one-to-one correspondence between situations and sequences of actions. 
we believe that these two features of the situation calculus make it a natural formalism for representing and reasoning about control knowledge. for example  in ai planning  a plan is a sequence of actions  thus isomorphic to situations. so control knowledge in planning  which often are constraints on desirable plans  becomes constraints on situations  lin  . similarly  when we talk about control information in logic programming  we are referring to constraints on derivations  i.e. sequences of actions according to  lin and reiter  . 
　although our long term goal is to develop a general framework for representing and reasoning about control knowledge in problem solving using the situation calculus  our focus in this paper is the prolog cut operator  the central search control operator in prolog. we provide a situation calculus semantics for logic programs with cut  and show that our semantics is well-behaved when the programs are properly stratified. we also show that according to this semantics  the conventional implementation of the negation-as-failure operator using cut is provably correct with respect to the stable model semantics of gelfond and lifschitz . to the best of our knowledge  this is the first time a connection has been shown between a declarative semantics of negation and that of cut. 
　this paper is organized as follows. section 1 briefly reviews the basic concepts in the situation calculus and logic programming. section 1 reviews the situation cal-


lin 

temporal reasoning 

lin 


temporal reasoning 

the equivalence. this should not be surprising. for example  the logical formalization of negation in logic programs normally requires fixed-point constructions  and negation is usually implemented by cut. 
this use of cut is not ideal in the sense that it does more than search control. 
　in general  we say that the cuts in a program p are for pure search control if for any goal g  
some ramification of this definition for identifying improper uses of cut will be explored further in the full 
1
as we have noticed  the accessibility axiom attempts to define acc recursively. a natural question then is if the recursion will yield a unique solution for the predicate. in general  the answer is negative. however  if a program is properly stratified  then the axiom will yield a unique solution. 
　let p be a program  and f a fluent. we say that the definition of f in p is cut-free if none of the clauses that are relevant to f contains !. here a clause is relevant to f if  inductively  either it's in the definition of f or it's relevant to another fluent that appears in the definition of f. for example  the definition of le in the max example is cut-free. for cut-free fluents  acc does not play a role: 
proposition 1 let p be a program  and 	its extended 
if the definition of a fluent f in p is 
cut-free fluents are the ground case of stratified pro-
definition 1 a program p is stratifiedt/ there is a function f from fluents in p to natural numbers such that 
1. if f is cut-free in p  then f f  = 1. 
1. if f is not cut-free  then f f  is 
appears in the definition of f}. 
and  its 
there is a formula 
　we end this section with a theorem that shows the correctness of the usual implementation of negation using 
　let p be a logic program with negation  not  but without cut. suppose that for each fluent f in p  f' 

lin 
is a new fluent of the same arity. let p' be the logic program obtained by replacing every literal of the form not  and by adding  for each new fluent f'  the following two clauses: 

suppose that for each fluent f  the action af is ordered before the action 
theorem 1 let be the extended action theory of p'  and v the action theory for p as defined in  lin and reiter  . for fluent f in p  and any tuple of terms of sort object  we have iff 
　prom this theorem  we conclude that the usual implementation of negation using cut is correct with respect to the semantics given in  lin and reiter  . as noted in  lin and reiter    the semantics given there for logic programs with negation yields the same results as that given in  wallace    and the latter has been shown to be equivalent to the stable model semantics of  gelfond and lifschitz   when only herbrand models are considered. therefore we can also conclude that the usual implementation of negation in terms of cut is correct with respect to the stable model semantics for logic programs with negation in the propositional case. 
1 	concluding remarks 
we have applied the situation calculus to logic programming by giving a semantics to programs with cut. we have shown that this semantics has some desirable properties: it is well-behaved when the program is stratified  and that according to this semantics  the usual implementation of negation-as-failure operator by cut is provably correct with respect to the stable model semantics. 
　our more long term goal is to use the situation calculus as a general framework for representing and reasoning about control and strategic information in problem solving. in this regard  we have made some preliminary progress in applying the situation calculus to formalizing control knowledge in planning. as we mentioned in section 1  in ai planning  a plan is a sequence of actions  thus isomorphic to situations. so control knowledge in planning  which often are constraints on desirable plans  becomes constraints on situations. based on this idea  in  lin    we formulate precisely a subgoal ordering in planning in the situation calculus  and show how information about this subgoal ordering can be deduced from a background action theory. we also show for both linear and nonlinear planners how knowledge about this ordering can be used in a provably correct way to avoid unnecessary backtracking. 
　regarding our situation calculus semantics for the cut operator  there are many directions for future work. 
1 	temporal reasoning 
first of all  there is a need to compare our semantics with recent work of  l; 1 . more importantly  we should use this semantics to clarify the proper roles of cut in logic programming  to study the possibility of a better control mechanism  and to do verifications and syntheses of logic programs with cut. 
a c k n o w l e d g e m e n t s 
part of this work was done while the author was with the cognitive robotics group of the department of computer science at the university of toronto. this work is also supported in part by grant dag1.eg1 from the hong kong government. 
　the author would like to thank eyal amir  yves lesperance  hector levesque  and especially ray reiter for helpful discussions relating to the subject of this paper and/or comments on earlier versions of this paper. 
