 
　　　the paper presents formalism and implementation aspects of the programming system f o r a r t i f i c i a l intelligence 
 ai  applications. the system contains resolrer which is based on the ideas of lisp - l i k e languages combined with new ai formalisms. semantic memory is another part of the system which is implemented by means of hlerarohloal data-base. interaction with a user is goreraed by metaprocessor which generates a syntactic analyser driven by the grammar for the s p e c t l f l c version of the input language. 
introduction 
　　　the ai problems require incorporation of new features into the t r a d i t i o -
nal programming systems. these features include: the a v a i l a b i l i t y of powerful vehicles f o r creation and amendment of structured data elements - l i s t s   sets  texts; comfortable and e f f i c i e n t formalism for representation of knowledge in different problem domains; new techniques f o r  non-algorithmic  programming s t y l e   such as pattern - driven procedure invocation and automatic backtracking; the a v a i l a b i l i t y of standard procedures f o r the associative search in data base; automatic logical inference  etc. 
　　　some of these features could be found in lisp  reful  snobol  and also in   b i g   language systems such as pl/1  apl  algol-1. at the same time there exists a growing tendency for the design of new languages combining the best techniques and most suited for ai a p p l i cations   1   . 
the system described herein - lisp-
oriented resolver and data-hase - is designed at the computing center of the ussr academy of soienoes with the purpose to provide an e f f i c i e n t instrument f o r d i f f e r e n t ai applications  . the system is designed on the basis of some essential ideas being derived at the d i f f e r e n t s c i e n t i f i c groups and material i s e d in the implementation of some experimental systems  v i z .   plainer  conniver  lisp-1  sail  qlisp  popler 1. 
general system organisation and data-base 
　　　the lord system consists of three r e l a t i v e l y independent parts: resolver  semantic memory and metaprocessor. eaoh of these parts uses similar techniques f o r memory a l l o c a t i o n   function storage and c a l l mechanisms  l e x l o a l analysis procedures e t c the data-base  db  is the common ground f o r keeping and r e t r i e -
	ml of 	both program and data elements. 
　　　db has a fixed number of h i e r a r c h i cal l e v e l s . the largest section of db is an area. eaoh area is i d e n t i f i e d by i t s name and may contain an a r b i t r a r y number of sets. a set consists of records eaoh of which contains a f u l l c h a r a c t e r i s t i c of an object. usually  such an object is generated and used w i t h i n the boundaries of a specific user task. the access to the objects is performed by means of hash function  standard of i n d i v i d u a l for each s e t   . 
　　　objects may have several d i f f e r e n t properties  and eaoh property has i t s own value  sometimes a l i s t of values . list of references to the properties is stored in the body of the record c o r r e s ponding to the given object. 1aoh p r o perty in i t s turn is stored as a separa-
1 
te o b j e c t w i t h p r o p e r t y i n d i c a t o r used as an o b j e o t name* 
       thus in the h i e r a r c h i c a l db we have the f o l l o w i n g l e v e l s a s s o c i a t e d w i t h system n o t i o n s : 
data-base d i v i s i o n s 	lord notions 
	area 	problem domain 
set 	context reoo rd 	objeot f i e l d 	p r o p e r t y 
oontents 	of 	the 	value of 	the 	properf i e l d 	t y 
       the lord access language is p r o v i ded w i t h f u n c t i o n s f o r e s t a b l i s h i n g the name of the problem domain and the name of the working c o n t e x t . s p e c i a l r e f e r e n ces are generated d u r i n g the c r e a t i o n of new o b j e o t s and a d d i t i o n of new propert i e s t o t h e e x i s t i n g o b j e c t s . according to these references the o b j e c t s and the values of t h e i r p r o p e r t i e s may be d e r i ved from db l a t e r . 
       i n many a i a p p l i c a t i o n s i t i s necessary to create the h i e r a r c h y of contexts  and even the h i e r a r c h y of problem domains . this is provided by automatic bookkeeping of s p e c i a l   s e t of r e f e r e n c e s   c o n t a i n i n g the objects which values are p o i n t e r s a t the d i f f e r e n t db s e c t i o n s . the h i e r a r o h y of contexts or problem domains is represented by i n t e r c o n n e c t i o n s of the o b j e c t s in t h i s r e f e r e n c e s e t . 
semantio memory 
       one of the most important problems i n a i systems i s aocumulation o f i n f o r mation r e p r e s e n t i n g  knowledge  about some problem domain. there are two d i s t i n c t approaches to the techniques of knowledge r e p r e s e n t a t i o n . one way is to use a set of expressions d e s c r i b i n g separate f a o t s or hypotheses. s i n g l e expression may represent the r e l a t i o n between two objeots or between an objeot and i t s p r o p e r t i e s   or between two or more d i f f e r e n t f a c t s . another approach 
is based on the u t i l i s a t i o n of a set of procedure*. procedure execution checks the existence o f d e f i n i t e r e l a t i o n s b i n d i n g s p e c i f i c o b j e c t s   p r o p e r t i e s o r f a c t s . 
       these two approaches    r e l a t i o n a l   and   p r o c e d u r a l     are o f t e n intermixed i n a c t u a l implementations. semantio memory in the lord system is intended to serve the same purpose. accumulation of knowledge about d i f f e r e n t problem domai n s   s t r u c t u r i n g o f accumulated i n f o r mation according t o predetermined h e i r a r c h y   and r e t r i e v a l of r e l e v a n t n o t i o n s and f a c t s - these are the main f u n o t l o n s provided by semantio memory. 
       the examples of simple expressions processed by the semantic memory:  product =is-sbt=  cars  oil crain   a1  
 product =ha1-pr1perty= shortage   product =become-an-object-of:s 
	black-market-operation  	 a1  
       a f t e r processing of these e x p r e s sions s p e c i a l db s e c t i o n s are f i l l e d . these s e c t i o n s are named notion - list and fact - list. 
       1  new o b j e c t s : product  cars ... appear in the 	notion-list if they were not 	put 	there 	e a r l i e r . 
       1  expressions a1 and a1 are plaoed i n t o the pact-list  and i d e n t i f i e r s a1 and a1 become the names of the c o r r e s p o n d i n g o b j e c t s   t e x t o f the expression b e comes the value of the main o b j e c t p r o p e r t y . 
       1  kaoh o b j e c t in the notion-list is accompanied by the p r o p e r t y l i s t . one of the p r o p e r t i e s has the value showing the o b j e c t t y p e   another property is evaluated into a l i s t of references to a l l f a c t a o o n t a l n i n g the given o b j e c t . examples of o b j e c t s being stored in the notion-list: 
	product 	type set facts  a1 	a1  
	oil 	type set-element  	f a c t s 	 a1  
	shortage 	type property  f a c t s 	 a1  
besides the above mentioned s e o t l o n s 
1 

there is a l s o relation-list in db. in a sense t h i s l i s t is a subset of notionlist  - a l l system and user d e f i n e d r e l a t i o n s are kept i n t h i s s e o t i o n s   e . g .   is-sbt  has-property e t c . 
       semantic memory performs processing of the i n p u t expression and a l l the n e cessary changes in the db. furthermore  the semantic memory processor pro-rides answering simple questions of the t y p e : 

　　　the answer is based on b i n d i n g the p a t t e r n v a r i a b l e  x w i t h the o b j e c t product  which r e s u l t s from the a n a l y s i s of the p r o p e r t y 	l i s t of the 	o b j e c t oil and  backward  	processing of the f a c t a 1 . 
　　　　besides f i l l i n g db w i t h the simple f a c t s   	expressions d e s c r i b i n g complex s t r u c t u r e s may also be input to the semantic memory. 	one form of comlex expression oould be the d e f i n i t i o n of the f u n c t i o n which governs the maintainance of semantic memory. an example of such a f u n c t i o n 	i s : 
 property-transfe 
　　　this f u n c t i o n acts as an analogous if-added f u n c t i o n in conniver  	i . e .   evaluates 	operators in the f u n o t i o n body when the f a c t matching the given p a t t e r n is added to the semantic memory. 	here 
are p a t t e r n - v a r i a b l e s are the c o r r e s p o n -
ding v a l u e s   obtained by p a t t e r n - v a r i a bles a f t e r successful matching. 
　　　therefore the apperance of 	the f a c t  oil =ras-property= shortage  	in the presence of a 1   a1 and a1 i m p l i e s automatic 	a d d i t i o n o f the 	f a c t :  oil =becomb-an-object-of= black-market-opbration  	 a1  
       it is worth n o t i n g t h a t a1 has the same format as expressions d e f i n i n g the usual r e l a t i o n s   e . g .   a1 and a1. that is why a1 may be amended in the same 
way as any other f a c t in the semantic memory. for example  the f o l l o w i n g question may be asked: 

in order to d e r i v e an answer p a t -
t e r n - v a r i a b l e s  get as 
values the corresponding t e x t s ploked up from a1. this f e a t u r e gives a convenient a b i l i t y to i n v e s t i g a t e and modify the system by i t s own means. 
　　standard o b j e c t types are e s t a b l i s h ed at the time of sjrstem c r e a t i o n   
e . g .   c o n s t a n t   o b j e o t   r e l a t i o n name  f u n c t i o n name  e t c . a user may a l s o i n t r o d u c e his own types using e x i s t i n g r e l a t i o n s   t h e i r l o g i c a l compositions and m o d a l i t i e s . 
       any f a c t and n o t i o n have a l i m i t e d soope - db c o n t e x t . we c a l l it   s t a t i o   context as opposed to  dynamic  c o n t e x t being d e a l t w i t h i n o o n t r o l s t r u o t u r e s discussed in tile next paragraph. the semantic memory access language c o n t a i n s operations f o r m a n i p u l a t i n g s t a t i c c o n t e x t s - rearrangement of the c o n t e x t t r e e   removing c o n t e x t s   u n i t i n g them w i t h each o t h e r   g e n e r a t i n g new c o n t e x t s . as it was mentioned  these operations are performed by processing the s p e c i a l reference s e t . 
resolver 
       while the semantic memory is used mainly f o r s t o r i n g and r e t r i e v a l o f f a c t s   f u n c t i o n s   o b j e c t s and t h e i r p r o p e r t i e s   the resolver serves f o r e v a l u a t i n g the procedures c a r r y i n g out d i f f e r e n t kinds o f l o g i c a l i n f e r e n c e   s e a r c h i n g and/or t r e e s   r e d u c t i o n to d i s j u n c t i v e normal form and o t h e r general or s p e c i f i c f u n c t i o n s . 
1 

　　　the resolver may be considered as an extension of lisp containing new fac i l i t i e s both in the input language and in prooessor implementation. a brief l i s t of these f a c i l i t i e s follows. 
notation 
　　　one of the doubtless requirements for resolver implementation is the abil i t y to process programs written in standard lisp   1   . at the same time special preprocessor can accept and translate into standard lisp-notation the expressions written in algol-like input language  e.g.   
begin new x y; x;= ' 1   : = 
x cons cdr x ; return y  end 
　　　the given notation is similar to that of mlisp1  and is characterized by the absence of superfluous parentheses  i n f i x notation of most operators and usual mathematical notation for function calls. 
　　　the operator and function set is provided with the p r i o r i t y system which f a c i l i t a t e s writing and reading complex expressions. 
a-polnts and backtracking 
　　　resolver has the a b i l i t y to backtrack programs which implies restoring of program and data state in some previously passed point and choosing and i n i t i a t i n g an alternative path of solution as in . a-point  alternation point  is set up by the call for one of special functions: rep  repetition   alt  alternation  and opt  option . generation of f a i lure and return to the last a-point is produced by the function fail which is called directly or indirectly  e.g.  on unsuccessful pattern matching. backtracking mechanism compels talking about  dynamic  context defined by access l i n k   binding l i n k   control link and process state in the sense of bobrow  . 
     the numbers of generated and eliminated alternative branches  dynamic contexts  are fixed as values of special system variable apoint. there is a possib i l i t y to transfer new values to the   h i gher  dynamic contexts. this is accomplished by the following generalized assi-
gnement operator: 
　　　 seto u  n1 n1 . . . np  v    where n1  n1  . . .   np stand for a-point numbers  possibly expressions evaluated to numbers  indicating the dynamic contexts  where variable u has to accept the new value v. the particular form of this operator: 
            seto u v  changes the value of u in the current dynamic context. another particular case: 
            setq u  global  v  changes the value of u in the whole program. 
indirect funotlon calls and debugging aids 
　　　one of the most important trends in modern  non-procedural  programming is the use of indirect function calls. in 
lord this is achieved by means of pattern - directed function c a l l   suspension of function evaluation and  by-passing  of functions. 
　　　the idea and implementation of pattern-directed function call are analogous to the corresponding f a c i l i t i e s of planner and conniver  v  . the main point is the inclusion of function call pattern into the function definition expression. resolver performs only one type of pattern c a l l   namely: a function with a pattern is called when some variable is assigned a value which represents an object matching the function pattern. this whenassigned type of call is used for i n i t i a tion of relevant procedures when specific information appears in the current dynamic context. 
　　　two other types of c a l l   when-added and when-removed  relate to the semantic memory processor  i . e .   to addition and removing the structures matching the function pattern. 
1 

　　　the suspension of funotion evaluation is performed by the operator  stop f m  whioh interrupts evaluation of the function f containing this operator. the control is transfered to the dynamic cont e x t   embracing the c a l l of function f. the argument m is a message  a value of interrupted function f  being sent to the embracing program. if l a t e r the operator  cont f  is met then evaluation of f w i l l be resumed from the point of int e r r u p t i o n . this tool permits the synchronisation of computational processes; moreover  combined with conditional expressions it may be used f o r organisation of alternative branches. 
　　　 by-passing  of function calls f a c i l i t a t e s debugging operations. it is implemented by substitution of a debugging function g everywhere instead of  suspected  function f. the s u b s t i t u t i o n is performed a f t e r evaluation of the expression  bypass f p g  . predicate p is evaluated each time when function f is called. bypassing is taking place only if p is true. 
　　　other debugging aids are: setting-up the maximum number of calls for the spec i f i e d funotion  establishing the  alarm clock  for the current dynamic context  etc. 
interaction with semantic memory 
the resolver interacts with semantic 
memory processor by means of functions add  remove  find  check and others  which perform storing and removing expressions from the db  associative search by a given pattern in the s t a t i c context  check for the presence/absence of d e f i n i te object properties etc. while the resolver is dealing with atoms  l i s t s and texts  semantic memory may contain objects of d i f f e r e n t types  such as set  tree  a r b i t r a r y structure. the semantic memory processor is capable of performing such actions as union and intersection of sets  check f o r membership  etc. 
　　　special types of predicates in resolver - e x i s t e n t i a l and universal quant i f i e r s - are also implemented with the use of find and check operations in the semantic memory. the corresponding expressions in resolver: 
 exist  x1 x1 . . .   e c  and 
　　　 forall  x1 x1 . . .   e o    where x 1   x1  	. . . - quantifier variables  e - expression  evaluating the conditions of quantifier a p p l i c a t i o n   o - s t a t i c context. 
there is also an aggregate operator: 
　　　　　　　 foreach x p e     implying the execution of expression e f o r each object x in semantic memory s a t i s f y i n g predioate p. 
metaprocessor and function compilation 
　　　resolver and semantic memory accept the expressions s a t i s f y i n g formal syntax. in the meantime the idea of giving the user the a b i l i t y to create his own v e r s i ons of input language becomes more and more popular. for t h i s purpose lord system contains metaprooessor which is s i m i l a r to the one designed for mlisp1   1   . 
     metaprocessor manipulates the sequence of grammatical rules whioh have the following format: 
dbf f   x 1   x1  . . .   = syntax  
           mean  semantlcs    wher f stands for metavariable name or program name; x1 x1  . . . - parameters; 
  syntax  defines the formal structure of an input phrase;  sematlcs  - sequence of functions to be evaluated by the resolver or the semantic memory processor. 
1      a set of these rules defines a f o r mal context free grammar which describes the specific version of the input language. it is worth noting that this could be a simple   f u n c t i o n a l   language  where each name f corresponds to the program composing the  semantics  such a p r o gram could be i n i t i a t e d either by func-
t l o n a l expression 	 or by 
some phrase corresponding to the given 

     on the other hand  the n o n t r i v i a l language with deep phrase structure could be defined by means of metararlables used in the syntax of some r u l e s . thus a special language system could be implemented  which f i n a l l y is interpreted by means of lord resolver and semantic memory. 
     the role of  semantlos  could be i l lustrated by the following example. suppose we would iike to create a lisp-dlalect to be translated into standard lisp 1 program. in this case the sequence of grammatic rules w i l l define the general syntax of the lisp - dialect expression 
with the topmost rule looking as f o l l o -
ingi 

. . . 	values 	provided by syntax analyser. 
　　 semantics  in this example includes two macrocalls:the f i r s t one generates lisp 1 text in the specified f i l e   the second one calls lisp 1 translator with generated f i l e as a source of input. 
     in the similar way we could define any context free input language with semantic interpretation provided by the programming language which exists in the computer already. 
     a l l functions composing the semant i c s are compiled into macro-assembler language and then into machine code. the modules of compiled oode are stored in the data-base. the lord monitor c a l l s them from the db according to resolver and semantic memory functioning. 
     besides def expressions metaprocessor accepts also special command operators serving in on - line i n t e r a c t i o n with 
the lord system - this includes e d i t i n g text f i l e s   switching to different oper a t i o n modes  choosing input/output channels  etc. j. 
conclusion 
     the design of a new system capable of successful competing with conventional widespread programming languages suoh as lisp or pl/1 is a hard and fascinating task. the ground f o r optimism  l i e s   on the one hand  in the fact that many of the ideas comprised by the lord project are tested to some degree in experimental systems such as conniver  mlisp 1  popler 1. on the other hand  people connected with this project are involved in system implementation as well as in developing 
methods of i t s usage for solving p r a c t i cal ai problems. in particular these problems are connected with system anal y s i s research f o r business and environment c o n t r o l   construction of information r e t r i e v a l systems and natural language processing. 
     the necessity f o r i n t e l l i g e n t systems of this kind is urgent  and even the prototype design w i l l make a valuable contribution to the experience of constructing and usage of ai systems. 
