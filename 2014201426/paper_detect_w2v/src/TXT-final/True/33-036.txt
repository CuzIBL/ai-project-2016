 example of a strategy. 
     assume that the goal-state goal can be reached by a means-ends analysis using the operator: 
	goal  - subg1al1 subg1al1 	 1  
which means that subgqall and subotal1 have to be attained to reach goal. to solve the two subgoals  
which are our new state we need some operators: 
	subg1al1  - p1 & p1 	 1  
	subg1al1  - p1 & p1 p1 	 1  

subooall can be attained by activating the operators called pi and p1  whereras subo1al1 can be resolved by calling pi  p1 and p1. each operator call may lead to an operator that transforms a state to a new state or leaves a state without change. the latter case means that a subgoal has been solved  and we write: 
	p1 	 1  
this example illustrates the simplest form of the language that we will use in developing da. it is a subset of first-order logic  called horn clauses  1 . as a consequence  it is possible to read the first expression above as: goal is true if subooall and subg1al1 are true. in order to run horn clauses we have to specify how the formulas are executed. there are many ways to execute a set of horn clauses  1 . 
i l l on the methodology 
     we shall discuss three aspects of our method. first  we take up the task analysis or the identification of possible goals and operators  secondly  the derivation and execution of strategies in different problem spaces  and thirdly  the empirical evaluation or the comparisons between simulations and empirical observations. 
a. task analysis 
     we think of a task analysis as an identification of goals that can be involved in a solution to a particular task. it means also that the set of goals  or a subset of them  is specified in a model specification. each specification contains a set of possible simulation models that are abstractly but precisely defined. a model specification leaves several aspects unspecified. for example  the representational format that goals and procedures operate on is not defined. therefore  no decision can be made about how to manipulate information. 
design issues: 
1 representational format: how is internal information represented  
1 operational assumptions: how is information manipulated  
1 operational mode: how is each operation transformed  how is a transformational time function defined for an operation  
1 operational order: how is the set of operations organized  
1 operational rule: how is the entire set of operations transformed  how is this time function defined  
fig. 1 five issues on the design of models. 
     fig. 1 contains a l i s t of issues not included in a model specification. hypotheses have to be formulated on each of the five design issues to implement a oanputer model. there may exist several different hypotheses on each issue  for exanple  on internal information formats. consequently  this step can be as important as the specification since the hypotheses on the design issues indirectly restrict the set of possible models. in short  the specification and hypotheses contain a set of possible simulation models  i.e.  a set of pairs of problem space and strategy. 
b. derivation and simulation 
     the task analysis leads to a model specification and a set of hypotheses about the design issues. we write them in first order predicate logic. these statements about mental processing in the given task domain can usually not be run as simulations  they do not constitute a computational model. to reach a form that represents mental phenomenas and is computable we may have to translate the specification into a set of more basic statements. in. da it is carried out by logical derivation  in particular  we use a natural deductive system of gentzen type  1 . such a system has been used for formal program development in  1 . however  in this oontext we are not interested in automatic deduction  although developments in that area may influence da. 
     an abstract specification consists of a precise definition of a set of goals. a derivation means that all the aspects  which are left unspecified are successively defined by design hypotheses. for instance  a specification does not contain any specified representation  so we can introduce an assumption on mental representation. there are  of course  several such hypotheses  leading to different derivation paths. when one representation has been introduced we have defined a problem space. the next steps in the derivation involve the strategy that will be used in that space. again  there may be several ways to define a strategy  since the specification does not contain any information about i t . 
     at each derivation step we use a logical inference rule  so a derived simulation model is a 
     logical consequence of the specification. this property is rarely satisfied for simulation models. 
     the result of a derivation is a set of statements that forjti a cognitive model. the model includes both a problem space and a strategy to use in that space. when the statements are horn clauses we can run them in a top-down manner by prolog  1   in this way we get our simulations automatically. 
c. empirical evaluations 
     the models are logical consequences of the specification  but it remains to see if they are empirically true. it may not be the case that they constitute problem spaces and/or strategies that people spontaneously use in the particular task 

1 

environment. a model may have properties not shared by the human cognitive system  or properties that may be learned. thus  we have to evaluate them by comparing the results from the simulations by empirical observations. 
     the simulations contain two types of data: reaction times and traces. in addition  we know 
which representation each model is working on so  in fact  we have three different types of data. mental representations are  however  impossible to use  at least with the type of empirical methods used today. 
     when evaluations have been made it is possible to compare the models that can reproduce the empirical observations with those that cannot. these comparisons result in an identification of the problem spaces and/or strategies that people do not use* it is also possible to compare the successful models with each other to see what problem spaces and/or strategies people do use. these models share properties in the form of design hypotheses that are empirically or functionally equivalent. this comparison may also show types of data that could distinguish them further. 
iv two examples 
     two simple task environments will be used for illustration. the first task is a very simple one and called the item-recognition task  1 . the other task is called the three-term series task 
 1 . 
a. the item-recognition task 
     in this task a person is instructed to memorize a l i s t of symbols  for example  letters or digits. the memorized list is called the positive set. the person is then presented with a probe symbol shortly after a ready signal. the task is to answer  yes  if the probe symbol is a member of the positive set  and  no  otherwise. the size of the positive set in terms of number of symbols is usually varied from 1 to 1. this task has been investigated a number of times  1 . 
     even if the task is simple  a person who is trying to solve the task needs to do something mentally. there are at least four intermediate states before an answer is given. following our terminology there are four subgoals to attain before an answer can be reached  1 . 
1. the encoding goal is a process where the external probe is perceived by the person and transformed to an internal symbol in memory. hence  there must be an operation called  encode from an external probe to an internal representation of that probe. 
1. to solve the task the person must in some way compare the probe with the symbols in the positive set. thus  there must exist an operation from the probe and the set to a note that signals a match or a mismatch. this operation is called compare. 
1. the note from the second subgoal has to be examined. examine is an operation from the note to an internal answer. 
1. the person has to translate the internal answer into an external action. this is the dboode 
operation. 
¡¡¡¡¡¡in prepositional logic we can write a simple specification 
solve  ~ encode & compare & examine & dboode  1  
which we read as: to attain solve  the goalstate  resolve encode and compare and examine and decode. this is an insufficient specification for our purpose so we reformulate i t . the goal-state can be attained if the probe is enooded and if the positive set is empty the answer is  no ; otherwise compare the probe with elements in the set  and examine the note. finally transform the answer into action. in predicate logic we write 
	vp' ys ea'  solve p s  	= 	a' 	 -- 	 1  
ep en ea  encode p'  = p 1 
 s = nil & a =  no  & dboode a  = a1  v 
 cempare p s  - n & examine  n  = a & 
dbcode a  = a'    
     this is an abstract model specification because it leaves several aspects unspecified. for instance  what is compare  how is the information  the positive set  represented  etc. . the aspects that are not specified can be found in the design issues. we have included five issues in fig. 1. it 
may be possible to extend the list further  but for our present purpose it is sufficient. 
     different hypotheses can be formulated on each of the design issues. let us start with a representation of the positive set. at least two formats can be suggested  simple-list and d-list  respectively  1 . the positive set is represented as a simple-list if and only if the set is empty or constructed of a proposition element e  and a simple-list  1 . formally  
	vset  simple-list  set   -  set = nil v 	 1  
         ee eset' set = e.sef & element e  1 simple-list set'    
	so far  	we have formulated two hypotheses. 
four issues remain. for instance  the second issue concerns how information is manipulated. given a simple-list format of the positive set membership can be defined either by an operation from the beginning of the l i s t or from the end  corresponding to the notions of stack and queue  respectively. for a stack an element e is a member of a l i s t set if and only if there exists another element x and a l i s t y where element e is equal to element x or is a member of list y. 
yevset e e set  -  exey set = x.y &  1  element x  & simple-list y  &  e - x v e e y    
     the third issue is operational mode. this issue is particulary relevant for the compare goal. 
at 	least 	two different modes are possible. it can 

iso 

operate in either an exhaustive mode  or it can be self-terminating. thus  we can postulate two hypotheses about compare  1 . 
¡¡¡¡¡¡the fourth issue concerns operational order. the four subgoals are computed by four operators and in this simple example  the order is given. however  it should be pointed out that this may not be the case in another environment. this issue also includes timing assumptions which we w i l l return to 
below. 
¡¡¡¡¡¡the f i f t h issue concerns the global control of a program that  for example  can be in a serial 	or 
parallel! ordering. it also includes timing assumptions. we assume an operational rule corresponding to a serial top-down execution as e.g.  in prolog. 
¡¡¡¡¡¡in summary  we have formulated two hypotheses about representation  two about manipulation two about operational mode  one about operational order  and one about the operational rule. the f i r s t six are particulary relevant for the deriva- fig. 1. model-1 in horn clauses. tions and the remaining ones for the simulations. 
¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡the six models are programs that can solve the we focus on psychological notions and can thus item-recognition task. timing assumptions on design for reasons of space leave out formal derivations issues 1 and 1 make it possible to collect reaction 
 1   but we shall outline the general structure. time data and trace data in the simulations  in for each goal in the specification we derive a set which we assume a simple additative function i . e .   of operations by using our design hypotheses. we time is added linearly both within an operation and assume a representation e.g.  the simple-list between operations. the particular estimates used format  and also a modifier  for instance  the in the simulations  the reasons for each timing 
stack hypothesis  then we assume the 	mode 	of 	the 	assumption  	as 	well 	as 	a 	discussion of the em-
operation  for example  a self-terminating mode. p i r i c a l evaluations can be found in  1 . the resulting set is model-1. by substituting one hypothesis by another  we can derive a second set we want to point out that da makes it possible mortel-1. in this way we can derive six simulation to be precise in the empirical evaluation. data models differing in at least one cognitive aspect  that distinguish the models can be understood in but satisfying the model specification. terms of the design hypotheses. furthermore  it is possible to identify types of data that could in fig. 1 we summarize the derivations in a distinguish empirically equivalent models. in fig. deduction tree. 1 we illustrate these points. 

fig. 1. the deduction tree summarizing the fig. 1. e m p i r i c a l discrimination between models by general schema of the derivations  ex = exhaustive  reaction time data  trace data  and representation. ter = self-terminating . representation is included for sake of complete 
¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡discrimination. this type of data is impossible to as can be seen in fig. 1  two of the six collect in empirical research. 
models correspond to two different strategies within the same problem space  whereas the other four are strategies in another space. fig. 1 shows b. the three-term aeries task model-1 that uses a simple-list representation and searches the positive set exhaustively by a stack in our second example of da we w i l l analyze modifier. the three-term series task introduced by piaget 
¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡ 1 . the subject is given two premises that we have arrived at six computable models from describe the relations between three objects. for a specification by task analysis and deduction. instance   adam is shorter than bob  and  bob is 
1 
