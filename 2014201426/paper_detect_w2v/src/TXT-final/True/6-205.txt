 
local search algorithms have been very successful for solving constraint satisfaction problems  csp . however  a major weakness has been that local search is unable to detect unsolvability and is thus not suitable for tightly and overconstrained problems. we present a hybrid solving scheme where we combine a local search algorithm - the breakout algorithm  with a systematic search algorithm - backtracking. the breakout algorithm is used for identifying hard or unsolvable subproblems and the backtracking algorithm proves the solvability of these subproblems. the resulting hybrid algorithm is complete and is tested on randomly generated graph 1-colouring problems. the algorithm performs extremely well for all areas of the phase transition and outperforms the individual methods by several orders of magnitude. 
1 introduction 
the breakout algorithm is an efficient  local search algorithm for solving constraint satisfaction problems  csps . the roots of the algorithm go back to  minton et a/.  1  and to  morris  1 .  minton et al. 1   developed  a local search algorithm  called min-conflict heuristic  which iteratively repairs a given assignment until all conflicts are eliminated. one drawback of the method is that it can get caught in local  non solution minima. morris eliminated this drawback by extending the algorithm with a breakout method  which allows to escape from local  non solution-minima. the strengths of the breakout algorithm are simplicity  robustness  low memory requirement and high efficiency for solving under constrained problems.  minton era/.  1  demonstrated the performance superiority of the min-conflict heuristic by solving large-scale scheduling problems; it performed by orders of magnitude better than traditional backtracking techniques. however  the major weak point of the algorithm is its incompleteness. 
　in this paper we present a hybrid algorithm that is complete where we combine a local search algorithm  the breakout algorithm  with a complete search algorithm  backtracking. the combination of the two algorithms compensates each others weakness to deal with under and tightly constrained problems. we discover that the algorithm combination also leads to synergies. the weight information from the breakout algorithm can locate and order hard or unsolvable subproblems and guide backtracking by a fail-first variable order. in addition  we introduce a weight sum constraint that can be used to identify unsolvable subproblems of a certain size. 
1 the scheme 
when a problem contains an unsolvable subproblem  we observe that the average constraint weight of a constraint belonging to an unsolvable subproblem is higher than the average constraint weight of the problem. in addition  the smaller the unsolvable subproblem  the higher the average constraint weight. this observation is supported by lemma 1: 
　lemma 1; after increasing the weights n times  the sum of the constraint weights u pk of an unsolvable subproblem pk with k constraints must be greater than or equal to n + k. 
　proof: if a subproblem is unsolvable  then in every breakout step  one or more of the subproblem constraints is always violated  thus every time the algorithm is caught in a local non solution minimum  one or more of the corresponding weights must be increased. the lower bound of wpk can be derived by assuming that in every breakout step only one constraint is violated. 
　by applying lemma 1 we can define a weight sum constraint  which is extremely useful for tracing unsolvable subproblems of different sizes. 
　definition 1  weight sum constraint for an unsolvable subproblem p* : according to lemma 1  in an unsolvable subproblem p  consisting of k constraints after n breakout steps  the following condition 

is satisfied  where ci are all the constraints of the constraint set cpk of the subproblem pk. 
　the weight sum constraint is a powerful tool for pruning the search for unsolvable subproblems. for example  if we search for an unsolvable subproblem of size 1  we only have to consider the constraints whose weight sum is greater n + 1. 
　we also observe that the average constraint weight of an unsolvable subproblem of size k is higher than that of an unsolvable subproblem of size k + s  s   1 . this is due to 

1 	poster papers 


figure 1: the weight graph of an unsolvable graph colouring problem after 1 breakout steps  containing two unsolvable subproblems of size 1  cl c1 c1  and 1  c1 c1 c1 c1 cl1 cl 1 . 
the fact that violations cycle over the constraint graph and the less constraints are available  the greater the average constraint weight value. this is demonstrated in figure 1  containing two unsolvable subproblems of size 1 and 1. after n loo breakout steps  the average constraint weight of the subproblem of size 1 is approximately n/1 + 1 =1 and for the subproblem of size 1  it is n/1 + 1 =1. sorting the variables according to increasing constraint weights  orders the subproblem of size 1 before the subproblem of size 1  and thus separates the two. 
　these observations inspired us to use the constraint weight information for localizing potentially unsolvable subproblems and to derive a fail-first variable ordering heuristic for backtracking. in this heuristic  variables are sorted so that the constraints with the highest weights are treated first. 
1 	hybrid solver bobt 
we have implemented this scheme into a hybrid algorithm  bobt   where we combine the breakout algorithm  bo  with backtracking  bt . in this algorithm  we first execute bo and terminate if no solution is available after a bounded number of breakout steps. then we derive a fail-first variable order from the constraint weights and the graph structure and start backtrack search. bt will then either prove that the problem is unsolvable  or return a solution. this method guarantees the completeness of the hybrid algorithm. in the case where we find an unsolvable subproblem  we terminate the algorithm and give a failure explanation by returning the minimal unsolvable subproblem. the minimal unsolvable subproblem is computed from the unsolvable subproblem using the technique described in  faltings  1 . 
1 	experiments and results 
for testing the scheme  we generated a large set of 1 random graph 1-colouring problems according to the method described in  davenport et.al. 1 . the generated problem graphs consisted of 1 variables with a connectivity of 1. the ratio of solvable to unsolvable problems is 1. figure 1 shows the results of the experiments. we show the number of constraint checks for the three algorithms  bo  bt and bobt on a logarithmic scale over the graph connectivity. for unsolvable problems  we bound the maximum number of iterations for the bo to 1   1. 

figure 1: number of constraint checks on a logarithmic scale for solving 1 random generated  1 node graph 1-colouring problems  solved with bo  bt and bobt. 
1 	conclusion 
the main contribution of this paper is the presented hybrid scheme that combines the breakout algorithm with a systematic search method  backtracking  and results in a new algorithm that is complete. in the scheme we use the constraint weight information of the breakout algorithm to identify hard and unsolvable subproblems of increasing sizes and derive in combination with the graph structure a fail-first variable order for a backtracking algorithm. with our results we prove  that the new hybrid search scheme performs extremely well. bobt needs orders of magnitude less constraint checks than bo and bt. in the future we plan to extend the scheme by identifying the ordered set of all unsolvable sub problems in order to perform a spectral analysis that gives us the distribution of unsolvable subproblems for random graph colouring problems. 
