
developing efficient approaches for reasoning under inconsistency is an important issue in many applications. several methods have been proposed to compile  possibly inconsistent  weighted or stratified bases. this paper focuses on the well-known linear orderand possibilistic logic strategies. it provides a way for compiling a stratified belief base in order to be able to process inference from it in polynomial time. the resulting extra compilation cost is very low. in particular  the number of additional variables  that are added to original stratified bases  correspondsexactly to the numberof priority levels existing in the base. moreover  our compilation approach allows an efficient computation of weighted possibilistic conclusions and possibilistic conditioning.
1 introduction
integrating pieces of information coming from different  possibly conflicting sources may lead to reason with inconsistent formulae. in this case  classical inference can not be used to exploit the given belief base  since from an inconsistent base every formula can be inferred  ex falso quodlibet sequitur principle .
¡¡many approaches have been proposed in order to reason under inconsistency without trivialization. while some of them consist in weakening the inference relation such as paraconsistantlogics  others weaken the available beliefs like the well-known coherence based-approaches  rescher and manor  1 .
¡¡coherence-based approaches can be characterized by the two following steps: i  give up some formulas of the inconsistent belief base ¦² in order to restore its consistency; this operation results into one or several consistent subbases of ¦²; and ii  use classical entailment on these consistent subbases to define plausible conclusions from the knowledge base ¦². when priorities attached to pieces of knowledgeare available  the task of coping with inconsistency is simplified  because priorities give information about how to solve conflicts.
¡¡examples of prioritized coherence approaches which select one consistent subbase are the possibilistic logic approach  dubois et al.  1   williams' adjustment approach  williams  1   and linear order approach  nebel  1 . examples of approaches which use several consistent subbases are rescher's notion of acceptable subbases  rescher  1   brewka's preferred sub-theories  brewka  1  and the lexicographicalsystem  benferhat et al.  1; lehmann  1 .
¡¡in this paper  we mainly focus on the linear order and on possibilistic logic policies. given a stratified belief base ¦² =  s1 ... sk   s1 contains the most prioritized formulas  while the stratum sk contains the least prioritized formulas   possibilistic logic only takes into account the first i consistent strata  and stops when inconsistency is met. nebel  nebel  1  has elaborated a less liberal way to select one consistent subbase. when inconsistency occurs at some strata k  we give up the whole stratum  concerned by inconsistency   but we continue to add strata with lower certainty if consistency is preserved.
¡¡from a practical point of view  reasoning under inconsistency is a hard problem  nebel  1 . indeed  deciding the inference from a stratified belief base with respect to the possibilistic policy is a ¦¤p1 o log n  -complete problem while deciding the inference from it with respect to the linear order policy is -complete.
¡¡to address this problem  one can use knowledge compilation. knowledge compilation is a key direction of research in artificial intelligence  selman and h.kautz  1; cadoli and donini  1; darwiche and marquis  1 . it consists in preprocessing off-line the knowledge base in order to make the inference from it easier on-line.
¡¡a key issue  in possibilistic logic  is how to determine the level of uncertainty associated with formulas that can be derived from an inconsistent knowledge base. another important issue is how to compute  possibilistic conditioning . namely  like in possibilistic networks  given some evidence  often providedin the formof a conjunctionof literals  a term   we need to evaluate the impact of this evidence on the certainty degrees of variables or more generally of formulas of knowledge bases.
¡¡in this paper  we propose an efficient way to compile stratified belief bases with respect to the linear order and possibilistic logic policies. in order to support possibilistic conditioning and the computation of weights associated with concluded formulas  we need to keep track and encode the weights associated with formulas. this is obtained by adding new variables  as it has been previously done in some existing works  darwiche and marquis  1; coste-marquis and marquis  1; benferhat and prade  1 .
¡¡the main advantage of our approach is the resulting extra compilation cost which is very low. indeed  the number of additional variables needed for compiling stratified knowledge bases under linear order and possibilistic policy  is only equal to the number of strata in the belief base. in  benferhat and prade  1  a compilation method has been proposed to compile possibilistic bases  and not linear order policy . however  this approach needs to add binary clauses and is based on the idea of forgetting variables which limits the target compilation languages that can be exploited. moreover  it does not support possibilistic conditioning.
¡¡the remainder of the paper is organized as follows. section 1 introduces stratified belief bases and the corresponding inference relations w.r.t the linear order and possibilistic logic policies. we also define how to associate weights to the inferred conclusions and the notion of possibilistic conditioning. after a brief background on knowledge compilation in section 1  we describe our compilation method in the case of linear order policy in section 1. in section 1  we adapt this method to compile possibilistic knowledge bases. we also  show how to handle weighted possibilistic inference relation and possibilistic conditioning. section 1 provides some comparative studies and concludes the paper.
1 stratified belief bases
we consider a finite propositional language denoted by l. |= denotes classical consequence relation. greek letters ¦µ  ¦·  ...represent formulas. and denote the constants true and false respectively.
¡¡a stratified belief base is a set of formulae equipped with a total pre-order. formally:
definition 1 a stratified belief base  sbb for short ¦² is a finite sequence  s1  ...  sk  where si  i = 1 ... k  is a stratum containing propositional formulas having the same priority level i and which are more reliable than formulas of the stratum sj for j   i.
according to coherence-based approaches  the inference from a stratified belief base is considered as a two step process consisting first in generating some preferred consistent subbases of ¦² and then using classical inference from some of them depending on the entailment principle used.
¡¡many policies for the selection of subbases can be considered  especially the possibilistic policy  dubois et al.  1   the linear order policy  nebel  1   the inclusion preference policy  brewka  1  and the lexicographical policy  benferhat et al.  1 . among them  we focus on the possibilistic and the linear order policies.
¡¡the idea of the possibilistic logic policy is to start with formulas having the highest priority level and to propagate as many prioritized formulas as possible while maintaining consistency. we stop at the first priority level where we meet inconsistency and the formulas at this level and below are ignored. formally:
definition 1 let ¦² =  s1 ... sk  be a sbb. the set ¦²po of all the preferred subbases of ¦² w.r.t the possibilistic policy is the singleton  where s is the smallest index s.t.
 is inconsistent. if ¦² is consistent  then ¦²po = ¦².
as to the linear order policy which keeps more information  it does not stop at the first level where it meets inconsistency: when an inconsistency is encountered  the current stratum is dropped  and the process moves to the next stratum and so on. formally:
 definition 1 let ¦² =  s1 ... sk  be a sbb. the set ¦²lo of all the preferred subbases of ¦² w.r.t the linear order policy is the singleton  whereis defined by if  is consistent    otherwise.
example 1 let ¦² =  s1 s1 s1 s1  be such that:
s1 = {a ¡Å b}
s1 = { a c}
s1 = { b d ¡Å e} s1 = {b ¡Å d e}.
  s1¡Ès1 is consistent whereas s1¡Ès1¡Ès1 is not. according to the possibilistic policy  we stop at the first stratum where we meet inconsistency thus ¦²po = s1 ¡È s1 = {a ¡Å b  a c}.
  as for the linear order policy  we delete s1 and continue the treatment with the other strata. s1 ¡È s1 ¡È s1 is consistent so ¦²lo = s1¡Ès1¡Ès1 = {a¡Åb  a c b¡Åd e}.
definition 1 let ¦² =  s1 ... sk  be a sbb and ¦· a formula.
  ¦· is a consequence of ¦² w.r.t the possibilistic policy  denoted by ¦² |=po ¦·  iff ¦²po |= ¦·.
  ¦· is a consequence of ¦² w.r.t the linear order policy  denoted by ¦² |=lo ¦·  iff ¦²lo |= ¦·.
example 1 let us consider again the stratified belief base ¦² given in example 1. for the first inference relation  we have for instance  ¦² |=po b. as to the second one  we have for example ¦² |=lo e.
it is easy to see that |=lo goes beyond |=po  namely for each propositional formula ¦·  if ¦² |=po ¦· then ¦² |=lo ¦·.
¡¡a key issue in possibilistic logic is how to compute the certainty degree associated with inferred formulas:
definition 1 let ¦² =  s1 ... sk  be a stratified belief base and ¦· be a formula. ¦· is a weighted consequence of ¦² to a degree i  denoted by ¦² |=we  ¦· i   iff:
a  s1 ¡È ... ¡È si is consistent;
b  s1 ¡È ... ¡È si |= ¦·;
c  .
¡¡lastly  in possibilistic logic we are also interested in computing possibilistic conditioning. namely 
definition 1 let e be a consistent term. then ¦· is a conclusion of conditioning ¦² by e to a rank i iff ¦²¡Ès1 = {e} |=we  ¦· i   where s1 is a new and high important stratum.
¡¡possibilistic conditioninginferenceis an importantconcept in possibilistic theory. it is  to some extent  the logical counterpart of possibilistic propagation algorithms in possibilistic networks.
¡¡following  nebel  1; lang  1   deciding the possibilistic inference is -complete : it needs at most log1 n calls to sat solver. as for the linear order one  it is more expensive from a computational point of view. indeed  deciding it is a ¦¤p1-complete which means that it can be decided in polynomial time using np oracles  nebel  1 . we refer the reader to  papadimitriou  1  for more details about computational complexity.
1 knowledge compilation
the key motivation of knowledge compilation is that a knowledge base is not modified very often  and the same base is used to answer many queries  see  cadoli and donini  1  for a survey . so  the idea of knowledge compilation is to split query answering into two phases:
  first  the knowledge base is preprocessed to obtain an appropriate data structure. such a phase is called off-line reasoning.
  the second phase which is called on-line reasoning  consists in answering queries using the data structure generated during the first phase.
a target compilation language is a class of formulas which is tractable for clause deduction at least. stated otherwise  it is a language which permits at least achieving clausal deduction in polynomial time.
¡¡initially  the well-known prime implicates language  pi for short  was the target compilation language on which most of the compilation methods focus. recently  darwiche and marquis have considered in  darwiche and marquis  1  other target compilation languages. these languages are special cases of the nnf   normal negation form  language obtained by imposing some properties. a nnf formula is a formula constructed with literals using only the conjunction and disjunction operators. as to the properties  one can list decomposability  determinism  smoothness  decision  order  etc.
¡¡the resulting target compilation languages are dnf  dnnf  d-dnnf  sd-dnnf  fbdd  obdd  obdd  
mods  pi and ip. additionally they are compared in terms of their spacial efficiency via the succinctness criteria and also in terms of the set of logical queries and transformations they support in polynomial time.
¡¡with the exception of pi  dnnf is the most succinct among all target compilation languages. in fact  it is known that pi is not more succinct than dnnf  but it is unknown whetherdnnf is moresuccinct than pi. a sentencein dnnf  for decomposable nnf  is a nnf sentence satisfying the decomposability property: for each conjunction c in the sentence  the conjuncts of c do not share variables  darwiche  1 .
1 compiling stratified belief bases under the linear order policy
a classical way to compile a sbb under the linear order resp. possibilistic logic  policy consists first in generating the preferred consistent subbase with respect to this policy. this step comes down to solve a -complete  resp. complete  problem. then we compile the resulting  classical  base into a target compilation language. we stress here that such an effort can not be exploited for handling the possibilistic logic policy. namely  such approach is not appropriate to compute weighted possibilistic conclusions and possibilistic conditioning.
¡¡our method relies on a propositional encoding of the sbb by adding new variables which the number is equal to the number of its strata. then we proceed to compiling this propositionalencoding into a target compilationlanguageand then generating in polynomial time the base that corresponds to the linear order policy or even to the possibilistic one. the additional variables will be deleted from the final result.
1 propositional encoding of a stratified belief base
let ¦² =  s1 ... sn  be a sbb. the first step in our compilation method consists in encoding the given base into a classical propositional base denoted by k¦². this encoding takes advantage of the one recently proposed in  benferhat and prade  1  for handling an extension of possibilistic logic.
¡¡in fact  for each stratum si  we will introduce a new propositional variable ai. intuitively  ai means something like  the situation is ai- abnormal . hence  for each formula ¦µij from the stratum si will correspond the propositionalformula ¦µij ¡Å ai which can be read as  ¦µij is true or the situation is ai-abnormal .
¡¡in this paper   ¦µij ¡Å ai  will be used as an encoding of the fact that the certainty degree or the priority rank of ¦µij is ai. the use of abnormal predicates have been used in several non-monotonic formalisms  e.g.   mccarthy  1 .
definition 1 let ¦² =  s1 ... sk  be a sbb. the propositional encoding associated with ¦²  denoted by k¦²  is the propositional knowledge base defined by:

¡¡we note that generally  the number of strata in a sbb is very low. hence  the cost of the propositional encoding we propose here is very low too.
example 1 let us consider again the sbb ¦² given in example 1. let a1 a1 a1 and a1 be four propositional variables associated with strata s1 s1 s1 and s1 respectively. using the above definition  the propositional knowledge base associated with ¦² is:
 
1 conditioning
we review in this section  the operation of conditioningwhich will be useful for our approach.
definition 1 the conditioning of a propositional formula ¦· on a consistent term  a conjunction of literals ¦Ã  denoted by cd ¦·  ¦Ã   is the formula obtained from ¦· by substituting every literal of if it is consistent with ¦Ã  by ¡Í otherwise.
example 1 for instance we have:
  the conditioning of the formula ¦· =   a¡Ä b ¡Å b¡Äc  on the term ¦Ã =  a ¡Ä c  cd ¦· ¦Ã   gives  ¡Å
.
  conditioning the same formula on the term a ¡Ä
 b cd ¦· a ¡Ä  b  gives .
following  darwiche and marquis  1   for any target compilation language c considered in  darwiche and marquis  1   c satisfies conditioning. this means that given a formula ¦· from c and any consistent term ¦Ã  we can construct in polytime a formula which belongs to c and is equivalent to cd ¦· ¦Ã .
remark 1 in the following  in cd ¦·  ¦Ã   ¦Ã is always a literal  an atom or a negated atom .
1 compiling linear based knowledge bases
given a stratified belief base ¦²  we define its compilation with respect to a given target compilation language c as shown by the following definition:
definition 1 let ¦² =  s1 ... sk  be a stratified belief base and k¦² be its propositional encoding using definition 1. let c be any target compilation language. the compilation of ¦² w.r.t. c  denoted by  is the compilation of k¦² into c  i.e.  c k¦² .
¡¡we propose now the following algorithm which provides an efficient way to generate ¦²lo using and conditioning:
algorithm 1: computing ¦²lo data:
result: the compilation of ¦²lo
begin
;
for i ¡û 1 to k do
if k |= ai then k ¡û cd k ai ;
¡¡else k ¡û cd k  ai ; end
return k; end
proposition 1 the propositional knowledge base returned by algorithm 1 is equivalent to ¦²lo given by definition 1.
¡¡proposition 1 shows the equivalence of the knowledgebase returned by the algorithm 1 and ¦²lo. let us briefly explain the algorithm. it proceeds stratum per stratum and generates progressively the compiled base w.r.t. the linear order policy. the test in step 1 checks whether the stratum si is inconsistent  with previously accepted beliefs . if it is the case  then all formulas of such stratum are ignored by replacing ai¡Å¦µij by  which is equivalent to a tautology. if it is not the case  the ¦µij are retained since ai¡Å¦µij is replaced by ¡Í¡Å¦µij which is equivalent to ¦µij.
¡¡let us illustrate the above algorithm with the following example:
example 1 let ¦² =  s1 s1 s1  be such that s1 = { a ¡Å b a}
s1 = { b c} and s1 = { b ¡Å  d}.
it is easy to check that:
¦²lo = { a ¡Å b a  b ¡Å  d}.
let a1 a1 and a1 be three propositional variables associated with s1 s1 and s1 respectively.
k¦² =	a¡Åb¡Åa1 a¡Åa1  b¡Åa1 c¡Åa1  b¡Å d¡Åa1 .
a1   ¡Å  b ¡Ä a1 ¡Ä  a ¡Å a1  ¡Ä   d ¡Å a1  .
 
	¡û	 	  1  =	¡Ä 1 ¡Ä a ¡Ä    ¡Å 1 
  at the second iteration  k |= a1 implies that
k ¡û cd k a1  = b ¡Ä a ¡Ä   d ¡Å a1 
  at the third iteration  we have thus k ¡û cd k  a1  = b ¡Ä a ¡Ä  d.
one can easily check that k is equivalent to ¦²lo.
proposition 1 algorithm 1 is achieved in polynomial time in the size of. moreover  the propositional base returned by algorithm 1 belongs to the target compilation language c.
¡¡the corresponding proof is as follows. for all target compilation language c  c satisfies conditioning  darwiche and marquis  1 . this means that cd k ai   or cd k  ai   can be achieved in polynomialtime and k still belongs to c. in addition  since ai is a clause  the deduction test k |= ai can be achieved in polynomial time. 
¡¡since ¦²lo belongs to a target compilation language  the inference from a stratified belief base ¦² interpreted under the linear order policy falls from  down to p when queries are in a cnf form.
¡¡it is important to note that the cost induced here is only the one of the computation of  i.e.  the cost of the compilation of the propositional base k¦² into the language c. the choice of the target compilation language is determined only via its concision. hence  dnnf may be more interesting than the other languages in this case.
1 computing possibilistic conclusions and possibilistic conditioning
1 computing possibilistic inference
compiling possibilistic knowledge bases has been recently achieved in  benferhat and prade  1 . in this section  we propose an alternative approach which offers several advantages with respect to the existing ones  see related works section . contrary to the approach proposed in  benferhat and prade  1   our approach does not add binary clauses. moreover  our approach is flexible since it supports all target compilation languages. lastly  our approach allows the computation of possibilistic conditioning.
¡¡in fact  we suggest deriving another algorithm from algorithm 1 where once we meet an inconsistency for the first time  we suppress the current stratum responsible of the inconsistency but also all the remaining strata.
algorithm 1 : computing ¦²po data:
result: the compilation of ¦²po
begin
; i ¡û 1 ;
whiledo
k ¡û cd k  ai ; i ¡û i + 1; end
while i ¡Ü k do k ¡û cd k ai ; i ¡û i + 1;
end
return k;
end
proposition 1 the propositional knowledge returned by the algorithm 1 is equivalent to ¦²po given by definition 1 and belongs to c. also  algorithm 1 runs in polynomial time.
example 1 let us consider again the sbb ¦² given in example 1. we can easily check that: ¦²po = { a ¡Å b a}. compdnnf¦² =   b¡Äa1 ¡Ä c¡Åa1  ¡Å b¡Äa1 ¡Ä a¡Åa1 ¡Ä
  d ¡Å a1  . until the second iteration  namely until meeting an inconsistency  the process is the same as the linear order policy so k = b¡Äa¡Ä  d¡Åa1 . from here  all the remaining strata are ignored thus k ¡û cd k a1  = b¡Äa. again one can easily check that k is equivalent to ¦²po.
1 compiling weighted consequences and possibilistic conditioning
with a simple adaptation  one can still exploit  in order to decide the weighted possibilistic inference relation in polynomial time as shown by the following algorithm:
algorithm 1 : computing weighted conclusions
data:  a cnf formula ¦·
result: a degree associated with ¦·
begin
;
isconsequence ¡û false; i ¡û 1 ; whileand isconsequence = false do
k ¡û cd k  ai ;
if  k |= ¦·  then isconsequence ¡û true;
else i ¡û i + 1;
end
if isconsequence = true
 then¦· is a consequence of ¦² with a degree i else ¦· is not a consequence of ¦² end
¡¡one can check that ¦² |=we  ¦· i  using definition 1 if and only if ¦· is a consequence of ¦² to a degree i using algorithm
1.
1 =	  1 =	and 1 =	.
¡¡let us check if b is a possibilistic consequence of ¦² and to what degree. we can check that ¦² |=we  b 1 . let a1  a1 and a1 be three propositional variables associated respectively with the three strata in the knowledge base. k¦² = {  a ¡Å b ¡Å a1    a ¡Å a1    c ¡Å a1     b ¡Å a1 }. let i = 1 and c = dnnf.
k = compdnnf¦²	=  a ¡Ä  c ¡Å   c ¡Ä a1   ¡Ä   b ¡Ä a1  ¡Å  b ¡Ä a1    ¡Å   a ¡Ä a1 ¡Ä   b ¡Å  b ¡Ä a1   .
  k ¡û cd k   a1  ¡Ô
.
  at the second iteration 
¡Ô a¡Äb¡Äa1¡Äc. k |= b so isconsequence ¡û true which stops the loop. we deduce then that b is a possibilistic consequence of ¦² to degree 1.
¡¡given a stratified belief base ¦² that have been compiled in. we show how we can exploit such a compilation effort in order to support the corresponding possibilistic conditioning by a given observation e in polynomial time. it is enough to substitute in algorithm 1 the line
 whileand isconsequence = false  by :
¡¡ while and i ¡Ü k and isconsequence = false .
¡¡clearly  this adapted algorithm runs in polynomial time since k belongs to a target compilation language and since  a ¡Å ai is a clause. we can also check that it captures possibilistic conditioning.
1 related works and conclusions
in this paper  we have proposed a method for compiling stratified belief bases with respect to the possibilistic and linear order policies. the cost of the proposed method is very low since the number of new variables that we introduce is equal to the number of the strata which is generally negligible compared to the number of formulas for instance. furthermore  this method is qualified to be flexible since it permits to exploit efficiently all the existing propositional compilers. in addition  re-partitioning the stratified belief base by permuting some strata priority levels can be done efficiently without a re-compilation cost. however  we can not change the ranks of individual formulas unless we attach one variable per formula.
¡¡we have proposed a compilation of possibilistic logic knowledge bases that support weighted conclusions and possibilistic conditioning.
¡¡our method can be favorably compared with other work concerned with compiling stratified belief bases. note first that contrary to existing approaches  our method allows to compute weighted conclusion and possibilistic conditioning from an already compiled stratified belief base without a recompilation cost. let us mention the method proposed by cost-marquis and marquis in  coste-marquis and marquis  1 . like ours  it is flexible since it takes advantage of existing propositional knowledge bases compilation methods. on the other hand  this method is more general in the sense that it handles the two remaining preferred coherent subbases selection policies namely the lexicographic and inclusionpreference policies. however  the inherent cost is really expensive. in fact  they introduce a new propositional variable per formula. it is to note that this method was adapted in  darwiche and marquis  1  to compile weighted knowledge bases in the penalty logic framework.
¡¡this paper also brings several improvements regarding the compilation of possibilistic knowledge bases. in this context  a recent method has been introduced in  benferhat and prade  1 . at the encoding level  the latter uses additionally  k -1  binary clauses. furthermore  it is based essentially on the use of forgetting variables and forgetting literals operations  lang et al.  1  which reduces the number of target compilation languages that can be efficiently exploited. indeed  this method exploits only the target compilation languages dnnf  dnf  pi and mods which means that it is less flexible than the ours. note first that contrary to existing approaches  our method allows to compute weighted conclusion and possibilistic conditioning from an already compiled stratified belief base without a re-compilation cost.
¡¡a future work is to extend these works for handling possibilistic conditioning with uncertain input  dubois and prade  1 . another future work is to exploit results of this paper in order to provide an alternative implementation of existing propagation algorithms  such as junction trees algorithms  for possibilistic networks.
¡¡acknowledgments: this work is supported by the national project anr blanc micrac  mode`les informatiques et cognitifs du raisonnement causal .
