 
　　　we describe a theorem prover for elementary set theory which is based on truth value preserving transformations  and then give an example of the protocol produced by this system when trying to prove the theorem of set theory known as cantor's theorem. 
1. introduction 
　　　this is a report of some of our research carried out mainly during the summer and f a l l of 1  it describes an implementation of a theorem prover based on truth value preserving transformations which has been applied to proving theorems in the domain of elementary set theory. 
　　　in section 1 we describe the basic deductive system  and in section 1 we present some protocols produced by the. theorem prover while trying to prove some theorems of set theory. finally  in 
section 1 we draw a few conclusions. 
1. description of the theorem prover 
　　　our theorem prover consists of an interpreter for mathematical expressions and many items of mathematical knowledge. this interpreter is a f a i r l y complex mechanism  but it may be viewed as applying items of mathematical knowledge of the 
form  to the theorem being proven  in the following manner: the interpreter evaluates the theorem recursively in a call-by-need manner. 
that i s    is a sub-expression being 
evaluated  then'the 	 interpreter tries to apply i t s 
items of knowledge to that sub-expression before evaluating the a r g u m e n t s f o r each sub-
expression that the interpreter evaluates  in turn it tries to match the  expression of an item to that sub-expression. i f   however  during the application process an argument a does not match the corresponding argument of the    expression  then a. is evaluated  and the system then tries to match  result of that evaluation. if ever the interpreter finds a sub-expression  which is an instance of  of some item  then it replaces that expression by the corresponding instance at this point a l l memory of the sub-expression is immediately lost and the interpreter now evaluates . if no items can be applied to a subexpression then the sub-expression is not evaluated again but is simply returned. 
　　　sometimes it w i l l be the case that our interpreter w i l l need to use items which are only valid in certain sub-domains of a given domain. for 

　　the interpreter handles conditional items in the same way in which it handles non-conditional items u n t i l it has found a  which matches the sub-expression being evaluated. at this point on a conditional item  the interpreter tries to match each element in the conjunction  with some expression which it believes to be true. if such matches are found with substitution t h e n i s returned. otherwise the interpreter tries to apply another item as previously described. 
　　　the use of conditional items provides a general method of restricting the free variables of an item to a particular sub-domain. its only disadvantage is that the amount of extra matching it forces the interpreter to perform. in order to minimize the amount of matching on the most common sub-domains we allow those sub-domains to be i n dicated by a particular style of variables. 
　　for example  the automatic theorem prover described in this paper which is based on the set theory system described in quine's  book set theory and i t s logic involves two domains: the larger domain  is the domain of abstracts  where an abstract of any propositional function 	with one free variable x is simply: 	and the smaller domain is the domain of sets where a set is nothing more than an abstract a which exists; that is where  is a theorem of quine's system. 
　　　roman letters are used to indicate the subdomain of sets whereas greek letters are used to represent both sets and other abstracts. 
　　　an informed reader w i l l recall that tables of re-write rules  rather simple items represented in ones mathematical language   and other items were used in many of bledsoe's theorem provers  1  1   and that boyer and moore  1  1 used a symbolic lisp interpreter to order the application of various recursive definitions  re-write rules  and induction rules. more recently aubin  has also used a symbolic interpreter for much the same purpose. our interpreter for mathematical expressions has also been used in other mathematical domains  brown  . 
　　this theorem prover includes both logical and set-theoretic knowledge. we f i r s t describe the items of logical knowledge  and then the items of set theoretic knowledge. 1 logical knowledge 

1 our theorem prover has knowledge about twelve logical symbols which are listed below with their english translations: 
theorem prov!ng-1: brown 
1 


theorem provlng-1: brown 
1 









 1   then switch to formulae  1  and s p l i t   and then come back on each branch and instantiate  1 . 
1. conclusion 
　　　we have described an automatic theorem prover for the domain of elementary set theory  and have 
presented some protocols of i t s behaviour when proving some theorems. we wish to stress that the program is fast and compact. for example we have seen that it took less than 1 seconds to obtain a proof of cantor's theorem. it should be noted that our theorem prover is implemented in compiled uci lisp  bobrow 1  and was executed on a dec1 with a ka1 cpu. 
acknowledgements 
　　　i thank bernard meltzer  robert kowalski and raymond aubin for many enlightening discussions. this research was supported by a scholarship awarded to the author by the university of edinburgh  and is currently supported by a grant brg 1 from the science research council. 
