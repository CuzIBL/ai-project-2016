
in this paper  we present efficient algorithms to discover spatial associations among features extracted from scientific datasets. in contrast to previous work in this area  features are modeled as geometric objects rather than points. we define multiple distance metrics that take into account objects' extent. we have developed algorithms to discover two types of spatial association patterns in scientific data. we present experimental results to demonstrate the efficacy of our approach on real datasets drawn from the bioinformatic domain. we also highlight the importance of the discovered patterns by integrating the underlying domain knowledge.
1	introduction
advances in simulation and data collection techniques in different scientific domains such as bioinformatics  computational fluid dynamics  and computational molecular dynamics  have resulted in huge amounts of data. it is necessary to develop computational techniques to extract features from scientific datasets  for instance  vortices in fluid flow fields and substructures from molecular datasets. it is also very important to subsequently uncover meaningful relationships among extracted features. such relationships can provide valuable information towards understanding or explaining the underlying scientific phenomenon. many algorithms  kramer et al.  1; jiang et al.  1; yang et al.  1  have been proposed to extract features from these scientific datasets. in this paper we focus on the latter problem of finding relationships among features.
　recently  researchers have started to explore the relationships  morimoto  1; munro et al.  1; zhang et al.  1  among features. most of the previous techniques represent features by single points. however  this representation leads to loss of important information. the shape  size  and orientation of a feature in scientific datasets are very important. a simple solution to this problem is to use minimum bounding boxes  mbb . however  mbbs are not well-suited for every domain. for example  ellipsoids are

　　this work is funded by nsf grants itr-ngs aci-1  career iis-1  and software aci-1. all correspondence should be addressed to srinivasan parthasarathy at srini cse.ohio-state.edu.more suitable for capturing the shape of vortices in fluid flow datasets  sadarjoen et al.  1 . alternatively  defect structures in materials may require irregular shape descriptors  mehta et al.  1 . in this work  we propose to use different shape descriptors for features from different domains.
　frequently recurring relationships among features across different datasets can guide the domain expert to find useful knowledge. such relationships are especially useful in bioinformatics. one important issue in bioinformatics is to identify structurally similar proteins. to address this issue  one can first discover non-local patterns that frequently occur in proteins known to be structurally similar  zaki  1; yang et al.  1 . such patterns can then be used to indicate whether a new protein is potentially similar to known proteins. we propose algorithms that discover relationships across multiple maps. this is different from previous work on spatial association mining  koperski and han  1; shekhar and huang  1; morimoto  1; zhang et al.  1   where features are located in the same dataset and represented as points.
　we define spatial object association patterns  soap  to characterize spatial relationships among object types. our algorithm finds two different types of soaps: star and sequence  figure 1 . they capture different aspects of neighborhood relationships among features. for example  in protein contact maps  the formation of star soaps among nonlocal patterns indicates such patterns have a compact spatial relationship. the formation of sequence soaps on the other hand indicates an extended spatial relationship among the involved patterns. furthermore  by extracting soaps from contact maps that are associated with proteins in different protein classes  we can establish the associations between different types of soaps and protein classes. such associations can help us to identify structural characteristics of different protein classes.
　the rest of this document is organized as follows. in section 1  we present the key ideas underpinning our work:  i  the notion of spatial feature representation using extents and shapes   ii  the different object-oriented distance metrics  and  iii  the different association pattern types used to characterize spatial relationships. in section 1  we detail the algorithms and efficient realizations of the key ideas. section 1 describes the efficacy of our approach on datasets drawn from bioinformatics. finally  we present our conclusions and outline directions of ongoing and future research in section 1.
1	background and definitions
1	spatial feature representation
we propose two basic shape representation schemes: parallelepiped  or parallelogram in 1-d  and ellipsoid  or ellipse in 1-d . as demonstrated in section 1  parallelograms are more appropriateto capture the shape and extent of non-local structures in protein contact maps as opposed to mbbs. whereas ellipsoids  or ellipses  are suitable for vortices in fluid flow data as mentionedearlier. note that the first scheme subsumes the mbb representation  and the second scheme subsumes circles. for highly irregular-shaped features such as defect structures in materials  we plan to use sampled boundary points  known as landmarks  rao and suryawanshi  1 .
　as shown in figures 1 a  and 1 b   the shape descriptors of a parallelogram and an ellipse can be described
as	and
  respectively. these descriptors can also be

figure 1: object type:  a parallelogram  b ellipse
1	dataset representation
the dataset	consists of	features located in	maps
 	1   denoted as	=	. the	features are categorized into	types  corresponding to	unique labels	=	.	the categorization of features is governed by the underlying domain. a feature's geometric properties such as shape and size are captured by adopting one of the supported representation schemes. a feature thus can be described as a vector	mapid  location 	  type	  where type	  mapid	indicates the map where occurs  location identifies	's position within the map  and captures the shape of	. note that in the rest of the paper  we refer to a feature correspondingto the above vector as a spatial object. we assume the following order among the	maps:
   . if the maps correspond to snapshots  they are ordered temporally. if they are from different datasets  e.g.  different protein contact maps   the order among them is imposed by arbitrarily assigning each map a unique id. furthermore  the lexicographic order among the feature types is imposed as follows:	.
1	object-oriented distance metrics
the proposed algorithms use the following metrics to measure the distance between two objects and located in the same map.
 point-point distance: this is simply the euclidian distance between object centroids.
 line-line distance: if and are parallelepipeds  or parallelograms   we first identify the line segment between the midpoints of the top and bottom surfaces  or sides  in each object  then compute the shortest distance between these two line segments as the line-line distance between and . we identify the top and bottom surfaces  or sides  by selecting a reference axis in the underlying cartesian coordinate space  specifically  the -coordinate in 1d and -coordinate in 1d. if and are ellipsoids  or ellipses   the line-line distance is be-
tween the two major axes.
boundary-boundarydistance: this is the shortest distance between the boundaries of and . when and are represented as ellipses  the boundary-boundary distance is the shortest pair-wise distance between points sampled on the boundaries or surfaces in 1d . the number of sampled points is user-specified.
　notice that the line-line and boundary-boundary metrics are able to take objects' geometric properties into account. the algorithms also support hausdorff distance  atallah  1 . since this distance is not applicable to the applications described in this article  we do not discuss it here.
　two objects and have a closeto relationship if the distance between them is   where is a user-specified parameter. two objects are neighbors if they have a closeto relationship. we also define the isabove relationship between and . in a coordinate system  is said to have a isabove relationship with   if the upper-left corner of 's minimum bounding box  mbb 1  denoted as      and the upper left corner of 's mbb  denoted as      meets the following condition: in a 1-d map  or
in a 1-d map.
1	spatial object association pattern  soap 
	cj	
	 a 	l	 b 	c l	c m
figure 1: soap types:  a star  b sequence
　a spatial object association pattern  soap  of size   denoted as -soap  characterizes the closeto relationships among object types. in this article  we focus on two types of soaps: star and sequence  figure 1 . as discussed earlier  these two soap types can characterize different spatial relationships among objects. these two soap types can be abstracted as undirected graphs  where a node corresponds to
an object-type   and an edge indicates that and are required to have a closeto relationship.
star soaps  figure 1a  have a center object-type  which is required to have a closeto relationship with all the other object-types in the same soap.
sequence soaps  figure 1b  of size =  :  1     satisfy two constraints  where is the element in :  1  closeto   =true and  1  isabove   =true  where 1 i k-1. sequence
soaps are mainly motivated by our observation on protein contact maps  where non-local structures  i.e  features  tend to line up in a sequence like manner.
these two soap types can also be represented as lists. let be the center of a star -soap   and :  1  -
1 	be the other k-1 object-types in	  where
     . soap can then be described by the list =       where closeto   =true    1  -1  . whereas elements in a sequence soap correspond to a list by definition and cannot be forced into lexicographical order.
for instance  the two sequence soaps and are different.
　a soap is autocorrelated if an object-type occurs multiple times. for example  is an autocorrelated 1soap  where occurs twice. an instance of a soap is the set of objects that meet all the requirements specified by   including those on object-types and closeto  or isabove  relationships.
　we define two measures-support and realization- to characterize the importance of a soap. the support of a soap is the number of maps in the dataset where occurs. assume support p =s  let be the number of 's instances in the map where appears  realization   =min . a pattern is frequent if support    minsupp  and prevalent if realization    minrealization  where minsupp and minrealization are user-specified parameters.
1	algorithms
1	data organization
we organize in the following manner. the objects are first grouped into partitions  where each partition is composed of objects of the same type. within each partition  objects are ordered by their map ids and locations in a map. this data organization is analogous to the format used for association rule mining  zaki et al.  1 . note that each object can be uniquely identified by combining the following information: mapid  label  and locationid in the map. 1 equivalence classes
based on the list-based soap representation  section 1   we organize soaps into equivalence classes. a equivalence class  denoted as -equiclass  is defined as the set of -soaps that  i  are of the same soap type  and  ii  have the same prefix  where the prefix of a -soap is its first k-1 elements. by using equivalence classes  our mining algorithms only need to compute the closeto or isabove relationships betweenobjects once. the equivalenceclasses also help to improve the memory locality of the algorithms  which result in significant performance gains. moreover  equivalence classes also enable the algorithms to smoothly scale to large datasets  zaki et al.  1 .
　the next two sections describe the algorithms that discover star and sequence soaps. for each frequent soap  the algorithms store information about all of its instances. such information allows the algorithms to locate every object involved in an instance.
1	mining star soaps
figure 1 outlines the algorithm that discovers star soaps. the first step generates frequent 1-soaps  line 1 . for each object-type   the proceduregen1soapcounts the numberof maps that contain at least one object of type . if the count minsupp  then	= 	  is a frequent 1-soap. the set of all
frequent 1-soaps is denoted by	.
　the next step  gen1equiclass  discovers 1-soaps and organizes them into 1-equiclasses  line 1 . the pseudo-code of gen1equiclass is described in figure 1. a 1-equiclass is generated for each frequent 1-soap  figure 1:line 1 . the 1-equiclass of 1-soap       denoted by   contains frequent 1-soaps in the form of    . to generate   the procedure considers the following 1-soaps as candidates:      where      figure 1:line 1 . for each candidate 1-soap =     the procedure identifies all the maps where occurs  figure 1:lines 1 . an instance of =    is an object pair   where   =   =    distance   disttype   .
if occurs in minsupp maps  then it is frequent and is added to  figure 1:line 1 .
algorithm mine starsoap 	 minsupp  minrealization  disttype 	 
1. gen1soap  ; // 1-soaps
1. gen1equiclass 	  star  parlist ; //parlist: parameters
1. ;
1. while  1 
1. ; //the set of  k+1 -equiclasses
1. foreach	-equiclass
1. foreach	-soap
1. ; // the prefix of	is
1. foreach	-soap  
1. append 	  lastelement 	   ;
1. contains	and	;
1. foreach
1. if   countstarinstances 	 	1  mapcnt++;
1. if   mapcnt	 
1. if	;
1. if  minrealization	1  markprevfreqsoaps 	 ;
1. if  	  return; //terminate
1. k++; //increase soap size	//while 1 ;figure 1: mining star soaps
　the algorithm next discovers soaps of size 1  figure 1:lines 1  . two -soaps in the same -equiclass are combined to construct a candidate   +1 -soap. for each candidate   +1 -soap derived by appending the last element of to  figure 1: line 1   the algorithm identifies all the maps where occurs  figure 1:lines
1 .	 the	k-soap in a k-equiclass is denoted as
   .  the procedure countstarinstances     figure 1:line 1  computes the instances of in map by combininginstances of and . two instances from and are joined to produce a instance if they have the same first -1 objects and different last object. soaps with the same prefix are organized into one equivalence class as they are being generated  see figure 1:lines 1  1  1  1 . the mining process stops when all the frequent soaps have been discovered  figure 1:line 1 .
　to discover frequent soaps  the algorithm only needs to consider a soap's presence in a map  figure 1:line 1 . hence  some of the discovered frequent soaps may not be prevalent if minrealization 1. in this case  the procedure markprevfreqsoaps is called to identify the soaps that are both prevalent and frequent  figure 1:line 1 . it is necessary to keep soaps that are frequent but not prevalent. we explain this by a simple example. let be the three neighboring objects in a map and minrealization=1. to derive the two instances of soap      and  
algorithm gen1equiclass  	 parlist   //:freq. 1-soaps1.	; //the set of 1-equiclasses
1.foreach  	 
1. //1-equiclass with prefix of	;
1. foreach  	 
1.  	 ; //a candidate
1. contains	and	 	;
1. foreach
1. foreach
1. if    soaptype=sequence 	 	isabove  continue;1. if distance 	  disttype 	  addinstance 
1. if   cntinst 	1  mapcnt++;
1. if   mapcnt	minsupp  	;
1.if  	 	; ;figure 1: 1-equiclass generation
the 1-soap     must be maintained even though its realization is 1     in the map.
correctness: it is straightforward to show that the algorithm discovers all the frequent 1-soaps and 1-soaps. thus to prove the algorithm is correct  we only need to show that every frequent -soap   1  will be considered as a candidate. assume =    is frequent  then the two  k-1 -soaps =     and =     must also be frequent and in the same equivalence class. thus the algorithm will consider as a candidate. it is trivial to show that the procedure countstarinstances identifies all the instances of a candidate soap.
1	mining sequence soaps
the pseudo-code is given in figure 1. unlike mining star soaps  which uses two k-soaps in the same equivalence class to generate a candidate  k+1 -soap   1   the algorithm joins one -soap and one 1-soap.
　the first two steps  lines 1  discover all the frequent 1soaps and 1-soaps. the isabove relationship is checked by the procedure isabove     figure 1:line 1 . for each
 -soap =     the algorithm first locates the 1equiclass   in which every 1-soap is in the form    :closeto    isabove     line 1 . a set of candidate  k+1 -soaps are then generated by combining with each 1-soap in  lines 1 . same as mining star soaps  a candidate  k+1 -soap is frequent if it appears in minsupp maps  lines 1 . the procedure countseqinstances     line 1  identifies instances of in map   where is a candidate soap based on and . two instances and   from
and respectively  are combined to produce an instance of if the last object in is the same as the first object in . for the same reason explained before  the algorithm calls the procedure markprevfreqsoaps to label soaps being bothprevalentand frequentif minrealization 1 line 1 . the algorithm stops when no more soaps can be discovered
 line 1 .
correctness:	for	each	frequent	sequence	k-soap
　=    the following two soaps must also be frequent: =    and
　=   . thus  will be considered as a candidate and be discovered. it is trivial to show that the procedure countseqinstances identifies all the instances of a candidate soap.
algorithm mine sequencesoap 	 minsupp  minrealization  disttype 	 
1. gen1soap  ;
1. gen1equiclass 	  sequence  parlist ;//parlist:parameters
1. ;
1. while  1 
1. ; //initialize the set of	-soaps;
1. foreach soap
1. ;
1. foreach 1-soap
1. append 	  lastelement 	   ;
1. contains both	and	;
1. foreach
1. if   countseqinstances 	1  mapcnt++;
1. if   mapcnt	minsupp  	;
1. if  	  return; //terminate the process;
1. if  minrealization	1  markprevfreqsoaps 	 ;
1. k++; //increase soap size //while 1 
figure 1: mining sequence soaps
　other soap types can also be defined. for instance  we can define clique soaps  which require every pair of objects in the same soap have a closeto relationship. we can also define soaps that involveothertypes of spatial relations such as topological relations.
1	experimental evaluation
in this section  we evaluatethe algorithmson a proteincontact map dataset. we start with a brief description on the dataset generation process and the domain-specific usefulness measurement adopted in this work. we then present results to analyze the impact from different distance metrics and soap types. finally  we present performance characterization of the algorithms.
1	data preprocessing and representation
we first generate contact maps for proteins taken from the protein data bank  berman et al.  1 . for a protein with n amino acids  its contact map is a binary matrix. the position     is set to 1 if the distance between the and residues is less than a threshold and 1 otherwise  vendruscolo and domany  1 . we use 1a  as the threshold as suggested in the literature  zaki  1 . we then extract features in contact maps. a contact map feature is composed of a set of positions  where each position and at least one of its eight neighbors contain a '1'  see figure 1 for examples . we apply a simple region growing approach to extract features in contact maps  yang et al.  1 . we then use an entropy-based clustering algorithm to cluster features into groups  or classes   cheng et al.  1 . features in a class have similar geometric properties such as shape and extent.
　a total of features are extracted from the contact maps. these features are clustered into classes.
the average number of features in each map is about . many of these features correspondto well-knownprotein secondary structures and are also validated by domain experts. we represent each feature by its minimum bounding parallelogram and label the parallelogram by the feature's class id.
1 domain specific usefulness measurement the structure of a protein often provides information about its functionality. thus  one can predict a protein's function based on the function of other structurally similar proteins.
frequent soaps in contact maps characterize proteins' structure. they can be used to generate signatures for different proteins. for instance  the soap  1 1   which is automatically discovered by our algorithms as both star and sequence  can be used to identify the following structurally and functionally similar -proteins: 1t  1u and 1v  ids from pdb .  see figures 1 a  and 1 b  for an illustration of these soaps. 
..........1..
.................1.
................1.
................1....
...............1.....
..............1.....1. .............1.........
............1...........
..........1.............
.........1...............
.........1..................
...1.........................
.....1......................
....1........................ ...1...........................
..1.............................
.1............................... .1.................................
1.................................. .....................................
......................................
.......................................
........................................
.........................................
..........................................
...........................................
............................................
.............1..center.................
................1............................
...............1..............................
..............1................................
.............1..................................
............1...................................
...........1..................................... ...........1.......................................
...................................................
...................................................
...................................................
...............................................1..
.................................................1.
................................................1..
...............................................1... ...............................................1....
.............................................1.....
............................................1...... ............................................1.......
...........................................1...............1....1.........................
......1....................................
.....1......................................
....1........................................
...1..........................................
..1............................................
.1.............................................. .1................................................
1................................................. ....................................................
.....................................................
......................................................
.......................................................
........................................................
.........................................................
..........................................................
.....................1..................................
.......................1....................................
......................1.....................................
.....................1.......................................
....................1......................................... ....................1...........................................
..................1.............................................
.................1...............................................
................1................................................. ................1................................................... .....................................................................
......................................................................
.......................................................................
........................................................................
..............................................................1......
..................................................................1......
.................................................................1........
................................................................1..........
...............................................................1............
..............................................................1..............
.............................................................1................
...........................................................1.................. ...........................................................1..................... ..................................................................................
...................................................................................
....................................................................................
.....................................................................................
......................................................................................
.......................................................................................
........................................................................................
.........................................................................................
..........................................................................................
...........................................................................................
............................................................................................
.............................................................................................
..............................................................................................
...............................................................................................
................................................................................................
.................................................................................................
.................................................................................................
.................................................................................................
.................................................................................................
.................................................................................................
.................................................................................................
.................................................................................................
.................................................................................................
.................................................................................................
.......................................................................................1..
...............................................................................................1 ...............................................................................................1
.............................................................................................1..
............................................................................................1...
...........................................................................................1....
..........................................................................................1.....
.........................................................................................1......
.........................................................................................1.......
.......................................................................................1....... ......................................................................................1.........	 a 	 b 
figure 1: soap  1 1  in proteins 1u  1t &1v as:  a  star and  b  sequence
　however  a soap is unlikely to add any value to the signature  if it is randomly associated with proteins of different classes. to pruneaway such soaps  we use an entropy-based approach. for a given soap  we first identify its associated proteins. we then computethe soap's entropyby integrating the proteins' lineage information from the database of structural classification of proteins  scop 1. a protein's scop lineage is organized into 1 hierarchical levels according to its structure. we look at the first two levels: :   and : . consists of 1 classes such as -protein  protein  and small protein. further divides proteins into sub-classes based on proteins' folding structures. let be the number of proteins whose contact maps contain the soap   and be the number of proteins among these proteins in the class  the entropy of at the first scop level is then computed as:	 shannon  1 . essentially measures how well 's associated proteins distribute among different proteins classes. in our experiments  we observe that soaps with entropy 1 show good quality and can be used to generate signatures. this observation is also validated by domain experts.
　for each soap with entropy 1  we next identify the protein class that dominates its associated proteins. for example  the dominating protein class of the clique soap  1 1  is -protein  as out of its associated proteins are -proteins. as suggested by domain experts  we would like to have many soaps for a certain protein class. a large number of soaps not only cover a wide range of proteins  but can also be used to identify structurally similar proteins from different aspects. this criterion is used to evaluate the discovered soaps. note that even if two soaps have the same dominating protein class  their associated proteins can be very different.
1	impact of distance metrics
due to lack of space  we only report the results produced from the following parameter setting: minsupp= %  minrealization=   and = a. 
　figure 1 shows the impact of the three distance metrics on different soap types. one can observe that the line-line  l-l  distance generates the most number of soaps for both soap types  whereas the point-point  p-p  distance the least. this is expected as the p-p distance does not consider the shape and size of spatial objects  in contrast with the other two. one may argue that more soaps can be identified by increasing the distance threshold in the case of p-p distance. however  it is very difficult to find an appropriate threshold value  as the size of a feature  i.e.  the number of bit- positions  varies drastically  from up to several thousand.

figure 1: distance metric vs #soaps discovered
　the advantage of using l-l and b-b distance metrics becomes more significant when looking at the soaps' dominating protein classes. tables 1 summarize the number of soaps in major protein classes. one can see that  if the p-p distance is used  table 1   only soaps are discovered in small proteins as against soaps in -proteins. on the other hand  soaps based on l-l or b-b distance show a relatively more balanced behavior tables 1 . compared with p-p distance  much more soaps in -proteins or small proteins are discovered. for instance  in the l-l case  table 1   there are and soaps are identified in -proteins and small proteins respectively. also the b-b distance produces the most number     of soaps for -proteins  table 1 .
　the differences exhibited by soaps from different distance metrics show that it is important for our algorithms to support multiple distance metrics  especially metrics which consider objects' extent.
type#  #   # small # peptide star111sequence111total111table 1: #soaps in major protein groups  disttype=p-p
type#  #   # small # peptide star111sequence111total111table 1: #soaps in major protein groups  disttype=l-l
1	impact of soap types
as we move down to the second scop lineage level 
　:   we discover that different types of soaps can actually distinguish different protein folding structures. proteins in the same class  e.g.  -protein  are further classified
type#   #   # small # peptide star11seq.11total11table 1: #soaps in major protein groups  disttype=b-b
into structurally similar sub-groups according to their folding structures. table 1 lists the -protein folds that are distinguished by each soap type  where soaps are generated based on the l-l distance. the folds in bold are those that are associated with only one soap type. whereas other folds in the table are distinguished by two or more soap types. folds in other protein classes show a similar trend. for example  the
 -protein fold  cyclin-like  is only associated with sequence soaps.
　the above results can potentially help domain experts address some important biological issues  for instance  predicting a protein's function based on the soaps contained in its contact map.
starimmunoglobulin-like beta-sandwich
concanavalin a-like lectins/glucanases
trypsin-like serine proteases
cupredoxin-like
acid proteases
cysteine proteinasessequenceimmunoglobulin-like beta-sandwich
concanavalin a-like lectins/glucanases
trypsin-like serine proteases
lipocalins
nucleoplasmin-like/vptable 1: list of -protein folds associated with each soap type  disttype=l-l
typeminsupp=1%minsupp=1%star11sequence11table 1: running time  in seconds   disttype=l-l 
1	running time
table 1 shows the time taken to discover the two types of soaps at two minsupp values. all the experiments were carried out on a pentium ghz computer of mb main memory. to discover soaps in protein contact maps containing objects  the algorithms take about seconds when minsupp= and about seconds when minsupp= . although running time increases as minsupp decreases  the algorithm scales very well. we attribute this good performance to the use of equivalence classes.
1	conclusion and ongoing work
in this paper  we present a general framework to uncover two types of spatial association patterns among features in scientific data. the framework represents features as spatial objects instead of points. it also supports multiple distance metrics. empirical results on protein contact maps show that the framework is both efficient and scalable. furthermore  the discovered soaps are meaningful and can potentially be used to address important biological issues.
　the soap miningproblemin this article shares some similarity with frequent subgraph mining  yan and han  1 . in order to apply the conventional graph mining algorithms for soap mining  the notion of nodes needs to be extended to integrate spatial properties such as location and shape. also  the notion of edge needs to be modified to reflect different spatial relationships such as closeto.
　we are currently extending the framework in several directions. first  we are examining other shape representation schemes such as the landmark-based approach for highly irregularly shaped features. second  we are evaluating other types of object association patterns  for example  clique soaps  where each object has a closeto relationship with every other object in the same soap. third  we are interested in evaluating the algorithms on datasets from other scientific domains  including molecular dynamics and fluid flow dynamics. some of our ongoing work is reported in a technical report  yang et al.  1 . finally  we are investigating potential approaches towards association based spatio-temporal reasoning.
　acknowledgments: we thank d. polshakov and k. marsolo for helping us validate the experimental results  and thank dr. j. wilkins and dr. r. machiraju for valuable comments on the initial ideas.
