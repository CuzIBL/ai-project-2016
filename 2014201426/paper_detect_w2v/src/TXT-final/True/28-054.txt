 
the main purpose of this paper is to illustrate the characteristics of ontology-based authoring tools for computer based training  cbt  systems. it has two major advantages as follows.  a  it provides human-friendly primitives in terms of which users can easily describe their own model of a task descriptiveness  readability .  b  it can simulate the abstract behavior of the model in terms of conceptual level primitives  conceptual level operationality . in this paper  we will discuss the basic issues on the concept of task ontology and then describe the design principle of an ontology-based authoring tool for computer based training  cbt  systems. 
1. introduction 
 recently much attention has been paid to the notion of  ontology  in the expectation that it can serve as the new  strong foundation of knowledge engineering. in the conventional approach to theory of knowledge  to give the operational semantics of knowledge representation has been regarded as of major importance and the analysis of contents of knowledge has been considered to be subordinate to it. to solidify the foundation of knowledge engineering  however  many researchers   especially in the field of knowledge sharing and reuse  has strongly felt necessity of the change of such a way of thinking. the key to the problem is to understand the essential interaction between  form  and  contents  on equal importance. this implies that deep understanding of  content  will give us new insight into design of knowledge representation. the notion of  ontology  can be key to this issue. 
 the ultimate goal of research on ontology is to give the full picture of theory of knowledge. to make improvements in the study of this difficult issue  of course  it is important to accumulate huge amount of  contents   and develop sophisticated ontology representation language as fundamental  form  of knowledge. 
 the same thing applies to the field of intelligent educational systems  ies . building an ies requires a lot of work. at the present situation  however  it is always built from scratch. few functional components are reusable and we cannot compare or assess the existing systems. only existing contribution to the solution of the problem can be found in study of the authoring tools for educational systems. however  it is considered questionable whether substantial benefit for the authors engaged in the complex task may be expected or not  
computer-aided education 
since most of existing authoring tools do not satisfy the requirements for the authoring tools as shown below. 
- to provide human-friendly primitives in terms of which authors can easily describe define their own skeleton of ies. 
- to give appropriate guidance to authors based on the established principle of the educational task by checking the rationality of the skeleton of ies. 
- to show the dynamic behavior of the ies in conceptual level by which the authors can examine its validity. 
 we think the key to the solution of the problem is intelligent support based on  task ontology  which serves as a theory of vocabulary/concepts used as building blocks for knowledgebased systems. the issues here also include how to represent what we know about the fundamental characteristics of an ies as  task ontology  and how to integrate it into intelligent authoring tools. our solution is integration of an ontology construction environment clepe as a part of the authoring tool we have developed. clepe provides us with all the functions needed to satisfy the requirements shown above. 
 the most important role of clepe is to lay the theoretical foundation for ies development process. it maintains continuity from author's conceptual understanding of educational task to the computational semantics of iess. it provides human friendly vocabulary for authors to describe the educational task. for the authoring tools  on the other hand  it specifies the computational semantics of vocabulary and also provides a set of components represented in terms of both conceptual primitives and object-oriented code fragments. 
 the goals of our research on task ontology are to exemplify the benefits of task ontology through the development of an ontology based authoring tool for computer based training  cbt  systems. in this paper  we will discuss the basic issues on the concept of task ontology and then describe the design principle of an ontology-based authoring tool for computer based training  cbt  systems. 
1. what is task ontology 
 now let us go into the detail of task ontology. generally ontology is composed of two parts  that is  taxonomy and axioms. taxonomy is a hierarchical system of concepts and axioms are rules  principles  or constraints among the concepts. from the viewpoint of the ontology use  axioms specify the competence of an ontology. in other words  a class of the questions to which the answers can be derived from the axiom specify the competence of the ontology. 
 following the analogy to natural language processing  we can easily understand the role of task ontology as a system of semantic features to represent the meaning of the problem solving description. the advantages of the integration of task ontology is as follows: 
a. task ontology provides human-friendly primitives in terms of which users can easily describe their own task  descriptiveness  readability . 
b. the system can simulate the problem solving processes at the conceptual level and show users the execution process in terms of conceptual level primitives  conceptual level operationality . 
c. the system makes the task description runnable by translating it into symbol level code  symbol level operationality . 
 for the moment  it may be useful to look more closely at the functional feature of task ontology. here  let us introduce three models m a   m b   and m c   which embody the functions a  b  and c listed above  respectively. according to the analogy of natural language again  m a  corresponds to sentences of natural language  m b  is an internal model of intended meaning represented by the sentences  and m c  has a capability to simulate the dynamic  concrete story implied by the sentences. 
 from now on  m a   m b  and m c  are called  lexical level model    conceptual level model   and  symbol level model   respectively. lexical level model mainly deals with the syntactic aspect of the problem solving description  and conceptual level model captures conceptual level meaning of the description. symbol level model corresponds to runnable program and specifies the computational semantics of the problem solving. ontology at the top layer is called lexical level ontology in terms of which m a  is represented. ontology at the middle layer is called conceptual level ontology which specifies computational semantics of m b . lexical level ontology specifies the language in terms of which users externalize their own knowledge of the target task  while conceptual level ontology is an ontology which represents the contents of knowledge in their minds. 
 figure 1 shows a taxonomy of terms included in lexical level ontology. because of the space limitation  here we just show a part of the cbt ontology which we are building now  see  mizoguchi et al.  1  for a more detailed account of ies ontology . all the terms of lexical level ontology are organized into word classes  such as  generic verb  generic noun  etc.: 
- generic nouns n  representing objects reflecting their roles appearing in the problem solving process  
- generic verbs v  representing unit activities appearing in the problem solving process  
- generic adjectives modifying the objects. 
 task ontology for computer-based training  for example  looks as follows: 
nouns:  problem    scenario    answer    example    accident    operation    hint   etc. 
verbs:  provide    show    ask    simulate    give   etc. 
adjectives:  unsolved    easy    correct    counter  etc. 
 verbs are defined as a set of procedures representing its operational meaning. so  they collectively serve as a set of reusable components for building iess. 
 in the conceptual level ontology  the concepts to representour perception of problem solving are organized into generic concepts  such as  activity  object  status  and so on. on top of that  a collection of symbol level clos code fragments are organized in symbol level ontology. there are some prerequisite relations among these three levels. intuitively generic verb  generic noun  and generic adjective in lexical level ontology correspond to activity  object  and status in the conceptual level one  respectively. for each activity  at least one code fragment is prepared in the symbol level. 
 thus  task ontology provides primitives in terms of which authors can describe their own educational task model. using their own model  authors can easily put a piece of teaching material into the appropriate educational context  since it provides authors with abstract educational roles of various ob-
jects which could be easily instantiated to domain-specific objects. in the above examples   problems    examples   and  hints  represent such objects with educational roles. 
 one of the most important characteristics of task ontology is that meanings of verbs are also defined at the symbol level  that is  at least one executable code is associated with each verb to enable semiautomatic generation of runnable educational application. 
 thus  roles of ies task ontology can be summarized as follows: 
 1  to provide vocabulary/concepts in terms of which one can compare and assess existing iess. 
 1  to formalize training tasks. 
 1  to specify the tutoring/training context which contributes to making it easy to put domain knowledge into a right context  since it provides us with abstract roles of various objects which could be instantiated to domainspecific objects. 
 1  to provide reusable components for ies design and development. 
 1  to enable translation of the knowledge-level description of the skeleton of ies into symbol-level executable code. 
1. an authoring tool based on cbt task ontology. 
 authors' work of ies systems can be roughly sketched out in the following three stages. 
 1. design the skeleton of the cbt process of interest. 
 1. compile training material or training aids  for example  notes  pictures  sounds  simulator  etc. into the skeleton. 
 1. adjust the control of cbt process in detail. 
 of course  the distinction among the stages is not necessarily important for authors. rather strict distinction sometimes becomes disadvantage of authoring tools. the reason for making the distinction is to focus our discussion to the author's 
work which enjoy the ontology support. 
 the existing authoring tools in the literature  inui et al  1    major  1    murray and woolf  1  seems to cover all the three stages. especially  some authoring tools for itss  for example   van marcke and vedelaar  1   provide sophisticated set of descriptive primitives and corresponding computational components of ies for authors. when looking carefully at the support functions provided by them  however  
	ikeda  seta  & mizoguchi 	1 

figure 1. lexical level cbt task ontology  partial  we found that little effort has been done to give active guidance based on the explicit first principle on education. the reason of this could be lack of explicit  ontology  as design rationale of iess. to embody active support of authoring process  the authoring tool should know the rationale in the form of meta description of the design. 
 based on the above consideration  we have tried to build ies ontology. although the step we have made is not large  we believe that its implications to the future research in iess area is not small. cbt ontology we discuss here uses the ies ontology as its core. we organize a set of concepts specific to training system under the ies ontology. in the following sections  we try to show the significance of the cbt ontology. first  we present brief overview of smarttrainer which have been developed as a prototype of intelligent cbt system  then we will show the image of the authoring tool based on the cbt ontology built based on the analysis of smarttrainer's task. 
1 	smarttrainer 
 smarttrainer is a cbt system in the area of electric power systems. the target task of smarttrainer is mainly to recover the accidents of substations in the electric power systems. when an accident happens  the electric power transmission will be interrupted  and the operators should recover it as quickly as possible. the operators should find the spot of the accident  continue to supply the electric power to some special places such as hospital  police station at once by borrowing some power from the other substations  find the causes of the accident and recover it within the limited time. 
 the goal of the training conducted by smarttrainer is to improve capability of not only skill-based or rule-based reasoning but also knowledge-based reasoning. the set of the scenarios incorporated into smarttrainer has been designed by the experienced trainers. in order to let the trainee master the principled knowledge  smarttrainer let them do practice first and then teach them the first principle behind it adaptively to 
computer-aided education 
their mistakes  and finally  check their learning result by practice again. this is a form of  learning by doing.  
 smarttrainer is basically composed of three models  that is  training process model  teaching materials model  learner model  which are part of our cbt task ontology. 
1 an ontology-based authoring tool 
 among three stages of authors' work listed above  we have concentrated on the first one  that is  design process of the skeleton of cbt process. hereinafter  we sometimes call the skeleton of the cbt as the model of a cbt system to emphasize the importance of existence the ontology which governs it. therefore  the term model implies two ideas  one is that it has a set of general axioms to follow and the other is  in an ordinary sense  it abstracts the skeleton from the real cbt systems. 
 basic teaching material prepared by the authors of cbt are the following 
a  knowledge needed for target operation  
b  training scenario  and c  simulator of a target system. 
 the authors compile these three items into the skeleton of a cbt system at the first stage. the typical work of the compilation is to put a fragment of knowledge a  into the target operation context b  appropriate for training. the most desired thing for authors is the established guideline on the compilation task  for example  the fundamental structure of the scenario  the typical style of questions  appropriate timing and method of learner modeling  and so on. as we discussed in the previous section  we have defined a set of terms to express the training task of the electric power system operation in the lexical level task ontology and the meaning of the terms in conceptual level task ontology. the author's task is to build a model of the intended training task in terms of the lexical level task ontology as a result of the compilation. such terms and concepts are provided by an ontology maintenance system  which maintains the consistency between the task ontology 


figure 1 interface of an ontology based authoring tool 

and the model built based on the ontology. as a part of our ontology engineering project  an ontology maintenance environment  called clepe  has been developed. further details of clepe will be described later. 
 on the top of clepe  we have been developing an authoring tool for cbt systems. figure 1 shows the image of the authoring tool interface. the interface is designed in full consideration of the intuitively clear way to express the skeleton of training tasks. in other words  the structure of the interface windows reflects the training task ontology and acts as the guideline on the author's task. 
 figure 1 shows the snapshot of interface of the authoring tools we have developed. when the authoring tool is activated  the author is asked to create a training scenario which is a series of question and answer sessions. the window  1  is for editing a question/answer session. before the window appears  the author was asked to select one from several question/answer types defined by cbt task ontology. in this case  the author selected  ordering question.  and then he/she inputs the components of the question/answer  that is   question    items to be ordered  and  correct answer.  after inputting the question  the author edits a set of learner's errors   called  symptom  in the window  1 . the author inputs the possible symptoms as one of  reversing    missing    superfluity   which are defined as subcategories of the symptom for ordering question in cbt task ontology. in addition  the author is asked to clarify the cause of the symptom by selecting one node from the domain knowledge shown in the window  1 . since smarttrainer adopts overlay learner model  the cause is formalized as missing of the selected node. although we assume that domain knowledge is prepared in advance  the author can modify it at anytime when needed. once the author complete inputting a symptom  the symptom/treatment window  1  will appear. in this window he/she specifies the treatment for the symptom. the possible treatments are listed in the window  1  based on tutoring strategy concept defined in cbt task ontology. the treatment selected by the author is  let him/her do operation . however  the selection violates the constraint on symptom/treatment rationality. it says that direct explanation is better than indirect treatment when the question asked to the student is not very difficult. the window  1  shows the rationality and recommends the  explain the principle  treatment instead. 
 from figure 1 one might get impression that the description of the question is too detail for the first stage of the author's work. of course  the boundary between the first two stages of author's work is gray. our intention of this is  however  that the textual information acts as just labels of the entities of questions. without such labels  authors cannot structure the skeleton in their mind and also may lack the consistency of their design. note that the textual information in the question frame is meaningless for ontology management environment at this stage. 
1 layers of ontology 
 as we have discussed in section 1  task ontology is divided into three complementary partitions. from now on  we will focus on the two of them  that is  lexical level and conceptual level  which are the most important for authoring support function at the first stage of author's work. in figure 1  the two partitions are arranged in depth. the two partitions in depth are allotted different functions to each. lexical level ontology specifies syntactical aspects and conceptual level specifies semantics of vocabulary. 
 in addition to that  task ontology has three layers arranged in vertical direction in order of the degree of task-domain dependency. that is  core task ontology with the least dependency and arranged at the lowest layer  task-type specific ontology at middle  and task-domain ontology at the highest. 
 core task ontology lays foundation for upper layers by defining inherent concept needed for modeling all the types of problem solving. task-type specific ontology is a system/ theory of vocabulary/concepts for describing task models of a certain type of task  and task-domain ontology is one for de-
	ikeda  seta  & mizoguchi 	1 

scribing domain models from the tasktype viewpoint. we have defined the cbt computer based training  ontology which organizes a set of concepts specific to training system as a taskspecific ontology. based on the topmost layer ontology  authors build the model of task of interest. in our case  the model means a skeleton of an cbt system smarttrainer . 
 the relationship between ontology and model is not absolute one but relative one. for example  when building a task-specific ontology  it can be regarded as a model  while the core task ontology as an ontology for the world. that is to say  an object can be considered as an ontology  meanwhile it can also be considered as a model based on the relatively lower layer. in principle  a descriptive primitive of upper layer has richer meaning in the sense of human understanding than that of lower layer. needless to say  the rigid computational semantics defined for the primitives at the lowest layer. 
 thus  we could say an intended model of cbt systems is described based on the upper  front part of task ontology and the computational semantics of it is finally defined at the lowest  rear part. 
 to characterize each layer from the above viewpoint  we can ideologically divide the authors concerned with the ontology into four types. 
 1  the authors who develop training systems  end authors . 
 1  the authors who build task-domain ontology  task-domain ontology authors . 
 1  the authors who build task-specific ontology  task-specific ontology authors  
 1  the authors who build core task ontology-based on coretask ontology  core task ontology authors . in our case  
 1  end author: the instructor of electric power system operation  instructor  
 1  task-domain ontology author: staff of the software development division of electric power company. 
 1  task-specific ontology author: ies/cbt ontology researcher. 
 1  core task ontology author: general task ontology researcher. 
 note that each type of author needs appropriate guidelines corresponding to their jobs. intuitively  the authors working in the upper layer are more constrained than those in the lower layer. thus  the authoring tools is desired to have the capability to switch the ontology layer to provide the appropriate guidelines for each type of the authors. the capability is realized by integration of clepe into the authoring tool. in the next section  we will look into the role of clepe in detail. 
computer-aided education 
1. task ontology management: clepe 
 clepe supports both ontology authors who construct task ontology and end authors who develop application  cbt systems in our case. figure 1 shows the overview of clepe and the ontology-based authoring tool we have developed. ontology authors are arranged above side and end authors right side. 
 thin planes stand for languages. the language for task specific ontology author is called task ontology representation language tol   whose semantics is specified by core task ontology and the base language tol/o. tol/1 provides description primitives for ontology authors and defines semantics of upper-layer languages. therefore all the semantics of task ontology described with tol is specified ultimately at the level of tol/1. an ontology author of core task ontology specifies the lexical entities and conceptual ones using tol/1 primitives  e.g. define-core-lexical  define-core-concept  etc. by reading the specification of core task ontology into clepe  a set of conceptual primitives at the tol level is introduced. task type specific ontology author specifies the concepts appearing in the target task type with tol. 
the main work of an end author are as follows: 
 1  to describe an intended model of a training task in terms of cbt task ontology  edit cbt system description   
 1  to make sure that his/her description is correctly interpreted by the system  trace the conceptual level execution process   
 1  to modify the description if necessary  debug the description . 
 in preparation for interpretation of the cbt task description written by an end author  clepe reads task ontology description represented with tol. the task ontology description is translated into internal form by tol-parser and stored into ontology base. ontology manager manages the ontology base and deals with the requests related to the ontology made by other modules  for example  inquiries for class information  

creation of a class instance and so on. once an end author completes editing his/her own description  clepe initiates the interpretation process. the model compiler compiles an internal form of the description and generates the conceptual model. finally  he/she can run the conceptual model with executor. 
1 ontology management 
 as we have discussed in 1  the relatively lower ontology provides the guideline on the construction of the relatively upper ontology. for example  the core task ontology act as a specification for the task-specific ontology. definition of each concepts appearing in task-specific ontology layer should follow the regulation enforced by core task ontology.  verb word class  definition in the core task ontology  meta-layer   for example  specifies that all the verbs defined in task-specific ontology layer  base-layer  have  input-slot    output-slot  and  effect slot  in its definition. furthermore  a verb definition of  give  in task specific ontology layer specifies that the input slot of each instance of  give  appearing in the model layer for end authors should be filled with limited noun instances such as   hint    problem   and so on. 
 ontology management function of clepe is to support the authors work in a certain layer based on the next lower ontology. when it detects the inconsistency between model and ontology  it gives the authors some warning messages along with suggestions to encourage them to revise their models based on the ontology. the major merit of this function is that the authors could be guided kindly in their model building and the models is guaranteed to be consistent with the established ontology. 
1 conceptual level execution 
 once clepe generates a conceptual model  an end author can inquire some questions about the dynamic behavior of the model  for example   how student model updated   or  then what kind of tutoring action will be taken place.  clepe can produce answers based on the conceptual model  for example   the student model will be updated based on the buggy knowledge attached to the learner's answer to the question   or  system will show visual simulation to make learner notice the crucial breakdown.  since the answer to the inquiry is described at conceptual level  he/she could easily understand it. by keeping the continuity from the symbol level program code to conceptual level model  clepe can explain the symbol level execution result with conceptual level annotation. 
 current implementation of conceptual level execution is limited to static analysis of the task model. the plan for the future development includes dynamic analysis of the task model. the basic idea is to introduce the concept of pseudo-learner. training task ontology includes a set of terms and concepts to specify the status of the learner using vocabulary shown in figure 1. by specifying certain property of learner  for example   a learner who prefers deductive way of thinking to inductive one  or  a learner who is good at skill-based operation   the author can examines whether the training model behave well for the learner or not by monitoring the results of conceptual level execution. the executor of the training model will assume the learner's responses to the questions along the training scenario  and activate the tutoring strategies based on the leaner model. showing the dynamic behavior of the model to the author  the executor can check the validity of the training model based on the task ontology. when some defects or shortcoming of the model are identified  the executor informs the authors and suggest a desirable way to make alternation to the model. 
1. conclusion 
 we have investigated the inherent characteristic of cbt through the development of smarttrainer and tried to build cbt task ontology. the main purpose of this paper is to illustrate the characteristics of ontology-based authoring tools. it provides two major advantages as follows.  a  it provides human-friendly primitives in terms of which users can easily describe their own model of a task  descriptiveness  readability .  b  it can simulate the abstract behavior of the model in terms of conceptual level primitives  conceptual level operationality . 
 we have implemented a prototype of ontology-based authoring tool and systematically accumulating cbt ontology and training scenarios. the most important  interesting part of cbt ontology is explicit description of the first principle of training such as  learning by doing.  since the accumulation of the ontology has been in steady progress  it is planned to pursue a close investigation of this issue in the near future. 
