 
recently lakemeyer and levesque proposed the logic aoc  which amalgamates both the situation calculus and levesque s logic of only knowing. while very expressive the practical relevance of the formalism is unclear because it heavily relies on second-order logic. in this paper we demonstrate that the picture is not as bleak as it may seem. in particular  we show that for large classes of aol knowledge bases and queries  including epistemic ones  query evaluation requires first-order reasoning only. we also provide a simple semantic definition of progressing a knowledge base. for a particular class of knowledge bases  adapted from earlier results by lin and reiter  we show that progression is first-order representable and easy to compute. 
1 	introduction 
a knowledge-based agent in a dynamic environment needs powerful facilities to query its knowledge base. in particular  it does not suffice to only ask what the world is like after any number of actions have occurred. as has been argued both in the case of static knowledge bases  1; 1  and in the context of reasoning about action  1; 1; 1   the query language should be able to explicitly refer to the agent's knowledge1 in order to make distinctions such as knowing that versus knowing who  which otherwise cannot be made. this is best illustrated by an example. 
　suppose we have a simple  stationary mail sorting robot whose task it is to pick up only the red letters in front of it. initially the robot has no letters and it is told that there are two letters c and d and that at least one of them is red.  let us also assume that  unbeknownst to the robot  both letters are red.  then the robot should be able to answer the following queries: 
1. is there a red letter  answer: yes. 
1. do you know which one is red  answer: no. 
1. assume the robot now senses the colour of c. 
do you now know of a particular letter that it is red  
     1  while we freely use the term knowledge  we really mean belief  but the difference is not important for the purposes of this paper. 
1 	automated reasoning 
answer: yes.  note that even if c were not red  the answer would still be yes.  
1. the robot now picks up c. 
are you holding all the red letters  answer: unknown. 
 for all the robot knows  d could be red or not.  
1. are you holding all the known red letters  answer: yes.  c is the only letter known to be red.  
   recently  lakemeyer and levesque  have proposed the logic  which amalgamates the situation calculus  and levesque's logic of only-knowing  and which has the expressiveness to handle queries such as the above. however  employs heavy second-order machinery to achieve this and it is not clear how to use the logic in practice other than for specification purposes. in this paper we show that the picture is not as bleak as it may seem. in particular  we show that in the evaluation of queries like those in the example requires first-order reasoning only. 
   another important issue is knowledge base progression. in principle  the only information necessary to answer queries after a number of actions have occurred is the initial knowledge base together with the action sequence and the outcome of sensing actions. however  for long sequences of actions this seems hopelessly unrealistic from a computational point of view. it seems much more sensible to update the knowledge base appropriately after each action has occurred. lin and reiter  studied progression in the context of the situation calculus without sensing and epistemic notions. they show that progression can only be represented using secondorder logic in general  but they identify interesting classes of theories where it remains first-order. here we show how their approach can be applied to the more expressive language of  both at the semantic and the representational level. in particular  we adapt lin and reiter's definition of context-free action theories and show that progression remains first-order and efficiently computable in corresponding  knowledge bases. 
　the rest of the paper is organized as follows. in section 1  we introduce the logic  in section 1  we define how to query and progress an agent's knowledge at an abstract level. in section 1  we consider concrete knowledge bases and discuss the issue of first-order query evaluation and progression there. the paper ends with some concluding remarks.1 
1 some preliminary ideas about first-order query processing in 

1 the logic 
here we only give a brief introduction to the semantics of 
 the reader is referred to  1 for a more detailed account including a characterization using foundational axioms  which we omit here.  we also assume a basic familiarity with the situation calculus.  
   the language of  is a dialect of the second-order predicate calculus with equality and has all the primitives of the situation calculus  and some more. there are three sorts of individuals: ordinary objects  actions  and situations. for each sort there is an infinite supply of variables. the situation variable now is reserved for special use. as in the situation calculus  we have the following primitives: the constant  denotes the situation which corresponds to the real world before any actions have taken place; if  is an action and s a situation  then  denotes the situation resulting from doing  in s; the special predicate has the intended meaning that  is executable in .s; fluents like are relations  which have ordinary objects as arguments plus a situation argument in their final position  and are used to express how the world evolves from situation to situation; there are only finitely many fluents and action function symbols. 
   we also require two new special predicates   and  normally not present in the situation calculus  which 
are used to model sensing and knowledge and will be discussed in more detail in section 1. 
　for simplicity  we also make the following restrictions: there are no constants or functions of the situation sort other than so and do; action functions do not take situations as arguments; there are no function symbols of type object; and all predicates other than those mentioned above are fluents. 
　the language also includes a set of so-called standard names  the intended use of a standard name is to uniquely identify an object across all possible interpretations  which is useful when dealing with concepts like knowing that versus knowing who. indeed  the semantics assumes a fixed domain of objects and these are isomorphic with the standard names.  see  1; 1  for more details.  
　　atomic formulas are obtained in the usual way from the above primitives and formulas are built using the connectives  other connectives like 	and 	will be used as abbreviations in the usual way. 	we will use the following conventions: 	be a sequence of actions and s a situation. then 	stands for denotes the empty se-
quence and we sometimes write . finally  we use true as an abbreviation for and false for true. 
1 	semantics 
 rather than appealing to the standard semantics of fol   comes equipped with a nonstandard semantics derived 
from possible-world semantics 1   in particular  the semantics of the logic 1   which was developed to specify static 
 first appeared in . progression was not handled at all in that paper. 
knowledge bases. as in possible-world semantics  the basic semantic building-block is a world. however  unlike the static case  a world in  determines what is true initially and after any number of actions have occurred. a situation is then interpreted simply as a world w indexed by a sequence of actions  in particular  every world  starts  with an initial situation where no actions have occurred yet. besides the real world  whose initial situation serves as the denotation of 
  a model in  also features a set of worlds e. as in modal logics of knowledge like  e should be understood as the set of worlds which the agent considers epistemically possible. in section 1  we will see how  using the special predicate   the worlds in e can be accessed and how this gives us a way to define knowledge in dynamic domains. 
　　to simplify the semantics  we assume that besides the standard names for objects there are also standard names for actions. these are terms of the form  where a is an action function and each  is a standard name of an object. a primitive formula is an atom of the form where each  is a standard name  and a relational fluent  or of the form poss a  or sf a   where a is a standard name for an action. the set of all primitive formulas is 
　let act* be the set of all sequences of standard names for actions including the empty sequence c. 
definition 1: a world  is a function: 

let denote the set of all worlds. 
definition 1: a situation is a pair and . an initial situation is one where 
definition 1: 	an action model m is a pair and 
w is taken to specify the actual world  and e specifies the epistemic state as those worlds an agent has not yet ruled out as being the actual one. as we will see below  a situation term s will be interpreted semantically as a situation consisting of a world and a sequence of actions that have happened so far. a fluent p s  will be considered true if 
　　a variable map  is a function that maps object  action  and situation variables into standard names for objects and actions  and into situations  respectively. in addition   assigns relations of the appropriate type1 to relational variables. for a given denotes the variable map which is like  except that is mapped into o. 
the meaning of terms 
then 
action term; 
   1 the reader who prefers classical logic is referred to 1 . where we provide a second-order axiomatization which is sound and complete with respect to the nonstandard semantics. 
   1  since the type will always be obvious from the context  we leave this information implicit. 
	lakemeyer and levesque 	1 


to a situation that does not use the given world w is to use a situation variable. 
the meaning of formulas 
if 
neither 
sentence  we omit the variable map and write  for example  

	finally  a formula a is valid in 	if for all action mod-
els  and variable maps 
1 	knowledge and action 
to determine what is known initially  that is  in situation so   we only need to consider  more precisely  a sentence is known initially just in case it holds in all situations s for which  holds. to find out what holds in successor situations  we use the predicates sf and poss. first note that the logic itself imposes no constraints on either sf or poss; it is up to the user in an application to write appropriate axioms. for poss  these are the precondition axioms  which specify necessary and sufficient conditions under which an action is executable. so we might have  for example  
poss- pickup 
as a way of saying that the robot is able to pick up only letters. for sf  the user must write sensed fluent axioms  one for each action type  as discussed in . the idea is that.sf a  s  gives the condition sensed by action a in situation s. so we might have  for example  
1f sensered 
1 	automated reasoning 
as a way of saying that the sensered action in situation s tells the robot whether or not  is red. in case the action a has no sensing component  as in simple physical actions  like dropping an object   we require as a convention that the axiom states that sf a  s  is identically true. actions without a sensing component are referred to as ordinary actions. 
　with these terms  we can now define k s'  s  as an abbreviation for a formula that characterizes when a situation s' is accessible from an arbitrary situation 

where the ellipsis stands for the conjunction of 

　if s is an initial situation  then the situations which are krelated to s are precisely those initial situations s' for which kq s'  holds. the general picture  after some actions have occurred  is best reflected by the following theorem  which shows that our definition yields the successor state axiom for a predicate k proposed in  as a solution to the frame problem for knowledge.1 
theorem 1: . the following sentence is valid: 
which is a'-related to s and from which s' can be reached by doing  furthermore s and s  must agree on the values of sf and poss for action a. 
　given a'  knowledge can then be defined in a way similar to possible-world semantics  1; 1; 1  as truth in all accessible situations. knowing is then denoted using the following macro  where a may contain the special situation variable now.  refer to  with all occurrences of now 
replaced by s. then 
knows 
where s' is a new variable occurring nowhere else in 
　note that itself may contain knows with the understanding that macro expansion works from the innermost occurrence of knows to the outside. for example  

and should be read as  the agent knows in s1 that it does not know that x is red.  
1  we could have defined k as a predicate in the language as is usually done  but we have chosen not to in order to keep the formal apparatus as small as possible. 
1 here we follow the notation from . 

1 queries and progression 
in this section  we will consider two related ways of answering queries in  for our purposes  a query is any formula with a single free situation variable  now. an example is  knows red x  now   now   which asks whether it is now the case that there is a red object which is not known yet. the now in this query is intended to refer to a particular situation  either an initial situation or one that is the result of a sequence of actions. with this view  it is not possible to answer queries wrt an action model m = alone  since we also need to specify what sequence of actions to use. 
　in our first specification of query answering  we are given an initial m  and a sequence of actions ..  and we answer according to what would be known in the situation resulting from doing  in other words  we answer a query with yes if according to m  is known in do 
note the difference between knows as above  and knows . in the former  we are asking if  would be known after doing in the latter  we are asking if it is known initially that would be true after doing  it is not hard to show that the former is implied by the latter  but not vice-versa. 
   while this is a simple form of query answering  note that it needs to use the world  in m to decide what is known. if consists of a single sensing action like sensered c   then after doing the sensing  the agent should know whether c is red or not. but which one is known is determined by  which specifies  via sf  how sensing will turn out. 
　　there is  however  a different view where we only need the epistemic state e to answer a query. the idea is that while an agent performs her actions  her epistemic state gets updated to reflect the changes caused by those actions. in particular  a sensing action leads to the removal of worlds which contradict the sensed value. we can define succ to be the epistemic state that results from executing starting with initial state e with sensing as specified by 
 restricting ourselves to queries that do not mention is necessary since ask does not carry with it the real world  which is needed as the denotation of  in fact  mentioning  within a query does not make much sense in the first place. 
consider  for example.  asking whether a is true is completely independent of any epistemic state e and depends only on the initial state of the real world. 
　in order to compare our two notions of ask  it is necessary to restrict the class of queries even further. in fact  we restrict ourselves to queries whose only situation term is now. in particular  this has the effect that we cannot ask about other past or future situations. 
definition 1: the interaction language atomic formulas whose only situation term is now are formulas. if a and -formulas  then where  is an object variable  and knows formulas. nothing else is an formula. from now on  unless stated otherwise  a query is an -formula where now is the only free variable. 
an example query in the formula 
on the other hand  is not in 
   the formulas of are interpreted by first converting them into formulas using the definition of knows introduced in the previous section. 
　we then have the following relationship between asko and ask: 
theorem 1: for any 

　the theorem can be strengthened considerably as it holds for many queries outside of  as well. in a nutshell  the only restriction needed is that a query does not refer to what is known before the actions have occurred. roughly  this is because succ knows more about the past than e be-
cause it has fewer worlds than e. however  the formulation of a broader class of queries for which the theorem holds turns out to be somewhat awkward. on the other hand  is simple and intuitive. moreover  it is for which we develop a first-order query evaluation method in section 1. 
1 progression 
for ask to make sense  we needed to assume that e reflected the epistemic changes that occurred during the execution of a  as reflected in succ. in a different context  lin and reiter  lr   have called the process of updating a knowledge base of an acting agent progression and they studied it in detail in the framework of the standard situation calculus. 
　one major difference between progression and the succ operation above is that in the former we attempt to forget the history of actions  and treat the resulting knowledge base as if it were an initial one.1 indeed  for many applications  it is sufficient to maintain information about a single  current  situation. our definition of progression below adapts the ideas of lr to the more expressive language of  in fact  our 
1 see 1  for a formalization of forgetting. 
	lakemeyer and levesque 	1 

formulation is somewhat simpler  which is possible because the semantics assumes a fixed set of worlds. it is also more general because lr do not deal with sensing. 
　　we can define a progression operator prog  analogous to succ that produces a new epistemic state  but which loses information about the past. given worlds and agrees with after if for all and p  
	note that 	and 	may differ ar-
bitrarily in all situations before the last action of has been performed. then we define prog by the following: 
at 
　the following theorem states that progression is faithful in that it agrees with the original epistemic state for queries in xc about what is true after a sequence of actions has oc-
curred. 
theorem 1: let   where is progression at 
note that in the case of the empty sequence of actions  follows immediately. 
1 	aol knowledge bases 
so far  we have only talked about the agent's knowledge in the abstract  namely as a set of worlds  which include all possible ways they could evolve in the future. let us now turn to representing the agent's knowledge symbolically and see how this connects with the semantic view taken so far. 
   in the situation calculus an application domain is typically characterized by the following types of axioms: action precondition axioms  successor state axioms  and axioms describing the current  often initial  situation. successor state axioms were proposed by reiter as a solution to the frame problem . when there are sensing actions  there is also a fourth type called sensed fluent axioms specifying what the outcome of sensing is. 
　-knowledge bases  as we envisage them  consist of formulas of these types and they have a special syntactic form. we call a formula objective if it does not mention the predicate 
     a formula is called simple in  is first-order and objective  is the only situation argument occurring in any of the predicates  and any variable in occurs only free in is simple in   whereas 
   in the following  let a be an action and  a fluent. let  denote a formula whose free variables are among the 
variables in 
　　let s denote that situation s' is a successor of  s which is defined as: 
1 	automated reasoning 

with the ellipsis standing for the conjunction of 




conditions  sensed fuent axioms  and successor state axioms  respectively  and  is the set of current state axioms for a fixed a knowledge base at t is called an initial knowledge base. 
　we define the epistemic state corresponding to a kb as the set of all worlds satisfying the formulas in kb  where now is interpreted by initial situations. formally  

　defining the epistemic state this way reflects the intuition that the kb is all the agent knows  hence she cannot rule out any world compatible with the sentences in kb.  see  for how to formalize  all l know  in   
1 	an example kb 
here we consider the mail-sorting robot example in more detail. there are letters of different colours laid out in front of the robot and its task is to pick up only the red letters. to keep matters simple  there are only two actions  pickup   which is possible if  is a letter  and sensered   which tells the robot whether the sensed object is red and which is always possible. there are three fluents  letter  red  and holdrls. letter and red never change and holdrls  is true if the robot is holding the red letter x in situation s. 
　we can formalize this by defining appropriate precondition axioms  sensed fluent axioms and successor state axioms  all parameterized by now. 
let all now  stand for the set of these formulas: 
　　in the situation calculus without epistemic concepts  $ ranges over all situations  namely those reachable from  here we need to relativize quantification wrt now because there are initial situations other than 


initially  the robot knows that there are at least two letters 
c and d and that one of them is red. hence let 

red{d  so   that is  the actions indeed behave as the robot expects them to and there are at least two red letters c and d. 
finally  let  be our action model. 
1 	first-order query evaluation 
by lifting results from levesque 1; 1j  we show that answering epistemic queries for kb's like the above requires only first-order reasoning. 
　　for any formula simple in   let be with all occurrences of removed. for example  
	. let 	denote the set of sentences 
expressing the unique names assumption for standard names and actions  and let  denote classical first-order logical implication. 
　　the following definition of res shows how to compute in fol the known instances of and representing it as a first-order equality expression. 
 definition 1: let kb  and  an objective query and let be all the standard names occurring in kb and and let be a name not occurring in kb or then res is defined as: 
1. if . has no free variables  then 
true  if false  otherwise. 

res /ted  reduces to false because there are no known red things. the next definition applies res to all occurrences of knows within a query using a recursive descent denoted by the idea is that any occurrence of knows in a query is replaced by an equality expression describing the known instances of 

definition 1: 
   given a kb as defined above and an arbitrary query  is the objective formula simple in now defined by 

　in essence  the theorem says that answering an epistemic query can be achieved by computing a finite number of firstorder implications. restricting ourselves to queries in  is essential in this case. 
　to illustrate what this theorem says consider the example kb and the query 
-iknows  then ask 
because of the following: res to false because there are no known instances of red objects. hence is equivalent to -false and  furthermore  
　being able to reduce query evaluation in to firstorder reasoning under certain restrictions is somewhat analogous to a result by lin and reiter 1  for the standard  nonepistemic  situation calculus. they show that  even though their foundational axioms for the situation calculus include a second- order axiom to characterize the set of all situations  this axiom is not needed when doing temporal projection  that is  when inferring whether a formula  simple in do follows from the domain theory together with the foundational axioms. there are also other examples such as  which show that theories which are inherently second-order nevertheless have interesting special cases where lirst-order reasoning alone suffices. 
1 	context-free knowledge bases 
lin and reiter showed that in their framework  progression is not always first-order definable. we conjecture that the same is true in  but just as in lr's case there are interesting classes of knowledge bases which are not only first-order representablc but where progression is also easily computable. lr discuss in particular the classes they call relatively-complete and context-free action theories. here we adapt and extend context-free action theories for  and obtain very similar results.  the same is true for relatively complete theories  but we omit them for space reasons.  
　　a fluent f is called situation independent if its successor state axiom has the form 
  that is  f never changes. oth-
erwise f is called situation dependent. a formula is called situation independent if it contains only situation independent fluents. 
definition 1:  lin and reiter  a kb is context-free if 

be true and  those which cause it to be false. 
	lakemeyer and levesque 	1 

kbeur consists of situation independent formulas and 
	formulas of the 	form 	or 
	where 	is a situation in-
dependent formula with free variables in x and now. 
for every action precondition axiom 
is situation independent. 
for every sensed fluent axiom is situation independent. 
the conditions on the sensed fluent and action precondition axioms are missing in lrs definition because they do not deal with sensing and they do not consider the case where an agent successfully performs an action even though she does not know that it is possible. in a sense  finding out that an action is possible by doing it can be thought of as a special form of sensing. note also that sf and poss are treated completely symmetricly in our semantic definition of progression. 
definition 1: let kb be a context-free knowledge base at an action  and let 
               let the action precondition and sensed fluent axioms for a be 

1. let a be an ordinary action. then: 

　note the different treatment depending on whether a is a sensing action or not. in the former case  the old contents of  is simply copied to the new knowledge base with the new situation  replacing the old  if a is an ordinary action  we need to treat the situation dependent fluents in  in a special way in order to reflect the changes that result from doing a. in the case of a sensing action we also need to record the values of  and  depending on the 
1 	automated reasoning 
 truth value of poss a  and sf a  if a is an ordinary action  this needs to be done only for because we 
assume that  is equivalent to true for ordinary actions. 
　it is not hard to see that the property of being context-free is preserved by our syntactic form of progression. 
lemma 1: 	let kb      and a be as in definition 1. 
then  is context-free. 
　in their paper   lr describe some very simple  and reasonable  consistency requirements for context-free knowledge bases.1 we will not repeat those conditions here and simply refer to them as lr-consistency. we are now ready to show that syntactic progression of context-free kb's conforms with our semantic definition. 
theorem 1: let kbo be an initial knowledge base  wo a world and  let kb   and a be as in defi-
nition 1 such that r kbj is a progression at 
	if kb is lr-consistent  then 	is a progression of 
　　note that  by definition  is itself a progression at wrt hence  the theorem tells us that  starting in an initial context-free knowledge base  doing an action a will lead to a progression which itself is represented by a contextfree knowledge base  and this process iterates. 
   1b illustrate how progression works  let us consider the initial kb and the corresponding action model m =  from section 1. first  it is easy to verify that it 
conforms to the definition of a context-free kb. 
1. let us consider progressing kb by a - sensered c  resulting in kba with corresponding . let  stand for do sensered c   now . 
since a is a sensing action  case  1  of def. 1   we obtain simply by replacing every occurrence of now in by .sj and adding red c  s   to it  because we assume 
that m sf sensered c   . then  is a progression at a. 
	let 	knows  red 
then ask yes because now there is a known red letter  namely c. 
1. let us now progress by a' = pickup c  resulting in with corresponding let stand for 
　starting with the empty set we construct by adding the following sentences:1 
is omitted be-
cause it is clearly subsumed by red 
　given the successor state axiom for f - holdrls  we obtain 
one such requirement is that simultaneously. the example kb is lr-consistent. 
   1  for simplicity  we omit adding sentences that turn out to be valid or subsumed by others. 

hence we add 

finally  the last case of definition 1 applies and we add 

given the unique names assumption for standard names of objects and actions  is true just in case that is  the agent is holding precisely c in s-1. 
　given this progressed knowledge base it is then not hard to show that the robot does not know in s1 whether it is holding all the red letters. formally  let 
then 
letter and others where there are red letters other than c after doing a - a!. 
1 	conclusions 
using the second-order logic we specified a query facility for knowledge bases in dynamic worlds. despite the expressiveness of the logic  we showed that query evaluation often requires only first-order reasoning. moreover  by adapting and extending results by lin and reiter  we gave a semantic definition of progression and showed that it is first-order representable in the case of context-free knowledge bases. 
　future work includes finding more powerful classes of knowledge bases with first-order progressions and applying the results to the action programming language golog . we defined progression in a way that is very close to the original definition by lin and reiter. the exact relationship between the two still needs to be determined. also  our earlier definition of succ can be thought of as a progression operator in its own right. it is more powerful in that nothing about the past is forgotten. it is an interesting open problem to determine syntactic variants of this notion of progression. 
