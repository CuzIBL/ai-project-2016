 
users of interactive systems need a single cooperative interface for all of the services in their environment. the interface must behave in a consistent manner in understanding natural user requests and in providing explanation and help as required. the consul system is designed to provide such an interface. its natural interaction capability is achieved by mapping between detailed descriptions of users and systems in order to translate requests and provide explanations an interactive system of this kind would be infeasible if the onus of constructing the knowledge base and inference techniques were placed on the individual service builders in consul  service-dependent information is incorporated into the knowledge base by semi-automatic acquisition  resulting in incorporation of the new knowledge into the system's built-in abstract framework. this incorporation allows the service-dependent data to appropriately influence consul's knowledge based mapping processes. the current consul prototype demonstates natural request handling and explanation for a mail service 
1. introduction 
　an interactive system should provide a natural interface for its users and behave in a consistent manner across a wide range of functional services. the consul system attempts to achieve these goals by providing natural language input and explanation facilities for users of interactive services such as electronic mail  automated appointment calendar  and document preparation. 
   users' needs change constantly  and vary greatly from one environment to another. the needs of any particular group of users must be satisfied by service builders familiar with those needs. however  the task of building an interactive service that provides a natural interface and remains consistent with other services is too great to be left as a burden for individual service builders. what is needed is a system that has already solved the basic problems of providing a natural  consistent interface  and into which new services  or changes to existing services  can be incorporated with relative ease. 
   in consul  a single knowledge base framework consistently represents not only the objects and actions of users and interactive systems  but also the inferential capability to map between the user and system worlds. this mapping mechanism is the foundation of consuls natural language understanding and 
　1 this research is supported by me defense advanced research projects agency under contract no dahc1 c1. arpa order no 1 views and conclusions contained in this paper are the author s and should not be interpreted as representing the official opinion or policy of darpa. the u s government or any person or agency connected with them. 
explanation techniques. the knowledge base is adapted to the domain of any particular service  e.g.  electronic mail  by a system directed acquisition process which results in the association of built-in concepts with their appropriate counterparts in the service domain. 
1. understanding user requests 
　if the user is allowed to express himself in a  natural  manner  most of his requests will not correspond directly to input forms for the appropriate service actions. some aspect of the interactive system must therefore have the capability of mapping user requests into appropriate system action invocations. for example  consider the following user request to a mail service1 
forward this message to jones. 
this request is simple enough from the user s point of view. however  from consuls point of view  its interpretation depends on the circumstances of the request and the details of the particular service involved. in most mail services  if this message referred to a previously received message and if jones were a valid user address  interpretation of the request would mean mapping the parse of the request into an invocation of the message forwarding function with the appropriate parameters. however  if this message referred to a just composed message  many  though not all  mail services would consider the request to be in error and would require restatement. as we will see below  the situation in a sigma-like mail service is somewhat more complex:  messages  are never actually forwarded  or sent in any form ; only citations of messages are sent between users-the actual message remains in a central database. therefore  the users request can never be taken literally  but must be redescribed in system terms. even then the request is either ambiguous  the user must either  forward for action  or  forward for information   or in error  if this message is a  draft message  . 
　thus  understanding user requests requires mapping the input forms into the conceptual framework of the particular service that must fulfill the request. this process requires some understanding of both the context of the users request and the characteristics of the service. 
1. explaining the system 
　when the user requires information about some aspect of the system  he must be able to ask about it in a natural manner and receive a response that he can understand. consul must therefore be ready to recognize and respond to  help requests   e.g.. what has to be in a message  what does forwarding do  . 
this problem of  explanation  has several parts: 
   all examples in this paper are baaed on a sigma-like service   sigma 1   currently being implemented under consul 
1 

consul must first decide whether a user utterance is a request for help or a request for action this is by no means straightforward  and ultimately relies on an understanding of the user's intent in making the request  as in could you send this message to smith  . 
even when a request for help is recognized as such  the system must understand the user s statement of what he wants to know in terms of those aspects of the system that are relevant to answering his question. for example  although why was message 1 deleted  is a perfectly reasonable user help request  it makes no sense at all in the world of the sigma-like service. messages do not have numbers associated with them nor are they ever deleted. consul must map the user's question into a question that is appropriate from the mail system viewpoint-a question that takes into account that messages are accessed only through their citations  that citations have numbers by virtue of being in a user's mailbox  and that the relevant deletion process is the one that removes particular citations from a particular user's mailbox. 
next  the system must discover an appropriate answer to the reformulated question  requiring information gathering  as in what has to be in a message    cause/effect reasoning  as in 
why was message 1 deleted    or other special processing depending on the type of question asked. 
the answer  which is in system terms  must then be mapped back into terms that the user can understand in order to create a true response to the original question. 
　an additional explanation problem occurs because the system cannot always do what the user wants. thus  although the intent of a user request may be that the system should perform some action  the response of the system may have to be an explanation of why it cannot meet this intent. for example  as discussed above  if this message in the request forward this message to jones refers to a just composed message  the system cannot do what the user is asking. instead  it must respond with an explanation of why it cannot forward the message to jones  and suggest a restatement or alternative course of action to the user 
1. acquiring domain-dependent knowledge 
　all of the above discussion assumes a carefully built  detailed model of what a particular interactive service can and cannot do this raises the question of how such a model is built into the consul system. builders of interactive services know about the characteristics of their service--not the higher level models and mapping knowledge required by consul for cooperative behavior. therefore. consul must be responsible for the task of incorporating the details of a particular service into its knowledge base. it must figure out  or at least lead the service builder to tell it  how the operations and objects of a service can be seen in terms of its higher level model. 
　it is very likely that the relationship between specific service characteristics and consul's built-in knowledge base will go beyond straightforward instantiation: some service characteristics will not instantiate anything in the knowledge base. for example. consul's model of transfer operations assumes that the argument of the operation  say. a message  is what ends up being delivered to the specified destination. however  sigma send operations send citations of the message  not the message itself. sigma send operations thus do not directly instantiate consul's model of transfer operations. but consul will not be able to bring to bear its knowledge about transferring  e.g.. how explanations and user requests about sending map into transfer operations  unless it can relate the sigma send operations to its built-in model of transferring. consul's acquisition task therefore comprises not only instantiation of its knowledge base  but also the construction of more complex mappings between what it knows and what the service builder tells it. 
1. approach 
　the main feature of consul is its knowledge base of descriptions of users services  and interactive systemsrelationships between descriptions--mappings--are represented in terms of inference rules  which are  applied  to transform one kind of description into another. the handling of a natural language request from the user is treated as the reformulation  via the application of inference rules  of a description in the conceptual framework of the user as a description in the conceptual framework of the service model. this service description represents an actual function that can be executed in order to satisfy the user s request. similarly  help and explanation are treated as reformulation of service descriptions in terms of user descriptions. 
　consistent treatment of services is achieved by pre-building a service-independent model of interactive systems into consul  and then acquiring knowledge about particular services in terms of that model. acquisition is accomplished via a stylized dialogue with the service builder  directed by consul based on the service builder's implementation of his service in terms of a programming formalism specially designed for this task. 
1. the knowledge base 
the basic structure of the consul system is shown in figure 1. 
the knowledge base  implemented in klone  brachman 1 . is central to all system activities-parsing  explanation  mapping  execution  and acquisition. it contains several kinds of information: 
knowledge of users a representation of the relation between 
english language constructs  e.g.   send request   and the actions and objects of the user s world that  he thinks  have some correspondence in the system world  e.g.   send    message  . for example  since users have the concept of sending information from one user to another  the knowledge base includes user send and user message  see figure 1 . this representation is purely in terms of the user's 

1 

figure 1 part of the knowledge base 
conceptual structure-correspondence with the actions and objects of the system  if any. has yet to be established. 
systems knowledge: a service-independent representation of basic operations  e.g.. deletion  transfer  display  and the data structures these operations work on  files  tables  display lists  etc. . for example  any service will probably have a transfer operation of some sort. consul's systems knowledge provides an organizational framework for structuring knowledge about transfer operations  based on the concept transfer operation  see figure 1 . the particular transfer operations of any service can be described in terms of that framework  and thus be  understood  by consul  i.e.. seen in relation to the other things that consul knows about . 
service knowledge: a particularization of systems knowledge to the actual operations and data structures of some interactive service that is implemented in consul. for example  the model for a mail service would describe a variety of specific  actually executable  transfer operations for sending messages. sigma has several specific transfer operations for sending different kinds of message citations  see figure 1 . 
dynamic environment: a model of system and user activities as events in time. i.e.. invocations of the actions defined in the user and service models. this event model serves as a 
dynamic environment for expressing the behavior of the user and the system. thus send request event and transfer operation invocation in figure 1 represent potential occurrences during an interactive session with consul. 
　figure 1 shows some of the instantiation relationships among consul's descriptions of users  systems  and services. consul must be able to map between these various descriptions in the knowledge base in order to understand requests  generate explanations  and acquire service specific information. 
1. mapping 
　in consul  this mapping capability is provided by a rule-based inference process that can reformulate a given knowledge structure in terms of another. the rules are simple transformation relationships between modelled structures. when a given description instantiates a structure that is a rule condition  the mapper can reformulate the description in terms of the structure that is the rule conclusion. this process can be used to redescribe a wide class of incoming descriptions  user requests  explanation forms  and service specific information  in terms of consul s built-in knowledge base1. 
this section shows the systems mapping activity on the request 
forward this message to jones. the first operation on any incoming request is parsing1. i.e.  classifying the request in the knowledge base in terms of consul's model of what the user can express the new description is then redescribed by the mapping process until it can be seen to instantiate either a description of some service action  in which case the action is executed  thus satisfying the request  or some explanation form  in which case an explanation response is generated . 
the parse of forward this message to jones is shown in figure 
1. the parser has described the request as a request for the user action whose objective is sending. the fact that the user has specified  forwarding  is represented by the intrinsic description of this send action as resend the result of the action is that both the object  the message  and the intrinsic description arrive at jones. 
　when this parse is classified in the knowledge base  it does not instantiate any service action or explanation form  i.e.. the system does not contain a description of the  forward this message to jones  action . however  as shown in figure 1  the description does instantiate a  very general  knowledge structure that 

figure 1: the parse of  forward this message to jones  
　　the underlying philosphy and implementation of the rule application and redescription process is described in detail in  mark 1  


in this example  only one rule applies to a part of the current 
figure 1: application of rule 1 description. this rule  shown in figure 1  attempts to resolve a deictic reference to an object  e.g.. this message  by looking for a similar object that appeared in a recent event. here it is possible 
 depending on the actual resolution of the reference  that the rule 
   h consul had had a mora specific rule that applied to requests for send actions  will redescribe this message as a transmitted message  thus that ruta condition would have been inatantieted. and that rule would have been making the current description a subconcept of the actually applied instead 
1 

figure 1: resolving the deictic reference 
executable sigma forward message to user shown in figure 1. however  let us assume in this case that when rule 1 is applied  this message turns out to be a draft  as shown in figure 
1 sigma forward message to user is therefore not applicable  and target-based reasoning fails. the mapper must now conclude that the user's request cannot be satisfied  and that an explanation response must be generated instead. it creates an explanation form noting the structure it gave up on  figure 1  and passes the problem on to the explainer. 

1. explanation 
　now that consul has given up on the attempt to perform the user's request for action  it must explain why it cannot perform the action  and perhaps suggest alternatives to the user. this requires finding the service operation or operations that the user was probably trying to get consul to perform  and explaining to the user in his own terms why his request did not cause their invocation. then  since consul assumes that the user is really making an effort to do something with the system  it tries to make reasonable suggestions for corrections of the original request that win make something happen. of course  the system must make sure that the user knows what that something is and how it differs from what he was requesting. 
　the first step of the explainer is therefore to find a reasonable set of targets--service operations that the user could have been trying for. this target finding operation is somewhat different than the one used during target-based mapping. for mapping purposes the only reasonable targets are those that could be reached by rule application. the explainer assumes that no such targets are available  otherwise the user s request would have been satisfied . instead  its notion of potential targets are those service operation invocations that have the same objective as the user action specified in the original request. 
as shown in figure 1  the user's request specified the user 
send action  that is  the action whose objective is the abstract concept of sending. the explainer assumes that any service operations  or their invocations  that share this objective are close enough to the intent of the users request to be considered potential targets. all service operations constructed as instances of the systems transfer operation will inherit the objective sending. figure 1 shows that four sigma operation invocations. 
forward. forward for action  release  and send for 
review  are instances of the systems transfer operation invocation1. 
　this initial list of targets is then examined to determine the differences between the targets and the user's requested action. a comparison of the desired operation invocation in figure 1 with each of the potential targets  of which only a few relevant parts are shown in figure 1-the full model of sigma's forwarding function is shown in figure 1  reveals that forward has the right intrinsic description but sends the wrong type of message. release and send for review send the right type of message but have the wrong intrinsic description  release has none at all   forward for action both sends the wrong type of message and has the wrong intrinsic description. since forward for action happens to differ in all of the ways that any of these targets differ  it is pruned from the target list. this leaves only forward  release. 
and send for review to be used in the explanation. 
　but the explainer also notes that one of these targets. forward. differs from the requested invocation in a different way than the other two. the specification this message in the user's request has been resolved into a description of a unique object in the world  i.e.. a particular message. the explainer will not suggest alternatives to the user's specification of unique objects  i.e.. it will not respond to the users request with  you can t forward this message  would you like to forward a different one   . therefore. 

given that the user really wants to send this message  only two of the possible targets  release and send for review  remain as viable alternatives. 
　all of the necessary information for the response has now been gathered. comparison of the explanation form in figure 1 with the target descriptions shows why the user's requested action could not be applied to his requested object: the indicated intrinsic description and message type are incompatible with respect to the target set  while the recipient jones  for example  is compatible  and will not enter into the explanation . the response will therefore explain that the user's request for forwarding could not be satisfied because this operation cannot be applied to messages of type  draft . and  since there are other targets in the set that can still satisfy the user's objective for his requested object  the response will go on to suggest release and send for review as alternatives. 
　once the content of the response has been decided upon  the explainer must determine whether there are user concepts that correspond to the system concepts   forwarding    sending for review    releasing   and  draft message   in the planned explanation. those concepts that have a direct correspondence in the user model can simply be incorporated into the response  e.g.. since the user's concept of message and the systems concept of message share a common abstraction  consul can make the direct translation . those concepts that do not have a direct correspondence in the user world must be redescribed in terms of component parts that do have user equivalents  eg.  forwarding for action is like forwarding except that the user receives the note 'requires action' with the message  . we have already seen that the user has the concepts of  forwarding  and  message ; for simplicity  we will assume that the other system concepts to be explained also have user equivalents the explanation response resulting from the user request forward this message to jones is therefore 
draft messages cannot be forwarded. you can release this message or send it for review. 
1. acquisition 
　it should be clear from the preceding sectiors that consuls ability to understand user requests and produce appropriate responses relies crucially on proper classification of service dependent information in the knowledge base. this means that the service dependent information must be seen in relation to the built-in concept structures representing consul's systems knowledge. consul's reliance on precise service modelling would be in feasible if model construction were the responsibility of the individual service builder: the service builder is unaware of consul's needs  and certainly unaware of the intricacies of its kl one model. instead  consul provides an acquisition mechanism to incorporate the builders description of his service into the consul framework. 
　the service builder is never directly aware of the system knowledge base. he implements his service as a set of process script programs  lingard 1 . the process script language is a programming formalism specially designed for the acquisition task. programs consist of a procedure and some descriptive information about that procedure. the descriptive part is in the form of a small number of categories of information required by consul in order to see how the function represented by the process script fits into its knowledge base. the process scripts  along with descriptions of service-dependent data structures  are acquired into the knowledge base to form the service model. the process script to implement the sigma forward operation is shown in figure 1 
	processscript 	slgmaforward; 
input u:sigmauser; output none; dataacceased sigmaopenmessage. sigmaloggedonuser: preconditions slgmaopenmessagesv = true: sideeffects none: undo none: error conditions enomailboxforrecipient  call slgmasend u.  forwarded  : 
figure 1: a process script 
　the process script is expressed completely in terms of the service builder s programming environment. it must therefore be translated into the appropriate klone representation  called sigma forward process script in figure 1. this description must then be incorporated into the knowledge base as i mentioned earlier  the service builder s program  embodied in sigma send  transfers citations of messages rather than the messages themselves this means that the operation defined by this process script is not an instance of the systems transfer operation  which would expect sigma open message to actually be sent however. consul will not be able to understand sigma forward unless it can see it in relation to transfer operation 
　the required relationship is constructed by the acquirer in accordance with a stylized dialogue with the service builder  see  wilczynski 1  in this proceedings for a detailed description . 
briefly  the acquirer uses its built-in model of the transfer operation to ask the service builder questions about the parameters of sigma forward. the service builder s answers to these questions are used to construct an instantiation of transfer operation with the same functionality as the process script the result is called sigma forward operation in figure 1 
1 

unfortunately  this is not a transfer operation in the sense intended by the service builder: it does not transfer sigma open message  but instead a citation of that message. in order to capture this intended meaning of sigma forward  the acquirer must use the results of its dialogue with the service builder to generate the mapping rule shown in figure 1. 
the description generated as the condition part of the rule  
sigma forward message to user  is the appropriate representation of sigma forward as a function for forwarding messages; the mapping rule shows how its invocation can be mapped into an invocation of the actual process script. as shown in figures 1 and 1. it is the generated description sigma forward message to user that is found during the mapping process  because the user also speaks of messages rather than citations being sent . if such a description had not been generated by the acquirer. consul would not have been able to find the sigma forward process script during its natural language understanding and explanation activities  and the users request could not have received the correct response. the acquirer will not allow process scripts to be entered into the system until it has related them to system model concepts either by instantiation or by mapping rules. 
1. conclusion 
　the consul system is still in the early stages of development. it currently demonstrates all of the capabilities discussed in this paper for a small class of user requests and service functions. only part of the sigma-like mail service has actually been modelled and implemented. immediate plans  the next year or so  call for the expansion of the knowledge base and service implementation to allow cooperative interaction with the full mail service. then  over the next several years   in order to prove the generality of the system as a cooperative interaction environment  the knowledge base will be extended to model the characteristics of other interactive services. the major problems now facing the consul project are the acquisition  maintenance  and efficient use of large amounts of organized knowledge. in part  the solution to these problems awaits the higher speed  larger address space machine architectures that are now becoming available. 
acknowledgements 
　thomas lipkis is responsible for the explainer and the classification algorithm  robert lingard for the process script programming methodology  and david wilczynski for the acquisition mechanism. 
