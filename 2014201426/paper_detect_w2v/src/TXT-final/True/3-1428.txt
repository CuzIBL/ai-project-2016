
in this paper  we address the problem of the automated composition of web services by planning on their  knowledge level  models. we start from descriptions of web services in standard process modeling and execution languages  like bpel1ws  and automatically translate them into a planning domain that models the interactions among services at the knowledge level. this allows us to avoid the explosion of the search space due to the usually large and possibly infinite ranges of data values that are exchanged among services  and thus to scale up the applicability of state-of-the-art techniques for the automated composition of web services. we present the theoretical framework  implement it  and provide an experimental evaluation that shows the practical advantage of our approach w.r.t. techniques that are not based on a knowledgelevel representation.
1 introduction
research in planning is more and more focusing on the problem of the automatedcompositionof web services: givena set of services that are published on the web  and given a goal  generate a composition of the available services that satisfies the goal  see  e.g.   narayanan and mcilraith  1  . in spite of the fact that several approaches have been proposed so far  see  e.g.   mcilraith and son  1; wu et al.  1; sheshagiri et al.  1; traverso and pistore  1    solving this problem in practice  by scaling up to realistic descriptions of web services  is far from trivial. indeed it is widely recognized that web services must be modeled with nondeterministic and partially observable behaviors  koehler and srivastava  1; hull et al.  1; berardi et al.  1; mcilraith and fadel  1; traverso and pistore  1; martinez and lesperance  1   and thus planning algorithms must work with incomplete informationand with actions with uncertain effects. moreover  in several application domains  web services cannot be simply modeled as atomic components  but as stateful processes whose interactions are intrinsically asynchronous  fu et al.  1; foster et al.  1; pistore et al.  1 .
　recent works address the problem of the practicality of the proposed solutions for web service composition. for instance   traverso and pistore  1; pistore et al.  1  propose a framework where web services are modeled with stateful  nondeterministic and partially observablebehaviors  and planning techniques based on symbolic model checking are used to address the scalability problem. however  these techniques work under the rather unrealistic assumption that web services can exchange only a very small number of data values. for instance  as the experimental results reported in  traverso and pistore  1; pistore et al.  1  show  reasonable performances are obtained for web services whose variables can contain only two values. this amounts to say that amazon.com could sell just two books!
　luckily enough  as already stated in  pistore et al.  1   the composition solution should not depend on the actual data exchanged among web services  in the same way as the operations that one has to perform to buy a book do not depend on the precise book one wants to buy. the flow of operations and interactions depends instead on whether the desired book is available or not  on whether its cost is affordable  and so on. the relevant issues for interacting with amazon.com are whether one knows whether the book is available or not  whether one knows the value of its price  and so on. the hope here is to apply planning techniques at the knowledge level  in the style of those proposed in  petrick and bacchus  1   or used in  mcilraith and son  1; martinez and lesperance  1 . this would make it possible to model only those features of the services which are relevant to compose them  and thus allow for an efficient automated composition.
　unfortunately  applying knowledge-level planning to solve the automated composition problem presents a major difficulty. while in  petrick and bacchus  1  the planning domain at the knowledge level is defined by hand  this is impractical for web service automated composition tasks. the knowledge level domain must be extracted automatically from the description of the services that are published  e.g.  in standard languages  like bpel1ws  andrews et al.  1 . the problem is therefore to devise a proper knowledge level model  which is suited for the automated composition task  and which can be obtained automatically from the published descriptions of the web services.
in this paper we propose a novel approach to the problem

figure 1: the purchase & ship example.
of automated composition that is based on planning at the knowledge level. we achieve this in the following steps:
we formally define a knowledge level model of web services that can be obtained automatically from specifications in standard languages for modeling and implementing services. we show indeed how bpel1ws processes can be automatically translated into their knowledge level models.
we show how the automated composition problem can be described as a planningproblem: from the knowledge level models of the available services and from the composition goal  we generate a planning problem such that a solution plan encodes the desired composition. we apply the planning techniques described in  pistore et al.  1  to the knowledge level planning problem that we obtain from the previous steps. the key advantage w.r.t.  pistore et al.  1  is that we do not have to deal with all the possible values of variables that are exchanged among services.
we implement the proposed framework  and provide a preliminary experimental evaluation that clearly shows the benefits of our approach.
the paper is structured as follows. we first describe a simple example of composition of bpel1ws processes  which we will use all along the paper  section 1 . we then briefly recall the framework for planning in asynchronous domains that has been first introduced in  pistore et al.  1   section 1 . in section 1  we describe the knowledge level representation of web services  and the resulting planning framework at the knowledge level. we finally describe the experimental evaluation  section 1   some conclusions  and related work.
1 composition of bpel processes
our reference example is the purchase and ship  p&s hereafter  example introduced in  pistore et al.  1; traverso and pistore  1 .
example 1 the p&s example consists in providing a furniture purchase & ship service by combining two independent existing services  a furniture producer producer and a delivery service shipper. this way  the user  also described as a service  may directly ask the composite service p&s to purchase a given item and deliver it at a given place  for simplicity  we assume that the shipment origin is fixed and leave it implicit .
　the interactions with the existing services have to follow specific protocols. for instance  the interactions with the shipper start with a request for transporting a product of a given size to a given location. this might not be possible  in which case the requester is notified  and the protocol terminates with failure. otherwise  a cost and delivery time are computed and sent back to the requester. then the shipper waits for either an acceptance or a refusal of the offer from the invoker. in the former case  a delivery contract has been defined and the protocol terminates with success  while it terminates with failure in the latter case. similar protocols are defined also for producer and user. the messages exchanged among the involved services are described in figure 1.
　the p&s has the goal to sell home-deliveredfurniture  i.e.  to reach the situation where the user has confirmed an order and the service has confirmed the corresponding suborders to producer and shipper   interacting with shipper  producer  and user according to their protocols. a typical interaction could be as follows:
1. the user asks p&s for an article   that he wants to be transported at location ;
1. p&s asks the producer for the size  the cost  and how much time does it take to produce the article ;
1. p&s asks the shipper for the price and time needed to transport an object of such a size to ;
1. p&s sends the user an offer which takes into account the overall cost  plus an added cost for p&s  and time to achieve its goal;
1. the user sends a confirmation of the order  which is dispatched by p&s to shipper and producer.
this is however only the normal case  and other interactions should be considered  e.g.  for the cases the producer and/or delivery services are not able to satisfy the request  or the user refuses the final offer.
　with automated composition of web services we mean the generation of a new composite service  the p&s in our case  that interacts with a set of existing component services  shipper  producer  and user in our case  in order to satisfy a given composition goal  sell home-delivered furniture .
　we assume that the interaction protocols of the component services  as well as the composite service  are described as bpel1ws processes  see figure 1 for a graphical representation of the shipper bpel1ws process . notice that while existing services are described as abstract bpel1ws processes  providing essentially the communication protocol   the synthesized service is an executable bpel1ws process exporting all the details to be directly deployed and run. a bpel1ws description specifies the types and internal variables of a service  and its input and output capabilities. the behavior of the process is described using input  receive  and output  invoke  reply  activities combined by standard constructs  such as sequences  loops  parallel executions  conditional choices  and nondeterministic choices.
　from a bpel1ws process  we can automatically extract a formal model of the interactions with the service  covering both the static aspects  e.g.  its communication channels  and the behavioral aspects  defined in term of transition steps . for the moment  the translation is restricted to a

figure 1: the shipper bpel1ws process.
subset of bpel1ws processes: we support all bpel1ws basic and structured activities  like invoke  reply  receive  sequence  switch  while  flow  without links  and pick; moreover we support assignments and a limited form of correlation. our next steps will be dealing with scopes and with fault  event and compensation handlers.
　for lack of space we omit the formal definition of this translation  details can be found at http://astroproject.org/  but we illustrate it in the case of the shipper process.
example 1 figure 1 shows a formal model of the shipper  automatically extracted from the bpel1ws process of figure 1. the shipper process is characterized by a set of abstract types used in the interactions  e.g.  size  cost   by a set of inputs and outputs  e.g.  request and offer  respectively   and by a set of typed functions used to manipulate internal variables  e.g.  function costof  which is used to obtain the cost of a particular shipping request . variables are used to store information on the state of the process. in figure 1  variables of abstract types  e.g.  customersize  store values used in the communications  while an additional variable pc implements a  program counter  that holds the current execution step of the service. the model describes the evolution of the process through a set of possible transitions  each corresponding to a  step  in the bpel1ws process; each transition defines an applicability condition  a firing action  and an effect  defined as a list of assignment to variables . possible actions are inputs  outputs  and a special action tau which is used to model internal evolutions of the process  such as assignments and decision making  e.g.  the transition from state prepareoffer  where the internal functions costof and delayof are used to compute the shipping price and delivery time .
process	shipper;
type
size; location; cost; delay;
input
request size  location ; ack  ; nack  ;
output
offer delay  cost ; not avail  ;
func
costof size  location  : cost; delayof size  location  : delay;
variable
pc:	start  getrequest  checkavailable  end checkavailable  sequence1  sequence1 
prepareoffer  sendoffer  waitanswer  endwaitanswer  empty1  preparenotavail 
	sendnotavail  succ  fail	;
customer size: size; customer loc: location; offer delay: delay; offer cost: cost;
init pc := start;
trans pc = start - tau -	pc := getrequest;
pc = getrequest - input request customer size  customer loc  -	pc := checkavailable 
pc = checkavailable - tau - pc := sequence1; pc = checkavailable - tau - pc := sequence1; pc = sequence1 - tau - pc := prepareoffer; pc = prepareoffer - tau - pc := sendoffer  offer cost:=costof customer size customerloc   offer delay:=delayof customer size customer loc ;
pc = sendoffer - output offer offer cost  offer delay  -	pc := waitanswer;
pc = waitanswer - input nack -	pc := fail; pc = waitanswer - input ack -	pc := empty1; pc = empty1 - tau -	pc := endwaitanswer; pc = endwaitanswer - tau -	pc := endcheckavailable; pc = endcheckavailable - tau -	pc := succ; pc = sequence1 - tau -	pc := preparenotavail; pc = preparenotavail - tau -	pc := sendnotavail; pc = sendnotavail - output not avail -	pc :=fail;
figure 1: a formal model of the shipper.
1 a planning framework for service composition
the work in  pistore et al.  1  presents a formal framework for the automated composition of web services which is based on planning techniques: component services define the planning domain  composition requirements are formalized as a planning goal  and planning algorithms are used to generate the composite service. due to the nature of web services  the resulting planning domain is nondeterministic and partially observable. the framework of  pistore et al.  1  differs from other planning frameworks since it assumes an asynchronous  message-based interaction between the domain  encoding the component services  and the plan  encoding the composite service . more precisely  the planning domain is modeled as a state transition system  sts from now on  that can be in one of its possible states  a subset of which are initial  and can evolve to new states as a result of performing some actions. in particular  input actions represent messages sent to the component services  while output actions are messages received from the component services. private actions are actions that the composite service can perform internally  without interacting with the component services1  while the special action is used to model internal evolutions of the component services which are not visible to the service user. finally  a labeling function associates to each state the set of properties holding in that state.
definition 1  state transition system  sts   a state transition system is a tuple where:
is the finite set of states; is the set of initial states; is the finite set of input actions; is the finite set of output actions; is the finite set of private actions;
is the transition relation;
is the labeling function.
　in a composition problem  the composite service is defined as a  controller   also described as a sts   which interacts with the domain   orchestrating the component services by invoking their operations and handling results. we now recall the formal definition of the behavior of a sts when controlled by .
definition 1  controlled system 
let	and
　　　　　　　　　　　be	two	state	transition	systems  where	for all	. the sts	  describing the behaviors of system	when controlled by	  is defined as:
where:
if	; if	;
　　　　　　  with	  if and	.
　due to the asynchronous nature of web service interactions  and in order to guarantee a correct execution of the composite service  we need to rule out explicitly the cases where the sender is ready to send a message that the receiver is not able to accept. according to  pistore et al.  1   a state is able to accept a message if there exists some successor of   reachable from through a  possibly empty  sequence of transitions  such that an input transition labeled with can be performed in . this intuition is captured in the following definition  where we denote by -closure the set of states reachable from through a chain of transitions. for what concerns private actions  since they correspond to internal operations of the composite service  we simply assume that they are executable in the current state of .
definition 1  deadlock-free controller 
let	be a sts and
                     be a controller for . is said to be deadlock free for if all states that are reachable from the initial states of satisfy the following conditions:
ifwiththen there is some-closure ;such thatfor someifwiththen there is some-closuresuch thatfor some.if with then for some	.
　in  pistore et al.  1   the composition problem for domain and composition goal is defined as the problem of finding a deadlock-free sts such that satisfies . planning techniques  based on the planning as model checking framework  are used to solve this problem  and the experimental results show the effectiveness of this approach.
　however  the approach of  pistore et al.  1  requires a finite set of data values for all data types  e.g.  only a finite number of articles  locations  costs... can be defined in the p&s domain . this assumption guarantees that the formal model of a bpel1ws process such as the one in figure 1 can be mapped into a finite-state sts. moreover  the number of data values impact dramatically on the size of the generated sts  and very small sets of values need to be used to allow for an effective plan generation: for instance  all experiments in  pistore et al.  1  assume only two values for each data type. in the followingwe show how to adaptthe frameworkof  pistore et al.  1  to a knowledge-level planning approach in order to remove this restriction and allow for automated composition with a realistic  or even infinite  number of data values.
1 service composition via knowledge-level planning
the key aspect for extending the approach of  pistore et al.  1  to the knowledge level is the definition of an appropriate model for providing a knowledge level description of the component services. in this section we formally define such a model in terms of a suitable knowledge base  from now on
    . then we show how to construct the sts corresponding to the planning domain by composing the knowledge bases of the component services.
definition 1  knowledge base 
a knowledge base is a set of propositions of the following form:
	where	is a variable with an abstract type;
where x is an enumerative variable and v is
one of its possible values; where x and y are two variables with the same
type;
	where	are vari-
ables with an abstract type and	is a function compatible with the types of	.
with we mean that we know that proposition is true and with that we know the value of the variable .
this definition of knowledge base is very simple; still  our experiments show that it is powerful enough to model web service composition problems.
　we say that a knowledge base is consistent if it does not contain contradictory knowledge propositions such as and   with . we say that is closed under deduction if it contains all the propositions that can be deduced from the propositions in ; for instance a
　　containing both also	.and	should containthe knowledge baseof a component service is ob-tained from the variables  functions and types of the service.
example 1 an example of knowledge base for the shipper process in figure 1 is:
kb= k pc = waitanswer  k  customersize  k  customerloc 
k offercost = costof customersize  customerloc  
k offerdelay = delayof customersize  customerloc  
k  offercost   k  offerdelay 
in the following we describe when a transition can be executed in a knowledge base and how its execution affects
.
　we model a transition   such as those presented in figure 1  as a triple where are its conditions  is its firing action and are its effects. we start by defining the auxiliary restriction and update operations.
	the restriction of a knowledge base	with a condition
　  denoted with   is performed adding to the knowledge obtained from and closing under deduction; for instance:
restrict  k x = y    y = z  =
k x = y   k y = z   k x = z 
the update of a knowledge base with an effect   denoted with   consists in performing the following steps: for each assignment in   remove from the knowledge we had on the modified variable  add the knowledge derived from the assignment and close the under deduction. for instance:
update  k x = y    z := x; x := w  = update  k x = y   k z = x   k z = y    x := w  =
k z = y   k x = w 
we now give the definitions of applicability and execution which depend on a service transition and on an action performed by a peer interacting with the service; the firing action in and the peer action correspond to the same action except that the former is instantiated on service variables  while the latter on variables of the peer. consider for instance the following example where action request s  l  performed by the peer corresponds to the shipper request customersize  customerloc .
example 1 let's consider the input transition t of the shipper
pc = getrequest
- input request customersize  customerloc  - 
pc := checkavailable
and suppose that our current knowledge base is:
　　　　　kb = k pc = getrequest   k  s  k  l  . where s:size and l:location are additional variables. action request s  l   correspondingto invokingthe shipper action using s and l as parameters  is applicable in kb since we know the values of s and l and the condition of transition t is obviously consistent with kb.
　the knowledge base obtainedby executing on kb transition t and action request s  l   is defined as follows:
we restrict kb with the knowledge k pc = getrequest  associated to the transition condition; in this specific case kb remains unchanged; then we update kb with the knowledge carried by the input action on the variables used as action parameters; this consists in removing from kb all the knowledge we had on customersize and customerloc  adding the new knowledge k customersize = s   k customerloc = l  and closing under deduction; we obtain:
kb' = k pc = getrequest   k  s 
k  l  k  customersize  k  customerloc 
　　　　k customersize = s  k customerloc = l  ; finally we update the knowledge base with the effects  removing from kb' all the knowledge we had on the variables modified by the assignments  adding the new knowledge  in this case k pc := checkavailable   and closing under deduction; we obtain:
kb'' = k pc = checkavailable   k  s 
k  l  k  customersize  k  customerloc 
k customersize = s  k customerloc = l  .
definition 1  kl applicability and execution 
a transition and a corresponding action are applicable in   written if:
	and	 	where
	is	an input is consistent; orandand	  whereis anoutput  andis consistent; orandis consistent.if	 	then	wedenotewith  defined as follows:the execution onofand	if	andthen where;if	 	whereis	anin-	put 	andthen; whereif	 	whereis	anout-	put 	andthen where
.notice that the execution of a transition increases the knowledge in   not only with the information in the effects  but also with those in the condition. indeed  if the transition is executed  this means that the condition is known to hold.
　the planning domain at the knowledge level is constructed from the knowledge-level models of each component service and from a knowledge-level representation of the composition goal. the latter defines which are the variables and the functions of the composite service  like  for instance  the cost of the offer to the user  or a special function that adds a mark up to the sum of the costs of the shipper and producer. we call these variables and functions  goal variables and goal functions.
　given a composition goal  we automatically generate its knowledge level representation that declares what the composite service must know and how goal variables and functions must be related with the variables and functions of the component services.
example 1 a possible  very simple  composition goal for our reference example is:
tryreach
user.pc = succ producer.pc = succ shipper.pc = succ user.offercost addcost producer.costof user.article   shipper.costof producer.sizeof user.article   user.location  
the goal declares that we want all the services to reach the situation where the order has been confirmed. moreover it states that the offered cost must be obtained by applying the function addcost to the costs offered by the producer and the shipper. the operator tryreach is one of the modal operators provided by the eagle goal specification language. it requires that the plan reaches the goal condition whenever possible in the domain. for further details  see  pistore et al.  1 
　to obtain the knowledge level goal  we flatten the functions introducing auxiliary variables until only basic propositions are left:
tryreach
user.pc = succ producer.pc = succ shipper.pc = succ user.offercost = goal.addedcost goal.addedcost = addcost goal.prodcost  goal.shipcost  goal.prodcost = producer.costof goal.userart  goal.shipcost = shipper.costof goal.prodsize  goal.userart  goal.userart = user.article goal.prodsize = producer.sizeof goal.userart  goal.userloc = user.location
from this flattened goal we can extract the goal variables:
goal.addedcost  goal.prodcost  goal.shipcost  goal.prodsize  goal.userart  and goal.userloc; and the goal function goal.addcost cost  cost cost.
　the goal can then be automatically translated into its corresponding knowledge level goal:
tryreach
k user.pc = succ  k producer.pc = succ  k shipper.pc = succ 
k user.offercost = goal.addedcost 
k goal.addedcost = goal.addcost goal.prodcost  goal.shipcost   k goal.prodcost = producer.costof goal.userart  
k goal.shipcost = shipper.costof goal.prodsize  goal.userart  
k goal.userart = user.article 
k goal.prodsize = producer.sizeof goal.userart  
k goal.userloc = user.location 
the knowledge-level representation of the composition goal defines therefore a further knowledge base  that we call the knowledge base of the goal.
　the knowledge-level planning domain is obtained by combining the knowledge bases of the component services and the knowledge base of the goal  by instantiating the input and output actions of the component services on goal variables  and by adding the private actions obtained by applying goal functions to goal variables.
definition 1  knowledge-level planning domain 
the planning domain	for a composition problem is an sts defined as follows:
the set of states are all the possible defined on the set of typed variables and on the set of typed functions   where
and are the variables and functions of the component services  while and are those of the
composition goal; is the set of initial states corresponding to the initial knowledge bases   obtained from the initial assignments of the component services;
　is the set of input actions such that is an input action in a transition of a component service and are goal variables with the same type of service variables ;
　is the set of output actions such that is an output action in a transition of a component service and are goal variables with the same type of service variables ; is the set of private actions where is a goal function and are goal vari-
	ables compatible with the type of	;
　is the set of transitions   with   such that:
- if is an input  output or action  then there exists a in the sets of transitions of the component services such that and
;
- if	is	a	private	action	of	the	form
  then
	and	;
is the trivial function associating to each state the set
of propositions that hold in that state.
given the domain described above  we can apply the approach presented in  pistore et al.  1  and obtain a deadlock free that controls by satisfying the composition requirements . despite of the fact that the synthesized controller is modelled at the knowledge level  its elementary actions model communication with the component services  sendingand receivingof messages  and manipulationof goal variables; given this  it is straightforward to obtain the executable bpel1ws composite service from .
1 experimental evaluation
we have implemented the proposed approach  and used the planning as symbolic model checking techniques presented in  pistore et al.  1  to perform an experimental evaluation. all the tests have run on a 1 ghz xeon pc  limiting memory usage to 1mbytes  and with a cpu timeout of 1 seconds.
　we first considered the p&s example explained in the previous sections  which  in spite of the reduced number of components  requires a rather intricated protocol to be established for achieving the goal. figure 1 shows the results of our

figure 1: experiments with p&s.
experiments. the same planning engine is run to perform knowledge-levelcomposition and ground level compositions  where different ranges of values can be produced and exchanged by the shipper  producer and user. the horizontal axis reports the cardinality  of the data types  i.e. size  location  cost  delay  handled by the services. we also consider intermediate cases where we have  for instance  two possible values for the cost and only one value for the size   reporting the average cardinality in the figure. on the vertical axis  we report the composition time. as expected  ground level composition is only feasible for the unrealistic cases where processes may exchange only data with 1 or at most 1 values. indeed  the time for ground composition grows exponentiallywith the cardinalityof the data types  and even the simple case where types have cardinality 1 is unmanageable. on the contrary  knowledge-level composition takes about 1 seconds to complete  with a performance similar to that of the ground level for  . this is a reasonable result  since  basically  binary variables at the ground level correspond to  binary  knowledge atoms at the knowledge-level.
　to evaluate the scalability of the knowledge-levelapproach when the number of component services grows  we perform two sets of experiments  considering a generalization of the example domain that involves a set of component services. in our first set of experiments  each component is represented by a very simple abstract bpel1ws process that is requested to provide a service and can respond either by performing the service  or by refusing. the composition requirement is that either all services end successfully  or a failure is reported to the invoker of the composed service. figure 1 reports the knowledge-level composition times  for increasing number of services to be composed  indicated on the horizontal axis . the composition achieves results comparable to those reported in  pistore et al.  1   where ground composition is performed only considering the case of types with range of cardinality 1. we manage to compose 1 services in 1 minutes.
　in the second set of experiments  also reported in figure 1  we make the protocol more complex  by requiring a higher degree of interleaving between components. here  the interactions with each component are more complex than a single invoke-response step  and  to achieve the goal  it is neces-

figure 1: experiments with parametrized domains.
sary to carry out interactions with all components in an interleaved way. such interleaving is common in the p&s example where  e.g.  the p&s cannot confirm the order to the producer if shipping is not available or if the user does not accept the offer. the increased complexity reflects on the complexity of the composition; however  compositions of reasonable complexity  up to 1 services  can be achieved within 1 minutes. even in this case  automated composition takes a rather low amount of time  surely faster than manual development of bpel1ws code.
1 conclusions and related work
in this paper  we have shown how automated composition can be obtained by translating automatically process-level descriptions of web services  e.g.  bpel1ws processes  to a planning problem that describes the interactions among services at the knowledge level. our solution exploits the framework for planning in asynchronous domains presented in  pistore et al.  1 . we show experimentally how the knowledge level approach increases significantly the practical applicability of this framework.
　the idea of planning at the knowledge level is not new  and the solution that we propose is based on the idea presented in  petrick and bacchus  1 . notice however that our work addresses an orthogonal problem  i.e.  the problem of how a
　knowledge-level planning domain can be automatically generated from a set of bpel1ws processes that describe web services. moreover  at the technical level  our works differs from those proposed in  petrick and bacchus  1  in the kind of information that we represent and store in the knowledge bases  as well as in the knowledge-level planning domain that we automatically generate  and in the planning algorithm we exploit.
　the work in  martinez and lesperance  1  shows how to use the knowledge level planner presented in  petrick and bacchus  1  to solve service composition problems. however they deal only with atomic services  services exporting a single operation instead of a protocol  and the knowledge level domain  e.g. domain action specification  update rules  is written by hand.
different automated planning techniques have been proposed to tackle the problem of service composition  see  e.g.   wu et al.  1; sheshagiri et al.  1 . however  most of them cannot deal with the problem that we address in this paper  since they cannot deal with conditionaloutputs  uncertain action effects  and partial observability. a remarkable exception is the work described in  narayananand mcilraith  1; mcilraith and son  1; mcilraith and fadel  1   which instead deals with sensing actions and knowledge level predicates. however  even in this work  the knowledge level domain is given by hand  and the problem of devising a knowledge base that can be generated automatically from bpel1ws web services descriptions is not addressed. moreover  the composition problem is limited to sequential compositions of services.
　the work in  hull et al.  1  presents a formal framework for composing e-services from behavioral descriptions givenin terms of automata; theyfocus on the theoreticalfoundations  without providing practical implementations. moreover  the considered e-composition problem is fundamentally different from our process-level composition  since it is seen as the problem of generating a set of rules coordinating the execution of the available services. no concrete and executable process is generated with that approach. this is the main difference also with the work described in  berardi et al.  1 .
　in the future  we plan to extend the work to the automated composition of semantic web services  e.g.  described in owl-s  owl-s  1   along the lines of the work in  traverso and pistore  1   which at the moment is not based on knowledge-level planning. we will also explore variants of our knowledge base  so to allow flexible ways to model different features of ground level domains.
acknowledgements this work is partially funded by the miur-firb project rbne1   knowledge level automated software engineering   and by the miur-prin 1 project  advanced artificial intelligence systems for web services . the authors want to thank all members of the
astro project  http://astroproject.org/  for their collaboration and their feedback.
