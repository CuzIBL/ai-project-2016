	d e a d l i n e s   	t r a v e l t i m e   	a n d 
	r o b o t 	p r o b l e m 	s o l v i n g 
david miller  r. james firby  and thomas dean 
yale university 
department of computer science 
p.o. box 1 yale station 
new haven  connecticut 1 
1 a b s t r a c t 
this paper describes some extensions to the reductionist planning paradigm typified by sacerdoti's noah program. certain inadequacies of the partial ordering scheme used in noah are pointed out and a new architecture is detailed which circumvents these problems. an example from the semi-automated factory domain is used to illustrate features of the new planner. techniques for eliminating unnecessary travel time by the robot and avoiding backtracking due to deadline failures are discussed and their incorporation in the planner is described. 
1 i n t r o d u c t i o n 
most planners since noah  have represented a plan for a set of tasks as a partial  ie.  non-linear  ordering of the steps required for carrying out those tasks. noah and its successors  eg.  nonlin  and deviser   employ a partially ordered network of tasks to avoid early and unnecessary commitment to task orderings. the motivation for this is to eliminate backtracking. however  maintaining a consistent partial order is difficult in domains where the fact that tasks actually take time plays an important role: domains in which deadlines or robot travel time are serious considerations. 
   that a partial order leads unavoidably to a deadline failure usually cannot be discovered until an attempt is made to linearize the ordering. however  failure to notice a deadline violation early 

will require backtracking later. 
   in addition  planning with a partial order is not well suited to efficiently managing factors like travel or machine running time. it's not difficult to represent that moving from one workstation to another takes time proportional to the distance separating the two workstations. however  generating a plan that eliminates unnecessary travel between workstations requires exploring some of the linearized task orderings. it is not until tasks are completely ordered that the source and destination workstations of each movement can be known and the travel time computed with any accuracy. 
   in this paper we describe an approach to planning that combines the use of a partial order with a method for exploring the possible repercussions of that partial order. this approach has been implemented in the forbin planner  first order robot intender . forbin is a planner capable of solving a significantly wider class of problems than any of its predecessors. 
1 	the factory domain 
one problem domain that has been used for exploring our approach to planning is what we refer to as the semi-automated factory. in this domain a mobile robot operator wanders about the factory floor  see figure 1  performing basic maintenance and supply operations to the factory machinery. the purpose of the 1 	an overview of the f o r b i n project 
the most important issue forbin is designed to explore is the use of spatial and temporal reasoning in planning. to do this the system supplements the usual hierarchical planner with two new modules: the time map manager and the time optimizing scheduler. 
1 	the time map manager  tmm  
the tmm  is a set of routines for reasoning about the occurrence of tasks and the spans of time over which facts can be said to hold. the data structure that the tmm uses to store and manipulate the temporal relationships between these facts is called a time map. 
   plans generally have assumptions or facts which must be true in order that the plan be applicable in a given situation. the tmm is queried during plan selection to locate intervals over which these facts are true. it returns a number of intervalconstraint set pairs each of which specifies a set of constraints on the partial order that must be imposed to keep the assumptions valid over its interval. the tmm monitors the continued validity of plans by setting up nonmonotonic data dependency justifications composed of assertions called protections. if a protection fails then the tmm notifies the planner of any plans threatened 

by the failed protection. the failure is annotated in such a way as to facilitate corrective action. the tmm also anticipates possible protection failures and suggests ordering constraints to avoid undesirable interactions. the forbin planner uses this same machinery to handle simple resource management chores  eg.  reserve the lathe for a 1 minute stretch beginning after 1 but ending before noon . the tmm subsumes and extends the functionality of the tome  table of multiple effects  mechanism used in noah. 
1 	the time optimizing scheduler  tos  
the nature of tasks in the forbin domain necessitate that the robot spend considerable amounts of time in transit between workstations. the forbin system uses the tos to make plan selection decisions that reduce this travel time and make the overall plan as short as possible. 
   in the semi-automated factory  where travel distances are sizable with respect to production times  travel time considerations are1 very important in deciding which of the possible ta.sk expansions will eventually yield the most efficient final plan. the tos chooses the plan that fits best in the overall scheme of things by producing the most efficient schedule of execution using each possible expansion  and choosing the best. the chosen expansion is used in further planning and the schedule is used to guide the order of expansion of further subtasks. when planning is complete the schedule provides the order in which the robot should execute the final set of primitive actions. 
   the tos offers an inexpensive method of exploring the schedules that can be formed from the partial order of a set of tasks. the search space for scheduling a set of tasks is factorial in the number of tasks  but  and  contain heuristics for trimming it significantly. these heuristics mainly use temporal constraints to eliminate impossible schedules before they have been fully elaborated. ordering constraints and deadlines often eliminate all but a few possible schedules. 
   a further computational saving is derived by rating the quality of the schedules being constructed  and pursuing only the most promising ones. for the forbin factory domain the overall execution time is the chief determiner of a schedule's quality and is the discriminating feature among legal  consistent schedules. 
   no rating system is perfect and it is possible that the schedule first picked by the tos may not be the optimal one. since' the tos uses a heuristic search to produce schedules  a longer search time will increase the probability of the program finding the optimal schedule. the tos can be set to search at any level of detail and can therefore find the best schedule that balances planning time against execution time. 

d. miller et al. 1 
along with the tmm and tos  the forbin system has two other major modules: the task expander  te   and the task queue manager  tqm . the te is responsible for finding all possible plans that can be used to expand a task  and the tqm maintains two queues: the unexpanded tasks in the order they should be expanded and the primitive actions in the order they should be executed. the communication paths between these modules are shown in figure 1. in addition to the basic modules  interfaces are provided for a user which gives the system new tasks to perform  and a robot which performs the primitive actions directed by the planner. 
while there are non-primitive tasks in the tqm  forbin: 
1. pops the first task in the tqm and passes it to the te. 
1. the te finds all the plan descriptions in the plan library which match the task. for each plan it finds  it asks the tmm for a time or times when the plan could be used. 
1. the tmm elerives all of the constraints necessary to make each plan suggested by the te feasible. 
1. the tos takes all the plan-constraint sets and finds the one that produces the best schedule when combined with the contents of the rest of the time map. 
1. the tqm gets the schedule and the te is passed the selected plan. 
1. the tqm takes the schedule  extracts the new subtasks from it and adds them to its queues. the ordering in the schedule is used to help order the items in the queues. 
1. the cycle then repeats until the tqm has no more unexpanded tasks. 
1 	the plan formalism 
to facilitate this flow of control  the plan formalism used by the forbin system specifies not only the action and ordering information found in other formalisms  but also the temporal and spatial features required by the tmm and tos. each plan specification includes: 
  conditions that must hold true before and during plan ex-ecution. 
  how to expand the plan into lower level actions. 
  effects of some actions and the protections on those effects. 
  aproximately how long the plan will take to execute. 
  where the robot must be to carry out the plan. 
  the utility of the plan compared to others for that task. 
   plans come in two parts: the property descriptor and the plan descriptor. for any given task  such as  make  thing   there will be only a single property descriptor no matter how many plans there are. the property descriptor gives the approximate duration and position of a task before a plan is chosen for it: a combination of the durations and positions of all the plans known for the task. these estimates are required so that the tmm and tos can deal effectively with tasks that are not yet expanded. 
the plan descriptor is used when it is time to expand a task. 
the plan descriptor contains a list of the plan's subtasks and the mandatory ordering and time constraints that exist on those subtasks. the plan descriptor may also contain assumptions which must be predicted to hold true over the intervals specified in or-

1 d. miller et al. 
dor for that particular plan descriptor to be able to be chosen as the actual plan for the task. the plan formalism is discussed in more detail in . 
1 f o r b i n and w h a t has gone before 
the forbin planning system shares many of the characteristics of earlier planners like noah and nonl1n since it is a hierarchical planner that attempts to leave subtasks only partially ordered as long as possible. however  the tos and tmm give forbin important new capabilities: 
1. to deal with tasks that require specific amounts of time and must be performed at specific locations. 
1. to represent deadlines so that plan steps can be synchronized with events outside the planner's control. 
1. to produce near-optimal schedules that eliminate unnecessary robot travel and idle time. 
   the necessity of representing time in planning has been recognized by many researchers:     . the forbin system uses the time map to reason about the temporal intervals associated with tasks. all real tasks take time and hence it is critical that a planner be able to represent and deal with information concerning the duration and separation of tasks. the forbin treatment of time allows the system to deal with deadlines on tasks  to recognize explicit overlap of tasks where that is possible or necessary  and to compare the predicted execution time of different  planning choices. 
   some previous systems that have made extensive use of time are isis   1   and deviser  . isis uses a heuristic scheduling module to solve job-shop scheduling problems. however job-shop scheduling is too restrictive to handle many common aspects of typical problem solving domains. thus isis docs not incorporate travel time between workstations into its scheduling representation. deviser  though it produces a schedule  does not contain a scheduler. instead it relies on the general hierarchical planning mechanism combined with backtracking to eventually produce a schedule. by not having a scheduler guide the plan expansion and ordering the results of deviser's work can be very inefficient and may have involved very large amounts of backtracking. 
   earlier planners often made no effort to produce a linear schedule of primitive actions from the partial order of the final plan expansion. in the forbin factory domain  such a linear schedule is required because the robot can do only one thing at a time. the tos is used to help keep the best linear schedule implied by the partial order at each planning step as near to optimal  ie.  short  as possible. to allow this  travel between tasks is not represented in the plan formalism  instead the location of the task is. thus  as the tos is examining possible linear schedules  it calculates the travel time between the ordered tasks as it fits them together. in this way  unneeded travel tasks are not generated and the tos is free to order travel any way it chooses as long as it does not violate any other constraints on the tasks. the tos can also overlap the execution of several tasks provided that the overlap is consistent with the constraints in the time map and it does not demand that the robot be more than one place at a. time. these abilities of the tos give forbin the opportunity to produce plans that make better use of time than previous planners. 
1 s u m m a r y 
solutions to planning problems that involve realworld actions must take time and travel into account. the forbin planning system does this by using two special purpose modules. the tmm constructs and maintains a temporal database in which to reason about tasks and their consequences over time. it then uses this time map to anticipate and suggest methods of avoiding undesirable interactions. the tos manipulates the partial order of subtasks to find the arrangement that takes best advantage of executing tasks in parallel and eliminates unnecessary travel in order to minimize overall plan execution costs. 
   a plan formalism has been given that allows all the necessary constraints needed to interface with these modules  to be expressed clearly and cleanly. 
   the overall system can plan solutions for tasks that have a wide variety of temporal and spatial constraints. the solutions produced by the system are not only consistent with the constraints placed on the problem  but arc also near optimal with regards to their cost in time. 
acknowledgments 
the authors wish to thank steven hanks  james spohrer  and drew mcderniott for their comments and suggestions on this research. this work was supported in part by the advanced research projects agency of the department of defence and monitored under the office of naval research under contract n1-k-1. 
bibliography 
 l  allen  james  maintaining knowledge about temporal intervals  comm. acm  1  1   pp. 1. 
 cheeseman  peter  a representation of time for automatic planning  proc. ieee int. conf. on robotics  1. 
 dean  t.  temporal reasoning involving counterfactuals and disjunctions  proc. of the. ninth int. joint conf. on artificial intelligence  ijcal  aaai  los angeles  ca  august 1. 
 firby  r.j.  dean  t.  miller  d.  efficient robot planning with deadlines and travel time  i'roc. of the 1th int. symp. on robotics and automation  iasted  santa barbara  ca  may 1. 
 fox  mark s.  constraint-directed search: a case study of jobshop scheduling  technical report cmu-r1-tr-1  cmu robotics institute  december 1. 
 mcderniott  drew v.  a temporal logic for reasoning about processes and plans  cognitive science  1  1   pp. 1. 
 miller  david  scheduling heuristics for problem solvers  technical report 1  yale university dept. of comp. sci.  1. 
 sacerdoti  earl  a structure  for plans and behavior  american elsevier publishing company  inc.  1. 
 tate  austin  generating project networks  proc. ijcai 1  ijcai  1  pp. 1. 
 vere  steven  planning in time: windows and durations for activities and goals  ieee trans. on pattern analysis and machine intelligence  pami-1  1   pp. 1. 
 1  vere  steven  temporal scope of assertions and window cutoff  1. jpl  ai research group memo. 
