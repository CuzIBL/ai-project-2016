 
we develop a formal tool for representing and analyzing informational aspects of robotic tasks  based on the formal concept of 'knowledge.' specifically  we adopt the notion of knowledge-based protocols from distributed systems  and define the notions of knowledge complexity of a robotic task and knowledge capability of a robot. the resulting formalism naturally captures previous work in the areas of robot information management  but is sufficiently rigorous and natural to allow many extensions. in this paper we show one novel application - the automated distribution of robotic tasks. 
1 	introduction 
the notion of computational complexity has had a profound effect on the development of computer science. while still crude  our ability to classify different computational problems in terms of their complexity allows us to understand inherent difficulties in solving such problems. some areas of robotics  such as motion planning  have benefited from advances in computational complexity  e.g.  canny  1  . however  the area of robotics as a whole still lacks the analog of a turing machine  a formal device that faithfully quantifies the difficulty of a robotic task or the capabilities of a robot. the reason for this is that usually  space and time complexity of computation are not the dominating factors in a robotic task. instead  the physical embedding of robots brings to the fore issues such as sloppy controllers  imprecise sensors  and spatially separated components  all of which suggest that a good model for robotics should revolve around the notions of information and uncertainty. 
　we propose a framework that faithfully models the information and lack thereof inherent in robotic tasks  such as is brought about by spatial distribution and imprecise sensors. in doing so we join a number of authors who have recently attempted to quantify the sensing difficulty of robotic tasks.  erdmann  1  attempts to assess the sensing requirements of robotics tasks in terms of what he calls abstract sensors.  donald  1  develops formal tools that allow him  among other things  
1 	action and perception 
to compare and classify the sensing capabilities of different concrete sensor systems such as a radial sensor and a beacon sensor. we find this recent work inspiring  but believe that further progress can be made by couching the analysis of informational considerations in robotic tasks in a suitable abstract language. in particular  we believe that the formal notion of 'knowledge' that has been proposed and studied in ai  e.g.   moore  1; rosenschein  1   and distributed systems  e.g.   fagin et al.  1   can serve as a basis for just such an abstrac-
tion. we recently showed a particular application of the formal notion of knowledge to the task of robot motion planning under uncertainty  brafman et a/.  1 ; here we propose a more ambitious application of the notion  namely as a basis for the general model of informational aspects of robots and robotic tasks. in our framework  robotic tasks can be characterized in terms of the knowledge required to perform them  and robots can be characterized in terms of the knowledge they can acquire. we can therefore assess the ability of a particular robot to perform a task by comparing its knowledge capabilities to the knowledge requirements of the task. one of the benefits of this formal approach and its underlying semantics is extensibility. in particular  we are able to exploit this feature in the analysis of multi-robot domains. as a demonstration of this  we provide a provably corrept algorithm for distributing centralized robotic protocols; roughly speaking  the algorithm accepts as input a description of a robotic task and a high-level description of a centralized protocol for achieving the task  and outputs a high-level description of a decentralized protocol that is guaranteed to achieve the same task. 
　to provide intuition  throughout the paper we will anchor the formal development in the following example. although simple  the example embodies two important ingredients - imprecise sensing  and the need to coordinate the action of spatially distributed actuators. 
example 1. 	two horizontal  perpendicular  one-
dimensional robotic arms must coordinate as follows. the first arm is to push a hot object lengthwise across the table until the the second arm is able to push it sideways so that it falls into a cooling bin. the length of the table is marked in feet  from 1 thru 1  for simplicity we ignore the horizontal coordinate . the second arm is able to push the object if it is anywhere in the region  1 . the second arm cannot hit the object while the object is in motion  but on the other hand the object cannot remain motionless for more than an instant 

or it will burn a hole into the table. thus the second arm must move precisely when the first one stops. we consider 
four variants of the problem: 
la. the arms share a controller. the controller has access to a sensor reporting the position of the object with error no greater than 1  i.e.  if the object's current location is q then the reading can be anywhere in  q - 1  q + 1 . lb. same as la  except the error bound is 1 rather than 1. 
lc. each arm is controlled separately. each controller has access to a location sensor as in la; however these are two independent sensors whose readings may differ  within the allowed bounds . 
id. the situation is as in lc  except that only the first controller has a sensor. however  in addition the first controller can emit  e.g.  infra-red  signals  and the second controller can reliably detect thern. 
　it is not hard to see that in cases lb and lc there does not exist a protocol that will achieve the task  whereas in cases la and id there do exist such protocols.1 | 
　there are three remaining sections in the article:  1  the formal model and language   1  an application to the distribution of robotic tasks  and  a  discussion of related work. 
1 the model 
we start by presenting our model  which is based on the notions of abstract robotic domain  ard  and abstract 
robotic unit  aru . in the second section we present a 
 by now standard  logic for talking about the model  including the knowledge of arus. in the third section we introduce the new notions of knowledge capability and knowledge complexity  which we then relate to the notion 
of knowledge-based protocols. 
1 	abstract robotic units and domains 
we start by defining the notion of an abstract robotic domain  or ard. an ard consists of a set of possible states and the possible transformations among them. roughly  a state of the ard corresponds to the notion of configuration in robotics  lozano-perez  1 ; it encodes everything that is not internal to robots  such as the location of the robot and other objects. the information and computation capabilities of a robot are captured by an abstract robotic unit  aru . an aru is a state machine whose actions  cause'1 the ard's transitions. different arus acting on a given ard have identical actuation capabilities  but their abilities to sense and compute can vary. 
definition 1 an ard is a pair  c t  where c  the con figuration space  is a set of states  and t  the transitions  is a set of functions from c to 1c' 1  containing the identity function. 
　1 for example  the centralized protocol in case la might be as follows  r is the current reading : if r   1 then  move armi  stop arm1  ; else  stop armi  move arm1  . similarly  a decentralized protocol in case id might be: protocol for arm1: if r   1 then move; if r e  1  then signal and stop. 
protocol for arm1: if signal has been detected then move; else stop. 
	brafman and shoham 	1 

1 	action and perception 

	brafman and shoham 	1 

a kbp with conditions that perforins 
task i g . 
　this lemma suggests a method for analyzing a robot's ability to perform a task in terms of two subproblems:  1  finding a kbp v that performs the task  and  1  showing that the robot is k-capable of   where  are the knowledge conditions of 
p. this robot can then perform the task by running a 
kbp derived from v by adding a final else clause which  abstractly  states: 
         else learn whether  or ... or thus  the robot will alternately be making direct  physical  progress toward the goal state and attaining the knowledge required to make such progress. 
we conclude the section with two remarks on kbps. 
first  although  as we have just mentioned  a standard protocol can always be viewed as a special case of a kbp  it is a degenerate case. kbps are powerful precisely because they allow us to abstract away the idiosyncrasies of local state. thus  for example  rather than discuss the content of the frame buffer of a robot's vision system  a kbp allows us to talk about the robot knowing that there is an obstacle in front of it. second  while in principle well defined  in practice it can be quite difficult to transform a kbp to a standard one. we believe  however  that  as has been the case in distributed systems  starting with knowledge-oriented analysis and design is a useful methodology. 
example 1  cont.  let g and alpha be as defined before. here is an example of a distributed kbp for the task  which we derive algorithmically in section 1: protocol for arm1.if k g then stop; if then move. protocol for arm1'. if then move; if then stop. 
as we will see  the use of nested knowledge operators is a natural and concise way of capturing coordination. | 
1 	automated distribution of robotic tasks 
so far we have provided a rigorous framework for representing and reasoning about informational aspects of robots and robotic tasks. certainly  a minimal requirement from any formal framework is that one be able to use it to reason about simple and intuitively well understood examples; indeed  all along we have applied the framework to such an example. however  for the framework to be something other than an idle exercise  it must ultimately be used for other than merely formalizing the obvious. one direction to go would be to increase the complexity of the robotic task until its solution or lack thereof are no longer obvious. however  here we offer a different novel contribution - a provably correct algorithm for distributing robotic tasks; that is  an algorithm that  roughly speaking  accepts a multi-robot task and a central controller for the robots that achieves it  and outputs local controllers for each of the robots that jointly achieve the same task. 
　our approach to task distribution rests on capturing the notion of centralization through the formal notion of knowledge. with central control all knowledge of the various components resides at one place  the controller. 
1 	action and perception 
this has far-reaching consequences. for example  in a two-armed robot  a central controller means that not only do both arms always have the same knowledge  but they each know that they do  they each know that they each know  and so on; this is called common knowledge in the logic literature. endowing the two arms with separate controllers breaks this common knowledge; the arms may have different knowledge  or may have the same knowledge without knowing that they do. our knowledge-level language allows us to identify the levels of knowledge required of different parts of the system  and thus to precisely quantify various degrees of centralization. 
　recall that our formal language allows nesting of the knowledge operator. for example  the sentence reads  aru 1 knows that aru 1 knows that is the case.  recalling that  knowledge  is merely a way of capturing a certain correlation between an aru's local state and the global state of the system  this means that the above statement concisely and elegantly captures a complicated relationship between the local state of aru 1  the local state of aru 1  and the system's configuration. knowledge operators can be nested more deeply  encoding even more complex relationships between states;  is perfectly legal. 
　before describing our algorithm we must explain the notion of a progress measure  which originates in the program verification and synthesis literature. the general idea is to assign values to states from some well-ordered set  i.e.  a set whose every subset has a minimal element  with the goal state assigned the minimal value. given a progress measure we can prove that a protocol performs a task by showing that each transition the protocol takes produces a new state whose value is smaller than that of the previous state.  erdmann  1  ingeniously employs these ideas to the problem of generating minimal sensors. he uses an existing protocol to generate a progress measure that assigns to each state the maximal number of steps that the protocol might take to achieve the goal. he then uses this progress measure to obtain sufficient sensing requirements for a task. we use his method as a  subroutine  in the algorithm. 
definition 1 a progress measure for an ard  c  t  is a function -  w  where w is a well-ordered set. 
　we can construct a progress measure given a protocol and a task. the idea is to see for each state what is the longest the protocol might take to lead the system to a 
　goal state. 
definition 1 given a task task  and a kbp p  the f u n c t i o n i s defined for each as 
the least upper bound on the number of steps along any execution of v from initial configuration {c} until the first time a configuration in g is reached  or as if no such upper bound exists or if a configuration is reached on which v is undefined. we say that makes 
progress on 	according to p if for any 
is a progress measure. 
we will also need the following: 


　we are now ready to present the algorithm. the idea behind it is as follows. it takes as its input a task de-
scription and a joint kbp for n-aru  and uses them to generate a progress measure over the configuration space of the ard. it also  nondeterministically  assigns an ordering to the sub-arus. next  it assigns to each 
sub-aru its projection of the original joint protocol. itthen sequentially goes through the sub-arus' protocols one at a time  adding to each just those additional knowledge conditions needed to ensure coordination with the preceding sub-arus. 
knowledge-based distribution algorithm input:  !  a task task l g   1  a joint kbp v for naru in disjoint form. 
output: distributed kbp for n-aru. 
1. construct the progress measure 
1. nondeterministically 	select an 	ordering over 
{1 ... n}. 
1. project v to each sub-aru. call the initial protocol of aru*  vk. 
1. let  repeat the following until r - n: 
 a  repeat sequentially for all knowledge conditions appearing in 
i. let  be the current condition examined; 
let . be the transition assigned to 
ii. set c - false 
iii. repeat for all  r - l -tuples of transitions  that aru1 ... arur 1 may theorem 1 let v be a joint kbp with a finite number of executions from i and with conditions 
where all   are about c in v performs the input task task i  g  iff the distributed kbp generated by the algorithm performs task l g . 
　several comments about the algorithm. first  different orders on the sub-arus will result in different distributed protocols. roughly  the later a sub-aru is in the ordering  the more it has to know  since it must coordinate its actions with the sub-aru preceding it. although we do not have a way of quantifying the 'ease' of each distribution  some ordering may result in requirements that are easier to achieve in practice than others. second  the output of the algorithm is highly sensitive to the input task. a joint protocol usually embodies much more knowledge  i.e.  coordination  than is actually needed for any given task. our algorithm uses the progress measure  and hence the task  to determine just how much knowledge to add to each sub-aru. finally  an implicit assumption is that the change to a distributed protocol does not affect the function init. 
　the distributed protocol we obtain is not necessarily minimal in its knowledge requirements and its properties  as well as those of other possible algorithms  deserve further investigation. however  it does offer a method for obtaining non-trivial specification of sufficient conditions for task distribution; these are the knowledge conditions of the distributed kbp obtained as its output. example 1  cont.  the discussion in the previous section suggests the following kbp for our task: if kg  stop armi  move arm1  ; if  move armi  stop arm1   where the proposition g and are defined as before. distribution. we start by running the algorithm on this protocol and the given task. we skip the construction of the progress measure  which is straightforward. after performing the first three steps we have: 
protocol for arm1: i f s t o p ; i f m o v e . protocol for arm1: if move; if stop. 
perform under conditions consistent with  alpha. progress when arm1 does move  is stop. stop is performed 　step 1 calls for revising arm1s protocol. the first condition there is  and both actions stop and move could be performed by arm1 under this condition  since positions 1 and 1 satisfy both g and  the only action by arm1 that makes 

a. if there exist transitions rr+i ... rn such that   where r   i   n  is assigned to- aru  under a condition consistent with and such that makes progress  according to task  i g    on all configurations in that possibly satisfy then set c to 
where is the knowledge condition in under which is performed  
iv. replace the condition then do in r's protocol by: 

 b  collect conditions corresponding to the same transition  i.e.  replace  then do r  by   
by arm1 under the condition k g. therefore  we must replace k1g with   which is equivalent to k1.k1g similarly  when we examine the action stop  performed under the condition  we find that it makes progress only when joined with move. therefore  we substitute the action 
i f o r w e obtain: 
protocol for armi: if 	  stop; 
protocol for arm1: if stop. 
sensitivity of distribution to task. consider the task of example 1  but now the table is heat-resistant  so that the second arm need not start moving precisely when the first one has stopped  and in addition  the second arm may hit the ob-
ject while still in motion. clearly the above distributed kbp will do  since the original task is more stringent than this one  but the reader may verify that  as a result of the optimization performed by the algorithm  we obtain the following kbp: 
protocol for a	r	m	i	:	m	o	v	e	. protocol 	for 	arm1: 	stop. 
sensitivity of distribution to the ordering of arus. we mentioned that the ordering of arus can make a difference. if arm1 was given higher priority than arm1  we would have 
	brafman and shoham 	1 

obtained the symmetric protocol: 
protocol for arm1: if stop. 
protocol for arm1: if 
　in a precise sense  which we do not have space to explain  both distributions embody the same amount of knowledge. however  from the pragmatic point of view one protocol might be vastly superior to another. for example  in some situations it may be easier to detect goal configurations from a distance. in that case the second protocol may be more appropriate  since detecting g would be easier for arm1. 
1 	discussion 
this paper makes two main contributions: 
  we present a formal model of robotics domains  a logical language for reasoning about the model  and define natural measures of the information complexity of robotics tasks and the informational abilities of robots based on the notion of knowledge. 
  we use the model and the language to provide a 
distribution algorithm for knowledge-based robotic protocols. 
　information  and more specifically sensing  are issues of central importance in robotics. the unreliability of sensors and the difficulty in reasoning about sensory information has lead some researchers to attempt to reduce the sensing requirements of tasks  e.g.  erdmann and mason  1; goldberg  1 . more generally  there has been increasing interest in understanding the inherent sensing requirements of a task.  erdmann  1  is one such effort which has had major influence on our work. erdmann argues that sensors should be constructed to provide sufficient information to choose an action that makes progress. he uses progress measures  discussed earlier  to do so. erdmann also talks about knowledge  and the semantics of his notion of information is very similar to the standard semantics of knowledge which we use. one contribution of our work is to supply a formal language that captures these ideas  which  as we have shown  has natural extensions. 
　another influential idea is donald's notion of information invariants  donald  1   in which 'reductions' play an important part. roughly speaking  system a can be reduced  to system b if we can use system b to obtain the same information that system a can obtain. in a longer version of this paper we discuss a natural notion of knowledge-based reduction that arises in our work  and tie it in with donald's work.1 
　motivating our investigation of task distribution was the work of  donald et a/.  1 . this work examines distribution of manipulation tasks  starting from a centralized protocol. their analysis of the information needed there shows that it pertains to the configuration of the manipulating robot w.r.t. the manipulated object. using our terminology  we can say that from their work it can be concluded that these tasks do not require two levels of knowledge for their distribution  i.e.  one robot does not need to know the state of the other . they are 
   1  updated versions of this work appear in url http://robotics.stanford.edu/users/brafman/bio.html 
1 	action and perception 
then able to obtain an asynchronous distributed protocol for such problems. 
　finally  the use of prioritization in multi-robot environments appears in a different context in  erdmann and lozano-perez  1 . there  prioritization is used to produce motion plans for multiple moving objects. 
　we believe that the marriage of knowledge representation and robotics is an extremely promising direction  which we intend to pursue. 
acknowledgment: we are grateful to bruce donald for numerous insightful discussions and comments  to joe halpern for many important suggestions and corrections  and to nir friedman for comments on previous drafts. this work was partially supported by afosr and nsf grants af f1-j-1 and iri-1. 
