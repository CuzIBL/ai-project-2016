 
we describe a general technique for expressing domain knowledge in constraint satisfaction problems  and using it to develop optimized parallel arc consistency algorithms for the solution of problems in the domain. the technique is applied to reduce the space complexity of the the massively parallel ac chip algorithm. results of the optimizations are shown for an ob-
ject recognition domain in which they reduce the complexity of the chip by many orders of magnitude. the technique can be applied analogously to reduce the time complexity of the uniprocessor arc consistency algorithm ac-1. 
1 introduction 
when a problem domain is known in advance  it is possible to exploit characteristics of the domain in order to simplify algorithms working within that domain. in ai this approach has often been used to generate unprincipled heuristic solutions whose generality is ill-defined. but more principled approaches to domain constraint exploitation also exist. for example  mackworth et al  show how hierarchic domains can be exploited in the solution of constraint satisfaction problems. 
　in this paper we show how to exploit domain information about arbitrary domains to generate improved arc consistency algorithms for constraint satisfaction problems  csp's . a typical csp is described by a set of nodes  a set of labels for the nodes  and unary and binary constraint predicates p and q. solving the constraint satisfaction problem involves finding a set of labels for the nodes that is consistent with the constraints. arc consistency is a technique for eliminating solutions that are locally inconsistent  mackworth  1  mackworth and freuder  1  mohr and henderson  
1 . we have previously developed a massively parallel algorithm for arc consistency that can be implemented directly in vlsi. this algorithm is called the ac chip  and is closely related to the uniprocessor algorithm ac1  mohr and henderson  1 . the ac chip finds arc consistent solutions to constraint satisfaction problems almost instantaneously  at the cost of a quadratic space complexity  swain and cooper  1 . 
this space complexity can be reduced by specializing 
1 	tools 
the algorithm to accept problems from a restricted domain of all possible csp's. to accomplish this  domain knowledge is expressed as meta-constraints on the constraint predicates p and q. we describe a circuit minimization algorithm  circ-min  that takes such a domain description and produces an optimized constraint satisfaction circuit for that domain. the algorithm performs a set of optimizations that may reduce the numbers of gates needed by orders of magnitude. we illustrate the process with results from an example domain we are studying  the recognition of tinkertoy objects from their compositional structure  cooper and hollbach  1  cooper  1  swain and cooper  1 . space complexity improvements for the ac chip algorithm can also be translated to time complexity improvements in ac-1. 
1 problem formulation 
a particular problem or class of problems is formulated as a constraint satisfaction problem by defining the elements of the general constraint satisfaction problem in terms of the specific application being investigated. that is  a set of nodes and a set of labels must be defined in terms of the problem at hand. likewise  the unary and binary predicates p and q must be defined in terms relevant to the application problem. 
　for illustrative purposes  consider as an example problem the recognition of tinkertoy stick figures such as the  horse  in figure 1. tinkertoy objects consist of disks attached by connecting rods of differing lengths. the rods are plugged into slots on the junction disks  figure 1 . in the tinkertoy recognition problem  structural descriptions derived from an image must be matched to stored descriptions in a model base. this matching problem is posed as a csp by using the nodes in the csp to represent the parts of the image description  and the labels in the csp to represent the parts of the corresponding model description. a unique solution to the csp then indicates a unique correspondence between the parts of the object and model. in the following examples  we define the rods and slots of the tinkertoy descriptions to be the primitive parts. 
　to complete the formulation of tinkertoy matching as a csp  the unary and binary constraints are defined in terms of properties of the nodes and labels as follows swain and cooper  1 : 
　a solution to the csp framed in this way constitutes a correspondence between a tinkertoy object and model. but these definitions provide no restrictions on the problem instances that can arise  so the resulting csp still requires a solution algorithm of complete generality. 
1 domain description 
if the space of input problem instances is in some way restricted  the potential for specialized and more efficient solution algorithms exists. a problem domain is just such a restricted set of problem instances. domains can be thought of as classes of problem instances with invariant properties. consider for example the tinkertoy matching problem as framed above. for all problem instances  it is never the case that a rod can match a slot. to exploit such characteristics in general requires a domain description language. 
　the purpose of the domain description is to represent invariant properties that hold over different problem instances. in constraint satisfaction problems  the nodes and labels are the entities that can have properties. in a tinkertoy problem instance  the node t might represent a 
　rod part  and thus have the property rod{i . if the node i is used to represent a rod part for all problem instances  rod i  is a property invariant for all problem instances. note that the mapping between tinkertoy parts and the nodes of the csp must maintain the invariant property 

invariants in a domain are  of course  represented by those meta-properties that evaluate to t or f. for example  rod' i  would be t if rod i  was true for all problem instances in the domain. many properties will not be invariant  and their meta-description will evaluate to u. 
   once the meta-terms describing the invariants are defined  it is a simple matter to define meta-predicates p' and q'. these are exactly the same as the unary and binary constraint predicates p and q  with meta-terms used in place of the object terms of p and q. the metadedicates are evaluated with kleene's three-valued logic !turner  1 . consider for example: 

domain invariants can exploited when the metapredicates p' or q' evaluate as invariant on some arguments. as a concrete example  consider the meta unary predicate p' i  x  for some i where rod i  is always true 
	cooper and swain 	1 


 rod' i  = t   and for some x where slot x  is always true. because a rod does not correctly correspond to a slot  the predicate p i  x  will evaluate to f for all problem instances  p' i  x  = f . this fact is known in advance of runtime  and can be exploited in developing the algorithms to solve the csp in this domain. we demonstrate this optimization with a particular parallel algorithm for arc consistency  the ac chip. 
1 the ac chip 
the ac chip is a massively parallel digital circuit that computes arc consistency in worst case time 1 na . the design is based upon the unit/value principle  barlow  1  ballard  1   and is limited to computing problems of maximum size n nodes and a labels. in short  the important parts of the design are an explicit representation of every value of the p and q predicates in flip-flops  and combinational circuitry that eliminates inconsistent label candidates by implementing the equation: 

there are two arrays of flip-flops  u i x  and v{i j x y  corresponding to the predicates p and q respectively. the circuit for one candidate labeling  one element of p i x   is given in figure 1. 
　the gates that implement the above expression are designated  from the inside of the expression to the outside  and gates a i  j  x  y   or gates b i  j  x   and gates c i x  and not gates d i x . they are labeled in figure 1. identical circuitry exists for all na flip flops in the 
1 	tools 

array representing p. more details concerning the ac chip may be found in swain and cooper . 
   for the matching problem we investigate below  a = n = 1. to solve such a problem the general purpose ac chip would require 1 million gates  already a very large chip! the domain optimizations described in the next section reduce this value to 1. 
1 optimizing the algorithm for the domain 
   if the meta-predicates p' or q' are t or f for some arguments  this translates to flip-flops which are always on or off in the ac chip arc consistency algorithm. systematically modifying the circuit to exploit the ramifications of these constants constitutes the domain dependent optimization of the algorithm. for example  if for some i and x p' i x  is f  the entire circuit of figure 1 is not required for the u i  x  element. the algorithm that performs these simplifications in general is given in figure 1  and is called circ min. 
　circ min consists of five phases: p elimination  q elimination  replace-by-hierarchical-gates  merge-withsame-inputs  and flatten-hierarchies. 
   p-eliminatton deletes any flip-flops u i x  that represent impossible candidate labels along with the trees of gates that feed into them. q elimination removes type a and gates that are not necessary and replaces each one by a wire when q' == true. these two optimizations are often the most important. 
   the purpose of the remaining three procedures is to factor out common sub-terms in the circuit and eliminate the redundant circuitry that computes them. the procedure replace by-hierarchicalgates replaces a single gate by a hierarchy of gates in the pattern set by 


the template or hier  for or gates  or and-hier  for and gates   figure 1 . these hierarchies are supplied by the user  and represent additional description of the domain. the hierarchy must correspond to natural groupings of the labels for hierarchical gate replacement to enable more wires to be eliminated in the merge phase. the procedure merge-with same-inputs replaces redundant gates by one gate  thus also eliminating redundant input wires   and wires the output appropriately to the multiple places it is used  figure 1 . finally  the procedure fiatten-hierarchy replaces hierarchies of gates of the same type with functionally equivalent multipleinput gates. flatten-hierarchy thus inverts the function of replace.by .hierarchical-gates where it is still possible after common subterms have been eliminated  figure 1 . it is reasonable to apply this function only to minimize the number of gates and wires. if other complexity measures  wire length or wire crossings  are important  the functionality of flatten-hierarchy might be undesirable. 
　the procedure recursive-delete deletes the gate that is its argument  and recursively deletes any gates which become redundant by its deletion because they have no inputs or no outputs. 
analysis and performance 
the correctness of the algorithm can be determined by noting that each transformation converts one or more gates into an equivalent set of gates. therefore  the function of the ac circuit is preserved throughout the algorithm. 
　a straight-forward analysis shows that the algorithm takes 1 a1  time and space. since the circuit reduction algorithm is run offline  the exact value of its complexity is not important. however  it should be noted that the algorithm does not need combinatorial resources; in fact it needs time and space linear in the original size of the ac circuit. 
   circ-min may reduce the complexity of an ac circuit by orders of magnitude. for instance  for tinkertoy do-

phases of reduction 
figure 1: example circuit optimization results tinkertoy domain problem: 1 rods  1 disks  1 slots reduction phases: 
1: p flip-flop elimination 
1: q flip-flop elimination 
1: gate merging 1: hierarchical gate substitution 
main problems with a number of disks d  number of rods r  and number of slots per disk s  the number of gates is reduced from almost 1 r + ds 1 to about 1d'1. for the tinkertoy domain with a maximum of 1 rods and 1 disks  each with 1 slots  this is a twenty-fold decrease  see figure 1 . 
　figure 1 gives part of the reduced circuit for a tinkertoy matching problem with at most 1 rods and 1 disks  with 1 slots per disk. the figure gives the input circuit to a single target candidate labeling - the match of slot 1 on disk 1 of the object  to slot 1 of disk 1 of the model. this candidate labeling is shaded in figure 1. 
   in the figure  the square and rectangular boxes represent the array of flip-flops u i x   holding p i x   and the array of flip-flops v i j  x y   holding q i j x y   respectively. with no optimizations  the circuit would look everywhere as it does in the lower left corner of the figure. but all four types of optimizations have been performed. p-elimination has eliminated u i  x  flip flops  and their associated circuitry  from the upper left-hand corner and lower right-hand corners of the u i x  array. q elimination has eliminated the v i j x y  flip flops associated with all of the slot-slot matches. slot-slot matches have been be divided into two groups - those compatible with the target candidate labeling  q' = t   and those incompatible with the target candidate labeling {q' = f . only those that are compatible have an output wire and can affect the consistency of the candidate labeling. because of gate merging the same or gates shown in the diagram that are receiving input from the slot-slot matches feed to many other slot-slot matches. hierarchical gate substitution has broken these or gates into a two-level hierarchy  with slots from the same disk 
	cooper and swain 	1 


figure 1: reduced circuit for slot-slot tinkertoy match 
1 	tools 

grouped together at the lower level. 
　we do not claim to be able to generate the optimal  most reduced  circuit for any problem. domain knowledge not expressed in the meta-predicates might be exploitable  cooper and swain  1   or subtle optimizations not discovered by circ min might be feasible. since  in general  circuit optimization is a difficult problem and must be approached heuristically  brayton et al  1   we do not expect there to be a tractable algo-
rithm that finds the optimal circuit. 
　because of the close relationship between the sequential arc consistency algorithm ac-1  mohr and henderson  1  and the ac-chip  the domain specific optimizations which reduce the space complexity of the ac chip algorithm can be used to reduce the time complexity of ac-1  by modifying ac-1 so that it simulates the optimized chip  cooper and swain  1 . 
1 conclusions 
we have shown how to exploit information about arbitrary problem domains in order to generate more efficient arc consistency algorithms for constraint satisfaction problems in the domain. the domain description is formalized as meta-predicates whose purpose is to represent invariant properties of domain problem instances. the meta-predicates are the input to an algorithm that produces an optimized arc consistency  ac  chip that may have space complexity many orders of magnitude lower than the general-purpose ac chip. because of the close relationship between the ac chip and sequential arc consistency algorithm ac-1  the time complexity of ac-1 can be reduced by the same technique. 
acknowledgements 
this work was supported by a canadian nserc postgraduate scholarship  by the air force systems command  rome air development center  griffis air force base  new york 1 and the air force office of scientific research  boiling afb  dc 1 under contract no. f1-c-1. the latter contract support the northeast artificial intelligence consortium  naic . 
