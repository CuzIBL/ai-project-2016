: this paper describes a man-machine theorem proving system at the university of texas  austin  
which has been used to prove a few theorems in 
general topology. 	the theorem  or subgoal  being proved is presented on the scope in its natural form so that the user can easily comprehend it and  by a series of interactive commands  can help with the proof when he desires. 	a feature called detail is employed which allows the human to interact only when needed and only to the extent necessary for the proof. 
     the program is built around a modified form of imply  a natural-deduction-like theorem proving technique which has been described earlier. a few examples of proofs are given. 
	1. 	introduction. 
     some workers in automatic theorem proving  including the authors  believe that it w i l l be many 
years  if ever  before machines alone can prove d i f f i c u l t theorems in mathematics. thus some  who hope to see machines used as practical assistants to pure mathematicians  have redirected their attention to man-machine theorem provers  1  1  1  and theorem proof checking  1  1  b . 
     the present paper describes a man-machine theorem proving system at the university of texas which 
has been used to prove a few theorems in general 
topology. 	our system is organized in the same general 
way as those of guard   luckham   and huet   but with many major differences. 	for example  luckham and huet use variations of resolution as their principal rules of inference whereas we use a 
modified form of imply   which is a natural-deduction-type method. 
     also our system displays formulas on the scope in a natural  easy to read  manner and has available a variety of interactive commands the user can employ to help with the proof. 	among these is a feature called detail which allows the human to interact only 
when needed and only as much as is required for the proof. 
　　　as yet this system has proved no new theorem in topology. the program is s t i l l in the state of development and it w i l l be sometime before we can determine whether it can materially help a mathematician prove new theorems. 
     this paper describes the f a c i l i t y   the interactive commands available to the user mathematician  the modified version of imply which is used  and gives a few examples of proofs of theorems. 
	1. 	the facility and interactive commands. 
　　　the f a c i l i t y consists of a datapoint 1 terminal connected to the cdc 1 computer via the ut interactive  time-sharing  system taurus . a 
mathematician  the user  sits at the terminal  types in a theorem to be proved and occasionally helps the program with the proof by providing information he feels is needed and answering questions the program 
poses. 
　　　the computer program consists of a large automatic theorem prover and a subroutine for interacting with the mathematician. the theorem prover  which is described in section 1  is written in lisp and is based on imply  see section 1 of   and the methods given in  and   it has the ability to prove theorems on its own; human intervention is used to increase its power and speed up proofs. 
the detail feature. 
　　　one of the principal difficulties with most manmachine provers is in knowing when and how the man should intervene. firstly the human may have trouble in reading and comprehending the text on the scope  and secondly  he doesn't know when the machine should be helped  and how much he should do. he does not want to make a lot of unneeded entries  and if he makes a mistake he wants to easily recover. 
     the f i r s t difficulty is solved in the system described here by employing the human oriented language imply and in displaying the theorem on the scope in a  pretty-print  form. this is further described 
below. 
　　　the second difficulty is handled by a procedure which allows the computer by itself to f i r s t try to prove the theorem  or subgoal . if it succeeds  then a l l is well  but if it fails within a prescribed timelimit  it prints on the scope the statement of the theorem and the word  failure  and awaits a command from the user. if he commands  detail  then it w i l l proceed  again  with its proof to the point where the current goal is split into subgoals. at that point it prints on the scope the statement of the new subgoal for which it failed and stops  and the whole process can be repeated. 
　　　at any of these stops the user can employ a variety of other commands such as defn  put  use  etc. 
  which are described below  to help with the proof. in this way he can easily isolate the difficulty and make only those entries needed by the machine in its proof. indeed he can start the machine on the proof of a theorem without enough hypotheses  reference theorems  and supply them only when and if they are needed in the proof. 
　　the following is a symbolic example for explaining the detail process. real examples are given in section 1. 
1 



powerful device. can prove. 
1 


to be printed. 
history. if commanded the program keeps a record  history  of each step it has taken in the proof of a theorem  including steps where the human intervenes 
but excluding unproductive steps. this history can be used by the mathematician later  upon the command  run history n   to rerun a l l or part of the proof without interruption  and to try if desired a different line of proof at any step. 
	1. 	the. machine prover 
     the prover used by this system consists mainly of a modified form of imply  section 1 of    with the addition of reduce  see p. 1 of    and other concepts from  and . 
　　　two of the principal differences in the present version is that imply is now the main routine  instead of cycle   and reduce is now applied inside imply. the split functions  p. 1 of   are an integral part of imply itself. also imply has been given a breadth-first search capacity  see below   and the back-up feature  see footnote 1 of   has been removed and replaced by a human back-up capability. imply. imply is a natural deduction type system which processes formulas in their  natural  form  see also  1  1  . it consists partially of a few rewrite rules such as 

which convert the expression being proved from one 
form to another. its main function is to split a goal into subgoals 

backchain  substitute equals  and forward chain  new 
addition . a fundamental part of imply is a matching routine  unification : if t is a most general 
unifier of 	a 	and 	a' 	then the subgoal 

is judged  true  with t being returned to be applied to further subgoals. 
reduce. reduce consists wholly of a set of rewrite rules which converts parts of formulas. it contains special heuristics for set theory  topology  etc. for example 


reduce helps convert expressions into forms which are more easily provable by imply. it also is a convenient place to store facts that can be used by the machine as they are needed. for example reduce returns  true  when applied to such formulas as  closed c1st a    open x    open   open interior a   etc. 
forward chaining. it seems that unrestrained forward chaining is a poor idea in automatic theorem proving 
because it tends to produce an excessive number of useless hypotheses  lemmas . consequently  our earlier versions of imply relied heavily on backward chaining. however  the use of the man-machine system  especially the put feature  on theorems in topology has brought to our attention the power of forward chaining in 
many proofs  especially in cases where the chaining expression is a ground  all constant  formula. we therefore have provided ground forward chaining as a 
new rule in imply. 
rule  forward chaining . if po is a ground expression  i.e.  contains no variables  which is an instance of p i.e.  there is a substitution t for which po = p t   then the goal 

is converted to the new goal 

     this rule need only be applied at the time something new is added to the hypothesis  such as when an 
expression  h  a b   is converted to  h a b   or when another forward chaining step has just been completed. 
     this rule has been further extended in the system to provide for so-called  peek forward chaining   
which works as follows: 
rule  peek forward chaining . if p is a ground expression  p. =  a has the definition  p  q   then the goal 

is converted to the new goal 

　　　note that the machine  peeks  at the definition of a to see if forward chaining is possible  but then returns a to its original form. this variation is very useful  see example 1   1 h1  . returning a to its original form makes the theorem much easier to 

*since reduce is now called from inside imply  it  reduce  must eliminate quantifiers and skolemize in the course of reducing formulas. as was explained in sec-

comprehend for the mathematician reading the display on the scope. 
     forward chaining s t i l l tends to clutter up the scope with useless hypotheses  and the user occasionally finds it useful to remove some of them by the command delete. more importantly the user  when he gives the computer a theorem to prove  need not l i s t all required lemmas but can give them only as they are aeeded in the proof  and thereby can eliminate much 
irrelevant forward chaining. 
breadth-first-search. one of the difficulties with the previous version of imply was that its search was essentially  depth-first.  for example  in proving 

it would back chain off of 

tion 1 under defn  the exact form of this skolemization depends on the position of the expression in the theorem. 
1 
p xo.  
f i r s t . 
. 
1 
1. examples. 
　　　the examples we have explored are mostly from kelley's general topology   though in fact any reasonably precise text would do. 
　　　we have taken examples from various parts of the book. example 1 is a theorem about paracompactness. the examples tried so far have been about just one topology. this is convenient since it allows fixed symbols t and x for the topology t on the space x. the space x is assumed to be non-empty. the definitions used by the computer are stored  permanently  in its memory. 
     the theorem labels used in the following examples are also those used by the computer. 	they help inform the user where he is in the proof. 	for example  if a goal has theorem label  1  and it splits  then the two parts w i l l be labeled  1 1  and  1 . 	if 
back chaining is used on a theorem labeled l  then the two steps are labeled  lb  and  lh . 
     the presentation on the scope is always in the  pretty-print  format depicted on page 1. but to conserve space we have here shown our examples in a 
more 	compact 	form  and some lines of the proof are omitted. 
　　　in this presentation  an  h  at the left indicates a human input  an  ed  indicates an editorial comment  and an  m  indicates machine output. the 
m's are omitted in our description after the first 
few lines of each example. 
in the examples 

1 
1 

ed in this writeup we have denoted by go the skolem expression g f' . the 
machine retains its complete skolem expressions but prints only  g  on the scope for ease of reading. 
ed since the new entry  -   in the hypothesis is an implication  and since f' has been given a value  the machine f i r s t tries proving ocf' before proceeding. this is done in  1 h  below. if it succeeds 
it w i l l then retain the hypothesis 

1 



　　　many of the abilities which are built into this man-machine facility have been developed only after a period of t r i a l and error. in fact the reason for 
many of these is to provide for more ease in checking 
out and changing the program. we expect the program to continue to change as it is tried on more and more examples  hopefully evolving into a system which 1. automatic theorem proving  mit ai memo no. 1  october  1. 
raymond reiter  the use of models in automatic 
theorem proving  dept. of computer science  
university of british columbia  september  1.      this work was supported in part by nsf grant gj-1 and nih grant 1 gm 1-1. 
