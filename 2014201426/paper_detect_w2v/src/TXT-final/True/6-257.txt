 
this paper* discusses the specifics of planning in multiagent environments. it presents the formal framework mapl   maple   for describing multiagent planning domains. mapl allows to describe both qualitative and quantitative temporal relations among events  thus subsuming the temporal models of both pddl 1 and pop. other features are different levels of control over actions  modeling of agents' ignorance of facts  and plan synchronization with communicative actions. for single-agent planning in multiagent domains  we present a novel forward-search algorithm synthesizing mapl's partially ordered temporal plans. finally  we present a general distributed algorithm scheme for solving mapl problems with several coordinating planners. these different contributions are intended as as step towards a simple  yet expressive standard for the description of multiagent planning domains and algorithms. such a standard could in the future allow cross-evaluation of multiagent planning algorithms on standardized benchmarks. 
   in this paper  we discuss the specific properties of planning in multiagent systems  mas . with the term multiagent planning  map   we denote any kind of planning being performed in multiagent environments  meaning on the one hand that the planning process itself may be distributed among several planning agents  but also that individual plans can  and possibly must  take into account concurrent actions by several executing agents. 

figure 1: a multiagent planning problem 
   as a motivating example  fig. 1 shows a simple map problem as appearing in the robocuprescue challenge . two autonomous agents  police force p and fire brigade f  are working in a city devastated by an earthquake. while f's goal is to extinguish all burning houses  it is p's capability and goal to clear the blocked roads. p's position being loco we will assume him being unaware of r1 and r1 being blocked. the agents' actions have specific durations that may be exactly known only at execution time  sometimes because of specific execution parameters of the agents  sometimes because of intrinsic unpredictability of the environment: while  for example  moving through the town may take between 1 
   * definitions of the formal semantics of our multiagent planning language as well as the algorithms for single and multi-agent planning are given in the long version of this paper . 
poster papers 
and 1 minutes and depend only on the map distance and speed of the agent  extinguishing a fire may take 1 to 1 hours depending on conditions unknown to the agents. 
this trivial example shows several general features of 
map problems and plans:  1  agents may be unaware of parts of the world state  p does not know whether r1 is blocked .  1  concurrent acting is central to map  p can move to locl and start clearing r1 while f is extinguishing hi  although both agents using the same road at the same time may be prohibited to avoid collisions . modeling concurrency necessitates  1a  a description of which events may occur concurrently and which not   1b  metric time for realistic descriptions of action durations and their relations  but  1c  synchronizing on actions of unknown  at least to some agent  duration demands qualitative use of time  e.g.  after p has cleared r1  . a specific usage of qualitative time is 
 1  synchronization on communicative acts  as in  f moves to loc1 after p has informed him that r1 is clear . 
   in their plans  agents must take other agents actions into account: f may  exploit  p's clearing of r1 in his own plan but must also assure that he does not try to use a road that is also used by p at the same time. especially   1  cannot control occurence or duration of other agents' actions. 
   to address the representation problems  1 - 1  we introduce the multiagent planning language mapl   maple  . instead of propositional state representations mapl allows non-boolean state variables  cf. also  . to model feature  1  each state variable may have the special value unknown  thereby avoiding representation of belief states as sets of possible states. a number of other advantages comes with the introduction of state variables; especially  for feature  1a   an intuitive definition of mutual exclusivity  i.e. the impossibility to execute some actions concurrently  cf.   can be given that describes mutexes as read-write locks on state variables. according to this perspective  distributed planning can then be seen as detection or  even better  prevention of possible read-write locks before execution. 
   mapl's temporal model allows to combine  1b  quantitative and  1c  qualitative temporal information in plans  thus subsuming both the purely metric temporal model of pddl 1  and the purely qualitative model of partial order planning . at its core mapl represents a multiagent plan as a simple temporal network  in which each durative action is modeled by start and end events  possibly extended by invariant conditions. in the stn  both action durations and qualitative ordering relations are treated as constraints represented by closed  semi-open or open intervals. in so doing  not only can imprecisely known action durations be represented as intervals of the form  but qualitative con-
straints like  after  can be described by  semi- open intervals 
1 
like  1   . fig. 1 shows f's plan for the problem of fig. 1  the interval  1  oo  being represented as  . 
   another new concept shown in fig. 1 is  1  the use of speech acts as reference events for plan synchronization. on the one hand  this allows agents to refer to facts  especially those achieved by others  the change of which they do not influence or witness themselves. on the other hand  as explained later  speech acts allow agents to reveal only the minimum of information about their plans needed for coordination. 

figure 1: f's plan  including a communicative action by p  
   a plan is only fully specified with  1  a control function describing which of the agents  or the environment  controls the occurence of each event. with this function we can describe  e.g.  that a specific agent is allowed to add and remove an action from his plan  control of the start event   but has no influence on it its duration  end event controlled by the environment . during planning  having control of an event or not fundamentally changes its possible use and evaluation. for example  being able or unable to control the duration of an action will lead the planner to a fundamentally different heuristic evaluation of its use. 
   for a plan to be executable  it must be both temporally and logically consistent. the former criterion is reducible to consistency of the underlying stn. the latter  logical consistency  can be defined similarly to pop as the plan having no open conditions and no unsafe links  with the additional criterion that the plan must ensure that no mutex events may occur concurrently. for a plan to solve a certain agent's problem it must achieve his goals and also be consistent with the control function  i.e. only constraints involving events controlled by the respective agent must have been tightened by the planner. how is planning in mas carried out  it is obvious that the easiest way is to find a plan alone: assumed that f knows about p s capabilities  f can find a plan that solves his problems. even if f does not know about p's concrete actions  this plan will provide clues about where help is needed and thus triggers cooperation. we see that  1  the capability for single-agent synthesis of multiagent plans is a basic requirement for map. we have developed a plan-space forwardsearch algorithm that can be used with any standard forward branching scheme and arbitrary plan metrics. we present two such metrics  the well-known makespan and the new minmaxmakespan  the latter of which extends the former by assigning maximal possible duration to uncontrolled durative actions. we also describe how heuristic forward planning in the style of ff  can be extended to find mapl plans. the current simple algorithm is sound  but not complete  i.e. there is a set of clearly distinguished mapl problems it cannot solve yet. we are working on a sound  yet more complex version of the algorithm. 
   when several agents are planning and acting individually in a common environment  they will probably run into one of the following problems:  1  they won't be able to find individual plans solving their problems or  1  the plans found will conflict at execution time. map literature has mostly treated only problem  1   implicitly assuming that plans can be found and that therefore separating planning from coordination is possible. in our opinion  coordination during the planning phase is indispensable in the case of problem  1  and advantageous for problem  1 . we have therefore developed a general distributed planning algorithm that uses single-agent planning to synthesize partial plans and to trigger cooperation and coordination efforts as early as possible. 
   a key concept is the use of a responsibility function that assigns to each state variable an agent managing and controlling its changes over time. this agent will detect read-write conflicts in the agents' plans  i.e. possible execution conflicts  but will also provide information when another agent cannot achieve a  sub goal involving that variable. in the basic form of the algorithm  the responsibility is static  but similar to approaches in distributed csp research  we will relax this assumption in future work. the idea of the algorithm is simple: in a reachability analysis the planning agent detects goals involving state variables he does not know about  cannot manipulate or could if only some earlier condition were satisfied. he contacts the responsible agents to receive more information or delegate a subgoal concerning the variable. the responsible agent answers the question or adopts a temporary goal to help the asking agent. 
   all contributions of this paper aim at clarifyfing the specific representational and algorithmic needs of map research. we hope that our representation will allow to conveniently describe diverse map domains for which researchers can propose and cross-evaluate algorithmic approaches just as diverse  thus promoting the field of multiagent planning. 
