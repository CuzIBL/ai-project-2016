 
strobe is a system that provides object-oriented programming support tools for interlisp. it offers a primitive foundation with which more complex structured object representation schemes can be constructed. strobe implements multiple resident knowledge bases  tangled generalization hierarchies  flexible inheritance of properties  procedural attachment  and event-sensitive procedure invocation. 
1. introduction 
the goal of designing second generation expert systems that are able to reason from causal models as well as the familiar compiled expertise encoded in rules is dependent on flexible tools for representing knowledge. in recent years there has been considerable interest in structured object representation. within this framework  a programmer can encapsulate packets of knowledge and link them together via a variety of relationships to form knowledge bases. inheritance of properties through generalization hierarchies is standard. 
a problem facing the representation system designer is that many decisions he might make are implicitly biased toward a particular problem domain. the result is a system that may be too brittle to be easily applied to other domains. one approach to the problem is a low-level system that imposes a flexible structure and provides tools that allow a user to adjust the operation of the system and to embed it in higher-level systems that offer increased structure. 
this is the motivation for strobe  a low-level system for support of structured objects in interlisp. it is to be viewed more as an augmentation to interlisp that simplifies programming with structured objects than as a 
powerful representation system. in this light  major concerns in its design have been flexibility and efficiency. mechanisms are provided through which a user can encode in his knowledge bases explicit information to adjust the skeletal strobe structure in a manner specific to particular applications.1 
1. strobe: overview 
a strobe knowledge base is a collection of objects whose characteristics are elucidated through a number of slots. alternatively it can be viewed as a semantic network of nodes and unidirectional links. 
1. rll  greiner  1 has a similar flavor but emphasizes selfdescription over efficiency. glisp  novak  1 places more emphasis on efficiency and less on flexibility. 
 defobject  object   type  
　　　　　　　 generalizations   groups   slots   constructs a new  object  whose  type  is one of the standard strobe object types  e.g.  class or individual .  generalizations  is one or more objects of which  object  is to be a specialization and from which it will inherit properties.  groups  is one or more collections of objects to which  object  should be added. groups are not related to generalization hierarchies.  slots  is a list of object descriptors to be initially associated with  object . additional slots may be dynamically defined. each slot is specified by a set of facets as follows. 
  name    facetname1  .  facetvalue1   ... 
  jaeetnamen  .  facetvaluen   . 
the dune object below is defined to be a specialization of 
coastal-barrier-island. it denotes a class of objects as opposed to a particular example of a coastalbarrier-island. it is defined to be a member of the 
siliciclastic-rocks and geology groups. three slots are defined: pattern  cross-section  and planview. 
 defobject dune class coastal-barrier-island 
 siliciclastic-rocks geology  
  pattern  datatype. object  
 value. green-over-blue   
 cross-section  datatype. bitmap   
 plan-view  datatype. bitmap     
strobe defines a value facet for every slot. this facet effects the linkage from one node in the network to another. the contents of the value facet is the node  or list of nodes  pointed to by the slot. for dune  the value of the pattern slot is to be initially filled with the object green-over-blue. 
a datatype facet is also defined for every slot. not all nodes in a strobe knowledge base need be objects. they may be lisp functions  s-expressions  bitmaps  arrays  and so on. these nodes have the characteristics that:  i  they have no additional strobe structure  and 1 they are leaf nodesthey do not point to any other nodes. the datatype facet of a slot points to an object that specifies how the node pointed to by the value facet is to be interpreted.1 in the dune object  the value facet of pattern is to be filled with an object. the value facets of cross-section and plan-view are to be filled with bitmaps. 
1. this idea was used in units  stefik  1. 

1 r. smith 
figure 1 shows the screen of the xerox 1 running the 
strobe editor.1 barchan-dune  a specialization of dune  is shown. it has inherited the slots of dune and the value facets of the cross-section and plan-view slots 
have been filled with bitmaps. 
1. inheritance 
if necessary  strobe performs a run-time breadth-first search through the ancestors of an object to find the contents of a facet of a slot in that object.1 the ancestors actually only provide a default for inheritance. every strobe slot access function allows the user to specify a partial path of objects to use as starting points for a search for inherited properties. this generality enables construction of objects that inherit slots from objects that are linked to them by relationships other than generalization  e.g.  parts . 
1. procedural attachment and indirect procedure invocation 
a procedure may be associated with a slot facet and invoked indirectly by sending a strobe message to that facet. for example  a message sent to the value facet of the build slot of a box object will cause the buildbox procedure to be invoked. many other objects may have build slots-filled with procedures specific to the objects themselves. 
if the facet to which the message is addressed is not found in the slot of the object  even after an inheritance search   then strobe reroutes the message to the object that is the datatype for the slot. this indirection enables a programmer to encapsulate information about how to deal with actions that are generic to a datum of a particular datatype. 
1. event-sensitive procedure invocation 
strobe checks for procedures to be invoked whenever one of a number of significant events occurs. this gives a user considerable freedom to adjust the basic mechanisms of the system in ways that are specific to particular objects or classes of object. 
object creation/deletion procedures: invoked after an object has been created or before an object is deleted. they can be used to perform specialized initialization or cleanup. for example  when an instance of test is created  
filltestslots is invoked to initialize its slots. upon deletion  
summarizetestslots is invoked to summarize information contained in the slots before it is lost. 
 defobject test class root nil 
  object-creation-procedures 
 datatype. lisp  
 value filltestslots   
 object-deletion-procedures 
 datatype. lisp  

 defobject box class  geometric-structure icon  nil  value summarizetestslots       build  datatype. lisp  
 value  lambda  object slot facet width height  
 buildbox width height       


slot creation/deletion procedures: invoked after a slot has been created or before a slot is deleted. in the following example  the functions addobjecttoslot and 
removeobjectfromslot maintain an association list that indexes a knowledge base by slot name.  strobe provides a mechanism that enables a user to store such a data structure with a knowledge base.  
 defobject index class root nil 
  slot-creation-procedures 
 datatype. lisp  
 value addobjecttoslot   
 slot-deletion-procedures 
 datatype. lisp  
 value removeobjectfromslot     
slot access/alteration procedures: invoked before and after every attempt to access or alter the value of a slot. in the following example  the value of the area slot is computed from the width and length slots via the procedure found in the access-procedures facet. the keyword after indicates that the procedure should be fired after the value has been retrieved via lookup. sourceobject is the object in which the slot was found  perhaps via inheritance   and val is the value retrieved via lookup  ignored in this example . getvalue is a strobe function for accessing the value of a slot.1 
 defobject composite class root nil 
  width  datatype. expr   value. 1   
 length  datatype. expr   value. 1   
 area  datatype. expr  
 access-procedures 
after 
 lambda  object source-object slot val  
 itimes  getvalue object 'width  
 getvalue object 'length        
in the following example  the value of the si slot can only be filled with bitmap or expr. this is accomplished with a restrictions facet and an alteration procedure that enforces the restriction.  if a procedure fired before the new value is placed returns *fa1l*  then placement of the new value is prevented.  val is the new value to be placed. getfacet  is a strobe function for accessing a facet. 
 defobject ri class root nil 
  si  datatype. object   restrictions bitmap expr  
 al tera tion-procedures 
before 
 lambda  object source-object slot val  
 cond   fmemb val 
 getfacet  object slot 'restrictions   
val  
 t ''fail*        
in the following example  the before procedure associated with the parts and partof slots of 1v redefines the operation of placing a value in those slots. the new operation adds an object without duplication to a list of objects. it also sets a variable  newvalue  for use by the after procedure. 
r. smith 1 
that procedure sets up a back pointer. if object part i is added to the parts slot of object 1  then 1 is added to the partof slot of parti. note that this kind of symmetric operation must be carried out after the new value has been placed to avoid infinite regress. it demonstrates the utility of both before and after procedures.1 
 defobject tl class root nil 
  parts  datatype. object  
 altera tion-procedures 
 before 
 lambda  object source-object slot val  
 cond   null  slotvaluep object slot   
 setq newvalue val   list val   
  fmemb val  getvalue object slot   
 setq newvalue '*fail*   
 t  setq newvalue val  
 cons val  getvalue object slot       
 after 
 lambda  object source-object slot val  
 cond   neq newvalue '*fall*  
 putvalue new value part of object        
 par tof  da ta type . object  
 altera tion-procedures 
 before...   identical to parts procedures ...   
 after 
 lambda  object source-object slot val  
 cond   neq newvalue '*fail*  
 putvalue newvalue parts object          
slotvaluep returns nil if no value has been set for a slot. putvalue is a strobe function for setting the value of a slot. 
1. other strobe features 
  multiple resident knowledge bases: a user may have several knowledge bases in memory at the same time. 
  synonyms: all strobe functions resolve references to synonyms for objects and slots. 
  instantiation from complex descriptions: strobe uses the description object type to specify templates for instantiating class objects. when an object whose slots contain descriptions is instantiated  strobe creates new objects for each of the descriptions and resolves interobject references. 
  standard interlisp source files: strobe is integrated with the interlisp file package and constructs knowledge base files in standard source file format. 
  object-centered memory management: a user can selectively page objects to secondary storage.1 

1. in general  a list of procedures may be invoked on slot access or alteration. 
1. the loops  bobrow  1  active value effectively corresponds to the strobe before alteration procedure. there is no direct correspondence to the after procedure. 
1. this is useful on a limited address machine like the dec-1. it has not yet been needed on the xerox 1. 
1 r. smith 
1. applications 
strobe has been used to structure information about data and control flow for two large well-log interpretation programs. the system has also been used to construct a two-dimensional equation prettyprinter as part of the interface to an automatic programming system for well-log interpretation software. in future it will be used to represent the 	domain 	knowledge  	software 	knowledge  	and intermediate stages of program development. 
strobe has been used as a rapid prototyping tool in the development of graphics facilities by schlumberger's houston interpretation engineering staff. these facilities are intended to generate the graphics for all commercial schlumberger products. 
finally  as an experiment in adjusting the strobe skeleton in the manner shown in this paper  a basic implementation of the class and inheritance structures of smalltalk-1 was developed. it required the definition of a small number of objects  slots  and attached procedures and was completed in a few days.1 
acknowledgements: the design of strobe has benefited greatly from its use by stephen smoliar  eric schoen  david barstow  roger duffey  and scott marks. gilles lafue provided a number of helpful comments on this paper. the local network support provided by stanley vestal  eric schoen  and ed dolph has simplified the workstation implementation. the intellectual stimulation of object-oriented programming discussion group and the managerial support of james baker are also appreciated. 
