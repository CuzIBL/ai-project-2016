 
     besides a definition of  trivial  theorem  this paper presents a sketch of our methodology for the generalization of recurrence proofs on  trivial  theorems but that lead  in a context of automatic theorem proving  to very lengthy  or even impossible to achieve  proofs. this paper reduces to a description of a detailed example  we hope to make clear that our methodology is of a much wider field of application. 
	i 	introduction 
     in the field of theorem proving by induction  the need for an efficient generalization system has been expressed several times  1 1 . the methodology presented here differs from the one already 
used in existing systems  1 by two main features. first  our heuristics are driven by example proofs run on particular values of the variables  in this  
we follow  1 . second  instead of a progressive generalization expected to eventually reach a state where the theorem is provable  we go the other way round: we  savagely  generalize the theorem into an expression which is  in general  false  and use a progressive particularization expected to eventually reach a state where the theorem is true  and provable . this coincidence of truth and provability of a progressively particularized expression is implicitly part of our definition of  triviality . wards tc fails  we analyse the conditions at which it could succeed. these conditions are considered as recursively generated new theorems to be proven by the same methodology. 
ii.1 definition of  trivial  
     the theorems we are able to prove are trivial in the following sense: a- if the proposition to be proven is false  it must  quickly  evaluate to false for the first particular values of its variables. in the list domain these values are nil   cons a nil    cons b  cons a nil   ... where a  b are atoms. b- when the matching of t towards tc fails then it often happens that the conditions which express how to avoid this failure are a system of equations  of the diophantine type  among a set of new variables.  trivial  means also here that this system is  easy  to solve. the words quoted above  i.e   quickly  and  easy  can have different definitions. in our system  we have chosen the following:  quickly  is  at once   an untrue expression must evaluate to false for the first element of the wellfounded ordering  and  easy  means that only equality relationships linking the variables directly are allowed. notice that even with that ground definition of trivial  we are able to prove  trivial  theorems the proof of which is very difficult. 

 f1 x y  type : list 
 f1 nil y  - y 
 foo  cons a x y  -  foo x  cons a y   
 eqn x y  type : boolean 
 eqn zero zero  = true 
 eqn  succ x  zero  = false  eqn zero  succ y   = false 
 eqn  succ x   succ y   =  eqn x y  
iv description of our methodology 
     it consists of four steps  the first two of which will be exemplified by the proof of: 
t=  eql  app  rev x   foo x ilil   
 foo  app x x  nil  . 
assuming that the basis case has been proven  a recurrence proof of t consists of an induction step done by the substitution x- - cons a x  and the rewritings of section i i i . this leads to: tc=  eql  app  app  rev x   cons a nil   
 foo x  cons a nil    	 foo  app x  cons a x   
 cons a nil    and the proof of tc under the hypothesis that t is true is not at all trivial. 
iv.1 step one 
     we  savagely generalize the variables of t  giving a different name to all of them. the obtained expression  named tl  is generally wrong. we particularize tl so that it will eventually take the form tl which evaluates to true  for the first 
values of its variables . as in section i i . 1   we compute tcl and if there exists a substitution a: 1o tl = tcl  the problem is solved. otherwise  we have to use step 1. 
example: the theorem t given above is savagely generalized to: 
tl-  eql  app  rev xl   foo x1 nil    foo app x1 x1  nil  . 
let x i l   l i 1  be an atom  we give to each variable xi the value  cons xil nil  and look for the conditions on the xil insuring that tl takes the 
value true. the expression of t1  c1ns xil nil   
is equal to: 
 eql  app  rev  cons xil nil   
 foo  cons x1 nil  nil    foo  app  cons x1 nil   cons x1 nil   nil  . 
a call - by - name evaluation of the definitions given in section 1 leads to evaluate first the underlined functional symbols  so that tl   cons xil nil    becomes 
-  eql  app  app  rev nil   cons xil nil   
 foo  c1ns x1i nil~ctil   
 foo  cons x1  app nil  cons x1 nil    nil  . 
-  eql  app  app nil  cons xil nil   
 foo  cons x1 nll  nil   
 foo  app nil  cons x1 nil    cons x1 nil   . 
-  eql  app  cons xil nil   foo cons x1 nil  nil    foo  cons x1 nil   cons x1 nil   . 
=  eql  cons xll  app nil  foo  cons x1 nil  nil     foo nil  cons x1  cons x1 nil    . 
y. kodratoff and j. castaing 1 
-  eql  cons xll  app nil  foo  cons x1 nil  nil     cons x1  cons x1 nil   . 
-  and  eqn xll x1  
        eql  app nil  foo  cons x1 nil  nil    cons x1 nil   . the evaluation stops at this point since xll and x1 are variables and we cannot evaluate  eqn xll x1 . we therefore state that  eqn xl 1 x1  is a condition for tl   cons xil nil   evaluating to true. we replace  eqn xil x1  by true and the evaluation proceeds on  and is left to the reader  up to the result: 
-  and  eqn x1 x1  eql nil nil  . in the same way as above  we must have  eqn x1 x1 .from these conditions  we deduce that xl = x1 
x1 = x1 which are put in tl in order to obtain t l : 
t l -  eql  app  rev y   foo z nil    foo  app z y  nil  . 
we leave to the reader to verify that tl cannot be trivially proven by induction on y  or z . we therefore proceed on to step 1. 
iv.1 step two:obtaining new theorems. 
     broadly speaking  we apply again the same strategy which is too much generalizing and then finding for particular values of the variables the conditions which bring the generalization to true. in this step the generalization is made according to the following heuristics: the matching of tl to-
wards tcl fails  and we mark the terms in tl that do not contain the recurrence variable and fail to match with tel. each marked term is generalized to a different variable vl ...vi and tl takes the form t1. in t1  we give particular values to the variables different from the vi's  and find conditions on the vi's so that these particular expressions evaluate to true  as in step 1 . our triviality condition  insures  that the system of equations linking the vi's is easy to solve. the solution is 
put into t1 which becomes t1. if t1 does not match tc1  we recursively apply step 1 to t1  obtaining t1... . this step stops in two cases: either the theorem is proven or the failure of the matching is the same in ti and ti+1. in the last case we 
proceed on to step 1. 
example: choosing z as the inductive variable  so that z is replaced by  cons a z  into tl tl=  eql  app  rev y   foo z nil   
          foo  app z y  nil    we obtain tcl*  eql  app  rev y   foo z  cons a nil     foo  app z y   cons a nil   . the r-matching of tl and tcl fails because it would lead to the substitution nil  - cons a nil   which is forbidden since the left part of a substitution must be a variable. as above explained  we replace 
the two occurences of nil by two different variables vl and v1. we have 
t1-  eql  app  rev y   foo z vl    foo  appzy v1   giving to y and z the value nil we obtain  as in step 1  the condition  eql vl v1  which is put into t1 in order to give t1: 
t1 =  eql  app  rev y   foo z u    foo  appzy u  . the reader will find that inducting on z  which is replaced by  cons a z  in t1   one obtains tc1 such that there exists a substitution a such that 
oot1 = tc1  1-=- cons a u . this proves the induction step for t1  because u is not the induction 

1 y. kodratoff and j. castaing 
 castaing j. and y. kodratoff   generalisation de theories . actes reunion grossem  poitiers  1   1. 
  1| degano p.  j. castaing and y. kodratoff   inductive hypothesis extracted from proof traces' ' atti aica 1  1. 
i 1l degano p. and f. sirovich   inducting function properties from computation traces . ijcai-1  1 and  inductive generalization and proofs of function properties   comp. ling.  1   1  1. 
