
the weighted csp framework is a soft constraint framework with a wide range of applications. most current state-of-the-art complete solvers can be described as a basic depth-first branch and bound search that maintain some form of arc consistency during the search. in this paper we introduce a new stronger form of arc consistency  that we call existential directional arc consistency and we provide an algorithm to enforce it. the efficiency of the algorithm is empirically demonstrated in a variety of domains.
1 introduction
weighted constraint satisfaction problems  wcsp  is a wellknown optimization version of the csp framework with many practical applications. recently  the celebrated arc consistency property has been generalized from the classical csp framework to wcsp  cooper and schiex  1; larrosa and schiex  1 . there are three known generalizations: ac*  fdac* and fac*  all of them collapsing to classical arc consistency in the csp case. in  larrosa and schiex  1  it was shown that maintaining fdac* during search was usually the best option.
¡¡in this paper we introduce a new form of local consistency called existential directional arc consistency  edac* . we show that edac* is stronger than fdac* and we introduce an algorithm to enforce edac* that runs in time o ed1 ¡Ámax{nd  }   where e  n and d are the number of constraints  variables and domain values  respectively;   is the upper bound of the wcsp instance  to be defined later . the main use of edac* and its associated filtering algorithm is to embed it into a complete depth-first branch and bound solver that maintains edac* at every visited node. we have experimentally evaluated this idea on random maxsat  max-csp  and uncapacitated warehouse location problems. we observe that maintaining edac* is never worse than maintaining fdac* and  in many instances  it is orders of magnitude better.
1 preliminaries
valuation structures are algebraic objects to specify costs in valued constraint satisfaction problems  schiex et al.  1 .
they are defined by a triple s   where e is the set of costs totally ordered by . the maximum and a minimum costs are noted   and ¡Í  respectively. ¨’ is an operation on e used to combine costs.
¡¡following  larrosa and schiex  1   the valuation structure of weighted csp  wcsp  is  s k =  1..k  ¨’ ¡Ý  where k   1 is a natural number; ¨’ is defined as a¨’b = min{k a+ b}; ¡Ý is the standard order among naturals. observe that in s k   we have 1 = ¡Í and k =  . it is useful to define the subtraction	of costs. let a b ¡Ê  1..k  be two costs such that a ¡Ý b 
	a b	:	a 1= k
a b = k : a = k
¡¡a binary weighted constraintsatisfaction problem  wcsp  is a tuple p =  s k  x d c . s k  is the valuation structure. x = {x1 ... xn} is a set of variables that we will often call by just their index. each variable xi ¡Ê x has a finite domain di ¡Ê d of values that can be assigned to it.  i a  denotes the assignment of value a ¡Ê di to variable xi. c is a set of unary and binary weighted constraints  namely  cost functions  over the valuation structure s k . a unary weighted constraint ci is a cost function ci xi  ¡ú  1..k . a binary constraint cij is a cost function cij xi xj  ¡ú  1..k  we assume the existence of a unary constraint ci for every variable  and a zero-arity constraint  i.e. a constant   noted c   if no such constraint is defined  we can always define dummy ones: ci xi  = ¡Í  c  = ¡Í .
¡¡when a constraintc assigns cost    it means thatc forbids the corresponding assignment  otherwise it is permitted by c with the corresponding cost. the cost of an assignment x = x1 ... xn   noted v x   is the sum over all the problem cost functions 
v x  = ¡Æ cij xi xj ¨’ ¡Æ ci xi ¨’c 
	cij¡Êc	ci¡Êc
an assignment x is consistent if v x     . the usual
task of interest is to find a consistent assignment with minimum cost  which is np-hard. observe that wcsp with k = 1 reduces to classical csp.
	co=1	co=1
	i	j	i	j
aa
bb
	a 	b 
figure 1: two equivalent wcsp instances    = 1 .

algorithm 1: algorithms to propagate costs.

function prunevar i  : boolean flag := false ;
foreach a ¡Ê di do if  c  ¨’ci a  ¡Ý    then di := di  {a} ; flag := true ; return flag ;
procedure projectunary i  ¦Á := mina¡Êdi{ci a } ;
c  :=c  ¨’¦Á ;
foreach a ¡Ê di do ci ;
procedure project i a  j ¦Á  ci a  :=ci a ¨’¦Á ;
foreach b ¡Ê dj docij ;
procedure extend i a  j ¦Á 
foreach b ¡Ê d doc  a b  :=c  a b ¨’¦Á ;
example 1 consider the problem depicted in figure1.a. it has two variables i  j with two values  a b  in their domains. unary costs are depicted within small circles. binary costs are represented by edges connecting the corresponding values. the label of each edge is the corresponding cost. if two values are not connected  the binary cost between them is 1. in this problem the optimal cost is 1 and it is attained with the assignment  b a .
1 some local consistencies in wcsp
two wcsps defined over the same variables are said to be equivalent if they define the same cost distribution on complete assignments. local consistency properties are widely used to transform problems into equivalent simpler ones. in general  constraints can be given explicitly as tables of costs  or implicitly as mathematical expressions or algorithmic procedures. for simplicity in our exposition  we will assume the explicit form. this is done without loss of generality as discussed in  cooper and schiex  1 . the simplest form of local consistency is node consistency  nc* .
definition 1 variable xi is node consistent if: for all values a ¡Ê di  c ¨’ci a        and there exists a value a ¡Ê di such that ci a  = ¡Í. a wcsp is node consistent  nc*  if every variable is node consistent.
any wcsp can be easily transformed into an equivalent
nc* instance by projecting every unary constraints towards
c  and subsequently pruning every unfeasible value. functions projectunary and prunevar  algorithm1 perform the projection of a unary constraint towards c  and prune unfeasible values  respectively.
¡¡arc consistency properties are based on the notion of simple and full support. given a binary constraint cij  we say that b ¡Ê dj is a simple support for a ¡Ê di if cij a b  = ¡Í. similarly  we say that b ¡Ê dj is a full support for a ¡Ê di if cij a b ¨’cj b  = ¡Í.
definition 1 variable xi is arc consistent if every value a ¡Ê di has a simple support in every constraint cij. a wcsp is arc consistent  ac*  if every variable is node and arc consistent.
definition 1 variable xi is full arc consistent if every value a ¡Ê di has a full support in every constraint cij. a wcsp is full arc consistent  fac*  if every variable is node and full arc consistent.
simple supports for a ¡Ê di in dj can be enforced by projecting binary costs cij a ¡¤  towards ci a   as performed by procedure project  algorithm 1 . procedure findsupports  algorithm 1  enforces simple supports in dj for every value in di.
example 1 the wcsp depicted in figure1.a is not ac* because value a ¡Ê di does not have a simple support in variable j. ac* is enforced by executing findsupports i  j   producing the problem in 1.b  and then projectunary i   producing the problem in 1.c .
¡¡to enforce full supports for di values in dj  procedure findfullsupports in algorithm 1  we need to extend unary costs fromcj ¡¤  towardscij ¡¤ ¡¤   procedure extend in algorithm 1 . then  binary costs are projected towards ci a .
¡¡in the csp case  i.e  k =1   beinga simple support for  i a  is equivalent to being a full support for it and both notions reduce to the classical notion of support. therefore  ac* and fac* reduce to classical arc consistency. in the wcsp case  however  being a full support is stronger than being a simple support. in  larrosa and schiex  1  it was shown that every wcsp can be transformed into an equivalent arc consistent one in time o ed1 . unfortunately  not every wcsp can be transformed into an equivalent full arc consistent one.
example 1 the problem in figure1.a is ac*  but it is not fac* because value a ¡Ê di is not fully supported. we can enforce the full support by calling findfullsupports i  j . the resulting problem  depicted in figure1.b is not fac* because value b ¡Ê dj is not fully supported. if we enforce the full support by calling findfullsupports j i   we return to the problem in figure1.a. it can be easily proved that this problem does not have an equivalent fac* one.
¡¡therefore  fac* is not a practical property. to circumvent this problem  a weaker property has been proposed. in the sequel  we assume that the set of variables x is totally ordered by  .
definition 1 variable xi is directional arc consistent if every value a ¡Ê di has a full support in every constraint cij such

algorithm 1: algorithms to enforce supports.

function findsupports i  j  : boolean flag := false ;
foreach a ¡Ê di do
¦Á := minb¡Êdj{cij a b } ;
if  ¦Á   ¡Í¡Äci a  = ¡Í  then flag := true ;
project i a  j ¦Á  ;
projectunary i  ; return flag ;
function findfullsupports i  j  : boolean flag := false ;
foreach a ¡Ê di do
p a  := minb¡Êdj {cij a b ¨’cj b } ; if  p a    ¡Í¡Äci a  = ¡Í  then flag := true ;
foreach b ¡Ê dj do
e b  := maxa¡Êd ;
foreach b ¡Ê dj do extend j b i e b   ; foreach a ¡Ê di do project i a  j p a   ; projectunary i  ; return flag ;
function findexistentialsupport i  : boolean
1
that j   i. it is full directional arc consistent  fdac  if  in addition  every value a ¡Ê di has a simple support in every constraint cij such that j   i. a wcsp is full directional arc consistent  fdac*  if every variable is node and full directional arc consistent.
example 1 the problem in 1.c is ac* but not fdac*  because value a ¡Ê i does not have a full support in variable j. fdac* is enforced by executing findfullsupports i  j   producing the problem in figure 1.d .
¡¡every wcsp can be transformed into an equivalent fdac* wcsp with time complexity o end1   larrosa and schiex  1 . in the csp case  fdac* also reduces to classical arc-consistency. in the general case fac* implies fdac* and fdac* implies ac*  namely  the satisfaction of one property implies the satisfaction of the other . an important question is whether it is possible to strengthen the fdac* property to make it closer to fac*  but still having the guarantee of existence for an arbitrary wcsp instance. in the next section we address this issue.
1 existential arc consistency: a stronger new property
consider the fdac* problem in figure1.d. observe that value a ¡Ê dk has a simple support in xj  required by the fdac* property  but does not have any full support. we have the same situation with value b ¡Ê dk and variable xi.

	e 	f 
figure 1: six equivalent wcsp problems    = 1 :  a  original problem  c  made ac*   d  made fdac* with i   j   k and  f  made edac*.
as a consequence  the unary cost of both values in dk can be increased by enforcing full supports  figure 1.e . since all unarycosts of di values are larger than zero  node consistency is lost and the lower bound can be increased  figure 1.f . in general  full supports can be safely enforced in both directions if their enforcement produces an increment in the lower bound. next  we show that there is a natural local consistency property behind this observation  that we call existential arc consistency  eac* .
definition 1 variable xi is existential arc consistent if there is at least one value a ¡Ê di such that ci a  = ¡Í and it has a full support in every constraintcij. a wcsp is existential arc consistent  eac*  if every variable is node and existential arc consistent.
¡¡all the previous forms of arc consistency requiredthe same condition for every domain value. however  eac* requires the existence for every variable of a special value. the important fact to note is: if a variable xi is not eac*  then for all domain value a withci a =¡Í there is a variable xj such that  b ¡Ê dj cij a b ¨’cj b    ¡Í. thus enforcing full supports in xi will break the nc* property and it will be possible to increase the lower bound. it is possible to integrate eac* with fdac* in order to exploit the benefits of each. it is achieved by the existential directional arc consistency  edac*  property.
definition 1 a wcsp is edac* if it is fdac* and eac*.
¡¡in words  edac* requires that every value is fully supported in one direction and simply supported in the other direction  to satisfy fdac* . additionally  at least one value per variable must be fully supported in both directions  to satisfy eac* . the special value is called the fully supported value. observe that in the csp case edac* instantiates to classical arc consistency. besides  edac* is weaker than fac*  but stronger than fdac*.
1 algorithm
we present an algorithm for the enforcement of edac* in the case of binary wcsps. edac*  algorithm 1  transforms an arbitrary problem into an equivalent one verifying the edac* local property. it uses three propagation queues  q  r and p  that are implemented as priority queues so that the lowest or the highest variable in the queue can be popped in constant time. if j ¡Ê q  it means that some value in dj has been pruned  neighbors of j higher than j may have lost their simple support and must be revised . if j ¡Ê r  it means that some value in dj has increased its unary cost from ¡Í  neighbors of j lower than j may have lost their full support and must be revised . if i ¡Ê p  it means that some value in dj  j   i neighbor of i  has increased its unary cost from ¡Í  i may have lost the full support of its fully supported value and must be revised . besides  there is an auxiliary queue s that is used to efficiently build p.
¡¡the algorithm is formed by a main loop  with four inner loops. the while loops at lines 1  1 and 1 respectively enforce eac*  dac* and ac*; the line 1 enforces nc*. each time some costs are projected by the enforcement of a local property  another property may be broken. the variables for which the local property may be broken are stored in a queue for revision. the enforcement of nc*  ac* and dac* is achieved as proposed in  larrosa and schiex  1 . thus  we focus on the enforcement of eac*.
¡¡eac* enforcement is mainly encoded by function findexistentialsupport i   which enforces the existential support in xi by finding full supports wrt. every lower neighbor xj  it does not have to worry for higher neighbors because dac* enforcement takes care of them . while enforcing the existential support in xi  the cost function cj decreases or remains the same. as a consequence  we do not need to revise the existential consistency of xj nor the directional arc consistencies of the lowest neighbors of xj. furthermore  as the existential consistency is stronger than the arc one  enforcing ac* between xi and xj is useless. however  the directional arc consistency of variable xi should be checked  because some unary cost of xi could have been increased  line 1 . similarly  the existential consistency of higher neighbors of xi should also be verified  line 1 .
¡¡prunevar   enforces node consistency after unary cost and lower bound increments  line 1 . this function can be executed more often in order to avoid unnecessary value examinations during the while loops. it does not change the worstcase time complexity. for simplicity reasons  the case of inconsistent problems where c  reaches   is not described.
theorem 1 the	complexity	of	edac*	is	time
o ed1max{nd  }  and space o ed .

algorithm 1: enforcing edac*  initially  q = r = s = x.

procedure edac*
1
1
1
1
1
 1 1
1
proof 1 regarding space  we use the structure suggested by  cooper and schiex  1  to bring the space complexity to o ed .  larrosa and schiex  1  proved that projectunary  project  extend and prunevar are time o d ; findsupports and findfullsupports are time o d1 . let us now focus on the while loop complexities in edac*. the loop at line 1 enforces dac*. as described in previous papers  it is time o ed1  because each variable is pushed in r at most once and thus each constraint cij is checked once  line 1 . similarly  the loop at line 1 which enforces ac*  directed from the lowest variables to the highest ones  is also o ed1 .
¡¡the loop at line 1 enforces eac* directed to the highest variables. in a single run of this loop  a variable will never be pushed twice in p because the poppedvariable xi is always the lowest one  and the pushed variables are higher than xi. it implies that the while loop iterates at most n times  leading to a o e  time complexity for line 1. the amortized complexity time of findexistentialsupport is o ed1  because this function may be called with each variable  so every binary constraint at line 1 and 1 is observed once. thus  the time complexity of eac* is also o ed1 .
¡¡the line 1 is time o n . the for at line 1 is time o nd   which is less than o ed   as the graph is supposed to be connected . compiling the different results  the complexity inside the while at line 1 is o ed1 . it loops when:
  either q is not empty: the for at line 1 has pruned a value and this is done at most nd times;
  either r is not empty: ac* has enqueued a variable in r and by the preceding remark this cannot be done more than o nd  times;
  or s is not empty: an element has been enqueued while enforcing ac* or dac*. the first case cannot happen more than o nd . the second case happens o max{nd  }  times because the condition at line 1 is true when ac* has added an element in r  o nd  times  or eac* has added an element  o    times because each time eac* is violated  c  increases .
consequently  the overall complexity is o ed1max{nd  } .
1 experimental results
in this section  we perform an empirical comparison of edac* with fdac* for the task of proving optimality. the main use of the edac* and fdac* properties is to use them inside a depth-first branch and bound solver. the idea is to maintain edac* and fdac* during the search  algorithms called medac* and mfdac*  respectively . we have implemented  c code  this idea in an efficient incremental version that uses tables of supports a` la ac1  bessiere and regin  1 . in non-binary problems  we delay the propagation of non-binary constraints until they become binary. for variable selection we use the dom/degheuristics which selects the variable with the smallest ratio of domain size divided by future degree. for value selection we consider values in increasing order of unary cost ci. the variable ordering for directional arc consistency is given by their index. the optimum of each problem instance  except for max-sat where only a good upper bound is provided  is given to the branch and bound as a first upper bound. we experimented with three domains easily modeled as wcsp. given a cnf formula  max-sat is the problem of finding a complete assignment with a maximum number of satisfied clauses. we have generated and solved 1-variable 1-sat and 1-variable 1sat instances with varying the number of clauses using cnfgen1  a random k-sat generator. note that this generator prevents duplicate or opposite literals in clauses but not duplicate clauses. given an overconstrained csp  max-csp is the problem of finding a complete assignment with a maximum number of satisfied constraints. we have generated 1 classes of binary random problems with domain size set to 1  sparse-loose  constraint graph connectivity of 1% for 1 variables   sparse-tight  dense-loose  constraint graph connectivity of 1%   dense-tight  complete-loose  and complete-tight  as proposed in  larrosa and schiex  1 . in max-sat  resp. max-csp   samples have 1  resp. 1  instances and we report mean values. in the uncapacitated warehouse location problem  uwlp  a company considers opening warehouses at some candidate locations in order to supply its existing stores. the objective is to determine which warehouses to open  and which of these warehouses should supply the various stores  such that the sum of the maintenance and supply costs is minimized. each store must be supplied by exactly one open warehouse. we simply model the problem by l boolean variables for the candidate locations  s integer variables for the stores with domain size set to l  l +s soft unary constraints for the costs  and l ¡Ás hard binary constraints connecting stores and warehouses. we took and solved the problem instances cap1 from the standard or library benchmarks for uwlp  as well as the mo*mp* instances by courtesy of j. kratica  kratica et al.  1 . the m* instances are very challenging for mathematical programming approaches because they have a large number of suboptimal solutions.

figure 1: time in seconds to solve random max-1sat and max-1sat problems.

figure 1: time in seconds to prove optimality for binary random max-csps.
¡¡the experiments were all performed on a 1 ghz pentium 1 computer with 1 mb1. time results in seconds are given in figures 1 and 1  and table 1. in all max-sat  resp. max-csp classes   the search effort seems to grow exponentially with the number of clauses  resp. number of variables . we summed the computation times for all the samples that were completely solved by both algorithms and computed the ratio mfdac*/medac* . in max-1sat  medac* was 1 faster than mfdac*. the improvement is lower in max-1sat. we think this result is due to our simple delaying mechanism for tackling n-ary constraints. for maxcsp  medac* was faster than mfdac* by a factor ranging from 1  complete-tight  to 1  sparse-tight . the same results were observed when analyzing the number of nodes expanded by medac* and mfdac*  not reported here for lack of space . in summary  the speed-up obtained was even more important on problems with small constraint graph connectivity.
problem	size	mfdac 	medac 	cplexcap1¡Á1.1.1.1 cap1¡Á1.1.1.1 cap1¡Á1.1.1.1 cap1¡Á1.1.1.1 cap1¡Á1.1.1.1 cap1¡Á1.1.1.1 cap1¡Á1.1.1.1 cap1¡Á1.1.1.1 cap1¡Á1.1.1.1 cap1¡Á1.1.1.1 cap1¡Á1.1.1.1 cap1¡Á1.1.1.1 mo1¡Á1 - 1 1 mo1¡Á1.1.1.1 mo1¡Á1.1.1.1 mo1¡Á1.1.1.1
mo1¡Á1.1.1.1 mp1¡Á1 - 1 1 mp1¡Á1 - 1 1
mp1¡Á1 - 1 1 mp1¡Á1 - 1 1 mp1¡Á1 - 1 1table 1: time in seconds to prove optimality for uncapacitated warehouse location problems. problem size is l ¡Á s  with l the number of warehouses and s the number of stores. a  -  means the instance was not solved in less than 1 hours.
¡¡for uwlp  medac* is several orders of magnitude faster than mfdac* for problem size l ¡Ý 1. we concluded that the lower bound computed by edac* for uwlp is stronger and less variable ordering dependent than the fdac* one. although uwlp is well-solved by dedicated mathematical programming approaches  erlenkotter  1; ko¡§rkel  1  and heuristic search methods  kratica et al.  1; michel and hentenryck  1   it is worth noticing that our generic wcsp algorithm was able to solve to optimality moderatelysized problems in reasonable time  in less than 1 hour . for comparison purposes  we solved uwlp instances using a state-of-the-art mixed-integer programming solver ilog cplex 1 with default parameters  and without initial upper bounds  and a direct formulation of the problem. medac* and cplex obtained results within the same order of magnitude in terms of cpu time.
¡¡reversingthe orderof lines 1  eac* loop   1  dac* loop   and 1  ac* loop  in medac* slowed down the algorithm by a factor  on our max-csp benchmarks. it is important to increase thelower bound as soon as possible as it is done first by eac*. we are currently investigating a lazy implementation of eac* where the constraints in line 1 are projected only for the purpose of increasing the lower bound and not for pruning the values. this allows to reduce the number of variables inserted in r and p by eac* and  consequently  the number of iterations of the different loops.
1 conclusions and future work
in this paper we have introduced a new local consistency property called edac* and adapted it to wcsp. we have studied its complexity  and despite its theoretical cost  it has been shown that maintaining edac* is always better than maintaining fdac* in a variety of domains. in the future  we want to study a lazy version of edac* and to apply it to other problems.
acknowledgments
the authors are grateful to thomas schiex for useful comments on an early version of the paper and to julia larrosa for being born after the submission deadline.
