. 
   a syntactic tree formation system is described for use in incremental sentence generators  i.e. generators which allow for parallel planning of conceptual content and linguistic expression. the system achieves full generality in the sense that  1  all forms of incremental production  upward expansions  downward expansions  and insertions  are covered  and  1  branches of a syntactic tree are grown in a maximally independent way  1  while at the same time grammatically of the utterance as a whole can be maintained  aside from 'syntactic deadlocks' . the tree formation system is called incremental grammar  1g . two novel ideas are the use of node-arc-node segments as elementary building blocks  e.g s-subject-np  s-object-s  np-head-n  pp-object-np   and the introduction of feature matrices associated with segments rather than with nodes. 
1. introduction 
the problem of incremental sentence generation has begun to attract the attention of ai researchers  computational linguists and psycholinguists  joshi  1; macdonald & pustejovsky  1; kempen  1 . in psycholinguistics  incremental generation accounts for the observation that speakers plan their utterances partly from left to right and sometimes 'talk themselves into a corner'  syntactic deadlock  self-corrections . in the context of interactive ai systems  the need for an incremental generation strategy arises whenever those systems attempt to spare the user long pauses between the successive utterances of a naturallanguage interface. in combination with synthetic speech  an incremental generator may produce a very natural output. 
   although it is gradually being recognized that incremental generation imposes special requirements upon syntactic mechanisms  no satisfactory framework for incremental syntactic tree formation has emerged. linguistic formalisms which have addressed the issue more or less explicitly  are functional unification grammar  appelt  1  and tree adjoining grammar 
 joshi  1 . however  as pointed out by de smedt & kempen  1   they can handle only certain types of'incrementation' and do not achieve a full solution. 
   in section 1  i put forward three basic demands to be made upon truly incremental tree formation systems. a framework satisfying these requirements is described in section 1. finally  section 1 is devoted to a comparison with existing syntactic formalisms and to some evaluative remarks. 
1. incremental generation: implications for tree formation 
de smedt & kempen  1  distinguish three types of incrementation: upward expansion  downward expansion  and insertion. a combined illustration is provided by utterance  1 . 

	kempen 	1 

   the increments  separated by slashes  are also shown in the boxed parts of figure 1. figure lb is an upward expansion of la because the original root node  np  has become the daughter of a new parent  s . downward expansion is exemplified by figure lc: the increment is attached as a subtree to an already existing 
node. figure id shows a case of insertion: the increment is added inbetween two existing nodes.  one may view insertion as a combination of upward and downward expansion.  all three varieties of incrementation should be within reach of an incremental tree formation system this is the first requirement. 
   the second requirement reflects the observation  as witnessed by  1   that increments may be very small  sometimes no longer than a single word. therefore the grammar should enable growing individual branches without imposing unnecessary constraints upon the simultaneous growth of other branches. in other words  the grammar needs a 'vertical' orientation: establishing connections between mother and daughter nodes  between daughter and grand-daughter  etc.  or vice-versa  should be its primary concern. existing grammar formalisms tend to have a 'horizontal' orientation: their rules typically specify combinations of daughters for a given mother node  that is  they emphasize sisterhood. phrase structure rules are the best example. an incremental generator  on the other hand  needs a type of rule which stresses mother-daughter relationships  allowing for inferences concerning sisterhood . from the point of view of incremental generation  the main advantage of 'vertical' rules is that the development of two or more sister branches need not be initiated at the same point of time. 
   the third requirement addresses maintenance of grammatical coherence in the course of utterance realization. the chronological order in which the various constituents are attached to the syntactic tree clearly need not be identical to their left-to-right order in the resulting utterance. this applies in particular to languages with rigid word order patterns such as english  dutch and french. if the generator would overtly realize constituents immediately after their being attached to the tree  massive ungrammaticality would ensue. an example is provided by the finite  main or auxiliary  verb in main clauses of dutch and german. in many circumstances  this constituent occupies an obligatory 'second position*. now suppose the subject and direct object constituents are attached to the s-node earlier than the finite verb  subject at position 1  direct object at 1 . overtly realizing subject and direct object before attachment of the finite verb would lead to a sequence of constituents which will remain ungrammatical  irrespective of how it is completed by further constituents. what is needed  apparently  is a device which prevents the utterance realization process to skip over obligatory constituents with reserved positions. 
1. syntactic tree formation in incremental grammar 
the grammatical framework developed below is called incremental grammar  ig . it may be viewed as abstracted from kempen & hoenkamp's  1  incremental procedural grammar framework  ipg  by leaving out psycholinguistic processing  i.e. 'procedural'  aspects. two important innovations are reported here for the first time: the introduction of node-arc-node segments as elementary building blocks  and a more systematic treatment of features and feature transport than was given in ipg. the latter includes the idea of associating feature matrices not only with nodes but also with the larger segments. 
1 	natural language 
1 tree structure 
ig trees consist of labeled nodes and arcs. names of syntactic categories serve as node labels; arcs are labeled by syntactic functions. a simple example is given in figure 1. 
   the elementary building blocks are node-arc-node triplets called segments. table 1 lists 1 segment types needed in many natural language grammars. the mother node of a segment  'root'  is a phrasal category: sentence  clause   noun phrase  prepositional phrase or adjectival/adverbial phrase. the daughter node  ' foot'  is either a phrasal or a lexical category  verb  noun  pronoun  cardinal number  article  coordinating conjunction  subordinating conjunction  etc. . the arc labels have been selected from a small set of syntactic functions such as head  subject  direct object  indirect object  modifier  
quantifier  etc. 

figure 1. syntactic tree corresponding to the dutch equivalent of these guests have decided to travel by car. 
the members of a coordination are dominated by an arc labeled 'conjunct'  and the coordinating conjunction by 'sequencer1  cf. figure 1 . 
   there are three composition operations: concatenation  insertion  and furcation. they all involve merging identically labeled nodes from two segments. in case of concatenation  the root node of one segment is merged with the foot of the other one. strings of one or more concatenated segments are branches; they  too  have a foot and a root. furcation is a merge of two root nodes. in case of insertion  one node of a segment/branch is replaced by a segment/branch whose root and foot labels are identical  to each other and to the replaced node . 
   the composition operations are illustrated by the incremental construction of dutch sentence  1a  out of the six segments listed in  1b . 


the first word of sentence  1a  can be realized after concatenating segments a and b.  i assume that nominative case is selected only after the np has been assigned the role of subject.  the second 
word follows after furcating c with the subject branch. furcation of the resulting structure with object branch d gives the third increment. then segment e is inserted into d at root node s  effectively 'lowering' the object np  and segment f furcated with the embedded s. the result is depicted in figure 1. 
table 1. important types of segments. alternative node labels are separated by slashes. 
1 the lexicon 
the lexical entries in an ig lexicon are arranged in the form of a hierarchy of objects  each object representing a segment or segment type. figure 1 illustrates a small portion of the ig lexicon for dutch. the lines represent inheritance links between objects: a lower segment possesses all properties of its parent s . except those which are explicitly overwritten.  de smedt  1 advocates the utilization of object-oriented programming techniques for the representation of lexical knowledge  e.g.. for the purpose of default reasoning.  the entry for the dutch verb willen  to want  is shown in simplified form at the bottom of 

figure 1. the inheritance links dominating the object 'willen-vtrb 
'indicate that willen is an instance of an s-head-v segment. the expression furcate ...  says that this segment is forked with a ssubj-np segment and either an s-obj-np or an s-obj-s segment  cf.  1bd  and  1be  . this exemplifies how subcategorization restrictions on verbs can be stated very easily. notice also that the inheritance hierarchy minimizes redundancy. for instance  the fact that segments have a foot  an arc and a root need be mentioned only once  namely  at the topmost member of the hierarchy. 
1 features and feature transport 
the structure of a segment is more complex than discussed so far. 
in fact  it is a set of features which is partioned into subsets associated with root  arc and foot. the subsets are conveniently depicted as feature matrices. for instance  a more detailed notation for one of the two np-head-n segments in figure 1 is shown in  1 . 
figure 1. syntactic tree corresponding to sentence  1a . 
   the example shows that all three kinds of incrementation distinguished in section 1 are within reach of ig: upward expansion  a+b   downward expansion  b+c  c+d   and insertion  d+e . moreover  the nature of the segments and the composition operations defined over them lends the grammar a vertical rather than a horizontal orientation. 

the feature matrix at the right lists features which are shared by root and foot. the values of 'cat'  = category  and 'fn' 
 = function  are labels serving to identify segment type  e.g. nphead-n . undefined values are indicated by underscores  'j .the 'addr'  = address  and 'dest'  = destination  attributes defined for root and arc  respectively  refer to an aspect of word order computation which i will discuss below in section 1. the 'lemma' attribute of the segment's foot takes as its value a pointer to a morpho-phonological specification  kempen & huijbers  1 . 1 functional and positional trees 
in the foregoing i have paid no attention to word order. in fact  the trees discussed so far contain no information on this score. for this reason i call them functional trees. word order is computed in the course of a mapping from functional into 
positional trees. it proceeds as follows. 
   to each segment of a functional tree  a value is assigned for two attributes: destination  point of attachment  'address'  and precedence  serial position amidst segments attached to the same node . 
   a destination evaluates to an address  i.e.  a number associated with the root node of the current segment or one of its ancestors. the default case is 'dest = addr  root '. under certain 
conditions  e.g. related to wh-constituents  the destination value is computed by evaluating special functions imported from the lexicon. 
the precedence value of a segment is a sequence of one or more rank numbers. for instance  the four segments attached to the top 
s-node in figure 1 might be assigned precedence values 1  1  1 and 1.  a partial set of precedence rules for dutch  which are mostly applicable to german as well  is worked out and justified in kempen & hoenkamp  1.  the positional tree belonging to a functional tree is assembled by attaching all segments to their destination node and ordering them from left to right according to their precedence values.  branches which  in the course of the mapping process  have lost their lexical segment  are pruned away at the lowest furcation point.  the hierarchical structure of a 
positional tree is often identical to that of its functional counterpart  in figure 1  for example   but sometimes the positional tree is flatter. a case in point is dutch sentence  1a  whose functional tree is depicted in figure 1. this effect - the ig equivalent of clause union - comes about as follows. 
   the lexical entry for the dutch verb willen  to want  cf. figure 1  lists a special rule which causes the value of the address feature of its object complement s-node to be overwritten by 'addr  root ' in case it is a non-finite clause. the two segments dominating the 
object np appels now look basically as in  1 . 
   in the course of determining a destination  'addr  root '  for the lower segment  the embedded s is accessed. since the address listed there evaluates to the topmost s  the lower segment is attached to the top-s rather than to the embedded s. the s-headv segment dominating the infinitive verb eten  to eat  undergoes the same fate. left without offspring  the upper s-obj-s segment is pruned. a flat positional tree is the result  depicted in figure 1.  numerical arc labels are rank numbers referring to serial positions within phrases.  
   the introduction of feature matrices necessitates reconsidering the operation of node merging discussed above. i define it here as the unification  in a sense similar to kay  1  of the associated feature matrices  including the shared component. for example  
furcation of segments  1a  and  1b   both belonging to the tree in 
figure 1  yields  1c .* 
   unification is an effective mechanism for distributing feature information over syntactic constituents. the burden put upon it is considerably smaller  though  than in functional unification grammar because it operates in conjunction with the tree formation mechanism discussed in section 1. 
1 	natural language 


1 	utterance realization 
when the positional tree dominating a new increment is finished and values for all necessary features have been computed  it is passed on to the utterance realization module. here  various morphological and phonological operations take place whose nature i cannot go into  see kempen & hoenkamp  1; van wijk & kempen  1 . the important point  in the present context  is that the positional tree spanning a new increment  or a full sentence  is processed in depth-first  left-to-right manner. the output of the realization module is a phonological representation  of a complete or fragmentary sentence  containing all information needed for further phonetic processing. 
   i owe a solution to the problem  raised at the end of section 1  of obligatory constituents which have not yet been attached to the tree. how can the utterance realization module be induced to halt at the position reserved for such missing constituents  the danger of skipping a reserved position is lurking whenever constituents further down to the right have already been attached. it can be warded off effectively by the following convention. a dummy head segment is obligatorily connected to every phrasal node of the functional tree  until a regular head has been selected. the foot node of a dummy head segment has an empty feature matrix  but otherwise receives the same treatment as a regular one. so it will show up in the positional tree at the reserved position. when running into the defective feature matrix  the utterance realization module will come to a halt**. 
** under certain special circumstances  phrases are permitted to remain without a head. gapping is a case in point  e.g. robin wrote a book and john a paper  where a s-head-v segment is missing in the second conjunct . for a detailed treatment of conjunction reduction  see pijls & kempen  1. 
1. evaluation  related work  conclusion 
i have described a framework for syntactic tree formation which meets the basic requirements of incremental sentence generation. to my knowledge  no satisfactory alternative is available to date. other grammatical formalisms reported in the literature fall short in several respects. 
   transformational grammar does not generate anything smaller than full sentences. all base-generated structures have to pass the transformational component of the grammar  and transformations are defined for sentences only. formalisms which use some form of phrase structure rules  not only transformational grammar but also lexical-functional grammar and generalized phrase structure grammar  are biased towards downward expansion. upward expansion and insertion are impossible without additional machinery. in addition  as already observed in section 
1  these rules have a horizontal rather than a vertical orientation. functional unification grammar seems biased to downward expansion  too. categorial grammar  on the other hand  only allows for upward expansion. tree adjoining grammar can handle insertion very well  and is probably unbiased. however  the elementary trees serving as building blocks are roughly the size of a deep clause  so it is questionable whether tag could handle smaller increments. 
   these brief assessments are concerned with current versions of the grammar formalisms  which of course were designed for other purposes. how easily they could be tailored to the demands of incremental production without losing sight of their original goals  is difficult for me to judge. moreover  it remains to be seen whether ig can develop into a viable syntactic formalism living up to the standards of present-day linguistic research. one who wishes to evaluate ig from this point of view be referred to kempen & hoenkamp  1  and pijls & kempen  1 . using the more complicated ipg framework  these authors present detailed treatments of various complicated constructions of dutch  including interrogatives  wh-movement   object complements  cross-serial dependencies   and coordination  gapping  forward and backward conjunction reduction . the essence of their conclusions generalizes to the ig framework  as interested readers may judge for themselves. these papers also explain how semantic/conceptual structures computed by an ai system can be mapped into ig trees for the purpose of overt expression by artificial language generators. 
acknowledgement 
i owe considerable debt to the members of the language 
technology project of the university of nijmegen with whom i had numerous discussions on matters of syntax: fieny pijls  bart geurs  and in particular to koenraad de smedt. 
