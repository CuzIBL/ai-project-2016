
vickrey-clarke-groves  vcg  mechanisms are a framework for finding a solution to a distributed optimization problem in systems of self-interested agents. vcg mechanisms have received wide attention in the ai community because they are efficient and strategy-proof; a special case of the groves family of mechanisms  vcg mechanisms are the only direct-revelation mechanisms that are allocatively efficient and strategy-proof. unfortunately  they are only weakly budget-balanced.
we consider self-interested agents in a network flow domain  and show that in this domain  it is possible to design a mechanism that is both allocatively-efficient and almost completely budget-balanced. this is done by choosing a mechanism that is not strategy-proof but rather strategyresistant. instead of using the vcg mechanism  we propose a mechanism in which finding a beneficial manipulation is an np-complete problem  and the payments from the agents to the mechanism may be minimized as much as desired.
1 mechanisms for network flow
mechanisms face the problem of finding a system-wide solution to an optimization problem based on private information given by self-interested agents. a well-known solution to such problems in the case of quasi-linear preferences is that of groves mechanisms. a special case of the groves family of mechanisms are vcg mechanisms  which are budgetbalanced  allocatively-efficient  and strategy-proof.
모a significant disadvantage of vcg mechanisms is that they are only weakly budget-balanced. we would in principle prefer a strongly budget-balanced mechanism  where the total sum of payments to the mechanism is zero: pi ti 붿  = 1. impossibility results   green and laffont  1  and  hurwicz  1   show that in a quasi-linear environment  it is impossible to achieve a mechanism that is strategy-proof  allocatively-efficient  and strongly budget-balanced.
모we address this by slightly relaxing the strategy-proof requirement  replacing it with strategy-resistance. a mechanism is strategy-proof if the dominant strategy of each agent is to reveal its true type to the mechanism. strategy-resistance only requires that even if an agent is given the reported types of the other agents  it has a computationally intractable problem to solve if it wishes to find a beneficial manipulation  i.e.  report a false type to the mechanism to gain higher utility .
모in this work  we consider the domain of network flows. in that domain  the edges of a network flow belong to several self-interested agents. each agent reports its edges to the mechanism. the mechanism is then required to choose a flow from the source vertex to the target vertex. agents gain utility from flow units on their edges. agents can lie  and declare a subset of the edges they really own. this manipulation may change the flow that the mechanism chooses  and agents may try to take advantage of this. however  we show that it is possible to use the fact that agents have computational limitations and are not unboundedly rational  so as to construct mechanisms with beneficial properties.
1 self-interested network flows
we explore the problem of designing a mechanism for bounded-rational agents in a distributed flow problem. we demonstrate that for this domain  we can find a mechanism that is allocatively-efficient  -budget-balanced  and strategyresistant. this means that if we assume the agents are bounded-rational and would not try to manipulate the mechanism if such manipulation is an np-complete problem  they would all truthfully report their preferences. once the mechanism gets their true preferences  it chooses the outcome that maximizes total utility of the agents. to achieve this truthfulness  the mechanism requires payments; however  the total sum of these payments can be minimized as much as required. we now present the self-interested layered-graph network flow problem. consider a flow network on a layered graph. we have a graph g =  v e    with source vertex s and target vertex t. the vertices of the graph are partitioned into n + 1 layers  l1 = {s} l1 ... ln = {t}. the edges only run between consecutive layers. we have a capacity function c : e 뫸 r which is the maximal flow allowed on the edges. we also have a set i of agents. each agent controls a subset ei   e of the graph's edges. no two agents control the same edge:  i1=jei 뫌 ej = 뷋.
모the mechanism chooses a valid flow from s to t. a valid flow is a function f : e 뫸 r such that
  u v 뫍ef u v  뫞 c u v     u v 뫍ef u v  =  f v u   and
 u뫍v  {s t} pv뫍v f u v  = 1.
모each agent values the flow according to the total flow going through its edges. let f be the valid flow chosen by the mechanism  and ef the set of edges in f through which there is a positive flow: ef = {e 뫍 e | f e    1}. we denote the set of ai's edges used in the flow f by: ef i = ef 뫌ei. the agent's valuation of the flow is vi f  = pe뫍ef i f e .
모when the mechanism is given the agents' true types  붿 = e1 e1 ... ei  we want it to choose the flow that maximizes the total utility of the agents. the mechanism would be allocatively-efficient if it chooses f  붿  = arg maxf pi pe뫍ef i f e . in a layered graph the flow that maximizes the sum of agents' utilities is the maximal flow  proof of this is given in the full paper . thus  if each agent truthfully declares its subset of edges  the mechanism can easily compute f  붿  by running a maximal flow algorithm  such as the edmonds-karp algorithm.
모as shown in the full version of this paper  a naive mechanism for the self-interested flow problem  with no payments to the mechanism  is not strategy-proof. an agent may declare a subset of the edges it controls  to change the flow that the mechanism chooses to a flow that the agent values more.
1 self-interested network flow mechanism
we assume quasi-linear utility. each agent pays the mechanism a payment pi  and its utility is ui f  = vi f    pi. we now show that by using a straightforward payment rule  we make finding a beneficial manipulation np-hard. the payment rule we use is simple: each agent pays the mechanism a constant of c for each edge it declares it owns. let  be the subset of edges an agent declares it owns. then pi ei1  = c|ei1|. we also give a minor correction to make sure the mechanism is individual-rational. the payment pi gives the agent a utility of 1 when the agent's valuation of the chosen flow is less than the payment to the mechanism. assume that ai knows ej1 for all j 1= i. it can easily calculate the utility it would get by truthfully declaring all its edges. how hard is it for i to find a subset of edges it could declare to the mechanism so as to gain a higher utility  we define the problem of finding a useful manipulation in the self-interested network flow domain as follows.
모flow-edge-subset: we are given a layered graph flow network  with the capacity function c : e 뫸 r  e i the declared edges of the other agents  and ei  the set of our edges. we are also given the constant c of the payment  and we know that if we declare that we have k edges  our payment to the mechanism would be pi = ck. we assume the mechanism prefers a maximal flow that maximizes our utility of all the possible maximal flows. we are also given a constant k  the target utility for ai. we are asked if there is a subset of ai's edges ei1   ei  such that the maximal flow chosen by the mechanism  f  e1 ... ei 1 ei1 ei+1 ... ei  gives ai a utility of at least k: ui f  pi  = vi f     pi = pe뫍ef  i f e    c|ei1| 뫟 k.
모a reduction  given in the full version of this paper  indicates that flow-edge-subset is an np-complete problem. the reduction given is from a general vertexcover instance to a flow-edge-subset problem.
although we do not include the full details of the reduction here  we do give some intuition about how it was constructed. given the original vertex-cover instance  we build a layer graph  where one of the agents  a1  controls all the edges between two consecutive layers. each edge a1 owns corresponds to a vertex in the original vertexcover graph. the network flow graph is constructed so that in order for a1 to maximize its valuation  it must declare a subset of edges that is a vertex cover of g. however  in order to minimize its payment to the mechanism  a1 must choose as few edges as possible. if the payment constant c is small enough  a1's top priority is to make its chosen vertices a vertex-cover  and only then choosing as few edges as possible. this makes its preferred choice the minimal vertex cover of the original graph.
1 conclusions and future directions
we have suggested a mechanism for the distributed network flow problem with self-interested agents. with a proper choice of the payment constant c  finding a beneficial manipulation is an np-complete problem. since finding a beneficial manipulation is intractable  we encourage agents to truthfully report their preferences. in this case  the mechanism would choose the result maximizing the sum of agents' utilities  and we have an allocatively-efficient mechanism.
모given some   we can make the mechanism budget-balanced  by choosing a small enough payment constant   where n is the number of agents.
this way  all of the agents together pay less than . the mechanism we have described is also individual-rational. therefore  in the domain of network flows  this achieves an individual-rational  allocatively-efficient  -budget-balanced  and strategy-resistant mechanism. the standard vcg solution in this domain would be only weakly budget-balanced  but strategy-proof.
모impossibility results   green and laffont  1  and  hurwicz  1   indicate that no direct-revelation mechanism can achieve strong budget-balance without sacrificing either allocative-efficiency or strategy-proofness. we believe that in many cases  trading strategy-proofness for strategy-resistance is a fair price to pay for achieving strong budget-balance.
모our strategy-resistance rested on the worst case assumptions of np-hardness  which only indicates that a certain problem has some hard instances. a stronger notion of strategy-resistance could also require the manipulation problem to have no approximation methods  that it be in some harder complexity class  or that it be hard to find any  not just the optimal  beneficial manipulation. this work constitutes a first step in establishing the notion of strategy-resistance.
references
 green and laffont  1  jerry green and jean-jacques laffont. characterization of satisfactory mechanisms for the revelation of p