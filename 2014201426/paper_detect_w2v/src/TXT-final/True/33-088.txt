 
a subsumption t e s t based on the p r i n c i p a l i d e a o f k o w a l s k i ' s c o n n e c t i o n graph p r o o f procedure i s d e v e l o p e d . i n c o n t r a s t t o the s t a n d a r d t e s t t h i s new t e s t i s s u f f i c i e n t l y e f f i c i e n t t o p e r m i t t h e u n r e s t r i c t e d use o f 
the subsumption r u l e i n p r a c t i c e . the t e s t i s n o t l i m i t e d t o the c o n n e c t i o n graph proof p r o c e d u r e   b u t most n a t u r a l l y embedded i n t o i t . i n the l a t t e r case t h e u n r e s t r i c t e d c o m b i n a t i o n o f subsumption w i t h o t h e r d e l e t i o n r u l e s i s shown t o b e i n c o n s i s t e n t . 
1. 	introduction 
r. k o w a l s k i ' s c o n n e c t i o n graph p r o o f p r o c e dure  k1 r e p r e s e n t s a s e t of l o g i c a l f o r mulae n o t as a s e t b u t as a graph l i k e 
s t r u c t u r e . i n f e r e n c e r u l e s such a s r e s o l u t i o n and f a c t o r i n g are expressed as o p e r a t i o n s o n t h a t g r a p h . i n a d d i t i o n t o these o p e r a t i o n s   which u s u a l l y expand the g r a p h   the procedure a l s o p r o v i d e s f o r d e l e t i o n o p e r a t i o n s t h a t remove c e r t a i n components from t h e g r a p h . other approaches based on 
graphs have been proposed by   s i 1     c s h 1       a n 1       b 1   . 
one o f the s t r i k i n g p r o p e r t i e s o f the c o n n e c t i o n graph p r o o f procedure i s t h a t a p p l i c a t i o n of a d e l e t i o n o p e r a t i o n can r e s u l t i n the a p p l i c a b i l i t y o f f u r t h e r d e l e t i o n o p e r a t i o n s   thus p o t e n t i a l l y l e a d i n g to a snowball e f f e c t which r a p i d l y reduces the g r a p h . the p r o b a b i l i t y o f t h i s e f f e c t r i s e s w i t h the number o f d e l e t i o n r u l e s a v a i l a b l e . 
a v e r y p o w e r f u l d e l e t i o n r u l e f o r r e s o l u t i o n based systems i s 	t h e subsumption r u l e 
    l 1     	c h a p t e r 1   . 	u n f o r t u n a t e l y a t e s t 
f o r subsumption i s v e r y expensive and i s u s u a l l y implemented o n l y f o r r e s t r i c t e d cases. in t h i s paper a t e s t f o r subsumption 
based on the p r i n c i p a l 	idea of t h e connect i o n graph p r o o f procedure 	i s 	developed  
which 	i n c o n t r a s t 	t o t h e s t a n d a r d t e s t  cl1   	i s 	s u f f i c i e n t l y 	e f f i c i e n t 	t o p e r m i t u n r e s t r i c t e d 	subsumption i n p r a c t i c a l 	cases. though n o t l i m i t e d t o i t   	the 	t e s t i s most n a t u r a l l y embedded 	i n t o the c o n n e c t i o n graph p r o o f p r o c e d u r e   	b u t u n r e s t r i c t e d combinat i o n o f subsumption  	t a u t o l o g y   	and p u r i t y d e l e t i o n i s shown 	t o render 	the c o n n e c t i o n graph p r o o f procedure 	i n c o n s i s t e n t . 
1. definition and notations 
the paper i s based o n the f i r s t o r d e r p r e d i c a t e c a l c u l u s w i t h the u s u a l n o t a t i o n a l c o n v e n t i o n s f o r c o n s t a n t s   v a r i a b l e s   t e r m s   atoms  l i t e r a l s   and c l a u s e s . the number of l i t e r a l s in a c l a u s e c is denoted by | c i . the empty c l a u s e is denoted by o. the e l e ments in a set of clauses are always a s s u med to be v a r i a b l e d i s j o i n t . 
a
 s u b s t i t u t i o n is a mapping a from variables 
to terms i d e n t i c a l almost everywhere. it is extended to mappings on terms  atoms  l i t e r a l s   and clauses by the usual homomor-
phism. a u n i f i e r for two terms  or l i t e r a l s   s  t is a s u b s t i t u t i o n a for which o s   a t . if for any other u n i f i e r 1 for s  t there is a 1' w i t h 1 *  c   c c  we say a is a most general u n i f i e r  mgu  for s and t. two l i t e r a l s are called a-complementary  if they are of opposite sign and a is an mgu for 

1 
tor  and i t s parent clauses have to be exp l i c i t l y computed  or  more e f f i c i e n t l y   
derived from  autolinks  between complementary l i t e r a l s in s e l f resolving clauses  cb1 . 
the reduction rules contribute both to the practical 	attractivity 	and 	the 	theoretical d i f f i c u l t i e s of the connection graph proof procedure. the o r i g i n a l rules are: delete a clause if it contains a pure l i t e r a l and delete a clause which is a tautology. further possible rules include: delete a link if i t s resolvent is a tautology cwa1   
delete a clause if it is subsumed by another clause in the graph  delete a l i n k if i t s resolvent is subsumed by another 
clause in the graph. note t h a t each delet i o n may cause a p u r i t y to a r i s e   thereby causing f u r t h e r deletions. i t i s not yet known as to which combinations of these d e l e t i o n rules preserve the completeness of the procedure. 
1. subsumption and the s-link test 
let c and d be clauses. c o-subsumes d  if ici s idl and o is a s u b s t i t u t i o n such that o c  c d. throughout t h i s paper the terms subsumption and o-subsumption w i l l be used interchangeably  though usually subsumption is defined more generally than a-subsumption  see   l 1     . 
the standard t e s t for o-subsumption works as follows: given c and d  f i r s t make sure that id s id i and that d is not a t a u t o logy. then negate d and change variables in d to constants  y i e l d i n g a set d of ground u n i t clauses. c asubsumes d i f f a is derivable from {c} u d.  details can be found in cc1  and cl1 . . 
the p o s i t i v e aspect of t h i s subsumption test is that it uses the same mechanism 
which underlies the e n t i r e deduction system  i . e . r e s o l u t i o n . but from a p r a c t i c a l point of view t h i s turns out to be a d i s avantage. normally one has to check f o r 
1 
subsumption as soon as a new clause is generated  i . e . a f t e r each r e s o l u t i o n step. this means that each  major  r e s o l u t i o n step is followed by several  minor  r e s o l u t i o n steps for the subsumption t e s t   thus m u l t i -
p l y i n g the o v e r a l l expense. yet even worse  given a resolvent c there is no h i n t as to 
which clauses p o t e n t i a l l y subsume or are subsumed by c. so the t e s t   already expensive in i t s e l f   has to be performed w i t h i n an i t e r a t i o n over a l l elements of the given set of clauses. in p r a c t i c e   of course  one 
would f i r s t make sure that the predicates are in common  so t h a t the t e s t is not performed during each i t e r a t i o n step. 
the r e s u l t i n g cost is such t h a t f o r p r a c t i cal systems only r e s t r i c t e d versions of subsumption are implemented  e . g . only for cases where the subsuming clause is a u n i t . omitting subsumption  on the other hand  can cause considerable redundancies. 
the c e n t r a l problem for a subsumption t e s t consists in e f f i c i e n t l y f i n d i n g out which l i t e r a l s in which clauses are u n i f i a b l e . disregarding the signs of the l i t e r a l s t h i s corresponds to the very same problem that arises when two clauses have to be selected f o r the next r e s o l u t i o n step. in both cases comparing a l l l i t e r a l s of a l l clauses is a possible but i n e f f i c i e n t s o l u t i o n . 
in the r e s o l u t i o n case the connection graph procedure provides f o r a more e f f i c i e n t a l t e r n a t i v e . the l i t e r a l s of a set of clauses are compared w i t h each other once and forever when the i n i t i a l graph is cons t r u c t e d . subsequently the necessary i n f o r -
mation is d i r e c t l y available in the form of 
the l i n k s . because of the inheritance 
mechanism for l i n k s the new l i t e r a l s in resolvents and factors need not go through any search process e i t h e r . thus the problem of f i n d i n g two resolvable clauses is reduced to simply p i c k i n g a l i n k . 
this basic idea can be applied to the subsumption problem by introducing l i n k s of a 
1 
{u :  a}}and uni c quv d1   {{u: a  v :   b f } . the s u b s t i t u t i o n s {u :  a} and {u ;  a  v :  b} are strongly compatible  thus c subsumes d1  but none of d  d 1  d 1  . 
the main p o i n t of the t e s t is that the expensive u n i f i c a t i o n is postponed u n t i l the function sub preselected a plausible subset of candidates for subsumption. in case we are looking for subsuming rather than subsumed clauses/ t h i s preselection process is s l i g h t l y more complicated. by theorem 1 
we f i r s t determine a l l clauses connected by at least one s-link to the given clause d. then from t h i s set we ascertain those c for which id s id i and d€sub c  holds and only then the u n i f i c a t i o n operations are performed. 
in both cases t h i s preselection and the f a c t that the l i t e r a l s to be u n i f i e d are e x p l i c i t l y known  can save considerable time. on the other hand some e f f o r t has to 
be invested for the computation of a l l slinks in the i n i t i a l graph. as w i t h the 
connection graph proof procedure t h i s advance cost can be higher than a possible gain  if the set of clauses is only small. for more complex examples however  there is c e r t a i n l y a pay o f f . but of course any gain in time has to be paid for by a d d i t i o nal storage needed f o r the s - l i n k s . 
1. refinements of the s-link test 
the i n h e r i t i n g mechanism for s-links can be optimized in the same way as described in  b1  for r e s o l u t i o n l i n k s . here the proofs are very simple because s-graphs are always t o t a l . 
another refinement r e s u l t s from the observation that for a clause c containing an s-pure l i t e r a l sub c    1. that means that such a clause cannot subsume any other clause. 
when computing the u n k c l   d   we need to know which k€d are u n i f i a b l e w i t h l.. as 
1 

the d e f i n i t i o n of uni shows  these are exactly those l i t e r a l s we already had to consider for the computation of con and s ¡À . the information obtained during the comput a t i o n of con and sub should be stored in 
an appropriate data structure to avoid having to recompute it for u n i . 
thus far the s - l i n k t e s t was developed w i t h out considering the underlying inference mechanism. since they are based on the same p r i n c i p a l idea as connection graphs  sgraphs appear to be combined most n a t u r a l l y 
w i t h t h i s inference method. we can modify 
the d e f i n i t i o n of a connection graph to be 
a t r i p l e  c r s  such t h a t  c f  is a connection graph   i n the h i t h e r t o sense  and  ¡ê 1  is an s-graph. for such a graph we can define a new kind of subsumption: a clause c subsumes an r-link  d  k  d1*k1  if c subsumes the resolvent of  d k d- !  . it is possible to extend the t e s t to cover t h i s kind of subsumption  see  e1  . 
deleting subsumed l i n k s has the e f f e c t as i f a l l resolutions leading t o subsumed r e solvents were performed p r i o r to other steps. this r e s u l t s in a stronger reduction of the graph as in the usual case were subsumptions occur only randomly. the difference is s i m i l a r to the one between d e l e t i n g 
tautology clauses and d e l e t i n g tautology l i n k s in a graph  wa1 . 
1. consistency of the connection graph procedure with subsumption 
the soundness of a proof procedure guarantees that whenever an u n s a t i s f i a b l e set of clauses   e . g . one containing o  is derived  then the o r i g i n a l set of clauses was u n s a t i s f i a b l e . consistency  on the other hand  assures that from an u n s a t i s f i a b l e set of clauses only u n s a t i s f i a b l e sets of clauses can be derived. thus consistency is a necessary condition for completeness. 
in most r e s o l u t i o n based proof procedures consistency is t r i v i a l   because the original set of clauses is only extended by f u r t h e r clauses. in the case of the connection graph procedure  however  clauses can be deleted from the o r i g i n a l set. this fact causes consistency to be an e x t r a o r d i n a r i l y hard problem for connection graphs. 
in  e1  the consistency of a l l deletion rules mentioned in the i n t r o d u c t i o n is proven for o-derivations  ss1  using a proof technique introduced in  b1. unf o r t u n a t e l y t h i s technique is not s u i t a b l e to a r b i t r a r y d e r i v a t i o n s   but r e s u l t s shown in css1  indicate that there is a t r a n s l a t i o n between ot-derivations and ar-
b i t r a r y ground case s t r a t e g i e s . the r e s pective proofs are very complex and hard to follow  but if extended to the case of subsumption they might ensure the consistency for the ground case. 
in the general case  however  the connection graph proof procedure w i t h u n r e s t r i c t e d subsumption is inconsistent as the f o l l o -

the resolvent of l i n k 1 is a tautology  the resolvent of l i n k 1 is subsumed by c  thus both l i n k s are deleted and the graph becomes 

1 resolution on l i n k s 1  1 and the successor of 1   i n that order  w i l l y i e l d the empty clause. hence the o r i g i n a l set of clauses was u n s a t i s f i a b l e   because of the soundness of the r e s o l u t i o n p r i n c i p l e . if instead of that we select l i n k 1 for the next step  the resolvent is pupv w i t h l i n k 1 and 1 i n h e r i t e d . this resolvent subsumes both c~ and c   which are deleted. the r e s u l t i n g graph is 
c1: papb 	pu 	1 ' 	c1: *c 
now c contains a pure l i t e r a l and the subsequent deletions f i n a l l y erase the entire graph  i . e . it is possible to derive a s a t i s f i a b l e set of clauses from the original u n s a t i s f i a b l e set! 
this r e s u l t demonstrates the necessity of r e s t r i c t i o n s for the deletion rules. it has yet to be shown which r e s t r i c t i o n s preserve consistency and completeness. 
1. practical results 
the s-link t e s t has been implemented in the 
markgraf karl system at the university of karlsruhe  essuw1    ss1  fessw1 . subsumption was r e s t r i c t e d such that a r e s o l vent may not be subsumed by i t s own parent clauses. the necessity of this r e s t r i c t i o n appears p l a u s i b l e   because a similar one applies to f a c t o r s . no example for the i n consistency of the procedure with this r e s t r i c t i o n could be found thus far  but neither has there been a formal proof of i t s consistency. 
on the average a graph has about the same number of s-links as it has r-links. this may seem an inappropriate increase in storage requirement. but in the actual implementation s-links need much less 
storage than r-links. moreover  it is not the physical storage that is important  but the number of active r-links in the search space  and t h i s number can be reduced considerably. 
p r a c t i c a l tests indicate that the reduction of the graph caused by subsumption usually more than compensates for the storage used by the s - l i n k s . an example is p. andrews1  challenge  proposed at the deduction workshop in austin 1:  1xqx vyqy  ¡ö 
oxvy ¡ö qx ¡ö qy  . here subsumption reduces 
the i n i t i a l graph by 1 % of the clauses * and by 1 % of the r-links  which i s   however  an extreme case . 
in order to get some experience w i t h more   n a t u r a l   problems  a selection of examples from tmow1  and  wm1  was run using the strategies basic r e s o l u t i o n   	set-of-support  and u n i t r e f u t a t i o n   	each w i t h and without subsumption. the values compared are: 
r r r war ** - tt clauses in proof g-penetrance     clauses generated 
  ~a~ .fc.~ ~ a - # resolvents/factors in proof 
d-penetrance - $ resolv./fact. totally sauced 
r value 	m ft clauses deleted 
# clauses generated 
the r e s u l t s are compiled in table 1   - means that the system did not f i n d a p r o o f   . 
the table shows that subsumption usually caused a considerable improvement of the penetrances  	i . e . 	fewer unnecessary steps were performed. this demonstrates the r e duction of the search space. sometimes the system even found a proof where it d i d not 
without subsumption. the increase of the r-value indicates that subsumption i n f a c t has a very strong impact on the size of the graph. 
1. conclusion 
the s-link t e s t is a rather e f f i c i e n t subsumbtion c r i t e r i o n and the p r a c t i c a l r e sults are encouraging. the hard theoretical problem of consistency and completeness of the connection graph procedure w i t h various combinations of d e l e t i o n rules has yet to await a comprehensive treatment. 
1. acknowledgement 
the members of the markgraf karl group in karlsruhe provided many valuable discussions about the s-link t e s t . jttrg siekmann and jack minker went over the f i r s t draft of this paper and gave many helpful hints for i t s improvement. 

1ti1 

