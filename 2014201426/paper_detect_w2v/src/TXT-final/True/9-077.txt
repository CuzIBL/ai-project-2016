session 1 hardware and software for a r t i f i c i a l intelligence 
1.pak: a snobol-based programming language for artificial intelligence applications 
john mylopoulos  norman badler  lucio melli and nicholas roussopoulos 
department of computer science  university of toronto 

d e s c r i p t i v e terms: programming language  snobol  b a c k t r a c k i n g   r e l a t i o n a l data base  a r t i f i c i a l i n t e l l i g e n c e . 
a b s t r a c t 
       this paper describes a programming language f o r a r t i f i c i a l i n t e l l i g e n c e a p p l i c a t i o n s 
which 	o f f e r s 
    a  a data base  in the form of a c o l l e c t i o n of l a b e l e d d i r e c t e d graphs where knowledge can be stored 
    b  p a t t e r n 	d i r e c t e d 	i n f o r m a t i o n 	r e t r i e v a l and p a t t e r n 	invoked 	f u n c t i o n 	c a l l s 
    c  p r i m i t i v e statements which enable the user to c o n s t r u c t f l e x i b l e searching algorithms. 
       the language is an extension of snobol in i t s design and implementation and uses snobol's 	s t r i n g p a t t e r n 	matching f a c i l i t i e s f o r i t s 	own 	 graph  p a t t e r n matching. 
1 . 	i n t r o d u c t i o n 
	l.pak 	was 	designed and implemented 	in 
order to 	f a c i l i t a t e ai research at 	the u n i v e r s i t y o f toronto. 	i t s design was i n f l u e n c e d by other languages desi gned 	f o r 	s i m i l a r 	reasons such as c1nnivf.r 1    plannfr  qa1  s a i l   1   1     	and our deci si on to 	implement 	it 	as an extension of snobol and 	keep 	it 	r e l a t i v e l y inexpensive 	  i n terms o f the time and space r e q u i r e d f o r 	the execut ion of programs . 
       this paper only di scusses the main features of l.pak  how the y can be used  t h e i r r e l a t i o n to features of fered by other languages f o r ai   and the success of the current implc-
m e n t a t i o n . more d e t a i l s on the language are a v a i l a b l e elsewhere  it is assumed t h a t the reader is f a m i l i a r w i t h the basic features 
of snobol 	  1   . 
1. 	the data base 
       the data base f o r 	each 	l.pak 	program 	cons i s t s 	of a c o l l e c t i on of d i r e c t e d   	l a b e l e d graphs 	  h e r e a f t e r g raphs  	such as that shown in fig. 	1. 	a l i s t of 	t r a n s i t i v e 	and/or i n t r a n s i t i v e 	edges is 	associated w i t h each 
node  which define e i t h e r p r o p e r t i e s of  the object represented by  the node or r e l a t i o n s which h o l d between the node and other elements of the same graph. 
       a l i n e a r order e x i s t s f o r the nodes of each graph d e f i n e d by s p e c i a l edges l a b e l e d 
next. 
type sun 
	type house 	type tree 
       edge labels   p r o p e r t i e s   consist of one or more atoms separated by underscores. the f i r s t atom is the a t t r i b u t e of the p r o p e r t y   
while subsequent 	atoms are i t s modi f i e r s . 
       information can be r e t r i e v e d from the data base by matching  graph  patterns against i t. 
       patterns 	arc s p e c i f i e d in 	terms of sequences of path d e s c r i p t i o n s . 	for example  
the 	p a t t e r n 
            $x  left aarb yj   far .swcontains one path d e s c r i p t i o n which w i l l match paths 	that 
    a  begin at the node which is the value of atom x   
    b  move along an edge whose l a b e l has left as a t t r i b u t e and is followed by at least one 
m o d i f i e r   
    c  move along an edge whose label has far as a t t r i b u t e   
    d  end at node $w. 
	if such a path connects nodes 	$x 	and 
$w f o r a p a r t i c u l a r data base  the p a t t e r n match succeeds and the m o d i f i e r of left is assigned to atom y   w h i l e the graph p a t t e r n match r e t u r n s $w   the last node v i   i t e d during the match. patterns are evaluated by the f u n c t i o n search. 
       aarb is a special property p a t t e r n which will match any atom. l.pak o f f e r s several 
other b u i i t - i n p r o p e r t y patterns and operators s i m i l a r to tho se o f f e r e d by snobol to help the user speci fy c lasses of edge labels in his graph p a t t e r n s thus  graph  p a t t e r n matching i s e s s e n t i a l l y d r i v e n by property p a t t e r n 
matchi ng and c an be e a s i l y implemented using the s t r i n g pat t e r n matching f a c i l i t i e s i n snobol. 
       note that there may be several paths which w i l l mat ch the same p a t t e r n . for example  the p a t t e r n match 
　　　　　search   $x  left   above far    could 	r e t u r n n ode 	n1 	or 	nz 	i n fig. 1. the p a t t e r n ma tch however w i l l 	r e t u r n j u s t one of the 	two nod es . 

	fig. 	1. 
       we w i l l show l a t e r how to generate a l l the matching a l t e r n a t i v e s . 
       i n f o r m a t i o n can be added to or deleted from the data base through the special f u n c t i o n s add and del. 
1        add's main f u n c t i o n is to create new inf o r m a t i o n w i t h a graph as context. for example  the f u n c t i o n c a l l add  $x  left   far   w   w i l l create enough new edges and nodes to make the p a t t e r n match of 	i t s 	argument 	against 	the data base s u c c e s s f u l . 	in the process  a 	 node  value w i l l be assigned to 	w . 	add w i l l also perforin a simple consistency - redundancy t e s t f o r each new edge attached to a node  w i t h respect 	to the edge l i s t 	of that 	node. 	thus an i n t r a n s i t i v e edge labeled type house w i l l 
not be added to the edge l i s t of a node which already contains an edge l a b e l e d type h1use tall because it is redundant. 
	an example of a del f u n c t i o n c a l l 	is 
　　　　　　del   x  left  -$y  rtght    where the s p e c i a l operator 	' - ' 	s p e c i f i e s that the node or edge 	it operates on must be 
d e l e t e d . for t h i s f u n c t i o n c a l l   a p a t t e r n match takes place f i r s t   and if unsuccessful the c a l l f a i l s ; otherwise the node $y is deleted along w i t h a l l the edges that point  to or away from i t . 
	l.pak 	also 	o f f e r s 	snobol 	t a b l e s 	and 
arrays as means 	for r e p r e s e n t i n g 	in f o r m a t i o n . moreover  	as 	in snobol  	the user can define his 	own data t y p e s . 	e x p l i c i t 	l i s t 	f a c i l i t i e s using cons  car and cdr and l i s t n o t a t i o n are 
p r o v i ded. 	express ions such as 
　　　　　　　　$l =  $a  $b  $c  $d  may be used to c o n s t r u c t l i s t s ; here the value of l is a four element l i s t . 
1- 	program s t r u c t u r e and control 
	l.pak 	statements 	are 	s i m i l a r 	to 	t h e i r 
snobol cousins. 	for example  	the statement 
 a: del  $x   left    -  r1giitjvb1ye     :s a f b  is l a b e l e d a   and w i l l attempt to d e l e t e the 
edge whose l a b e l matched r1ght ab1ve  if the p a t t e r n match of  $x  left   r cht above   against the data base succeeds. if the del funct ion c a l l succeeds  c o n t r o l is passed back to a   otherwise c o n t r o l is passed to the statement labeled b . 
       each l.pak statement w i l l succeed or f a i l and t h i s can be used f o r program c o n t r o l . unless otherwise s p e c i f i e d   c o n t r o l w i l l pass t o the next statement of a l.pak program. thus 
b a c k t r a c k i n g as encountered in planner and qa1 is only o f f e r e d during graph p a t t e r n matching 
in 	l.pak. 	a 	d i f f e r e n t 	k i n d 	of 	b a c k t r a c k i n g 
w i l l 	be discussed 	l a t e r . 
1 . 	function requesjts  
1 . 1 . 	e x p l i c i t f u n c t i o n requests 
	l.pak 	f u n c t i o n s 	can 	be 	d e f i n e d 	through 
pdefine. 	for example  	the statement 
pdefine new x:node null y:property|pattern   z  
w w1 new  
defines a f u n c t i o n named new w i t h three formal 
parameters; 	the f i r s t must be of type node or have as value the n u l l s t r i n g   	the second of type property or pattern  w h i l e 	the t h i r d is c a l l e d by r e s u l t . 	thus the statement new $x1 $y1 $z1  w i l l 	f a i l even before new is c a l l e d because the t h i r d argument 	is not 	c a l l e d by r e s u l t   
w h i l e 
　　　　　　　　　　new $x1 $y1  z1  w i l l proceed w i t h the execution of the f u n c t i o n c a l l if $x1 is a node or the n u l l s t r i n g   and $y1 is a p r o p e r t y or a  graph  p a t t e r n . 
       the s p e c i f i c a t i o n of a l l o w a b l e types f o r each formal parameter does not mean that the type of f u n c t i o n arguments is f i x e d i n s i d e a f u n c t i o n c a l l ; i t only helps t o check whether the f u n c t i o n request makes sense. 
       the same f u n c t i o n name may be used inside several pdefine c a l l s   thus g i v i n g the same 
name to several d i f f e r e n t f u n c t i o n s . this means that a statement such as 
　　　　　　　　　　new $x1 $y1  z  may cause several f u n c t i o n c a l l s u n t i   one is found t h a t succeeds. in f a c t   the f u n c t i o n 
name s p e c i f i e d by 	a 	f u n c t i o n request 	in 	l.pak 
can be a s t r i n g p a t t e r n   as in 
                    t1i|ax   $x $y  z  which w i l l cause the c a l l of any f u n c t i o n whose name matches the s t r i n g p a t t e r n  thjax    i . e .   begins w i t h th or ax  and whose parameter d e s c r i p t i o n is matched by the arguments of the f u n c t i o n r e q u e s t . 
　　　this f e a t u r e o f f e r s the user f l e x i b i l i t y in s p e c i f y i n g a f u n c t i o n request s i m i l a r to 
that o f f e r e d by theorem provers where each axiom can be considered as a f u n c t i o n w i t h o u t a name to be c a l l e d whenever there is a susp i c i o n that it may be of use. 
       unlike snobol  l.pak t r e a t s f i e l d d e s i g nators of programmer-defined data t y p e s   array 