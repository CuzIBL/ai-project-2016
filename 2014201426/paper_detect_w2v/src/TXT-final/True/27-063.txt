 
we provide a general method which can be used in an algorithmic manner to reduce certain classes of 1nd-order circumscription axioms to logically equivalent 1st order formulas the algorithm takes as input an arbitrary 1nd-order formula and either returns as output an equivalent 1st order formula  or terminates with failure in addition to demonstrating the algo-
rithm by applying it to various circumscriptive theories  we analyze its strength and provide formal subffumption results based on compan son with existing approaches 
1 	introduction and preliminaries 
in recent years  a great deal of attention has been devoted to logics of  commonsense  reasoning among the candidates proposed  circumscription  lifschitz  1   has been perceived as an elegant mathematical tech nique for modeling nonmonotonic reasoning  but difficult to apply in practice practical application of circumscription is made difficult due to two problems the first concerns the difficulty in finding the proper circumscriptive policy for particular domains of interest the second concerns the 1nd-order nature of circumscription axioms and the difficulty in finding proper substitutions of predicate expressions for predicate variables so the axioms can be used for making inferences there have been a number of proposals for dealing with the second problem ranging from compiling circumscriptive theories into logic programs  gelfond and lifschitz  1   to developing specialized inference methods for such theories  ginsberg  1  przymusinski  1i  
　a third alternative is to focus on the more general problem of finding methods for reducing 1nd-order formulas to logically equivalent lst-order formulas  where possible although some progress has been made using this approach  the class of 1nd-order circumscription formulas shown to be reducible is not as large as one might desire  the reduction methods proposed are somewhat isolated relative to each other and  most importantly  
 supported by swedish tfr grant 1 
   'supported in part by kbn grant 1 p1 1 and esprit bra no 1-drums ii 
1 	non m1t1nic reasoning 
w i t old lukaszewicz* andrzej szalast 
institute of informatics 
warsaw university 
1 warsaw 1  poland 
the existing reduction theorems generally lack algorithmic procedures for doing the reductions 
　in this article  we provide a general method which can be used in an algorithmic manner to reduce certain classes of 1nd-order circumscription axioms to logically equivalent lst-order formulas the algorithm takes as input an arbitrary 1nd-order formula and either returns as output an equivalent lst-order formula  or terminates with failure of course  failure does not imply that there is no l1t-order equivalent for the input  only that the algorithm can not find one the class of 1nd-order formulas  and analogously the class of circumscriptive theories which can be reduced  provably subsumes those covered by existing results the algorithm can be applied successfully to circumscriptive theories which may include mixed quantifiers  some involving skolemization   variable constants  n-ary tuples of minimized and varied predicates  separable  separated and in some cases  nonseparated formulas  and formulas with n-ary predicate variables  among others in addition to demonstrating the algorithm by applying it to some of these theories  we analyze its strength and provide formal subsumption results based on comparison with existing approaches 
　due to page limitations and the technical complexity of both circumscription and the algorithm we propose.we will be forced to remain brief with preliminaries consequently  we assume familiarity with the various types of circumscription and existing reduction results in general  we will refer to the original articles for the relevant theorems and results in addition  we provide only an informal description of the algorithm  but one that is adequate and sufficiently detailed for following the examples provided for a detailed description of the al gonthm and proofs of the subsumption results  we refer the reader to the technical report  doherty et al  1  
1 	notation 
an n-ary predicate expression is any expression of the form ax a x   where x is a tuple of n individual variables and a{s  is any formula of first- or second-order classical logic if u is an n-ary predicate expression of the form xx a  s  and a is a tuple of n terms  then u{a  stands for a{1  as usual  a predicate constant 
p is identified with the predicate expression xx p x~  similarly  a predicate variable $ is identified with the predicate expression ax * 1  


	doherty  lukaszewicz and szalas 	1 

algorithm can also be used for formulas of the form since the latter formula is equivalent to thus  by repeating the algorithm one can deal with formulas containing many arbitrary second-order quantifiers 
　the elimination algorithm consults of four phases  1  preprocessing;  1  preparation for the ackerxnann lemma   1  application of the ackermann lemma  and  1  simplification these phases are described below it is always assumed that  1  whenever the goal specific for a current phase is reached  then the remaining steps of the phase are slapped   1  every time the equivalence  1  of proposition 1 is applicable  it should be applied 
 1  preprocessing the purpose of this phase is to transform the formula  into a form that separates positive and negative occurrences of the quantified predicate variable   the form we want to 
obtain isa1 

where  for each n  a     is positive w r t   and b     is negative w r t   the steps of this phase are the following  i  eliminate the connectives d and = using the usual definitions remove redundant quantifiers rename individual variables until all quantified variables are different and no variable is both bound and free using the usual equivalences  move the negation connective to the right until all its occurrences immediately precede atomic formulas  1  move universal quantifiers to the right and existential quantifiers to the left  applying as long as possible the equivalences  1  -  1  from proposition 1  1  in the matrix of the formula obtained so far  distribute all top-level conjunctions over the disjunctions that occur among their conjuncts  applying the equivalences  1  -  1  from proposition 1  iv  if the resulting formula is not in the form  1   then report the failure of the algorithm otherwise replace  1  by its equivalent given by 

try to find equation  1 's first-order equivalent by applying the next phases in the algorithm to each disjunct in  1  separately if the first-order equivalents of each disjunct are successfully obtained then return their disjunction  preceded by the prefix 1x  as the output of the algorithm 
 1  preparation for the ackermann lemma. the goal of this phase is to transform a formula of the form 1     a       b           where a     reap b     is positive  reap negative  w r t    into one of the forms  1  or  1  given in lemma 1 both forms can always be obtained and both transformations should be performed because none  one or 
1
　　it should be emphasised that not every formula u reducible into this form 
1
　　 to increase the strength of the algorithm  it is essential to move as many existentially quantified variables as possible into the prefix of  1  
both forms may require skolemization unskolemlzation  which occurs m the next phase  could fail m one form  but not the other in addition  one form may be substantially smaller than the other the steps of this phase are based on equivalences  1  -
 1  from proposition 1 
 1  application of the ackermann lemma. the goal of this phase is to eliminate the second-order quantification over    by applying the ackermann lemma  and then to unskolemue the function variables possibly introduced this latter step employs the equivalence  1  from proposition 1 
 1  simplification generally  application of ackermann's lemma in step  1  often involves the use of equivalence  1  in proposition 1 m the left to right direction if so  the same equivalence  or its generalization  1   may often be used after application of the lemma in the right to left direction  substantially shortening the resulting formula 
1 	discussion of t h e a l g o r i t h m 
assume we have a second-order formula a of the form 
		 1  
where  pref and pref are sequences of first-order quantifiers  b and c are quantifier-free formulas in conjunctive normal forms  b is positive w r t    and c is negative w r t   then  the following proposition holds 
proposition 1 let a be an input formula of the form  1  then  as a result  the algorithm returns a firstorder formula provided that unskolemization  if neces-
bary  succeeds ＊ 
　observe that skolem functions are introduced in the second step of the algorithm whenever existential quantifiers are to be eliminated these can appear in the input formula or may be introduced via application of the equivalence  1  of proposition 1 in the following proposition  we formulate conditions under which no skolem functions are introduced and the algorithm terminates successfully 
proposition 1 if one of the following conditions holds  1  b is universal and each conjunct of b contains at most one occurrence of    or  1  c is universal and each conjunct of c contains at most one occurrence 
of    then the algorithm always returns a first-order formula as output ＊ 
　if the input formula cannot be transformed into the form  1  then the algorithm fails 
1 	on the strength of the algorithm 
in this section we consider existing reduction results and their subsumption by oux algorithm a compilation of many of the existing reduction results can be 
found in  lifschitz  1   in addition to other relevant results in earlier papers  kolaitis and papadimitnou  1  lifschitz  1  1  rabinov  1  in  doherty et al.   1   we prove that the algorithm subsumes  and la even stronger than the results given in  kolaitis and papadimitnou  1  lifschitz  1  1  

　the scan algorithm was introduced by gabbay and ohlbach  it is difficult to compare scan with our algorithm since no syntactic characterization of formulas accepted by scan is known we conjecture that both approaches are successful for the same class of formulas however  the additional advantage of our algorithm is that it always terminates  while scan may loop for example  the formula 

when given as input to our algorithm does terminate  while for scan it does not 
　additional strengths and weaknesses are considered m the next section 
1 	c o m p a r i s o n of approaches 
in comparing the different approaches and results concerning the reduction of circumscriptive theories  we will refer to figure 1 below  which provides a pictorial view of the subsumption relation between the various theorems and types of theories reduced dls refers to our algorithm  mixed refers to theories with mixed quantifiers  vc refers to theories which allow variable constants  and 
monad refers to theories with only monadic sentences in addition  refer to purely universal and existential theories  respectively  while refers to those theories where skolemization is necessary  and refers to mixed theories not requiring skolemization the solid 
*rabinov requires n-simplicity here 
positive results 
in addition to the results described m the previous section  observe that the method we propose is also stronger in regard to the following features 
  dls provides us with a more general approach to existential quantification due to the possibility of allowing skolemization thus it works for combinations of existential and universal quantifiers on the other hand  kolaitis and papadimitnou consider pure existential formulas  while lifschitz and rabinov consider pure universal theories 
  dls does not distinguish between theories with variable constants and those without on the other hand both rabinov  kolaitis and papadimitnou   and lifschitz to some extent   restrict their theories to those without variable constants in some cases  lifschitz'e results can reduce theories with variable constants if the theories are separable and no skolemization is mvolved  see the next section for problems dls has with separated theories  
  dls permits as input circumscriptive theories with arbitrary numbers of minimized and varied predicates this is not the case for rabinov's result nor 
for lifschitz's result pertaining to separated formulas 
  dls describes how to constructively transform for-mulas into the required form 
	doherty  lukaszewicz and szalas 	1 


	1 	nonmonotonic 	reasoning 


	doherty  lukaszewicz  and szalas 	1 

