 	this combination is aided by the fact that both subar-
　　　　　　　　　　　　　　　　　　　　　　　　　　　eas tend to use constraint satisfaction problems  csps  as decomposition methods are used to convert general their representation of choice. the diagnosis computation constraint satisfaction problems into an equivalent work  fattah and dechter  1; stumptner and wotawa  tree-structured problem that can be solved more ef- 1; mauss and tatar  1  focuses on the relational comfectively. recently  diagnosis algorithms for tree- bination of the different constraint relations  while the probstructured systems have been introduced  but the lem reformulation work views csps as  often cyclic  hyperprerequisites of coupling these algorithms to the graphs that are broken down into tree structures. 
outcome of decomposition methods have not been a csp  v  d  c  comprises a set of variables v  their doanalyzed in detail  thus limiting their diagnostic ap- mains d  and a set of constraints c. a constraint ci is tuple plicability. in this paper we generalize the tree*  st ti  where  is its scope and ti is a set of tuples of algorithm and show how to use hypertree decom- values for the variables in si. we assume two functions tpl position outcomes as input to the algorithm to comand scope on constraints that return the set of tuples and the 
pute the diagnoses of a general diagnosis problem. 
scope respectively. each constraint ci restricts the possible values of the variables with respect to values of other vari-
1 introduction 	ables in the same scope.for example  the digital circuit from 
figure 1 can be represented by the following constraints': 
the development of effective algorithms for diagnosing large and complex systems remains one of the key issues in modelbased reasoning. nonetheless  apart from various additional optimizations and control strategies  e.g.   de kleer  1   the main architectures for consistency-based diagnosis systems  tms  de kleer and williams  1  and hitting sets computation  reiter  1   have remained remarkably stable since the late 1s. over the last years though  a number of algorithms were published that exploited advantageous structural properties of the systems to be diagnosed for significant computational speedups  fattah and dechter  1; stumptner and wotawa  1    enabling the very fast diagnosis of large tree-structured systems. 
　it was recognized early on that the combination of treeoriented algorithms could in principle be combined with a second class of algorithms aiming at the decomposition of cyclic problems to equivalent tree-structured problems so that a solution of a csp is an assignment of values to all varithe faster solution algorithms could be brought to bear  fat- ables that satisfy the given constraints. all values must be tah and dechter  1;darwiche  1 . again  this direction elements of their variable's domain. the variable assignment profits from recent new results relating the different decom- b = l a = 1 c = 1   / = 1 g = 1 h = l i = 1 j = 1 isa position algorithms  gottlob et al.  1  and analyzing their solution for the above csp whereas b = l a = 1 c = 1 f = performance  gottlob et al.   1 . this paper joins the two 1  y = 1  h = 1 i = 1 j = 1 is not because constraint n1 is strands by tying the link between the recent work on prob- not satisfied. 
lem decomposition and the tree* algorithm  stumptner and 	a standard approach for computing solutions for csps are 
wotawa  1 . 	backtracking algorithms  which are in the worst case expo-
                                                       nential in the number of variables. however  for a specific this work was partially supported by the austrian science fund 
 fwf  under project grants p1nf and p 1-inf. 'note that not all constraints arc components  n1 is the tabular authors are listed in alphabetical order. representation of an equality constraint between connections . 
diagnosis 


figure 1: a hypergraph representing the constraints 
class of csps a solution can be computed in polynomial time. this class comprises all csps that have an acyclic corresponding hypergraph1. a hypergraph of a csp can be easily constructed by mapping all variables of the csp to vertices and the constraint scopes to hyperedges. a csp with an acyclic hypergraph can be solved effectively in a backtrackfree manner by first traversing the graph from the leafs to the root and computing possible value tuples and secondly  traversing the graph from the root to the leafs and selecting one tuple of a node as a solution. the hypergraph corresponding to fig. 1 is cyclic  see figure 1 . 
　in the rest of the paper  we recapitulate decomposition methods  present a version of tree* that fits these methods  show the interaction of decomposition and tree*  and present an extension to the algorithm that can be used with extended domains as presented in  mauss and tatar  1 . 
1 decomposition methods 
several different decomposition methods have been published  most recently the hypertree decomposition method  gottlob et al.  1a . this and other structure-based decomposition methods make compute a tree-structured systems from general csps by elimination of cycles from the csp. a cycle can be eliminated by applying the relational algebra join operation to the constraints on the cycle. however  blindly joining all constraints in the cycle can result in exponential costs for computing the tuples of the joined constraint  and a key property of the different decomposition methods is the different techniques they use to select the constraints to be joined. gottlob et al.  compared different decomposition methods with respect to their width  i.e.  the maximum number of constraints to be joined  and found that hypertree decomposition is superior with respect to the width. since hypertree decomposition can be seen as a generalization of the other techniques  we restrict our examination here to hypertree decomposition. note that the result of a decomposition method is always a hypertree. 
　in  gottlob et al.  1  hypertree decomposition is characterized as follows. a hypertree of a hypergraph if is a triple 
i is a rooted tree with vertices n 
and edges e  are labeling functions which associate to each vertex a set of variables   and a set of constraints edges h . we further define for a s u b t r e e o f t a s a n d for any denotes the subtree of t rooted at p. we denote the root of a hypertree by root t  . 
　based on the above definitions  the hypertree decomposition of a hypergraph h is defined as a hypertree hd -  where t -  tv  e  which satisfies the following 
conditions: 
1. for each edge that var h  
1. for each variable 
  p } induces a connected subtree of t. 
1. for each 
1. for each 
　moreover  we say that h edges h  is strongly covered in hd if there exists a vertex p n such that var h   p  and . a hypertree decomposition hd of a hypergraph h is a complete decomposition of h if every edge of ff is strongly covered in hd. note that it is always possible to make an incomplete decomposition complete by adding new vertices to the decomposition. gottlob et al.  1b  gave an algorithm for computing  complete  hypertree decompositions. 
　note that unlike other decomposition methods such as biconnected component decomposition and hinge decomposition  there is in general no unique hypertree decomposition of a given csp. figure 1 shows four possible hypertree decompositions for the hypergraph depicted in figure 1. 
1 diagnosis with tree* 
to be self contained we briefly recapitulate the tree* algorithm. stumptner and wotawa  introduced the tree* algorithm as an extension of the tree algorithm. both algorithms work on tree-structured constraint systems. as opposed to tree which requires the constraints to be mathematical functions  tree* imposes no limitations on the constraints. tree* uses the following auxiliary functions associated to constraints: constr denotes all tuples of the constraint  val denotes the tuples remaining after the application of tree*  diags denotes the diagnoses that correspond to a given tuple. accordingly  a csp that is to be used for diagnosis purpose has to represent not only the tuples for each constraint but also the diagnoses that correspond to each tu-

ple. for example  the small circuit from figure 1 can be represented by the following csp: 
diagnosis 	1 


 a  	 b  	 c  	 d  
figure 1: alternate hypertree decompositions of figure 1 


　the tuples of form  x x... x  in the above tables are intended to match all tuples that are not explicitly given in the table. note that the constraint n  represents a connection and is therefore assumed to be always correct. hence  it always returns the empty set as a diagnosis. 
　the original description of the tree* algorithm was based on the underlying assumption that the leaf vertices of the tree correspond only to one diagnosis component. this assumption has an impact on the description of the algorithm  but not on the empirical results. if the constraints given to the algorithm do not satisfy this requirement  diagnoses of a size  i.e.  number of faulty components  larger than specified might be returned because there is no way to remove these diagnoses from the set of tuples. the requirement did not constitute a hindrance since  stumptner and wotawa  1  did not deal with csps resulting from decomposition. to explicitly generalize tree* to interact with decomposition algorithms  we here present a modified version that removes this requirement. 
the following operations are used by tree*: semi-join for constraints  cartesian product  x  for combining 
two sets of diagnoses  i.e.  and cardinality restriction  |  for remov-
ing diagnoses from a set of diagnoses with a size greater than the given value  i.e.  algorithm tree* 	 hd  p  diagsize  
computes all diagnoses up to a pre-specified size for a given tree-structured diagnosis system. 
input: a decomposition hd with edges e  the root vertex p  and the pre-specified diagnosis size diagsize. output: the diagnoses for each value tuple. 

　the tree* algorithm is called using the root p of the hypertree  i.e.  the result of a decomposition  as argument. after execution  the computed diagnoses can be found in the diay column of the tuples associated with the root p. 
　the tree* algorithm correctly computes all diagnoses up to the given size if the following requirements arc fulfilled: 
1. every constraint is at least used in one of tree vertices. 
1. the induced subtree for every variable is connected. 
theorem 1  correctness  the tree* algorithm correctly computes diagnoses up to the pre-specified size. 
proof. the proof is by induction over the size of the tree. 
base step for each leaf of the tree only lines  l - 1  and  1  of tree* are executed. in these lines  all tuples that contradict the given observations and all diagnoses larger than the specified size are removed. tuples with no corresponding diagnoses are removed. these steps do not prevent tree* from computing a diagnosis. hence  all diagnoses  up to the pre-specified size  are computed for leafs. 
diagnosis 

hypothesis we assume that tree* correctly computes diagnoses for trees of size smaller than n. 
induction step we now prove that tree* correctly computes the diagnoses for trees of size n. the steps  l - 1  only reduce the number of diagnoses. tuples that contradict the observations are removed. diagnoses that are larger than the pre-specified values are removed and tuples with a corresponding empty diagnosis set are also removed because they have no influence on the result. in step  1  the tree* algorithm is called recursively. because of our induction hypothesis  the algorithm returns correct diagnoses for each tuple. it remains to prove that the combination of these tuples with the tuple of the current node is done correctly. since every tuple that joins  line  1   is considered and since that every diagnosis is combined with every diagnosis of the child vertices  line  1    this process must lead to a correct result. hence  tree* correctly computes the diagnoses in step n as well. 
　using the same arguments as above we can show that tree* allows for computing all diagnoses providing that all the diagnoses for each vertex of the hypertree are computed. we omit the actual proof here. 
theorem 1  completeness  the tree* algorithm computes all diagnoses up to the pre-specified size. 
　the remaining issue now is to determine the conditions that a decomposition method must satisfy in order to be used with tree*. moreover  we examine the computation of the join relation for those tree vertices that comprise more than one constraint. 
1 decomposition and joining of constraints 
as an example we take the hypertree decomposition result from figure 1 b . in order to apply tree*  we first have to compute the tuples for the constraints that occur in one vertex  e.g.  {n1  n1}. the tuples can be computed by first joining the constraints  and second computing the diagnoses diags for each tuple of the joined constraint by combining the diagnoses associated with the corresponding tuples of the original constraints. the following algorithm computes the 
join relation for the constraint of a hypertree vertex p. 
algorithm joinrelation 	 p  
computes the join for a hypertree vertex input: a hypertree vertex p. 
output: the coiistr and diags function of the vertex p. 
　in the above algorithm the diags function is indexed with the corresponding vertex of the hypertree or the corresponding constraint. the function stands for relational join and for relational projection. diagnoses are only combined if a 
constraint is fully captured by the given vertex of the hypertree. otherwise  it is not considered. since every constraint must be fully captured by at least one hypertree vertex  no information is lost by this procedure. 
　for example  the join of constraints n1 and n1 would lead to the following constraint  with 1 tuples  when retaining the v constants  and of course 1 otherwise : 

　if  as in this example  the join operation is a cartesian product  the resulting relation is of course very large. however  during the computation of diagnoses using tree*  many tuples can generally be eliminated because of the given observations and the pre-specificd maximum diagnosis size. 
　to illustrate this  assume now that we have a set of observations  and that we arc 
searching only for single diagnoses  i.e.  diagsize - 1. using the decomposition from figure 1 b  tree* is first called with the vertex  constraint   n1 . after executing lines  1  1   including the semijoin that results in the removal of tuples that do not fit the operations  the constraint of  n1  is given by: 


　tree* is then recursively called on vertex resulting in the following relation  which is substantially smaller than the computed join relation for this vertex  even after ail x entries of the original tables have been replaced by either 1 or 1  while avoiding duplicated entries  first table   then we again recursively call tree* which leads to the computation of the following relation for vertex   second table : 
diagnosis 	1 


　in the next step tree* continues the computation at line  1  for vertex  n1  n1 . after combining the diagnoses and removing the tuples with diagnoses larger than diagsize we get the following relation for  n1  n1 : 

　hence  only the diagnosis {n1} is a single diagnosis for our example. 
1 putting it all together 
in order to make use of tree* for general csps  we first apply a decomposition method and then apply the algorithm to the resulting acyclic problem. in this section we summarize the requirements placed on the decomposition method. 
theorem 1 tree* computes all consistent diagnoses for a given  possibly cyclic  csp  v d  c   if it is applied to the decomposition hdof v d c  that was produced by a decomposition method h with the following properties: 
1. the decomposition result  i.e.  a hypertree hd  must be complete. 
1. the vertices that use a given variable  must form a connected subtree of the hypertree hd. 
　proof  sketch : we consider each condition in turn. as discussed in the previous section  the decomposition method must produce a complete decomposition  i.e.  every constraint must be strongly covered  as this is a prerequisite for the correct working of the join algorithm. concerning condition 1  assume that this condition were not satisfied  i.e.  that for some y   does not induce a connected 
subtree. this implies either that  if we have no sub-tree of the resulting hypertree  the decomposition is not cyclic  or that there exists a variable that is used in both sub-trees but not in the parent. in the latter case  the process that computes a solution cannot view the sub-trees as independent problems any more  and tree* will fail to compute a correct outcome. the other conditions of the hypertree decomposition can be relaxed without affecting the result. if condition 1 is not obeyed  that means some nodes contain variables that are not constrained. this may affect the efficiency of the algorithm  because the node relations include a cartesian product with the values of those variables  but not the correctness. if condition 1 is not obeyed  this means that some variable z such that  is not contained in the constraint associated with p  i.e. in relational terms z has been projected away. this means that some subtree of t is going to be less restrictive in execution  leading to excess tuples. however  since the decomposition is required to be complete  all constraints that contain z must exist in unprojected form somewhere in t. 
these two conditions are true for hypertree decomposition 
 gottlob et ai  1a   biconnected components  freuder  1   hinge decomposition  gyssens et al.  1   and tree clustering  dechter and pearl  1 . 
　the following algorithm summarizes the combined use of tree* and a decomposition method to compute the diagnoses for any csp c of the form described in section 1. given a csp c  using any decomposition method that fulfills the properties of theorem 1. 
 1  apply decomposition to c  i.e.  compute a hypertree  tv  e  for the corresponding hypergraph of c 
 1  for  do joinrelation f  end for; 
 1  tree* root t  ; 
 1  return diags roof t'  ; 
   the pre-compilation performance of the overall algorithm is that of the decomposition algorithm  examined in  gottlob et al.  1   together with the required costs for joining constraints using the joinrelation algorithm. the diagnosis time is the running time of tree*. performance and scalability tree* have been studied in  stumptner and wotawa  1  . note that the tree* run time depends on the size of the relations that are stored in the vertices of the resulting hypertree. this size depends on the number of constraints that must be joined  and this in turn corresponds to the width of the decomposed system. hence  using a decomposition method that provides a smaller width leads to hypertrees where tree* performs better. 
1 extension to intensional relations 
in  stumptner and wotawa  1   we mentioned the possibility to use other than extensional relations for constraint specifications for the tree and tree* algorithm  e.g.  computed functions or equations with infinite domains. such domains require a different interpretation of the operators that are used for joining the relations associated with nodes in the tree. conceptually  however  nothing is changed since  as we will show  the definition of the tree* algorithm fits the requirements. we show this by adopting the notation used for the basic computational operations of the aggregation paradigm described in  mauss and tatar  1 . 
diagnosis 
　the rich constraint languages approach described in  mauss and tatar  1  consists of three inference procedures  which are applied to a set of constraints it. the procedure i s c o n s i s t e n t produces a proof tree  called ag-
gregation tree  that derives consistency or inconsistency. if consistent  then  applied to the root of this tree  the procedure solve computes  nondetcrministically  a solution that assigns a value to every variable in r. if not  the procedure xc1  and its extension xe1  computes the set of minimal conflicts for a. 
　the aggregation operation that gives the tree its name consists of joining two constraints a and b  expressed as relations or equations  and then projecting out all variables except the set of variables x needed for joining to other constraints: 
   this can be written using the 
semijoin operator that we have used above: . thus  the tree* algorithm can be changed to approximate the aggregation paradigm purely by letting s and / refer to tuples  for extensional constraints  or equations  and changing line 

the joinrelation algorithm is changed by replacing the 
first line by 
　in terms of algorithmic structure  the approach of  mauss and tatar  1  bears many resemblances to the decomposeand-diagnose paradigm used in lfattah and dechter  1; darwiche  1; stumptner and wotawa  1 . computationally  there are however significant differences. the outcome of i s c o n s i s t e n t is a proof tree whose leaves are the base constraints of the original csp  not a hypertree whose nodes arc the constraints of a backtrack-free csp equivalent to the original csp. the search for a diagnosis consists of running i s c o n s i s t e n t   computing minimal conflicts  and the hitting sets. in our case  we compute the decomposition hypertree  then apply the joinrelation algorithm and finally apply tree* to compute the diagnoses directly. 
　while the nondeterministic selection of arbitrary constraints from the given csp to produce a proof tree is quite effective in general  as indicated by the authors  there are cases where the  width  of the generated problem leads to a drastic growth in intermediate relations. it is this situation where an approach based on hypertree decomposition  which is generally the method with lowest widths  fits best to the strengths of the tree* algorithm. 
1 	conclusion 
in this paper we introduced a framework that allows for combining various structure decomposition methods and algorithms for solving tree-structured diagnosis problems. the framework comprises two parts. in the first part  we show how to construct a tree-shaped constraint system that can be used directly by tree* for computing diagnoses. for this purpose we introduced the join relation of constraints. in the second part  we state the properties of a decomposition method so that it can be combined with tree*. finally  we show the suitability of the tree* framework for the extension to infinite domains and intensional constraints  e.g.  equations   by adopting a basic operation from another  not hypertree based framework. 
