 
       the c o n t r o l s t r u c t u r e of the jpl research robot and the operations of the n a v i g a t i o n subsystem are discussed. the robot functions as a 
network of i n t e r a c t i n g concurrent processes 	d i s t r i b u t e d among s e v e r a l computers 	and coordinated by a c e n t r a l e x e c u t i v e . 	the r e s u l t s of scene analysis are used to c r e a t e a segmented t e r r a i n 
model in which surface regions are c l a s s i f i e d by t r a v e r s i b i l i t y . the model is used by a p a t h -
p l a n n i n g a l g o r i t h m   path*  which uses t r e e search methods to f i n d the o p t i m a l path to a goal. in path*  the search space is d e f i n e d dynamically as a consequence of node t e s t i n g . maze-solving and the use of an a s s o c i a t i v e data base f o r c o n t e x t dependent node generation are also discussed. execution of a planned path is accomplished by a feedback guidance process w i t h automatic e r r o r 
r e c o v e r y . 
	1 . 	i n t r o d u c t i o n 
       the robotics research program at the jet p r o p u l s i o n laboratory is aimed at developing the c a p a b i l i t i e s i n machine i n t e l l i g e n c e systems r e q u i r e d f o r a semi-autonomous v e h i c l e to be used in remote p l a n e t a r y e x p l o r a t i o n . to achieve t h i s end  a  breadboard  robot has been constructed 
*   f i g . 1  to serve as test bed and demonstration t o o l f o r the programs and hardware. research is 
b e i n g conducted i n the areas o f r o b o t v i s i o n   p r o b l e m - s o l v i n g and l e a r n i n g   hardware and system a r c h i t e c t u r e   m o t o r - f u n c t i o n c o n t r o l i n manipulat i o n and locomotion  as w e l l as the t e r r a i n 
modeling and n a v i g a t i o n tasks described h e r e i n . 
       in the jpl experiments  the robot is deposited in an unknown l a b o r a t o r y environment c o n s i s t i n g of many a r b i t r a r y obstacles   r o c k s   w a l l s   and o t h e r objects  and is given tasks such as f i n d i n g and c o l l e c t i n g s e l e c t e d rock samples. as a robot subsystem  the n a v i g a t i o n system has the r e s p o n s i b i l i t y of f i n d i n g an unobstructed path to a designated goal and then c o n t r o l l i n g the v e h i c l e ' s movement along the p a t h . to do t h i s   it must m a i n t a i n a n i n t e r n a l r e p r e s e n t a t i o n o f i t s e n v i r o n ment from sensory i n p u t f o r use in the planning phase and then use a d d i t i o n a l sensory i n p u t to monitor execution of movement. the environment is i n i t i a l l y completely unknown  and the path planner requests updates to the t e r r a i n model as needed f o r p l a n n i n g . 

	figure 1. 	jpl research robot 
       a t e r r a i n model was chosen f o r the robot that s i m p l i f i e s the task of path planning w h i l e s i m u l taneously p r o v i d i n g a means of r e p r e s e n t i n g l a r g e 
areas of t e r r a i n in a compact  segmented  h i e r a r c h i c a l s t r u c t u r e that is e a s i l y updated or extended. having a numeric d e s c r i p t i o n of the l o c a t i o n and shape of obstacles allows the path 
planner to a c c u r a t e l y model the c h a r a c t e r i s t i c s of the v e h i c l e w h i l e conducting the o p t i m a l path 
s e a r c h   so t h a t the r e s u l t i n g path is in a form that is r e a d i l y executable by the guidance programs to w i t h i n a known e r r o r t o l e r a n c e . 
	1. 	robot system s t r u c t u r e 
       the jpl robot operates as a hierarchy of separate concurrent processes which are d i s t r i b u t e d among three computers. the main c o n t r o l s t r u c t u r e   f i g . 1  c o n s i s t s of a robot executive  rex  which communicates w i t h t h e o p e r a t o r v i a the  ground system.  other processes  whose f u n c t i o n i n g is coordinated by the executive  though not neces-
s a r i l y determined by i t     perform the tasks of v i s i o n   m a n i p u l a t i o n   and n a v i g a t i o n . the c o n t r o l h i e r a r c h y is not s t r i c t l y enforced  however  as processes may i n t e r a c t f r e e l y in such f u n c t i o n s as hand-eye c o o r d i n a t i o n   e t c . recent a d d i t i o n s to the system i n c l u d e processes f o r e r r o r recovery and p r o b l e m - s o l v i n g   which w i l l be the nucleus of 

this paper presents the r e s u l t s of one phase of research c a r r i e d out at the jet propulsion l a b o r a t o r y   c a l i f o r n i a i n s t i t u t e of technology  under contract no. nas 1  sponsored by the national aeronautics and space a d m i n i s t r a t i o n . 
keywords: 	o p t i m a l path p l a n n i n g   	t e r r a i n modeling  p a r e n t backup  subgoal s t a c k i n g   and maze-solving. 
robotics-1: thompson 
1 

a system for automatic planning  error correction and learning. the sensory-motor processes have sub-processes on the minicomputer containing the actual vehicle interfaces. processes suspend themselves when not needed. 
　　　communication between the processes is handled by a shared program segment  mailbox  method  similar to that of the stanford hand-eye system  fs1 . messages passed within one computer are merely stored in the appropriate slot in the 
shared segment  whereas inter-computer messages are transmitted by a separate communications 
process to the appropriate machine and then deposited. this structure is extensible to multiple 
processors. a process need not know on which cpu another process runs. at present  three cpu's are connected: a dec pdp-1  a ga spc-1 minicomputer  and an imlac pds-1d graphics system. the  high-level  processes run on the pdp-1  and are implemented in the sail language and  recently  in lisp. in the minicomputer  fortran and assembly code are used. a l l interfaces to the vehicle hardware are currently contained in the mini  but since it has limited capacity for parallel processes  the use of a microcomputer network is being investigated. 
　　　the navigation system runs as three concurrent processes: the navigation executive  nex    the path planner module  ppm   and the vehicle guidance module  vgm  . both nex and ppm access the terrain model f i l e s . nex is the controlling process for a l l navigation functions. it contains the command interface to the robot executive which translates acceptable commands into the appropriate action. the nex process invokes the path planner upon request and processes map update requests generated 
by ppm. map requests are forwarded to the vision system  and replies from the vision system are processed by nex procedures into the terrain model format and added to the data base. the required transformations w i l l be discussed below. nex also 
invokes the vgm either to move the vehicle along planned paths or to execute movement primitives. 
	1. 	the terrain model 
　　　in order to perform path planning  the navigation system must maintain a model of the robot's environment in which features that would affect the vehicle's movement are represented. since the area explored by the robot may be large  and many such obstructions encountered  it is desirable to have a terrain model that is partitioned into segments of 
a convenient size  within which the features have a compact numerical representation. the map segments should normally reside in bulk storage and should have an access structure that allows rapid loading when needed. the model used in the navigation system was designed to meet these require-
ments. in addition  since the testing of proposed path links is the major computational expense of path-planning  the representation is optimized for this purpose. the segments  when loaded  form a 
hierarchy for accessing the barrier descriptions and  as discussed below  the structure of the descriptions was chosen to f a c i l i t a t e the process of path search. 
robotlrs-1: thompson 　　　the territory represented in the terrain model is partitioned into map sectors by a fixed l a t t i c e of grid lines. the grid lines are drawn parallel to the axes of the robot's absolute  lab-based  coordinate system and are equally spaced  so that the sectors are square and may be numbered relative to the origin. the sector number may thus be used to compute the absolute coordinates of the sector. the map sector is defined by providing to the model a f i l e containing the terrain description for the area covered; the resultant directory of sectors is thus analogous to a catalog of charts. 	at present  a three-meter grid spacing is used for within the lab. 
　　　the primary source of input to the model is the vision system. when a description of a 
sector is requested by nex for use by the planner  the request is sent to the vision system  which perforins the required terrain analysis. here the perceptual problem is that of producing from 
stereo tv and laser rangefinder inputs a segmentation of the area covered by the requested sector 
into regions described as traversible  obstructed  non-traversible  or unknown  ycl  yc1 . the information available from a new viewpoint must be combined with that already in the model to produce a new sector description. this map maintenance process is subject to errors which w i l l be discussed later. 
　　　it is of interest to note that what is described in the map is the traversibility of the 
terrain surface. 	this is adequate for the 
purposes of path-planning and allows a twodimensional representation for a l l types of obstructions  as shown in fig. 1. as a greater variety of terrain descriptors are added to the model  such as slope and altitude  information pertaining to the third dimension may influence the cost of a path on the. goals of the robot. should it become necessary to describe multilevel structures  new description types may easily be added to the model. 
　　　within a map sector  terrain regions are described by polygonal boundaries which are 
represented as l i s t s of the vertices  corners  of the polygon. at present  regions are classified 
either as obstacle  non-travers ible  or unknown. a l l else is presumed clear and traversible. some generality is lost by dividing barriers that overlap a sector boundary between the adjacent sectors  but the path planner detects this case and regards the parts as a single obstacle. there is also a capability for a region at sector level to represent a cluster of objects  in which 
case the description contains a l i s t of other boundary or cluster descriptors. when loaded into memory  the descriptors for regions within a sector become the  datums  of sail  items   so that the associative search features of sail may 
be used in the path-planning process  vl1 . 
　　　in new map sector descriptions provided by the vision system  the borders of the terrain 
regions are represented by l i s t s of predefined unit vectors  in which consecutive vectors 
describe  1 cm  unit steps along the boundary. the navigation system must translate this representation into the polygon vertex l i s t used in the map. the translation procedure locates the minimum number of corners necessary to describe the boundary to within a known tolerance. the operations include smoothing  elimination of inaccessible regions in the i n t e r i o r of closed boundaries and f i n a l l y   an iterative polygon approximation to the boundary. the resulting 

	figure 1. 	a terrain map sector 
description is a l i s t of corners in order of their connection  plus a centroid and clearance 
radius used to simplify the path testing process   t l   fl . 
　　　in the normal mode of operation  when the ppm is assigned a planning task  its f i r s t operation is 
to determine which map sectors l i e along the 
straight line path from start to goal. 	queries for the indicated sectors are sent to the vision 
system  which then determines if a map update is possible for any requested sector. each sector update is dated  so that if the vehicle has moved since the last update  additional information may be available from the new point of view. in the l a t t e r case  the vision system would provide a new sector update; otherwise it would indicate that the planner should use the existing model. as the queries are answered the corresponding sector maps are loaded into memory for use by the path-planning process. the boundary between the loaded and not-loaded sectors is represented in the map as a special obstacle. i f   during the course of planning  the map border is encountered  the map must be expanded by adding additional 
sectors. 	the appropriate queries are then generated and the process is suspended until the replies 
robotics-1: thompson are received. thus  the sector loading mechanism forms a sort of   v i r t u a l memory  for the segmented map. the system is structured so that the map updating process of the vision system may operate freely in parallel with the navigation process  collecting terrain data available from the current viewpoint  even though the updates may not be needed immediately. 
	1. 	the path-planning process 
　　　the task of using the terrain model to find an unobstructed path to a selected goal is performed by the path planning module. naturally  there may be many alternative routes to a goal  
so a measure of path cost is introduced to define a selection criterion for optimal path search. at present  the cost of a path is the distance along i t   but other measures  such as time or energy  may be used in the future. 	the cost metric could also be redefined by the system from one path search to the next to solve specific problems. 
　　　true optimal search is possible only when a l l obstructions in the area encountered by the search are known. the planner  however  has access only to terrain information represented in the map at the time of planning plus those features observable from the robot's current location. from the robot's i n i t i a l point of view  much of the terrain may be obscured  by occlusion or 
distance   but since the obscured terrain is also 
represented in the model by unknown regions  the 
planner can detect the case where a proposed 
traverse intersects the unknown and may terminate the search at that point. 	an optimistic executive could move the robot to that point  or near enough 
to classify the unknown area   update the map  and plan a new path to the original goal. a 
pessimistic executive could regard unknown 
terrain the same as an obstruction and look for a  possibly  longer path. the planning algorithm is capable of functioning in the l a t t e r mode  and may be told to switch to this mode after detecting  and remembering  the f i r s t  possibly optimal  p a r t i a l path. 
　　　with the selection of a cost metric and a function for defining nodes in the search space  traditional methods of optimal path search may be used  hnr1 . the decision to use the energy required for the traverse  which in a zero slope lab environment translates to distance  as a metric 
was motivated by the need to demonstrate a system suitable for application in an actual robot planetary exploration vehicle  as compared to  for example  sri's robot  shakey  which simply used search depth as the cost  resulting in a path with the fewest number of links  rl . although  as one 
would expect  the strategy of avoiding an obstruction by generating candidate paths to either side of it is a feature common to previous path planners  the minimum distance requirement  as shown below  demands a more complex node generation scheme than that required for simpler cost measures. also  proper choice of successor nodes  combined with pruning  keeps the problem one of tree search rather than graph search. 
path planning defined 
　　　for the purposes of this discussion  path planning w i l l be defined for a point vehicle and then elaborated for the f i n i t e case. the map w i l l 
be defined in terms of a set of vertices   v  and a set of non-traversible walls  w  where 

the set of vertices  with the addition of two points defining the start and the goal  define p  the set of a l l points in the map. then for each point pi in p we define a set li.   where 

li. is called the link set of p. and is composed of the walls adjacent to p.   i f p. is a vertex  plus a l l line-of-sight links from p. to other members of p. a path from the start to some point q e p is a l i s t of links 

　　　path search may be defined in these terms. we define a successful node in the search as a point  in p  to which there is a known path. the link of a node is the path segment from the parent node to the given node. similarly  successor links go from a node to successor nodes. a goal link is the l i n k from a node to the goal. for each node p  in the search  we select successor links from l u n t i l the  optimal  path is found. 
in our map definition  however  the l i n k sets must be derived  since only the walls are represented. by deriving the l i n k set as needed  we avoid the combinational explosion that would result from representing the link set of each point in the map. ihe link set from a node is found by proposing candidate links to be tested for membership in the set. normally  the f i r s t candidate is the goal l i n k from the node. a candidate link p  p.   is tested by examining the set w for intersections. if p k p k ' ♀ w  the membership assertion is true. 
if pi k' cuts no w a l l   the assertion is true  and 
robot ics-1: thompson pk 	becomes a node in the search with p  	as i t s parent and  typically  the goal link from pk as i t s successor candidate. however  if there is an intersection with some a.b. in  w the assertion is 
false  and lines p. a. and p. b. then become candi-
                     k i k i date links for future testing. note also that lines pa  and p i b i   j=l   1   . . . k - 1   may also be candidates for their own l i n k sets  but  in an optimal path search  a l l but one of the successor candidates to a  or to b  may be pruned as 
discussed below. 
　　　with the goal of finding the minimum cost path from start to f i n i s h   the a* algorithm  hnri  may be applied  with modifications  to perform optimal path search in the space defined above. given a node generating function  r  and an admissible node cost criterion  the a* method is guaranteed to find the lowest cost path through the space defined by t  if it exists. in path*  the algorithm used in the jpl robot  a node in the search space is actually what is described 
here as a path l i n k   since it is the link record that is tested for success or failure. also  the 
notions of parent and successor are different from those of a*. after a path l i n k is tested  path* may select one or more points in the map as destinations for candidate links  but  by a procedure discussed below  the search tree is 
traced back to find the optimal parent for each chosen destination. 	the destination then becomes a candidate for the link set of that parent. 	new candidate links generated as a consequence of the failure of a link are said to be  engendered  by the failed l i n k and are associated with it for 
possible use in subgoal generation. 	the algorithm 
* uses these and other relations between links to form an associative data base describing the 
search context for use in node generation and pruning. these techniques w i l l be illustrated in the examples below. 
　　　the cost function for a link is the actual distance along the  unique  path from the start to its endpoint plus the straight line distance remaining to the goal. since the straight-line distance from the endpoint to the goal is the lower bound on the actual path cost of reaching the goal  this heuristic estimate satisfies the admissibility requirement of a*. in certain 
maze-like configurations  this heuristic estimate may be increased to improve search efficiency. as in a*  untested candidate links are kept in a l i s t ordered by this cost estimate  so that the main loop may always select the least-cost link for the next test. 
　　　the question remains  of course  whether the successor generation procedure described above is capable of covering the link set from a node or  in the case of optimal search  of generating that 
member of the link set that lies on the optimal path from the given node. this turns out to be the heart of the planning problem  because there 
are maze-like configurations of concave barriers where the search must move away from the goal in order to reach i t . barriers with concave boundaries must be avoided on the edge-by-edge  wall following  basis discussed above  rather than by generating links to the extreme tangent points of the barrier  which is adequate for convex 
barriers . also  as w i l l be shown  it is often necessary to choose as the successor candidate l i n k from a new node some link other than the goal 
link. this alternative to the goal link is called a subgoal link  whose end node  the subgoal  is the end node of the link whose failure  obstruction  led to the generation of the given  successful  link. 
　　　to illustrate these principles  consider the search space shown in fig. 1a. the straight path from start to goal is obstructed by wall cd. candidates sc and sd are generated. in the search tree notation shown in fig. 1b  the line cutting the tree link from parent to node implies an 
obstruction of the physical link  as well as indicating that the successor nodes have the same parent as the failed link. the parent node is mentioned in the box for the successor for convenience  and also illustrates the interchange-
a b i l i t y of the notions of node and physical l i n k . 
　　　the successors would be tested in order by cost  but for the purpose of discussion we w i l l consider a more depth-first approach. link sd is unobstructed  so the goal link is generated. this link is in turn obstructed by wall fh. note that the successor h is to the right of the parent link 
sd  and that sd is avoiding wall cd on the right. this implies that h may be reached from the parent of d  in this case the start point s  and is guaranteed to avoid cd on the right  so the link sh is generated instead of dh. in practice the successor generator function w i l l trace back perhaps several generations to find the oldest ancestor that does not satisfy the  parent-backup  condition  thus selecting the parent with the shortest path to the successor that w i l l avoid on the same side those same walls avoided by the intervening l i n k s . of course  the new link from 
the backed-up parent is not guaranteed to be unobstructed  just that it w i l l not hit those 
walls avoided by the intervening links. if the shortest path to the successor lies on the opposite side of one of the intervening walls  it would be found by the normal search process proceeding from the nodes on the opposite ends of the walls. 
　　　continuing with the example  the new l i n k sh is obstructed by wall i j . the links sj and si are generated as usual. however  note that link si hits the wall near d again. this repetition is detected by an associative mechanism  discussed below    and since sd was previously found to be successful  the link di may be generated at once. 
　　　returning to consider link sc  other features of the algorithm may be shown. sc f a i l s   suggesting sb as a candidate avoiding b on the r i g h t . sb succeeds  but note that now the goal is on the right of the line containing sb. this state would normally indicate parent backup  but since the 

r o b o t i c s - 1 : 	tbomoson 

goal link from any parent would have already been considered  the destination of the failed link that engendered sb is proposed  in this case c  so bc is generated to avoid cd on the l e f t . this remembering of subgpals is accomplished by associ-
ating with the successor links the l i n k whose failure led to their generation. in this case  the failed l i n k sc is associated with both links sa and sb. note that sb could be obstructed as w e l l   and new links from s would be engendered with b as the sub goal. such an occurrence would represent the  pushing  of a new level of sub goal onto an implied  stack . in general  once a node is successfully reached and if the successor link is generated to a sub goal  instead of the goal    the subgoal of the l i n k associated with the 
successful link is then passed along  associated  to the successor  i . e .   if the successor is a 
subgoal  it inherits the subgoal of that subgoal. this represents a  pop  of the implied subgoal stack. 
pruning the search space 
　　　one of the advantages of performing optimal cost-directed search is that the f i r s t path found to a node is the optimum  hnr1 . this allows a 
node marked as having been successfully visited to be used for pruning the search. no different path 
to that node need be considered later in the 
search. this eliminates the need for a graph search process in which a lower cost to a node may be discovered later in the search  requiring updating of a l l successor node costs. thus  for example  when the goal link from a hits wal  cd in the figure  neither ac nor ad should be generated. pruning is indicated in the tree of fig. 1b by a dot in place of the successor. the requirement 
for barriers to be closed polygons is dictated by this pruning consideration  since if the same-
vertex could be reached from both sides of a 
barrier it would be necessary  when testing a candidate for pruning  to determine if the candidate is on the same side of the wall as the successful l i n k . that would not always be a simple test  so considerable time is saved by the requirement that barriers have  thickness . 
　　　the other category of pruning deals with the detection of duplicate links with the same parent  
which can occur as a consequence of repetitive failure configurations  or due to parent backup  as shown above    or in cases where the search originates within a concave barrier. whenever a 
new link is to be proposed  the destination of the l i n k is compared with that of every other l i n k proposed from the parent. 	the parent-successor associations are used to derive this set. 	if no 
match is found  the proposed link may be generated. 
however  if the l i n k had been previously generated   i . e .   a match is found   the link could be either unobstructed  obstructed  or not yet tested. for each of these cases  action is taken that results in the generation of the appropriate link required to guarantee continuation of the optimal 
search. required sub goals may be associated with untested nodes  or  as in the example  the tree below the parent may be examined for the proper 
figure 	1  	path search examples 
	robotics-1: 	thompson 

node from which to generate a link to the subgoal. also  the repetition detection w i l l recognize those barrier configurations in which a gap is too narrow for a finite-sized vehicle. in fig. 1c the circles around the vertices a and b indicate the radius by which the  finite-sized  vehicle must avoid the corner. when link sa attempts to avoid a on the right it encounters the wall at b. then when sb attempts to avoid b on the l e f t   a is encountered again  but this is detected  and since sa engendered sb  the repetition is suppressed  effectively treating the gap as closed. 
maze-solving 
　　　another case that requires special treatment is that of maze-solving  where w a l l - f o i l owing is needed if the shortest  or even the only  path is to be found. in fig. 1d the starting point is 
contained within a concave polygon. from the vertex b  the goal link is generated  but is obstructed by wall cd. since there is no path to the right of d  the search would proceed to the l e f t of c  perhaps indefinitely  if there were no other rule. however  as mentioned in the definition of the search space  the walls connected to vertex b are contained in the l i n k set of b  and in this case the shortest path is along the wall ab. it should be noted that unless an adjacent wall is encountered by the normal search that always proceeds toward the goal  wall-following 
is needed only if it becomes necessary to circle back around the starting point of the search. this allows the normal heuristic estimate of the remaining distance to the goal  used in computing the node cost that determines the order of testing  to be increased by the straight-line 
distance from the start to the node in question  since that is a lower bound on the path length back around the enclosing obstruction. this increase in total node cost results in fewer unnecessary tests. thus  when a new successful node is found  i t s total cost is increased by the defined amount and then reinserted in the l i s t of untested nodes as a candidate for wall-following which would not be tested unless the observed search cost reached i t s new cost estimate. 
　　　using these rules  the search w i l l continue u n t i l a terminating state is reached. if a successful goal link is found  or if an obstructing wall is the border of an unknown region  normal termination occurs. if the goal is enclosed within a barrier  or if the l i s t of untested nodes is exhausted due to repetition pruning  the goal is declared inaccessible. also  the search could run out of memory  in which case  the path to the successful node 
nearest the goal is returned. 
real-world considerations 
　　　it is useful for the path planner to conduct the path search in accordance with the actual 
vehicle size and maneuvering constraints. the size and shape of the vehicle must of course be considered in detecting collisions  and modelling the vehicle turning capability during path search eliminates the need for adjusting and re-testing the planned path. modelling the vehicle's turning geometry is easily done in the path link generator 
by storing in each link record the center of a turning circle at  or near  the subgoal and the 
straight line path that is the tangent between that circle and the turning circle at the parent link endpoint  fig. 1a . a link is then defined as a turn from the parent's endpoint to the l i n k heading followed by a straight traverse ending at the tangent point of the subgoal turning circle. the sign of a turn  indicating l e f t or right  is dictated by which side of an obstructing edge the link is avoiding  i . e .   if the parent link ends on the l e f t of an edge  its successors w i l l begin 
with a right turn about the vertex  etc. the turning center at a vertex need not be located on the vertex. as shown in fig. 1b  the tangent is found between the turning c i r c l e at the parent 
node and the avoidance circle  of radius r   
centered on the vertex. the solution is obtained by solving the geometrically equivalent problem for the right triangle shown  where s is the sign of the turn at the parent node and s is the 
desired side of the destination vertex. 	 s v=1 
v 
indicates ra = 1.  the endpoint and direction of the link then determine the location of the new turning center near the vertex. turns in reverse 
may be represented for those situations where a shorter path may be obtained by backing up   i n i t i a l or terminal heading constraints  or where normal forward movement is restricted  fig. 1c . the 
vehicle's length and width must also be considered by the link-testing procedure which searches the map for the f i r s t obstructing wall   i f any  encountered by either the turn toward the link heading or the straight part of the link. the testing procedure is discussed in the appendix. 
　　　path* also has several special purpose move generators for such cases as confined spaces requiring complicated maneuvers or for special goal categories. a goal may be specified as a requirement that the robot's manipulator be 
positioned near enough to a selected object to reach i t   etc. also  goals near an edge may impose heading constraints on the vehicle at the goal. the use of tree search methods and state-
space representation by node records is an improvement over recursive reduction in this domain. in fact  examples may be constructed in which the 
success of the search depends upon the a b i l i t y of path* to abandon attempts to reach an inaccessible subgoal in favor of proceeding toward the goal directly from some intermediate node. a recursive algorithm that required reaching the subgoal would f a l l . in path*  the search tree and the other associations become a data base for a variety of operators with a l l levels accessible through the parent-successor and other relations. 
	1. 	planned path execution and error recovery 
　　　upon command to execute a planned path  nex invokes the vgm and sends it the path links in 

r o b o t i c s - 1 : thomnson 


	figure 1. 	path link examples 
succession. the vgm has a system of feedback control loops for translating the movement commands sent by nex into vehicle steering and drive signals. vehicle odometer and gyro-compass heading feedback is used to maintain an estimate of the vehicle's current location  which is then used in the guidance loops to keep the vehicle on the planned path. front and rear wheels steer in 
opposite directions  placing the turning radius through the vehicle center. it is desirable to 
make heading changes without stopping the vehicle  and since the r o l l i n g turn is not a circle due to the f i n i t e steering rate  this creates a systema-
t i c tracking error. 'the path planner requires a clearance along the planned path that is actually larger than the vehicle width  so that this error is tolerable. 
　　　the vehicle w i l l be equipped with proximity and t i l t sensors and already possesses a scanning laser rangefinder to aid in the detection of unexpected obstacles. limited evasive maneuvers by the vgm are allowed  but if avoidance of the obstructing region requires substantial deviation from the planned route  the path is aborted  and 
error recovery procedures are invoked. 
　　　there are numerpus error sources having direct impact on the robot's performance. 	the uncertainty in vehicle position as determined by dead reckoning grows with distance from a known 
location and may be reduced only by external 
references such as landmarks. the sensory l i m i t a tions of the vision system result in uncertainty in the relative position of terrain features 
which at present are added to the map by using the vehicle's location as an absolute reference point  thus increasing error. terrain classifications 
are themselves probabilistic in nature  and in an unstructured environment  mistakes w i l l be made. the end result is that the robot w i l l eventually encounter a rock it never saw  and update the map by remembering the rock in the wrong location relative to a lost robot! after an intervening sojourn it may even repeat the process on the same 
rock. 	of course  laser and proximity sensors 
should prevent actual collision  but both the position and map errors remain. 
　　　landmark navigation  when perfected  w i l l allow the system to reduce the robot's positional uncertainty below some upper bound. the map updating process provides another opportunity for error reduction. knowing the sensory uncertainties  the position of perceived terrain features  and given the locations of previously detected features  the new perspective may be matched against the old by varying the estimated vehicle position  within the error bounds  u n t i l the best f i t is found. data structures have been proposed  ml  that record a robot's perceptual history and associated uncertainties  so as to f a c i l i t a t e such a process. 
　　　until such features are implemented  error recovery w i l l consist of a simple map update from the current estimated position  followed by 
execution of a replanned path. 
	1. 	future work 
　　　it is expected that the navigation capabilities of the robot w i l l be expanded in the following areas  more or less in order: 
1. in confined quarters it is necessary for the path planner to generate moves that 
simultaneously avoid several obstacles and that make heading changes by a com-
bination of forward and reverse turns or movements. in some situations reverse search is useful. such features w i l l be provided either as an improvement to the current algorithm or else be integrated 
with the general problem solver. 
1. a landmark location function  to be provided as part of the vision system  
w i l l be used to reduce position uncertainty either when error estimates in 

r o b o t i cs-1 : 	thompson 
1 

the dead-reckoning position exceed a maximum or else continuously by landmark tracking feedback during 
vehicle motion. similarly  real-time visual feedback would be used to assist obstacle avoidance. 
1. the terrain model w i l l be expanded to categorize areas by slope  texture  etc. objects may be given functional properties such as  pushable   or   fuel-source   etc. to be used in conjunction with  high-level  planning. previously executed paths may be remembered  forming a sort of  road 
map.  
	appendix. 	collision testing in the 
terrain map 
　　　the vehicle is approximated as a rectangle  with variables vl1 and rs representing half the length and width respectively. the value rs defines a  safety radius  on either side of the path. the actual coordinates of path endpoints   etc. contained in a path link record refer to the position of the vehicle center point  so that 
actual collision testing is performed relative to that point. the test consists of detecting whether any edge of an obstacle intersects the area swept out by the vehicle along the path  fig. 1 . turns are tested by testing successive 1 radian chord lines u n t i l the turn is completed. 
　　　when a path line is to be tested  the endpoint is extended vl1 units along the path and used to locate the vehicle front edge l i n e as shown. collision with an obstacle is detected if either of 
the following tests is true: 
e  

a  any vertex is   rs units from the extended path-line. 
b  any edge intersects either the path line or the vehicle front edge. 
the nearest collision to the start of the path is found  and the l e f t and right  of path  vertices 
of the obstructing edge are offered as possible subgoals. 
　　　it is useful to l i m i t the search to only those obstacles that l i e near the path line to avoid 
performing the detailed search of every obstacle in the map. included in the obstacle record is a centroid and clearance radius  rc  the radius of the superscribed circle about the centroid . barriers within the map sectors that contain the path are tested to see if the distance from the centroid to the path-line is   rc + vl1. if so  then the detailed test is performed. 
