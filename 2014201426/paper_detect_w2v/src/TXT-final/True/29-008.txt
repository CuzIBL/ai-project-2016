 
this paper extends recent work on decision tree grafting. grafting is an inductive process that adds nodes to inferred decision trees. this process is demonstrated to frequently improve predictive accuracy. superficial analysis might suggest that decision tree grafting is the direct reverse of pruning. to the contrary  it is argued that the two processes are complementary. this is because  like standard tree growing techniques  pruning uses only local information  whereas grafting uses non-local information. the use of both pruning and grafting in conjunction is demonstrated to provide the best general predictive accuracy over a representative selection of learning tasks. 
1 	introduction 
decision tree pruning  breiman et al.  1; quinlan  
1  is a widely accepted method for post-processing decision trees. pruning removes nodes from an inferred decision tree. it has been demonstrated to improve the predictive accuracy of inferred decision trees in a wide variety of domains  breiman et a/.  1; quinlan  1 . a classifier can be viewed as partitioning an instance space. each partition associates a set of possible objects with a class. pruning reduces the number of partitions imposed on an instance space by a decision tree. 
　in contrast to pruning  a number of recent studies have suggested that predictive accuracy may also be improved by more complex partitioning of an instance space than that formed by standard decision tree induction. predictive accuracy has been improved both by: 
  grafting additional leaves  webb  1 ; and 
  developing multiple classifiers that are used in conjunction to classify objects  ali et a/.  1; breiman  1; dietterich and bakiri  1; kwok and carter  1; oliver and hand  1; nock and gascuel  1; schapire  1; wolpert  1 . 
the latter approaches lead to complex implicit partitioning of the instance space through resolution of the conflicts between the individual classifiers' partitions. 
1 	learning 
direct grafting forms an explicit representation of the final partitioning of the instance space by adding new branches to a decision tree after the completion of conventional decision tree induction. 
　the increase in predictive accuracy resulting from more complex partitioning of the instance space can be explained as follows. conventional machine learning techniques consider only areas of the instance space directly occupied by training examples. areas of the instance space that are not occupied by training examples are assigned to partitions as a side-effect of partitioning occupied areas. this occurs without consideration of the available evidence relating to appropriate partitioning of these regions. explicit examination of such areas may provide evidence as to the most likely class for previously unseen objects that fall therein. if there is such evidence and the appropriate classification differs from that currently assigned to the region  a new partition can be formed. this is achieved by grafting a new leaf onto the tree. 
　the use of multiple classifiers obtains this result in a more indirect manner. each classifier will form different partitions. regions occupied by no training examples may fall within different partitions for each classifier. the strength of evidence associated with that region for each classifier can be evaluated and a most highly supported prediction made. 
　consider an abstract example  figure 1 . this illustrates a simple instance space occupied by objects of three classes  *   and o . objects are described by two attributes a and b. these attributes define a two dimensional instance space. an instance of unknown class is also depicted    . on visual inspection it is plausible that this unknown case belongs to class o as it is close to a number of instances of this class. however  most decision tree learners would create a partition that assigned this point to class *. figure 1 indicates the partitions created by c1  quinlan  1   a pre-eminent example of a decision tree learner. in contrast  it is plausible to assign the shaded region to class o. the c1x  webb  1  grafting procedure identifies such regions and grafts new leaves onto the decision tree to form appropriate new partitions of the instance space. 
the primary focus of webb's  grafting research 


figure 1: example instance space 

figure 1: example instance space as partitioned by c1 
was to examine the effect of complexity on predictive accuracy. consequently  c1x was designed to control other potential confounding factors  specifically resubstitution performance. these measures could reduce the predictive accuracy of the inferred trees  webb  1 . 
　this paper seeks to extend webb's  grafting research by developing grafting techniques aimed to maximize predictive accuracy. four key changes to the c1x approach are presented: allowing grafting to alter resubstitution performance; the ordered addition of multiple new branches in the place of a single original leaf; the use of a significance test to restrict the selection of new branches; and allowing grafting within leaves occupied by no training examples. 
　evaluation on twenty representative learning domains demonstrates that the application of the new techniques frequently results in the induction of decision trees with improved predictive accuracy. 
1 	techniques for decision tree grafting 
the new post-processor  c1+  operates by examining each leaf / of an inferred tree in turn. it climbs the tree examining each ancestor node n for evidence supporting alternative partitions within /. this evidence is obtained by considering cuts that could have been employed at n  that would provide stronger evidence in support of a particular class dominating a region within i than that provided by the distribution of objects at /. in doing so  it only considers cuts that fall within the range of values for an attribute that can reach /. it also excludes from consideration cuts that would reclassify an object at / that is correctly classified by l. a set of such cuts are assembled. these are used to graft new branches and leaves onto the decision tree between / and its parent. at present there is no consideration of potential new branches on discrete valued attributes  although in principle this should be straight forward. 
　the evidence in support of each cut is evaluated using a laplacian accuracy estimate  niblett and bratko  1 . because each leaf relates to a binary classification  an object belongs to the class in question or does not   the binary form of laplace is used. for threshold t on attribute a at leaf /  the evidence in support of labeling the partition below t with class x is the maximum value for an ancestor node n of / for the formula where t is the number of objects at n for which min and p is the number of those objects that belong to class x. calculation of the evidence in support of labeling a partition above a threshold differs only in that the objects for which t   a   max are instead considered. where / contains no training objects  it is treated as containing all objects at its parent for the sake of these calculations. 
　the best such   and   cut for each attribute is determined. a list of all these cuts is created  c. 
　the strength of evidence in support of the current labeling of / is calculated using the laplace accuracy estimate considering the objects at /  where t is the number of objects at / and p is the number of those objects that belong to the class with which / is labeled. 
　any cuts that do not have greater support than that for / are removed from c. a binomial test is also employed to further remove from c cuts for which there is insufficient evidence that the resulting leaf is drawn from a better distribution of examples than the original leaf  see step 1 of the algorithm presented in appendix a . c is sorted from the cut with highest support to that with lowest support. trailing elements of c that support the creation of new leaves for the same class as / are deleted as they will not alter the tree's classifications. then the cuts in c are inserted in order creating a sequence of new branches and leaves between l's parent and /. 
　this approach ensures that all new partitions define true regions. that is  for any attribute a and value v it is not possible to partition on a   v unless it is possible for both objects from the domain with values of a greater than v and objects with values less than or equal to v to reach the node being partitioned  even though it is possible that no objects from the training set will fall within the new partition . in particular  this ensures that new cuts are not simple duplications of existing cuts at ancestors to the current node. thus  every modification adds non-redundant complexity to the tree. 
　this algorithm is presented in appendix a. c1+ differs from c1x  webb  1  by 
1. adding multiple leaves at each original leaf - c1x added the new leaf with maximal support only; 
	webb 	1 

1. using a binomial test to prevent the addition of leaves for which there is insufficient evidence that the leaf is drawn from a better distribution of examples  algorithm step 1 ; 
1. allowing new leaves to reclassify training examples  although only if those examples are misclassified by the original leaf ; and 
1. using the training examples at the parent node when a leaf has no training examples - c1x did not allow grafting additional leaves onto an existing leaf that covers no training examples. 
　adding multiple leaves can be expected to be beneficial as every piece of additional evidence can be utilized. however  initial experimentation suggested that adding leaves for which the level of additional support was marginal  while often beneficial  could also often reduce predictive accuracy. the use of a binomial test to evaluate the comparative strength of support for a new leaf is intended to reduce the risk of adding leaves that appear better by chance alone. 
　allowing new leaves to reclassify training examples has intuitive appeal. if there is evidence that a region of the instance space should be associated with a given class  the existence of an object of that class in that region should not prevent a system from forming that association. for example  the object at a = 1  b = 1 in figure 1 should not stop c1+ from relabeling that region as belonging to  . c1x prohibited such grafting actions to avoid experimental confounds arising from differing resubstitution accuracy between treatments  webb  1 . 
　the training examples from the parent node are used for leaves that cover no training examples  as the parent node provides the best available evidence of the class distribution in the neighborhood of the leaf. such leaves are prime candidates for modification as the local evidence in support of any given class assignment is unlikely to be strong. 
1 	example 
c1 creates the following decision tree for the example training set illustrated in figure 1. the partitions created by this tree are illustrated in figure 1. 

1 	learning 
reclassify any training examples correctly classified at the leaf. the leaf for a   1 has only the root as an ancestor. no better cuts can be found. 
　to process the leaf for a   1 the system climbs to its parent node  at which no better cuts can be found  and then to the root. at the root  all values are considered on both attributes that are greater or less than those of the  in all cases correctly classified  training examples from the leaf. there are no training examples with lower values on a or with greater values on b than those of the examples at the leaf. values on a greater than those at the leaf are not considered as such a cut imposed at the leaf would define a new region of zero volume. all values are considered on b less than 1  the lowest value for an example at the leaf. a cut at 1 results in a partition containing and 1 the laplace 
accuracy estimate for the region b 1 for the majority class is the class distributions and accuracy estimates of the remaining possible cuts are: 

the best of these cuts is at value 1 with accuracy estimate 1. the original leaf is occupied by four points all of which are correctly classified resulting in an accuracy estimate of  the probability of obtaining the class distribution  1 positive and 1 negative  given the estimated accuracy for the original leaf  1  is less than 1  so the selected cut is grafted between the original leaf and its parent. the dominating class  for the new region in the ancestor node from which 
the evidence was obtained is assigned to the new leaf. 
　next the system considers the leaf below the branch b   1. the accuracy estimate at this leaf is 
at the parent node  the node reached by the branches a   1 then a   1   a cut at a = 1 creates a leaf containing 1   and no examples of other classes. the resulting accuracy estimate is 1. the probability of obtaining this distribution given the estimated accuracy for the leaf is less than 1  so the new cut is accepted. another cut  at b = 1  is found at the root. the partition formed by this cut contains 1 o and no other examples. the resulting accuracy estimate is  the probability of obtaining this class distribution given the estimated accuracy at the original leaf is also less than 1. in consequence  this cut is also accepted. other potential   cuts on these attributes receive lower accuracy estimates and so are discarded. branches for the two cuts are grafted in order of their accuracy estimate. 
　no appropriate new cuts can be found for the leaf below b   1. 
　the partitions imposed by the resulting tree are illustrated in figure 1. the new partitions labeled a and c are assigned to o and partition 1 to *. while partition a may have less intuitive support than b or c  the support 


figure 1: example instance space after grafting 
for any classification within this region is weak and the class o is at least as plausible as either alternative. 
1 	experimental evaluation 
the postprocessing algorithm was implemented as an extension to c1 release 1  quinlan  1 . 
　it was evaluated by application to twenty representative learning tasks from the uci machine learning repository. these datasets are described in table 1. they show considerable diversity in size  number of classes  and type and number of attributes  within the restriction that all contain continuous attributes  as these are the only attributes on which grafting is implemented. 
　three variants of the system were tested. all included the full system as described in appendix a. none was c1 release 1 with no post-processing. one added at most one new leaf to each existing leaf. this was achieved by discarding all but the highest valued tuple after step 1. 
　c1 employs a two stage process to infer decision trees from data. an initial unpruned tree is created. this is then simplified to produce a pruned tree. each variant of the post-processing algorithm was used to post-process both pruned and unpruned trees produced by c1. 
　ten stratified ten-fold cross validation experiments were performed for each data set. in each of these experiments  the data set was divided into ten subsets of as close as possible to equal size with as close as possible to identical class distributions. for each subset  each treatment was applied to learn a decision tree from all the remaining subsets  and then applied to predict the class of each object in the selected subset. 
　table 1 presents the predictive accuracy obtained for each treatment in these experiments. the mean percentage error over all one hundred sets of predictions is presented for each treatment. two summary lines present for each of the other treatments 
  a win-loss summary of the number of data sets for which the mean error is lower or higher than that of all; and 
  the one-tailed binomial probability of obtaining such a win-loss result by chance. 
table 1: description of data sets 
n a m e cases classes o n t i n . discr. anneal balance-scale breast-wise 
cleveland-hd crx dis 
echocardiogram german-credit glass hepatitis horse-colic hungarian-hd hypo 
iris 
labor-neg 
new-thyroid pima-diabetes 
sick sonar waveform 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
- 
1 
1 
1 
1 
- 
1 
  
- 
1 
- - 1 
table 1: summary of mean percentage error rates 
a l l p r u n e d trees 
none one a l l u n p r u n e d 
none trees 
one anneal 
balance-scale breast-wise cleveland crx dis 
echocardiogram german-credit glass hepatitis horse-colic hungarian-hd 
hypo iris 
labor-neg new-thyroid pima-diabetes 
sick sonar 
waveform 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 win-loss summary 1 1 1 1 win-loss p 1 1 1 1 it can be seen that all has lower error than none significantly  at the 1 level  more often both for pruned and unpruned trees. however  the advantage to all over one is not significant at the 1 level. 
　the magnitude of the changes also differs greatly. the largest increase in error resulting from the addition of all grafts is 1% for the iris data. the largest reduction in error is 1% for unpruned trees on the hepatitis data. the postprocessing of pruned trees results in reductions of 1% or more for seven of the twenty datasets. 
	webb 	1 

a l l p r u n e d n o n e trees 
one a l l u n p r u n e d trees 
n o n e one p r u n e d trees a l l | n o n e | one u n p r u n e d trees | 
a l l n o n e | one anneal balance-scale breast-wise cleveland crx dis 
echocardiogram german-credit glass hepatitis horse-colic hungarian-hd hypo 
iris 
labor-neg new-thyroid 
pi ma-diabetes sick sonar waveform 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 s.1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 anneal balance-scale breast-wise cleveland crx dis 
echocardiogram german-credit glass hepatitis horse-colic hungarian-hd hypo 
iris 
labor-neg new-thyroid pi ma-diabetes sick sonar 
waveform 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 1 
1 
1 
1 
1 
1 1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 
1 win-loss summary 1 1 1 1 win-loss sum. 1 1 1 1 win-loss p 1 1 1 1 win-loss p 1 1 1 1 table 1: summary of mean resubstitution error rates 
　it is interesting to compare the performance of postprocessing both pruned and unpruned trees. pruning then grafting produces lower error than grafting alone for twelve data sets whereas the reverse is true for only three. a one-tailed binomial sign test reveals that this difference is significant at the 1 level  p = 1 . it appears that both pruning and grafting have a valuable role to play in decision tree induction. it is possible that this results from the abilities of pruning to identify partitions where the local information is insufficient to create sensible sub-partitions and of grafting to use non-local information to then create suitable sub-partitions. the reduction in resubstitution error brought about by grafting  table 1  lends some support to this explanation. 
　table 1 presents the number of nodes obtained by each treatment employing the same format as in table 1. adding all nodes produces more complex trees than either of the other treatments for every data set. 
1 	conclusions 
the experimental results suggest that c1+ is successful in identifying regions of the instance space occupied by no training examples for which initial tree induction has made poor class choices. grafting new nodes to correct these poor class assignments can significantly improve the predictive accuracy of the inferred decision trees. the extension of the techniques to graft multiple new branches at each leaf of the original tree led to more reductions than increases in error when compared to the c1x technique of adding at most one new branch per leaf. however  the frequency with which the addition of more branches increases error and the failure to obtain 
1 	learning 
table 1: summary of mean number of nodes per tree 
 
a statistically significant advantage in this respect suggests that there is room for further improvement in the filtering that is used to select which of the potential new branches should be grafted to the tree. 
　research on grafting to date has examined only the addition of tests on continuous attributes. the techniques should extend in a straight forward manner to discrete attributes. the development of appropriate grafting techniques for discrete attributes is a promising direction for future research. 
　the application of both grafting and pruning results in lower average error significantly more often than does grafting alone. it is possible that this is due to the ability of pruning to identify partitions of the instance space where the local information is insufficient to create sensible sub-partitions. grafting can then use non-local information to generate appropriate sub-partitions. 
　however  many benefits have counterweighing costs and grafting is no exception. the increase in accuracy obtained through grafting is often modest. this is obtained at the expense of large increases in decision tree complexity. in applications where classifier complexity is a significant factor  this trade-off deserves careful consideration before grafting is employed. 
　it has been argued herein that grafting has a similar effect to the induction and application of multiple classifiers  with the difference that grafting incorporates its complex instance space partitioning into a single explicit decision tree instead of requiring the resolution of multiple distinct partitionings to determine the ultimate underlying partitioning to be applied. exploration of this hypothesized relationship provides further promising avenues for future research. 
 b  set the   branch for n to lead to a leaf for class k. 
 c  set the   branch for n to lead to i. 
else  x must be    
 a  replace i with a node n with the test a   v. 
 b  set the   branch for n to lead to a leaf for class k. 
 c  set the   branch for n to lead to i. 
