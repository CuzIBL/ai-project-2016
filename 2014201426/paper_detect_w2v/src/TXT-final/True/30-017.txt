 
this paper investigates the relationship between resolution and tableaux proof system for the satisfiability of general knowledge bases in the description logic we show that resolution proof systems can polynornially simulate their tableaux counterpart. our resolution proof system is based on a selection refinement and utilises standard redundancy elimination criteria to ensure termination. 
1 	introduction 
recently a number of results concerning resolution decision procedures for subclasses of first-order logic have been obtained. the considered subclasses are expressive enough to encompass a variety of non-classical logics  in particular  description logics and extended modal logics. de nivelle  describes a resolution decision procedure for the guarded fragment using a non-liftable ordering refinement. the guarded fragment is a generalisation of the restricted quantifier fragment corresponding to basic modal logic and allows for the embedding of a variety of extended modal logics and description logics  gradel  1 . expressions and knowledge bases of the description logic acc can also be embedded into maslov's class k and its subclasses one-free  fermuller et a/.  1  and the class of dl-clauses  hustadt and schmidt  1 . again  ordering refinements of resolution provide decision procedures for these classes. a nonstandard translation into the bernays-schonfinkel class combined with resolution and arbitrary refinements provide decision procedures for the satisfiability of acc expressions  schmidt  1 . this approach was adopted in the experiments of hustadt  schmidt  and weidenbach  1; 1 . experiments using the standard translation and a combination of a first-order theorem prover augmented with a finite-model finder are described in  paramasivam and plaisted  1 . 
　the problem of empirical investigations based on competitive testing is the difficulty in identifying the major factors having a positive or negative influence on the performance of a theorem prover. as long as the theorem provers which are being compared follow different proof 
1 	automated reasoning 
strategies this difference is likely to have a dominating effect on the overall performance. this has two consequences. one  we can say little about the other factors influencing the performance  for example  fundamental differences between the underlying proof systems or sophisticated redundancy elimination techniques used by the theorem prover. two  while it is easy to find benchmark problems illustrating the superiority of one theorem prover it is just as easy to find benchmark problems showing the opposite. therefore  it is always advisable to complement empirical investigations with a theoretical analysis of the relative proof and search complexity of the underlying proof systems. in the first case  the task is to determine whether a proof system a is able to polynornially simulate a proof system  this is to say  for any given theorem  there is a function computable in polynomial time  mapping proofs of in b to proofs of in in the second case  the task is to determine the relative size of the search space  that is the potential number of inference steps performed until a proof is found  plaisted and zhu  1 . 
   in this paper we focus on the aspect of relative proof complexity of tableaux proof systems and resolution proof systems for the description logic with general terminological sentences and abox elements. this logic is of particular interest  since all tableaux proof systems presented in the literature require some form of blocking or loop-checking to force termination  buchheit et o/.  1; donini et a/.  1; horrocks  1 . we describe a resolution proof system based on a selection refinement of resolution  instead of an ordering refinement  which provides a new resolution decision procedure for this logic. we show that this proof system is able to polynornially simulate tableaux proof systems for this logic. the technique for simulating blocking described in this paper can also be applied for obtaining other simulation results  for example  analytic modal ke tableaux proof systems or sequent proof systems for modal logics. 
　the structure of the paper is as follows. section 1 defines the syntax and semantics of  and describes a standard tableaux proof system. we adopt the resolution framework of bachmair and ganzinger  which is described briefly in section 1. section 1 presents the 

simulation result for the tableaux proof system and section 1 shows how termination of the resolution proof system can be enforced in analogy to blocking in tableaux systems. in section 1 we discuss some optimisations which are naturally available in the resolution framework and can be transferred to the corresponding tableaux proof systems. 
1 	inference for 
we work with a signature given by a tuple of three disjoint alphabets  the set c of concept symbols  the set r of role symbols  and the set 1 of objects. concept terms  or just concepts  are defined as follows. every concept symbol is a concept. if c and d are concepts  and r is a role symbol  then 
　c   and r.c are concept terms. a concept symbol is also called a primitive concept. 
　　a knowledge base has two parts: a comprising of terminological sentences of the form and an comprising of assertional sentences of the form and  where c and d are concepts  r is a role  and a and b are objects. 
　although the language does contain any role forming operators  it is still possible to express properties of the domain and range of a role r.  buchheit et al.  1 . 
　　the semantics is specified by the embedding into firstorder logic as follows. for sentences: where and 
where x and y are meta-variables for variables and constants  and pa  respectively  denotes a unary  binary  predicate symbol uniquely associated with the concept symbol a  role symbol r . the variable  is distinct from x. 
　all common inferential services for knowledge bases  like subsumption tests for concepts  tbox classification  realization  retrieval  can be reduced to tests of the satisfiability of a knowledge base. our definition of a tableaux proof system  also called a constraint system  largely follows buchheit et al. . all terminological sentences  are assumed to have been replaced by  and ail concepts in the resulting knowl-
edge based are assumed to have been transformed into negation normal form. 
　　let i be a subset of 1 such that no element of occurs in  let be a well-founded total ordering on the elements of are called introduced objects. we assume that the elements of are introduced during inference according to that is  if  is introduced into then for all with 1 already occurs in 
　following buchheit et al  we define the following set of transformation rules for the purpose of testing the satisfiability of a knowledge base: 
are possible  and  iii  is clash-free. note that the rule  is don't know nondetcrmmistic. 
1 	the resolution framework 
as usual clauses are assumed to be multisets of literals. the components in the variable partition of a clause are called split components  that is  split components do not share variables. a clause which is identical to its split component is indecomposable. the condensation cond c  of a clause c is a minimal subclause of c which is a factor of c. 
　the calculus is parameterised by an ordering  and a selection function 1. the ordering has to satisfy certain restrictions as detailed in  bachmair and ganzinger  1   in particular  it is required to be a reduction ordering. a selection function assigns to each clause a possibly empty set of occurrences of negative literals. if c is a clause  then the literal occurrences in s c  are selected. no restrictions are imposed on the selection 
function. 
　the calculus consists of general expansion rules  over clause sets  

each representing a finite derivation of the leaves  from the root tv. the following rules describe how derivations can be expanded at leaves. 
1 

deduce: 	
if c is either a resolvent or a factor of clauses in n. 
delete: 	
if c is a tautology or n contains a clause which is a variant of c. 
split: 	
if c and d are variable-disjoint. 
resolvents and factors are derived by the following rules. ordered resolution: 
where  i   is the most general unifier of a1 and a1   ii  no literal is selected in c and is s t r i c t l y m a x i m a l with respect to and  iii  -a1 is either selected  or is maximal in and no literal is selected in d. 
a  is called the positive premise and  the 
negative premise.1 
  
ordered factoring: 
where  i   is the most general unifier of a1 and a1 and  ii  no literal is selected in c and i s - m a x i m a l with respect to 
let n be a set of ground clauses. a ground clause c is redundant in n if there are clauses  in iv such that  are smaller than c with respect to  and logically imply c. the notion of redundancy is lifted to the non-ground case in the expected way. an inference is redundant if one of the parent clauses or its conclusion is redundant. 
theorem 1  bachmair and ganzinger  . 
let n be a set of clauses. then n is unsatisfiable iff the saturation of n up to redundancy contains the empty clause. 
1 	simulation by resolution 
our intention is to restrict resolution inferences in such a way that admissible resolution steps correspond to inference steps in tableaux proof systems. furthermore  the resolution proof system will be a decision procedure whenever the tableaux system terminates without the help of loop-checking or blocking techniques. 
　　it is necessary to modify the translation mapping slightly. without loss of generality  all expressions occurring in are assumed to be in negation normal form. let be a concept symbol not occurring in  intuitively  has the same semantics as the concept symbol 
　　but while  is translated to the true formula and will vanish during the conversion to clausal form  the translation treats  as an ordinary concept symbol. by adding certain formulae to the translation of the knowledge base we provide sufficient information about  to 
   1as usual we implicitly assume that the premises have no common variables. 
1 	automated reasoning 
ensure that the introduction of  preserves satisfiability equivalence. this allows us to obtain the desired computational behaviour in our resolution proof system. 
on the left-hand side of the 
implication ensures that all clauses in the clausal form contain the negative literal  since 

it is immaterial whether the terminological sentences in f take the first or second form. 
　the conversion to clausal form of first-order formulae resulting from the translation of  knowledge bases  makes use of a particular form of structural transformation  baaz et a/.  1   which is based on two mappings and 
let pos be the set of positions of a formula  if is a position in then denotes the subformula of at position and is the result of replacing at position by we associate with each element of pos a predicate symbol  and a literal 
　　　　　  where the are the free variables of does not occur in and two symbols and 
     are equal iff  and are variant formulae  uses definitions of the form 
primitive concepts in the knowledge base we denote the transformation taking  to its definitional form 

note that in this case  every predicate symbol  is a unary predicate associated with a concept c  although not necessarily uniquely associated . thus  we will henceforth denote  we denote the function which produces for every unary predicate symbol p occurring in  the conjunction of all formulae 

finally  let 
 theorem 1. let be any knowledge base. can be computed in polynomial time  and is satisfiable iff  is satisfiable. 
　the clausal form of  consists of three types of clauses:  i  clauses stemming from terminological axioms 

which all contain an occurrence of the negative literal 
              ii  clauses stemming from formulae introduced by i which all contain an occurrence of some negative literal and  iii  clauses originating from the translation of assertional sentences which are ground unit clauses. 
　　our selection function selects the literal in clauses of type  i  and - i in clauses of types  ii . in addition  a binary literal of the form is selected whenever s is a ground term and is a variable. all clauses stemming from a terminological sentence or from an additional formula introduced by contain negative literals  one of which is selected. we will mark selected literals by for theorem 1 an arbitrary reduction ordering may be used. 
　　for every concept c and every role r  which may possibly occur in a knowledge base during a satisfiability test  there exist corresponding predicate symbols pc and pr in the clausal form of likewise every object a is associated with a term 
　we show that every application of one of the transformation rules is simulated by at most two resolution inference steps. 
1. the  rule  by two resolution inference steps accordance with the resolution calculus. this proves: 
theorem 1. the resolution proof system with selection function  p-simulates the tableaux proof system for 

　interestingly  factoring plays no role for the clause sets under consideration  that is  the only possible factoring steps are condensations of ground conclusions. moreover  no resolution inference steps other than those of the simulation are possible. thus  the following stronger result holds. 
theorem 1. let f be a knowledge base and n the clausal form of  then the search space of the resolution procedure for n can be polynornially reduced to the search space of the tableaux procedure for 
1 	termination 
by 	we denote the set of all concept 	such that is an element of the knowledge 	two objects 	i areequivalent  denoted 	b	y	  i f and 	then 	is a 
witness for a. similarly  let p n t  denote the set of predicate symbols in a clause set n.  remember whenever is an element o f t h e n the positive clause is an element of tv.  
　the strategy  s  employed by buchheit et al.  restricts the application of rules as follows:  i  apply a transformation to an introduced object only if no rule is applicable to an object  ii  apply a rule to an introduced object only if no rule is applicable such that    iii  apply 
only if no other rule is applicable  and  iv  apply only if there is no 
　　　　　restrictions  i   iii  ensure that whenever becomes applicable to an introduced object a in a 
  then for every  with  we 
the strategy guarantees the 
termination of the tableaux proof system. 
　　restriction  iv  may be viewed as an instance of the leibniz principle  identifying two objects which are indistinguishable with respect to their properties. since we confine ourselves to applications of this principle to introduced objects  it is sufficient to consider properties expressible by concepts. in this case  the principle can be expressed as a set of first-order formulae of the form 
with the antecedents representing all possible truth assignments to concepts and subconcepts occurring in 
corresponds to a concept 	in 	and either 	or 	occurs in 
-equivalence also has a 
non-monotonic aspect: during a tableaux derivation it one state and at a later 
state. but restrictions  i - iii  ensure that eventually eiholds for all future states in the 
derivation. furthermore  it is assumed that for concepts 
1 

c not occurring in  we can assume that neither  nor are in the semantical interpretation of c. 
　to account for these aspects and to reduce the computational overhead introduced by these formulae we choose to add a special expansion rule instead. 
blocking: 
where 
and  ii  i 
this rule is sound. using the correspondence between the application of one of the propagation rules and particular resolution inference steps  we can restrict ourselves to a corresponding strategy in the resolution proof system. it follows that whenever resolution inference steps corresponding to  become applicable to a term t in the clause set tv  then for every clause set n' derivable from n we have p 
　　on the basis of the ordering on introduced objects we will now define a reduction ordering suppose a and b are introduced objects and and are the corresponding terms according to the simulation result above. let be a reduction ordering with the following properties: i   and  ii  for arbitrary non-equality atoms a  if then and . it is not difficult to show that such a reduction ordering exists. note that it is sufficient that only ground expressions are ordered by 
　　assume now that by restriction  iv  of strategy  s  the rule is not applicable to an introduced object in because there is a witness b for a. then there are terms and  such that  in this situation an application of the blocking expansion rule will add an equation to n. since it follows   and the ground clauses 
and are smaller t h a n w i t h respect to . a l s o   and logically imply 
         . consequently  the clause is redundant and does not participate in any further inferences. this mimics restriction  iv  of strategy  s . to establish logical implications of this form  the redundancy elimination algorithm will require some form of equality reasoning  for example  superposition. in our special case  all that is required are one-step rewrite transformations. 
theorem 1. the strategy  s  for tableaux proof systems can be polynomially simulated by blocking and redundancy elimination as outlined above. 
　it is now straightforward to show that any inference in our resolution proof system terminates. 
theorem 1. let be knowledge base and let n be the clausal form of . then any derivation from n by  ordered  resolution with selection as determined by  and blocking following the strategy outlined above 
terminates. 
corollary 1. the resolution proof system and the tableaux proof system have the same time complexity  namely nexptime  duchheit et al.  1 . 
1 	automated reasoning 
1 	optimisations 
in practice a principal cause for intractability is the presence of a large number of terminological sentences. every application of the rule to an object  and terminological sentence d will be followed by an application of the number of branches in the search space generated in this way is too large to be manageable for implementations relying on chronological backtracking to systematically investigate all the branches. 
　　as indicated by horrocks and patel-schneider  and hustadt and schmidt  one possible optimisation is the use of more sophisticated backtracking techniques like backjumping or branch condensing. however  it is even more desirable to avoid unnecessary branching in the first place. a closer look at the intention behind the introduction of  in the modified translation reveals one possible optimisation in this direction. suppose the knowledge base contains a terminological sentence of the form using the standard embedding we obtain a clause which contains no negative literal we could select. using we obtain  which contains a selectable lit-
eral. however  whenever for a terminological sentence 
       the concept nnf contains a negative occurrence of a primitive concept a  the corresponding clauses under the standard embedding  will contain a selectable negative literal . the transformation  is modified such that these occurrences are preserved. now the selection function can select an arbitrary negative literal. for example  if we have a terminological sentence o f the form . t h e selection function can choose an arbitrary among the negative literals in 	. this prevents any inference with c  until a unit clause has been derived. independent of these consideration  this optimisation has been incorporated in the fact system  horrocks  1 . 
　from correspondences with propositional dynamic logic it is known that the satisfiability problem for general  knowledge bases is in exp time. the algorithms presented in sections 1 and 1 require double exponential time in the worst case. buchheit et al.  note that this can be improved by caching contradictory sets  of previously investigated branches introduced by applications of the  rule. this has been formalised in  donini et a/.  1 . evidently  this form of caching will have the same effects for the resolution procedure described in this paper. 
1 	conclusion 
the prime motivation for this work has been our interest in possible links between different proof systems for description logics and modal logics. this paper focuses on a particular tableaux proof system for description logics with general inclusion sentences and shows how this system and certain optimisations can be simulated with polynomial overhead in the context of reso-

lution. our results provide new insight into the relative proof complexity of these systems similar to corresponding results for propositional logic. although we have considered only the logic  our results may be extended to description logics with role conjunction and role hierarchies. we expect similar results can also be obtained for other forms of tableaux proof systems or sequent calculi. resolution procedures following tableaux proof strategies have the advantage that proofs may be easily translated back into tableaux or sequent-style proofs of the original source logic. related work on backward translation is by caferra and demri  1; 
1 . 
　the resolution decision procedure described in this paper offers just one of many possible search strategies. other resolution strategies utilised in the literature  mentioned in the introduction  are implemented by ordering strategies which do not rely on blocking or loop-checking techniques. such techniques arc also not needed in the ordered chaining calculus for modal logics with transitive modalities  or  with transitive roles  ganzinger et ai  1 . 
　although experimental results with spass using ordered resolution are encouraging  hustadt and schmidt  1; hustadt et a/.  1   there are classes of problems on which tableaux proof systems have better performance. the results of this paper now provide a basis for the scientific testing of the comparative performance of the two orthogonal strategies for resolution proof systems  and for establishing guidelines indicating which strategy is most appropriate for particular classes of problems. 
