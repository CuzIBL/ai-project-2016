 
     this paper describes advances in the development of a know ledge-based front-end for the statistics package glim 1  employing logic programming methods and tools  including sigmapr1g and apes. the domain of application computer-based statistical analysis - requires that a changing knowledge base be handled by the system  glimpse*. the developing system is suitable for users with different levels of expertise  including those who wish to act independently of the system' s advice. two features are incorporated into glimpse that are suitable for other front-ends and expert systems 
- a facility for suggesting answers to a user who requires guidance; 
- an evaluator that suspends when information is missing and suggests an action to find the missing information. 
     previous and current methods of providing advice are discussed. 
i introduction. 
     glimpse is a system being developed as a front-end to the statistics package glim 1  payne 1 . it is designed to provide semantic and syntactic help  and advice on generalized linear modelling and statistical strategy. the domain - computerized statistical analysis - means that the system must deal with a changing knowledge base due to the discovery of new facts gleaned during an analysis. it must also be suitable for users with different levels of expertise  including those who wish to act independently. we describe the features that distinguish glimpse from other front-ends and suggest a suitable methodology for providing advice. 
     we describe two features of glimpse that are suitable for dealing with such requirements and that may prove useful for other front-ends and expert systems  namely 
- an evaluator that suspends when information is missing and suggests the action required to obtain i t ; and 
  development by depts. of computing & mathematics  
imperial 	college and numerical 	algorithms group 
ltd.  	with 	funding support from 	the 	alvey 
directorate under contract alv/prj/ikbs/1. 
1 	knowledge representation 
carl m. o'brien 
the numerical algorithms group ltd. 
nag central office  mayfield house  
1 banbury road  oxford  1 1de 
- a facility for suggesting answers to a user who needs help to answer a question posed by 
the system. 
ii the quest of the statistical analyst 
     computerized statistical analysis is analogous to an adventure game in which the adventurer  or analyst  is on a quest to discover enough facts about a data set to be able to make certain inferences; e.g. to decide that one or more models adequately describe the data. the analyst sets off on this quest with numerical data and a limited set of known facts about them. the analyst has one main tool - the statistics package - to use on this quest and limited resources of time and money. he/she may use the calculation and graphics facilities of the package to gain further facts or clues to facts about the data  but each use depletes some of the available resources. 
     some of the clues found may lead down blind alleys and so the retracing of one's steps may be necessary. the information found down these blind alleys may not  however  be wasted; it may prove useful later. 
i l l help is at hand 
     glimpse is designed to provide advice to the analyst during this voyage of discovery. the analyst may ask for advice on how to use the command language of the underlying statistics package to carry out certain actions and  more importantly  for advice on modelling and statistical strategy. in the latter case  the analyst is essentially asking what action should be carried out given the facts currently known and clues found. if the action suggested is carried out and more clues are found  these will be used by glimpse when providing further advice. that is  glimpse advises the analyst on possible interpretations of the output from the statistics package. 
     the requirements placed upon glimpse are very exacting due  in part  to the complex nature of statistical analysis and also to adherence to certain principles. these are described below and compared with those of other front-ends: 
- it must deal with a changing knowledge base. as mentioned earlier  use of the statistics package produces new facts and clues. due account must be taken of these as they may alter the user's perspective of the data. most other front-ends  such as sacon  bennett et al  1   eco  uschold et al  1  and pip  pauker et al  1  assume a static knowledge base - the user is not assumed to gain additional knowledge during use; 
- the user should be free either to act independently or to reject advice given. glimpse should take account of any information gained independently by the user when giving advice at later stages. most other front-ends to statistical packages  such as rex  gale  1   either take no account of the results of independent actions or constrain the user to follow the advice given; 
- it must be suitable for users with different requirements and different levels of skill or expertise. 
iv suggested answers - a method of layering advice. 
     the front-end is based upon the logic-based expert system shell  apes  hammond and sergot  1   which is written in sigma-prolog  mccabe et al  1 . two key features of apes are the provision of rule-based explanations - how  why and why not - and declarative dialogue. declarative dialogue is based on the principle of query-theuser  sergot  1  which  in its simplest form  involves asking the user to supply answers  or solutions  to relationships not defined by rules in the data base. an essential feature of apes is that it keeps a trace of the computation  used as a basis for explanations. 
     when asked a question the user is normally expected to supply the information requested directly. however  a recent extension means that  
where appropriate  the user may  when asked a question  decline to answer directly and  instead  ask for a suggested answer from the system. the user may adopt any suggestion as the basis for his/her answer or may reject it entirely. this feature is particularly useful where the user is expected to have deeper knowledge than the system. for example  we assume the user to be better than the system at interpreting graphical output  but are willing  if requested  to suggest an interpretation based on certain summary statistics. the behaviour is demonstrated in the following specimen dialogue  user's responses underlined . 
	is the graph of  ht vs age  linear  	suggestion 
	==  	suggested 	answer 	is 	'yes'. 	ok  why 
1. curvature statistic for  ht vs age  = 1 
1. linearity indicated if curvature   1 
1. 1   1 
     because glimpse acknowledges the user's superior expertise  it is happy to accept an answer 'no' despite the affirmative suggestion. in other words  a curvature statistic   1 is not assumed to imply linearity  merely to indicate i t . this approaoh differs from that taken in other systems  such as oncocin  shortliffe et al  1   where  if the user is unable to supply a particular value  a default value may be automatically used instead. 
we prefer to suggest a response and leave the final decision with the user. 
     this feature allows us to layer advice. the user who is more experienced at interpreting graphs may answer directly whilst the less experienced user may request further help. the help given may itself be in terms of another relation for which a suggested answer may be requested  which leads to the possibility of multi-layered advioe. as well as helping the user it is also of use to the knowledge engineer  providing the potential to increase the expertise of a system without altering higher-level rules. 
v .early attempts to provide advice 
     when asked for advice glimpse responds with an advisable action  or command  following any necessary dialogue. early versions made extensive use of the ' suggested-answer' feature to provide advice. 
     to demonstrate this  we will use the advice provided for a model selection process. in outline  model selection is a process of examining a set of 'free terms' in order to determine whether each of these terms is either significant  i.e. should be included in a model  or insignificant  
i.e. should be excluded. it is an iterative process and at any point a term may be included  rejected or left as doubtful. as more terms are either included or eliminated from consideration  the number of free terms is gradually reduoed. the aim is to be left with no free terms. in the following example dialogue  the user's response is 
again shown underlined. 
advice: examine terms  x1 x1 x1 x1 x1 x1  ok {system output from command} 
	which terms should be included  	suggestion 
= =   i would suggest : x1 x1. ok  yes which terms should be rejected  suggestion 
	= =   i would suggest : x1 ok  	no 
i repeat  
which terms should be rejected  	x1 	.x1 advice: 	examine terms  x1 x1  	and so on. there were two problems with this approach: 
- for the user wishing to accept the system's suggestions the process was tedious; 
- if a user rejected a suggestion  could the resulting action be truly described as advioe  and could the system be said to be advising a 
strategy if suggested answers were rejected  
vi current approach to providing advice 
     the root cause of the problems in the earlier approach was that the two distinct functions of providing help with the command language and providing guidance on statistical strategy were 
merged through mis-use of the 'suggested-answer' feature. so that the user could intervene and influence the command 'advised'  the user was asked to supply oertain parameters even in 
	wolstenholme and o'brien 	1 

situations where the strategy employed by the system dictated the parameters that should be used. only if the user asked for  and accepted  a suggestion was the system strategy truly followed. 
     the approach now taken separates these two functions: 
- the user may request help with the command language. a dialogue ensues from which the system determines the action the user wishes to perform and then advises an appropriate command; 
- the user may request statistical help. the system suggests an action based on its own strategy. the user is queried only if the system does not have the information necessary to come to a conclusion. the suggested-answer facility is used only in situations where the system has rules available but considers the user better able to provide the answer. 
     thus  in the example given above  the user is no longer asked about inclusions or exclusions as the system forms its own conclusions based on its built-in strategy. the revised interaction might be as follows  user' s input underlined : 
advice: examine terms  x1 x1 x1 xm x1 x1  ok 
{system output from command} 
	advice: 	examine 	terms 	 x1 	x1 	x1  	ok 
{system output from command} 
	advice: examine terms 	 x1  	stop 
     as with the last advised command  the user is still free to reject any action advised. 
v i i suspending evaluator for jailing information 
     the statistical advice given is derived from logic rules of the form advised-action   action  if {..conditions} where underscore   m indicates a variable. 
     if we wish to advise the user to carry out the sequence of individual actions making up a procedure  we may describe the procedure by a set of logic rules of this form. for example  during the model selection process we need to advise the user to set a parameter known as the ' baseline mean deviance*  bmd  but may need to estimate the value of this by finding the mean deviance of a statistical model. we therefore wish to advise the user to: 
1. find the mean deviance  
1. set the bmd to the mean deviance found. 
the following logic rules describe this: 
1. advised-action   find the mean deviance   if an-estimate-of-bmd-is-required & not established-mean-deviance   x  
1. advised-action   set the bmd to be  x   if an-estiamte-of-bmd-ls-required & established-mean-deviance   x  
1 	knowledge acquisition 
     examination of these rules leads to the following observations. 
a  the first rule suggests an action to find out information  whilst the seoond suggests an action to set a variable; i.e. change a system 
variable based on the information found by carrying out the first action. 
b  the conditions of the rules differ only in that in the first rule the information has not been found  whilst  in the seoond  it has. 
     in order to be able to advise what value a system variable should be set to  we may need to advise the user to elicit many items of knowledge. in general  we require a rule of the form 
advised-action   find  fact   if { some-oonditions} & not established-this-particular   fact  
for each fact to be found  as well as a rule advising the resulting 'setting' action based on these facts. 
     although this is a feasible method of representing our knowledge about the procedure  it results in a set of similar  repetitive rules  differing only according to whether certain faots are known or not. evaluation of these numerous rules is naturally inefficient. 
     to overcome these problems  we use a new evaluator that can not only fall or succeed a goal atom  but also * suspend* . we declare certain 
relations to be *suspendable* and  at the metalev el  define 
- conditions that must be satisfied for these relations to be solvable  either success or failure ; and 
- actions that should be advised if these conditions are not satisfied and suspension occurs. 
     if a goal suspends because the conditions are not satisfied  evaluation is interrupted and the evaluator looks up the advisable actions and suggests these to the user. we emphasize here that once the advised actions have been carried out  evaluation does not simply continue from where suspension occurred. this is not possible as actions may have changed both the system* s and the user's knowledge so that previous conclusions may no longer be valid. 
     as an example of this method  we may replace the two object-level rules defining advisable actions given earlier by a single object-level rule and additional meta-level assertions. 
object-level: 
advised-action   set the bmd to be  x   if an-estimate-of-boid-is-required & mean-deviance   x  

meta-level: 
suspendable  mean-deviance  conditions-to-be-solvable  mean-deviance   x  
            established-mean-deviance   x    actions-to-solve  mean-deviance   x  
            find the mean deviance   this approach has the advantages of: 
- fewer 	object-level rules  	so more efficient computation; 
- improved rule-based explanations for advising a 'finding' type of action. previously  explanations would have been top-down  based simply on the rule s  used in the proof  for 
example: 
advised-action   find the mean deviance   because an-estimate-of-bmd-is-required & not established-mean-deviance   x  
now  they may be bottom-up  based on the missing information and its consequences  i.e. 
the 'setting' action being worked towards: 
	the action 	 find the mean deviance  
will enable us to solve the goal mean-deviance   x  
if 	mean-deviance   x  then advised-action   set the bmd to be  x   
viii combining suspending evaluator and suggested answers 
     use of the suspending evaluator proves invaluable when combined with the suggested-answer feature. we described earlier how suggested answers may be used to provide subsidiary advice. now  if the user asks for a suggested answer to a 
'yes/no' type of question  the suggestion he/she expects to receive is either 'yes' or 'no'. however  the system may not be able to make such a suggestion if inadequate information is available. by using the suspending evaluator to interpret the subsidiary advice  we may suspend the evaluation 
and use the reason for suspension as a basis for advising an action  rather than suggesting a 'yes/no' answer. for example  consider the earlier example about curvature. if the curvature statistic was not known  then  rather than suggest 'yes' or 'no' to the question about linearity  the evaluator could suspend and propose to the user that the action find the curvature statistic for  ht vs age  be carried out. 
ix conclusion 
     front ends to statistical  and other  analysis packages involve advising a user to carry out a 
     prooess of information gathering. use of an evaluator that suspends when information is lacking  in combination with a suggested-answer facility  permits us to provide advioe on actions to be carried out in a way that is efficient and suitable for users with differing levels of expertise. 
acknowledgements 
     the authors would like to thank peter hammond and jonn nelder for their comments on earlier drafts of this paper. 
