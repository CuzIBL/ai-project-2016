 
disjunctive logic programming  dlp  with stable model semantics is a powerful nonmonotonic formalism for knowledge representation and reasoning. reasoning with dlp is harder than with normal  v-free  logic programs; liecause stable model checking - deciding whether a given model is a stable model of a propositional dlp program is co-np-complete  while it is polynomial for normal logic programs. 
 this paper proposes a new transformation  which reduces stable model checking to unsat - i.e.  to deciding whether a given cnf formula is unsatisfiable. thus  the stability of a model a/ for a program  caw be verified by calling a satisfiability checker on the cnf formula  the transformation is parsimonious and efficiently computable  as it runs in logarithmic space. moreover  the size of the generated cnf formula never exceeds the size of the input. 
the proposed approach to stable model checking lias been implemented in a dlp system  and a number of experiments and benchmarks have been run. 
1 	introduction 
disjunctive logic programming  dlp  with stable model semantics is a powerful nonmonotonic formalism for knowledge representation and eommonsense reasoning  baral and gelfond  1; lobo et. a/.  1 . dlp has a very high expressive power  eiter et. a/.  1a   and it allows to represent complex problems in a simple and easy-to-understand fashion  eiter et. a/.  1 . as for the other main nonmonotonic formalisms  reasoning with dlp  under stable model semantics  is very hard. the high complexity of dlp reasoning depends also on the hardness of stable model cheeking - deciding whether a. given model is a stable model of a propositional dlp program which is co-np-complete. the hardness of 
    research supported by fwf  austrian science fund  under the projects p1-mat and z1-inf. 
1 	automated reasoning 
this problem ha s discouraged the implementation of dlp engines. indeed  at the time being only one system  namely the dlv system  eiter et. a/.  1   is available which fully supports  function-free  dlp with stable model semantics. 
　this paper proposes a new transformation  which reduces stable model checking to unsat i.e.  to deciding whether a given cnf formula is unsatisfiable - the complement of satisfiability  a problem for which very efficient systems have been developed in al 
　besides providing an elegant characterization of stable models  which sheds new light on their intrinsic nature  the proposed transformation has also a strong practical impact. indeed  by using this transformation  the huge amount of work done in al on the design and implementation of efficient algorithms for checking satisfiability can be profitably used for the implementation of dlp engines supporting stable model semantics. thus  this transformation opens  new frontiers  in the implementation of disjunctive logic programming which can benefit now from efficient ai techniques and implementations. 
　we have implemented the proposed technique in the dlp system dlv  and we have run a number of experiments and benchmarks. 
　in sum  the main contributions of this paper are the following: 
  we define a new transformation from stable model checking for general dlp with negation to unsat of propositional cnf formulas. the transformation is parsimonious  i.e.  it does not add any new symbol  and efficiently computable  since it runs in logspace  and  therefore  in polynomial time . moreover  the size of the generated cnf formula never exceeds the size of the input  it is usually much smaller . 
  we realize our approach in the dlp system dlv  by using an implementation of the davis-putnam procedure a.s the satisfiability checker. 
　our implementation exploits also novel modular evaluation techniques  which follow from our main results. 
  we carry out an experimental activity which witnesses the efficiency of our approach to stable model checking. 
it is worth noting that  since stable model checking of 
dlp programs generalizes minimal model checking for 
horn cnf formulas  our results can be employed also for 

reasoning with minimal models and with circumscription. 
　the dlv system  which implements the results described in this paper  can be downloaded from www.dbai.tuwien.ac.at/proj/dlv. from the same web page  one can also retrieve the benchmark problems that we used in our experiments. 
the remainder of the paper is organized as follows: 
setions 1 and 1 contain preliminary notions on dlp  stable model semantics  and its characterization in terms of unfounded sets. section a describes our new reduction from stable model checking to unsat. section 1 reports on our experiments. 
1 disjunctive logic programming with stable model semantics 
in this section  we provide an overview of disjunctive logic programming with stable model semantics.  for further details  see  lobo et. al  1 .  
　　the terms of the language are inductively defined. a variable or constant is a term: a function symbol with terms as arguments is a term. an atom is where  is a predicate of arity // and terms. a literal is either a positive literal p or a negative literal -p  where p is an atom. 
   a  disjunctive  rule r is a clause of the form occurring positively  resp.. negatively  in 
junctive  program  also called dlp program  is a set of rules. a free  resp.  free  program is called positive  resp.  normal . a term  an atom  a literal  a rule  or a 
program is ground if no variables appear in it. a finite ground program is also called a prepositional program. a function-free  program is a finite program where no function symbol occurs. 
let  be a program. the herbrand universe and the 
herbrand base of are defined in the standard way and denoted by up and   respectively. given a rule 
occurring in a   a ground instance of r is a rule obtained from r by replacing every variable  in r by  where  is a mapping from the variables occurring in r to the terms in up. we denote by ground the set of all the ground instances of the rules occurring in 
　　an interpretation for  is a set of ground atoms  that is  an interpretation is a subset / of . a ground positive literal a is true  resp.  false  w.r.t. if a i  resp.. 
 a ground negative literal -1 is true w.r.t. / if a is false w.r.t. l otherwise a is false w.r.t. 1. 
let r be a ground rule in ground{v . the head ol 
is true w.r.t. if  the body of  is true w.r.t. / if all body literals of r are true w.r.t. /  i.e.   and  and is false w.r.t. / otherwise. the rule r is satisfied  or true  w.r.t. / if its head is true w.r.t. / or its body is false w.r.t. /. 
　　a model for is an interpretation m for  such that every rule ground  is true w.r.t. a/. a model m for  is minimal if no model /v for  exists such that n is a proper subset of m. the set of all minimal models for  is denoted by mm p . 
　　a generally acknowledged semantics for dlp programs is the extension of the stable model semantics to take into account; disjunction  gelfond and lifschitz  1: przymusinski  1 . given a program  and an interpretation /  the gelfond-lifschitz  gl  transformation of w.r.t. l  denoted is the set of positive rules 
defined as follows: 

definition 1  przymusinski  1: gelfond and lifschitz. 1  let / be an interpretation for a program stable model for 
　clearly  if ground  v . it turns out that for n positive program  minimal and stable models coincide. 
1 	stable models and unfounded sets 
next  we present a characterization of the stable models of disjunctive logic programs in terms of unfounded sets. this characterization will be used to prove the correctness of our reduction from stable model checking to unsat in the next section. 
　the characterization presented here is obtained by slight modifications of the results presented in  leone et. al. 1 . in particular  providing the notion of un-
founded sets directly for total  1-valued  interpretations  we obtain a simpler characterization than in  leone et. a/.  1   where unfounded sets were defined w.r.t. partial  1-valued  interpretations. 
definition 1  definition 1 in  leone et. a/.  1   
 let / be an interpretation for a program  of ground atoms is an unfounded set for v w.r.t. 1 
if. for each rule ground such that a  at least one of the following conditions holds: 
1. is false w.r.t. /. 
	koch and leone 	1 

input: a ground dlp program  and a model m for output: a propositional cnf formula  v  over m. 
var : dlp program; s: set of clauses; begin 
1. delete from  each rule whose body is false 
w.r.t. m; 
1. remove all negative literals from the  bodies of the  remaining rules; 
1. 
1. 
1. 1. 1. 
1. 
1. 
1. end. 
definition 1 an interpretation / for a program v is unfounded-free iff no nonempty subset of / is an unfounded set for  w.r.t. /. 
　the unfounded-free condition singles out precisely the stable models. 
theorem 1  theorem 1 in  leone et. 	al.  1   
let m be a model for a program  m is stable model for v iff m is unfounded-free. 
example 1 let 	is a stable model of since there is no nonempty subset of which is an unfounded set. on the other hand  for due to condition 1  both  and  are unfounded sets. m1 is not unfounded-free  and therefore  it is not a stable model. 	
1 	from stable model checking to unsat 
in this section we present a reduction from stable model checking to unsat  the complement of satisfiability  a problem which is better explored in ai and for which efficient algorithms and systems are available. 
　recall that a cnf formula  over a set a of atomic propositions is a conjunction of the form cn  where  are clauses over a. without loss of 
generality  in this paper a clause  will be written as 
thus  a cnf 	will be a conjunction of these implications. 
　a formula is satisfiable if there exists a truth assignment to the propositions of a which makes  true; otherwise   is unsatisfiable  or inconsistent . unsat is the following decision problem. 
given a cnf formula  is it true that  is unsatisfiable  
　our reduction from stable model checking to unsat is implemented by the algorithm shown in figure 1. 

in the first step of the algorithm shown in figure 1  the rule  is deleted. in the second s t e p   i s removed from the body of the last rule of  while the third step removes c from the head of the first rule. thus  after step 1  the program becomes 
steps 1 to 1 switch the bodies and the heads of the rules  yielding the set of clauses s = 
	finally  step 1 constructs the conjunction of the clauses in 1 plus the clause 
                                   and m. then  m is  stable model for if and only if  v  is unsatisfiable. 
　in the remainder of this section we demonstrate theorem 1  i.e.  we show the correctness of our reduction . for space limitation  we do not include the proofs of the two lemmas here; but we illustrate their validity on a running example. 
　to better illustrate the  transformation  we proceed in an incremental way  dividing the transformation into three steps  and showing the correctness of each of them. 

by steps 1 of figure 1. observe that every rule in Αm has a non-empty head. indeed  i f w o u l d contain a rule with an empty head  then m would not be a model for as the rule of  corresponding to r would have a true body and a false head. moreover  the simplified program  is positive  -free  and it only contains atoms that are true w.r.t. m. 
　next  we observe that αm 'p  is equivalent to  as far as the stability of m is concerned. 
lemma 1 let 	be 	dlp program and m be  model for 	then  m is 	stable model for  if and only if it is 	stable model for 
example 1 take v and the two models m  and m1 from example 1. m  is a stable model for 
m1 is not. indeed  m  is a stable model for 
and a/1 is not a stable 

1 	automated reasoning 

　next  we show that by simply swapping the heads and bodies of the rules of the simplified program  we 

get a set of clauses whose models correspond to the unfounded sets of 
definition 1 let be a dlp program and m be a model for   define as the following set of clauses over m: 

s constructed after steps 1 of figure 1. 
lemma 1 let v be a ground dlp program  m be model for  and  then x is a model for  v  iff it is an unfounded set for v w.r.t. m. 
example 1 
the only subset of which is a model f o r   v   is  indeed  is the only unfounded set for v w.r.t. mi  contained in mi . 
     v  is equal to and are the subsets of m-1 which are models of i. indeed  they are precisely the unfounded sets for v w.r.t.  contained in m1 . 
　we are now in a position to demonstrate our main theorem. 
　proof of theorem 1  sketch  in the following  we show that  is unsatisfiable iff  is unfounded-free; the statement will then follow from theorem 1. 
　it is easy to see that the output  of the algorithm of figure 1 coincides with the conjunction of all clauses in and the clause  from lemma 
1  the models of are precisely the unfounded sets of w.r.t. m. therefore  the models of are exactly the non-empty unfounded sets of w.r.t. m  since every model of  v  must satisfy also the clause thus  m contains no nonempty unfounded set 
 i.e.  it is unfounded-free  iff  has no model 
 i.e.  it is unsatisfiable . 

transformation. 
theorem 1 given a model m for a ground dlp program  let  be the cnf formula computed by the algorithm of figure 1 on input  and m. then  the following fiolds. 
1. is logspace computable from  and m. 
1. is 	a parsimonious 	transformation. 
　　proof  sketch  is the conjunction of the clauses in  v  plus the disjunction of the propositions in m. the size of is equal to the size of   which is smaller than the size of  thus   is clearly parsimonious  as it is a formula over 
the propositions of m only. 
　　finally  it is easy to see that can be computed by a logspace turing machine. indeed  can be generated by dealing with one rule of at a time  without storing any intermediate data apart from a  fixed  number of indices. 	
1 	implementation and benchmarks 
in order to check the concrete usability of our results  we have implemented our approach to stable model checking in the disjunctive logic programming system dlv  eiter et. a/.  1b; 1 . 
dlv is a knowledge representation system which has 
been developed at technische universitat wien. recent comparisons  eiter et. a/.  1  have shown that dlv is nowadays a state-of-the-art implementation of dis-
junctive logic programming. to our knowledge  dlv is the only publicly available system which supports full  function-free  disjunctive logic programming under stable model semantics. 
　the computational engine of dlv implements the theoretical results achieved in  leone et. a/.  1 . roughly  the system consists of two main modules: the model generator  mg  and the model checker  mc . mg produces stable model candidates  whose stability is then checked by the mc. 
　we have replaced the model checker of dlv by new modules implementing the results of the previous section  running some benchmark problems and comparing the execution times. 
overview of the c o m p a r e d m e t h o d s 
we have compared the following methods for stable model checking  the labels below are used in figures 1  1  and 1 . 
   old checker.  the old model checker of the dlv system  leone et. a/.  1; eiter et. a/.  1b . its strong points are the efficient evaluation of head cycle free  hcf  programs  ben-eliyahu and dechter  1  and the use of modular evaluation techniques. indeed  hcf programs are evaluated in polynomial time and  if the program is not hcf  the inefficient part of the computation is limited only to the subprograms1 which are not hcf  while the polynomial time algorithm is applied to the hcf subprograms . polynomial space and single exponential time bounds are always guaranteed. 
   given a p r o g r a m a n d a model m to be checked for stability  an implementation of the algorithm of figure 1 generates the cnf formula   which is then submitted to a satisfiability checker. if the satisfiability checker returns true is satisfiable   then m is not a stable model of otherwise is unsatisfiable   m is a stable model of for checking 
1
　　a subprogram of is the set of rules defining the atoms of the same strongly connected component of the dependency graph of   leone et. a/.  1 . 
	koch and leone 	1 

satisfiability of  we have used an efficient implementation of the davis-putnam procedure called sato  zhang  1 . 
   this is an improved version of the method above  enhanced by modular evaluation techniques derived from the combination of lemma 1 with the modularity results of  leone ct. a/.  1 . roughly  given  and m   is first simplified  steps 1 of figure 1  computing the program  the subprograms of αm  are then evaluated one-at-a-time. a polynomial time method is applied to hcf subprograms  as in old checker : while the  method is applied to nonhcf subprograms. 
benchmark problem 
in order to generate some co-np-hard model cheeking instances  which could better highlight the differences between the model checking techniques  we needed to run hard problems on the dlp system at hand. thus  we have compared the performance of the different model checking methods by running various instances of the 
-complete problem strategic companies on the dlv system. 
　the strategic companies problem is from  cadoli et. a/.  1 ; it is  to the best of our knowledge  the only 
-complete kr problem from the business domain. no experimental results for any -complete kr problems are known. 
　briefly  a holding owns companies  each of which produces some goods. moreover  several companies may have joint control over another company. now  some companies should be sold  under the constraint that all goods can be still produced  and that no company is sold which would still be controlled by the holding after the transaction. a company is strategic  if it belongs to a strategic set  which is a minimal set of companies satisfying these constraints. those sets are expressed by the following natural program: 
strategic cl   strategic c1  produced by p ci c1 . 
strategic c   controlled by c ci c1 c1  strategic ci   strategic c1  strategic c1 . 
here strategic  c  means that c is strategic  produced..by 1   c i   c1  that product p is produced by companies ci and c1  and controlledjby c  c i   c1 c1  that c is jointly controlled by c1 c1 and c1; we have adopted here from  cadoli ct. a/.  1  that each product is produced by at most two companies and each company is under joint control of at most  three other companies. 
　the problem is to find out the set of all strategic companies  i.e.  under brave reasoning  for which c the fact strategic c  is true . 
　　note that this problem cannot  be expressed by a fixed normal free  logic program uniformly on all collections of facts produced by and controlled-by c  el  e1 c1   unless np =   an unlikely event . thus  strategic companies is an example 
1 	automated reasoning 
of a relevant problem where the expressive power of dis-
junctive logic programming is really needed. 
benchmark data 
we have generated tests with instances for companies and 1n products. 
　we have uniform randomly chosen the producedjby and the controlled by relations  where each company is controlled by one to five companies  obeying the obvious constraints that no company can control itself  and that two consortia have to have at least one member in common . on average there are 1 controlled by relationships per company. 
discussion of results 
our experiments were run on a 1 mhz i1-compatible pc under linux  using egcs-1.1 c + + compiler. 
the results are displayed in the graphs of figures 1- 1. 
execution times are reported on the vertical axis  while the horizontal axis displays the size of the problem instance  number of companies of the instance of strategic companies to be solved . we have run instances of a size increasing a step of 1 companies  up to 1 companies. 
　　the graph of figure 1 shows the total time employed by the  stable  model checkers for the computation of all stable models of the program  i.e.  for the generation of all sets of strategic companies . note that a program having stable models requires  calls to the model checker is the number of calls on models which an; not stable ; the sum of the times employed for checking the; stability of all m models is displayed in the graph. for each problem size  number of companies   we have run 1 instances of size  and reported the average time. thus  this graph shows the practical impact of the various model checking strategies on the computation.  clearly outperforms old checker: the time 
employed by  to solve an instance of 1 companies is not sufficient for old checker even to solve instances of 1 companies. interestingly  modular evaluation techniques appear very useful:  takes less than 1% of +dp to solve problems of size 1. 
　the graph in figure 1 refers to the same runs of the previous graph; but it shows the longest times required 

figure 1: total model checking time required for the computation of all stable models 


figure 1: 	lime required for a single call to the mc 
 worst case  by each method for checking the stability of a single model. this time  the curves are not very regular  because they visualize times of single calls  rather than average times as in figure 1  of randomly generated instances. also in this graph the new strategies show better performances than the old dlv checker. surprisingly  the difference between the times of  and  is much smaller than in the previous graph. we have the following explanation for this phenomenon. modular evaluation techniques speed up the computation of most instances.  thus  modularity significantly affects total model checking time.  however  very hard instances cannot be  decomposed  by modular evaluation techniques.  thus  the worst case times for single calls to the model checker are similar.  
　finally  the graph in figure 1 refers to the computation of one stable model  i.e.  to the computation of one set of strategic companies sufficient to solve the corresponding decision problem . it compares the overall execution time  model generation -f model checking time  taken by the dlv system when the  old  model checker is replaced by our new model checkers. the advantage of using  is very evident: by using an instance of size 1 is solved more quickly than an instance of size 1 with the old system. this graph also shows the time taken by dlv for model generation alone. most of the execution time needed for 

computing one stable model is consumed for the generation of the models; only a very low percentage of the time is consumed by the model checker tm+dp+mod itself. 
　in conclusion  observe that we have also compared the model checking strategies on a number of problems  easier  than stategic companies  at most np-complete ; as expected  the methods behaved very similarly. 
