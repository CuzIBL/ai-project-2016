 
preference elicitation is a serious bottleneck in many decision support applications and agent specification tasks. cp-nets were designed to make the preference elicitation process simpler and more intuitive for lay users by graphically structuring a set of ceteris paribus  cp  preference statements preference statements most people find natural and intuitive. in various contexts  cp-nets with an underlying cyclic structure emerge naturally. often  they are inconsistent according to the current semantics  and the user is required to revise them. in this paper we show how optimization queries can be meaningfully answered in many  inconsistent  networks without troubling the user with requests for revisions. we also describe a method for focusing users' revision process when revisions are truly needed. in the process  we provide a formal semantics that justifies our approach and we introduce new techniques for computing optimal outcomes. 
1 introduction 
ceteris paribus  cp  preference statements are among the most natural and most intuitive preference statements that people make. thus  it is not surprising that they have drawn the attention of many researchers in philosophy and ai  e.g.   doyle and wellman  1; hanson  1  . cp statements indicate a preference for one value over another in the context of a fixed background. for example  the statement  i prefer an apple pie to a chocolate cake as a dessert  ceteris paribus  expresses the fact that given two identical contexts - i.e.  meals - that differ only in their dessert  the one containing an apple pie is preferred to the one containing a chocolate cake. finer distinctions can be made using conditional cp statements. for example:  i prefer red wine over white wine if the main course is beef.  in this case  the preference for red wine to white wine is restricted to comparisons between identical meals in which the main course is beef. 
　cp-nets iboutilier et al  1  are a graphical tool for representing and for structuring a set of cp statements. a cpnetwork consists of a graph describing the preferential dependency relationship between different domain variables. each node is annotated by a conditional preference table  cpt  that describes how the user's preference over the different values 
qualitative reasoning 
yannis dimopoulos 
dept. of computer science 
university of cyprus 
   nicosia 1  cyprus yannis cs.ucy.ac.cy 
of the variable associated with this node depends on the variables associated with the parents of this node. 
　cyclic cp-nets emerge naturally when there is a set of interdependent variables  none of which is more important than the other. for example   domshlak et al  1   note that such dependency can emerge naturally among web-page components in their web-personalization tool. cyclic cp-network raise some conceptual and computational problems to which we still do not have satisfactory answers. even worse  according to the standard semantics of cp-nets  most cyclic cp-nets are inconsistent. for example  in  domshlak and brafman  1   it was shown that the preference ordering induced by any simple cycle  i.e  a cycle that does not contain smaller cycles  with more than two nodes is inconsistent. that is  there will be at least two outcomes  o  and o1  such that one can show that o1 is strictly preferred to o1 and o1 is strictly preferred to o . in addition  whereas for acyclic networks one can determine the most preferred outcome in linear time even in the face of evidential constraints  i.e.  constraints that fix the value of certain variables   no corresponding algorithm is known for networks that contain cycles. 
　the fact that many cyclic networks arc inconsistent raises a serious practical concern. when a user specifies an inconsistent cyclic network  we must ask him to revise his network. to do so  we need to provide information that will help him obtain a consistent network. in this paper we make two practical contributions aimed at improving this process. first  we show that various optimization queries can be answered naturally even when the network is  inconsistent  according to the standard semantics. in such cases  no additional burden is placed on the user. second  when revision is required  we show how the notion of a partial model  studied in the area of logic programming  can be used to identify those aspects of a model that require revision. 
　while pursuing our more practical goals we make a number of technical and semantic contributions. first  we provide a more flexible semantics for cp-nets that is identical with the current semantics on those networks the latter considers consistent. this semantics justifies our approach for generating optimal outcomes given networks that are inconsistent under the standard semantics. second  we show how to answer optimization queries using various approaches that include reduction to sat  and reduction to logic programs. this extends current methods which are restricted to acyclic nets  and helps us define the notion of a partial outcome. 
1 

　the paper is structured as follows: in section 1 we provide the necessary background on ceteris paribus preference statements and cp-nets. in sections 1 and 1 we take a closer look at the notion of consistency in cp-nets and the problem that cyclic networks introduce  we suggest a natural definition of a preferred model as one that cannot be improved  and explain how the problem of the existence of such models can be reduced into a csp problem. in section 1 we discuss an alternative translation into nonmonotonic logic programs and some of its implications  and in section 1 we conclude. the full version of this paper is available from the authors' web site. it contains proofs  an optimization method based on cutset conditioning  a discussion of constrained optimization and other inference tasks  and a comparison with logic programs with ordered disjunction fbrewka et ai  1 .1 
1 cp-nets 
we start with a review of ceteris paribus preference statements and preferential independence  followed by the definition of cp-nets. 
1 	ceteris paribus preference statements 
a preference relation is a total pre-order  a ranking  over a set of outcomes. given two outcomes we write if  is at least as preferred as and we write if o is strictly more preferred than 
　the types of outcomes we are concerned with consist of possible assignments to some set of variables. more formally  we assume some given set of variables with corresponding domains . the set of possible outcomes is then for example  in the context of the problem of configuring a personal computer  pc   the variables may be processor type  screen size  operating system etc.  where screen size has the domain operating system has the domain windows1  windowsxp   etc. each assignment to the set of variables specifies an outcome - a particular pc configuration. thus  a preference ordering over these outcomes specifies a ranking over possible pc configurations. 
　the number of possible outcomes is exponential in while the set of possible total orders on them is doubly exponential in  therefore  explicit specification and representation of a ranking are not realistic. we must find implicit means of describing this preference relation. the notion of conditional preferential independence plays a key role in such representations. intuitively  x and y are conditionally preferentially independent given z  where x  y   z are disjoint subsets of v  if for every fixed assignment to z  the ranking of x values is independent of the value of y. formally  let x  y and z be a partition of v and let z p z . x and y are conditionally preferentially independent given z iff  for we have that 

x and y are conditionally preferentially independent given 
z if they are conditionally preferentially independent given 
　1a note on notation. due to the difficulty of using the logical negation operator  in drawing packages  we use two alternative notations: instead of and instead of 
any assignment z in our pc example  the user may assess operating system to be independent of other features given processor type. that is  it always prefers linux given an amd processor and windows1 given an intel processor 
 e.g.  because he believes windows1 is optimized for the intel processor  whereas linux is otherwise better . conditional preferential independence is a standard notion in multiattribute utility theory  keeney and raiffa  1 . 
1 	cp-nets 
cp-nets were introduced in  boutilier et al.  1j as a tool for compactly and intuitively representing qualitative preference relations. this graphical model exploits conditional preferential independence in structuring a decision maker's preferences under ceteris paribus  all else being equal  semantics. cp-net is the first model based on the notions of purely qualitative preferential independence  and bears a surface similarity to bayesian nets  pearl  1 . however  the nature of the relationship between nodes within a cp-net is generally quite weak compared with the probabilistic relations in bayes nets. 
　during preference elicitation  for each variable ar in the variable set v  the decision maker is asked to specify a set of parent variables  ar  that can affect her preferences over the values of a'. that is  given a particular value assignment to  a    the decision maker should be able to determine a preference order over the domain of x  denoted as p a     all other things being equal. 
the above information is used to create the graph of the 
cp-net in which each node x has  as its immediate predecessors. given this structural information  the decision maker is asked to explicitly specify her preferences over the values of x for each instantiation of  a  . this conditional 
　as an example  consider the network in figure 1 a   in which all variables are boolean. this network has three variables  a b  and c. the preferences over a and b are unconditional  whereas the preferences for c's values depend on the values of a and b. in figure 1 b   we see the preference order induced by this cp-network. for every pair of 

figure 1: a simple 1-cycle cp-network. 
is obtained from  via a single improving flip. natu-
rally  these definitions are with respect to some cp-network  which we take to be fixed by the appropriate context. 
theorem 1 is valid iff there is an improving flipping sequence from 
figure 1: a cp-net and its corresponding preferential order. 	an immediate consequence is the following: 

outcomes we have that  is valid iff there is a path from i in this graph. 
1 the weak preference semantics 
according to the standard semantics  the preferences expressed in the cpt of a cp-net are strict preferences. we suggest viewing them as weak preferences using pre-orders instead of strict orders. as we show  this leads to a semantics that is only slightly weaker than the standard semantics. in fact  it leads to identical orderings on cp-nets that are consistent according to the standard semantics. more formally  
valid  no strict preference would be valid. this is because the preference relation in which all outcomes are equally desirable is a model for every cp-network according to the above semantics. thus  all cp-nets are  consistent  according to our semantics. 
　the above semantics can be related to a more syntactic notion of a proof of preference  or a flipping sequence  boutilier et al.  1 . let o be an outcome  and suppose that o assigns to x some value  that the user ranks lower than  in parental context c satisfied in o. then  we can improve o by flipping the value of x from to an improving flipping sequence is a sequence of outcomes such that 
in the standard semantics we have consequence 1 is valid iff there is an improving flipping sequence from to hut no improving flipping sequence 
from 
another interesting theorem relates the standard  stronger semantics  and our semantics. 
theorem 1 let g be a cp-network that is consistent according to the standard semantics. then  g satisfies cording to our semantics iff g satisfies according to the standard semantics. 
　this theorem shows that our semantics is a direct extension of the standard semantics. to understand it better  we will soon take a look at networks that are inconsistent according to the standard semantics. 
   finally  we define the notion of optimality in the context of a cp-network. there are two possible definitions: an outcome is said to be strongly optimal iff there is no other outcome such that  holds. an outcome o is said to be weakly optimal iff there is no other outcome o' such that holds. thus  in the first case  o is either strictly bet-
ter than any other outcome or incomparable. in the second case  there may be other outcomes that are as preferred as o  but no outcome that is strictly preferred over o. in networks that are consistent according to the standard semantics  there is a unique best outcome that is strictly better than any other outcome. however  when we move beyond this class of networks  we can have more than one optimal outcome  and it can be either strongly or weakly optimal. the latter class is computationally more challenging to identify  and so we concentrate on strongly optimal outcomes. 
1 optimality in cyclic networks 
the semantics of cp-nets allows for cycles. but only the consistency of acyclic cp-nets is guaranteed according to the standard semantics  boutilier et al  1 . moreover  such networks have a unique optimal outcome. this remains true even if we introduce evidential constraints  i.e.  constraints that fix the value of some variables. 

qualitative reasoning 	1 

　cyclic networks often induce an inconsistent  i.e.  cyclic  preference order according to the standard semantics. for example  consider the network in figure 1 which contains a cycle of size 1  called a simple cycle in  domshlak and brafman  1 . the web-personalization applications described in  domshlak et al.  1  naturally gives rise to such cyclic structures. there  variables correspond to articles  ads  and other content element in an online newspaper. the value of each variable indicates whether it is currently displayed or not. the cp-net captures the preferences of the editor regarding the presentation of different elements on the user's current screen. these preferences together with user-generated content constraints lead to a personalized view that takes into account the user's interests and the editor's expertise on preferred combinations of news items. for example  in the cpnet in figure 1  a could be a review of a new toyota 1 vehicle  b a test-drive of a new bmw series 1 car  c a story about a recent man. united match  and d a story about man. city's recent success. suppose that man. united is sponsored by toyota  and man. city by bmw  and the editor would prefer not to display stories about competing teams and/or companies in the same screen. this is expressed in the cp-net in figure 1 by stipulating that if a is present then b should not  if a is not present then b should be present  etc. 
　in  domshlak and brafman  1  it is shown that such a network is not consistent  i.e.  there is no total order of the set of outcomes that satisfies all the preferences embodied in this network. it is easy to see why this is so when we examine figure 1 which describes the relationships among different possible outcomes. the nodes in that figure correspond to outcomes and the edges correspond to legal improving  single  flips. for example  consider the outcome a1c d1 in the lower left-hand side of figure 1. given that a is assigned a1  we can see from the b's cpt that 1 is a more preferred value for b. thus  there is an edge from a1cld1 to a1blcld1. 
　we can see that figure 1 contains cycles  making it impossible to totally order its elements consistently. however  it is also apparent that it contains two elements  alb1cld1 and a1blc1dl that  in some sense  can be viewed as optimal elements  as well as two elements  alblcldl and a1c1  that in some sense can be viewed as the worst elements. 
　indeed  according to our semantics  this network induces three classes of outcomes described in figure 1. the outcomes within each class are either equally preferred or incomparable  and there is a strict preference between outcomes belonging to different classes. an important consequence of this is that there are clear candidates for the set of optimal outcomes: the two outcomes in the top class. 
　we can see that our semantics is more lenient  allowing for specifications that  in some sense  are cyclic. if the cycle contains all outcomes  then all outcomes are equally preferred. this specification is not informative  and the user needs to be informed of this fact. however  the example above shows that the cycle may contain some  but not all of the outcomes. whereas the standard semantics will dismiss this cp-network as inconsistent  our semantics is more tolerant  and can use this cp-net to determine an optimal outcome. 
　we now turn to the computation of an optimal outcome via a simple reduction to a csp problem  or a sat problem when the variables are binary . the variables in our reduction 

figure 1: outcome space for the 1-cycle network. 

figure 1: ordered outcome classes for 1-cycle network 
consist of the variables in the cp-network. hor every entry in the cp table of every variable  we add the constraint 
　　　  where   denotes the context  i.e.  the assignment to the parents of and is the preferred value of 
　as an example  for the cp-network in figure 1 we obtain the following propositional formula. 

in the case of figure 1  we get the formula 

lemma 1 o is a strongly optimal outcome for  cp-net iff it satisfies the above csp 
　the above algorithm does not work when we have weakly optimal outcomes  i.e.  when we have a set of outcomes that are equally preferred  but cannot be strictly improved. figures 1 and 1 show an example of a network giving rise to such a case and the relation over the outcome space it induces. from now on  our treatment centers on strongly optimal outcomes only  to which we simply refer as optimal outcomes. 


figure 1: a network without a strongly optimal outcome 
 a1dd1 a1c1 a1c1 a1c1 i a1c1 a1c1 a1c1 a1c1 | t 
ia1c1 a1c1 a1c1 a1c1 a1c1 a1c1 a1c1 a1c1 j 
figure 1: outcome classes for network in figure 1 
　lemma 1 implies that the problem of finding a single optimal outcome is in np. when the cp-network is acyclic  an optimal outcome can be found in linear time  boutilier et a/.  1. our result indicates a linear time solution for simplecycle nets  too  if the variables are binary  because the resulting csp is an instance of 1-sat laspvall et a/.  1 . 
1 logic programs and partial consistency 
we start with some background on the semantics of logic programs  followed by a reduction of cp-net optimization to logic programs. then  using the notion of a partial stable model of a logic program  we can define a corresponding notion for a cp-net that captures those variables for which we have some reasonable candidate for an optimal value. or value assignment on the atoms of atorns p . we denote the set of atoms of 1 that are assigned the value true  and s~ the set of atoms that are assigned the value false. the reduct ps of a logic program p w.r.t. an assignment s is the logic program obtained from p after deleting  i  every rule of p that has a negated atom   ii  every negated atom from the body of the remaining rules. 
　the resulting program does not contain negated atoms  and is called a definite logic program. let  p  denote the deductive closure of a definite logic program p  which coincides with its minimal model. a stable model lgelfond and lifschitz  1  of a logic program p is an assignment 1  such that  a normal logic program may have 
none  one or several stable models. the problem of deciding whether a normal logic program has a stable model is np-complete  but many problems can be solved efficiently in practice by state-of-the art systems such as smodels isurjanen and niemela  1  and dlv idell'armi etal  1 . 
　an alternative semantics for normal logic programs is the partial stable model semantics  sacca and zaniolo  1 . this is a three-valued semantics  where each atom may assume the values: true  false or undefined. given a threevalued assignment s of atoms p   we say that s is a partial model of p if for each   every rule with head a contains at least one literal b in its body  such that the reduct ps of p w.r.t. a partial model s is defined as the program that is obtained from p after deleting  i  every rule of p that has a negated atom not with  ii  every rule where an undefined atom occurs  iii  every negated atom from the bodv of the remaining rules. a partial model s such 
that  is called a founded model of p. a maximal founded model is called partial stable model of p. it is not hard to see that every program has a partial stable model. 

　the intuition behind a founded model is similar to that behind a stable model  except that we are willing to ignore certain variables and the rules that they participate in. a partial stable model is one where we try to ignore as few variables  w.r.t. set inclusion  as we can. 
1 translating cp-nets into logic programs in this section we translate cp-nets into nonmonotonic logic programs  showing a one-to-one correspondence between the net's optimal outcomes and the stable models of the corresponding logic program. is a strongly optimal outcome for a cp-net iff 
it is a stable model of its corresponding logic program. 
qualitative reasoning 	1 　note that only the most preferred values of each preference statement participate in the translation of a cp-network into a logic program. furthermore  the not operator appears only in the choice rules set  a feature that seems to indicate a rather weak link between cp-networks and nonmonotonic logic programs. however  in the long version of the paper we show that in the case of cp-networks with constraints  the not operator plays a more central role in the translation and the relation between cp-networks and logic programs is stronger than it may appear here. 
example 1 consider the network: 

1 partial stable models and partial outcomes 
we showed a direct correspondence between the optimal outcomes of a cp-network and the stable models of its associated logic program. however  some logic programs have no stable model  much like some cp-nets have no strongly optimal outcome. we can interpret the non-existence of an optimal outcome as an indication that some of the preferences are not well-defined. there are two ways to handle such situations: we can isolate the ill-defined preferences and reason with the rest of the network  or we can try to revise the ill-defined preferences. in both case  we require the ability to identify the problematic parts of the network. here we show how partial stable models can provide valuable assistance in this task. together with the corresponding choice rules set and uniqueness constraints. this program has no stable model  but it has two partial stable models  
       these partial stable models do not assign a value to variables because the corresponding subnetwork does not possess an optimal outcome. 
　we call the outcomes of a cp-network that correspond to the partial stable models of its associated logic program  partial optimal outcomes. intuitively  a partial stable model corresponds to an optimal assignment to a coherent sub-net of the original cp-net that contains the same preferences as the cp-net. thus  we attempt to remove certain nodes  until we get a coherent specification. those nodes that were removed are the ones we should point to the user as problematic. 
　existing knowledge on partial stable models  e.g.   dimopoulos et al  1   implies that a total partial optimal outcome  i.e.  one that assigns a value to every variable  is an optimal outcome  and that deciding whether a logic program has a partial stable model other than the empty set is npcomplete. discovering whether a variable appears in some partial optimal outcome is np-complete  whereas deciding whether a variable appears in all partial optimal outcomes is ilp1-complete. 
1 conclusion 
we showed that the current semantics of cp-network is too conservative in its interpretation of user specification. this is contrary to the aim of research on preference elicitation techniques  i.e.  reducing the burden on users. consequently  we suggested a different semantics under which optimization can be meaningfully applied to cp-nets that are currently considered inconsistent. we showed how such an optimization process can be practically implemented  extending current optimization techniques to cyclic network. moreover  we described a computational method for identifying sub-networks that are meaningful  providing the first tool that can point out to a user what part of her specification requires revision. 
references 
 aspvall et al.  1  b. aspvall  m. plass  and r. tarjan. a linear-time algorithm for testing the truth of certain quantified boolean formulas. information proc. letters  1. 
 boutiliere/fl/.  1  c. boutilier  r. i. brafman  h. h. hoos  and d. poole. reasoning with conditional ceteris paribus preference statements. in vav1  1. 
 brewka etai  1  g. 	brewka  
1. niemela  and t. syrjanen. implementing ordered disjunction using answer set solvers for normal programs. in j eua'1. 
 deirarmi*/fl/. 1  t. deh'armi  w. faber  g. jelpa  c. koch  n. leone  s. perri  and g. pfeifer. system description: dlv. in proceedings of lpnmr-1  1. 
 dimopoulosetal  1  y. dimopoulos  b. nebel  and f. toni. on the computational complexity of assumptionbased argumentation for default reasoning. artificial intelligence  1. 
 domshlak and brafman  1  c. domshlak and r. 1. brafman. cp-ncts - reasoning and consistency testing. in proc. kr'1  1. 
idomshlakera/.  1 c. domshlak  r. i. brafman  and e. s. shimony. preference-based configuration of web page content. in proc. i j capo i  1. 
 doyle and wellman  1  j. doyle and m. wellman. representing preferences as ceteris paribus comparatives. in aaal spring sym. on decision-theoretic planning  1. 
igelfond and lifschitz  1  m. gelfond and v. lifschitz. the stable model semantics for logic programming. in proc. icslp-1  1. 
 hanson  1  s. o. hanson. what is a ceteris paribus preference. j. of philosophical logic  1-1. 
 keeney and raiffa  1  r. l. keeney and h. raiffa. decisions with multiple objectives: p