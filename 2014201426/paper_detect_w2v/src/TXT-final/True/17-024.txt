 
　　qualitative analysis studies the mechanisms with which humans derive the abstract behavior of a complex system from a 
description of its components and their interconnections  while ignoring unimportant or unknown low-level details. i present a program that analyzes a system by forming and combining mathematical descriptions of its sub-systems. this approach can overcome 
significant shortcomings in the simulation method used by other qualitative reasoning systems. 		 1  
hereafter called fun-ints. the set of fun-ints that describes a function is called a junctional descriptor or fd. 
   each fun-int contains the information that high school students use to sketch functions. it includes the function's direction  sin-
gularities  inflection points  end-point values and limits  convexity. values may bo undefined or unknown. the inverse  for instance  does not exist on constant intervals  and may lack a closed form on monotone intervals table 1 shows the fun-ints for the ball's 1. motivation 	height h. convexity is represented as a list of triples 
	i contend that qualitative reasoners should produce explicit 	in which sign is the second derivatives sign on 	'. all other 
mathematical descriptions of behavior. i have developed a qualitative mathematical rcasoner. qmr  to test my contention. it derives closed-form expressions for each parameter in a system and 
determines the behavior of these expressions. this presupposes that real-world parameters can be modeled by real-valued piecewise differentiate functions of time  and systems by sets of functionally related parameters. actually  i only discuss systems that can entries arc self-explanatory. 
   constraints and initial values mix numbers and unknown symbols  so qmr implements generic arithmetic operations similar to 
those in other symbolic algebra systems. inequality relations between arbitrary expressions can be asserted  but inconsistent assertions are rejected. this information is used by generalized inequality predicates  for example be solved using laplace transforms and other basic techniques. extending qmr to cases with unwieldy or open-form solutions is 
 1  discussed in the conclusions. 
1. an example 
　　before delving into the details of qmr  let us consider a simple example  the behavior of a ball after being thrown straight up from height 1 with velocity vo- this system can be represented by the ball's height h t   velocity v t  and acceleration a t . the constraints 

1 	e. sacks 
the current algorithms do not derive all valid inequality relations  but they never derive invalid ones. they have been adequate so far. if they prove insufficient  more sophisticated algebraic and analytic techniques can be utilized. 
1. 	instantiation algorithms 
　　qmit derives the behavior of expressions by constructing and describing their fd's. it matches expressions syntactically with a large library of basic patterns that includes cubic  exponential  logarithmic  hyperbolic and trigonometric functions. if a match succeeds the corresponding instantiation algorithm creates an fd based on the matched arguments. the qualitative region in which each argument lies determines the fd's form  whereas the actual arguments determine its entries. for example  ax1 + bx matches the quadratic pattern  and 
 w - 1. the quadratic instantiator chooses a quadratic or a linear form  depending on whether a is nonzero or zero  and substitutes a. 1 and 1 into that form. 
　　instantiation algorithms use three transformations: restriction  linear substitution and linear composition  to produce a wide range of fd's from a few basic ones. all quadratics  for instance  come from the x1 fd. linear substitution produces an fd for f ax + b  from that of f x  by mapping each fun-int  lb  ub  onto 
		 1  
and appropriately scaling the derivatives  singularities and convexities. the first and second derivatives are af' ax + b  and a1f  ax + b  by the chain rule. singular points are scaled and their values multiplied by a  but convexity regions are just scaled since multiplying by a1 leaves their qualitative values unchanged. the case a = 1 yields a constant function  y = f b . linear composition produces a fun-int for a   f x  + b from that of f x  without changing the existing lb and ub values the new direction is the same as the old when a   1 and the opposite when a   1. the function is scaled by a and shifted by b  the derivatives and singularities are scaled by a and the inverse is transformed appropriately. once again  a = 1 yields a simple special case  f x  = 1. finally  the restriction operator derives an fd for f x  restricted to a sub-interval of its original domain. 
　　all three instantiation functions perform perfectly when certain qualitative information is available  for example a's sign for substitution and composition. if ambiguity exists  e.g.  they create an fd for every possible case and record the appropriate assumption in each one. the next section describes combination algorithms that are more powerful and general than the instantiation algorithms. however  unlike the instantiation functions  they do not always produce complete fd's due to the limitations of their current methods. as with symbolic arithmetic  more sophisticated methods arc unnecessary at the moment. 
1. 	combination algorithms 
　　combination algorithms implement functional composition  addition and multiplication of arbitrary fd's. they build other operators  such as exponentiation  division and subtraction  from these three. they enable qmr to decompose complicated expressions that do not match any stored pattern into sums  products  exponentiations or compositions of two or more sub-expressions  to analyze recursively the sub-expressions and to combine the results. 

higher-level descriptions can be constructed from the basic queries. one program summarizes an fd's mathematical behavior by listing directionality  discontinuities  convexity  singularities and turning points. another generates the joint qualitative behavior of an fd set demonstrated in table 1. a graphics program that draws qualitative sketches of fd's also exists. 
1. 	comparison with other work 
this section compares qmr with the qualitative simulation 
 qs  approach taken by forbus   de kleer and brown   kuipers  and williams . in qs. each parameter's instantaneous state consists of its qualitative value and the qualitative value of its derivative: increasing  constant or decreasing. a system's state  in turn  consists of the states of its parameters. qs derives a system's behavior from its constraints and initial values by determining the successive qualitative states which it might enter. states end when parameters reach boundary points  so qs must derive which  if any  do so from the constraints and initial values. it summarizes these results in a history  a graph whose nodes represent states and links  transitions. periodic behavior shows up as cycles and ambiguity as multiple out-links. 
　　simulation offers insight into naive reasoning but ignores several aspects of expert behavior: large bodies of compiled knowledge  hierarchical abstraction and sophisticated mathematical models. experts summarize important recurrent systems as cliches  concise descriptions of their behavior and appearance. future problems that match cliches need not be analyzed since the expert remembers how they behave. experts decompose a large system into a few sub-systems and treat them as black boxes that implement specified input/output behavior. these sub-systems  in turn  may be recognized as cliches or decomposed further  leading to a hierarchy of abstractions. in order to treat sub-systems abstractly  qs must replace each one by a high-level constraint that relates its inputs and outputs but ignores internal structure. however  sub-system behavior is described by histories  so qs must deduce constraints from histories. that difficult learning problem has not been mentioned-much less solved-by current qs researchers  so they must always use combinatorially explosive linear simulation. qs systems could learn and record cliches-though none actually do-but only as histories  not as constraints. once again  these would not be very useful in problem decomposition. 
　　experts often derive and analyze mathematical models such as exponential decay  linear growth  and damped oscillation. qs lacks the necessary details for this analysis. for example  it cannot represent the functions 
 1  
or deduce that similarly  asymptotic behavior lies outside qs's ken. since it assumes  simplemindedly  that quantities eventually reach the boundaries that they approach. this heuristic can predict qualitatively incorrect behavior since it confuses bounds with limits. in general  qs cannot incorporate qualitative mathematical information into the existing constraint/simulation formalism without a detailed model of continuous functions. de kleer and brown point out that many expert systems fail when given simplified versions of problems which they have already solved. qs suffers from the dual of this weakness; it cannot produce better solutions from more precise problem specifications. 
qmr's functional model removes the limitations that prevent 
	e. sacks 	1 
qs from becoming an expert network analyst  without sacrificing its flexibility and generality  by stressing the aspects of expertise that it ignores: compiled knowledge  hierarchical abstraction and mathematical models. qmr encodes common functions as fd's  and families of functions as instantiation algorithms  such as the exponential model aebx + c of decay and growth. it divides a network into sub-systems  connected by functional composition  addition or multiplication links  creates an fd for each sub-system  and uses composition algorithms to derive an overall fd. sub-systems can be analyzed by recursive decomposition or by instantiation algorithms. unlike qs. this algorithm is fully hierarchical  since it uses a uniform representation  the fd  for all inputs and outputs. finally  the fd model can record a wide range of information: numerical functions such as logx  parameterized ones such as sin ax. and purely qualitative ones such as  an increasing function.  this allows qmr to apply numerical techniques to the first type  symbolic ones to the second  and general functional ones to the third. it takes advantage of powerful calculus methods whenever possible  but uses general ones when all else fails. 
1. 	conclusions 
　　i have described a qualitative mathematical reasoner. qmr. and compared it with existing qs reasoners. qmr consists of a welldeveloped qualitative mathematics system that manipulates piecewise continuous parameterized functions  and a rudimentary qualitative reasoner that deduces the behavior of functional networks. its mathematical sophistication allows expert reasoning about systems of known functional form  while its uniform representation  the fd. facilitates hierarchical decomposition of compound systems. in contrast  the qs paradigm attempts to build a sophisticated qualitative reasoner while relying on an extremely simple uniform model of functions. existing qs programs use qualitative simulation as their reasoning algorithm. this leads to combinatorial explosion in complex networks since components cannot be treated as compound quantities; the former have history descriptions and the latter  constraints. even if this limitation could be surmounted  the qs functional model would remain too weak for sophisticated mathematical reasoning techniques. 
　　though qmr solves many interesting problems quickly and precisely  its current capabilities are inadequate for expert reasoning about realistic systems. experts reason about large systems whose closed-form solutions are nonexistent  or unwieldy  or where the exact functional relation between nodes is unknown. extending qmr to complex and partially-specified networks is a goal for future research. one possible approach would use approximation techniques  such as power series expansions  when closed-form solutions fail. it would apply theorems about differential equations to analyze partially-specified systems. a second goal is to prove qmr's worth by solving significant problems  not just simple examples. this goal will also guide qmr's development by setting a standard that it must meet. 
1. 	