using pattern-action rules for the generation of gpsg structures from mt-oriented semantics 
stephan busemann 
deutsches forschungszentrum fiir kiinstliclie iiitelligenz  dfki  gmbh* 
stuhlsatzenhausweg 1  d-1 saarbrucken 1  germany e-mail: busemann dfki.uni-sb.de 

a b s t r a c t 
in many tactical nl generators the semantic input structure is taken for granted. in this paper  a new approach to multilingual  tactical generation is presented that keeps the syntax separate from the semantics. this allows for the system to he directly adapted to application-dependent representations. in the case at hand  the semantics is specifically designed for sentence-semantic transfer in a machine translation system. 
the syntax formalism used is  generalized phrase structure grammar  gpsg . the mapping from semantic  onto syntactic structures is performed by a set of pattern-action  pa  rules. each rule matches a piece of the input structure and guides the gpsg structure- building 
process by telling it which syntax rule s  to apply. the scope of each pa rule is strictly local  the actions are primitive  and rules can not call each other. these restrictions render the production system approach both highly modular and transparent. 
1 i n t r o d u c t i o n 
in most tactical unification-based approaches  the meaning representation a generator starts from is taken as a given. a montagne style semantics is often used where each lexicon entry and each syntax rule is assigned a semantics in the grammar  e.g.  dymetman and isabelle  1  shieber et a/.  1  . the semantic constructions are usually motivated by linguistic considerations alone; more precisely  by the interaction of syntactic and semantic constraints. 
　such a system is capable of computing a terminal string for a given logical form. if it were to be used as a front-end component of some application system  
   *this work was partially funded by the german minister for research and technology  bmft  under contract itw 1. most of the research was accomplished at the 
technical university of berlin in the project kit-fast  which was funded by the bmft under contract 1. 1 would like to thank christa hauenschild for numerous valuable discussions. 
the semantics would have to be adapted to the application system's semantic representation language  which may depend on the system's purpose. to generate an utterance  a semantic representation would first have to be translated into an equivalent logical form  to which the grammar can eventually assign a syntactic structure containing the output string. 
　in order to avoid this adaptation  this paper suggests to directly relate a semantics that depends on a particular application to syntax. a new approach to the syntax semantics interface is presented that uses a set of patternaction  pa  rules similar to those known from production systems. the grammar only covers syntax; the semantics is completely left to the respective application system. 
　the application at hand is the berlin machine translation  mt  system which is the first one to use an operational version of generalized phrase structure grammars  gpsg   gazdar et al.  1  for both multilingual parsing and generation. the berlin mt system translates sentences taken from a corpus of eg administrative texts from english to german and vice versa it is based on a model of translation that includes several levels of transfer  the one closest to surface form of which has been implemented and tested. 
　the generator takes as input a. semantic represent.at ion specifically designed for transfer  pa rules are used for extracting from it- the information relevant to generation and stepwise constructing a gpsg syntactic structure. in this generator  a modern syntax formalism is for the first time coupled with al production system techniques. 
　section 1 motivates and describes the underlying semantic representation language. section 1 sketches the gpsg grammar formalism used and describes how it supports generation. the paper focusses  in section 1  on the definition of pa rules and their use in the given framework of generation. 
1 ivansfer results as input structures for the generator 
the berlin mt system is based on a general multi-level transfer framework of mt that has been mainly developed by hauenschild  hauenschild  1  hauenschild and busemann  1 . this framework assumes several succeeding levels of representation for both the source language as well as the target language text  among them 
busemann 


figure 1: the architecture of the berlin mt system. 

a level of syntax  of sentence semantics  and of conceptual text representation. between some of these levels transfer is assumed. thus the complexity of the transfer step  which is viewed as the place where the divergencies between source and target language have to he bridged  is distributed between different components  and transfer will thus become: more tractable than at a single level. 
   within such a model  the input structures for the generator are motivated by mt considerations rather than by linguistic ones alone. the berlin mt system  as developed and implemented so far  covers the sentencesemantic and the syntactic level with transfer being possible only at the former  cf. figure 1 . the sentencesemantic representation language family fas  functorargument stuctures   hauenschild and urn bach  1  has been designed to interface three different proces-
ses: gpsg-based analysis  sentence-semantic transfer of a source language fas expression into a target language one  and gpsg-based generation.1 
   fas is defined by context free rule schemata with complex categories consisting of a main category that is associated with a fixed list of feature specifications  see figure 1a for an example .  the categories are in canonical order with the functor preceding all of its arguments. fas expressions contain almost no redundant informa-
1
　　 given that gpsg is chosen as the syntax formalism  one might wonder why the intensional logic  lb  proposed by gkps was not adopted. on the one hand  there are intrinsic problems with the mapping scheme of gpsg structures onto il expressions  umbach  1 ; on the other hand  mt-related information cannot be straightforwardly made explicit in lb expressions  lianenschild and busemann  1 . 
1
　　　in the present versions there are up to seven features in a fas category. details irrelevant to the present discussion are omitted in the figure. 
tion. for instance  number information is only located at the the 'det' category. the use of semantic relations  encoded by the tole' feature   role configurations  'conf'  and semantic features  'sent  allows us to discriminate between different readings of words that result in different translafional equivalents.1 for instance  german verabschieden translates to say good-bye if the 'affected' role is a person  as in he says good-bye to his friend   but to adopt if the 'affected' role is a plan  as in the council adopts the proposal . this is encoded by the feature 'sem' 
at the category 'n pred ' 
   for the kind of text envisaged  it was considered important to preserve the thematic structure of the source language sentence as far a s possible during transfer. it is encoded at the level of the 'clause' daughters by virtue of the feature 'thenv with the numerical values indicating which portion should preferrably be presented first  second  third etc. for instance  the english translation given for the german sentence in figure 1b is passivized to reflect the source language order of the arguments. 
   from the point of view of generation  all decisions about style  voice  tense  or word choice are assumed to have been reached to during transfer. thus a fas expression reflects sufficient linguistic information for a sentence to be unambiguously assigned to it. for instance  it is possible to compute for every role an np's surface case with help of the features 'voice' and 'conf' and of the verb itself. w i t h verabschecden  to adopt   active voice and the role configuration 'ag-af' which says that the verb has exactly two roles named 'agent' and 'affected* respectively  the 'agent1 constituent is assigned nominative case whereas the 'affected' one yields accusative. 
　　the system of semantic roles is based on  steiner et a/.  1 . 


figure 1: a sample fas expression and a corresponding gpsg structure. 

1 	gpsg-based generation 
the constructive gpsg formalism used is described in detail in  busemann  1  llauenschild and busemann  1 . a major feature of the formalism is a strict application order of its components that allows the efficient implementation of different processing strategies for the construction of an admissible gpsg syntactic structure. this is different to the axiomatic formalism of  gazdar et a/.  1   which assumes a simultaneous application of all components to exclude ill-formed structures. 
　for the present purpose  only three components will be sketched here. first of all  the concept of complex categories must be mentioned. roughly  a complex gpsg category is a set of feature-value pairs with the values being allowed to be complex categories themselves.1 second  there is the separation between immediate dominance  id  and linear precedence  lp . an id rule i  -  a b c says that in every local tree  i.e. a tree of depth one   categories a  b  and c are immediately dominated by category d. an lp statement b c says that in every local tree with categories b and c  b must precede c. third  three feature instantiation principles  fips  require part of the features to be cospecified in some or all categories of a local tree. 
the lexicon is a set of unary local trees consisting of 
　　additional restrictions ensure that categories are finite  thus preserving context-frecness of gpsg.- strings such as s  np nom   vp inf   denote complex categories and are used for abbreviatory purposes only. 
a word stem dominated by a terminal gpsg category. fully inflected word forms are provided by a separate inflection component that operates on stems and a set. of morpho-syntactic features taken from the terminal categories of the gpsg structure.1 
　the construction of an admissible gpsg syntactic structure  cf. e.g. figure 1b  consists of two subtasks that can be performed independently of each other  and each according to its own processing strategy: 
structure building: an id rule  or a lexicon entry  licenses a local tree that contains the same amount of information. local trees are combined with each other to form a skeletal syntactic structure  sss . 
feature iustantiaton and ordering of the branches: to a  typically  strongly underspecified category  further information is successively added through the application of the fips and other components in a local tree. finally  the lp statements can cause the branches to be reordered. 
structure is built in a top-down fashion during generation  cf. section 1  whereas feature instantiation is more efficiently performed bottom-up.1 
　　using a root form lexicon is not just useful to keep the lexicon small  but even necessary for efficiency reasons  cf. 
the arguments in e.g.  shieber et a/.  1  . 
　　1top -down feature instantiation may become indeterministic due to the definition of gpsg';s foot feature principle  which can require several daughters to cospecify with respect to certain features  llauenschild and busemann  1 . 
busemann 


figure 1: introducing an s-extension into the sss  
　structure budding consists of a stepwise expansion of an sss there are non terminal leaf categories in the sss that are called attachment points. these are the nodes that may be expanded by additional structure. let us call such a structure s-extension  for structural extension . an s-extension is introduced into the sss by unifying its root  category with an attachment point  which must then be removed from the current set. the sss now contains additional leaves  the categories-but not the word sterns of which become the set of current attachment points for following expansions. let us call such an expansion step structure-building action  sba   cf. figure 1 . structure building starts with an sss consisting of a single attachment  point labelled by an empty gpsg category. 
　structure building alternates with feature instantiation in the following way: top-down structure building ceases if some subtree contains no more nonterminal leaf; i.e. all of its leaves are word stems. then bottom-up feature instantiation takes place at local trees licensed by id rules  lexical trees are admissible by definition  until a nonterminal leaf category is encountered. the updated set of attachment points that was valid at that level becomes the current one again. the whole process terminates with a gpsg syntactic structure of some sentence as its result after the top-most local tree has passed feature instantiation. 
　nothing has been said so far about how the next id rule  or lexicon entry  is triggered at a given stage of structure building. this is the topic of the following section. 
1 mapping fas expressions onto gpsg structures 
structure building is triggered by traversing the input. 
fas expression cind applying pa rules. each pa rule is sensible to the particular piece of a fas expression matched by the pattern. we shall start our discussion with the question of how much of a fas expression should a pattern comprise. we shall then describe the pa rules and discuss their properties. 
1 	traversing the fas expression 
in fas  the information needed to apply some particular 
id rule is not always accessible at a single fas category or within some restricted local environment of it. rather  information from distant portions of the fas expression may be needed. for instance  in order to apply the id 
rule for topicalization   
two distantly located specifications have to be collected  cf. figure 1a : the fas specification  them : 1   which is part of one of the daughter categories of 'clause'  is interpreted as requiring topicalization of a syntactic constituent under the condition that a declarative sentence is being generated. this latter information is  however  available at the illoc' category of the fas expression. 
　two possible methods to collect the information present themselves. first  the pattern including  them : 1  could be required to cover as much of the fas expression as would be needed to include lilloc' unfortunately  the required size of the pattern is not always known in advance because the fas syntax might allow an arbitrary number of recursively defined local trees to intervene. the second method-which was eventually adopted requires the patterns to cover not more than one local fas tree. in order to gather information that is locally missing  an intermediate storage is used. if  for instance  the illocution is matched  information about whether or not a declarative sentence is being generated is stored. later on   them : 1  is encountered. if 'declarative1 can be retrieved from the storage  the id rule for topicalization can safely be triggered. 
　it is thus possible to guide the whole generation process by a single traversal of the fas expression. the topicalization example above already suggests that the traversal should occur top-down rather than bottom-up: if it were bottom-up  the specification  them : 1  would have to be stored and the syntactic structuring at the sentence could only be determined when 'illoc' is matched. this delay would involve storing much additional information concerning e.g. auxiliary verbs that is not necessary otherwise. 
　the decision for a top-down traversal leads to the consequence that structure-building also occurs top-down: because of a similar distribution of information in fas expressions and in gpsg structures-for instance  lexical information is located at the terminal categories whereas much of the sentential information is found at the upper part of the structures-the strategy for traversing the fas expression is the most efficient one for gpsg structure building. 
   in order to adequately restrict the power of the intermediate storage  it is defined as a two-dimensional array of order  n  1  consisting of n pairs of the form  key  entry . keys and entries are atomic symbols except for the entry to the key cat  which is a gpsg category. all keys but cat are defined by the pa rule writer. for instance  the information that a sentence is a 'declarative' is represented as  s-type : decl . 
　　1 note that  in this id rule  the x + top  daughter is cospecified with the slash value of its sister  which eventually becomes more specific by virtue of the fips. 

　the storage is maintained by three kinds of information-gathering actions  igas  that write entries 
onto the storage or remove them from it: put store operates on a key and some information 1. it writes i as the entry of key. set gpsg features operates on a sequence of gpsg feature names and a sequence of gpsg feature values. it produces a gpsg category from them and unifies it with the entry of cat. remove i1tore operates on a key. it returns the entry by removing it from the storage  if the key is cat  it leaves an empty gpsg category . note that no reading of information is possible without  erasing it from the storage. 
　the gpsg category stored under cat serves to introduce the information collected into the syntactic structure. translating fas feature specifications such ais  them : 1  into gpsg feature specifications such as  top: +  is a task performed by the pa rules. 
1 	pattern-action rules 
pa rules consist of a left-hand side  the pattern  and a right-hand side  the actions . for a pattern to match local fas trees  simple term unification suffices because pas constituents as well as features are in canonical order. patterns are implemented as two-element prolog lists with the first element matching the root and the 
second one the list of daughters of a local fas tree. 
　the actions of the right-hand side divide up into two kinds  namely a list of igas for maintaining the intermediate storage and a list of sbas for the generation of gpsg local trees. at most one of the lists may be empty. the actions are encoded as prolog predicates. 
　two sample pa rules are shown in  1  and  1 . they encode the actions required for the example involving locally unaccessible information. in  1   the iga stores the fact that a declarative is being generated. the sba call-id expands the sss by an s-extension according to the topicalization id rule. the second pa rule matches a term specified by  them : 1   which eventually will be realized as e.g. an imp . here two igas must be executed. the first one attempts to remove  s-type : deel  from the storage. if this succeeds  a gpsg category  +top  is generated and stored by the second iga. 
how is the stored information introduced into the sss  
 tearly this should be done by sbas. however  rule  1  has no sbas  i.e. the np structure is built by virtue of another pa rule whose pattern matches the same local ias tree.. the definition of sbas given in section 1 is extended to include the unification of the category stored with some attachment point and the root of the sextension  cf. section 1 for a detailed example . 

let us now turn to the control of the pa rules that must  intuitively speaking  guarantee that all relevant rules are applied in such a way that the intended effects are achie-

figure 1: the generation algorithm. 
ved. this we call complete verbalization of a local fas tree. 
　a local fas tree is completely verbalized iff a maximum number n  1 of applicable pa rules are successful. a pa rule is applicable to a local fas tree t iff its pattern unifies with /- an applicable pa rule is successful iff all elements of iga can be executed without failure and at least one sba-if present is successful. an sba is successful iff its s-extension as well as the stored category can be introduced into the sss. 
　the question of how the number of successful pa rules is guaranteed to be maximal is a matter of control and will be answered in section 1. 
　what does it mean for an action to be not successful  failure of igas is straightforward. for instance  if the intermediate storage does not contain an appropriate entry for vtype  the first iga of the pa rule  1  fails  and so does the rule itself. an sba fails if either a stored category or the root  of the extensor does not unify with an attachment point. if all sbas fail  the pa rule does a s well. if all pa rules applicable to a local fas tree fail  chronological backtracking is invoked that leads to a rebuilding of the sss. 
　the algorithm described so far is summarized in figure 1. a more detailed discussion can be found in  busemann  1 . 
1 	an example 
this section demonstrates some of the essential points of the mapping from the fas expression in figure 1a onto the gpsg structure in figure 1b  which involves the topicalization of the direct object. 
the first step is taken by applying the pa rule  1  
busemann 
above. the daughters of the topicalization id rule are the current attachment points. at the 'clause' level  two pa rules are applicable.  1  matches a  perf : +  specification at the 'clause' category and introduces a perfect auxiliary by its sba. note that by call id lex  a different kind of sba is used here that provides  in addition to the task of call id  for the auxiliary's expansion into the lexicon. this is necessary since fas does not represent perfect auxiliaries but by a feature  whereas on the gpsg side  a terminal local tree must be generated. 
　the root of the sexpansion generated by caludjex unifies with  which is then removed from the set of attachment points. the only current attachment point is s psp .the sss built so far is illustrated in figure 1. 
the second rule applicable at the 'clause' level is  1 . it offers several possibilities to introduce an s-extension  given that the first daughter of the fas tree is a 'v pred' with active voice and role configuration 'ag-af. since this meets the case at hand  the first sba is successfully executed though this will eventually turn out to be wrong. the current set of attachment points consists of the daughters of the id rule. 
   
note that applying the two rules the other way round would have prevented the auxiliary from being introduced into the sss due to lack of a suitable attachment point. in that case  the number of successful pa rules would not have been maximal. 
in a next step  the verb is generated from 'v.pred' using 
pa rule  1 . the assignment of surface case to roles is stored  and a gpsg lexicon entry is called. after the insertion into the sss  the current attachment points are np nom  -top  and np acc  -top . 

the next local fas tree to be verbalized is rooted by a 'term' with  role : agent . note that it is specified by 
 them : 1  which causes rule  1  to store a gpsg category  top   saying that the np must not be topicalized. 
another pa rule is applicable that is similar to rule 
 1  but handles singular number. its first 1ga removes  agent : nom  from the storage. the second one stores a gpsg category containing the case information just retrieved as well as number information taken from the pattern. the s-extension is successfully introduced into the sss using the attachment point np -top  nom . note again  that an application of the two rules in different order would cause the  -top  specification to be introduced into the sss by an sba that verbalizes a different part of the fas expression. 

let us skip the straightforward verbalization of the term's descendants and turn to the second 'term' with  role : aftected . the only remaining attachment point is np acc  -top . applying the pa rule  1  here causes a gpsg category  +top  to be stored. furthermore  pa rule  1  adds accusative case and plural number to it and attempts to introduce another np s-extension into the sss. this  however  fails because of the incompatible 'top' specifications. 
　backtracking leads to a new choice of the s expansion in pa rule  1  by using the second sba. with the new s-extension introduced into the sss  however  the np nom  cannot be introduced anymore  again because of incompatible 'top' specifications  values of the gpsg slash feature also count as attachment points . thus a second revision of the s expansion becomes necessary  and the third sba in rule  1  is used  cf. the s-extension in figure 1 . this time  both the verb and the np nom  previously generated can be attached  and the remaining attachment point np acc  +top  unifies with np +top  +plu  acc . after the generation of the np  which we also skip  all current attachment points are expanded. 
　this is the moment for the flps to operate on the local tree under consideration  i.e. the lowest one with mother s in figure 1b . at the next higher level in the sss  the same situation arises: no more current attachment points. the fips cause  among other things  the s categories to share their slash values. as a consequence  the only remaining attachment point at the top level of the  is further instantiated by the np acc  structure and erased from the set  remember that it is cospecified with the slash value of its sister . thus generation terminates successfully. 
　finally the terminal local trees of the admissible gpsg structure are fed to the morphological inflection component in order to eventually produce the output string. 
1 	on the interaction of pa rules 
there are some important properties of pa rules known from production systems that must hold for the modular encoding of the mapping to pay off  davis and king  1 . though the generation system presented uses productions  it is not a production system: there is no common database to be modified by the productions and consequently  known conflict resolution strategies such as the rete algorithm  forgy  1  do not apply. 
　conflicts arise in the present system only if more than one rule matches a given local fas tree. as the matching is free of side-effects and the actions are primitive  i.e. no calls to other actions are allowed   the pa rules can communicate with each other only indirectly  i.e. by modifying the content of the intermediate storage or by successfully applying an sba  thereby creating a situation in which another pa rule becomes applicable  or cannot be applied anymore . 
　as should be evident from the example  conflicting rules must be applied in a certain order to guarantee that a maximal number of them will be successful. this requirement is formalized as follows: due to the restricted power of the pa rules  possible conflicts are detected and resolved a prion. all pa rules matching the same local fas tree are identified with help of the fas rule schemata. these pa rules are members of the local fas tree's conflict set. the elements of every such conflict set are partially ordered according to precedence rules that determine for each pair of pa rules whether or not the first one must be applied before the second one. 
　for instance  the conflict that arose with the np sextension is resolved by requiring that pa rules without an sba are applied first. the conflict regarding the perfect auxiliary is resolved with help of a precedence rule that checks the id rules that would be invoked by the respective sb as. if the mother of the second id rule can be unified with a daughter of the first one  but not vice versa  then the first pa rule must be applied before the second one. thus a pa rule with an sba invoking the id rule s   v s psp  will apply before another one whose sba involes the id rule s/np acc    v np nom . 
1 	c o n c l u s i o n 
a new approach to multilingual  tactical generation has been presented that allows for the direct mapping of an application-dependent semantic representation-the result of sentence-semantic transfer during mt onto a gpsg syntactic structure. to build the syntactic structure  a set of pattern-action rules is used that forms a separate component of the generation system. since it is part of the language-specific knowledge  it can be exchanged together with the grammar and the semantic representation in order to generate strings of a different language. 
　the pa rules allow a grammar writer to express all possible syntactic realizations of a local semantic sub-
structure. it remains open to further research how easily linguistic generalizations can be expressed by pa rules. another research goal is to formalize conditions for a bidirectional use of pa rules  which clearly involves major modifications of the concepts presented here. the present approach opens up a new way for a linguistically justified grammar formalism to be incorporated in different generation systems. 
　the generator is implemented in waterloo core prolog on an ibm 1 under vm/sp; a transported version runs as part of the berlin mt system in arity prolog on an at. the fragments of german and english covered are medium-sized  1 to 1 id and pa rules . for the ordering of pa rules  four precedence rules sufficed. run time for the generation of the sentence in figure 1 is about 1 sec. on the at. 
r e f e r e n c e s 
 busemann  1  stephan busemann. generierung naturlicher sprache mit generalisierten phrasensirukturgrammatiken. phd thesis  univ. des saarlandes  comp. sc. dept.  saarbriicken  1. also: techn. univ. berlin  comp. sc. dept.  kit report 1. 
 davis and king  1  randall davis and jonathan king. an overview of production systems. in e. w. 
elcock and d. michie  editors  machine intelligence 1  pages 1. ellis horwood  chichester  1. 
 dymetman and isabelle  1  marc dymetman and pierre isabelle. reversible logic grammars for machine translation. in proc. 1nd int. conf. on theoretical and methodological issues in machine translation of natural languages  pittsburgh  pa  1. 
 forgy  1  c. forgy. on the efficient implementation of production systems. phd thesis  carnegie mellon univ.  pittsburgh  pa.  1. 
 gazdar et a/.  1  gerald gazdar  ewan klein  geoffrey pullum  and ivan sag. generalized phrase structure grammar. basil blackwell  london  1. 
 hauenschild and busemann  1  christa hauenschild and stephan busemann. a constructive version of gpsg for machine translation. in e. steiner  p. schmidt  and c. zelinsky-wibbelt  editors  from syntax to semantics-insights from machine translation  pages 1. frances pinter  london  1. 
 hauenschild and urnbach  1  christa hauenschild and carla umbach. funktor- argument- struktur. die satzsemantische representations- und transferebene im projekt kit-fast. in j. schiitz  editor  workshop  scmantik und transfer '  ia1 working papers no. 1  pages 1  saarbriicken  1. 
 hauenschild  1  christa hauenschild. kit/nasev oder die problematik des transfers bei der maschinellen ubersetzung. in i. batori and h.-j. weber  editors  neue ansatze in maschinller sprachubersetzung: wissensreprasentation und textbezug  pages 1. niemeyer  tubingen  1. 
 shieber et a/.  1  stuart m. shicber  gertjan van noord  robert c. moore  and fernando c. n. pereira. a semantic-head-driven generation algorithm for unification-based formalisms. computational linguistics  1 l :1  1. 
 steiner et al.  1  erich steiner  ursula eckert  birgit roth  and jutta winter-thielen. the development of the eurotra-d system of semantic relations. in e. steiner  p. schmidt  and c. zelinsky-wibbelt  editors  
	from syntax to 	semantics-insights 	from 	machine 
translation  pages 1. frances pinter  london  1. 
 umbach  1  carla umbach. zur semantischen interpretation in der theone der gpsg. techn. univ. berlin  comp. sc. dept.  kit working paper 1  1. 
busemann 
1 

1 

1 

1 	natural language 

1 	natural language 

1 	natural language 

1 

1 

1 

1 	natural language 

1 	natural language 

1 	natural language 

1 	natural language 

1 

1 

