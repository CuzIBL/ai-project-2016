 
　many knowledge-based systems feature general machinery that operates on externally supplied information  these systems must solve the acquisition problem: how to represent the external knowledge  determine if it is adequate  and incorporate it into the knowledge base. as a mediator between users and interactive services  the consul system must understand the intent and behavior of programs that perform interactive functions to consul  understanding a function means classifying a description of it in a highly structured  prebuilt knowledge base. a special formalism has been designed in which a service builder both programs functions and describes their actions. the resulting functional descriptions are then translated and interactively classified into consul's knowledge base by consul s acquisition component the acquisition dialogue with the service builder will be shown to be robust with respect to the information provided by the service builder. inference rules are automatically generated to account for discrepancies between a program's specifications and expectations derived from consuls knowledge base.1 
1. introduction 
　the consul system     in this proceedings  is being designed to support natural  helpful  and consistent interactions between users and online services. in order to provide these cooperative facilities  any user interface must have a great deal of knowledge about the functionality of its services. however  unlike attempts at enhancing specific tools  consul is being constructed as a general framework in which a wide variety of services can be embedded. the necessary functional knowledge is carefully organized within a central knowledge base comprising  1  user knowledge  service-independent  user independent knowledge relating basic user needs to user actions  objects  and english language expressions   1  systems knowledge  a serviceindependent representation of the detailed behavior of the basic operations found in any service  e.g.. moving  deleting  scheduling   and  1  service knowledge  an instantiation of the systems knowledge to the actual operations and data structures of some interactive service implemented in consul. 
this research is supported by the defense advanced research protects 
agency under contract no dahc1 c 1. arpa order no 1 views and conclusions contained in this papet are the author s and should not be interpreted as representing the official opinion or policy of darpa. the u s government or any person or agency connected with them 
1 
many of the ideas in this paper were developed m collaboration with robert 
lingard 
　except for service knowledge  all concepts and relations in the knowledge base are built in. because of the complications of formally integrating service-dependent information  consul has a component to acquire this information from the service builder. consul relies on proper classification throughout its knowledge base  the relations between the service-independent concepts are carefully built in; the proper relation between the service and systems knowledge is the responsibility of the acquisition component. it is only through proper classification that a 
　function's intent and behavior can be derived; having that information is the basis of consuls cooperative features. many of consul's interactions with users rely on application of serviceindependent inference rules to map between descriptions in the knowledge base . if the service-dependent information can be organized within the system model framework  those inference rules will automatically apply. the interface consistency that consul provides is also a direct result of acquiring service-specific knowledge in terms of the carefully worked out systems model. 
1. the acquisition process 
　a service in consul is defined solely by its data structures and process scripts. process scripts are programs that consist of two parts: a procedure body to perform some action and some descriptive information about that procedure  its parameters  its output  etc. the simplest process scripts  called process atoms  have a procedure body which consists of only a single call to some application code that is not further described to consul. 
　process scripts are the basis of a software design methodology for buiiding interactive tools . using this method  a tool builder explicitly differentiates between code that is  interesting  to the end user  implemented using the process script language  and code that is not  hidden as the bodies of process atoms . informally  the code implemented via process scripts is the highest level code generated using a top-down or composite system design methodology. the information about the programs of the service being implemented comes solely from the process scripts and the acquisition dialogue with the service builder; it is not deduced by analyzing the code called by process atoms. 
　the acquisition of a service's process scripts occurs in four steps: 
1. translating the process script into a knowledge base structure; 
1. building a potential description of that structure from an initial classification by the service builder; 
1 
1. refining the potential description into a validated description. ie.. one that is consistent with the knowledge base: 
1. building inference rules that relate the actual process script parameters to their roles in the validated description. 
　the goal of the acquisition process is recognition of the input structure in terms of the existing model  or in our terminology. classifying it in the knowledge base. step 1 above requires interaction with the service builder in order to to extract information about the script that is not represented explictly 
　step 1 is necessary because functions commonly name parameters that are not actually manipulated by the function. instead  due to a desire for brevity  simplicity  or information hiding  these parameters act as access paths to the actual data structures to be processed. for example  a person may talk about 
 dialing joe on the phone   instead of the more precise  dialing joe's phone number on the phone.  the casual  simpler statement is understandable if a unique phone number is associated with a person and if that association is known to be applicable in the context of dialing phones. since the validated description shows how the process script parameters are actually used  the necessary inferential knowledge to account for this metonymic style can be explicitly represented. 
1. acquisition requirements 
　the consul approach is predicated on a detailed  coherent knowledge base. given the complexity of the knowledge base  a service builder would find it impossible to update it correctly when adding new process scripts to the system. consul therefore provides a semiautomatic acquisition process to aid the service builder. major requirements of this process are: 
it supports different implementations. consuls model of interactive functions does not impose any implementation decisions on the service builder. on the contrary  the knowledge base will be shown to be 1  sufficiently general to support services whose functions depend on fundamentally different architectures and 1  detailed enough to support cooperative interactions with the end user. 
the service builder need not know all the details of the knowledge base. the service builder uses the process script language to write his programs and an object definition language  still to be designed  to describe his objects. the acquisition process has the responsibility of translating his input into the system's representation  mapping it into consul's knowledge base  and accounting for any inferential relationships discovered during acquisition. 
acquisition must report anomalous conditions to the service builder in a way that will elicit an appropriate response. a number of anomalous situations can arise during acquisition: inconsistency in an object's definition may not be detectable until that object is used in a process script; a new process script may conflict with  specialize  or generalize existing scripts; a process script may be imprecise in its input specifications  as is the case in the scenario to be presented . whatever the situation  the acquisition process must give the service builder the information that not only explicates the problem  but induces a helpful response. 
　consul's acquisition process is intended to be robust  i.e.  to successfully model service-specific information without overly constraining the service builder. the next section shows'that this goal is achievable. 
1. an acquisition scenario 
　the service-dependent concepts in this scenario are modelled after those in the sigma message system . figure 1 shows how the sigma concepts  prefaced by sg  relate to the service independent concepts in the knowledge base1 
　in sigma  messages are kept in a central data base. a user is never sent messages. instead  he gains access to them through citations delivered to his pending file  his personal mailbox. besides having a pointer to the referenced message  the citation also contains addressing information  the subject of the message  and other summary information. because a message can be  sent  or  forwarded  for different reasons  for review  for action  for information  etc.   the citation type is used to identify the nature of the transmission. 
　the slgmaforward process script to be acquired  figure 1  sends a citation of the sgopenmessage -the message currently being worked on by the sgloggedonuser-to a designated user the input to the script is the sgcitationtype and the name of the intended recipient  sguser. since this scenario will be concerned only with the input and datastructuresaccessed descriptors of the process script  only they appear as roles in the translation shown in figure 1. notice that the process script itself has no statement of intent  since intent is derived solely through proper classification within the knowledge base 
　figure 1 shows the service-independent part of the knowledge base relevant to the acquisition of slgmaforward it defines a send operation as a specialization of move: there is a 
consuls knowledge base is implemented in the kl one formalism  

1 sender  the object to be sent is a message'  the destination is a mailbox whose owner is the recipient of the message  the effecf of the send is that the object is at a location which is the destination of the send and that the object being sent is a valid member of the mailbox. 
　the following scenario shows the process of building a description of the sigmaforward script in terms of the modelled send operation. it results in the informal notion of  sending messages to people  being redescribable as an invocation of the sigmaforward function. 
1. the acquisition dialogue 
　the scenario starts as the translation of the process script  figure 1  is presented to the acquirer. 
	acquirer: 	what kind of an operation is this  
 gives the service builder a list of top level system operations to choose from  
service builder: move 
	acquirer: 	what kind of a move is this   gives the 
service builder a list of kinds of move to choose from  
service builder: send 

1 

acquirer:  examines knowledge base  figure 1  to see if a usguser is a kind of mailbox  
the destination of a send has been 
defined to be a mailbox. u:sguser is not known to be a mailbox. is it  
service builder: no 
acquirer: 	can you give me more information 
about the destination of send  
service builder: the destination of send is the sgpendmgfile 
whose owner is the u:sguser.1 
acquirer: 	 examines 	knowledge 	base 	to 	see 	if 
so.pending.file is a kind ofma/1oox; since it is  the destination role is validated  
　if sgpendmgfile were not classified as a mailbox  we could add that relationship as part of this scenario  being aware that the addition of a new relation may have effects beyond the current acquisition session . we expect that many service-dependent relations will be discovered through their use and hence built during process script acquisition. 
acquirer:  because the  recipient  and the  owner  of the mailbox are coreferential1  the usguser is expected to be the recipient  
i assume that u:sguser is the recipient. 
is it 1 
service builder: yes. 
acquirer: 	what is the sender  
service builder: sgloggedon user 
acquirer: 	 sender role validated since sgloggedonuser 
is a kind of user  
what is the objecttobesentf 
service builder: sgopenmessage 
　though the sgopenmessage is a satisfactory filler for the objecttobesent role  its coreferentiality to the object of the member at causes a problem. 
acquirer: 	the effect of your process script is 
that the sgoperuessage will be at the 
sgpendmgfile of the u sguser. i expect 
the sgopenmessage to be 	a valid member of the sgpendmgfile. 
　in order for the member at effect to be satisfied  the location must be a mailbox whose member is the object of the memberat  the problem here is that sgpendingfiles contain sgcitations as members  not sgopenmessages; so  sending an sgopenmessage to it is invalid several things could be wrong: sgopenmessages could be valid members  the service builder simply hasn't told us yet ; the sgpendingfile is not the destination of the send: the sgopenmessage is not the object of the send  the actual case here . the acquirer must frame these possibilities in a question or 
questions that will elicit the right response. 
acquirer: 	is the sgopenmessage a valid member of 
sgpendingfile  
service builder: no 
acquirer: 	can you give me more information 
about the objecttobesent  
service builder; the objecttobesent of the send is a sgcitation whose summarizedobject is the 	sgopen message. 
acquirer: 	 revalidates the objecttobesent role; validates 
the effect role; finds that one of the process script parameters is still unaccounted for  what is ct.sgcitattontype used for  
service builder: the ct.sgcitationtype is the type of the sgcitation. 
acquirer: 	 builds 	the 	correspondence 	between 
ct.sgcitattontype and the the type role of the sgcitation  
slgmaforward validated! 
　at this point the description shown in figure 1 is complete and can be classified in the knowledge base the acquisition process has successfully discovered the intent of the process script via the above dialogue. now it remains to account lor the relationship between the the process script's parameters and roles of the validated description. 

　　the jargon parser  accepts input like this and produces forms from which we generate the appropriate kl-one we are assuming this class of input to be 
sufficient for now. 
shown in figure 1 by the links to the  ♀  structural description 
　　the teiresiaa extension  1  to the mycin  1  rule-based system generates expectations during rule acquisition by comparing the new rule being acquired to existing ones. aa pointed out by davis  because teiresias has no domain model  some of those expectations ara wrong because coincidental correlations could not be separated from reej ones in consul  all expectations are based on characteristics of the built-in systems model 
1. building the inference rules 
　the validated description of the slgmaforward process script shows that there is an implied access path from a sigma user to his pending file  and one from an open message to its citation. because of these relationships  the following statements are logically equivalent  assume that  forward  implies a certain citation type : 
1. forward the open message to jones. 
1. forward the open message to jones' pending file. 
1 

1. forward a citation of the open message to jones. 
1. forward a citation of the open message to jones' pending file. 
　the last statement would instantiate the validated description of figure 1 and is therefore executable. the first  and briefest one  matches the specification required by the process script  but not 
that of the validated description. since statement 1 should cause the same process script to be invoked  inferential knowledge is needed to map it into the validated description. the necessary inference rule  shown in figure 1 shows how a description of a move operation whose object to be sent is a sgopenmessage and whose destination is a sguser can be transformed into the validated description1. similar rules are constructed to account for statements 1 and 1. 
　the inference rules are completely determined by the relation between the parameters as defined in the process script and the roles of the operation as defined by the service-independent model. whenever the correspondence is not direct  inference rules need to be generated. notice that in comparison to the validated description  the condition parts of these inference rules are always less precise  potentially less constrained and may  as in this example  have a more general classification. these factors combine to allow the end user a certain amount of informality in making his requests. however  they may also lead to problems. for example  the generation of a new rule may introduce ambiguities when distinct validated descriptions produce identical rule conditions. this and other issues  such as using rules to represent defaults  giving the service builder some control of the rule generation process  and recognizing and handling cases 
figure 1: the validated description when new rules specialize or generalize existing ones  are currently under study. 
1. conclusions 
　the prototype acquisition component described in this paper just begins to address the requirements specified in section 1. we have  however  shown that acquisition has the capabilities to make the consul approach feasible. the service builder can write his functions in a language suited to his task and have them interactively assimilated into consul's knowledge base. any inferential knowledge needed to account for service-dependent 
conventions is automatically generated. 
what remains to be shown is the robustness of the process. 
even though the scenario showed how the acquirer directs the dialogue  how it detects some anomalous situations  and how it can make certain assumptions  many issues remain. robustness is a critical concern if the acquirer is to interact with real service builders and not consul specialists. 
　the task of building a cooperative user interface is too large and complex to attempt for each new service. one of our goals is to build a framework in which many new services can be embedded. acquisition  as described in this paper  is a fundamental part of that framework. 
   the  structural description indicates how roles in the rule condition corresponds to roles in the rule conclusion in order to simply figure 1. only 
figure 1: an inference rule built at acquisition time one of them is shown. 
1 
