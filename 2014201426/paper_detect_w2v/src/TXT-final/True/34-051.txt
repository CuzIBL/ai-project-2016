 
　　　we report on a method of automated hypothesis generation  called f - r e s o l u t i o n   which is derived from deductive r e s o l u t i o n techniques. the method is inductive in character  in the sense t h a t given input statement e  it generates hypotheses h  such that e is a deductive consequence of e. the method is extended by a genera l i z e d u n i f i c a t i o n algorithm which introduces appropriate i d e n t i t y assumptions needed to unify a p a i r of l i t e r a l s . the f - r e s o l u t i o n technique is shown to embody a version of ockham's raror 
as a pruning h e u r i s t i c . some promising e x p e r i mental r e s u l t s are also presented. 
　　　in   1   we discussed a general method f o r transforrairg deductive consequence generators i n t o inductive consequence generators. in t h i s paper we wish to report on a general mechanised inductive method  to be called f - r e s o l u t i o n   which was derived from normal resolution procedures. the f - r e e o l u t i o n procedure was not designed as a special purpose routine only applicable to certain problems   l i k e the routine described i n   1       but rather i t i s applicable to any problem in any context suitably d e s c r l b able in the syntax of f i r s t - o r d e r predicate c a l culus with i d e n t i t y . the p o t e n t i a l range of a p p l i c a b i l i t y of the method is thus extremely broad. our routine appears to deal with a more general class of hypotheses than previously reported e f f o r t s i n t h i s area; i n p a r t i c u l a r   see        and  
　　　we assume familiarity with the usual terminology and theory of resolution. for any expression e  we represent the set of clauses obtained from the clause form of e by c e . for a set c of clauses  we represent the set of a l l pairwise resolvents of members of c by r c . we then define r1 c  = c and rn+1 c  = r rn c   u rn c . 
　　　for our purposes  we w i l l consider resolution as a consequence generator. as such  resolution ie not complete. that i s   for any expres-
sion e  there are expressions e' such that e 
entails e' but for nc n is it the case that c e'  c rn c e  . for just one type of example  consider the case in which e' contains predicates which do not occur in e  and note that resolution introduces no new predicates. 
　　　the basic f-resolution principle is very similar to the basic resolution principle. the principle appears to be  in essential respects  the same as the basic inverse method of   apparently developed by maslov as early as 1. however  our development was independent of maslov's. work  and our routine is used inductively rather than deductively. ac with the deductive case  before the principle can be applied to a given expression  the expression muet f i r s t be transformed into a certain normal form. for f-resolution  input expressions are f i r s t transformed into prenex disjunctive normal form  using the standard equivalences: 
　　 q1  . . .  cii  e1 v . . . v qa  where the qi are quantifiers  each over a d i f f e r ent variable  and each ei is a conjunction of l i t e r a l s . we must now remove the quantifiers to obtain the quantifier-free disjunctive normal form. to avoid introduction of more complex skolera functions than necessary  we next employ the standard quantifier distribution rules to obtain an equivalent expression such that the scope of each quantifier contains as few cf the ei as possible. we then remove a l l universal quantifiers by replacing them with appropriate skolem functions.  that i s   if a universal quantifier does not occur within the scope of any existential quantifier  we replace the variable of the universal quantifier  wherever it occure in the e i   by a new constant  o-place function . if a universal quantifier occurs within the scope of existential nuantifiers over variables x 1   . . .   xp  then we replace the v a r i able of the universal quantifier wherever it 
occurs in the ei by f x1  . . .   xp   where f is some new p-place function.  we then drop a l l quantifiers. the resulting expression is called the f-clauoe form; a conjunction of l i t e r a l s is called an f-clause. if e is any exprepsion  then we represent the set of f-clauses obtained from e by fc e . note that in the f-clause form  free variablee represent existential q u a n t i f i cation. note alco that if the input is to be several expressions  at  . . .   aq  then we must obtain the f-clauses from their conjunction  a1 & . . . & aq. 
　　　we assume familiarity with the standard terminology regarding substitutions and with the unification algorithm. as usual  if c is a set of expressions and x is a set of substitutions  by cx we mean the set of expressions obtained by performing every substitution in x on every member of c. 
　　　the basic f-resolution principle allows the inference of one f-clause from a given pair of f-clauses. cur f i r s t step is to rename the variables in one of the f-clauses so that the pair has no variables in common. let e1 and e1 be the two resulting f-clauses. let c1 and c1 be the sets of l i t e r a l s occurring in e1 and e1  respectively. further  suppose there are subsets c1' and c1' of c1 and c1: 
1 


1 

       both basic f-resolution and lc strive to reduce the number of atomic facte. 
since neither deals explicitly with equality  
both share the implicit assumption that constants represent distinct entities. times assume that certain terms designate the same object  wo might be able to further reduce the number of atomic facts. for example  in  b.1  if we could assume j = b  then we could arrive at kxj via lc. these considerations led us to develop a slightly different version of the unification algorithm  called equality assumption introduction  eal   which introduces just those equality assumptions which w i l l allow a reduction in the number of basic facts. we w i l l give a brief statement of a version of the eai algorithm suited to the unification of pairs of l i t e r a l s   e1 and k1. we assume e1 and e1 are either both negated or both unnegated and that both employ the same predicate. in the following algorithm  k is just a counter   w i l l correspond to e most general unifier  and eq w i l l be a set of required equality assumptions. we mean the substitution of t for t'; we use to desigthis modified unification algorithm ie just an extension of the usual one. if two clauses are unifiable  then our algorithm returns s most general unifier  in the usual sense  and an empty eq. our algorithm differs from the normal unification plgorithm at those points where the normal algorithm terminates unsuccessfully. the normal algorithm h i l t s with no unifier if   i   the disagreement set contains no variable  or if   i i   one term is contained in the other. in such cases  eai introduces  via the set eq  the explicit assumption that the two terms are eoual and rubatitutes the shortes for the longer. the reason for substituting the shorter for the longer is to guarantee that the substitution process w i l l terminate. 
     if we employ eai  then basic f-resclution and lc must be slightly altered so that the 
1 

resultant f-clauses contain the contents of eq. the f-resolvent is obtained by conjoining the l i t e r a l s in the following set  compare with  *   above : 

for lc  the resultant clause is the conjunction of the members of cλ u eq  instead of just  cλ  in both cases  of course  the λ is the substitution set obtained from eai. 
　　　basic f-resolution and lc when extended by 1ai s t i l l generate only a f i n i t e number of fclauses from any given f i n i t e set. for a f i n i t e set c of f-clauses  we mean by efr c  tne set of a l l f-clauses which result from the application of basic f-resolution and lc  both extended by sai  as usual  we define efr＜ c  = c and efftrrm c  = efrm c  u efr eflp c  . for any set c of f-clauses  by eq c  we mean the set of equality axioms of the language of c. it is then possible to prove the following: 

in other worus  our methods  extended by eal  w i l l generate from the f-clauses of an input expression e1  the f-clauses of expressions e1 such that given the usual equality axioms  ♀1 ie entailed by e1. 
　　　the intuitions embodied in the eai extension are slightly more complex than those embodied in heuristic  h.1  in two ways. first  the extended method proposes a reduction in the number of named entities  providing such a reduction w i l l reduce the number of atomic facts. and secondly  the extended method proposes restrictionf on certain functional values  again providing that such restrictions w i l l reduce the number of atomic facts. 
　　　two rather distinct circumstances for the application of f-resolution may be identified. in the f i r s t case  no background assumptions arc presuppoeori. the input to our procedure is then just the set of f-clauses obtained from the expression of the state of affairs for which we would l i k e an hypothesis. 


to obtain the desired hypothesis  we must t r a r s late back into normal first-order notation  put the question i s   which f-clauses should be included  py theorem 1  we could choose any single f-clause  or any non-empty subnet. various heuristics could be used to make the selection  but we w i l l mention only one here. 
　　　suppose we are after hypotheses which account for a disjunction  say p v q  and suppose we know that s entails p and r entails 1. then we could use s  or we could use r  or we could use the disjunction s v r. one reason for preferring the disjunctive hypothesis is that it is deduct i v e l y weaker than the alternatives; it therefore places fewer reptrictions on the range of possib i l i t i e s and is thus in some intuitive sense more likely to be true. to make this idea a l i t t l e more precise  we introduce a d e f i n i t i o n . we w i l l say that one f-clause a covers another f-clause b just in case either   i   a is identical to 1  or   i i   a results from applying extended lc to some f-clause c  where c covers b  or   i i i   a results from applying extended basic f-resolution to f-clauses c and d  where b is covered by at least one of c and d. we may then formalize our heuristic by saying that in the selection of f-clauses for hypotheses  we should include fclauses sufficient to cover every f-clause in the original input. thus in our example  we should not use just  c.1   or just  c.1   or just  e.1 . in fact  there is no single f-clause which covers a l l of  c.1 - 1 . but we could use  c.1  and  c.1  to obtain: 

each of these hypotheses entails  c.1 . there are various other possibilities as well  but the range of possibilities is substantially smaller than that which we would have to consider if no heuristic were employed. 
　　　the second circumstance in which we might wish to use f-resolution is the more usual one. frequently we wish to obtain an hypotheiss to account for a  given the presupposition b. that 
i s   we want some c ouch that: 
1 

from t h i s example we can see that the input to our f-resolution procedure should be the fclauses in a along with the f-clausos in the negation of our presupposition. if we have more than one presupposition  then we must take the negation of the conjunction of a l l our presup-
positions. our input presuppositions can be any statements at e l l   whether factual or logical. we could for example have the axioms for identity theory as our presuppofiitione. 
　　　for simplicity  let us consider a standard syllogistic example. suppose we would like an 
hypothesis which would entail  all dogs are hairy   given the assumption that  all dogs are 
mammals . 	our assumption may be formalized as: 	experimentally  we can rerort that for any 
syllogism whose v a l i d i t y does not assume exis-
tential import  given the conclusion and one premise  our method with the covering heuristic w i l l yield just the required additional premise. further  for those syllogisms which do require existential import  our method generates the hypothesis that there is something in the appropriate subject class from the input of the desired conclusion and the oremises as assume- tions. 
　　　the most extensive experimental test of our methods has beer made in the ares of non-
standard logics. in particular we have dealt in detail with many systems of modal logic and 
many systems  of relevance logic. the charact e r i s t i c semantics for such systems depends on the determination of certain restrictions to be placed on given semantic relations. using our methods we have been able to generate from a semantic translation of the axioms and inference rules the known semantic requirements for every case investigated-about  1 systems have been examined at this time  see  and   1     . further  in these cases  we can employ a s l i g h t l y modified version of the covering heuristic and prove that the hypotheses gererated by our methods w i l l yield the chcracteristic semantics if any first-order conditions w i l l . these results are particularly pleasing  as our methods 
were designed from a general point of view  with no thought of this application. 
　　　we would like to see more extensive testing of our methods 1n more practical  less formal areas. in any case  it should be borne in minc' that the method carnot be used to gercrate new predicates   i . e .   new  concepts  . the hypotheses generated  re always in terms of the input predicates  with the possible exception of equality. 
　　　we would f i n a l l y like to point out that eai could be used to supplement norrial deductive 
resolution. the resultant clause would ve formed in the usual way along with the disjure-
1 

t i o n of the negations of the equality aesumptione in eq. by employing simple lexical ordering principles in formulating equality statements  no special axioue for equality would be required.  such an application would be similar to the method described in .  it seems i n t u i t i v e l y that eai might substantially speed up proofs involving equality by introducing just the appropriate equality statements needed for obtaining resolvents. however  at this time we have not conducted an experimental examination of eai in the deductive context. 
