 
　　　a simple unification algorithm for infinite trees has been developed. the algorithm is designed to work efficiently under structure sharing imple-
mentations of logic programming languages  e.g.  prolog  warren  . a relation  called  is covered with   between two terms is introduced to terminate the algorithm. the fundamental operations are to compute the frontier set of two given terms and to test the relation between them. a termination proof is shown. 
i introduction 
　　　the objective of this paper is to explain a practical unification algorithm for infinite trees. in colmerauer   he presents implicitly two algorithms  a  theoretical  and a  practical  one. for any given two terms  the theoretical algorithm has to select the smaller one in view of length. although the practical one avoids the test  it is not known to have guaranteed termination. we found a relation which is called  is covered with  and is able to play the same role as the  smaller  relation above. it depends on only the frontier 
 martelli   of the two term given. 	this is a 
main different point from colmerauer . 
　　　to describe our unification model  we w i l l use a set of multi-equations to represent variable binding information. a configuration of the unification process is represented by an ordered pair of a l i s t of equations and a set of multi-equations. we view unification processes as transformations between two configurations. 
     now  we w i l l briefly explain a key point of the algorithm. let's imagine the following situation: a current value of a variable v is a term b  
and v*t is the current equation  where t is a non variable term. with this situation  we f i r s t test 
whether b  is covered with  t. if this is not the case  we change it so that the new value of v w i l l 
be t. 	a l l other points of the algorithm are usual. 
ii basic definitions 
　　　definition. a configuration of unification is an ordered pair of the form  r  m   where r is a 
l i s t of equations of the form term-term  and m is a 
1 k. mukai 

k. mukai 1 

