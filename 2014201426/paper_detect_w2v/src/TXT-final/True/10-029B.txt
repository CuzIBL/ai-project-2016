ng atns 
tim f i n i n and george hadden 
coordinated science laboratory  ence laboratory. 	  u n i v e r s i t y of i l l i n o i s 
	urbana  	i l l i n o i s 1 

       augmented t r a n s i t i o n networks  atns  have become a popular and e f f e c t i v e t o o l f o r c o n s t r u c t i n g n a t u r a l language understanding systems. our own system. planes  waltz 1  is based on a l a r g e  semantic grammar  which is implemented as an atn network. in developing our system  we were f r u s t r a t e d by numerous problems and shortcomings in the basic atn formalism. consequently  we have augmented and extended the model to overcome some of these problems. we have also developed an o p t i m i z i n g compiler f o r atn networks which t r a n s l a t e s them i n t o lisp f u n c t i o n s and an i n t e r a c t i v e program which allows one to e a s i l y extend and modify an atn grammar. 
extensions to thel   atn. model 
　　　some of the extensions are r e l a t i v e l y simple: the i n c l u s i o n of new arc types such as phrase 
 which matches two or more input words  and root  which matches on the root forra s  of the current input word . others have involved re-examining the basic atn mechanism in order to a l l e v i a t e more fundamental problems. 
　　　we have extended our atn system to provide several c o n t r o l p r i m i t i v e s which can be used to dynamically prune the t r e e of decision points on the developing   p a r s e .   one p r i m i t i v e   fail  included both as an arc type and as an arc action  can propagate a f a i l u r e message to any p o i n t on the decision t r e e . other p r i m i t i v e s allow one to save environments  both c o n t r o l and v a r i a b l e b i n d i n g . this allows one to suspend the processing a c t i v a t e d by a s p e c i f i e d push arc or a c t i o n and to continue parsing as if it had f a i l e d . if subsequent attempts to f i n d a darse f a i l   the suspended processing w i l l a u t o m a t i c a l l y be resumed in the same environment. 
　　　even w i t h the a b i l i t y to c o n t r o l backup  we have found that the atn model s t i l l s u f f e r s from a paucitv of c o n t r o l p r i m i t i v e s . evaluating an atn s t a t e is conceptually a simple process in which one evaluates each arc leaving a s t a t e u n t i l one is found which can be taken  leading to a new s t a t e to be evaluated  which does not r e t u r n f a i l u r e . thus the basic c o n t r o l p r i m i t i v e is the if-then-else-if-else... applied to the arcs of a 
　　　s t a t e . we have found it convenient to add the a b i l i t y t o c o n j o i n o r d i s j o i n bundles o f arcs leaving a s t a t e . for example  it is o u i t e common to have a group of arcs leaving a s t a t e in which only one arc can possibly be taken. 
       in the standard atn formalism  there is no easy way to encode the knowledge that if one of these arcs can be followed but e v e n t u a l l y leads to f a i l u r e   then the other arc s  can not possibly be f o l l o w e d . our atn system supports a select construct which w i l l only allow one arc in the bundle to be f o l l o w e d . the select construct has the a d d i t i o n a l benefit of s i g n a l i n g to the reader that the governed arcs are l o c a l l v exclusive p o s s i b i l i t i e s   d i s t i n g u i s h i n g some of the d e t e r m i n i s t i c from the n o n - d e t e r m i n i s t i c aspects of a grammar. 
       in our own work we use long sequences of s i n g l e - a r c s t a t e s to parse s p e c i a l constructions or idiomatic phrases. this a u i c k l y r e s u l t s in a spaghetti l i k e network which i s d i f f i c u l t t o read and understand. to avoid t h i s s i t u a t i o n and to keep together code which l o g i c a l l y belongs together  we have defined an and construct which conjoins a bundle of arcs i n t o a s i n g l e u n i t . the d e s t i n a t i o n of each arc in the bundle  except f o r the l a s t a r c   of course  is j u s t the next arc in the bundle. 
       these extensions to the atn model have been b u i l t i n t o a n e f f i c i e n t i n t e r p r e t e r   w r i t t e n i n maclisp  which uses a simple r e c u r s i v e technique f o r s i m u l a t i n g n o n - d e t e r m i n i s t i c automata. i compiler fox aim. jteimkfe 
　　　another major component of our atn system is an o p t i m i z i n g compiler which t r a n s l a t e s atn networks i n t o compact  e f f i c i e n t lisp code. this lisp code can then be passed through a standard lisp compiler to produce machine language code. 
compilation of the atn networks used in the planes system and several other l a r g e parsing networks has r e s u l t e d in corresponding machine language code which achieves a speed-up f a c t o r of 1 to 1 and a size reduction f a c t o r of up to 1. 
　　　the t r a n s l a t i o n of an atn network i n t o lisp code is s t r a i g h t f o r w a r d process  each s t a t e in the network r e s u l t i n g in a simple lisp f u n c t i o n . our compiler  however  attempts to produce e f f i c i e n t code by applying three sets of o p t i m i z a t i o n  expressed in a simple p a t t e r n matching language  r u l e s at d i f f e r e n t stages of the t r a n s l a t i o n . 
　　　the 	f i r s t 	set 	of 	r u l e s 	defines source-to-source 	transformations 	on atn networks and i n d i v i d u a l atn s t a t e s . 	for example  one 	r u l e w i l l bundle any adjacent word arcs of a s t a t e i n t o 
a s i n g l e select arc if the set of words tested by the arcs are d i s j o i n t . 
       the second set of o p t i m i z a t i o n r u l e s is applied as the atn network is t r a n s l a t e d i n t o lisp code. the domain of these r u l e s is the set of atn a r c s . for example  one r u l e c a r e f u l l y examines the c o n d i t i o n and actions on an arc to determine if they might cause a s i d e - e f f e c t   e . g . set a r e g i s t e r   . if no s i d e - e f f e c t s are p o s s i b l e   then code f o r generating a new r e g i s t e r context need not be i n c l u d e d . 
	the f i n a l set of o p t i m i z a t i o n 	r u l e s 	defines 
lisp source-to-source t r a n s l a t i o n s which r e s u l t in f a s t e r and/or more compact code. this set of r u l e s also includes transformations which can o p t i o n a l l y  open code  the more common b u i l t - i n atn a c t i o n s   e . g . s e t t i n g or accessing a 
r e g i s t e r   . 
network editor have developed a special purpose e d i t o r   
netedi  waltz 1  hadden developed a special purpose1   hadden 1     which knows abo the s t r u c t u r e of atn's and takes advantage of t h e i r redundancies. 
	netedi expects as 	i t s 	main 	input 	a 	l i s t . 
each element of t h i s l i s t corresponds to a new arc in the atn w i t h the f o l l o w i n g exception: if some i n i t i a l segment of the input l i s t would correspond to a set of arcs already in the atn  no new arcs are added f o r these. the input l i s t can be as simple as a l i s t of words which form a sentence or phrase or complex enough to form any possible arc - complete w i t h embedded t e s t s   lisp expressions  and t r a n s i t i o n modes. 
       consider one of the elements of the input l i s t . if it is an atom which begins with a   &   . it represents a push a r c . when netedi sees one or these  it adds r e g i s t e r - s e t t i n g code to the push a r c ; the r e g i s t e r w i l l have the same name as the subnet push-ed t o . any other atom in the input l i s t represents a wrd arc. 
       any arc   i n c l u d i n g wrd and push  can be represented by i n c l u d i n g i t s name as the f i r s t element in a l i s t   preceding the name with a   :   and p u t t i n g the r e s t of the arguments in the l i s t . for example    :cat prep   would form a cat   f o r category  arc which recognizes p r e p o s i t i o n s . so    :cat prep  &np   would produce the code required to recognize p r e p o s i t i o n a l phrases assuming the atn contained a s t a t e c a l l e d  anp  which is the f i r s t s t a t e of a noun phrase recognizer. 
               a b r i e l . r.p. 	and f i n i n   t.w.; 	 the lisp 	e d i t o r   ; 	working 	paper 	1  	advanced automation 	group. 	c.s.l.  	univ. 	of 	1 1 . ; 
r 	1 1 * 	  
 hadden 1  hadden  g.d.;   g.d  netedi: an augmented t r a n s i t i o n network e d i t o r     msee thesis  univ.   of 1 1 . : 1. 
 sussman 1  sussman  g.j. 	and 	mcdermott  	d.v.: 
 from planner planner to conniver - a genetic approach ; p proc  fjcc; 1. 
 walt: z 	1  	waltz  	d.l.  	e t . a l . ; 	 the 	planes 
system: natural language access to a large data base ; c.s l. technical report t-1*; 
1. 
       the work described in t h i s r e p o r t was supported b; by the the o f f i c e of naval research under o f f i c e or naval res c o n t r a c t number n1*l-1-a-1. 

natural language-lo: flnin 1 
