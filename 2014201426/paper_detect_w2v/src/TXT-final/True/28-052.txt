ion and complexity levels 
in intelligent educational systems design 
	ruddy lelouche 	jean-francois morin 
	departement d'informatique  universite laval 	departement d'informatique  universite laval 
quebec g1p1 canada 	quebec g1p1 canada tel.:  1  1  ext. 1 fax:  1  1 tel:  1  1 fax:  1  1 e-mail: lelouche ift .ulaval  ca e-mail: morin ift. ulaval. ca 

abstract 
we are interested in problem-solving domains  like engineering and most  exact science  disciplines. in these domains  the knowledge to be acquired by the student is twofold: the domain knowledge itself  but also and mainly the knowledge necessary to solve problems in that domain. as a result  an educationoriented system in such a domain must encompass three knowledge types: the domain knowledge and the problem-solving knowledge  constituting the knowledge to be acquired and mastered by the student  and the tutoring knowledge  used by the system to facilitate the student's learning process. in this paper  we show how these three knowledge types can be modelled  how they should interact with one another in order to fulfil the system educational purpose  and above all how the abstraction and complexity levels can shed a uniformizing light on the system operation and make it more userfriendly. we thus hope to bring some contribution to the general and important problem of finding a generic architecture to intelligent tutoring systems. 
introduction 
　　besides the complexity of teaching itself  the domains taught vary considerably in complexity  type of interactions  type of evaluation  relationships between theory and practice  etc. this way  teachable domains can be classified according to the type of knowledge to be acquired by the student:  know    know-how   and  know-how-to-be . examples of such knowledge types are respectively: anatomy or a language grammar  the skill to solve a mathematical or medical problem  and the capability to adapt to one's environment or to deal with personal relationships. cost engineering knowledge is of the second type. 
　　moreover  almost all teachable domains vary in complexity  from simple basics to relatively complex problems to solve. thus  a student should learn and master the basics of such a domain before he is taught wider notions. and when a human tutor detects errors or misunderstandings  he usually draws the student's attention on a small subset of the involved knowledge  so that he may correct his errors and/or misunderstandings. such an interaction is focused on either a given set of the domain knowledge or the scope of knowledge involved by a given problem. 
　　problem-solving or know-how domains are the ones in which we are interested here. in such a domain  hereafter called a kh-domain  the knowledge to be acquired by the student is twofold: the domain knowledge itself  but also and mainly the knowledge necessary to solve problems in that domain. as a result  an education-oriented system in such a domain  which we here call a kh-its  must encompass three knowledge types: the domain knowledge and the problemsolving knowledge  constituting the knowledge to be acquired and mastered by the student  and the tutoring knowledge  used by the system to facilitate the student's learning process. 
this paper has a double purpose: 
  we present each of the three types of knowledge involved in a kh-its; 
  for each type of knowledge  we show how abstraction and complexity levels appear and how it is possible to deal with them. 
　　in order to do so  we present in section 1 our domain knowledge modelling and how we exemplify it in the case of cost engineering. next  in section 1  we focus on the advantage of separating the problem-solving knowledge from the domain knowledge in a kh-its  and we present some problem-solving activities in cost engineering as an example. in section 1  we briefly describe some principles of tutoring knowledge modelling in a kh-its. in each of these three sections  we show how to use abstraction and complexity levels  exemplifying the principles in the cost engineering domain. finally  section 1 presents the educational interests of using abstraction and complexity levels when modelling the three types of knowledge involved in a kh-its. 
1 domain knowledge 
　　in order to describe the domain knowledge  we first present its characteristics in a general kh-its  ′ 1 . we then show how we model it in the cost engineering domain  ′ 1   and how such an approach lets us introduce the notions of abstraction and complexity levels  ′ 1 . 
	lelouche & morin 	1 
1 	general 
　　the first type of knowledge involved in every its  the domain knowledge  dk   contains all theoretical and factual aspects of the knowledge to be taught to the student. although its specific structure can be varied  it typically may include concepts  entities  and relations about the domain  brodie & al.  1   object classes and instances  kim & lochovsky  1   possible use restrictions  facts  rules   kowalski  1; clocksin & mellish  1   semantic or associative networks  findler  1; sowa  1   etc. 
　　the main system activities centred on this knowledge type are: 
  theoretical explanations about the various knowledge elements and their relationships in the teaching domain; 
  providing the other modules of the its  i.e. problemsolving and tutoring  with the necessary background of domain knowledge that they need. 
1 	a p p l i c a t i o n to cost engineering 
　　in the particular domain of cost engineering  we chose to represent this type of knowledge with concepts  relations  and a special case of relations modelled as concepts  the factors. the model is presented with more details in  lelouche & morin  1 . 
concepts can be basic entities like: 
  investment: it is an amount on which interest is computed; depending on the context or the type of problem  it may also be called capital  loan  or present value. 
  interest: it is the amount exceeding the initial investment  received by the lender from the borrower at the moment of its repayment. 
  investment duration: it is the total time during which the interest is computed over the investment; this duration is uninterrupted. 
  future value: it is the total amount to be repaid at the term of an investment; it is equal to the total accumulated interest added to the initial investment amount or present value. 
with the notion of compounding  some other concepts can be defined: 
  compounding: if the investment duration is long enough  a partial interest may be periodically added to the principal; that amount itself then produces interest for the remaining of the investment duration; this principle is called interest compounding; when the interest is compounded before the term of the investment  the principal then augments accordingly  and becomes greater than the initial investment. 
  compounding period: it is the time elapsed between two consecutive interest compoundings; unless otherwise specified  the interest is compounded yearly. 
  number of periods: it is the number of interest compoundings during the investment duration. 
  interest rate: it is the amount of interest payable for one period depending on the principal: 

  annuity: amount paid or received periodically  annually unless otherwise specified ; although the periodic amounts may increase or decrease over time  we refer only to uniform  constant  annuities in this paper. 
　　concepts are linked to one another by various types of relations. the relations between concepts can be either usual knowledge-representation relations  like subclass of  element of sort of etc.  or numerical relations represented by formula. such a formula is given above. another one is: 
	 1  
which  given the present value p of an investment over n periods at rate i  computes the corresponding future value f of that investment. 
   a formula such as  1  can be rewritten as: us to separate their definition  rightmost equalities above  a quantitative aspect  from their possible uses in the application domain  leftmost equalities  a qualitative aspect . 
   similarly  the factor  converts a series of identical annual amounts a into an unique present value p: does the reverse process: 

there exist other factors converting gradient and geometrical series of amounts into a present or future value; such factors are also computed as a sum of factors. 
　　although the formula related to these factors essentially involve quantitative aspects  the similarities and differences between them  and the circumstances regulating the use of either one  are of a deeply qualitative ground. if the value of a factor is indeed calculated from two or three numerical parameters  the context in which they are defined depends on whether we have to timewise move an unique amount or a series of amounts  identical or not  or conversely to compute an equivalent annual amount  etc. in fact  this context corresponds to the type of conditions that govern the investment  or investment conditions type  without respect to the amounts and durations involved  and is thus essentially qualitative. 
   this characteristic allows us to qualitatively describe relationships between factors which are basically quantitative: the transitivity 	and inversion 
relations. moreover  this qualitative de-

1 	computer-aided education 

scription  including the notation  leads to a significant improvement of the pedagogical approach used to teach this subject to university students. 

1 	abstraction and complexity levels 
　　as it turns out  every factor introduces an intermediate abstraction level between the concepts implied the equation defining it. for example  in the case of formula  1   or equivalently formula  1  and  1   we have  see figure 1 : 
  at the bottom of the hierarchy  the interest rate and the number of periods  basic concepts  making technicalities explicit ; 
  above them  concepts more fundamentally related to the cost engineering problem being solved  namely the present and future values of the investment at hand; 
  between these two levels  the intermediate one brought by the introduction of the factor 
figure 1 - representation of a factor as a concept. 
　　that intermediate status of the factor  originally just an intermediate variable in calculations  see formulas  1  and  1    makes it appear as a pedagogically oriented concept  which clearly separates 
  the computational  quantitative aspect of the factor definition  i.e. the interest rate and the number of periods 
  from the practical  qualitative aspect of the factor usage in a domain problem  i.e. the present and future values. this follows the theory  lenat & al.  1; malec  1  according to which the use of multiple abstraction levels eases the modelling process and simplifies inferences which may be made on the domain concepts. 
　　most interestingly  our scaffolding approach can be made more general: we may present and use higher-level factors built upon these first ones. indeed   above  we can define factors to express the present and future values of a series of identical amounts  and vice versa   which are a first way to generalize this concept hierarchy. for example  the factor is indeed a sum of factors: 
where the last expression results from computing the geometrical series shown. this example constitutes a proof of  1   but also and mainly shows that the  factor is at a higher level than  note that this refers to a complexity level rather than an abstraction level  since it is due to the way the factor is defined and computed. 
　　in the sequel of the cost engineering course  other abstraction or complexity levels appear when introducing thefactors related to investments made of periodic amounts in arithmetic or geometric progression  and the factors related to various depreciation types. 
1 problem-solving knowledge 
　　in order to describe the problem-solving knowledge  we now present the general characteristics regarding problemsolving knowledge modelling in a kh-its  ′ 1 . as we did in section 1  we then present our model in the cost-engineering domain  ′ 1 . 
1 	general 
　　the second type of knowledge is specific to kh-domains  henceforth to kh-itss. we call it problem-solving knowledge  psk . it contains all inferential processes used to solve a problem resulting from the instantiation of a practical situation based on the domain knowledge  kowalski  1; patel & kinshuk  1 . in other words  in order to be able to solve a problem  the problem-solving knowledge needs a theoretical background  which is found in the domain knowledge. the processes stored in psk may be represented in various ways  using either or all of logic  kowalski  1   procedural networks  brown & burton  1   semantic networks with procedural attachments   augmented  transition networks  production rules  goldstein  1; anderson & reiser  1   etc. 
　　the main system activities centred on this knowledge type are: 
  providing the inferential tools for problem solving; 
  providing the inferential tools for coaching a student in a problem-solving session. 
　　the main advantage of separating the problem-solving knowledge from the domain knowledge is that it emphasizes the distinction between the domain itself and the skills used to solve a practical problem in that domain  thus simplifying the learning process. that knowledge separation into dk and psk is common to all kh-domains; this is why we believe that kh-itss  which are aimed at helping the student to learn how to solve problems  should display the same knowledge separation. 
　　besides  we can use - we believe in a novel way - that separation between dk and psk to define four generic operating modes in a kh-its  based on the type of knowledge involved  dk or psk   and on who  generates  it  the system or the student . 
  in domain-presentation mode  the student asks the system some information about a domain theoretical element  and the system reacts by transferring to the student the required information or knowledge. the knowledge involved in this category is always dk  system-generated. 
  in demonstration mode  the student asks the system to solve a practical problem or to coach him while he solves a problem. in the first case  the problem typically comes from the student himself  whereas in the latter one the problem typically comes from the tutoring sys-
	lelouche & morin 	1 
tern. in either case  the main level of knowledge involved is psk  system-generated. 
  in domain-assessment mode  the system prompts the student to develop a domain element  and the student thus expresses his understanding of that element. if judged necessary  the system may then intervene to correct that understanding. the knowledge involved in this mode is essentially dk  student-generated. 
  finally  in exercising mode  the system prompts the student to solve a practical problem. the student then solves it step by step  showing what he understands of the involved problem-solving knowledge and of the associated domain knowledge. if necessary  the system may decide to intervene in order to help him reach his goal or to correct it. the knowledge involved in this mode is naturally psk  student-generated. 
1 	application to cost engineering 
　　in the particular case of cost engineering  various problem-solving activities can be identified: 
1. identify the given problem data; 
1. identify the expected result; 
1. draw a temporal diagram to represent the relevant events; 
1. apply a formula; 
1. compare amounts located at the same date; 
1. compare amounts located at different dates; 
1. add amounts situated at the same date; 
1. add amounts situated at different dates; 
1. choose a reference date; 
1. move an amount from one date to another; 
1. collapse a series of periodic amounts into one single amount; 
1. explode an amount into a series of periodic amounts; 
1. etc. 
　　as it turns out  many problem-solving tasks may be divided into smaller ones  letting us introduce the notion of complexity levels in these tasks. for example  the comparison of two amounts situated at different dates implies: 
  first  choosing a reference date at which to make the comparison; 
  then  moving either  or both  amount s  from its present date to the reference date; 
  finally  comparing the amounts now both located at the same reference date. 
these subactivities  of types 1  1  and 1 respectively in the sample list above  thus appear to be of a lower complexity level than the initial one  of type 1 . however  it is interesting to note that  although activity 1 turns out to be more complex than activity 1  the latter is part of the former   both are stated using the same abstraction level. 
　　it may also happen that some lower-level activities can only appear as components of a higher-level one. for example  the activity  drawing a temporal diagram   type 1 above  implies the following tasks  which can only be accomplished 
1 	computer-aided education 
as part of that activity  hence their identification from 1a to 1d : 
1a. draw a timeline to encompass all periods implied by the problem data; 
1b. draw arrows representing the amounts involved in the problem data; 
1c. if necessary  split an amount  or each amount in a series  to simplify the computations; 
1d. qualitatively draw as a special arrow the expected result of the computations to be made. 
1 tutoring knowledge 
　　we now briefly present the tutoring knowledge  tk  in order to help the reader to better apprehend the relationships of that knowledge with dk and psk. this third type of knowledge contains all tutoring processes enclosed in the its. it is not directly related to the teaching domain or to problem solving  but helps the student to understand  assimilate  and master the knowledge included in dk and psk  gagne &trudel  1 . 
the main system activities using tk are: 
  ordering and formatting the topics to be presented to the student; 
  monitoring a tutoring session  i.e.  triggering the various tutoring processes according to the system tutoring goal and the student's actions; such monitoring may imply giving explanations  asking questions  changing to another type of interaction  etc.; 
  in a kh-domain  while the student is solving an exercise  monitoring the student's problem-solving activities: understanding and assessing these activities  giving advice to correct or optimize them  giving hints or partly solving the exercise at hand  as required by the student or by the tutoring module   etc.; 
  continuously analysing the student's progress in order to optimize the tutoring process. 
　　the advantage of separating the tutoring knowledge from the knowledge of the domain to be taught has been emphasized long ago  goldstein  1; sleeman & brown  1; clancey  1; wenger  1   and lies in the reusability of tk in various domains. in the case of kh-domains  the domain to be taught clearly encompasses both dk and psk; indeed  the term  domain knowledge  applies to dk if referring to the knowledge type  and to dk + psk if referring to the knowledge to be acquired. therefore  as shown earlier  in a kh-its  knowledge ends up being separated into three categories rather than two. 
　　we believe that the tutoring processes are triggered by tutoring goals which depend on the current educational setting and learning context. in the current state of our research  our assumption is therefore the following: the underlying hierarchy or hierarchies governing the way they interact with one another is not related to these processes per se  but rather to the goal to be attained when they are invoked. if that assumption turns out to hold  then the dynamic structure of educational goals and subgoals - which itself depends on the student's desires or abilities  the main underlying objective of 

the tutoring system  the student's state  e.g. of tiredness  etc.  and performance  etc. - will determine the succession of tutoring processes activated and tutoring interactions taking place. to our knowledge  the use of abstraction levels to induce a dynamic hierarchy of tutoring goals is new  as is the assumption that such a hierarchy will play a major role in activating the various tutoring processes and student-system interactions. 
1 educational interests of the abstraction and complexity levels 
　　in the above sections  we have described a complexityand abstraction-level approach to help model the three types of knowledge involved in a kh-its. in this section  we present the educational interests of our model. sections 1 to 1 focus on the type of knowledge respectively presented in sections 1 to 1. section 1 summarizes that discussion with some overall pedagogical interests of our approach. 
1 	domain modelling 
　　the factor hierarchy described in section 1 lets us derive an order for the presentation of factors to the student  from the lowest  simplest  level up to the highest  i.e. with increasing understanding complexity. that does not imply that such an order is unique  or even the best  e.g. a student's personal interests might make another order more motivating for him   but it is justified by our model. this presentation order may itself induce a possible order for prerequisites; e.g.  if a student experiments difficulties to deal with  has he well mastered a conceptually simpler factor  
   moreover  the intermediate abstraction levels will permit our its to exhibit a sharper error modelling. for example  the source of an understanding error concerning either relation in equation  1  or  1  is much easier to identify using the corresponding factor  either as a definition error or as a usage error  than an error concerning the global equation  1   where the definition and application relationships are not made explicit  and are therefore impossible to distinguish. similarly  table 1 - characteristics of the four typical functioning modes of an error using a factor may be diagnosed as resulting from an insufficient mastery of the simpler factor as concept  which in turn will be diagnosed as related either to the definition  or to the usage of that concept . 
　　finally  in a first development stage  this modularity will ease our defining the exercise types to be implemented into the its  and will ease the tutor module task of choosing the exercise type to challenge the student with. later  once the basic system is operational  that modularity will help us develop an automatic exercise generator dealing with the domain elements to be mastered by the student. that approach will then help the student to acquire a better critical mind about the relative importance of know-how knowledge vs. domain knowledge. 
1 	problem-solving modelling 
　　the problem-solving activities briefly presented in section 1 naturally display abstraction and complexity levels. indeed  a standard cost engineering problem can be divided  possibly in more than one way  into major steps  which can then be split into simpler substeps. such  relatively complex  cost engineering activities shown in section 1 were activity 1  draw a temporal diagram  and activity 1  compare amounts situated at different times . using activities 1 and 1 as examples  we also made a distinction between the complexity level  based on the execution process  and the abstraction level  based on expressiveness or scope. 
　　such abstraction and complexity levels will let us introduce multiple levels of explanations  which will ease their tailoring  vary the answers to the student's questions  and adapt to the theoretical and practical reminders needed by the student. 
　　moreover  such an approach will lead the student to focus specifically on the activities for which he needs more tutoring  with the abstraction and complexity levels appropriate to his individual case. 
　　that tutoring may take the form of explanations  guidance  hinting  even partially solving the exercise on which the student is currently working. 
its based on a problem-solving domain. 

functioning mode domain-presentation mode demonstration mode domain-assessment mode exercising mode main type of knowledge involved domain knowledge problem-solving knowledge domain knowledge problem-solving knowledge student's main goal to learn to assess his learning direction of the knowledge transfer 	system 	student 	student 	system typical interaction trigger  start  the student as 
some information about a domain theoretical element s the system... 
to solve a practical 
problem or to coach him while he solves a problem the system prom 
to develop a domain element pts the student... 
to solve a practical problem knowledge exchange the system 
the requested element presents... 
a possible solution to the requested problem the student prese 
the requested element nts his view of... 
 a possible solution to the given problem | result  closure  the student expresses his understanding... 
	of the element 	i of the problem solution the system assesses the student's answers  and possibly corrects them lelouche & morin 	1 

1 tutoring modelling 	bibliographic 