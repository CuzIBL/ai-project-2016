 
in this paper  we show decidability of a rather expressive fragment of the situation calculus. we allow second order quantification over finite and infinite sets of situations. we do not impose a domain closure assumption on actions; therefore  infinite and even uncountable domains are allowed. the decision procedure is 
based on automata accepting infinite trees. 
1 	introduction 
during the last decade  several action formalisms have been developed:  reiter  1  gelfond and lifschitz  1  sandcwall  1  miller and shanahan  1   to mention a few. the ultimate goal of developing these formalisms is to perform reasoning about actions  which generally amounts to computing answers to queries. more precisely  given action description theory t and 
query   we are interested whether is a logical con sequence of t. obviously  for some theories  in expressive languages  logical consequence and thus query answering - will not be deeidable. it is important to establish under what restrictions on the language one can obtain an answer for an arbitrary query. wre solve this question positively for a rather expressive fragment of the situation calculus1. this language is second order  with quantification over finite and infinite sets of situations. the domain closure axiom for actions is not assumed  therefore infinite and even uncountable action domains are allowed. 
　similar work has been done for the action language a proposed in  gelfond and lifschitz  1   liberatore  liberatore  1  studied the complexity of deciding whether a set of statements in this language is consistent  and specified which restrictions of a lead to tractability and which do not. the author describes a reduction from propositional satisfiability to consistency in a thus showing nincompleteness of the problem. it follows that the entailment problem for the language a is co-np-eomplete. since the language of the situation 
     1  we use the dialect of the situation calculus developed by the members of the cognitive robotics group in toronto. calculus is more expressive  we allow second order quantification   the reduction from propositional satisfiability cannot be applied. 
　　here  we reduce the problem of decidability of the basic action theory   cf.  pirri and reiter  1   to the emptiness problem for a tree automaton. the emptiness problem is to determine whether the language accepted by a tree automaton is empty. from our construction it follows that if the accepted language is empty  then is unsatisfiable which is equivalent to the fact that is logically implied by  since the emptiness problem for tree automata is deeidable  the problem  is deeidable as well. 
　　in the following section  we specify the language of the situation calculus. section 1 describes the basic action theory  section 1 surveys basic definitions of automata theory on infinite trees. then  in section 1  we construct a tree automaton corresponding to the basic action theory  section 1 is devoted to the main step in the proof of decidability - translating an arbitrary formula in the language of the situation calculus to a tree automaton. finally  in section 1  we discuss the implications of this work and outline directions for future research. 
1 	the language 
we consider a two-sorted version  of the language of the situation calculus with equality and with sorts for actions and situations. the primitive non-logical symbols of sort actions consist of variables    and constants . . . the primitive non-logical symbols of sort situations consist of variables . . .   constant  binary function do where is an action  s is a situation. this function defines a successor situation in terms of a current situation and a performed action. finitely many unary predicate symbols 
called fluents represent properties of the world and have situations as their arguments. we allow quantification over finite and infinite sets of situations  i.e.  over unary predicate variables. sometimes it is convenient to view a situation as a string of performed actions. we shall use binary relation  to represent the prefix relation on the corresponding strings of actions. below  in section 1  it will be seen that    is second order definable in terms 
1 

of function and hence is inessential. the logical symbols of the language are other logical 
connectives and the universal quantifier are the usual abbreviations. note that we do not include the predicate poss  of.  pirri and reiter  1  . including it is unproblernatic  but would complicate the exposition. 
it is convenient to introduce the following shorthands. 

these sentences introduce notations for least and greatest fixed points respectively. in these sentences  is any formula in the language  with no free variables other than x and s. the following examples demonstrate the expressive power of this language. property  there is a path in the tree of situations where fluent f holds in infinitely many situations  is express-
occurrence of a situation where fluent f1 holds  is eventually followed by a situation where  holds . property  there is a path in the tree of situations where fluent f holds in every situation  is represented by 
1 	basic action theories 
a basic action theory is a set of axioms 

where is the set of foundational axioms for situations  is the set of successor state axioms  one for each fluent  u n a is the set of unique name axioms for actions  and ds1 is the description of the initial situation. 
   first we consider the foundational axioms for the situation c a l c u l u s   t h e unique name axioms for situations are 
	 i  the induction principle for situations is 

these axjoms guarantee that situations compose an in-
 finitely branching tree. indeed  it can be shown that the class of tree-like structures is completely characterized by the induction principle on situations and unique name assumptions for situations  ternovskaia  1 . the properties of the prefix relation are as follows. 
we use it for easier formalizations. the foundational axioms for situations  
  r e s p e c t i v e l y   d e n o t e s a first 
order formula specifying the conditions under which fluent f is true  respectively  false  in the successor situation  reiter  1 . the only free variables of these formulae are those among   function symbol do does not occur in these formulae. 
　　the unique name axioms   specify that any two actions with different names are not equal. the description of the initial situation    is a set of first order sentences that are uniform in i.e.  contain no situation term other than we shall call  the ini-
tial database. for simplicity  we assume that the initial 
database is first order and does not contain sentences mentioning no situation term at all. we do not require completeness of 
1 	tree automata 
let  be a finite set. later  in sections 
1 and 1  we shall associate the elements of this set with actions. an unlabeled k-ary tree is specified by its set of nodes; each node is a string in  the empty string 
 corresponds to the root of the tree. if  is a node  then  is the i-th son of  notice that this set of strings is prefix-closed  and each string uniquely determines a node in the tree. suppose a finite alphabet  of labels is given. a k-ary labeled tree t is specified by its set of nodes  the  domain  dorn t  and a valuation of the nodes  the  labeling function  : doin t  by we denote the set of infinite labeled trees with domain a subset t of  will be called a tree language. an example of a tree language is the language 

1 	automated reasoning 

from 
 defined in section 1. this language is determined by the basic action theory another example of a tree language is the language associated with an arbitrary formula  in the language we define  in section 1. 

both languages  and are sets of trees of situations labeled with tuples of fluent values. 
　let us review definitions from the general theory of automata on infinite a:-ary trees. a biichi tree automaton a over alphabet where 
the transition relation specifies which tuples of states of a can be assumed at the sons of a node  given the node's label in  and the state of the automaton assumed there. a run of a on a tree 
 i s a map  with 	and 
 in other words  a run is a labeling of the nodes of the tree  with the states of the automaton a that obeys the transition function. let be the proper prefix relation over a path through is a maximal subset of dom linearly ordered by is a path through  then denotes the restriction of the function  to the set be the set of infinite strings over the set of states for an-sequence from   the 'infinity set  of there exist infinitely many n such that the run r is successful if on each path some final state occurs infinitely often  i.e.  for all paths 
	arabin tret 	automaton 	over 	has the form a = 

figure 1: a graphical representation of a biichi tree automaton accepting the tree from figure 1. 
　a tree t  is accepted by a biichi  respectively rabin tree automaton a  if some run of a is successful in the corresponding sense. a set  is biichi recog-
nizable  respectively rabin recognizable  if it consists of the trees accepted by a biichi  respectively rabin tree automaton. since any biichi tree automaton may be regarded as a rabin tree automaton  set any biichi recognizable set of infinite trees is rabin recognizable. both biichi and rabin tree automata are closed under union  intersection and projection. the famous rabin complementation theorem holds for rabin tree automata  but fails for biichi tree automata. more information about tree automata can be found in the excellent survey  thomas  1 . 
example 1 consider the infinite labeled tree represented in figure i. this tree has the following property. the label of the root is 1. the son waq of every node is always labeled with 1. if the label of a current node is 1  1  respectively   then the label of the node is 1   1   respectively . a deterministic tree automaton accepting this tree is represented in figure 1. the initial state is  and the accepting state is . notice that we could rename state  of the automaton as 1 and state q-1 as 1. the input label then would always coincide with the current state of the automaton. an automaton having this property is called input-free. the automata from section 1 are input-free. this is not the case  however  for automata considered in section 1. 
1 	translating v to a tree automaton 
 in the remaining part of the paper  we shall consider the trees of situations. the set of nodes  the domain  of such a tree is the set. of strings of actions. the empty string  corresponds to the initial situation  if w is a string representing situation s  then string w ai   where ai is an action  represents do  let the language include fluents  then the alphabet  of labels is the set of all tuples of length  over alphabet position of the tuple corresponds to the -th fluent  1 the labeling function maps each node of the tree  a situation  to an element of 
   in this section  we demonstrate a connection between the structures of the basic action theory  and the trees accepted by a biichi tree automaton. the main difficulty in proving such a connection is that the universe of actions may be infinite  or even uncountable. to approach this problem  we first introduce a structure of such that if is satisfiable then this structure is a model of 
let 	be the set of all constants of 
sort action in the language be a structure with the universe of actions 
the universe of situations     is constructed by applying function do starting from the initial situation. the basic action theory is satisfiable if and only if 
	given 	we consider infinite 
　　　-ary trees where the domain  i.e.  the set of nodes  is the set of strings over 
let 	be the 	fold cartesian product of 
     every tuple of sets of situations yields a tree that labels each node with tuple   where cy i is the characteristic function of v. notice that each fluent f can be seen as the set of situations where it is true. thus  of fluents yields a -ary tree labeled with the elements of . notice 
further that the characteristic function   of f specifies whether fluent f holds in the situation represented by string  the characteristic function for each fluent is determined by successor state axioms   and by the 
1 

initial database  with every set of axioms we shall associate a biichi tree automaton ap that accepts a tree language  this automaton depends on the description of the initial situation  and the choice of successor state axioms 
theorem 1 let  be the model of  defined above. 
with every set of axioms one can effectively associate tree biichi automaton labeled with the elements of such that 

proof we shall construct a biichi tree automaton ap that accepts trees labeled with tuples for each node the set of states of . is the set of all possible -tuples over 
   first  we define the set of initial states note that we have restricted  to be a collection of ground formulae. find the set of satisfying truth assignments for  or determine that no such assignment exists. in 
the latter case  is unsatisfiable  and  is an automaton without final states. this means that the set of trees it accepts is empty. the set of truth assignments corresponds to the set of tuples  of characteristic functions specifying which fluents hold in the initial situation. each such tuple is an element of 
second  we define the transition relation   
 this relation specifies what tuples of automaton states may be assumed at the  sons of the node  i.e.  what states  tuples of fluent values  are reached by performing each action . a transition exists if and only if the state of the automaton is the same as the label of the current node. it is easy to see that the set of all truth assignments satisfying successor state axioms determines the transition relation. the eomputability of this set of truth assignments is guaranteed by the definition of  and the form of if this set does not exist we  again  construct so that it accepts the empty language. 
example 1 suppose  includes two successor state axioms: 

 the transition function is determined by the truth assignments that satisfy the successor state axioms. for example  suppose  is false and is true in a situation. this corresponds to the label of the tree of situations and to a state of the automaton with the same name.  recall that all automata considered in this section are input-free.  now we have to specify which tuples of states may be assumed at the four sons of this node. suppose is performed. according to the successor state axioms  will be true and will be false in the successor situation. this corresponds to state of the automaton. we map all actions different from aq to the action  thus  whenever we consider the transition from node to node . this transition leads to state  1  if and to state 
1 	automated reasoning 
 otherwise. 	for actions the construction is similar. a tree automaton corresponding to these successor state axioms is represented in figure 1. 

figure 1: a biichi tree automaton where the transition function is determined by the successor state axioms from example 1. 
　　now we continue defining  the set f of final states of this automaton coincides with the set of all states  we impose biichi acceptance condition: a tree over accepted by  if there is a run such that in all possible paths some final state occurs infinitely often. we claim that i f a n d o n l y i f accepts 
　　suppose then ary trees of situations; specifies the set of initial states of  and is satisfied by the truth assignment which determines the transition relation  of the automaton. the number of states of  is finite. therefore the only way to obtain infinite computations is by looping. since all states of  are accepting  all paths starting at one of the initial states contain at least one accepting state infinitely often. therefore accepts trees labeled with tuples for each node  the set of 
these trees is 
	suppose 	accepts all trees from 
these 	ary trees satisfy the foundational axioms 
	the label 	of each node  deter-
mines fluent values in the corresponding situation. the transition relation for  is represented by a set of tuples which determines the set of satisfying truth assignments for the set of initial states of  specifies the initial 
. therefore   is satisfiable  and it follows 
that 	
1 	translating  to a tree automaton and decidability of 
with every formula  in the language  we shall associate a rabin tree automaton  this automaton accepts labeled ary trees determined by the formula  if and only if   where  is a structure constructed as in the previous section. notice that it is sufficient to 

consider structures of this form - we are interested in satisfying  and  simultaneously. for easier exposition  we restrict to the case where are the only actions occurring in  the proof generalizes easily for the case with any number of actions. 
　　let 	be a formula in the language of the situation calculus 	with 	fluents 	where and 	is the total number of fluents. 

proof in the proof of this theorem we use techniques similar to those used in the proof of rabin's result about the decidability of s1s  the second order monadic logic of two successors. 

carry out the following steps  starting with a given formula  in the language 
　 i  eliminate superpositions of  do  by introducing additional variables of sort situations. for example  

　 ii  eliminate universal and existential quantification over actions by using conjunctions and disjunctions  re-
spectively. for example  	becomes 
　 iii  eliminate occurrences of action symbols other than as arguments of function do. for example  

　 iv  eliminate the symbol so by using the property that no situation is a proper prefix of so. for example  

we arrive at a formula with atomic formulae of the form and f s  only. 
for the remaining step we use the shorthands 

 there is exactly one proper subset of f . 
　 v  eliminate variables ranging over situations and function do a s  by using relations sing and succ. for example  
we obtain a formula equivalent over tree-like structures to the given formula in the following sense: 
if 	is the structure with the domain of actions 
as defined in the previous section  and 
if 
then 
　　for each formula ' in the language with binary predicates 	one can effectively construct a tree automaton satisfying the conditions of the claim. we show this by induction over 
for atomic formulae the construction is easy. 
     in other words  a  accepts if and only if there is a situation s such that f holds in s  f' holds in do and these fluents do not hold anywhere else. in the case if there are more than two fluents  the construction is essentially the same except for each additional fluent  say  we replace each transition with two transitions  one with 1 on the i-s position  one with 1. the induction step for  follows from the fact that  nondeterministic  tree automata are closed under union  projection and complementation. 
　recall that theory in language is decidable if and only if there is an algorithm to determine whether any given sentence is a logical consequence of 
1 

theorem 1 the basic action theory m language is decidable. 
pivof we shall use the fact that  if and only if is unsatisfiable. from the construction of ap and 
it follows that 

every biichi tree automaton is also a rabin tree automaton. rabin tree automata are closed under complementation and intersection. the emptiness problem for rabin tree automata is decidable. it follows that there is an algorithm to determine for an arbitrary in  i.e.  theory  in l a n g u a g e i s decidable. 
1 	conclusions 
we have proven the decidability of the basic action theory in the second order language of the situation calculus. this language allows one to reason about quite sophisticated properties of the trees of situations  such as  for example   there is a path in the tree of situations where fluent f holds in infinitely many situations  or  every occurrence of a situation where fluent f  holds  is eventually followed by a situation where fluent fo holds . reasoning about such properties is especially important when one has to address the verification of high-level programs for robotics. 
　of course  expressiveness never comes for free. the decision procedure described in this paper is nonelementary. each level of negation in the given formula  requires a corresponding complementation of a rabin automaton and hence an at least exponential blow-up in the size of the query. a nice improvement of our result would be a decision procedure of elementary time complexity  i.e.  of time complexity bounded by the composition of a fixed number of exponential functions   or a proof that no such procedure exists. this direction of research is interesting because in practice queries tend to be relatively small. 
   our decision procedure can be easily generalized for the case of concurrent actions. each transition to a son of a node would be performed if a corresponding group of concurrent actions is executed. it is also straightforward to incorporate actions with non-deterministic effects. this would amount to redefining the automaton  from section 1 as non-deterministic. introducing in-
direct effects is a more complicated problem. extending our decision procedure to handle ramifications would be an interesting exercise. 
   for many practical problems we need to study the entailment of restricted classes of queries. such queries might be  for example  those expressible using fixed point operators  and  or those where set quantifiers refer to chains in trees of situations  i.e.  sets of situations linearly ordered by the prefix relation  oi to paths of situations  i.e.  maximal chains . developing decision procedures for these subproblems would be useful. the impact of incorporating more information about the theory on the complexity of the decision procedure is also 
1 	automated reasoning 
of interest. another intriguing direction of research is to further investigate the boundary between decidable and undecidable fragments of the situation calculus. 
　in our proofs  we have used automata on infinite trees. to our knowledge  this is the first time that automata theory has been applied to the problems of reasoning about actions. we consider automata-theoretic techniques useful for the following reasons. first  automata bear an obvious relation to action theories. transition 
diagrams for tree automata are closely connected to successor states axioms specifying the effects of actions. second  automata-theoretic techniques provide the only known methods of obtaining elementary time decision procedures for some very expressive logics. therefore  they bear great potential for automating reasoning. 
acknowledgments 
thanks to ray reiter and to the anonymous referees for helpful comments. 
