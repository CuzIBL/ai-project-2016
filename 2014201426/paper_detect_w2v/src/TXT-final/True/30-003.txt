 
problem-solving methods provide reusable architectures and components for implementing the reasoning part of knowledge-based systems. the unified problem-solving method development language  upml  has been developed to describe and implement such architectures and components and to facilitate their semiautomatic reuse and adaptation. in a nutshell  upml is a framework for developing knowledge-intensive reasoning systems based on libraries of generic problem-solving components. the paper describes the components  architectural constraints  development guidelines  and tools provided by upml. our focus is hereby on the meta ontology that has been developed to formalize the architectural structure and elements of upml. 
1 introduction 
problem-solving methods  psms  for knowledge-based systems  kbss   cf.  schreiber et al.  1 ;  benjamins & fensel  1   decompose the reasoning task of a kbs in a number of subtasks and inference actions that are connected by knowledge roles. several problem solving method libraries are now available  breuker & van de velde  1    motta & zdrahal  1 . the ibrow project  benjamins et al.  1  has been set up with the aim of enabling semiautomatic reuse of psms. this reuse is provided by integrating psm libraries in an internet-based environment. a software broker selects and combines psms from different libraries and provides a knowledge engineer with semiautomated support for configuring a reasoning system. hence  a description language for these reasoning components  i.e.  psms  must provide humanunderstandable  high-level descriptions  which should also be grounded on a formal representation  to allow automated support by the broker. to this purpose we have developed the unified problem-solving method development language  upml  fensel et al.  1b . upml is a software architecture for knowledge-based systems providing components  adapters and a configuration  called architectural constraints  of how the components should be connected using the adapters. finally design guidelines 
1 automated 	reasoning 
specify how to develop a system constructed from the components and connectors that satisfies the architectural constraints. 
　　in knowledge engineering terms upml provides a meta-ontology for describing knowledge-based systems. the different elements of a specification correspond to concepts of this ontology and the architectural constraints are axioms in this ontology. 
　　in this paper we outline the main features of the approach we have taken to define a framework for knowledge sharing and reuse. in particular we illustrate the basic meta-ontology of upml  its underlying architecture  support tools and development guidelines. because of space constraints we can only provide a limited number of technical details. hence  the paper is better seen as an overview report on the main issues we are facing and the solutions we are developing. 
　　the paper is organized as follows. in section 1  we will briefly sketch the overall structure of upml. then we will discuss the  meta- ontology that can be used to formalize upml. section 1 introduces the architectural constraints of upml and section 1 shows various ways in which tools for developing  selecting  and combining psms can make use of the  meta- ontology. section 1 briefly mentions the development guidelines of upml. conclusions  related work and outlook are discussed in section 1. 
1 the overall structure of upml 
 fensel et al.  1a  introduce the four components types of a upml specification: 
  tasks define the problems that should be solved by the kbs. 
  psms define the reasoning process of a kbs in domain-independent terms. 
  domain models describe the domain knowledge of the kbs. 
  ontologies provide the terminology used in tasks  psms and domain definitions. 
each of these elements is described independently to enable the reuse of task descriptions in different domains  the reuse of psms across different tasks and domain  and the reuse of domain knowledge for different tasks and psms. therefore  


fig 1. the overall structure of a upml specification. 

adapters are required to adjust the  reusable  parts to each other and to the specific application problem. upml provides two types of adapters: bridges and refiners. 
  bridges explicitly model the relationships between two distinct parts of an architecture  e.g. between domain and task or task and psm. 
  refiners can be used to express the stepwise specialization of a class of elements of a specification  e.g. a task is refined or a psm is refined. 
very generic psms and tasks can be refined to more specific ones by applying a sequence of refiners  cf.  fensel  1  . again  separating generic and specific parts of a reasoning process maximizes reusability. 
together  the six upml building blocks define a software architecture. the overall structure of a upml specification is presented in figure 1  a more detailed discussion of the example can be found in  fensel et al.  1b  . a task called  complete and parsimonious diagnoses  is defined by importing an ontology called  diagnosis . the psm applied to solve the task is  hill climbing . a bridge is required to connect the generic terminology of hill climbing with the diagnostic task: states and states transitions of the method have to be rephrased in terms of the task ontology. hill climbing is only one possible refinement of a generic search method that decomposes an entire search task into five more elementary subtasks: initialize  derive successor nodes  select node  stop and update nodes. hill climbing can be derived from this generic search method by  i  refining one of its subtasks  i.e.  update node forgets all earlier nodes and only processes the currently derived successors further  and  ii  introducing a preference ordering. 
psm-mediated task decomposition and psm specialization through a refiner are analogous to the part-of and to-a constructs of knowledge representation formalisms. subtasking corresponds to the part-of construct because it decomposes a task into subtasks. the refinement of problem-solving methods  as introduced in  fensel  1   corresponds to the is-a relationship of knowledge representation formalisms - e.g.  hill-climbing is a specialization of a general search method by refining some of its attributes  i.e.  subtasks . 
1 the meta ontology of upml 
we used protege-ii  puerta et al.  1  to develop a meta ontology of upml. protege-ii is a knowledge acquisition tool-generator. after defining an ontology it semiautomatically generates a graphical interface for collecting the knowledge that is described by the ontology. the ontology can be described in terms of classes and 
fensel  benjamins  motta  and wielinga 	1 

root 
competence 
competence cpsm 
competence task 
competence ppsm 
cost expression 
formula 
mcl-prograra 
operational description pragmatics renaming 
role 
input/output role 
input role output role 
intermediate role 
knowledge role 
signature 
specification units 
bridge 
psm-domain bridge psm-task bridge 
task-domain bridge 
domain model 
domain refiner 
ontology 
ontology refiner 
psm 
complex psm primitive psm 
psm refiner 
complex psm ref. primitive psm ref. 
task 
task refiner 
upml specification 
fig 1. the class hierarchy of the upml meta ontology. 
attributes and organized with an is-a hierarchy and attribute inheritance. viewing upml as an ontology and structuring this ontology with the help of protege-ii  helped us to realize some missing elements in sub-specifications and we obtained a much clearer view of the overall structure of upml. it turned out that the two adapter types  refiners and bridges are rather different entities in the ontology. refiners are a subconcept of the specification element they refine  while bridges are a class by themselves. figure 1 provides the class hierarchy of the upml meta ontology. the organizational principle of the class hierarchy was to minimize the definitions of attributes  i.e. to maximize attribute inheritance. the definitions of the attributes of the class task and task competence are provided in figure 1. 
this ontology has been used to formulate architectural constraints  and to develop tools like editors  browsing  querying and reasoning services for upml. 
1. architectural constraints 
architectural constraints ensure well-defined components and composed systems. the conceptual model of upml decomposes the overall specification and verification tasks 
1 automated 	reasoning 
into subtasks of smaller grainsize and clearer focus. the architectural constraints of upml consist of requirements that are imposed on the intra- and interrelationships of the different parts of the architecture. they either ensure a valid part  for example  a task or a problem-solving method  by restricting possible relationships between its subspecifications or they ensure a valid composition of different elements of the architecture  for example  constraints on connecting a problem-solving method with a task . these architectural constraints can be formulated as axioms of the upml meta ontology. 
　　for example  we require the consistency of a task specification  i.e. 
t1 ontology axioms preconditions  assumptions must have a model. 
　　otherwise we would define an inconsistent task specification which would never be solved. in addition  it must hold: 

　　that is  if the ontology axioms  preconditions  and assumptions are fulfilled by a domain and the provided case data then the goal of a task must be achievable. this constraint ensures that the task model makes the underlying assumption of a task explicit. for example  when defining a global optimum as a goal of a task it must be ensured that a preference relation exists and that this relation has certain properties. for example that   i.e.  reflexivity  is prohibited because otherwise the existence of a global optimum cannot be guaranteed. 
these are the two architectural constraints upml imposes to guarantee well-defined task specifications. a third optional constraint ensures minimality of assumptions and preconditions  called weakest preconditions in software engineering  and therefore maximizes the reusability of the task specification. it prevents overspecialization of assumptions and preconditions  i.e.  it ensures that a task is not applied to an unsuitable domain . 
ontology axioms preconditions assumptions  
similar constraints have been developed for the other components. correct relationships between components are formalized as axioms concerning the relevant bridges. for 
task  pragmatics 	pragmatics ontologies 	ontology import 	task competence 	competence task  
competence task  goal formula precondition formula roles input/output fcole assumptions formula  
fig 1. the attributes of the upml meta ontology. 

remaing psm preconditions psm assumptions psm'postconditions  task ontology task precoditions task assumptions bridge ontology mappingaxioms bridgeassumptions 
 task goaf 
ensures that the goal of the task is fulfilled by the postcondition of the selected method. further axioms can be found in  fensel et al.  1b . 
1. tool support 
we used protege-ii to implement an editor for upml specifications. first protege-ii helps to define an ontology  in our case the meta ontology of upml . in a second step it automatically derives an editor from it that requires some human interaction to derive a suitable tool from it 
　　the output of the upml editor delivers files of the ontology and upml specifications in a lisp-like syntax. we implemented a tool that translates these files into frame logic  kifer et al.  1 . the reason for this is to be able to use on1brokerl as a browsing and query interface for upml specifications. on1broker  cf.  fensel et al.  1   is an advanced tool for browsing and querying www information sources. it provides a hyperbolic browsing and querying interface for formulating queries  an inference engine used to derive answers  and a webcrawler used to collect the required knowledge from the web. figure 1 provides the hyperbolic presentation of the upml meta ontology: classes in the center are depicted with a large circle  whereas classes at the border of the surrounding circle are only marked with a small circle. the visualization technique allows a quick navigation to classes far away from the center as well as a closer examination of classes and their vicinity. the structure of the frame-based representation language is used to define a tabular querying interface that frees users from typing logical formulas  see figure 1 . when a user selects a class from the hyperbolic ontology view  the class name appears in the class field of the tabular query interface and the user can select one of the attributes from the attribute choice menu because the preselected class determines the possible attributes. the discussed tool set is implemented in java and available via the www. 
however  typical upml queries may be more complex. for example  figure 1 shows parts of an on1broker s answer.to a complex query which asks for all attribute values of a task specification. such queries are closer to short logical programs than to typical database queries. to ameliorate this problem we have used the upml meta-ontology to define generic query patterns such as the one shown in figure 1 which are instantiated for specific queries. 
moreover  because the quety interface is implemented as a java remote method invocation  rmi  server. 
1. development guidelines 
design guidelines define a process model for building complex kbss out of elementary components/in general  the guidelines of upml fall into three categories  cf.  fensel et al.  1b  : 
  how to develop an application system out of reusable components. guidelines describe the sequence and interrelationships 	of 	component 	selection 	and adaptation in developing an application system. 
  how to develop a library of reusable task definitions and problem-solving methods. a three dimensional design space with predefined transition types provides structured support in developing and refining psms according to algorithmic paradigms  task terminologies and assumptions on domain knowledge. 
  which components of upml correspond to an implementation and how can such components be implemented in an object-oriented framework. we developed and refined some design patterns that guide this translation process and defined certain interface guidelines. 
1. conclusions 


1. http://www.aifb.uni-karlsruhe.de/www-broker. fig 1. hyperbolic query interface of on1broker. fensel  benjamins  motta  and wielinga 1 

ontologies were introduced as means to support knowledge sharing and reuse  cf.  gruber  1  . upml provides an ontology for sharing and reusing knowledge-based systems. that is  it provides a  meta- ontology for describing tasks  
psms  domain models  ontologies  their mappings via bridges and refiners that express adaptation of the components. a number of tools have been developed and configured for supporting the definition and use of upml components. a protege-h based editor enables the development of upml descriptions  while on1broker can be used to browse and query such descriptions. in addition  the ibrow broker matches user requirements with knowledge components specified in upml and supports their distributed execution. 
related work 
upml is close in spirit to cml which has been developed in the commonkads project  cf.  schreiber et al.  1  . cml provides a layered conceptual model of kbs by distinguishing between domain  inference  and task layers according to the commonkads model of expertise. upml took this model as a starting point  but refined it according to the component-oriented style of software architectures. upml decomposes a knowledge-based system - via an architecture - into a set of related elements: tasks  problem-solving methods  domain models and bridges that define their relationships. cml does not provide task-independent specification of problem-solving methods nor the encapsulation mechanism of upml for problem-solving method. in upml  the operational specification of a method is an internal aspect that is externally described by the competence of the method. in addition  cml does not provide means to refine tasks and problem-solving methods. in general  upml is much more oriented to problem-solving method reuse  i.e.  component reuse  than cml. finally  cml is a semiformal language whereas upml can be used as a semiformal language  using its structuring primitives  and as a formal language  upml provides logical formalisms to formally define the elementary slots . 
　　upml has also many similarities with other standardization efforts in the area of knowledge-based systems. okbc  chaudhri et al.  1  jointly developed at sri international and stanford university  provides a set of functions that support a generic interface to underlying frame representation systems. the knowledge interchange format  kif  is a computer-oriented first-order language for the interchange of knowledge among disparate programs.  kqml  or the knowledge query and manipulation language is a language and protocol for exchanging information and knowledge. kqml can be used as a language for an application program to interact with an intelligent system or for two or more intelligent systems to share knowledge in support of cooperative problem solving. the distinctive feature of upml is that it 
fig 1. querying the specification of a task. 	is about sharing and exchange of problem-solving methods  
automated reasoning 

i.e. software components that realize complex reasoning tasks of knowledge-based systems. moreover  upml is less a standardization formalism than a standard architecture  which is defined by its mcta-ontology. a similar approach is taken in ontolingua  gruber  1   which defines a meta-ontology for describing frame-based ontologies. although upml aims for a much broader scope  ontolingua could be used at the object level of upml for describing the elementary attribute values of specifications. 
　　finally   fensel et al.  1b  put upml in the general context of software architectures and also sketch how it can be translated into uml. 
outlook 
an important issue concerns the integration of components subscribing to different ontologies. this integration can be specified by means of bridges. bridges can either be defined by hand  i.e. by library providers or application developers  or can be generated automatically by an intelligent broker  cf  benjamins et al.  1  . however  the automatic generation of bridges requires that the library providers do not only agree on a shared language  i.e.  upml  but also on a shared vocabulary  i.e.  they do not only have to use the same upml meta-ontology but also partially the same ontology at the object level. 
acknowledgment we thank igor becker  stefan 
decker  mauro gaspari  john gennari  rix 
groenboom  william grosso  frank van harmelen  
mark musen  john park  rainer perkun  enric plaza  
guus schreiber  rudi studer  annette ten teije  and 
andre valente for valuable comments on early drafts of the paper. 
