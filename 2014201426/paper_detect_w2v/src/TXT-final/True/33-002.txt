 
　　this paper describes bruin  a unified a  system that can perform both problem-solving and language comprehension tasks. included in the system is a frame-based knowledge-representation language called frail  a problem solving component called nasl  which is based on mcdermott's problem-solving language of the same name   and a context-recognition component currently known as pragmatics. 
　　the intent of this paper is to give a flavor of how the context recognizer pragmatics works and what it can do. examples are drawn from the inventory-control  restaurant and blocks-world domains. 
i introduction 
　　over the years  it has been argued that there ought to be an ai system which can do both problem solving and language comprehension using the same database of knowledge  1  1 . such systems have not been built because researchers in these two areas have generally used rather different knowledge representations: the predicate calculus for problem solving  and some framelike representation for language comprehension. 
　　bruin is a unified ai system which can perform both problem-solving and language comprehension tasks. it is developed around charniak's common knowledge representation frail  a frame-based ai language.   the problem-solving component  called nasl  is based on mcdermott's problem-solving language of the same name  1  the language comprehension component  which performs context recognition  is currently known as pracmatics. in addition  there is a natural language front-end which consists of a marcus-type parser  and a semantic analyzer currently being developed by graeme hirst. 
　　when a sentence is read by bruin  it is first parsed by the parser. the parse tree that results is then translated by the semantics module into a series of statements to be asserted into the frail database. if the statement is a problem to be solved  then nasl will try to solve it. if the statement is an action which has been performed  then pragmatics will try to recognize the context in which the action is being performed. 
bruin is based on the following principles: 
 pi  the only knowledge which needs to be expressed in frail is that associated with doing and choosing plans. 
 p1  given an arbitrary action  the context recognizer 
 this research was supported in part by the office of naval research under contract n1-c-1. 
 current address: department of computer and information 
studies. colgate university. hamilton. new york 1 pragmatics will recognize the action as either  a  a part  sub-act  of a plan; or  b  a way of accomplishing some higher goal. 
for a rather simplified example  assume the following 
frail definitions of the build and magiciansaw-victim frames:1 
; a step in the build plan is 
; saw-step; the builder saws the lumber  
 frame: build isa: action 
slots:  builder: must be a person  
      lumber: must be a piece of board  plan:  saw-step: builder saws the lumber ...  
/ a step in the magician-saw-victim plan is saw-step: 
; the magician saws the victim  
 frame: magieian-saw-vietim isa: action 
slots:  magician: must be a person  
　　　 victim: must be a person  plan:  saw-step: magician saws the victim ...  
if the following statements are given to bruin  
kim is building a house. kim is sawing a board. 
then pragmatics  noticing that kim is sawing a board will recognize the board as the piece of lumber being sawed by the builder kim in the saw-step of the build plan. on the other hand  if the statement were kim is sawing lee. 
then pragmatics  noticing that lee is a person  will recognize the sawing as the saw-step of a magician-sawvictim plan in which kim is the magician and lee  the victim 
　　there is a rough correspondence here between the steps of  scripts  in language comprehension and the sub-goals of plans. in reality  because a plan is considered to be an integral part of a frail frame  the knowledge available to bruin for performing inferences is more powerful than previous script formalisms. 
　　this paper gives an overview of how the context recognizer pragmatics works. pragmatics can do all the examples presented in this paper if given the semantic representation for the english input. except where noted  bruin's natural language front-end which translates the english into the semantic representation also works  but that process is beyond the scope of this paper. the domains which the examples are drawn from are  1  an inventory-control domain.  1  the restaurant-
*throughout this paper  the frail frames and the semantic representations will be given with an english-like gloss in italics. for a more formal treatment of these examples  the reader is referred to the author's thesis. . 
1 

dining domain and  1  the canonical blocks-world domain. all of these domains coexist in a single knowledge database and share some common knowledge. although not described here  other domains which have been implemented include the operation  at the register transfer level  of a pdp1. and automatic programming in a very simple form based on barstow's pecos system. . 
ii inventory control 
　　in this section  an edited version of a sample textbook problem whose solution requires the use of both pragmatics and the problem solve nasl is presented. 
this problem is taken from the end of chapter 1 of a textbook which deals with simple inventory control systems. . 
 il  a manufacturer used an injection molding machine in producing tv cabinets. 
 i1  the standard time for production was 1 hours per tv cabinet. 
 1  the injection molding machine operated for 1 hours per week 
 i1  the manufacturer delivers 1 cabinets per week. 
 i1  the standard time for a setup change for the injection molding machine was 1 hours per lot. 
 1  the setup change cost 1 dollars per hour. 
 1  storage of the tv cabinets cost 1 dollars per cabinet per week. 
 i1  calculate the economic lot size for inventory control of the tv cabinets. 
　　this problem is interesting for several reasons. first. pragmatics is needed to explicitly state that which is only implicit in the problem statement. in this case  pragmatics must decide that the delivery of the 1 cabinets  the setup change  and the production of the tv cabinets are steps in a manufacturing-business plan  a plan which itself is not mentioned. a side effect here is the realization that the tv cabinets being produced are the same ones which are delivered - a rather obvious  yet critical  inference. second  it is in the nature of the economic lot size computation that nasl must choose between two similar equations when deciding how to compute the answer. moreover  when an equation is decided upon. nasl must not use the same equation again when calculating the unknown variables of the chosen equation. 
　　before describing how pragmatics understands this story  a sketchy introduction to inventory control and a quick solution to the problem will be presented. 
a. the economic lot stse 
　　one of the decisions a manufacturer must make is how many items to produce in each of a series of production runs  which  taken together  will meet the demand for an item. this quantity is known as the economic lot size. the economic lot size is chosen so that it will minimize the total costs of meeting the demand for an item. there are a number of factors which may figure into the the determination of the economic lot size. q - they are: 
r the demand on the item  
s the cost of setting up a production run. k the cost of keeping the item in inventory  and p the rate of production for the item. 
if the cost for setting up a production run is high  then decreasing the required number of production runs by increasing the lot size of a production run is desirable  since this would minimize the overall cost incurred. on the other hand  increasing the lot size would increase the average level of inventory in stock  thus increasing the overall cost. 
　　there are two possible equations which may be used to calculate the economic lot size  q. they are: 
 eq1  
and 
　　　　　　　　　　  eq1  q = v *lr1 
the difference in the two equations lies in an assumption about the production rate  p. in eq1  p is considered to be infinite  or. in other words  the production of the good is instantaneous in eq1  p is considered to be somewhat slower. 
b. a quick solution 
　　given the above  albeit sketchy  knowledge of an elementary inventory control model  i will go through a quick solution to the problem. 1 chose eq1 over eq1 because information was given to me which would enable me to calculate the production rate. once that decision is made  solving the rest of the problem is a matter of grinding through the calculations. 
the production rate for p is calculated as follows: 
   p a 	tfumr tm p.rat♀ 	 1q rime -t o-produc e-a- t v-cabxne t the demand. p  is the 1 cabinets delivered  and the setup cost is 
1 = time-tosetup-lot x cost-pevhour= $1. 
lastly  the carrying cost  k  is so. 1  the cost of storage. applying eq1 to the values of p  r. s  and k  we end up with the economic lot size being 
q = v     p   * -   r = 1 units per jot. 
c. pragmatic deliberations 
　　in this section  i will present the steps pragmatics performs to do context recognition using the sample 
problem as an example. the semantic representation for the first sentence 
 il  a manufacturer used an injection molding machine in producing tv cabinets. 
is 
    manufacturer 1 produces 1 the tv-cabinets on the injection-molding-machine  whenever an action is asserted into the database  pragmatics will 
 p1  fetch from an auxiliary database a list of possible context frames and their context links to the justasserted action. 
the context frame represents a possible context for the asserted action. the context link is the statement which links the context frame with the action. for our example  one of the possible context frames is the manufacturing-business frame: 
 frame: manufacturing-business isa: business-operation 

plan:  inventory-control-step: 
manufacturer performs inventory-control on the product  
 setup-step: manufacturer sets up the machine-used to produce product  
 production-step: manufacturer produces the product on the machine-used  
 storage-step: manufacturer stores the product   delivery-step: 
　　　　manufacturer delivers the product ...  in this case  the context frame and corresponding link that pragmatics will fetch is: 
 manufacturer 1 operates a manufacturing-business  
{the production-step of the manufacturing-business is produces1  
based on the production-step of the manufacturing business plan. 
the next step for pragmatics is 
 p1  for each of the context frames and links in the list  find ail the possible context instances  including a newly created context instance. 
a context instance is a specific instance of a context frame. because there aren't any manufacturingbusiness instances in the database  the only possible context instance is a created instance  manufacturingbusiness 1 defined as: 
    manufacturer 1 operates manufacturing-business 1  with the link 
　　 the production-step of manufacturing-business 1 is produces 1  the next step for pragmatics is: 
 p1  validate each context instance and link. 
this means making sure that the context instance is consistent with what is already known about the frame. in this case  manufacturing-business 1 has no productionstep and the inclusion of produces  as the productionstep of manufacturing-business  is consistent. 
pragmatics's next step is this: 
 p1  fill in the rest of the context. 
this involves ailing in slots of the context instance where necessary. for the manufacturing example: 
{the machine-used in manufacturing-businessl is the injection-moiding-machine  
{the product of manufacturing-businessl is tv-cabinet  
　　at this point  there might be several valid context instances  so pragmatics must 
 p1  choose and assert the best validated context instance  if any. 
in the current version  the choice is made in a rather ad hoc fashion. that is  pragmatics will choose the context instance with the fewest new instances and fewest statements necessary to establish the context. in the single choice given as the context for  il   there is one new instance  business-manufacturxngi  and four statements. choices which are equal with respect to the above criteria will effectively eliminate each other: therefore it is possible that there may be no best choice. 
for the statement 
 manufacturer 1 produces 1 the tv-cabinets 
on the injection-molding-machine  
there is only one choice so pragmatics will assert: 
 manufacturer 1 operates manufacturing-businessl  
 the production-step of manufacturing-businessl is produces 1  
 the machine-used in manufacturing-businessl 
is the injection-moiding-machine  
 the product of manufacturing-businessl is tv-cabinet . 
it should be noted that once the action 
    manufacturer 1 operates manufacturing-businessl  is asserted  pragmatics will go to work on it too this procedure terminates when pragmatics stops creating new actions. there are no context frames for 
 manufacturer 1 operates manufacturing-businessl . 
once again  the steps pragmatics takes are these: 
 pi  fetch from an auxiliary database a list of possible context frames and their context links to the justasserted action. 
 p1  for each of the context frames and links in the list  find all the possible context instances  including a newly created context instance. 
 p1  validate each context instance and link. 
i p1  fill in the rest of the context. 
 p1  choose and assert the best validated context instance  if any. 
　　what happens if a context instance already exists for an action as in the semantic interpretations for  i1 .  i1    i1   and  i1   each of these cases is similar so 1 will only present what happens for: 
 i1  the manufacturer delivers 1 cabinets per week. 
whose semantic representation is  in part  
 manufacturerl delivers 1 tv-cabinets  
in step  pi   pragmatics comes up with the context frame 
　 manufacturerl operates a manufacturing-business  and the context link 
 1vie delivery-step of the manufacturing-business is delivers 1  
in step  p1   pragmatics finds two context instances. 
one is manufacturing-business   created earlier  and the other is a newly created instance  fnanufacturingbusinessb  i will refer to these as choice 1 and choice 1  respectively. therefore  step  p1  results in: 
choice 1: 
 the delivery-step of manufacturing-businessl is delivers 1  
choice 1: 
 manufacturerl operates manufacturing-business1  
 the delivery-step o/manufacturing-business1 
iff delivers 1  
　　steo fp1  of pragmatics validates the choices and step  p1j adds 
  1ie product o/manufacturing-business1 is tv-cabinet  to choice 1. note that choice 1 need not add any new context because it is already known that manufacturing-business   is manufacturing tv-cabinets. 
　　the last step   p1   must now deal with the two choices: 
choice 1: 

 1m delivery-step 1/manufacturing-business 1 is delivers 1  
choice 1: 
 manufacturer 1 operates manufacturing-business1  
 the delivery-step 1/manufacturing-business1 is delivers 1  
 the product 1/manufacturing-business 1 is tv-cabinet  
the first choice is the overwhelming favorite because it doesn't create a new instance and it needs only one formula to establish the context. 
ill restaurants 
　　in the introduction  it was stated that one of the principles which bruin is based on is: 
 p1  the only knowledge which needs to be expressed in frail is that associated with doing and choosing plans. 
a corollary of  p1  is: 
 p1a  all other knowledge is deduced by inference where possible. 
 p1  and  p1a  are designed to try to meet the objection that the knowledge expressed in frames and frame-like representations  such as scripts  is mostly adhoc. . 
　　to illustrate this approach  two stories in a typical language comprehension domain  the restaurant-dining domain  are presented. the first story is: 
 rl  jack picked up a menu. 
          r1  he ordered a hamburger.  r1  he ate. and the second story is an example of wilensky's : 
 w 1  will a was hungry. 
 w1  she picked up a michel in guide.  w1  she got into her car. 
they pose several interesting problems to a language comprehension system. the context for  rl  should include the fact that jack is dining at a restaurant. sentence  r1  tells us what food jack will eat  so that what he is eating in  r1  is clear. in the second story  the same mechanism used for understanding  rl  can be applied to understand  w1 . it should be noted that pragmatics does not deal with the problem of pronoun reference. that is primarily the job of bruin's semantics analyzer which is not discussed here. 
a. a plan for restaurant dining 
　　before going into the stories themselves  i will develop a frame for restaurant dining which will be used to understand the first story. at the top level is the restaurant-dining frame itself. 
 frame: restaurant-dining isa: action 
plan:  enter-step: the diner enters the dining-loc   decide-step: 
the diner decides on 
' the food to eat in this restaurant-dining   
 order-step. the diner orders 
 that decided in the decide-step   
 eat-step: ihe diner eats 
 that decided in the decide-step   
 take-check-step: the diner takes the check  
 pay-step: the diner pays the dining-loc the amount of the bill   
each step in the plan may be thought of as a goal to be achieved. the step which is of particular interest here is the decide-step. the decide frame represents a decision being made  which in restour ant-dining would be what food to eat. 
 frame: decide isa: action 
slots:  the what slot must be some formula   the decided slot may be anything ... plan:  there is a 
 read-step: agent reads the reading material  if 
          the possibilities-list in the reading material is what is being decided  ...  if there is some reading-material which lists the possible ways what can be decided upon  then read the readingmaterial. a partial read frame might simply be: 
 frame: read isa: action 
plan:  pickup-step: 
the agent picks-up the reading-material ...  
examples of reading-material include objects such as books  menus and michelin guides. a menu  for example  lists the possible foods one can eat in a restaurant-dining frame. thus the menu frame is defined as: 
 frame: menu isa: reading-material 
facts:  the possibilities-list in a menu is 
' the food eaten in a restaurant-dining frame    
b. the simple story 
　　as mentioned earlier  one of the difficulties posed by the first story is how to get the context of restaurant dining from the first sentence. given the above frames  this can be easily done by pragmatics. a rather straightforward translation of the first sentence: 
 rl  jack picked up a menu. 
is: 
 jack picks-up 1 menul  
when picks-upl is asserted  pragmatics uses the read frame to create the read  context: 
 jack readsl menul  
 the pickup-step 1/readsl is picks-upl  
　　one can read something to make a decision. using the read-step of decide  and the definition of menu  pragmatics hypothesizes that jack is reading the menu to decide what to eat in some restaurant-dining frame therefore the context for readsl is: 
 jack decides 1 
' the food eaten in a restaurant-dining frame   
 the read-step 1/decides 1 is readsl  
　　this decides; action fits really nicely as the decidestep of a created restaurant-dining action. as a result  pragmatics will further assert: 
jack goes restaurant-dining 1 at some dining-loc  the decide-step of restaurant-dining 1 is decides 1  
in addition  during validation of the restaurant-dining 1 action; re staur ant-dining 1 becomes bound to restaurant-dining in the decides 1 action  hence decides 1 becomes: 
 jack decides 1 ' the food eaten in restaurant-dining 1   
　　note that pragmatics is able to obtain the proper context for  rl  without having menu explicitly mentioned in the restaurant-dining frame at all 

1 

for next sentence: 
　　　　　 r1  he ordered a hamburger. which translates to: 
 jack orders 1 hamburger 1  
pragmatics recognises that orderl is the order-step of re st our ant -dining 1. furthermore  since the order-step of restaurant-dining is defined as: 
　 the diner orders ' that decided in the decide-step   validation of this context will find that the diner jack has decided on a hamburger. thus  the statement 
      the item  decided in decides 1 is hamburger 1  is also added to the context for orders 1. 
　　the next sentence   he ate   presents no new difficulty. 
c. poor hungry willa 
　　a careful reading of the solution to the last story will reveal that the same mechanism used to understand why a menu is being picked up can be used to understand why a michelin guide is being picked up. all we need to know is that the michelin guide contains a list of possible places to dine out at. 
iv blocks world 
　　the last domain to be presented in this chapter is a typical problem solving domain  the blocks world. the knowledge from this domain has been encoded in the system to solve the usual blocks world problems including the typical  hard problem   the destructive subgoals problem which may be stated as follows: 
 bl  there is a green block on a table. 
 b1  a red block is on the table. 
 b1  the red block has a blue block on it. 
 b1  put the red block on the green block and the green block on the blue block. 
the problem solver nasl can solve this problem  using the solution presented by mcdermott in . furthermore  using the frail frames developed for the solution to the above problem  pragmatics can also find the context for the following simple story:r 
there is a green block on a table. 
　　　　there is a red block on the green block. jack put the red block on the table. whose semantic interpretation is as follows: 
; there is a green block on a table 
 a block named green 1  
 the color o/greenl is green  
 a table named table 1  
 greenl is on table 1  
; there is a red block on the green block. 
 a block named red1  
 the color of redl is red  
 redl is on greenl  
; jack put the red block on the table. 
 a person named jackl  
 jackl achieves 1 the state ' redl is on table 1   
　　a couple of relevant frames from the blocks world are: 
'this example does not yet work with the english input present' ed for reasons which are irrelevant to this paper. 
 frame:  block facts:  to-do the task 
 agent achieves the state ' clear block   do the task 
' agent does clear-plan for the block   
 to-do the task 
 agent achieves the state 
　　　' space-for the block on x   do the task 
' agent achieves the state ' clear x     
 frame: clear-plan slots:  cluttered: must be a block  plan:  it is true that there is a 
 clear-top-step for the clutterer: agent achieves the state 
' the clutterer is on a bwtable   
  the clutterer is on the cluttered   the bwtable is a table  and 
 cluttered is on the bwtable     
for the statement: 
 jackl achievesl the state ' redl is on table 1   
pragmatics will find the context frame and link 
 jackl does a clear-plan for the cluttered block  
　　 the clear-top-step for the clear-plan is achieve 1  as well as a context frame and link associated with achieving a conjunctive subgoal. the latter option will eventually be eliminated when selecting the best choice in step  p1 . this is because the conjuctive subgoal option does not specify the other goal  whereas the clear-plan options is completely specified. for expediency  1 will focus on the clear-plan option. 
　　since there are no instances of clear-plan  the only option generated by pragmatics is the created instance  clear-plan 1  in order to verify that clear-plan 1 is a possible context. pragmatics must verify that: 
  redl is on the cluttered block   table 1 is a table  and 
　　　　　　 cluttered is on table 1   is retrievable from the database. verifying this condition reveals that cluttered is the greenl block  so that the context for achievesl is: 
 jackl does clear-plan 1 for greenl  
 the clear-top-step for clear-planl is achievel  
　　pragmatics now tries to find the context for the action clear-planl. noting that doing clear-plan is a way to do 
　　　　 agent achieves the state ' clear block   and that there is no competition from other possible contexts  pragmatics will assert 
 jackl achieves1 the state ' clear greenl   
 the sub-act of clear-planl is achieves1  
therefore  pragmatics has determined that jack is moving the red block on the table is to clear the green block. 
v in closing 
　　in this paper  i have presented an overview of how an ai system can perform one important aspect of language comprehension using the same knowledge a problem solver uses. it is a system which uses a common frame-based representation for representing 
1 

knowledge associated with making and choosing plans. the problem-solving component  nasl  uses this knowledge to solve problems in a variety of domains. the context-recognition component pragmatics uses this knowledge to recognize actions as a part of a greater plan  or as a means of attaining some higher-level goal. 
　　we have been able to take advantage of the organizational structure of frames to express plans and the knowledge used to choose plans in a nice structured way. this has helped us get around some of the organizational problems associated with traditional  unstructured production-rules systems. by stressing the use of plan knowledge  the procedural portion of the frame has become less ad hoc than many of its predecessors. knowledge which can be inferred need not be explicitly expressed. probably  the best aspect of the system is that it works for the variety of domains which have been expressed for it; inventory control  restaurant dining  the blocks world  automatic programming  and computer architecture. in addition  all the frames described in this paper coexist in a single database. 
　　some of the problems we are currently experiencing have to do with incomplete knowledge or implementation specifics of bruin. to list a few: 
 1  there is a problem with the blocks-world example which i suppressed in that section. in reality  the pragmatics would go off on a tangent when the achieved task is asserted. this is because the concept of prerequisite in nasl is too poor to warrant its inclusion in pragmatics at this time. 
 1  because each domain was developed somewhat independently  there are frames in the system which 
should be rewritten to make them more useful and general 
 1  the system has not been seriously tested on a large complex domain. even its knowledge about inventory control is rather superficial. 
　　there are also some aspects of the general problem of context recognition which pragmatics cannot handle they are: 
 1  pragmatics only uses actions to recognize context  not objects or states. as a result  it cannot handle: 
willa was hungry. there were cookies in her room. 
 1  pragmatics can only perform bottom-up recognition given the story: 
jack picked up a rope. he had to hang up the wash. 
pragmatics will not recognize his hanging up the wash as the context for picking up the rope. picking up a rope suggests too many different contexts  i.e. to tie something up  to jump rope  to make a leash  etc.  which can only be resolved by the subsequent sentences. 
 1  pragmatics is designed to perform first impression recognition only. it cannot perform  what 1 call contemplative recognition. an example given by collins  et al in  is 
he plunked down is at the window. she tried to give him s1 but he refused to take it. so when they got inside she bought him a large bag of popcorn. 
this story is difficult because the initial context clues are weak  compared to clues like  menu  . moreover  the initial context suggested by the first two sentences is wrong and must be revised when the last sentence is read. 
　　in conclusion  this system does what many researchers have said ought to be done  that is unify the problem solver with the language comprehender and it does so with a common knowledge representation which can express knowledge in many domains. 
acknowledgements 
　　i want to especially thank eugene charniak fur his insightful comments and suggestions throughout this research and the writing of this paper. 1 would also like to thank graeme hirst for his opinions on the ad hocness  or was it odd hackness   of the translations i wanted out of his  one-shot  semantic translator  and for his thoughtful comments on an earlier draft of this paper. 
