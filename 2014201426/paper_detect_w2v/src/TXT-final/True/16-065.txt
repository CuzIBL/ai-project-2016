 
     an automated reasoning program has provided invaluable assistance in answering certain previously open questions in mathematics and in formal logic. these questions would not have been answered  at least by those who obtained the results  were it not for the program's contribution. others have used such a program to design logic circuits  many of which proved superior  with respect to transistor count  to the existing designs  and to validate the design of other circuits. these successes establish the value of an automated reasoning program for research and suggest the value for practical applications. we thus conclude that the field of automated reasoning is on the verge of becoming one of the more significant branches of computer science. further  we conclude that the field has already advanced from stage 1  that of potential usefulness  to stage 1  that of actual usefulness. 
     to pass to stage 1  that of wide acceptance and use  requires  among other things  easy access to an automated reasoning program and an understanding of the various aspects of automated reasoning. in fact  an automated reasoning program is available that is portable and can be run on relatively inexpensive machines. moreover  a system exists for producing a reasoning program tailored to given specifications. as for the requirement of understanding the aspects of auto-
mated reasoning  much research remains-research aided by access to a reasoning program. a large obstacle has thus been removed  permitting many to experiment with and find uses for a computer program that can be relied upon as a most valuable automated reasoning assistant. 
	1. 	introduction 
     recent successes  1 1 1 1 1  1  resulting from heavy use of an automated reasoning program demonstrate that the field has advanced from conjectured usefulness to actual usefulness. by reviewing certain of the successes  we provide evidence for individuals from other fields to judge the progress that has 
this work was supported by the applied mathematical 
sciences research program  kg-1  of the office of energy research of the u.s. department of energy under contract w-1-eng-1. 
occurred. rather than surveying the field of automated reasoning as a whole  we concentrate on the work of an informally organized team of which the author is a member. nevertheless  to give the minutest of hints about what is being achieved by others in the field  we cannot resist citing  here and in section 1  some of the outstanding work of such researchers as r. boyer and j moore  w. w. bledsoe  and j. siekmann. 
     the f i r s t success realized by the aforementioned team was obtained with much assistance from the program aura  for automated reasoning assistant  -a program developed jointly at argonne national laboratory and northern illinois university  anl/niu . the success was that of answering certain previously open questions in mathematics  1 1   followed by answering various open questions in formal logic  1   the results were judged of significant interest that they were published respectively in a mathematics journal and in a logic journal. such recognition by researchers having no direct interest in automated reasoning represents a significant breakthrough for the field of automated reasoning  and hence for automated theorem proving where it all began more than 1 years ago. perhaps this occurrence is the first of many such occurrences in which various open questions w i l l be answered by researchers using an automated reasoning program. 
     must you master the various aspects of automated reasoning to answer open questions or  for that matter  to use such a program in an important way  after a l l   you might argue that  since those who answered the questions are active in automated reasoning  perhaps an automated reasoning program can be used only by those in the f i e l d . that this is not the case is proved by additional successes. researchers having no previous exposure to automated reasoning used a reasoning program to design logic circuits    many of which are superior  with respect to transistor count  to those previously known  and to validate the design of other circuits  already in existence. these researchers have provided us with powerful evidence for the curious and for the skeptical. to the former  we can say with confidence that patience and pain may be rewarded with the discovery of a new application for automated reasoning. to the latter  we can say with equal confidence that the years of research  development  implementation  and experimentation have culminated in the availability of a portable computer program  1 1  that can be used as a 
     
1 	l. wos 
most valuable automated reasoning assistant. further  we can say that the field of automated reasoning as a whole has cause for genuine excitement and optimism  for we can now list various real problems that have been solved with an automated reasoning program. 
     the main objective of this paper is to inform individuals with diverse and unrelated interests of what has occurred and  equally  of what is likely to occur in the field of automated reasoning. we shall discuss the past and the future  and thus establish the position of this field relative to various other fields of computer sci-
ence and of a r t i f i c i a l intelligence. some who read this paper may even share our conclusion that the field of automated reasoning is on the verge of becoming one of the more significant branches of computer science. if not this  at least we show that the field has already advanced from stage 1  that of potential usefulness  to stage 1  that of actual usefulness. to pass to stage 1  that of wide acceptance and use  requires  among other things  easy access to an automated reasoning program and an understanding of the various aspects of automated reasoning. we shall discuss this transition as well. 
     since many who may read this paper are not directly concerned with automated reasoning itself  we provide background material. some of you may be surprised to find that an automated reasoning program is now or soon w i l l be useful as an aid for research or for applications. the kinds of assistance that such a program can provide include finding proofs  generating models or counterexamples  suggesting and verifying conjectures  and testing hypotheses. the research and application areas in which a reasoning program can be used include mathematics  formal logic  program verification  logic circuit design  logic circuit validation  chemical synthesis  systems control  database inquiry  and robotics. how can one program-an automated reasoning program-provide so many kinds of assistance and in so many diverse areas  in fact  what is automated reasoning   
	1. 	background 
     reasoning is the process of drawing conclusions from given facts or assumptions. the conclusions must follow inevitably and logically from the facts or assumptions. if the conclusions are false  then one of the facts or assumptions is false.  in the main  we are not concerned with fuzzy logic or with probabilistic reasoning. thus  conclusions that are likely to be true  or quite possibly true  are not what we have in mind. we shall touch briefly on that topic in the concluding section.  the goal of automated reasoning is the design and implementation of a computer program that provides assistance for that phase of problem solving requiring reasoning. reasoning is applied after the problem has been identified and formulated  after an approach has been chosen to attack the problem  and only if the chosen approach dictates the need for such reasoning. as we are using the term  some problems do not require reasoning to obtain a solution  for computation suffices. 
     an automated reasoning program can assist in so many different ways and for such diverse applications because of its generality. the most commonly used language-that of clauses -for phrasing problems for an automated reasoning program is very general and powerful  although admittedly somewhat difficult to master. we were surprised to discover that we had underestimated its generality and power and that  with effort and inventiveness  the language of clauses could easily dispatch an even wider variety of tasks 
 1 1 1 . the various inference rules  1 1  employed to draw conclusions apply regardless of the domain from which the problem is selected. the strategies used to control the application of inference rules enable a reasoning program to avoid much fruitless inquiry    and permit one to impose knowledge and intuition  on the program's search for a solution. the procedure of demodulation  allows a reasoning program to canonicalize and simplify information  resulting in an increased effectiveness. finally  subsumption  is employed to remove duplicate information and  more importantly  to retain general facts and discard instances of those facts. an automated reasoning program relies on an arsenal of weapons for problem solving  which is why it can be used for various purposes and in various studies. 
     of course many problems remain to be solved in the three main areas  representation  inference rule  and strategy. nevertheless  as will soon become evident  difficult questions have yielded to an attack relying on heavy use of an automated reasoning program. we shall now turn to some of those questions. the program used to answer the 
questions is resolution-based  but the other procedures cited above a l l play a vital role. what 
we clearly demonstrate is the usefulness of a resolution-based automated reasoning program both in research and for applications. 
1. answering open questions with an automated reasoning program 
     answering open questions  regardless of the means  is considered a laudable activity in most circles. answering any such question with an automated reasoning program might have been thought impossible. nevertheless  such has occurred. of course  this occurrence represents a 
     breakthrough for automated reasoning  and hence for automated theorem proving. roughly the f i r s t 1 years of automated theorem proving were spent in attempting to prove already proven theorems with an automated theorem-proving program  for knowing a proof permits the researcher to make judgments about the progress the reasoning program is making. notwithstanding  one of the primary goals is that of using such a program to prove conjectured theorems-claims for which a proof is not yet known  or for which a proof may not even exist. to complement this activity  the need exists for disproving a conjectured theorem  hence finding a model or counterexample. the questions to be discussed address both aspects  that of finding a proof and that of generating a model or counterexample. 
     for the first question  concerned with the dependence or independence of axioms in a ternary boolean algebra    the capacity of aura  for 
automated reasoning assistant  to generate models was relied upon. for the second question  that concerned with the possible existence of certain semigroups  1   the program's capacity to generate models as well as find proofs was employed. for the third question  that concerned with the adequacy or inadequacy of various formulas in equivalential calculus  1    aura's capacity to find proofs came into play as well as its capacity to consider schemata under certain conditions. since the details and methodology for solving the three questions can be found elsewhere 
 1 1 1   we are content merely to present each question with its solution. 
     answering open questions-more precisely  the attempt to answer such questions-by using a reasoning program as an automated reasoning assistant often has a secondary benefit. the attempt may force one to formulate new methodology. as you will see  new methodology was needed. the existing features of the program were sufficient for the task  for the new methodology did not require implementation of new features tuned to the particular problem under attack. 
     the program aura was indispensable for answering the open questions to be discussed. as evidence  we point out that the researchers who answered these questions have no expertise in any of the fields concerned. their attempt to answer the first question was motivated solely by the attempt to demonstrate the value of using an automated reasoning program as an assistant. their consideration of the second question was to show that somewhat difficult questions of interest to mathematicians could also be attacked with the assistance of a reasoning program. finally  their interest in the third question was to show that the program was useful for a problem of a completely different type. 
     how hard are the open questions that were answered  while the first of the three questions could in no way be termed difficult  the second clearly presents serious problems. in particular  the number of semigroups of order 1 exceeds 1  and no smaller semigroup exists of the type to be discussed. the third question presents an even more awesome search space to be examined or circumvented. the number of formulas containing 1 significant symbols is greater than 1 1  and the completion of the study relied on a formula with 1 significant symbols. the solutions were obtained without examining the myriad of uninteresting semigroups or irrelevant formulas. 
     in view of the researchers' lack of expertise in any of the fields from which the diverse problems are taken  we have strong evidence that an automated reasoning program did play a vital role in answering the previously open questions. 
l. wos 1 
1. ternary boolean algebra 
     the first question concerns the possible independence of the elements of the usual set of five axioms given for a ternary boolean algebra. intuitively  the function f that occurs in each of the five axioms can be thought of as a 1-place product  and the function g as inverse. 

     the problem is to determine which  if any  of the five axioms is independent of the remaining four. if an axiom is dependent  then a proof can be found of that fact. if an axiom is independent  then a model exists that satisfies the other four but does not satisfy the independent axiom. axioms 1 and 1 were known to be dependent even before proofs were obtained with two unrelated theorem-proving programs in 1-that of alan and luckham  and that of g. robinson and wos  unpublished . axioms 1  1  and 1 are independent  and the required models were obtained with aura. 
     before this study of the fascinating-to-few field of ternary boolean algebra  the methodology for generating models and counterexamples with an automated reasoning program did not exist. we credit s. winker  for this contribution. he also is chiefly responsible for answering the questions under discussion  but his methodology is the more significant achievement. 
1. 	finite semigroups 
     the second question concerns the possible existence of a finite semigroup in which one type of mapping is present while another type is absent. specifically  does there exist a finite semigroup admitting a nontrivial antiautomorphism but admitting no nontrivial involutions  a nontrivial antiautomorphism is a one-to-one  onto mapping h such that h xy  = h y h x  and such that h is not the identity mapping. a nontrivial involution is a nontrivial antiautomorphism whose square is the identity mapping. whichever way the question is settled  commutative semigroups are excluded from consideration  for they are not of interest by assumption. 
     this question is more interesting and much harder than the previously discussed question for ternary boolean algebra. i. kaplansky  the famous algebraist at the university of chicago  suggested this question because of its relation to a similar question in division algebras. if the presence of a nontrivial antiautomorphism always implies the presence of a nontrivial involution  then the proof-finding capacity of an automated reasoning program comes into play. if a semigroup exists for which the implication does not hold  then the model-gene ration capacity is the key. the latter case presents certain problems since the number of noni1omorphic semigroups increases rapidly with 
     
1 	l. wos 
the order-more than 1 exist of order 1-and thus the search for the desired semigroup is potentially lengthy. thus  to answer the question  we must either find a proof or generate a model. the model generation capacity settled the issue by finding a semigroup of the desired type. the f i r s t found has order 1 . 
     with this information in hand  the natural question to ask is what is the smallest such semigroup. just as the previous study led to the methodology for generating models and counterexamples  this study led to new methodology. to find the minimal semigroup with the given properties  required aura to cope with problems of isomorphism. a way was found to have aura apply various other techniques such as the well-known without loss of generality argument that mathematicians use. the result was a proof that the smallest semigroup of interest has order 1  and that four such nonisomorphic ones exist. this study was conducted jointly with winker. 
     the discussion of this question is not complete without a brief reference to the true story  behind its solution-the story of what occurred before finding the semigroup of order 1. before discovering that semigroup  we had a prior solution. that solution to the open problem was thought to be correct for some 1 months  before it was discovered that the wrong problem had been solved. what was missing was the correct definition of an involution. in the first attempt at solving the problem  an involution was not assumed to be an antiautomorphism  but simply a one-toone  onto mapping j whose square is the identity and such that j xy  - j x j y . with that definition of j  there exist semigroups of order 1 that suffice  but the corresponding problem is not of 
much interest. when the correct problem was ident i f i e d   three hours of the researchers' time sufficed to extend the methodology to enable aura to solve the problem in a sequence of runs requiring two minutes of time on an ibm 1. the method used to solve the uninteresting problem proved pertinent to the interesting one  so the effort was not wasted after a l l . we thus have an i l l u s tration of how a class of problems can be treated by a single methodology developed for one of them-even if the wrong one. this story is told 
when we are asked if one must start anew when submitting each distinct problem to an automated reasoning program. 
1. 	equivalential calculus 
     the third question concerns the adequacy or inadequacy of various formulas to serve as shortest single axioms for the equivalential calculus. intuitively  the equivalential calculus is concerned with the abstraction of  equivalent . the calculus consists of the formulas that can be composed from variables x  y  z  . . .   and the twoplace function e. in addition  the inference rule of condensed detachment  is employed to yield formulas from pairs of formulas. the calculus can be axiomatized with a single formula  a formula from which a l l theorems can be deduced by repeated application of condensed detachment. the shortest single axiom must contain five occurrences of the function e. before this area of formal logic was studied with the assistance of aura  1 shortest single axioms were known. when the study commenced  seven of the 1 formulas in which the function e occurs exactly five times remained unclassified-the adequacy or inadequacy for being a single axiom was unknown. 
     the model-generation method was deemed inadequate for the study. what was desired was a characterization of the entire set of theorems deducible from each of the seven formulas under investigation. while answering the open question for ternary boolean algebra led to the methodology for generating models  this study led to a methodology to achieve the goal of obtaining a complete characterization  1  of the set of deducible theorems. the approach centers on the use of schemata  forms that describe collections of formulas sharing certain global syntactic properties. the needed schemata were found by relying heavily on an automated reasoning program. the use of such a program  however  was not limited to schemata discovery. other uses  include suggesting conjectures  finding notation  conducting case analyses  proving and refuting conjectures  and of course finding proofs. the completion of this study required many computer runs  much examination of the output  and approximately 1 minutes 
of cpu time on an ibm 1. 
     with invaluable assistance from aura  five of the seven previously unclassified formulas were proved too weak to be a shortest single axiom  1 . what was surprising was that two of the seven were proved to be new shortest single axioms   contrary to the conjecture that no more would be found. the two new slfortest single axioms are denoted by xhk and xhn. the study of equivalential calculus  especially the proof that two additional shortest single axioms exist  proved to be the most intricate and complex use of an automated reasoning program known to us. the proof that xhk is a single axiom includes 1 applications of condensed detachment and involves formulas as long as 1 symbols  not counting grouping symbols and commas. the proof that xhn is a single axiom consists of 1 steps  one of which involves a formula of length 1. the number of formulas of length 1 exceeds 
1 1. 
	1. 	other users  other programs 
     the primary goal of automated reasoning  and hence of automated theorem proving  is the design and implementation of a computer program. the primary use of the program is to assist in the reasoning phase of problem solving. if that program can be used only by an expert in automated reasoning  then we have failed. more precisely  if we never provide an automated reasoning program that can easily be used by researchers from other fields and by individuals interested in applications outside of our field  then we have not f u l f i l l e d our charter. some progress in this direction has occurred. 
     
	both students and faculty from 	the 	illinois 
institute of technology have used and are using an automated reasoning program for their research. two of the students  w. wojciechowski and w. 
kabat  have received a ph.d. for work on logic circuit design. each relied heavily on an automated reasoning program to design circuits with given characteristics. many of the circuits obtained by wojciechowski  were pronounced by others in the field of design as superior  with respect to transistor count  to those previously 
known. the technology employed is that of tgates  the analogue in a-valued logic of the multiplexor in binary logic  as the basic building block or component. the methodology was then extended by kabat  to the use of arbitrary building blocks  for either multi-valued or binary logic design. in addition  a. wojcik  their thesis advisor  is using a reasoning program for the validation of existing designs . for 
example  he has obtained a 1-step proof validating the design of a 1-bit adder. the proof was obtained in 1 seconds of cpu time on an ibm 1. the research in these areas relies on the use of aura-automated reasoning assistant. 
     also at iit  m. evens and her student t. wang are studying the possible use of an automated reasoning program for chemical synthesis . the problem focuses on a large database of simple compounds and a set of reaction rules that combine them to produce complex compounds. at the university of illinois at urbana  l. hanes is using an automated reasoning program to prove the equivalence of symbolic representations purported to represent the same logic circuit. the two studies are being conducted with the assistance of a reasoning program itp  produced from the lma  logic machine architecture  system. the lma system is a set of procedures or subroutines for tailoring an automated reasoning program to given specifications. the tailoring is not an automated process. the lma system  1  was designed and implemented by e. lusk  w. mccune  and r. overbeek. 
     occasionally  various diverse areas of research meet in a fortuitous fashion. the study of the equivalential calculus and the development of lma provide an example of such an occurrence. in the fall of 1  j. kalman from the university of auckland came to argonne to study and use our techniques in automated reasoning. he is interested in equivalential calculus and is the person who pointed us to the previously discussed open questions in that field. during his visit  
we asked him about the possibility of axlomatizing the calculus with three obvious axioms that might be chosen in view of the fact that the calculus studies the abstraction of the notion of equivalent. specifically  do the following three formulas axiomatize the calculus  

these three formulas can be thought of as reflexivity  symmetry  and transitivity. kalman l wos 	1 
answered our question in the affirmative  by using a program produced from lma. we thus have another example of actual use of an automated reasoning program. 
     one other group of users must be mentioned. a workshop was given at argonne national laboratory in may of 1. the workshop was a tutorial in automated reasoning  demonstrating existing and possible uses of both aura and programs produced from lma. most of the attendees were from various industries  including ibm  dec  motorola  intel  amoco  silicon systems  aptec  ncr  and lockheed. they came expressing some doubt about the potential usefulness of automated reasoning  but hoping to gain an understanding of its basic aspects. they left expressing much enthusiasm and some optimism  and with an understanding of the basics. perhaps more important  some of them are now experimenting with an automated reasoning program  produced from lma  for various applications. although no industry has yet committed itself to a solid attempt to apply automated reasoning  the change in attitude from but a few years ago is marked. 
     we now come  as promised in the introduction  to the briefest of accounts of the work of others in the field of automated reasoning. the successes of other researchers provides still more evidence of the progress that has occurred. these successes resulted directly from the use of an automated reasoning program. obviously other powerful automated reasoning or automated theorem-proving programs exist  besides those designed and implemented by the anl/niu group. independent development of this kind is essential for the field. the availability of other programs provides valuable opportunities to compare performance  features  implementation details  and special-purpose versus general-purpose approaches to solving a problem. 
     perhaps the most outstanding of these programs  measured by the problems solved with i t   is that of boyer and moore. their system is a special-purpose program aimed at program verification. among their recent successes with their program they proved the recursive unsolvability of the halting problem  and also proved the invertibility of the rsa encryption algorithm  used for message transmission. the encryption algorithm is not a classroom exercise  nor a problem purely of theoretical interest  for the algorithm is in actual use. boyer and moore are to be congratulated for their achievements. besides being a beautiful piece of work  the success demonstrates the potential value of using such a program. as we do  they also use their program in the assistant mode  occasionally suggesting to it lemmas that might be of value when and if the program succeeds in proving them. 
     two other efforts must be mentioned  that of bledsoe and that of siekmann. bledsoe's work  is oriented toward intermediate analysis  and he has proved with his system some fairly difficult and fundamental theorems in that domain. the 1 	l. wos 
proofs were obtained with an automated theoremproving program employing a number of his techniques. especially from the viewpoint of automated reasoning  the area of intermediate analysis presents significant challenges. rather different from bledsoe's approach  siekraann has developed a large integrated reasoning program. as one example of the type of problem that can be solved with his program  siekmann has recently announced  that a proof of an interesting theorem from relevance logic has been obtained 
with his system. 
1. from stage 1 to stage 1; what caused the progress  
     fields like automated reasoning usually begin in stage i  in which conjectures are made about potential value  possible uses  and expected power. if all goes well  such a field advances to stage 1  in which some of the potential has been realized  various uses exist  and successes have been achieved that might not have occurred were it not for the power that has been provided. of course the goal is to reach stage 1  in which the field is widely accepted and in which its products are widely used. automated reasoning is at stage 1-which is what sections 1 and 1 are about. of course  stage 1 is not a point on the entire spectrum  but rather an interval in which we find ourselves with many problems s t i l l to solve. the question here is  how did automated reasoning advance from stage 1 to stage 1  
     one of the prime factors was much experimentation with an existing automated reasoning or automated theorem-proving program. various concepts that are considered central to the field came directly from such experimentation  concepts such as the unit preference strategy    the set of support strategy   demodulation   and paramodulation . various uses were added because of experimentation  uses such as question-answering  program verification  database inquiry  and the design and validation of logic circuits. for experimentation  the ideal case is that in which the program presents to the researcher an array of choices for representation  inference rule  strategy  and the use of auxiliary processes. since the only available form offered by aura for representing information was that of clauses  we were not in the ideal case. in the other areas  however  we did have access to a wide array of choices. a large and integrated system such as aura provides unusual opportunities for learning and  in fact  no substitute can be found. 
     a second important factor is the work of overbeek  1 1 1   especially his design and implementation of various programs. of these programs  aura is by far the most powerful and versatile automated reasoning program  and is the one that was used to answer the open questions. aura extends and incorporates the design and implementation found in overbeek's earlier work  and includes vital features due to smith  winker  lusk  and wos. without aura  the open questions presented here would not even have been considered  at least by the researchers who solved them. the questions even might have resisted solution by any means were it not for the existence of this program with its many features. the combination of the particular implementation  well-chosen inference rules  and carefully selected strategies was mainly responsible for the successes. 
     how does the particular implementation have such an important effect  a poor implementation can obscure the value of a new idea. for example  if a new and powerful strategy is tested with a poor implementation  any attempt at obtaining a proof might take essentially forever. on the other hand  a poor implementation can equally mislead the researcher into evaluating a bad idea as good. if  for example  a new inference rule is tested with a program that requires a great deal of time to obtain a proof for even the simplest of problems  a sharp reduction of that time might be meaningless. the researcher could  however  mistakenly conclude that the new inference rule was quite promising. a good implementation  when presented with the new rule  might have produced no important change in the experiments  and thus the erroneous conclusion would have been avoided. the choice of implementation  therefore  can have serious consequences. 
     a third important factor that advanced automated reasoning from stage 1 to stage 1 is the 
work of winker  who  by the way  does not totally agree with the views expressed in this paper. his methodology for generating models and counterexamples provides the needed complement to finding proofs. but perhaps more important is his establishment of the usefulness of clause representation. his mastery of problem representation and the techniques resulting from it have led to the successful submission of diverse and unrelated problems to an automated reasoning program. 
     before turning to the final factor that caused the advance to stage 1  we note that many researchers have made contributions both to the theory and to the application of automated reasoning. we are content here to concentrate on the work that has led to our contribution  and not focus on the many and important aspects of others' 
work. 
     the final factor promoting the advance of automated reasoning centers on answering open questions with the assistance of an automated reasoning program. this success has caught the interest of members of other fields  such as mathematics and formal logic. we have clearly demonstrated that an automated reasoning program can provide invaluable assistance in research. we must recognize that  for example  proving a known theorem with a reasoning program often does not impress those outside of the field. for one thing  real difficulty exists in ascertaining how unbiased the experiment is. an analysis of how much the  dice were loaded  is most complex. in contrast  answering an open question by relying on an automated reasoning program produces many fewer 
     
questions about  loading the dice . one may certainly wonder how much credit should be given to the ingenuity of the researchers and to their intimate knowledge of the program that was used. however  when one takes into account the fact that the researchers knew and s t i l l know very l i t t l e about the fields from which the open questions were selected  the case for the program's contribution is strengthened markedly. an even stronger case can be made when one takes into account the successes of other researchers  especially when those researchers have virtually no knowledge of the underlying reasoning program. when the success with open questions was followed by the success of members from other fields using an automated reasoning program for other applications  the field had arrived at stage 1. 
1. from stage 1 to stage 1: how do we get there 
     much experimentation with existing automated reasoning programs will be required to get from stage 1 to stage 1. certainly more theory is needed in the three major areas of representation  inference rule  and strategy. however  to the disappointment of some  too much emphasis is placed on theory without evidence to support the resulting claims. when a particular approach has been explored for many years and s t i l l cannot be employed even to solve problems whose solution is known  that approach must be viewed with great skepticism. perhaps some of the effort devoted to the theoretical questions might better be placed in bridging the gap between the researchers in automated reasoning and those who might use an automated reasoning program. 
     in particular  we must find a way to inform various individuals of how a reasoning program works and how to  think  the way it does  and make clear that  with patience and pain  communication with such a program is possible and available on various levels. for example  one argument for using such a program is the fact that it can  upon request  present the precise derivation information permitting the user to ascertain what may be missing from the input  or why the program is struggling. if the user doubts the results obtained with an automated reasoning program  the user can examine each step of the reasoning process. acquainting those who might use an automated reasoning program that such advantages exist and that various successes have occurred w i l l help. in addition  we must seriously consider certain current practices. 
     among the most dangerous is that of writing about advances in automated reasoning but with no evidence. of course a paper can be of substantial value even though no experimental data can be quoted. however  actual problems that are solved are  in the final analysis  the only real sign of progress. the problems need not be open questions. proving a well-known theorem  even if t r i v i a l   counts. verifying a small computer program counts. solving a puzzle counts. what must be viewed with grave question is the paper that has the appearance of a mathematics paper  but l wos 	1 
whose only examples are either propositional or purely syntactic. 
     with few exceptions  propositional examples or purely syntactic examples taken from f i r s t order predicate calculus are valuable only for expository purposes. an illustration  for example  that consists of a set of clauses containing variables  functions  and predicates  but for which no meaningful interpretation can be given  must be viewed with skepticism when it is offered as evidence of the value of a new concept. the usefulness of an inference rule or strategy cannot be demonstrated by such an illustration. in fact  the conjectured value is highly suspect  for such a conjecture should at least appeal to intuition. such an appeal in most cases should in turn be based on some real example  some problem selected from the existing literature  or some problem that has meaning to individuals outside of automated reasoning. when the value of a new idea can be indicated only by a syntactic example  or when the weakness of an idea can be illustrated only by a syntactic example  the corresponding claim is suspect. we therefore recommend very strongly that papers include examples that correspond to real problems. since the literature suffers from 
a paucity of such problems  you can turn 	to 	puzzles 	for 	that 	domain provides a wealth of examples. 
     some puzzles correspond to problems that might be faced by some industry  at least in miniature. as one example  consider the problem in which you are asked to design a circuit and are required to use only nand gates. the circuit has two inputs  x and y  and two outputs  y and x. the input x is above the input y  but the reverse is true for the outputs. finally  you are required to build this circuit with no crossing wires. this puzzle has been solved with the program itp produced from lma. 
     for a more complex example  you are asked to build a circuit with inputs a  b  and c  and with outputs not a  not b  and not c. you can think of the inputs as each taking on values 1 or 1. you are permitted to use as many or gates and as many and gates as you wish  but no more than two not gates.  incidentally  this problem was brought to our attention by e. snow of intel  an attendee at the 1 workshop on automated reasoning  which illustrates the value of such tutorial/dialogues.  the problem can be phrased equivalently as a problem of moving the contents of three locations to three other locations in memory  using  move    or    and   and  complementation  instructions. you are of course limited to the use of no more than two  complementation  instructions. this puzzle has also been solved with the program itp  but substantial time was required as compared with the previous circuit design puzzle. 
     by including actual problems as part of the illustrations of the potential value of a new inference rule or a new strategy  the writer of the paper presents information by which the new contribution can perhaps be judged. in addition  if the problem has not been presented before  the 
     
1 	l. wos 
writer has provided a needed addition to the pool of problems. the preferable case  of course  is that where actual results from a computer run can be quoted. when those results reflect that another previously open question was solved with the assistance of an automated reasoning program  they take on added significance. perhaps the most significant of all is the case in which an automated reasoning program is successfully used in some industrial or commercial application. 
     when the suggestion was made that experiments using an actual automated reasoning program were needed  a typical response was that no program was easily available and writing one required too much time. that void has now been f i l l e d . in fact  a portable automated reasoning program itp can now be obtained. moreover  a system lma  for logic machine architecture  consisting of a set of procedures or subroutines for producing a reasoning program satisfying given specifications is also available. both itp  and lma  are due to lusk  mccune  and overbeek. the system lma has been ported to a number of machines  including rather inexpensive ones. it offers access to a 
     large integrated reasoning program  thus permitting the user the simultaneous use of various inference rules and strategies that in turn permit comparisons to be made. equally  the structure permits the removal of unwanted procedures. the program is written in pascal  and therefore the ai community might wonder how accessible it is for integration with existing software. lma is designed to interface to lisp and to programs like macsyma  and is even prepared for multiprocessing. 
the lma system is structured to permit a researcher in automated reasoning to adopt a language other than clause input  to add to the array of inference rules  and to make other similar modifications. since a number of the central concepts of the field have resulted from experimentation  we recommend that  if no alternative exists  you obtain a copy of lma and experiment freely. the lack of a suitable reasoning program on which to test ideas is no longer an obstacle. 
     the foregoing remarks do not mean that we endorse an ad hoc approach. rigor and care in both the development of the theoretical foundations and the design and implementation are mandatory. in almost all instances  for example  soundness is required. experimentation that includes a careful comparison with the work of others is most laudable. what the foregoing does say is that those who considered automated reasoning  and hence automated theorem proving  at best an ivory tower discipline were and are in error. practical applications may occur sooner than anyone might have guessed  if the progress of the last few years is an indication. 
     as mentioned earlier  we must convey to various potential users what automated reasoning is about. the fact that a reasoning program can cope with problems that require moving cannibals  playing dominos on a modified checkerboard  or weighing billiard balls comes as a surprise to many. the natural reaction to such a claim is skepticism  even sometimes by members of the field itself. what is necessary is the usual: namely  to educate people about what can be done. were an interface available permitting a user to communicate to an automated reasoning program in the user's own language  the gap and resistance would narrow rapidly. the design and implementation of such a translator is truly a worthy project. although this useful interface is s t i l l missing  the present state of automated reasoning  as a whole is most encouraging. 
	1. 	the futpre 
     the future is far more promising than many might imagine. in fact  exciting opportunities now exist  both for research and for applications. many basic research questions in automated reasoning remain unanswered  questions that are challenging in themselves but also have substantial relevance to solving problems in other areas. for example  can the power of the set of support strategy that is most evident at level 1 be recursively extended to higher levels in the clause space  what strategies can be formulated to tightly control pararaodulation or comparable inference rules for building in equality  a number of applications appear quite tractable. they include the design and validation of circuits and chips  the chemical synthesis of complex compounds  robotics  program verification  and database inquiry. 
     both those already active in automated reasoning and those who may wish to use an automated reasoning program should experience great excitement. the probability that such programs will be commonplace in but five years has increased from essentially zero to one half. among the factors that have caused this change are the progress that has occurred in just the last four years and the trend in the cost and in the type of computer that is available. within two years  a computer with one megabyte of memory may be available for less than 1 dollars. the user can then port an lma-based system  or an alternative  to such an inexpensive machine. experimentation  formulation  development  and implementation will be accessible to many and diverse individuals. comparisons of representations  of inference rules  and of strategies will be possible  and on real and varied problems. the evidence gathered in the past few years  demonstrating the value and usefulness of a resolution-based reasoning program with its attendant features  may cause many computer scientists and others to share the fascination of automated reasoning. but even more is to come. 
1. a forecast of what is to come 
     at home  you have a set of discs; and at the office  you have a copy of each. on your home computer resides a reasoning program; on the office computer  a duplicate resides. by selecting the appropriate disc  you can have a dialogue with the reasoning program on a variety of topics. the topics include scheduling the day's activities 
     
so that conflicts are avoided  analyzing the consequences of a proposed decision  and prioritizing tasks to be accomplished. you carry a few of these discs with you so that they can be used with your reasoning program on your pocket computer  should some important problem arise. 
     your personal reasoning program can learn from previous experiments. when asked to solve a problem  it can determine that the given strategy must be replaced by another. given the problem  your reasoning program can choose a representation that has the best chance of permitting it to solve the problem. it can decide that more unit clauses are needed  or that more equality clauses would help  and then set about to find them. finally  your reasoning program can examine its output  presenting to you only the more interesting results. in fact  it can find significant theorems  make conjectures  and suggest concepts that might be worth studying. 
     you have become aware of four new areas of research with commercial possibilities. their respective subjects of investigation are: systems of axioms or assumptions that permit a reasoning program to attack problems in new areas; inference rules that are tailored to specific problem areas; strategies that enable a reasoning program to be very intelligent in its attack on a given problem; and  finally  reasoning programs themselves. should you spend any of your research time on any of these areas  your personal automated reasoning assistant may have the answer. such a scenario may sound like science fiction  but it may well be scientific fact in the near future. 
	1. 	conclusions 
     the field of automated reasoning  and hence automated theorem proving  has progressed rapidly in the previous four years. open questions in mathematics and in formal logic have been answered with the assistance of an automated reasoning program. logic circuits have been designed and validated  and by researchers with l i t t l e or no background in automated reasoning. complex algorithms have been verified using a theorem-proving program. representatives from various industries are expressing both interest and curiosity about the potential of the field. one advantage of using a reasoning program is the information contained in its output. all derivations can be given explicitly and completely  and can be checked algorithmically. examination of results from early runs often shows what is missing from the input or shows why the program is struggling. the results can be trusted  for they are obtained with inference rules that are sound  that yield conclusions that follow inevitably and logically from the assumptions. even when probabilistic reasoning is desired  as in certain expert systems  a means exists for having an automated reasoning program obtain the results. 
     admittedly  using an automated reasoning program is often d i f f i c u l t   but the rigor and unambiguity often more than compensate for the required 
	l. wos 	1 
effort. an interface permitting the user to communicate in the user 's chosen language would be of obvious and great value for it would sharply reduce the difficulty of using a reasoning pro-
gram. what we have shown is that  even without this interface  a resolution-based  automated reasoning program such as aura provides invaluable assistance in problem solving. the power of such a program is derived not only from its array of inference rules  but also from procedures such as demodulation  subsumption  and the strategies that it employs. 
     what is needed now is much experimentation. experimentation has led to the formulation of a number of important concepts of the field. where previously such experimentation was made difficult by the lack of a suitable program  now such a program is available. moreover  a system lma is available and portable  and provides the researcher with the opportunity of tailoring an 
automated reasoning program to given specifications. only by using a reasoning program to attack problems both in research and in application can we gain the needed information to solve certain basic problems of the field. such usage has resulted in the advance of automated reasoning from conjectured usefulness to actual usefulness  and will result in advancing the field to the stage of wide acceptance and use. 
	much is s t i l l unknown 	about 	representation. 
more powerful inference rules are needed. more effective strategies must be found  for without strategy even the simplest of problems becomes hard. nevertheless  with all that remains to be accomplished  automated reasoning has made important advances  resulting in more powerful and versatile reasoning programs. perhaps soon such a program will be used by many in both research and for applications  and will function as an automated reasoning assistant. 
