recovering problem-solving activities from query messages 
	y o s h i h i k o 	h a y a s h i 
n t t information and communication systems laboratories 
1 take  yokosuka  1 j a p a n 
e-mail: ha.yashi nttnly.isl.ntt.jp 

a b s t r a c t 
we investigated a set of query messages taken from an usenet newsgroup  and analyzed relations between the nature of problem-solving activities and their natural language descriptions. based on the corpus investigation  this paper proposes an efficient computational mechanism for recovering problem-solving activities from query messages written in japanese. the main claim of the paper is that the underlying problem-solving activity described in a natural language message can be efficiently recovered if provided with general knowledge on human problem-solving and the associated linguistic patterns in the descriptions. 
1 i n t r o d u c t i o n 
in this paper  we focus on trouble-shooting type problem-solving activities. one general way to solve such a complex problem is to know a solution which might solve the problem and to apply it. these days some people utilize computer networks as a forum useful for problcm-solving llammond  1 . thus understanding how people ask for information with electronic messages will be inevitable to realize an intelligent information access function on information super highways. 
   with this motivation  we started this work with an investigation of a set. of actual query messages  which had been taken from an usenet newsgroup krol  1 . the newsgroup chosen as our corpus is  fj.sys.mac 1  which provides a forum of discussions about apple's macintoshes  mainly for japanese-speaking people. we selected forty-two messages  aimed at trouble-shooting  out of 1 query messages which appeared in a threemonths' term in 1. each of these selected messages contains a description of the writer's trouble-shooting type problem-solving activity. 
1 a 	m o t i v a t i o n a l e x a m p l e 
let us start with a translated and slightly simplified example of an actual query message taken from the corpus. 
     1  needless to say  there are no particular intentions for the choice. 
 example  
s1: i found my mac ii had been infected with some kind of virus. s1: so  i wanted to run a vaccine program and s1: t r i e d to make my mac read an ms-dos formatted 1dd floppy disk. s1: however  apple file exchanger could not read i t . s1: can't maciis read ms-dos formatted 1dds  
   the story begins with his/her discovery of a trouble  si  and ends with a query  s1 . sentences s1 through s1 describe his/her trouble-shooting type problem-solving activity. how can people read this message  from s1  we will be able to guess that  at least for him/her  running a vaccine program is a way to solve the trouble stated in si. thanks to the marker  so  in s1  we will be able to guess this  even if we do not have good knowledge about disinfecting computer viruses. 
   on the other hand  the relation between s1 and s1 seems to be unclear on two points. first  because the two sentences are connected by the conjunction  and   there are two possibilities for interpreting the role of the action described in s1; that is  either running a. vaccine program followed by making mac read a 1dd disk will shoot the trouble  or to run a vaccine program  making mac read a 1dd disk is necessary. main verbs in both sentences may provide a slight clue. however  it does not seem to be a strong one. the domain knowledge  in general  might help the disambiguation process. however  if his/her actions were based on his/her wrong belief or knowledge  even correct domain knowledge would not be of help1. in either case  it is clearly shown by s1 that his/her trial to make mac read a 1dd disk failed and this suggests that he/she still cannot disinfect the virus from his/her macii. 
   note that the entire problem-solving process described in the message can be seen as a goal-directed activity. the trouble stated in si may prevent him/her from achieving his/her primary goal  which is not explicit in the message. therefore he/she introduces a new goal  disinfecting the virus. the activities described in s1 through s1 are associated with the new goal. in addi-
1
　　 in this example  his/her doing s1 is actually underivable from correct domain knowledge. most of the response messages to this query have pointed it out. 
	hayashi 	1 
tion  the query stated by s1 can be seen as a step of the problem-solving  although the level differs from the actual activities. 
1 a recovery mechanism 
1 overview 
our recovery mechanism consists of three cascaded processes. the first process identifies message fragments  each of which describes a single problem-solving step of the entire activity  by recognizing some distinctive surface expression patterns  as in many information extraction systems hobbs  1   kitani  1   each fragment is then assigned a sub-graph which represents the structure of the step by the second process. the third process finally integrates these sub-graphs and represents the entire problem-solving activity as a set of graph structures with help from general knowledge on problem-solving and the associated linguistic heuristics in the discourse structures. each of the graphs represents a possible underlying problem-solving activity. we call such a graph problem-solving graph  or ps-graph in short. 
1 o n t o l o g y for the ps graphs 
in this paper  we assume that a goal state is enabled by one of the alternative goal-achieving actions  and a goal-achieving action is generated by a sequence of decomposed actions. 

there are four node types for the ps-graphs; 
  g node: it encodes a goal state of the agent  writer   and may have its value  achieved/unachieved. 
  p node: it encodes that a problematic situation  a trouble  came about  and may have its value  fixed/unfixed. 
  x node: it encodes an action by the agent  and may have its value  succeeded/failed. 
  xp node: it is a composite node by an x node and a p node connected by a causality type link. it encodes a causal relation  an action caused a trouble. we have ten direct link types as shown in table 1. 
  action type: alternative link encodes the action x is one of the alternative actions which enables the goal 
1 	planning 
g. enable link is used in cases where x is the only action to enable the goal. a-step link encodes the action x is one of the decomposed action to achieve the goal g. generate link is used in cases where x is the only decomposed action. not-executable encodes the problem p prevents execution of the action x. 
  causality type: caused link encodes the action x caused the problem p. cause-always link is used when the agent knows a fact that x always causes p which may be an undesirable side-effect. 
  problem-solving type: to-solve link encodes the agent has a new goal state g in which the problem p does not come about. it is automatically introduced whenever the agent knows a problem came about. 
  auxiliary type: similar link connects two same/similar problematic states. it is typically used in cases where the same problem comes about again  in spite of the fact that a problem-solving activity has been conducted. 
1 r e c o v e r y of single ps s t e p 
1 	types of problems 
we looked through the forty-two objective messages and extracted sixty-three problem description fragments. table 1 classifies types of the problems. the classification was conducted by focusing on following three points: 
1. did he intend to do some action  
1. did he actually do the action  
1. is there a problematic situation /si now  
　in the table  example expressions in english and the number of occurrences for each type are also shown. here  we distinguished two situations: 
  fl  primary : the problem is introduced as a pri-mary problem for the writer. because most of the problem-solving activities are described in chronological order  it appears prior to the other levels of problems in the descriptions. 
  f1  lower-level : the problem came about during the problem-solving activities. it mainly describes a situation where the writer's goal-achieving or problem-solving activity caused the same problem or introduced a new problem. 
　note that we included the problem type  f  in our variety of problem types. in this type  actually  there is no trouble anymore. for the example in the table  the writer fixed the problem  the print process doesn't terminate  by an action  send ctrl-d to the printer . however  we can imagine that he/she is not convinced by the solution  and wants to know a better solution. we see human problem-solving in a broader sense than usual. 
1 	identifying p r o b l e m descriptions 
table 1 lists expression patterns which can be used for the identification of problem descriptions. by these patterns  1%  1  of the problem descriptions in the 

corpus are covered. particular modal expressions in type-a provide the strongest clues; and these are closed expressions. 
   here we would like to remark on two major modal expressions which strongly suggest that the associated propositional part of a description describes a problematic situation. 
  verb +  te-shimau : this expression's original func-tion is to represent the perfect tense. however in many cases  it represents a nuance that the writer thinks/feels that the situation described by the main-clause is undesirable for him/her  masuoka  1 . in this domain  it turns out to be describing a problematic situation. 
  verb +  te-kure-nai : this is a negation form of  te-kureru   which represents a situation where the agent of the verb is not the writer and the associated situation is desirable  empathy in  kuno  1   for him/her. therefore  in this domain  its negation form   te-kure-nai   represents that the writer thinks the situation caused by a systems/program's behavior is problematic. 
   in contrast to these expressions  other types are open expressions. thus  we must prepare a set of explicit patterns which covers possible expressions in advance. 
1 	r e c o g n i z i n g p r o b l e m t y p e 
the problem types  b  through  f   shown in table 1  are expressed mainly by conditional clauses/sentences. table 1 lists combinations of expression patterns by which we can map an identified problem description into one of the problem types. in the table  we indicate the patterns as a triple  x-part  connective  and y-part; here  x-part is the antecedent and y-part is the consequent of a conditional expression. the following are brief explanations about the distinctive japanese connectives which appear in the table with respect to the problem types. 
   -baai   = in case of -ing : use of this connective suggests that the conditional sentence describes a kind of fact. thus  it insists that the problem type may be  b   in which an undesirable side-effect caused by an action is described. 
   -nodesuga  : this connective establishes the an-tecedent  x-part  as a background description. use of this connective  together with an intentional expression in the x-part  suggests to us that one of the pre-conditions for the intended action did not hold at the time. 
   -to   = if/when : this connective is the most com-mon and neutral one. it corresponds to  if* or  when  in english. 
   -noni/nimo kakawarazu   = even if : these con-nectives might be similar to  even if'' or  although  in english. as  masuoka  1  discusses  these connectives emphasize that there is an expectation violation for the speaker. therefore  this type is strongly connected with the problem type  d1  and 
 e . 
　we confirmed that the mapping rule gave us a fairly accurate result  average-recall: 1%  average-precision: 1%  toward the corpus data by a hand simulation. as the result shows  in the current mapping rule  stress is placed on the precision rate. 
	hayashi 	1 

1 	assigning a sub-graph 
by the second process of the mechanism  each of the extracted fragments is then assigned one of the ready-made sub-graphs shown in figure 1 according to its problem type. each situation and the associated newly introduced goal g can be described as follows: 
  type  a : he/she has a new goal state g in which the problem encoded in p is fixed. 
  type  b : he/she knows that there is an undesir-able side-effect represented by p. the new goal g is either  execute x without p  or simply solve p. 
  type  c : he/she knows that one of the preconditions for executing x did not hold. hence  he/she believes that x is not executable. to make hold the condition and make x be executable is the new goal. 
  type  dl : he/she knows that the action x caused a problematic situation p  and has a goal to solve it. the problem p would prevent achievement of upper-level goals. 
  type  d1 : he/she knows that the action x  intended to solve an upper-level problem  caused same problem p again; and he/she has a new goal to solve it. 
1 	planning 
  type  e :  allen  1  introduced a predicate nott1-d1 a t p  it would be true if the plan p includes not performing the action a at the time t. like this treatment  we regard not performing the action x intentionally as a kind of action. therefore  we link the x' and the p node by the caused link. we can imagine  in this case  that the writer is wondering why the solution didn't work. the new goal g  thus  would be to know the reasons  and the associated information request may be described in the query message. 
  type  f : as mentioned in 1  the sub-graph en-codes an extended problem-solving activity. the newly introduced goal g would be to know a better solution to solve the once solved problem p. that is  the g would be strongly associated with an information request in the query message. 
1 	recovery of an entire ps activity 
1 	overall algorithm 
figure 1 outlines the overall algorithm. the input to the algorithm is a set of sub-graphs provided by the second process. as far as we looked through the set of messages  most of the problem-solving activities are described in chronological order. thus  the algorithm basically iter-

ates through the each sub-graph in the input set  and constructs a set of possible ps-graphs incrementally 1. 
1 	l i n k i n g s u b - g r a p h s 
t h e base-line 
the central part of the algorithm links a current subgraph  c-graph in the algorithm  into a ps-graph being constructed. the procedure  make-graph-1  does the job. the crucial point here is which node in the c-graph should be connected to which node in the being constructed ps-graph by which type of link. 
　the answer to the first point is provided by the procedure  get-top-node. it simply returns the top node in the c-graph as one part of the connection point. note that we can naturally expect that the returned node is limited to the action type  x node . as indicated in figure 1  all the top nodes are x nodes  except for problem type  a  and  f . because the problem type  a  only appears in the beginning of descriptions  we don't have to worry about this. in addition  the problem type  f  can be seen as an extension to the main problem-solving activity; the top p node would be simply linked to another p node by a similar link 1. 
　the answer to the second point is given by the procedure  get-link-points. given a ps-graph being constructed  it returns possible nodes in the ps-graph which can be linked to. according to the graph ontology introduced by table 1  g nodes  x nodes and p nodes would be the candidates. however  we can exclude p nodes  as these are provided only by the input to the algorithm. they are already pointed by x nodes  or they are toplevel nodes. 
　the answer to the third point is provided by the procedure  check-linkable. given a pair of nodes which consists a connection point  it returns a type of link to be used. based on the discussion so far  a possible pair {psgraph-node  c-graph-nodo} is either {g node  x node} or {x node  x node}. as enable/generate links are special cases of alternative/a-stcp links respectively  the procedure returns alternative for the first pair  and a-step for the second pair. 
constraints a n d heuristics for reducing the candidates 
the get-link-points may return more than one node in a 
ps-graph being constructed as a candidate of the linking points. as this nature is a source of the ambiguities in ps-graphs  it is important to reduce the number of the candidates to avoid the combinatorial explosion. 
   we can utilize some constraints to exclude inappropriate candidates. first  we cannot select the x nodes which are already marked failed as a candidate: the agent cannot perform any action in order to perform an already failed action. second  we cannot choose the g nodes which are already marked achieved as a candidate. such g nodes are possible  if the  f  type sub-graph has already been introduced to the ps-graph. these constraints seem to naturally come from general schema of 
s
for the explanation  the algorithm is slightly simplified. 
there would be several ways to optimize it. 
we simply ignore this case in the rest of the paper. 

human problem-solving activities. third  as a ps-graph is constructed as top-down and left-to-right with time  we can use this constraint to reduce the candidates. 
   furthermore  we can introduce some heuristics to prune unlikely candidates. the following are principles 
1
 which also come from general schema of human goal-
achieving activities: 
  principle of alternative actions: suppose x  through xn are alternative actions to enable a goal g  and are sorted by goodness of the actions. it is natural to assume that the agent will try to perform a'i + 1 only when he/she failed to perform a  -. 
  principle of decomposed actions: suppose a'i through xn form a sequence of the decomposed actions to generate an action x. it is natural to assume that the agent won't try to perform xi+1 if he/she failed to perform xt. 
   with these principles  the associated heuristics can be summarized as follows: in a situation like figure 1 a   linking the c-graph to g is allowed only when the xi is already marked failed. that is  failure of x{ must be represented in the description. the g nodes which violate this cannot be the candidates. on the other hand  if there is a parallel relation in the associated discourse structure  the unking is strongly preferred. 
　in a situation like figure 1 b   linking the c-graph to x'o is allowed only when the xi is not already marked failed. the x nodes which violate this cannot be the 
1
　　 of course  these principles are too strong. however  we confirmed that most of the messages follow these principles. 
	hayashi 	1 
candidates. on the other hand  if there is a temporal/sequential relation in the associated discourse structure  the linking is strongly preferred. 
linking sub-graphs actually 
given a ps-graph being constructed  a linkable node in the ps-graph  a c-graph and a possible link type  the procedure link-graphs actually links the c-graph into the ps-graph. figure 1 has already shown how the linking would be done. 
　however  note that when a c-graph is linked to a g node in a ps-graph  another graph  as shown in figure 1  must be generated. as mentioned in 1  we assume that a goal state is enabled by one of the alternative goalenabling actions  not directly by a sequence of decomposed actions. but  these goal-enabling actions are often missed in the natural language descriptions. therefore  to handle such a case  we must assume the existence of a virtual goal-enabling action and incorporate it in the ps-graph. we call such a virtual goal-enabling action virtual action  and denote it as x  in the ps-graphs. 
1 	post-process 
the following are conducted as post-process. 
　reducing redundant ps-graphs  reduce-graphs : as enable/generate links are special cases of alternative/astep links  this process first checks the alternative/a-step links that do not have sister links and changes them to enable/generate links. as often redundant ps-graphs are constructed due to the virtual action nodes  the procedure next checks redundant graphs  and preserves the most simple ones only. 
　assigning success/failure values to nodes  assignvalues : based on the principles of alternative actions and decomposed actions  we can assign succeeded/failed to action nodes  achieved/unachieved to g nodes and fixed/unfixed to p nodes in a ps-graph  by propagating 
1 	planning 

the input  sg1  to both sg1 and sg1 in the next iteration. in sg1  go and xo are possible linking points  but only one graph  sg1  result  shown in  c  . sg1 and sg1 are excluded by the heuristic based on the principle of alternative actions. on the other hand  in sg1  x  and xo are possible linking points  and sg1 and sg1 result  shown in  d  . 
   post process: three graphs  sg1  sg1 and sg1 are passed to the post process. by the procedure reducegraphs  sg1 is identified as a redundant variant of sg1; therefore  it is thrown away. two graphs  sg1 and sg1' are finally provided as possible ps-graphs  shown in  e  . 
note that the ambiguous relationship between s1 
  run vaccine   and s1   make mac read a 1dd disk1'  is clearly captured by these two ps-graphs. also  we know that the primary problem   infected with virus1'  is still unfixed in either case from the ps-graphs. 
1 	discussion 
clearly  the work reported here has a close relation to the so-called plan recognition. therefore  it may be worth mentioning our view on the relation here. roughly speaking  plan recognition in natural language understanding has long been studied from the perspective of for hearer  understanding the speaker's utterance is recognizing the speaker's plan which generates the utterance  and it is assumed that the hearer and the speaker have same plan library. 
   this assumption seems to be too strong to handle actual human dialogues/messages. for one thing  a plan which is valid for the speaker can be invalid for the hearer. thus  we cannot assume it in actuality. one of the important works which addressed the issue would be  pollack  1 . in the paper  pollack views plans as complex mental attitudes and discusses how a speaker's invalid plans can be handled in dialogue understanding. our work reported here was partly inspired by that work. 
however  as woods points out in his comment  voods  1  to pollack  she does not deal with partially specified plans. as shown in this paper  one can have an incomplete plan in a problem-solving activity. for example  one might plan to run a vaccine program in order to disinfect a computer virus without knowing the actual vaccine program. our notion of the recovery of problem-solving activities can include such cases; incomplete plan or precondition failure in the plan recognition enterprise are handled themselves as one of the problematic situations. 
   besides this  woods made another important comment in his essay. he questions the role of surface expressions by introducing an example;  i want to get tenure  so i've rented a car . he says   the conjunction so unambiguously signals the intended goal-achieving relationship without the necessity of determining the plan in order to infer it . this paper may provide an answer to this question  as we discussed particularly with the example. 
1 	conclusions and future works 
this paper proposed an efficient computational mechanism for recovering problem-solving activities from query messages without particular domain knowledge. this work  however  may be a first trial  and there remain several issues to be worked out. 
   from a computational viewpoint  we must first evaluate the actual performance of the mechanism through implementation and experiments with a larger set of unseen data. on the other hand  from a theoretical viewpoint  there are a number of harder issues. particularly  our main concern at the moment is the formalization of human problem-solving  trouble-shooting  activities in terms of mental processes  as  pollack  1  formalizes simple plans as complex mental attitudes. 
acknowledgments 
1 would like to thank jerry hobbs for his valuable advice on this work  and tsuneaki kato for his useful comments on an earlier version of this paper. the work was done mainly while i was staying at csli  stanford university. thus  thanks also go to people at csli and ntt. 
