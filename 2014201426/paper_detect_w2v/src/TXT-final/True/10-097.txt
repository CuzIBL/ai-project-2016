 
     context-free attribute grammars are proposed as derivational models for proofs in the predicate calculus. the new representation is developed and 
its correspondence to resolution-based clause interconnectivity graphs is established. the new representation may be used to transform a predicate calculus characterization of a problem into a regular algebra characterization of the solutions. 
     the new representation can be used to simplify the search for proofs. it allows us to express and derive predicate calculus proofs as a constraining function that serves as a filter to the set of candidate proofs that ignore the arguments to predicates. the effect of this is to separate the underlying propositional structure from the restrictions imposed by the required unifications. 
     while previous theorem proving methods have been able to enumerate all proofs of a theorem  the method reported here is unique in being able to characterize all proofs of some theorems  representing even an infinite set of proofs with a finite formula. this work has implications for proof theory as well as providing a useful tool in the analysis of programs specified in logic. 
1. introduction 
　　this section gives definitions of clause interconnectivity graphs and context-free grammars. the definitions have been extended where needed to express the additional structure treated in this paper. a more detailed description of clause interconnectivity graphs is given by sickel. common definitions in theorem proving used here are given by chang and lee l   a  substitution 1 is a set of ordered pairs   t l / x l   t1/x1 ...tn/xn  where each ti is an arbitrary term and each xi is a distinct variable. for an arbitrary literal l  lo denotes the literal l with all occurrences of xi replaced by ti for l isn. similiar definitions apply for terms to  and clauses c. 
     a directed substitution is given by e     where 1 is a substitution  tl/xl ... tn/xn   and si and s1 form a partitioning of the variables of 1. for example   f y /x  1  a  / z j  x   y  z   is a directed substitution. 
a variant o  . of a directed substitution 
theorem proving-1: slckel 
1 

theorem proving-1: slckel 

theorem proving-1: s i k e l 
1 

figure 1: trees for abcdd 
     the string abcdd corresponds to the proof in which the sequence of resolutions corresponding to edges a  b  c  d  d are performed as shown in figure 1 ii . a-g are merely labels  not the literals themselves. because edges represent complementary pairs  a   e  d   f  b = g; dashed lines connect these pairs in the proof for the convenience of the reader. each edge traversed is denoted at the corresponding resolution step  also for convenience. 
thm 1. for the ground case  the set of deletion trees for node n of cig c is equivalent to the set of derivation trees for strings derivable from nonterminal n using the productions of the grammar g derived from c. 
proof the proof is by induction on the depth of the trees. both cases contain a basis step as an instance. there are two operations for constructing each of the deletion trees and derivation trees. we shall show that the two pair correspond. the first production for g does not apply since we have no way of generating s from any other nonterminal. part a construction rule a for deletion trees corresponds to production rule b of grammars constructed from cig's. figure 1 shows the corresponding constructions. 
figure 1: a corresponding pair of construction rules for deletion and derivation trees 
for k=1 the two trees are identical. for k 1  we assume that if t li  is equivalent to d li  for l isk then figure 1 i  is equivalent to figure 1 ii  with the only required transformations being a simple tree reshaping. 
     from parts a and b we conclude that for any deletion tree we can construct a corresponding derivation tree and vice versa. q.e.d. 
thm 1 for the ground case  the set of solution trees of a cig is equivalent to the set of derivation trees for the language of the grammar g constructed from the cig. 
proof figure 1 shows the form of solution trees and derivation trees for l g . for each li  lsi k  we can construct equivalent t li  and d li . it is therefore trivial to show that for any solution tree we can construct an equivalent derivation tree from s. 

theorem proving-1: sickel 


theorem proving-1: slckel 1 

theorem provfng-1: slckel 


has language 	such that the number 
of o's equals the number of l's. we cannot  strictly speaking  represent that by our regular algebra. however we can loosen the ordering restriction on the r.h.s. of productions since the r.h.s.'s represent subgoals to be solved and the order is unimportant. this allows us to represent the language as a later paper will discuss this ordering relaxation and double recursion  e.g. a 1 a 1 a. 
     loosening the ordering restriction also allows the elimination of some redundancy. 	the first grammar derived from a cig that appears in this paper generates the following language:  abcdd  c'b'a'dd  abed  cbad . 	allowina reordering and 
representing edges 	and 	similarly  then 
the set reduces to  abcdd  abed . for further discussion of minimizing the set representing the proof schemata  see . 
1. conclusions 
　　we have described a method that represents proofs in predicate logic by a formal language. this language includes the full set of proofs for a given theorem. if we can describe the language with a regular algebra then we have a closed form for a possibly infinite set of proofs. this representation gives an analysis of the flow of the derivation. this analysis can be used on programs specified in logic to describe required execution flow of the program that leads to termination with the proper result. 
     the regular algebra representation can also be used to analyze the values that variables may have if the derivation is to terminate. in the logic program application  this analysis will be used to clarify the possible values of input and output variables  i.e. the domain and range of the function computed by the program. 
　　　studies are underway to apply this regular algebra representation of logic specifications. some of the areas presently being considered are: 
1  program synthesis 
1  plan formation 
1  question-answering 1  machine learning. 
