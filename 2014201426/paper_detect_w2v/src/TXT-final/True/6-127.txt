 
in rule-based systems  goal-oriented computations correspond naturally to the possible ways that an observation may be explained. in some applications  we need to compute explanations for a series of observations with the same domain. the question whether previously computed answers can be recycled arises. a yes answer could result in substantial savings of repeated computations. for systems based on classic logic  the answer is yes. for nonmonotonic systems however  one tends to believe that the answer should be no  since recycling is a form of adding information. in this paper  we show that computed answers can always be recycled  in a nontrivial way  for the class of rewrite procedures proposed earlier in  lin and you  1  for logic programs with negation. we present some experimental results on an encoding of a logistics domain. 
1 introduction 
logic programming with answer sets  gelfond and lifschitz  
1  or partial stable models  przymusinski  1  has been adopted as a framework for abduction  and a number of formalisms and top-down query answering procedures have been proposed  dung  1; eshghi and kowalski  1; 
kakas and mancarella  1; kakas et al  1; lin and you  1; satoh and iwayama  1 . 
the question we shall address in this paper is the following. 
with a sound and complete procedure for abduction  suppose we have computed explanations  conveniently represented as a disjunction  es = e1 v... v en for observation q. suppose also that in the course of computing explanations for another observation p  we run into q again. now  we may use the proofs es for q without actually proving q again. the question is this: will the use of the proofs es for q in the proof for p preserve the soundness and completeness of the procedure  
　in this paper  we answer this question positively  but in a nontrivial way  for the class of rewrite procedures proposed 
　*this author's work was supported in part by hk rgc cerg hkust1e. 
in  lin and you  1 . the main result is a theorem  theorem 1  that says recycling preserves the soundness and completeness. 
the class of rewrite procedures proposed in  lin and you  
1  is based on the idea of abduction as confluent and terminating rewriting. these systems are called canonical systems in the literature of rewrite systems  dershowitz and jouannaud  1 . the confluence and termination properties guarantee that rewriting terminates at a unique normal form independent of the order of rewriting. thus  each particular strategy of rewriting yields a rewrite procedure. 
　the general idea of recycling is not new. recycling in systems based on classic logic is always possible  since inferences in these systems can be viewed as transforming a logic theory to a logically equivalent one. in dynamic programming  it is the use of the answers for previously computed subgoals that reduces the computational complexity. in some game playing programs  for example in the world champion checker program shinook 
 www.cs.ualberta.ca/~chinook   the endgame database stores the computed results for endgame situations which can be referenced in real-time efficiently. 
　however  the problem of recycling in a nonmonotonic proof system has rarely been investigated. we note that recycling is to use previous proofs. this differs from adding consequences. for example  it is known that the semantics based on answer sets or  maximal  partial stable models do not possess the cautious nonmonotonicity property. that is  adding a consequence of a program could gain additional models thus losing some consequences. the following example is due to dix 1 : 
		 1  
p has only one answer set  thus  c is a consequence. when augmented with the rule the program gains a second answer set  and losesas a consequence. 
　the next section defines logic program semantics. section 1 reviews the rewriting framework. then in section 1 we formulate rewrite systems with computed rules and prove that recycling preserves soundness and completeness. section 1 extends this result to rewrite systems with abduction  and section 1 reports some experimental results. 

nonmonotonic reasoning 	1 

1 logic program semantics 
a rule is of the form 
where and are atoms of the underlying propositional language not c1 are called default negations. a literal is an atom or its negation a  normal  program is a finite set of rules. the completion of a program p  denoted 
comp p   is a set of equivalences: for each atom if does not appear as the head of any rule in p  
cornp p ; otherwise  	comp p   with 
default negations replaced by the corresponding negative lit-
erals  if there are exactly 	rules 	p with 	as the head. we write t for bi if bi is empty. 
　the rewriting system of  lin and you  1  is sound and complete w.r.t. the partial stable model semantics  przymusinski  1 . a simple way to define partial stable models without even introducing 1-valued logic is by the so called alternating fixpoints  you and yuan  1 . let p be a program and s a set of default negations. define a function over sets s 
of default negations: 	the re-
lation is the standard propositional derivation relation with each default negation not being treated as a named atom not 
　a partial stable model m is defined by a fixpoint of the function that applies fp twice  	while satisfying in the following way: for any atom and is undefined 
otherwise. an answer set e is defined by a fixpoint s such that 
1 goal rewrite systems 
we introduce goal rewrite systems as formulated in  lin and you  1 . 
　a goal rewrite system is a rewrite system that consists of three types of rewrite rules:  1  program rules from comp p  for literal rewriting;  1  simplification rules to transform and simplify goals; and  1  loop rules for handling loops. 
a program rule is a completed definition 
     cornp p  used from left to right: can be rewritten to and 	these are called literal rewriting. 
　a goal  also called a goal formula  is a formula which may involve v and a goal resulted from a literal rewriting from another goal is called a derived goal. like a formula  a goal may be transformed to another goal without changing its semantics. this is carried out by simplification rules. 
　we assume that in all goals negation appears only in front of a literal. this can be achieved by simple transformations using the following rules: for any formulas and   
1 	simplification rules 
the simplification rules constitute a nondeterministic transformation system formulated with a mechanism of loop handling in mind  which requires keeping track of literal sequences  where each is in the goal 
1 
formula resulted from rewriting two central mechanisms in formalizing goal rewrite systems are rewrite chains and contexts. 
  rewrite chain: suppose a literal is written by its definition w h e r e t h e n   each literal in the derived goal is generated in order to prove this ancestor-descendant relation is denoted a 
	sequence 	is then called a rewrite chain  
abbreviated as 
  context: a rewrite chain 
	records a set of literals 	for proving 
	g. we will write 	and call c a context. 
 a context will also be used to maintain consistency: if can be proved via a conjunction  all of the conjuncts need be proved with contexts that are non-conflicting with each other. for simplicity  we assume that whenever is generated  it is automatically replaced by t c   where c is the set of literals on the corresponding rewrite chain  and  is automatically replaced by 
　note that for any literal in a derived goal  the rewrite chain leading to it from a literal in the given goal is uniquely determined. as an example  suppose the completion of a program has the definitions: and then  we get a rewrite sequence  ' for the three literals in the last goal  we have rewrite chains from 
simplification rules: let $ and  t ; be goal formulas  c be a context  and / a literal. 
　sr1 merges two contexts if they contain no complementary literals  otherwise sr1 makes it a failure to prove. repeated applications of sr1 and sr1' can transform any goal formula to a disjunctive normal form  dnf . 
1 	loop rules 
after a literal / is rewritten  it is possible that at some later stage either / or / appears again in a goal on the same rewrite chain. two rewrite rules are formulated to handle loops. 
- s is called a positive loop and are both atoms and each literal on is also an atom; 
- s is called a negative loop and are both negative literals and each literal on is also negative: 
- otherwise  s is called an even loop. 
nonmonotonic reasoning 

in all the cases above  is called loop literal. 
lr1. is a positive loop or 
     an odd loop. lr1. 
is a negative loop or 
an even loop. 

a rewrite sequence is a sequence of zero or more rewrite 
steps 	denoted 	such that 
is an initial goal  and for each 1 is obtained from by 
  literal rewriting at a non-loop literal in 	or 
  applying a simplification rule to a subformula of 	  or 
  applying a loop rule to a loop literal in 
example 1 for the program given in the introduction  is proved but 
is not. this is shown by the following rewrite sequences: 

1 previous results 
in  lin and you  1   it is shown that  1  a goal rewrite system is a canonical system  i.e.  it confluent and terminating;  1  any goal rewrite system is sound and complete w.r.t. the partial stable model semantics; and  1  the rewriting framework can be extended for abduction in a relatively straightforward manner. 
1 goal rewrite systems with computed rules 
we first use two examples to illustrate the main technical results of this section. 
example 1 given a rewrite system suppose we have rewrite sequence the failure is due to figure 1: recycling may generate extra proofs 
result. however  one can see that the existence of the rewrite step 	implies the existence of a different way to prove 
contradicting that was rewritten to f in r＜. 
　before giving the next example  we introduce a different way to understand rewrite sequences. since any goal formula can always be transformed to a dnf using the distributive rules sr1 and sr1 ' and the order of rewriting does not matter  we can view rewriting as generating a sequence of dnfs. thus  a rewrite sequence in dnf from an initial goal 

can be conveniently represented by derivation trees  or trees  one for each representing one possible way of proving for any the d-tree for has as its root node  wherein a branch from to a leaf node corresponds to a rewrite chain from g that eventually ends with an f or some t c . as such a disjunct is a conjunction  a successful proof requires each branch to succeed and the union of all resulting contexts to be consistent. 
　the next example is carefully constructed to illustrate that recycling may not yield the same answers as if no recycling were carried out. in particular  one can sometimes get additional answers. 
positive loop on a. we may recycle the computed answer by 
replacing the rewrite rule for 	by the new rule  
we thus get a new system  say r1. suppose in trying to prove in fig. i  each d-tree consists of a single branch. the left 
we have 	two d-trees are expanded from goal p corresponding to the 
following rewrite sequence: 
where the last step makes use of the computed answer for 
　　the question arises as whether this way of using previously computed results guarantees the soundness and com-
pleteness. theorem 1 to be proved later in this paper an-	the next two d-trees are for goal g  corresponding to the 
swers this question positively. to see it for this example  as- rewrite sequence: sume we have the following  successful proof in r＜ 	
where the termination is due the even loop on had such 	now  we recycle the proof for p in the proof for g and com sequence existed  recycling would have produced a wrong pare it with the one without recycling. clearly  the successful 
nonmonotonic reasoning 	1 example 1 consider the program: 

d-tree for  the fourth from the left  will still succeed as it doesn 't involve any p. the focus is then on the d-tree in the middle  in particular  the node p in it; this d-tree fails when no recycling was performed. 
　since p is previously proved with context recycling of this proof amounts to terminating 	with a context which is the union of this context with the rewrite chain leading to p  see the d-tree on the right . but this results in successful proof that fails without recycling. 
　though recycling appears to have generated a wrong result  one can verify that both generated contexts  and  belong to the same partial stable model. 
thus  recycling in this example didn 1 lead to an incorrect answer but generated redundant one. theorem 1 shows that this is not incidental. indeed  if p is true in a partial stable model  by derivation  look at the d-tree in the middle   so must be c  and 
1 	rewrite systems with computed rules 
given a goal rewrite system r   we may denote a rewrite sequence from a literal g by  e. 
definition 1  computed rule  
let r be a goal rewrite system in which literal p is rewritten to its normal form. the computed rule for p is defined as: if 
f  the computed rule for p is the rewrite rule f; 
ifp 	then the computed rule for p is 
the rewrite rule p 
　for the purpose of recycling  a computed rule e is meant to replace the existing literal rewrite rule for p. if a computed rule is of the form f representing a failed 
derivation  it can be used directly as the literal rewrite rule for 
 otherwise  we must combine the contexts in e with the rewrite chain leading to and keep only consistent ones. 
recycling rule: 
let 	g1 	be a rewrite chain where gtl is a non-loop lit-
eral. let g -   and be the computed rule for further  let be the 
subset of 	containing any 	such that 	g is consistent. then  the recycling rule for gn is defined as: 
rc. 
　in the sequel  a rewrite system includes the recycling rule as well as zero or more computed rules. we note that the termination and confluence properties remain to hold for the extended systems. 
　we are interested in the soundness and completeness of a series of rewrite systems  each of which recycles computed answers generated on the previous one. for this purpose  given a program p we use to denote the original goal rewrite system where literal rewrite rules are defined by the 
clark completion of p. for all is defined in terms of as follows: let be the set of computed rules  generated  on for the set of literals then  is the rewrite system obtained from rlp by replacing the rewrite rules for the literals in by those in in the rest of this sectin  we will always refer to a fixed program p. thus we may drop the subscript p and write 
1 
　an important property of provability by rewriting is the so-called loop rotation  which is needed in order to prove the completeness of recycling; namely  a proof  a successful branch in a d-tree  terminated by a loop rule can be captured in rotated forms. 
　to describe this property  we need the following notation about rewrite chains: any direct dependency relation may be denoted by 	and we allow a segment  which may be empty  of a rewrite chain to be denoted by a greek letter such 	as 	and 	thus  we may write 	to denote a rewrite chain from 	to 	via 	to mean a rewrite 
chain that begins with 	followed by the segment denoted by 
　a rewrite chain may also be used to denote the set of the literals on it. 
lemma 1  loop rotation  
let 	be a rewrite system without computed rules. let be a d-tree for literal g that succeeds with context c. suppose 
a branch of ends with then  for any literal there is a proof of i that succeeds with the same context c. 
proof a loop  where g and are literals  can always be rotated as 
and so on  so that if n is a negative loop  or an even loop  resp.  so is its rotated loop. rotation over a d-tree can be performed as follows: remove the top node n  and for any link from the top node  attach the l i n k t o any occurrence of  the assumption of the existence of loop ensures that in every round of rotation there is at least one occurrence of the top node.  see fig 1 for an illustration where rotation proceeds from left to right.  it can be seen that the type of a loop is always preserved and the set of literals on the tree remains unchanged. 	
1 soundness and completeness of recycling theorem 1 for any is sound and complete. 
　we sketch how this can be proved. we can prove the claim by induction on the system without computed rules  is sound and complete  lin and you  1. now assume for all 
nonmonotonic reasoning 
with 	are sound and complete  and show that is also sound and complete. 
　we only need to consider the situations where rewriting in differs from that o f b e the set of literals whose computed rules are generated on . we can first carry out rewriting without rewriting the literals that are in in this case  rewriting from in both and terminate at the same expression  which is either or a dnf  say each can be represented by a d-tree. 
for the soundness  we assume 
t ds . for any d we need to show that there is a partial stable model m such that d m. consider the d-tree that generates d and suppose g is its root node. we can show inductively in a bottom-up fashion that all the literals on belong to the same partial stable model. 
　for the completeness  we can show that for any context generated in . the same context will be generated in then  is complete simply because is complete. 
　let;; and consider a proof of in that goes through p. in particular  consider a d-tree of this proof that contains p. since each branch of this d-tree can be expanded and eventually terminated independent of others  for simplicity  we consider how a branch g   p in the d-tree is extended. in  the computed rule for p is used while in rl it is not. 
we only need to consider two cases in rl: either g is proved via p and a previously computed rule  or the branch is terminated due to a loop. here  let us consider the latter only in expanding the rewrite chain     p in r  we may form a loop  say g - p- if the loop is in exactly the same loop occurs in rewriting p as the top goal in r1  so it is part of the computed rule for /;. otherwise it is a loop that crosses over 
p  in the general form 

where is the loop literal. as a special case of loop rotation over a branch  cf. lemma 1   the same way of terminating a rewrite chain presents itself in proving /; as the top goal in r  which is 

if the loop on n is a negative loop  or an even loop  resp.   so is thus the same context will be generated in 
　as given in the corollary below  if we only recycle failed proofs then exactly the same contexts will be generated. corollary 1 let r1 be puted rule is of the form let g be a literal and e be normal form. then  for any   
1 recycling in abductive rewrite systems 
as shown in  lin and you  1  the rewriting framework can be extended to abduction in a straightforward way: the only difference in the extended framework is that we do not apply the clark completion to abducibles. that is  once an abducible appears in a goal  it will remain there unless it is eliminated by the simplification rule sr1 or sr1'. in a similar way  the goal rewrite systems with computed rules in the previous section can be extended to abduction as well. once a 
nonmonotonic reasoning 
goal is rewritten to a disjunction of conjunctions of abducible literals and 
where each 	is either 	or an abducible literal  and is consistent for each z  then this result can be re-
cycled. 
1 experiments 
we have implemented a depth-first search rewrite procedure with branch and bound. the procedure can be used to compute explanations using a nonground program  under the condition that in each rule a variable that appears in the body must also appear in the head. when this condition is not satisfied  one only needs to instantiate those variables that only appear in the body of a rule. this is a significant departure from the approaches that are based on ground computation where a function-free program is first instantiated to a ground program with which the intended models are then computed. 
　to check the effectiveness of the idea of recycling  we tested our system on the logistics problem in ilin and you  1  . this is a domain in which there is a truck and a package. a package can be in or outside a truck  and a truck can be moved from one location to another. the problem is that given state constraints such as that the truck and the package can each be at only one location at any given time  and that if the package is in the truck  then when the truck moves to a new location  so does the package  how we can derive a complete specification of the effects of the action of moving a truck from one location to another. suppose that we have the following propositions: ta - the truck  package  is at location x initially; in - the package is in the truck initially; 
ta the truck  package  is at location 
after performing the action of moving it from to the package is in the truck after performing the action of moving the truck from to then in  lin and you  1  the problem is solved by computing the abduction of successor state propositions in terms 
of initial state propositions  abducibles  using the following logic program  see ilin and you  1 for more details : 
here the variables are to be instantiated over a domain of locations. for instance  given query pa 1 1   our system would compute its abduction as pa 1  v in  meaning that for it to be true  either the package was initially at 1 or it was inside the truck. 
which subgoals to compute first  if we want to compute 
1 

the abduction of all propositions  without the framework of recycling introduced here  the only way is to compute them one by one independently. with the idea of recycling  we can try to recycle previously computed results. the question is then which goals to compute first. this question arises even if we just want to compute the abduction of a single goal: instead of computing it using the original program  it may sometimes be better if we first compute the abduction of some other goals and recycle the result. 
　a simple solution is to find out the dependency relations among the propositions: a proposition p depends on q if either q is in the body of a rule whose head is p or inductively  there is another proposition r such that p depends on r  and r depends on q. 
　for our program above  it is easy to see that among the propositions that we want to compute their abduction of  those of the form in x  y  and those of the form ta x  y  z  are independent of each other  but those of the form pa x  y  z  are depended on propositions of the forms in  x  y  and ta  x  y  z . so we should compute first the abduction of in x y  and ta x  y z . now in x  y  is solved by rule  1   ta x  y  x  by rule  1   and as it turned out  when x / z   ta a'  y  z  is always false  and its computation is# relatively easy. for instance  for the domain with 1 locations  query ta 1 1  took only 1 seconds. in comparison  query pa 1 1  took more than 1 seconds without recycling. 
　table 1 contains run time data for some representative queries.1 for comparison purpose  each query is given two entries: the one under  nr  refers to regular rewriting system without using recycling  and the one under  wr  refers to rewriting system using computed rules about pa x  y  z . as one can see  especially for hard queries like pa 1  1   recycling in this case significantly speeds up the computation. 
1 concluding remarks 
we have considered the problem of how to reuse previously computed results for answering other queries in the abductive rewriting system of lin and you  for logic programs with negation  and showed that this can indeed be done. we have also described a methodology of using the recycling system in practice by analysing the dependency relationship among propositions in a logic programs. we applied this methodology to the problem of computing the effect of actions in a logistics domain  the same one considered in  lin and you  1   and our experimental results showed that recycling in this domain can indeed result in good performance gain. for future work we want to implement a system that can automatically analyse a program and decide how best to recycle previous computations. 
   'our implementation was written in sicstus prolog  and the experiments were done on a phi 1ghz notebook with 1 mb memory. for generating explanations for regular rewriting system  our implementation is a significant improvement over the one in  lin and you  1 . for instance  for a domain with 1 locations query pa 1 1  took more than 1 minutes for the implementation reported in  lin and you  1   but required less than 1 second under our implementation running on a comparable machine. 
1 
query 1 locations 1 locations nr wr nr wr pa l  1  
-pa l 1  pa 1 1  
-pa 1 1  pad 1  
-pad 1  
pa 1 l  
-pa 1 l  pa 1 l 1  
-pa 1 1  1 
1 
1 1 
1 
1 
1 
1 
1 
1 1 1 1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 
1 
1 
1 
1 | table 1: recycling in logistics domain. legends: nr - no recycling; wr - recycling ta a'  y  z  goals. all times are in cpu seconds. 
