 
use of minimal windows enhances the ab algorithm in practical applications as well as in the search of artificially constructed game trees. nevertheless  there exists no theoretical model to measure the strengths and weaknesses of minimal window search. in particular  it is not known which tree ordering properties are favorable for minimal window search. this paper presents a quantitative analysis of minimal window search based on recursive equations which assess the influence of static node values on the dynamic search process. the analytical model is computationally simple  easily extendible and gives a realistic estimate of the expected search time for averagely ordered game trees. 
1 	introduction 
the structure most frequently used for evaluating the performance of tree searching algorithms consists of a uniform tree of depth d and width w. in such regular trees the nodes can be categorized into type classes according to whether all descendants must be searched or only some of them  the so-called cut-nodes  . this was first done by knuth and moore   who classified the nodes of optimally ordered game trees into three types  figure 1 : 
figure 1: node types in an optimally ordered tree 
t.a. marsland 
computing science  university of alberta 
edmonton  canada t1g 1 
 tonyoalberta.cdn  
   in the following  we extend this node classification scheme to include unordered game trees and derive recursive equations to compute the average performance of both the ab-algorithm and minimal window search. 
1 	analysis of minimal window search 
minimal window search is based on the assumption that most of the subtrees will prove inferior to the best subtree searched so far. having traversed the first subtree with a normal window the remaining subtrees are searched with the minimal 
window 	where v represents the best available mini-
max value  e.g.  the value obtained from the first search . if the value returned is the subtree is indeed inferior. only when the value returned is is the initial assumption wrong and the current subtree must be re-searched with a wider window to determine its correct value. the re-search can be done either with an ab search in scout  1  and cob    or by performing a recursive self-call  as in negascout  and pvs . 
	reinefeld and marsland 	1 

　　to simplify presentation  the self-call minimal window version of negascout  as shown in figure 1  is referred to as ns. a variation  designated nsab  invokes  to do the re-search. it is formed by replacing the corresponding line of ns with 

the nodes visited when negascout traverses an averagely ordered tree are shown in figure 1 there the node types are prefixed with an  jv   and are changed from figure 1 because the tree is not optimal. for simplicity we initially assume that a re-search is never necessary  so figure 1 is valid for both ns and ns a b . negascout starts searching the root node of type nx with the full window  since there is not yet any better information  the root's left descendant is searched with the 
same full window  hence it is also of type nl. the remaining descendants of type na are searched with the minimal window 
 according to our average tree assumption  these cutnodes have only 1 -f g descendants. the first g descendants are again of type a1  whereas the  1 + y -th descendant is of type n1  since all w descendants of this n1 node must be searched to cause the cut-off one level above. 
the consistency of these equations may be checked by observing the special case of optimally ordered game trees  i.e.  the case 
 by setting k - 1  interior nodes have no cost  and e - 1  all leaf nodes have equal cost  it is possible to show that 

which is equivalent to abest case in odd-depth trees  as it should be . similarly  the consistency can be checked for even search depths. 
1 	analysis of 
the quantitative analysis of ab is more complex  because   

imal to full-width. 

and has descendants of 
1 	reasoning 


reinefeld and marsland 1 
	1 	discussion 
in this paper  we presented a simple  flexible and extendible analytical model to assess the expected search time of negascout and ab on averagely ordered trees. the model can be used to 
decide which of the algorithms to use in a given search task  when the ordering of the tree is known in a statistical sense. 
　　the tree ordering properties are described in terms of g  the number of extra-expansions in cut-nodes  and r  the frequency of changes in the principal variation. in practice  r is usually small since the second-best choice prunes almost as effectively as the best. although g  the number of extra-expansions in cut-nodes  might be as large as w/1 in random trees  most often heuristic information is available to sort the descendants before examination. for computer chess  average values of g in the vicinity of 1 are observed and in one study an average of 1 was quoted  1  p. 1 . although the mentioned study is not strictly comparable  since it used additional special-purpose pruning methods  it supports the view that the average value of g is small. thus our model provides the theoretical basis to explain why negascout and pvs are superior to ab in practice  1 . 
