 
	this 	paper 	describes 	current 	work 	at 	the 	university 	of 
pennsylvania centered around providing intelligent help r.:id advice to users of interactive task oriented systems. this work focuses on three genera! themes:  1  help systems should be active rntla-r t!:an passive;  j  help systems should coniain explicit models of the user  the ta-k and the system utility being u-ed and  1  the help system shoulj engage in an interactive dialogue with the user in order to identify the information he really needs. an experimental uv    system  wizard  has been implemented for the v ax/ vms' operating system to explore some of these issues. 
1. introduction 
　the state of the art in  help  systems has not changed much in the last dee .vie  or two' . current help systems typically fall into one of three general categories: key word systems  hierarchical key word systems and network systems   described more fully in  finin 1'j  . present approachs to providing help to inexperienced or infrequent users fails for two important reasons. first  current help systems have no real understanding of who they are trying to help  eg what a partirular user does and does not know  what goals users in general are likely to have   the topic they are providing information about  or the information they can provide second  current help systems are not interactive. the process of successfully requesting and getting the information the user needs is one in which both the system and the user should be active agents. at any point the party should be able to take the initiative. 
　as an example of a kind of help that current technology can not provide  consider the problem of the user who doesn't know he needs help. it is quite common for a complex system such as a text editor or operating system to be designed so that a new user can learn a few basic commands which are sufficient to accomplish most tasks additional commands which greatly extend the convenience and practical power of the system are provided for the user to  grow into . it is common  however  for some users to become trapped by the simple complete set of basic commands and never progress to learning the full power of the system. 
　a human advisor  watching such a user  might notice that he is not making full use of the system and volunteer advice about using more advanced commands. for example  if you see an inexperienced user issuing the following commands to your operating system: 
delete parse pas.l 
delete parse.pas.1 
　　　delete parse.pas.1 and leaving the file parse.pas.1  you might offer the following advice: 
　it looks like you're trying to delete all of the old versions of the file parse.pas. you can do this directly with the furge command. for example  you could have said: 
purge parse.pas 
and it would have had the same effect. 
　an anoint- sample of the shorlcommings of run cut systems i  lhat somcuiii i..a . know he needs help but not know how to ask for it consider ihc plight of a new user on a unix system  circa l＜1o  lies created hi  first file and would like to have it printed on his terminal. having had some experience with other operating systems  he make* mime reasonable giic .--s :it the command name: print  type  list  display  and show none of these work  o he derides to use i he i'nix heip system to find out what the appropriate comma-.d name is. again  he tries some familiar  and some unfamiliar  names: help  info     show  teach  learn  describe  apropos  what  please  etc. lie will have to experiment for a long time before he discovers the correct way to get information on the command to print a file on the terminal: m a n cat 
1. a knowledge based approach to kelp systems 
　the ultimate success of an intelligent help system will depend on the depth of its understanding of the task domain  the system it provides information about  and the user's knowledge of the system. some earlier work has been done on representing task domains 
 icienesereth 1  |ball 1  . representing iinplimentation  |brarhrnan 1    shrager hi   and on representing a user's model of a formal system   burton 1   |cioldstein 1'j  . we are attempting to combine these three sources of knowledge into a single  unified knowledge base. we have chosen to u-e the knowledge representation language kl-onk  brachman 1a  pj1b  as an implementation tool in investigating intelligent help systems. 
　we view the process of the user asking for help and receiving the information he needs as a complex  interactive process. both the help system and the user need to play an active role. each must be able to take the initiative and do some action toward achieving the ultimate goal - the user's receiving the information he needs in particular  we see this process as having at least six identifiable steps  given in the following list for each of the steps we indicate some of the strategies that can be used by the user and the system to satisfy it. 
1. does the user need help  both the user and the system must know that the user needs help. the user can discover this on his own and communicate it to the system by  pressing the help button . the system might discover it by observing that the user is encountering unexpected errors  by noting the user using a  catalogued bug   or by noting an unexpected inactivity by the user. 
1. what i n f o r m a t i o n does the user need  both the system and the user need to establish an initial description of the information that is needed. the user could try to establish this by exploring the information that is available on the system in a top-down manner by asking for very general help and then refining the question. the system could use its model of the user and of the current context he is in to make an educated guess as to what he is most likely to need to know. another strategy that the system could use is to provide the user with a menu  or a system of menus which enumerate all 

the relevant topics. 
1. what i n f o r m a t i o n can the system -provide  the user and the system need uwihave some model describing the information that the help .system can deliver. the user could discover this himself if the help system provided a  mcta-help  facility tint  could provide information on the help system itself. the system could try to inform the user about the range of information it could provide by presenting summaries of the available help or by enumerating only what it estimates to be the relevant topics. 
j which offerings match the needs  once we have a description of the information the user needs and descriptions of the information that the system can provide  we need to identify the best matches in general there will not be a one-to-one match. the user can use his own facilities to compare the descriptions or the system could use some sort of description-matching process to suggest matches. 
1. how does one ask for a particular pice- of i n f o r m a t i o n   once the user has derided what information he needs and which of the offered information matches his ne;d  he has to know how to specify that to the help system. a wide range of modes are possible which allow the user to d  scribe the information he v  -nts: topic names  key words  key words with qualifiers  simple natural language-like phrases and unrestricted natural language. the system  on the other hand  could take the initiative at this step by presenting a menu of likely choices or by selecting the most likely candidate ;md 'imply presenting it to the user 
   docs the user understand the help  once the user receives the information he has to understand it. it should be the systems goal to tailor  when possible  the information it presents the user to that user's level of expertise and previous experience the system should be actively trying to verify that the user has correctly understood the information he was given. the user should be able to ask for clarification or examples. the system might be prepared to offer background information  eg. definitions of terms  and alternative presentation of the same information 
1. wizard 
　wizard is an experimental help system whose domain is a subset of the vax/vms operating system   shrager 1    shrager and finin  1  . it attempts to provide inexperienced or infrequent  users with a certain kind of advice to help them learn to use the operating system efficiently. 
　in developing wizard we attempted to focus on the problem of recognizing when the user required help and volunteering advice. our approach is to recognizes correct yet inefficient command sequences and help the beginner become more proficient by indicating how these tasks may be done more efficiently. 
	t. finin 	1 
minimize the users work  e.g.  typing . consider: 
shunt process.mem 
shunt meeting.mem etc 	a 
rather than 
shunt *.mem 
on another dimension  we measure inefficiency in terms of system resources. the system typically provides special functions which perform operations much more sparingly than more general means would permit contrast: 
scopy notes.* oldnotes* sdelete notes.*.* 
w i t h 
skename notes* oldnotes.' 
　wizard recognizes such  less efficient  sequences and constructs help messages that provide either immediate advice or a pointer to a manual or online help entry in  lie following example  wizard's advice is shown indented: 
scopy teste test1. 
shelete teste* 
　if you are trying to change the name of tin filt test i. to testti. you could hart done tins mart directly with the run a mil comma    !.  .g. 
　　　$rename test i. test1. typt hel n rename for more information on the rename command. 
in our current wizard implementation we attempt to provide ;i nmi-interriipt ive interface through the use of multiple windows. wizard'* comments are presented in a special pop-up advice window which the user is frc to change the size of. eliminate or 
simply ignore. 
　the difficulty of wizard's task is  of course  to recognize when some sequence of commands constitutes a plan that a person is using to achieve a goal we have approached this problem by constructing a catalog of  bad plans  which novice users often use to achieve  ommon goals the problem thus reduces to matching command sequences to descriptions of generic plans from the catalogue. in this application  the matching process is complicated by the following issues. 
  non-contiguity - the individual commands which make up a sequence might be spread out over a session. each of the intervening commands may or may not affect the goal which the overall sequence is meant to achieve. 
  non-linearity - a single event may play a part in several plans. 
  ambiguity - the mappings from sequences of events to plans and from plans to goals are both many to many. a given sequence may instantiate several plans and a 
certain plan can be instantiated with a number of sequences. similarly  a plan might be used to satisfy several goals and a particular goal can be realized by several plans. 

　there are several dimensions to inefficiency in operating system interactions: operating systems provide many features  such as wild cards in file names  lists of verb targets  etc  which are meant to   extensional knowledge - in general we may need to have detailed knowledge of the user's environment since a given sequence may have side effects or use information 

1 	t. finin 
not directly expressed in the syntax of the commands. in order to recognize which of several possible goals is being attempted one may. for example  have to expand  wildcard  patterned filenames and select n.mes from the current directory which are referred to by the command at hand 
1. acknowledgements 
　this work is partially supported by the national sei  foundation under grant number ist1i-1. jeff shr: collaborated on much of this research and is responsible for current wizard implementation. 

　the goal recognition process is driven by an expectation-based parser  ricsbeck and sehankj which uses a knowledge base 
represented in a network based representation language based on keoxe this knowledge base represents many of the concepts for objects and processes which undcrly the task domain  generic and specific commands that the system provides  and the actual history of the interaction between the user and the task system thus  the mode i of the task and of the system have been merged by having a single taxonomy which contains both generic task concepts  e.g. commands which create files   generic system commands  eg copy  and individual instantiations of commands issued by a particular user 
 eg. the copy command that user tim issued at 1pm on may 1ed  the only information that wizard keeps about an individual user is which commands he has been observed using and which pieces 
of advice he has already been given. 
　when the user issues a operatin system command  individual concepts representing the command are added to the knowledge base if this event matches the initial event in a sequence of a   ian  a demon is created to monitor the knowledge base for the instantiation of a concept matching the next event in the plan s sequence if a concept matching that event is subsequently instantiated  then the next event in the sequence is monitored for when all of the events in the sequence have occured  the plan is checked to ensure that it 
satisfies any local and global constraints placed on it  eg what kind 
of intervening events  if any  can occur . 
　if all of the constraints are satisfied  then wizard takes the goal associated with that plan as the users goal.1 wizard's advice is 
generated from the advice template associated with with the plan the advice template may contain references to individual objects 
 eg file names used as command arguments  in the events matching the plan sequence. before offering the advice  wizard checks to see 
if this user has already been shown it. 
1. conclusions 
　the wizard help system has addressed only ihe problem of recognizing certain situations in which the user may need help or advice. our current work is directed toward developing better approaches to modeling the individual user  i.e. his interests  level of expertise  etc.   the generic user  i.e. his a priori goals  his planning stategies  etc  and toward making the interaction between the user and help system more of a dialog. 
　in particular  we have been working on recognizing and responding to a user's misunderstandings |schuster 1   using a model of the user as a basis for customizing the help offered  schuster 1  and various spreading activation techniques for identifying relevant help 
information from a set of weighted keywords |howe 1   1. 