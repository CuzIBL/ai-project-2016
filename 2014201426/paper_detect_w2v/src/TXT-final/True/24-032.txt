 
 a visual language is defined equivalent in expressive power to term subsumption languages expressed in textual form. to each knowledge representation primitive there corresponds a visual form expressing it concisely and completely. the visual language and textual languages are intertranslatable. expressions in the language are graphs of labeled nodes and directed or undirected arcs. the nodes are labeled textually or iconically and their types are denoted by six different outlines. computer-readable expressions in the language may be created through a structure editor that ensures that syntactic constraints are obeyed. the editor exports knowledge structures to a knowledge representation server computing subsumption and recognition  and maintaining a hybrid knowledge base of concept definitions and individual assertions. the server can respond to queries graphically displaying the results in the visual language in editable form. knowledge structures can be entered directly in the editor or imported from knowledge acquisition tools such as those supporting repertory grid elicitation and empirical induction. knowledge structures can be -exported to a range of knowledge-based systems. 
1 introduction 
visual presentation of knowledge structures has been an attractive feature of semantic networks since their inception. in knowledge acquisition  in particular  the presentation of formal knowledge to those from whom it has been elicited is important to its validation. there are many techniques for such acquisition but they ultimately result in an operational knowledge base with formal semantics. however  the expression of this knowledge base in the formal language used by the system is usually not very comprehensible to non-programmers  nosek & roth  1 . a visual language that is both comprehensible and formal offers attractive possibilities not only for comprehension but also for editing  and for parts of the knowledge acquisition process itself. 
   the early development of semantic nets resulted in criticisms that the semantics of particular diagrams was not well-defined  woods  1; brachman  1 . nodes  arcs and their labels could be used very freely and ambiguously and diagrams were subject to differing interpretations. in the 1s there were proposals for network formalisms with well-defined semantics  cercone & schubert  1; fahlman  1; brachman  1 . however  these preceded two important developments in computing: first  the ubiquity of personal workstations with high resolution graphics supporting visual languages as operational editors  glinert  1 ; second  the studies of complexity issues in knowledge representation leading from the complexity of kl-one  brachman & schmolze  1  through the logical universality of krypton  brachman  gilbert & levesque  
1  to the simplified and tractable semantics of classic  borgida et al  1 . 
   in the light of these developments it is timely to reexamine semantic networks as formal visual languages from two perspectives: 
  cognitive ergonomics: is it possible to create visual languages that are simple and natural to use in operational form as interactive structure editors  
  formal semantics: is it possible to intertranslate  that is  translate unambiguously in both directions  between these languages and knowledge representation formalisms with well-defined semantics  
   note that the second question is deliberately phrased to avoid mixing the issues of knowledge representation  logic  intensional and extensional semantics  and so on  that cast doubt upon the utility of early semantics networks  with the issues of visual representation. it leaves the deep semantic issues in the province of formal knowledge representation where they belong  and assesses the semantic validity of a visual language by its intertranslatibility with established formalisms  mackinlay & genesereth  1 . this is not to say that the requirements for visualization might not in themselves lead to insights relating to the formalisms and semantics-diagrams and notation play an important role in scientific thinking-but this is not the primary criterion for 
judging a visual knowledge representation language. 
   computer production of visual forms of knowledge represented in a computer has been a topic of research since the early days of knowledge representation research  schmolze  1  and a feature of many research systems  kindermann & quantz  1  and commercial products. some expert system shells and knowledge acquisition tools have used the power of modern workstations to provide continuously updated graphs of some aspects of a knowledge structure being entered textually. abrett and burstein's  kreme system graphically displays the computed subsumption relations between concepts so that those entering knowledge structures can see the consequences of definitions and detect errors due to incorrect or inadequate definitions. however  kreme does not support graphic knowledge entry or editing. 
   this paper presents the visual syntax and underlying semantics of a visual language for term subsumption languages. it focuses on the use of the language to enter and edit knowledge visually  and on its application in a highly interactive graphic structure editor. however  the language is ajso well-suited to the display of knowledge structures  and the system includes a grapher using watanabe's  heuristics for the layout of complex graphs. 
1 a formal visual language 
the approach to language definition taken in this section is to define each construct in the visual language in terms of its visual appearance  basic semantics  and intertranslation with classic expressions  borgida et al  1 . 
   the visual language provides the means to represent knowledge structures as graphs of labelled nodes and arcs. 
the visual primitives of the language are: 
  nodes  identified and typed as specified below. 
  two arc types linking nodes-a directed arc and an undirected arc-for this paper they are taken to be a line with  and without  an arrow. 
  text labels for the nodes-with an associated equivalence relation  which may take into account case  embedded spaces  and so on  but otherwise based on lexical identity. 
 six distinctive text surrounds defining the node types- again subject to choice-for this paper they are taken to be ovals  concepts   marked ovals  primitives   rectangles  individuals   no surround  roles or annotation   rounded corner rectangles  rules   and marked rounded corner rectangles  constraints  e.g. cardinality and set inclusion . 
   the node labels for concepts and primitives form one equivalence class and those for individuals  roles and rules each form additional separate equivalence classes so that the same string may be used to label nodes of different types without ambiguity. the text in the constraint nodes is restricted to be an allowable constraint  typically on cardinality  set membership or numeric range  but the text in the other five node types is unconstrained. the implementation allows an icons to be made equivalent to a text label and substituted for it visually  but the knowledge representation semantics arc unaffected by this substitution. 
1 primitive concepts 
primitive concepts  and the relations between them  are the foundations for knowledge representation schema. a primitive concept is represented in the visual language as its text label in an oval with marks at either end. for 
example  signifies the primitive concept 
 company -something may be asserted to be a  company  but cannot be recognized to be one because no sufficient definition has been given. this translates to and from classic terminology as: define-conceptfeompany   primitive company  . 
   in the visual language  the basic relation of subsumption between concepts is represented by an arrow. for 

signifies that  company  is subsumed by  legal entity - asserting something to be a  company  commits us to asserting that it is also a  legal entity   the strict 'is-a' relation. the concept  company  encodes all the properties encoded by  legal-entity  together with  possibly  others. 
this translates to and from classic terminology as: define-concept legal-entity   primitive legal-entity    define-concept company   primitive  and legal-entity  company  . 
   the basic relation of disjointness between concepts is represented by an undirected line between each pair of 

signifies that  company  is disjoint with  person - asserting something to be a  company  commits us to asserting that it is not also a  person . this translates to and from classic terminology as: 
¡¡define-concept person   disjoint-primitive gensym-1 person    define-concept company   disjoint-primitive gensym-1 company  . the gensym is necessary for translation to classic to allow linkage between the related definitions. it is lost on translation back from classic but this is not important since it is used only as a tag  not as a significant component of the knowledge base. 
   these basic definitions do not in themselves define the semantics of larger graphs of primitive concept nodes and subsumption or disjoint arcs. this becomes fully defined by stating that the visual language parser defines the semantics of a node in such a graph  of concept nodes only  in terms of outgoing or undirected arcs to its immediate connections only  and generates definitions as above. for convenience a single gensym is generated for each group of mutually disjoint nodes  but this docs not result in different semantics from pairwise generation. where there is a single node subsuming one group of mutually disjoint nodes  its label is used in preference to the gensym. for example  the graph: 

intertranslates with the classic definitions: define-concept legal-entity   primitive legal-entity   define-conceptpiving being   primitive living  being   define-concept person   disjoint-primitive  and legal-entity 
living  being  legal-entity person   
define-ncept government-institution   disjoint-primitive  and legal-entity  legal-entity government-institution   
defirne-concept company   disjoint-primitive  and legal-entity  
legal-entity company   

learning a n d knowledge acquisition 

define-concept manufacturing company   primitive  and company  
manufaturingcompany   

   note that the import-export module for the visual language makes the trivial changes necessary to the syntax of the target language  such as replacing spaces by underline. it also performs the non-trivial task of sorting the concept definitions so that terms are defined before they are used. if this cannot be done an error message is generated and the loops are visually highlighted. 
1 individuals 
individuals represent rigid designators in knowledge representation systems. they capture the notion of an entity having an existence in its own right such that its identity remains unchanged even if its properties are redefined. an individual is represented in the visual language as its text 
acme 
label in a rectangle. for example c o r p o r a t i on signifies the individual  acme corporation  and will continue to signify that corporation whatever properties are asserted of it and no matter how these assertions are changed. this intertranslates with classic terminology: create-ind acme  corporation . 
   in the visual language  the assertion that an individual exhibits a property is represented by an arrow from the individual node to a concept node encoding the property. 

signifies that the concept  company  is asserted to hold for  acme corporation -it exhibits the property of being a  company'. this intertranslates with classic as: define-ind acme corporation   assert-ind acme corporation  company . 
   as with concepts  these basic definitions extend simply to full graphs. examples will be given as the remaining components of the visual language are defined. 
1 concepts 
non-primitive concepts represent concepts that are fully defined within the knowledge representation system. they capture the notion that some concepts are fully defined by their relation to other concepts and hence do not necessarily have to be defined as subsuming other concepts or asserted as a property of an individual  but can instead be recognized as doing so because other definitions or assertions comply with their definition. such a concept is represented in the visual language as its text label in an oval without marks at 
either end. for example  signifies the concept 
 large company . this intertranslates with classic as: define-concept company . 
   however  this definition is inadequate because no properties have been defined-anything will be recognized as a  large company . a more meaningful example is: 

something is a  large company  if it is both  large  and a  company . this intertranslates with classic definitions: 
define-concept company   primitive company    define-concept large   primitive large    define-concept large company   and company large  . 
   the assertion of the properties defining  large company  as exhibited by an individual  for example 

enables it to be recognized that the property of being a  large company  is also exhibited even though this has not been explicitly asserted. 
1 rules 
rules represent contingencies by using the recognition of an individual as exhibiting a concept to imply that another concept should also be asserted to apply to the individual. they capture those connotations of a concept that are not deemed necessary to its definition but are deemed to apply to individuals exhibiting the properties defining that concept a rule is represented in the visual language as its text label in a rounded corner rectangle with an arrow in from the concept to be recognized and an arrow out to the concept to be asserted. for example  the rule 

signifies that when an individual is recognized as satisfying the definition of  large company  it should be asserted that it also has  high expenses . this translates to classic terminology as: assert-rule large company  high expenses . 
note that the name of the rule is lost in the translation to 
classic. this is because classic has a simple rule scheme that does not require rules to be identified. sufficient intertranslatability can be achieved for classic by making the rule name a generated symbol on import  e.g.  rule-1 . the visual language also supports a more complex rule scheme that does have a use for rule identifiers and will be discussed later. 
   rule translation extends simply to multiple input arrows from concepts which arc treated as alternative conditions for the application of the rule  and multiple output arrows which are treated as defining a concept 
1 roles 
roles provide a shorthand for expressing a group of related concepts. they capture the notion of attributes where the related concepts express disjoint alternatives  and relations where the concepts express a relation to another individual. a role is represented in the visual language as its text label without any surrounding enclosure-this corresponds to the common convention of representing roles as arc labels but gives more flexibility as roles may have multiple input and output arrows. for example  the term  high expenses  in the previous example might be better defined in terms of an  expenses  role which is constrained by the concept  high   or filled by the individual  high : 

the first intertranslates with the classic definition: 
define-concept high expenses   all expenses high    
and the second with: define-concept high expenses   fills expenses high  . 
   arrows coming into roles from other entities have the same semantics as arrows into concepts. arrows out of roles define constraining concepts in the same way as arrows out of concepts define concept definitions. 
1 constraints 
constraints support the residual concept-forming constraints common in term subsumption languages  such as cardinality constraints and set-inclusion constraints. they are represented in the visual language as a textual definition of the constraint surrounded by a marked rounded corner rectangle. for example   signifies that a role has exactly 1 fillers  signifies that a role has a minimum of 1 and a maximum of 1 fillers   signifies that a role has fillers in a set of individuals specified by 
outgoing arrows to those individuals   signifies that a role has a minimum of 1 and a maximum of 1 fillers in a set of individuals specified by outgoing arrows to those 
individuals  signifies that a role has exactly one 
filler in a set 	is an alternative . 
   constraints are used primarily as constraints on roles  and may be used anywhere a concept would be so that they can form part of named concept definitions  for example: 

intertranslates with the classic definition: 
define-c ncept specialist company   all facilities  and  at-least 1   at-most 1   one-of manufacturing sales marketing    . 
to support the open-world semantics  the constraint 
1  is used to specify explicitly that all the fillers of 
a role are shown. the following are equivalent: 

1 composition 
the semantics of the visual language are compositional and large knowledge structures are built up by composing smaller ones. the basic interpretation and translation mechanism is to group concept nodes with the same label together and define the concept in terms of paths along outgoing arrows from the node or nodes. this also establishes the dependencies between concepts that are used in sorting the concept definitions and detecting cycles. individuals are analyzed in the same way except that the assertions do not need to be sorted or cycles detected. rules are primarily analyzed as part of their incoming concepts- there is also a separate rule analysis that is not relevant to classic which is discussed later. roles and constraints have no significance except as part of concepts and individuals  and do not need separate analysis. as a result 'role' text with no arrows can be used as annotation. 
   this 'arrow chasing' allows a node with the same label to occur as often or as little as is appropriate when laying out a knowledge structure to avoid crossing lines or to emphasize certain aspects of it in the visual appearance. the implementation takes advantage of this to allow knowledge structures in several different windows to be translated together so that definitions of one part of the knowledge structure can be in one window and used in another. this allows visual libraries to be developed supporting the re-use of knowledge from one application to another. it also allows knowledge bases to be split into components that can be separately validated and maintained. 1 additional features 
intertranslatability with classic has been used to illustrate this paper since its kl-one-like syntax and semantics are well-defined and widely available. the visual language goes beyond classic in expressiveness in certain areas as already noted. the extensions in general are minor ones put in for logical completeness while preserving 
tractability. the complementary constraint to  is included since it adds to expressiveness while not causing 
intractability-  has similar outgoing arrows to a set of individuals but expresses the constraint that fillers are not in that set. reasoning with complementary sets is simply implemented with a flag on set constraints-union  intersection and inclusion are all well-defined. it is particularly useful in systems having open-world semantics such as classic since it allows a true open world negation to be expressed- not red  and  one-of green or blue  express the same thing in a closed world with just those three colors but are very different concepts in an open world where more colors may be defined. 
   inverse roles are also supported. in the example below  member of  and  member  are inverse relations  and the knowledge structure captures the axiom of comprehension that a concept defines a set. it is also a useful technique for 

learning and knowledge acquisition 

collecting instances of a concept. since the concept is nonprimitive it is also defined by the set forming its extension.  ind-1  becomes a  member  of the  set of x  by being 

asserted to be an instance of  concept x  and  ind-1  is recognized as an instance of  concept x  by being asserted to be a slot filler of  member  of the  set of x . 

the visual language is designed to allow the 
representation of rules with exceptions  not only to support default reasoning  but because this form of representation usually leads to smaller  simpler and more comprehensible rule sets. it is easier to understand  when x do y except when rather than when do y and when and when do y and when  
do z . if this representation is being used for compactness rather than to provide defaults  one does not want r  s or t being open to be valid reasons for either doing z or for not preventing y-they have to be tested and shown to fail first-one is not attempting to solve the frame problem but rather accepting the need for full exception-checking. 
¡¡to represent exceptions  the visual language uses an arrow from one rule to another to specify that the second rule should be executed only if its premise succeeds and the first rule's premise fails  or  in default reasoning  the first rule's premise is open as to success/failure . this requires the recognition logic in the associated reasoning engine to be capable of distinguishing recognition success  failure  impossibility of success without retraction  and openness  possibility of success with further assertions   but this does add significantly to the computational requirements  gaines  1a . the graph below represents the example given: 
   queries are expressed in the language using as a query node requesting information about a concept or individual. when the results of a query are graphed 
inferences are separated by an infer node  is informative to the user and also enables the resultant knowledge structure to be edited and re-entered since the infer node adds as a block when knowledge structures are entered. an example is given in the next section. 
   integer  float and date individuals are directly supported  together with corresponding conceptual constraints such as: 

the inherited type constraint then makes it unambiguous that  1  is a numeric value rather than the name of an individual in a knowledge structure such as: 

1 knowledge acquisition and editing 
an interactive structure editor for the visual language has been implemented as part of a knowledge acquisition toolkit. its human-computer interaction is modeled on apple's macdraw with additional features appropriate to the language such as arcs remaining attached to nodes when they are dragged. the syntax of possible node interconnections and constraint expressions is enforced-it is not possible to enter a graph that is syntactically incorrect. cut-and-paste of graphs and subgraphs is supported  and popup menus allow nodes to be connected with the minimum of effort. updates are efficient and graphs with several hundred nodes can be manipulated interactively. scroll  zoom and fit-to-sizc facilities allow large data structures to be navigated easily. however  partitioning data structures over several screens is encouraged and has proved practical in managing large knowledge structures. 
   figure 1 shows the part of the knowledge acquisition toolkit immediately associated with the structure editor. the editor is tightly coupled to a knowledge representation server  gaines  1b  that supports classic-like features extended as noted in this paper. in particular  the server computes subsumption relations between concepts and recognition of individuals by concepts. these in turn support an inference engine that fires the rules efficiently based on the subsumption structure and the rule-to-rule links. this is coupled to a truth maintenance system which detects contradictions and supports the retraction of assertions. the server can export complete knowledge structures and the results of queries back to the graphic structure editor with automatic layout in editable form. 
fig. 1 graphic language editor and related sub-systems 
   the editor exports to a number of expert system shells and to the textual language of the knowledge representation server. the server also imports knowledge structures from other tools such as the repertory grid elicitation and induction tools in ksso  gaines & shaw  1  and the text analysis tools in cognosys  woodward  1   and  hence  these may be displayed for inspection  validation and editing in the graphic structure editor. 
   figure 1 shows a solution to michic's   shuttle autolander  problem generated from exemplary cases entered through ksso  exported to the knowledge representation server  graphed in the visual language  and reorganized and annotated for perspicuity in the structure editor. 
   at the top of the screen a descriptive concept is defined which characterizes possible shuttle situations in terms of seven attributes and their possible values. the popup menu has been activated at one of its nodes to show how arcs are entered. below this is a set of six default rules that solve the problem of recommending the class for a particular case. at the bottom of the screen two cases are defined with queries for the recommended values of the class role. when this query is answered graphically for the one at the bottom left  it produces the graph: 

   it is apparent in figure 1 that the freedom to use the same item in several different places allows knowledge structures to be laid out informatively without visual confusion. for example  the concept  shuttle autolander decision  occurs three times. it is defined at the top and the definition is used in the rules and instances. however  this separation is a matter of style-even the definition could be fragmented if the person drawing the structure felt this to be appropriate. 
   similar choices have been made in the layout of the rules. for example   exception not auto  is shown as an exception to  use auto  at the lower left  and this is itself shown as an exception to  default not auto  at the upper right. the concept forming the conclusion of  use auto  is defined at the upper right and used twice again at the lower left and right. at the lower right it is visually sensible to have two distinct concepts both connected one instance of the rule  use auto . 
   freedom in such issues of style is very significant for human understanding but has no influence on the formal interpretation of the knowledge structures. 
1 conclusions 
a visual language has been presented for the representation  acquisition and editing of knowledge structures in term subsumption languages. it is a formal language in that it is syntactically and semantically well-defined and intertranslates with textual knowledge representation languages. the language is supported by an interactive graphic structure editor offering a simple and natural interface which has proved attractive to a wide variety of users. 
acknowledgements 
this work was funded in part by the natural sciences and engineering research council of canada. i am grateful to ron brachman and rob mcgregor for access to their research on term subsumption languages  and to mildred shaw for joint research on knowledge-based systems. 
