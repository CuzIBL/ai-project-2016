
hypertree-decomposition is the most general approach in the literature for identifying tractable computation problems encoded as hypergraphs. we show how the heuristic branch-decomposition approach for ordinary graphs of  cook and seymour  1  can be used for the heuristic construction of hypertree-decompositions.
1 introduction
many np-complete problems  e.g.  the constraint satisfaction problem csp  the homomorphism problem hom  the boolean conjunctive query problem bcq  etc.  can be described by hypergraphs in a natural way. it was shown by  gottlob et al.  1  that in analogy to tree-width of graphs  hypertree-width of hypergraphsis an appropriate measure for the cyclicity and therefore the tractability of the corresponding computation problems. in particular  they have shown that np-complete problems become polynomially solvable and even highly parallelizable when restricted to instances with bounded hypertree-width. moreover  it was shown by  gottlob et al.  1  that hypertree-decomposition and the corresponding measure of hypertree-width generalizes all other tractability measures for hypergraphs in the literature.
모recent research focuses on heuristic approaches for fast hypertree-decomposition with small width. in this presentation  we show how the heuristic approach of  cook and seymour  1  for branch-decomposition  of ordinary graphs  can be used for heuristic hypertree-decomposition.
1 preliminaries
a hypergraph h is a tuple  v e   where v is a set of vertices  variables  and e     v  { } is a set of hyperedges. we define var h  = v and edges h  = e. a hypertree for a hypergraph h is a triple  t 뷌 뷂   where t =  v e  is a tree and 뷌 : v 뫸 var h  and 뷂 : v 뫸 edges h  are labeling functions.
모a hypertree-decomposition of a hypergraph h is a hypertree  t 뷌 뷂  for h satisfying four conditions. due to space restrictions  we refer the interested reader to  gottlob et al. 
r	rrsshbrrhrr

br= r	r s	
r sprvp p1p p p p p p p rhr
	v1b hr
r	brfigure 1: splitting a vertex
1  for the formal definition of a hypertree-decomposition. the width of a hypertree-decomposition  t 뷌 뷂  is given by maxp뫍vertices t  |뷂 p |  and the hypertree-width of a hypergraph is the minimum width over all its hypertreedecompositions.
모a branch-decomposition of a hypergraph h is a tuple  t 뷉   where t =  v e  is a tree having |edges h | leaves and in which every non-leaf vertex has degree three  and 뷉 is a bijection from the set of leaves of t to edges h . the order of an edge e 뫍 e is the number of vertices v 뫍 var h  such that there are leaves l1 and l1 of t in different components of t when removing e with v 뫍 뷉 l1  뫌 뷉 l1 . the width of a branch-decomposition  t 뷉  is the maximum order of the edges of t  and the branch-width of a hypergraph is the minimum width over all its branch-decompositions.
1 the branch-decomposition heuristic
in this section  we summarize the basic steps of the heuristic branch-decomposition approach of  cook and seymour  1 . note that this approach was developed for ordinary graphs. its starting point is the construction of the initial data structure which is a star as shown in fig. 1. this is done in such a way that for each edge in the graph there exists exactly one edge in the star. this edge is then labeled with the set of vertices of the corresponding edge in the graph  i.e.  each edge is labeled with exactly two vertices . afterwards  the vertices of the star are successively split  cf. fig. 1  according to the decomposition rules below. in each step  the two vertices v1 and v1 resulting from the splitting are connected by a new edge which is labeled by the intersectionof the set of vertices labeling the edges incident with v1 and the set of vertices labeling the edges incident with v1. this process stops when all non-leafvertices have degree three; the resulting tree is then a branch-decomposition of the underlying graph.
the decomposition rules can be divided into two classes:
 i  the application of  safe splits  and  ii  the application of the eigenvector heuristic  alon  1 . safe splits divide the

figure 1: a hypergraph and its dual hypergraph
graph in such a way that it remains extendible  i.e.  there is some way to  repeatedly  divide the subgraphs to obtain a branch-decomposition of width equal to the branch-width of the original graph. in other words  nothing bad can happen when applying safe splits. there are three kinds of safe splits presented by  cook and seymour  1 :  i  pushing   ii  1separations  and  iii  1-separations. at each stage  these safe splits are applied as long as possible. if none of them is applicable  the eigenvector heuristic is used.
1 application to hypertree-decomposition
we will now show how the branch-decomposition heuristic described in section 1 can be used for hypertreedecomposition. recall that this heuristic was developed for ordinary graphs and not for hypergraphs. thus  our first step is to show that the safe splits as well as the eigenvector heuristic are also applicable to hypergraphs.
모to this aim  recall that the new edge introduced at each vertex splitting  cf. fig. 1  is labeled with the intersection of two sets of vertices as described above. in general  however  this intersection may contain more than two vertices. thus  such newly introduced edges represent hyperedges  i.e.  the data structure underlying the original branch-decomposition approach starts as an ordinary graph and evolves to a hypergraph during the decomposition process. this can be seen as an intuitive justification for the applicability of the branchdecomposition heuristic to hypergraphs. it is easy to verify that this intuition holds indeed true.
모now  note that given a tree-decomposition1 of a hypergraph of width k  it is possible to construct a branchdecomposition of width at most k + 1  and given a branchdecomposition of a hypergraph of width k  it is possible to construct a tree-decomposition of width at most 1k/1  robertson and seymour  1 . thus  having small treewidth is equivalent to having small branch-width.
모hence  a simple approach to obtain a hypertreedecomposition via branch-decomposition is to  i  construct a branch-decomposition of the given hypergraph by using the above heuristic   ii  transform this branch-decomposition into a tree-decomposition  and  in analogy to  mcmahan  1    iii  apply set covering heuristics in order to obtain a hypertree-decomposition. in particular  set covering is used to obtain appropriate 뷂-labels based on the 뷌-labels given by the tree-decomposition.
모another approach we investigate is dual to the above one in the sense that we obtain a hypertree where the 뷂-labels are given and appropriate 뷌-labels have to be set. to this aim  let us first introduce the dual hypergraph of a hypergraph as exemplified in fig. 1. the dual hypergraph is simply obtained by swapping the roles of hyperedges and vertices. our procedure is then to  i  construct a branch-decomposition of the dual hypergraph by using the above heuristic   ii  transform this branch-decomposition into a tree-decomposition  and  iii  interpret the labels of this tree-decomposition as 뷂labels of a hypertree and set the 뷌-labels appropriately in a straight-forward way. the resulting hypertree is then a hypertree-decompositionof the original hypergraph.
모the attentive reader may have noticed that there are two problems with the latter approach: first  the branch-width and therefore also the hypertree-width is at least the cardinality of the largest edge in the dual hypergraphwhich is equal to the maximumnumberof hyperedgeshavinga commonvertex in the original hypergraph. second  since the 뷂-labels satisfy the conditions of a tree-decomposition by construction  the hypertree-width may be larger than necessary. however  by introducing heuristic pre- and post-processing steps  we are able to overcome both problems.
1 conclusion
we have tested our approach on hypergraphs representing adder and bridge circuits connected in a line. for all instances of such adder and bridge hypergraphs  we obtained a hypertree-decomposition of almost optimal width within a few seconds. natural future work will be a full implementation of our approach  the investigation of further improvements  and a systematic comparison with other hypertree-decompositionheuristics. moreover an implementation of our second approach in such a way that the treedecomposition of the dual hypergraph is directly constructed  e.g.  by bucket elimination  without the intermediate-step of a branch-decomposition seems to be promising.
