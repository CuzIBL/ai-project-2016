applying hierarchical reinforcement learning agent effector control simultaneously argue kind knowledgeone best expressed multithreaded concurrent alisp learning acting concurrent alisp even exponentially many joint subgame stratagus peasant show recan move step remain stationary sults applying puter game domain hierarchical reinforcement learning emerging subdiscipline reinforcement learning augmented behaviour formalism expressing parr russell maxq dietterich precup sutton alisp andre russell idea enormously accelerate good representing hierarchical behaviour also expose additive dietterich formalism viewed expressing agent thread control alisp extends lisp nondeterministic construct singlethreaded experience robotics suggests behaviour agent real domain best term concurrent agent effector agent cartesian effector resource domain subproblem much stratagus domain peasant resource domain viewed effector part multibody agent controlling peasant control transition deterministic pick wood gold forest goldmine drop resource base unit resource brought back base cost paid timestep cost paid peasant collide game player reserve gold wood reach predefined threshold thread difficult peasant thus thread bookkeeping control stack peasant joint combinatorially nontrivial even peasant collide compete access mine forest handle concurrent alisp multieffector extends alisp multithreaded thread corresponds task thread destroyed time task initiated terminated time effector thread mapping time coordination thread even thread runtime maximize utility briefly describing alisp foundation process smdps defines concurrent alisp concurrent alisp defines smdp analogousto alisp optimal smdp optimal consistent describes used handle smdps face linear approximators combined feature template guestrin coordination graph guestrin also suitable smdp show experimentally suitable concurrent alisp agent control peasant resourcegathering domain also much stratagus subgame concurrent hierarchical learned effectively show additive russell zimdars used qdecomposition alisp concurrent background alisp andre russell superset lisp alisp lisp construct loop hash alisp also operation pick form list empty nothing call args call subroutine list args alisp resource domain case agent joint machine turn counter call stack memory reach joint counter agent must pick execute learning task find optimal formally alisp coupled process markov process take time joint optimal smdp optimal andre concurrent alisp resource domain peasant want incorporate peasant behaves singlepeasant case pick resource navigates resource base drop repeat process defun loop call call defun call call defun call call defun loop rest alisp resource domain peasant defun loop loop setf spawn list spawn list concurrent alisp resource domain peasant rest identical incorporate concurrent alisp multithreaded resource domain concurrent alisp identical replaced wait unassigned peasant chooses gold wood spawn thread task peasant task thread sent back reassignment much alisp mention coordination peasant nevertheless executingthis peasant automatically refer joint peasant learn collide navigating joint made efficiently despite exponentiallylarge numberof joint happens concurrentalisp standardlisp call alisp thread effector referred thread thread possibly empty subset effector look like mean effector must case thread exactly effector omitted thus legal alisp also legal concurrent alisp operation deal thread effector spawn args creates thread args effector reassign reassigns effector must thread effector thread interthread communication done operation wait wait notify wake thread waiting concurrent alisp designated domain effector time stratagus unit destroyed trained domain beginning timestep assign effector thread semantics transition concurrent alisp used construct smdp analogous alisp case smdp correspond joint joint environmentstate machine machine memory list thread identifier effector counter call stack thread holding wait thread thread note last line thread execute case thread finished execute case machine memory empty thread effector case transition distribution case thread holding need pick nonholding thread execute next scheduler make built allegro lisp scheduler semantics seen scheduler long scheduleris fair nonholding thread eventually thread scheduler next concurrent alisp operation lisp call call stack spawn reassign wait notify operation work counter reached call call stack repeatedly case stack empty thread terminated removed effector reassigned thread spawned peasant thread thread dummy line call line last line nonholding thread scheduler pick call stack appropriately subroutine case thread holding thread effector agent must pick joint machine counter thread joint made agent case viewed formally mapping joint dummy dropoff thread agent learnt make rest counter move loop counter move case thread holding thread effector thus full joint thread stepped forward effector decide thread assign continuing left back joint dropoff rest done loop releasing effector scheduler process joint repeatedly step forward reaching joint happen stochastic joint distribution good fair case smdp smdp joint transition distribution fair discounted next next show acting smdp good bijective correspondence smdp preserve optimal corresponds optimal smdp implicit semantics thread correspond task effector help incorporating task effector work also coordination thread control effector thread wait effector simultaneously prevents joint behaviour thread made jointly sequentially thread thread chose intuition joint learn joint computational difficulty address architecture joint learning linear turn crucial linear smdp implicitly represents discounted taking joint acting optimally thereafter linear feature pair real resource domain feature fgold gold reserve also feature fcoll navigation collision peasant peasant collision feature correspondingweight learn intuitively collision peasant shouldhave guestrin feature tied wcoll mathematically feature template collision feature keeping feature expose next feature somehow optimal reach need pick maximizing multieffector case maximization straightforward resource domain peasant navigation joint linear qfunction maximization done efficiently reach form coordination graph guestrin graph containing node choosing thread feature clique graph choosing thread maximizing joint time exponential treewidth graph cost network dynamic dechter naive treewidth coordination graph resource domain collision feature pair peasant treewidth pair peasant chance colliding make kind contextspecificity feature template take joint feature inactive feature regardless collision feature template fcoll collision feature pair peasant sufficiently close chance colliding next step significantly reduces treewidth learning thanks learning optimal learning smdp reach pick joint glie exploration keep track accumulated step take pair stream sample form maintain upon receiving sample learning curve resource domain peasant goal collect resource curve averaged learning evaluated step termination shaping used shaping shaping modifying learning affecting final learned pointed andre russell shaping extends naturally hierarchical depend machine well resource domain peasant navigation goal term much gold wood gathered learning resource domain strategic domain full domain architecture used forthcoming resource domain seems joint tabular learning infeasible flat coordinated guestrin hierarchical show learning curve step hierarchical learning reach reasonable move peasant goal avoiding collision remaining gain allocation peasant mine forest minimize congestion domain around believe learnt hierarchical despite step flat learning learns avoid collision learnt picking resource good idea step learning curve resource domain peasant goal collect resource shaping used strategic domain make reach next test peasant learning curve size used shaping hierarchical learning flat learning shapingfunctioncannot used peasant part shaping peasant allocated difficult find good feature flat case able flat learning learn kind reasonable hierarchical learning learnt reasonable sense final learnt allocation peasant resource area optimal able believe convergencein effector stratagus domain next stratagus domain agent town hall must defeat powerful enemy quickly experienced townhall train peasant peasant built gather resource resource collected assign peasant construct barrack reassign peasant barrack completed barrack used train footman footman footman defeat enemy dynamic game advantageous attack footman send footman attack enemy soon trained happen parallel footman attacking enemy peasant process gathering resource train footman informal show thread made allocate resource train peasant next build barrack launch next attack built peasant mean took long time accumulate resource sent footman attack soon trained final learned hand built peasant stream resource sent footman damage pipelined construction training fightingactivities intricate balancedways learning concurrent learning focused concurrent concise multieffector behaviour learning take thread take temporal introduced dietterich maxq andre russell alisp temporal qdecomposition divide defines subsequence subroutine learning subroutine subset relevant subroutine step cost lone peasant navigates mine peasant gold wood base idea concurrent peasant natural formally peasant time peasant time gold delivered base peasant jump feel wandering aimlessly depleted forest sketch resource domain case ongoing work idea make kind russell zimdars resource domain reflect delivery gold wood peasant step collision involving peasant thread peasant fixed thread give refers discounted gained thread russell zimdars deriveda decomposedsarsa additively decomposed form converges globally optimal concurrentalisp thread receives stream learns maximize localized thread temporal used maxq alisp thus concurrent reinforcement learning concurrent framework temporal work formalism mentioned closest work mahadevan makar maxq concurrent many fixed identical maxq flexible concurrent task semantics interleaved coordinating thread must stipulate fixed maxq hierarchy coordination agent independently greedily intent avoid frequent coordinated seldom conflict must agent nonoverlapping highlevel task coexist safely coordination graph reduces cost coordination applies regardless task concurrently varying duration rohanimanesh mahadevan scheme make semantics continue scheme thread completed pick thread continue conclusion work concurrent hierarchical reinforcement learning suggested natural multieffector system concurrent alisp reinforcement learning optimal distributed specification need descend managing learned automatically illustrate scaling concurrent thread showed learning stratagus domain seems beyondthe scope singlethreaded nonhierarchical learned exhibit impressive coordination temporal hierarchy interact yield concise distributed need investigate much wider domain learning need explore lookahead extract much juice experience
