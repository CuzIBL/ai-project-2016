system powerful user system automatically construct schema data data specified data type decomp user combine schema schema user adapt hand also system obtains system data type powerful progam schema automatically construct main formal framework deductive mecanism desired proving applying procedure system base rule fact gradual refinement transformation previously noticed none avoid combinatorial explosion inherent kind mecanism relevant rule synthesize automating powerful apprentice midway automatic synthesis system system builder belongs heavily modular construct schema decomposing data schema introduces guard must date done processing data independantly semantics case schema favourable case user adapt schema hand also process process gresse schema sort construction probleml whith straightforward case viewed primitive room whole computation head tail maclisp milltics system emacs session constructing combine alternative recursive recursive type operation data type build quickly rent schema schema built user instantiate renaming entitles prefixed also adapt modifying code produced block built orsay asspro part conclusion system construction data able construct cessing structured tree continuing extend work trying automatically guard specification subproblems deal formal specification sort specified ordered enrich axiom part presentation data type stored acknowledgment like thank michel bidoit gerard guiho helpful concerning
