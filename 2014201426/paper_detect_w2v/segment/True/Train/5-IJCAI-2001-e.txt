tremendous made planning system increased prerequisite bringing planning realm real scope must also made address representational feature concurrently executable varying duration quantity like resource essential modeling real show forward chaining planning planning feature forward chaining heuristic domain guide promising planning sensible build success utilize tlplan planning declaratively control used guide show extra intuitive easy impressive planning achieved long time planning system capable trivial extensive engineered relatively tremendous gain made gain come planning improvementof idea forward chaining fastest planning system aips forward chaining planner able plan containing step achieved test domain nevertheless magnitude canadian government nserc achieved real domain tremendous possibility practical planning impediment practical planning system scope also planner competition restricted modeled simultaneous describing planning inherited strip also used pednault simply flexibility generates real modeling sophisticated feature uncertainty sensing varying duration delayed concurrently quantity address last four modeling planning containing quantity varying duration delayed concurrently extending forward chaining planning demonstrate tlplan planning bacchus kabanza successfully deal quantity never forward chaining planner fact tlplan system able deal quantity deal quantity contribution tlplan deal quantity many help sequel review motivate tlplan extends representationto deal quantity modeling delayed concurrent naturally used forward chaining planner work area empirical demonstrate planner unfortunately proved impossible planner system made suite data reusable established work take planning specified goal transforming yield satisfying goal goal simply final forward chaining planner applying precondition satisfied forward chaining planner expands transform satisfying goal word forward chaining planner treat planning planning generic planning assumes operator planning database operator make database database word planning factored transition factored allowed planning planning closed database assumed false database arbitrary efficiently evaluated halpern vardi firstorder containing free efficiently find tuples binding make true computing specified database natural semantics operator specified strip view operator precondition containing free binding true generates yield property instantiated simply evaluating operator truck forall property binding fixed computing binding must replacing term case term binding term constructed applying term thus natural remove restriction database evaluated encounter term like replace recursively evaluating looking resulting tuple asserting equality must hold next describing operator forall equality evaluated term evaluated numeric like accommodated numeric like hardware need part database fuel truck fuel fuel fuelused fuel used operator like refuel fuel fuel truck full tank accounted fuel tank motivated viewing operator database flexibility resource operator fifo access fixed resource also track time resource used qhead qtail queue request queue serve true served qtail time resource used qhead qtail item queue queue qtail qtail qtail qtail qhead serve queue qhead serve queue qhead qhead qhead literature addressing quantity specialized expressing resource wolfman weld kvarnstrom doherty haslum natural citizen operator precondition tlplan citizen also formalism pednault geffner modeling concurrent forward chaining proved fruitful planner fastest planner planning competition talplanner doherty kvarnstrom planner tlplan fastforward hoffmann planner domain heuristic guide forward chaining planner forward chaining planner seems problematic explore totally ordered powerful guidance modeling concurrent linear seems problematic turn surprisingly modeling concurrency linear associate time stamp fixed time time stamp time plan linear successive time stamp intuitively mean transition instantaneously never physically realized existence simply convenient computational fiction additionally queue queue scheduled time time stamp fixed inherits pending parent also queue passed child thus arrive queue regard database queue thus planner backtracks backtracks queue backtracking queue precondition satisfied applying generates successor clock time stamp queue happen database true database used instantaneous queue used delayed driving truck truck dist execute truck instantaneous truck delayed truck delayed realized item queue delayedeffect specification time delta time unit time scheduled time delta term evaluated case divided vehicle next simply label make final plan readable delayed case truck delayed kind allowed normal clock plan goal goal else applyinstantaneousupdates adddelayedevents else newtime eventtime front newtime eventtime front newtime removefront applyeffect plan forward chaining move time forward next scheduled remove scheduled time database realizes delayed eventually arrival reach front queue dequeued transition fact time scheduled time dequeued sequentially fifo specifies precisely forward chaining enhanced operator realized adddelayedevents examines evaluates term delay time give absolute time mergedinto queue keep queue time sorted binding free also stored time moved forward scheduled time removedfrom queue sequentially goal database satisfies goal empty queue find sequenceof leading prev pointer plan started plan note queue need initially empty going planner find plan negotiates around also facilitates replanning canceled feature temporal refinement planner like ixtet ghallab laruelle jonsson flesh temporal next heuristic domain control come play tlplan restrict requiring next temporal control bacchus kabanza delayed concurrent automatic generates successor made mark time stamp viewed time stream delayed final delayed generates mark interleave ordinary whole series time execute concurrently thus time executingconcurrently unqueueevent maximize concurrent ordinary precondition satisfied started clock finer control degree concurrency controlling temporal control concurrency control handled precondition instantaneous used modify concurrency control delayed used achievement powerful concurrency control operator truck deleted also precondition concurrently truck blocked sophisticated also straightforward part numeric computation refueling fuel fuel free fuel vehicle fuel fuel vehicle resource concurrent access refuel vehicle fuel fueled fuel operator also demonstrates system bind operator case binding vehicle vehicle fuel concurrent refuel initiated vehicle concurrently fueled instantaneous resource vehicle needing fuel concurrently fueled instantaneous resource fact batch vehicle concurrently fueled batch vehicle enter unit time elapsed exactly concurrent refueling plan goal achieved final plan linear grouped subsequence time stamp linear limitation post subsequence used started supplied ordering used subsequence affect precondition started simultaneously near instantaneous practice little gain post subsequence time loca locb followed locc locd driving truck concurrently make little tell driving telling command driving take negligible time kind planning goal time final sufficient temporal refinement planner like ixtet ghallab laruelle enforce hold interruption time specifies final stopping planner inserting undesired intermittent telling planner intermittent undesirable conceptual difficulty combining work goal bacchus kabanza rich enforced final plan includingthe conditionssupportedby temporalrefinement planner empirical tlplan system tested logistics domain wolfman weld domain make empirical work unfortunately proved impossible planning system system readily system ported machine simply demonstrate efficiently planning containing feature concerned reporting test bacchus base work logistic domain collection package need transported final truck moving package city plane moving package airport located city package unloaded vehicle vehicle moved compatible wolfman weld fuel vehicle refueling fill vehicle vehicle located depot drivetruck operator consumes fixed fuel flyairplane operator consumes fuel fixed fuel plane airport allowed move vehicle unless fuel take tlplan planning domain declaratively encoded temporal heuristic worth tlplan tell kind flawed kibler morris checked forward chaining satisfying property pruned planning proved successful yield planning magnitude wide domain bacchus kabanza extensive empirical demonstrate fact requisite many planning domain formalism logistic control move vehicle unless need gothere pickup drop package move vehicle package need dropped package need picked truck need tobe moved city package need picked plane needsto moved city package need dropped truck thetruck goal truck airport goal city package need dropped plane theplane package city assertion encoded temporal bacchus kabanza collection assertion planner find plan efficiently control form looking predict extend plan violate assertion systematically convert control rule extra precondition bacchus blocking generating plan determining invalid high branching logistic applicable harder compiled look ahead improves planning couple magnitude used precondition encoding control rule used test four loga logb logc logd utilized wolfman testing lpsat system collection much used planning piii machine memory time reported column give time take tlplan step resulting plan encoded wolfman fuel consumption used wolfman suite fuel consumption rate fuel tank plane truck tlplan logistics efficiently controlknowledgeas used logistics extra vehicle move depot need fuel refuel vehicle unless need fuel makea pickup drop move truck plane topickup vehicle sufficient fuel take time fuel logistic column data show find much difficult wolfman weld encoding logistic planner utilizes combinationof linear find plan linear ensures plan satisfies linear time approximately loga logb logc logd also time scale poorly interestingly examining plan system plan used much fuel unit loga also contained many unnecessary move moving truck back forth transport package system domain control used improving system took logistics domain made concurrent domain contained quantity concurrent concurrent load unloads take unit time concurrent vehicle allowed manipulated concurrently refueling truck take unit time take unit driving truck take unit time flying take time dependent control extra vehicle moved route type vehicle transported vehicle planner vehicle movingso make progress pickup concurrently pickup planner flying plane airport truck transporting airport need transported city decrease duration plan last column show domain case show duration plan well plan take unit time seen highly concurrent plan time find also climbed much fuel consumption make sense concurrentplan utilize vehicle maximize concurrency vehicle mean fuel planning system capable dealing concurrent duration system smith weld graphplan considerably suggest deal quantity able system simpler logistic involving varying duration fuel consumption removed fuel consumption even hour time wolfman lpsat system demonstrate domain fuel fuel fuel loga logb logc logd test logistics control utilizing forward chaining move planning planning system pirri reiter kvarnstrom doherty haslum planner utilize tlplan good system utilize rich utilized forward chaining planner much simpler temporal refinement planner alternate planning concurrent ixtet planner impressive system capable dealing resource concurrent ghallab laruelle nasa remote agent also utilized refinement planner temporalrefinement planner operate taking plan specifies goal refining plan open protect planner propagation maintain temporal imposed plan refinement process thus planner partially specified plan propagation deadends specified planner also utilized extensive control good control much procedural style utilized many concurrency control paradigm temporal refinement planner macro encapsulate many paradigm thus easing specification conclusion forward chaining deal quantity documented demonstrated also extending forward chaining deal concurrent feature combined idea like control yield powerful planning presence concurrent differing duration resource empirical show lengthy plan serve demonstrate verifying subject work item work construct concurrency control macro expanded construct system access queue last worth explanation truck driven arrival entered queue truck thus scheduled truck arrive time checking precondition querying queue truck flat tire route delay arrival time thus must must also alter queue simply must able treat queue like database must able interrupted restarted something cumbersomein acknowledgment referee providedsome suggestion helped aips aips artificial intelligence planning scheduling planning competition http bacchus bacchus precondition control http bacchus kabanza bacchus kabanza planning temporally goal annual mathematics artificial intelligence bacchus kabanza bacchus kabanza temporal control planning artificial intelligence bacchus bacchus line data http doherty kvarnstrom doherty kvarnstrom talplanner empirical investigation temporal forward chaining planner proceeding time ieee geffner geffner strip flexible planning minker artificial intelligence kluwer ghallab laruelle ghallab laruelle control ixtet temporal planner proceeding artificial intelligence planning aaai halpern vardi halpern vardi checking proving manifesto allen fikes sandewall proceeding reasoning mateo morgan kaufmann mateo california hoffmann hoffmann http jonsson jonsson morris muschettola rajan planning interplanetary practice proceeding artificial intelligence planning aaai kibler morris kibler morris stupid proceeding joint artifical intelligence ijcai kvarnstrom doherty haslum kvarnstrom doherty haslum extending talplanner concurrency resource proceeding european artificial intelligence pednault pednault exploring middle ground strip calculus proceeding reasoning pirri reiter pirri reiter planning natural calculus minker artificial intelligence kluwer smith weld smith weld temporal planning mutual exclusion reasoning proceeding joint artificial intelligence ijcai wolfman weld wolfman weld lpsat engine applicationto resourceplanning proceeding joint artificial intelligence ijcai planning partially ordered subtasks dana hctor univ maryland college park univ maryland college park munoz amnon lotem steven mitchell solers estimotion lockheed martin arlington glil israel manassas jasonc lotem controversial planning shop planning plan task shop domaindependent plan quickly difficult good base shop hypothesis difficulty shop subtasks restrictive need examine hypothesis planning like shop sound construct plan shop subtasks partially ordered suggest domain difficulty shop base derives shop case plan efficiently shop base simpler shop controversial planning system shop system planning system plan task like planner shop domain plan planner shop generates step plan step hand shop make plan efficiently reported shop magnitude blackbox tlplan umcp planner shop suitable embedded planning sytem munoz hand creating shop base significantly planner planning domain track planning competition shop disqualified finish debugging base time believe htndecomposition used shop benefit shop planning restrictive achieving benefit shop subtasks totally ordered make impossible shop interleave subtasks task complicate requiring planning shop base planning property like shop sound planning generates step plan step thus like shop know step planning process shop decompose partially ordered subtasks creation plan interleave subtasks task shop shop base minor syntactical fact efficiently shop done shop domain exemplifying seems regardless shop necessitated shop partialordering latter case base much simpler shop enabled plan efficiently shop plan shop moving package load drop load drop plan actually told shop plan motivation kind difficulty shop task totally ordered task moving package shop plan task need telling move package move package package pick package drop package want deliver package work fine want move package glance seem satisfactory task want package probably like deliver package tell shop deliver package time hard telling shop plan delivering package tell shop plan tell shop package need give shop planning shop base reasoning globally planning true base planning competition debug time preliminary planner atom name followed list collection ground atom planner task task name followed list task syntactically atom semantically need erol barret base need planning domain axiom operator axiom axiom identical used shop shop axiom infer precondition satisfied hornclause inference also like shop horn clause call lisp evaluator precondition numeric computation shop partially ordered subtasks shop form tell kind task used task unless unifiable tell must true applicable paragraph infers precondition true tell subtasks decompose task shop subtasks totally ordered partially ordered shop precondition appended idea true true forth operator subtasks partially ordered mean subtasks interleaved plan thus prevent need protected plan task protection sophisticated used planner currie tate tate sipe wilkins umcp erol accomplish operator modified shop protected like shop operator operator task atom must unifiable task operator applicable task list tell atom list tell atom operator also protection request tell deleted protection cancellation tell permissible want tell truck prevent truck moved away operator deletes attruck protection request move truck operator protection request planning partially ordered task list protected procedure empty endif nondeterministically task predecessor reduction fail fail endif nondeterministically operator applicable produced applying protection list produced applying partially ordered task produced replacing procedure reduction primitive task else applicable fail endif nondeterministically applicable partially ordered task produced task predecessor reduction fail fail endif partially ordered task produced replacing reduction sound long relatively straightforward induction proceeding usual kind mean something plan probably complicating worth mentioning reduce call recursively find primitive task used primitive task precondition evaluated modifying coding shop planning system shop intend make freeware public license wanted shop domain exemplifying case role reasoning case somehow intrinsic generating plan efficiently chose block nilsson domain case case necessitated shop ordering domain case chose logistics domain veloso built base logistics domain base come shop code test used macintosh macintosh lisp properly concern modifying shop code code also made optimization optimization shop base shop felt code shop code unfairly favorable utilized upwardcompatibility shop minor syntactical shop base base shop planning thus test used shop base base logistics shop base complicated tell shop globally domain make simplification base shop removing domain forcing shop relatively easy much simpler base consisting transport package seen resulted base size size shop base shop base base logistics package delivered city city contained truck fewer airport package guaranteed time fast base shop base base plan nearly size shop base slightly shorter size shop base logistics domain counting shop base base operator axiom time shop base base logistics give give time size plan give give size shop base block counting shop base base operator axiom time shop base base give give time size plan give give base shop globally planning process think significantly reduce size base shop removing domain forcing shop simplify base giving move block forcing fact suspect chenoweth gupta planning block tried creating base removing bookkeeping operation shop base coding protection request protection cancellation handle interleaving resulting base shop base base consisting block relocated five build final configuration block block onto thereby creating tower block tower block tower thereby creating tower probability time base varied greatly time much time plan base shop base base plan nearly size shop base slightly shorter conclusion planning like shop planning generates step plan step shop subtasks partially ordered shop base shop test show case base much simpler shop quickly shop believe ascribed shop planning alleviating shop drawback summarize drawback planning task task make know step planning process make incorporate reasoning planner unifying precondition atom system like shop system inference precondition mentioned precondition incorporate call lisp evaluator numeric computation make goal reasoning precondition prune inapplicable operator make base planning illustration mean tried blackbox suite logistics blocksworld test suite case memory else terminate minute time drawback planning system base domaindependent domain want planning shop drawback sometimes worsened shop restriction subtasks must totally ordered reasoning planning domain suggest case plan efficiently shop base much simpler shop case base shop base quicker shop work investigating make powerful releasing coding embedded planning acknowledgement work part grant award afrl maryland opinion expressed necessarily reflect funders barrett barrett frugal hierarchical tasknetwork planning dept washington bacchus kabanza bacchus kabanza temporal control planning artificial intelligence january chenoweth chenoweth hardness block july page currie tate currie tate open planning architecture artificial intelligence erol erol hendler umcp sound procedure hierarchical planning proc conf planning system june page gupta gupta planning july page kautz selman kautz selman unifying planning page koehler koehler nebel hoffman dimopoulus extending planning graph subset proc toulouse france breslow weber integrating conversational case retrieval generative planning trento italy lotem shop hierarchical ordered planner lotem shop planning ordered task tech maryland college park june nilsson nilsson artificial intelligence morgan kaufmann tate tate mixed initiative planning proceeding laboratory planing scheduling initiative page tuscon morgan kaufmann veloso veloso learning analogical reasoning tech school carnegie mellon pittsburgh wilkins wilkins planner practical computational intelligence progressive planning uncertainty lars karlsson autonomous sensor system orebro orebro sweden http planner ptlplan inspired bacchus kabanza tlplan ptlplan progressive planner strategic encoded temporal reduce sensing dependent uncertain planning agent time possibility probability besides presenting planner plan also promising data test planner ptlplan planner presuppose planning time sensing used make proceed planner generates plan branch ptlplan handle degree uncertainty possibilistic probabilistic term ptlplan stand exactly ptlplan progressive planner applies resulting goal satisfied reached progressive ptlplan disadvantagethat potentially even ptlplan specified latter make reduce considerably strategic help pruning away unpromising plan prefix ptlplan build planner etlplan karlsson turn built nonconditional planner tlplan bacchus kabanza stand temporal feature make tlplan fairly expressive good strategic latter indicated outperforming comparable planner empirical test documented bacchus kabanza etlplan feature tlplan used etlplan permitted sensing agent observe fluents planning plan feature ptlplan also incorporates assignment degree uncertainty possibilistic probabilistic term degree plan succeed fail absence plan succeed ptlplan capable plan fail succeed ptlplan progressive planner utilizing strategic incorporate feature mentioned indicated test successfully rest plan ptlplan strategic planning also briefly data test work planning partially observable domain good work pomdps partially observable markov process kaebling pomdps utilize explicit enumeration also compact propositional boutilier poole note work generating maximize utility plan branch goal earliest probabilistic system originating classical planning planner draper made impractical simplest planner mahinur onder pollack considerably handling contingency selectively mahinur contingency greatest goal achievement mahinur regressive planner reasoning weaver blythe veloso system iterates classical planner probabilistic evaluator stochastic exogenous sensing zander majercik littman planner transforming propositional probabilistic planning stochastic satisfiability latter highly pruning used pointed majercik littman translation planning satisfiability lead size obscures possibilistic side guere alami planner guere alami also demonstrated practical planner graph plan blum furst assumes sensing perfectly reliable precondition graph plan derivative sensing graph plan weld deal incomplete mean quantifying uncertainty uncertainty ptlplan uncertainty possibility dubois prade probabilitytheory simply connective used connective possibility probability comment thus ptlplan used interested relative likelihood fact outcome precise probability fluents term fluents form denoting fluent omitted implicitly assumed true door fluent connective quantifier form denoting caused schema tuple name precondition fluent tuple fluent mine applicable possibility probability fluent assignment specifies fluents assignment fluents denoting denoting incorrectly assumed made agent plan note restriction applicable must probabilistic case must possibilistic case schema tiger scenariois kaeblinget door left behind lurks tiger behind fluent tiger stand tiger behind door probability used agent listen door give indication behind door tiger lurks unfortunately chance yield concrete listen true tiger tiger tiger tiger tiger tiger tiger tiger agent open door lead death dead open door tiger tiger dead semantics epistemic epistemic describes time time term occurred epistemic esituation describes agent time ptlplan draper employ probability distribution transition temporal dimension transition thisrepresents plan lead constituent normalizing relative containing represents agent assigns inside mappingfrom fluents fluents impose tiger probabilitiesand tiger behind left door behind door tiger door door tiger door door semantics true resulting observationsin made epistemic applying partitioning resulting applying open yield stand door door tiger dead tiger applying listen yield tiger tiger tiger tiger tiger tiger note resulting partitioned esituations plan plan ptlplan mean plan wherethe agent choosebetween continue plan explicit plan operator operator cond plan plan success fail plan cond branch cond plan args cond branch exclusive exhaustive relative plan success predicted plan success fail failure plan tiger listen cond tiger open cond success fail tiger open cond success fail semantics plan plan epistemic next applying rest plan resulting plan cond branch match branch concludes plan ptlplan next proceed investigate strategic used strategic eliminate unpromising plan prefix reduce ptlplan tlplan etlplan utilizes strategic strategic encoded control linear temporal emerson used plan prefix explored never pick drop violated evaluates false plan prefix leading explored continuation away tree great control planner work sufficient good domain consisting progress case true false true false true false ptlplan progression usual connective quantifier four temporal modality eventually next modality ptlplan interpret epistemic epistemic mean hold inbetween hold mean hold mean hold mean hold next temporal modal operator ptlplan also goal operator referring goal control agent goal fluent semantically modality relative goal goal also modal operator know mean fluent true exceeds prespecified threshold agent restrict fluent inside operator semantics modal operator relative branch epistemic epistemic assignment goal ptlplan success progress false fail precondition satisfied ptlplan fail cond lowest fail ptlplan planning interpretationof motivated fact possibility necessity probability efficiently control ptlplan incorporates progression tlplan etlplan take step ahead corresponds remains goal case fixed planning need passed note assumes quantifier finite universe control stating robot never pick drop hold moment planning ptlplan progressive planner mean sequentially goal satisfied reached take control goal success threshold failure threshold triple containing plan degree success degree failure initially control step goal satisfied case step progress control evaluates false plan prefix leading unpromising explored step applicable continue plan separately subplans thus combined failure failure threshold simply fail plan plan segment branch constructed derived esituations success failure degree plan combiningthose step best plan failure degree step fail plan degree failure high give feel operation ptlplan tiger control dead goal dead goal achieved probability giving failure threshold applicable areopen open listen open resulting half continuing planning esituations dead progression evaluates false branch yield fail plan success degree failure degree step goal achieved yieldingsuccess thus combined probability failure failure threshold step applying open give outcome applying listen yield half continuing weeventually find choosing open lead planner tiger zander tiger tiger coffee mahinur zander time control used success degree open cond success fail continuing find choosing open lead success probability open cond success fail combining branch appending listen yield plan probability ptlplan allegro commonlisp breath involving previously visited ptlplan tested encountered literature test pentium note control considerable last also documented planner majercik littman onder pollack guere alami give rough indication relative merit tiger success probability marginally helpful control used coffee robot boutilier poole onder pollack robot cafe coffee cream sugar bring coffee back office raining chance robot bring umbrella control formulaewere used plan branch longest step asking coffee robot majercik littman robot bother cream sugar user want coffee chance branch possibilistic guere alami involving poorly illuminated test tube robot move tube control used plan going test tube picked branch longest step conclusion work work planner ptlplan progressive planner utilizes strategic reduce ptlplan fairly rich contextdependent uncertain plan branch semantics associating degree possibility probability also planning utilize temporal encode control used prune unpromising branch tree ptlplan tlplan bacchus kabanza etlplan karlsson novel contribution ptlplan uncertainty progressive planning strategic also brief promising data ptlplan indicating favorably planner remains done orderto ptlplan evalute systematically integrating ptlplan robotic system capable perception coradeschi saffiotti acknowledgement work funded swedish foundation many thanks silvia coradeschi alessandro saffiotti helpful suggestion stephen majercik answering zander proceeding sixteenth artificial intelligence orlando florida aaai menlo park california bacchus kabanza bacchus kabanza temporal control forward chaining planner ghallab milani planning page amsterdam bacchus kabanza bacchus kabanza temporallogics control planning artificial intelligence blum furst blum furst fast planning planning graph proceeding fourteenth joint artificial intelligence montreal morgan kaufmann blythe veloso blythe veloso analogical replay planning proceeding fourteenth artificial intelligence providence rhode island aaai menlo park california boutilier poole boutilier poole computing optimal partially observable process compact proceeding thirteenth artificial intelligence portland oregon aaai menlo park california coradeschi saffiotti coradeschi saffiotti perceptual anchoring proceeding seventeenth joint artificial intelligence seattle morgan kaufmann draper draper hank weld probabilistic planningwith informationgatheringand contingent proceeding artificial intelligence planning system aaai menlo park dubois prade dubois prade possibility computerized processing uncertainty plenum emerson emerson temporal modal leeuwen handbook volume page guere alami guere alami possibilistic planner deal nondeterminismand contingency proceeding sixteenth joint artificial intelligence stockholm morgan kaufmann kaebling kaebling littman cassandra planning acting partially observable stochastic domain artificial intelligence karlsson lars karlsson progressive planning preliminary brian mayoh john perram henrik hautop lund proceeding scandinavian artificial intelligence majercik littman stephen majercik michael littman contingent planning uncertainty stochastic satisfiability page onder pollack onder pollack probabilistic planning unifying control page weld weld anderson smith extending graphplan handle uncertainty sensing proceeding fifteenth artificial intelligence madison wisconsin aaai menlo park california planning domain planning plan emmanuel guer rachid alami avenue colonel roche toulouse cedex france practical domain task planner shaper specially deal efficiently shaper step step domain shaper explores build compact graph main contribution shaper resist combinatorial explosion thanks manipulation graph used shaper answer efficiently planning request planner tested well benchmark domain promisingwhen withthe planner competition stream practical task planner efficiently deal even task planner made substantial progressover last year stilllimitedin sometimes overwhelmed even trivial motivation stem also fact domain heavily influence task learning certainly help efficiently domain domain planner exhibit learn domain subclass main difficulty contribution framework face combinatorial task exploration planner literature prune good domain guide heuristic heuristic automatically domain planning bonet geffner hoffmann user domain dependent planning doherty kvarnstrom restricting superset accessible restriction reduce backward planning process graph graphplan blum furst thirdway domain like gerevini schubert type symmetry long like domain efficiently restrict througha accessible deal domain symmetry ferry overwhelms classical planner high applicable many redundant even moving goal clearly highly redundant distinguishable dealing certainly planner drastic planner able domain subclass methodis composed twosteps plannerbuilds graph domain subclass step domain subclass shaper build graph subclass ferry domain shaper able planning connecting graph connection make ensures extraction step next explains build graph shaper completeness extraction process planner produced promising illustrated last test best planner competition graph planning expressed triple corresponds instantiated goal strip fikes nilsson formalism precondition mean applicable addlist dellist applying operator instantiated closedworld graph construction process extract relevant exploration domain subclass restrict strip framework priori mean applying graph accessibility graph main difficulty come combinatorial explosion applicable build graph relevant relevant relevance graph relevant augments withnew iffthere substitution instantiated permutation substitutedto case said accessible also accessible applicable applicable developing informative lead buildgraph edge else mark else vertex edge build graph graph reduce graph size relevant relevant sequentially applying detects link substitutionsas well substitution case edge case substitution keep thename correspondingshape owingtothe accessibility quickly retrieved substitution commutativityof imply graph construction illustrated gripper domain goal move ball robot able pick ball move robot graph ball robot near four applicable note graph substitution substitution note dashed line graph nine vertex accessible build graph make possibleto drasticallyreduce size domain many functionally substitution gripper domain grows exponentially comparing graph size mentioned previously shaper need build graph accessible case disjoint shaper unable construct graph accessible user must give connexity planning planner complementary graph process step extraction extraction shaper take graph built step find plan graph resp size size block block block block block gripper ball ball ball ball growth comparing size extract connecting resp shaper forone connects finallyit find path intuitive ball grippers initially ball ball left gripper near goal ball instantiate graph substitution resp goal graph resp look connects illustrated completeness extraction case graph planner need substitution graph looking transition costly planning scratch fortunately substitution learned domain completeness graph main idea substitution accessible accessible connects must graph graph graph accessible case stop word corresponds transitive closure term substitution graph domain restricted stack expanding graph completeness accessible illustrate domain restricted stack graph substitution substitution intuitively reverse block domain substitution find impossible expand shaper must examine leave veloping graph note mean access substitution consequently graph corresponds examined naturally graph differ substitution expressed substitution substitutionson extraction shaper plan extraction learned domain searching extract find instantiate examine substitution triple substitution plan plan plan extraction used extract plan graph also best path couple vertex optimal plan plan considering cost find best graph examines iteratively connection ordered cost cost procedure make graph learning good illustrated plan step show extraction domain restricted stack shaper instantiates graph obtaining goal obtaining find connection examines cost find connection build extraction domain restricted stack plan find plan plan thus plan extracted shaper movetotable move movetotable move movefromtable computation time plan graph lead property extraction time plan maximal examines iteratively triple test checking equality know many triple block triple consequently solutionextraction computation time longest path lengthofthe longest plan plan step column computation time completeness subsection main idea completeness shaper informal substitution demonstrate applicable build ensures substitution demonstrate accessible access applicable satisfies property actionthrough substitution accessible substitution also accessible transitive closure term substitution also recursively shaper find plan plan substitution owing property substitution mean shaper able find plan recursively demonstrates completeness planner planner competition hoffmann bonet geffner heuristic relaxed plan dellist koehler stan long derived graphplan blum furst deal symmetry shaper able deal symmetry mention talplan doherty kvarnstrom domain dependent planner made shaper extraction step case talplan exhibit clearly shaper heuristic best time sparc ultra mean planner find mean graph domain subclass ferry gripper domain overwhelm majority planner applicable despite treat symmetry stan ferry gripper domain ferry gripper domain easy shaper resp ball thanks good heuristic note solves gripper inefficient step domain give surprising solves situated opposite labeled correspond goal block stack changing block goal build interleaved stack composed block stack move stack domain subclass block process efficiently graph step computation time conclusion shaper solves build graph solves stan extract plan step conclusion task planning deal efficiently soning connection shaper step time step time step time step time node time step time step time ferry gripper ball ball ball block block block block block block block block block block block block time plan best planner competition comparing shaper process domain task planner shaper step step domain subclass shaper capture data graph main contributionhere shaper build compact size graph used shaper answer efficiently planning request shaper exhibit property graph construction extraction computationtime well longest plan good work devoted like decompose intoseveral disjoint part minimize interference applicability deal resulting even compact help graph domain subclass block bigger subclass block besides hope able graph conformant contingent planningas guere alami blum furst blum furst fast planning planning graph artificial intelligence page bonet geffner bonet geffner planning heuristic europeanconferenceon planning doherty kvarnstrom doherty kvarnstrom talplanner empirical investigation temporal forward chaining planner proc temporal reasoning fikes nilsson fikes nilsson strip proving artificial intelligence long long automatic inference jair long long exploration symmetry planning proc inter joint conf artificial intelligence gerevini schubert gerevini schubert inferring planning proc conf guere alami guere alami possibilistic planner deal contingency proc inter joint conf artificial intelligence hoffmann hoffmann heuristic domain planning enforced proc symposium intelligent system koehler koehler nebel hoffmann dimopoulos extending planning graph subset european conferenceon planning stan identifying managing combinatorial optimisation planning maria derek long durham planning hard hard part effectively static domain identify combinatorial planning deploy specialised integrated broader planning planning system brings alternative planning specialised selects planning domain participated successfully planning competition done competition data demonstrate planning criticised obsession inability scale address realistic planner weak heuristic guide recourse domain compete domain planner tailored well domain hand tailoring planner domain considerable part domain reusable domain whole body expertise captured clear extracted facilitate next philosophy work domain planning realistic planning supplemented sophisticated domain capable assisting user domain identifying planning domain effectively exploited combat decomposing planning identify travelling salesman effectively planning unintelligent genuinely planning fact substantive powerful abstracted planning specialised must integrated cooperate experimenting automatic domain long recognise isolate combinatorial specialised integrated planner work successfully stan system proved promising competed planning competition excelled involving resource allocation involving restricted form resource data competition selects forward backward planning feature domain forward planning forplan integrated simplified specialist resource allocation architecture integration recognising generic behaviour identify collection generic type domain generic type long collection type characterised kind behaviour many planning domain domain feature transportation behaviour identify even implicitly operation move move automatically determines static road network dynamic corridor lockable door transportation feature domain suggests likelihood arising also recognises kind resource restrict domain finite renewable resource consumed released unit encoded strip discrete consumption release freecell domain recognised exploited generic behaviour freecell domain competition exploiting resource robust take unannotated strip domain integration specialised planner straightforward heuristic planner forward planner forplan heuristic relaxed planning bonet hoffmann hoffmann like forplan relaxed graphplan relaxed plan forplan relaxed plan constructed abstracted planning part planning remains operator precondition relating identified removed give part heuristic heuristic estimating cost removed process much produced planner forplan heuristic hoffmann helpful inform repertoire recognize forplan integrated form route planning discrete resource handling forplan lost ineffective planner planner architecture forplan planner rely route planning resource handling intention demonstrate mean abstracting planning integrating planning framework able repertoire retained stan default planning domain featuring presence mean fails safe fails identify moment happens simplifying architecture system gradually handled operates interface selecting domain view process routeplanning identified domain abstracted specialised integrated forplan process handled domain identify domain decomposable transportation transportation decomposable form domain constrained predefined identifies locatedness also referred atrels inroom locatedness identifying rely bring form invokes forplan data show planning competition domain involving route planning resource handling domain logistics strip elevator domain freecell resourceallocation domain determines planning safely delegated shortest travelled moving ascertained looking move devolved shortest path temporarily vacate shortest path guaranteed find best path vacate suggests able amalgamating exploiting move operator entering moving able reappear left flying behaviour give access shorter path visible planning delegated equip traverse case used amalgamate label edge traverse locatedness bulldozer domain pddl release mcdermott domain amalgamated delegated bulldozer road traverse driving bridge traverse crossing give access arises collection show shortest route edge cost route amalgamated complicate matter must edge traversed wing must bolted shortest path amalgamated despite fact path edge amalgamated amalgamation construct graph label edge move used traverse locatedness relevant route plan constructed dedicated mean route plan constructed must left entered shortest path guaranteed visible restricted form flying call hovering amalgamation case distinguished case traversed move operator arises amalgamated traverse dynamic able planning agent grid route robot obtains open door grid route planning grid planning closely integrated goal robot sufficiently decomposable delegated route planning domain identified type associate data also identifies operator moveoperation precondition type located precondition removed operator operator equipped data identifying must abstracted precondition word precondition transformed specialised specialised treatment specialised call mean communication planner specialised used show abstracting operation logistics domain move operation eliminated domain altogether abstracted domain containing planning planner planner abstracted form integration integration forplan route planning subsolver determining heuristic goal constructing route followed moving plan generating plan reporting route traversed plan turn process forplan solves abstracted heuristic relaxed plan goal heuristic calculated constructing relaxed plan abstracted operator calculating route traversed route abstracted relaxed plan commitment make visit abstracted logistics abstracted plan load unload successful commits truck plane abstracted plan maintains commitment visit relaxed plan graph route must traverse meet commitment cost traversing route plan entail commitment show visit plan ordering implied layering relaxed plan graph indicating dependency loading must carried unloading calculate shortest path visit ordering travelling salesman traveller hard repeatedly part heuristic cost visit turn closest previously visited plan respecting ordering visit unsophisticated tackling travelling salesman integration planning process demonstrating possibility integrating specialised despite lack sophistication give cost pure relaxed plan relaxed plan neglect fact time relaxed plan ignores fact integration planner plan checked abstracted locatedness precondition path move recorded shortest path forward recorded path precomputed floyd shortest path floyd possibly amalgamated inferred work well static shortest path remain fixed consumes resource resource shortest path best path consumes fewer resource preferred integrate planner form plan route planned generates instantiation move operator plan strip plan preliminary domain strip subset competition data collection domain logistics lift domain able identify extract even able exploiting data compiled fahiem bacchus competition held breckenridge colorado graph thick line plot graph showing time graph show strip data involving resource allocation planner used hoffmann bonet geffner talplanner doherty kvarnstrom shop occasionally refanidis vlahavas used logistics freecell strip elevator domain logistics freecell data restriction competition comprised track track planner allowed domain whilst talplanner shop control participated track strip planner able handle strip pddl competed strip planner track despite supplied control planner consistently automated planner talplanner shop logistics data produced high plan took slightly logistics produced slightly plan planner track emphasised improvementin plan overff derivesfrom fact informative heuristic domain achieves consistent plan freecell domain introduced specially competition strip formalisation solitaire card game released window freecell free cell restricted renewable resource goal take cost ensuring sufficient free cell made meet abstracted relaxed plan calculating cost ensures consumption resource exceed resource plan entail cost sufficient release redress balance succeeded obtaining robust accurately estimating cost inconsistent seen graph despite fastest missed unable plan good anomalously long plan work adequately cost distributing resource efficiently throughout plan propositional elevator domain used competition reveals weakness nearest neighbour heuristic demonstating good domain slightly poorer plan data nearest neighbour heuristic favour visiting simplest plan time consumed logistics plan time consumed freecell respecting ordering plan fact subtler dropoff next heuristic tends work well many transported many visited carrier well derived need collect delivering elevator domain heuristic accuracyin logistics package transported carrier heuristic ever demonstrate integrate machinery heuristic incurred cost abstracted measuring goodness investigating sophisticated data show forplan rival best planning domain featuring identified fact forplan control obtains domain entirely exploitation give clear indication automatic forward planning framework forplan planner exploitation subproblem make hard manageable work foundation produced promising framework used integration unsophisticated inflexible recognises form restricted form resource fails safe form recognised affect completeness mean unable domain effectively extending repertoire integrate specialised even combinatorial domain emphasis made progress effectively integration subsolver communicate planner specialised simplistic refinement proper integration planner best combinatorial arise handling resource restricted makespan subproblems scheduling treatment scheduling conclusion experimented planning system problemsolving made automatically static domain goal integration forplan specialised sophisticated profile managed explore gained integrating planning idea planning resorting generic switching timed address interested collection combatting occurring combinatorial recognising arise planning domain planning made automatically principled deciding view deploying bonet geffner bonet geffner planning heuristic proc bonet bonet loerincs geffner robust fast planning aaai doherty kvarnstrom doherty kvarnstrom talplanner empirical inverstigation temporal forward chaining planner proceeding temporal reasoning floyd floyd shortest path cacm long long automatic inference jair hoffmann hoffmann heuristic domainindependent planning enforced hillclimbing freiburg germany long long automatic synthesis generic type planning aips mcdermott mcdermott pddl planning domain yale http lotem ozavila shop hierarchical orederd planner proc ijcai refanidis vlahavas refanidis vlahavas domain heuristic strip greedy regression proc planning heuristic planning topology planning benchmark empirical jorg hoffmann albert ludwigs freiburg germany many heuristic planner derive heuristic relaxing planning task hand relaxation list empty looking collection planning benchmark topological property relaxation suggest heuristic relaxation many planning benchmark shed success heuristic planner employing last year planning system idea heuristic successful planning system competition well system mcdermott competition five awarded automatic planner heuristic mips stan incorporated amongst heuristic bacchus interestingly four five planner base deriving heuristic relax planning task ignoring list optimal relaxed idea bonet optimal relaxed yield admissible heuristic proven bylander computing optimal relaxed bonet introduced approximating optimal relaxed bonet geffner heuristic engine hoffmann mips edelkamp planner mips heuristic task reachable crucially topology thus success heuristic planner many planning task give rise suspicion task relaxed goal shed suspicion frank structural phenomenon heuristic impacting optimal relaxed reachable planning task structural property suggest fact task contained many benchmark planning domain topology optimal relaxed heuristic give used heuristic planner data collection heuristic turn planning benchmark domain hypothesis behave introduces give structural phenomenon heuristic give empirical data summarizes taxonomy planning domain applies heuristic concludes give outlook used solvable planning task interested succeed quickly many benchmark task looked strip benchmark domain restriction domain used competition domain well planning data planning task behave relaxation used heuristic planner optimal relaxed heuristic determining optimal planning build explicit look topology yield clear picture structural planning domain hypothesis piece work competition featured strip domain assembly blocksworld freecell grid gripper logistics movie mprime mystery schedule domain used task domain gripper size ball transported movie suite looked sometimes depict scaling anyway need finer distinction obvious criterion like difficulty task optimal plan domain difficulty movie domain suite difficulty difficult maximal difficulty look gripperdomain assemblyand logisticsdomains grid blocksworld movie difficulty remaining domain maximal difficulty competition domain task specified strip case planning task specified term goal operator schema collection planning task domain operator schema instantiating operator schema yield task atom instantiated precondition must hold applicable also atom atom attached strip trivially true atom satisfied list satisfied list removed plan successively yield satisfies goal ignoring list simplifies task negation free strip case fixed domain task polynomially transformed property negation normal form negation front atom negated atom atom notand make sure true false gazen knoblock negation free investigate property optimal relaxed heuristic planning task goal relaxed task task goal identical list empty shortest plan solves relaxed task plan looking topology heuristic structural property depend planning framework embedding planning case transition goal planning task look referred simply task reachable successively applying pair yield goal looking solvable goal shortest path directed graph path heuristic heuristic heuristic recognizes goal yielding heuristic dead dead transition directed goal reachable dead dead lost heuristic dead desirably really dead heuristic completeness heuristic safely prune planning task task even ignoring list task unsolvable completeness rest heuristic heuristic relevant part heuristic fall four dead heuristic undirected harmless recognized unrecognized planning verified belonged domain belongs belong belongs blocksworld gripper logistics undirected graph grid movie directed dead assemblyand schedule dead recognized freecell mprime mystery unrecognized dead empirical analytically undirected graph koehler hoffmann domain four also many unrecognized dead percentage relevant part domain freecell mprime mystery percentage unrecognized dead relevant part mean task difficulty domain domain column give picture task difficulty domain task divided five difficulty task divide difficulty domain five part size note domain column comparable show mprimeand mysterytasks unrecognized dead tendency dead difficult freecell much unrecognized dead seems percentage grows task difficulty task high percentage difficulty look topology topology investigated frank work frank formally partitioning plateau kind extend deal heuristic edge directed heuristic plateau maximal subset induced subgraph strongly plateau reachability look view heuristic obviously exactly plateau heuristic plateau exit improving exit exit leave plateau heuristic undirected graph like frank leaving plateau changing heuristic exit improving proportion exit plateau frank divide plateau four bench contour taking directed edge type exit heuristic recognized dead plateau plateau exit plain plateau exit improving bench plateau improving exit improving exit contour plateau entirely improving exit plateau plateau belongs exactly solvable exactly plateau heuristic recognized dead irrelevant ignored getting closer goal bench contour closer plain behave kind entrance bench heuristic flat path path path heuristic plateau flat plateau flat path plain bench contour behaves bench improving exit reach heuristic inevitably heuristic plain lead bench bench contour lead explicit kind structural parameter restriction parameter interested percentage need take closer look flat neighbor stepping neighbor necessarily exit neighbor lead back bottom valley really want know whole valley valley characterized property reach goal heuristic heuristic full exit path path goal heuristic path decrease monotonically plateau full exit path plateau plateau full exit path part valley heuristic valley maximal plateau full exit path recognized dead strongly existence valley existence turn competition domain hypothesis planning task assembly grid gripper logistics movie domain show mean percentage valley domain domain blocksworld freecell mprime mystery schedule percentage valley relevant part mean task difficulty domain unrecognized dead valley percentage valley high percentage unrecognized dead domain freecelland valley exactly unrecognized dead mprime mystery valley blocksworld schedule seem difficult task computing mean scheduletasks valley blocksworld suite valley percentage constantly irrespective difficulty contour also percentage lying contour part dominated contour passed quickly movie percentage constantly assembly logistics schedule relevant contour clear tendency decrease task difficulty remaining domain tendency particularly blocksworld going difficult task bench bench percentage informative parameter plateau bench improving exit really matter difficult find exit criterion size bench proportion improving exit criterion next relevant criterion maximal exit call plateau bench plain leading bench recall heuristic plateau exit shortest flat path maximal exit plateau maximal exit maximal exit plateau plateau turn competition domain maximal exit hypothesis gripper logistics miconicsimple movie domain task domain maximal exit listed domain maximal exit fulfills hypothesized property crucial domain apparently maximal exit computing mean mean maximal exit grows difficulty suite remaining domain mprime mean show variance hard draw conclusion assembly blocksworld freecell grid mprime mystery schedule maximal exit mean task difficulty domain planning domain taxonomy divide planning domain taxonomy heuristic dead belong maximal exit schematic remember existence unrecognized dead existence valley existence give appealing impression kind domain heuristic planner work well domain left bottom corner demanding corner fact competition freecell domain constituted much heuristic planner logistics domain majority competition domain left bottom side taxonomy fact phenomenon even stronger looking taxonomy planning domain overviewing used planning benchmark domain domain exhibit domain mean maximal exit grow difficulty briefcaseworld apparently domain maximal exit precise simplicity heuristic breadth endwhile termed enforced hoffmann used heuristic maximal exit heuristic maximal outgoing edge started enforced find goal considering iteration enforced hillclimbing cross contour find maximal considering iteration improves heuristic iteration goal reached reconsider terminology introduced beginning planning domain operator schema task specifies amongst yielding obvious outgoing edge task longest list size dead empty list atom need fixed thus considering solvable task domain applying yield maximal exit enforced find goal task looking explaining runtime give heuristic summarized heuristic comparing domain arise heuristic averaged valley percentage grid assembly four domain stay heuristic hoffmann describes system enforced strip planning task easy like case heuristic heuristic thus hypothesis true strip domain gripper logistics movie heuristic enforced heuristic solves task domain evaluating polynomially many conclusion outlook intuition many planning benchmark sense planning personally like work formal simplicity mean give empirical data supporting many benchmark fact formal sense work insight structural planning domain explaining success possibly heuristic utilizing simplicity benchmark preliminary made collection comparatively planning task stated hypothesis must verified going hypothesis analytically heuristic going take sample task practically benefit mainly area line work recognize planning task automatically thereby predict runtime heuristic planner secondly knowing strength weakness heuristic help structural planning domain help challenging benchmark acknowledgment thanks bernhard nebel work thanks also malte helmert many comment early bacchus fahiem bacchus dana planning system competition magazine forthcoming bonet geffner blai bonet hector geffner planning heuristic artificial intelligence forthcoming bonet blai bonet gabor loerincs ector geffner robust fast planning proc page july bylander bylander computational propositional strip planning artificial intelligence edelkamp edelkamp heuristic planning bdds frank jeremy frank peter cheeseman john stutz gravity fails topology artificial intelligence gazen knoblock cenk gazen craig knoblock combining expressiveness ucpop graphplan proc page september hoffmann jorg hoffmann heuristic domain planning enforced hillclimbing proc page october koehler hoffmann jana koehler jorg mann reasonable forced goal ordering planning artificial intelligence mcdermott drew mcdermott planning system competition magazine reviving planning xuanlong nguyen subbarao kambhampati arizona tempe email xuanlong prevailing pessimism scalability planning presenting novel heuristic control make competitive plan synthesis insight responsible successful heuristic reachability disjunctive also adapted dramatically idea variant ucpop repop empirical show dominating ucpop repop also convincingly outperforms graphplan parallel domain plan repop also tend graphplan planner term flexibility stride scaling planning centered around dominant theme heuristic planner exemplified unpop planner exemplified graphplan satplan stark planning five year focused scaling planner despite planner continue slow competitive fastest cspbased planner plan synthesis establishing supremacy despite planning remains attractive planning commitmentinherentin planning make open planning framework evidenced fact architecture integrating planning gathering scheduling planner part grant afosr grant nasa grant thank david smith malik ghallab austin tate weld terry zimmerman biplav srivastava minh ijcai referee comment draft ucpop unpop repop code http smith argues framework promising handling domain durative temporal resource planning fact planning system capable handling temporal durative ixtet well nasa even simpler planning domain planner partially ordered plan degree executionflexibility none planner find parallel plan efficiently planner graphplan restricted parallel plan foregoing motivates need improving show insight responsible plan synthesis made year planner largely adaptable novel adapting heuristic reachability disjunctive processing distancebased heuristic used ranking plan flaw used efficiently enforcing consistency detecting implicit conflict resolving help scale competitive planner flexibility empirical showing repop ucpop enhanced idea competitively many planning domain repop scale much graphplan parallel domain tried importantly repop generates shorter significantly flexibility next briefly review describes heuristic adapted rank plan show unsafe link flaw resolved efficiently empirical work summarizes contribution work background planning strip classical planning goal deterministic precondition list list planning plan goal tutorial brief review seen searching plan plan ground ordering causal link causal link form commitment planner precondition open unsafe link open form nocausal link loosely speaking open preconditionsof plan achieved plan causal link unsafe consistent case also said threaten causal link open unsafe link also flaw plan plan seen plan flaw null plan keep refining plan null plan dummy precondition correspond goal correspond null plan causal link unsafe link flaw open flaw precondition goal refinement step selecting flaw plan resolvingit resulting plan flaw open need achieves also need secondly flaw unsafe link threatened repaired promotion ordering demotion critically plan queue used resolve flaw heuristic ranking plan queue introduces disjunctive efficiently handling unsafe link flaw reachability generalizing unsafe link implicit conflict plan heuristic ranking plan choosing plan queue refinement naturally interested plan lead refinement planner capable handling partially instantiated restrict ground strictly speaking seen step step mapped flaw resolution handle unsafe link significantly ucpop remaining flaw resolved open flaw consequently ranking plan queue resolve open flaw plan need make plan seen subgoals sense estimating planner necessarily conflict causal link heuristic estimating simply countingthe numberof open conditionsin plan heuristic open heuristic neither admissible informed many domain treat open equally ineffective open like closer insisting admissibility need take subgoal accounting estimating tricky complicated fact subgoals thus ignoring consequence unsafe link empty achieving subgoals conflict causal link subgoal achieved never untrue consequence matter much subgoals necessarily achieving subgoals temporal ordering cost achieving comprising subgoals foregoing justifies many heuristic estimator ranking goodness planner early heuristic estimator used ignore also make stronger subgoal independence subgoals ignoring latter heuristic planning idea estimating cost achieving subgoals serial planning graph build planning graph planning graphthat reader familiar planning graph data used graphplan possibly last achieved planning graph achieves plan goal achieved cost term cost strictly recursively applying hand side eventually term zero cost process heuristic relax heuristic recurrence heuristic plan queue ranked parameter used greediness heuristic default enforcing consistency plan consistency plan ensured handling unsafe link improving phase posting disjunctive resolve unsafe link involvesdetecting implicit conflict unsafe link reachability disjunctive ordering normally unsafe link conflict resolved promotion demotion splitting plan plan premature splitting failing plan unnecessarily multiplied many descendant plan poisoning queue significantly much idea resolve unsafe link posting disjunctive ordering capture promotionand demotion possibility incrementally simplify propagationtechniques many failing plan refinement unsafe causal link conflict resolved simply disjunctive ordering plan procedure simplifying disjunctive ordering open resolved reusing plan ordering followed repeated propagation rule false propagation rule done part transitive consistency ordering rule unit propagationrule ordering propagation reduces disjunction detects infeasible plan ahead time open established disjunctive left plan remaining disjunctive detecting resolving implicit conflict reachability unsafe link resolution step meant enforce consistency plan time weak implicit inconsistency procedure assumes link threatened precondition legal true detecting resolving implicit helpful weeding inconsistent plan implicit conflict need property reachable interestingly reachability played role planner motivating procedure identifying mutex memo henceforth term mutex type reachability producing reachabilityinformationis graph armed mutex propagation procedure mutexes graph exploitingthe reachabilityinformationto consistency plan identifying feasibility eventual plan must plan normally explicit nevertheless characterization must cutsets cutsets plan link necessarily necessarily seen must hold violate property reachable clearly plan refined executable cutset mutex plan provably invalid pruned queue prune inconsistent plan inefficient wait plan inconsistent detecting resolving implicit conflict prevents plan becoming inconsistent generalize unsafe link said conflict causal link consistent mutex causal link unsafe conflict plan conflict unsafe link subsume unsafelink introduced also mutex unsafe link detecting implicit conflict unsafe link plan implicit conflict detected resolved posting disjunctive ordering subsection disjunctive implicit conflict reachability lead robust planning empirical introduced ucpop planning call resulting planner repop mentioned ucpop repop ground thus neither deal binding ucpop repop lifo open flaw resolution empirical repop ucpop well graphplan altalt plan synthesis planner lisp case graphplan used lisp enhanced altalt heuristic regression planner significantly empirical conducted linux test suite benchmarkplanning domain literature gripper rocket block logistics parallel domain admit loosely orderedsteps grid travel admit serial synthesis time repop preprocessing time computing mutex bilevel planning graph show repop exhibit dramatic base planner ucpop gripper logistics rocket parallel domain repop able comfortably plan logistics gripper domain feat significantly beyondthe reach planner interestingis repop planner parallel domain repop manages outperform graphplan repop trail planner altalt latter planner serial plan despite impressiveperformanceof repop overparallel domain remains ineffective serial domain grid travel admit totally ordered plan suspect part inability heuristic adequately normal open heuristic relaxed heuristic also commitment employed burden serial domain eventually need ordered silverlining matter domain supposed parallel domain planner duration distinction moot want planner degree scheduling flexibility plan also evaluated plan repop plan seen favoring quantify plan cumulativecost plan time plan scheduling flexibility plan cost cost plan show repop plan cost graphplan altalt time term makespan plan loosely time step execute plan taking possibility concurrent consideration makespan plan produced graphplan step plan makespan plan produced altalt planner plan partially ordered plan repop makespan simply longest path time step instantaneous initializing next repeatedly fixpoint rule show plan repop highly parallel makespans plan significantly graphplan makespans expense substantially parallel plan partially ordered erated graphplan plan illustrating flexibility partially ordered plan graphplan parallel plan flexibility plan term plan precedence plan scheduled illustrates parallel plan partially ordered plan graphplan repop plan makespan noticeably flexible ucpop time repop graphplan altalt time flex time flex time time show time time preprocessing dashed hour parenthesized block travel grid domain repop heuristic cost time cost plan flex flexibility plan ordering capture flexibility plan donothave indirect ordering plan easy serial plan consequently thus easy plan seen plan repop substantially graphplan block logistics gripper graphplanproduces flexible plan rocket domain ucpop ablation effectiveness heuristic ranking plan consistency enforcement show plan expanded note repop ucpop mean generating node ending plan mention plan produced planner satisfactory integration planner module scheduler executor ablation effectiveness accelerationtechniques heuristic ranking plan consistency enforcement show numberof plan expanded ucpop restrict parallel domain repop seems logistics rocket domain heuristic largest fraction ucpop interestingly fails help scale ucpop even gripper domain spends time exploring inconsistent plan failing realize left gripper ball alleviated consistency enforcement techniquesthroughdetection resolution implicit conflict conflict comfortably gripper consistency enforcement reachability disjunctive complement reachability used heuristic generating node disjunctive also used node time work aimed accelerating planner none performanceoffered repop many idea separately introduced complementary ixtet heuristic resolution open flaw note ixtet heuristic precedes planner mcdermott bonet geffner bylander describes relaxation heuristic linear planning seems idea postponing resolution unsafe link posting disjunctive pursued smith peot well kambhampati yang work show effectiveness idea enhanced significantly generalizing conflict indirect conflict mutexes smith weld work temporal graphplan indirect conflict introduced work flaw open flaw resolved fruitfully combined repop recognizing suspendingrecursion looping duringsearch mayalso make repop conclusion work success scaling classical planning scalability planning consequently last five year work paradigm dwindled despite flexibility challenged demonstrating responsible effectiveness also exploited planner dramatically applying idea heuristic disjunctive planning reachability achieved impressive planner repop parallel planning domain empirical show repop convincingly outperform graphplan parallel domain plan repop executionflexibility planning domain tend loose ordering secondly generatingloosely orderedplans veryimportantin integration planning scheduling avenue extending work plan heuristic take unsatisfactory repop serial domain considering work altalt suggests cost achieving quantified term planning graph comprising mutex idea pursuing detected resolve indirect conflict plan ambitious pursuing considering handle partially instantiated well duration backstrom computational reordering plan jair blum furst fast planning planning graph artificial intelligence bonet geffner planning heuristic proc bylander linear heuristic optimal planning proc long automatic inference jair ghallab laruelle control ixtet proc gerevini schubert inferring planning proc haslum geffner admissible heuristic optimal planning proc hoffman nebel planning system fast plan heuristic submitted johnson morris muscettola rajan planning interplanetary practice proc joslin pollack flaw repair plan refinement planning proc joslin pollack passive postponement plan proc european conf planning gerevini schubert accelerating planner control pruning jair kautz selman pushing envelope planning propositional stochastic proc kambhampati knoblock yang planning refinement unified framework evaluating tradeoff planning artificial intelligence kambhampati yang role disjunctive propagation refinement planning proc kambhampati planning graph dynamic exploiting graphplan jair long plan graph stan jair mcallester rosenblitt systematic nonlinear planning proc mcdermott regression graph control planning artificial intelligence nguyen kambhampati extracting admissible heuristic planning graph proc nguyen kambhampati nigenda planning graph deriving heuristic plan synthesis artificial intelligence peot smith partialorder planning proc smith peot suspending recursion planning proc smith frank jonsson bridging planning scheduling review smith weld temporal planning mutual exclusion reasoning proc weld commitment planning magazine planning planning incomplete heuristic checking conformant planning piergiorgio bertoli alessandro cimatti marco roveri sommarive povo trento italy bertoli cimatti roveri milano comelico milano italy planning nondeterministic domain gained conformant planning plan achievement goal regardless uncertainty nondeterministic conformant planning paradigm relies tight integration binary heuristic driven taking degree uncertainty extensive planner hscp conformant planner show approachis extremelyeffective term time hscp gain magnitude cmbp five magnitude heuristic requiring time much memory planning nondeterministic domain recognized increasingly much harder classical planning find plan achievement goal deal uncertainty nondeterministic planning nondeterministic domain pryor collins kabanza weld cimatti rintanen producing plan hypothesis observability conformant planning goldman boddy plan goal conformant planning also close synchronization hardware circuit kohavi conformant planning tackled graphplan smith weld bonet geffner formulate conformant planning belief system relies heuristic conformant planning cimatti roveri extends checking compactly efficiently explore althoughthe approachinherits symbolicmodel checkinga blind style cmbp planner show surprising reported superior heuristic sometimes magnitude paradigm heuristic idea checking modify extend data cimatti roveri planner hscp heuristicsymbolic conformant planner overcomes bottleneck retaining mean hscp outperforms cmbp gaining magnitudein time much memory consumption structured conformant planning combined heuristic exploration planning comparing hscp cmbp work draw conclusion conformant planning nondeterministic planning domain precondition uncertain partly specified planning domain planningdomain finite atomic finite transition intuitively hold planning domain hold outcome applicable hold deterministic hold uncertain outcome distinct hold plan plan plan concatenation conformant planning plan take domain regardless nondeterministic bonet geffner belief belief intuitively expressing uncertainty collecting equally conformant planning searching powerset domain tackle need applicability belief uncertainty applicable belief applicable applicable exec plan belief exec exec exec exec applicable exec exec exec plan applicable belief empty conformant planning applicable plan final must goal plan conformant exec planning domain planning domain symbolically mean bdds binary bryant borrowing formal verification machinery used checking mcmillan bdds propositional binary directed acyclic graph terminal node node boolean bdds left branch assignment true false node bdds enjoy canonical form resulting imposition nonterminal node equivalence checking time boolean transformation disjunction negation transformation universal existential quantification boolean manipulation bdds package lack reader referred bryant thorough bdds automaton domain efficiently built domain cimatti planning domain vector next atomic domain seen assignment assignment mean vector representing mapping view planning domain clear confuse equivalently representing transition stress dependency counterpart term transformation applicability appl symbolically operation assignment pair applicable applicable belief appl represents parallel substitution next conformant planning outlined belief circle constructed forward backward goal case arrow outgoing belief fact labeling applicable belief resp backward case dual belief maximal belief labeling applicable contained belief belief canonical form bdds belief simply pointer depicts package column left show package horizontal dashed line line belief subgraph dashed line configuration forward belief solid dashed resp assignment originating node leftmost encodes sake simplicity path leading enumerative belief list vector contained twofold term memory connection cardinality belief size boolean cardinality requiring node package maximize sharing bdds minimize memory occupation term operation transformation belief equivalence inclusion efficiently performedas transformation primitive package make aggressive memoizing previously subproblems novelty integration data used heuristic heuristic hash used retrieve belief visited representing belief annotated suitable plan cost belief stored plan reach belief belief hash accessed pointer bdds representing belief relies canonical form bdds thanks boolean hash accessed returned memory occupation belief hash fixed pointer package responsible compress also reuse package interfering hashing memoizing garbage collection construction expanding belief resulting form expanding forward belief resulting applicable belief dually expanding backward expand belief combined hash bolically backward step bwdexpandbs construct appl representing association association belief dual forward step fwdexpandbs expands computing applicable tion appl data resulting resulting forward belief path attached subgraphs belief link primitive prunebsexpansion time belief expanded resulting belief previously visited belief must inserted hash visited belief eliminated prunebsexpansion operates resulting combine belief hashing sexpansion recursively descends interprets belief node node previously visited belief pruned inserted hash prunebsexpansion assumes package precede limitation many practical case take care redundancy belief plan plan pruning make sure plan left planning planning data primitive depicts backward take form bdds transition assumed globally openbspool annotated belief reached explored initialized belief annotated empty plan bsmarkvisited hash visited belief also updating cost loop line exhausted annotated belief extracted open pool line extract belief expanded bwdexpandbs computing resulting stored bsexp traversed prunebsexpansion explained belief hash visited belief accessed belief accumulated returned list resulting belief plan loop exited plan returned annotated belief inserted openbspool loop resumed openbspool empty reached reachable belief covered terminates failure dual forward reported lack backward planning applies forward step termination guaranteed fact explored belief stored visited hash monotonically accumulated belief contained finite eventually reached plan returned admits failure returned constructed plan effectiveness heuristic tackled primitive extract heuristic proceeding backward selects belief highest cardinality promising belief degree intuitively plan lead goal dually forward belief lowest cardinality plan yield high departs significantly heuristic used bonet geffner heuristic belief cube show approachcan lead dramatic failure cimatti roveri admissible sense seems backward procedure heursymbwdconformant openbspool bsmarkvisited openbspool extract openbspool bsexp bwdexpandbs bsplist prunebsexpansion bsplist break else openbspool endif else fail backward conformant planning case data hscp heuristicsymbolic conformant planner cmbp cimatti roveri http carried extensive covering test case literature conformant planner lack refer cimatti roveri relevant system heuristic style cmbp checking conformant planner smith weld qbfplan rintanen outperformed cmbp cimatti roveri cmbp hscp backward pentium memory linux fixing memory time hour depicted plot refers logarithmic scale time time find planning discover admits preprocessing time case file compiled linked case cmbp hscp reported automaton construction optimized reported cimatti roveri omelette show heuristicsymbolic hscp outperforms cmbp turn outperforms cimatti roveri magnitude magnitude case omelette magnitude case btuc bmtc high uncertainty ring reach fixed btuc package package package bmtc uncertainty bmtc uncertainty bmtc uncertainty package package package bmtc high uncertainty bmtc high uncertainty bmtc high uncertainty package package package corner face side side side cube corner cube face cube side side side ring uring omelette room room good time uring representable reach memory solid triangle plot cmbp hscp term memory cmbp twice memory hscp main seems cmbp represents plan symbolically cmbp guaranteed plan hscp plan surprisingly hscp plan bmtc omelette differently admits conformantsolution thereforeit exploration cmbp outperform hscp expand operation hscp outperforms cmbp deal bdds size work conclusion paradigm resulting conformantplanning combined heuristic taking degree uncertainty gain magnitude time cmbp five heuristic memory work hardware synchronizationsequences used testing equivalence checking synchronizationsequence seen particularform conformant planning synchronization take circuit unknown cimatti tackle paradigm benchmark show competitive specialized pixley work finzi deterministic relies heuristic comparable cmbp ferraris giunchiglia tackle conformant planning nondeterministic domain parallel problemstackled cmbp hscp expressedin planner subject restriction cimatti hscp used analyze circuit parallel expressed mcmillan planner ferraris giunchiglia discover admits conformant plan reported comparable smith weld also cimatti roveri bertoli used planning observability work investigate accurate heuristic combine degree uncertainty domain style extend cimatti roveri expand symbolically belief time also generalize work deal goal expressed form temporal specification bertoli bertoli cimatti roveri traverso planning nondeterministic domain observability checking proc aaai bonet geffner bonet geffner planning incomplete heuristic belief proc page aaai bryant bryant boolean manipulation ordered computing survey september cimatti roveri cimatti roveri conformant planning checking artificial intelligence cimatti cimatti giunchiglia giunchiglia traverso planning checking procedure proc lncs page toulouse france september cimatti cimatti roveri traverso planning domain checking proc pittsburgh june aaai cimatti cimatti roveri bertoli searching powerset automaton combining checking proc tacas page springer ferraris giunchiglia ferraris giunchiglia planning satisfiability nondeterministic domain proc austin texas aaai finzi finzi pirri reiter open planning calculus proc austin texas aaai goldman boddy goldman boddy expressive planning explicit proc page aaai kabanza kabanza barbeau planning control rule reactive agent artificial intelligence kohavi kohavi switching finite automaton book company york isbn mcmillan mcmillan checking kluwer academic publ pixley pixley jeong hachtel synchronization binary proc automation ieeecs pryor collins pryor collins planning contingency artificial intelligence somenzi pixley synchronizing finite machine proc automation page dallas june rintanen rintanen constructing plan theoremprover artificial intellegence smith weld smith weld conformant graphplan proc page menlo park july aaai weld weld anderson smith extending graphplan handle uncertainty sensing proc page menlo park july aaai planning nondeterministic domain observability checking piergiorgio bertoli alessandro cimatti marco roveri paolo traverso sommarive povo trento italy bertoli cimatti roveri traverso milano comelico milano italy planning observability challenging planning hard theoretically experimentally novel planning observability domain possibly cyclic graph induced domain generates plan guaranteed goal despite uncertainty uncertain observability domain mean checking tackle practice exponential blow show experimentally practical evaluating planner literature comparingit planner partially observable domain planning focusing planning nondeterministicdomains incomplete pryor collins kabanza weld cimatti rintanen bonet geffner mechanismand generatedplans dependon assumed kabanza cimatti construct plan full observability spectrum conformant planning smith weld bonet geffner cimatti roveri bertoli construct plan guaranteed tackle middle spectrum planning observability case part domain time past pryor collins weld bonet geffner significantly difficult case observable conformant planning littman planning full observability planning observability must deal uncertainty make domain powerset belief bonet geffner conformant planning plan planning observability make contribution formal partially observable planning domain resulting sensing pryor collins weld automatic sensing toveyand koenig novel planning possibly cyclic graph induced domain generates acyclic plan guaranteed goal despite uncertainty uncertain mean checking extending planning checking paradigm system cimatti experimentally analyzing distribution planner partially observable domain maze domain koenig tovey koenig outperforms planner partially observable domain weld bonet geffner formal partially observable planning domain planning planning planner work draw conclusion partially observable domain nondeterministic domain hypothesis observability acquired time robot navigation domain partially observable planning domain tuple finite finite transition finite intuitively collection holding transition describes applicable loss generality boolean call resulting specifies assumed convey specified stating hold true false case undefined hold hold true dual hold false case hold robot navigation domain containing room extra wall domain four room exactly hold four robot move four deterministic gonorth gosouth gowest goeast wall applicable time tick wall proximity robot walln wall wallw walle domain case domain call automatically independently actionindependent domain obswalle acquire walle case walle obswalle undefinedotherwise observationvariables modeled automatic sensing tovey koenig acquired usual embedded controller signal sampled acquired fixed rate latched internally used planning weld explicit like obswallw plan partially observable domain plan need branch observable plan domain empty plan concatenation plan plan read else plan move robot uncertain goeast gowest depicts goeast indistinguishable pointless observe robot move east guaranteed plan branch walln planner distinguish robot move south nothing robot guaranteed move west plan guaranteed reach true false undefined case observability plan work distinguished belief applicable empty belief applicable plan case plan exec exec applicable exec applicable exec exec exec exec exec exec exec exec exec exec plan applicable exec plan applicable reached plan plan collapse executionof branch item branch executable case replacing last plan time must undefined previously lack omit explicit formal formalize planning observability planning planning planning domain goal plan exec planning planning observability seen graph belief recursively constructed belief expanding encountered belief applicable belief expands representing goeast applicable conveys belief expands representing gowest resulting belief observing walln resulting belief find find discarded plan observability exploring andor basically postorder traversal proceeding forward belief ruling cyclic plan stored associating mark encountered belief mark none processing visited belief procedure orsrch ornode failure ornode isfailure mergeresults andsrch ornode ornode rest ornode procedure andsrch andnode success andnode isfailure bssrch andnode andnode rest andnode procedure bssrch isbsprocessing failure else isbssolved success else isbsnone markbssolved success else prevfailure retrievefailure isfailure prevfailure prevfailure else markbsprocessing orsrch bsexpand isfailure markbsvisited memoizefailure removebs removebs else markbssolved success planning distinguish none previously encountered plan processing processed stack visited previously processed failed stack belief marked processing bumped fail visited deserve marked processing primitive recognizing mark belief isbs mark markbs mark avoid visiting also failure associating belief belief marked processing blocked hypothesis fail memoizefailure primitive retrying process visited belief data base failure accessed retrievefailure failure applies proc failure plan walln solves sociated belief contained processed case processed retrieved failure returned planning built recursive subroutine returning success signal completed successfully pair failure signal failed belief stack lack plan construction step carried case success reported outlined case orsrch process list repeatedly extracted ornode used andsrch processed mergeresults construct accumulating failure success proceeds success explored case failure returned andsrch process trying find contained belief selects promising belief bssrch soon failed detected pair propagated success belief success returned bssrch process belief loop back case failure constructed returned line case success handled line node encountered time checked goal line retrievefailure pruned failure stack line expanded bsexpand construct orsrch failure removed stack failure stored disregarding primitive removebs started stack planner invoked bssrch depicts data built step belief marked processing marked visited stored failure belief marked plan failure introduced step mean started belief failed loop back processing last column associate plan belief becoming belief subset thus empty plan concatenation lead case plan constructed andsrch walln manipulated test plan branch plan successful belief belief processed step failure loopback step storage failure substantially enter branch navigation domain lead planner integrated cimatti planner nondeterministic domain binary bryant checking mcmillan planning full observability cimatti also considering temporally goal pistore traverso work main rely machinery bertoli conformant planning tackled deterministic belief visited belief hashing used efficiently marking belief primitive bsexpand term mean transformation used case conformant planning computes belief belief take generating form dominate full automatic domainindependent simplification analyze domain discover time losing completeness resulting plan produced needlessly carried branch useless precede procedure postprocesses getting redundancy driven heuristic delaying belief experimentallyevaluated weld bonet geffner system cassandra pryor collins outperformedby weld graphplan acyclic plan unable deal nondeterministic uncertainty planning graph built distinguished planning domain markov process probability distribution associating belief repeated trial belief tends trial grows returned acyclic test domain distribution turned trivial medical weld maze domain tovey koenig explanatory goal reached unknown empty room basically maze wall ring domain cimatti roveri navigation domain room window robot observe goal window closed unknown domainsfrom distribution someof meaningful probabilistic admit cyclic omelette domain pentium memory linux fixing memory timeout hour unless specified depicted plot refers logarithmic scale time tends degrade rapidly package reached time case empty room unable hour time trial fair liked performanceof minimumnumber trial convergence unfortunately detecting converged evident convergence existence successful trial cardinality convergence reported correspond computation time grows accordingly trial probability converging simpler like medical converges trial well trial growth computationalresources clear maze test parser unable deal ring domain fails heuristic time tried heuristic exhaustedthe memory hour time difficulty slows convergence possibility failed repeated trial upon thick line bullet crossing size reached convergence empty room domain find room size attempted maze size tackle analyzed well belief avoids explosion enumeration data memory produced plan reasonable exceptionis ring domain combined intricated plan tackle work conclusion novel planning observability encompasses automatic sensing tovey koenig sensing cassandra weld bonet geffner also goldman boddy planning exploration possibly cyclic graph induced domain heuristic like graph acyclic exhaustive style exploration decide admits acyclic plan guaranteed reach goal finite step efficiently planner mean checking show outperforms planner system qbfplan rintanen extends approachto planningto case nondeterministicdomains planning satisfiability rintanen qbfplan relies seems plan significantly branching plan planner planning observability deeply investigated framework partially observable cassandra hansen zilberstein poupart boutilier interleave planning koenig simmons genesereth nourbakhsh alternative orthogonal planning find unless made domain koenig simmons assumes safely explorable domain genesereth nourbakhsh describes planning graph show interleaf planning theoretically experimentally partially observable cyclic cimatti temporally goal kabanza also investigate heuristic case planning sensing bertoli bertoli roveri cimatti heuristic checking conformant planning proc bonet geffner bonet geffner planning incomplete heuristic belief proc bryant bryant boolean manipulation ordered computing survey cassandra cassandra kaelbling littman acting optimally partially observable stochastic domain proc cimatti roveri cimatti roveri conformant planning checking jair cimatti cimatti roveri traverso automatic universal plan nondeterministic domain proc genesereth nourbakhsh genesereth nourbakhsh incomplete proc goldman boddy goldman boddy expressive planning explicit proc hansen zilberstein hansen zilberstein heuristic cyclic graph proc kabanza kabanza barbeau planning control rule reactive agent artificial intelligence koenig simmons koenig simmons robot navigation pose uncertainty heuristic proc littman michael littman judy goldsmith martin mundhenk computational probabilistic planning jair mcmillan mcmillan checking kluwer academic publ pistore traverso pistore traverso planning checking goal domain proc poupart boutilier poupart boutilier valuedirected belief pomdps proc sixteenth uncertainty artificial intelligence pryor collins pryor collins planning contingency jair rintanen rintanen constructing plan jair rintanen rintanen quantified boolean proc smith weld david smith daniel weld conformant graphplan proc tovey koenig tovey koenig gridworlds testbeds planning incomplete proc weld daniel weld corin anderson david smith extending graphplan handle uncertainty sensing proc planning checking goal domain marco pistore paolo traverso sommarive povo trento italy pistore traverso addressed planning domain classical planning also case goal temporal property trivial domain goal take fact plan many enforced enforced address planning generates automatically plan goal nondeterministic domain also preliminary planning checking real planning domain intrinsically nondeterministic case robotics control domain domain planner deal goal final desired planner need plan whole path resulting robotic need robot move room avoiding area path dealing domain task extending goal lead main fact plan nondeterministically robotics hand like plan reach room also dangerous area avoided hand realistic domain plan accept plan weaker accept robot possibility reaching room guaranteed guaranteed avoid dangerous area alternatively plan robot reach desired trying avoid area area crowded planning generates automatically plan goal domain goal emerson temporal take fact outcome goal distinguish temporal plan plan built strictly expressive plan simply like universal plan schoppers bonet geffner cimatti daniele expressing plan execute history expressiveness deal goal planning inside cimatti bdds burch compactly explore efficiently preliminary show work practice structured nondeterministic planning domain goal plan goal planning show planning domain planning domain term transition describing lead possibly many planning domain tuple finite finite transition adjust load adjust unlock load lock lock unload unlock domain requirethat transition reachedfrom depict planning domain item load adjust nondeterministic load succeed lead item locked fail lead item need adjusted lock adjust turn fail leave item positioned incorrectly domain wait leaf unchanged locked misplaced hold locked misplaced work describing planning domain many pddl able domain disjunctive load pddl load precondition locked misplaced misplaced goal goal expressed domain goal next time weak temporal operator universal existential path quantifier path infinite take intuitively mean hold successor mean path path prefix path hold last prefix hold prefix path hold never hold temporal operator stand eventually abbreviation stand globally abbreviation even allowed front easy generic pushing negation goal plan reachability goal reach guaranteed reached plan spite reach possibly reached achieves goal locked locked satisfied weaker locked locked satisfied unlocking loading item locking reasonable reachability stronger executionloops possibility terminating goal guaranteedto achieved goal locked locked locked satisfied plan unlocks load outcome lock item misplaced repeatedly adjust item hopefully reached lock distinguish kind maintainability goal maintain avoid maintain avoid robot never harm avoid dangerousareas weaker requirementsmight property like fact robot avoid battery compose reachability maintainability goal plan reach eventually maintained controller reach eventually temperature maintained alternatively case pump fail turn possibility reach maintain temperature desired goal intuitively mean maintain possibility reaching reachability goal make operator reachability goal property must preserved reach desired temperature leaving pump last domain goal unlocked empty lock maintain possibility reaching item locked formalized locked misplaced locked locked rest call goal goal composing universal existential path quantifier essential like emerson kind plan goal plan describes goal also depend executor take step goal domain plan lead time execute lock load item time plan term encoding executor specifies term outcome specifies next plan domain tuple ctxt ctxt plan ctxt associate reached ctxt pair never reached plan plan satisfies goal reach plan execute rest plan executable plan executable ctxt ctxt intuitively plan specifies proceed outcome plan lock ctxt unlock ctxt load ctxt ctxt adjust ctxt ctxt lock ctxt wait ctxt plan plan term transition pair formally domain plan transition plan tuple ctxt plan nite transition plan infinite nondeterminism domain case plan loop pair finite presentation plan kripke emerson pair transition corresponds transition plan domain plan depicted goal true semantics kripke formal emerson make self contained case propositional treated usual path path case existential path quantifier plan satisfies goal planning domain goal plan plan satisfies goal plan satisfies goal plan satisfies goal planning planning domain trying goal goal defines next reached intuitively must hold must projected next extract next progressing goal hold must hold next must hold block functionprogrthat rewrite goal progressing next progris induction goal progr progr progr else progr else progr progr progr progr progr progr progr progr progr progr progr progr progr progr progr progr progr progr progr progr progr normal form disjunction kind conjuncts form form need distinguish must hold next must hold next progr belongs disjunct progr disjuncts correspond alternative evolution domain alternative plan progr pair pair containing part disjunct progr progr progr disjunct progr assigns goal satisfied next assignment universally quantified goal next existentially quantified goal next domain locked misplaced locked misplaced progr load next locked must hold misplaced must hold four assignment explored locked misplaced easy assignment lead successful plan block progr planning goal plan reported forward pick progress goal successor iterates goal satisfied path lead failure plan list goal exploration precisely list goal progr list represents goal goal step come list main open build plan plan returned returned plan built initially passed ctxt open list pair open open trying build plan pair open loop enforced case open loop loop good plan returned computes goal whole loop iteratively considers pair open next occurrence pair intersects setof goal list goal case loop semantics goal eventually fulfilled goal plan open open plan open else plact returnpl foreach foreach progr foreach open conc open foreach ctxt next open open setof boolean head open head open setof open tail open false else true planning stay whole loop fact weak goal weak goal continuously never fulfilled acceptable untils eventually fulfilled pair open plan definedplact true plan pair branch success pair neither open plan considers turn executable progress returned functionprogr assignment recursively list goal ordered namely goal also list also recursive call take fact list open conc open namely pair front argumentopen recursive call plan recursive call successful final plan returned recursive call next assign progress tried fail plan returned call successful plan goal locked locked locked terminates domain goal plan planning preliminary test case planning goal domain show practice case settle inside cimatti bdds burch overcome planning huge size realistic domain domain explicit revisited taking fact bdds work effectively lack well test case home page http planning goal domain literature kabanza test simplan planner goal domain room door room robot grasp room domain fact door defective close explicit robot goal lack goal moving room keeping kabanza framework goal form parametrized moved defective door time build plan reported test pentium memory linux time scale logarithmic show time grows exponentially corresponds exponential growth size domain influenced nondeterminism case domain reported kabanza show complementary simplan scale well explicit suffers significantly case domain simplan case deterministic domain enforced control able largest part graph show outperforms simplan latter control surprising dramatically explicit case huge conclusion work automatic planning domain goal expressed checking open possibility deal naive transcription explicit work potentiality bdds exploration huge plan extensive test kind goal realistic domain show practical case full observability work case planning goal observability main planning goal never work framework planning checking cimatti daniele bertoli none work framework deal temporally goal temporally goal certainly work restrict deterministic domain giacomo vardi bacchus kabanza work considers goal domain kabanza goal make planning close automatic synthesis controller asarin kupferman vardi work area foundation practical ratherdifferenttechnical assumptionson asarin asarin maler pnueli controller synthesis discrete timed system system lncs bacchus kabanza bacchus kabanza planning temporally goal annals mathematics artificial intelligence bertoli bertoli cimatti roveri traverso planning nondeterministic domain observability checking proc bonet geffner bonet geffner planning incomplete heuristic belief proc aips burch burch clarke mcmillan dill hwang checking computation cimatti cimatti roveri traverso automatic universal plan domain proc daniele daniele traverso vardi cyclic planning revisited proc giacomo vardi giacomo vardi planning temporally goal proc emerson emerson temporal modal leeuwen handbook volume formal semantics elsevier kabanza kabanza barbeau stdenis planning control rule reactive agent artificial intelligence kupferman vardi kupferman vardi synthesis incomplete proc temporal schoppers schoppers universal plan reactive robot unpredictable proc planning planning temporal uncertainty reactive temporal planning phil brian williams massachusetts cambridge williams mark abramson draper cambridge mabramson unmanned vehicle robustly elaborate mission uncertain system introducing reactive rmpl combine unified flexibility embedded reactive deliberative reasoning temporal planner kirk planning system take expressed rmpl compiles temporal plan network used temporal planner clarifies temporal planning planning permit task used planning unified holy grail autonomous agent remote agent muscettola spread processing embedded system vehicle execute mission autonomy land vehicle must respond uncertain unforgiving fast response time high assurance time success look creation cooperative robotic network heterogenous collection vehicle plane helicopter boat work concert rescue hurricane natural disaster giant telescope deployed composed satellite carrying telescope optical satellite concert planet around star unusual weather earth creation robotic network practice mission failure climate orbiter polar lander highlight creating highly capable vehicle realistic cost spacecraft flight team time think plausible arise encode response validate high assurance break barrier need invent paradigm advocate creation embedded modelbased retain control success mission game plan contingency experience high degree success able game plan feature best embedded reactive synchronous halbwachs like esterel lustre signal rich construct interacting sensor actuator creating involving concurrency preemption modularizing encapsulation modelbased extends style reactive construct neccessary flexible mission coordination hiding reasoning hood compiler argue elevating thinking automating process reasoning system many mission failure climate orbiter polar lander isolated difficulty reasoning system hand form reasoning book keeping hallmark computational compiler composable system developing reactive rmpl four type reasoning system reasoning contingency scheduling inferring system hidden controlling develops rmpl contingency scheduling williams show rmpl used infer hidden rmpl middle ground like firby highly flexible temporal planner like hsts muscettola handling concurrencymechanisms embeddedlanguages goal nondeterministic make reactively addressing concern schedulability resolution fall failure rmpl incorporates forward looking planning scheduling temporal planner severely restrict plan thread rmpl response mitigates risk introducing subset rmpl construct reactive plus construct contingency scheduling kirk compiles rmpl temporal plan network compactly thread rmpl resource conflict concurrent kirk planning rmpl look network find thread temporally consistent partially ordered temporal plan kirk leap plan plan tsamardinos remote agent muscettola kirk simulated rescue mission cooperative rescue part rescue mission enroute vehicle rendezvous target area selects path traveling target area path series waypoints target transmits message forward controller arrival waiting receives authorization engage target area path travel target area predetermined window time selecting path enroute externally imposed rescue mission must minute time allotted enroute codifying enroute feature embedded concurrent thread going series sending message forward controller concurrently awaiting authorization maintenance synchronization corridor need maintained safe flight synchronization construct embedded need construct expressing alternative contingency corridor construct robotic firby used reactively kirk must forward rmpl identifying consistent rmpl construct summarize rmpl need construct expressing concurrency maintaining synchronization contingency relevant rmpl construct case letter like case letter like rmpl invokes primitive time construct initiating asserts true time literal construct asserting thennext satisfied literal construct expressing branch asserting precondition maintaining ensures throughout construct introducing maintenance protection concurrently construct forking process consecutively construct process constrains duration construct expressing reduces construct expressing contingency note thennext construct synchronization asserted neccessary construct concurrent thread maintaining construct block creating preemption handling note kirk need planning address unconditional planning restriction maintaining maintenance kirk must hold planning time construct enroute maintaining maintaining arrived watching proceed flight path time maneuver allocated flight flight maintenance flight path okay arrival transmitted forward controller receipt message proceed concurrently monitored temporal plan network rmpl choosing thread plan checking consistent schedulable scheduling essential plan quickly suggests compiling rmpl plan graph line graphplan satplan weld searching precompiled graph also plan temporal flexibility offered partially ordered temporal plan committment leaf slack adapt uncertainty fault committment expressed temporal planning temporal network dechter build temporal flexibility build plan temporal plan network enroute name label omitted keep clear node pair node pair correspond node node represents flying area represents consequence mission last minute also path target area restriction path used encodes feasible augmenting type temporal restrict bounding duration time temporal restrict expressing assertion must enroute path pair target area time unit case transmits arrival message forward controller concurrently wait receive authorization proceed selects path target area take transmit arrival message proceed case path time enroute started time arrived target area satisfies temporal enroute path duration flight planning next identification consistent temporal planning network temporal network augmented node sufficent capture rmpl construct like temporal network node temporal temporal constrain temporal labeled tell well duration tell label asserts true temporal modeled node label true enroute label represents path time time temporal modeled node node encoding network node used planner must make enroute path flying target area path path capture node enroute node designated double outline dashed node enroute node compiling rmpl well formed rmpl compile mapping rmpl primitive rmpl case letter recursively mapped invoke time unit assert true thennext execute satisfied maintaining execute throughout concurrently execute execute reduces planning compiling rmpl kirk planner consistent corresponds unconditional temporal plan plan made relevant labeled linked tell plan consistent violate temporal resulting plan plan runner tsamardinos kirk planner describing invoked invocation invokes enroute node parallel thread constrains time path node vehicle node planner path network path consistent path defines vehicle path defines rest term assertion requirementof relevant duration gray planning interleaved phase phase resembles network discovers constitute feasible plan incrementally checking temporal consistency phase analogous repair step causal link planner detected resolved open closed weld phase plan phase selects path planner handle variant network ahuja rooted encoding searching network recall node node node plan node tail node must plan plan node alternate planning selects exactly plan network completes path reach subnetwork path temporally consistent corresponds testing consistency dechter next phase planning summarized modified network node node path node empty node remove node unmarked node mark tail tail else node tail tail backtrack extends node iteration node treated extending path line node treated branching path extending line iteration main modified network test temporal consistency line test fails call backtrack line reverts unmarked remaining selects simplicity explanation chronological backtracking wealth note temporal consistency iteration long induced network temporal inconsistency induced determining done checking tail node done time significantly practice testing temporal consistency iteration worst case also note stop extending path encounter node fact node concurrent thread merged modified network completes node path startnode searching enroute network illustrate modified network enroute network node node initially node indicated darker shade iteration kirk chooses node node node node selects tail continues node node modified network chooses node node node must selects continues extending reach note forming temporal consistency temporally inconsistent backtracks open node tried path extend path resulting temporally consistent checking temporal consistency temporal consistency note subnet plan network minus label form temporal network temporal consistency checked temporal network dechter recall consistent encodingas graph dechter well knownalgorithms detecting negativecycles time cormen used time node graph need maintain label node take variant used hsts muscettola fast inconsistency kirk planner variant generic ahuja take asymptotic time many also precludes phase open tell handled analogous open causal link planning weld conflict asserting tell requesting true asserting requesting false tell conflict open need true time labeled resolving planner computes feasible time temporal node network identify potentially overlapping labeled inconsistent graph partially completed plan kirk computing shortest path algorithmwhich feasible time planner detects overlap time overlap labeled conflicting resolved ordering pair need identified efficiently kirk maintains data keep track assert negation identify planner need take asymptotic time cardinality much practice sophisticated indexing scheme tree cormen resolved introducing temporal time overlap resolve force ordering activites promotion demotion classical planning weld closing open open labeled represents request satisfied time time contained asserted tell open satisfied closed causal link drawn tell open detected simply scanning activites checking potentially overlapping detecting tell open temporal duration open contained tell closing open asks also closely hsts planner satisfies compatibility muscettola kirk compiler generates specification file lisp kirk planner generates plan consistency kirk executive remote agent plan runner tsamardinos take resulting partially ordered temporal plan vehicle simulator summarizes kirk nominal plan rescue expanded node testing aptiva intel pentium processor redhat linux node plan time follow refers planned node size expanded planning half final plan rest unselected primitive final plan plan time give time took kirk plan kirk rmpl significantly constrains plan spirit hierarchical task network planner erol reduces planning graph kirk well guidance node time dominated time feasible time chronological exploring reimplementation johnson sophisticated contribution reactive temporal plan network explore planning synthesis causal link planning weld temporal planning muscettola hierarchical task network planning erol planning blum furst weld smith weld particularly mutual exclusion relationship effectively employed practical temporal planner domain hsts muscettola ixtet laborie ghallab plan depletable resource rmpl rmpl theoretic planning agile maneuver planning robotic vehicle rmpl expressive embedded inheriting primitive combinators timed concurrent saraswat primitive rich operator derived preemption handling embedded like esterel berry gonthier unconditional planning considers case prevented rmpl handling best exploited planning rmpl constrain family planner considers controlling embedded system family safe embedded like esterel berry gonthier lustre halbwachs signal guernic clean semantics machine verification safety liveness property verification rmpl timed automaton verification acknowledgment like thank michael hofbaur tony abad reviewer invaluable insight part office naval darpa mobies ahuja ahuja magnanti orlin network flow prentice hall berry gonthier berry gonthier esterel semantics november blum furst blum furst fast planning planning graph artificial intelligence cormen cormen leiserson rivest camb dechter dechter meiri pearl temporal network erol erol hendler planning expressivity proceeding page firby james firby manual univ chicago march guernic guernic borgne gauthier maire programmingreal time signal page halbwachs halbwachs caspi pilaud synchronous lustre page halbwachs halbwachs synchronous reactive system kluwer academic laborie ghallab laborie ghallab planning sharable resource proceeding muscettola muscettola morris pell smith temporal reasoning autonomous control system autonomous agent muscettola muscettola nayak pell williams millennium remote agent boldly system gone artificial intelligence muscettola muscettola hsts integrating planning scheduling mark monte zweben intelligent scheduling morgan kaufmann saraswat saraswat jagadeesan gupta timed default concurrent symb comp smith weld smith weld temporal planning mutual exclusion reasoning proceeding tsamardinos tsamardinos muscettola morris fast transformation temporal plan proceeding weld weld commitment planning magazine weld weld planning magazine williams williams chung gupta mode system proceeding dynamic control plan temporal uncertainty paul morris nicola muscettola nasa ames moffett pmorris thierry vidal tarbes cedex france thierry planningsystems deal quantitative time used temporal temporal consistency plan many process uncertain duration agent case temporal feasibility work controllability property weak dynamic controllability controllability property dynamic ironically proved difficult analyze resolve dynamic controllability unexpectedly turn tractable also show efficiently execute network verified temporal network dechter proved planning scheduling quantitative time laborie ghallab muscettola fast checking temporal consistency formalism adequately address real domain time occurrence control agent spacecraft command instrument interrogates sensor varying time intervene operation completed case like agent freedom precise time delay accord previously independently agent lead violation even temporal network appeared consistent plan time satisfaction temporal network uncertainty addressed formally vidal ghallab vidal fargier temporal feasibility mere consistency encompass controllability network controllable timepoints agent control satisfies involving uncontrolled timepoints work identified controllability controllability static control guaranteed work case weak controllability clairvoyant work uncertain duration network controllability property practical view dynamic controllability assumed uncertain duration finished property successful past outcome work checking weak controllability controllability tractable weak controllability vidal fargier morris muscettola dynamic controllability proved difficult analyze time asymmetry control depend past propagation checking dynamic controllability implicit dynamic controllability property dynamic controllability checking reduces form consistency checking turn derived also used guide background review temporal network dechter temporal network uncertainty vidal fargier temporal network graph edge labelled node graph temporal timepoints edge correspond duration formally node edge mapping edge real duration graph dechter derived consistent graph shortest path propagationsuch cormen avoid confusion edge graph refer edge link temporal network uncertainty stnu link divided contingent link link contingent link thought representing causal process uncertain duration finish timepoints contingent timepoints subject imposed contingent link timepoints executable timepoints agent goal link duration contingent link vary independently control procedure must duration thus stnu subset edge contingent link link contingent link stnu regarded ignoring distinction contingent link link terminology allpairs stnus choosing allowed duration contingentlink thoughtof reducingthe stnu ordinary thus stnu determines family stns stnu vidal ghallab temporal network derived link replaced identical link contingent link replaced link fixed stnu schedule mapping time schedule consistent satisfies link schedule duration contingent link finish timepoint viewed mapping call prehistory mapping schedule viable consistent type controllability vidal stnu weakly controllable viable equivalentto sayingthat everyprojection consistent uncertainty well replace link stnu strongly controllable viable executable timepoint thus assigns fixed time executable timepoint irrespective outcome contingent link stnu dynamically controllable viable executable timepoint thus dynamic assigns time executable timepoint depend outcome contingent link past corresponds requiring used determining schedule dynamic viable dynamic network contingent link finishing clearly dynamically controllable morris muscettola exclude network remainder easy controllability dynamic controllability turn weak controllability controllabilityis knownto tractable weak controllability investigate dynamic controllability note checking property hyperexponential searching dynamic viable vidal worst case exponential terminology contingent link squeezed contingent link imply strictly tighter link stnu consistent none contingent link squeezed network edge arising contingent link shortest path thus contingent link survive unchanged allpairs graph abbreviated allpairs graph note pseudocontrollability time computing allpairs graph easy weakly controllable network squeezed contingent link imply consistent converse true even stnu originally contingent link squeezed viewed augmenting network make morris muscettola contingent link squeezed circumstance squeezed propagation link squeezed propagation link even case squeezing relevant dominated contingent link mean redundant dominance contingent link squeezed network safe safe network like ordinary thus dynamically controllable triangular reduction resolving dynamic controllability triangular stnu network network involving timepoints contingent link contingent link link contingent link used contingent link triangle also triangular network allpairs form edge shortest path triangular network derive concerning tightening reduction must obeyed schedule resulting dynamic vary case involving sign call follow case reversed network dynamically controllable time fact like ordinary propagation vice versa thus network safe tightening next case call precede case simultaneously case tightened dynamic schedule depend unchanged mutated violated thus show tightening equivalently dominated redundant thus network safe case call unordered case follow follow case violated dynamic time occurred time occurrence also viewed ternary call wait must wait wait expires subcase turn unconditional wait expires simply raise call unconditional unordered reduction truly subcase obvious idea branch separately possibility turn case network safe follow case also give thus dominated redundant boundu network safe morris muscettola observe case branching raise call unordered reduction dynamic lead tightening tightening violation network dynamically controllable hand network remains tightening unordered case must possibility triangular network safe thus dynamically controllable morris muscettola thus tightening give procedure determining dynamic controllability triangular network dynamic controllability test stnu network dynamic controllability construct allpairs graph regarded triangular subnetworks triangle contingent link viewed triangle contingent link twice contingent link turn playing role treated link tightening propagates neighbour triangle quiescence network reached arises unordered case branch conditionals combinatorial prefer avoid unordered reduction resultingiterative algorithmis deterministicand network necessarily safe propagation viewed dynamic controllabilitychecking procedure applies triangle classical network call property controllability call resulting filtering process sound fails triangle dynamically controllable whole network incomplete invite reader triangle quiescent deterministic reduction network stable quiescent network subnetwork acdb difficult dynamic must violation link network dynamically also show network network belonging dynamic removed tightened checking ideally minimality property desirable nevertheless rule wide network regression wait incompleteness suggest reconsider combinatorial exhausted possibility obtaining deterministic reduction unordered case ternary unordered wait used branching ternary treated like binary wait wait time placing annotation link note impossible wait true corresponds unconditional unordered reduction triangle unordered case receives wait unconditional triangle label occurred time unit time unit occurred wait violated word wait regressed derived wait relative happily unconditional wait time lead resolution well network lead lemma regression link wait schedule resulting dynamic link upperbound deduce wait contingent link deduce wait occurred must violates wait unless occurred must occurred neither depend outcome thus mutated finish finish lead violation wait note applicable contingent link give restrictive wait regression iterated regression type propagation wait spread link propagated wait examined unordered reduction ordinary throughout network intuitively dynamically controllable wait worst case incursion contingent link regress wait procedure dynamicallycontrollable network graph false triangle tightening precede case wait unordered case regression wait convertingunconditional wait also reduction step tighter true checking give wait give rise unconditional case regress wait give giving rise regress wait give wait reduction ensures inconsistency thus lack dynamic controllability violation consistency dynamic checking determining dynamic controllability summarized enhancement wait regression show completeness presenting dynamic showing viable checking success simplicity take allpairs graph tightened network transformingit dispatchable graph muscettola ordinary wait wait satisfies note wait converted wait wait enforced timepoint constrained timepoint step timepoint live time timepoint enabled timepoints link muscettola clear depend past violated property stns incrementally muscettola feature introduced stnus need fail deadlock wait last forever wait forcibly aborted procedure execute network propagation timepoint execute executable timepointsthat reached arbitrarily pick executable timepoint thatis live enabled wait satisfied execute halt network propagate time propagating anycontingent timepoints executable timepoint eligible network propagation squeeze contingent link deadlock contingent link wait wait deadlock link labelled wait wait enforced imply reduction thus link corresponds inconsistency network detected step checking possibility lemma lemma network successfully passed checking failure aborted wait failure aborted wait earliest time wait link pointed wait must link note obviously timepoint case case wait aborted step timepoint possibly initiated propagation produced note regression wait checking unconditional wait enforced case time contradicts wait terminated case possibility contingent timepoint thus agent contingent link regress wait througheb getting latter wait must satisfied thus duration duration wait satisfied lemma network successfully passed checking failure squeezing contingent link earliest failure squeezing contingent link must propagation raise triangular reduction dominates adjacent link finishing case link unordered case mean possibility squeezing propagation existence checking wait propagation enforcement wait ensures thus propagated squeezed dynamic controllability deterministic time lemma demonstrate successfully network verified checking thus dynamic controllability checking noted also sound derived dynamic controllability tighteningsare clearly convergenceis assured domainsof constraintsare strictly reducedby tightening long convergence take crude fixed finite link link reduction domain empty grows polynomially size worth pointing preserve flexibility tightening wait dynamic controllability waypoints morris muscettola surrender flexibility time prescribed impairing success dynamic incremental propagation ensures remaining domain consistent dynamic word checking network sense conclusion dynamic controllability certainly main contribution property many planning scheduling much harder applicable stnu opposed translation automaton vidal inspired classical satisfaction dynamic controllability triangle reduction inherent give rise binary regression process also proven controllability dynamic controllability network believe contribution valuable package handle temporal uncertainty help pave realtime system incorporate uncertainty cormen cormen leiserson rivest cambridge dechter dechter meiri pearl temporal network artificial intelligence laborie ghallab laborie ghallab planning sharable proceeding joint montreal canada morris muscettola morris muscettola managing temporal uncertainty waypoint controllability proc sixteenth joint conf artificial intelligence morris muscettola morris muscettola temporal plan uncertainty proc seventeenth conf artificial intelligence muscettola muscettola morris tsamardinos reformulating temporal plan proc sixth conf reasoning muscettola muscettola nayak pell williams remote agent boldly system gone artificial intelligence august vidal fargier vidal fargier handling contingency temporal network consistency controllabilities artificial intelligence vidal ghallab vidal ghallab dealing uncertain duration temporal network dedicated planning proc european artificial intelligence page vidal vidal controllability characterization checking contingent temporal network proc seventh conf reasoning planning planning probabilistic planning jussi rintanen freiburg institut informatik freiburg breisgau germany expressive uncertainty markov process mdps framework best modelled implicitly enumerating operator used planning kind powerful make construction computationally many unit time relevant rationality criterion opposed widely used discounted criterion solid planning computational analyzed investigate existence mdps criterion mdps term probabilistic operator memory degree unrestricted existence partially observable case undecidable remaining computational nexp deterministic nondeterministic exponential time markov process mdps formalize controlling nondeterministic transition system utility criterion satisfied transition probability determines valued cost incurred kind planning addressed work system internet agent autonomous robot repeatedly time presence uncertainty desired follow expressed plan classical deterministic planning path goal explicit graph solvable time implicit term operator sometimes exponentially concise path existence bylander closely existence path graph circuit papadimitriou yannakakis lozano balcazar graph compact graph used galperin widgerson papadimitriou yannakakis lozano balcazar balcazar feigenbaum mdps pomdps viewed deterministic planning framework probability determines successor probability visit valuable high probability plan determines possibly predecessor mdps reduces linear linear time many type mdps constructed time linear papadimitriou tsitsiklis existence mdps madani undecidability existence umdps pomdps main rationality criterion like classical planning concisely term operator concise work mundhenk littman littman investigated finite horizon surprisingly exponential deterministic time deterministic exponential time undecidability umdps pomdps undecidability respective concise work investigate existence mdps pomdps infinite horizon many practically autonomous robot internet agent high time unbounded reasonable discount reasonable horizon relevant criterion main restriction horizon discounted work case considerably simpler consideration structural property like recurrence periodicity avoided also many mdps phenomenon time year economics discount simply unimportance distant transcending lifetime maker boutilier puterman advocated criterion describes planning addressed introduces testing existence mdps criterion concludes probabilistic planning computational existence mdps observable umdps unobservable pomdps partially observable generalizing mdps umdps concisely valuation transition probability operator affect arbitrary size also briefly reduction restricting size pointed sometimes unambiguously stated real computational identifying recurrent taking probability reached mdps mdps transition assigns probability transition multichain restrict finite mdps formally partially observable markov tuple give transition probability transition probability must associate applying distinguished past mapping stationary mapping umdps mdps singleton uniquely pomdps indistinguishable limiting case singleton pomdps umdps mdps taking probability taking time puterman finite like stationary recurrent pomdp stay reachable probability induces pomdp recurrent consist belong recurrent reached transition determines recurrent concise mdps exponentially concise mdps assignment truthvalues transition expressed planning strip operator pair literal precondition probabilistic planning probabilistic strip operator psos boutilier psos concise transition system probability extend psos call psos epsos epso exponential psos closely operator used planning generating pomdp operator conveniently pomdp probabilistic strip operator probabilistic strip operator pair boolean circuit pair boolean circuit pair real literal probability contradicts must contradict generalizes psos requiring logically disjoint disjunction tautology epsos take independently hardness complicated restrict psos epso precondition true take true probability literal true epso antecedent logically disjoint psos cardinality exponential yield boolean circuit concise pomdp concise pomdp tuple assignment epsos representing associate boolean circuit observable observable arbitrary restriction circuit observable gate make epso circuit observable accordingly concise concise concise pomdp concise umdp concise umdp concise pomdp concise stationary make distinction history timedependent traditionally explicit flat belief high also concisely like concise pomdps connection size concisely pomdp concise case make many concerning undecidable powerful used concise determines past history divide subtasks keeping track history maintaining mapping computation applying operator transition concisely finite automaton sensible restriction computation time obvious boolean circuit circuit pcomplete hardest work concise pomdps planning used seems like controller hansen meuleau lusena concise concise concise pomdp tuple boolean circuit gate gate boolean circuit gate gate mapping stationary umdp undecidable pomdp nexp undecidable rest formally summarized give outline lemma existence circuit encodes term preceding observable existence lemma circuit encodes give stationary deeply rely formal property step time solvable time deterministic turing machine solvable time nondeterministic turing machine like turing machine oracle used ordinary turing machine turing machine oracle test membership free time reducible computable time size belongs pspace solvable deterministic solvable deterministic exponential time nexp solvable nondeterministic exponential time textbook balcazar summarizes determining existence stationary umdps mdps pomdps case existence stationary mdps coincide undecidability umdp pomdp existence unrestricted size madani emptiness probabilistic finite automaton condon lipton closely unobservable plan existence umdp stationary existence stationary umdp repeatedly operator seem also trivial show membership pspace umdps mdps pomdps straightforward reduce pspace constructing concise simulates deterministic turing machine representing tape turing machine epso represents constructed follow transition turing machine size epso size machine accepts restarted long machine rejected machine reject turing machine accepts straightforward size stationary size maintain exponential past history explicit pomdp history exponential size like pomdp stationary hand maintain history encode exponential observable unrestricted size partially observable case exponential decidable lemma real testing existence computation npexp corresponds guessing size followed oracle proceeds explicit pomdp size markov represents pomdp exponential size explicit identify recurrent time tarjan strongly probability reaching recurrent time size explicit steady probability recurrent time linear nelson time summing probability computation time explicit exponential time size concise pomdp lemma real testing existence stationary nexp case stationary potentially exponential size guessed nexp computation rest like lemma exponential evaluating computation whole computation nexp real testing existence arbitrary stationary reduction testing existence winning observable game stockmeyer chandra game used littman showing finitehorizon planning tree game player take turn changing occurring player make true game formalized epsos revers truthvalue turn player revers turn player normally evaluates true player made move eventually take winning player existence winning player coincides existence membership producing explicit exponential size linear puterman linear time real testing existence arbitrary observable mdps unrestricted size existence arbitrary coincides existence stationary real testing existence arbitrary stationary pomdp membership nexp lemma nexphardness reduce succinct papadimitriou yannakakis concise pomdps reduction reduction mundhenk reduction succinct stationary pomdps circuit reduction work pomdp chooses clause make literal observable representing auxiliary observable stationary observes assigns literal became true proceeds clause next literal clause stationary irrespective polarity literal clause none literal clause true time succinct circuit clause literal literal occurring clause pomdp epsos forced mean auxiliary epso selects clause assigning representing clause epso copy literal literal clause observable fourth epso true false fifth epso match literal last turned continues epso literal last continues epso next literal conclusion analyzed probabilistic planning decidable nexp full observability existence decidable surprising generalize computational like plan existence classical deterministic planning also closely mundhenk helpful devising planning well identifying restriction planning lemma size brings also undecidable case structural restriction pomdps bring restricted pspace high balcazar balcazar gabarro structural berlin balcazar jose balcazar searching implicit graph artificial intelligence boutilier puterman craig boutilier martin puterman planning averagereward optimality mellish proceeding joint artificial intelligence page morgan kaufmann publisher boutilier craig boutilier thomas dean steve hank planning uncertainty structural computational leverage artificial intelligence bylander bylander computational propositional strip planning artificial intelligence condon lipton anne condon richard lipton interactive annual symposium foundation page feigenbaum joan feigenbaum sampath kannan moshe vardi mahesh viswanathan graph obdds chicago galperin widgerson hana galperin widgerson succinct graph control lozano correction hansen eric hansen pomdps searching gregory cooper serafn moral proceeding uncertainty artificial intelligence page morgan kaufmann publisher littman littman goldsmith mundhenk computational probabilistic planning artificial intelligence littman michael littman probabilistic propositional planning proceeding artificial intelligence innovative artificial intelligence page menlo park july aaai lozano balcazar antonio lozano jose balcazar graph succinctly graph manfred nagl graphtheoretic lecture note page castle rolduc netherlands lozano antonio lozano succinct graph bulletin european association june lusena christopher lusena tong shelia sittinger chris well judy goldsmith brain full memory help kathryn laskey henri prade uncertainty artificial intelligence proceeding fifteenth page morgan kaufmann publisher madani omid madani steve hank anne condon decidability probabilistic planning partially observable markov proceeding sixteenth artificial intelligence eleventh innovative artificial intelligence page aaai meuleau nicolas meuleau pack kaelbling anthony cassandra pomdps searching finite kathryn laskey henri prade uncertainty artificial intelligence proceeding fifteenth page morgan kaufmann publisher mundhenk martin mundhenk judy goldsmith christopher lusena eric allender markov process july nelson randolph nelson probability stochastic process queueing mathematics modeling papadimitriou tsitsiklis christos papadimitriou john tsitsiklis markov process mathematics operation august papadimitriou yannakakis christos papadimitriou mihalis yannakakis note succinct graph control azaria probabilistic automaton academic puterman puterman markov process discrete stochastic dynamic john wiley stockmeyer chandra larry stockmeyer ashok chandra provably difficult combinatorial game siam computing computational planning temporal goal chitta baral arizona tempe chitta vladik kreinovich texas paso paso vladik raul trejo itesm campus mexico atizapan mexico rtrejo last computational planning normally goal planning make fluent true many planning goal much complicated temporal form desired fluent true want keep fluents true time planning temporal goal show goal expressible linear temporal planning goal goal expressible branching temporal planning presence plan sense classical planning take agent satisfies goal traditionally goal fluent must true goal computational plan bylander erol liberatore baral natural plan term papadimitriou baral many planning goal much complicated temporal form desired fluent true want keep fluents true time want make sure safety satisfied time planningfor temporal goal formalism describing temporal goal linear temporal bacchus kabanza allowed refer past branching temporal niyogi sarkar also allowed refer computational planning best done gelfond lifschitz variant made inertia ramification qualification concurrency sensing reasoning like stick simplicity stick main simplest feature executability brief brief reminder finite list property fluents property finite fluents mean property true property false property type fluent literal fluent negation need finite type fluent literal reasonably straightforward semantics describes fluent literal true domain rule rule activated true fluent activated rule enables true false mean truth fluent true resulting true formally domain finite type finite type fluents contained domain fluent hold hold transition describes activated fluent literal hold fluents rule activated fluents rule activated undefined plan applying plan planning domain desired property find plan resulting trajectory satisfies desired property goal make fluent true planning plan lead true planning plan checking domain desired property plan plan satisfies desired property presence fluent goal plan checking tractable checking plan satisfies fluent goal bylander erol liberatore baral temporal motivation give planning explaining temporal desirable planning flight automatic miniplane goal onlyto reach target fluent also avoid formally fluent detected must remain false time planning robot want robot goal also robot stray desired trajectory bring robot back trajectory make fluent true corrective linear temporal brief reminder linear temporal truth fluent moment time also refer truth past operator operator also analyze planning branching time niyogi sarkar niyogi sarkar operator four operator next time true moment time true moment going true true moment true moment time sometime true moment true moment true moment true moment time moment time true four past operator previously true moment time true moment true moment true moment time sometime past true moment true moment true moment true moment time past moment time last time true combine operator true moment true moment goal fluents operator propositional connective planning formulated comment operator operator moment time restricted bacchus kabanza niyogi sarkar branching temporal brief reminder branching temporal emerson niyogi sarkar operation operator path true time evolution true moment path true time evolution true moment matter fluent stay true fast maintainability planning matter fluent stop true make property true applying correcting fast maintainability formulated reached next possibility back applying correcting mean true path true next moment time fast maintainability mean satisfies property comment temporal gabbay kind planning interested informally speaking interested domain consequence goal fluent want true goal plan achieves goal interested analyzing computational planning analyzing computation time ideally want find case planning tractable computational time stand find like close tractable operating worry time computing plan also worry time take actually plan plan plan tractable reasonable restrict tractable plan plan duration tractability mind formulate planning precise term domain consequence goal want true tractably goal plan achieves goal interested analyzing computational planning planning goal expressible linear temporal goal expressible linear temporal planning comment planning even goal bylander erol liberatore baral mean temporal goal computational planning good accordance fact decidability linear temporal also emerson reader convenience goal expressible linear temporal plan checking tractable give linear temporal eight temporal operator remains true sophisticated temporal operator operator type fluent true moment time bacchus kabanza niyogi sarkar planning goal expressible branching temporal goal expressible branching temporal planning comment good accordance fact decidability branching temporal also gabbay branching temporal planning even plan checking difficult goal expressible branching temporal plan checking mean temporal goal drastically computational planning safety expressed subclass namely maintainability like need trajectory sufficient trajectory differ case planning much simpler beapositiveinteger wesaythat anexpressionin ifthisexpressionremains truewheninalloperators weonlyallowpossible trajectoriesdifferfromtheactualtrajectoryinnomorethan momentsoftime maintainability mean trajectory maintainable goal expressible branching temporal planning goal expressible branching temporal plan checking tractable conclusion conclusion goal refer system last moment time goal mention past planning much stay hierarchy conclusion goal refer planning drastically complicated thus cautious goal know planning even simplest case namely goal simply fluents bylander erol liberatore baral planning npcomplete sufficient belongs papadimitriou belongs tractable property quantifier word tractable planning checking successful plan mean checking validity stand plan succeeds planning belongs sufficient quantifier word tractable property checked time fact considering plan tractable duration plan quantifier word tractable provethe plan checking done time constitutes plan tractable successfulness know take plan take plan fluents moment time step construction linear time step construction computing fluents moment time time take desired goal parse step step fluents goal goal parsing lead quence resulting exceed goal thus goal fluents moment time sequentially moment time connective moment time need operation case previously temporal operation truth moment time need moment time moment time need step truth moment time need step case need computation thus truth desired goal need computational step look plan thus need step plan satisfies goal success plan time thus planning belongs proven planning littman baral pspace formed papadimitriou equivalently reformulated checked tifiers boundedby tractable property quantifier word tractable view easy planning belongs pspace operator quantifier word tractable namely path operator moment time operator plan also word tractable thus existence plan satisfies tractable quantifier word tractable thus planning belong pspace planning show reduce planning namely checking propositional validity type reduction done planning fluents fluents moment time moment make true moment make false rule rule assign rule time fluents goal replace quantified propositional existential quantifier universal quantifier resulting front whole creating construction lead goal reduction lead linear reduction must show reduction resulting planning solvable quantified propositional true equivalence operator goal true moment hold moment rule true moment time goal true thus goal sufficient moment case validity goal validity moment show validity moment validity quantified propositional equivalence induction induction base identically true identically false case simply coincides induction step proven desired equivalence quantified propositional quantified propositional quantified propositional type possibility existential quantifier universal quantifier case form quantified propositionalformula construction form applying construction show show show operator hold moment mean path moment true operator next fact true moment mean true next moment time time exactly made true false true false path moment viewed planning remaining induction validity moment validity quantified propositional thus true also true show true mean true induction mean goal also true moment thus path selecting true moment true path operator mean true moment exactly thus imply case universal quantifier handled induction step proven thus induction equivalence hold thus reduction planning show plan checking belongs pspace need desired reduction reduction work well reduction equivalence depend plan equivalence used trajectory trajectory thus pick plan consisting desired equivalence hold trajectory duration moment time trajectory differing trajectory differing whatever trajectory differ fixed operator enumerating trajectory thus plan checking tractable planning acknowledgment work nasa grant intelligent system grant afosr grant grant joint fund grant thankful referee valuable comment bacchus kabanza fahiem bacchus froduald kabanza planning temporally goal annals mathematics artificial intelligence baral chitta baral raul trejo vladik kreinovich computational planning planning presence incompleteness artificial intelligence bylander bylander computational propositional strip planning artificial intelligence emerson allen emerson temporal modal leeuwen handbook page cambridge massachusetts erol kuthulan erol dana subrahmanian decidability undecidability planning artificial intelligence gabbay gabbay hodkinson mark reynolds temporal mathematical foundation computational oxford york gelfond lifschitz michael gelfond vladimir lifschitz representing liberatore paolo liberatore electronic transaction artificial intelligence http littman michael littman probabilistic propositional planning aaai page niyogi sarkar rajdeep niyogi sudeshna sarkar specification goal bhubaneswar india december tata papadimitriou christos papadimitriou computational massachusetts simplifier propositional many binary clause ronen brafman israel brafman deciding propositional conjunctive normal form satisfiable npcomplete linear binary clause interestingly reduction classical planning automatic test circuit yield containing many binary clause simplifier targeted construct implication graph binary clause graph deduce unit literal deduced literal used simplify graph stabilization graph construct simpler binary clause simplifier produced encoding planning fast propositional satisfiability deciding propositional conjunctive normal form satisfiable cook practical last witnessed great progress stochastic selman systematic bayardo schrag satz anbulagan gomes increased farther kautz selman showed classical planning quickly kautz selman kautz selman planning satisfiability generic aside translation process make property planning planning syntactic property fraction binary clause interestingly property domain automatic circuit larrabee deciding propositional containing binary clause satisfying assignment constructively solvable linear time hope property make containing fraction binary clause preprocessor simplifier geared like simplifiers crawford compact take propositional propositional naturally process worthwhile overalltime requiredforsimplification simplified time derived planning show meet criterion efficiently combine wellknown form novel transitive reduction reduce size idea clause form implication property construct graph implication graph aspvall binary clause graph node literal languageand directed edge literal literal disjunction implication binary clause constructing graph transitive closure literal negation descendant descendant consequence know hold simplify simplified binary clause graph utilizes idea quickly derive unit literal simplest next background work simplification used background background briefly planning satisfiability motivated work propositional conjunctive normal form satisfiable practice answer accompanied satisfying assignment stochastic systematic stochastic selman walksat selman stochastic truth assignment find quickly identify unsatisfiable sensitive heuristic parameter systematic systematically truth assignment thus identify unsatisfiable systematic fast stable thanks branch heuristic backtracking systematic introducing randomization procedure branch gomes simplifier simplifiers specialized deductive reduce simpler best simplification unit propagation clause literal must true satisfying assignment clause must true satisfying assignment must false deduce fact simplify clause clause removed satisfaction guaranteed false literal removed clause containing transformed false simplification process yield unit clause used simplification simplification process empty clause discovered true unit clause unsatisfiable simplification failed unit clause failed binary clause unit binary clause show unit propagation resulting inconsistent case negation clause implied truth assignment accordingly inconsistent clause know must false subclass clause literal cook linear time step construction implication binary clause percentage binary clause planning graph aspvall node implication graph correspond literal graph edge literal literal clause edge graph correspond implication implication transitive implied path graph node node path know hold implied path neither hold unsatisfiable know satisfying truth assignment true literal implied descendant graph must true well planning satisfiability planning goal operator changing find operator yield goal planning kautz selman planning satisfiability kautz selman kautz selman showed planning satisfiability quickly planning planning encoded satisfiability ernst brafman encoded planning binary clause show planning accidental phenomenon close inspection type expressed encoded planning make apparent many binary implication graph time precondition must hold binary clause asserting must hold yield binary clause well encoding used blackbox planner kautz selman mutual exclusion play prominent role expressed binary clause well interestingly turn encoding exhibit percentage binary clause circuit larrabee checking shtrichman preprocessor preprocessor construct implication graph graph containing literal constructed directed edge binary clause show implication graph collapse strongly subgraph path pair node strongly path node node know consequence node imply must discover replace node child node child node parent node parent node literal must replaced node clause node node form strongly graph removing strongly transitive closure transitive closure know child implied deduce child child deduce unit propagation know child true reduce applying unit propagation binary clause edge graph transitive closure step transitive closure graph graph descendant descendant must false remove node correspond case resulting graph next unit propagation ternary clause clause remove satisfied false literal removed next clause binary clause graph sure transitively closed resulting graph child deduce false graph derive implication clause literal implied literal consequence unit propagation clause literal implied literal clause intersection deduce false transitive reduction transitive reduction graph graph node edge path path transitive closure removal node binary clause removal node simplified outputa formulawhose clause consist clause remaining simplification binary clause edge transitive reduction graph assignment deduced mapping strongly simplified assignment false false false false step novel robinson step derive literal step enhances simplify derive unit literal case derive hundred unit literal quickly fact sophisticated procedure unit literal derive binary clause intersecting implication literal binary clause implication graph transitive reduction step lead sufficient binary clause leading simpler reduction influence systematic evaluated preprocessoron benchmark encoded planning used test conducted dell latitude notebook pentium simp time time deduction satz satz time satz cessor linux time refer time examined deduce unit literal show time able assign note deducing unit literal also supply form literal utility simplified comparedthe time combined simplification time simplified systematic satz satz show simplification time give sense magnitude time prof time particularly satz take longest note many case simplified disabling preprocessor time refer reader full preprocessor hardest note time stochastic simplify crawford compact simplifier examined compact test best flag flag improves compact simplification time time combinationsof compact satz satz column correspond combined time satz simplification column satz compact simplified satz forth column used compact lead time case compact show correspondingresults preprocessor improves case significantly examined influence case timed iteration time flag compact unit resolution remove satisfied clause renames contiguous compact eliminates pure literal resolve away occurrence literal lead contradiction simplification compact satz simplification compact formance walksat stochastic noted stochastic tuning tried find best parameter case show mixed fold simplified simplification time time reduction ignores transitivereduction step maintain many binary clause last column mixed surprising stochastic know sensitive form conclusion work many binary clause arise naturally abundance binary clause exploited specialized inference principled simplification transitive closure walksat time walksat implication graph novel derive literal step transitive reduction lead powerful resolution binary clause used brafman encoded planning show beneficial systematic virtually tested shorter time stochastic mixed utility utilize binary resolution area larrabee used implication graph devise larrabee larrabee systematically generates satisfying assignment consistent implication graph assignment satisfies satisfying assignment whole binary utilize contemporary ordering gelder tsuji davis branch construct transitiveclosure implication graph next branching thus dynamic dynamic line competitive satz maintaining transitive closure costly term time memory satz seems unit propagation seems utilizes implication graph restricted transitive reduction good simplifier necessarily good systematic acknowledgment gratefulto yefim dinitz help advice graph comment work part paul ivanier robotics production
