optimization specially tailored gathering greedy minimizes gathering plan removing redundant overlapping loss completeness heuristic guide greedy remove costlier work handle recursive plan arise practice ordering access reduce cost internet access limitation cost gathering affected network traffic connection cost representing access greedy ordering call limitation take access cost traffic cost requring full statistic empirical emerac prototype gathering system explosive growth popularity resulted thousand structured queryable internet promise unprecedented user unfortunately promise transformed reality relevant virtually userqueries morass formidable hurdle effectively accessing alleviating gatherer also mediator take user execute gathering plan access relevant answer user efficiently part young investigator award laboratory planning initiative grant army aasert grant afosr grant grant thank selcuk candan many helpful comment step gatherer database artificial intelligence gathering modeled virtual schema user interested describing accessible materialized view schema user posed term schema schema virtual stored anywhere computing answer rewriting extensional rewrite correspond materialized view database addressed rewriting duschka subsumes work clean constructing gathering plan user posed term schema generating plan step gathering crucial next step plan optimization plan produced dushka retrieve accessible answer tend highly redundant access remotely relevant need minimized removing redundant phase also optimization gathering internet optimization emerac prototype gathering system developing schematic illustration planning optimization process emerac step optimization optimization optimization operates recursive plan dushka greedily minimizes remove access costly redundant affecting completeness plan localized closed characterize completeness relative virtual database schema sagiv minimizing datalog equivalence planning phase emerac minimizing gathering plan none applicable gathering plan containing recursion handle recursion recursion virtually gathering plan dependency binding recursive user additionally pairwise redundancy access capable exploiting case access rendered redundant access prototype gatherer emenic attest ultimately optimization boil join efficiently differs significantly database optimization internet access limitation cost gathering affected network traffic connection cost contribution representing access greedy ordering call limitation also take access cost traffic cost requring full statistic brief review dushka plan formation plan preliminary plan explains access minimized plan ordered sourece access describes empirical idea emerac system work conclusion plan background schema advisor advisor tuple returned advisor materialized view schema want retrieve student advised weld goal dushcka show gathering plan maximally contained tuple stored accessible work inverting materialized view inverse materialized view head rule body rule head view head rule body view invert rule effectively tuples satisfying constrained recursion materialized view inversion modified database binding condb student advisor student view must sent straightforward inversion rule form ununexecutable handled made correspond substituted addb plan refer extensional progam correspond materialized view also presence rule rule collecting derived call note rule recursive make plan recursive even well ubiquitousness constrained internet thus know handle recursive gathering plan plan preliminary plan access advisor database answer redundant access cost plan need materialized view characterization explicate respected lambrecht kambhampati gnanaprakasam tuple returned tuples satisfying property going returned augment relative coverage localized closed characterize tuples guaranteed term schema happen know addb guaranteed student advised weld hank note arrow addb addb rule subsumption intuitively obvious tuples satisfying accessing need automated determination datalog rule materialized view body also wish rule subsumes obvious checking subsumption replace rule body view rule body transformed rule liberal tuples returned rule transformed rule give conservative conservative subsumes liberal transformed rule entail transformed rule know rule subsumes rule duschka show sufficient subsumption proposes modified replacing rule rule view transformation rule rule subsumed equivalence rule subsumption redundancy plan inadequate minimizing recursive plan recursive plan correspond infinite conjunctive checking rule recursive plan redundant trying part subsumed infinite conjuncts base process containment datalog minimize datalog removing rule time checking datalog assignment checking equivalence undecidable datalog assignment equivalence decidable equivalence sagiv minimizing datalog equivalence illustrate adapt gathering plan datalog redundant removing instantiating body remaining rule derive instantiation head rule assignment remaining rule datalog derive assignment safely leave rule datalog case assert rule assert rule thus rule greedy recursive plan adapt minimizing datalog equivalence remove redundant unnecessary recursion gathering plan step transform plan call done removing schema replacing body inversion rule plan transformation look idea iteratively remove rule gathering plan iteration replacing view rule subsumption transform removed rule possibly gathered transform remaining rule guaranteed gathered instantiate body transformed removed rule transformed remaining rule derive head leave extracted rule gathering plan remaining rule gather much rule removed full plan rule containing access unnecessary remove plan transform remaining rule gatherered removed rule want replace replace schema body inversion rule repeat rule deleting rule simplifying deleting unreachable rule rule contained replace rule greedy plan mation want transform condbfs remaining rule transform represents guaranteed produced rule querv addb advisor addb advisor instantiate body transformed removed rule ground term condb weld advisory evaluating remaining rule find derive rule mean safely leave rule removed gathering continue able remove rule remaining rule removed reachability test user referenced rule reachable heuristic ordering rule removal final gathering plan depend remove rule plan condbfs advisor case removed gathering plan removing rule lead removal succeed removed remove case plan rule much costlier execute rule presence trigger recursion rule eliminated recursion greatly cost plan potentially boundless access remote thus elimination rule containing containing recursive term also gathered statistic access cost contact time response time probability access break dominated cost containment sagiv time containment worst case exponential size plan minimized brighter practice exponential part come datalog done database consisting grounded literal tail rule removal nevertheless exponential justifies greedy globally plan considering ordering call phase gathering plan crucial practical make minimized plan datalog evaluated ultimately plan largely boil join efficiently body work assumes data database ignores access cost concentrating traffic cost assumes elaborate statistic particularly suited emcrac gathering domain database rarely tend access limitation access cost connection cost outweigh traffic cost decentralized internet full statistic rarely emcrac represents limiations greedy ordering reduce traffic access cost representing limitation internet wrapped page form interfaced database database wrapped page interfaced wrapper make database wrapper retrieves page extract answer normal forminterfaced database refers database html form interface answer subset database airline database accepts city date flight listing form interfaced database emcrac inform gatherer type accept annotation identify must annotation identify unselectable lambrecht kambhampati gnanaprakasam must thus adorned form interfaced accepts binding adorned wrapped marked unselectable form interfaced binding able adorned annotation binding form feasible stand allowed push must filtered locally thus call must filtered locally binding binding said selectable free also free vice versa hold binding used relate binding greedy ordering call normal heuristic ordering subgoals datalog call binding idea reduce cost data transfer tuples turn wind connection access cost elaborate network traffic accessing binding turn arate call made lead increased access cost emerac ordering considers connection cost network traffic cost secondary reduce connection cost access feasible binding take traffic cost also maintain htbp binding tralfic producing pick feasible binding neither binding listed htbp motivating full statistic rarely gain type binding excessive traffic feasible binding htbp step selects binding containing adopting give rise enlarges make traffic binding feasible next step terminates successfully specifies binding used call forbidden binding htbp high traffic binding head list list postponed subgoals unchosen subgoal feasible binding sorted push binding mark appearing push maximuni take push appearing else fail greedy call ordering considers access cost traffic cost issuing call specified binding binding instantiated collected upto call issued instantiation filtering done locally tuples returned call locally joined possibly call binding call parallelism bushy join tree time wasted connection delay ordering rule worth noting htbp htbp binding concentrate access binding listed htbp wind focusing network traffic reduces variant conjunct ordering emerac prototype gathering system underdevelopment idea java used need interface emerac internally part planner plan executor default planner duschka cumulative cost cumulative cost unsubsumed constrained naive artificial naive artificial characterizing utility plan coupled plan plan traversing operator graph minimized plan node encountered traversal thread traverse child node parallel thread also answer user asynchronously executor access join recursion operator graph used prototype emeruc effectiveness optimization used data artificial containing tuples data derived trier database dblp database bibliographical publication used corresponded subset dblp data ranging tuples case unconstrained binding restriction leading recursive plan normalize caused extracted data stored disk java serialized data conducted wrapper compiled java serialized delay answering time simulate latency internet delay reasonable internet utility planner executor varied duplicate relevant time optimization exection step exponential containment time spent made cost looking time ignoring cost access cost premium also significantly step naive simply build plan build plan applies plan parallel node graph practice recursive plan handled recursion experimented time node graph essence prune recursion plot show plot artificial show relative time naive redundant constrained increased constrained redundant prune show cumulative time note time remains fairly recursion well constrained naive worsens exponentially constrained degradation pronounced recursion outperforming naive redundant constrained plot repeat derived dblp data upto lambrecht kambhampati gnanaprakasam tuples conducted recursion note remains fairly unaffected presence redundant constrained naive degrades exponentially plot considers dblp data constrained left unsubsumed degrades gracefully increased constrained naive graceful degradation removed subsumption completed formal ordering informal artificial plan cumulative access traffic cost offered ordering work early work optimizing gathering plan combined phase plan optimization posed whole executable plan duschka work give maximally contained plan time optimizing make clean separation optimization phase friedman weld minimizing plan subsumption conjunctive rule recursive rule correspond infinite conjunctive trying subsumption conjunctive rule containment decidable duschka also suffers idea conjunctive folding term case recursive binding restriction folding infinite containment recursive datalog rule subsume rule thus minimize much plan ordering assumes statistic regarding thus applicable alternative learn statistic experience larson developing regression cost system selective querying adali keeping track rudimentary access statistic help optimization conclusion optimization gathering plan novel make prune unnecessary plan modified minimizing datalog containment minimize recursive gathering plan help subsumption greedy dering call limitation take access cost traffic cost requring full statistic prototype system idea emerac effectiveness optimization emerac integrating ordering phase tightly modeling exploiting tradeoff dealing runtime inaccessible well opportunity cache also exploring utility learning rudimentary keeping track time statistic utility probabilistic characterization coverage overlap
