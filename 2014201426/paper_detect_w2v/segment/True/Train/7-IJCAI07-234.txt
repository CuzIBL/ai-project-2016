distributed combinatorial optimization dynamic like dpop petcu faltings linear message thus generating communication overhead dpop memory exponential induced width graph prohibitive width operate memory area width operates like dpop linear message area high width explored propagation idea dechter novel determining grouping node cluster caching darwiche cluster reduce exponential largest cluster adopt modi distributed memory mbdpop consistently outperforms adopt domain magnitude satisfaction optimization powerful paradigm wide task like scheduling planning optimal process control traditionally gathered centralized find sometimes naturally distributed distributed satisfaction discsp formalized yokoo divided agent communicate like adopt dpop optapo introduced adopt modi backtracking propagation operates decentralized asynchronously memory message resulting communication overhead optapo mailler lesser centralizeddistributed mediator node centralize subproblems dynamic asynchronous mediation session show message significantly adopt mediator overlapping thus needlessly duplicating petcu faltings scalability optapo dense dpop petcu faltings dynamic generates linear message dpop time exponential induced width high induced width message area requiring exponential communication memory introduces parameter characterizes memory tradeoff linear message dpop memory rest structured introduces distributed optimization dpop mbdpop show distributed meeting scheduling work concludes dcop discrete distributed optimization dcop tuple finite domain scope much utility utility mean cost dcops multiagent valued framework owned agent goal find instantiation maximizes utility simplifying yokoo agent control virtual agent owns simplify virtual also unary binary tree work traversal graph tree arrangement graph rooted tree node edge property adjacent node graph fall branch tree tree investigated mean boost freuder dechter relative independence node lying branch tree parallel branch combine show tree refer rest distinguish tree edge solid line back edge dashed line node parent child obvious ancestor descendant sepi separator ancestor descendant removing node sepi disconnect subtree rooted rest dpop dynamic optimization utility propagation scheme dpop introduced petcu faltings dpop bucket elimination scheme dechter adapted distributed case traversal graph ordering dpop phase phase traversal graph done distributed like petcu work graph requiring linear message outcome node consistently label simulated soft assigning disallowed tuples allowed tuples maximizing utility thus avoids assigning extend petcu faltings petcu edge identified edge tree serf communication phase util message phase travel message phase travel treeedges phase util propagation agent leaf send util message parent subtree node influence rest separator sepi message optimal utility subtree instantiation sepi thus message separator size turn induced width phase propagation initiated root phase finished node determines optimal computation phase message parent sends child message proved petcu faltings dpop linear message size util message largest spaceexponential width ordering used inference control parameter specifies maximal inference maximal message dimensionality parameter memory node domain size identifies subgraphs width full inference dpop area cluster lowest node tree separator size call node cluster root area node identified removed remaining width subsequently area node explored dpop utility propagation cached darwiche respective cluster root integrated message propagation induced width full inference done throughoutthe dpop linear message used full cutset cutset scheme mateescu dechter dpop full inference area width inference area width area respective changeswe make util andvalue phase labeling phase graph tree area normal util propagation high width area shaded cluster util propagation used message size node bold cluster root shaded show propagation phase util phase goal delimit area identify node area emphasize process phase sake clarity derived modification util phase labeling work like util phase node wait labelij message child computes label sends parent labelpi message composed part separator sepi node list node node separator sepi separator child parent pseudoparents minus formally sepi xjcisepj part label message list send parent node computes list heuristic separator node list child next heuristic labeling node label sepi cclists heuristic take separator node list child list cutset node build sepi cclists node separator marked node child many node marked ccnew node labeled node node cclists ccnew separator sepi node ensures labeled cyclecuts child simply empty list highest node node sorted phase highest node marked highest lowest node inverse lowest node marked lowest util phase labeling phase area width node exploration area anywhere else util propagation dpop applies util propagation labeling phase identified cluster root node area root list node designated child root cluster like dpop creates utilpi best utility subtree sepi child separator memory dpop agent labeling protocol wait labelij child label self label self normal else sepi cclists ccnew node ccnew cclists send labelpi sepi util propagation protocol wait message child normal node util dpop else propagation instantiation cclists cluster root util cache propagation propagation finish send util parent propagation receives cluster root cache self cached node message else last util node self accordingly send send normal utilij message dpop wait message child separator creates cache cache sepi corresponds instantiation separator size cache thus exploring propagation subtrees sent cclists cycling instantiation cluster sent child message child propagate message child sent cclists propagates node separator lowest node cluster separator leaf cluster propagation node specified message instantiated propagation guaranteed dimension proceed normal dpop reach best utility also cache instantiation node case utility instantiation explored simply sends parent utilpi best utility subtree instantiation sepi exactly dpop continues propagation normal dpop processing transparent area width root node lowest tree sepi selecting node instantiation sends child message form message travel node cluster sent cclists upon receiving message util propagation dimension dimension easy scheme memory propagation cache overallwe observe memory phase labeling phase area inference must excessive width processing done area outside propagation dpop applies message root cluster receives parent optimal assignment separator sepi cluster retrieves cache optimal assignment instantiation separator assignment node cluster informs node cluster optimal message node cluster cached optimal instantiation node final util propagation utility correspond instantiation node optimal process propagation dimensionality node instantiated thus linear message size subsequently outside cluster propagation proceeds dpop area behaves exactly dpop generates linear message size cluster formed width exceeds cluster node cluster node cluster cluster adopt runtime requiring message size message easy tmax tmax cluster maximal node memory distributed sensor network graph coloring meeting scheduling meeting scheduling relatively distributed meeting scheduling maheswaran briefly optimal schedule meeting agent agent meeting yielding also denser even difficult induced width experimentalresults message exchanged message size byte runtime millisecond please logarithmic scale adopt scale threshold hour million message largest adopt agent also node designated message message size memory note even dpop message like adopt much adopt message largest adopt dpop produced magnitude dpop machine data used adopt message adopt magnitude also even dpop sends message adopt exchangesmuch believe adopt sends many message asynchrony attach full overhead used maheswaran lack align well meeting scheduling sparse induced width dpop linear message message size runtime varies adopt sends anywhere message easy experienced around magnitude term time message graph coloring also tightly even challenging adopt adopt terminated hour computation time million message domain showed adopt noticed magnitude computation time message communication work idea introduced rish dechter node removed leave induced width inference rest node scheme thus time exponential exponential separator dpop isolates cutset node cluster thus time exponential tmax opposed exponential tmax dpop exponential scheme idea introduced mateescu dechter node identified arranged part pseudotree area width node inference part width time exponential pseudotree exponential unclear distributed particularly identification wcutset node arrangement pseudotree concerned solves elegantly tree delimit cluster identify identified aside operating tree mbdpop superior scheme caching pseudotree mbdpop cutset node branch grouped cluster thus exponential largest node cluster exponential node branch asymptotic caching tree clustering kask tradeoff loosely part tree optimal cluster identified node separator size conclusion work customizable memory optimality memoryboundedness caching cluster reduce particularly loose area explored linear message like dpop tightly explored inference mean overhead exploration avoided part domain show give good width practically sized optimization consistently outperforms dcop adopt magnitude
