newer artificial intelligence extend control regime hierarchical control clearly exhibit module process access control applicable diverse control primitive concise regime control newer artificial intelligence conniver extend control regime user deal control access consideration form data control binding help clarify relationship hierarchical call backtracking multiprocess primitive operation control regime term primitive handle cooperating process block procedure nomenclature introduced block head parameter procedure access call body procedure block access module upon access module storage allocated item call allocated storage frame module storage module computation allocated storage call frame storage frame module module frame frame frame nomenclature frame framename procedure name module entered frame initialized pointer perhaps implicitly link linked access pointer frame free parameter binding accessible module clink control frame algol static dynamic link lisph pointer frame binding free module tracing call illustrate time call module caller frame continuation computation continuation stored caller simply pointer last frame size frame fixed module parameter activation size frame vary widely computable storage used module module allocation frame segment sometimes advantageously done separately contiguously link blink frame frame binding frame exited normal exit goto skip frame frame close file opened frame temporarily modified frame terminal frame carried exit frame passing nominal frame returning returned exit frame exit frame user fixed time frame allocation summarizes frame show sketch programmed block algol contourslo drawn around access module parameter snapshot entered continuation call entered access module segment frame module name frame module note access link dotted line control call stack note access module module type agrees stored type continuation access module achieved pointer continued frame stored outside frame show maintained coroutines access control note frame continuation frame conflicting copy made frame used process coroutine deleted frame deleted frame deleted case frame never referenced process frame process binding seen coroutine access control primitive access module activation frame released upon exit module frame referenced retained frame head made protected data type descriptor abbreviated head referenced descriptor implicit process primitive specified frame frame specified computation access exit frame note none primitive manipulate link frame frame ring environ creates descriptor frame specified setenv olded descriptor olded frame specified side release storage referenced olded mkframe epos apos epos bpos bcopflg creates frame frame frame frame specified epos alink clink specified apos epos blink frame specified bpos copy frame omitted bcopflg defaulted false apos bpos epos defaulted frame specified epos thus mkframe epos creates frame identical specified epos enveval forra apos cpos creates frame initiate computation alink clink frame specified apos epos form specifies code evaluated apos cpos omitted defaulted alink clink invocation enveval thus enveval form usual call form appeared call enveval setexfn pointer user exitfn frame system exitfn composition user system frame exit exitfn returned frame code returned turned frame specified clink getexfn user stored exitfn frame none stored framenm framename frame frame specification apos bpos epos epos specifies frame allocated activation environ setenv case environ setenv mkframe continuation returned frame enveval returned call environ setenv mkframe specifies frame link control link frame specifies frame link access link frame list framename give frame name specifies control access distinguished specification specifies used free process halt setenv release frame storage formerly referenced tying storage descriptor call environ environ creates descriptor setenv copy olded list consisting exactly listed used identically unlisted used setenv done thus releasing frame storage formerly referenced bined form user setenv call enveval done call done enveval control never control illustrate primitive control control regime differ usual hierarchical control routine term primitive stack jump closure multiprocessing discipline semantics system ordinary hierarchical control system module call call call impossible going back series call discovered call inappropriate wanted message hierarchical control prepared message back know force intermediary able control relevant module jumpbacks experience retfrom form evaluates form text frame specified frame caller caller retevakform evaluates form caller form caller term enveval retfrom form enveval form retevalform envevalform retfrom establishes used form retfrom lisp protection wrap form errorset errorset form eval form wrapping system intent arise form handled containing errorset errorset case list consisting form indicated forcing errorset item system retfrom errorset uppercase item literal lisp jump back intermediary call occurrence errorset hierarchical employ envapply take name list evaluated envapply simply creates form enveval envapply args aframe cframe enveval list list quote list quote args aframe cframe central control lisp call funarg funargs procedure funarg environ funarg list indicator funarg descriptor environ make frame funarg list globally data passed returned appropriately typed evaluator form argn funarg list funarg creates list args argl argn envapply args case used exactly like lisp moses binding illustrates passed mapcar entered note access free seen mapcar control frame retained funarg returned work give funargs passed pointer used save access fact pointer process instant call access control pointer serf part process handle convenient additionally take process restarted passed process restarting funarg reinterpreted feature specifies module restarted process evaluated caller used funarg used process handle prof convenient process able process handle make adopt curproc kept process routine resume control coordinated process coroutines maintains control access perhaps sharing coroutine system coroutines funarg handle coroutines transfer control initiate process funarg bracket delimit comment curproc curproc process funarg envapply args curproc initialized coroutine started resume transfer control coroutines control outside resume user specifies backfn control process resumed destructively inserted funarg list args specified coroutine transferring back resume fnarg args backfn curproc backfn save specified backfn resume back setenv curproc caller resume curproc fnarg curproc coroutine activated envapply fnarg args fnarg fnarg activate specified coroutine applying backfn args call funarg used process funarg process destructively modifying list continuation modifying descriptor list system process funargs process take responsibility requesting time processing supervisor passing control conniver automatic multiprocessing control regime interrupt backtracking restored control restored strictly last restored effectively alternative inadequate process fail back previously specified fail redo computation lead stack failset successive fails restart turn backtracking thus tree branch fail failset push front remove failist stack failset fail reverse returning failset explicit failure automatically undo side binding undoable failist form reset cell fail eval form next call enveval failset push failist environ mean outside failset fail message enveval message list failist upon fails back successive returned exhausted failure propagated back code fact binding failset call failset test reached call failset case false failure case true undolist progt null fail undolist leave undo specified false failsetot true failed popped true returntpop floyd hewitt golomb baumert backtracking sussman backtracking prof form switching process feature much flexibility coordinated process parallel processing noted control must mean enveval resume coordinated process control regime simplified taking view parallel cooperating process synchronize mean dijkstra operation coordinated process interrupt control regime tree formed control link dendrarchy frame terminal node marked control bubble evaluator operating terminal node referenced descriptor access link pointer frame tree extend parallel process processor system branch tree must simultaneously marked control bubble processor must switched node scheduling cooperating process simplest think adjoining process distinguished process supervisor schedule process service maintains data queue semaphore process used premier manipulate parallel process process activation stopping continuing synchronization querying processor coordinated process call enveval specification process form apos cpos enveval creates process form creating process process descriptor handle pointer list runnable queue scheduler give process time quantum process descriptor give process stopped process environ descriptor used part enveval call stop halt process specified remove process runnable queue returned continue runnable queue indication semaphore dijkstra operator transfer control enveval determines resource semaphore hand control back enveval decremented semaphore enters semaphore queue switch control runnable process release semaphore dijkstra operator semaphore process moved semaphore queue onto runnable queue decremented hand control back process emphasize term control primitive scheduling runnable process done process agreement time resource time scheduling control never leaf process simply bookkeeping alternatively ordinary process time quantum timer interrupt interrupt treated forced call environ enveval process must handled system forcing call environ sure interrupted process clean communication pointer queue buffer true pointer machine register traced garbage collection ensured asynchronous hardware interrupt operation interrupt flag ware made procedure call backward jump timely response clean interrupted process sufficient restart runnable queue process descriptor timer interrupt asynchronous processing simulated multiprocessor system form dynamic process done consistently stopping process consistent interrupt asynchrony system queue semaphore must uninterruptible highest priority obtaining system cooperating process primitive desirable perhaps scheduler user parallel process used realize competing process allotted time provision user supplied scheduler establishes framework intelligent allocation employed supervisor control readily parallel activation module time caller continue simply call process process proceed parallel conclusion linguistic hierarchical control clearly exhibit process access module applicable diverse lisp used essential control access control primitive regime control stressed perfectly subcases recursion backtracking main idea frame frame treated potentially discontiguous segment frame used open stack ordinary call stack discipline storage combined propagation frame kept thus linguistic framework expressing control regime practical incorporated acknowledgment work part agency dahc force electronics system daniel bobrow bolt beranek newman cambridge massachusetts many idea
