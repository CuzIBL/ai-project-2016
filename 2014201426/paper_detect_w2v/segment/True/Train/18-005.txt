describes tracing debugging prograramming prolog selective retrospective exhaustive trace tracer enriched repertoire clarity trace identifies cluster work true user want observe trace prolog behaviour subjected inspection latest hide user capitalizing contained therein debugging prolog user overwhelmed plethora tracing behaviour user sorely engaging kind even user benefit intelligent tracing debugging assistance amply demonstrated work shapiro progression intelligent tracing main facet symptomatic behaviour behaviour prolog need four behaviour trace package insufficient clear signpost indicating failure zooming behaviour elaborated user need protected gory hand allowed easy rapid access relevant suspicious symptom cluster cluster trace need identified kind behaviour singled highly suspect symptomatic behaviour prolog trace package eisenstadt distinguishes type prolog failure subgoals failed backtrack backtrack encountered wrong arity unification failed system primitive failed resolving clause instantiated clause attempted exit code mean subgoal failure subgoal failure indicated concatenation body resolving clause head clause work looking next resolvent refers invocation trace step finishing trace step enclosed brace clause user tracer prompt underlined comment retrospectively eisenstadt succeeded suspect subgoal failure aside goal differ term assumed root failure identical step internally displayed looked like symptom cluster detected kernel cluster four collection kernel match cluster fails resolving clause tried failed cluster invokes rule failure clause intuitively analyser looking prolog rule viewed abstractly zoom reveals kernel line corresponds trace step analogous step trace zooming sufficient ground remainder message displayed declarative enables work perverse greaterthan lessthan test come recursive invocation even latter case zoomer inspects behaviour term declarative look normal perverse case delving cluster symptom recognized accidentally unify list atom asserting naive transitivity code cosclusions zooming enables trace remain faithful purely declarative probing procedural well suspect code identified empirical investigation symptom importantly cluster symptom work automated debugging laubsch eisenstadt relied used behaviour desired behaviour like system shapiro leaf behaviour debugging differs shapiro work maintaining priori repertoire behaviour upon taxonomy pilot experienced prolog suspect detectable earliest incarnation enabled rapid practical tracing debugging prolog acknowledgement work council grant
