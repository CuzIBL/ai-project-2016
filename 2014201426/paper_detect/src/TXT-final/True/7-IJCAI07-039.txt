
we define a new general rule-based nonmonotonic framework which allows an external acyclic priority relation between rules to be interpreted in several ways. several entailment semantics are defined via a constructive digraph  with one being given a declarative fixed-point characterisation as well. each of these semantics satisfies principle 1 of  brewka and eiter 1 . the framework encompasses default logic  reiter 1   ground answer set programming  asp   baral 1   and defeasible logic  nute 1 . default logic is provided with a new semantics which is ambiguity blocking  rather than the usual ambiguity propagating semantics. also reiterextensions are given a new fixed-point characterisation; and lukaszewicz's  m-extensions are given a much simpler construction and fixed-point characterisation.
1 introduction
a characteristic of an intelligent system is its ability to reason with limited information. non-monotonic reasoning systems represent and reason with limited information where the limitation is not quantified. some of the most natural and successful non-monotonic reasoning systems are based on the idea of a rule. three such systems are default logic  reiter 1   answer set programming  asp   baral 1   and defeasible logic  nute 1 .
　after considering these systems we shall develop a general rule-based non-monotonic framework  called a plausible theory  which encompasses these three systems. plausible theories allow an external acyclic priority relation between rules to be interpreted in several ways. several entailment semantics for plausible theories will be defined via a constructive digraph  with one being given a declarative fixed-point characterisation as well.  an entailment semantics defines the set of all sentences that follow from  or are entailed by  a plausible theory.  each of these semantics satisfies principle 1 of  brewka and eiter 1 .
　default logic is provided with a new semantics which is ambiguity blocking  rather than the usual ambiguity propagating semantics. so for ambiguity blockers  there is now a default logic which gets the  right  answer for example 1. also reiter-extensions are given a new fixed-point characterisation; and lukaszewicz's  m-extensions are given a much simpler construction and fixed-point characterisation.
　the unifying framework facilitates comparison of the systems encompassed. the constructive semantics facilitates understanding  and hand calculation of small examples.
　in this paper we shall concentrate on the relationship between plausible theories and the default logics of reiter  and lukaszewicz . the relationship with other default logics  asp  defeasible logic  and argumentation systems  dung 1  is a subject for other papers.
　now let us look at the above systems to see the variety of rules that have been considered.
　reiter's default logic considers a rule to be a default. a  closed  default  d  can be written as d =  p d  : j d  / c d    where p d   the pre-requisite of d  and c d   the consequent of d  are closed formulas  and j d   the set of justifications of d  is a non-empty finite set of closed formulas. intuitively the meaning of d is that if p d  is accepted and each element of j d  is consistent with what is currently accepted  then accept c d .
an asp rule has the form
l1 or ... or lk  lk+1  ...  lm  notlm+1  ...  notln
where the li are literals. intuitively the meaning of such a rule is that if lk+1  ...  lm  are accepted and lm+1  ...  ln can be safely assumed to be false then accept at least one of l1  ...  lk. a program is a finite set of asp rules.
　nute's defeasible logic has three kinds of rules. the strict rule  r  has the form a r   c r ; the defeasible rule  r  has the form a r   c r ; and the defeater rule  r  has the form a r   c r ; where a r   the set of antecedents of r  is a finite set of ground literals and c r   the consequent of r  is a ground literal. strict rules are like classical material implication. intuitively defeasible rules mean that if a r  is true then usually c r  is true. defeater rules have the intuitive meaning that if a r  is true then it is too risky to suppose  c r  is true.
　all of the above rules have a set of antecedents and a consequent. however defaults and some asp rules have an additional consistency checking part which we shall call a set of guards.
　it is very useful to be able to specify a priority between rules. defeasible logic has always had this ability. more recently preferences between defaults and between asp rules have been considered. see  delgrande et al 1  for a survey of the area and a classification of priorities. according to this classification our priority relation is acyclic  between rules  and external.
　the rest of the paper has the following organisation. the next section formally defines a system of rules  called a plausible theory  which encompasses default logic  ground asp programs  and defeasible logic. section 1 discusses semantics  proposes several constructive ways of defining what a plausible theory entails  and then shows that a principle concerning priorities is satisfied. each construction forms a directed graph called an applicative digraph. an example illustrating ambiguity blocking and propagating is given in section 1. section 1 concerns the relationship between applicative digraphs and default logic. in particular reiter's extensions and lukaszewicz's  m-extensions are characterised. section 1 considers a fixed-point characterisation of the leaves of an applicative digraph. the conclusions form section 1.
1 plausible theories
we set the scene by defining some notation. the empty set is denoted by {}  and  denotes the set of non-negative integers. let snt be the set of sentences  closed formulas  of a countable first-order language. then snt is countable. if s  snt then define the set  cn s   of semantic consequences of s by cn s  = {s  snt : s  s}.
definition 1  rule . a rule  r  is a 1-tuple
 a r   g r   arrow r   c r    where
a r   the set of antecedents of r  is a finite set of sentences  g r   the set of guards of r  is a finite set of sentences 
arrow r   {  }  and c r   the consequent of r  is a sentence. rules which use the  arrow are called defeasible rules and are written as a r :g r   c r .
rules which use the  arrow are called warning rules and are written as a r :g r   c r .
　intuitively the defeasible rule  r  means that if each element of a r  is accepted and each element of g r  is consistent with what is currently accepted  then c r  should be accepted. in other words  r provides sufficient evidence so that one should behave as if c r  is true  even though it may turn out that c r  is false.
　so the default  p d  : j d  / c d   can be regarded as the defeasible rule {p d }:j d   c d . the ground asp rule l1 or ... or lk  lk+1  ...  lm  notlm+1  ...  notln
can be regarded as the defeasible rule
{lk+1  ...  lm}:{ lm+1  ...   ln}  l1  ...  lk.
and nute's defeasible rule a r   c r  can be regarded as our defeasible rule a r :{c r }  c r .
　intuitively the warning rule  r  warns that if each element of a r  is accepted and each element of g r  is consistent with what is currently accepted  then accepting  c r  is too risky. that is  r provides enough evidence for c r  to prevent acceptance of  c r   but not sufficient evidence to accept c r . warning rules are only used to stop other rules being applied. they never contribute their consequent to what is currently accepted. the defeater rule a r   c r  can be regarded as the warning rule a r :{c r }  c r .
　recall that a default  d  is normal iff j d  = {c d }. so we have the following definition.
definition 1  normal rule . a rule r is normal iff
g r  = {c r }. if r is normal then we often abbreviate a r :g r   c r  by a r   c r   and a r :g r   c r  by a r   c r .
　let r be any set of rules. we denote the set of defeasible rules in r by rd  and the set of warning rules in r by rw. the set of consequents of r is denoted by c r ; that is c r  = {c r  : r  r}. to aid readability we sometimes write c r  for c r . the set of all guards in rules in r is denoted by g r ; that is g r  =  {g r  : r  r}.
　a binary relation     on any set r is cyclic iff there exists a sequence   r1  r1  ...  rn  where n  1  of elements of r such that r1   r1   ...   rn   r1. a relation is acyclic iff it is not cyclic. acyclicity is about the weakest property that an ordering relation can have. acyclicity implies irreflexivity and asymmetry  and hence antisymmetry ; however we do not require transitivity.
　let   be an acyclic binary relation on a set of rules r. we read r   r' as r has a higher priority than r'  or r is superior to r'. we say r is maximal in r iff for all r' in r  not r'   r .
　definition 1  plausible theory . a plausible theory is a triple	=  ax  r     such that pt1  pt1  and pt1 all hold.
 pt1  ax is a satisfiable set of sentences.
 pt1  r is a set of rules.
 pt1    is an acyclic binary relation on r. 	=  ax  r     is a normal plausible theory iff every rule in r is normal.
　the sentences in ax are called axioms and they characterise the aspects of the situation which are certain. r is countable because snt is countable.
1 entailment semantics
let us start by considering what properties a semantics for a plausible theory might have. predicate logic has two parts  a proof mechanism and a semantics. the semantics interprets the syntax used by the proof mechanism  and it also provides a way of assuring us that the proof mechanism cannot prove things we don't want  soundness .
　in this paper we are concerned with the semantics of plausible theories  rather than any proof mechanisms.
　applicative digraphs  defined below  provide an interpretation of the rules and symbols used in a plausible theory. as the name  applicative  suggests  we interpret rules as things which can be applied. the way they are applied and the restrictions on their application give an interpretation to the syntactic components of the rules.
　the way a semantics assures us that the proof mechanism is sound is to define a set  say sem p   of sentences that follow from the premisses p and then insist that every sentence that is proved must be in sem p . in predicate logic sem p  is cn p . an entailment semantics for p is the set of all sentences which follow from  or are entailed by  p. for predicate logic this is generally agreed to be cn p . an entailment semantics for a plausible theory	is the set  say sem 	   of all sentences which follow from  or are entailed by 	. since entailment is an intuitive notion  the definition of sem 	  needs to be as close to our intuitions as possible.
　there are different well-informed intuitions about what should follow from a plausible theory  for instance the ambiguity propagating intuition differs from the ambiguity blocking intuition  see example 1 . to accommodate this we shall define a family of applicative digraphs.
　applicative digraphs enable sem 	  to be constructed; so no guessing is needed.
1 applicative digraphs
an applicative digraph displays the order in which rules are applied. each node is the set of rules applied so far  hence each node is a subset of r. before applicative digraphs can be defined we need the following concepts. suppose 	=  ax  r     is a plausible theory  r  r  and n  r.
　definition 1  b n   the belief set of n . b n  = cn ax   c n  .
　b n  is the set of beliefs sanctioned by ax and n. at each node n  r there are 1 levels of belief. the set of strongest beliefs is cn ax . this is the set of known facts  indisputably true statements. it is the same at each node. b nd  is the set of all beliefs which are strong enough to behave as if they are true. even though we know that some may occasionally be false. the set of weakest beliefs at n is b n . this is the set of all beliefs which are strong enough to prevent belief in any statement which is inconsistent with b n .
definition 1  ap r  n   r is applicable at n; ap n  .
ap r  n  iff a r   b nd .
ap n  iff for all r in n  ap r  n .
　the fundamental idea is that if every antecedent of a rule is in b nd  then its consequent can be added to b n . this is what applying r to b n  means. however we do not apply a rule which will conflict with our current set of weakest beliefs; so we need the idea of a set of rules being consistent.
definition 1  cs n   n is consistent .
cs n  iff ax c n  is satisfiable and for all g in g n   ax c n  {g} is satisfiable.
　definition 1  el r  n   r is eligible at n . el r  n  iff ap r  n  and cs n {r} .
el r  n  is a useful summary term.
　according to delgrande and schaub  priorities may be prescriptive  dictating the order in which rules are applied  which has a local perspective  or descriptive  describing the preferred results of applying rules  which requires a global perspective .
　a local perspective on   is given by pr r  n   which means that maximal rules are applied before non-maximal rules  and that higher priority rules are applied before lower priority rules.
definition 1  pr r  n   r has priority at n .
pr r  n  iff either r is maximal in r; or r is not maximal in r and for each s in r- n {r}   if el s  n  then not s   r  and s is not maximal in r.
　before we can define a global perspective on   we need the idea of a set  m  of rules being compatible; which roughly means that m could be a subset of a node.
definition 1  cp m   m is compatible .
cp m  iff there exists n such that
m  n  r and ap n  and cs n .
cp r1  ...  rn  means cp {r1  ...  rn} .
　we can now define what it means for a set n of rules to be desirable. roughly  if r  n and r is applicable at n and r is superior to a rule in n then r is incompatible with a higher priority rule already in n.
　definition 1  ds n   n is desirable; ds r  n  . r   n iff there exists r' in n such that r   r'.
ds n  iff for all r in r-n  if cp r   ap r  n   and r   n then there exists r' in n such that r'   r and not cp r'  r . ds r  n  iff ds n {r} .
　if two rules could both be applied at a node  but the application of either rule prevents the application of the other rule  then we may not want to apply either rule. that is we may not want to choose between conflicting rules  unless one is preferred over the other. of course if it does not matter which of two rules is applied first then we can apply either. this is the notion of partner rules. roughly  two rules are partners at node n means that if either rule could be applied to a potential descendant q of n  then both rules could be applied to q.
definition 1  pa r  r'  n   r and r' are partners at n .
pa r  r'  n  iff el r  n   el r'  n   and for each q such that
n  q  r and cs q  and ap q  
if cs q {r}  or cs q {r'}  then cs q {r  r'} .
　there are many ways to decide if rule r is preferred over rule s. the simplest is if r   s. however a more general notion of  defeat by a partner  is more useful. basically if r and s conflict but a partner of r has a higher priority than s then we prefer r over s. this leads to the idea of there being a winner at a node.
definition 1  wn r  n   r is a winner at n .
wn r  n  iff el r  n   pr r  n   and for each s in r- n {r}   if el s  n  and not cs n {r  s}  then there exists r' in r-n such that
el r'  n  and pa r  r'  n  and r'   s.
　depending on one's intuition one may use pr  wn  ds  or none of them at each node. hence the following definition.
　definition 1  1 r  n  . 1 r  n  is true.
　if every rule that can be applied to b nd  is in n then we say n is full. there are several notions of fullness.
definition 1  full i  n   n is i-full .
suppose i  {1  pr  wn  ds}. full i  n  iff for each r in r  if el r  n  and i r  n  then r  n.
　excluding infinite nodes  an applicative digraph is a tree in which some non-sibling nodes which are the same distance from the root maybe coalesced. we shall therefore use tree nomenclature to describe parts of these digraphs. the node m is called a parent of the node n  and n is called a child of m  iff there is an arc from m to n. a node which has no children is called a leaf. a path starting at the root is called a branch.
　every finite non-empty node has at least one parent  but infinite nodes have no parents and no children.
　definition 1  app i 	  . for each i in {1  pr  wn  ds}  the i-applicative digraph  app i 	   of a plausible theory	=  ax  r     is defined as follows. the empty set  {}  is the root node of app i 	 .
for each finite node n of app i 	  and each r in r  n {r} is a child of n iff r  n  el r  n   and i r  n . if n {r} is a child of n then the arc from n to n {r} is labelled with r.
every finite node of app i 	  and every arc in app i 	  comes from the above construction.
suppose n1 = {} and  n1  r1  n1  r1  n1  ...  is an infinite path in app i 	  and n =  {ni : i }. then n is a node in app i 	  iff full i  n .
　the purpose of an applicative digraph is to construct all its desirable leaves. it is the belief set of the defeasible rules in a desirable leaf that we want. there are now two choices. the credulous position is to regard each such belief set as entailed by	. the sceptical position is to regard only the intersection of all such belief sets as entailed by	.
	definition 1  sem i 	  .
for each i in {1  pr  wn  ds}  the i-semantics of	 
sem i 	   is defined by
sem i 	  = ...{b nd  : n is a leaf of app i 	  and ds n }.
1 principles for priorities on rules
brewka and eiter  present two principles which they said should be satisfied by any system of prioritised defeasible rules. delgrande et al  show that descriptive priorities do not satisfy the second principle  but they agree that the first principle is widely accepted. we shall re-cast the first principle so that it is simpler and more general.
principle 1.
let r1 and r1 be two rules and suppose n is a set of rules. if r1 is preferred over r1 then n {r1} should not be preferred over n {r1}.
　it can be shown that if n {r1} is a node in an applicative digraph then not ds n {r1} . so the above definition of desirable leaves satisfies principle 1. a reasonable alternative to ds n  is pr n   where
　　　　　pr n  iff for all r in n  pr r  n-{r} . but if n {r1} is a node in an applicative digraph then not pr r1  n . so principle 1 holds if pr n  replaces ds n .
1 example
in this example and elsewhere if the set of antecedents of a rule is a singleton set we shall often omit its set braces. we say k n  is a kernel of b n  iff
 i  k n   b n   and
 ii  cn k n   = b n   and
 iii  if s  k n  and s  k n  then cn s   b n .
when drawing applicative digraphs for given examples it is useful to write k n  underneath each node n.
　in the following example  rather than drawing an applicative digraph with kernels  which takes a lot of space  we shall list its arcs using the following linear notation. the arc labelled r from node n with kernel k n  to node n {r} with kernel k n {r}  is denoted by
 n  k n  --r--  n {r}  k n {r}  .
example 1  ambiguity propagating or blocking 
　this example is designed to show the difference between the ambiguity propagating intuition and the ambiguity blocking intuition. consider the following five statements  and determine whether e is likely or not. each defeasible rule is followed by its symbolic form in brackets.
 1  a  b  and c are facts.
 1  if a then usually e.	 a  e 
 1  if b then usually d.	 b  d 
 1  if c then usually not d.	 c  d 
 1  if d then usually not e.  d  e  a plausible theory describing this situation is	=  ax  r     where ax = {a  b  c}  r = {a  e  b  d  c  d  d  e}  and   is empty. for easy reference  let r1 be a  e  r1 be b  d  r1 be c  d  and r1 be d  e.
　intuitively  given ax  r1 is evidence for d and r1 is equal evidence for  d. so d and  d are ambiguous  and hence neither should follow from	. r1 is evidence for e. the only evidence against e is r1  but r1 is weakened by the ambiguity of d. if you think that it is too risky to allow e to follow from	then e will be ambiguous and so the ambiguity of d has propagated along r1 to e. on the other hand if you think that r1 has been sufficiently weakened to allow e to follow from	then e will not be ambiguous and so the ambiguity of d has been blocked from propagating along r1. both ambiguity blocking and ambiguity propagating intuitions are common  and so a semantics should allow for both.
	a linear representation of app 1 	   with kernels  is:
 {}  {a b c} --r1--  {r1}  {a b c e} 
 {r1}  {a b c e} --r1--  {r1 r1}  {a b c d e} 
 {r1}  {a b c e} --r1--  {r1 r1}  {a b c  d e} 
 {}  {a b c} --r1--  {r1}  {a b c d} 
 {r1}  {a b c d} --r1--  {r1 r1}  {a b c d e} 
 {r1}  {a b c d} --r1--  {r1 r1}  {a b c d  e} 
 {}  {a b c} --r1--  {r1}  {a b c  d} 
 {r1}  {a b c  d} --r1--  {r1 r1}  {a b c  d e} 
	so sem 1 	 
= ...{b nd  : n is a leaf of app 1 	  and ds n } = cn {a b c  d e}    cn {a b c e d}    cn {a b c d  e}  = cn {a b c de} .
this agrees with the ambiguity propagating intuition.
	a linear representation of app wn 	   with kernels  is:
 {}  {a b c} --r1--  {r1}  {a b c e} 
	so sem wn 	 
= ...{b nd  : n is a leaf of app wn 	  and ds n }
= cn {a b c e} .
this agrees with the ambiguity blocking intuition.
endexample1
1 default logic
since plausible theories encompass default logic  it is interesting to see how applicative digraphs relate to various default logics. we shall consider reiter's  default logic  and lukaszewicz's  modified default logic.
　 ax  d  is a default theory iff ax is a set of sentences  ax  snt  and d is a set of defaults. recall a default  d is a triple  p d  : j d  / c d    where p d  and c d  are sentences  and j d  is a non-empty finite set of sentences. since the first-order language we are working in is countable  snt is countable. since j d  is finite  d is countable.
　definition 1  	    plausible theory generated from  . if  =  ax  d  is a default theory and ax is satisfiable then define	   as follows.
if d =  p d  : j d  / c d   then  d  = {p d }:j d   c d .
define	   =  ax  r      where
r = { d  : d  d}  and   is empty.
	if	   =  ax  r    	then	r = rd	and rw is empty.
since   is empty every node of app 1 	    is desirable.
1 reiter's extensions
reiter's entailment semantics for a default theory is expressed via extensions which are usually defined as fixed points of the following function .
definition 1    reiter-extension .
let  =  ax  d  be a default theory. if f is a set of sentences define  f  to be the smallest  under   set satisfying e1  e1  and e1.
e1  ax  f .
e1  cn  f   =  f .
e1  if d  d and p d   f  and for all j in j d    j  f then c d   f .
a set  e  of sentences is a reiter-extension of  iff  e  = e.
not every leaf of app 1 	    corresponds to a reiterextension. we now characterise those that do.
definition 1  reiter-full  reiter-leaf .
if n is a set of rules then n is reiter-full iff for all r in r  if ap r  n  and for all g in g r  {g} b n  is satisfiable then r  n.
let  =  ax  d  be a default theory  and	   =  ax  r    . a node  n  of app 1 	    is a reiter-leaf of app 1 	    iff n is reiter-full.
　it can be shown that every reiter-leaf of app 1 	    is indeed a leaf of app 1 	   . the relationship between the reiter-extensions of  and the reiter-leaves of app 1 	    is given in the following theorem.
theorem 1
　let  =  ax  d  be a default theory and ax be satisfiable. then e is an reiter-extension of  iff there is a reiter-leaf  n  of app 1 	    such that e = b n .
1 lukaszewicz's modified extensions
pages 1 to 1 of  lukaszewicz 1  define and develop a default logic which has a modified definition of extension  called an m-extension. after a double fixed-point definition  page 1  of an m-extension  lukaszewicz characterises mextensions as  essentially  leaves of a digraph  page 1 .
definition 1  1  1  m-extension .
let  =  ax  d  be a default theory. if s and u are any sets of sentences define 1 s  u  and 1 s  u  to be the smallest  under   sets satisfying me1  me1  and me1.
me1 	ax 1 s  u .
me1 	cn 1 s  u   = 1 s  u .
me1 	if d  d and p d  1 s  u  and
　　　for all j in u   j d   s {j  c d } is satisfiable then c d  1 s  u 	and j d  1 s  u . a set  e  of sentences is an m-extension of  iff there is a set f such that e = 1 e  f  and f = 1 e  f .
　the relationship between the m-extensions of  and the leaves of app 1 	    is given in the following theorem.
theorem 1
　let  =  ax  d  be a default theory and ax be satisfiable. then e is an m-extension of  iff there is a leaf  n  of app 1 	    such that e = b n .
1 fixed points
we analyse the function  .  of section 1 so that we may get a similar function for plausible theories.
　 f  cannot be constructed from f. so reiter  1  theorem 1  defined the constructive function  .  .  as follows. suppose f and g are any sets of sentences. define
d g  f  =
{d  d : p d   cn g   & for all j in j d    j  f}.
define  f  i  as follows.
 f  1  = ax.
 f  i+1  = cn  f  i     c d  f  i   f  .
then  f  =  { f  i  : i }.
　to find extensions we still have to guess f and then using  f  i  check if  f  = f. so guidance in guessing f and a simpler constructive function would be a help in finding extensions. an equivalent version of  .  .  is ' .  .   defined as follows.
' f  1  = cn ax .
' f  i+1  = cn ax   c d ' f  i   f   .
it can be shown that for each i in  
 f  i   ' f  i  = cn  f  i    f  i+1 .
hence  {' f  i  : i } =  { f  i  : i } =  f .
　each ' f  i  is semantically closed  whereas  f  i  is not. also ' f  i  is simpler than  f  i  because ax is used instead of ' f  i . moreover now we can see that it is not necessary to construct a set of sentences  we only need to construct a set of defaults  say n  and then form cn ax   c n   at the end of the construction  rather than at each stage of the construction. this greatly simplifies the constructive function.
　this idea focuses attention on d g  f . the defining condition of d g  f  has two parts: an applicability condition concerning the previously constructed stage  and a consistency condition concerning the f we guessed. the first part is essential  but the second part does not have to be checked at each stage  we can just make sure that our initial guess is consistent. this provides guidance in guessing f and makes the constructive function much simpler.
　applying these ideas to the general setting of plausible theories yields the following definition.
definition 1   t    t  i  .
suppose	=  ax  r     is a plausible theory. if s and t are any subsets of r and i  then define  t  = ...{s : if r  t and ap r  s  then r  s}.
 t  1  = {}.
 t  i+1  = {r  t : ap r   t  i  }.
　the following two theorems relate  t  to  t  i   and the fixed points of  .  to 1-applicative digraphs.
theorem 1
	suppose	=  ax  r     is a plausible theory  and t  r.
 1  for all i in  
 t  i   t  i+1   { t  i  : i }  t.
 1   t  =  { t  i  : i }  t.
theorem 1
　suppose	=  ax  r     is a plausible theory  and n  r. then n is a leaf of app 1 	  iff  n  = n and cs n  and full 1  n .
corollary 1
　suppose  =  ax  d  is a default theory  ax is satisfiable  	   =  ax  r      and n  r.
 1  e is a reiter-extension of  iff  n  = n  cs n   n is reiter-full  and e = b n .
 1  e is an m-extension of  iff  n  = n  cs n   full 1  n   and e = b n .
1 conclusions
theorem 1 shows that the fixed points of  .  can be constructed. theorem 1 gives a declarative characterisation of the desirable leaves of app 1 	 . it also shows that the desired sets of rules are fixed points of  .   and gives guidance in guessing which sets of rules to check for being fixed points of  . .
　theorem 1 gives a constructive characterisation of reiterextensions  which is different from  but similar to  the one on page 1 of  antoniou 1 . corollary 1  gives a new fixed-point characterisation of reiter-extensions.
　theorem 1 gives a constructive characterisation of mextensions. corollary 1  gives a fixed-point characterisation of m-extensions. both these characterisations are much simpler than the ones given in  lukaszewicz 1 .
　if  =  ax  d  is a default theory then the leaves of app wn 	    provides default logic with a new semantics which is ambiguity blocking  rather than the usual ambiguity propagating semantics.
　an entailment semantics tries to capture the notion of  what follows from . but this depends on human intuition  which is different for different people. this is why several applicative digraphs have been defined. other useful ones can be defined  but the aim was to provide an adaptable framework rather than a comprehensive one.
　as indicated in the introduction  much work remains to be done to relate plausible theories and applicative digraphs to other systems of defeasible rules.
acknowledgments
i would like to thank torsten schaub and tim cleaver for helpful discussions and comments.
references
 antoniou  1  grigoris antoniou. nonmonotonic reasoning. mit press  cambridge  massachusetts  1.
 baral  1  chitta baral. knowledge representation  reasoning and declarative problem solving. cambridge university press  1.
 brewka and eiter  1  gerhard brewka and thomas eiter. preferred answer sets for extended logic programs. artificial intelligence  1-1  1.
 delgrande and schaub  1  james delgrande and torsten schaub. expressing p