 	1. types of procedural knowledge 

procedural knowledge forms an important part of expertise. 
this paper describes a system which allows domain experts to themselves enter procedural knowledge into a knowledge base. the system  a stylized form of scientific english embodied within the unit system for knowledge acquisition and representation  has been used successfully within the domain of molecular biology. 
1. introduction 
　　　expert knowledge comes in two forms  declarative and procedural. acquisition and representation of diverse forms of declarative knowledge seem reasonably well understood. however  a significant component of expertise takes a procedural form  ranging from low-level rules for data manipulaton to abstract strategies for problem solving. the problem of acquiring and representing procedural knowledge is still a major research endeavor. this paper will illustrate one solution to the problem being currently used extensively in the domain of molecular biology by the molgen project at stanford university . the primary goal of the molgen proiect is to build knowledge based systems to provide expert assistance to the design of both synthetic and analytic experiments in molecular biology. 
　　　the paper will first describe the variety of procedural knowledge within the chosen domain. it will present arguments concerning why direct entry of procedural knowledge by domain experts is both desirable and necessary. the specific solution used by molgen  a rule language of  genetic english  within the frame-based unit system  will be detailed. finally  a summary will be given of the experience of domain experts using the rule language over a period of two years and of the lessons applicable to many domains learned during that time. all examples in the paper are taken directly from the knowledge bases of various domain experts  specifically  those of professor laurence kedes  professor douglas. brutlag  and dr rene' bach of stanford 
university  and professor john sninsky of albert einstein college of medicine. 
　'this work has been supported by the national science foundation  grant mcs1. computer resources have been provided by the sumexaim facility  nih grant rr1. molgen is a registered trademark of stanford university 
　　　there appear to be four major classes of procedural knowledge that are of importance in building expert systems within the domain of molecular biology. on the basis of extensive interviews of laboratory scientists  the classes are: data manipulation procedures  simulation procedures  selection heuristics  and experiment design strategies. these will be described and illustrated within this section. 
　　　data manipulation procedures analyze existing information in the knowledge base in order to extend or correct the knowledge base. in large part they comprise rules which ensure completeness and consistency of the knowledge base as an example  take the case of describing a new dna structure to a knowledge base there are dozens of items that might be known about the structure length  topology  nucleotide sequence  cutting maps  etc. many of the properties can be calculated from one another; for example  both length and restriction cutting maps can be derived from nucleotide sequence experts in the molgen domain have described the procedures for making these inferences  and the procedures are used whenever new items are 
entered in the knowledge base. 
　　　simulation procedures model the actions of various genetic operations such as denaturing a dna molecule these contain the information needed to alter the representation of objects when the operator is hypothetically applied for example  one of the changes made to the representation of a dna structure when a denaturing method is applied is to the property of  strandedness  structures which are initially double stranded become single stranded. 
　　　selection heuristics are used for choosing among competing alternative operations during the process of experiment design. a typical heuristic for choosing a singlestrand specific cutting enzyme might be:  find all enzymes which selectively cut the specified substrate and then  from the ones which are available in your laboratory  pick the one with the largest turnover number.  
　　　experiment design strategies are the knowledge of problemsolving methods. this knowledge can be at many levels of abstraction and domain-independence  from parameterized plans for doing sequencing experiments  to general strategies for detecting interesting features of molecules  to global strategies for experiment design  such as progressive refinement  embodied as a procedure . 
1 

1. knowledge acquisition directly from 
domain experts 
　　　given that it is desirable for a knowledge base to contain the types of knowledge discussed in the previous section  the problem remains of how best to acquire that knowledge. a time honored method has been for a computer scientist intermediary  the  knowledge engineer   to be instructed in the domain by experts  and then to translate that domain-specific knowledge into the particular representation system chosen. in contrast  the molgen project has emphasized the approach of having the domain-experts themselves build the knowledge bases. the work of the computer scientists on the project has been to provide the appropriate representation tools for both the declarative and the procedural primitives of the domain. 
　　　the reasons for providing for knowledge entry by the domain experts are as follows. first  both accuracy and completeness of the knowledge base suffer when domain knowledge passes through the filter of a computer scientist  who is not an expert in the chosen domain. much of the knowledge is complex and subtle  and its purpose may not be immediately apparent to the non-expert. second  a large knowledge base may be built more quickly when non experts do not have to be intimately involved in describing each object and rule in the knowledge base. finally  in building a knowledge base for a program to be used by other experts in the field  an element of trust  as embodied in the name of a known authority  is essential. professor kedes' description of cloning strategies is more likely to be used and trusted by other molecular biologists than is peter friedland's translation of professor kedes' strategies. 
　　　there are  of course  drawbacks and prerequisites to allowing the experts themselves to describe their domain in a 
　　　knowledge base. many computer scientists working in collaborative efforts with domain experts have noticed that relatively few experts are initially equipped with the ability to logically formalize the rules of their domain. this has been the experience of the mycin project   the prospector project   and the author. thus  the computer scientist has served a useful function by providing a logical organization to the domain experts' rules. of course  scientists gradually become better formalizers as their experience with knowledge-based systems grows. all of the molecular biologist collaborators have expressed satisfaction that their ability to formalize in the laboratory has grown during their tenure on the project. however  it seems that the real trick is in making the domain expert comfortable in his new mode of expression  and that is the major topic of this paper. 
1. a method for describing procedural 
knowledge--the rule language 
　　　the unit system  described in     and   has provided a convenient representation system for the description of declarative information. knowledge is organized as a hierarchial collection of frames or  units  with each unit containing many 
 slots   each holding an individual piece of knowledge. the unit system has many user-oriented features that smooth the knowledge acquisition process for declarative knowledge. the capabilities of the unit system have been extended to allow for the direct description by the experts of procedural knowledge. 
　　　clearly  one way for domain experts to enter procedural knowledge would be for them to learn the underlying programming language of the knowledge base system  in this case interlisp. this would not be a very good solution: first  because of the large time investment required to teach domain experts to be proficient programmers  and second  because the underlying principle of making the knowledge transparent to any domain expert would be violated. being able to access and understand the procedural strategies of the expert provider of such strategies is just as important to another expert user as being able to access and understand a list of any particular parametric property. 
　　　the solution we have chosen for allowing all types of procedural knowledge to be described is to provide a specially tailored language of  genetic english  as a simplified  programming language.  this language allows domain experts to access and manipulate the various units and slots within their knowledge bases--the  variables  of their programming language. much of the language is domain independent  as will be seen below  but its architecture allows parts to be specially tailored to the particular domain. 
　　　the idea of choosing a stylized or stereotypical language for procedural expertise has its roots in the mycin project  1 . there  a formalized language for writing production rules was used to enter expert knowledge about infectious disease diagnosis. this work was extended by the teiresias system of davis . in parallel with the work described in this paper  both the guidon work of clancey in the representation of tutorial expertise and the 
centaur work of aikins in the explicit encoding of the methods for control of inference have experimented with various forms of stylized procedural knowledge description within a domain specific knowledge base. 
1. overall design 
　　　the language for procedural knowledge is implemented as the rule language within the unit system. interaction with the rule language is by the same basic mechanisms as is used for the different forms of declarative knowledge. the user  talks  to a 
　　　special editor which provides facilities for entry and correcton of individual statements within the language.  it should be noted that the word  rule  in the context of the rule language is used to refer to a single statement in the language  rather than necessarily to a conventional condition-action production rule.  
　　　rules are parsed and interpreted in two discrete steps. at rule entry time  syntax is checked and rules are stored in an internal format of procedures and parameters. at interpretation time  binding for the parameters is found among the current context  and the action of the procedure is taken. this allows rules to be written about entities which don't yet exist in the knowledge base  and allows rules to be general to more than a single context. 
　　　currently  rule statements may be one of the following forms: 
1.an action-something which creates  deletes  or modifies a slot or unit  or which affects interpretation of the set of rule statements. actions may be joined by the word  and . 
1 

1. a conditional statement--of the form  if booleanexpression then action else action  where the else part of the statement is ootional. 
1. an iterative statement of the form  for iteration description boolean expression  or  for iterationdescription action . 
1. a label-simply a reference point indicated by the word  label  followed by a single word. 
　　　context of the rules is set at rule execution time. in a practical sense  context means a description of where the rule interpretation procedures are to look for the variables which were left unbound at parsing time. these variables may be the names of slots  units  columns in tables  or special reserved words which refer to dynamic properties during rule interpretation  see below . the rule interpretation system keeps track of units in the current context- these include the unit from which a rule is run  where the rule slot is stored   units implicitly mentioned in the rule statements  while iterating over a group of units  for example   and units which are explicitly added to the context by the user. 
1. actions 
　　　actions may be classed as domain independent or specific to the domain of molecular biology. the following domainindependent actions are currently implemented:  for each action  a definition and an example or two will be given  
           add-adds new elements to the end of a list. a1 cutting-site to cutters-list 
           add context adds new units to the front of the context list. add context restriction-enzymes 
           apply-causes interpretation of another rule slot  a way of  subroutining  or writing metarules . apply mapping-
rules to sv1 
           clear- clears  a slot by restoring its value to its inherited value  or to nil if the slot is first defined in the unit . 
clear cooing table 
           comment a general printing verb. as with all verbs  its arguments are bound to slots or table columns if possible  otherwise taken as strings or integers. comment a restriction map has been created. comment structure name has site-number site-name sites 
           compact -eliminates redundancies in lists  tables  and maps. compact multi-cutters 
create slot creates a new slot. create slot 
coding map in pbr1 unit with datatype map and role r 
           create unit -creates a new unit. create unit sv1 with parent dna structures 
　　　　　　delete-context-removes a unit from the current context. delete context restriction-enzymes 
delete unit deletes a unit. delete unit sv1 
	enter-adds a new row to a table. 	enter in 
fragment table enzyme name leftend rightend size 
exit-returns from interpreting the current rule slot. 
           find a general purpose pattern matcher  with a pattern language adapted from the unix pattern matcher . find 
	ag at ' 	in 	nucleotide sequence 	into 	pattern-
locations 
           set the basic verb for setting and changing the values of slots slots can be set to constants  to the values of other slots  or to the values of constants and other slots modified by various unary or binary operators like plus  divided  intersection  or get element. set enzyme to sal1. 
set total turns to superhelicity divided by winding number. set restriction site to get element 
sitenumber of site list. 
	set datatype -sets the datatype of a list. 	set 
datatype of cutting locations list to integer 
　　　there are also several verbs specific to the molecular biology domain. these verbs  enterregion  entersite  
excise  set length  set topology  insert  join. ligate. splice. transcribe  and write sequence  allow special manipulation of the map and sequence datatypes  used to store information relating to the base sequence of nucleic acid molecules. 
1. boolean expressions 
　　　boolean expressions consist of one or more relations  possibly modified by not  joined optionally by ands or ors. parentheses are allowed to clarify the expressions. simple domain-independent binary relations equals  greater than  less than  list inclusion and the like are provided as well as a special relation for finding patterns in the map and sequence datatypes. several reserved words are provided for boolean expressions  e.g. defined to check whether a slot of a given name exists in the current context and filled to check whether a slot has been given a value in the current context. 
some sample expressions are: 
if restriction-map is filled 
if fragsize   distance 
if 1splice is not equal to 1splice 
if cutting-list includes enzyme 
1. iterative statements 
　　　iterative statements allow a user to iterate over groups of units  rows of a table  or elements of a list. if the iteration is to be over a group of units  then the parent of the desired group  with optional additional restrictions on the values of slots within the units  is specified. context is automatically updated during each step of the iteration. during iteration over a table  individual entries in the table may be retrieved or altered by reference to the column names. during iteration over a list  the words element  next element  and previous element allow the obvious reference. for example: 
1 

1. facilities for making rule-writing easier 
　　　as the power of the rule language has increased over the last several years  so too have the facilities for  programming  in it. users can make free use of common synonyms and  skip  words to make the rules more readable rules can be entered directly by means of a rule editor which allows insertion  deletion  and replacement of rule statements. users can also access their favorite text editor  tv  emacs  etc.  to write and modify rule slots. as was previously stated  variable binding does not occur until rule interpretation time  so that the slots upon which a given set of rules operates do not have to exist when the rules are written. 
1. an example rule procedure 
　　　the following example shows a set of rules recently written by professor brutlag. the purpose of the set of rules is to create a table of fragment sizes when a piece of dna is cut by several restriction enzymes. the rules test to see if sufficient knowledge has been entered into the knowledge base to create the table  and manipulate information that may exist in several possible forms. 
　　　the point of the example is not that the rule language allows programs to be written which otherwise could not be written  but that it allows non programmer domain experts to themselves describe procedures and experiment with manipulating and formatting the knowledge of their domain. it is certainly true that in a real sense the domain experts are becoming programmers in using the rule language  but they are using a language which was designed in response to their requests for a formalized subset of  genetic english.  it is also a language which experience has shown is readable by nonprogrammers almost immediately and writeable  using the available interactive assistance  with only a few minutes basic introduction. 
　　　it will be clear that the sample procedure is neither sophisticated nor particularly  clean  in programming style. in fact  some readers may note with alarm the use of go to statements and labels within this example. as was stated above  the design of the language has come primarily from the requests of users. they currently find this type of syntax to be more understandable than the stylistically preferable syntax of structured programming  but it is hoped that a means of improving the control mechanisms of the language can be found. the essential point is that professor brutlag was able to adquately embody the data manipulation procedure he desired after only a very basic introduction to the rule language. 
　　　the set of rules shown here are stored in a slot named fragment-rules in a unit named restriction rules in 
professor brutlag's knowledge base  dnalab. all of the rule statements are shown in upper case; some of the statements have been annotated in italics. 
1 

1. experience with the rule language 
　　　the rule language has been evolving over the period of about two years. approximately a dozen molecular biologists are actively using it to describe procedural knowledge of that effort  over half falls into the creation of data manipulation rules  simply because the embodiment of those rules in an easily manipulable knowledge base is of direct utility to the users in their individual laboratories the domain experts actively share and criticize each other s procedures 
　　　all of the major users of the rule language  and indeed of the entire unit system  chose to learn to use the system by direct interaction rather than by first reading instructions they make frequent use of the built-in help facilities the online rule language manual stored within all knowledge bases they make frequent requests for new rule verbs and new boolean relations the rule language began  in tact as only the set verb along with a simple if ... then else structure and the boolean relations = .   and   all of the additional structure in the language was created because of requests from molecular biologist users in a very real sense the users created their own programming language 
　　　the work of the computer scientists involved in creating the rule language has been in taking the expert definitions of primitive actions and relations and implementing those definitions in the parsing and interpretation functions of the rule language the computer scientists therefore  have had only to learn relatively small chunks of molecular biology 
　　　a measure of success of this method for describing procedural knowledge may be seen in the enthusiasm shown by the many molgen collaborators in building complex knowledge bases indeed  these groups are using the unit system and the rule language in large part because they get the immediate payoff of sophisticated manipulation of diverse types of information that have become awkward to handle in the laboratory furthermore many of the groups are advancing from simple data manipulation procedures to more complex experiment design strategies  these of use for dna sequencing and cloning  for example  
1. conclusions 
　　　this section will discuss some of the general issues that have arisen during the course of the molgen work in the acquisition and representation of procedural knowledge perhaps the most generally useful lesson  s that system builders should not try to design interactive knowledge acquisition programs without the direct consultation of users features that seem trivial to computer scientists are realty vital to non computer scientist 
domain experts features that seem especially clever to computer scientists may hardly be used by the domain experts the bas c system design should be flexible enough to allow easy changes this work has shown that such a philosophy can lead to the acceptance of a knowledge representation system by busy domain experts 
1 

　　　the distinctions between the rule language and any general-purpose programming language are becoming fuzzier as the language evolves. since this evolution is guided totally by demands of its users  the speculation may be made that domain experts really knew how to program all along but just didn't have a convenient language. if they continue to be successful in their desire to adequately describe many different types of procedural knowledge while remaining ignorant of internal representation details  then perhaps the simple structure of the rule language may serve as a guide for many different real world domains. like the vocabulary of domain specific declarative knowledge  the  verbs  of the rule language tend to be strongly stylized. this helps to avoid the need for complex natural language processing. 
　　　the point was made in  that simple experiment design strategies seem to serve as the driving force for at least a major fraction of experiment designs. complexity arises in the semantic richness of the objects and operators of the domain. the rule language is syntactically simple  while  potentially  semantically rich. the implementation allows semantic augmentation by adding new verbs and relations in a simple  modular manner. indeed  the unit system and rule language are beginning to be used in a variety of other scientific domains. it is still early to make many conclusions about the nature of expert rules and their collection into strategies  but an experimental laboratory for collecting empirical data has been created. 
acknowledgments 
