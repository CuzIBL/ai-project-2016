
in many frameworks for reasoning under inconsistency  it is implicitly assumed that the formulae from the belief base are connected using a weak form of conjunction. when it is consistent  a belief base b = { 1 ...  n}  where the  i are propositional formulae  is logically equivalent to the base
{ 1 ¡Ä ... ¡Ä  n}. however  when it is not consistent  both bases typically lead to different conclusions. this illustrates the fact that the comma used in base b has to be considered as an additional  genuine connective  and not as a simple conjunction. in this work we define and investigate a propositional framework with such a  comma connective . we give it a semantics and show how it generalizes several approaches for reasoning from inconsistent beliefs.
1	introduction
there are many different situations that can lead to reason with sets of  mutually  inconsistent formulae  see e.g.  bloch and hunter  1  for a classification .
¡¡when dealing with an inconsistent belief base  a rational agent must refrain from using classical entailment to exploit her belief base  since from an inconsistent belief base  every formula is a logical consequence.
¡¡many approaches have been proposed so far to address the paraconsistency issue  i.e.  the problem of designing inference relations that do not necessarily trivialize when the belief base is inconsistent  but preserve many expected consequences nevertheless. among them  many approaches to avoid trivialization in presence of a contradiction consist in weakening the inconsistent belief base by inhibiting some formulae in it. to be more precise  the key idea of such approaches is to select some consistent subsets of the belief base b  then to reason deductively from some of them.
¡¡clearly enough  such approaches require a belief base to be a set of formulae  not a single formula  inhibition consists in removing formulae from the set . as a consequence  a  finite  inconsistent set of formulae cannot be considered as equivalent to the conjunction of its elements  and this contrasts with what happens when consistent sets are considered . for instance  the set of consequences of {     ¦×} typically differs from the set of consequences of {  ¡Ä    ¡Ä ¦×}.
¡¡handling in a different way conjunctions of formulae and sets of formulae when they are classically inconsistent is an idea which underlies many paraconsistent logics for decades. such logics are called non-adjunctive logics  which just means that the inference rule which consists in considering the conjunctive formula ¦Õ ¡Ä ¦× as derivable from the set {  ¦×} fails. for instance  jas¡äkowski's discursive logic  jas¡äkowski  1   one of the first paraconsistent logic pointed out so far  is non-adjunctive: in this logic  a propositional formula   is considered as a consequence of a set of formulae { 1 ...  n} if and only if   is a consequence of in epistemic logic s1; this amounts to say that   is a consequence of { 1 ...  n} in jas¡äkowski's logic if and only if   is a classical consequence of one of the  i's. this approach has been further refined by rescher and manor  rescher and manor  1   who suggest to conjoin up to maximal consistency  and then by many ai researchers who introduce conjoining policies that can take advantage of additional information about the relative certainty of pieces of belief.
¡¡nevertheless  as far as we know and apart of the recent work  mengin  1  discussed in section 1  considering comma as a plain connective has never been overstepped up to now  in particular the languages of previous paraconsistent logics do not enable sets of formulae to be nested. defining and investigating a logical framework in which such a  comma connective  is used is the main purpose of this paper  which is organized as follows. after some formal preliminaries  we present both the syntactical and the semantical aspects of the  comma logic  in section 1. some properties of the corresponding inference relation are given in section 1. the generality of the proposed framework is discussed in section 1. some translatability results and some complexity results are given in section 1. an alternative semantics for the comma connective based on cardinality is briefly discussed in section 1. due to space limitations  most proofs are only sketched. section 1 concludes the paper.
1	preliminaries
let ps be a finite set of propositional variables: a  b  c  etc. lps is the propositional language built from ps  the constants    verum and ¡Í  falsum  and the standardconnectives
{¡Ä ¡Å   ¡ú} in the usual way. formulae of lps are noted with small greek letters    ¦×  etc. an interpretation  world  m is a total function from ps to {1}  typically represented as the set of all the variables of ps it satisfies. mps denotes the set of interpretations built over ps. m is a model of a formula    denoted m |=    if and only if it makes it true  in the usual truth-functional way . mod    denotes the set of models of  . |= denotes classical entailment and ¡Ô denotes equivalence between formulae from lps. let   denotes strict inclusion. let b = { 1 ...  n} be a finite set of formulae of lps  and let b1   b  we note
¡¡b1 = { i | i ¡Ê b1}. b1 is a consistent subset of b ifvand onlyv if vb1 is consistent.1 b1 is a maximal1 1consistent subset  or maxcons  of b if and only if b is consistent and there is no consistent b such that b   b   b. maxcons b  denotes the set of the maximal consistent subsets of b.
1	the  comma logic 
let us start with the definition of the language of our comma logic.
definition 1 the language of the propositional comma logic is defined inductively as follows:
  ps ¡È {  ¡Í}   lcps;
  if   ¡Ê lcps and ¦× ¡Ê lcps then          ¡Ä ¦×      ¡Å ¦×      ¡ú ¦×  belong to lcps;
  if n ¡Ý 1 and { 1 ...  n}   lcps then h 1 ...  ni belongs to lcps.
parentheses can be omitted when no ambiguity is possible.
¡¡clearly enough  lcps is a superset of lps: nonclassical formulae obtained by taking advantage of the comma connective can be formed. here  we abuse words slightly: comma is actually considered as a set constructor  hence formally comma denotes a family of connectives  one per possible arity. especially  comma is not always binary: one can apply the comma connective to no formula at all  the empty set   one formula  singletons   or more than two formulae. this forces us to introduce additional separators  the chevrons h and i - which must not be confused with parentheses  but enables to keep the notations not too heavy.
¡¡it proves also interesting to define the depth of a formula of lcps  and the languagesas:
definition 1 the depth of a formula   from lcps is defined inductively as follows:
  if   ¡Ê ps ¡È {  ¡Í} then depth    = 1 ;
  depth     = depth    ;
  ¡Ä	¡Å	¡ú
  depth h 1 ...  ni  = maxi=1...n depth  i  + 1
for  is the set of all formulae of lcps whose depth is less or equal to n.
¡¡one can easily check that  and . finally  for all n ¡Ý 1  we define the lan  set of simple formulae of depth n  as the subset ofcontaining all formulae h 1 ...  ki  where  1 ...  k are formulae of  i.e.  the set of formulae of depth n where comma is the main functor. here are some examples of formulae of lcps  where ps = {a b c}:
   1 = a ¡Ä b ¡Ä   b ¡Å c  ¡Ä  c;
   1 = ha ¡Ä b  b ¡Å c  ci;
   1 = ha ¡Ä  b ¡Å hc a ¡Å b  ci  h b ¡Å c  ci ¡Ä ha  ii;
   1 = h i. we have depth  1  = 1; depth  1  = 1; depth  1  = 1.
note also that  and that.
¡¡let us now present the semantics of our new language: definition 1 the notion of satisfaction of a formula of by an interpretationm is given by the relation |=c on mps¡Á lcps defined inductively as:
  m|=c ;
  m |=1 c¡Í;
  if a ¡Ê ps  m|=ca if and only if a ¡Ê m;
  m|=c   if and only if m |=1 c ;
  m|=c  ¡Ä ¦× if and only if m|=c  and m|=c¦×;
  m|=c  ¡Å ¦× if and only if m|=c  or m|=c¦×;
  m|=c  ¡ú ¦× if and only if m|=c   or m|=c¦×;
  m|=ch 1 ...  ni if and only if there is no interpretation m1 ¡Ê mps such that {i | m1|=c i} strictly contains {i | m|=c i}.
¡¡we now extend several standard notions  and the corresponding notations  from classical logic to comma logic.
let modc    = {m ¡Ê mps | m|=c }. a formula ofis said to be consistent  or satisfiable  if and only if modc    1=    and valid if and only if modc    = mps. if   and ¦× are two formulae of lcps  ¦× is said to be a consequence of    denoted  |=c¦×  if and only if modc      modc ¦× . when   =    we simply write |=c¦× instead of  |=c¦×. two formulae are said to be equivalent  noted  ¡Ôc¦×  if and only if  |=c¦× and ¦×|=c . 1 some logical properties
it is easy to show that  in contrast to the other connectives in the logic  the comma connective is not truth-functional: in the general case  the truth value of h 1 ...  ni from in interpretation m cannot be determined from the truth valfor
	=	=	1 =	1 =	 
satisfies the  first  element of  1 and     but does not satisfy the  second  one; while m is a model   it is not a model of  1. this lack of truth-functionalityexplains why the comma connective is really genuine in the logic.  it cannot be defined by just combining connectives of classical logic .
¡¡actually  the discrepancy between classical logic and comma logic lies only in the comma connective  since:
proposition 1 comma logic is a conservative extension of classical logic: for every pair of formulae    ¦× in which the comma connective does not occur  then  |=c¦× if and only if   |= ¦×.
¡¡obviously  new valid formulae are obtained in comma logic  like h    i  because the language of propositional logic has been enriched  but in any case classical theorems are preserved.
¡¡furthermore  the replacement metatheorem of classical logic can be extended to comma logic:
proposition 1 let   be a valid formula fromandlet x ¡Ê
ps. let ¦× be any formula from formula obtained by replacing in   every occurrence of x by an occurrence of ¦× is valid as well.
¡¡let us now make precise some properties of the inference relation |=c. first  a direct consequence of its definition is that |=c is a tarskian consequence relation  since it is defined as model containment ; from this observation  a number of immediate properties follows  especially the fact that |=c is reflexive and transitive. by the way  note that while in classical logic the basic entailment relation |= on lps ¡Álps can be easily extended to a relation on 1lps ¡Á lps by defining the models of a set of formulae as the interpretations satisfying everyformula from the set  the similar constructionwould not be meaningful here; indeed  in comma logic  sets of formulae are interpreted in a nonstandard way. this renders the usual characterization of tarskian consequence relations inadequate in our setting since |=c does satisfy neither strong reflexivity nor monotonicity:
  ha  ai |=1 ca;
  hai|=ca but ha  ai |=1 ca.
here are some other valuable properties:
proposition 1
1. if  1|=c 1 and h 1  1i|=c¦×  then  1|=c¦×.
1. if h 1  1i|=c¦×  then  1|=c  1 ¡ú ¦× .
1. if  1¡Ôc 1 and  1 is a subformula of ¦×  then any formula obtained by replacing in ¦× occurrences of  1 by  1 is equivalent to ¦×.
1.  |=c¦×1 ¡Ä ¦×1 if and only if  |=c¦×1 and  |=c¦×1.
1. if h   1i|=c¦× and h   1i|=c¦× 	then h    1 ¡Å  1 i|=c¦×.
¡¡item  1  is a form of the cut rule. item  1  is a form of the deduction metatheorem. item  1  is the substitution metatheorem for the  comma logic . in particular  it shows that  k if  i ...k ¡Ô 1 then h i ¡Ôc
rule . item  1  is a form of proof by cases  or  or rule  .
¡¡other standard metatheorems of classical logic fails in the general case for full comma logic  i.e.  when sets of formulae are considered. for instance  modus ponens fails  ha  a ¡ú  a i |=1 c a   and-elimination and or-introduction as well  h¡Í  i |=1 c¡Í and h¡Íi |=1 c¡Í¡Å  ; reduction ad absurdum fails   |=c  while h    i |=1 c¡Í .
¡¡let us now present additional properties which state how the comma connective interacts with the other connectives
 and itself . proposition 1
1. for any permutation ¦Ò of {1 ... n}  h 1 ...  ni is equivalent to h ¦Ò 1  ...  ¦Ò n i.
1. h 1 ...  1  1 ...  ni ¡Ôc h 1 ...  ni. 1.  n ¡Ý 1 h 1 ...  ni |=1 c¡Í.
1. 1	inconsistent
       1 i	1 i |=  1 .
1.  1 ¡Ä ... ¡Ä  n|=ch 1 ...  ni.
1. h 1 ...  ni¡Äh¦×1 ... ¦×mi|=ch 1¡Ä¦×1 ...  1¡Ä¦×m  ...  n ¡Ä ¦×1 ...  n ¡Ä ¦×mi.
1. h 1 ...  ni ¡Ä h¦×1 ... ¦×mi|=ch 1 ...  n ¦×1 ...  ¦×mi.
1. if  i is consistent  for at least one i ¡Ê 1...n   then h   ...  ni|=c  ¡Å ... ¡Å  n.
   then h 1 ¡Å   ...  n ¡Å  i ¡Ôc   1 ¡Ä ... ¡Ä  n  ¡Å  . 1.       ¡Ôc  .
¡¡item  1  shows that the  comma connective  is symmetric in every argument. item  1  shows that the  comma connective  is idempotent.
   item  1  shows that for every n   1  every formula from  is consistent  obviously  this cannot be extended to
the full language lcps . this is sufficient to ensure that |=c achieves a form of paraconsistency when starting from a set of formulae.
¡¡item  1  gives a sufficient condition to simplify a set of formulae  note that in contrast to classical logic  it is not possible in general to remove a formula from a set as soon as it is entailed by another formula; for instance  while a ¡Ä b|=ca ¡Å b  we do not have ha ¡Ä b  a a ¡Å bi equivalent to ha ¡Ä b  ai .
¡¡items  1    1    1  make precise the connection between the comma connective and conjunction. none of the converse relation holds in the general case  for  1    1 ¡Ä ... ¡Ä  n should be consistent; the converse of  1  does not hold even in the restricted case m = 1 and h 1 ...  ni ¡Ä ¦×1 is consistent: ha¡Ä  b  a ¡Ä  b  a¡Ä  bi |=1 cha  a ¡Å b  ai¡Ä  b; the converse of  1  fails since for instance ha  ai |=1 chai ¡Ä h ai . note also that there is in general no deductive connections between a formula where nested commas occur and its  unfold  counterpart. especially  in general  we have:
hh 1 ...  ni h¦×1 ... ¦×mii |=1 ch 1 ...  n ¦×1 ... ¦×mi for example  hha bi h a cii |=1 cha  a b ci. in general  we also have:
h 1 ...  n ¦×1 ... ¦×mi |=1 chh 1 ...  ni h¦×1 ... ¦×mii for example  ha  a b ci |=1 chha b  ai h a cii.
¡¡item  1  and  1  make precise the connection between the comma connective and disjunction. no other significant properties involvingdisjunction hold; for instance ha b  bi¡Å  a |=1 cha ¡Å  a b ¡Å  a  b ¡Å  ai. together with the previous properties concerning conjunction  it shows that we can consider the comma connective as a  weak  conjunction connective  since it is equivalent to it when the conjunction is consistent  but gives a consistent result even when it is not. furthermore  when all the formulae are pairwise contradictory but one of them is consistent  comma is equivalent to the disjunction connective. thus  if we specialize it to the case two formulae   and ¦× are considered  we get the easy corollary:
	  ¡Ä ¦×	if consistent  else
corollary 1 h  ¦×i ¡Ôc  ¡Å ¦×	if consistent  else  	otherwise.
¡¡item  1  finally states that negation is involutive for the full logic  in particular     h 1 ...  ni  ¡Ôc h 1 ...  ni . no other link between negation and the comma connective can be established in the general case  for instance    does not distribute over the  comma connective ; for instance   h¡Íi ¡Ôc ¡Í while h ¡Íi ¡Ôc   .
1	generality of the framework
let us now show how several approaches for dealing with inconsistency can be encoded in this logic.
1	skeptical inference
one of the most common method for reasoning from an inconsistent set of formulae consists in selecting the maximal  w.r.t. set inclusion  consistent subsets  also called maxcons  of formulae  see  rescher and manor  1  for example . consequences w.r.t. skeptical inference  also called  universal  inference  are then defined as classical consequences of every maxcons:
definition 1   `    iff  m ¡Ê maxcons     m |=  .
¡¡such an inference relation can be easily recovered in our comma logic:
proposition 1 { 1 ...  n} `    iff h 1 ...  ni|=c . 1 credulous inference
from a set of maxcons  one can also consider credulous inference  also called  existential  inference   that allows to infer a formula if at least one maxcons classically entails it.
definition 1   `    iff  m ¡Ê maxcons     m |=  .
¡¡again  such an inference relation can be easily recovered in our comma logic: proposition 1
{ 1 ...  n} `    iff h 1 ...  n   i ¡Ä   |=1 c¡Í. 1 supernormal defaults
assumption-based theories and supernormal default logic  poole  1; brewka  1  can be described in the following way. let hb bdi be a pair  where b and bd are two finite sets of formulae. b is the set of facts  or hard constraints   that is supposed to be consistent. bd is a set of defaults  i.e.  a set of formulae that one wishes to add to facts if it does not result in an inconsistency. bd is often not consistent with b. an extensionis a subset of formulaeof b¡Èbd that contains all the formulae of b and a maximum  w.r.t. set inclusion  of formulae of bd. so  the set of all the extensions is defined as:
extens hb bdi  = {e | e   b¡Èbd and b   e and e 1|=
¡Í  e1 e   e1   b ¡È bd 1 . is defined as:
definition 1 hb bdi `d   iff  e ¡Ê extens hb bdi   e |=  .
¡¡this can be also easily expressed within the comma logic framework  note that since the set b of facts is consistent  it can be considered conjunctively :
proposition 1 hb { 1 ...  n}i `d   if and only if h 1 ¡Ä b ...  n ¡Ä bi ¡Ä b|=c .
finally  notevthat sincev circumscription can be encoded as skeptical inference from supernormal defaults  see e.g.   etherington  1    it can also be encoded in the comma logic framework.
1	belief revision
the basic revision operator proposed by nebel  nebel  1; 1; fagin et al.  1  is defined as follows:
definition 1 let b¡Í  = {m | m   b and m 1|=   and  m1 s.t. m   m1   b m1 |=  }. basic revision is then defined as: b  n   =      m  ¡Ä  .
m¡Êb¡Í  
in comma logic  this can be expressed as follows:
proposition 1 { 1 ...  n}  n   |= ¦Ì if and only if h 1 ¡Ä   ...  n ¡Ä  i ¡Ä  |=c¦Ì.
1	belief merging
suppose that one wants to merge several belief  or goal  bases while allowing some of those bases to be inconsistent. if one wants to take into account inconsistent belief bases in the merging process  one can first perform an intra-source merging in order to extract useful information from those bases  before making the proper inter-source merging.
¡¡let e = {b1 ... bn} be a set of  possibly inconsistent  belief bases s.t. for all i ¡Ê 1...n  we have bi =
. then  we can define the merging of those bases as :

¡¡this operator is not definable as a two aggregation steps merging operator  as defined in  konieczny et al.  1  . conversely  considering an alternative semantics for the comma connective  see section 1   we can capture some of the two aggregation steps merging operators in comma logic.
1	computational aspects
let us investigate both translatability issues and complexity issues for comma logic. first of all  one can prove that the expressiveness of the comma logic is exactly the same as the expressiveness of classical logic  every piece of information which can be encodedin one of the logics can also be encoded in the other one :
proposition 1 for any formula  there is a formula that is equivalent to  .
¡¡a simple inductionon the depth of the formulaeshows how each formula  of lcps can be equivalently for |=c  rewritten into a classical formula c   . let   be a formula of lcps of depth k. a translation of it into a classical formula can be obtained as follows. first  replace every subformula of   that is inby an equivalent formula from the substitution theorem for the  comma logic  makes it sound ; one gets then a formula of depth n   1  so we can iterate the process until a formula of depth 1 is obtained. for example  let   = ha b h b¡Åc  cii; we start by translating h b¡Åc  ci in  b¡Ä  c: after one iteration  we get the formula ha b  b¡Ä  ci  and a second iteration gives  a ¡Ä b  ¡Å  a ¡Ä  b ¡Ä  c   that is equivalent to a ¡Ä  b ¡Å  c . the problem with such a translation is that the size of c    is generally exponentially larger than the size of  . can we do better  actually  the answer is negative:
proposition 1 under the usual assumptions of complexity theory 1 there is no polysize function that maps any formula
from  and even from to
  an equivalent classical formula.
  an equivalent formula from lcps in which the  comma connective  is binary  i.e.  whenever it is used  it may connect at most two formulae .
¡¡the first item is a direct consequence of the noncompilability of circumscription  cadoli et al.  1 . the second is a consequence of the first one  given that every formula   from lcps in which the comma connective is at most binary can be turned into a classical formula whose size in bounded by | |  the proof is easy by structural induction given corollary 1 .
let us now turn to the inference issue. from definition
1  it is easy to show that  |=c¦× if and only if   ¡Ä  ¦× is inconsistent. hence it is sufficient to focus on the satisfiability issue. the satisfiability problem in lcps is  of course  at least as hard than for classical logic  so it is np-hard . can we say more than that  let us begin with.
proposition 1 the satisfiability problem in complete.
¡¡membership to ¦²1p comes from the fact that the corresponding model checking problem is in conp: for any simple subformula ¦× = h¦Á1 ... ¦Áni of   from  deciding whether m |=1 c¦× simply consists in guessing an interpretation m1 and to check in polynomial time that the set of ¦Ái satisfied by m1 is a proper superset of the set of ¦Ái satisfied by m. actually  the truth values of all such ¦× in m can be established in nondeterministic polynomial time  guess in parallel several m1  one for each simple subformula ¦× of depth 1 which is not satisfied by m . once this has been done  the truth value of   in m can be computed in deterministic polynomial time. hardness comes from -hardness of credulous inference from maximal consistent subbases  nebel  1; cayrol and lagasquie-schiex  1 .
¡¡now  what about the satisfaction problem when commas are nested  an iterated use of the proof of the preceding result  membership part  easily leads to the following:
proposition 1
  the satisfiability problem in is in ¦²pn+1.
  the satisfiability problem inis in pspace.
¡¡we do not have hardness proofs but we conjecture them.1thus  we do not know how to perform comma elimination  for the nested occurrences  in polynomial time  and we conjecture that it is not possible to do it ; especially  introducing new symbols would not necessarily preserve equivalence over the original language; for instance  ha h a bii 1¡Ôc ha newi ¡Ä  new   h a bi .
¡¡let us now give a few comments about those complexity results. first  the fact that satisfiability in is at the second level of the polynomial hierarchy  and not higher are good news. we know  from section 1  that the universal and existential inference problems can be reduced  in polynomial time  to satisfaction or validity problems of formulae of. given complexity results from  cayrol et al.  1;
 nebel  1   it follows that the satisfiability problem in  be lower than the second level of the polynomial hierarchy. the fact that it is not higher shows that the gain of flexibility we get does not result in a complexity shift.
1	variation on the  comma semantics 
among others  another semantics for the comma connective is obtained by considering as models of h 1 ...  ni  the interpretations that maximize the number of satisfied formulae  i. formally  this amounts to replacing in definition 1  the item m|=ch 1 ...  ni by the following one:
 if and only if there is no interpretation m1 ¡Ê mps such that |{i | m1|=c i}|   |{i | m|=c i}|.
¡¡properties reported in section 1 are typically preserved by this modification  but idempotence: h 1  1  1 ...  ni is  generally  not equivalent to h 1  1 ...  ni. for example  ha a  ai is not equivalent to ha  ai under the cardinality maximality semantics.
contrariwise to the |=c case  we can show that:
proposition 1 for every fixed n  there is a polysize function that maps any formula of into a query-equivalent formula of lps when we appeal to the semantics.
¡¡the proof is a constructive one and relies on a translation function c similar to the one given in section 1: we first replace each occurrence of the formulae ¦× = h¦Á1 ... ¦Áni of lcps s 1  in   by the cardinality formulae  = k¦×  : h¦Á1 ... ¦Áni  meaning that exactly k¦× formulae among the n formulae ¦Á1 ... ¦Án must be satisfied  see e.g.  benhamou et al.  1  ; such cardinality formulae can be translated in polynomial space as classical query-equivalent formulae. such a translatability result is helpful in the objective of compiling formulae from into classical formulae so as to improve inference.
proposition 1 the satisfiability problem in lcps for |=cc is in  1p.
¡¡membership tocomes from the fact that one can associate to any simple subformula ¦× = h¦Á1 ... ¦Áni of   ¡Ê lcps the maximal number k¦× of ¦Ái which can be jointly satisfied. simple subformulae of   are processed by increasing depth: for any ¦× of depth 1  the ¦Ái are classical formulae  and using binary search  logarithmically many calls to an np oracle are sufficient to compute the corresponding k¦×. for any ¦× of depth 1  again using binary search  logarithmically many calls to an np oracle are sufficient to compute the corresponding k¦×: the key observation is that the model checking issue for ¦× can be done in polynomial time once the k¦×1 for each simple subformula ¦×1 of ¦× have been computed  only if m satisfies k¦×1 elements in ¦×1   and so on. since   does not contain more than | | simple subformulae  linearly many calls to an np oracle are sufficient to compute all the k¦×; since model checking is in p once they have been computed  a last call to an np oracle is sufficient to determine whether   is satisfiable. we conjecture that the problem is -complete but have only a proof of hardness at that time.
¡¡one has to note that the complexity gap  between the first and the second level of the polynomial hierarchy  highlighted by  cayrol et al.  1  when one goes from the cardinality criterion to the set-inclusion one  becomes here an amazing gap  from at most  to pspace  - under the assumption of completeness for pspace  of course.
1	conclusion
in this paper  we have given a  logic  for paraconsistent reasoning where comma is considered as a genuine connective. we have presented some properties of this logic  and we have shown that it allows to express  in a unified language  several problems of reasoning with inconsistent belief bases  nonmonotonic inference  belief revision and belief merging. we have also providedsome translatability results and some complexity results. finally  we have given an alternative semantics for the comma connective.
¡¡a distinction between a finite set of formulas and the conjunction of them is also made in many substructural logics  i.e. logics weaker than the classical one because of the absence of some structural rules  restall  1 . the  comma connective  in such logics is not necessarily commutative or idempotent. unlike in our comma logic  it is binary and cannot be in the scope of every other connective under consideration in the language.
¡¡another closely related work is  mengin  1   which defined a more general framework than ours: it can be shown indeed that any formula of our language can be translated in a formula of his  which is a consequence of the equivalence given in his section 1 for formulas of depth one together with our proposition 1 . therefore  our logical properties and complexity results carry on to the framework of  mengin  1 .
acknowledgements
the authors would like to thank the anonymous reviewers for their comments. this work has been supportedby the universite¡ä d'artois  the ircica consortium  the re¡ägion nord/pasde-calais and the european community feder program.
