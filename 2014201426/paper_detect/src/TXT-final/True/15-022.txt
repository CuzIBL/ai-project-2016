 
pdp  protocol diaqnostic program  is a proqram for analyzing think-aloud protocols of subjects solvinq elementary physics problems *. two versions of pdp implement models of problem solving behaviour at novice and intermediate levels of expertise. in order to compare the behaviour of the models with think-aloud protocols of subjects  pdp is equiped with a think-aloud component  which communicates with a human coder. any discrepancies between the behaviour of the model and the subject activate a diaqnostic component  which identifies the deviation and may redirect the behaviour of the model. the output of the system is an analysis of a protocol in terms of the computational model  annotated with possible discrepancies between model and subject. results obtained by analyzing a number of protocols of experts and novices are presented. 
1. introduction 
the goal of our project is to investigate differences between novice and expert problem solving in semantically rich domains in order to explicate what is learned by doing. a basic assumption is that the behaviour of a human problem solver is determined by his knowledge  or lack of knowledge  about the problem domain. thus the main question to adress is what changes take place in the knowledqe base of a novice becominq an expert. 
   the domain chosen is that of elementary thermodynamics. the semantic richness of this domain does not allow the observation of subjects durinq the entire skill acquisition process from novice toward expert level. the methodoloqy adopted instead is to observe subjects at two different levels of performance: novice level and intermediate level  and to simulate this behaviour with a computational model for each of these levels. 
   since the problem solvinq behaviour of human subjects  novices in particular  is idiosyncratic and unpredictable we do not aim at predictinq all behaviour in detail  but adopt the strategy of semi-automatic simulation  bhaskar and simon  1 : whenever the model fails to simulate the behaviour of the subject  it can be put back on the right track by a human coder. in this way protocols of subjects at different levels of expertise can be analyzed in terms of the 
* netherlands organization for the advancement of pure research  zwo . 
computational model and annotated with discrepancies between model and subject. 
1. description of the system 
the pdp system consist of three components. the problem solving component  perform  is implemented using a locally developed  interlisp  implementation of kl-one  brachman  1 . in contrast with bhaskar and simon  1   the perform component actually solves the problem. the kl-one network contains both the declarative knowledqe about the domain  and procedural knowledqe represented as concepts with attached demon-like lisp-procedures. procedural knowledqe is activated by a scheduler usinq a multi-level aqenda similar to krl. all operations on the kl-one network 
 e.q. fillinq slots  individuatinq concepts   generate  events  which are sent to a second component of the system: analyze. analyze interprets the event with a production system and decides whether the event will be translated into natural language utterances. these utterances are presented to a human coder for comparison with a subject's protocol. if there is a match between an event and part of the protocol  the line numbers of that part are typed in by the coder and a signal is sent to perform to continue. if the behaviour of the program and the subject do not match  a third component of pdp is activated: diagnose. 
　　the diagnose component is equipped with rules representing knowledge about deviations from the normal line of behaviour of the model  e.g. errors and impasses . in interaction with the coder diagnose can identify the problem and redirect the behaviour of the model  e.g. by changing knowledge structures in the working memory or by reactivating certain procedures . 


1 l konst et al. 
　　the output of the model is an analysis of the protocol in terms of the procedural and declarative knowledge used by the model. discrepancies between model and protocol are also indicated. 
1. intermediate level model 
as a starting point for the intermediate level model  an instructional method developed for an undergraduate level physics course was used  which prescribes the actions and methods needed to solve droblems in thermodynamics  mettes et al. 1 . the procedural knowledge of the model consists of three main procedures: orientate  solve and evaluate. the task of orientate is to read the problem and to analyze the problem in terms of concepts relevant to the physics domain. the output of orientate is a transformed representation of the problem suitable for use in the solving phase. 
solve implements a backwards search for a seguence of eguations which will solve the problem. when such a seguence is found  numeric values are filled in the eguations and the answer is computed. 
evaluate currently only implemented in a rudimentary form- checks the consistency and plausibility of the answer against gualitative expectations etc. more details of the intermediate level model are given in jansweijer et al.  1 . 
　　with the intermediate level version of pop we analysed 1 protocols of a second year physics student. more than 1% of the protocol statements could be matched with corresponding activities of the model. in general  the model and the behaviour of the subject were in concordance with respect to the order in wich different procedures were activated. the table below shows the relative number of activities performed in the three main procedures of the model  compared to the relative number of activities actually identified in the protocols. 

the data indicate that the relative amount of processing performed in different phases of the problem solving proces  is accurately predicted. this is the more remarkable since the model puts much more emphasis on the orientation phase than most previous models of physics problem solving. the mecho program  bundy et al. 1; luger  1  for instance starts to select a physical principle and makes most of the necessary inferences and transformations when particular pieces of information are needed. the able model  larkin 1  also concentrates to a large extent on the ways in which principles are selected. our model is more similar to the isaac program  novak  1  in its emphasis on transformation of the problem representation before actual principles are selected. 
   as can be seen from the above table the model performs almost twice as many activities as are present in the protocols. one reason for this is that the subject does not verbalize all of his activities in the same detail as pdp does. another  more important  reason for this phenomenon is that  during the course of the experimental session  the subject learns from his own problem solving efforts: the type of problem is recognized  certain operations become automatic  analysis of problem features becomes more goal oriented  seemingly guided by problem specific schemata. this learning results in a smaller number of  verbalized  activities  in particular during the orientation process. the model however is not eguipped with any learning capabilities. quantitativily this can be illustrated by comparing the results for a series of problems occuring early in the sessions and an isomorphic series presented at a later stage. in the late problems we saw only half as much orientation activity as in the early isomorphic problems. for solve the difference is less: 1 % of the activities remain present. 
   some activities of the subject could not be coded in terms of the model. these are: recognition of problems as similar tn previously solved ones and checkinq of dimensions. 
1. novice level model 
analysis of novice protocols  with the intermediate version of pdp showed us that novices behave quite differently: the order in which novices perform the various activities deviates strongly from the model. in particular the orientation process is only present in a rudimentary form  resultinq in an incomplete analysis of the problem. this causes problems durinq later staqes of the problem solvinq proces. the subject qets into  impasses  and needs to perform problem solvinq activities to overcome the impasse. 
　　on the basis of these qeneral observations a first model at novice level was constructed. it differs from the model at intermediate level in two ways. first  a 
　　number of procedures are deleted from the intermediate model  in particular those related to transformation of the problem representation. second  a number of repair procedures were added to the diagnose component of the model  c.f. brown & vanlehn  1 . when the problem solving proces gets into an impasse  diagnose tries to classify the cause of the impasse and suggests one or more repairs. the human coder selects the applicable repair by inspecting the novice protocol. 
   for example  when a principle is selected for which the preconditions are not satisfied  the system gets into an impasse. two possible repairs are then suggested:  reject principle  and  relaxation . when the coder selects the first repair  the principle is rejected and another principle is selected. when the coder selects the second repair  continuation of the proces with the selected and possibly wrong principle is forced. another typical example of an impasse is when the system ends up with a filled eguation in which there is no unknown left to be computed. in such a case the repairs  start anew  and  reject principle  are suggested. 
   a summarized example of an output-trace of pdp for a novice protocol is shown below. the uppercase words denote the procedures of the model. 

the first activity of the model is to read the problem and abstract relevant cues from the problem text. on the basis of these cues  a principle is selected. because the precondition of this principle is not met  the system gets into an impasse. since the subject iqnores this precondition the impasse is repaired by relaxation of the precondition. the values of the variables are now filled in the equation. the procedure which transforms units fails  due to lack of knowledge and the resultinq impasse is repaired by iqnoring the units altogether. finally the asked is computed and the solution is evaluated. the figure above represents problem-solving behaviour typical for a novice  in which the orientation process is only present in a rudimentary form. 
1. discussion 
the intermediate level model fits the behaviour of experienced subjects quite well  indicating that subjects with good knowledge of physics and experience in solving this type of problem  are able to work systematically and do perform an extensive analysis of the problem before selecting eguations. 
   the model for novice behaviour  based on the assumption that lack of procedural and declarative knowledge causes impasses which are resolved by local repairs produces behaviour which is typical for novice protocols. a substantial number of protocols have been analyzed using this model. although the model accounts for a large percentage of protocol utterances  a number 
l. konst et al. 1 
of repairs had to be introduced in a rather ad hoc way. also  non-local repairs were observed in the protocols  e.g. reactivation of the orientation proces when the solve proces gets stuck   which are not easy to model in this way. in contrast with brown & vanlehn  1   we have not been able to identify and implement a parsimoneous repair strategy. 
   currently a new version of the novice model is under construction  which is controlled by goals embodied in a global plan. in this system the diagnose component will be able to generate subgoals  whenever an impasse occurs. in this way  we expect to gain flexibility in control over repairs. 
