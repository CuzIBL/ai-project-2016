 
　　　this paper describes a new method for determining the v a l i d i t y of c e r t a i n formulas 	from presburger arithmetic  	namely those with only u n i v e r s a l l y q u a n t i f i e d v a r i a b l e s . 	to do t h i s the notion of a presburger formula  	is generalized s l i g h t l y to that of a q u a s i - l i n e a r formula. 
　　　this so called   s u p - l n f   method seems part i c u l a r l y suited for proving c e r t a i n v e r i f i c a t i o n conditions that arise from program v a l i d a t i o n   especially those in which  proof by cases  is r e q u i r e d . it also eliminates the need for proof by enumeration  inherent in some methods described e a r l i e r in the l i t e r a t u r e   which sometimes require a search through a large number of consecutive integers. 
　　　these algorithms have been programmed and used extensively as a part of an automatic theorem proving system. 
	1. 	i n t r o d u c t i o n 
presburger 	arithmetic. 
　　　an expression is said to be a formula in presburger arithmetic if it is a  well  formed algebraic expression  allowing only v a r i a b l e s   integer constants  a d d i t i o n and subtraction  the arithmetic r e l a t i o n s   and =  the propositlonal calculus l o g i c a l connectives  and q u a n t i f i c a t i o n   e i t h e r universal or e x i s t e n t i a l   . constant m u l t i p l i c a t i o n is also allowed. see   1     davis   1     and cooper   1   . 
　　　the presburger algorithm is a decision procedure for presburger a r i t h m e t i c : given a formula in presburger arithmetic decide whether it is true or f a l s e . two main steps are u t i l i z e d in t h i s process:  1  e l i m i n a t i o n of q u a n t i f i e r s 
  and replacement of variables by constants   1  evaluation of the r e s u l t i n g formula  which has no v a r i a b l e s   to determine i t s v a l i d i t y . 

which is descridea oeiow  nanaies only the case of presburger formulas with universally quantified variables. but it avoids the need for long searches through consecutive integers  and f a c i l itates certain types of  proof by cases.  it is not clear whether our methods can be extended to handle a l l presburger formulas  with both universal and existential quantification. 
　　　presburger arithmetic has many applications in the field of proving assertions about computer programs* 	there a theorem about the program  is required to be proved. 	such theorems are often not originally stated as formulas in presburger arithmetic but are reduced to such as the proof proceeds. 	for example for an arrav 	a. 	we might 

　　　backchalnlng on the second hypothesis generates the subgoal  which is a formula in presburger arithmetic. notice that j is a universally quantified variable or free variable and hence must be treated as a skolem constant in the proof. many applications result in presburger formulas with only universally quantified variables. in this paper we describe a procedure  the sup-inf method  for deciding the 
v a l i d i t y of such formulas. 
first let us note that the above formula 
 is easily verified by adding the negation of the conclusion to the hypothesis  
getting 	and then combining to 
get the contradiction 	our pro-
cedure does essentially the same thing on this example. we now describe in section 1 our procedure for determining the validity of universally quantified presburger formulas. in section 1 we define the pivotal algorithms sup and inf and prove in section 1 of  that they terminate with desirable outputs when applied to quasi-linear formulas. several examples are liated in section 1  and given in more detail in 


which requires t e s t i n g the expression for each of 

section 1 of   1   . this method has been programmed and used extensively in a program v e r i fication system   1   . 
	1. 	the sup-lnf procedure 
an example using the procedure. 
　　　we begin w i t h an example and then o u t l i n e the general procedure. 
	let 	f 	be the theorem 

the integers  j= 1  .. .   1 . in fairness to cooper it should be stated here that such adverse examples apparently do not arise often in the applications he considers in   1   . 
our method  and in more d e t a i l in   1     
the skolemization process w i l l not be discussed here. these u n i v e r s a l l y q u a n t i f i e d variables  or skolem constants  w i l l be referred to as   v a r i a b l e s   in t h i s paper. 
1 
variables 		we w i l l negate 	f 	and con-
v e r t it to the expression   1 '   below  which gives a range for each of these three 	x ' s . 	 expressions 	  1 '     	  1 '     	and   1 '   correspond to expressions  1   	 1   and  1  given l a t e r in our 
general procedure . 
we f i r s t obtain 

quasi-linear formulae. 
the reader w i l l observe that expression 
  1 '   	is 	not a presburger formula because it con-
tains non-integer constants  and the symbol   m i n   . we now relax the condition on 
the integer constants to allow any r a t i o n a l number as w e l l as  and  however  the variables  such as x1   x 1   x 1 in the above example  w i l l 
represent only non-negative integers. we also allow the symbols  max'' and   m i n   . such an extended presburger formula w i l l be called quasil i n e a r . it w i l l be called   q u a s i - l i n e a r in l  if each of i t s variables is a member of the set l. 
　　　we now describe our general procedure for determining the v a l i d i t y of such quasi-linear 
formulas. 

1 
how 1   1x 1 -1 i s derived f r s explained in section 1 of   1   . 
in our example above we had only one fi this has been the case in most examples we nave t r i e d so f a r . 

1 
in practice we do not always convert the e q u a l i ties to i n e q u a l i t i e s   but rather use a   s u b s t i t u t i o n of equals*' technique to gain e f f i c i e n c y . see   1   . 
in solving for x 1 in an expression l i k e 
 sup we obtain two answers: x. x1 - 1 instead of one  as indicated 
in formula  1 . however  t h i s presents no d i f f i c u l t y in proceeding to  1  and  1 . 
the function max  see sect. 1  is applied to the a.. . if the maximum is not immediately a t t a i n able then the symbol  max  is employed. s i m i l a r l y for min. see for example    1 '   and   1 '   above. 
1 

where each 	fl 	has 	the form 
 1  
and the i n the x1. 
　　　now we determine that 	f 	is v a l i d by showing that each 	f l 	is f a l s e . 
　　　since the a l k and b l k are usually expressions in the other x i  as was the case in 
our example  	it is not immediately obvious how one can t e s t for the i n v a l i d i t y of  1 . 	our method 	 the   s u p - i n f   method  	for doing this is simply to t e s t whether the i n t e r v a l 

contains no integer  for some k  k = l   1   . . .   n   where 	sup. 	xk 	and 	i n f s 	xk 	are defined as 
f o l l o w s : 
d e f i n i t i o n s . 
	if 	s 	is a set of i n e q u a l i t i e s of the form 
 1  and x 1 '  x 1 ' ...... x' are r e a l numbers  then  x 1 '  x b '   . . .   x '   is said to s a t i s f y s if each i n e q u a l i t y in s becomes true when each symbol xk is replaced by the number xk'. 
　　　if 	a 	is a q u a s i - l i n e a r expression in x 1   x 1   . . .   x n . 	and 	x 1 ' 	x' 1 	  . . .   x ' 	are r e a l numbers then 

denotes the number gotten from a by replacing each symbol xk by the number xk' 
　　　if 	a 	is a q u a s i - l i n e a r expression in x 1   	x 1   . . .   x 	  	then 	sups 	a 	is defined to be the least upper bound of a l l numbers 

where 	 x' 1   	x 1 '   . . .   x n '   	is a sequence of non-
negative integers s a t i s f y i n g 	s. 	s i m i l a r l y   
i n f s a 	is the greatest lower bound of such s 
numbers. when no confusion w i l l arise we omit the subscript s and w r i t e sup a and i n f a. 
　　　thus the v a l i d i t y of f haa been reduced to determining sup. x. and i n f . xk   where s 
is the set of conjuncts of   1   . we compute sups xk and i n f s xk by the algorithms sup 
and 	inf 	given in section 1. 
       in section 1 of  we prove that if s is any set of i n e q u a l i t i e s of the form  1  where we assume only that the a l i   b l f are q u a s i - l i n e a r in x 1   . . .   x   then the outputs sup  x k   nil  and inf  x k  nil  are numbers w i t h the property 

furthermore  we conjecture there that if the set s is in   n a t u r a l form   in that it has been derived from a theorem f by the procedure described above  then equality hold in the above formula  i . e .   

some discussion of the procedure. 
　　　this procedure for deciding the v a l i d i t y of a q u a s i - l i n e a r formula  and hence for a u n i v e r s a l l y q u a n t i f i e d presburger formula  is c a l l e d the sup-inf method. of course it serves much the same purpose as the methods of cooper in  and others. however  we feel that the sup-inf method has some advantages  especially for proving theorems a r i s i n g from program v a l i d a t i o n . 
　　　one such advantage is that a hypothesis  such as 

from our e a r l i e r example  1   can be stored in the concise form 

to be used to establish various conclusions as required. thus if we desire to e s t a b l i s h  1x 1   1  we need only update  1  w i t h i t s negation  1   1x 1 -1  to get   1 '   and then show 
	that   1 '   is 	i n v a l i d . 	also  using t h i s same 
hypothesis  1  we might   l a t e r   be required to prove another conclusion  which i t s e l f has a hypothesis  such as 

	which is used to prove 	x 1 	  1. 
　　　also as mentioned e a r l i e r it avoids proof by searches through long l i s t s of integers. 
　　　while these arguments have m e r i t   they are not our main reason for prefering the s u p - i n f 
1this conjecture has recently been proved correct  
by shotak   1   . 
1 

method  which is our desire to e f f i c i e n t l y handle certain  proof by cases.  this is explained in  1  pp. 1   and in  1 . 
	1. 	algorithms 
　　　here we describe the pivotol algorithms sup and inf. 
　　　if a and b are quasi-linear expressions in l  see definition in section 1   then so also are  a+b   max a b   min a b   and r * a  where r is a rational number. we can also divide a quasi-linear expression a by a nonzero rational number r by multiplying by its inverse  i.e.  
　　　let s be a set of inequalities of the form 	are quasilinear 	recall the 
given in 
section 1. we now give algorithms for computing sups xi and inf s xi for a given s. s w i l l be assumed to be fixed throughout the remainder of this section. 

　　　simp is an algorithm that puts expressions in canonical form. see  1 . a l l outputs from the algorithms sup  supp  inf  inff  are auto-
matically simplified by applying the algorithms simp to them. 
sup and inf. 
　　　sup and inf are each called with two arguments  j and l. j is an expression and l is a l i s t . sup inf  attempts to find the largest  smallest  value that j can have consistent with the inequalities in s.  see d e f i nitions of sups xk and infs xk in section 1 . 
l is a set of variables. the f i r s t call to sup  or to inf  is usually given with nil for l; variables are then sometimes added to l by recursive calls to sup and inf. see tables i   i i . 
supp and inff. 
　　　supp and inff are called with arguments x and y. x is a variable and y is an expression. supp is called by sup when j is a variable and j 1 l. similarly inff is called by inf. supp is designed to handle the case when sup j l  returns an answer which contains j i t s e l f . 
see tables i i i   iv. 
　　　the action of sup can be viewed as putting together a string of inequalities. for example  
if s consists of the inequalities then sup j nil  w i l l determine 
and return 1 as the correct value. consists of 
	then 	gets and 
it must solve this inequality to determine: 	and again return the correct value 	1. 	this type of  solving  is done by the algorithm 	supp. 	that is  	supp  and analogously inff  handles the cases when 	sup j l  	might return an expression containing 	j 	i t s e l f . 
for instance  in the above example  where 
s consists of since j 
gorithm sup  step 1  finds the member  of s with j as its middle term  
and then puts z: =  sup k { j }   . since sup k  j}   eventually  returns the value  1-j   a call is made to supp j   1-j   which returns the correct value 1. in evaluating supp  j   1-j    supp expresses  1-j  in the form b j +c  with b = - 1   c = 1  and returns the 

1 


1 

　　　it is clear that the methods of integer programming  can be used to prove theorems of the type we consider here  and similarly our procedure can be thought of as another method 
for solving integer programming problems. 
