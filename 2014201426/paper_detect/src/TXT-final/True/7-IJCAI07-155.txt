
eliminating previously recommended products in critiquing limits the choices available to users when they attempt to navigate back to products they critiqued earlier in the dialogue  e.g.  in search of cheaper alternatives . in the worst case  a user may find that the only product she is prepared to accept  e.g.  having ruled out cheaper alternatives  has been eliminated. however  an equally serious problem if previous recommendations are not eliminated is that products that satisfy the user's requirements  if any  may be unreachable by any sequence of critiques. we present a new version of progressive critiquing that leaves open the option of repeating a previous recommendation while also addressing the unreachability problem. our empirical results show that the approach is most effective when users refrain from over-critiquing attributes whose current values are acceptable.
1 introduction
critiquing in recommender systems is based on the idea that it is easier for users to critique an example product than to construct formal queries  e.g.  burke et al.  1; hammond et al.  1; linden et al.  1 . an early example is entr└e  a restaurant recommender that supports both directional critiques  e.g.  like this but cheaper  and replacement critiques  e.g.  like this with french food   burke et al.  1 . in approaches that combine critiquing with casebased reasoning  cbr   an initially recommended product may be retrieved on the basis of its similarity to an initial user query  burke  1 . the product recommended in response to a critique is typically one that satisfies the critique and is maximally similar to the critiqued product.
　concern that basic critiquing algorithms often lead to protracted recommendation dialogues has prompted significant research interest in increasing the efficiency of critiquing  e.g.  mccarthy et al.  1; mcsherry and aha  1; reilly et al.  1 . however  approaches in which previously recommended products are eliminated implicitly assume that critiquing a recommended product amounts to rejection of the product by the user. we argue that this is not a realistic assumption and show that preventing users from navigating back to products they critiqued earlier in the dialogue may result in recommendation failure.
　as we show in section 1  an equally serious problem if previously recommended products are not eliminated is that products that satisfy the user's requirements  if any  may be unreachable by any sequence of critiques. the effectiveness of existing critiquing algorithms may thus be open to question whether or not previously recommended products are eliminated. to address this issue  we present a new version of progressive critiquing  mcsherry and aha  1  that leaves open the option of repeating a previous recommendation while also addressing the unreachability problem.
　in section 1  we use examples to illustrate the problems of diminishing choices and unreachability in critiquing on which we focus in this paper. in section 1  we describe how these problems are addressed in progressive critiquing. in section 1  we evaluate our approach on a well known case base and investigate the effects of user critiquing choices on dialogue outcomes and efficiency. our conclusions are presented in section 1.
1 problems in critiquing
the challenge of critiquing is to recommend an acceptable product based on information about the user's requirements that is both incomplete and imprecise. in a recommender system for personal computers  for example  a critique such as like this with a bigger screen does not determine precisely the preferred screen size or the minimum size that the user might be prepared to accept. another problem is that improvements in one attribute can often be gained only at the expense of another  burke  1 . a related issue is the trade-off between preserving similarity to a critiqued product and recommending one that is sufficiently different in a single dimension to satisfy the user's requirements  bridge and ferguson  1; burke  1; salam┏ et al.  1 . avoiding long and fruitless dialogues when none of the available products are acceptable to the user is another important issue in critiquing  mcsherry and aha  1 .
　in any recommender system  the user's requirements may include constraints that must be satisfied and others that the user is prepared to relax if necessary. below we describe how the user's critiques and constraints are modeled in our formal analysis of critiquing.
definition 1. we denote by matches q  the possibly empty set of cases that satisfy a given set of constraints q.
it can be seen that:
matches q  = ” matches q  q（q
where for each q （ q  matches q  is the set of cases that satisfy q.
　in a critiquing system  the user is not required to express her requirements in a formal query. instead  by critiquing the system's recommendations  the user provides feedback that the system uses to guide the search for an acceptable product.
definition 1. we denote by matches r  c  the set of cases that satisfy a critique r when applied to a given case c.
definition 1. we denote by critiques c  the set of available critiques that are applicable to a given case c.
　a critique cannot be applied to a case that already satisfies the critique. that is  c   matches r  c  for any case c and r （ critiques c . if previously recommended cases are eliminated  a critiquing failure occurs if matches r  c  - e =    where e is the set of eliminated cases. if previously recommended cases are not eliminated  a critiquing failure can occur only if matches r  c  =  . for example  a sequence of repeated like this but cheaper critiques  if allowed by the system  must eventually result in a critiquing failure.
　the expressiveness of a query language is an important issue in the retrieval of recommended products based on user queries  bridge and ferguson  1 . an equally important issue in critiquing is whether the user's constraints are expressible using the available critiques.
definition 1. we say that a constraint q is expressible using the available critiques if for any case c   matches q  there exists r （ critiques c  such that matches q    matches r  c .
　for example  between 1 and 1 bedrooms is an expressible constraint in a property recommender that supports more and less critiques on bedrooms. an upper price limit  e.g.  price ＋ ♀1  is expressible in a holiday recommender with a like this but cheaper critique  while an equality constraint such as month = may is expressible using a replacement critique on month.
1 the diminishing choices problem
it does not seem realistic to assume  as in critiquing algorithms that never repeat a previous recommendation  that critiquing a recommended product amounts to rejection of the product by the user. shoppers often consider alternatives to a recommended product before deciding that it is the best available option. it is equally natural for a recommender system user to critique an acceptable product  e.g.  in search of cheaper alternatives . but on attempting to retrace her steps  e.g.  because cheaper alternatives do not meet her requirements   such a user may find her choices very limited if previously recommended products have been eliminated.
　in the worst case  the user may discover that the only product she is prepared to accept has been eliminated. table 1 shows an example case base in the residential property domain that we use to illustrate this problem of diminishing choices in critiquing. the case attributes are location  a or b   bedrooms  1 or 1   and property type  detached or semi-detached . the attributes are equally weighted and the similarity between two cases is the number of matching features.
 loc beds type table 1. example case base in the property domain.
　for a critiquing algorithm in which previously recommended cases are eliminated  figure 1 shows an example critiquing dialogue in which the user is looking for a 1 bedroom detached property in location a but is prepared to compromise on bedrooms. her initial query is loc = a  and the initially recommended case is case 1. the user can see from the response to her first critique that no case satisfies all her requirements  a 1 det . but when she tries to navigate back to case 1 by critiquing case 1 on location  the case now recommended is case 1  even though it is less similar to case 1 than case 1. in this situation  it is difficult to see how the elimination of case 1  i.e.  the only acceptable case  can be justified.

figure 1. example critiquing dialogue in which the user is unable to navigate back to the only acceptable case.
　thus eliminating previously recommended products is bound to result in recommendation failure if the user critiques the only acceptable product  or products . even in a product case base of realistic size  it is not unusual for only a small number of acceptable products to be available if the user has several requirements that must be satisfied  mcsherry  1 . the diminishing choices problem is thus a potentially serious drawback of critiquing approaches in which previous recommendations are eliminated.
　however  theorem 1 shows that when previously recommended cases are eliminated  a case that satisfies a given set of expressible constraints can always be reached  without critiquing failures  if such a case exists. in practice  whether such a case is reached without critiquing failures may of course depend on the user's critiquing choices. it is also possible in practice for a case that satisfies all the user's constraints to be reached without any critiques  i.e.  the initially recommended case may satisfy all her constraints .
theorem 1. eliminating previously recommended cases in critiquing ensures that a case that satisfies a given set q of expressible constraints can always be reached without critiquing failures if such a case exists.
proof. let c* （ matches q  be any case that satisfies all the constraints in q. if c1   matches q   where c1 is the initially recommended case  then there exists q1 （ q such that c1   matches q1 . as all the constraints in q are expressible using the available critiques  there exists r1 （ critiques c1  such that matches q1    matches r1  c1 . as c1   matches q   c* （ matches q  = matches q  - {c1}   matches q1  - {c1}   matches r1  c1  - {c1}.
　if c1   matches q   where c1 is the case recommended in response to r1  then there exists q1 （ q such that c1   matches q1  and r1 （ critiques c1  such that matches q1    matches r1  c1 . as c1  c1   matches q   c* （ matches q  = matches q  - {c1  c1}   matches q1  - {c1  c1}   matches r1  c1  - {c1  c1}. it follows that matches r1  c1  {c1  c1} 』    and so r1 is bound to succeed despite the elimination of c1 and c1.
　if c1   matches q   where c1 is the case recommended in response to r1  we can continue as long as necessary to construct a sequence of recommended cases c1  c1  ...  ck and successful critiques r1  r1  ...  rk such that c1  c1  ...  ck   matches q . as previously recommended cases are eliminated  c1  c1  ...  ck  ck+1 are distinct cases  where ck+1 is the case recommended in response to rk. as the supply of distinct cases c   matches q  must eventually be exhausted  it must eventually be true that ck+1 （ matches q .
＊
1 the unreachability problem
table 1 shows a second example case base in the property domain that we use to illustrate the unreachability problem in critiquing. in the example dialogue that we now present  the initially recommended case is case 1  a 1 sem 1  and the user is looking for a 1 bedroom detached property in location a with 1 reception rooms  a 1 det 1 . if all the user's requirements must be satisfied  then case 1 is the only acceptable case. attributes in the case base are equally weighted and the similarity between two cases is the number of matching features. we assume a basic critiquing algorithm in which:
  the available critiques are more and less critiques for beds and reception rooms  rrs  and replacement critiques for loc and type
  each critique is applied only to a single attribute
  the single case recommended in response to a successful critique is one that is maximally similar among those that satisfy the critique  i.e.  no account is taken of any previous critiques or initial query    previously recommended cases are not eliminated
　for such a critiquing algorithm  figure 1 shows the cases recommended in a sequence of four critiques. after three critiques  the user has made no progress towards her goal  and her fourth critique brings her back to where she started. the user can do no better by critiquing case 1 on beds or rrs or by choosing different critiques on cases 1. she cannot reach case 1 even by resorting to critiques that are inconsistent with her requirements  as none of the negative critiques she might choose  e.g.  less beds than case 1  are satisfied by case 1.
loc beds type rrs table 1. example case base in which an acceptable case may be unreachable from any other case.
　to confirm that case 1 is unreachable with any of cases 1 as the initially recommended case  it suffices to observe that case 1 cannot be reached in a single step from any of the other cases. so the best the system can do with any of cases 1 as the initially recommended case is to recommend a case that satisfies only one of the user's requirements.

figure 1. example critiquing dialogue in which the only acceptable case cannot be reached.
　at the expense of susceptibility to the diminishing choices problem  section 1   eliminating previously recommended products in the example dialogue would result in case 1 being recommended in response to the user's fourth critique. another problem highlighted by our example is that recommended cases in a critiquing dialogue may involve unnecessary compromises with respect to previous critiques that may frustrate or even mislead the user  and delay progress towards her goal. given the response to her second critique  for example  the user may begin to doubt the availability of a detached property with 1 bedrooms.
1 progressive critiquing
progressive critiquing differs from other critiquing algorithms in that a recommended product must  if possible  satisfy all previous critiques as well as the current critique  mcsherry and aha  1 . this strategy plays an important role in the algorithm's ability to address the unreachability problem when  as in the version we now present  previously recommended products are not eliminated.
1 taking account of previous critiques
while improvements in one attribute can often be gained only at the expense of another  burke  1   we have seen in section 1 that recommended cases may involve unnecessary compromises with respect to previous critiques. in progressive critiquing  the case recommended in response to the user's current critique is required  if possible  to satisfy all previous critiques as well as the current critique. that is  if r1  ...  rk is a sequence of critiques applied to recommended cases c1  ...  ck then the case ck+1 recommended in response to rk is one that is maximally similar among the available cases c  if any  such that:
c （ ” matches ri ci  .
1＋ i ＋ k
　the non-existence of a case that satisfies all the user's critiques is recognized as a progression failure. in the event of such a failure  the recommended case is one that is maximally similar among those that satisfy the user's current critique. such a case must exist as the user may select a critique in progressive critiquing only if it is satisfied by at least one case.
　as previous recommendations are not eliminated in progressive critiquing  the case recommended in this situation may be one that was previously critiqued by the user. as we show in theorem 1  however  a previous recommendation can be repeated in progressive critiquing only when there is no case that satisfies all the user's critiques.
theorem 1. a previous recommendation can be repeated in progressive critiquing only when a progression failure has occurred.
proof. let c1 be the initially recommended case and let r1  ...  rk be any sequence of critiques that has not resulted in a progression failure. for 1 ＋ i ＋ k  let ci+1 be the case recommended in response to ri. as a progression failure has not occurred 
ck+1 （ ” matches ri ci  . 1＋ i ＋ k
as ci   matches ri  ci  for 1 ＋ i ＋ k  it follows that ck+1   {c1  ...  ck}. ＊
　by allowing previous recommendations to be repeated in the event of a progression failure  progressive critiquing avoids the diminishing choices problem  section 1 . moreover  as we now show  the reachability of cases that satisfy a given set of expressible constraints  if any  does not depend on the elimination of previously recommended cases in progressive critiquing.
theorem 1. a case that satisfies a given set q of expressible constraints can always be reached in progressive critiquing without critiquing or progression failures if such a case exists.
proof. if c1   matches q   where c1 is the initially recommended case  then there exists q1 （ q such that c1   matches q1 . as all the constraints in q are expressible using the available critiques  there exists r1 （ critiques c1  such that matches q1    matches r1  c1 . if c1   matches q   where c1 is the case recommended in response to r1  then there exists q1 （ q such that c1   matches q1  and r1 （ critiques c1  such that matches q1    matches r1  c1 . in progressive critiquing  the case c1 recommended in response to r1 must also satisfy r1 if such a case exists. but matches q    matches q1  ” matches q1    matches r1  c1  ” matches r1  c1   so the existence of at least one case that satisfies all the constraints in q ensures the existence of a case that satisfies both critiques. as a progression failure has not occurred  c1  c1  and c1 must be distinct cases by theorem 1.
　if c1   matches q   we can continue as long as necessary to construct a sequence of recommended cases c1  c1  ...  ck and successful critiques r1  r1  ...  rk such that c1  c1  ...  ck   matches q  and:
ck+1 （ ” matches ri ci 
                       1＋ i ＋ k where ck+1 is the case recommended in response to rk. again by theorem 1  c1  c1  ...  ck+1 must be distinct cases. as the supply of distinct cases c   matches q  must eventually be exhausted 	it	must	eventually	be	true	that	ck+1 （ matches q . ＊
1 recovery from progression failures
a mechanism for recovery from progression failures is needed to ensure that progress can again be made if the user is prepared to compromise. our solution is to maintain a list of active critiques that a recommended case must  if possible  satisfy as well as the user's current critique. if no such case exists  a maximally similar case among those that satisfy the current critique is recommended  and any active critiques that are not satisfied by this case are deleted from the list of active critiques.
　figure 1 shows an example critiquing dialogue in the personal computer  pc  domain that we use to illustrate our approach. values of the critiqued attributes pc type  screen size  in inches   and price  in uk pounds  are shown for each recommended case. a progression failure has occurred as the case recommended in response to the user's third critique satisfies only two of her three critiques.

figure 1. example dialogue in progressive critiquing.
　if the user now critiques case 1  her critiques on case 1 and case 1  but not on case 1  remain in force. for example  a pc recommended in response to a faster critique on case 1 must also be a laptop with screen   1 if such a case exists. if not prepared to compromise on price  the user may instead choose to navigate back in the direction of less expensive options by critiquing case 1 on price. such a critique may bring her directly back to case 1 or case 1  but only if there is no laptop cheaper than case 1 with screen   1.
1 related work
taking account of previous critiques is a feature that progressive critiquing shares with incremental critiquing  reilly et al.  1 . in the latter approach  a case's similarity to the critiqued case is combined with the number of previous critiques it satisfies in a single compatibility measure. however  a highly similar case may dominate other cases that satisfy more critiques  with the result that the case recommended in response to a critique may not satisfy all the user's critiques even if such a case exists. also in contrast to progressive critiquing  previously recommended cases are eliminated in incremental critiquing. this feature also distinguishes incremental critiquing from the approaches used in findme systems like entr└e and car navigator  burke et al.  1; hammond et al.  1 .
　assessment of similarity with respect to less-is-better  lib  attributes and more-is-better  mib  attributes in progressive critiquing is based on assumed preferences with respect to such attributes  mcsherry and aha  1 . that is  the preferred value of a lib attribute  e.g.  price  is assumed to be the lowest value in the product case base  while the preferred value of a mib attribute is assumed to be the highest available value. one advantage is that no updating of user preferences is needed in response to critiques on mib or lib attributes. instead  only the user's constraints are updated  thus avoiding problems such as how to adjust a preferred price in response to a like this but cheaper critique  bridge and ferguson  1 .
1 empirical results
our evaluation focuses on the effects of user critiquing behavior on dialogue outcomes and efficiency when previously recommended cases are not eliminated in progressive critiquing. we expect the best results to be achieved when the user refrains from over-critiquing attributes whose current values are acceptable. for example  a like this but cheaper critique on a product whose price is acceptable may cause an unnecessary progression failure that hinders progress towards the user's goal. over-critiquing may also result in a critiquing loop in which the user keeps coming back to an unacceptable case she has already critiqued. this is an important issue  as a critiquing loop may result in recommendation failure if the user decides to terminate the dialogue.
　performance measures of interest in our evaluation are the average length of critiquing dialogues and the percentage of dialogues in which a target case is reached. our experiments are based on a leave-one-in approach in which each case in the pc case base  mcginty and smyth  1  is used to represent the user's requirements in a simulated critiquing dialogue. the value of a lib attribute in a left-in case is treated as an upper limit  e.g.  price ＋ 1   and the value of a mib attribute as a lower limit  e.g.  speed − 1 . the values of other attributes  e.g.  make  type  screen size  are treated as equality constraints. the left-in case also serves as a target case in the critiquing dialogue. if other cases also satisfy all the user's constraints  as in 1% of dialogues  there may be more than one target case.
　the case that is least similar to the left-in case is presented as the initially recommended case in a simulated critiquing dialogue that continues until a target case has been reached or the user has tried all possible critiques on a recommended case without reaching a target case. the available critiques are less critiques on lib attributes  more critiques on mib attributes  more and less critiques on screen size and replacement critiques on nominal attributes.
we experiment with simulated users in two categories:
class 1: choose only critiques on attributes that fail to satisfy their constraints
class 1: choose only critiques on attributes that fail to satisfy their constraints or lib/mib attributes that already satisfy their constraints
　table 1 shows the percentages of critiquing dialogues that were successful  i.e.  a target case was reached  in classes 1 and 1. the fact that all class 1 dialogues were successful provides empirical confirmation that a case that satisfies a given set of expressible constraints can always be reached in progressive critiquing if one exists  theorem 1 . in class 1  however  over-critiquing resulted in 1% of dialogues being terminated by the simulated user without reaching a target case.
　for all class 1 dialogues and successful  +ve  class 1 dialogues  figure 1 shows the minimum  average  and maximum numbers of critiques required to reach a target case. lengths of unsuccessful  -ve  dialogues in class 1 are also shown. a striking feature of the results for class 1 is that only 1 critiques are required on average to reach a target case that satisfies all the user's constraints.
successful unsuccessful class 1 class 1 table 1. outcomes of progressive critiquing dialogues.
　in successful class 1 dialogues  over-critiquing had a major impact in terms of the average number of critiques  1  required to reach a target case. a greater cause for concern  however  is the average length of more than 1 critiques for unsuccessful dialogues in class 1. these findings support our hypothesis that progressive critiquing is most effective when users refrain from over-critiquing attributes  e.g.  price  whose current values are acceptable.

figure 1. lengths of progressive critiquing dialogues.
1 conclusions
the diminishing choices problem is a potentially serious drawback of critiquing approaches in which previously recommended products are eliminated. on the other hand  this policy avoids another serious problem which we refer to as the unreachability problem. our solution to this apparent dilemma is a new version of progressive critiquing  mcsherry and aha  1  that leaves open the option of repeating a previous recommendation while also ensuring that a product which satisfies a given set of expressible constraints can always be reached if any such products exist.
　as shown by our empirical results  the approach is most effective when the user refrains from over-critiquing  with only four critiques required on average to reach a target case in the pc case base without the benefit of an initial query. the problems caused by over-critiquing could perhaps be avoided by offering users guidelines for more effective critiquing. other possible solutions to be investigated in future work include eliminating any product that the user critiques for a second time.
