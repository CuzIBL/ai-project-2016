 
in this paper  we describe a programming language based on constraints. unlike former approaches  its interpreter propagates sets of possible values  rather than single values  through a network of constraints. during the propagation process  the value sets are filtered to obtain consistent subsets  or new values are computed for the undetermined variables from the set of given variables. 
　　constraint relations can be described in several ways. finite relations can be represented straightforwardly by enumerating their extensions. infinite relations can be described intensionally by patterns. more complex relations can be represented by constraint networks and hierarchies of constraint networks. several control strategics are provided which compute local consistency as well as globally consistent solutions. 
　　it is sketched how to realize a compiler for the language  which optimizes constraint descriptions at definition time. as a result  combinatorical explosion can be reduced  depending on the number of variables used in a constraint description. 
1
cons-train-t 
1 the author previously worked at the gesellschaft fuer 
mathematik und datenverarbeitung  schloss birlinghoven  1 sankt augustin  west germany. there  his work was supported in part by the german federal ministry for research and technology within the joint project tex-b  contract number itw-1-d. 
1 	tools 
1 introduction 
the problem: on the one hand  there are-let us call them- systems of class alpha and on the other  there are systems of class beta  but what we really need is a kind of alphabeta system. what we mean by class alpha and class beta can be characterized by two historical representatives. 
　　an alpha system: in 1  g.l. steele published the description of a computer programming language based on constraints  steele 1j. it is-as far as we know-the first approach to a constrained-based programming language which is independent of a special application. the interpreter of the language is based on a computational model that is comparable to data driven machines: undetermined variables are computed from a set of given variables. 
　　a beta system: d.l. waltz  suggested a filtering technique that enables us to solve certain constraint problems more efficiently. the idea is to avoid combinatorial explosion by propagating value sets without computing the cartesian product between these sets. 
　　our goal is a kind of alphabeta system  i.e. to combine the aspects of a domain-independent constraint language with an efficient problem solving strategy. the result is the constraint satisfaction system consat which is introduced in this paper: 
consat can be applied to arbitrary domains  i.e. the constraint variables may be associated with any kind of values. 
  single values or sets of possible values can be propagated through a constraint network. thus  consat can be used to compute values for the undetermined variables from the set of given variables  to test consistency of values  or to filter 

the sets of possible values  i.e. to remove inconsistent values from these sets. 
several ways to represent relations are provided. finite relations can be represented straightforwardly by enumerating the extension of the relation. infinite relations can be described intensionally by patterns. more complex relations can be represented by constraint networks and hierarchies of constraint networks. 
besides a standard control strategy based on local propagation  which computes local consistency  two further strategies are provided for obtaining global consistency: one of them is a combination of local propagation and backtracking  the other uses  recursive  indices in order to maintain relationships between values. 
　　consat has been implemented in common lisp and has been integrated into the hybrid knowledge representation system babylon  guesgen et al. 1 . 
1 underlying concepts 
first  we will give an informal definition of constraints  cf. 
 montanari 1  : a constraint consists of a set of variables and a relation on these variables. 
　　in order to maintain transparency  a constraint should describe only partial aspects of the task to be programmed. the whole task can then be described by a network of constraints: a constraint network consists of a set of constraints with shared variables. 
　　a technique often used to satisfy networks of constraints is local propagation: the results computed by a constraint  i.e. the restrictions to the coverings of its variables  are forwarded to its neighboring constraints in the network. the result of local propagation is local consistency  i.e. sets of possible values for the variables. local consistency  or arc consistency as defined in  mackworth 1  for binary constraints  means: if you pick up a constraint from the network and the covering of one of its variables  you can find values in the other variable coverings  such that the tuple of these values satisfies the constraint. 
　　a globally consistent solution is a value assignment to the variables that satisfies all constraints in the network. if all variables in a constraint network are uniquely determined  cf.  steele 1    or if there are no cycles in the network  cf.  freuder 1    the locally consistent variable covering is identical with the globally consistent solution of the constraint network. thus  computing local consistency is sufficient in many applications of constraints. nevertheless  some mechanisms for obtaining global consistency are necessary in some cases such as in the example of this paper. 
1 describing constraints 
in consat  a constraint relation is represented by a finite set of tuples and/or patterns. for short  we will refer to such a tuple or pattern as a constraint element. a tuple represents exactly one possible value combination for the constraint variables  whereas a pattern in general represents a class of value combinations  using functional expressions with references to constraint variables. 

　　in the following  the syntax and semantics of constraint elements will be explained by an example from the game world: a puzzle consisting of nine triangles. figure 1 shows a sketch of the solved puzzle. every triangle of the puzzle is labeled with a part of a figure. altogether  there are three different types of figures which are represented in figure 1 by a single  double and triple arrow  respectively. 
　　since there are nine fields where a triangle may be put  and since every triangle has three possible orientations with respect to the field  solving the puzzle means to struggle with 1!-1 possible combinations. only a few solutions exist for the puzzle. the condition for a solution is obvious: the parts of two arrows at adjacent edges must fit  i.e. they both must be parts either of a single  double  or triple arrow. 
1 extensional constraints 
the edge labeling of a triangle can be represented in 
consat by a pair consisting of a key s d or t for a single  double and triple arrow  respectively  and a reference which determines the part of the arrow  either head or tail . thus  the possible labelings are: 
 shead   stail  
 d head   d tail  
 t head   t tail  
　　a triangle with its edge labelings as well as its orientation is described as follows. looking at a triangle with one of its vertices upwards  we describe the triangle by a tuple  the first element representing the labeling of the left edge  the second one the labeling at the bottom  and the third element the right edge labeling  see figure 1 . 
	guesgen 	1 


　　if we look at a triangle with a vertex downwards  the left edge labeling is represented by the third element of the tuple and the right one by the first element. the second element corresponds to the upper edge labeling  see again figure 1 . 
　　with these conventions we can uniquely describe a triangle and the aspects of its orientation relevant for the puzzle. for example  the tuple 
  d head   d tail   s tail   
represents a triangle with the head and the tail of a double arrow and the tail of a single arrow as labeling. the orientation in the puzzle may be either with a vertex upwards and the head of the double arrow at the left edge  the tail of the double arrow at the bottom  and the tail of a 
single arrow at the right  or with a vertex downwards and the single arrow at the left  the tail of the double arrow at the top  and the head of the double arrow at the right. 
　　in order to express the fact that a variable is restricted to one of the above described tuples  the following  extensional constraint can be defined in consat. it describes the admissible tuples by enumerating them: 
 defconstraint 
 :name triangle  
 :type primitive  
 : interface triangle  
 :relation 
 :tuple    d head   d tail   s tail     
 :tuple    s tail   d head   d tail      :tuple    d tail   s tail   d head     
 :tuple    d head   s head   s tail      :tuple    s tail   d head   s head      :tuple    s head   s tail   d head     
... further triangles ...   
 we abbreviate most of the constraint definitions for better transparency.  
1 intensional constraints 
the representation of relations by tuples  where each tuple specifies an admissible value combination  is impossible if 
1 	tools 
the relation is infinite  and inadequate for extensive relations . thus  another way of defining constraints must be provided  which-in our opinion-should be compatible to that described in the previous section. in consat  patterns can be used as constraint elements to define constraints intensionally. a pattern consists of expressions with references to the constraint variables. 
　　for example  we can define intensional constraints with two variables  each variable representing a triangle  which are satisfied if the triangles may be placed side by side in the puzzle  i.e. if the labelings of the adjacent edges are complementary. in the puzzle  a triangle with vertex upwards can only be placed beside a triangle with vertex downwards  and vice versa. thus  we need three constraints  declaring that a triangle is connected to another triangle at the left  bottom or right edge  respectively  where left  bottom and right refers to the triangle with vertex upwards  this convention is arbitrary . for example  the constraint defined by 
 defconstraint 
 :name connected-left  
 :type primitive  
 :interface triangle-1 triangle-1  
 :relation 
 :pattern  triangle-1 triangle-1  
:if  complement-p 
 first triangle-1  
 first triangle-1     
 :condition 
 constrained-p 
triangle-1 triangle-1    
is satisfied  if the left edge labeling of the triangle with vertex upwards matches the right edge labeling of the triangle with vertex downwards. 
　　the notation of intensional constraints is analogous to the representation by tuples: the ith expression of a pattern describes the value of the ith constraint variable  which is trivial in the case of the connected-left constraint since they are equal. in general  it is possible to specify arbitrary lisp forms in a pattern  instead of just referring to variables . in the example  the power of the pattern is grounded in its additional condition  the expression following :if  which determines whether the pattern may be applied or not. 
　　in order to avoid errors during the pattern matching process  the evaluation of a constraint can be suppressed depending on the actual values of the variables. for example  the connected-left constraint must not be evaluated if triangle-1 or triangle-1 is equal to the keyword unconstrained  which represents the 
 possibly infinite  set of all domain values. this restriction can be declared by a global condition associated with the constraint  for instance: 
 :condition  constrained-p triangle-1 triangle-1  . 
1 evaluating constraints 
when a constraint is activated by the propagation control unit  by another subsystem  or by the user  via a satisfy expression   some of its variables may already be associated with sets of possible values. the system first computes all combinations from these lists  setting the unconstrained variables to unconstrained. 
　　let the variables of the connected-left constraint be associated with the following variable coverings: 
triangle-1: 	   d tail   s tail   d head    
triangle-1: 	   d head   s head   s tail   
  s tail   d head   s head    
then two combinations are computed: 
   d tail   s tail   d head     d head   s head   s tail    
   d tail   s tail   d head     s tail   d head   s head    
　　each combination of values is matched with the constraint elements in the following way. if the constraint element under consideration is a tuple  its values are compared with the corresponding values in the given combination. if it is a pattern  its condition  if provided  is evaluated first. if the condition evaluates to t or if no condition is provided  then the rest of the pattern is evaluated as follows: all atoms and expressions in the pattern are evaluated and the computed values are compared with the corresponding values in the given value combination. 
　　in both cases  the matching process succeeds if for every value in the given combination the following holds: 
	  	it is equal to unconstrained  or 
it is equal to the corresponding value of the constraint element. 
　　whenever the matching process succeeds  the computed values are added to the resulting variable coverings. they are returned after all value combinations have been matched with all constraint elements  for example: 
 satisfy connected-left :with 
triangle-1 =   d tail   s tail   d head   
triangle-1 =  :one-of 
  d head   s head   s tail   
  s tail   d head   s head    
  
  triangle-1   d tail   s tail   d head    
 triangle-1   d head   s head   s tail     formally  the result of evaluating a constraint c can be denoted as follows. let v1 ... vn be the input variable coverings for c and r be the set of constraint elements  tuples or patterns  of c then  the evaluation of c results in 

where 
pr1.... n is used as a short form for the tuple of projection functions  pr1 ... prn   for example pr1  a b    c  d } =   a c   {b d}  and 
rinst is the instantiated relation of c which is obtained from r by evaluating the patterns with the variables successively bound to elements from 

1 compiling constraints 
first  we will revisit the above evaluation algorithm  transforming the term which describes the result computed by the algorithm. 

this means that a constraint can be evaluated more efficiently as it is sketched in the previous section. 
　　such an improvement presupposes that the constraint relation is already instantiated. in general  this is not the case  since patterns may occur as constraint elements. if all constraint variables are used within at least one of these 
	guesgen 	1 

patterns  one has to compute the cartesian product between the variables to obtain an instantiated relation  i.e. the improvements concerning evaluation are lost. 
　　our idea to resolve this dilemma can be summarized as follows: instead of answering the question  how can we implement a program that evaluates an arbitrary consat constraint    we are guided by the question  how can we implement a program whose input is a constraint and which produces a program that evaluates this particular constraint optimally  . 
　　in particular  a constraint is analyzed when it is defined to determine whether or to which extension the cartesian product has to be computed during evaluation. as a result  we obtain a procedure which minimizes the costs for evaluating the constraint. for example  consider a constraint with three variables and constraint elements that use only two of them. then  the costs for the evaluation of the constraint can be reduced up to a factor k  where k is the number of values in the covering of the non-used variable. 
1 constraint networks 
constraint networks consist of a set of primitive constraints or lower level constraint networks which are connected by shared variables. they have the same i/o behavior as primitive constraints  i.e. a constraint network is evaluated with a variable coverings as input  and the result is set of filtered variable coverings. 
　　in particular  a constraint network contains constraints  global variables  variable coverings  mappings between the local constraint variables and the global network variables  and an interface. the interface is a subset of the global variables which may be associated with initial values. 
　　for the definition of constraint networks  the same constructs can be used as for primitive constraints. consider  e.g.  the puzzle with the variables p1  p1 ...  p1  each variable representing a position where a triangle may be placed  then the following definition specifies the constraint network which describes the relationships that must be maintained in order to solve the puzzle: 
 defconstraint 
 :name nine-puzzle  
 :type compound  
 :interface p1 p1 p1 ...  
 :constraint-expressions 
 triangle p1   triangle p1 ... 
 connected-middle p1 p1   connected-right p1 p1 ... 
 different-triangles p1 p1  
 different-triangles p1 p1  ...   
　　the mapping of global network variables to local constraint variables is given implicitly in the above definition. similar to a function call in lisp  the expression 
 connected-middle p1 p1   e.g.  means that p1 and p1 are mapped to the local variables triangle-1 and triangle-1 of the connected-middle constraint  respectively. 
　　since constraint networks work just like primitive constraints  viewing them just from their i/o behavior   hierarchies of constraints and constraint networks can be built straightforwardly by referring to constraint networks rather than to primitive constraints within another constraint network. a consequence of this method is that recursive constraint networks can be defined  e.g. by referring to a network within the network itself. 
1 satisfying constraint networks 
the standard control strategy of consat is based on local propagation: when a constraint network is activated  via the above introduced satisfy  with initial values for some interface variables  the constraints which are imposed on these variables are evaluated. the result of the evaluation is propagated to their neighboring constraints  and so on. the activation process terminates when no further changes of the variables are carried out. since the variables arc filtered by the constraints  the propagation process always stops in the case of non-recursive constraint networks  cf.  guesgen  hertzberg 1  . the values of the interface variables are returned as a result of the local propagation process. 
　　local propagation computes local consistency which is insufficient in some cases  as  e.g.  for the above introduced puzzle . thus  consat provides further control strategies for obtaining global consistency  one of them is a combination of local propagation and backtracking  lpb . if the result of local propagation is not unique  lpb sets a 
　　choice point  i.e. a value is selected from a variable covering  guided by some simple heuristics. then  local propagation is started again  followed by setting another choice point  and so on. if an inconsistency has been detected during local propagation  or if a unique solution has been found but further solutions are requested  the user can limit the number of solutions to be computed   a choice point is backtracked and another choice point is set. the algorithm breaks off when a sufficient number of solutions has been computed or no further choice points can be set. 
   the application of the lpb algorithm to the ninepuzzle constraint network yields the following solution: 
 satisfy nine-puzzle :globally 1  
   p1   t tail   d tail   d head    
 p1   d head   d tail   t tail    
 p1   t tail   d head   t head    
 p1   t head   s head   t tail    
 p1   d head   t tail   t head     p1   s head   d head   t tail    
 p1   s tail   d head   d tail    
 p1   s head   s tail   d head    
 p1   s tail   s head   t tail      
　　a  straightforward  prolog program seems also to be adequate to model the puzzle. however  the search space of 

such a program is orders of magnitude larger than the search 
1 	tools 

space consat actually needs. the reason is that local propagation  applied after setting a choice point  can reduce the depth of the search tree by a factor 1. 
besides lpb  another control strategy is provided by 
consat. this strategy is based on local propagation and uses indices to maintain relationships between values during the propagation process. it is beyond the scope of this paper to describe this method in detail. a more detailed description can be found in  guesgen 1 . 
1 conclusion 
the purpose of this paper was to introduce the constraint system consat  which combines the advantages of a domain-independent programming language a la  steele 1  and the efficient problem solving control strategy from  waltz 1 . 
　　in particular  consat can handle arbitrary domains  i.e. the constraint variables may be associated with any kind of values. sets of possible values rather than single values are propagated through constraint networks. thus  consat can be applied 
to compute values for the undetermined variables from the set of given variables  to test consistency of values  or 
to filter the sets of possible values  i.e. to remove inconsistent values from these sets. 
　　several ways to represent relations are provided. finite relations can be represented by enumerating the extension of the relation. infinite relations can be described intensionally by patterns. more complex relations can be represented by constraint networks and hierarchies of constraint networks. besides local propagation as control strategy  consat provides two mechanisms for obtaining globally consistent solutions. 
   consat is used in several applications  for example  in a system for process diagnosis  voss 1   where constraints arc applied to maintain functional relationships in physical units  and in the musical domain  lischka  guesgen 1   where the harmonization of chorals is supported by constraint propagation. 
　　beyond that  consat was incorporated into the hybrid knowledge representation system babylon in order to use constraints together with rules  frames  and prolog  guesgen el al. 1  which turned out to be most useful. 
acknowledgements 
thanks to the members of the expert system research 
group in gmd who contributed to this paper  especially thanks to ursula bernhard and marc linster who read former versions. ulrich junker modelled the puzzle and helped to implement and to test consat. the partners of the tex-b project discussed many of the ideas introduced in this paper. 
