
in this work we recast some design principles commonly used in software engineering and adapt them to the design and analysis of domain descriptions in reasoning about actions. we show how the informal requirements of cohesion and coupling can be turned into consistency tests of several different arrangements of modules. this gives us new criteria for domain description evaluation and clarifies the link between software and knowledge engineering in what concerns the meta-theory of actions.
1 introduction
among the principles of the object-oriented paradigm are the following:
1. work with modules  or components  functions  etc. .
1. minimize interactions between such modules.
1. organize the modules into well-defined layers to help minimize interactions. the goal is to have components of one layer using only components from immediate neighbors  wherever possible.
1. anticipate what kind of extensions or modifications might be made in the future  and support this at design time so that one can extend the system with minimal disruption later.
　there seems to be an agreement that such principles for object-oriented programming or design are the same as for knowledge representation. to witness  the design of domain descriptions in reasoning about actions has much more in common with software engineering than one might think: in the same way as for software projects  one can talk about consistency  evolution and correctness of domain descriptions.
　all the principles above can be applied to the design of domain descriptions  too. we argue that a good domain description should be one whose consistency check and maintenance complexities are minimized  so that any further modification is localized  with a bounded scope.

　　supported by a fellowship from the government of the federative republic of brazil. grant: capes bex 1-1.　with this in mind  one can see the specification of domain descriptions as a task similar to project development in software engineering: item 1 above is what has been called elaboration tolerance  mccarthy  1 . in this way a representation is elaboration tolerant to the extent that the effort required to add new information  a new action or effect  to the representation is proportional to the complexity of that information  shanahan  1 . items 1  1 and 1 reflect the concept of modularity  which means that different modules have no elements in common. such a notion of modularity is going to lead us along the present work.
　this paper is an elaboration of the results we have presented in  herzig and varzinczak  1 . here we pursue the following plan: in section 1 we recall some important concepts from software engineering; after discussing the ontology of dynamic domains  section 1  we apply the concepts of section 1 to the design of domain descriptions  sections 1 and 1  making a step towards formal criteria for domain description evaluation. in section 1 we present the main results that follow from our approach  and before concluding we address related work found in the literature on this subject.
1 some principles of software engineering
one of the first steps in software development is that of abstraction. abstraction consists mainly in rendering lowerlevel details invisible to upper levels in order to facilitate the understanding and design of complex systems. as an example  a specification of a data or knowledge base query does not need to take into account the algorithmic process that will be carried out in order to answer the query.
　in parallel to abstraction  one of the most important guidelines in project design is that of modularity: dividing the software into modules  based ontheir functionalityor on the similarity of the information they handle. this means that instead of having a  jack of all trades  program  it is preferable to split it up into specialized subprograms. for instance  a program made of a module for querying a database and a module for checking its integrity is more modular than a single module that does these two tasks at the same time.
　among the major benefits of modular systems are reusability  scalability and better management of complexity.
　there is more than one way to split up a program. one of the most used techniques is that of forcing functional independence of its modules. one ensures functional independence in a project by defining modules with only one purpose and  aversion  to excessive interaction with other modules  pressman  1 .
　among the criteria commonly used for evaluating functional independence of modules  and thus how modular a piece of software is  are the informal notions of cohesion and coupling.
　cohesion is how closely related pieces of a single component are to each other. a module is cohesive when at the high level of abstraction it does only a single task. the more a module is focused on a precise goal the more it is cohesive.
　a highly cohesive module will be simpler to understand  having to do only a single task  while a lowly cohesive module  performing so many tasks  will be difficult to understand.
　it is difficult to reuse a task-overloaded module  while a
　highly cohesive module is simpler to reuse and to extend.
　coupling is the interdependencybetween a method and the environment  other methods  objects and classes . low coupling means to keep dependencies  communication  information sharing  between components at a minimum.
　a design that has low coupling is more amenable to change  since it reduces the probability of changes cascading and affecting a larger part of the system.
　unanimously in object-oriented development the best way to design a software is to have low coupling and high cohesion. we sum this up in two informal design principles:
p1. maximal cohesion: every module should be conceived in such a way that it is maximally cohesive.
p1. minimal coupling: all modules should be conceived in such a way that they minimize coupling.
1 natural modules in domain descriptions
like in object-oriented programming  in describing a domain different entities should be separated in different modules. moreover  each module should be conceived in such a way that it has no direct access to the contents of the others. in reasoning about actions  accessing a module means using it to perform reasoning tasks like prediction  postdiction  planning and others. this amounts to using its logical formulas in inferences. in this section we establish the ontology of domain descriptions and present the way we arrange in different modules the axioms commonly used to describe them.
　every domain description contains a representation of action effects. we call effect laws formulas relating an action to its effects. statements of conditions under which an action cannot be executed are called inexecutability laws. executability laws in turn stipulate the context where an action is guaranteed to be executable. finally  state constraints are formulas that do not mention actions and express constraints that must hold in every possible state. these are our four ingredients that we introduce more formally in the sequel.
　if we think of a domain description as a software application  we can imagine its organization in an object-oriented view and attempt to have a kind of class diagram for it. this is illustrated by figure 1  where we can see the relationship among the different types of entities.
　a domain description consists of a description of effects of actions  their non-effects  executabilities  inexecutabilities and also state constraints that do not depend on any particular action.
domain description

effects	non-effects	exec.	inexec.	state constraints
figure 1:  class diagram  of modules in designing domain descriptions. edges represent has-a relations.
　among the effects of actions  we can distinguish direct effects and indirect effects  ramifications .
　non-effects of actions are related with the frame problem  mccarthy and hayes  1   and indirect effects with the ramification problem  finger  1 . in this work we abstract from these problems and assume we have a consequence relation powerful enough to derive the intended conclusions. we suppose given a 'doped' consequence relation   which encapsulates some traditional approach in the literature  e.g.   schubert  1; lin  1; mccain and turner  1    with which all intended frame axioms and indirect effects can be derived  and we use it henceforth. as examples we have
	loaded	loaded do wait
 i.e.  waiting does not change the status of loaded  and walking
walking	alive	walking do shoot alive do shoot
hence shooting has the indirect effect that the victim will no longer be walking.
　we use small letters to denote variables  and capital letters to denote constant symbols. free variables are supposed to be universally quantified.
　to sum it up  our main concern here will be with direct effects  henceforth effects   inexecutabilities  executabilities and state constraints. we introduce this in what follows.
effect laws logical frameworks for reasoning about actions contain expressions linking actions and their effects. we suppose that such effects might be conditional  and thus get a third component of such axioms. an effect law for action is of the form
	poss	do
where is a simple state formula about situation   and do is a simple state formula about situation do .
　a simple state formula about a situation term contains no poss-predicateand no situation terms other than  lin  1 .
an example of effect law is
	poss shoot	loaded	alive do shoot
saying that whenever shoot is executable and the gun is loaded then after shooting the turkey is dead. another one is poss tease walking do tease : the result of teasing is that the turkey starts walking.
inexecutability laws the design of domain descriptions must also provide a way to express qualifications of actions  i.e.  conditions under which an action cannot be executed at all. an inexecutability law for action is of the form
poss
where	is a simple state formula about .
　for example  hasgun poss shoot states that shoot cannot be executed if the agent has no gun.
state constraints  alias domain constraints  frameworks allowing for indirect effects make use of formulas that link invariant propositions about the world. such formulas characterize the set of possible states. a state constraint is a simple state formula about the situation term that is consistent. an example is walking alive   saying that if a turkey is walking  then it must be alive  thielscher  1 .
executability laws with only state constraints and effect laws one cannot guarantee that action shoot is executable if the agent has a gun. an executability law for action is of the form poss   where is a simple state
formula about . for instance hasgun poss shoot says that shooting can be executed whenever the agent has a gun  and poss tease that the turkey can always be teased.
　whereas all the extant approaches in the literature that allow for indirect effects of actions contain state constraints and effect laws  the status of executability laws is less consensual: some authors  schubert  1; doherty et al.  1; mccain and turner  1; thielscher  1  more or less tacitly consider that executability laws should not be made explicit but rather inferred by the reasoning mechanism. others  lin  1; zhang et al.  1  have executabilitylaws as first class objects one can reason about.
　we nevertheless would like to point out that maximizing executability  as usually done in the literature  is not always intuitive: suppose we know that if we have the ignition key  the tank is full    and the battery tension is beyond 1v  then the car  necessarily  will start. suppose we also know that if the tension is below 1v  then the car will not start. what should we conclude in situations where we know that the tension is 1v  maximizing executabilities makes us infer that it will start  but such reasoning is not what we want if we would like to be sure that all possible executions lead to the goal.
　it seems a matter of debate whether one can always do without executabilities. we think that in several domains one wants to explicitly state under which conditions a given action is guaranteedto be executable  such as that a robot should never get stuck and should always be able to execute a move action. in any case  allowing for executability laws gives us more flexibility and expressive power.
domain descriptions given the four types of entities defined above  we arrange them in the following way: for a given action   is the set of its effect laws  is the set of its inexecutability laws  and is the set of its executability laws. denotes the set of all state constraints of a given domain. thus    and   for each action   and are the natural modules we consider here in designing a domain description.
	for parsimony's sake  we define	 
         and . we suppose all these sets are consistent.
	a	domain	description	is	a	tuple	of	the	form
.
　once the information contained in a module is not mixed with others'  it can be expected that undesirable side effects due to further modifications are less likely to propagate to other parts of the domain description. the same thing can be obtained for the consistency check if beyond of being separated the modules are designed in such a way that their interaction is minimized. this is what we address in this section.
　as we have seen  in software engineering functional independence is evaluated by means of two criteria: cohesion  a criterion for evaluating the relative functional strength of a
　module  and coupling  an assessment of relative interdependence among different modules. both these notions are quite informal  even in software engineering  and cannot be measured in an objective way.
　here we explore these concepts when applied to domain descriptions and show how the informal requirements of software engineering can be turned into tests of consistency of several different arrangements of modules.
1 cohesion
normally cohesion comes with modularization  and its evaluation depends mainly on the entities that one takes into account when describing a domain.
　in talking about sets of logical formulas we take cohesion as how simple or well-defined a logical module is  considering the different types of formulas that can be derived from it. we thus refine our first design principle:
p1'. the less types of laws a given module entails alone  the more cohesive it is.
as an example consider the following module:
hasgun poss shoot hasgun poss shoot
from such a set alone one can derive both	hasgun
 poss shoot and hasgun poss shoot   which are formulasof two differentkinds. in this case we say that such a set is a lowly cohesive module  for alone it functions to derive executabilitiesand inexecutabilities. a better approachwould be to decompose such a module into the following ones:
shoot	hasgun	poss shoot shoot	hasgun	poss shoot
　total cohesion is not always easy to achieve. suppose  for instance  a hypothetical situation in which we reason about the effects of drinking a cup of coffee:
poss drink sugar
drink
poss drinkhappy do drinksalthappy do drinkthen drink entails sugar	salt	poss drink.this means that from	drink alone we do not get only effect laws but also inexecutability laws. therefore drink is not as cohesive as one might have expected.
　one step towards augmenting cohesion of a module of effect laws can be by completely specifying the preconditions of effects of actions. for example  the weaker effect laws
poss drink
	sugar	salt	happy do drink
drink
poss drink
	salt	sugar	happy do drink
guaranteea higher cohesion of module drink in comparison to that of drink.
　by the definition of   it is easy to see that from the state constraints we can derive formulas of any type  so is by nature a lowly cohesive module.
　we are thus interested in refining even more our principle of high cohesion p1' by the following ones:
p1'-1. if	  then	.
p1'-1. if	poss	  then
	poss	.
p1'-1. if	  then	.
p1'-1. if	poss	  then
	poss	.
p1'-1. if	poss	do	  then
	poss	do	.
p1'-1. if	  then	.
p1'-1. if	poss	  then
	poss	.
p1'-1. if	poss	  then
	poss	.
　all these principles say is that a formula of a given type entailed by a module of a different type must be a theorem of the logic.
1 coupling
as we have seen  coupling evaluates how much a module is tied to or dependent upon other modules. we take as coupling of two or moresets of differenttypes of action laws how much interaction among them is needed to derive a formula of a given type. interaction here means sharing logical formulas. now we refine our second design principle:
p1'. the less new consequences two or several modules have  the less coupled they are.
 the new consequences of modules	and	are those consequences of	that are not consequences neither of	nor of	alone. 
	for instance  consider the domain description	:
poss tease
poss shootwalking do teaseloadedalive do shootaliveposs teasewalking	alive dead	alive
observe that to derive the domain constraint walking dead	one only needs	  i.e.  no other module is re-
quired for that. on the other hand  to conclude dead
poss tease	one needs both	and	.
　totally decoupled descriptions are not common in applications of real interest. for the example above  it seems to be impossible to diminish the interaction between and without abandoning the concept of state constraints.
	on the other hand  if	in our example contained
poss tease   things would be different: in this case  with one would be able to infer the state constraint alive   but such a law cannot be derived from alone. a higher degree of interaction between this set and the others is necessary in order to do that. in such a case one would say that there is a high coupling among 's modules.
　the principle of minimal coupling p1' can be refined in two more specific design principles:
p1'-1. no implicit inexecutability laws: if	poss	  then
poss
p1'-1. no implicit state constraints: if	  then	.
　p1'-1 is a useful feature of descriptions: beyond being a reasonable principle of design that helps avoiding mistakes  it clearly restricts the search space  and thus makes reasoning easier. to witness  if satisfies p1'-1  then its consistency amounts to that of :
theorem 1 if	has no implicit state constraints  then
iff
1 no implicit inexecutability laws
consider the following domain description	:
	poss tease	walking do tease
poss shoot
loaded	alive do shoot walking	alive
from poss tease walking do tease it follows with that poss tease alive do tease   i.e.  in every situation  after teasing the turkey is alive:
	poss tease	alive do tease
now as alive alive do tease   the status of fluent alive is not modified by the tease action 
and we have	poss	alive
 alive do alive do . from this it follows alive poss tease   i.e.  the turkey cannot be teased if it is dead. but alive
 poss tease   hence principle p1'-1 is violated. the formula alive poss tease is an example of what we call an implicit inexecutability law.
　in the literature  such laws are also known as implicit qualifications  ginsberg and smith  1   and it has been argued that it is a positive feature of reasoning about actions frameworks to leave them implicit and provide mechanisms for inferring them  lin  1; thielscher  1 . the other way round  one might argue as well that implicit qualifications indicate that the domain has not been described in an adequate manner: inexecutability laws have a form simpler than that of effect laws  and it might be reasonably expected that it is easier to exhaustively describe them.  note that nevertheless this is not related to the qualification problem  which basically says that it is difficult to state all the executability laws of a domain.  thus  all the inexecutabilities should be explicitly stated  and this is what principle p1'-1 says.
1 no implicit state constraints
executability laws increase expressive power  but might conflict with inexecutability laws. for instance  let be such that   alive poss tease  
　　　　　poss tease   and .  note that principle p1'-1 is satisfied.  we have the unintuitive alive : the turkey is immortal! this is an implicit state constraint because alive does not follow from alone: p1'-1 is violated.
　the existence of implicit state constraints may thus indicate too strong executability laws: in our example  one wrongly assumed that tease is always executable. it may also indicate that the inexecutability laws are too strong  or that the state constraints are too weak.
1 results for a dependence based solution to the frame problem
given an axiomatic theory of actions with a solution to the frame and the ramification problems  we are interested in knowing whether domain descriptions encoded in it satisfy or not our set of design principles. here we chose to use the modal framework of  castilho et al.  1   which has been shown to support reiter's solution to the frame problem  demolombe et al.  1  and also proposes an assessment of the ramification problem.
let be a translation of a domain description in into the situation calculus. dependences
are translated into predicates   meaning that action may cause literal to be true. the extension of dep is then circumscribed  cf. schubert's explanation closure assumption .
as examples  shoot walking means that shoot may cause walking to be false  and the absenceof tease alive induces the frame axiom alive alive do tease .
theorem 1 if is a domain description in   then satisfies principles p1'-1-p1'-1.
　even in   however  it is possible to derive inexecutabilities from  see the example in section 1   which violates principle p1'-1. establishing maximal cohesion of in this case involves weakening of preconditions of action effects. anyway  conceiving an algorithm to accomplish this task is not difficult  due to space limitations we omit its presentation here .
　checking whether a domain description satisfies principle p1'-1 can be made with little adaptation of the material on the subject present in the literature  zhang et al.  1; lang et al.  1; herzig and varzinczak  1 . we do not deepen into further details here  and just present the main results that we obtain when consideringdescriptions that satisfy the design principles that have been proposed  due to space limits no proof is given .
theorem 1 let	be	thetranslation	intositua-tion	calculus	ofa	domaindescription	in.if	has	noimplicitstate	constraints thenpossdoiff	poss	do	.
this means that under p1'-1 one has modularity inside   too: when deducing the effects of action we need not consider the action laws for the other actions. versions for executability and inexecutability can be stated as well.
theorem 1 there exist descriptions not satisfying p1'-1 such that poss do and
	poss	do	.
for example  just take	as before:
     poss shoot alive alive do shoot   however shoot shoot poss shoot
	alive	alive do shoot	.
1 related work
pirri and reiter  have investigated the metatheory of the situation calculus. in a spirit similar to ours  they use executability laws and effect laws. contrarily to us  their executability laws are equivalences and are thus at the same time inexecutability laws. there are no state constraints  i.e. 
         . for this setting they give a syntactical condition on effect laws forcing them not to interact with executability laws  which precludes implicit state constraints.
basically  the condition says that when there are effect laws
poss	do	and poss
　　　　　　do	  then	and	are inconsistent  which essentially amounts to having in their domain descriptions a kind of  implicit state constraint schema  of the form	 .
　this then allows them to show that such descriptionsare always consistent. moreover they thus simplify the entailment problem for this calculus  and show for several problems such as consistency or regression that only some of the modules of a domain description are necessary.
　amir  focuses on design and maintenance of action descriptions applying concepts of the object-oriented paradigm in the situation calculus. in that work  guidelines for a partitioned representation of a given description are presented  with which the inference task can also be optimized  as it is restricted to the part of the domain description that is really relevant to a given query. this is observed specially when different agents are involved: the design of an agent's description can be done with no regard to others'  and after the integration of multiple agents  queries about an agent's beliefs do not take into accountthe belief state of otheragents.
　in that work  executabilities are as in  pirri and reiter  1  and the same condition on effect laws is assumed  which syntactically avoids implicit state constraints.
　despite of using many of the object-oriented paradigm tools and techniques  no mention is made to the concepts of cohesion and coupling. in the approach presented in  amir  1   even if modules are highly cohesive  they are not lowly coupled  due to the dependence between objects in the reasoning process defined there. we do not investigate this further here  but conjecture that this could be done there by  during the reasoning process  avoiding passing to a module a formula of a type different from those it contains.
　the present work generalizes and extends pirri and reiter's result to the case where and both  pirri and reiter  1; amir  1  where the syntactical restriction on effect laws is not made. this gives us more expressive power  as we can reason about inexecutabilities  and a better modularity in the sense that we do not combine formulas that are conceptually different  viz. executabilities and inexecutabilities .
1 conclusion
we have established a link between knowledge engineering and software engineering showing that many of the concepts and techniques developed for the latter are useful in the design and maintenance of domain descriptions. in particular  with the concepts of cohesion and coupling we get better criteria for domain description evaluation.
　our central hypothesis is that the different types of axioms should be neatly separated and only interfere in one sense: state constraints together with action laws may have consequences that do not follow from the action laws alone. the other way round  action laws should not allow to infer new state constraints  effect laws should not allow to infer inexecutability laws  etc.
　at first glance  because of 's interaction with other modules  it could be said that domain descriptions described in our way do not completely minimize coupling. however  given the intrinsic nature of   observe that we cannot do otherwise: in the same way it is not possible to write completely decoupled methods  or the program will not work!   we cannot have totally decoupled domain descriptions  unless  of course  we constrain ourselves to domains without ramifications like in  pirri and reiter  1  .
　it could be argued that unintuitive consequences in domain descriptions are mainly due to badly written axioms and not to the lack of modularity. true enough  but what we have presented here is the case that making a domain description modular gives us a tool to detect at least some of such problems and correct it.  but note that we do not claim to correct badly written axioms automatically and once for all . besides this  having separate entities in the ontology and controlling their interaction help us to localize where the problems are  which can be crucial for real world applications.
