 
in classical planning we are faced with the following formal task: given a set a of permissible actions  a description a of initial states and a description  of final states  determine a plan ii  i.e. a finite sequence of actions from a  such that execution of ii begun in any state satisfying is guaranteed to terminate in a state satisfying 
in this paper we extend the classical model of planning by admitting plans that are not assured to succeed. we address two basic problems connected with such plans:  1  how to determine whether a given plan is valid  i.e. always succeeds   admissible  i.e. may succeed or fail  or inadmissible  i.e. never succeeds .  1  given an admissible plan  determine a minimal set of observations that are to be made in the initial state  or in some intermediate state  if the plan is in progress  to validate or falsify the plan. 
1 	introduction 
in classical planning we are faced with the following formal task: given a set a of admissible actions  a formula describing the set of initial states and a formula rep-
resenting a goal to be achieved  construct a plan ii  i.e. a finite sequence of actions from a  such that execution of ii begun in any state satisfying is guaranteed to terminate in a state satisfying 
　this classical model of planning is oversimplified. in many practical settings it is reasonable to construct and execute plans that are not assured to succeed. there are two basic reasons for that. firstly  it may happen that a plan that always achieves a final state does not exist. secondly  even if such a plan exists  it may be better to choose a simpler  although uncertain plan. an example will help to illustrate this. 
　suppose i want to contact john. all information i have is his phone number and the fact that he is at home. given this  the only plan i can choose is to call him. of course  the plan may fail  if john's phone line is busy  but 
    this research was partially supported by the kbn grant 1c1. 
there is no better possibility. to guarantee the success of the plan  i have to know that john's line is not busy at the moment. unfortunately  this information is hardly available. 
　assume now that  in addition  i know john's address. in this case  i can assure my goal by visiting him. however  it may still be much more reasonable to give up this ironclad plan and to choose the previous one. 
　in this paper  we extend the classical model of planning by permitting plans that are not assured to succeed. such a plan is just a sequence of actions  considered relatively to some specification. a specification consists of a description of the initial states and a goal to achieve. 
　plans that need not behave according to their specifications can be naturally divided into three categories:  1  those that always achieve their goals  valid plans .  1  those that may achieve their goals or not  depending on some additional information  admissible plans .1  1  those that never achieve their goals  inadmissible plans . 
　as an example  suppose that all we know about the initial state is that a turkey is alive and the goal is to make it dead. there are two actions: load  loads a gun  and shoot  kills the turkey  provided that the gun is loaded . consider three plans:  1  load; shoot;  1  shoot;  1  load. the first of these plans is valid  the second one is admissible  whereas the third one is inadmissible. 
　it is important to note that an admissible plan can be often validated  i.e. made valid  or falsified  i.e. made inadmissible  by providing new observations. reconsider the plan  1  stated above. the observation that the gun is initially loaded  resp. unloaded  validates  resp. falsifies  the plan. 
this paper addresses two problems: 
 1  how to determine whether a given plan is valid  ad-missible or inadmissible. 
 1  given an admissible plan  determine a minimal set of observations that are to be made in the initial 
     1  it should be emphasized that admissible plans differ from what is called uncertain plans in the ai literature. this latter notion corresponds to plans that may fail not because some information is missing  but rather because they involve actions that succeed with some probability.  see  boutilier et a/.  1   for a good survey concerning uncertain plans.  
	lukaszewicz & madalinska-bugaj 	1 

state  or in some intermediate state  if the plan is in progress  to validate or falsify the plan. 
　to represent actions occurring in plans  we use dijkstra's approach originally developed to deal with programs  dijkstra  1; dijkstra  scholten  1 . the advantage of dijkstra's formalism for reasoning about action and change  when compared with purely logical approaches such as situation calculus  mccarthy  hayes  1; lifschitz  1; gelfond et a/.  1  or features and fluents fsandewall  1   is its simplicity. it has been shown in  lukaszewicz. madaliriska  1; 1; 1a; jablonowski et al.  1 . 
　the paper is organized as follows. we start with a brief summary of dijkstra's semantics for a very simple programming language. section 1 is devoted to the theory of prime implicants that play an important role in plan analysis. in section 1  we show how action languages are to be formalized using dijkstra's methodology. in section 1  we provide a number of results allowing to analyse plans before their executions  whereas  in section 1  these results are generalized for plans in progress. finally  in section 1  we provide conclude remarks and future work. 
proofs of all stated results can be found in the full the formula transformers mentioned above are to be understood as follows. for each command s and each formula 
  wp s}   is the formula whose models are precisely all states such that execution of s begun in any one of them is guaranteed to terminate in a state satisfying 
  sp s    is the formula whose models are precisely all states such that each of them can be reached by starting execution of s in some state satisfying a. 
for a detailed discussion of dijkstra's methodology the reader should consult  apt  olderog  1 . 
1 	list of c o m m a n d s 
the considered language consists of skip command  assignment to simple variables  alternative command and sequential composition of commands1. semantics of these commands is specified in terms of formula transformers explained above. 
1. the skip command. this is the  empty  command in that its execution does not change the computation state. the semantics of skip is thus given by 

version of this paper. 
1 	planning and scheduling 


	lukaszewicz & madaunska-bugaj 	1 


1 	planning and scheduling 

	lukaszewicz & madalinska-bugaj 	1 

since is inconsistent with a  whereas is consistent with a  we infer that there is one minimal countersupport for  thus  if we observe that the gun is unloaded after performing the action spin  we know that the plan will fail and should be given up. ＊ 
1 	conclusions 
in this paper  we have argued that it makes sense to consider and execute plans that are not guaranteed to succeed. we have adressed two fundamental problems related to such plans: 
 1  how to determine whether a given plan is valid  i.e. always succeeds   admissible  i.e. succeeds or fails depending on some additional information  or inadmissible  i.e. always fails . 
 1  given an admissible plan  determine a minimal set of observations that are to be made in the initial state  or in some intermediate state  if the plan is in progress  to validate or falsify the plan. 
　to formalize actions occurring in plans  we have employed dijkstra's semantics for programming languages. this allows us to represent a broad class of plans  in particular those including actions with non-deterministic effects. in addition  we do not require that initial or final states are to be completely specified. 
　we believe that technical results stated in sections 1 and 1 can be used while constructing plans. we would like to pursue this topic in the future. 
ackowledgements 
we would like to thank wladyslaw m. turski for his comments on the earlier draft of this paper. 
