 problem solving sessions similar in structure to the example we are now considering. the main difference is that we do not have an i n i t i a l world state  nor do we have bindings for the variables. handling the variables can be tricky. the two-variable predicate  on $x $y   for example  is actually considered twice; f i r s t to deduce properties for variable $x and second to deduce them for variable $y. predicates are even paired 
with themselves. this allows us to deduce  for example  that  holding a  and  holding b  cannot be simultaneously true. we have developed a special notation to represent this  similar in spirit to the various prefix characters used by planner  conniver  and qaa. given that $x represents a variable  #x denotes a variable which can accept any binding except the current binding of $x. 
　　　as reflect conducts the mini-experiments  it imposes a bound on the  depth  of the graph generated. if the bound is ever exceeded  the system abandons that particular pair and goes on to the next. in this way  the  obvious  i.a.'s are found quickly. these can then be used on subsequent passes to prove further pairs of incompatibilities. for example  in an experiment with pi and p1  the system may achieve pi; the achievement of p1  however  is found to require p1  which has previously been proven to be incompatible with pi. if a similar situation is found when trying the problem in reverse  then pi and p1 have been proved incompatible. when a pass produces no new results  the depth bound is increased  and reflect tries again. this process continues until a l l experiments have concluded or until some maximum depth is reached. 
　　　it i s   of course  possible to construct a world in which it w i l l take an arbitrarily large amount of processing to deduce a l l possible pairs of i.a.'s. if an i.a. pair is not detected  the search space may become larger due to less effective pruning  but this does not affect the attainability of the solution. 
　　　it is also possible to  sabotage  the deduction procedure by introducing what we term a  garden of eden  i n i t i a l state. consider a situation where reflect has just completed preprocessing  having proved that  holding a  and  holding b  can never be simultaneously true. it now smugly asks for i t s f i r s t problem  together with the i n i t i a l state of the world. sure enough  for some mysterious reason the i n i t i a l state just as smugly asserts  holding a  and  holding b  ! 

prohlpn-sol v !nr:-1 : 	dawson 1 

this is an example of a  garden of eden  s t a t e   namely one which could not have been a r r i v e d at by any sequence of o p e r a t o r s . in many cases  these s t a t e s f o l l o w t h e i r h i s t o r i c a l counterpart and d o n ' t s u r v i v e very l o n g    note that any a p p l i c a t i o n of putdown $b  w i l l delete a l l holding a s s e r t i o n s   not j u s t  holding $b .  
　　　reflect produces the 	f o l l o w i n g 	incompatible a s s e r t i o n s f o r t h i s v e r s i o n o f the blocks w o r l d : 

1 	ancestors  	t roublemakers  	and o t h e r d e t a i l s 
       we r e t u r n now to the 1-block problem  where the next step is to expand n1de1  whose goal k e r n e l is   holding a   clear b   on b c     . reflect f i r s t focuses on the subgoal  holding a   . n1de1 is produced by reverse a p p l i c a t i o n of the operator pickup a . the goal kernel   ontable a   clear a   handempty   clear b   on b c   is obtained by replacing  holding a  w i t h the preconditions of pickup a . when reflect considers the subgoal  on b c   the a s s e r t i o n  holding b  required by stack b c  is found to be incompatible w i t h  holding a     which is already in the goal k e r n e l . the f i n a l subgoal in n1de1   clear b   is already true in the i n i t i a l s t a t e of the w o r l d   so it is not considered.   i t is not always possible to ignore true assertions in t h i s manner  as we s h a l l see.  the graph now looks l i k e t h i s : 
on l i n e   a     we n o t i c e how reflect has avoided a loop by invoking the ancestor r u l e * t h i s r u l e states t h a t i f the goal k e r n e l under c o n s i d e r a t i o n is a superset of one of i t s ancestors  we should discard i t   since any o p e r a t o r a p p l i c a b l e i n the new goal k e r n e l would have been equally a p p l i c a b l e 
in the ancestor. 
	on l i n e   b     reflect 	is 	t r y i n g 	to 	achieve 
 clear a  using the operator unstack c a . it r e j e c t s t h i s   however  because even though unstack c a  makes  clear a  t r u e   another element of the goal k e r n e l    handempty   is made f a l s e ! the applicable r u l e   known as the d e l e t i o n r u l e   states t h a t no operator can ever be applied whose delete set contains a member of the current goal k e r n e l . this l i t t l e f a i l u r e has had an important consequence  however. because of i t    handempty  is branded as  troublesome . this l a b e l is given to assertions which hold in the i n i t i a l s t a t e of the w o r l d   but which may have to be temporarily v i o l a t e d since they are i n t e r f e r i n g w i t h the achievement of another subgoal. a troublesome a s s e r t i o n w i l l always be considered during expansion because  in our backward searching  t h i s p o i n t might correspond to the time when the a s s e r t i o n   a f t e r having been temporarily f a l s e   needs to be reachieved. even a f t e r unstack c a  is r e j e c t e d   reflect checks f o r i . a . ' s   since t h i s could p o i n t to other  troublesome  a s s e r t i o n s . 
the system now considers the next subgoal   on b c   and does succeed in producing a new node  using the operator stack b c . f i n a l l y   
 handempty  	 already 	true 	but 	labeled 
 troublesome    is considered but produces no new nodes. 
expansion of nodea also produces a s i n g l e new 

node 	when 	reflect 	applies 	pickup b  to achieve  holding b . 	a l l other a p p l i c a b l e operators 	lead to 	i . a . ' s . 	when 	node1 	is 	expanded  	reflect generates two new nodes  as shown below: 
       the 	expansion 	of 	n1de1 	w i l l 	i l l u s t r a t e various 	i n t e r e s t i n g 	rules 	used 	by reflect. 	we w i l l describe t h i s expansion by presenting a trace of reflect's 	a c t i v i t y . 
expanding n1de1... 
task: 	 clear a  
	operator: 	putdown a  
	reject-ancestor: n1de1 	 a  
operator: unstack c a  
	reject-delete: 	 handempty  	 b  
	reject-i.a.: 	 clear c  on b c  
task:  on b c  
	operator: 	stack b c  
new node: n1de1   holding b  clear c  
 ontable a  clear a   
task: 	 handempty  operator: putdown a  
reject-ancestor: n1de1 
operator: putdown b  
 reject-i.a.:  holding b  on b c  operator: putdown c  
	reject-i.a.: 	 holding c  on b c         reflect f i n a l l y has a choice to make! since only one of n1de1's subgoals is not s a t i s f i e d in the i n i t a l s t a t e   whereas two of n1de1's are n o t   the h e u r i s t i c e v a l u a t i o n f u n c t i o n reports that n1de1's goal k e r n e l i s   c l o s e r   t o the i n i t i a l s t a t e of the world than n1de1's i s . the system t h e r e f o r e chooses n1de1 to expand n e x t . the only 	promem-sow nk-1 : 	dawson 
u1 

applicable operator  pickup a   is rejected by the ancestor rule  however. reflect moves immediately to n1de1  which was the correct choice. when applying the operator unstack c a   the goal kernel   handempty   clear c   ontable b   clear b   ontable a   is produced. problem solving halts  since a l l elements of this goal kernel are true in the i n i t i a l state. the final graph for this solution of the 1 blocks problem is: 

　　　the final plan is obtained by simply travelling back up to the root: unstack c a   putdown c   pickup b   stack b c   pickup a   stack a b . 
1 	bigops 
       we s h a l l now consider the 1-block problem again. this time  we w i l l make use of the r e s u l t s of another preprocessing phase: the c o n s t r u c t i o n of bigops. the generation of these combined operators is accomplished by analyzing the inherent s t r u c t u r e of the o r i g i n a l operators provided to the system. the basic aim is to construct new operators which are made up of two or more p r i m i t i v e operators. this allows one arc in the goal k e r n e l graph to take the place of several a r c s   and r e s u l t s in as much as an order of magnitude decrease in the size of the search space. a f t e r the problem is solved  the s o l u t i o n is expanded back in terms of the o r i g i n a l operators. since bigops can be thought of as generalized operators  the expansion process often is able to leave out c e r t a i n unnecessary steps. for example  assume that we have preprocessed the operators in the strips world of  fikes nilsson-1  to o b t a i n a bigop c a l l e d  climboff & 
goto & open & gothrudoor  which gives the robot the a b i l i t y to go i n t o another room. the presence of each p r i m i t i v e operator is designed to achieve one of the p r e c o n d i t i o n s which w i l l u l t i m a t e l y be needed in order to go through a door. at expansion time  however  it may be found that one or more of the conditions are already t r u e . for example  the robot may already be on the f l o o r   or the door may already be open. in t h i s case  f i n a l expansion would leave out the corresponding o p e r a t o r s   since they would be e s s e n t i a l l y no-ops. 
       given the f o u r i n i t i a l operators i n our v e r s i o n of the blocks w o r l d   reflect begins by considering which p a i r s of operators can be applied successively. of the sixteen possible ordered p a i r s   i t discovers that c o n f l i c t i n g p r e c o n d i t i o n s prevent eight of them from ever being adjacent in a p l a n : pickup-pickup  pickup-unstack  putdown-putdown  putdown-stack  
stack-putdown  	stack-stack  	unstack-pickup  	and 
unstack-unstack. these c o n f l i c t s are a l l caused by the i.a. p a i r   holding $x   handempty  . the remaining eight operator p a i r s are candidates f o r bigops. the method of c o n s t r u c t i o n is simple. 
let pk  dk   and a  denote the precondition s e t   delete set  and add set of operator 1pk  
operators opi and op.  may be combined i n t o a bigop where 

 + and - are set union and d i f f e r e n c e   . 
       even though the above operation is t h e o r e t i c a l l y possible on a l l the remaining operator p a i r s   reflect uses some a d d i t i o n a l c r i t e r i a in deciding whether the combination should e x i s t o r n o t . i t i s important t h a t the v a r i a b l e s correspond p r o p e r l y . in a pickup&stack operation  f o r example  i t i s c l e a r t h a t the block which is picked up is the same block which w i l l be stacked. in a stack&unstack o p e r a t i o n   it is not so c l e a r . the blocks may be d i f f e r e n t or they may be one and the same. f i n a l l y   in a 
putdown&unstack  	it is c l e a r that they have to be d i f f e r e n t b l o c k s . 	reflect requires that at 	least one 	v a r i a b l e 	in both operators correspond at a l l times. 	this has proved to be a 	good 	measure 	of the 	  n a t u r a l n e s s   of combining two operators  	and helps eliminate combinations 	of 	operators 	which are 	semantically 	u n r e l a t e d . 	this 	c r i t e r i o n eliminates 	putdown-pickup  	putdown-unstack  stack-pickup 	and stack-unstack. 	f i n a l l y   reflect checks f o r combinations which would e s s e n t i a l l y be no-ops  and manages to discard pickup-putdown. 	we are 	l e f t w i t h : 
op: 	pickup&stack $bl $b1  
bp: 	 type block $b1  type block $b1  
pr: 	 ontable $b1  clear $b1  handempty  
 clear $b1  
ds:  ontable $b1  clear $b1  as:  on $b1 $b1  
op: 	unstack&stack $bl $b1 $b1  
bp:  type block $b1  type block $b1  
 type block $b1  1n $b1 $b1  
pr: 	 handempty  clear $b1  clear $b1  
ds:  on $b1 $b1  clear $b1  
as:  on $b1 $b1  clear $b1  
op: 	unstack&putdown $bl $b1  
bp:  type block $b1  type block $b1  on $b1 $b1  
pr:  clear $b1  handempty  ds:  on $b1 $b1  
as:  clear $b1  ontable $b1  
probl em-solving 1 : dawson 1 　　　let us now take another look at the 1-block problem given the presence of these bigops. reflect is able to solve the problem w i t h no wrong moves in less than o n e - t h i r d the time  1 1. v s . 1 s .   i n t e r p r e t e d lisp on a cdc1  and produces the f o l l o w i n g graph: 
n1de1:  on a b  on b c   pickup&stack a b  | 
node1:  ontable a  clear a  
	| 	 handempty  clear b  pickup&stack b c  	| 	 on b c   i 
node1:  ontable b  clear c  
	| 	 ontable a  clear a  
unstack&putdown c a -| 	 handempty  clear b   
i 
	goal: 	  handempty  clear c  
 ontable b  ontable a  
 clear b   
	1. 	other sample problems 
       the f i g u r e s at the end of t h i s paper together w i t h 	table 	1 	show 	some 	t y p i c a l 	l i n e a r 	and n o n - l i n e a r problems solved by reflect. 	many 	have been 	chosen 	from 	the 	l i t e r a t u r e . 	the order in p o i n t of d i m i n i s h i n g r e t u r n s   beyond which it would be more p r o f i t a b l e to s t a r t the problem s o l v i n g i t s e l f . 
       f i n a l l y   an area t h a t needs a l o t of work is the use of preprocessing techniques to generate good h e u r i s t i c e v a l u a t i o n f u n c t i o n s . reflect c u r r e n t l y generates a very crude e v a l u a t i o n f u n c t i o n during preprocessing by counting the average number of preconditions needed to achieve a given a s s e r t i o n . this could use s u b s t a n t i a l improvement. 
1. acknowledgement s 
　　　we would l i k e to acknowledge the i n f l u e n c e provided by many long and f r u i t f u l discussions on t h i s subject w i t h daniel chester  joseph d r e u s s i   and john roach. 
1. re ferences 

which the sub tasks 	of 	a 	problem 	are 	given 	to reflect 	is i r r e l e v a n t   w h i l e it may be c r u c i a l to o t h e r systems. 	although 	we 	provide 	comparative execution 	times 	when 	a v a i l a b l e   	comparisons on t h i s basis are tenuous at 	best. 	as 	workers 	in t h i s 	area 	know 	w e l l   	s l i g h t 	changes 	in 	the a x i o m a t i z a t i o n 	of 	operators 	can 	cause 	large d i f f e r e n c e s in the behavior of these systems. 
	1. 	conclusions and f u r t h e r work 
       reflect 	has 	successfully 	solved 	problems t y p i f i e d 	by 	the 	samples 	g i v e n . 	these problems have o f t e n been solved 	only 	w i t h 	d i f f i c u l t y 	by o t h e r problem s o l v e r s . 	the success of reflect can be a t t r i b u t e d to a 	combination 	of 	preprocessing r e s u l t s 	and 	the 	g o a l - k e r n e l 	backwards 	search  
which has proved adequate f o r handling tasks up to several 	dozen 	steps 	l o n g . 	however  	the 
preprocessing h e u r i s t i c s c u r r e n t l y in use are not s u f f i c i e n t l y powerful to prevent a combinatorial explosion when reflect attempts tasks which are several hundred steps long   w i t h i n the c a p a b i l i t i e s of lawaly   1     . we can a t t r i b u t e t h i s to several reasons. f i r s t   reflect has e s s e n t i a l l y put aside the l i n e a r i t y p r i n c i p l e i n order to m a i n t a i n a g l o b a l view during problem s o l v i n g . i f p a r t i c u l a r worlds are not s t r o n g l y enough constrained to provide a good set of i . a . ' s   then the lack of e f f e c t i v e pruning becomes evident q u i c k l y . l i n e a r i t y i s   o b v i o u s l y   a n extremely powerful h e u r i s t i c when used a p p r o p r i a t e l y . rather than using o t h e r h e u r i s t i c s to overcome the problems of l i n e a r i t y   as almost a l l previous systems have done  it is our aim to develop h e u r i s t i c s t h a t t e l l us when to take advantage of l i n e a r i t y . along these l i n e s   a hierarchy scheme implemented f o r backward search seems promising. 
       another area which is 	being 	implemented 	is the 	extension 	of 	i.a. 	p a i r s 	to 	t r i p l e t s   quadruplets  e t c . 	an 	a n a l y s i s 	of 	g o a l - k e r n e l s generated 	by 	the 	present system shows t h a t i.a. t r i p l e t s a r i s e 	in 	s u b s t a n t i a l 	numbers  	but 	go undetected. 	this means t h a t the system is working on tasks which are doomed to 	f a i l u r e . 	d e t e c t i o n of 	new 	i . a . ' s 	d u r i n g 	preprocessing 	could 	be c a r r i e d as f a r as d e s i r e d ; 	there is presumably 	a 
problem-solving-1: dawson 
1 


 a  interpreted lisp  cdc1  includes garbage collection . 
 b  warplan time: 1 sec.  prolog  ibm 1 . 
 c  lawaly  failed to solve this problem. 
 d  time needed to determine impossibility.  lawaly found no solution after 1 sec. disprover  found a disproof in 1 sec.  
 e   can solve as  on b c   on a b  but not in opposite order. 
 f  noah  time: 1 sec.  compiled qlisp  dec-1 . 
 g  abstrips  generated 1 nodes  using 1 sec.  compiled lisp  dec-1 . strips  time:  1 sec. 
problen-solving-1: dawson 
/. 1 


	problem 	solving-1: 	smith 
1 
