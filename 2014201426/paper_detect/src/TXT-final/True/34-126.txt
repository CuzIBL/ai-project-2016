knowledge-based english language systems for management support: 
an analysis of requirements 
ashok malhotra 
i b m thomas j. watson research center 
yorktown heights  new york 1 


1- introduction 
   two of the factors that have mitigated against better management use of computers are the necessity to communicate with them in a special language and to specify the details of the processing required. apart from the investment required in learning how to use computers  these factors lead to delays and neccessitate a significant  special effort whenever the manager has an unusual request. to try to overcome these limitations we decided to investigate the utility and feasibility of a computer-based managementsupport system that would allow the manager to phrase his requests in english and contain enough domain-specific knowledge to analyze them and respond to them. the investigation is described in detail in malhotra  1 . this paper summarizes our methodology and main findings. 
   preliminary conversations with managers indicated that such a system should serve as a front-end to a corporate data base to support problem analysis and decision-making. it should provide facilities for data retrieval and manipulation as well as be able to answer questions about its contents and capabilities. the system should also provide facilities for building and using management models. if a software error occurs during the processing of a request the user should not be asked to take any special action. it should be trapped by the system and the user merely asked to rephrase his request. 
1. the prototype system 
   to come to grips with the substantive problems involved in building such a system we decided to implement a prototype as a front-end to the corporate data base of the operations of a manufacturer of lead batteries. figure i. is a schematic diagram of the prototype system. functionally  the system can be divided into two parts  the parser and the processor. these two operating subsystems rely upon a knowledge base that contains a model of the world  a model of the problem area and knowledge of the structure and the contents of the data base. 
　　the parser undertakes the initial analysis of input to the system. we shall not describe the parser since it is the knowledge base and the processor that are central to this paper 
the morphology routine acts as a preprocessor for the parser. 
it examines each word in the input request and checks if it is known to the system. unknown words are analyzed to determine whether they belong to general classes of words for which the system has knowledge or are variants of known words. if a word cannot be recognized by the morphology routine a message is printed out indicating the offending work and the user is asked to retype his request. 
　　once the complete sentence is accepted  the  case-oriented  parser attempts to find the main verb and to arrange the noun phrases in the sentence as  cases  of the main verb.  see fillmore  for the theory of case grammar and celce-murcia  for an early implemtation of a case-oriented parser.  the processor examines the output of the parser and attempts to identify the request as one of the classes of requests it knows about. the classification is along the general lines described in section 1. further processing towards response generation is based on special knowledge about the request type. a request for data  for example  is processed very differently from a request for a model value or a yes-no question. 
1. the experiment 
　　to test whether such a system would be natural and useful to managers we conducted an experiment in which 1 subjects  chosen to have some acquaintance with the concepts and vocabulary of management  were asked to explore a realistic problem situation. analysis of their problem-solving protocols was used to determine the facilities that would be required for a system of this type. the sentences used by them in framing their requests were analyzed to determine the vocabulary and the parsing capability required for such a system. 
　　the situation placed the subject in the role of the president of a company that manufactures lead batteries and confronted him with 
the operating results for the last year which show that although 
1 

sales increased by 1 percent profits decreased. he was asked to reach an understanding of the situation sufficient to recommend a course of action with the assistance of a perfect system that would respond to any request he made. by allowing unrestricted english input we attempted to create conditions in which the subjects could behave as naturally as possible  unhampered by technological restrictions. 
   the perfect system was implemented by interconnecting two consoles logged into a time-sharing system. requests typed at the subject's console appeared at the experimenter's console and he was able to create responses to them by calling on the prototype system as well as on a set of prepared programs. one of these allowed him to create responses by typing them in directly. the subject saw only the output of the programs invoked by the experimenter. the system was perfect in the sense that it could respond to any request that the experimenter could understand and for which he could create answers. 
1. the results 
   the behavior of the subjects and the requests made by them were analyzed to provide the following results: 
1. behavioral reactions to the system and the setting. 
1. vocabulary requirements for an english language management-support system. 
1. parsing requirements for an english language management-support system. 
1. facilities required to support management problemsolving in a specific domain. 
1. knowledge requirements for a domain-specific english language management-support system. in other words  the knowledge required to provide the facilities described in 1. 
1. conceptual structures and strategies used by the subjects to solve the problem. 
these results are summarized in the following six sub-sections. 
1 behavioral reactions to the system and the setting 
   in every case  the subject read the problem scenario and the instructions to use the system and went readily to work. in a few cases the mechanics of editing and sending a request had to be explained. this was done quite rapidly  however  and the subject was at work within a few minutes after reading the documentation. 
   some subjects started out with very simple requests for single items of data. as they gained confidence in the system  they asked more demanding questions requesting blocks of data  invoking models and performing complex computations on the data. they would then go on to ask  what if  questions  define models and ask for underlying causes. thus  the subjects explored the capabilities of the system and gained confidence in it while solving the problem. they did this by gradually increasing the complexity of the questions and by asking direct questions about system capability: 
 can you format reports   
 do you perform mathematical computations ''. 
one of the initial  fuzzy notions we had was that managers  should be able to talk to the system like a human being . and indeed  after a few questions  the subjects began to treat it like one. their english was informal  they were cavalier about sentence forms and style and tended to ignore inessentials like punctuation. the formality of having to type in the requests and the knowledge that they were interacting with a computer system did seem to have some effect on the input  however. their sentences were short and simple and for the most part coherent and unambiguous. 
   a few subjects expressed their impatience at having to precede all requests for data with  what is  by leaving it out. others attempted to set specifications to be obeyed over the next set of questions. yet another form of economizing on input was to define simple models and then merely specify parameters in subsequent questions. thus  some subjects seemed to feel that english was a little cumbersome for routine data retrieval. it may be desirable  therefore  to build a command language on top of the english system. 
   in summary  all the subjects took quite naturally to the system and were able to work comfortably with it without significant problems. after the experiment  most of them commented that the system  would be very useful if it could be implemented . a high-level manager for a retail food chain felt it would be very useful to train store managers and also to manage individual profit centers like a bakery. 
1 the vocabulary 
   the 1 sentences used by the subjects were formed from 1 basic words. further  the probability of encountering new words in subsequent sentences decreased rapidly with the number of sentences. analysis of the rate at which new words occur seems to suggest that a vocabulary of 1 to 1 words may be sufficient 
for an english language system to support a particular business application.  see malhotra .  
   analysis of the words used in the subjects' requests allows us to develop the requirements for the morphological analysis program that attempts to associate each word of the input with appropriate pieces of knowledge contained in the system. if a word is not contained in the dictionary the program should check to see if it belongs to a class of words it knows about. if so  it can create the required knowledge from general knowledge about the class and the special characteristics of the word. in this way it can recognize inflected forms of known words  ran and running from run   noun idioms  cost of goods sold   numerical nomilizations  products 1  1 and 1   contractions  what's  i'm  and abbreviations  $  info  oh  mfg . the program must also be able to make allowances for common misspellings and for run in words such as  whatis .  see 
tietelman .  
   it seems desirable to allow the user to define new words conversationally as part of his interaction. the problem is  however  that  except in special cases such as names of defined models  each work in a knowledge-based system has a significant amount of knowledge attached to it. without this knowledge it cannot be processed correctly  if at all. since it is unrealistic to expect the user to be able to supply this knowledge  in the proper format  it seems best not to allow words to be defined conversationally. 

1 

1 the parsing requirements 
   a basic parser that analyzes sentences syntactically to match ten known sentence types and uses semantic knowledge to put together a canonical representation of the sentence was able to parse 1 percent of the sentences obtained from the users. the parser also possesses the capability to analyze simple conjunction forms and initial preposition groups and to ignore the noise word 
 please . a detailed description of the parser is given by malhotra . figure 1. shows the ten sentence types and their relative frequency of occurrence in the parsed sentences. 
   the frequency of sentences classified by sentence type seems to follow the well known pareto distribution . this often appears in analyzing occurrence frequencies by class; be they sales by item or the amount of damage by fire. typically  a few classes account for a large percentage of the occurrences. thus  the majority of the sentences fall into a few types but  if the tail is to be covered  a number of additional sentence types must be added. we estimate that a parser capable of analyzing some twenty sentence types and other syntactic conventions will be able to provide adequate fluency and completeness. it will not be able to accept anything the user wishes to say but will accept a subset of english that is  habitable  in the sense of watt {1 . 
1 the facilities required 
   the requests obtained from the subjects  which can be considered to be typical of those that will be made to a managementsupport system of this kind  can be divided into two major classes: requests for information about the problem situation and requests for information about the contents and capabilities of the system. the following are typical examples extracted from the user protocols. 
requests about the problem situation 
data retrieval 
what was production by plant by product  
how much did we sell to sears in '1  
functions of data 
what is the ratio of overhead cost to sales for the last 1 years  what is the percentage increase in sales of each product in 1  
models and what~if questions 
what was contribution margin for each plant  
what would profits have been if there was no deviation between selling price and list price  
would sales have decreased the price if product 1 was raised to give a margin of $1  
properties of entities and identity questions how many plants do we have  
which products are made by plant 1  
yes-no questions 
1. about the corporation 
do we have any repeat customers  
was any equipment purchased for long term depreciation  
1. asking if a sub-problem exists 
did the product mix change for any plant whose profitability had decreased from last year  were profit margins maintained in 1  
model definitions 
define p-cost to be the sum of overhead and production cost. 
define chcost = 
  cost in 1 - cost in 1 / cost in 1   
requests about the system 
regarding capability 
1. computational capability 
can you calculate percentages  
list all the functions you can perform. 
1. content capability 
can you produce a profit figure for each product at a specific plant  
can you give me data on product mix from each plant  
1 
regarding contents 
how far back does your information go  
do you have a forecasting model for demand  
do you have any information on customer satisfaction  
regarding composition of data items do overhead costs vary with volume  
where does transportation cost get included  
what makes up operating costs  
definition of data items and models define the terms  unit cost  and  unit price . 
how is profit calculated  
what is the definition of profit for a product  
the above examples indicate the kind of facilities requested by the subjects. requests inquiring about the causes and motivation of various states and events cannot  of course  be answered by such a system. similarly  it cannot accept information and respond to requests for data or facilities it does not possess. 
1 the knowledge base 
   a variety of different kinds of knowledge is required to analyze and respond to the requests obtained from the subjects. the system needs to have knowledge about data  about models  and about functions of data and model values. for each of these it requires different kinds of information. the system also needs to know the properties of entities and deduction rules that can be used to relate questioned properties to stored properties. in addition to knowledge about the problem situation and the environment the system also needs to know how to respond to different types of requests including those that are ambiguous  incorrect or cannot be analyzed by the system. if a request cannot be processed the system should ask the user to rephrase it and provide as much information as possible to assist him in doing so. 
   the total amount of knowledge required to respond to the 1 requests made by the subjects is presented in appendix iii of malhotra  1 . although the amount of knowledge is large  it is not intractable and it seems feasible to incorporate it into a management-support system. 
1 analysis of problem solving behavior 
   a paradigm of coming to grips with problem situations is described in malhotra . this states that managers attempt to understand a gross problem by checking lists of sub-problems that may contribute to it. this hierarchical process stops with the isolation of a set of sub-problems that can either be alleviated directly by actions or decisions or for which more information or expertise is required for further analysis. 
   in cases where the set of potential sub-problems does not yield an existing problem the manager follows one or more of three strategies: he goes back over the list of sub-problems and rechecks each one  perhaps using different data and different functions to test if it exists; he attempts to generate additional potential subproblems; or he reverts to more basic concepts and uses these to attack the problem. 
   the paradigm was supported by the problem-solving protocols of the subjects. its validation indicates that managers use a few basic processes to try to understand problem situations. thus  if the system provides capabilities to support these basic processes it will be useful for a wide range of management problems. moreover  if problem-solving processes are found to be stable over a wide range of managers or if they can be identified for a set of managers then the design of the system can be based upon them. 
   this brief description does not do justice to the paradigm. it is included here to support the generality of our results. 
1. preferred answering strategies 
   our basic contention underlying answer generation was that people appreciate brevity and tire of repetition. if they have faith in the system and it analyzes their requests carefully there should be tittle need to specify the question in the response. if data is asked for  it should be presented without any explanation. if the question is  who is our largest customer   the answer should be  sears   not  our largest customer is sears . defaults and assumptions made by the system should  however  be stated along with the answer on the principle that the user should know all the information used in generating the answer. 
in some cases  a request can be answered in a number of ways. 
some of these are preferable to others because they lead to system efficiency or because they support the user's problem-solving process better. the following sub-sections provide examples of prefered answering strategies. 
1 yes-no questions 
the system should respond to questions of the type: 
 do you have sales figures   
　　 can you show me overhead cost   by attempting to provide the data mentioned. 
questions of the type: 
　　 is transportation cost included in overhead   should be replied to with either a  yes  or with information about where transportation cost is really included. in general* the system should try to indicate the correct state of affairs rather than respond to such questions with merely a  no .  see also winograd 
.  
   in some cases  additional information should also be included with a  yes  answer. for example: 
　　was actual expense in plant 1 higher than budget   if it was  the system should anticipate the following  by how much   and provide the variance. 
1 identity questions after yes-no questions 
   yes-no questions asking whether entities with given properties exist are often followed by questions asking for their identities. 
 did any plants exceed their production budget in 1   
 which ones   
since this is a common sequence  also reported by woods   it seems desirable to check the properties of all the relevant entities in answering the yes-no questions  not stopping after the first positive instance  and to maintain the list of positive instances in a special register to answer the identity question. 
1 fuzzy discriminating functions 
some subjects asked yes-no questions  testing the existence of a 
1 

sub-problem  that required the system to make a judgement: 
 were profit margin* maintained in 1   
 did unit coats increase significantly last year   
such questions are 	identified 	by 	 fuzzy  	words such as 
 maintained    changed  and  same . since the system cannot provide the judgement needed to answer these questions  it should provide the data and ask the subject to draw his own conclusions. 
1 free standing noun groups 
   the sophie system  has a default that if s user types in a noun group which is a  measurement  he is assumed to want its value. some of the subjects tended to drop the  what is  before a 
   request for a data item and type just the noun group  optionally followed by preposition groups. the default does  therefore  seem to make good sense. 
1 definitions 
   .every entity known to the system should have a prepared definition and description that should be printed out if it is asked for or if the user makes an incorrect request related to it. in fact  there probably should be a definition and special messages to respond to different ways in which a request regarding that entity can be misphrased. 
1. system characteristics 
   it is time now to reconsider the system requirements described above in light of our assessment of the state of the art. in general  most of the facilities required can be provided with sufficient power and generality. some of them are difficult to provide but  on the balance  there seems to be adequate capability to build a system that will be very useful. 
   of all the facilities requested by the subjects data retrieval was the most popular. this is relatively straightforward to provide. the major difficulty is the matching of noun groups used to specify data with data names known to the system. this is discussed in detail in mslhotra . 
   formatting the answers and aligning the figures in tables with the decimal points one below the other and with commas after every three positions to indicate significance was found to be very important to the subjects' problem-solving process. some subjects also wanted to change the number of significant digits in the answer. these facilities were neglected in the prototype system but are not difficult to provide. 
   some subjects wanted to examine sets of data such as the profit and loss statement and the balance sheet and could  as an extreme example  ask for the general ledger. retrieving and presenting these named sets of data also does not present any significant technical problems. 
   some subjects wished to set a series of specifications to be used for all the succeeding requests until reset. for example   provide the following data for plant 1.  such a facility can be implemented by storing the specifications in special registers that are checked during the process of creating specifications for data retrieval. it seems desirable  however  to print out these specifications each time they are used since the user may forget he has set them and misinterpret the answers. as mentioned earlier  there seems to be a need for a simple command language for users who would use the system for a few  fixed types of data retrieval. such s facility can be provided easily and efficiently and would considerably reduce the burden of typing in long requests. 
the system should provide at least the following functions: 
 percentage    average    maximum    minimum    increase    sum    difference    change    variance   both accounting and statistical   and  distribution . functional capabilities are fairly straightforward to provide and the system design should lean towards prolixity rather than parsimony. 
   one of the more significant results of the experiment was the importance of models to the problem-solving process. not only did subjects ask for models as naturally as they asked for data  but most of them wanted to define new models and ask what-if questions that require models to answer them. it is very difficult  bowever to provide conversational motel-building facilities. the ability to describe them in english sentences and have the system set up appropriate internal structures is related to the general problem of having computer systems learn from information presented to them. besides  the knowledge required to build models is very complex and it is difficult to describe models in single sentences. learning from natural language input and the comprehension of a number of connected sentences is somewhat beyond the current state of the art. 
   since it does not seem feasible to provide model building facilities in natural english  the system should attempt to provide them in some other manner. we suggest that whenever the user attempts to define a model the system should invoke a special modelling sub-system. this sub-system would initiate s structured interaction with the user during which it would ask questions and the user would supply the information needed to build the model. the sub-system would  of course  make extensive use of system knowledge to frame the questions. in this manner  the user would have access to a fairly powerful model-building facility rather than a rudimentary  conversational model-building system. 
   what-if questions ask for the value of a target variable given hypothetical values for contributing parameters and states of nature. such questions can only be answered if a model exists with the target variable as output and the specified parameters and states of nature as inputs. the response generator to what-if questions should  therefore  start by looking for an appropriate model. if such a model can be found  the inputs should be picked up from the sentence or supplied by defaults and the answer created. if  however  a model cannot be found  the user should be told so and  if he wishes  led into the mode  building sub-system. 
   the ability to answer yes-no questions and identity questions is extremely important to the success of a managerial questionanswering system. indeed  yes-no questions were the third most popular syntactic type in the sentences obtained from users. such questions are difficult to answer because special pieces of knowledge are required to understand them. in the sentences: 
 who is our largest customer   
 is sears our largest customer   
the word  largest  acquires a special meaning  namely  the one who bought the most from us . 	the utility of such a piece of 
1 

knowledge is restricted to a narrow range of requests and a number of such pieces are required. nevertheless  it seems possible and necessary to provide adequate facilities in these areas. 
   the analysis presented above and in more detail in malhotra  shows that it is now possible to implement a system that mirrors the complexity of the managerial problem-solving process and allows both new and experienced users to work easily and naturally with it. powerful technology in natural language processing and knowledge representation and processing now exists and is being strengthened further. the next logical step seems to be to implement such a system for a real situation and learn from an analysis of the use that managers make of it. this is probably the most effective way to make progress in responsive support systems for managers. 
1. implementation issues 
   since our main result is that an english language support system for managers is feasible and one of the obvious directions for future research is to implement such a system  we should touch briefly on implementation issues. first  since the amount of knowl-
edge required  although tractable  is large such a system should be built for specific  limited problem domains. there may  thus  be a support system for budgeting  another for controlling production costs and so on. 
   second  such a system would resemble a service rather than a product it would have to be brought up especially for each problem area and it would change and grow with the managers and their jobs and their understanding of the problem domain. a knowledge-based system implies continuous modification. it seems best  at this stage  however  to relegate the function of adding knowledge to the system to an intermittent  background  system maintenance phase. the process of adding to the system will be extremely important to its success  however. 
   third  our investigation assumed a simple data base structured in the form of arrays. real world data bases are  however  very complex  consisting of sequential  indexed sequential  random  inverted and chained files. the retrieval mechanisms from such fields will need to be very sophisticated and use knowledge about the structure of the files. furthermore  certain kinds of questions cannot be answered from an inappropriately structured data base without a record by record search of the entire data base. these questions must be considered inappropriate for the data base and should receive an  error  response. 
bibliography 
1. burton  r r   semantically centered parsing system for mixed initiative cai systems   presented at the twelfth annual meeting of the association for computational linguistics  amherst  mass.. july 1  1. 
1. celce-murcia  m.   paradigms for sentence recognition.   in system development corporation final report no. hrt1. 
1. fillmore  c. t.   the case for case.   in  universals in linguistic theory   bach  e.  and harms r.   ed . holt  rinehart and winston  1. 
1. malhotra  a.   design requirements for a knowledge-based 
english language system for management: an experimental 
analysis.   ph.d. thesis  sloan school of management  m i t   cambridge  mass.  february 1. 
1. parzen  e.   modern probability theory and its applications   john wiley. new york  ny.  1. 
1. teitelman  	w.t 	 automatic 	programmering: 	the 
programmer's assistant.   fjcc  december 1. 
1. watt w. c   habiubtlity   american documentation  volume 1  no. 1  july 1. 
1. woods  w. a.  kaplan  r. m   and nash-webber b.   the 
	lunar sciences natural language system: 	final report   
bolt  beranek and newman  cambridge  mass.  june 1  1. 
1. winograd  t..  understanding natural language.   academic press  new york. 1. 
1 
