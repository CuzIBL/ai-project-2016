 
　　　d i s t r i b u t e d planning requires both a r c h i t e c t u r e s for s t r u c t u r i n g m u l t i p l e planners and techniques for p l a n n i n g   communication  and cooperation. we describe a family of systems for d i s t r i b u t e d c o n t r o l o f m u l t i p l e a i r c r a f t   i n which each a i r c r a f t plans i t s own f l i g h t path and avoids c o l l i s i o n s w i t h other a i r c r a f t . autopilot  the kernel planner used by each a i r c r a f t   comprises several processing   e x p e r t s   that share a common world model. these experts sense the w o r l d   plan and evaluate f l i g h t paths  communicate w i t h other a i r c r a f t   and c o n t r o l plan execution. we discuss four a r c h i t e c t u r e s for the d i s t r i b u t i o n of airspace management and planning r e s p o n s i b i l i t y among the several a i r c r a f t occupying the airspace at any p o i n t in time. the architectures d i f f e r in the extent of cooperation and communication among a i r c r a f t . 
1. 	introduction 
　　　d i s t r i b u t e d planning refers to the process by which m u l t i p l e processors cooperate to achieve a set of common o b j e c t i v e s . development of d i s t r i b u t e d planning systems requires two major a c t i v i t i e s : the s p e c i f i c a t i o n of architectures for s t r u c t u r i n g the cooperating processors  and the discovery and implementation of planning techniques to be used by each processor. we have undertaken both a c t i v i t i e s in an e f f o r t to develop methods for d i s t r i b u t e d control of a i r c r a f t moving through an a i r t r a f f i c c o n t r o l sector. this task domain has permitted us to investigate three important questions concerning cooperation: 
 1  what are the computational costs and benefits of d i f f e r e n t architectures for d i s t r i b u t i n g planning functions  
 1  how 	should 	d i s t r i b u t e d 	planners 	cope with 	incomplete 	and 	e r r o r f u l 	information  d i s t r i b u t e d planners t y p i c a l l y 	possess 	d i f f e r e n t 
* this research was sponsored by the defense advanced research projects agency  dod  under contract no. mda1-c-1. the views and conclusions contained in t h i s document are those of the authors and should not be i n t e r p r e t e d as representing the o f f i c i a l p o l i c i e s   e i t h e r expressed or i m p l i e d   of the defense advanced research projects agency or the u.s. government. knowledge bases  and no i n d i v i d u a l has a complete and accurate world model. such differences increase the complexity of coordinating planning e f f o r t s . 
        1  what are the pragmatics of cooperation  d i s t r i b u t e d planning should be superior to c e n t r a l i z e d planning only if methods can be devised f o r e x p l o i t i n g the resources of the m u l t i p l e processors. these methods must confront the t r a d e o f f s between l o c a l planning and requests for cooperation  and between i n f e r r i n g i n t e n t i o n s and requesting information from others. 
　　　to i n v e s t i g a t e these questions  we have implemented a planner c a l l e d autopilot. autopilot simulates the sensing  route planning  and communications a c t i v i t i e s of a s i n g l e a i r c r a f t f l y i n g through a h i g h - t r a f f i c a i r sector. it controls an a i r c r a f t by cooperating w i t h v i r t u a l clones of i t s e l f   each of which is assigned to and controls a d i f f e r e n t a i r c r a f t . in t h i s paper  we describe the planning techniques embodied in four s p e c i f i c versions of autopilot that d i f f e r in the amount of communication and cooperation among the m u l t i p l e planners. 
	1. 	the atc task domain 
       the task environment for autopilot is provided by a r e a l - t i m e a i r t r a f f i c c o n t r o l  atc  s i m u l a t i o n . figure 1 i l l u s t r a t e s a p o r t i o n of airspace used by the s i m u l a t i o n . the airspace includes airways   i n d i c a t e d by commas  that l i n k e n t r y / e x i t f i x e s  1  at the airspace boundaries  two a i r p o r t s     v and   #       and a navigation aid   *   through which a i r c r a f t can be vectored. during each run of the s i m u l a t i o n   twenty-six a i r c r a f t a r r i v e in the airspace at random times. every a i r c r a f t enters the airspace at a p a r t i c u l a r entry f i x or o r i g i n a t e s i t s f l i g h t at one of the a i r p o r t s . a i r c r a f t must be issued commands to depart  land  change course  and/or change a l t i t u d e in order to successfully navigate them to t h e i r d e s t i n a t i o n s . the simulation provides two types of i n f o r m a t i o n : the airspace display and the f l i g h t plans f o r a c t i v e and approaching a i r c r a f t . the airspace display  shown on the l e f t side of 
figure 1  portrays the locations of a l l a i r c r a f t in the airspace  t h e i r i d e n t i f i e r s   and t h e i r a l t i t u d e s in thousands of feet   e . g .   a1  x1 . every f i f t e e n seconds the d i s p l a y is updated and the a i r c r a f t move one mile   t o an adjacent   .   or         i n the d i r e c t i o n o f t h e i r current bearing. 
1 

the flight plan for each aircraft  shown on the right side of figure 1  displays  reading left to right  its status  active or approaching   its identifier  its current location  or origin  for pending aircraft   its destination  its altitude  in thousands of feet   and its bearing. for example  aircraft r  w i l l enter the airspace in one tine-step of the simulation at infix location 1  heading northwest at an altitude of 1 feet. its destination is exit fix 1. a potential route for r would take r northwest to  *  and then north 
to 1. 
　　　successful control of aircraft requires issuing commands to navigate planes to their desired destinations and maintaining at least three miles of horizontal separation or 1 feet of vertical separation between any two aircraft. a violation of any of these constraints produces an error  as does allowing an aircraft to exhaust its fuel supply. 

1. ibs distribution of punning effort 
　　　in our simulation  planning responsibility is distributed among the aircraft. each aircraft is controlled by an automated planner called autopilot. we refer to this allocation of function as an object-centered architecture for distributed planning. whenever a new aircraft appears in the airspace  a new autopilot clone is created and pertorms all planning and cooperation for that aircraft as it navigates from its origin to destination. 
　　　all autopilot clones are behaviorally identical and can be viewed as virtual copies of a generic atc planner. the structure of autopilot resembles that of an independent actor  1   or object  as in smalltalk |1   director | 1     or ross  1 . in the current implementation  we simulate multiple planners by a single planning system that assumes different perspectives for each aircraft. the planner spawns offspring for different aircraft that contain the data base and world model specific to each. the computational expertise resides in the generic planner and can be applied to any of the various data bases. 
1. the autopilot design 
　　　autopilot contains a design kernel common to a l l architectural variants we have investigated. figure 1 illustrates this kernel. 
       several processing modules function as experts that share data and results via a common data base  the world model. as in a hearsay-like model  1  1   performance of these experts is triggered by particular conditions in the world 

model  	and 	each 	expert posts i t s r e s u l t s in the 
world model as new knowledge or changes to e x i s t i n g knowledge. the world model contains such information as a i r c r a f t l o c a t i o n s   t h e i r f l i g h t plans or assumed f l i g h t plans  and i t s own d e s t i n a t i o n and t e n t a t i v e plans. 
　　　the sensor receives simulated radar returns in the form of airspace displays every f i f t e e n seconds. by comparing new displays to knowledge in the world model  the sensor compiles a l i s t of l o c a t i o n updates to be posted. 
　　　when autopilot is assigned to a new a i r c r a f t   the plan generator produces a set of t e n t a t i v e f l i g h t plans to navigate the a i r c r a f t from i t s o r i g i n to i t s d e s t i n a t i o n . the evaluator tests these t e n t a t i v e plans against the real or i n f e r r e d f l i g h t plans of other a i r c r a f t and posts predicted c o n f l i c t s in the world model. the plan generator uses t h i s information to e i t h e r attach a minor patch to an e x i s t i n g plan or to rep ian completely. 
　　　the communicator exchanges information and requests w i t h other a i r c r a f t . when planning is thwarted by environmental u n c e r t a i n t y   the communicator may request locations or intentions from o t h e r s . if the plan generator has f a i l e d to produce a c o n f l i c t - f r e e route  the communicator may request other a i r c r a f t to patch or replan t h e i r routes. 
　　　f i n a l l y   the c o n t r o l l e r implements the a i r c r a f t ' s f l i g h t p l a n . i t monitors the location of the a i r c r a f t and issues commands to a l t e r course or a l t i t u d e at the appropriate locations in the airspace. 
1. 	incremental punning 
　　　autopilot represents a plan in the world model as a schema w i t h several s l o t s to be f i l l e d during the planning process. for example  the completed plan for a i r c r a f t r in figure 1 is 
 plan1 
	aircraft 	r 
	commands 	 a1 	:1 a1  
	constraints   1  	 1   1   
route   1 1   1 1  . . .   conflicts 1 
	conflictsum   x  1    	 x  1    
length 1 value 1 parent nil offspring nil . 　　　the s l o t s in the plan schema contain information about the commands required to execute the p l a n   the x-y coordinates at which the commands must be executed  estimates of the o v e r a l l u t i l i t y of the p l a n   annotations of the p l a n ' s current predicted c o n f l i c t s   and a fourdimensional map of the executed plan   i . e .   a s p e c i f i c a t i o n of the l o c a t i o n of the a i r c r a f t at each point in t i m e   . some s l o t s in the plan schema are f i l l e d during plan generation  some during e v a l u a t i o n   and other during plan patching. 
the f o l l o w i n g paragraphs discuss these processes in more d e t a i l . 
1 . 1 . 	plan generation 
　　　autopilot produces route plans incrementally by planning approximately. the plan generator f i r s t produces w i t h minimal e f f o r t a few standard routes from i n f i x to the desired d e s t i n a t i o n by indexing a l i b r a r y of plan templates. each template is l i s t of commands  indexed by i n f i x / o u t f i x   that is guaranteed to take an 
a i r c r a f t t o i t s d e s t i n a t i o n from i t s entry f i x . these plans are then evaluated to determine the nature and l o c a t i o n of expected c o n f l i c t s . f i n a l l y   the best plans are r e f i n e d using a v a r i e t y of techniques to produce l o c a l patches that avoid the c o n f l i c t s . this incremental approach to planning has four advantages. f i r s t   it emphasizes the general adherence to designated 
airways and conventional r o u t i n g s t r a t e g i e s . second  plan f a i l u r e s are simple to diagnose and describe; t h e r e f o r e   i t i s possible t o patch accurately. t h i r d   the incremental planning strategy r e f l e c t s the approach used by r e a l a i r t r a f f i c c o n t r o l l e r s and by expert humans performing in the atc s i m u l a t i o n . f o u r t h   t h i s s t r a t e g y i s w e l l s u i t e d t o the d i s t r i b u t e d planning environment  since p r e d i c t e d c o n f l i c t s i d e n t i f y sets of a i r c r a f t t h a t must cooperate to solve t h e i r common problem. 
1. plan evaluation 	and c o n f l i c t 	detection 
       the evaluator detects c o n f l i c t s in candidate plans using a f a s t - t i m e lookahead. once candidate i n i t i a l plans are generated  the evaluator computes a four-dimensional route map of the locations to be occupied by the a i r c r a f t under each plan. converting plan commands i n t o route maps is c o s t l y ; however t h i s cost is o f f s e t by caching the r e s u l t s in the route s l o t of the plan schema. hence  each plan undergoes t h i s expansion only once. the route map is then compared to s i m i l a r maps of the projected or known plans of other a i r c r a f t in the airspace. maps are compared using an i n t e r s e c t i o n search that requires maintenance of a 1-square mile window around each a i r c r a f t . detected c o n f l i c t s t r i g g e r annotations of a p l a n ' s problems and u t i l i t y that are stored in the conflicts  conflictsum  and value s l o t s of the plan schema. 
1. 	plan refinement 
       the plan generator refines i n i t i a l plans whenever the evaluator detects c o n f l i c t s in every i n i t i a l p l a n . the patches f a l l i n t o three classes. timing patches a l t e r the time at which a p l a n ' s commands are executed without changing the commands themselves   e . g .   by d e f e r r i n g or promoting an a l t i t u d e change command . delaying patches insert new commands in a plan to delay an a i r c r a f t ' s a r r i v a l at a p a r t i c u l a r point   e . g .   looping . course a l t e r a t i o n patches i n s e r t a detour to avoid the c o n f l i c t l o c a t i o n . this requires d e l e t i n g several commands from the f l i g h t plan and replacing them w i t h new ones. 

　　　these patch types are representative of more general replanning c a p a b i l i t i e s . for example  i n t e r p o l a t i n g a loop is a kind of p r e r e q u i s i t e i n s e r t i o n   1     and course corrections amount to s u b s t i t u t i o n of subgoals   1   . 
       each patch is represented as a schema w i t h s l o t s encoding the computations required to evaluate patch effectiveness and modify a p l a n . the f o l l o w i n g presents an abstraction of a patch t h a t inserts a l e f t - l o o p i n t o a p l a n : 
 plan-patch loop-left 
type delaying direction l e f t prerequisite   c o n f l i c t point must not be too close to an airspace boundary else the loop w i l l take a i r c r a f t out of airspace  initiatepoint  use the e a r l i e s t point that s a t i s f i e s p r e r e q u i s i t e s and is p r i o r t o c o n f l i c t   deletecommand n i l addcommand  turn 	l e f t 1 degrees  cost low effectiveness high         to i n s t a n t i a t e a patch schema for use w i t h a p a r t i c u l a r p l a n   the plan generator attempts to s a t i s f y the prerequisites of the patch in the context of the plan. if s u c c e s s f u l   the generator applies the h e u r i s t i c s in the initiatepoint s l o t to select a point at which to i n s e r t a remedial command. the s p e c i f i c commands are then copied from the addcommand s l o t i n t o the plan i t s e l f . in some cases   e . g .   when d e f e r r i n g an a l t i t u d e change   commands i n i t i a l l y in the route must also be excised. the s p e c i f i c a t i o n s for such deletions reside in the s l o t deletecommand. f i n a l l y   the route s l o t is updated to r e f l e c t the new f l i g h t path e n t a i l e d by the patched p l a n . 
　　　the patching process is best viewed as a search i n v o l v i n g the plan generator and evaluator as co-routines. the generator i t e r a t i v e l y expands a plan tree for the a i r c r a f t in the world model using possibly flawed i n i t i a l plans as the parent nodes. offspring are generated through the a p p l i c a t i o n of one or more patches to the i n i t i a l plans. patches are applied to copies of the parent plan rather than the o r i g i n a l plan i t s e l f . hence  the modified o f f s p r i n g are d i s t i n c t data s t r u c t u r e s . whenever a new plan is posted in the world model  the evaluator c r i t i c i z e s the plan and posts the r e s u l t s of i t s c r i t i q u e . 
	the generator 	selects 	plans 	f o r 	expansion 
  i . e .   patch a p p l i c a t i o n   according to which current plan has the highest value in i t s value s l o t . this value r e f l e c t s the number of c o n f l i c t s remaining to be resolved and the length of the f l i g h t path. once a plan has been selected for patching  the plan generator applies only patches that generate b e t t e r o f f s p r i n g   i . e .   have higher values  than t h e i r parents. this h e u r i s t i c r e s u l t s in d e p t h - f i r s t / b e s t - f i r s t searches since o f f s p r i n g plans are always b e t t e r than t h e i r parents. planning terminates whenever one o f f s p r i n g plan has no c o n f l i c t s or when the plan space is exhausted--that i s   when no plan for the a i r c r a f t has a set of patches that remove a l l c o n f l i c t s . in t h i s case  the evaluator selects the plan w i t h the highest value for execution. 
       in the current implementations  searches t y p i c a l l y converge q u i c k l y on a s o l u t i o n . rate of convergence is governed by the density of s o l u t i o n s in the problem space  an inverse f u n c t i o n of the number of a c t i v e a i r c r a f t     the branching factor of the plan t r e e   and the depth of the plan tree. both the breadth and the depth of the t r e e are l i m i t e d . the branching factor is l i m i t e d by the number of patch types known and by the f a c t that p a r t i c u l a r patches do not s a t i s f y a l l prerequisites for a p p l i c a t i o n in a given s i t u a t i o n . the depth of the t r e e is l i m i t e d by the number of c o n f l i c t s found in i n i t i a l routes. 
1. distributed punning architectures 
       we are c u r r e n t l y e x p l o r i n g techniques for d i s t r i b u t e d planning in four versions of the object-centered a r c h i t e c t u r e . the f i r s t two v a r i a n t s exemplify cooperation without n e g o t i a t i o n . in the f i r s t v e r s i o n   the use of common planning rules and l o c a l inference obviates the need for communication of plan i n t e n t i o n s . in the second  a i r c r a f t communicate t h e i r plans but not replanning requests. the t h i r d and f o u r t h v a r i a n t s employ cooperative planning using d i f f e r e n t control regimes. the f o l l o w i n g sections describe these four v a r i a n t s and the modifications in the kernel planner they e n t a i l . 
1 object-centered 	autonomous --no 	communication 
       in t h i s most r e s t r i c t e d form of cooperation  a i r c r a f t plan autonomously without communication. thus  in t h i s version we excise the communicator from the autopilot k e r n e l . in l i e u of o b t a i n i n g f l i g h t plans from other a i r c r a f t   the sensor i n f e r s t h e i r plans from a l t i t u d e s   bearings! and 
nearest e x i t fixes or a i r p o r t s along t h e i r current f l i g h t paths. 
       due to the uncertainty associated w i t h such e x t r a p o l a t i o n   the sensor must c o n t i n u a l l y monitor the radar returns and the world model to detect changes in a i r c r a f t locations and v i o l a t e d assumptions about t h e i r f l i g h t plans. updating the hypothesised f l i g h t plans t r i g g e r s new c o n f l i c t detection checks by the evaluator. if new c o n f l i c t s are p r e d i c t e d   the planner attempts to patch the current plan to avoid the new c o n f l i c t   s   . if unsuccessful  the planner dynamically replans a new route. e f f e c t i v e cooperation is achieved through the use of global   r u l e s of the road  and precedence r u l e s   l i k e those used by operators of small v i s u a l l y controlled a i r c r a f t   boats  and automobiles. 
1. object-centered autonomous-limited communication 
　　　in t h i s version an a i r c r a f t can request plans from other a i r c r a f t . intentions can therefore be posted w i t h c e r t a i n t y and route maps accurately 

modeled rather than merely estimated. this version of autopilot therefore requires the communicator  communications channels  and protocols. proscribing n e g o t i a t i o n among a i r c r a f t places the burden of maintaining a i r c r a f t separation on the a i r c r a f t attempting to formulate a p l a n . as each new plane enters the airspace  it must develop a c o n f l i c t - f r e e plan w i t h respect to the f i x e d f l i g h t plans of other a i r c r a f t already in the airspace. 
　　　the sensor f i r s t posts other a i r c r a f t locations and the communicator c o l l e c t s and posts the f l i g h t plans for these a i r c r a f t . i n i t i a l plan generation by the planner may be interleaved w i t h the functions of the sensor and communicator. the evaluator simulates the outcome of plan execution w i t h respect to other a i r c r a f t locations and plans. if necessary  the planner attempts to patch the plan to eliminate c o n f l i c t s detected by the evaluator. when e i t h e r a c o n f l i c t - f r e e plan or the best a v a i l a b l e plan is posted as f i n a l   the c o n t r o l l e r monitors execution of the p l a n . 
　　　the u t i l i t y of these autonomous versions of the object-centered a r c h i t e c t u r e depends on several a t t r i b u t e s of the problem space and task domain. f i r s t   autonomous planning  w i t h or without plan communication  should succeed only when the problem space is dense in s o l u t i o n s - - t h a t i s   so long as it is possible to produce a c o n f l i c t - f r e e plan regardless of the number and routes of other a i r c r a f t in the airspace. second  autonomous planning is p r e f e r r e d over cooperative planning when the cost   i n time or resources  of local inferencing and planning is less than the cost of communications  n e g o t i a t i o n   and coordination. 
       introducing n e g o t i a t i o n into autopilot's planning behaviors e n t a i l s both costs and b e n e f i t s . i n t e r - a i r c r a f t cooperation is desirable because the c o n f l i c t i n g a i r c r a f t may have d i f f e r e n t options for r e s o l v i n g the c o n f l i c t . one a i r c r a f t may discover a simple patch for i t s plan while it may be impossible for another a i r c r a f t to remove the c o n f l i c t in i t s p l a n . 
　　　however  complications a r i s e from the need to synchronize local replanning a c t i v i t i e s . for example  assume a has a route that c o n f l i c t s at p1 with b and at p1 w i t h c. suppose that a can patch i t s plan to remove i t s c o n f l i c t with c but must rely on b to repian to remove t h e i r mutual c o n f l i c t . b cannot assume that a's plan w i l l remain f i x e d since a is patching i t s plan to accommodate c. in general  d i f f e r e n t c o n f l i c t s  subproblems  may not be independent  and local planning cannot guarantee a g l o b a l l y s a t i s f a c t o r y plan. thus  cooperation through n e g o t i a t i o n and communication requires e f f e c t i v e coordination regimes. the f o l l o w i n g two a r c h i t e c t u r a l v a r i a n t s embody d i f f e r e n t techniques for c o o r d i n a t i o n . in each case  requests for cooperation are i n i t i a t e d by an a i r c r a f t that f a i l s to f i n d a c o n f l i c t - f r e e plan for i t s e l f . 
1. 	object-centered h i e r a r c h i c a l l y cooperative 
       i n t h i s v e r s i o n   the a i r c r a f t c u r r e n t l y planning  a  orchestrates the attempts to e l i m i n a t e c o n f l i c t s from i t s p l a n . figure 1 i l l u s t r a t e s the coordination regime. a's 
evaluator 	f i r s t 	selects 	i t s 	best 	p l a n . 	the 
communicator then passes a message to another a i r c r a f t  say b  that c o n f l i c t s w i t h a's p l a n . the message contains a's plan and requests t h a t b patch i t s plan under the assumption that a w i l l execute i t s p l a n . if b's r e t u r n message contains a successful patch  a makes the same request of the next a i r c r a f t  say c  w i t h a predicted c o n f l i c t . a passes both i t s plan and b's t e n t a t i v e patch. if c cannot patch under the given c o n s t r a i n t s   then a's evaluator w i l l abandon t h i s p l a n   select i t s next best p l a n   and the communicator w i l l begin the n e g o t i a t i o n process again. 
1. 	object-centered asynchronously cooperative 
　　　the same type of cooperation may be achieved through asynchronous  p a r a l l e l replanning e f f o r t s . in t h i s case  the planner r e q u i r i n g assistance does not d i c t a t e a p a r t i c u l a r   favored p l a n . rather  the planning a i r c r a f t  a  broadcasts i t s set of p o t e n t i a l plans to a l l a i r c r a f t in the c o n f l i c t set  b  c  e t c .     but sends no constraints concerning what assumptions they must adopt regarding a's or the o t h e r s ' patches. each a i r c r a f t simultaneously attempts to patch i t s own plan to remove c o n f l i c t s predicted between it and a. solutions are communicated to a as t e n t a t i v e plan r e v i s i o n s . 
　　　when b returns a plan to a that removes a common c o n f l i c t   b also sends the assumptions under which it generated the s o l u t i o n - - t h a t i s   the plan for a that b assumed in i t s r e v i s i o n . a must maintain a record of a l l proposed p a r t i a l s o l u t i o n s and h a l t the replanning process when  a  it has received a complete set of c o n f l i c t e l i m i n a t i o n patches for one of i t s p o t e n t i a l routes  and  b  the proposed patched plans of the other a i r c r a f t do not c o n f l i c t w i t h each other. 
       such cooperation accelerates the planning process by e x p l o i t i n g the p a r a l l e l processing c a p a b i l i t i e s of m u l t i p l e a i r c r a f t . when numerous pairwise c o n f l i c t s must be resolved  the sequential s o l u t i o n method e n t a i l e d by h i e r a r c h i c a l c o n t r o l may require too much time to converge on a s o l u t i o n . however  in the asynchronous cooperation regime  speed is achieved at the cost of a d d i t i o n a l bookkeeping and evaluation at a. 
1. 	system performance 
we have implemented the limited-communication autonomous v a r i a n t and the h i e r a r c h i c a l l y cooperative v a r i a n t of autopilot in interlisp on a dec-1 at rand-ai. they communicate over the 
arpanet w i t h the atc s i m u l a t i o n   a c program r e s i d i n g on a pdp-1. these v a r i a n t s d i f f e r only in the a r c h i t e c t u r e in which autopilot is embedded  but not in the planning or sensing 

capabilities of each aircraft. table 1 presents performance data for these two architectures. both perform with low error rates on simulation runs in low* to medium-density airspaces   i . e .   1 minute runs . in high-density airspaces   i . e .   1 minute runs   the hierarchically cooperative variant outperforms the autonomous system. this reflects the additional planning options that can be considered in cooperative architectures and that are required when air t r a f f i c is heavy. 

	1. 	conclusions 
　　　we have illustrated several methods for distributing planning responsibility among multiple processors working toward a common set of objectives. in future work we w i l l implement and evaluate the performance of other architectures and other variants on the object-centered architecture. in so doing  we w i l l emphasize the development of more sophisticated bargaining methods and communications protocols. we also hope to determine how dense  in solutions a problem space must be to utilize each of our developed architectures successfully. 
       in order to demonstrate our candidate architectures  we have introduced several simplifications to our distributed planning environment. these include  1  simulation of multiple planners by a single planning program   1  error-free communications   1  limited route planning and revising heuristics  and   1  complete cooperation with no competition among different aircraft. our future work w i l l remove these simplifications from our task environment. in 
1 

p a r t i c u l a r   we plan to achieve true d i s t r i b u t i o n by demonstrating multi-processor control of real autonomous v e h i c l e s . 
　　　our 	current 	work 	also 	addresses 	goals extending 	beyond 	a r e p e r t o i r e of domain-specific planning and patching techniques. 	in 	p a r t i c u l a r   the o b j e c t - o r i e n t e d programming techniques we have developed 	suggest 	a 	general 	framework 	for f u n c t i o n a l l y 	d i s t r i b u t e d   	communicating planners. at the same time  we c u r r e n t l y know more about how to 	model 	cooperation than about what cooperation should be modeled. 	we 	s t i l l 	lack 	a 	theory 	of cooperation 	that 	would 	provide 	answers 	to questions such as: when should 1 	request 	a 	plan from 	another  	how 	much 	e f f o r t should 1 expend planning 	before 	requesting 	another 	to 	replan  under 	what 	conditions 	should 	objects 	plan for others in a d d i t i o n to themselves  	such 	questions are 	at the heart of e f f e c t i v e cooperation in many d i s t r i b u t e d planning domains. 
acknowledgments 
　　　this work has b e n e f i t t e d from the substantial c o n t r i b u t i o n s 	of james g i l l o g l y   frederick hayesroth  randall steeb  and robert wesson. 
