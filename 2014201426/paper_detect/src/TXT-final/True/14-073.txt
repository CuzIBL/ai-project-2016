 
　　　we have been developing a debugging aid t a i l o r e d to novice programmers learning to use a simple asaertional database language. based in part on e x i s t i n g programmer's apprentice and debugging p r o j e c t s   our system makes several novel c o n t r i b u t i o n s : it is oriented towards a large audience  several hundred per year  of computernaive users; the system deals with argument passing  recursion  and s i d e - e f f e c t s . symbolic evaluation of the user's code produces an e f f e c t - d e s c r i p t i o n which is compared with an idealised e f f e c t - d e s c r i p t i o n  derived from a 
　　　l i b r a r y p l a n   . the l i b r a r y plan uses domains p e c i f i c knowledge to allow the user a great deal of freedom to invent alternate approaches to the programming task at hand. based on e f f e c t d e s c r i p t i o n mismatches  a v a r i e t y of h i n t s for correcting the code can be given to the student. 
* this research is supported by grants from the u.k. social science research council  hr1  and the german academic exchange service. 
　　　extensive user aids ensure that students enter lexically and syntactically correct programs. even so  the programs typically f a i l to perform as intended. while realising that such failures can be of great pedagogical value  our aim is to develop a technique for helping users circumvent hurdles 
which they might find too tedious to deal with or which may prevent them from attacking pedagogically more valuable tasks. since our students normally work on their own  via dial-up lines to one of our decsystem-1 s   the provision of intelligent debugging aids is of great practical benefit. 
　　　students write programs on one of several suggested topics. schema-matching  simple inferencing  and children's subtraction skills are among the favourites. the subtraction task is particularly interesting  because solo has no numerical primitives  and thus students must think very carefully about how to represent numbers in a database  what operations to allow  etc. we can provide our debugging assistant with a fair amount of knowledge about subtraction  which makes it a good testbed for our ideas. it is important to note  however  that we do not expect the students to have to work towards implementing a particular algorithm. on the contrary  one of the novel aspects of our approach is that we encourage the students to come up with their own representations and algorithms. the data representation they choose w i l l of course influence the algorithm they use  and vice versa. our debugging assistant is provided with detailed knowledge of a wide range of possible data structures which could be used to represent subtraction tables  along with an abstract description of effects to be achieved by a subtraction program. only after examining the student's representation does the assistant decide what the 'idealised effect description' for that student's code should be- i.e. what changes to the assertional data base ought to occur as a result of a successful run of his program. 
　　　the debugging assistant deals with parameterised subroutines  conditionals  and side effects  thus extending the pioneering work of adam and laurent   goldstein   miller and goldstein   and ruth . it relies extensively on a language-independent 'plan diagram' representation developed by rich and shrobe   
and waters . the latter is the basis for computing the effects of programs and program segments  which in turn gives the debugging assistant a way to understand what the program 
1 
achieves  and a way to compare this with what the program should have achieved. in the case of small mismatches  it is possible to recommend a particular patch to the student. more importantly  however  since we don't want to write the entire program for the student  is the generation of tailor-made counterexamples to provoke the student into thinking up his or her own solution. 
　　　when a student gets stuck  he or she can invoke the debugging assistant by typing help debug. the assistant investigates the student's code and data base in several phases  as outlined below: 
　　　* translation: user programs are translated 
 as they are entered  into a language independent 'plan diagram* notation  pdn   1  1  1  which encodes the control flow  the data flow  and a declarative description of each program's overall effect. during translation  three kinds of 'irrational code' can be detected  cf.  : 1  unreached code;  1  an unbound check variable used following the 'absent' branch of a check statement;  1  useless code  which includes variable binding without later reference  assertion and deletion of the same data base triple  and superfluous checks. the translation phase is described in . 
　　　* plan recognition: certain sequences of code  some of which are specific to solo  others of which are specific to the subtraction task  can be recognized in their pdn form as manifestations of various 'standard library plans'. this recognition is performed by referring to a plan library  which knows not only how to recognize plans  but also what their effect descriptions are. we have identified over a dozen standard library plans which are manifest in the code of actual solo users. a typical plan is 'simple net traversal'. in terms of the plan library of shrobe et. a l .  this is a 'generator' plan  which recursively fetches all the nodes along a chain of a particular relation  e.g. nodes n1   n1 and n1 in the network below: 

this in turn can be used as part of a more complicated plan  such as 'generate and side-effect each'. this plan is the basis for the infect program shown in fig. 1- infect generates a sequence of nodes by simple net traversal  steps 1 and 1a   and unconditionally side-effects every one of them  step 1 . the role of such plans is discussed in . 
　　　* symbolic evaluation: an analysis is made of a l l possible pathways which the program might have explored  and an effect description is generated  providing a declarative account of what the program achieves in terms of changes to the data base. this is especially important for those pieces of the program which did not appear to match any known plans in the plan library. this phase is described in section ii below. 
　　　* effect description matching: the effect description of the student's program i1 now compared with an idealised effect description to 
find mismatches. the idealised e f f e c t description is computed by expanding a domain s p e c i f i c l i b r a r y plan in a top-down fashion to mesh with the student's own chosen data base representation  which we analyse bottom-up . the debugging assistant has c r i t e r i a f o r detecting near misses  and h e u r i s t i c s for suggesting how to repair a program. if t h i s f a i l s   the e f f e c t descriptions can s t i l l provide the basis f o r generating useful counterexamples which may help the student to focus more c l e a r l y on the underlying cause of the bug. section i i i discusses e f f e c t description matching in some d e t a i l   and gives examples of the kinds of bugs which our system can c u r r e n t l y deal w i t h . 
　　　a l l of the examples shown below run in our maclisp implementation  although the debugging assistant is not yet robust enough for use in a ' l i v e ' student environment. 
ii deriving effect descriptions by symbolic evaluation 
a. symbolic evaluation describes a  program ' s effect by stepping through a l l cases 
　　　symbolic evaluation serves as a t o o l f o r deriving a canonical description of the e f f e c t that a user program w i l l have  when run in some environment. this description can be compared with the effect description of known   l i b r a r y   plans. such a 
　　　comparison w i l l show that the program e i t h e r behaves as intended by the t u t o r   deviates   s l i g h t l y     i n which case we can suggest a patch   or deviates  grossly    i n which case we can derive counter-examples . 
　　　solo programs t y p i c a l l y modify a global data base by s i d e - e f f e c t s . a procedure receives arguments and i m p l i c i t l y an input data base 
  d b - i n     and produces an output data base  db-out . the effect of a program is described by a tree which at i t s root has db-in and at i t s leaves has db-out for each possible c o n d i t i o n . 
　　　the data base consists of a set of t r i p l e s   each having the form t r i p l e =   source   link   target   
　　　we represent a data base as an association l i s t of bindings  where each binding is binding =  bind   source   link     target   
　　　the o r i g i n a l data base  a f t e r the student has used a problem-specific setup procedure  and possibly a f t e r a series of top-level assertions  can then be represented as dbo -   bind   source1   link1     t a r g e t 1     . . . | 
by  the binding of  a b  in e   abbreviated 
  get a b       we refer to the target of the f i r s t binding whose l e f t part is  a b  in a data base e. 
a l t e r n a t i v e environments are represented as a cases 
1 
statement of the form: 
	 cases   predicate1   environment1   	. . . 	  
　　　the predicate can r e f e r to node i d e n t i t y   e . g .  -  get a b  c    or to the presence of a binding  e . g .  present  source    l i n k     . we i n t e r p r e t the l a t t e r predicate as true in an environment e if   source   link   is bound in e. 
b. effect descriptions 	f o r 	solo 	p r i m i t i v e s 
　　　each p r i m i t i v e step in a plan diagram is an instance of some class which has associated with i t s e l f the knowledge of how it a f f e c t s the data base. symbolic evaluation produces the f o l l o w i n g :  1  augmentations to db-in   f o r forget and note steps ;  1  a l o c a l binding environment;  1  a cases statement   f o r check steps . 
       check steps come in two v a r i e t i e s : with an open or a closed variable as the t a r g e t . a check w i t h an open variable produces a l o c a l binding to that v a r i a b l e . the l o c a l binding environment is not shown in the e f f e c t description since it does not change the data base. instead  the binding environment is used f o r f i n d i n g the s u b s t i t u t i o n of a variable in terms of access to the data base through the procedure's input parameters. 
　　　here is an example taken from a d e f i n i t i o n used in a student's subtraction program. it looks up the difference between two numbers /a/ and / b / by consulting some table t  pointed to by the r e l a t i o n 'subtbl' emanating from node / a /   . the r e s u l t   r  is stored on the node /ans/. the student could have chosen to represent subtraction tables in the form of simple r e l a t i o n s   e.g. 1  1  1  1  e t c .   but has instead opted for a more 
f l e x i b l e representation of the form 
1-subtbl  1sub  1sub 1 -   1 . this allows a d d i t i o n and m u l t i p l i c a t i o n tables to be stored in the data base as w e l l . the use of i n d i r e c t accessing of tables gives the procedure i t s name  ' d i f f - i n d ' : 
to diff-ind /a/ / b / /ans/ 
1 check /a/ subtbl  t 
1a if present: continue 
	1b if 	absent: 	exit 
1 check *t / b /  r 
1a if present: continue 
	1b if 	absent: 	exit 
1 note /ans/  val *r 
f i g . 1 
　　　for the purposes of symbolic evaluation  here are the key events which occur in the above procedure: 
　　　* at step 1a  t is bound to  get /a/ subtbl . 
　　　* at step 1a  r is bound to  get  get /a/ subtbl  b . 
　　　* at step 1  db-in is augmented by  bind  /ans/ val   get  get /a/ subtbl  / b /     . 
　　　a check-step produces two possible environments  which are represented as a l t e r n a t i v e branches of a cases statement. this y i e l d s the f o l l o w i n g e f f e c t d e s c r i p t i o n f o r diff-ind in environment e: 
1 diff-ind /a/ / b / /ans/  -
1  cases   present / a / subtbl  
1  cases   present  get / a / subtbl  / b /   
1   bind 	 /ans/ val  
1  get  get / a / subtbl  
1 /b/   . e     
1  t 	.e  
1  t  e  
f i g . 1 
       it is possible to avoid the s p l i t i n t o a l t e r n a t i v e cases if the   source   link   p a i r of the check is known to be present or absent in the current environment. this occurs if a case predicate f u r t h e r up in the tree  possibly at dbo  implies t h i s . for example  in the case of an invocation of diff-ind in an environment where both case predicates are known to be true   i . e . / a / ' s subtbl l i n k and that t a b l e ' s / b / l i n k are both known to be present   the above e f f e c t d e s c r i p t i o n would be s i m p l i f i e d t o : 
	{ bind 	 /ans/ val  
 get  get / a / subtbl  / b /     . e   
　　　a check with a closed variable or constant as target is translated as f o l l o w s : 
	 check  a b c   present-code   absent-code   	-  
 cases     -  get a b  c   present-code '    t  absent-code '   
	where  form ' 	is the t r a n s l a t i o n of  form . 
　　　a step containing a c a l l to a user-defined procedure in some environment db-in is translated as: 
  user-proc-name    a r g l i s t     =  
	 db-out 	  user-proc-name   arglist  db-in   
here  db-out  form   denotes the output environment produced by the symbolic evaluation of  form  which w i l l be expanded i n - l i n e . 
　　　a useful rule f o r s i m p l i f i c a t i o n of user procedure c a l l s i s : 
	 db-out 	  user-proc-name  
 arglist  
	| binding  .  env     	-  
  binding  
	 db-out 	  user-proc-name  
 arglist   env   | 
which is applied whenever it can be shown that the user procedure does not depend on  binding . 
1 
1 watching the effect description with a domain-specific library plan  dslp  
　　　the t y p i c a l output of symbolic evaluation w i l l be a h i g h l y nested cases statement with get-compos i t i o n s embedded in the predicates and environment. unless we can assign  meaning  to these get-compos i t i o n s   we cannot i n t e r p r e t t h i s as a s o l u t i o n to the student's task  since the student may have chosen from a v a r i e t y of data representations  each r e q u i r i n g special access and data base change operations. to take a rather simple example  the student may have asserted t r i p l e s l i k e  1 compl 1    1 compl 1    etc. if we knew that these t r i p l e s represented a 1-complement f u n c t i o n   we could parse  get x compl  as  1-complement x  f o r any x. our assistant has a repertoire of low l e v e l dslps which extract t h i s knowledge from the student's data base f o r each possibly useful function or predicate in the subtraction domain   e . g . add1  sub 1  v a l - o f   geq . 
　　　once these low l e v e l dslps are recognized  we can do a top-down analysis s i m i l a r to that of ruth   1     s t a r t i n g from a high level dslp which is predefined by us for each p a r t i c u l a r task. we w i l l now focus on a t y p i c a l task undertaken by our students  namely w r i t i n g a solo program to perform two column s u b t r a c t i o n . the student is given d e f i n i t i o n s of setup and answer procedures which impose a layout of the form: 

　　　the dslp for t h i s task is l i k e a grammar that can be used to recognize a l l possible v a r i a t i o n s in the actual e f f e c t description of the user's code. for 1 column subtraction the dslp has the following d e f i n i t i o n   o m i t t i n g db-out f o r b r e v i t y   : 

　　　the assistant recognizes this as a function at the top of the definition hierarchy and symbolic evaluation expands it by inserting the effect descriptions of the called functions  and so on recursively for these . the resulting effect description is a large composition of gets  which ideally should be matched by 1-col-sub. 
　　　recognition now proceeds top-down  involving the sub-plans val-of  geq  diff  borrowed-from and borrowed-by. each of these sub-plans is itself rewritten to conform with the particular representation adopted by the student. e.g. the sub-plan for 
dealing with a borrowed-from column containing the digits x and y can be re-written in two ways: 

　　　similarly  the diff plan  which implements x - y for x   y  must be rewritten in terms of primitives which the student may have elected to use. the difficulty here is that the student may have chosen to implement ' d i f f in terms of tables in the data base or a recursive counting procedure. we w i l l consider both representations: 
1. the student may have invented a 1-digit subtraction table 
　　he may have chosen among a wide variety of table representations. we represent these as a class hierarchy  which for each class has the associated rule for rewriting the user's effect description into diff.  diff  is an arbitrary symbol invented by the user. 
1 
and seek confirmation u n t i l we can decide on the actual class used by the student. then we look for a l l the entries of the table and create an object diff which has associated with it the code to recognize   d i f f a b     e.g. as  get  get a sub  b   . data base analysis reveals the frequent error-type of missing or inconsistent entries in the data base. t r i p l e s which belong to no pre-defined class  but   p a r t i a l l y   match some class   i . e . because they contain a known link-name  are categorized as inconsistent and the user is informed about them. 
1. the student may have represented 	' d i f f ' procedurally 
　　　using add1 and sub 1  he may have w r i t t e n a recursive procedure to implement ' d i f f . since a solo procedure can only have an e f f e c t by sidee f f e c t i n g the data base  the dslp f o r a procedural implementation has to change s l i g h t l y . any function f  which is represented procedurally as f-proc w i l l be transformed in the l i b r a r y plan as f o l l o w s : 
　　  bind   v a l - o f x  	 f   a r g l i s t       	. e  	-   f-proc  arglist  n e   where n is the node to be s i d e - e f f e c t e d . 
　　　the following example shows a t y p i c a l student implementation of ' d i f f together with the e f f e c t description produced by the debugging a s s i s t a n t : 
to diff-rec / x / / y / /ans/ 
1 check equals /x/ / y / 
1a if present: note /ans/ val 1; exit 
	1b if 	absent: continue 
1 check /x/ sub1  x1 
1a if present: diff-rec *x1 /y/ /ans/; continue 
	1b if 	absent: exit 
1 check /ans/ val  v 
1a if present: continue 
	1b if 	absent: error; exit 
1 check 	*v add1  v1 
1a if present: note /ans/ val *v1 
	1b if 	absent: error; exit 
symbolic evaluation f i r s t produces: 
d i f f - r e c  x y ans db-in  -
 cases 	  = 	 get equals x  y  
  bind  ans val  o  . d b - i n }   
  present  get x sub1   
  bind  ans val  
 get  get ans val  add1  1 . 
  s e l f  get x sub1  y ans d b - i n         
　　　this matches a recursion pattern f o r which there is a dslp. the binding being affected in the terminating case  ans val  is i d e n t i c a l to that of the post-recursive step  which means that  ans val  is successively rebound. the dslp s i m p l i f i e s t h i s to an instance of a p r o t o t y p i c a l data base entry: 
 db-entry value  bind  ans val  g1  i n i t   g1 . 1   r e c - r e l   x .  get x sub1   
            g1.  get g1 add1    t e r m - i f  =  get equals x  y     
　　　it says that the value is an  ans val  binding whose target can be computed by s u b s t i t u t i n g for g1 the i n i t value and then stepping through the r e c - r e l a - l i s t s u b s t i t u t i n g for g1 u n t i l t e r m - i f is t r u e . this representation has the advantage that other recursive implementations   i . e . a t a i l - r e c u r sive one  can be mapped to an equivalent db-entry. the dslp f o r d i f f - p r o c w i l l match t h i s db-entry instance modulo renaming and s u b s t i t u t i n g  subl x  for  get x sub1 . 
iv comparing effect descriptions of user plans with library plans 
　　　a v a r i e t y of user programs f o r a given task can be recognized as having the same e f f e c t descr i p t i o n as a pre-stored plan. the reduction to a canonical form allows the user to  1  invent a r b i t r a r y names   1  order steps a r b i t r a r i l y    1  break 
up procedures a r b i t r a r i l y i n t o sub-procedures   1  pass values through intermediate nodes of the data base  and  1  invent his own data representation. 
　　　what happens if the user's program does not match a l i b r a r y plan  
　　　our goal is to give the student as much help as possible in detecting the underlying cause of an e r r o r . here  the effect descriptions are useful too: by using the l i b r a r y plan to generate the getcompositions corresponding to his data-represent a t i o n   we can compare the terminal nodes of both 
his and the dslp's e f f e c t description for each c o n d i t i o n .  the assistant takes care of s i t u a t i o n s in which nested cases must be reordered for both trees to match.  
　　　a very frequent error which can be detected by comparing e f f e c t s at terminal nodes is 'names u b s t i t u t i o n '   e . g . the student writes w and means v   . the assistant compares the bindings added or deleted at each terminal branch of dslp  goal bindings  g i   with those of the user program  actual bindings  a i   . assume it finds a mismatch of two bindings at some terminal branch: 
goal-binding: g =  bind  g1 g1  g1  a c t u a l - b i n d i n g : a =  bind  a1 a1  a1  
　　　for example if in l i n e 1 of diff-ind   f i g . 1  the code were note /ans/ val *t  then lines 1 of i t s e f f e c t description   f i g . 1  would be: 
	  bind  ans val   a subtbl   . e  	| a 
instead of 
     bind  ans val   get  get a subtbl  b     . e| } g as suggested by 1-col-sub   l i n e s 1 of f i g . 1   . 
　　　we go up in the symbolic evaluation tree to the place where a was achieved using variable w   i . e . l i n e 1 of diff-ind using variable t   . if the mismatch was in pair   a i   g i     and in the local environment some other variable was bound to g i   we can propose s u b s t i t u t i n g it for the one used in the 
1 

code. in our example the mismatch was in |a1 g1  with a1 being t  and g1 being r  so a s u b s t i t u t i o n of r for t at l i n e 1 is suggested to the student. 
if gi is not bound l o c a l l y   we look at the 
check  or procedure c a l l   where w was bound and recursively search f o r the goal of binding w to g i . in case of success  we ask the student whether he wants to accept the proposed renaming. 
       if t h i s f a i l s   we t r y step i n s e r t i o n   because another t y p i c a l source of errors in solo is students f o r g e t t i n g a level of indirectness   i . e . using the source of a t r i p l e   instead of the target along some l i n k   . lines 1 and 1 in subtract   f i g . 1  manifest t h i s e r r o r   given the implementation of diff-ind   f i g . 1   . 
     a check step can be inserted to correct t h a t   if by s u b s t i t u t i n g  get s k  for some subexpression s in ai  where k is some constant l i n k     ai can be made equal to g i . in subtract the actual effect i s : 
  d i f f - i n d b d f  	! a 
whereas the goal in 1-col-sub  lines 1 of fig. 1  gives 
  d i f f - i n d  get b val   get d val  f  	  g 
and thus k - val. the i n s e r t i o n of two check statements of the form check b val  b-val and modification of the c a l l s of diff-ind in lines 1 and 1   f i g . 1  is suggested. 
　　　if step i n s e r t i o n f a i l s also  we look at the p o s s i b i l i t y of reversed present and absent branches   c f .   1     . this manifests i t s e l f in the effect description such that the correct data base change has occurred  but at the wrong branch of the t r e e . in such cases  the user is queried about whether the clauses of the check statement should be reversed. 
　　　if t h i s f a i l s also  our l a s t resort is to look f o r a branch of the tree where the conditions are c o r r e c t   but there is a disagreement in the e f f e c t . the assistant chooses a counterexample that would run through t h i s branch of the t r e e   and asks the student to t r y that example on his program. consider l i n e 1b in diff-ind   f i g . 1   . the student did not consider the case where  geq a b  does not hold. the e f f e c t description for subtract   f i g . 1  has no e f f e c t where it should match lines 1 of 1-col-sub. we c o l l e c t the case predicates that lead to t h i s leaf of the symbolic evaluation t r e e   and see that under the condition 
 and  present  b subtbl   
	 not  geq   v a l - o f b  	  v a l - o f d     
subtract would f a i l . since the assistant knows that   v a l - o f b  and   v a l - o f d  are d i g i t s   it generates values which f u l f i l l t h i s condition and asks the student to t r y his program with those. 
v conclusions and further work 
　　　our work demonstrates how a combination of domain-specific knowledge and symbolic evaluation techniques can be applied to b u i l d i n g a help f a c i l i t y for novice programmers. writing programs in an elementary assertional data base language l i k e solo is experienced by our students as a simple and natural entry point i n t o programming. however  automatically coping with the sorts of bugs which arise through programming by s i d e - e f f e c t requires extensions to e a r l i e r work on program understanding and debugging. the techniques we have employed give the students a f a i r amount of freedom in choosing t h e i r own representations  a fact which r e f l e c t s one of the main goals of the course they are taking  i . e . understanding computer modelling and knowledge representation. 
　　　we are currently extending the plan l i b r a r y in accordance with empirical observations  in order for the debugging assistant to be capable of handling a wider range of programming tasks. 
