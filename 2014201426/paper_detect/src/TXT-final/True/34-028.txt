 
       we u s u a l l y t h i n k of plans as l i n e a r sequences o f a c t i o n s . this i s because plans are u s u a l l y e x ecuted one s t e p at a t i m e . but p l a n s themselves are not c o n s t r a i n e d b y l i m i t a t i o n s o f l i n e a r i t y . t h i s paper d e s c r i b e s a new i n f o r m a t i o n s t r u c t u r e   c a l l e d the p r o c e d u r a l n e t   t h a t r e p r e s e n t s a p l a n as a p a r t i a l o r d e r i n g of a c t i o n s w i t h respect to t i m e . by a v o i d i n g premature commitments to a p a r t i c u l a r o r d e r f o r a c h i e v i n g s u b g o a l s   a p r o b l e m s o l v i n g system u s i n g t h i s r e p r e s e n t a t i o n can d e a l e a s i l y and d i r e c t l y w i t h problems t h a t are o t h e r wise v e r y d i f f i c u l t t o s o l v e . 
	i 	introduction 
       when we t h i n k of p l a n s in our everyday l i v e s   or conceive of plans f o r a computer to c a r r y o u t   we u s u a l l y t h i n k of them as l i n e a r sequences of a c t i o n s . the sequence may i n c l u d e c o n d i t i o n a l t e s t s o r l o o p s   but the b a s i c idea i s s t i l l t o d o one step a f t e r a n o t h e r . 
       a l t h o u g h the e x e c u t i o n of a p l a n is essent i a l l y l i n e a r   a plan i t s e l f may be thought of as a p a r t i a l o r d e r i n g of a c t i o n s w i t h respect t o t i m e . 
       this paper w i l l show how  f o r c e r t a i n c l a s s e s of problems  the r e p r e s e n t a t i o n of p l a n s as n o n l i n e a r sequences of a c t i o n s enables a problem s o l v i n g system t o d e a l e a s i l y and d i r e c t l y w i t h p r o b lems t h a t are o t h e r w i s e v e r y d i f f i c u l t t o s o l v e . 
	ii 	an example 
       there is o n l y one a c t i o n t h a t can be a p p l i e d to the b l o c k s . puton  x y  w i l l put block x on y. puton  x y  is n o t a p p l i c a b l e unless x has a c l e a r t o p   and unless y is the t a b l e or it has a c l e a r t o p . the problem is to develop a sequence of a c t i o n s t h a t w i l l achieve the goal s t a t e . 
       this example is presented by sussman  1  as an  anomalous s i t u a t i o n   f o r which h i s hacker program c o u l d not produce an o p t i m a l s o l u t i o n . other p l a n n i n g programs u s i n g means-ends a n a l y s i s   f o r example strips  1  and abstrips   1     a l s o p r o duce n o n - o p t i m a l s o l u t i o n s . optimal s o l u t i o n s t o the problem are produced by programs of tate  a  and warren   1     whose approaches w i l l be discussed i n section v i i below. 
       let us see what a p l a n n i n g system u s i n g meansends a n a l y s i s would do under the assumption t h a t plans must b e l i n e a r . i t w i l l t r y t o achieve i n t u r n each of the c o n j u n c t s d e s c r i b i n g the g o a l s t a t e . suppose it t r i e d to put a on b f i r s t . a f t e r c l e a r i n g a by d o i n g puton  c table   the f i r s t subgoal can be achieved by doing puton   a   b   . but now  in o r d e r to put b on c  b w i l l have to be r e - c l e a r e d   thus undoing the subgoal i t achieved f i r s t . 
       on the o t h e r h a n d   the system m i g h t decide to put b on c f i r s t . t h i s can be done i m m e d i a t e l y in the i n i t i a l s t a t e . but now when the system t r i e s t o put a o n b   i t f i n d s i t i s even f u r t h e r from i t s goal than i t was i n the i n i t i a l s t a t e . 

to m o t i v a t e the use of a n o n l i n e a r r e p r e s e n t a t i o n   	l e t us de v e l op an elementary 
example in a simple environment t h a t c o n s i s t s of t h r e e blocks and a t a b l e . in the i n i t i a l s t a t e   block c is on block a  and block b is by i t s e l f . the goal is to achieve a new c o n f i g u r a t i o n of b l o c k s   as shown in f i g u r e 1. it is expressed as a c o n j u n c t i o n : block a is on block b  and b l o c k b is on block c. 

       so the planner is in t r o u b l e . it must perform a more sophisticated analysis to put the subgoals in the proper order. 
       but the problem is easy to solve if plans are represented as p a r t i a l orderings. a planner can begin w i t h an o v e r s i m p l i f i e d plan that considers the subgoals of p u t t i n g a on b and p u t t i n g b on c as p a r a l l e l   independent operations. when it looks at the subplans in more d e t a i l   a simple analysis w i l l determine the i n t e r a c t i o n s between them. p o t e n t i a l c o n f l i c t s can be resolved by imposing l i n e a r constraints on some of the det a i l e d actions. 
       in subsequent sections we w i l l show how a planner that is freed from the assumption of l i n e a r i t y is able to solve problems of t h i s type d i r e c t l y   c o n s t r u c t i v e l y   and without b a c k t r a c k i n g . 
1 

i l l noah 
　　　noah  nets of action hierarchies  is a problem solving and execution monitoring system that uses a nonlinear representation of plans. the system is being used for sri'a computer based consultant project   1     and has many aspects that are not d i r e c t l y relevant to the point of t h i s paper. we w i l l present a s i m p l i f i e d explanation of the procedural net  noah's representation f o r actions and plans  of soup  the language f o r giving the system task-specific knowledge  and of the planning a l gorithm. a complete discussion of the system w i l l appear elsewhere  1 . 
　　　noah is implemented in qlisp   1     and runs as compiled code on a pdp-1 computer under the tenex time-sharing system. 
a. 	the procedural net 
　　　the system's plans are b u i l t up in a data structure called the procedural net  which has characteristics of both procedural and declarative representations. 
　　　basically  the procedural net is a network  of nodes  each of which contains procedural i n f o r mation  declarative information  and pointers to other nodes. 	each node represents a p a r t i c u l a r action at some l e v e l of d e t a i l . 	the nodes are linked to form h i e r a r c h i c a l descriptions of operations  and to form plans of a c t i o n . 
　　　nodes at each level of the hierarchy are linked in a p a r t i a l l y ordered time sequence by predecessor and successor l i n k s . each such sequence represents a plan at a p a r t i c u l a r l e v e l of d e t a i l . 
　　　the nodes discussed in t h i s paper are of four types: goal nodes represent a goal to be achieved; phantom nodes represent goals that should already be true at the time they are encountered; split nodes have a single predecessor and multiple successors  and represent a forking of the part i a l ordering; join nodes have multiple predecessors and a single successor  and represent a rewj o i n i n g of subplans w i t h i n the p a r t i a l ordering. 
　　　each node points to a body of code. the action that the node represents can be simulated by evaluating the body. the evaluation w i l l cause new nodes  representing more detailed actions  to be added to the net. it w i l l also update a hypothesized world model to r e f l e c t the effects of the more detailed actions. 
　　　associated with each node is an add l i s t and a delete l i s t . these l i s t s are computed when the node is created. they contain symbolic expressions representing the changes to the world model caused by the action that the node represents. 

　　　as an example  l e t us examine a procedural net representing a hierarchy of plans to paint a 
　　　c e l l i n g and paint a stepladder. the plan can be represented  in an abstract way  as a single node as shown in figure 1a. in more d e t a i l   the plan is a conjunction  and might be represented as in figure 1b. the more detailed subplans to achieve these two goals might be  get p a i n t   get ladder  then apply paint to c e l l i n g     and  get p a i n t   then apply paint to ladder '' as depicted in figure 1c. the plan depicted in figure 1d w i l l be explained below. 

　　　the p i c t o r i a l representation used here suppresses much of the information associated with each node. the add and delete l i s t s   f o r instance  are not indicated in the diagrams. they are not hard to i n f e r   however. for example   get ladder  w i l l cause  has ladder  to be added to the world model  and  apply paint to c e i l i n g   might delete  has p a i n t .   
　　　precondition-subgoal relationships are i n ferred by the system from pointers that indicate 
which nodes represent expansions in greater det a i l of other nodes. these pointers are also omitted in the p i c t o r i a l representation. the system assumes that every action but the l a s t in such an expansion is a precondition for the last a c t i o n . 

1 

b. 	task-specific 	knowledge 
　　　knowledge about the task domain is given to the system in procedural form  w r i t t e n in the soup  semantics of user's problem  language. soup is an extension of qlisp  1  that is interpreted in an unusual fashion  as described in the next section. 
　　　as an example  l e t us examine the soup code f o r blocks problems such as that presented in section 1 above. the complete semantics of the actions of this domain are expressed by two functions   which are shown in figure 1. the code f o r the function clear says    i f the variable x is table  then it is already   c l e a r .   otherwise  see if some block y is on x. if so  clear y and then remove y by p u t t i n g it somewhere e l s e .   
　　　the code f o r the function puton says   to put x on y  f i r s t clear x and y. then place x on 
y  and thus y is no longer c l e a r   .   

c. 	the planning algorithm 
i n i t i a l l y   noah is given a goal to achieve. 
noah f i r s t builds a procedural net that consists of a single goal node to achieve tha given goal. this node has a l i s t of a l l relevant soup functions as i t s body  and represents the plan to achieve the goal at a very high l e v e l of abstract i o n . this one-step plan may then be expanded. 
　　　the planning algorithm of the noah system is simple. it expands the most detailed plan in a procedural net by expanding each node of the plan. the nodes are expanded in the order of t h e i r pos i t i o n in the time sequence. the expansion of each node produces c h i l d nodes. each c h i l d node contains a more detailed model of the action it represents. the detailed models are queried during the creation of subsequent nodes in the time sequence.  note that they are not queried during the expansion of p a r a l l e l nodes in p a r a l l e l branches of the p l a n .   thus by creating subplans for each node in the p l a n   a new  more detailed plan w i l l be created. 
　　　the i n d i v i d u a l subplan for each node w i l l be correct  but there is as yet no guarantee that the new p l a n   taken as a whole  w i l l be c o r r e c t . there may be interactions between the new  det a i l e d steps that render the o v e r a l l plan i n v a l i d . for example  the individual expansions involved in generating the plan in figure 1c from that in figure 1b are correct  yet the overall plan is i n v a l i d   since it allows for painting the ladder 
before p a i n t i n g the c e i l i n g . 
　　　before the new detailed plan is presumed to work  the planning system must take an o v e r a l l look at it to ensure that the local expansions 
make global sense together. this global examination is provided by a set of c r i t i c s . the c r i t i c s serve a purpose somewhat s i m i l a r to that of the c r i t i c s of sussman's hacker   1     except that for noah they are constructive c r i t i c s   designed to add constraints to as yet unconstrained plans  whereas for hacker they were destructive c r i t i c s whose purpose was to reject incorrect assumptions r e f l e c t e d in the plans. 
　　　the algorithm for the planning process  then. is as f o l l o w s : 
 1  simulate the moat detailed plan in the procedural net. this w i l l have the effect of producing a new  more d e t a i l e d plan. 
 1  c r i t i c i z e the new plan  performing any necessary reordering or elimination of redundant operations. 
 1  go to step 1. 
　　　c l e a r l y   t h i s algorithm is an o v e r s i m p l i f i c a t i o n   but for the purposes of t h i s paper we may imagine that the planning process continues u n t i l no new d e t a i l s are uncovered.  in f a c t   for the complete problem solving and execution 
monitoring system  a l o c a l decision must be made at every node about whether it should be expanded.  
iv critics 
　　　the c r i t i c s described here are generalpurpose c r i t i c s   appropriate to any problem solving task. in addition to these  other taskspecific c r i t i c s may be specified for any part i c u l a r domain. 
1 

a. 	the  resolve c o n f l i c t s   c r i t i c 
　　　the resolve conflicts c r i t i c examines those portions of a plan that represent conjuncts to be achieved in p a r a l l e l . in p a r t i c u l a r   it looks at the add and delete l i s t s of each node in each conjunctive subplan. if an action in one conjunct deletes an expression that is a precondition for a subgoal in another conjunct  then a c o n f l i c t has occurred. the subgoal is endangered because  during execution  i t s precondition might be negated by the action in the p a r a l l e l branch of the plan.  an i m p l i c i t assumption being made here is that a l l of a subgoal's preconditions must remain true u n t i l the subgoal is executed.  the c o n f l i c t may be resolved by requiring the endangered subgoal to be achieved before the action that would delete the precondition. 
	for example  	the p a i n t i n g plan depicted in 
figure 1c contains a c o n f l i c t .  apply paint to ladder  w i l l e f f e c t i v e l y delete  has ladder   which i s on the add l i s t of  get ladder.  in such a s i t u a t i o n   a c o n f l i c t would occur  since  has ladder  is a precondition of  apply paint to c e l l i n g .   the c o n f l i c t is denoted in the p i c t o r i a l representation by a plus sign  +  over the procondition and a minus sign  -  over the step that violated i t . the c o n f l i c t can be resolved by r e quiring that the endangered subgoal   apply paint to c e l l i n g     be done before the v i o l a t i n g step   apply paint to ladder  . 
　　　if the c o n f l i c t were resolved in t h i s manner  the r e s u l t i n g plan would appear as in figure 1d. 
　　　a similar c o n f l i c t occurs if an action in one conjunct deletes an expression that is a precondition for a following subgoal. in this case  the precondition must be re-achieved after the deleting a c t i o n . 
　　　during the course of planning  noah w i l l avoid binding a variable to a specific object unless a clear best choice for the binding is a v a i l a b l e . when no s p e c i f i c object is c l e a r l y best  the planner w i l l generate a formal object to bind to the v a r i a b l e . the formal object is e s s e n t i a l l y a place holder for an e n t i t y that is as yet unspecified. the formal objects described here are s i m i l a r in s p i r i t to those used by sussraan in h i s hacker program  1   and to the uninstantiated parameters in relevant operators as used by abstrips  1 . 
　　　the strategy of allowing actions with unbound arguments to be inserted into a plan has several advantages. f i r s t   it enables the system to avoid making a r b i t r a r y   and therefore possibly wrong  choices on the basis of i n s u f f i c i e n t information. furthermore  i t allows the system to deal with world models that are only p a r t i a l l y specified by producing plans that are only p a r t i a l l y s p e c i f i e d . 
　　　however  a f t e r a plan has been completed at some l e v e l of d e t a i l   it may be clear that a formal object can be replaced by some object that was mentioned elsewhere in the plan. the use existing objects c r i t i c w i l l replace formal objects by r e a l ones whenever possible. this may involve merging nodes from d i f f e r e n t portions of the p l a n   r e s u l t i n g in reordering or p a r t i a l l i n e a r i z a t i o n . 
       for example  a more detailed expansion of the painting plan might specify p u t t i n g the ladder at p l a c e 1 to paint i t   and at under-ceiling for painting the c e i l i n g . the use existing obj e c t s c r i t i c would optimize the plan by replacing placeool w i t h under-ceiling. 

　　　conflicts of this type are very easy to spot. the c r i t i c simply builds a table of mult i p l e e f f e c t s . this table contains an entry for each expression that was asserted or denied by more than one node in the current plan. a conf l i c t is recognized when an expression that is asserted at some node is denied at a node that is not the asserting node's subgoal. 
　　　note that a precondition may l e g a l l y be denied by i t s own subgoal. 	for example  to put block a on block b  b must have a clear top. this precondition w i l l be denied by the action of putting a on b. 
b. the  use existing objects  c r i t i c 
　　　in addition to specifying the right actions in the r i g h t order  a complete plan must specify the objects that the actions are to manipulate. for noah  t h i s s p e c i f i c a t i o n is accomplished by binding the unbound variables  those prefixed by a l e f t arrow  in the pgoal statements of the soup code. 
c. the  eliminate redundant preconditions  	c r i t i c 
　　　during the simulation phase of the planning process  every precondition that is encountered is e x p l i c i t l y stored in the procedural n e t . this is so that the c r i t i c s w i l l be able to analyze the complete precondition-subgoal structure of each new subplan. but after the other c r i t i c s have done t h e i r work  and the plan has been a l t e r e d to r e f l e c t the interactions of a l l the steps  the altered plan may w e l l specify redundant precond i t i o n s . 
　　　for instance  in our painting example   get p a i n t   appears twice in the plan. this c r i t i c recognizes the redundancy by examining the same table of multiple e f f e c t s that was used by resolve c o n f l i c t s . the extra preconditions are eliminated to conserve storage and avoid redundant planning at more detailed levels f o r achieving them. 

1 

	v 	the example  again 
　　　we are now ready to see how noah solves the problem posed in section i i . the i n i t i a l state is expressed to the system as a set of qlisp 
assertions: 
 on c a  
 cleartop b  
 cleartop c  
　　　noah is invoked w i t h the goal:  and  on a b   on b     . 
　　　the system builds an i n i t i a l procedural net that consists of a single goal node. the node is to achieve the given goal; i t s body is a l i s t of the task-specific soup functions  in t h i s case clear and puton. it then applies the planning algorithm to t h i s one-step plan  which is depleted in figure 1a. 
　　　the conjunction is s p l i t up  so that each of i t s conjuncts is achieved independently. puton is the relevant function for achieving both conjuncts  but the system does not immediately i n voke puton. rather  the system builds a new goal node in the procedural net to represent each i n vocation. the nodes are to achieve  on a b  or  on b c   and have puton as t h e i r body. the o r i g i n a l plan has now been completely simulated to a greater l e v e l of d e t a i l   and so the c r i t i c s are applied. at t h i s l e v e l   they f i n d no problems with the plan that was generated. the new plan is shown in figure 1b. 
　　　the new plan is now expanded. 	when the goal nodes for achieving  on a b  and  on b c  are 
simulated  puton is applied to each goal expression. puton causes the generation of a new level of goal nodes. when the e n t i r e plan has been simulated  the r e s u l t i n g new plan appears as in figure 1c. the nodes of the plan are numbered to aid in explaining the actions of the c r i t i c s . 
　　　the c r i t i c s are now applied to the new plan. resolve conflicts generates a table of a l l the expressions that were asserted or denied more than once during the simulation. the table is shown in figure 1a. this table is then reduced 
by eliminating from consideration those precond i t i o n s that are denied by their own subgoals. for example  	 cleartop c  is a precondition for the subgoal  on b c     so it is not a c o n f l i c t that achieving  on b c  at node 1 makes  cleartop c  false. 	now  any expression for which there is only a single remaining e f f e c t is removed from the table. 	the r e s u l t i n g t a b l e   shown in figure 1b  displays a l l the c o n f l i c t s created by the assumption of n o n l l n e a r l t y . 
　　　resolve conflicts now reorders the plan by placing the endangered subgoal  node 1  achieving  on b c   before the v i o l a t i n g step  node 1  a-
1 


	chievlng  on a b  . 	the transformed plan is shown 	the 	conjunctive goal is s p l i t into p a r a l l e l goals 
in figure 1d. 
　　　since no formal objects were generated at t h i s l e v e l of d e t a i l   use existing objects does 
not transform the plan f u r t h e r . 	eliminate redundant preconditions is now applied  and the r e s u l t i n g plan is shown in figure 1e. 	note that the 
major r e s t r i c t i o n in the solution to the problem  that b must be placed on c before a is placed on b  has been incorporated i n t o the p l a n . 	this has been accomplished d i r e c t l y   c o n s t r u c t i v e l y   and without backtracking. 
　　　the c r i t i c s having been applied  the system simulates the new plan. this results in the generation of a new  yet more detailed p l a n   shown in figure 1f. the c r i t i c s are then applied. an analysis similar to that described above enables resolve conflicts to discover that  cleartop c  might be violated when achieving  on b c . thus  the plan is rearranged  as shown in figure 1g  so that  on c o b j e c t l     the endangered subgoal  is achieved before  on b c   
　　　use existing objects again finds no formal objects that can he u n i f i e d with e x i s t i n g ones. after eliminate redundant preconditions cleans up the plan  it appears as in figure 1h. 	the 
f i n a l plan i s : 	put c on object 1; put b on c; put a on b. 	essentially  the plan is now completely l i n e a r i z e d . 	the planning system has chosen the 
correct ordering for the subgoals  without backtracking or wasted computation. by avoiding a 
premature commitment to a linear plan  the system never had to undo a random choice made on the basis of i n s u f f i c i e n t 	information. 
	vi 	other examples 
             in this section a number of other blocks world examples w i l l be presented. 	the problems and t h e i r solutions w i l l be displayed g r a p h i c a l l y   and only points of special interest w i l l be discussed in the t e x t . 
1 


1 

	v i i 	discussion 
　　　we have seen how a v a r i e t y of problems which can be represented as conjunctive goals have simp l e   straightforward solutions in noah. there are a number of other problem solving systems that use a l t e r n a t i v e approaches to solve s i m i l a r problems. among these are sussman's use of debugging   1   1     tate's search in a space of   t i c k l i s t s     1     and the approach of passing actions backward over a p a r t i a l plan  which is used by manna and waldinger  1  and warren  1 . 
　　　the approach presented in this paper is in many ways a n t i t h e t i c a l to that of sussman's hacker. hacker attacks conjunctive goals by making a   l i n e a r   assumption. that i s   conj u n c t i v e goals are assumed to be independent and a d d i t i v e   and so to achieve the overall goal each conjunct may be achieved in sequence. the system is e x p l i c i t l y aware of t h i s assumption. if the 
developing plan f a i l s   it can be debugged by comparing the problem that occurred with the known types of problems generated by the assumption of l i n e a r i t y . as bugs are encountered and solved  a c o l l e c t i o n of c r i t i c s is developed  each of which notices that a certain type of bug has occurred in a plan. 
　　　hacker does a l o t of wasted work. while the problem solver w i l l eventually produce a correct plan  it does so in many cases by i t e r a t i n g 
　　　through a cycle of b u i l d i n g a wrong p l a n   then applying a l l known c r i t i c s to suggest revisions of the p l a n   then b u i l d i n g a new   s t i l l p o t e n t i a l l y 
wrong  plan. 
　　　noah makes no rash assumptions  but preserves a l l the freedom of ordering that is i m p l i c i t in the statement of a conjunctive goal. it assumes the conjuncts are independent  but the nonlinear representation frees it from worrying about add i t i v i t y . i t applies i t s c r i t i c s c o n s t r u c t i v e l y   to l i n e a r i z e the plan only when necessary. by waiting u n t i l it knows the nature of the conjuncts' i n t e r a c t i o n s   noah is sure to place actions in the correct order  and thus needs never undo the effects of a false assumption. 
　　　tate's interplan performs a search for a correct linear ordering by using both debugging and backtracking. interplan does this not by creating a l t e r n a t i v e sequences of actions  but rather by examining a tabular representation of the interactions between conjunctive goals. tate demonstrated that a planner can perform reasoning about plans by dealing w i t h information that is much simpler than the plan i t s e l f . this concept has been used extensively by the c r i t i c s in noah  which do much of t h e i r analysis on the tables of multiple effects rather than on the plans themselves. 
　　　manna and waldinger and warren b u i l d l i n e a r plane in non-sequential order. they require that the p a r t i a l plan at every stage be a linear one. however  they allow additions to the plan by i n sertion of new actions i n t o the body of the p l a n   rather than r e s t r i c t i n g new actions to appear at the end. this approach has the advantage of being constructive. in the sense that when the planner adds each step to the plan  it takes i n t o account a l l the interactions between conjuncts that it knows about. but by forcing the plan to be l i n e a r at a l l intermediate stages  these planners must do unnecessary search with backtracking  or sophisticated plan optimization to f i n d the correct order in which to attack the conjuncts. 
v i i further work 
　　　this paper deals with a deceptively simple idea: a plan may have the structure of a p a r t i a l 
ordering. the planning system described here is p r i m i t i v e and incomplete  and a more complete one w i l l be required to f u l l y explore the i m p l i cations of t h i s representation of plans. the system does not now deal with d i s j u n c t i v e subgoals  for example  to paint the c e i l i n g   get paint and e i t h e r a ladder or a t a b l e   . 
1 

　　　the current system also f a i l s to deal with 1. tate  a.   interplan: a plan generation what might be termed  non-linearlzable interac- system which can deal w i t h interactions bet i o n s   these are interactions between subgoals tween goals   memorandum mip-r-1  machine 
where no simple ordering of the actions that achieve each subgoal 	independently w i l l achieve 	i n t e l l i g e n c e research u n i t   university of 
the o v e r a l l g o a l . 	an example of t h i s arises 	edinburgh  december 1 in the problem of exchanging the contents of two 
	r e g i s t e r s . 	1. 	warren  d.h.d.   warplan: a system for 
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　generating plans   memo no. 1  department the most serious deficiency in the current of computational logic  university of edinsystem is i t s lack of awareness about the a u x i l - burgh  june 1 iary computations specified in the procedural semantics  the soup code  of a task domain. the 1. hart  p. e.   progress on a computer-based procedural net representation l e t s the system be consultant   tech. note 1  a r t i f i c i a l i n aware of the goals and subgoals that the planner telligence center  sri  menlo park  ca.  has decided to tackle  but it does not preserve january 1 
any information about the computation that r e sulted in those decisions. in some cases  a r e - 1. sacerdoti  e. d.   a structure for plans and ordering of subgoals might a l t e r the state in behavior   forthcoming ph.d. thesis  stanford which one of these computations would be carried university out. then the computation might produce d i f f e r e n t 
	r e s u l t s . 	1. 	reboh  r.  and sacerdoti  e. d.   a pre-
liminary qlisp manual   tech. note 1   ar-
　　　space does not permit adequate discussion of 	t i f i c i a l intelligence center  	sri  menlo these issues here. 	the interested reader w i l l 	park  ca.  august 1 f i n d it elsewhere   1   . 	it is worth n o t i n g   how-
	ever  that the system as it now stands has been 	1. 	sussman  g. j .    the virtuous nature of 
used successfully for sri's computer based bugs   proc. aisb summer conference  july consultant  where it creates for the casual 
1 
	observer a surprising sense of richness. 	this 
suggests not that noah is very sophisticated  but that the mechanisms of i n t e l l i g e n c e may not 1. manna  z. and waldinger  r.   knowledge and be as complex as we think. reasoning in program synthesis   tech. note 
1  a r t i f i c i a l intelligence center  sri  
menlo park  ca.  november 1 
acknowledgments 
　　　the ideas presented in t h i s paper have been stimulated and sharpened by discussions w i t h richard waldinger  richard fikes  n i l s nilsson  and austin tate. the research reported in t h i s paper was sponsored by the advanced research projects agency of the department of defense under contract dahc1-c-1 with the u.s. 
army research o f f i c e . 
