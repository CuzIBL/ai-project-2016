 
　the network reduction systen of rapt  an offline object level language for programming robot assembly tasks is described in this paper. the task description is converted into a relational network with the positions of bodies as nodes  and relationships between positions as links. rewrite rules based on the intersection and conposition of relations are used to simplify the network. 
	1 	introduction. 
　as versatile industrial robots come into greater use  particularly for snail batch assembly  the ability to program then offline becomes more desirable. the rapt language has been developed at the university of edinburgh for such progranning of assembly tasks. 
　the language allows the user to describe the task in a natural way  in terns of surface features being in contact  and of notions of 
objects relative to each other. the gripping  parts of manipulators can be included simply as 
objects used in the task. 
　the transformation of this relational information into the positional information necessary to drive a manipulator is not a trivial task  and this paper is a description of the current system for doing i t . this involves the reduction of a relational network  and was described in  popplestone  ambler & bellos 1b . an earlier system used algebraic manipulation   popplestone  ambler & bellos 1a   and conparison will be made with i t . 
　our system as implemented at present is completely determinate - all positions are specified at compile time. another paper at this conference  yin 1  describes how sensory information  in particular vision verification  can be incorporated . 
	ii 	the rapt input language 
　this section can only give a brief outline of the input language; for a complete description see  popplestone  ambler & bellos 1 . 
this paper describes work done in the department of artificial intelligence at the university of edinburgh supported by contract n1b ir1 from the science and engineering research council. 
　in rapt  each object is described in terms of a number of surface features  e.g. planar faces  shafts  cylindrical faces  and holes. 
　at any stage of the assembly process  we have a 
　situation in which we can describe spatial relations between objects  e.g. 
against / face1 of b1dy1  face1 of b1dy1 
	fits 	/ shaft of b1dy1  hole of body1 
　an action statement describes the movement between one situation and the next  e.g. move / b1dy1 
move / body1  parlel   shaft of b1dy1 
　　move / body1  parlel   shaft of b1dy1  1 actions may constrain the position of the body  e.g.  the second and third actions constrain the body position to be along the axis of the shaft from its previous position  the third action completely determines the final position relative to the start position. the first action imposes no constraints on the final position; it must be deternined from any subsequent spatial relations. 
	i l l 	the rapt inference system. 
　the specification of a rapt progran consists of a number of relationships between features of objects in different situations  and a number of actions. we must solve for the position of each body in each situation. we call this set of positions a set of body instances  and we have a relational network linking them. within any situation  body instances are linked by spatial relations; between situations the links are either 
action relations  or identity relations for stationary objects. the form of each link is identi-
cal  whichever type of constraint  and therefore situation and action relations can be mixed in any way to form the network. the task of the inference system is to reduce the network  and to determine the positions of each object. 
a. 	position representation. 
　we represent the position of each body instance as a 1 matrix which holds the origin and the orientation of the x y  and z axes of each body. body positions are defined relative to a world frame of reference. 
　we use the post-multiplication convention of transformations to define positions transformed from the body position. each feature of a body can be represented by a transformation from the body position  and therefore can be expressed relative to the world frame of reference by a t ransformat ion  
f ** p 
where ** denotes matrix multiplication  f is a 
feature transformation  and p a body position. b. the representation of relationships. 
　a relationship links features of two bodies. corresponding to each relation type is a transformation function with a number of variable parameters  representing the degrees of freedom implicit in the relation. the relationship states that the world position of one feature  transformed by this function  with unknown values for the variable parameters  equals the world position of the other feature. 
f1 ** p1 = rel v  ** fl ** pl 
is an example of a relationship linking features f 1   f1 of bodies in positions p1  p1 respectively  where v is a vector of n variables unique to this instance  and rel is one of a set of relation functions. an example of such a relation is 
acpp x y theta  
represent ing the against relationship between two plane faces  with two spatial and one rotational degree of freedom. 
　actions are represented by similar equations. if an action operates on a body to move it from position p1 to position p1  and the action is relative to a feature f  it can be represented by the equation f ** p1 = rel v  ** f ** p1 this is an equation of the same form as the equation derived from a relationship  and the rapt inference system does not distinguish between them. 
　it is implicit in the description of actions that some bodies in the system do not move during the action. this is encoded by making the positions of the body before and after the action equal. 
c. reducing the set of relations. 
　the fundamental reduction step takes a pair of equations relating the same two positions p1 - expressionl v1  ** p1 p1   expression1 v/1  ** p1 
and combines them to form a new equation p1 ＊ expression1 v1  ** p1 each expression is the product of one or more relation functions and feature transformations  and the vectors represent the variables. expression is derived from expressionl and expression1  and v1 has at most the number of elements of the smaller of v1 and v1  where v1 represents the remaining degrees of freedom. 
　the equation solving method solved the set of equations from first principles  but it was realised that since for most pairs of the relation functions rel v   there are standard solutions  
d. corner et al. 1 
this was inefficient. the present method uses these standard solutions  and dors not form the equations; these are implied by the form of the relation. thus  when a suitable pair of relations is found  the standard solution is applied  e.g.  subject to certain constraints  from the relations 
agpp between fack1 of b1dy1  face;1 of b1l y1 
   agpp between face1 of b1dy1 fack1 of body1 the standard solution gives 
   ltn between feat1 of b1dy1 feat1 of body1 lin is a relation with only one degree of spatial freedom  and feat1  feat1 are generated as part of the standard solution. 
　not all pairs of relations have a solution. in some cases there are two results  in others the relation is not expressible as one of our set of relations. 
d.. 	fix relations. 
　a fix relation is a special case  because the linking function is the identity function  with no variables  i.e. the equation becomes: f1 ** p1 - fl ** p1 we have determined the position p1 relative to p1  so that whenever we have an equation in p1  we could transform it to one in p1  or vice-versa. 
we use a fix relation to do a merge operation. 
we choose one of the positions  say p1  and remove it from our set of unresolved positions. we also transform any equation involving p1 into one involving p1. when  at a later time  we have solved for the position p1  we can transform it and so produce the position p1. e. chaining relations. 
　we can only use our standard solutions when we have two relations between the same pair of body instances. the method of chaining relations allows a solution in more general cases. 
given a relation involving body instances a and 
b  and another involving body instances b and c  the two may be chained together to form a new relation between a and c. 
　the equation solver placed no limitation on chaining  since it could combine f1 ** p1 = rell vl  ** f l l ** p1 f1 ** p1 = rel1 v1  ** f1 ** p1 
to form the equation f1 ** p1 - rel1 v1  ** f1 ** inv f1  
             ** rell  vl  ** f l l ** p1 in a number of cases  this can be simplified to 
the form f1 ** p1 = rel1 v1  ** f 1 ** pl 
where rel1 is one of the set of relation functions. 
　when this simplification is possible  we can apply a standard chaining solution to the pair of relations to form the new one. 

1 d. corner et al. 
　not all pairs of relations can be chained; for some  the result is not expressible as one of the set of relations  for others  there is no relation - the input relations are too weak and the two bodies are unconstrained. 
f. 	method of application. 
　we could consider our operations  solution  chaining and merging as a set of rewrite rules. the solution operation is obviously a terminating operation  since it reduces the number of relations  equations  in the system. merging is also terminating  since the number of unresolved positions is reduced. 
　chaining by itself does not appear to be a terminating operation  since it adds a new relation to the set of relations.  it does not add any new information  since the information in it is contained in the relations it was derived from . because of this  we only use chaining to create temporary relations. 
when we have a cycle of relationships: relation between bi and b1 
relation between b1 and 1 
	... 	... 
relation between bn-1 and 1n 
　　　　　　relation between bn and 1 we can chain the first two to form a relation between bi and b1  use this to form one between hi 
and b1  and so on until we have chained all except the last together to form a relation between b1 and bn. we can now apply our solution method to this and the final relation; if it gives a new relation  we can replace the relation between bn 
and bl with this new relation. 
　since the result of our solution method has the same number or fewer degrees of freedom than either input relation  and we only accept the solution from the combination of a relation formed by chaining with another if we have reduced the number of degrees of freedom  the net effect of the operation is to reduce the number of degrees 
of freedom in the relations left in the problem. 
　with a complex network of relations there can be a large number of cycles  many of which will be large  and for each cycle we can choose any of the body instances as a start point  and work in either direction. there is therefore a large search space. in practise  we restrict the size of the cycles to which we apply this method to a maximum of four. this has been found to be adequate. in addition  we defer cycle finding until there re are no more solution or merge operations possible. if the processing of cycles has resulted in any fix relations  merge operations can be performed  with the consequent possibility tahe more pairs of relations appear. 
positions have been resolved  or until no further progress is possible. 
c. 	limitations of the system. 
　the cycle-finding system is very much more efficient than the equation solving system  speeds have increased 1-fold  but it is less powerful. the restricted set of relations to which the standard solutions can be applied means that some simplifications cannot be made that the equation solving system would manage. the pairwise combination of relationships and the restriction to unique solutions sometimes means that a solution within the theoretical capability of the system is missed: three constraints taken a pair at a time might always produce two solutions; the third constraint would eliminate one of them. there are some specifications which should produce multiple solutions  eg 1 revolute joints : at the moment the cycle finder does not solve them. there are some constraints which cannot he easily represented in the simple relational form. these involve variables: for example the jaws of a gripper may be constrained to move in equal and opposite directions by the same amount. 
　given these inherent limitations in the system  we feel that the cycle finder should be used as front end to some more powerful inference system the cycle finder will be used to solve quickly and efficiently those problems it is capable of  and pass the residue on the the next system. in our experience most of the problems we come across can be completely solved by the cycle finder. 
some linkages form standard  but large cycles. 
 duffy 1  has provided solutions for them. we anticipate including such solutions in the final 
inference system. 
