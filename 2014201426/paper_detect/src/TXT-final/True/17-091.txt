 
in t h i s paper we formalize different methods for describing control knowledge in production systems by the concept of production system schemes. in t h i s framework these methods are compared from the viewpoint of descriptional complexity giving us some insight by which means problems can be described in an easy and succinct way. 
1 introduction 
in  georgeff  1  a production system architecture is described in which procedural knowledge is specified by control languages. in this framework he outlined transformations on production systems to remove the amount of nondetermism to get a more e f f i c i e n t execution. in order to clearly separate the means for describing control knowledge from the  object-level  semantics of a production system and to compare different methods to describe controlknowledge we w i l l abstract this concept by production system schemes. different methods to describe control information in production systems can then be modelled by different classes of production system schemes  this is in p a r a l l e l to the theory of program schemes  greibach  1  . the concept of production system schemes might also form the basis for a theory of transformations on production systems. in t h i s paper we consider the following classes of production system schemes: controlled production system schemes in which procedural knowledge is described by languages and production system schemes with markers  which use special database symbols to sequence the order of productions. these classes of production system schemes w i l l be compared from the viewpoint of descriptional complexity. we show 
that removing nondeterminism   i f possible  in controlled production systems might result in a size explosion of the equivalent deterministic production system. in the same way we show that in some cases the specification of controlknowledge by markers can result in drastic more succinct representations than a separate description of controlknowledge in even nondeterministic controlled production systems  

def. t 
an interpretation of a pss q   a  f  is a pair i =  d  h  where d is a nonempty set  the database of q  and h is a mapping assigning to each pep a predicate h p  from d into  1  and to each a  a relation over d. 
def .: 
a controlled production system schema  cpss  is a pair q -  l  p  where p is a pss and l a language over the production symbols of p. 


the d e f i n i t i o n of execution under an interpretation i =  d  h  must be modified in the obvious way so that the meanings of the new predicates and actions are fixed  see e.g. engelfriet  1 . 
in the following we w i l l r e s t r i c t ourselves to regular control languages. in order to compare the sizes of production systems we next introduce our size measures. clearly the size of a pss p is given by the number of i t s productions. in the case of a cpss we also have to measure the control language complexity. this can be done 
by the size of the automaton accepting t h i s language. for a regular control 
	p. trum 	1 
language l the number of states in the nondeterministic  npa  or deterministic  dfa  f i n i t e automaton m accepting l then is a good measure for the descriptional complexity of l  in this case l is also denoted by t m  . 
1 main results 
if only one production application at each execution step of a cpss q =  l  p  can eventually lead to a successful termination  then i t ' s possible to translate it into an equivalent deterministic production system. if in addition the control language is regular we can transform the production system into an equivalent flowchart program. 
it is easy to show that in such cases the number of states in the dfa m accepting the language s l  gives us the size-complexity   i . e. number of statements  of the equivalent flowchart program where s denotes the following substitution from the 
production symbols into the predicate and action symbols of p: s p  = qf where f p  = q -- f 
theorem 1 
for a l l n l there exists a cpss pn with size complexity 1 n  s. t. every equivalent flowchart program qn has a size complexity of at least 1 n . 

since ln can be accepted by a nfa with 
1 n  states it also follows that the  nondeterministic  description of p n has a size complexity of 1 n . on the other hand it can be shown  trum  
1 	p. trum 
wotschke  1  that each dfa m with t m  = s ln  needs at least 1n states prooving our theorem. 
if we consider a mpss q with a markerset m the execution order of productions is only constrained by the 
testing/setting of markers   i . e. the control language is  but  as shown in  engelfriet  1   the constraints introduced by the use of markers can be modelled by a regular controllanguage cm. this means that in such cases the control language is defined in the productions themselves. this leads us to the following characterisation for the equivalence of mpss's and cpss's: 
theorem 1 
let q1 be a mpss with markers in m and q1 =  l  p  be a cpss. then q1 and q1 are equivalent if s l  = h s c m    where h is the following substitution: 
h vi = mj  = h v i =mj  = h v i  --mj  = 
	and 	n a  = a otherwise. 
this result leads us to our last theorem: 
theorem 1 
for a l l n 1 there exists a mpss pn with size complexity 1 n  s. t. every equivalent cpss cn has a size complexity of at least 1 n . 


