 
　　　we give methods of mechanically converting programs that are easy to understand into more efficient ones  converting recursion equations using high level operations into lower level flowchart programs. 
　　　the main transformations involved are  i  recursion removal   i i   eliminating common subexpressions and combining loops   i i i   replacing procedure calls by their bodies  iv  introducing 
assignments which overwrite l i s t cells no longer in 
use {compile-time garbage collection . 
	t 	introduction 
     this paper ia an introduction to an automatic program improving system that we have implemented 
and are developing further. 
     a programmer is able to present his algorithms to the system in a clear and abstract language. the system converts them to efficient but probably not transparent versions. 
　　　for example  here are two versions of one program which reverses l i s t s . 

　　　one is clear and abstract  the other more tortuous but efficient. 	siven the f i r s t as a definition  a competent programmer should be able to produce the second. 	our system can do this for him. 
　　　the system is built around the concept of abstract programming  and we hope to encourage a user to formulate his algorithms in abstract terms appropriate to hia problem domain and leave to the system the task of implementing them efficiently. 
　　　our work was partly inspired by minsky's homily on form versus content in computer science in which he recommended programming as a good application area for a r t i f i c i a l intelligence work. it was also influeneed by dijkstra  ideas on structured programming  differing in that we start from a functional lisp-like language. 
　　　our investigation took as i t s starting point a collection of prooedures written by ambler and burstall which aimed to provide transparent  but quite efficient operations on f i n i t e sets. we used this example to study the transformations which are needed to implement a collection of high level procedures as efficient code. to enable one to write programs about f i n i t e sets some operations on sets  for example  union  intersection  stbtbact.nullset  
nilset  consset  choose and minus are defined. 	these 
* the operations we use are based on the pop-1 language  burstall collins and popplestone . the main features to note are that hd is the lisp car  t1 the. 
lisp cdr and concat joins two l i s t s  the lisp append;. 
basic set operations must be implemented as structured d e f i n i t i o n s in terms of the array or l i s t p r i m i t i v e s a v a i l a b l e in the programming language. the user of the set system can define and run new functions  such as powerset  using these operations. however  when he looks at h i s d e f i n i t i o n . he notices that he could have produced a much more e f f i c i e n t program by w r i t i n g a special procedure f o r powerset d i r e c t l y in terms of the array or l i s t p r i m i t i v e s . this is what our system attempts to do. a well w r i t t e n program in a lisp-like language expresses i t s structure as a h i e r archy of functions. our system eliminates higher l e v e l function c a l l s t o gain e f f i c i e n c y   f l a t t e n i n g t h i s hierarchy. four d i s t i n c t improvement processes seemed to be i n d i c a t e d . 
1. recursion removal  
1. eliminating redundant computation  by merging common subexpressions and combining loops. 1. replacing procedure c a l l s by t h e i r bodies. 
1. causing the program to reuse data c e l l s which are no longer needed  in order to reduce storage a l l o c a t i o n and garbage c o l l e c t i o n at run time. 
　　　we have devised algorithms to perform these p r o cesses on programs and implemented these algorithms as pop-1 programs  section 1 gives an example of t h e i r use . these algorithms are applicable to a v a r i e t y of domains and require only a c o l l e c t i o n of rules specifying p o t e n t i a l l y useful equivalences f o r a p a r t i c u l a r domain. we have t r i e d our programs on our o r i g i n a l example  programs about f i n i t e s e t s     and we can reproduce automatically a l o t of the t r i o k s incorporated in the o r i g i n a l handwritten programs f o r the sets domain. 
　　　the o v e r a l l system using processes 1 to 1 takes as input programs in a non-imperative language of recursive d e f i n i t i o n s and converts them  v i a i n t e r mediate stages  i n t o an imperative language. this imperative language uses while statements as w e l l as recursive d e f i n i t i o n s and permits assignment to components of data s t r u c t u r e s . 
　　　in order to produce e f f i c i e n t programs the system must use properties such as a s s o c i a t i v i t y or commutati v i t y f o r the operations to be performed. 
       the p r i n c i p l e techniques used are   i   matching  i n v o l v i n g f u n c t i o n a l abstraction to detect the form of a recursive d e f i n i t i o n     i i   matching to detect common subexpressions and compound operations i n v o l v i n g the occurrence of several f u n c t i o n a l symbols  using algebraic equivalences    i i i   symbolic running to extract meanings from programs and check that a t e n t a t i v e l y constructed sequence of i n s t r u c t i o n s p r o -
duces the required r e s u l t . no elaborate theorem proving techniques are used  and the programs run quite f a a t   even though we have not xrked to code them e f f i c i e n t l y . 
	1.. 	recursion removal 
       in t h i s stage the system attempts to oonvert the set of recursion equations to a single i t e r a t i v e p r o gram in the same operations. during t h i s process p a r t i c u l a r a t t e n t i o n is paid to the semantics of the operations making up the recursion equations. this 

1 
process is generally applicable; the only input required is the set of recursion equations and a table of rules giving algebraic laws for the operations used. 
　　　there has been considerable theoretical investigation into how to translate recursive achemas into equivalent iterative achemas e.g. strong   garland and luckham   although as far as we know only the bbn lisp compiler makes use of any of these ideas  and this only for simple recursions* these studies apply to translations of a schema which preserves i t s effect 
for a l l interpretations of the primitives. our program uses translations which preserve the effect of a schema only for a class of interpretations in which the primitives obey a given set of algebraic laws; we follow cooper who gave examples of such translations. we are only interested in translations which w i l l improve efficiency. the results for translations of schemas to maintain equivalence under a l l interpretations seem to be too weak for practical purposes. 
the translations that we achieve are of two types 
　　　 i  	where the computation sequence of the resulting iterative program is a rearrangement of the computation sequence of the recursive program but contains the same number of steps. 	in these cases we save time and storage overheads associated with the stacking mechanisms  of. factorial function below  
     cii  where the tree grown by the recursive calls contains redundancies because the same values are calculated at separate nodes. our system may produce an iterative program whose computation sequence is shorte* as well as having fewer overheads  cf. the fibonacci function below . 
　　　our system for recursion removal consists of four parts: 
　　　 i  a set of translation rules. each rule has  a  a recursive schema over certain primitives  b  an iterative schema over these primitives and  c  a set of equations over the primitives {and possibly some extra restrictions  which  if satisfied  ensure that the iterative schema produces the same result as the recursive one. 
       i i   a matching algorithm. this determines whether a set of equations is an instance of the 
recursive schema in one of the rules  and if so finds the substitution  
　　  i i i   a simple equality-based theorem prover. this seeks to prove that a substitution is legitimate  i.e. that the equations associated with the rule are satisfied. 
      iv  a control program. this f i r s t partitions the input equations into the smallest disjoint subsets such that if the equation for f involves a call of g and vice versa then they are in the same subset. then  for each subset separately  it tries to find a translation rule which applies to that subset  using the matohing algorithm and the theorem prover  and effects the translation to iterative form if it finds one. 
　　　the matching algorithm is a second order one  in that it finds a substitution which takes primitive constants to expressions and also primitive functions to functions gr lambda expressions. it is described in darlington . it was coded for lucidity  not speed. consider for example this translation rule 
recursion schema f x  = / a -  b 
1 no t a -  h d f e   
1 






1 
 1  cooper  d.c. the equivalence of certain computations. computer journal. vol. 1. no. 1. may  1.  1 . 
 a  darlington  j. a semantic approach to automatic program improvement* ph.d. thesis. department of machine intelligence  university of edinburgh.  1 . 
 1  ernst  g.v. and newell  a. 	generality and sps. 
carnegie institute of technology  pittsburgh  pennsylvania.  1 . 
 1  simon  h.a. 	the heuristic compiler  in 
representation and meaning  eds. h.a. simon and l. siklossy  prentioe hall  new jersey.  1 . 
 1  burstall  r.m. and topor  r.w. private communication.  1   
 1  boyer  r.s. and moore  j.s. 	proving theorems about lisp functions. 	memo 1  department of 
computational logic  university of edinburgh.  1 . 
 1  sheridan  p.b. the arffiimetic translatorcompiler of the ibm fortran automatic coding system. c.a.c.m.. vol. 1. no. 1. 1.  1 . 
 1  rohl  j.s. and lin  j.a. a note or. compiling arithmetic expressions. computer journal. vol. 1. no. ＼  february  1.  1 . 
 1  hopgood  f.r.a  	compiling techniques. 	computer 
mnnographe. macdonald: london and american elsevier inc: new york.  1 . 
1 
