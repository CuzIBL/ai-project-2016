 
　　　the sources of inefficiency in curr e n t l y existing higher order u n i f i c a t i o n algorithms are investigated. 	aside from such t h e o r e t i c a l d i f f i c u l t i e s as the un-
d e c i d a b i l i t y of u n i f i c a t i o n in t h i r d order l o g i c   and the existence of i n f i n i t e u n i f i e r s and the lack of a polynomial bound 
on the number of applications of the   i m i t a t i o n   rule even in the monadic subcase of second order u n i f i c a t i o n   the current algorithms suffer from a b u i l t - i n i n e f f i ciency due to t h e i r introduction and subsequent elimination of many auxiliary functional variables  and to the nondirected nature of the substitutions made by the  projection  r u l e . 	it is argued that a procedure based on attempting to match the argument or arguments of a functional or predicate variable with the subterms of the other formula in the u n i f i c a t i o n can decide the p o s s i b i l i t y of u n i f i c a t i o n and generate the resulting u n i f i e r s much more d i r e c t l y than the t h e o r e t i c a l l v comolete 
algorithm. 
descriptive terms 
higher order l o g i c   resolution  theorem proving  u n i f i c a t i o n 
　　　the recent interest in developing linear and near-linear u n i f i c a t i o n algo-
rithms for f i r s t order languages  see for example huet 1  paterson and wegman 1  and work referred to by them  has  with few exceptions  not been matched by a corresponding e f f o r t to improve the efficiency of higher order u n i f i c a t i o n . a linear u n i f i c a t i o n algorithm is of course-out of the question for higher order logic in general  for not only is u n i f i c a t i o n known to be undecidable in t h i r d order logic  huet 1; lucchesi 1   but even in the monadic subcase of second order logic it has been shown  by winterstein 1  that there exists no polynomial upper bound on the number of applications of the   i m i t a t i o n   rule which together with the  projection  rule plays an essential role in a complete higher order u n i f i c a t i o n algorithm. although linear bounds on the number of t h e i r ap-
plications do exist in some cases  wint e r s t e i n 1   the two above-mentioned rules are inherently i n e f f i c i e n t   	 a  because of t h e i r introduction and subsequent elimination of many a u x i l i a r y 
theorem p r o v i n - 1 : darlington rovfn 
	1 	 


fig. 1. 	unification tree for example 1  n=1  given bv imitation~cum-projection. 
theoron proving-1: darlington 
1 

　　　to see how u n i f i c a t i o n mav be performed more e f f i c i e n t l v in examples l i k e the preceding  l e t us consider the u n i f i cation of 

where the types are as before  and where f is  monadic  and does not occur in e 1 . for every subformula t of e1   the u n i f i cation tree includes some node containing the pair 

where q. is either f   i f t is e1  or is a variable introduced into the tree bv i m i t a t i o n  see for example figure 1 . applying imitation to e v e r y p r o d u c e s the 
u n i f i e r 

as in u n i f i e r  i  of example 1  but applying projection to a g. leads to a successf u l u n i f i c a t i o n if and only if 

leads to a successful u n i f i c a t i o n . this suggests that one may  screen out  in ad-
vance projections that are bound to f a i l   bv f i r s t checking the u n i f i a b i l i t v of awith the various subterms t in e1. tn example 1  there is clearlv just one projection that can succeed  since there is just one subterm of k a  namelv ' a '   that the arqument 'a' of f matches  leading to the u n i f i e r   i i   . here  the match of a with a is t r i v i a l   but in other cases a f a i r amount of work mav be reauired completely to unifv an argument a- of f with a subterm t of e~   especially if either or both contain functional variables. it is therefore more e f f i c i e n t to set up a 
 search pattern  corresponding to a-  but based on less than complete u n i f i c a t i o n   that w i l l  match  just those subterms of e~ that are p o t e n t i a l l y u n i f i a b l e with a. wnile ignoring the obviously impossible cases'  such as those in which a1 and t begin with opposing constants. s p e c i f i c a l l y : 
p1 : 	if a1 is f l e x i b l e   i . e . has a v a r i able head   then 
pattern = any term of type i. 
p1: 	if not  then 
pattern = anv f l e x i b l e term or any term with the same head as a1 . 
a program based on t h i s idea and coded in 
sn1l1 is being experimented with on the ibm 1 at the gmd/bonn. 	earlier programs performed the pattern matching bv means of complete u n i f i c a t i o n of a1 with each subterm t of e1  a technicme that was called  f-matchlna   and the current method is a refinement of t h i s technicme. moreover  it can be incorporated into anv proaram that uses imitation and project i o n . in cases where it is applicable  it has the advantages of introducing no new functional variables and of screening 
o u t
    a p r i o r i impossible projections in advanc.e. 
　　　to explain the method in greater d e t a i l   we s t a r t with a node 
		 n  
of a u n i f i c a t i o n t r e e   containing one or more u n i f i c a t i o n pairs  a. b   where each a  is of the same tvpe as b.. imitation-cum-projection generates successor nodes to n by choosinq a pair  a. b.  from n accordinq to some c r i t e r i o n and applvinq imitation and projection to a. and b. in a l l nossible wavs. the u n i f i cation1 substitutions resultinq from each application are then applied to a l l the nairs in n  thereby generating a successor node after a l l possible  lambda nor-
malisations  and simplifications have been made. if no u n i f i c a t i o n s u b s t i t u tions are applicable to anv pair in n  it is labelled either 's' for  success  or 'f' for   f a i l u r e     as the case mav be. if the pair sinaled out from n 
		 p  
the simnlified nrocedure f i r s t checks whether the nair p bears a subscript u . . if so  it proceeds d i r e c t l v to the aeneration of nodes n  described below  but if not it adds a subscript u. to p  where 
u. is a variable not occurriita in n or i t s predecessors  and w i l l serve as the v a r i able to be used in kubseauent lambda abstractions. it then qenerates a successor node n from p  based on the substitution 
 f
o  
that results from imitation alone  in example 1  t h i s is u n i f i e r   i     . for each subterm t of e1 that pattern matches  itnext aenerates a node n. that results 
from replacing p i n n d 
a u n i f i c a t i o n 	substitution 
where e1 results from replacing the matched term t by u . . in example 1  there is just one subterm t that pattern matches  namelv ' a '   producinq 
the successor node and the corresponding u n i f i c a t i o n substitution   i i   . 

theorem proving-l: darlington 
1 




to imitation-cum-projection for u n i f i c a tions whose trees contain no pairs of the sort found in example 1  where the same higher order variable occurs in both e. and e 1 . the argument in outline is that each successful path containing n projections  n * 1  in an imitation-cum-project i o n tree corresponds uniquely to a successful path containing n n - and n1~nodes in the simplified tree. 
　　　a p r a c t i c a l result of the simplified procedure i s   in i t s application to  constrained resolution   huet 1a   to decide more quickly that only one u n i f i e r is possible in a given case  and therefore to reduce the number of constraints that need be generated. for example  if a part i c u l a r resolvent is based on the u n i f i c a t i o n of 'fa' with a complex e 1   constrained resolution would normally decide that there exists no  most general u n i f i e r   in t h i s case and therefore generate only a skeletal resolvent with {fa e 1 } attached to it as a  constraint  to be unified l a t e r . i f   however  e 1 contains nothing that 'a' w i l l match  then there is only one possible u n i f i e r   namely 1.i  au.e 1     and no constraint need be generated. a l t e r n a t i v e l y   if 'a1 matches only one term t of e 1   then  f   u.e 1   may be taken as  the  u n i f i e r   leaving out  f   lu.e1    since u n i f i e r s of t h i s sort  based on imitation alone  seldom if ever lead to  useful  inferences - for example  i m i t a t i o n alone w i l l not permit the derivation by resolution of p b  from p a   a = b  and x + y v  f a  v f   b     which requires the u n i f i e r  f   u.pu . similar heuristics are employed by bulow 
  1    who does a certain amount of  look-ahead  during higher order resolut i o n in order to rule out branches r e s u l t ing from nonproductive or impossible i m i tations or projections  thereby reducing the number of constraints. another procedure related to ours is bledsoe's  1  method for finding values of set v a r i ables  equivalently monadic predicate variables  in topology  program v e r i f i c a t i o n and other theorem proving domains  where the f u l l power of imitation-cumprojection is not required. in view of the theoretical d i f f i c u l t i e s in achieving s i g n i f i c a n t improvements in higher order inference in general  research of t h i s sort into improving i t s efficiency in important special cases is p a r t i c u l a r l y v i t a l if the inclusion of higher order features in automatic theorem provers  be they based on resolution or natural deduction  is to become a practical proposition. 
