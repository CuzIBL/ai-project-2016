 
the language prolog has been extended by allowing the inclusion of assertions about equality. when a unification of two terms that do not unify syntactically is attempted  an equality theorem may be used to prove the two terms equal. if it is possible to prove that the two terms are equal the unification succeeds with the variable bindings introduced by the equality proof. it is shown that this mechanism significantly improves the power of prolog. sophisticated data abstraction with all the advantages of object-oriented programming is available. techniques for passing partially instantiated data are described that extends the  multiuse  capabilities of the language  improve the efficiency of some programs  and allow the implementation of arithmetic relations that are both general and efficient. the modifications to standard prolog are simple and straightforward and in addition the computational overhead for the extra linguistic power is not significant. equality theorems will probably play an important role in future logic programming systems. 
1. introduction 
prolog is a computer language based on horn clause resolution. the basic resolution procedure  similarly with prolog  
does not allow statements about equality. we cannot  for example  express that 1 = successor s  and then be able to unify p 1  with p succesor 1  . we have adapted a lispbased prolog system  kahn 1  so that it is possible to specify theorems about equality. the unification algorithm has been modified so that if the unification of two terms fails  an assertion is looked for that will prove the two terms are equal. as with any application of the unification procedure  the proof of equality of the two terms may cause the binding of variables in either or both of the terms. 
our prolog-with-equality is a natural extension to standard prolog. we have found several applications for it that extend the power  expressibility  and generality of prolog. these principally fall into two categories-extensible datatypes and greater opportunities to pass partially specified data objects. the former turns out  surprisingly  to augment prolog with all the flexibility of  object-oriented  languages typified by smalltalk  ingalls1   and potentially much more. the second major application area is a greatly improved facility for passing partially instantiated data objects as an alternative to a backtracking-based enumeration of possible bindings. these turn out to be quite easily implemented in prolog-with-equality. moreover  the effect on efficiency in interpreted prolog is minimal and there is every reason to suppose that most computational overhead that is introduced can be eliminated in compilation. 
the notion of equality theorems is very similar to the paramodulation rule found in the theorem proving literature  chang lee1 . 
1. example-rational number datatype 
we will create a rational number datatype as an example of the use of equality theorems. rational numbers will be represented by a term made up of the functor rat with two arguments  the numerator and denominator respectively. there is a distinguished predicate symbol equals which is used to specify the equality axioms. 
we add the following assertion to our database:1 
 equals  rat  --numl  -denoml   rat  -num1  -denom1   :-
 times  -numl  -denon1  -intermediate  
 times  -num1  -denoml  -intermediate  
this expresses the usual cross-multiplication rule for deciding if two rationals are equal to one another. 
our augmented unification rule works as follows: when the interpreter attempts to unify two objects ¦µ and ¦µ using standard unification and fails  it will establish the goal  equals ¦µ . if this demonstration succeeds  the unification succeeds with the new variable bindings. if this fails  it will attempt to prove  equals ¦µ . an attempt to unify  rat 1  with  rat  -x 1  will succeed because standard unification succeeds. an attempt to unify 
 'our prolog syntax is not standard and should be briefly explained. a term is represented as a lisp list whose first element is the functor and the remaining elements are the arguments. a literal prefaced by the symbol   -  is a variable. 

 rat 1  with  rat  -x 1  will cause the goal 
        equals  rat 1   rat  -x 1   to be posed by the system. this will succeed with the variable  -- bound to 1. the original computation continues with this binding and it is placed in the trail for undoing on backtracking. 
we have not yet told the system how to match rationals with any other kind of object. we wish to express a method to decide if a rat is the same as an integer. the following assertion is added: 

if both the numerator and the denominator are uninstantiated it succeeds by unifying the numerator with the integer  otherwise it proves the multiplicative relationship that must hold for the equality to hold. 
the following little program will now succeed 1 times: 
 member  rat 1  -x  
 1  cons  -y  -z   rat  -r  -w   rat 1    
 -x = 1 
+r = 1   -x =  -w 
 -x = 1 
we will also wish  to specify the behavior of this new datatype for several additional relations. the   relation for rationals is implemented with the following assertion: 

this rule could of course work in a prolog without equality theorems when comparing two terms beginning with the functor rat. now  however  if we try to prove the goal     rat 1  1   the attempt to unify this goal with the head of this assertion will cause an attempt to prove that 1 equals  rat  -n1  -d1  which will succeed with the appropriate bindings  n1=l  d1=l   allowing the   goal to succeed. in other languages this might be called  automatic type conversion.  
1. extensible datatypes and generic operations 
equality theorems allow us to gain the modularity advan-
w. kornfeld 1 
tages of generic operations and class structuring as are found in object-oriented languages like smalltalk. the important contributions of this class of languages are two: 
1. one can specify methods for computing facts about whole classes of objects and then have those methods automatically inherited by subclasses. 
1. a given operation will have different effects on different data  in a manner determined by the datum's class. this is decided at run time rather than compile time. 
the paradigm of logic programming is very different from the paradigm of message passing systems. we do not have  objects  which receive  messages.  the role of objects are played by terms; the role of messages by relations. the concept of  class  has no formal analog in prolog-withequality. the effect of class structuring is accomplished by the use of equals assertions. a subclass relationship is indicated by a single equals assertion containing terms for the sub- and super-class. the pattern of variables between the two terms and the body of the assertion express the relationship between the two classes. 
as an example  we might have the class regular-polygon. all regular polygons have four attributes  an x and y location  a side length  and the number of sides. in prolog we might want to specify a method for computing the areas of regular polygons. this would be done as follows: 

we could then have a functor equilateral-triangle that is defined to be equal to a regular-polygon with three sides: 

then if we prove the goal 
 area  equilateral-triangle  -  - 1   -ans  
the attempt to unify it with the head of the area assertion will result in an attempt to show the term with functor equilateral-triangle is equal to a term with functor regular-polygon. this will succeed with  -length bound to 1 and the goal will succeed with  -ans bound to 1. of course  since this is prolog  we could ask the question: 
 how long does the side of an equilateral triangle have to be to have an area of 1   this would be: 
 area  equilateral-triangle  -  -  --length  1  

1 w. kornfeld 
this goal will succeed with  -length bound to 1. 
we could also have area assertions for other kinds of objects such as ellipses: 

this will not interfere in any way with goals asking for the areas of triangles because there is no theorem that allows us to show triangles and ellipses are equal. 
we could define a circle by saying: 

that will then allow the use of theorems about ellipses for answering questions about circles. 
there is one sense in which we have more flexibility in prolog-with-equality than can be achieved with objectoriented languages. as with other aspects of prolog  we are able to leave many aspects of our computation undetermined and still carry out the computation. within objectoriented languages an object's class is known at object instantiation time. this is not true for terms in prolog-withequality. suppose we have the goal: 

the variable obj is unified with a regular-polygon of an indeterminate number of sides. side-number is later unified with 1 and predicate is called. if predicate has assertions that will allow proofs about triangles then we will succeed because obj will unify with triangles. 
a fanciful example involves the term closed-figure with two argument  a perimeter and an area. we can state the following equality assertion: 

expressing the fact that if the perimeter of a closed figure is 1r and the area is nr1 for some r  then it is a circle. a closed-figure described in this way  if instantiated to be a circle  can be used in any proof that was defined using the circle functor. 
the code above is most unlikely to appear as part of a practical program. when things are left so undetermined  simple programs can take very long because there may be very esoteric ways of doing proofs. it is important  however  to see that such generality is available. moreover  the uses of equality theorems that model the class-structuring idea are very efficiently implemented. we discuss these issues briefly in section 1. 
1. partially specified objects 
one of the desirable features of prolog is its ability to deal with partially instantiated data objects. one way to look at this is that the partially instantiated data object stands for a non-singleton subset of the herbrand universe corresponding to our prolog program. if we were not able to pass such objects freely in our programs the control structure of prolog  or any logic programming language remotely like it  would require us to successively generate bindings of the variable to ground objects for consideration by the remainder of the proof. this is the power that unification gets us and also the principle difference between prolog and the language micro-planner  sussman  et. al. 1  which preceded it but was otherwise similar. we find that our inclusion of equality proofs in prolog extends the range of possibility for passing partially instantiated data. in some cases this can significantly improve the efficiency of programs by replacing an otherwise expensive enumeration of ground terms with backtracking. in other cases it makes possible a program that would not be possible otherwise because there is no convenient way to enumerate the space. 
we define a binary functor called  which will represent an arbitrary partially specified object. the first argument to an ¦¸ term is a variable that is uninstantiated when the term is introduced. the second argument is a relation that must hold for all terms in the subset of the herbrand universe that this ¦¸ term represents; it is expressed in terms of the uninstantiated variable. for example  if we execute the goal     -x 1  where the variable x is at this point uninstantiated  we will succeed with the binding for x:  ¦¸  -num     -num 1  . this represents  and will unify with  all numbers that are greater than three. when this is unified with a number  e.g. 1  the variable num is unified with 1 and the unification succeeds of the relation succeeds  which it does because three is greater than five . 
the equals relation for ¦¸ terms is defined as follows: 

the predicate instantiate succeeds if its argument is instantiated  i.e. that it is neither a variable nor an uninstantiated ¦¸ term; when it succeeds the second argument is bound to the instantiated value. the first assertion declares that an ¦¸ term is equal to something if the item the ¦¸ 

w. kornfeld 1 


1
¡¡the preponderance of the impure instantiate relation is only necessary when data if to be passed to evaluablc predicates  such as lisp-  . as   warren 1   points out  most of the work in building a prolog is in writing the  evaluable predicates . however  our   relation is a true prolog predicate in that it is not required for its arguments to be instantiated when called. our goal is to be able to bury such impure evaluable predicates inside logically sound relations. 
arithmetic expressions are an example where it is impossible in a practical sense to generate each of the possible bindings as ground terms. however there are other situations where we may wish to use ft terms as an alternative to enumerating the bindings. 
1
¡¡this is equivalent in power to the constraint network formalisms  borning 1  sussman  steele 1  . 
1
¡¡ic-prolog   clark 1   provides arithmetic on integers by building the integers using successor. this is very general  but not efficient for practical problems. 

1 w. kornfeld 
consider the following goal: 
 and  member  -x  -very-long-list  
        pred  -x   where on entry very-long-list is instantiated to a very long list and x is uninstantiated. suppose that pred is true of only a few of those elements. in this case  using the standard prolog definition of member  the relation would become a generator of succesive elements from the list. an alternative way of writing member would be that  if x is not instantiated upon entry into the member relation  the relation would instantiate x to: 

this would effectively save the constraint that x be a member of the list until there was some item under consideration. then  and only then  would the constraint be checked. 
it is far from clear how one would characterize the conditions under which ft terms will be preferable to using a predicate as a generator. yet this does seem an important tool. it is distinct from  yet compatible with  extralogical control annotation as in ic-prolog   clark 1  . 
1. functional notation 
many people are uncomfortable with the flat relational style of prolog as opposed to the functional notation lisp and most other languages. lisp syntax allows the composition of functions without the need to introduce temporary variables to glue successive relations together as in the above example for computing the area of a polygon. we can straightforwardly augment prolog with functional notation by using equality theorems: 

notice that we distinguish the function %plus from the relation plus. it makes no sense in  logic or  prolog to unify a relation and a function. using these new functors we can define a temperature converter relation that expresses the relationship between the fahrenheit and centigrade scales. the relation is a one-liner: 
 temp-converter of  1 times  % difference  --f 1   rat 1    this is like the  executable pattern  of  nakashima 1 . 
1. equality assertion invocation 
prolog constructs can be understood in either a declarative or procedural sense. thus far we have not considered the precise procedural semantics of prolog-with-equality. certain care must be exercised in defining the procedural semantics to avoid infinite loops or otherwise unacceptably wasteful searches. our solution to this yields a system which is far from complete in the logical sense  yet is sufficient for the classes of examples in this paper. it has a further desirable property that allows the compiler to precompute certain information that will allow most failing unifications to fail in constant time. such a property is critical if this mechanism is to find its was into practical programs. 
the first restriction we put on unification via equality assertions is that the assertions can only be used one way. suppose we attempt to match  foo 1  with  bar 1 . this will cause the unifier to generate a goal of the form: 
 equals  foo 1  	 bar 1   
now suppose we had an equality theorem whose head was: 
 equals  bar  -n   -s . an attempt to unify the goal with this assertion head would cause a recursive goal of  equals  foo 1   bar 1  . this will lead to an infinite computation. to avoid this problem we require that in matching the first term of the equals goal with its counterpart in the head of the assertion the functors must be the same. the unification of the second argument may recursively create new equality assertions. this allows for chains of equality matches  but not cycles . 
unification in prolog-with-equality  as in standard prolog  is deterministic-it can only succeed once. for normal prolog there is no problem because there can be only one most general unifier. however  in consideration of of models other than the standard herbrand model  see  for example  a survey of equational theories  siekmann  saabo 1   it is possible for there to be no unique most general unifier. to properly handle such cases would require introducing a backtracking point in the unification itself. for the class of applications i have looked at so far there does not seem to be a compelling reason for doing so  yet this is possible route to be taken in the future. one way this could be understood within the class hierarchy paradigm is that there may be more than one most general unifier because there is more than one way to view the first as an instance of the second. 
1. efficiency considerations 
it is critically important from the efficiency point of view that one of the functors must be explicitly present as the first functor of an equals assertion. thus equals assertions can be grouped in much the same way that assertions with the same first predicate are grouped in the implemen-

tation. if one tries to match two terms  neither of which has equals assertions for it  the match can fail quickly. in the event that one or both have assertions associated with them a series of equals derivations may ensue that is potentially costly. a compiler can do much to eliminate this whenever the terms are not relatable by figuring the chains of functors statically from the code. if neither functor can be reached by a chain of equals assertions from the other the two can definitely not be unified. by using hash tables to store this information most failures can be discovered very quickly. in particular  the use of equality to model object-oriented languages requires no backtracking and a small  constant  overhead to determine failure. 
1. conclusions 
my experience with prolog-with-equality to date has been very encouraging. the modifications necessary to the interpreter to make equality theorems possible was done in one evening of programming. the basic paradigms explored  extended datatyping  partially instantiated ¦¸ terms  appear quite natural and general. moreover the added features do not impinge on the efficiency of basic prolog. i am hopeful that new paradigms for using equality will emerge as more experience is gained. 
i am currently developing a system in prolog-with-equality for composition of musical examples of species counterpoint. this area of music theory has been studied extensively over several centuries and large  precise rules systems exists for it. the two paradigms are quite important for developing this system. the partially instantiated term notion is used to represent classes of pitches  when the fully instantiated note must be one of those pitches . the unification process for two partially instantiated pitches becomes a set intersect. this way expensive backtracking is avoided. 
1. bibliography 
attardi g.  m. simi  consistency and completeness of omega  a logic for knowledge representation  sev-
enth international joint conference on artificial intellgence  vancouver  august 1. 
borning  a.  thinglab-a constraint-oriented simulation laboratory  xerox parc report ssl-1  july 1. 
chang  c  r. lee  symbolic logic and mechanical theorem proving  academic press  1. 
clark  k.  ic-prolog language features  in clark & tarnlund  logic programming  academic press  1. 
ingalls the smalltalk-1 programming system: design and implementation  fifth annual acm symposium on 
	w. kornfeld 	1 
principles of programming languages  tucson arizona  january 1. 
kahn  k.  unique features of lm-prolog  unpublished manuscript. 
nakashima  h. prolog k / r language feature  first international logic programming conference  marseille  september  1. 
siekmann  j.  p. szab1  universal unification and a classification of equational theories  1th conference on automated deduction  new york  june 1. sussman  g.  t. winograd  e. charniak  micro-planner 
reference manual  mit artificial intelligence laboratory memo 1  1. 
sussman  g.  g. steele  constraints mit artificial intelligence laboratory memo 1  november  1. 
warren  d.  implementing prolog-compiling predicate 
logic programs  university of edinburgh department of artificial intelligence report no. 1. 
