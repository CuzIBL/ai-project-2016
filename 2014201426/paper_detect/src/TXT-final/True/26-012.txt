ion via approximate symmetry 
thomas ellman 
department of computer science 
rutgers university 
new brunswick  nj 1 ellman cs.rutgers.edu 

abstract 
abstraction techniques are important for solving constraint satisfaction problems with global constraints and low solution density. in the presence of global constraints  backtracking search is unable to prune partial solutions. it therefore operates like pure generate-and-test. abstraction improves on generate-and-test by enabling entire subsets of the solution space to be pruned early in a backtracking search process. this paper describes how abstraction spaces can be characterized in terms of approximate symmetries of the original  concrete search space. it defines two special types of approximate symmetry  called  range symmetry  and  domain symmetry   which apply to function finding problems. it also presents algorithms for automatically synthesizing hierarchic problem solvers based on range or domain symmetry. the algorithms operate by analyzing declarative descriptions of classes of constraint satisfaction problems. both algorithms have been fully implemented. this paper concludes by presenting data from experiments testing the two synthesis algorithms and the resulting problem solvers on np-hard scheduling and partitioning problems. 
	1. 	introduction 
abstraction techniques are important for solving constraint satisfaction problems  csps  with global constraints and low solution density. examples of such problems include the partition problem and the multiprocessor scheduling problem  both of which are np-hard  garey and johnson  1 . in the presence of global constraints  backtracking search is unable to prune partial solutions  nadel  1 . it therefore operates like pure generate-and-test. when overall solution density is low  this approach is not effective  except when applied to small problems. abstraction can improve the performance of backtracking by enabling entire subsets of the solution space to be pruned early in the search process. 
　the value of abstraction can be illustrated by considering the multiprocessor scheduling problem.  see figure 1.  a solution to this problem is an assignment of beginning times to jobs that meets deadlines  obeys precedence constraints and has a limited number of jobs running at once. in this problem  the constraint on the number of simultaneously running jobs is global  i.e.  in general  one cannot verify the constraint without knowing the beginning times of all the jobs. backtracking algorithms therefore cannot easily use this constraint to prune partial solutions. in contrast  the following abstraction strategy introduces a new level of description that enables partial solutions to be pruned: first partition the set of possible beginning times into contiguous  
1 	machine learning 
disjoint time windows. then construct an abstract solution in which each job is assigned a beginning window  rather than a beginning time. if possible  prune any window assignments that can be shown to violate the problem constraints. finally  refine the window assignments into specific beginning times. 
　as a second illustration of the value of abstraction  consider the partition problem.  see figure 1.  a solution to this problem is a subset m of a set e such that the weight of elements included in m equals the weight of elements excluded from m. this constraint is global  since one cannot verify equality of the total weights without knowing the inclusion/exclusion status of each element. backtracking algorithms therefore cannot easily use this constraint to prune partial solutions. the following abstraction strategy overcomes this limitation: first divide the elements of e into disjoint classes such that elements of roughly equal weight are grouped together. then select a quota for each class that represents the number of elements of the class to be included in m. if possible  prune any quota assignments that can be shown to violate the problem constraints. finally  refine the quotas into an actual selection of elements to be included in the set m. 
　the behavior of a hierarchic problem solver is illustrated in figure 1. the illustration shows a search tree broken into two parts. the upper portion represents a space of  abstract states    e.g.  a space of window or quota assignments . backtracking tests each complete abstract solution against an  abstract goal   e.g.  testing problem constraints against window or quota assignments . the lower portion represents a space of  concrete states    e.g.  a space of beginning times or subset membership assignments . backtracking tests each complete concrete solution against the original  concrete goal    e.g.  testing problem constraints against beginning times or subset membership assignments . search in the concrete space is also guided by  constrained variable range generators . these require each concrete state variable to assume values that are consistent with the abstract solution   e.g.  obeying previously specified window or quota assignments . whenever the problem goal includes local constraints  the search may also be guided by  localized  abstract or concrete goals which serve to prune partial abstract or concrete solutions. 
　algorithms for synthesizing hierarchic problem solvers are presented in section 1. these synthesis algorithms can be defined in terms of the components of the hierarchic problem solver illustrated in figure 1. each algorithm inputs a description of a concrete search space and a concrete goal. each outputs an abstract search space  an abstract goal and a set of constrained variable range generators.  methods of constructing local goals and local abstract goals are described in  braudaway and 
tong  1 .  


	ellman 	1 

1 	machine learning 


	ellman 	1 


u is an unbroken sequence of integers  u =  /...u   then u is partitioned into intervals of equal or nearly equal size;  1  otherwise  u is partitioned in a bottom up fashion  starting with singleton sets  and repeatedly merging two sets x and y such that / has minimal variation over xuy. in either case  the final partition is chosen to yield an abstract space whose size is the square root of the size of the concrete space  based on a rough analogy with korf's result on the optimal size of abstraction spaces  korf  1 . 
　when the range symmetry algorithm is applied to the multiprocessor scheduling problem description in figure 1  it generates the abstract goal function shown in figure 1. this goal function g p a  performs interval arithmetic  interval comparisons  and boolean-set algebra on the time window assignments b j  a  represented by an abstract state a: for example  g p  a  checks deadlines by converting beginning time windows into ending time windows  and noticing whether any job's deadline occurs earlier than the start of its ending window. likewise  g p  a  checks for processor overload by computing lower bounds on the numbers of jobs running at each point in time  and noticing whether any lower bound exceeds the available number of processors. the abstract goal g p  a  thereby computes a necessary condition on the original goal. 
　when the domain symmetry algorithm is applied to the partition problem description in figure 1  it generates the abstract goal function shown in figure 1. this fjoal function g p a  selects an arbitrary concrete soution s consistent with the quota assignments m e  a  represented by an abstract state a. it then applies to s an approximation g p  s  of the original goal function that is symmetric with respect to the partition e. this symmetric goal function g p  a  treats each eee as if it has an interval w e  of weights  rather than an actual weight w e   i.e.  an interval spanning the weights of all elements in class e . it first computes an interval i1 bounding the total weight of elements included in m and an interval s1 bounding the total weight of elements excluded from m. it then checks whether these intervals overlap. the abstract goal g p a  thereby computes a necessary condition on the original goal. 
1 	machine learning 
	1. 	experimental results 
a series of experiments was run to evaluate the performance of automatically synthesized problem solvers based on range and domain symmetry. results of these experiments are shown in figures 1 and 1. each graph compares the performance of a hierarchic problem solver  which uses abstraction  to the performance of a flat problem solver  which uses no abstraction. the hierarchic and fiat problem solvers use the same underlying backtracking code  but with different input specifications. each graph plots problem size against performance measured in terms of cpu time. cpu time is a better measure than alternatives  like numbers of goal tests or numbers of states generated  for two reasons: first  the computational cost of generating one state or testing one goal may not be the same in the flat and hierarchic problem solvers. second  the relative importance of state generation and goal testing may not be the same in the flat and hierarchic problem solvers. 

figure 1: multiprocessor scheduling problem results: hierarchic  solid  v. flat  dotted  

figure 1: partition problem results: 
hierarchic  solid  v. flat  dotted  

　the multiprocessor scheduling; problem graph compares performance on problems with a fixed domain size  i.e.  1 jobs   and a varying range size  i.e.  the number of time slots running from 1 to 1 . each data point represents an average over a set of 1 randomly generated problems. the multiprocessor problem search was guided by localized versions of the abstract and concrete oals in order to realize pruning from application of the 
 ocal constraints that appear in this problem. the localized goals were constructed automatically from the corresponding unlocalized goals using standard dependencytracing techniques. the partition problem graph compares performance on problems with a varying domain size  i.e.  the number of elements running from 1 to 1  and a fixed boolean range. each data point represents an average over a set of 1 randomly generated problems. the partition problem search was guided by unlocalized versions of the abstract and concrete goals  since no local constraints appear in the partition problem. in each of the two test domains  the hierarchic solver outperforms the flat solver for sufficiently large problems. a series of paired  single-tailed t-tests shows hierarchic scheduling to be faster than flat scheduling with significance greater than 1% on the five largest problem sizes. a series of paired  single-tailed t-tests shows hierarchic partitioning to be faster than flat partitioning with significance greater than 1% on the two largest problem sizes. 
1. related work 
abstraction techniques have been studied previously in the context of planning  knoblock et a/.  1  and theorem proving  giunchiglia and walsh  1 . in contrast  the research presented here is focused on abstraction techniques for constraint satisfaction problems. a program called  hit  for automatically constructing abstraction spaces for csps is presented in  mohan  1 . hit uses the ranges of functions appearing in the goal definition as the basis for constructing abstraction spaces. hit may be seen as a special case of the range symmetry technique described here. methods of attacking hierarchical csps are discussed in  mackworth et al  1 ; however  these methods exploit existing hierarchies and do not construct new ones. abstractions based on quotas have been studied in the context of resource allocation problems  lowry and linden  1 . approximate symmetry provides a rational reconstruction of the quota concept. furthermore  approximate symmetry is more general  because it depends only on the algebraic form of the problem and not on semantic notions such as  resources . abstractions based on windows operate in a manner similar to interval constraint propagation  davis  1 . approximate symmetry provides a means of using such interval-based methods to attack problems with global constraints  to which constraint propagation techniques to not immediately apply. techniques for recognizing and exploiting exact symmetries have been investigated in the context of propositional satisfiability  crawford  1 . in contrast  the methods presented here construct and exploit symmetries that are not present in the original problem. approximations and abstractions have been used to construct heuristic evaluation functions in the context of constraint satisfaction  dechter and pearl  1  and state space search  prieditis  1 . a system that selects and combines multiple heuristics to synthesize csp algorithms is described in  minton  1a  and  minton  1b . 
1. acknowledgments 
this research is supported by the national science foundation.  grants iri-1 and iri-1 . it has benefited from discussions with haym hirsh and christopher tong and programming by saibal patra. 
