 
 we investigate two new distributed routing algorithms for data networks based on simple biological  ants  that explore the network and rapidly learn good routes  using a novel variation of reinforcement learning. these two algorithms are fully adaptive to topology changes and changes in link costs in the network  and have space and computational overheads that are competitive with traditional packet routing algorithms: although they can generate more routing traffic when the rate of failures in a network is low  they perform much better under higher failure rates. both algorithms are more resilient than traditional algorithms  in the sense that random corruption of routing state has limited impact on the computation of paths. we present convergence theorems for both of our algorithms drawing on the theory of non-stationary and stationary discrete-time markov chains over the reals. we present an extensive empirical evaluation of our algorithms on a simulator that is widely used in the computer networks community for validating and testing protocols. we present comparative results on data delivery performance  aggregate routing traffic  algorithm overhead   as well as the degree of resilience for our new algorithms and two traditional routing algorithms in current use. we also show that the performance of our algorithms scale well with increase in network size-using a realistic topology. 
1 	introduction 
efficiently routing data in a dynamic network is a difficult and important problem in computer networking. by dynamic we mean a network subject to frequent and unpredictable changes in topology and link costs  e.g.  due to congestion . one of the most widely used solutions for routing on such networks  coltun  1  places substantial space and time requirements on all the routers to guarantee effective performance  thus limiting its scalability. in this paper  we investigate two algorithms 
1 	learning 
for this problem inspired by the dynamics of how ant colonies learn the shortest routes to food sources  using very little state and computation  beckers et ai  1 . the first algorithm  which we call the regular ant algorithm  is based on earlier work by holland et. al. 
chooenderwoerd et ai  1  for call routing in tele-
phone networks. the regular ant algorithm is a single shortest path algorithm and is only applicable to networks with symmetric path costs. we have developed a second algorithm  called the uniform ant algorithm  which is a natural multi-path routing algorithm that is applicable to data networks with or without path cost symmetry. we provide a summary of theoretical properties of both ant algorithms as well as an empirical evaluation on a low-level network simulator. 
   a major reliability issue in data networks is the resiltence of the routing algorithms to corruption of router state. current routing algorithms are more susceptible to such failures since they maintain more network state at each router. we experimentally demonstrate that the ant-based algorithms are far more resilient. even though the routing traffic generated by our ant algorithms exceeds that of existing algorithms  ants can be readily piggybacked onto data packets on a hop-by-hop basis  since they are small and are of fixed size. this piggybacking helps to significantly defray the routing overhead. finally  the routing overhead of ant algorithms is independent of the rate of change  link/recoveries and failures and link cost changes  in the network  making these algorithms very attractive for highly dynamic networks. 
　the paper is organized as follows. in section 1  we describe the routing problem in brief and present two current solutions to it. in section 1  we describe the two ant algorithms and prove their convergence properties. in section 1  we present an detailed empirical evaluation of the ant algorithms. 
1 	the routing problem 
the challenge of routing in packet-switched communication network is the need for a fully distributed algorithm that is able  without central coordination to disseminate knowledge about the network  to find shortest paths robustly and efficiently in the face of changing network topologies as well as changing link costs. there are two major classes of adaptive  distributed packet routing algorithms in the literature: distance-vector algorithms and link-state algorithms. distance-vector algorithms are dynamic programming algorithms which only propagate cost information. no node  at any time  has complete knowledge of the topology of the whole network. link state algorithms require all nodes to know the topology of the network before computing shortest paths. link state methods have each node periodically broadcast its local topology and costs to the entire network. the internet open shortest first  ospf  protocol  coltun  1  uses a link state algorithm. 
1 	ant routing algorithms 
to facilitate the description of our algorithms we distinguish between two types of nodes on the network: hosts and routers. hosts are communication end-points  that is  they can initiate and terminate data messages1. routers are nodes which forward data messages and can send and receive routing messages. there are three key conceptual ideas underlying our two ant algorithms. ants that explore the network: the hosts take a very active role in gathering information about the costs of various paths in the network. periodically  each host hd in the network generates a message to another randomly chosen host hs. this message is of the form  hd hs  c  where c is a cost that starts out at zero and is the cost to get to hd- the message is sent out on the network where it is forwarded to hb by routers it encounters  which also increment the cost c to reflect the cost in reverse1 of links it has traveled on thus far. when the message reaches its destination hs  the cost c is the end-to-end cost of sending a message from hd to hs. the message1 is destroyed at host hs. these messages are small  size 1   1 to 1 bytes   and we refer to them as ants. ants explore paths backward from destination nodes in the network to source nodes. how ants are routed through the network  and the rate at which they are generated  the generation rate is the same for all hosts in the network  are key parameters in the definition of the ant routing algorithms. probabilistic routing tables: unlike link state and distance-vector algorithms which compute deterministic forwarding tables for each router  our forwarding tables are probabilistic. the router r maintains for each destination node x in the network  an entry of the form  is 
   1in general  a host represents a network destination for which the ant algorithms compute routes; a destination could be a single computer attached to the network  a subnetwork within an internetwork  or a routing domain within a hierarchical routing architecture. 
   1 when a message traverses a link from node a to node b  c is incremented by the cost of the link from b to a. 
   1in fact  we do not require that the message get to h  since hs could be an inaccessible host. any other host in the network can absorb the message  and the message is destroyed once c increases beyond a pre-set threshold. 
a point-to-point link and  when r receives 
a message destined for host x it forwards it to its neighbor yi with probability pi. the probabilistic tables are a mechanism for exploring alternate paths in the network and keeping estimates of their lengths relative to the current best paths. 
 probabilistic updates of routing tables by ants: an ant  generated by host hd to host hs probabilis-
tically updates the routing tables of all the routers it encounters along its path. the update rules are similar in spirit to those in traditional reinforcement learning algorithms  kaelbling et a/.  1 ; the key technical difference is that the update rules are non-linear. 
if router r receives the ant on link from node yi  it updates c by adding the cost of traversing li in reverse  and then updates its entry for which is as follows: 
where function of c. 
　these update rules are drawn from  schooenderwoerd et al  1 . the constant k is called the learning rate 
of the algorithm. it is generally less than 1. the learning rate needs to be set high enough that each ant has some effect on pi  and low enough so we can guarantee convergence of the routing probabilities. note that the router's probabilities to the host which generated the ant are updated. ants perform a form of backward learning. 
　unlike traditional adaptive algorithms in this context  including  littman and boyan  1; kaelbling et al  1  the extent of the reinforcement is not the direct cost c of the ant  rather it is a decreasing non-linear function1 of c. 
	a router 	forwards the ant 	after updating 
its table as discussed above. it uses the routing probabilities for ant forwarding as follows. let the routing entry 
for destination be the regular ant algorithm uses and the 
uniform ant algorithm uses 
　regular ants use the learned forwarding tables to route ants. if a good  non-congested route is found  new ants will be more likely to be forwarded on that route. exploration of less desirable routes is curtailed by this policy  so eventually the ants converge to a single shortest route. regular ants require path costs in the network to be symmetric: i.e.  the cost of getting from node a to node 1 has to be the same as the cost of getting from node 1 to node a. 
　uniform ants are unbiased by the forwarding probabilities and explore all paths with equal probability. uniform ants are natural multi-path routers  they increase available bandwidth and are not prone to route oscillation problems that single shortest path routing algo-
   1 we normalize actual path costs  so that the  are not affected by linear scaling of link costs in the network. 
	subramanian  druschel  & chen 	1 
rithms have. uniform ants have a much simpler structure than regular ants. a uniform ant is of the form  hd   c  where hd is the host that generated it and c  initialized to zero at the source  is the cost to get to hd on the links it has traveled on so far. uniform ants have a time to live  after which they are terminated. uniform uniform ants 
for uniform ants  the probabilities p t  and q t  evolve simultaneously according to the stochastic discrete difference equations shown below. note however that the equations for p t  and q t  are no longer coupled. 

ants do not require a destination  a fact of great practical importance because not every host on the network knows about all the other hosts. 
1 	learning 


table 1: a comparison of resource requirements for the entire network  n is the sum of the number h of hosts in the network and the number r of routers in the network. / is the number of point-to-point links in the network. d is the diameter of the network and e is the average number of links per router. 
changes in the network will be detected and the probabilities will adapt at a pace dependent on the learning rate k. 
　we use the solution in  schooenderwoerd et ai  1  to allow regular ants to perform a certain degree of random exploration. a certain percentage of the time  f%   a router forwards ants uniformly randomly  i.e.  using the uniform ant routing policy   and the rest of the time   1 - /%  the router forwards ants according to the forwarding probability tables  i.e.  using the regular ant routing policy . this noise only affects ant forwarding and not the data packets. with /   1  the probabilities of a single path never reach 1 or 1. this guarantees that if a primary route becomes no longer available  the update rules reinforce the second best paths fairly quickly. only the ants traveling on the second best path get to reinforce the forwarding probabilities to the source and there are no ants to reinforce the former best path. we summarize this phenomenon by the slogan: bad news travels fast. however  if a better path suddenly becomes available  the only ants available to reinforce it are the ones routed through it by the noise; and so the system takes longer to switch to the better path. we characterize this as: good news travels slower than bad news. to make good news travel faster  we can crank up the noise levels or increase the learning rate. 
　table 1 summarizes the key resource requirements of the ant family of algorithms  the distance-vector and the link state algorithms. this table makes it clear that the link state algorithm pays a significant overhead in terms of state on each router and in terms of time to compute shortest paths. this investment in state in the routers allows it to reduce the number of routing messages sent during the computation of initial routes. the distancevector and the ant algorithms have significantly lower router state  but this comes at the expense of increased routing message traffic. while the distance-vector and ants use roughly the same order of bytes of routing traffic  the ant algorithms use a factor of h  where h is the number of hosts  more messages than the distance-vector method. it is important to note that ant messages  unlike the distance-vector messages  are of constant size  and can be piggybacked on to data packets. on high bandwidth networks this virtually gives us ant routing traffic for free. 
1 	experimental results 
in this section  we present the results of extensive simulations that were performed to evaluate the proposed algorithms  and to compare their behavior with that of the distance-vector  dv  and link-state  ls  routing algorithms. the algorithms are evaluated on networks with simple topology  and more realistic topologies derived from a subset of the internet inter-domain topology. 
1 	simple topology 

figure 1: simple network topology 
the first  simple network used in our simulations is depicted in figure 1. in this network  all links are of equal  unit cost. thus  for instance  the shortest path from r1 to r1 has cost two1. simulations were run for 1 seconds of simulated time. this time was chosen such that each routing protocol can reach steady state conditions between successive changes in the state of the network. each host generates ants at a rate of 1/second. at time t = 1s  the network is started with initial conditions. the link connecting r1 and r1 fails at time t = 1s  and it recovers at time t = 1s. the learning rate is .1 and the noise level is 1%. 
　our first experiment quantifies end-to-end delivery latency  which is an important aspect of a routing algorithm's performance as perceived by a network application. figure 1 shows the end-to-end delivery delay  in number of network hops  measured during the simulation described above. host h1 periodically sends messages at a rate of 1bytes/second to host h1. the figures show the results for regular ants  uniform ants  and the distance-vector algorithm respectively. we omit the link-state plot because it is identical to the distancevector plot. a reported delay of zero hops means that the packet was lost  i.e.  it was never delivered to its destination. 
　to a first approximation  all algorithms achieve the minimal delivery delay of 1 hops during the interval between t = 1s and t = 1s  and a delay of 1 hops otherwise. uniform ants split traffic among multiple paths. this results in some jitter  i.e.  variance in delay  when 
     1 the link between a host and its associated router is not included in any path cost calculations. this is purely a matter of implementation convenience. it has no effect on the routing algorithm. 
	subramanian  druschel  & chen 	1 


figure 1: end-to-end delay plots for regular ants  uniform ants  and the distance vector algorithm for the simple network topology in figure 1. host hi is the sender and host h1 is the receiver. the delay plot for the link state protocol is identical to the one for the distance vector algorithm. 


table 1: routing traffic per link per second for uniform ant  ua   regular ant  ra   distance vector  dv   and link state  ls  algorithms. 
traffic is split over paths with different costs  as can be seen in the graph up to t = 1s and between t = 1 and t - 1s. traffic is also split between t = 1s and t = 1s  but here the traffic is split over equal cost path  with no impact on jitter. splitting traffic in this way also leads to an increase in available bandwidth  but this is not evident from the delay plot. 
　in response to the failure of the shortest path link at t = 1s  packets are lost for a period of three to five seconds  depending on the algorithm used. with the ant algorithms  this time is determined by the transition time of the forwarding probabilities  caused by the reinforcement of alternate paths. 
　table 1 shows the amount of routing traffic generated by each of the algorithms in our simulation. whenever a routing message traverses one link of the network  one message transmission is recorded  and the size of the message is added to the number of bytes of routing traffic. 
　in this experiment  the amount of routing traffic generated by the ant algorithms exceeds that of ls and dv by roughly a factor of 1  both in terms of messages and data. note  however  that all ant routing messages are small and of fixed size. therefore  these messages can be piggy-backed onto data packets  substantially defraying their cost to the network. the messages generated by the ls and dv algorithms are larger and not of fixed size; therefore  they do not lend themselves easily to piggybacking. in the subsequent section  we will present data that quantifies the dependence of routing traffic on network size and rate of change in the link costs. 
1 	learning 
resilience to state corruption 
the next set of experiments attempt to quantify the behavior of our routing algorithms in the event of failures. specifically  we are interested in failure modes where a router's internal state is corrupted. this case is of great practical importance. router state corruptions can occur in practice due to intermittent software and hardware faults  and configuration errors. unlike communication errors affecting routing messages  such errors are difficult to detect and/or correct. at t = 1s in the simulation  router r1 suffers an intermittent fault that causes its routing state to be overwritten with random values. since we are interested in evaluating the robustness of the various algorithms  rather than that of their implementation  the routing state is corrupted with random but plausible values. 
   with ls  the recovery period is bounded by the periodic link-state broadcast interval. in practice  the broadcast interval tends to be quite long  for instance 1 minutes in the ospf protocol. during the recovery period  the router is unable to calculate correct routes  which may result in routing loops and the associated loss of connectivity. with dv  once the router has learned its actual local topology  it will eventually converge to the actual shortest paths after a number of message exchanges that is proportional to the diameter of the network  and the range of the path cost metric1. in practice  the process can be expected to take time on the order of seconds. during the recovery period  routing loops may exist and cause loss of connectivity. 
　figure 1 shows the end-to-end packet delivery delay from h1 to h1. it is evident that both uniform and regular ants perform extremely well in the event of a router corruption. with uniform ants  only a small number of packets suffer an increased delay of four hops for approximately 1 seconds following the router failure. no packets are lost with either algorithm. in comparison  with ls and dv protocols  one expects loss of connectivity  packet loss  after the router failure for a period 
     1  a count-to-infinity may occur in a loop of routers involving the failed router. 


figure 1: the left two plots show the end-to-end delay  from h1 to h1 in the network of figure 1 for regular and uniform ants with router corruption. router r1's probability tables are randomly overwritten at time of 1s. the plot on the right side shows the routing traffic for the 1  1  and 1 node star-like topology. 

of time ranging from seconds to minutes. 
1 	scalable topology 
the second topology we use for our experimental evaluation more closely reflects the structure of realistic data networks. the topology is based loosely on the internet inter-domain routing topology. the network is roughly a partial 1-ary tree where one of the six leaf nodes of each parent is connected to one leaf node of the adjacent parent. we use graphs with 1  1  and 1 levels with a total of 1  1  and 1 nodes. for each size of the network  we measure the routing traffic generated by each of the algorithms necessary to achieve a given speed of convergence of 1 seconds. 
　figure 1 shows the number of routing messages generated by each algorithm for networks with 1  1  and 1 nodes  during a 1 second simulation with parameters equal to those used in the earlier simulations. thus  for realistic wide-area network topologies that are characterized by low degrees of connectivity  all these algorithms scale well. 
　in our final simulation  we measure the generated routing traffic as a function of the rate of topological change for each of the algorithms. topological change is modeled here as the number of links that fail and recover over the simulation period of 1 seconds. figure 1 shows the amount of routing traffic generated by each algorithm in the 1 level network  for various rates of link failures and recoveries. as predicted  the routing traffic generated by the ant algorithms remains nearly unaffected by the amount of topological change in the network. with link-state and dv  the routing traffic increases more than linearly with the amount of change. this demonstrates one of the key advantages of ant algorithms over ls and dv. 
1 	related work 
1 	q-routing and ants 
in q-routing  littman and boyan  1   each node keeps q-values of the form qx d y   representing node x's cost estimate to d via neighbor y. whenever x forwards data to d  x consults its q table and forwards to the neighbor with the least cost estimates to d. on receiving a packet from x  neighboring node y immediately sends its least cost estimate to d back to x. x then adjusts its cost estimate qx  d  y  based on y's message. 
　q-routing uses a dynamic  i.e.  traffic-dependent  routing metric  delay . therefore  it can adapt to changes in topology as well as traffic conditions. ants  as well as ls and dv  can be made to do the same simply by choosing an appropriate link cost metric1. 
q-routing differs from regular ants in two key aspects. 
first  unlike ants  q-routing is not guaranteed to find the shortest path. second  the amount of routing traffic with q routing is directly proportional to the amount of data traffic in the network  while routing traffic is constant with ants. uniform ants have the additional capability of routing packets along multiple paths. 
　q routing can discover changes in route cost  delay in this case  only on the currently used route. since the currently used route is the best known route  only an increase in the cost of the currently used route can cause q routing to select a different route. a decrease in the cost of a route other than the currently used route cannot be discovered  causing q routing to potentially use a suboptimal route. the full echo variant of q routing overcomes this deficiency for the special case where a better route other than the currently used route is known to a neighbor of the message source. full echo comes at the cost of increased routing traffic  but can still not guarantee convergence to the shortest path. the regular ant algorithm can be shown to always converge to the single shortest path. 
　to illustrate this point  consider figure 1  which shows the packet delivery delay for q-routing and regular ants in the 1 irregular network used in  littman and boyan  1 . for both algorithms  the routing cost metric is 
　　1 for instance  to implement a delay-based metric  neighboring routers can periodically exchange ping-pong messages  and assign the measured delay as the cost of the associated link. 
	subramanian  druschel  & chen 	1 


figure 1: the plot on the left side shows routing traffic as a function of link failures for the 1 node topology. the two plots on the right show an end-to-end delay comparison between regular ants and q-routing. the network load increased to 1 at time 1s and decreased to 1 at time 1s. 

end-to-end delivery delay. at t = 1s  the background network load increases  causing a change in the optimal path between source and destination. at t = 1s  the network is restored to its original load. it is evident that at t = 1  q-routing adapts to increasing load and discovers the new optimal path  but fail to  rediscover  the original path when the background traffic subsides at t = 1s. as a result  the delivery delay never returns to its value before t = 1s. the ant algorithms  on the other hand  is able to converge to the optimal path in both cases. data packets that are forwarded more than 1 times are considered undeliverable and are shown as having a delivery time of zero. as evident from the graph  a substantial number of packets are not delivered with q routing during the transition phases following t = 1s and t = 1s. 
   with ant algorithms  the routing traffic is independent of the data traffic. the rate of ant generation determines a fixed tradeoff between amount of routing traffic and rate of convergence. in q-routing  the number of routing messages is directly proportional to the number of transmitted data messages. this means that at low network load  q-routing is slow to adapt to network changes. at high network load  q-routing overhead increases  thus limiting the aggregate capacity of the network. 
1 	link-state and distance-vector algorithms 
ant routing algorithms differ from ls and dv algorithms in various aspects. raw ant routing traffic exceeds that of ls and dv by a small factor  but this must be seen in light of the following facts. first  the absolute amount of routing traffic for a 1 node network is still modest  1 bytes/sec and 1 msgs/sec of traffic are generated per link . the small  fixed sized  1 bytes for uniform  1 bytes for regular  ant messages can be piggy-backed onto data packets on a hop-by-hop basis  which largely defrays their cost to the network. unlike ls and dv  ant routing traffic does not increase with the rate of change in the network  making these algorithms 
1 	learning 
suitable for highly dynamic networks. ant algorithms maintain minimal state in the routers  which meets the needs of networks with scarce router resources. thus they are particularly suitable  for instance  in mobile  wireless networks used for personal communication networks where topology and load changes frequently  and where resources in the routers are scarce. finally  the ant algorithms have additional capabilities  multi-path and improved resilience to router state corruption  not present in ls and dv. 
