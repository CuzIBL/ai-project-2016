: this paper presents an overview of a framework for the synthesis of high-level program descriptions from traces and example pairs in an automatic programming system. the framework is described in terms of a methodology and a rule base for generating control and data structure specifications for the program to be synthesized  in a format suitable for transformation into program code in a given target language. 
keywords: automatic programming  program inference  informal program specifications 
one of the ways to specify a program is by the use of traces and example pairs of the program's behavior. a trace is basically a mixed sequence of operator applications  information structure states  and holdings of relations between these. example pairs are a particular instance of traces  in which the only information present is states of program data structures. a methodology for the synthesis of programs from such descriptions must provide a means for the transformation of such descriptions into actual program code. in the past proposed methodologies have been closely tied to the coding rocess and have had no programming domain support 
 bauer-1  shaw-1 . in an automatic programming system  such as the psi system being developed at stanford  green-1 it is highly undesirable to transform directly a program specification into code for several reasons: it is hard for the system to explain the reasoning that leads to the target program and hard for the user to verify that the system really understood the program description. it is also imperative to use some domain support to disambiguate the user's intentions. a framework has been devised for the synthesis of programs from traces and examples that copes with these constraints by using information about the target program's domain and by being totally decoupled from the coding process. tx  a program embodying this framework  has been implemented in inter lisp  and is currently one of the constituent modules of the psi system. 
tx transforms 	input traces 	into partial loose descriptions 
 called fragments  which in turn are transformed by psi's model builder  mccune-1  into a consistent and complete high-level program description. this description is suitable for use by psi's coder  barstow-1  to produce lisp or sail code. the process of transformation of input traces into fragments is accomplished in several stages. the input trace components are classified and mapped into an internal trace representation using domain knowledge. this representation is a linear sequence of instantiated templates that describe interactions between the target program and its environment  transformation of data objects by the program and conditions arising in the interaction of program components. control structure loops and tests are formed by a set of rules that detect possible iterations and associate holdings of conditions with activation of operators  using a combination of matching  unification and other inductive inference techniques. data structures are obtained from example instances based on the syntax of the example itself and domain information  by a process of description  unification and generalization  that goes from the primitive components of the data structure to its top level description. rules are currently available for the inference of arbitrarily complex compositions of sets  tuples  multisets correspondences and plexes  and primitive objects  strings  atoms  numbers . these partial control and data descriptions are the input to the synthesis phase of the psi system. 
currently tx has synthesized several different classes of simple learning programs and set manipulation programs. a facility is being added to use psi's natural language parser  cinsparg-1  as the front end of tx to enable the user to mix freely natural language dialogues and traces. research is being directed towards isolating a base of programming knowledge about traces and examples and attempting the synthesis of more complex and sophisticated programs. the possibility of using the structure of such a system for the acquisition of domain knowledge is under study. for further details the reader is referred to  phillips-1  
references 
barstow-1 barstow  david r.  a knowledge based system for 
automatic program construction to be presented at the 1th international joint conference on artificial intelligence  cambridge  mass. august 1. 
bauer-1 bauer  michael a basis for the acquisition of 
procedures from protocols in advance papers of the iv 
international joint conference in artificial intelligence  tbilisi  georgia ussr  1 
cinsparg-1 ginsparg  jerrold  a parser for english and its application in an automatic programming system  ph.d. thesis  ai memo  artificial intelligence laboratory  cs report  
computer science department  stanford university  stanford  california  forthcoming. 
green-1. green  c. cordell  the psi program synthesis system: an overview proceedings of the second international 
software engineering conference  computer society  institute of 
electrical and electronic engineers  inc. long beach  california  october 1  pp 1 
mccune-1 mccune  brian p. the psi algorithm model 
builder: 	a 	system 	which synthesizes very 	high-level 
algorithms  to be presented at the acm sigart-sigplan 
symposium on artificial intelligence and programming languages  rochester  new york  august 1 
phillips-1 phillips  jorge v. program inference from traces using multiple knowledge sources ai memo  artificial 
intelligence laboratory  stanford university  in preparation  
shaw-1 shaw  swartout and green  inferring lisp functions from examples advance papers of the iv international joint conference in artificial intelligence  tbilisi  georgia ussr 
1 

specialized systens-1: 	p h i l l i p s 
1 

 actor  person name mary  
	delayed 	i n t e r p r e t a t i o n using processing notes 
equiv  person rel  actor person  =  ptrans to  city name boston    
	christopher k. 	riesbeck 
	a more complex equiv note is used 	for 	sen-
yale 	u n i v e r s i t y tences 	of 	the 	form 	 si but s1  where si is an 
new haven  ct 1 a c t i o n from a knowledge s t r u c t u r e  ks  such as a s c r i p t or a plan  schank and abelson  in p r e s s   . 
	 but  in these sentences means that 	s1 	is 	con-
d e s c r i p t i v e keywords and phrases t r a r y 	to 	the 	i n t e n t i o n s of the ks. 	the i n t e n t i o n s of a ks are the goals associated with 	that 
n a t u r a l 	language understanding - semantic 	r e p r e -
	ks  	plus 	the actions that the ks says w i l l lead 
s e n t a t i o n 	memory 	and 	inference 	- 	knowledge to 	those g o a l s . 
s t r u c t u r e s - memory models 
	the sentence frame  si 	but 	s1  	is 	r e p r e -
background sented 	as 	 s1 is not equiv to any event leading to an event that is a goal of the ks in 	s i .   	in 
	eli 	 english 	language 	i n t e r p r e t e r     	the 
cd t h i s i s : 
n a t u r a l 	language analyzer used by the a r t i f i c i a l 
i n t e l l i g e n c e 	p r o j e c t 	at 	yale 	 riesbeck 	and 
   con s1 
schank  	1  	schank  	1   b u i l d s conceptual 
	equiv 	 specify i 
dependency  cd  forms  schank  	1  	to represent 
rel  con specify1 
i t s 	semantic 	i n t e r p r e t a t i o n s of input 	t e x t s . 	by 
leadto  specify1 
i n c l u d i n g 	in 	the 	cd 	for.us 	s p e c i a l 	elements  
rel  ks goal specify1      
c a l l e d 	processing 	notes  	eli can i n d i c a t e what 
parts of the cd form l a t e r 	i n f e r e n c i n g 	programs 
mode nec  
must complete. three d i f f e r e n t notes have been developed so f a r . 
conclusion 
the kef note 
	the a d d i t i o n of processing notes 	l i k e 	ref  
	specify  	and equiv allows not only b e t t e r commu-
eli uses the kef note to guide 	the 	i n s t a n n i c a t i o n between eli and 	the inference 	programs  
t i a t i o n 	of noun phrases i n t o memory tokens. 	for but 	also 	allows 	us to represent the meaning of 
example   he  is analyzed 	into 	  person 	cender words 	l i k e   b u t   which make 	meta-coimnents 	about 
male ref def   and  soinone is analyzed i n t o the t e x t s in which they appear. 
  person gender male ref in'def  . 	 ref def  	i n d i c a t e s 	that 	e x i s t i n g 	memory 	tokens should be looked a t . 	 ref indef  i n d i c a t e s that a new 	t o -
