engineering a complex ontology with time 

jorge santos 
gecad - knowledge engineering and decision support research group 
instituto superior de engenharia do porto 
departamento de engenharia informatica 
1 porto - portugal http://www.dei .isep. ipp.pt/~jsantos 
steffen staab 
universitat karlsruhe  th   institut aifb 
d-1 karlsruhe  germany 
http://www.aifb.uni-karlsruhe.de/wbs/sst 
& 
ontoprise gmbh  1 karlsruhe  germany http://www.ontoprise.com 

1 principal idea 
although most ontologies available on the web  e.g.  consider the daml ontology library  exhibit only rather simple structures  viz. taxonomies and frame-like links between concepts. there are some domains that frequently needs intricate concept descriptions and interactions - - in particular ones about time and space. 
　despite the last developments in practical theories about time and in the engineering of concept hierarchies and concept frames  the issue of how to engineer complex ontologies with intricate interactions based on time has not been researched very deeply  yet  rendering the engineering of a new complex domain ontology with time a labor intensive  one-off experience with little methodology. 
　here  we summarize our ontology engineering methodology  fonte  factorizing ontology engineering complexity   which pursues a 'divide-and-conquer' strategy for engineering complex ontologies with time. fonte divides a targeted ontology that is complex and that includes time into two building blocks  viz. a temporal theory and a time-less domain ontology. each one of the two ontologies can be built independently allowing for a factorization of complexity. the targeted ontology is then assembled from the time-less domain ontology and the temporal theory by an operator  
　thereby  the assembling operator is very different from existing operators for merging or aligning ontologies  noy and musen  1; rahm and bernstein  1  . merging ontologies is a process that intends to join different ontologies about overlapping domains into a new one and most of its problems and techniques are related to the identification of similar concepts through structure analysis  e.g. graph analysis  path length  common nodes or/and edges and lexical analysis . for instance  car from ontology 1  1.car  and auto from ontology 1.auto may be defined to be identical in the merging process because of results of the structure analysis. to formalize the merging and aligning process  wiederhold proposed a general algebra for composing large applications through merging ontologies of related domains  wiederhold  1  and actually  the operations proposed  intersection  union and difference  are about the similarities and differences of two ontologies. 
　in contrast  the result of  r  needs rather to be seen in analogy to the cartesian product of two entities. for instance  car from ontology 1  olcar  with its frame ol.licensedlnstate is assembled by with ontology 1 and its 1.timelnterval in a way such that every car in the result ontology has a lifetime as well as multiple 1jicensedlnstate-frdmts with different  mutually exclusive life spans.  is operationalized by an iterative  interactive process. it starts off with a human assembly - in the sense just explained - between an ontology 1  the time-less domain ontology  and an ontology 1  the temporal theory. it is then propelled by a set of rules and a set of constraints. the set of rules drives a semi-automatic process proposing combinations. the set of constraints narrows down the set of plausible proposals to valid ones. 
　in the past a variety of approaches were proposed for reducing the complexity of engineering a rule-based system  e.g. by task analysis  schreiber et al  1   or an ontologybased system  e.g. by developing with patterns  clark et al  1; staab et al.  1; hou et al  1  or developing subontologies and merging them  noy and musen  1; rahm and bernstein  1 . as different as these methods are  they may be characterized by subdividing the task of building a large ontology by engineering  re-using and then connecting smaller parts of the overall ontology. 
　though fonte shares its goal with these methodologies is its rather different in its operationalization. fonte docs not aim at a partitioning and re-union  by merge or align with recognition of similarities  of the problem space  but rather by a factorization into primordial concepts and a subsequent combination  r  that is more akin to a cartesian product than a union of ontologies. 
1 temporal ontology 
the time and general events ontology used embodies many concepts like instant  period or process routinely found in 'standard' ontologies like time-daml or sumo. 
　besides the classes temporalentity and eventuality similar to the ones used in time-daml a third class  timedthing  was defined to capture the notion that bridges between temporal concepts and the domain concepts that will be used during the assemble process. in particular  we have included the notion of role as a core concept. while there are concepts that give identity to their instances  i.e. they are semantically rigid  guarino and welty  1    e.g. while the identity of a particular person depends on being an instance of person  the identity of the same person does not change when 

1 	poster papers 


figure 1: assembly main process 
it ends being a student and starts being a professor. thus  the notion of role is important when connecting a temporal theory with a concrete domain. 
1 	the assembly process 
the assembly process comprises two main building blocks. first  the specification of temporal aspects for a time-less domain ontology remains dependent on the conceptualization of the ontology engineer. therefore  it is very important that the engineer may interactively influence the process. second  in order to facilitate and accelerate the assembly of time-less domain concepts with temporal notions  the interactive process is supported by heuristics asking and pointing the engineer. 
　the assembling process runs as depicted in figure 1: it starts by an i n i t i a l setup. some basic operations are performed  namely loading the ontologies to be assembled  loading a set of rules to drive the process and initializing some process parameters. the rules and parameters are defined separately from the tool in order to allow for adaptations to the particular needs of different temporal ontologies. however the rules and parameters do not change when a new domain ontology is to be assembled. the target ontology initially corresponds to the union of the time-less domain ontology  ol  and the temporal theory  1. 
　in the analyze s t r u c t u r e step a set of tests are performed that restrict the set of possible task instances to plausible ones  which are then proposed by insertion into the task list. as more information becomes available in subsequent iterations  the usefulness of results provided by the structure analysis improves. 
　in every iteration the engineer decides whether to accept an automatically proposed task instance from the task list. alternatively  the user may take the initiative and assemble a new task instance from scratch. then a set of logical tests  validate  are performed in order to detect the existence of any knowledge anomalies  e.g. circularity or redundancy . in contrast  the acceptance of a proposed task instance does not require further checks as the checks are tested for validity before the user sees them. 
　by the execute task step the corresponding changes are made to the target ontology. thereafter  the user decides either to pursue another iteration or to go to conclude process and accept the current target ontology as the final version. 
1 	evaluation and conclusion 
in order to evaluate the effectiveness of fonte  we have numerically evaluated the assembly tasks proposed and executed for an ontology about semantic web research community and the temporal ontology briefly presented in section 1. we have investigated how many assembling steps were proposed and evaluated their adequacy. the study results suggest that indeed fonte provided a way to factorize the complexity of building large applications leading to more reliable and cheaper final products. 
　though  so far  we have only studied the assembly of time into a given ontology  we conjecture that fonte may also be applied to integrate other important concepts like space  trust  or user access rights - concepts that pervade a given ontology in intricate ways such that a method like fonte is needed in order to factorize engineering complexity out leading to more consistent and cheaper target ontologies. acknowledgments this work was supported by a marie-curie fellowship and by fct  portuguese science and technology foundation  through the programs ontomapper  posi-1  and sanski  pocti-1 . we thank our colleagues  particulary n. silva  g. stumme  and j. tane. 
