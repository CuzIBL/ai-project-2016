 
     the representation power of goal-subgoal trees and the adequacy of this form of problem reduction is considered. 	a number of inadequacies in the classical form are illustrated  and two versions of a syntactic procedure incorporating extensions are given. 	although the form of the corrections are suggested from resolution theory results  and the value of this connection 
emphasized -the paper discusses the goal tree format and its extensions on an informal level. 
key words: theorem proving  goal trees  and/or trees  geometry theorem machine  resolution  model elimination. 
	1. 	introduction 
　　　after several years when almost a l l theorem proving systems  and many problem solving systems  were based on resolution  many researchers are returning to natural deduction type logics  often implemented via some form of goal-subgoal tree notation using a problem reduction approach. in this paper the goal-subgoal tree form  or and/or tree form  is considered. we show that if one wishes to use this syntactic form for representation of the deductions and search space 
as a f u l l replacement for the resolution approach  one must make same additions to the classical problem reduction formulation. 
     to show that there exist holes in the classical goal-subgoal problem reduction method we need only present some examples  which we supply. to determine an appropriate correction and measure its power takes some theory. it turns out that resolution theory  in 
particular the model elimination procedure results  provides an adequate theoretical base. 	in this paper 
we only state the consequences for the problem reduction approach  omitting proofs. however  we want to stress the value of resolution theory for the insight it gives to the problem reduction method and remark. that more information than is exploited here can certainly be pulled from existing resolution theory. 
     and/or trees  used as goal trees  are components of most problem solving systems that are not resolution based. 	we are hereafter concerned only with goal trees used for logical inference. 	we show  among 
other things  that the usual way of organizing goalsubgoal trees is incomplete yet one small change makes the mechanism complete  assuming equality substitution is not relevant  and if the equality predicate is used  several added rules gives completeness in general. by completeness  we mean that the goal trees and associated syntactic mechanism is capable of establishing a goal statement whenever the goal is valid given the assertions present. the systems we discuss are the search trees such as are used in the geometry theorem 
machine  gelernter et a l . 1   1   1     the logic theorist  newell et al. 1   and elsewhere. indeed  when the equality predicate is not present  the mechanism of the 
plane geometry machine is sufficient in structure and 
research supported in part by nsf grant gj-1. 
* 
 present address: computer science department  duke university  durham  n. c. 1. 
mechanism to be complete yet is not complete. 
　　　the subject of completeness is embroiled in controversy these days. we feel a developing consensus that total completeness is pointless to pursue  and for almost all problems  pursuit of the solution w i l l be done by methods  particularly search methods  incomplete in themselves  yet the total reservoir of tools to be drawn upon should be complete if at all possible. in particular  one wishes the underlying organization and recording mechanism  this is what and/or goal trees are  to be capable of handling any situation. the 
worst possible situation is to be prevented from establishing a simple inference not because one is unable to thread through the search space but because the inference chain cannot even be represented. we claim this is particularly bad because the problem specific search tools are expected to be updated frequently while the 
underlying recording  proof  mechanism is viewed as far more stable. in analogy  inability to express concepts due to inadequate grammatical structure is worse than inadequacy due to a limited vocabulary  for one more readily adds to his  her  vocabulary. one wishes a grammar  complete  although no one expects a  complete  vocabulary. 
     as regards goal trees  one instance of inadequate understanding of goal trees and the associated mechanisms is reported in gelernter1. this paper documents an instance where a mechanism mixing use of the stuck and established labels with goal elimination due to identical higher goal resulted in the inability to infer theorems whose known proof complexity suggested solution should be possible. as search spaces were relatively small  most runs could be carefully analyzed  so the flaw was probably discovered on the first theorem for which the flaw actually prevented the proof. however  the geometry theorem machine had been in operation nearly a year at that time and many  production  runs were made prior to this discovery. moral: flaws in infrequently used logical paths may be particularly bad because simple  and important'   results may be blocked long after the system is believed  debugged  in its basic routines. 
     we do not consider completeness proofs here but rely on examples to suggest the need and degree of applicability of extensions to the classical form for goal trees. those familiar with resolution theory  in particular  model elimination as given in loveland1  also in kowalskt and kuehner1  w i l l be able to verify some claims. other assertions are based on results to appear in a forthcoming book on theorem proving by one of the authors''. 
     at this stage of development of the a r t i f i c i a l intelligence field  we feel it is unnecessary to j u s t i fy interest in theorem proving techniques themselves. the.bibliography lists a small sample of papers that investigate theorem proving techniques or apply such techniques to robot guidance  question-answerer systems  automatic programming  etc. 
	1  	goal trees 
1 　　　by a goal tree we mean an and/or tree developed by a problem reduction mechanism. a  classical  treatment of goal trees occurs in nilsson1 and slagle 1   for example. we review this notion briefly by outline 

     a goal tree records the development of the search to establish g by linking it to the premises via the implications. 	g is the top goal; if it is also a premise  g is established. 	otherwise a l l implications 
with consequent g are located and the antecedents of each such implication become new goals  subgoals of g. g is the parent of each new goal and each new goal is the successor of g. if each new goal for one of the implications can be established  g is then established  by asserting the implication . the antecedents of one implication form partner goals. we also refer to a conjunction of goals 'meaning the set of antecedents from one implication. any single set of partner goals  goals in conjunction  at this level that can be established establishes g. this yields a disjunction of partner goal sets. if no partner goal set corresponds to a set of premises  some partner goal set is selected and each of the partners not a premise is again matched against implication conclusions to create  possibly  new subgoal sets  not necessarily as a single parallel action . this proceeds in iteration until a sufficient set of premise matches are found  or the search stops. the conjunction/disjunction relationship above leads to the name and/or tree. 
     a goal a is an ancestor of goal b if a is the parent of b or a is an ancestor of the parent of b. a partner of an ancestor of the goal a is called an ancestor partner of a. 
     we give an elementary example from plane geometry in the spirit of the geometry theorem machine  gtm ; bee figure 1. immediate subgoals lie below their goal and are connected by a slanted line. partner goals are 
connected by a horizontal line. in figure 1 the bottom leftmost conjunction of goals is rejected even though two goals are premises because the third goal 
also occurs as the top goal  thus it is an ancestor of itself. 	any goal that occurred as an ancestor goal of itself was rejected at the lower level in the gtm 
structure because if it could be established at a l l   it could be established from the higher level. also in the gtm structure was a way of discarding a conjunction of goals if a higher conjunction containing 
an ancestor was easier to prove. we do not elaborate for we handle this somewhat differently. the key point is that interaction with ancestor goals existed  and was very important due to the  depth f i r s t   search which meant not leaving a branch until you could go no further. 
     we now enlarge our format for expressions. this is done by allowing our atoms to be literals  atoms possibly preceded by a negation sign. thus if a is a complex expression  we look inside only to check if the leftmost symbol is a  not  operator of propositional logic. if so  it is displayed. we let a  b  c ...  possibly with subscripts  represent literals. to emphasize that b is a proceeded by a  not  we w i l l sometimes write b as ~a. a and ~a are complement l i t erals. otherwise  our expression format is as before. 
　　　the use of negated goals has not appeared in the classical inference programs using goal-subgoal systems. the geometry theorem machine avoided che need to recognize complementary goals almost by accident  for concepts like  xyz is collinear  and  xyz is not collinear  both appeared but did not interact. however  in general situations particularly in robot systems  
question answerer systems  etc. interaction between complementary literals is to be expected. certain recent systems of a goal-subgoal format have been designed to handle negated formulas so that complemented literals interact; see bledsoe et a l . 1   reiter 1   these systems are less in the classical goal-subgoal format than the system considered here and also appear to be incomplete. 
     we consider in figure 1 a simple example in which the goal follows from the assertions but the goal-sub-
goal mechanism so far illustrated w i l l not establish the goal. one reason is that the contrapositive of one of the assertions is needed. we add the contrapositive as an explicit assertion. we note  however  that there is no way of proceeding to a premise! yet the problem is simple enough so that one can read the intended meaning of the assertions and see that the goal follows. we claim that because  -c occurs as an  indirect  subgoal of c  we can treat ~c as if it were a premise and terminate that branch. that is  *-c is now 
marked contradicted and considered established. 	as a is a premise  b is established  so c is established  as 
desired. 
　　　the rationale for the mechanism above is not hard to find. either c is true or ~c is true. if ~c is true  then we can establish c  after establishing other pertinent subgoals   which is imposatble. thus c is true. this is an argument by contradiction. we observe that the check for this is t r i v i a l if possible identity with ancestor goals is checked as in the gtm. one simply checks for identity and then complementation. 
　　　the not-so-immediate fact is that we now have a propositionally complete system. that is  if no substitution inside literals is allowed bo as to make distinct literals alike  or complementary  no further gimmicks w i l l be necessary. in figure 1  we note a possible alternate argument to produce establishment is that one of d and ~d is true so one of the two ways 
of establishing c should be permitted  	is this s u f f i cient also  	probably so  we are not sure. 	in any event  it is generally a much more d i f f i c u l t check as the occurrences of d and -j  are on different disjunctive branches and can be made to appear at an arbitrary 
depth by making the inference connecting c and d more complex. thus instead of a nearly free check one has a relatively complex tree search. but might such a 
tree search be necessary anyway  for some case where ancestor complements do not occur  no. that is the meaning of our statement that the system is now propositionally complete. the proof is a consequence of the completeness of model elimination  me . 
　　　in general  problem solvers w i l l not be constrained to work propositionally. the expressions we have considered  goal and assertions  w i l l in general have free variables and functions  including skolem functions which build in universal quantifiers. we do not consider in detail the process of general conversion to 
1 our chosen format  generalized somewhat below . 	it is basically the conversion to disjunctive normal form with skolem functions  the dual to the  conversion  in nilsson1  for example. the general structure of the goal-subgoal mechanism when operating in the presence of free  individual  variables and substitution is the same but with direct comparison replaced by the notion of unification from resolution  see robinson1  nilsson1   or slagle 1  . 
     one of the common substitution situations involves equality. if we have goal p a  and assertion a=b we certainly consider p b  a subgoal whose establishment 
would yield p{a . 	indeed  some readers may wonder why we need to write p b  explicitly. 	p a  might be interpreted as a l l statements equivalent to p a  under equality substitution. 	this has disadvantages when substitutions use numerous derived equations so we reject this here although a use of such identification 
might be satisfactory. such a treatment is compatible with our main points but requires a modified organization to that given below. 
　　　in figures 1  1  and 1 we give examples where the goal should be inferred from the assertions presented but cannot be inferred under the simple format of the preceding paragraph. these figures suggest the format in which we propose to handle such problems. that is  in our general description below the problems stated 
would generate the goal tree presented. 	note that in 
figure 1 an alternate form of implication 1 is needed. we supply it here as assertion 1  we call 1 a general contrapositive of 1. we remark that we would expect the situation of figure 1 to arise very infrequently so such an inference route should be investigated only 
when desperate. 
     again  if we adopt the few rules for handling equality given below  of which three instances have been displayed  we have completeness of the goal tree procedure when equality substitution is included. the completeness proof comes from the appropriate form of me with paramodulation  an equality handling mechanism  whose proof appears in loveland . 
     a number of other features for goal tree analysis can be gleaned from results concerning me. most are natural in this setting such as the removal of a conjunction of goals when one goal matches an ancestor goal. we noted this was incorporated in the gtm. a non-intuitive situation is that a conjunction of goals can be eliminated if one of the component goals is complementary to an unexpanded ancestor partner goal  i.e.  a goal with no subgoals yet recorded  but completeness is not assured unless a goal is marked displaced  and treated as established  whenever it matches an unexpended partner or an unexpended ancestor partner goal. displacement is illustrated in figure 1. displacement avoids expanding the same subgoal twice. 
　　　figure 1 is an example of another situation we must handle. if s is an unsatisfiable formula  s c is valid for any formula c. we use the device of the 
contradictory formula ps which may be considered a shorthand for formula p a -p. this device allows a natural extension of our notion of assertion and goal and suffices to handle cases where the goal  or subgoal  cannot be directly derived although it is a valid consequence of the assertions. 
     we write the general format for our goal tree system as if a propositional system is our concern. that i s   a l l comparisons of literals are by identity or complementarity. however  the word matches is used for this identity check. 	by interpreting matches as 
using a most general unifying substitution  the general form is realized when substitution for  individual  free variables is permitted. we include in our format the substitution of equality but  again  with the ambiguity which may or may not allow free variables in those terms. 
     for convenience we label the problem reduction procedure below the meson  model elimination subgoal oriented  procedure. 
     we consider again the expression format. an arbitrary first order formula can be converted to the appropriate expression format  preserving validity. a formula  or  finite  set of formulas  not already suit-
ably expressed should be converted to the following 
form: 
	b 	...ab 	- g  
where b. is of the form a a. . . m m -  c or c and g is of the form l.a...al   where the a s  l ' s and c are l i t erals. this is readily obtained from the disjunctive normal form of the original formula. g then defines the goal: if k l  l- is the single goal  otherwise l. ... u are top level partner goals all of which must be eventually established. we can tackle one at a time  though they may be linked by common variables  so hereafter we consider a single goal g. a a . . . m -  c 
is an assertion implication  and c a premise. an important equivalence for format preparation is  a  * b v c     a a  b -* c . this is used to form the various general contrapositives needed for completeness. we extend this to generate  -a -  ♀ from a  for example. 
     if the goal is believed to follow directly from the assertions  as is usually the case  the use of i 
may be avoided. otherwise  add p. -* g  the assertion generated from the goal  to the assertions and for each assertion a. a. . . m -  c add the general contrapositive a a...aa a ~c -*    and for each premise add i*c - j♀. only one such formula need be added to the assertion l i s t if some version of that assertion is believed necessary to establish the result. 
　　　it is necessary to consider  for each assertion implication a a...aa -  c  m general contrapositives plus the original assertion if completeness is to be preserved. there should be one general contrapositive a a...a a -   a a   .ft a   -   a for each i. the order of antecedents in any assertion is immaterial. 
	1. 	the meson procedures 
　　　the procedures presented here are for propositional  variable free  problems. 	we w i l l make occasional reference to the requirements of the procedures u t i l i z ing variables. 
　　　the procedures represent syntactic systems for adding to a goal tree information about goal-subgoal relationships and establishment of goals. the procedures return  success  or  failure  according to whether the top goal can be established or not respectively. of course  the ability to return  failure  disappears when substitution is allowed  e.g.  first-order formulations  a returned value of  failure  for a problem indicates either the top goal does not follow from the assertions or the search ordering and goal generation and deletion strategies specified by the planning routine are inadequate for the problem.  it is possible to write a complete planning routine which theoretically always returns  success  for soluable problems.  
1 we w i l l now present two meson procedures for goal 
tree analysis incorporating the new rules discussed above. the procedures are logically divided into four subprocedures with labels   i n i t i a l i z e      loop    updatejnarks  and  update goals . 
     the instructions placed at the label   i n i t i a l i z e   define goals  the set of goals to be attempted  to be the set consisting of only the top goal and also i n i tialize the goal tree. 
　　　the instructions placed at the label  loop  select a goal g from goals  an operation to be performed and an assertion d if needed. the selected operation is then performed for the goal g and assertion d. those 
operations try to establish goals or create subgoals. 
　　　the instructions placed at the label  update  marks  mark a goal  established  if each of a l i s t of partner successors is marked  established    contradicted  or  displaced . thus  if each of a conjunction set of subgoals of a goal is established  the goal is established. 
　　　the instructions placed at the label  update   goals  add newly generated subgoals to the tree and goals provided certain acceptance criteria are met. 
　　　the selection of the next goal in goals to be operated upon and the selection of the operation and the assertion to be used in operating on that goal are assumed to be accomplished by some externally specified planning routine   the planner  . the planner  in addition to specifying a search strategy  may restrict or totally eliminate use of some of the operations. for example  traditional goal tree procedures 
without the contradiction mechanism correspond to a planner which never uses the operation at  op1 . 
　　　the planner  by applying the operation at  op1  to a goal  removes the goal from goals and thereby signifies that no more operations w i l l be applied to the goal. 
　　　if one wishes to insure completeness  the planner must in some order process a l l operations  except the operation at  op1   for each goal and potentially applicable assertion. 	the planner may select the goals of a conjunctive set of goals in any desired order to attempt their establishment. 	the procedure s  make no assumption as to whether the search is depth-first  breadth-first  or borne mixture of these. 
meson procedure 
initialise; let goals be a set consisting of only the top goal. initialize the goal tree to the top goal. 
loop: if goals is empty  exit procedure with  failure . let g be a goal in goals selected by the planner. the planner selects one of the following operations to be performed on g and selects d  a premise  implication or general contrapositive of implication  as required by the operation. 
op1: if g matches the premise d  mark g  established  and go to update marks. otherwise go to loop. 
op1: 	if g matches the consequent of d  where d is an implication or general contrapositive of implication  let a be the 
set of the antecedents of d and go to 
	update goals. 	otherwise go to loop. 
op1: op1: op1; 
update marks; update goals: test 1: test 1: if g matches the complement of an ancestor of g  mark g  contradicted  and go to update marks. otherwise go to loop. 
if g matches an unexpanded partner of g not marked  displaced  or an unexpanded ancestor partner of g  mark g  displaced  and go to update marks. otherwise go to loop. 
delete g from goals and go to loop. 
if g is top goal  exit procedure with  success . if a l l partner goals of g are marked  established    contradicted  or  displaced   let g1 be the parent of g  set g-g   mark g  established  and go to updatejnarks. otherwise go to loop. 
if a member of a is identical to g or an ancestor of g  go to loop  
ii a member oi a is complementary to another member of a  a partner of g or an ancestor partner of g  go to loop. otherwise add the members of a to goals and to the goal tree as a conjunctive set of successors of g and go to loop. 
　　　the meson procedure for equality incorporates rules for handling the equality relation. it differs from the meson procedure in that three new operations are added. also  the rules for disregarding newly generated subgoals  at  test 1  and  test 1   have not been proven to preserve completeness although we believe completeness is preserved with these rules ap-
plied. we maintain the update goals subprocedure in the meson procedure for equality with the admonition that if completeness is to be preserved these rules should be bypassed  at present . 
　　　for technical reasons  it is necessary to put in premises of the form a=a for each term a or  if in a setting using free variables and substitutions  one must put in x=x and f   x     .   .   x   = f   x .   . . .   x   for each n-ary function symbol f. such axioms can be replaced by appropriate procedure rules if desired. 
meson procedure with equality 
initialize: 	 same as for meson procedure  
loop: 	 preface and operations 1 same as for 
meson procedure; only change is the ad-
dition of the following operations  
	op1: 	if g contains a term matching term a 
where a=b or b=a is the consequent of 
d  where d is a premise  implication or 
general contrapositive of implication  
let a be the set consisting of g with a 
single instance of a replaced by b plus 
the antecedents of d and go to update  
	goals. 	otherwise go to loop. 
	op1: 	if the consequent of d  where d is a 
premise  implication or general contra-
positive of implication contains a term 
matching term a where g is afb or bfa  
let a be the set consisting of the 
complemented consequent of d with a 
single instance of a replaced by b plus the antecedents of 1 and go to update  goals. 	otherwise go to loop  
	op1; 	if 	h is art ancestor of g or g itself 
and h  resp. g  contains a term matching 
term a where g {resp. h  is a=b or b=a  
let a be the set consisting of h  resp. 
g  with a single instance of a replaced 
	by b and go to update goals. 	otherwise 
go to loop. 
	 note: 	see examples below.  
update marks: 	 same as for meson procedure  
update goals; 	 same as for meson procedure  
     we attempt to clarify op1 and shed light on its usefulness. consider the case that h is g and g is a=b  a and b simple constants. then  reading the  respectively  case  we see that g contains term e and h is a=b. then a  the possible new subgoal  is g with replacement  i.e.  b=b. taking the other case  ignoring the  respectively   yields the same possible subgoal. this is certainly unproductive and could actually be deleted with no risk involved. however  in a free variable setting with substitution it is important. suppose the goal is f x =x and the sole premise is f f x  =x. by op1 where h is g is f x =x  ignoring the respectively's  for variation   we have h containing a term x matching f y   under substitution f y  for x  where g is f y =y  the change of variable name is a necessary detail ; now a=b is f y = y. then a consists of h with replacement  i.e.  f f y  =y. this subgoal matches the premise and the desired result is obtained. 
　　　it is impossible to give an adequate discussion within this paper of the modifications required to handle first order formulas  i.e.  allowing quantification of individual variables in the problem statement. this is best done elsewhere where space permits a f u l l discussion. the modifications are generally straightforward if the reader is familiar with resolution theory  in particular me. see loveland . subtle points do arise  however  as suggested below. 
　　　performing matching by use of the general unification algorithm is an important idea and  although we can conceive of reasons to select less general substitutions under certain conditions  the advantages of. obtaining the most general substitution should not be given up lightly. this is an important aspect where knowledge from resolution theory can enhance the problem reduction method. 
     we make two further points  really warnings  concerning adopting the above description of the meson procedure to first order expressions. if the goal has a free variable in i t   the negation of the goal should be made a  hypothetical  premise. to see this  consider the following example: goal: p y    i . e .   we 
want to know if 1yp y  . assertion: ~p f a   -  p a . clearly either p a  or p f a   holds. we need  p x  as a premise to realize this. a second point: a substitution may occur in a subgoal when applying an assertion implication. this substitution must be made 
at each occurrence of the replaced variable throughout the goal tree. thus copies of the goal tree must be retained in such instances for back up in case of failure. a good format for handling this involves adopting the me format to the meson procedure organization. 
	1. 	conclusion 
     this paper can be read simply for the illustrations of possible extensions for the problem reduction 
method. however  we have attempted to convey informally that resolution theory can contribute to the under-
standing of alternate syntactic methods. 	other devices 
of resolution such as linear representation of goal trees and use of unit clauses from premises may also be of use. we do believe that the meson format  which simply extends classical goal tree representation  may present a very useful way of incorporating resolution 
ideas in future problem solving programs. 
bibliography 
1. bledsoe  w. w   r. s. boyer and w. h. henneman. computer proofs of limit theorems. a r t i f i c i a l intelligence  1  1   1. 
1. gelernter  h. realization of a geometry theoremproving machine. in feigenbaum  e. a. and j. feldman  eds.  computers and thought. mcgraw-hill  new york  1  1. 
1. gelernter  h. 	machine generated problem solving graphs. 	proc. symp  math. theory of automata 
 1   1  
1. gelernter  h.  j. r. hansen  and d. w. loveland. empirical explorations of the geometry theorem machine. in feigenbaum  e. a. and j. feldman  eds.   
computers and thought. mcgraw-hill  new york  1  1. 
1. green  c. application of theorem proving to problem solving. proc. int. joint conf. on a r t i f i c i a l intelligence  1   1. 
1. hewitt  c. 	description and theoretical analysis  using schemata  of planner: 	a language for proving theorems and manipulating models in a robot. 
mit a r t i f i c i a l intelligence laboratory report ai tr-1  april 1 . 
1. kowalski  k. and/or graphs  theorem-proving graphs and bi-directionsl search. machine intelligence 1  1. 
1. kowalski  r. and d. ruehner. linear resolution with selection function. a r t i f i c i a l intelligence 1   1   1. 
1. loveland  d. w. a simplified format for the model elimination theorem-proving procedure. j. acm 1  1  july 1   1. 
1. loveland  d. w  a unifying view of some linear herbrand procedures. j.acm 1  1  april 1   1. 
1. loveland  d. w  forthcoming book on mechanical theorem proving  north-holland  early 1   
1. newell  a.  j. shaw and h. simon. empirical explorations of the logic theory machine. in feigenbaum  e. a. and j  feldman  eds.  computers and thought. mcgraw-hill  new york  1  1. 
1. nilsson  n. j. problem solving methods in a r t i f i c i al intelligence. mcgraw-hill  new york  1. 
1. reiter  r. two results on ordering for resolution with merging and linear format. j. acm 1  october 1   1. 

1 
1. reiter  r. the use of models in automatic theotemproving. university of british columbia department of computer science report 1  september 1 . 
1. robinson  g. a  and l. t. wos. paramodulacion and theorem-proving in first-order theories with equali t y . in meltzer  b  and d. michie  eds.  machine intelligence 1. american elsevier  new york  1  1. 
1. robinson  j. a  a machine-oriented logic based on the resolution principle. j. acm 1  1  january 1   1. 
1. robinson  j. a. a review of automatic theorem proving. proc. symp. app1. math. 1  1   1. 
1. slagle  j. r. a r t i f i c i a l intelligence: the heuristic programming approach. mcgraw-hill  new york  1. 
1. waldinger  r. j. and r. c. t. lee. prcw: a step toward automatic program writing  proc. int. joint conf. on a r t i f i c i a l intelligence  1   1. 
1. wos  l. t.  d. f. carson and g. a. robinson. the unit preference strategy in theorem proving. afips 1   fall  1 . spartan books  washington  1. 

1 
problem statement 
i have a swimming pool. if i have a swimming pool and it doesn't rain  i w i l l go swimming. if i go swimming  i w i l l get wet. 
if it rains  i w i l l get wet. prove i w i l l get wet. 
a; i have a swimming pool. b: i go swimming  c: i get wet. 
	d; 	it rains. 

	figure 	1 
1 


	figure 	1 
1 

1 
