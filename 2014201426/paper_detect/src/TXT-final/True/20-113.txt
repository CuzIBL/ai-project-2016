 
¡¡¡¡a method is presented to locate a general polyhedron in space with six degrees of freedom. a light stripe sensor is assumed to be capable of providing three-dimensional data points on known edges of the polyhedron to within a known accuracy. a representation is found for all the ways three line segments of fixed length can fall between the edges of a polyhedron. this representation  called an edge interval  is used in a tree search to find the location of each data point to within an interval on the edge. the final location of the object is determined by a onedimensional line search. the method is illustrated with simulated data from a unit tetrahedron and results from a computer implementation are presented. the tree search takes a negligible amount of time and the onedimensional line search takes a small additional increment. 
i introduction 
   the general problem is to determine the identity and location of a part in 1-d space to within a known error in real time. gordon and seering '1 describe a method which uses light stripes between known edges of a polyhedral object. when three light stripes intersect a 
   right corner  they are able to locate the object in negligible time. bolles and horaud '1  concentrate on edges because they contain more information than surface patches and are relatively easy to detect in range data   page 1. grimson and lozano-perez '1 use points on a known face and an estimate of the surface normal at each point to locate the object. on page 1  they suggest that if a point is on an edge of an object   the recognition process is greatly simplified.  
   the problem treated in this paper is to locate a general polyhedral object with six degrees of freedom using data from a light stripe sensor. we assume that the light stripes locate 1-d data points on edges of the object to within a known error. call each of these data points an edge point. research is currently underway to develop effective sensors for this kind of application  see tsai '1  gordon and seering '1 and bolles and horaud '1. there is a further assumption that each edge point is on a known edge of the object. this may occur in an application such as in gordon and seering '1  where the geometric relation between the sensor and the object has been specified in advance or as in arbab '1  where the edge points are identified with an edge via an interpretation method. 
   in the next section the main results are provided on how the ends of a line segment of fixed length may intersect two edges of an object in 1-d space. the edge interval tree section shows how the edge intervals may be propagated as constraints in a tree search to find the location of each edge point to within an interval on the edge. the section on locating the object shows how to locate the object within error by a one-dimensional line search. 
ii edge intervals 
   consider a line segment of fixed length  d  whose end points are known to intersect each of two edges  e1 and e1  see figure 1. now add an orientation to each line  so that a minus   -   and a plus  +  direction is defined along the line. edge intervals are defined as a pair of intervals  one interval on each line  with the following property. as the point of intersection on the first line moves in a monotonic direction from beginning to end of the first interval  the point of intersection on the second line moves in a monotonic direction on the second interval. these intervals are mutually exclusive and include all possible intersections of the line segment with the two edges. 

	figure 1. 	monotonic edge intervals on two edges. 


to describe the edge intervals introduce vertices 
 1' 1which define a finite edge €q in figure 1 and a positive direction on e1. define a parameterization of a point along the edge using a convex combination of the vertices  
 1  	so that  
	silverman  tsai  and lavin 	1 

 1  
 1  
similar vertices and parameterization are defined for edge 
   consider the line segment of length d. this line segment is constructed to be perpendicular to edge e1. as one end of the line segment moves from poo to pqi on edge e1 the other end moves from  on eage e . one end of the line segment is moving along e¡ì in the negative direction and the other end is moving along ej in the negative direction.  a sense of direction must change. this is because at p1 the line segment is perpendicular to edge q. it is impossible to continue moving in the negative direction on both edges and still maintain contact therefore  as the line segment moves from to the sense of direction must change from - to similarly  from to the senses are +  +. finally  from returning to pqq  pjq the senses are -   +. to convince yourself  cut out the line and re-trace this path on figure 1. 
   to calculate values of olq and aj that correspond to edge intervals  the orthogonality condition 
 1  and the distance condition 
 1  must be satisfied. 
¡¡¡¡equations  1  and  1  may be reduced to a standard quadratic equation in a$. the solution is the following equations for aq and a1  where  and g1 are dependent only on the edge vertices and the distance. these equations are too long to include here  but are included in silverman et. al1. 


   cases where equations  1  and  1  are degenerate are classified as follows. if the distance  d  is shorter than the minimum distance between the edges  then the discriminant term in  1  is negative. if the edges are orthogonal  the discriminant in  1  is equal to zero. if the edges are parallel  the term a1 in  1  equals zero and the edge intervals are illustrated in figure 1. in all of these cases  degenerate or non-degenerate  it is possible to compute the edge intervals by solving simple quadratic equations. 
   this is a complete representation of edge intervals along edges e1 and e1  and although figure 1 and figure 1 are planar  this representation extends immediately to arbitrary edges in 1-d space. errors in the edge 
1 	robotics 


point data will cause error in the final location of the object. for the parallel case shown in figure 1 if the distance  d  is within sensor error of the distance between the edges  edge interval calculation may fail. 




ill the edge interval tree 
   the edge interval tree has three levels: oth level  1st level and 1nd level  one for each edge point. a node at the ith level represents an interval on e:. there is an arc emanating to the next level for each edge interval. the monotonic character of the edge intervals enables an edge interval tree search for a set of three valid intervals  one on each edge. the valid intervals are subsets of the re-



spective edge intervals.* a*set of valid intervals contains all sets of values such that; if each edge point is located at the value of a  on its respective edge  then the three mutual distances are consistent with the sensor data to within error. this is a location where the edge point data fit the object. 
   valid intervals are determined by propagating the edge intervals from  and back to e1. the monotonic property ot the edge intervals implies there is a continuous  monotonic mapping from any point ai within the edge interval on e  which with  ¡ê   maps to a unique point a.- on e:. let this mapping and its inverse be denoted by the transfer functions  
 1  
and 
 1  
the transfer function tij is the location of a point on an edge at a given distance from a point on another edge  where both points are expressed parametrically as in  1 . 
the equation for t can be derived by solving 
 1  for  1  or  1 . this leads to a quadratic equation 
 1  
where a%  1* ¡ã1 a r e functions of a/  see silverman et. al/1 for details. this quadratic equation is non-degenerate for any a{- in the edge interval on    -. the function tiji indicates there are two points on ej; at a given distance from a -  one each for the plus and minus root in  1 . at any node in the edge interval tree search the correct sign in 
 1  is determined by the edge interval on e -. in the discussion below  let t denote a specific transfer function where the sign is determined by the edge interval being propagated. 
searching the edge interval tree 
   a unit tetrahedron is illustrated in figure 1. three edges   and e1  are cut by a simulated light stripe. three edge points   are known to within a given sensor error. the three mutual distances between edge points may be computed  do1' d1 a n d d1- a m o d e l of the object provides the vertices for each edge in some canonical location. the edge intervals for the the first two unit tetrahedron edge pairs are displayed in figure 1 and figure 1. this example will be used to illustrate the tree search. 
   the tree is propagated by intersecting intervals on common edges and transferring the resulting intervals to the next edge with  1 . pruning occurs when the intersected interval is empty. the propagation and pruning steps for the tree differ at each level. figure 1 shows the edge interval constraint propagation from edge interval in figure 1 to in figure 1. in figure 1 the unit tetrahedron has been  unfolded  along ej to make a planar figure illustrating the edge interval tree search. 
the oth level: this level propagates intervals on eo to intervals on e using the edge intervals. let this interval be noted by j  in figure 1  1  is actually the 
edge interval 
the 1st level: this level propagates intervals on e1 to intervals on e1 using d1- for the edge intervals from e1 to e1  intersect the interval on e1 with l1  the interval passed in from the oth level. let this intersected interval be noted by  if h1 is empty  then the tree is pruned at this point. in figure 1  this results in i   being intersected with 	here 	because 
   if h  is equal to e1 then propagate to e1 by using the respective edge interval. if not  propagate h1 to e  using the transfer function t. that is  ~ where 
 1  
 1  
this is illustrated in figure 1  where |. 
the 1nd level: this level propagates intervals on e1 back to intervals on eo using d1- the propagation and pruning steps at level 1 are repeated at level 1 using the edge intervals from e1 to e1 and the distance  . the result is 
d back t o e o t o ob-
 1  and 
 1  
	silverman  tsal  and lavln 	1 



errors in the sensor data may cause localizations to be missed unless both intervals are increased. let vq be the intersection of the increased intervals  ho and /q. if vo is empty the tree may be pruned at this point. any nonempty interval  vo  is a valid interval. this final pruning step is possible because the line segments d1 and d1 must intersect eo at the same point  po  to within error. 
iv locating the object 
   if the solution is known to lie in  a one-dimensional line search for a fixed point to witnin error  of the function  
 1  
will find all solutions within the valid interval. the line search is required because while all three distances are maintained by  1   both starting and ending points of intersection on eo must be the same to within error. 
   the object localization problem is solved by locating the edge point  
once a particular triple   is known a transformation to within error from model space to image space may be computed to fit the object. 
1 	robotics 
¡¡¡¡a program has been written implementing the ideas presented here and it has been tested on the unit tetrahedron data. the edge interval calculation involves only a few quadratic equations to solve and takes negligible time. the edge interval tree search requires a few comparisons and some evaluations of  1  per node. this too takes only a very small amount of time. any edge interval tree with three levels has a maximum of 1 nodes  because the maximum number of branches at any node is four. the edge interval tree search for the unit tetrahedron has to examine only 1 out of the possible 1 nodes. the rest are pruned from the tree. experience with the current program indicates a few seconds of execution time on the ibm rt pc programmed in c. this includes line search of two valid intervals. it should be possible to substantially improve upon this. 
v acknowledgments 
   we would like to thank bob cypher of the university of washington and our colleagues  bijan arbab  fernando vicuna and jim moore for many helpful discussions. the authors are also grateful to the referee whose comments resulted in a number of important clarifications. 
