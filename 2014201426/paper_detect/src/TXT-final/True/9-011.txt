 
       this paper discusses generative computer-assisted instruction  cai  and its relationship to a r t i f i c i a l intelligence research. systems which have a limited capability for natural language communication are described. in addition  potential areas in which a r t i f i c i a l intelligence could be applied are outlined. these include individualization of instruction  determining the degree of  accuracy of a student response  and problem-solving  
       a cai system which is capable of writing computer programs is described in detail. techniques are given for generating meaningful programming problems. these problems are represented as a sequence of primitive tasks each of which can be coded in several ways. the manner in which the system designs its own solution program and monitors the student solution is also described. 
	i. 	ai in cat 
       there is currently significant interest in generative systems for computer-assisted instruction  cai . a generative system has the capability to both generate and solve meaningful problems. it must also be able to monitor a student's solution  determine to what extent the student is correct  and provide pertinent remedial feedback. 
       generative cai systems free the course author from having to develop several alternative presenta-
tions of the same or similar material. in addition  the course author does not have to specify correct and incorrect answers and their consequences as the system can determine a l l of these on its own. these systems often have the capability to reply to student questions and allow him to divert the instruction to areas that interest him. 
data-base systems 
       there have been a few cai systems designed which are oriented around a structured network of facts. wexler describes a system which combines generative cai with frame-oriented cai in that the course-author must specify certain question formats. the system generates parameters for these formats and searches the data base to determine the correct answer. it generates remedial feedback from its network if the student's solution is incorrect. this feedback can either be in the form of a correct statement based on 
the student's response or a trace of the steps required to retrieve the correct answer. on command from the student  it w i l l generate statements from its database which conform to prespecified patterns. 
this research has been supported by the national 
institute of education  grant #1eg-1-1. the university of connecticut computer center provided computational f a c i l i t i e s . 
     carbonell describes a system  scholar  in which the generation of several types of questions is done 
entirely by the system from the semantic network. also  the system has the capability to interpret a variety of student questions and generate appropriate responses. as in the wexler system  the semantic network must be constructed by the course-author. 
     recent research with scholar  carbonell1  has attempted to incorporate graphical information along with symbolic information in a semantic network. 	in addition  emphasis is being placed on improving the ability of the system to make inferences based upon the information contained in its semantic network and 
to take into account the fuzzyness or uncertainty associated with an inference.  carhonell and collins 1  . 
     simmons1 describes a system in which the semantic network is automatically produced from a page of text. the student can request paraphases of d i f f i c u l t passages and word definitions. in addition  the system can generate   f i l l - i n   and  true-false  questions from its semantic network. 
     this system relies heavily on the use of an augmented transition network grammar  woods1  both for the construction of the semantic network and for the generation of statements from this network. more recent research has focused on the use of a strips like model  fikes and nilsson'  to allow modifications to the semantic network which reflect a time sequence of events. 
　　research in a cai system for meteorology  brown  burton and zdybel1  has investigated the use of a semantic network to store static information and an augmented f i n i t e automata structure for storing 
information concerning the dynamics of a process. this latter structure shows  for a l l possible state transitions  the external and internal conditions which must be met before the transition can occur. consequently  when a student poses a question  he excites the model and causes the generation of a tree of intermediate states u n t i l equilibrium is reached. answering the student's question is accomplished by interpreting this tree of states in the appropriate 
manner. 
     as research continues  improvements due to a r t i f i c i a l intelligence research w i l l enable future versions of data-base oriented systems to accept an unstructured or essay-type response from a student. these systems provide an impressive demonstration of the potential application of research in natural language communications and question-answering to cai. however  there are s t i l l several problem areas in generative cai which tie in very closely with a r t i f i c i a l intelligence. 
the f i r s t problem is individualizing the 
1 individualizing instruction and remedial aid 
instruction received by each student or determining 
what is best for a student to study based on his 
previous interactions with the system. this is a problem in pattern recognition. the student must be classified as a particular type of learner. based on this categorization and his past history  an appropriate concept should be selected for study. 
     this problem is being studied by shea and sleeaan . they propose a three level teaching system in which level one is s t r i c t l y concerned with student interaction  record collection  and generation of problems to suit the criteria imposed by level 1. level 1 is responsible for implementing a specific teaching strategy. level 1 decides which strategy should be used and evaluates the performance of the lower levels to determine whether performance is satisfactory or whether a different strategy should be tried. 
     other studies in the design of an intelligent monitor for cai have centered around the use of a student model  summary of a student's past performance  and a concept tree  which indicates the pre-requisite structure of the course. as the syster. gains experience with a particular student  it updates his model and establishes to what extent he prefers to advance quickly to new material or build a solid foundation before going on. based on i t s knowledge of the student and his past performance  it decides at which plateau of the concept tree the student should be working. a l l concepts on this plateau are then 
evaluated with respect to factors such as recency of use  change in state of knowledge during last interaction  current state of knowledge  tendency to increase or decrease his state of knowledge  and relevance to other course concepts. the highest scoring concept is selected  a problem suitable for his experience level is generated  and its solution is 
monitored. 
     in order to generate pertiment remedial feedback  a cai system must determine the degree of correctness of a student response. if a simple number or phrase is expected  it is relatively easy to determine 
whether a student is correct. in mathematics  resolution-based theorem provers have been used to verify logical proof procedures1. their i n i t i a l application has been successful in assisting a student in constructing a proof by applying the rule of inference designated by him to earlier lines in the proof sequence. if the student's rule cannot be applied  he is given remedial feedback. efforts to verify that a line typed in by a student is a valid inference from his previous work have been  moderately successful . a more ambitious goal now under study is to have the theorem prover suggest ways of completing a proof taking into account a student's incomplete or erroneous 
work. 
     often it is not sufficient to t e l l a student he is wrong and indicate the correct solution method. an 
intelligent cai system should be able to make hypotheses based on a student's error history as to where the real source of his difficulty lies. 	for example  a student may be having trouble with division because he does not know how to multiply and/or subtract. 	the cai monitor must recognize this and redirect the student's efforts or he w i l l never master the division algorithm. 
     this problem  of course  is even harder to resolve in natural language systems. none of these systems currently have an effective way of adapting the t u t o r i a l dialogue to exploit the information present in an incorrect student response. 
1 
problem-solving in cai 
　　　a final probleiti area is pertinent to researchers attempting to use generative cai in a problem-solving environment. 	this is the design of the problemsolver i t s e l f . 	perhaps current research in problemsolving and planning techniques such as are evidenced in strips and in languages such as planner1 	and qa1 w i l l find application in this area. 
　　　a generative cai system has been designed around an introductory course in computer science at the university of connecticut. two-thirds of this course is concerned with an introduction to d i g i t a l logic design; the remainder of the course teaches machinelanguage programming. an algorithmic approach has been used to teach the concepts in digital logic design through cai. the specific approach taken has been described elsewhere1 . 
　　　the software portion of the course is concerned with teaching students how to write machine language programs for a small computer  very similar to the digital equipment corporation pdp-1. 	the instruction set and organization are identical; the only difference 
is that student programs are restricted to pages 1 and 1 of memory. this consists of 1  octal  words of core which is sufficient for beginning students to learn to program  and also to learn principles of memory conservatiyn . 
　　　the cai system its not used to replace the classes or textbook. it is intended to provide practice and tutoring in problem solving similar to what one would obtain through homework problems. the advantage  of course  is that the student gets some guided direction and remedial feedback when he goes astray. 
　　　since the system is generative and problems are constructed in a random fashion  it is necessary that it also be able to write its own solution programs. there has been significant effort expended in the development of programs with this capability. early work by simon1 has been reported. recent efforts by manna and waldinger1 emphasise a theorem proving approach to writing programs. it was felt that this general approach would not allow programs which emphasize the requisite techniques of machine-language programming to be designed. 
　　　the remainder of the paper w i l l focus on our heuristic approach to automatic programming. the system so designed w i l l be referred to as malt  machine language tutor . 
	i i . 	system overview 
　　　prior to describing the system i t s e l f   it would be worthwhile to outline some of its goals and constraints. it was important that this system function effectively as a tutor in machine language programming for approximately thirty students per semester  rather than just serve as a demonstration of what might be accomplished if additional computer resources were available. this meant that malt had to be implemented on the time-sharing system currently available on the university's ibm 1 which is cps  conversational programming system-ibm1   a dialect of pl-i. it also meant that response times to students should normally be on the order of 1 to 1 seconds or less. an additional restriction imposed by cpe i t s e l f was that no more than twelve pages  u1k bytes  of core memory be active at any user terminal. 
　　　a second goal of this system was that it be easily expandable. this means it should be possible 
to add new problem types without having to increase the system's problem solving capability  	this factor  and the requirement for a compact or modular structure in order to meet the twelve page core l i m i t   resulted in the use of primitive tasks to serve as building blocks in the design of solution programs  
　　　a third goal was that the system be capable of a high degree of individualization of instruction. the form of the problem posed for each student should be influenced by his previous experience with the system. the degree of monitoring should decrease as the student's level of competence increased; in fact  the system should assist the student by programming 
previously mastered sub-tasks for him. 
	i i i . 	general approach 
　　　a generative cai system has the minimum components illustrated in figure 1. the problem generatoris capable of providing an unlimited variety of meaningful problems. a v i t a l information link 
exists between the problem generator and problem solver. this link provides the system with the exact structure of the problem  and allows the problem solver to concentrate on the solution of the problem rather than i t s definition. 
　　　　the structure of each problem is illustrated by the and-or goal tree in figure 1. a complex programming problem is represented as three subproblems dealing with input of information  processing of core-resident information  and program output respectively. there are several alternatives for each of the sub-problems. for example   i   i   . . .   i } is the set of input sub-problems where i is the null sub-problem. each sub-problem  in turn  is decomposed into a sequence of logical tasks. some of these tasks are primitive tasks which the system can solve directly in one or more ways  1 and i- - . other logical 
tasks consist themselves of a sequence of primitive 
tasks  i     . 
id 
　　　　there are t h i r t y - f i v e primitive tasks programmed in malt. they would be used repeatedly in the 
design of a complete program. sample tasks might be: the i n i t i a l i z a t i o n of pointers to data  initialization of counters to keep track of the number of loop iterations; reading or printing an asc-ii character; and 
transferring data into and out of memory. 	a large 
variety of problems can be constructed using only this set of primitive tasks. 
　　　　figure 1 is a block diagram for the malt system. the previous student performance determines 
what type of problem w i l l be generated. this problem is presented to the student in natural language and also passed on to the system as an ordered triple of sub-problems. next  a l i s t of logical tasks for each of the sub-problems is presented to the student. the system representation of this  flow-chart  is a sequence of calls to problem-solver routines. these problem-solver routines solve the programming problem and interact with the student to monitor his solution. 
　　　as the student undertakes each task in the programming process  a corresponding problem-solver routine is entered by the cai system  which guides the student through the construction of that part of his program. 	during this phase  the student is constantly being given feedback as to the correctness 
of his program. if his program introduces logical errors  the system w i l l point these out and offer helpful suggestions for their correction. if the 
1 
system feels that the student might benefit from observing his program in operation  it also has the capability to simulate statement by statement program execution. 
       the system is constantly evaluating the student's performance and updating his permanent f i l e . this is necessary because his achievement determines not only the d i f f i c u l t y of the problems given him  but also the amount of interaction which he receives during the design of his program. 
       it should be stressed at this point that the system can only solve the primitive tasks. 	complex 
problems can be constructed using these tasks as building blocks. the system's knowledge of the primitive tasks and their relationships enables it to generate the solution for the complete programming problem. 
       as is indicated by the above discussion  the logic sequence which the system w i l l use to code the problem is pretty well determined by its implied structure. the only freedom that exists is in the selection of the code to implement each primitive task. 
       this is perfectly satisfactory for a system whose sole function is to produce the machine-language code which accomplishes a particular programming problem. however  this approach should be justified in a cai environment. 
       there are normally many ways to flowchart and code a programming problem. the system could accept the student's solution in its entirety  derive i t s own solution program  execute both programs  and compare their results. such an approach  although it would give the student complete freedom and verify his program  would be worthless as a teacher. essentially  it would say to the student who has made a mistake:  your answer is wrong  but i have no idea why. here is my solution; perhaps you can figure out what is 
wrong yourself.  a student who can do this does not really need a cai tutor. 
　　　the approach we have taken is to say:  you are just learning how to code in machine language. your 
problem can be flowcharted in this way. if you w i l l follow my flowchart  i can teach you something about 
machine-language coding   we feel  and so do our student guinea pigs  that the beginning student gains more from a l i t t l e guidance at this stage and learns quite a bit about flowcharting through observation. 
       perhaps  current research in program synthesis and verification w i l l soon remove this restriction. it would then be preferable to allow the student to design his own program to the extent he is able. 	the system could verify that the portion of the program constructed so far does  in fact  accomplish what the student intended. 	at this point  the system would take over and synthesize the remainder of the solution. if the student's portion of the solution were only partially correct  the point at which his program went astray could  perhaps  be located and the correct solution continued from there. 
	iv. 	problem generator 
       as has been mentioned  each problem may be thought of as consisting of three  or less  distinct phases. when students f i r s t start off using the system  they w i l l normally be presented with a problem that consists of just a single phase. as they gain competence and experience  more d i f f i c u l t problems w i l l be generated for them. 
　　　　problem generation consists of selecting a pa uh through a tree of depth three as shown in figure 1. branches a1 through a1 consist of the seven strings 
 including the null string  describing the input subproblems. b   b   b are the three meaningful processing steps  out of a total of thirteen  which can be performed on the input format described by a . c j i j i c i1 are t l i e possible forms of the output sub-problem  out of a total of 1  for a problem beginning with a and b . 
　　　　the probability of a particular branch being selected is a function of each student's competence. these probabilities change as the student progresses through the course material. there are more than ho different paths through this tree which represent meaningful problems. before presenting a problem format  or path  which has been .selected  the system checks to see that it is  different  from one previously worked by this student. 
　　　　in addition  once the format has been selected  various parameters must be randomly generated. these parameters might represent specific memory registers or character's to be searched for. the complete problem is described internally a   a vector consisting of the three selected brandies from the problem tree followed by a l l required parameters. sample problems are shown in table 1. 
table 1 
sample problems 
note: 	all randomly generated parameters are underlined. 
1. add the contents of register 1 to the cunten u; of register 1. 
1. print out the message  hello . 
1. read in a series of ascj-.i1 character's ending with a * and store them starting  in location 1  q . 
1. read in 1 a'sc-il characters and store them starting at iocation 1. search register 1  through 1 for the largest number. 
b. read in a series of 1-digit numbers and store them starting at location 1q. the input w i l l end when the f i r s t character of a number1 is a  x . 
       the next step is to generate the corresponding l i s t of logical sub-tasks. 	these are generated separately for each of the three major phases of the problem. 	an example is shown in table 1. 	as mentioned above  the student solution would be monitored after the generation of a l l the sub-tasks associated with each phase of the problem. 
table 1 
example or program sub-task generation 
your problem is to write a program which will; 
a  read in 1  octal  ascii characters and store them in registers 1 thru  f 1. 
b  form the absolute value of the contents of register 1 in the accumulator. 
cl 	finally  print out the 1-digit contents of the accumulator. 
here- are the subt.asks for a. 
1  initialize a ptr to register 1. 
1  initialize a ctr with the value of -1  octal . 
1  read a character  
1  store it away using the ptr-. 
1  update the ptr. 
1  update the ctr and if i t ' s not ;; cro  jump back to start of loop  here are the sub-tasks for b. 
j  	bring the number in register 1 i.  the accumulator. 
1  	check the sign of the acc and if i t ' s negative  then form i t ' s 1's complement. 
here are the sub-tasks for c. 
1  store the contents of the aecumul.-it.ur temporarily. 
1  set up a subroutine which w i l l print a character  
1  get the number to be printed and rotate it so the 1st  or leftmost  octal digit  is on the right. 
1  mask out the lefr q b i t s   add 1  and call the print subroutine  
1  do the same for the 1nd d i g i t   b  	do the same for the 1rd d i g i t . 
1  	f.et the number  mask i t   add 1  and print i t . 

1. read in 1 	 octal  four digit numbers and store them starting at iocation 1. 	search registers 1 thru 1 for the 1st number which begins with the octal digits  1♀ .  example 1qxx  
1. multiply the contents of register 1 by the contents of register 1. finally print out the 1-digit contents of the accumulator. 
1. search registers 1 thru 1 for the octal number 1. for registers 1 thru 1  print out the register number  1  spaces  and the octal contents of that register. 
1. assume that a table has been set up starting at location 1 consisting of a 1-character symbol followed by a number-  there are w  of these entries. 
search the table for the symbol  an  and retrieve the corresponding number. if it is not in the table  then halt the program. finally  print out the 1-digit contents of the accumulator. 
     the system representation of these sub-tasks consists of a string of two digit numbers. this sequence indicates which of the thirty-five primi'ive tasks of ttihchine language programming muct be performed  and in what order  to program each sub-problem correctly. interpretation of this string by the control routine results in a sequence of calls to the individual problem-soxver routines. the manner in which the problemt.olvers monitor the machine code being entered by the student w i l l be described next. 
	v. 	problem solver and monitor 
　　　each of the logical sub-tasks is broken down further into a sequence of primitive tasks  1 total  which the system can solve. the student builds his solution by coding one task at a time as implied by figure 1. 
　　　the system provides the student with varying degrees of interaction depending on his past performance. 
1 
a beginning student w i l l be led by the hand and each program statement w i l l be requested and checked individually. an intermediate student receives fewer 
hints and w i l l normally enter a group of statements at a time; an advanced student benefits from the system's ability to code its own programs and w i l l be provided with the code for the simpler sub-tasks. this is important as it frees him to concentrate on more d i f f i c u l t areas and prevents the boredom which would result from constant repetition of t r i v i a l tasks. 
       table 1 provides an example of the problem solver/monitor interaction with a student. 	the square-bracketed comments have been added for clarity. each underscore indicates the start of a student response. 	m1 stands for memory register 1. 	the system is operating at a moderate degree of interaction. 
table 1 
example of student interaction 
       your problem is to write a program which w i l l : read in 1  octal   1-digit numbers and store their value starting in register 1. 
is this problem ok  yes 
here are the sub-tasks for the 1st line: 
1  i n i t i a l i z e a pointer to register 1  
1  i n i t i a l i z e a counter with the value of -1  octal . 
1  read a digit and mask out the l e f t 1 bits. 
1  store it away using the pointer. 
1  update the pointer 
s  update the counter and if its not zero  jump back to start of loop. 
sub-task 1: 
use m1 to store the pointer value  and m1 as the pointer. m1: 
1 
wrong! 	 1  is the correct ptr value. 
m1: 	 user program starts in register 1  
1  clear the acc  m1: 
1  get the value of the pointer  
m1: 
1  deposit into pointer  
sub-task 1: 
use h1 to store the counter value and m1 as the counter. m1: 
1 
 1  can't be used as the counter value. 	it should be either  1  or  1 . 	try again! m1: 
1 
now set the counter value into the counter. 
m1: 
1  clear the acc  
you don't need a  cla  here but i t ' s ok. 
m1: 1 m1: 1  set up the c t r   
sub-task 1: 
you'll need 1 instruction to read a character. 
m1: 
1  check the keyboard flag  
m1: 1  jump to m1  m1: 
1  read a keyboard char.  
let's store the mask in m1 what number should we use as a mask  
m1: ♀1 
wrong!  1  is the correct mask because it should contain a   1   corresponding to every bit of the accumulator we would like to keep. 
now   and  the acc with the mask. 
m1: ♀1   and  the acc  
sub-task 1: 
m1: 	1  system generates code for easy subtask  
sub-task 1: 
m1: 
1  increment the pointer  
wrong! 	the ptr is in m1 so  isz ptr  should be: 1. 
sub-task 1: 
m1: 
1  increment the counter!  m1: 
1  jump to moos  
wrong! the body of the loop begins in m1 so it should be:  1 . 
now we should halt the program 
m1: 	1 
     several conventions have been established to f a c i l i t a t e the generation of program segments and monitoring of student programs. all user programs begin in location 1 and a l l program constants are placed at the top of memory beginning with location 1 and preceeding downwards. the middle areas of memory  locations 1 through 1  are reserved for l i s t s and tables to be used by the student's program. 
     the existence of a program loop is assumed by the system whenever a pointer or counter is i n i t i a l i z e d . the physical start of the loop is the f i r s t memory register after the i n i t i a l i z a t i o n process. by monitoring the beginning of a loop in this manner  the system can easily determine if the student has correctly designed his end-of-loop decision sequence. the most common programming mistake of this kind occurs when the student attempts to jump back to the i n i t i a l i z a t i o n sequence instead of the main body of the loop. 
     another program parameter which must be kept track of is the accumulator status. the simulated computer has neither a non-destructive deposit nor a destructive load instruction. hence  the accumulator must be cleared prior to loading it with a given number and must be reloaded after a number has been deposited in memory if the number is s t i l l needed. the status of the accumulator is going to determine which of several alternatives is to be pursued by certain of the problem-solver routines in the design and checking of a program segment. 
1      a complicating factor in determining accumulator status is the existence of logical branching or program jumps. the accumulator status may differ depending on whether a sub-task was entered sequentially or through a program jump. 
     forward jumps to yet unprogrammed sub-tasks also present a problem  as the memory location in which the new sub-task starts is not yet known. consequently  halt keeps track of the f i r s t memory location of each sub-task. if a jump is made to a previously programmed sub-task  the required instruction is provided immediately. in the case of forward jumps  a note is made of the memory location in which the jump instruction belongs and the sub-task to be reached. when this sub-task is finally programmed  halt completes a l l prior jump instructions which reference i t . 
     there are two important techniques used by the malt system to judge the correctness of a student's program. the most common method is to analyze in detail each segment of the program as it is typed i n   to determine if it performs the required functions. this is done on an instruction-by-insfruction basis so that there is immediate feedback to the student. 
     immediate verification implies that the system must have a detailed knowledge of the status of the user's program at a l l times. as the student formulates each response  the system also generates what it considers to be an appropriate answer. if the two 
do not match  the system must determine if other responses are possible. 	if so  the student's answer is compared with all such reasonable possibilities. when the system finally decides that the response supplied by the student is in error'  it informs him as to the reason for this determination and supplies the best program alternative. 
     if the student's response matches any of those which the system generated  then it is accepted by the system as a valid alternative to its own solution. since this was not the expected result  however  the system must adjust its representation of the users program status to reflect the new conditions. 
     in the rare event that there are too many acceptable ways to program a particular sub-task  the program segment supplied by the student is simulated to determine its correctness. to verify the user's program through simulation  all conditions of the machine which might possibly affect final program results are determined. for example  if the program is intended to perform a particular operation depending upon the status of the overflow link register  then only two i n i t i a l states are necessary; the program is tested with a zero link and again later with a non-zero link  
     once the various i n i t i a l states have been determined  the program segment can be simulated under each condition. the system decides  following each simulation  if normal program termination occurred. conditions which might cause abnormal termination are such things as i n f i n i t e loops  undefined instructions  or program branches which are directed outside the user's program segment. any such conditions are corrected immediately by the student  the current set of i n i t i a l conditions is re-established  and simulation is attempted again. 
     if any particular terminal condition indicates that the user's program did not perform its function correctly  malt attempts remedial action. since it is aware of the exact results which should have been obtained  it can provide a concise description of the error. it cannot  however  isolate the location of the error in the user's program. this determination must be left up to the student. however  the problem has been greatly simplified due to the system's diagnostics and the user's ability to observe his program in execution. if the student is unable to correct his program segment  malt w i l l generate a correct program segment for him. 
	vi. 	conclusions 
     the system has been implemented in the cpe  1  language on. the ibm 1 at the university of connecticut computer center. students can use this system whenever' they desire. there is also a batchmode simulator of this computer which they use for class projects of a more ambitious nature. 
     student reaction to malt has been very favorable. they feel this system helps to bridge the gap between what they have learned in class  of from the textbook  and what they need to know to program independently in batch-mode. 
     this past semester  students spent two weeks using halt and were then given a week to get a rather sizeable problem coded and running in batch-mode. all but one student managed to accomplish this. 
a questionnaire was distributed to the class. 
the results of this questionnaire are tabulated in table 1. it appears that the students feel that this experience was beneficial and good preparation for learning to program independently. on the whole  students were not bothered by the fact that malt requires them to adhere to a particular  flowchart . as indicated by question seven  improvements must be made to the algorithm which determines that a generated problem is sufficiently different from previous problems presented to that student. 
     tabll' 1 student evaluation 
for questions 1 the numbers of students giving the following responses are tubulated. 
	strongly 	disagree 	uncertain 	agree 	strongly 
	disagree 	agree 
1. the system was useful in introducing me to machine language programming. 
	1 	1 	1 	1 
1. it was relatively easy to learn to use the batch version of the assembler since i had been introduced to programming concepts through malt. 
1 	1 	1 	1 
1. since the sub-tasks were always laid out for me  1 felt very constrained using malt. 
1 	1 	1 	1 
1. because the sub-tasks were laid out  i only learned the mechanics of programming and didn't 
really understand what was going on. 
	1 	1 	1 	1 	1 
1. the approach taken in printing out the sub-tasks was good as it taught me how to organize a machine-language program. 
1 	1 	1 	1 
1 
1. the problem became more d i f f i c u l t as my level increased  
	1 	1 	1 	1 	1 
1. there was a good variety in the problems i received in malt. 
	1 	1 	1 	1 
s. 	in general  i enjoyed the interaction with malt. 
	1 	1 	1 	1 	1 
1. in general  i preferred the use of cai in this course to conventional homework. 
	1 	1 	1 	1 	1 
　　　overall . we feel that malt is an effective demonstration of what can be accomplished in cai with the limited use of ai techniques. it should be stressed that malt's design has been influenced by ai research  but certainly much more could be done in the way of incorporating ai research in problem solving and program synthesis. the desire to produce a working system with reasonable response time on an existing time-sharing system precluded this possibility. hopefully  malt w i l l challenge others with an interest in cai and ai to pursue this goal further. 
