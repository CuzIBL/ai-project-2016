 
recent research in formalizing effects of actions on a world in the presence of constraints have mostly concentrated on non-defeasible specifications  where the effect of actions and constraints are strictly specified. in this paper we show how to incorporate defeasibility into the specifications. in our approach we consider extensions of the high level language a of gelfond and lifschitz and introduce defeasible constraints and effect propositions. while direct semantics of a does not need a logical language  our semantics is defined using extended logic programming. this is due to the defeasibility of the specification. 
1 	i n t r o d u c t i o n and motivation 
recent research in formalizing effects of actions on a world in the presence of constraints have mostly concentrated on non-defeasible specifications  where the effect of actions and constraints are strictly specified1. the focus of these research was more on solving the frame problem and other problems such as the qualification and the ramification problem  and it made sense to start with non-defeasible specifications. 
in this paper we show how to incorporate defeasibility in the specification without loosing any of the good properties of previous specification languages. it is important to consider defeasible specifications for the same reason 
   * support was provided by the national science foundation  under grant nr. iri-1. 
     +  support was provided by argonne national laboratory under contract nr. 1. 
     1  among the various approaches  the strictness of the high level specification language of a  and its successors   and the language used by sandewal  is clear. although  reiter  and his group do not use a particular specification language per se  the syntactic restriction they put on how the effect axioms and constraints can be initially specified in firstorder logic  and the dependence of the compilation process that follows on the input syntax amounts to a specification language. 
jorge lobo + 
department of eecs 
univ. of illinois at chicago 
1 s. morgan st 
chicago  il 1  usa 
jorge eecs.uic.eduas the necessity of non-rnonotonic theories in knowled representation and common-sense reasoning. the specifications are not definite and un-modifiable and may evolve. our language should allow easy evolution or in the words of mccarthy  they should be 'elaboration tolerant1. we take a first step in this direction by allowing defeasible specifications. 
in our approach we consider1 extensions of the high level language a of gelfond and lifschitz  and introduce defeasible constraints and effect propositions. direct semantics of a and many of its early successors  particularly  the formalization of transition functions that map state-action pairs to states  do not use a logical language. but our formalization of the transition function is done using extended logic programming. this is due to the defeasibility of the specification.  earlier  baral  and mccain and turner  use logic programming and inference rules respectively  to formalize transition functions in presence of causal constraints.  we then show how with minor modifications to the logic programming specification plus the addition of a few rules we can reason about the effect of a sequence of actions. 
the necessity of defeasible specifications may be illustrated by the following example from . suppose we have a lamp with a switch on the side. turning the switch causes an internal circuit in the lamp to flip be-
tween close  not open  and open. we can say then that the effect of executing the action turning.switch causes the circuit to close if it was open; or it will cause the switch to open if it was not open. it is also the case that when the circuit is close  not open  the light in the lamp is on  and when the circuit is open the light is off. notice that although the state of the light is determined by the state of the circuit  the state of the light is indirectly affected by the action of turning the switch. this indirect effect is known in action theories as a ramification of the action. in an action description language such as ac  this action domain may be described by the 
　　1  we consider this language due to its simplicity. our ideas are important for other specification languages and their formalizations. we would consider the impact of defeasible specifications on them in the full version of this paper. 

following propositions:1 
 i  
 1  
 1   1  
ramification effects are usually derived from the state of fluents 1 while direct effects come from the execution of an action. an equivalent formulation can be written using lin's formalization  or the state specifications of baral  1j. 
suppose now that we can also unplug the lamp and that a consequence of this action is that there will be no power going through the lamp. we can add to our description the following proposition to cover this action: 
		 1  
if there is no power going through the lamp the light in the lamp can never be on  this is regardless of the state of the circuit . we then must add the following ramification proposition: 
		 1  
notice too  this proposition together with the previous propositions may create contradictions or forbid certain sequences of actions. for example  executing the sequence  unplug jamp  turning switch  creates problems because there will be a state where the circuit is not open that causes the light to be on  and at the same time the light can not be on since the lamp is unplugged and there is no power going through the lamp. the problem is that a closed circuit not always  but normally  causes the light in lamp to be on.1 thus  the causality in proposition  1  must be defeasible. 
　in the following section we present adc  an action description language with defeasible causality propositions. to make it easier for the reader we have excluded many of the other features of action description languages such as constraints  that are described in the literature. most of these can be easily added to adc. following our example  we start by describing how we can specify defeasible ramification effects. later in section 1 we show how our framework can also be used to capture defeasibtlity of the direct effect of actions. 
1
　　 at this point we appeal to the intuition of the reader with the meaning of the language. in the following sections we will present a formal description of an action language similar to ac. 
     1 symbols that are used to represent the state of the world are called fluents. in this example the fluents are open and light on. 1
　　there are many other reasons why a closed circuit may not cause the light to be on. it could be that the bulb in the lamp is burned  or there was a storm that blacked out the entire neighborhood. 
1 	temporal reasoning 
1 	the language atx 
the language adc has two disjoint non-empty sets of symbols called fluents and actions  and four kinds of propositions: initial propositions  effect propositions  sufficiency propositions and defeasible sufficiency propo-
sitions. an initial proposition is an expression of the form 
	initially / 	 1  
where / is a fluent literal. a fluent literal is either a fluent or a fluent preceded by a fluent literal is negative if it is preceded by otherwise it is called positive. an effect proposition is an expression of the form 
		 1  
where a is an action  and / and and each of p 1  ...  p n  is a fluent literal. if n = 1 we will write: 
	a causes / 	 1  
two effect propositions with preconditions p 1  ... p n and q1 .. . qm respectively are said to be contradictory if they describe the effect of the same action a on complementary fs  and 
non-defeasible and defeasible sufficiency propositions are expressions of the form: 
　　　　　　p 1  ...  p n suffices for /  1  p 1  ...  p n normally suffices for /  1  where / and each  is a fluent literal. a domain description is a collection of initial  effect  sufficiency and defeasible sufficiency propositions. the initial propositions are referred to as facts and the other propositions are referred to as causal laws. 
1 	transition functions of adc 
we take a slightly different approach in defining the semantics of the language adc. most of the action description languages  1; 1; 1  that are inspired by a have an independent characterization without involving any of the standard logical formalisms  such as logic programming  default logic  circumscription  classical logic  etc. but when we allow defeasible causality and keep open the possibility of hierarchies of such causality it is not clear if we can avoid using standard logical formalisms and have independent characterizations. 
an inherent component of semantics of action description languages is the transition function res from actions and states to power set of states  where a state is a set of fluents. intuitively  if  we say that execution of action a in a state s may take us to the state s'. when we have only deterministic actions we can treat res as a function from actions and states to states. 
in this section we define the transition function of adc through a translation of the domain description into an extended logic program.  we use the answer set semantics of extended logic programs .  given a set of causal 




the effect rules depend on the initial state s which will be part of any answer set of the program. hence  the set 

will also be part of any answer set. therefore  from the third and fourth non-defeasible rules we get that the set: 

will be part of any answer set too. the inertia rules  based on the initial state  will try to make the fluent literals power  -light on and open true in the situation re1 turning switch  s  . we can ignore the ab1 predicates since there are no defeasible rules. however  abo in e blocks open and abo in nd blocks -light-on. hence  the inertia rules generate the set 

no other holds literal with situation argument res turning ight 1   or abo predicate with third argument s1 will be in any answer set. notice too  that the evaluation of the rules was stratified  first the effect rules  then the non-defeasible rules and finally the inertia rules. hence  it is easy to see that res turning switch  s1  = s1 and it is completely determined by 
it can also be shown that 	res turningswitch s1  	= s1. 

example 1 if we add to the previous example the causal laws  1  and  1   we can see that the answer set of  is inconsistent. this is because we will have the effect rule: 
	holds power  res unplug  s1   	 1  
that is unconditionally true  and the following two nondefeasible sufficiency rules: 
1 	temporal reasoning 

the literal -holds open s1  is part of the initial database  open' will never appear in the first argument of any abo in the translation and ab  is irrelevant in the example. 	
example 1 in this final example  we show the correct representation of the problem. we need the causal laws  1    1    1  and  1   plus the defeasible sufficiency propositions: 

in this case the second non-defeasible sufficiency rule from the previous example is replaced by the rule 

and this rule will not be justified since the following rule is also part of the translation 

which is justified by  1 . 	o 
observe that the translation presented above is equivalent to a simpler version where  we replace both abo and ab1 by ab  and in the first rule of step 1 we replace not ab1 f a s  by not hold1 f re1 a s  .1 this is similar to turner's  use of 
not 	holds f  res a s   	instead of an abnormal predi-
cate to define sufficiency propositions. however  with turner's translation there is no obvious way to add defeasible causality to his formalism. furthermore  the structure of our translation  compared to gelfond's suggestion  allows us to easily add more levels of defeasible propositions; i.e.  defeasible propositions that can be defeated by other defeasible propositions1 which could 
1
 this simplification was suggested by michael gelfond. 
the subtle use of the not holds f res a  s   instead of holda f res a  s   was first introduced in  to reason about actions in presence of incomplete information. 
1
　　geffner in  also deals with hierarchy of defeasible propositions by assigning non-negative integer priorities to them and then characterizes them using an approach based on infinitesimal probabilities. we plan to compare our approaches in the full paper. 
be also be defeated by other propositions. in general  when there are several levels of defeasibility the guard not holds f res a s   can be used in the last  meaning highest  but one layer. all layers below that need an ab predicate. in the language avc the lowest layer corresponds to inertia  the next layer corresponds to the defeasible causality and the highest layer is the effect propositions and non-defeasible causality propositions. 
1 semantics of avc and a logic programming translation 
in this section we use the formalization of res to present a semantics of avc which allows us to make inferences 
1 	logic programming characterization 
we can modify the translation  to give a 
logic programming characterization of avc.  note that  only characterizes the effect of a single ac-
tion and to characterize avc we need to be able to reason about sequences of actions.  we introduce a new predicate p holds  which intuitively means 'possibly holds'  and replace all occurrences of holds f res a s   and -holds f res a s   in the steps 1  1  1 and 1  and the head of the rules in step 1  by p.holds f  res a  s   and p-holds f' res a  s  . we then modify step 1 by replacing the constants a and s  by the variables a and s. 
about the effect of a sequence of actions. 
an interpretation is a partial function  from sequences of actions to states such that: 
 1  the empty sequence     belongs to the domain of and then  we add the following rules:1 

open-faucet normally causes water on  sink. 
the constraint about the case when the pipe is blocked can then be specified as: pipe mocked suffices for 
in general  we will call a defeasible effect proposition an expression of the form 
	a normally causes 	 1  
where a is an action  and / and and each of p 1  ...  pn  is a fluent literal. 
to describe the semantics of a domain description d with defeasible effect propositions we expand the program ii d a s  as follows. 
1. 	translating defeasible effect propositions 
for each defeasible effect proposition of the form  1  in d which describes the effect of the action a  contains the following rules: 

we also need to add to the two rules of the translation of non-defeasible sufficiency propositions the following rule  step 1 of the original transformation : 

to expand the logic programming characterization of 
avc domains we merely need to replace the holds in the rules of part  1  with the corresponding p holds and proposition 1 holds for the new domain descriptions. 
in the above formalization we assumed that defeasible effect propositions are overridden by non-defeasible causal rules and defeasible effect propositions do not contradict with non-defeasible effect propositions. a different formalization can be given when we modify the assumptions such as  i  allowing defeasible effect propositions to contradict with non-defeasible effect propositions and giving non-defeasible effect propositions a higher priority;  ii  giving effect propositions higher priority than sufficiency propositions. the new formalizations will mainly express the priority between the different abnormal predicates. we will discuss this in greater detail in the full paper. 
1 	conclusion 
we have showed how to formalize defeasible causality in action theories. we used logic programming to encode the defeasible causalities. it is not clear to us if use of a logical formalism can be avoided  in the spirit of a   while encoding defeasibility  particularly when we allow several level of defeasibility. in the full paper we will add additional examples involving several levels of defeasibility and discuss how defeasibility can be incorporated in other specification languages. to make our point clear 
1 	temporal reasoning 
we avoided additional constructs and features. most of these can be easily added to the proposed language  and we will need default logic  as in    instead of logic programming  to encode defeasibility when we allow fluent formulas instead of fluent literals. 
