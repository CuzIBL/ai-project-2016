 
       we have developed representations and a n a l y s i s methods for e l e c t r i c a l c i r c u i t s in a deductive system c a l l e d duck.** c i r c u i t s are represented as conjunctions of l o g i c a l p r e d i c a t e s . c i r c u i t a n a l y s i s is done as an i t e r a t i o n of proofs which determine the basic s t r u c t u r e s in the c i r c u i t . e l e c t r i c a l c o n s t r a i n t s for the c i r c u i t are produced from the r e s u l t s of the p r o o f s . the c o n s t r a i n t s are then solved using propagation methods. 
	1 	introduction 
　　　when an expert f i r s t looks at a c i r c u i t schematic  he t r i e s to p a r t i t i o n the c i r c u i t i n t o f a m i l i a r s u b - c i r c u i t s w i t h known g o a l s . he then t r i e s to pursue the c a u s a l i t y of e l e c t r i c a l events through those s u b - c i r c u i t s to determine if and how i t achieves the o v e r a l l goal o f the c i r c u i t . this is based on his assumption t h a t every e l e c t r o n i c 
c i r c u i t is designed as a goal o r i e n t e d composition of basic c i r c u i t s w i t h known g o a l s . even in the a n a l y s i s of an e l e c t r i c a l c i r c u i t w i t h an unknown g o a l   although we could perform a formal numerical a n a l y s i s of the f u l l c i r c u i t equations  we t r y to discover s p e c i f i c s u b - s t r u c t u r e s   such as series or p a r a l l e l c i r c u i t s   in order to r e w r i t e the c i r c u i t i n t o a simpler one. in many cases we can analyze c i r c u i t s w i t h o u t formal numerical analysis. 
       using a deductive system  we have implemented the process which determines these s p e c i f i c s t r u c t u r e s in a c i r c u i t . c i r c u i t elements and devices are represented as l o g i c a l p r e d i c a t e s which have element names and connecting nodes as terms. a c i r c u i t is represented as a c o n j u n c t i o n of p r o p o s i t i o n s which represent each e l e c t r i c a l element or device. the process of determining a s p e c i f i c s t r u c t u r e i n the o b j e c t c i r c u i t i s r e a l i z e d as a proof of a p r e d i c a t e bound by e x i s t e n t i a l q u a n t i f i e r s representing the existence of the s p e c i f i c s t r u c t u r e . since the t r a n s formation of a c i r c u i t i n t o an e q u i v a l e n t one involves changing the axioms which represent the 
* present address 
** duck is a set of lisp r o u t i n e s which implement a r e l a t i o n a l database s i m i l a r to those found in ai language such as planner and p r o l o g .  object c i r c u i t   it is executed as a meta procedure outside of the deductive system. if a specific structure is found in the object c i r c u i t   local e l e c t r i c a l constraints for the specific structure are translated into global constraints on the object c i r c u i t using the results of the proof. the constraints are solved by means of propagation methods.  
	ii 	representation of circuits 
a. 	predicates for elements and c i r c u i t s 
       the c i r c u i t ca1 of figure 1 is represented as follows  1  in the duck system.  the proposition   terminal tl #1   states that tl is a terminal at node #1. the proposition   resistor rl #1 #1   states rl is a resistor connecting node #1 and node #1. the node order is important for elements or devices which have p o l a r i t y   such as diodes. so we define the predicate  diode  such that   diode dl #1 #1   states dl is a diode with the cathode connected to node #1 and the anode to node #1. now we can also define the predicate  transistor  l i k e  diode .  ca1  is a predicate without arguments.   ca1   as a propositional constant states that there is a c i r c u i t called ca1.  -   is the forward chaining symbol. it means logical implication  but procedurally  it means that when    ca1   is added to the database of axioms  then   terminal tl #1      terminal t1 
#1    . . .     diode dl #1 #1   are 	to be asserted  added to the database  immediately. 	  1      


1 t. tanaka 
b. 	rules for non-polar elements 

iii finding a specific structure in a circuit 


c. 	predicates 	for 	a b s t r a c t elements 
　　　we can define predicates for abstract elements from atomic formulae representing circuit elements and devices using logical connectives and quantifiers. these predicates correspond to the conceptual hierarchy of circuit elements and devices. first we w i l l define the predicate  zelement   so that we can call resistors  capacitors  and inductors impedance elements  1 . the backward chaining symbol   -  is used insted of the forward chaining symbol. it also means logical implication  but differs proceduraly from forward chaining. the rule  1  is applied when the system tries to prove   z-element dl #1 #1   corresponding to the question  does there exist dl an impedance element connecting node #1 and #1  . in order to prove the proposition  the system tries to prove either   resistor dl #1 #1   or   capacitor dl #1 #1   or   inductor dl #1 #1  . we can also define predicates such as  active-element    linear-element   . . .    any-element  so that we can refer to these classes of elements and devices. 

d. 	predicates for circuit identification 
　　　in order to decide which kind of analysis can apply to the object c i r c u i t   several predicates for circuit identification are defined. they ident i f y the global properties of the object c i r c u i t . by proving the proposition   exist x #a  terminal x #a     we can decide whether the object circuit is an open circuit with terminals which are connected to other circuits or not. so we can define the predicate  open-circuit  as follows  1 . 
　　　 impedance-circuit   section iv  is defined to prove that a l l the elements in the circuit are impedance elements. predicates such as  twoterminal-circuit  which count the number of terminals are defined using the b u i l t - i n predicate  total   section i i i   . 
a. 	representation of a s p e c i f i c s t r u c t u r e 
       let us consider the s l i g h t l y more complicated c i r c u i t ca1 in figure 1. in order to show the existence of a series c i r c u i t   we attempt to prove the f o l l o w i n g formula: 
 exist x y #a #b #c  and resistor x #a #b  
 resistor y #b #c      -   1   
       when    ca1   is asserted  p r o p o s i t i o n  1  becomes t r u e   because we can s u b s t i t u t e constants  rl r1 #1 #1 #1  i n t o v a r i a b l e s  x y #a #b #c  r e s p e c t i v e l y   corresponding to the a c t u a l existence of a series c i r c u i t in ca1. but we can also subs t i t u t e constants  rl rl #1 #1 #1  or  rl r1 #1 #1 #1  to the v a r i a b l e s which do not correspond to series c i r c u i t s . in order to r e j e c t the former i n c o r r e c t s u b s t i t u t i o n   the predicate   not = #a #c   is added to  1 . 
       rejection o f the l a t t e r i n c o r r e c t s u b s t i t u t i o n is rather d i f f i c u l t . a series c i r c u i t demands that the c e n t r a l node  #b  in  1  should not be connected to elements other than those in the formula. in order to represent t h i s c o n s t r a i n t the 
predicates  degree  and  connected  are introduced. 

	figure 1: c i r c u i t ca1 	figure 1: 	r-series 
b. 	rules for node degree 
　　　we w i l l use the backward chaining rule  connected  to enumerate the terminals  impedance elements and diodes x connected to node #a. 

　　　the predicate  degree  has two arguments. it becomes true if the f i r s t one is a node and the second one is its degree in the object circuit represented in the database of axioms.  legree  is defined as follows using  connected  and  total . 
 rule ct-structure-degree 
 degree  #a  #deg   -
 total  #deg 1 connected  x  #a    - 1  
　　　 total  is a special b u i l t - i n predicate which states that the f i r s t term is a sum of the second term according to a l l known instances of the third 

 rule ct-identifier-open-circuit 
	 open-circuit   - 	 terminal  x  #a   	  1  
term. now we can define the predicate  r-series  which states the existence of a series-resistor c i r c u i t in the object circuit as follows. 


	c i r c u i t 	s t r u c t u r e s 	for ac-analysis 
       we can define predicates for a schematic acanalysis using s e r i e s   p a r a l l e l   s t a r   and d e l t a c i r c u i t t r a n s f o r m a t i o n s . the p r e d i c a t e  z-series  for a series c i r c u i t of impedance elements is defined by replacing  resistor  with  z-element  in  1 . using the predicate  z-element   p r e d i -
cates  z-parallel    z-star   and  z-delta  are also d e f i n e d . 

	iv 	meta procedures for the deductive system 
a. 	procedurally defined predicates 
       there are some c i r c u i t predicates which can not be adequately represented by the methods d i s cussed so f a r . one such class is the p r o c e d u r a l l y defined c i r c u i t s such as  series-parallel-circuit  or  multiple-rectifier-circuit  which r e f e r to an i n f i n i t e   recursive set o f c i r c u i t s . another class is composed of e l e c t r o n i c c i r c u i t s w i t h s p e c i f i c g o a l s   such as  fm-receiver . in the d e f i n i t i o n of a p r e d i c a t e   the way in which an fm-receiver c i r c u i t is constructed from s u b - c i r c u i t s   i . e . rfa m p l i f i e r   . . .   d i s c r i m i n a t o r   to achieve the f i n a l goal of the c i r c u i t must be included. the former predicates w i l l be developed in the f o l l o w ing paragraphs  but the l a t t e r predicates have not 
yet been developed. 
　　　the procedure to determine whether a c i r c u i t is a s e r i e s - p a r a l l e l c i r c u i t of impedance elements 
or not is as f o l l o w s . f i r s t the c i r c u i t is i d e n t i f i e d as a two terminal c i r c u i t and an impedance c i r c u i t . then the c i r c u i t i s r e w r i t t e n i t e r a t i v e l y i n t o simpler equivalent forms each time a series 
o r a p a r a l l e l c i r c u i t i s found i n i t . i f the c i r c u i t can u l t i m a t e l y be r e w r i t t e n i n t o a s i n g l e element  then we have shown t h a t the o r i g i n a l one 
t. tanaka 1 
was a s e r i e s - p a r a l l e l c i r c u i t . the f i r s t and l a s t steps are r e a l i z e d using the predicates  twoterminal-circuit    impedance-circuit  and  hasone-element  in section h i . but the middle step is not so easy to implement in a deductive system  because r e w r i t i n g a c i r c u i t i n t o an equivalent one means changing the set of axioms representing the c i r c u i t . this can be done by i n t r o d u c i n g a s t a t e term i n t o each p r e d i c a t e    but it is easier to consider the procedure in a t o t a l system c o n s i s t i n g of the deductive system and a meta procedure. 
b. 	rewriting a c i r c u i t 
       in order to c o n t r o l the deductive system p r o c e d u r a l l y   several mechanisms are provided for c a l l i n g duck from lisp. if  1  is evaluated in lisp  the p r o p o s i t i o n    ca1    is added to the 
duck database. then by the forward chaining rule of circuit-library-ca1    terminal tl # 1       . . .     resistor r1 #1 #1   are added i n t o the database. 
then by the forward chaining r u l e of resistorimage    resistor rl #1 # 1       . . .     resistor r1 #1 #1   are also added. 
	 add '  ca1    	 1  
       under t h i s c o n d i t i o n l e t us consider a procedure  r-series-transform  which f i n d s a s e r i e s r e s i s t o r c i r c u i t and then r e w r i t e s that p a r t of the c i r c u i t i n t o an equivalent element. at f i r s t   corresponding to a proof of the p r o p o s i t i o n    exist  x y #a #b #c   r-series x y #a #b #c     the f o l l o w i n g  1  is evaluated in lisp. if series c i r c u i t s are found  it r e t u r n s a stream of instances for the v a r i a b l e s  x y #a #b #c . 
	 fetch ' r-series  x  y  #a  #b  #c   	＊ 1  
       in order to r e w r i t e a series p a r t   we have to remove the set of axioms corresponding to the series c i r c u i t . if the f i r s t instance is  rl r1 #1 #1 #1    1  and  1  are evaluated. 
 erase ' resistor rl #1 #1   
 erase ' resistor r1 #1 #1    1  
 1  	when 	 1  	is 	evaluated  	not 	only 	  resistor 
rl #1 #1   but also i t s 	deduced 	image 	  resistor 
rl #1 #1   is erased from the database by a data dependency mechanism.  
	 erase ' resistor rl #1 #1   	 1  
       if  1  is evaluated insted of  1  when the f i r s t instance is   r1 rl #1 #1 # 1     then   resistor rl #1 #1   w i l l be erased but i t s o r i g i n a l 
  resistor rl #1 #1   can not be erased. as we want to erase the o r i g i n a l when the image is erased  we can set up  if-erased-demon  in duck as a forward chaining from the erasure. the r u l e is 
w r i t t e n as f o l l o w s  1 . according to the r u l e     resistor rl #1 #1   is to be erased by  1 . 
 lisprule r-image-delete 
 resistor  x  #b  #a  -  
 if-erased ' resistor  x  #b  #a  
 erase ' resistor  x  #a  #b        -   1   
　　　the p r o p o s i t i o n representing an equivalent r e s i s t o r is to be added as f o l l o w s . 
	 add ' resistor erl #1 #1   	＊ 1  

1 	t. tanaka 

　　　as we can define multiple databases of axiom sets   data pools   in duck  the original circuit and a l l the rewritten circuits for working are stored in separate data pools  see duck manual . the variable  obj-ct  in  1  and  1  is the name of the data pool which contains the circuit being processing. the lisp function  prove  corresponds to  fetch  in a data pool. the lisp functions  z-series-transform  and  z-parallel-transform  return the name of the new data pool which contains the rewritten c i r c u i t   if they succeed in transforming the c i r c u i t   otherwise nil. finally 
we have defined the predicate  z-series-parallelcircuit  by calling the lisp function    z-spcircuit 'p1   from duck. 
　　　the 	electrical 	constraints 	on 	the 	object circuit are produced 	as 	a 	side 	effect of 	 z-　　　the f i r s t line shows  at f i r s t the proposition   z-series  x  y  #a  #b  #c   was satisfied 
by the bindings in the following association l i s t .   nx ezl   shows that the new name  ezl  was assigned to the equivalent element nx. 
　　　the following electrical constraints  1  are provided for a series-impedance c i r c u i t .  x  and  y  represent impedances of elements x and y respectively.  nx  represents the equivalent im-
pedance of a series c i r c u i t .  #a    #b   and  #c  represent electrical potentials of node #a  #b  and #c  see figure 1 . the symbols representing elements in the constraints mean their impedances. the symbols representing nodes mean their elect r i c a l potentials.  c+    c-    c*   and  c//  
are defined as arithematic operators on complex numbers. series-transform  and  z-parallel-transform . we can define a more convenient predicate  zseries-parallel-star-delta-analytical-circuit  for actual ac-analysis adding   z-star-transform objct   and   z-delta-transform obj-ct   to  1 . it can analyze most two-terminal impedance circuits which electrical engineers meet daily. 
	v 	schematic circuit analysis 
       if 	we 	assert    ca1   in 	figure 	1 	as 	the object c i r c u i t   when we t r y to prove 	the 	p r o p o s i t i o n 	    z-series-parallel-star-delta-analyticalcircuit    	the 	lisp 	f u n c t i o n 	 z-spyd-circuit  associated 	w i t h 	the 	p r o p o s i t i o n 	is 	evaluated. 
　　　the lisp function  propagate  solves these constraints. here  c+  is analogus to  setq  in lisp. at each constraint  if a l l the variables in the right hand side become defined  it is evalu-
ated and the l e f t hand variable is assigned that value and the constraint is then removed from the l i s t . this procedure is iterated until the right hand sides cease to f i r e . suppose each element of ca1 has following value  1 . units are ohm  farad  and henry respectively. if 1  volt  1 
 hertz  ac voltage is applied between terminal tl and t1  potentials of node #1 and #1 are set as 
 1   and impedance of each element at 1  hertz  is also computed and set as  1 . 


	vi 	conclusion 
       we have developed a r e p r e s e n t a t i o n for e l e c t r i c a l c i r c u i t s using conjunctions o f p r e d i c a t e s   and r e a l i z e d the procedure of determining c i r c u i t s t r u c t u r e s as p r o o f s . ac and m u l t i p l e - r e c t i f i e r a n a l y s i s were done to confirm the e f f e c t i v e n e s s of t h i s method. the s t r u c t u r e s to be found in the analysis were rather simple ones  and the o b j e c t c i r c u i t s were r e s t r i c t e d to i t e r a t i o n s of those s t r u c t u r e s . 
       we plan to develop t h i s method to analyze more complicated e l e c t r o n i c c i r c u i t s w i t h s p e c i f i c g o a l s . for those c i r c u i t s we have to introduce many predicates r e f e r r i n g to c i r c u i t goals and device-element goals such as  rf-amplify    frequency-convert    rf-bypass    dc-block . the repr e s e n t a t i o n of a goal s t r u c t u r e for the c i r c u i t is as important as the r e p r e s e n t a t i o n of the c i r c u i t i t s e l f . predicates d e f i n i n g e l e c t r i c a l p o t e n t i a l s and c u r r e n t s and t h e i r changes w i l l also be i n t r o d u c e d   e . g .  current    signal    flow   
 increase    decrease . predicates such as  open    short    saturate    cutoff  w i l l be introduced to represent the e l e c t r i c a l s t a t e s of c i r c u i t s and devices. using those p r e d i c a t e s   c a u s a l i t y of e l e c t r i c a l events in the c i r c u i t can be r e p r e sented. this in t u r n permits the d e f i n i t i o n of f u n c t i o n a l p r e d i c a t e s which can be used to c l a s s i f y c i r c u i t s on the basis of t h e i r behavior. 
       the process for determining s t r u c t u r e s in a c i r c u i t must be improved. the approach i l l u s t r a t e d in t h i s paper is a p p l i c a b l e only to simple c i r c u i t s   for the time required to i d e n t i f y a c i r c u i t increases c o m b i n a t o r i a l l y w i t h the number of components. to handle more complex c i r c u i t s   the system must r e s t r i c t the search space in an i n t e l l i g e n t manner. for example  if it is known t h a t the goal of the o b j e c t c i r c u i t is  receive fm broadcast   then we have many h i n t s to help in determining the s t r u c t u r e . if a loud speaker is found in the c i r c u i t   the system can use the e x p e c t a t i o n t h a t the adjacent c i r c u i t must be a 
       power a m p l i f i e r . these expectations w i l l not only decide which s t r u c t u r e should be looked for next  but w i l l a l s o decrease the search space for t h a t s t r u c t u r e in the c i r c u i t . the proof   complementary-power-amplifier  x  y  #a   # b . . .    is slower 
t. tanaka 1 
than proof of the   complementary-power-amplifier q1 q1  #a   # b . . .    as the number of t r a n s i s t o r s in the c i r c u i t increases. for t h i s purpose we may introduce predicates such as  adjacent-element    nearest-transistor . we are now developing various predicates for the q u a l i t a t i v e a n a l y s i s o f e l e c t r o n i c c i r c u i t s . 
acknowledgments 
       i would l i k e to thank: prof. roger schank f o r the o p p o r t u n i t y to study at yale a l - p r o j e c t   prof. drew mcdermott for duck  and david l i t t l e b o y   stanley letovsky  and jay bolter for t h e i r h e l p f u l advice. 
