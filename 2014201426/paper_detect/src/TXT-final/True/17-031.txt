. 
     a strong advantage of bottom up generating techniques is their ability to guarantee finiteness of all inferences in a deductive database system involving recursive axioms. but a  brute force  generating answers to a query would be very inefficient producing many facts useless for the query evaluation. an economy generating method is presented based on discovering explicit facts relevant to the query  and applying preselected axioms as generating rules. the method is proved to be complete in the sense that it generates all the existing answers to the query in a finite time. 
1. introduction and motivation. 
     recently deductive database systems have become an area of extensive research  chang  1 1  gallaire  minker and nicolas  1  henschen and naqvi  1. kellogg.klahr and travis. 1. 
klahr.1. kowalski 1  mckay and shapiro  1  
minker. 1  minker and nicolas.1  naqvi and henschen  1  naqvi  fishman and henschen  1  
nicolas and galiaire.1  nicolas and yazdanian.1  reiter.1. shapiro and mckay  1  ullman.1 . 
consider a database db  relational database  in particular  consisting of a set of relations {ri}  extensions of some relations {ri}  and axioms {aj} in the form of horn clauses. a relation presented explicitly by its extension is called base relation  while a relation defined by an axiom is a virtual relation. base relations constitute the extensional database  edb   axioms are contained in the intentional database  idb . a query  q  is a formula  in a first order language   and answering q means finding a proof that q is implied by the edb and idb. suppose a relation  r  is defined in terms of itself. if such a recursive definition of r is used in the course of a query processing this may lead to an infinite search for a proof. a number of elegant solutions to the problem of handling recursive axioms have been proposed 
 chang. 1  henschen and naqvi  1  mckay and shapiro  1  minker and nicolas  1  naqvi and henschen  1  reiter 1b  shapiro and mckay  1  ullman 1 . 
     most of known methods employ top-down goaldriven deduction which may be drawn by recursive axioms into an inflnite  or at least  too long  evaluation process. another serious problem of goal-driven strategies is a fast growth of the search space because being not restricted enough by a specific information the search develops in many directions including the ones neither relevant to the query nor supported by the extensional database. on the other hand  it seems very natural to exploit the problem-specific information provided by a query  and the actual data stored in the edb for directing the query answering process. as an extreme example consider a query about the academic achievements of a student  tom steel. if there is no tom steel among the students of the university then any search and deduction will be useless. instead  it could be found out prior to a processing that the sought name does not appear in the edb  so the search should be stopped in the very beginning. 
1. answers can be generated bottom-up. 
     given a horn axiom. a1 and a set  f  of facts asserting its antecedent  the axiom can be used for producing a fact corresponding to its consequent and implied by f. then a1 plays the role of a generation rule  minker and nicolas  1  nicolas and gailaire 1. nicolas and yazdanian.1 . if an instance of the consequent of an axiom  a1  is considered as a goal of deduction then by backward reasoning it can be reduced to a set of subgoals corresponding to the predicates of the antecedent of a1; in this case a1 is said to be used as a derivation rule. using a recursive axiom  or a cycle of axioms  as a derivation rule can lead to an infinite process. on the other hand  it is shown in  minker and nicolas  1  that when axioms are used as generation rules infinite inferences do not arise. indeed  because the language describing a database is function-free the domain closure axiom  reiter 1  ensures that no new constants can be produced during a processing  and so out of a finite number of constants contained in the database only finitely many different tuples of certain kind can be generated. 
     the flniteness of generating suggests an endeavour to answer queries by using axioms as generation rules only  or mostly . trivially: could a set of facts have been produced by applying all axioms of the idb as generation rules to all facts of the edb  this set would contain all possible answers of the database to any query. alas  the set must be too huge to be practical  because m constants can yield 1 mn  different n-tuples . in this respect several questions arise: can an answer to a query be generated in such a way that  almost  only those facts are produced which are necessary for the query evaluation  how axioms and explicit facts that are relevant to the query can be determined  the rest of the paper presents an approach to answering these questions affirmatively. 
let axioms be presented in the form 
 1  
such that 
denotes a conjunction of equalities between variables or 

1 	e. lozinskii 
sg is an and/or graph  nilsson 1l   
where rei-nodes play the role of arid-nodes  and ax-
nodes that of or-nodes. if a relation  p  is defined recursively  that is  it occurs in the consequent of an axiom as well as in its antecedent  then the occurrence of p in the antecedent is represented by a main rel-mode  while its occurrence in the consequent - by a secondary relnode. the latter is connected to the main rel-node of p through an auxiliary ax-node. figure 1 shows a sg corresponding to  1 . because all terms appearing in rel-nodes are distinct variables  while all specific relationships among the terms of an axiom are displayed by the corresponding ax-node  all occurrences of a relation in the database are represented by a single main relnode  except its occurrence in the consequent of a recursive axiom . an atomic query has the form 
 existential quantifiers are dropped : 
             1  the rel-node representing q is called the target of q      definition. an axiom. a  is said to be executed on a set of facts  f  if the facts of f which correspond to the antecedent of a are used for producing of all generable 
facts corresponding to the consequent of a. 
     the following propositions hold  proofs are omitted in this abstract for brevity : 
¡¡¡¡¡¡proposition 1. let q : q be a query  dp - a topdown derivation proof of q   answ - the set of answers  facts  supplied for q by dp  der - the set of axioms used in dp as derivation rules  f - the set of facts  belonging to base relations  used in dp. then all facts of answ can be produced out of f by using the axioms of der as generation rules only.      proposition 1. ail answers to a query  q :q  can be generated by executing a set of axioms  gen  called 
generators of q  on a set of facts  such that is represented by bpred q   and gen consists of axioms displayed by predecessors of q  
1. an economy way. 
     a  brute force  generating answers to a query according to proposition 1 would be very inefficient producing many facts unnecessary for the query evaluation because in most practical cases der and f are small subsets of gen and  respectively. an economy generating process should use those facts and axioms which 
are relevant to the query. thus  the question is how to discover them. 
     definition. in the course of generating facts a term  t1t can be assigned a value of another term. t1   when expressions are unified  chang and lee. 1  or axioms are executed ; we say that t1 can migrate to tx . assume that all terms of relations are distinct variables  and define a migration set of  containing all terms to which x can migrate: 
	figure 1. 	

	e. lozinskil 	1 
representing the fact to the target node of q. axioms of gen are executed in the increasing order of their distances from targ q   that is  first are used the facts nearest to targ q   and therefore likely to produce an answer to q in a short time. this ordered execution of axioms improves performance especially for such queries that do not require all the possible answers  e.g.  give a name of any employee  who ...    or for which the number of all answers is known  e.g.  who were the 
	 four  	grandparents 	of 	john     	including 	such 
 boolean  queries as  is there ...   
     any axiom is executed or applied as soon as the necessary data are available. so apex is well suited for 
a parallel multiprocess implementation  in particular  in such a manner that rel-nodes and ax-nodes are associated with a set of communicating processes  hoare 1  exchanging messages along the arcs of the sg. 
     it is proved that apex is complete in the following sense: 
     proposition 1. given a query  apex generates all answers implied by the database. 
1. an illustration. 
     in this section apex is illustrated by an example taken from  henschen and naqvi  1  involving a recursive definition. consider a database containing relations m  n  p r s which may be thought of as special kinds of relations between ancestors and descendants. m m 1  m 1  . p p 1  p 1    r r1 r1  are base relations with the extensions: 
     this approach is implemented by an algorithm called apex because it employes extensively procedures apply and execute. given an axiom. a  and a set of facts  f  apply returns a set of all facts corresponding to the consequent of a such that each of them is deducibie from the edb and idb by a generating process that uses necessarily f and a  while exe-
cute returns a set of all facts generable out of f only  by using a as a generation rule. 
     all facts are clustered into extensions of the corresponding relations. this allows to employ well developed tools of relational databases  and efficient algorithms for performing procedures on sets of facts instead of tuple-at-a-time processing- for every relnode  r  the sets of its base predecessors  bpred r   and generators  gen{r   are preprocessed at the time of designing of the system graph to reduce run-time processing. 
     each fact has an associated variable the value of which is the distance in the system graph from the node 

1 	e. lozinskii 

figure 1. 

1 conclusion. 
     apex employs a certain kind of bidirectionality: generating of facts is performed bottom-up  while the axioms used for evaluation of a query  q: q  are determined in a top-down manner as predecessors of q in the system graph. a bottom-up generation is directed by actual information stored in the edb in contrast to a top-down derivation process that can be developed in directions not supported by the database. but although apex starts only with relevant facts and restricts the set of used axioms  yet a number of facts irrelevant to the query are likely to be generated in the course of the query evaluation. and so  in some cases a generating process can be inferior to a top-down derivation. ullman  1  describes very convincing examples in which 

figure 1. 
derivation is more efficient than generation  like in the case  section v  where axioms define recursion on structure with a certain kind of decreasing structural complexity. on the other hand  in systems with a very developed idb and relatively not large edb generation promises to be thriftier than derivation because of a significant reduction of the search space. hence  to achieve a high performance of each specific database system a certain combination of top-down and bottomup techniques should be employed depending on the actual characteristics of the system. 
     for all that  a strong advantage of bottom-up generating is that it by itself guarantees finiteness of all inferences  and so it deserves certain attention like the one it is paid in this paper. it is shown also that generating methods may influence database structuring providing a trade-off between storage space and query evaluation time. 
acknowledgments. 
the author is grateful to michael rabin and jeffrey 
ullman for most inspiring discussions of the subject of this paper. 
