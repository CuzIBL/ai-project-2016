 
　　　a knowledge-based interactive system for choosing abstract data structures and concrete represent.* tions for them is described. 	the system acts as an  expert  on data structures and is to be consulted by programmers during the design stage of t h e i r work a specification method is described which assumes a restricted vocabulary of data 	structure terminology common to the user and the system. 	the selection process uses a base of knowledge about known abstract data structures and representations  and provides new combinations of known structures which satisfy complex requirements not anticipated in advance 
key words and phrases: data structure representations  expert system  choice of data structures. c.r. categories  1  1. 
1. introduction 
　　　this paper describes a knowledge-based inter active system which chooses abstract data structures and concrete representations for them. 	both the principles behind the system  and features of the presently implemented version are presented. 
　　　the system acts as an expert on data structures and representations  giving advice on data structures to a programmer using a high-level  popular  languagesuch as pl/1  fortran or pascal. the system should be consulted during the development of the user's program  before the actual code is w r i t t e n . the user d i r e c t l y describes his data requirements  mainly in terms of the operations he wishes to perform  and is interrogated to f i l l in information which is crucial to the selection. we have employed the techniques of expert systems on a problem taken from the program ming world i t s e l f   and we t r y to emulate the process followed by a human expert in data structures  producing combinations of known structures  and representa t i o n s   . 
　　　the main j u s t i f i c a t i o n for a selection system is that finding good representations has 
proven to be quite d i f f i c u l t : many programs in wide spread use suffer from unwise realizations of data structures. this is due to a lack of f a m i l i a r i t y with ruth zimmerman 
computer science department 
technion - israel 	i n s t i t u t e of technology haifa  	israel 
the more recently developed data structures and to a lack of awareness of the importance of an appropriate 
choice for data structures. 
　　　the use of very high level  vhl  languages such as setl  sail or esi. might be expected to a l l e v i a t e the problem of bad selection by leaving such matters to an optimizer as seen in  l1    sss1  or  t1 . there are two reasons why this view is not f u l l y satisfactory. f i r s t   the general programming community simply does not use these languages and has no 
intention of doing so in the near future. secondly  in vhl languages the programmer may mistakenly over-
commit himself to an inefficient abstract structure. this is because the user must choose among a fixed set of abstract data structures  while the optimization is done after this choice has been made and cannot affect i t . 
　　　synthesizing a program which e f f i c i e n t l y implements a data abstraction using general program-
ming knowledge and methodological heuristics has made some progress  b1   but is d i f f i c u l t to treat in the 
wider context of program synthesis. 	our system attacks 
this specific problem in depth by giving detailed advice based on the same knowledge available to a human expert in data structures  e.g.  from a standard text in data structures. 	this detailed advice may be expanded in the future to create automatically programmed procedures for the user's operations and specific declarations of the representations in the needed programming language. 
　　　the system includes a base of knowledge about data structures as well as algorithms that should work on the base. the base is a given set of abstract data structures  e.g. set  sequence  graph  etc.  each with one or more representations. the elements of the base structures  e.g. members of the set  nodes of the tree  etc.  are regarded as atomic elements for the purposes of the representations in the base. we assume that the programmer has in mind operations on a data structure whose properties he understands but the collection of operations he requires does not necessarily define a single abstract structure in the base  and does not necessarily have one word elements. the system searches for an e f f i c i e n t representation by viewing the programmer's data structure as a combination of base structures. 
　　　the  wisdom  of the system  as opposed to i t s 'rote knowledge'  	lies in i t s a b i l i t y to reach a combination containing some of the structures of the base  thus enabling realization of non-standard  not 

1 

previously identified abstract data structures. 
　　　certain assumptions have been made in order to clarify and somewhat simplify the types of problems to be presented to the advisory system.  a  internal storage. 	the system should be consulted in case of problems requiring internal memory   users with problems which require extensive external storage should better 'consult' a data base expert . 
 b  distinct structures. the user should come with a set of conceptually distinct structures  consulting the system separately for each distinct struct-
ure. if the user's operations can be divided into two groups  a and b  such that each operation in a has no effect on the result of an operation in b  and vice versa  a and b are distinct structures.  c  strong interaction. a structure is viewed as a collection of elements upon which some operations may occur  and a strong interaction is assumed among these operations. strong interaction means that all subsequent operations take into account the changes in the structure made by all the previous operations. 
　　　in fact various degrees of interaction could be defined among the operations. total non-interaction  for example  means that no operation affects any subsequent operations  and is clearly useless for defining a dynamically changing data structure. semiinteraction means that some of the subsequent operations ignore changes made by some of the previous operations. this requires a detailed specification about the degrees of influence among the operations. again  we have chosen to work with the most common situation  strongly interacting operations.  d  efficiency. within the limits of the contents of the base given to the system we claim that the system reaches the best possible combination of representations for a given specification  when expressed in terms familiar to the system  under two criteria: 
the time criterion: the representations chosen give  efficient time complexity  for each of the operations the user has defined. for each operation  a desired level of efficiency has been fixed. thus operations involving a single element of a structure 
 e.g. delete  insert  etc.  should not take more than 1 log n  time  and if possible 1  time is preferred by the system. simple operations involving all the elements in the structure  such as iterate  are required to take 1 n . for a sort operation its representations would have to be in 1 n log n . a size operation  on the other hand  must be performed in 1 . the system will generally consider worstcase time efficiency  but asks questions which allow using the average case when appropriate. 
the reduction criterion; under the above time constraints the system suggests a representation containing the fewest possible distinct representations of structures in the base. thus  in general  time is preferred to space. 
　　　in section 1 a  natural  specification method  used both as a communication tool with the user and as a representation of part of the system knowledge  is presented. 	section 1 describes the base of data structure knowledge  while section 1 presents the selection process. 	two examples are given in section 1 and conclusions are in section 1. 	some of the information in the present base may be found in the 
appendix. 
　　　the advice given  i.e.  the output from the system includes naming the representation structures chosen  with the interconnections among them. the structure in which each user operation should be done is identified  and the way to update the other representations is briefly described. a trace of the considerations which led to the choice is optional . in short  the system provides advice on the same level as a human expert in data structures advising a colleague. 
　　　some of the ideas behind the system described in this paper were first presented in  rk1 . in addition to the works already mentioned  kant  k1  described an optimizer which was part of a large program synthesizing system. rowe and tonge  rt1  present a specification language and algorithms for selecting low level implementation structures  but did not implement a system. 
1. expressing requirements - the specification method 
　　　in order to build an interactive advisory system a medium must be developed in which the user can express his requirements to the system.  systems which are oriented toward program analysis  on the other hand    l1    sss1   ordinarily do not need such a medium.  
　　　unfortunately  the standard formalisms  such as algebraic specification  adj  or state transformations  are often unintuitive and difficult to reason about. any specification method involves expressing the unknown  the object to be specified  in terms of something known. this is done using a known metaformalism. programmers in fact communicate  orally  among themselves about data structures using a common linguistic base of known vocabulary about data structures. 
　　　on the level of expressing abstract requirements  this vocabulary consists of generic operations and additional attributes which together are sufficient to express what is to be done with the structure and how to access its elements. with the above motivation  we will now define how we use these terms. a linguistic base is any collection of generic operations  criteria and specific attributes  all explained below  which is assumed known for the purposes of specification. a sample linguistic base is shown in figure 1. 
　　　a generic operation is the common denominator of meaning among a recognized family of operations on data structures  and is assumed understood by both the user and the system  based on the meaning of the words in english. for example  one generic operation is insert. this means that an item is to be adjoined to a structure in such a way that subsequent operations will react as if the item is in the structure. similarly  a generic delete operation will make some element no longer available in the structure. the precise manner in which the user's needed operation  say x  acts on the structure is not specified merely 
by identifying x as a generic delete  and will depend on the attributes required. only with this information 

1 


figure 1 - a sample linguistic base 
will it be possible to determine whether x is  e.g.  a  pop  from a stack or  remove the 1th 
element  from a sequence. 
     the criteria are additional types of properties which allow distinguishing the possible instantiations of a generic operation. they define the access method to be applied when performing the operation. each criterion may have an arbitrary set of specific attributes  which are in effect the possible  values  which the criterion may assume. while the underlying meaning of the generic operations is self-evident  no standard terminology exists for the criteria and attributes  even though the concepts are widespread. thus an informal explanation of their intended meanings is given by the system. 
     the main descriptors in the present base are the criteria of element contents  time  place  order  connections between elements  or undetermined  a  don't-care  option . additional modifiers  used with 'element contents'  are the quantity  or the evaluating functions to be used. as an example of their use  a 'find by element contents' means an 
operation which is to be given a value  or a function based on the value such as min  and locates an element whose contents has that value or f u l f i l l s the appropriate function. on the other hand  'find by place' is given an index or pointer as argument  while 'find by time' would need to locate  say  the newest or oldest element in the structure. 
     when the elements involved are not atomic  an evaluating function is needed to define the element's 'value'. for the purpose of the system  it is sufficient to indicate which operations have the same evaluating function  using arbitrary identifying' numbers for the functions. 
liven the trivial basis given in figure 1 is 
sufficient to describe many data structures which are difficult to understand using other methods. consider an abstract data structure with four operations. a summary of a specification using the method we suggest might be: 
generic 	operation 	-attribute 	 using 	criterion  insert 
delete 
fetch size min-one  using element contents  quantity  
	old 	 using time  　　　in words  we have defined a structure into which we would like to insert elements so that we can always determine how large the structure is  by applying the size operation   fetch  in order to print or examine  the element which is the structure the longest time  applying the fetch-old operation   and delete one copy of the element s  whose value is minimal in the structure  applying the delete -
min-one operation . 
     the same specification method is used to describe the abstract structure 'library' of the system 
base. 
     as mentioned in the introduction  the output will also be expressed in terms of a common vocabulary between the system and the user. 	for example  the advice includes naming chosen representations such as  a 1 tree  or  a bit vector   assuming these known to the user. 	some examples of output are given in section 1. 
1.  the base 
     one of the main guidelines for any expert system should be the separation between the knowledge the system has and the algorithms that work on that knowledge. this concept enables easy additions or changes in the knowledge without many  or any  changes in the algorithms. 
     the base of the system is the extendable part of its knowledge. it includes information about abstract data structures  e.g.  set  graph  sequence  counter  etc.   each of which has a number of representations associated with i t . an abstract structure is a collection of operations for which 
there 	exists at least one representation with efficient time complexity for each operation. 	the organization of the base is shown schematically in figure 1  and is explained in more detail 	below. 
     the abstract data structure part of the base includes definitions of abstract structures 'known' 
to the system according to our specification method  described in the previous section   and information about their relative simplicity. 
     during our study it became evident that for most abstract structures the representation choice is completely independent of the choice for the other abstract structures in the required combination of structures. however  in some specific situations  in order to reach the best possible representation  the choice should consider the properties of the representations already chosen. for example  we have identified a subgroup of structures which have one 'designated' operation  providing information about the structure   for which they are useful  and which justifies combining the structure with other abstract structures not immediately permitting this operation. 

1 

these structures are termed auxiliaries. upon further analysis  they often become extraneous and can be eliminated whenever the designated operation of the auxiliary can be performed efficiently by the representations of the other structures. 
　　　examples of such structures are the collection which allows iterating through its elements  or the counter  which allows determining the size of a structure efficiently. a representation for an auxiliary will be chosen only after it becomes clear that it is not extraneous. 
     the user's needs may sometimes be satisfied in more than one way. the information about relative simplicity helps the system to choose the simplest structures that f u l f i l l the user's needs. the simplicity level is actually a hint on the complexity of the representations for a structure  and is 
measured according to the most complicated representations a structure has. thus a stack is considered simpler than a set  by comparing the linked list with the 1 tree  the stack's and the set's most complex representations  respectively . 
     the representations part of the base includes a list of acceptable representations  i.e. those with all operations efficient according to the time criterion   for each abstract structure and additional simplicity information. 	f.ach of the representations has associated with it 'preconditions' for its applicability  generalizations  and additional properties. 
the preconditions are properties of the elements 
 expected size  range of values   of the operations  relative frequencies   or of the high-level structure product. for example the binary tree representation of a set requires some ordering relation among the elements. additional properties which are useful in the selection process may be found in the appendix. 
     the generalizations are alternative representations which implement the same operations as the included representation  within the limits of efficient time complexity   but may permit additional operations to be done efficiently and may be more space consuming. for example a threaded tree is a generalized representation of a binary tree: it enables an easier inorder pass through the tree but requires more space. the generalization list is used in the reduction stage of the selection  see sec. 1 . 
　　　additional information about the simplicity of the representations is needed because some operation - attribute combinations can be executed in several representations within the required orders of magnitude of time. of course  the 'simplest' representation is desired and when the other properties of the representations are not sufficient for choosing  we add special information which to the system is arbitrary  but which the designer of the base can provide  according to his intuitive understanding  or by considering the number of primitive operations more precisely. 
	1. 	the choice process 
     after absorbing the description of the user's abstract data structure the system must choose a realization. this choice process can be divided into stages:  a  the operations are grouped into those which refer to the same abstract user structure   b  for each user structure  a collection of known abstract structures from the base are chosen to 'cover' the needed operations   c  tentative representations are chosen for each structure in the base   d  an attempt is made to generalize tentative representations in order to reduce the number of representation structures   e  representations based on links and pointers are combined into a single 'plex'  for reasons explained below   and  f  various slight generalizations and interconnections among 
representations are added in order to ensure adequate time complexity for ail operations on all structures. 
	the stages are briefly described below. 	the 

1 

examples in the next section illustrate the difficulties and their solutions. 
 a  identifying the user'e structure: the description given according to the specification method described in section 1 includes naming the entities which are in the user's data structure requirements. when defining each of the operations he wants  the user is also required to indicate which entity serves as the aggregate and which as the item  element   for that operation. a level is simply a collection of operations with the same aggregate. when the name associated with an aggregate entity for some operations is used in other operations of the user's data structure as an element  the multi-level 
situation exists. it is clearly not difficult to identify the levels by partitioning the operations appropriately. 
　　　recall that the base structures made no assumptions about the nature of 'elements'. 	in the multilevel situation an aggregate on an upper level will have elements which are entire structures. 	thus the system must decide  using the preconditions in the base  which of the representations are s t i l l applicable  for such an aggregate. 	the representations ultimately chosen will generally contain pointers or vectors of indices to the 'elements'. 
　　　note that the levels need not form a simple hierarchy  and that a circular situation is possible  e.g.  the elements of a structure a are themselves structures of type b  whose elements are of type a . 
　　　at this stage the system also attempts to eliminate operations whose access method was left unspecified  using the attribute any   when they can be subsumed in other  more specific operations already specified. 
　　　when evaluating functions are involved  the operations of each level are further divided into classes. each class is a collection of operations which use the same evaluating function  or do not require such a function. when the 'designated' operations of the auxiliary structures are present  they form a separate class. 
 b  choosing a cover: crucial to the process of choosing within a single class is the idea of finding a set of abstract structures whose union of operations 
is a superset of the operations required for that 
class. such a set is called a cover of the user's class. when the cover includes more than one abstract structure  it is called a structure product. whenever a level includes several classes  the union of the covers of the classes forms the level cover. 
　　　the existence of a cover guarantees that each operation required by the user can be efficiently implemented in a representation for one of the structures in the cover. 
　　　the choice of covers is done independently for each level  keeping the number of structures needed to a minimum  and choosing structures which are 'simplest' according to the guidelines found in the base. 
 o  tentative representation ohoioe: the best representation according to the time and the space criteria is chosen for each abstract structure in the cover of the level. this choice is done class by class. in trying to keep the principle of an expandable base system the system  except for the auxiliary case  chooses the representation of each abstract structure regardless of the previous representations already chosen  but will take into account the user's global needs as given in his specification. this allows the choice to be done in any order among the classes and among the abstract structures in them. 
 d  generalizations: a reduction in the number of representations in the structure product is extremely beneficial both to space and time efficiency  because then  less updating may be needed to keep all the representations containing the same information. thus once representations have been chosen for each abstract structure in the structure product of the class  an attempt is made to 'generalize' the representations  using  generalization lists   in order to find a 'common ancestor' which could provide all of the needed operations at reasonable cost. for example  consider a structure product which includes a set and a priority queue  for which a 
binary tree and a linked heap have been chosen  respectively. this stage will generalize the linked heap into a binary tree and thus the final representation choice will be reduced to a binary tree  perhaps with an additional pointer to the extremum value . 
　　　the reduction is only possible among representations which use the same evaluating function and is 
thus done within each class  but not among the classes. 
　　　the strong interaction assumption discussed in the introduction implies that operations which change the user's abstract structure require updating in each of the structure product representations. the updating should be done within the efficient time defined for the operation. the choice of a cover guarantees that these operations are performed 'naturally'  along the access paths  in one representation - the natural representation  but are not natural for the others. the updating means that the same generic operation should be performed on each of the other representations with the element identified in the natural representation  and leads to two problems: 
 1  a direct access  usually not the natural one along the usual access paths  should be provided in order to reach the element identified in the original operation  
 1  using an unnatural access requires additional connections  pointers  among the elements of the representation in order to actually perform the generic operation. 
　　　the need for such a direct access can be avoided either if we can use the regular access paths to the other structure  e.g.  elements are accessed efficiently by their values  or if we can do 
1  e  combination to a 'plex'. when some representations share the 'linked' property a  node merging combination  may be built. the corresponding nodes of the structure in the product are merged  constructing one plex where each node includes one copy of the information  or a pointer to the information  when the information is not atomic  and pointers  access paths  according to each of the original representations. thus the same node can be reached using 
either access path. no direct access is needed in the plex for any operation  but some operations s t i l l create the second  processing  problem. 
if  when there are structures not allowing efficient 
access 	by value to elements which must be updated  direct accesses using pointers or indices to these elements are added to the structure where the access is natural. 	additional links may also be added to allow needed rearrangements caused by the external change. 
1. examples 
     the following exchange involves a problem from a car rental agency  which will not be described in detail  but which the user understands and for which he has developed some data structure requirements. the user writes in capitals  and responses of the system are preceeded by a *. 	our comments are in parentheses. 
* define your entities please  when you finish  hit 'enter' twice 
bcar  a structure of the available cars  
car 
	km 	 the number of kilometers so far  
	no 	 the number of the car  
 that is a l l   for now  
* please define your operation attribute pairs  
 the exact form of the user-system communication protocol is more detailed than given below  it includes optional prompting and a detailed inquiry 
about which is the aggregate and which is the element in each operation . 
fetch max  bcar  car   to find the available car with the most kilometers . 
delete max  bcar  car   the most used car is no longer available . 
insert  bcar  car   a car has become available . 
delete min  bcar  car   least used is rented . delete any  bcar  car   in case we do not care which car is rented . 
size  bcar   number of available cars . insert index  car  no   to insert the car number into the 'car f i l e '   . 
insert index  car  name   to insert the brand of car . 
* is name a new entity  
yes 
replace index  car  km   to update the car kilometrage . 
replace index  car  date   to update the date of last maintenance . 
* is date a new entity  yes 
 the system analyzes two levels to be chosen 
independently  * choice for  bcar  car  level: 
* the delete-any will be subsumed by the delete-max or the delete-min. 
* an evaluating function must be used in the im-plementation for the operations: delete-max  deletemin  fetch-min. if you use the same evaluating 
function for each operation answer yes. yes 
* from here on  whenever the term 'value' is mention-ed  refer to value calculated by your function . 
* can the elements appear more than once in the structure  no 
* the abstract choice for the  bcar  car  level is max priority queue  min priority queue  counter. 
* do the elements come in random order  not ordered by their value   yes 
* the representation choice is:  the two priority queues are recombined into one structure - 	the 
binary tree  
binary tree cell 
* the nodes of the binary tree will include pointers to the element  car  and will be ordered according to the evaluating function. 
use a pointer to the maximal element in the tree. 
* execution of the operations: 
insert  delete max  delete min - in the binary tree and update the cell. 
fetch max - in the binary tree. 
size - in the cell. 
* choice for  car   name  no  km  date   level: 
* can the elements appear more than once in the structure  
yes 
* the abstract choice for  car   name  no  km  date   is a vector. 
* can the maximal number of different elements in the structure be estimated  
yes 
* are the values of the indices bounded and contiguous  
yes 
* does each index always point to an element having a fixed meaning  
yes 
* the representation choice is a record. 
* all the operations - in the record.  note that if the user needs different 'value functions' for the delete-max and delete-min then their representations cannot be recombined into one representation  and the abstract choice will be 
represented by 1 different representations with all the problems arising from that. 	the counter then 
may be eliminated if one of the priority queues is represented by a 'heap in an array'  since an index to the last element is used in the heap representation  and its value is the needed size.  
example 1. here we consider a single level  with aggregate si and elements s1. the requirement description is shortened for space reasons  and is insert-index  s1 s1   insert and fetch values according to their fixed place in the aggregate . 
fetch-index  s1 s1  delete-min  s1.s1   delete element with smallest value  
	size  si  	 find number of elements in 
si  
     after absorbing the description the system responds. 
* the abstract choice for the  s1 s1  level is vector  min-priority queue  counter. 
* are the values of the indices bounded and contiguous  
no  record or simple array are eliminated for the abstract vector . 

1 
* are successive insertions random  and not by successive index or place numbers  
yes  leads to tentative binary tree ordered by index for abstract vector  
* can a value of an element appear more than once  
no  eliminating multi-valued representations for p r i o r i t y queue . 
* can maximal number of different values be given  
yes  leads to tentative heap in an array making counter extraneous  
* the representation choice is binary tree ordered by index heap in an array with index of last element 
of heap 
* required interconnections are each node of binary tree contains also pointer 
to i t s father and index of that value in the heap in an array 
each node of heap contains also pointer to 
node with that value in the binary tree. 
* execution of the operations insert-index - insert in binary tree by index  
delete old value from heap using index to location  insert in heap by value 
fetch-index - in binary tree by index delete-min - in heap and using pointer to binary tree index to delete there 
size - in largest index value of heap in array. 
 note that a negative answer to the last question would lead to a linked heap to implement the p r i o r i t y queue. in that case we could have formed a plex. each of i t s nodes would contain one copy of the information  the element s1   two pointers to the sons and one to the father according to the heap access paths  and two pointers to the sons and one to the father according to the access paths of the binary tree ordered by index a . 
	1. 	conclusions 
　　　the system has been implemented in apl on an ibm 1. although it is a practical tool which can solve many r e a l i s t i c problems  the present version is nevertheless a prototype. the most natural extensions  of course  would simply involve adding additional abstract structures  operations  a t t r i b u t e s   or new representations to the base of the system without affecting the basic algorithms of the system. 
　　　the user of t h i s advisory system must have a clear idea of his requirements  hopefully obtained at a f a i r l y early stage in a top-down development of his program. the transformation to the notation we have suggested can s t i l l sometimes be d i f f i c u l t   depending on what is known to the system   i . e .   the nature of the base   and further work on the communication medium would be beneficial. 
　　　the strongest claims we can make are of internal completeness between the specification and the base: 
- every structure combination which can be suggested by the system is describable in our specification method  and 
- any specification containing only generic operation a t t r i b u t e combinations permitted in the base  can be realized by the system  i . e .   a combination 
1 
