
subsets of the negation normal form formulas  nnfs  of propositional logic have received much attention in ai and proved as valuable representation languages for boolean functions. in this paper  we present a new framework  called vnnf  for the representation of a much more general class of functions than just boolean ones. this framework supports a larger family of queries and transformations than in the nnf case  including optimization ones. as such  it encompasses a number of existing settings  e.g. nnfs  semiring csps  mixed csps  sldds  add  aadds. we show how the properties imposed on nnfs to define more  tractable  fragments  decomposability  determinism  decision  read-once  can be extended to vnnfs  giving rise to subsets for which a number of queries and transformations can be achieved in polynomial time.
1 introduction
for the past few years  several frameworks specializing the standard propositional one have been developed. such frameworks are centered on fragments which are proper subsets of a full propositional language. among them is the influential dnnf fragment  darwiche  1   and its subsets d-dnnf  fbdd and obdd  which have been successfully applied to a number of ai tasks  including diagnosis  reasoning under uncertainty  and planning. the success of such languages comes from the fact that they support a number of queries and transformations in polynomial time and are quite spatially succinct. the sources of their efficiency have been identified as formal properties on the corresponding structures  e.g. decomposability for dnnf  while d-dnnf asks also for determinism  darwiche and marquis  1 .
¡¡on the other hand  in the recent years  many algebraic frameworks generalizing the standard csp one have been pointed out; among them are vcsp  schiex et al.  1   valuation algebra  shenoy and shafer  1; kohlas and shenoy  1  and semiring csp  bistarelli et al.  1 ; pfu  pralet et al.  1 . in such frameworks  satisfaction is a more gradual notion than in the standard csp one; valuations range over some ordered scale  which can e.g. be interpreted as a utility/uncertainty scale  and can be aggregated using some operators. these frameworks consider a number of queries which extend the ones considered in the standard framework  mainly  the consistency query ; especially  optimization is an important query in such settings.
¡¡at the intersection of those two research lines are a few approaches  where dags are used to represent functions ranging over an ordered scale. let us mention sldd  wilson  1   aadd  sanner and mcallester  1   add  bahar et al.  1   and arithmetic circuits  darwiche  1 .
¡¡this work can be viewed as a further  yet more systematic attempt to bridge the gap between both research streams. we present a general framework  called vnnf  for  valued nnfs    suited for the representation of a much more general class of functions than just boolean ones. this framework supports a larger family of queries and transformations than in the nnf case  including variable elimination  suited to optimization issues and encompasses a number of existing representation settings  e.g. nnf  semiring csp  mixed csp  sldd  add  and aadd. we show how the properties imposed on nnfs to define  tractable  fragments  decomposability  determinism  decision  read-once  can be extended to give rise to subsets of vnnf  for which a number of queries and transformations can be achieved in polynomial time.
1 the vnnf framework
the vnnf framework gathers the family of vnnf languages  and the queries and transformations they support. each vnnf language allows the representation of some functions ranging over an ordered scale; such a language is fully characterized by a representation context consisting of a valuation structure e  a set x of variables and a set f of primitive or  local  functions  the word is taken from  pralet et al.  1  where local functions represent preferences or plausibility degrees over assignments . let us first make precise the notion of valuation structure:
definition 1  valuation structure  a valuation structure is a triple where:
 is a set ordered by a relation   which is thus reflexive  antisymmetric and transitive  and such that e has a greatest element  and a least element ¡Í;
  op  onis a subset ofe such that eachope  the set of all binary operators  is associative  commutative  monotonic   and has a neutral element e .
generally calledtral element ofwhen e is totally ordered by     is usually called a  elements of resp.   is the neuop resp. ae are-
	uninorms. when ¡Í	t-conorm
t-norm  on e. we shall use the same terminology here  neglecting the fact that e is not necessarily totally ordered. for instance  t-conorms on e =  1  include the operations operationsmax a b  min a + ba b  a.b  a.b  min . max anda + b 1 . t-norms include theare also t-conorms on  is a uninorm on e = r¡È{+¡Þ  ¡Þ}.
we assume that op contains the following operators ¡Ä and
¡Åboolean connectives:  which can be viewed as generalizations of the well-known
.
¡¡when  is a total order  min and max are alternative generalizations of the boolean connectives. interestingly  ¡Ä and ¡Å are admissible in any valuation structure  hence our assumption is harmless   while min and max are admissible in any valuation structure with a totally ordered domain:
proposition 1 let e be any valuation structure. ope con-e. tains ¡Ä  resp. ¡Å  which is a t-norm  resp. a t-conorm  onis a total order  ope contains min  resp.
furthermore  if  max  which is a t-norm  resp. a t-conorm  on e.
¡¡the last two elements of a representation context are much simpler notions:
  xon finite domains.= {x1 ... xn}domis a finite set of variables ranging x  denotes the domain of vari-
domable¦°x¡Êy xydom ¡Ê. if xxy .andand callwhenz are disjoint subsets ofyy -assignments the elements  x  we note dom y   =y ¡Ê
is the y ¡Èz-assignment obtained by ordering the values given in the two tuples in an increasing way w.r.t. the indexes of the associated variables.
  scopeffunctions  . whenis a set of functions f  = y is called thef is a function fromf ranging overscope of f. constant func-ye   the  localx to e 
tions are identified with elements of e without loss of generality. we assume that f contains all functions f such that card scope f   ¡Ü 1  i.e. f contains all  liter-e. als   cf. section 1  and constants from
let f ¡Ê f such thatz-assignment. we consider thatscope f  = y . let z s.t. y is equal  z be any
to where y is the y -assignment which coincides with z for every variable from y .
¡¡now  letbe any notations:z-assignment s.t. z   scope f . we shall use the following  denotes the restriction  or conditioning  of
i.e. the function given by and for any-assignment.
clearly enough  the conditioning ofis any subset of x  and not necessarily of scope f   can also be defined  and considered equal to where y is the z¡Éscope f -assignment which coincides with z for every variable from z ¡É scope f .
-combination of  i.e. the function given by
-assignment.
  f x    is the  x   -projection of f  or  -elimination of variable x   i.e. the function given by
	scope f    {x}	-assignment t 
.
we shall typically consider tractable representation contexts:
definition 1  tractable representation context  a representation context  is tractable iff each element of f ¡È op is in linear time 1 and this is also the case for the characteristic function of .
¡¡if a function f is in linear time  then every conditioning of f and every  -combination of f with another linear time function are in linear time as well  provided that   is in linear time. and any . we are now ready to define in a formal way the family of vnnf languages:
definition 1  vnnf  given	a	representation	context  where   vnnf is the set of all finite  rooted directed acyclic graphs  dags  where each internal node is labeled by the name of an operator of op and can have many arbitrarily children and where each leaf node is labeled by the name of an element of f and by a z-assignment where z   x.
¡¡it is important to observe that such dags are not concerned by the representation of local functions  or operators : they are just given by their names  and can be represented as data structures or algorithms  but outside the dag.
¡¡each leaf node n of a vnnf ¦Õ labeled by representsgrounds some of the variables of scope f . let vars n  = scope f    z denote the set of free variables of the function associated to n. for any internal node m  let op m  denote the label of m  and children m  the set of its children. the set of free variables occurring in the
 vnnf ¦Õ rooted at node m is thus vars ¦Õ  = vars m  =  is said to be grounded when
vars ¦Õ  =  .
definition 1  semantics of a vnnf  let ¦Õ be a vnnf w.r.t. semantics val ¦Õ  of ¦Õ is the function from
scope val ¦Õ   = vars ¦Õ  to e recursively defined by:
  if ¦Õ is a leaf node labeled by f ¡Ê f and a z-assignment
;
  otherwise	  
	...	n .
¡¡a vnnf is thus simply the structured representation of a function  val ¦Õ   that does not necessarily belong to the set of primitives f. importantly if is tractable  then val ¦Õ  is a polytime function.
¡¡obviously  a given function over a valuation structure can be represented by many distinct but equivalent vnnfs. since vnnfs are defined as dags  subformulas that would have several occurrences in tree-like representations do not need to be duplicated. but they can. it is always possible to simplify a vnnf by merging identical subgraphs. this reduction does not change the semantics and can be achieved by an algorithm similar to the one used for obdds. however  it does not lead to a canonical form in the general case  i.e.  we do not necessarily have val ¦Õ  = val ¦×  only if the reduced form of ¦Õ coincides with the reducd form of ¦× .
¡¡let us now  quantify  vnnfs. in classical logic  two quantifiers are used:   and  . in the vnnf framework  every operator of op can be used as a quantifier:
definition 1  q-vnnf  a  prenex  quantified vnnf  qvnnf  is a sentence of the form ¦µ =  1xi1 ...  j xij¦Õ where ¦Õ is a vnnf  each variable xij belongs to x 1 and each  i belongs to op  i ¡Ê 1...j .  1xi1 ...  j xij is called the prefix of ¦µ and ¦Õ its matrix.
the semantics of ¦µ  denoted val ¦µ  is the function from scope val ¦µ   = vars ¦Õ    {xi1 ... xij} to e recursively defined as follows:
  if the prefix of ¦µ is empty  then val ¦µ  = val ¦Õ .
 and
¡¡clearly enough  quantified vnnfs are convenient for representing at the syntactic level projections of functions. when xi1 ... xij are pairwise distinct  ¦µ is said to be polite. when vars ¦Õ    {xi1 ... xij}  the q-vnnf ¦µ is said to be closed. its semantics is an element of e. computing it is what is called the evaluation of a  closed  q-vnnf.
1 generality of the vnnf framework
let us now show how the vnnf framework encompasses various representation settings pointed out so far.
negation normal forms  nnfs  the propositional language nnf  negation normal form formulas  is a wellknown fragment for representing boolean functions. for recovering it as a vnnf language  it is enough to set e = is such that for each x ¡Ê x  f is the set of all boolean functions of arity at most 1  such functions can be represented by literals and boolean constants   op = {min max}  min nodes correspond to conjunctions of formulas and max nodes to disjunctions . then  is simply the truth value taken by the boolean function which is the semantics of ¦Õ when applied to x. quantified boolean formulas in negation normal form are also easily recovered as q-vnnfs: minx  resp. maxx  stands for the universal  resp. existential quantification  on variable x.
csps recovering the standard csp framework is also easy  considering the same valuation structure as for the nnf framework. no restriction is put on x  it can be any set of discrete variables   but for getting a csp as a vnnf language we must add some restrictions on vnnf formulas. first of all  the root node has to be a min node. in general csps  each child of the root is a local function f : scope f  ¡ú {1}. in table-defined csps  each child of the root is a max node  whose children are themselves min nodes connecting functions of the form x == a  that take value 1 if satisfied and value 1 otherwise. quantified csps can also be viewed as specific q-vnnfs  where minx  resp. maxx  stands for the universal  resp. existential quantification  on variable x.
semiring csps and valuation algebras e is equipped with two operators: is defined by iff a ¡Å b = a. it is moreover assumed that a commutative semiring and ¡Å is idempotent. in a semiring csp viewed as a vnnf  the root node of the dag is a   node and each of its children is a local function. interestingly  the definition of quantified semiring csps follows from our framework. in particular  if  is complete  then computing the best value of a semiring csp ¦Õ is equivalent to compute maxx¦Õ  note that min can also be added to op and used as a quantifier . valuation algebras  shenoy and shafer  1; kohlas and shenoy  1  can be more general than vnnf since valuations can bear on subsets of assignment  e.g. for representing commonality functions. when restricted to the distributional case they can be recovered in way similar to the one used for semiring csps.
other frameworks for decision making under uncertainty the vnnf framework subsumes many of the constraintbased frameworks for decision making under uncertainty  e.g. mixed csps  they can be represented by disjunctions of a conjunction of constraints ci  i ¡Ê 1...n representing what is satisfying and  with a disjunction of constraints ki  i ¡Ê 1...m representing the knowledge about the state variables  and possibilistic mixed csps  each such csp can be represented by a vnnf whose root is labeled by max and has two children: a min-rooted vnnf and a max-rooted one . stochastic or more generally expected utility csp networks can be represented as well by products between a vnnf ¦Õp representing the probability density over the state variables  e.g. a bayesian net  and a semiring csp ¦Õu over e =  1  synthesizing the utility function. denoting x the set of decision variables and y the set of state variables  maximizing expected utility amounts to compute .
in the qualitative cases  mixed and possibilistic  a standard quantifying sequence is rather maxx miny . pfu generic networks  pralet et al.  1   are not stricto sensu subsumed by the vnnf framework  since they may involve a noncommutative combination of utility degrees and plausibility degrees. nevertheless  non-commutativity is not a compulsory condition and most of the practical instances of pfu consider a commutative aggregator. arithmetic circuits  as considered in  darwiche  1   for the factored representation of belief networks can also be recovered as vnnfs.
¡¡finally  we shall see in section 1 that vnnfs also encompass decision diagrams like aadds  and thus adds  and sldds.
1 queries and transformations
the vnnf framework includes a number of algorithms for answering queries about functions represented as vnnfs  and related functions which can be characterized via the application of transformations on functions represented by vnnfs. a fundamental difference between the nnf setting and the vnnf one is that in the vnnf framework  the underlying valuation structure does not necessarily reduce to the boolean one. especially  since e may contain more than two elements  the equivalences iff a = ¡Í do not hold anymore. in the nnf framework  the key queries include consistency  co   validity  va   and model counting  ct   while the key transformations are conditioning  cd   conjunction  ¡Äc   disjunction  ¡Åc  and forgetting  fo . let us explain how to state related queries and transformations in the vnnf framework  and point out some additional ones which make sense in this more general setting.
full consistency/validity if we consider  as the norm  we get very strong notions of consistency/validity: ¦Õ is fully consistent iff there exists is fully valid iff for each.
partial consistency/validity on the contrary  one may consider every value of e except ¡Í as the norm  and this leads to the following notions of partial consistency and partial validity: ¦Õ is partially consistent iff there exists
¡Í and ¦Õ is partially valid iff for each.
optimal satisfaction more interesting in practice is the notion of optimal satisfaction  that looks for best assignments; this query is typically useful when vnnfs encode preferences or plausibility degrees and calls for optimization: given a vnnf ¦Õ  find such thatand such that there is no y such that. we thus search for a non-dominated solution. when  is a total order  this is equivalent to classical maximization. the associated decision problem  deciding whether a value is optimal  consists in determining whether  given a ¡Ê e and a vnnf ¦Õ  a is the value taken by ¦Õ for some non-dominated solution.
counting extends easily from nnf to vnnf: given a ¡Ê e and a vnnf ¦Õ  how many x are such that 
evaluation of a quantified form the extended notion of quantification naturally leads to the problem of evaluating a  closed and polite  q-vnnf. as a decision problem  this can be written as determining whether. this query is of great importance in many settings: in the nnf one  this query generalizes the famous pspace-complete problem called qbf. quantification also makes sense when
. when  is a total order  evaluating a q-vnnf is a way to achieve optimization  find the best value of ¦Õ amounts to evaluating maxx¦Õ . the relationship between optimization and quantified forms is less obvious when partial orders are considered  the identification of an operator encoding non-domination is not an easy problem and may have no solution; for instance  computing a non-dominated value for a semiring csp represented by a vnnf ¦Õ is not equivalent to evaluate the quantified one ¡Åx¦Õ .
¡¡we have obtained the following complexity results for vnnf assuming that the underlying representation context is tractable  which is a reasonable assumption that we make from now on up to the end of the paper :
proposition 1
  partial and full consistency are np-complete.
  partial and full validity are conp-complete.
  optimization is np-hard
  optimal value is dp-complete.
  counting is #p-hard.
  evaluation of a closed q-vnnf is pspace-complete.
¡¡observe that  though vnnf is a much more general framework than the nnf one  the generalization does not lead to a complexity shift w.r.t. the basic queries under consideration in  darwiche and marquis  1 . note that we could also define notions of full entailment and full equivalence and show the corresponding decision problems conp-complete.
¡¡let us now focus on transformations. three transformations are mainly to be considered; conditioning  compute a vnnf representing -combination  compute a vnnf representing val ¦Õ1  val ¦Õ1   and  -variable elimination  compute a vnnf representing  y¦Õ   or more generally val  y ¦Õ  . val ¦Õ  y    =
val
¡¡the case of  -combination is obvious since ¦Õ1   ¦Õ1 is a vnnf and represents val ¦Õ1    val ¦Õ1 . if the representation context is tractable  then each  -combination is in linear time. if ¦Õ is a vnnf  then a vnnf representing can also be obtained in linear time in the size of ¦Õ. it is enough to revise the assignment associated to ¦Õ:
definition 1  conditioning a vnnf  given a vnnf ¦Õ  we denote ¦Õz the vnnf obtained by replacing in the label of each leaf  the y -assignment-assignment which coincides with y on each variable from y and with z on each variable from z   y .
¡¡it can be easily checked that ¦Õz represents the restriction of  i.e. that. that is why we the conditioning of
¡¡ -variable elimination generalizes the transformation known as forgetting in the nnf case. in contrast to the previous transformations  it can be very expensive: at each elimination step  the size of the current vnnf ¦Õ may increase in a non-constant way  the size of  can be
|dom x | larger than the size of ¦Õ . thus  applying the definition directly would lead to an exponentially larger vnnf  unless a bounded number of variables has to be eliminated.
1 determinism  decomposability  decision and read-once
the previous sections have shown the vnnf framework quite general. however  every query under consideration  if it is no more difficult than in the boolean case  is intractable under the standard assumptions of complexity theory. an important issue is thus to define restrictions on the vnnf languages allowing efficient queries and transformations.
¡¡in the nnf framework  a few properties  namely decomposability  determinism  decision and read-once are sufficient to achieve many of them in polynomial time. we shall see that a third one is valuable in the vnnf framework  namely distributivity. the key point is that it enables efficient  -variable elimination  which is an important transformation for several issues  including the optimization one.
1 distributivity and decomposability
the space explosion inherent to a direct application of  variable elimination in the general case does not necessarily occur; especially  it can be limited when some of the children of ¦Õ do not depend on the variable x to be eliminated. may depend on the variable to be forgotten. actually  in ad-thus  in the dnnf case  at most one child of each ¡Ä node dition to independence  a further property is implicitly used in the nnf framework for ensuring polytime forgetting  and it has to be made explicit in order to be extended to vnnf: the distributivity of ¡Ä over ¡Å. the impact of distributivity on variable elimination in valuation algebras is known for a while  see e.g.  shenoy and shafer  1   and requiring it is not so demanding in many representation contexts.
definition 1  distributivity iff for any -distributivity labelling an internal node in  a	vnnf	¦Õ	ensures	 ¦Õ- 
.
proposition 1
  distributivity forany vnnf w.r.t. any representation context ensures  = ¡Å and for   = ¡Ä.	 -
  any vnnf w.r.t. any representation context wherea total order ensuresfor   = min.	 -distributivity for   = maxandis
¡¡we are now ready to define the fragment of  decomposable vnnfs:
definition 1   -decomposability  let ¦Õ be a vnnf:
  a noden  n	n childrenof ¦Õ is simply decomposable n  vars n   ¡É varsiff for each n   =  
  a nodeposable andn of op¦Õ is n  -decomposableis distributive overiff it is simply decom- .
  ¦Õisclass of all the is- decomposable when-decomposable -decomposable vnnfs.iff each of its  internal  nodes-dvnnf is then
as to  -decomposability  the main result is:
proposition 1  -dvnnf is linearly closed for  -variable elimination  i.e.  there exists a linear time algorithm for computing a  x-dvnnf equivalent to.  y ¦Õ when ¦Õ ¡Ê  -dvnnf and y  
¡¡this generalizes the result of tractability of dnnf for the forgetting operation. it moreover implies that the optimization of any vnnf the nodes of which are either max nodes or decomposable nodes is tractable.
proposition 1 the restrictions of full consistency  partial consistency and optimisation on max-dvnnf are in p.
1 determinism
a second important property in the nnf framework is determinism. more than a property of logical exclusion  it is linked to the existence of a neutral element for  :
definition 1  determinism  an internal node n in a vnnf ¦Õ is deterministic   there is at most one m ¡Ê children n  such that  where ¦× is the vnnf rooted at m.
definition 1  d-dvnnf  d-dvnnf is the class of all vnnfs in which each internal node is either simply decomposable or deterministic.
as to d-dvnnf  the main result is:
proposition 1 the restrictions of full validity and partial validity on d-dvnnf are in p. if ¦Õ is a d-dvnnf  then counting can be achieved in time o |e| + |¦Õ| .
1 decision diagrams
let us now focus on other properties that prove useful for defining another interesting fragment of vnnf: the set of all decision diagrams. we first need a number of definitions:
definition 1  literals  a literal on x ¡Ê x is a function f whose scope is {x}. lx is the set of all the literals that can be built on variables from x.
¡¡by extension  we shall also call literals the leaves labeled by literals.
definition 1  assignment nodes  an assignment node n on x ¡Ê x in a vnnf ¦Õ is a node of the form l ¦Á  where l is a literal on x and   is a t-norm on e. two assignment nodes n1 and n1 on x ¡Ê x are exclusive iff their respective literals f1 and f1 are exclusive  i.e.  dom x   either.
¡¡in any assignment node n of the form l   ¦Á where l is a literal on x one may assume without loss of generality that ¦Á is not a literal  a literal f can always be replaced by the assignment node . then dvar n  can denote the variable x and tail n  the formula ¦Á in a non-ambiguous way.
definition 1  decision nodes  a decision node n on x in a
vnnf ¦Õ is a node of the form where all the
ni are assignment nodes on the same variableis a t-conorm on e. n is exclusive iff its assignment nodes are pairwise exclusive.
definition 1  linear node  a node n is linear iff at most one of its children is not grounded.
¡¡note that leaves are linear nodes. we are now ready to define the language of decision diagrams:
definition 1  decision diagrams  a decision diagram is a vnnf in which each internal node is either an exclusive decision node or a linear node.
¡¡two particular subclasses of decision diagrams are worthwhile noticing  the read-once ones and the ordered ones:
definition 1  read-once and ordered decision diagrams 
  a decision diagram ¦Õ is read-once iff for any assignment node n in ¦Õ  dvar n  does not occur in tail n .
  a decision diagram ¦Õ is ordered w.r.t. a strict order   on x iff for every pair of decision nodes m and n in ¦Õ  if m is an ancestor of n in ¦Õ  then dvar m    dvar n .
¡¡the second property obviously implies the first one. interestingly  aadds and sldds are specific decision diagrams:
aadd	for recovering algebraic decision diagrams  let us
 
x ¡Ê
x =
max min fh ch + bh.nh  min fl cl + bl.nl    where:
  fh  resp. fl  is the literal on x that valuates to  ¡Þ for x = 1  resp. x = 1  and to +¡Þ for x = 1  resp. x = 1 ;
  ch bh cl bl are constants of e;
  nh and nl are either decision nodes or constant nodes.
the root of an aadd is a linear formula c+b.nk. the reader can check that min fh ch +bh.nh  and min fl cl +bl.nl  are exclusive assignment nodes whose tails are linear ones.
sldd a sldd is an ordered decision diagram built on some set e ordered by some  and equipped with two operators ¨ and    where   is a t-norm and ¨ is a t-conorm. it is moreover required that   distributes over is a commutative semiring. for recovering sldd  it is sufficient to set f to the subset of literals of lx ranging over
.
¡¡and to consider ordered decision diagrams whose decision nodes are of the form n = ¡Å ¡Ä l1 c1  n1  ... ¡Ä lk ck  
nk    where the ci are constants of e.
¡¡sldds and aadds are obviously read-once. this is important enough  since one can prove that the read-once property on decision diagrams ensure that they are not only decomposable but also deterministic:
proposition 1 read-once decision diagrams are d-dvnnfs. as a consequence of propositions 1  1 and 1  we get:
proposition 1 the restrictions of full and partial consistency  optimization  full and partial validity on read-once  and thus on ordered  decision diagrams are in p. counting can be achieved in time o |e| + |¦Õ| .
¡¡now  it can be shown that the  -elimination of a variable x can be performed in an efficient way on a decision diagram ¦Õ for which distributivity w.r.t.   is ensured  provided that x is final in ¦Õ  i.e.  for any assignment node n on x in ¦Õ  tail n  is grounded .
definition 1  distributive q-vnnf  a q-vnnf is said to be distributive iff each operator of its matrix distributes over each operator of its prefix.
¡¡for instance  when e is totally ordered  any quantified decision diagram  e.g. a quantified aadd or a quantified add  is distributive for a prefix composed of existential  max  and universal  min  quantifiers.
proposition 1 let   be the total ordering on x defined by the prefix of a  closed and polite  q-vnnf ¦µ  i.e. xi1   ...   xij iff ¦µ =  1xi1 ...  jxij¦Õ. the evaluation problem for a distributive  closed and polite q-vnnf the matrix of which is a decision diagram ordered by   is in p.
1 conclusion
in this paper  we have presented a new framework  vnnf  which encompasses many representation settings pointed out so far. we have shown how some properties imposed on nnfs to define more  tractable  fragments  namely  decomposability  determinism  decision  read-once  can be extended to vnnfs.
¡¡this work calls for a number of perspectives. the more immediate ones are of algorithmic nature: we need algorithms for compiling vnnfs into  -dvnnfs  d-dvnnfs  or  ordered  decision diagrams. from a more theoretical  but not less important  point of view  a number of issues need to be addressed as well  including the succinctness one  how do the vnnf fragments w.r.t. a given representation context relate w.r.t. spatial efficiency   and the canonicity one  under which requirements can we guarantee that two vnnfs represent the same function iff they are identical  .
