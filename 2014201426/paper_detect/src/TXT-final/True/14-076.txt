 
   aips is a system for graphically presenting information. it promotes a high degree of interactivity between a user and a knowledge base or knowlege-based system  and is designed to be utmost domain independent and extensible. this paper describes the concept of an information presentation system  ips   the intimate relationship between ips goals and knowledge representation issues  and some of the architecture 
of aips. 
	i 	information presentation 
　　interactive graphics is an indispensible technique for putting people in touch with a large knowledge base or knowledge-based system. graphic output is the best way to communicate a substantial amount of information to a human user because it exploits the high-bandwidth human visual channel. 
   graphic input  i.e. user input which points at or otherwise indicates components of a graphic display  is an extremely economical way to describe something; it is much easier to designate an existing depiction than to generate some other descriptor. the descriptional economy of graphic input promotes a feeling of immediacy; the user has the sense of interacting directly with information rather than dealinq with an intermediary. 
   for these reasons  interactive graphics can play an important role in larqe knowledge-based systems  whether at the interface to the end user or at the interface to the implementor or maintainer. that role is not diminished by progress in natural 
* this research has been supported by the defense 
advanced research projects aqency under contract no. n1-c-1  arpa order no. 1  and monitored by the naval electronics systems command  program code 1 . 
　the views and conclusions contained in this paper are those of the authors and should not he interpreted as necessarily representing the 
o f f i c i a l policies  either expressed or implied  of the defense advanced research projects agency or the u. s. government. 
language or even speech understanding. graphics and natural language do not compete in terms of functionality; rather  they complement each other. 
   a problem which limits the use of interactive graphics is the expense of implementing such interfaces. the composition of a graphic display involves a vast number of decisions ranging over issues of format  content  layout and style. anyone who has prepared diagrams for a publication or a talk  even with the help of a skilled draftsman  understands something of the effort that goes into good graphic presentation. 
   the tools   graphics languages   commonly used for building interactive graphics address this problem only at its lowest level: displays must be described in terms of primitive elements such as points  lines and regions. in effect  interactive graphics is costly because the implementor is forced to assume the draftsman's drudgery. additionally  the resulting interface is usually heavily involved with representational details of the system for which it is intended. chanqes made to the system or its underlying representations tend to propagate directly into the graphic interface. 
   an information presentation system  ips  is a more powerful tool for interactive graphics. by an ips  we mean a system that: 
1. automatically qenerates displays according to  primarily  content-oriented specifications 
1. provides a systematic basis for interpretation of user qraphic input 
1. functions reasonably well without demanding custom-tooling to a particular application 
1. is easily extensible to satisfy domain and user-specific display requirements. 
   this abstraction of the display generation function into a broadly applicable tool can confer 
many side-benefits because the ips can be enhanced and elaborated in ways that would be impractical or uneconomical in a single use interface. the interface by which the end-user controls the 
1 display function can be built up  even to the point of allowing natural language specification of displays . a large repertoire of display formats can be accumulated. a high degree of sensitivity to the human end-user can be built in. not least important  an ips is a place to embody a consistent set of decisions about the human factors of graphic display. 
   perhaps the best early  yet embryonic  exemplars of information presentation occurred in the smalltalk programming environment  and some of the work based on it  such as thinglab  and the smalltalk browser  . with the exception of some network-map displays generated by thinglab  these displays were limited to tabular formats. nevertheless  they represented a definite step toward information presentation as we have defined it here. smalltalk's class hierarchy and method inheritance mechanism made it possible not only to 
define and apply very general presentation methods  but also to modify or extend these methods to deal with class definitions further down in the hierarchy. 
	other 	current 	work 	on 	the 	information 
presentation paradigm includes the view system  under development at oca. this effort is an attempt to produce an ips which responds to queries by automatically generating sdms  displays. tt has also been reported in the literature  that the dbms component of the cedar programming environment for mesa  will include an ips as the basis for an application-independent user interface. 
   our work differs from these efforts in two respects. first  we are committed to generating  and interpreting user input over  a wide variety of graphic display formats  including not only tabular displays but also maps  graphs  and diagrams. second  we view information presentation as fundamentally implying an extremely rich characterization of the structure of displays and their semantic content. 
　　in the remainder of this paper we will f i r s t discuss the premises of our approach to information presentation  and then give a more detailed description of our current prototype system. 
a. 	foundations for information presentation 
   the premise of information presentation as a domain-independent activity is that it is possible to make reasonable decisions about display structure based on limited knowledge about display content. for example  it is possible to draw a map of a college campus without knowing very much about what buildings are or what they are used for. one can get along with only the limited knowledge that buildings are discrete physical objects  occupy fixed regions in a two-dimensional space  have names  etc. moreover  the methods used to produce such a map would presumably suffice for any other set of discrete physical objects having those sorts of attributes. if this were not the case  a domain-independent display generation capability would be impossible. 
　　it is also possible to make discriminating choices among alternative display formats on just such limited knowledge . a map is a good choice for showing the locations of physical objects; pie charts are good for depicting exhaustive partitions on enumerable sets  and so forth. 
   however  to apply the limited  common sense  knowledge relied on by the ips to some particular knowledge base  there must be a mechanism for supporting the necessary generalizations. to continue the above example  there must be some way to bridge the gap between  building  and  physical object . our approach assumes that the external knowledge base will provide this in the form of a 
generalization hierarchy which  at its least specific levels  matches or relates to the distinctions utilized by the ips. in other words  the subject knowledge base must include a covering 
lattice of  is-a  links  some portion of which is also recognized by the ips. 
   fortunately  most current knowledge representation languages rely on this sort of 
hierarchy for organizing knowledge. those languages which allow multiple super-categorization further simplify the problem of connecting the ips and the knowledge-base. they make possible an approach of generating simplified descriptions of the subject domain for the specific purpose of driving the ips  eliminating the requirement that the knowledge base incorporate exactly the distinctions utilized for information presentation. 
	the 	advanced 	information 	presentation 	system 
  aips   1  1  which this paper describes assumes a knowledge base expressed in kl-one  1  1 . among current knowledge representation languages  
kl-one affords a particularly good basis for information presentation because it provides a richer-than-usual generalization structure; one which extends to the parts or attributes of descriptive entities as well as to the entities themselves. this explicit attribute inheritance mechanism avoids the problem of  slot  naming confusions common to most network formalisms. from the standpoint of the ips  the extra structure 
enables more informed decisions about how to depict parts or attributes of a description. without i t   the ips would be either dependent on attribute names for making these decisions  or would have to deal strictly in terms of whole entities  without regard to the functional roles they play as constituents of other entities. 
   the foregoing discussion has focused on what a domain-independent ips requires in terms of the general structure of the subject knowledge base. if these requirements are satisfied  there remains the problem of how to make the ips easily extensible to handle domain-specific display requirements. for example  the client who supports development of aips desires certain map and table formats that have an established currency in the domain of naval command and control. similarly  a knowledge-based system for assisting the design of lsi circuits may require special display formats which are roughly  maps   but which conform to the particular conventions and requirements of that domain. 
   also  the end user of a domain-tailored ips may have his or her own unique requirements for the format of a display. often  these can be expressed 
1 

as slight variations on some display format already supported by the ips. for example  a naval tactician might want an otherwise standard format situation map in which ships with a certain capability are given a distinct depiction. in other cases  individuals may need to create their own formats starting more nearly  from scratch . for example  the implementor of a knowledge-based system may want a special display format that helps track down some specific class of bug. 
　　in sum  an ips must comprise an open-ended and extensible model of the display generation process. moreover  the structure of this model must be such that additions to it can make the maximum possible use of behavior that has already been captured. accordingly  aips' most prominent architectural feature is a taxonomic hierarchy of display format descriptions. inheritance of attributes and attached procedures down the structure of this hierarchy allows new display formats to be described to the greatest possible extent in terms of those already represented. 
　　it is possible to pursue this kind of approach using a lisp enhanced with an object class hierarchy package  such as flavors   or an object-oriented programming language such as .smalltalk. however  that would not address a remaining important issue affecting the 
extensibility and f l e x i b i l i t y of an ips: the extent to which its behavior is expressed as an interpretive process written in some programming language. particularly for non-programming users  control and modification of the ips ultimately depend on the degree to which display generation behavior can be declarative!y described. unless the interpretive process of the ips model is very general  changes or additions to the model will often require changes or additions to the interpreter. 
   because we are committed to developing an ips which offers maximum f l e x i b i l i t y and control to the non-programming end user  our view of an ips is that it is itself a knowledge-based system. accordingly  we have iinplemented aips as a kl-one taxonomic hierarchy of display structure descriptions. the interpreter for this knowledge base is written in lisp  and the bulk of it is distributed over the hierarchy in the form of inheritable attached procedures. our current research efforts are aimed primarily at the problems of reducing the lisp component of the system. our ultimate goal is an ips that can respond to the range of initiatives which might be expressed in a dialog with a human draftsman. 
b. 	presentation system architecture 
   the following provides some details about the internal architecture of aips in order to lend concreteness to the above discussion. the system's description structure of displays and their formats  its characterization of the information content of a display  and its use of procedural knowledge are described. the discussion makes heavy use of kl-one terminology  and readers unfamiliar with kl-one will find  useful in learning more. 
   for the sake of clarity  we will adhere to the following typographical conventions. the names of kl-one generic concepts are printed entirely in bold capitals. the names of individual concepts are simply capitalized  where the name is a compound word  sub-words will also be capitalized . the names of roles  properties of concepts  are capitalized and underscored. thus  display refers to the description of a category  display refers to an individual of that category  and display refers to something seen on the screen of a graphics terminal. 
1. display description structure 
   as shown in figure 1  various display formats are represented as sub-categories of display  which is the principal top-level concept of the information presentation model. there are two important themes in each such description: a characterization of the information involved in the display  and a characterization of its visible components. these are represented respectively by the application and realization roles of display. 
   the realization role is differentiated  split into multiple sub-roles  and modified at the various descendants of display. for example  map's visible components: border  label  legend  item  etc. are all represented as different iatinq sub-roles of display's realization role  see figure 
1 . 
   notice that the valuerestriction of realization is the concept displayitem  which is a superconcept of dispiay. dispiayitem provides a characterization of a piece of a display in purely graphic terms. attribute roles of displayitem relate such thinqs as the location  orientation  scale  width and height of a display element. because dispiaytem is a super-concept of display  the eventual f i l l e r s of  sub-roles of  the realization role in any display may be either simply treated syntactically  as displaylterns  or may in fact be displays in their own right  carrying an explicit treatment of the information they depict. also  any display inherits all of the syntactic attributes of displayitem  and thus can be described in terms of attributes such as location  width  heiqht  etc. the advantage of treating the structural components of a display as displays  and thus making an explicit treatment of their semantic content  is that this can provide a basis for the interpretation of graphic input. 
   the application role of display indicates the information being expressed in a given display  thouqh not necessarily all of the information involved. rather  this role is a kind of binding mechanism that characterizes a display's application to or depiction of specific information  as opposed to the inherent use of information that might be made in the display's generic definition  e.g. a sub-category of map which always labels items with their names  regardless of whether or not that attribute is 
mentioned at the application.  
   of course  a sub-category of display may add additional roles that are sub-roles of neither 



descriptions in the subject knowledge base with some subset of their roles. thus  template has two roles: gonceptgroup and rolegroup. the f i l l e r s of conceptgroup indicate the domain model objects of concern in a display; the f i l l e r s of rolegroup indicate which attributes of those objects are involved. if the semantic content of a display does not factor into a single such cross product  several templates may be used to capture the disjuncts. 
   a template gets its necessary descriptive  grip  on concepts and roles in the domain knowledge base through use of kl-one's meta-description feature. the roles to be included in a template are themselves treated as objects to be described. individuals of the meta-concept role are used to describe them. these individuals become the f i l l e r s of the rolegroup of the template. meta-description is used in a similar way to indicate the concepts involved in a template via the meta-concept concept. see figure 1 for an example of a template used to meta-indicate the names and locations of two ships. 
   templates are also useful as meta-descriptions of display formats. for example  a template can be used to indicate the kind of information that is well depicted in a particular format. 
1. procedural knowledge in the presentation system 
   the process of creating a display begins by creating a  blank  individual  i.e. none of its roles are yet filled  of some sub-category of 
display and f i l l i n g its application with the template or templates specified by the user. if the user does not specify the desired format  aips compares the template with meta-descriptions on the formats it knows about and selects a suitable category. from this point  display construction proceeds in three phases: derivation  location  and drawing. each phase is supported by its own set of procedural attachments to the knowledge base. 
   during the derivation phase  the description of the display is expanded at least to the extent that a l l sub-roles of realization are f i l l e d with some displayltem; each of these descriptions is then 

recursively expanded in the same manner. for example  for the case shown in figure 1  the legend role of the map being constructed is f i l l e d with an individual of table whose application role f i l l e r indicates the set of symbols used in the map. the derivation process then recurses on this table to f i l l out its internal structure. 
   the derivation phase procedures are attached as tags to the roles for which they produce f i l l e r s . these tags specify what information must already be known in order to run a procedure  so that a demand to f i l l a role may f i r s t result in the f i l l i n g of other roles on which its derivation depends. also  the body of an attached derivation procedure can dynamically call for the derivation of some other role and suspend processing until the information is provided. derivation procedures are inherited and more than one derivation procedure may be attached. at role f i l l e r derivation time  a l l of the available procedures are tried in order from the more specific to the more general until one succeeds. 
   the second or location phase proceeds by means of messages passed among the constituent objects of the display  which were identified and constructed 
in the preceding derivation phase. displaylterns receive tolocate messages which t e l l them where they are located relative to the coordinate system 
of the display's viewing surface  which entities by now have also both been completely described  . 	if the recipient displayl tern contains separately described components  the attached tolocate procedure computes the locations of these constituents and recurses the location process by dispatching further tolocate messages. 
   the final or drawing phase is handled in a similar manner. displayl terns receiving todraw messages execute todraw procedures which ultimately call the drawing routines of a graphics package. displaylterns with separately described components send further todraw messages. 
c. 	conclusions 
the version of aips described here runs on a 
decsystem-1 under the interlisp-1 interpreter  using a bitmap graphics terminal of bbn's design. the bmg graphics language  used in this work was developed and implemented as part of the aips effort  which also made substantial contributions to the current implementation of kl-cne. 
   aips was conceived as a display management tool suitable for work environments supported by fast personal machines with large virtual memories  such as the mit cadr   xerox parc's dorado   or the jericho symbolic processor developed here at bbbn  1  1 . the current aips is a carefully delimited prototype which barely f i t s into interlisp-1's available storage. we are presently moving aips  and the interlisp environment which 

supports 	i t   	onto jericho. 	when 	that 	has 	been 
accomplished  we w i l l be 	in a p o s i t i o n to further elaborate 	the 	structure 	of 	aips' 	display d e s c r i p t i o n s . 
　　many of the benefits of information presentation are available through less powerful and more widely available tools than kl-one and lisp  a l b e i t at the cost of some g e n e r a l i t y . the broadest importance of our work is that it demonstrates one method of r a i s i n g the l e v e l of i n t e r a c t i o n between a knowledge base and i t s graphic display f u n c t i o n . we are not alone in t h i s p u r s u i t . what distinguishes aips is i t s d i r e c t assault on the 
inherent knowledge representation issues. 
