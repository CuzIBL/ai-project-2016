
max-csps are constraint optimization problems that are commonly solved using a branch and bound algorithm. the b&b algorithm was enhanced by consistency maintenance procedures  wallace and freuder  1; larrosa and meseguer  1; larrosa et al.  1; larrosa and schiex  1; 1 . all these algorithms traverse the search space in a chronological order and gain their efficiency from the quality of the consistency maintenance procedure.
the present study introduces conflict-directed backjumping  cbj  for branch and bound algorithms. the proposed algorithm maintains conflict sets which include only assignments whose replacement can lead to a better solution. the algorithm backtracks according to these sets. cbj can be added to all classes of the branch and bound algorithm  in particular to versions of branch & bound that use advanced maintenance procedures of local consistency levels  nc   ac  and fdac  larrosa and schiex  1; 1 . the experimental evaluation of b&b cbj on random max-csps shows that the performance of all algorithms is improved both in the number of assignments and in the time for completion.
1 introduction
in standard csps  when the algorithm detects that a solution to a given problem does not exist  the algorithm reports it and the search is terminated. in many cases  although a solution does not exist we wish to produce the best complete assignment  i.e. the assignment to the problem which includes the smallest number of conflicts. such problems form the scope of max-csps  larrosa and meseguer  1 . max-csps are a special case of the more general weighted csps  wcsps   larrosa and schiex  1  in which each constraint is assigned a weight which defines its cost if it is violated by a solution. the cost of a solution is the sum of the weights of all constraints violated by the solution  in max-csps all weights are equal to 1 . the requirement in solving wcsps is to find the minimal cost  optimal  solution. wcsps and max-csps are therefore termed constraint optimization problems.
모in this paper we focus for simplicity on max-csps. maxcsp is an optimization problem with a search tree of bounded depth. like other such optimization problems  the common choice for solving it is to use a branch and bound algorithm  dechter  1 . in the last decade  various algorithms were developed for max and weighted csps  wallace and freuder  1; larrosa and meseguer  1; larrosa et al.  1; larrosa and schiex  1 . all of these algorithms are based on standard backtracking and gain their efficiency from the quality of the consistency maintenance procedure they use. in  larrosa and schiex  1   the authors present maintenance procedures of local consistency levels  nc* and ac*  which improve on former versions of node-consistency and arc-consistency. an improved result for max-csps was presented in  larrosa and schiex  1 . this result was achieved by enforcing extended consistency which generates larger lower bounds.
모the present paper improves on previous results by adding conflict-directed backjumping  cbj  to the b&b algorithms presented in  larrosa and schiex  1  and in  larrosa and schiex  1 . conflict-directed backjumping  cbj   prosser  1  is a method which is known to improve standard csp algorithms  dechter  1; ginsberg  1; kondrak and van beek  1; chen and van beek  1 . in order to perform standard cbj  the algorithm stores for each variable the set of assignments which caused the removal of values from its domain. when a domain empties  the algorithm backtracks to the last assignment in the corresponding conflict set  chen and van beek  1; dechter  1 .
모one previous attempt at conflict directed b&b used reasoning about conflicts during each forward search step  li and williams  1 . conflicts were used in order to guide the forward search away from infeasible and sub-optimal states. this is in contrast to the use of conflict reasoning for backjumping proposed in the present paper. another attempt to combine conflict directed  intelligent  backtracking with b&b was reported for the open-shop problem  gueret뫣 et
al.  1 . the algorithm proposed in  gueret뫣 et al.  1  is specific to the problem. similarly to cbj for standard csps  explanations for the removal of values from domains are recorded and used for resolving intelligently the backtrack destination.
모performing back-jumping for max-csps is more complicated than for standard csps. in order to generate a consistent conflict set  all conflicts that have contributed to the current lower bound must be taken into consideration. furthermore  additional conflicts with unassigned values of equal or higher costs must be added to the conflict set in order to achieve completeness.
모the required information needed for the detection of the culprit variables that will be the targets for the algorithm backjumps is polynomial. the maintenance of the data structures does not require additional iterations of the algorithm.
모the results presented in this paper show that as reported for standard csps by  chen and van beek  1   the improvement in run-time is dependent on the degree of the consistency maintenance procedure. however  the factor of improvement in the number of assignments when using cbj is consistent and large.
모max-csps are presented in section 1. a description of the standard b&b algorithm along with the maintenance procedures nc   ac  and fdac is presented in section 1. section 1 presents the cbj algorithm for b&b with nc   ac  and fdac. an extensive experimental evaluation  of the contribution of conflict directed backjumping to b&b with nc   ac  and fdac  is presented in section 1. our conclusions are in section 1.
1 max constraint satisfaction problems
a max - constraint satisfaction problem  max-csp  is composed  like standard csp  of a set of n variables x1 x1 ... xn. each variable can be assigned a single value from a discrete finite domain {d1 d1 ... dn} respectively. similarly to former studies of max-csps  larrosa and meseguer  1; larrosa et al.  1; larrosa and schiex  1   we assume that all constraints are binary. a binary constraint rij between any two variables xj and xi is a subset of the cartesian product of their domains; rij   dj뫄di. an assignment  or a label  is a pair   where var is a variable and val is a value from var's domain that is assigned to it. a partial solution is a set of assignments of values to variables. the cost of a partial solution in a maxcsp is the number of constraints violated by it  conflicts . an optimal solution to a max-csp is a partial solution that includes all variables and which includes a minimal number of unsatisfied constraints  i.e. a solution with a minimal cost.
1 the branch and bound algorithm
optimization problems with a finite search-space are often solved by a branch and bound  b&b  algorithm. both weighted csps and max-csps fall into this category.
모the b&b algorithm is presented in figure 1. the general structure of the algorithm is different than its recursive presentation in  larrosa and schiex  1 . in order to be able to perform backjumping  we need an iterative formulation  cf.  prosser  1  . we use an array of states which hold for each successful assignment the state of the algorithm before it was performed. after each backtrack the current
b&b
1. current state 뫹 initial state;
1. cps 뫹 empty assignment;
1. i 뫹 1;
1. while i 뫟 1 
1. if
1.
1. i 뫹 i   1;
1. else foreach  a 뫍 di  1.	temp state	current state
1.
1. if local consistent temp state  
1. states i  뫹 current state;
1. current state 뫹 temp state;
1. i 뫹 i + 1;
1. i 뫹 find culprit variable  ;
1. current state 뫹 states i ;
;
1. temp state.cps.cost 뫹 temp state.cps.cost + cost i val ;
1. for j 뫹  i
1. foreach
1. if conflicts 
1. cost a i  뫹 cost a i  + 1;
모모모모모figure 1: standard b&b algorithm state of the algorithm will be set to the state which was stored before the culprit assignment was performed. the space complexity stays the same as in the recursive procedure case  i.e. larger than a single state by a factor of n. for simplicity of presentation we use a fixed order of variables and the function find culprit variable simply returns i  1.
모the naive and exhaustive b&b algorithm can be improved by increasing the level of the maintained local consistency. as a result  the value of the lower bound of a current partial solution is increased. after each assignment  the algorithm performs a consistency maintenance procedure that updates the costs of potential future assignments and increases its chance to detect early a need to backtrack. three of the most successful consistency check functions are described next.
1 node consistency and nc*
node consistency is a very standard consistency maintenance method  analogous to forward-checking in standard csps   dechter  1 . the main idea is to ensure that in the domains of each of the unassigned variables there is at least one value which is consistent with the current partial solution  cps . for each value in a domain of an unassigned variable  one must determine whether assigning it will increase the lower bound beyond the limit of the upper bound. to this end  the algorithm maintains for every value a cost which is its number of conflicts with assignments in the cps. after each assignment  the costs of all values in domains of unassigned variables are updated. when the sum of a value's cost and the cost of the cps is higher or equal to the upper bound  the value is eliminated from the variable's domain. an empty domain triggers a backtrack.
모the down side of this method in max-csps is that the number of conflicts counted and stored as the value's cost  does not contribute to the global lower bound and it affects the search only if it exceeds the upper bound. in  larrosa
nc* i 
1.	for
1.
1.
1.
1.
1.;
1. for j 뫹  i + 1  to  n   1 
1. foreach  a 뫍 dj 
1. if a.cost + lower bound 뫟 upper bound 
1. dj 뫹 dj   a;
1. return  lower bound   upper bound ;
               figure 1: standard nc* and schiex  1   the authors suggest an improved version of node consistency they term nc*. in nc* the algorithm maintains a global cost c뷋 which is initially zero. after every assignment  all costs of all values are updated as in standard nc. then  for each variable  the minimal cost of all values in its domain  ci  is added to c뷋 and all value costs are decreased by ci. this means that after the method is completed in every step  the domain of every unassigned variable includes one value whose cost is zero. the global lower bound is calculated as the sum of the cps's cost and c뷋.
모any value whose lower bound  i.e. the sum of the cps's cost  c뷋 and its own cost  exceeds the limit of the upper bound  is removed from the variable's domain as in standard nc  larrosa and schiex  1 .
모the nc  consistency maintenance function is presented in figure 1.
1 arc consistency and ac*
a stronger consistency maintenance procedure which is known to be effective for csps is arc consistency  ac   bessiere and regin  1 .
모in max-csps  a form of arc-consistency is used to project costs of conflicts between unassigned variables  larrosa and meseguer  1; larrosa et al.  1; larrosa and schiex  1; 1 . ac  combines the advantages of ac and nc . after performing ac  the updated cost of the values are used by the nc  procedure to increase the global cost c뷋. values are removed as in nc  and their removal initiates the rechecking of ac. the system is said to be ac  if it is both ac and nc   i.e. each domain has a value with a zero cost   larrosa and schiex  1 .
1 full directed arc consistency
the fdac consistency method enforces a stronger version of arc-consistency than ac   cf.  larrosa and schiex  1  . consider a csp with an order on its unassigned variables. if for each value valik of variable vi  in every domain of an unassigned variable vj which is placed after vi in the order  a value valjs has a cost of zero and there is no binary constraint between valik and valjs  we say that the csp is in a dac state. a csp is in a fdac state if it is both dac and ac . 1
모for a detailed description of fdac and demonstrations of how fdac increases the lower bound  the reader is referred to  larrosa and schiex  1 .
1 branch and bound with cbj
the use of backjumping in standard csp search is known to improve the run-time performance of the search by a large factor  prosser  1; kondrak and van beek  1; dechter and frost  1; chen and van beek  1 . conflict directed backjumping  cbj  maintains a set of conflicts for each variable  which includes the assignments that caused a removal of a value from the variable's domain. when a backtrack operation is performed  the variable that is selected as the target  is the last variable in the conflict set of the backtracking variable. in order to keep the algorithm complete during backjumping  the conflict set of the target variable  is updated with the union of its conflict set and the conflict set of the backtracking variable  prosser  1 .
모the data structure of conflict sets which was described above for cbj on standard csps can be used for the b&b algorithm for solving max-csps. however  additional aspects must be taken into consideration for the case of maxcsps.
모in the description of the creation and maintenance of a consistent conflict set in a b&b algorithm the following definitions are used:
definition 1 a global conflict set  gcs  is the set of assignments whose replacement can decrease the lower bound.
definition 1 the current cost of a variable is the cost of its assigned value  in the case of an assigned variable  and the minimal cost of a value in its current domain in the case of an unassigned variable.
definition 1 a conflict list of value vij 뫍 di  is the ordered list of assignments of variables in the current partial solution  which were assigned before variable i  and which conflict with vij.
definition 1 the conflict set of variable xi with cost ci is the union of the first  most recent  ci assignments in each of the conflict lists of all values of xi  if the conflict list of a value is shorter than ci then all its assignments are included in the variables' conflict set .
모in the case of simple b&b  the global conflict set is the union of all the conflict sets of all assigned variables. values are always assigned using the min-cost heuristic i.e. the next value to be assigned is the value with the smallest cost in the variable's current domain. before assigning a variable the cost of each value is calculated by counting the number of conflicts it has with the current partial solution. next  the variable's current cost is determined to be the lowest cost among the values in its current domain. as a result  the variable's conflict set is generated. the reason for the need to add the conflicts of all values to a variable's conflict set and not just the conflicts of the assigned value  is that all the possibilities for decreasing the minimal number of conflicts of any of the variables' values must be explored. therefore 
update state i val 
1. add  i val  to cps;
1. cps.cost 뫹 cps.cost + cost i val ;
1. foreach a 뫍 di 
1. for 1 to val.cost
1. gcs 뫹 gcs 뫋 first element in a.conflict list;
1.
1.
1.
1.	
1. a.cost 뫹 a.cost + 1;
1. a.conflict list 뫹 a.conflict list 뫋  i val ;
variable i 
1. if 	=	 
1.
latest assignment in gcs;
1. gcs 뫹 gcs   culprit;
1. return culprit;
figure 1: the changes in b&b required for backjumping
     figure 1: a conflict set of an assigned variable the latest assignment that can be replaced  and possibly decrease the cost of one of the variables values to be smaller than the variable's current cost must be considered.
모figure 1 presents the changes needed for adding cbj to standard b&b. after a successful assignment is added to the cps  its cost is added to the cost of the cps  lines 1 . then  the added cost  val.cost is used to determine which assignments are added to the global conflict set  gcs . for each of the values in the domain of variable i  the first val.cost assignments are removed and added to the gcs  lines 1 . as a result  when performing a backjump  all that is left for function find culprit variable to do is to return the latest assignment  the one with the highest variable index  in the gcs  lines 1 . in case the gcs is empty  function find culprit variable returns  1 and as a result  terminates the algorithm  lines 1 .
모the space complexity of the overhead needed to perform cbj in b&b is simple to bound from above. for a csp with n variables and d values in each domain  the worst case is that for each value the algorithm holds a list of o n  assignments. this bounds the space complexity of the algorithm's state by o n1d . since we hold up to n states  the overall space used is bounded by o n1d .
모figure 1 presents the state of three variables which are included in the current partial solution. variables x1  x1 and x1 were assigned values v1  v1 and v1 respectively. all costs of all values of variable x1 are 1. the conflict set of variable x1 includes the assignments of x1 and x1 even though its assigned value is not in conflict with the assignment of x1.

figure 1: a conflict set of an unassigned variable
however  replacing the current assignment of x1 can lower the cost of value v1 of variable x1.
1 node consistency with cbj
in order to perform cbj in a b&b algorithm that uses node consistency maintenance  the conflict sets of unassigned variables must be maintained. to achieve this goal  for every value of a future variable a conflict list is initialized and maintained. the conflict list includes all the assignments in the cps which conflict with the corresponding value. the length of the conflict list is equal to the cost of the value. whenever nc  adds the cost ci of the value with minimal cost in the domain of xi to the global cost c뷋  the first ci assignments in each of the conflict lists of xi's values are added to the global conflict set and removed from the value's conflict lists. this includes all the values of xi including the values removed from its domain. backtracking to the head of their list can cause the return of removed values to the variables current domain. this means that after each run of the nc  procedure  the global conflict set includes the union of the conflict sets of all assigned and unassigned variables.
모figure 1 presents the state of an unassigned variable xi. the cps includes the assignments of three variables as in the example in figure 1. values v1 and v1 of variable xi are both in conflict only with the assignment of variable x1. value v1 of xi is in conflict with the assignments of x1 and x1. xi's cost is 1 since that is the minimal cost of its values. its conflict set includes the assignments of x1 since it is the first in the conflict list of v1 and v1  and x1 since it is the first in the conflict list of v1. after the nc  procedure  c뷋 will be incremented by one and the assignments of x1 and x1 will be added to the global conflict set.
모figure 1 presents the changes in nc  that are required for performing cbj. for each value whose cost is decreased by the minimal cost of the variable  cj  the first cj assignments in its conflict list are removed and added to the global conflict set  lines 1 . note that the revised procedure uses the conflict lists of removed values as well as of remaining values. for each domain di an additional set  d i is maintained  which holds the values that were removed from di.
1 ac* and fdac with cbj
adding cbj to a b&b algorithm that includes arcconsistency is very similar to the case of node consistency. whenever a minimum cost of a future variable is added to the global cost c뷋  the prefixes of all of its values' conflict lists are added to the global conflict set. however  in ac   costs
nc* bj i 
1.
1.
1. j	j
1. a.cost 뫹 a.cost   cj
1. for 1 to c
1.;
1. remove first element from a.conflict list;
1. c뷋 뫹 c뷋 + cj;
;
1. d j 뫹 d j 뫋 a;
1. dj 뫹 dj   a;
1. return  lower bound   upper bound ;
       figure 1: changes in nc  that enable cbj of values can be incremented by conflicts with other unassigned values. as a result  the cost of a variable may be larger than the length of its conflict list. in order to find the right conflict set in this case one must keep in mind that except for an empty cps  a cost of a value vk of variable xi is increased due to arc-consistency only if there was a removal of a value which is not in conflict with vk  in some other unassigned variable xj. this means that a removal of the last assignment in the cps would return the value which is not in conflict with vk  to the domain of xj. whenever a cost of a value is raised by arc-consistency  the last assignment in the cps must be added to the end of the value's conflict list. this addition restores the correlation between the length of the conflict list and the cost of the value. the variable's conflict set and the global conflict set can be generated in the same way as for nc .
모maintaining a consistent conflict set in fdac is somewhat similar to ac . whenever a cost of a value is extended to a binary constraint  its cost is decreased and its conflict list is shortened. when a binary constraint is projected on a value's cost  the cost is increased and the last assignment in the cps is added to its conflict list. caution must be taken when performing the assignment since the constant change in the cost of values may interfere with the min-cost order of selecting values. a simple way to avoid this problem is to maintain for each value a different cost which we term priority cost. the priority cost is updated whenever the value's cost is updated except for updates performed by the dac procedure. when we choose the next value to be assigned we break ties of costs using the value of the priority cost.
1 experimental evaluation
the common approach in evaluating the performance of csp algorithms is to measure time in logic steps to eliminate implementation and technical parameters from affecting the results. two measures of performance are used by the present evaluation. the total number of assignments and cpu-time. this is in accordance with former work on max-csp algorithms  larrosa and schiex  1; 1 .
모experiments were conducted on random csps of n variables  k values in each domain  a constraint density of p1

figure 1: assignments and run-time of nc* and nc* cbj  p1 = 1 

figure 1: assignments and run-time of ac* and ac* cbj
 p1 = 1 
and tightness p1  which are commonly used in experimental evaluations of max-csp algorithms  larrosa and meseguer  1; larrosa et al.  1; larrosa and schiex  1  . in all of the experiments the max-csps included 1 variables  n = 1  and 1 values for each variable  k = 1 . two values of constraint density p1 = 1 and p1 = 1 were used to generate the max-csps. the tightness value p1  was varied between 1 and 1  since the hardest instances of max-csps are for high p1  larrosa and meseguer  1; larrosa et al.  1 . for each pair of fixed density and tightness  p1  p1   1 different random problems were solved by each algorithm and the results presented are an average of these 1 runs.
모in order to evaluate the contribution of cbj to b&b algorithms using consistency maintenance procedures  the b&b algorithm with nc   ac  and fdac was implemented. the results presented show the performance of these algorithms with and without cbj. the nc  procedure was tested only for low density problems p1 = 1  since it does not complete in a reasonable time for p1 = 1.
모the left hand side  lhs  of figure 1 presents the number of assignments performed by nc* and nc* cbj. for the hardest instances  where p1 is higher than 1  nc* cbj outperforms nc* by a factor of between 1 at p1 = 1 and 1 at p1 = 1. the right hand side  rhs  of figure 1 shows similar results for cpu-time.
모the lhs of figure 1 presents the number of assignments performed by ac* and ac* cbj. for the hardest instances  where p1 is higher than 1  ac* cbj outperforms ac* by a factor of 1. the rhs of figure 1 presents the result in cpu-time which are similar but the difference is smaller than for the number of assignments. note that both performance measures decrease for p1 values above 1 for ac* cbj. this demonstrates a phase transition  larrosa and meseguer  1; larrosa and schiex  1 .
figure 1 presents similar results for the ac* algorithm figure 1: assignments and run-time of ac* and ac* cbj  p1 = 1 

figure 1: assignments and run-time of fdac and fdac cbj  p1 = 1 
solving high density max-csps  p1 = 1 . the factor of improvement is similar to the low density experiments for both measures.
모the lhs of figure 1 presents the number of assignments performed by fdac and fdac cbj. the difference in the number of assignments between the conflict-directed backjumping version and the standard version is much larger than for the case of nc* and ac*. however  the difference in cputime  presented on the rhs of figure 1  is smaller than for the previous procedures. these differences are also presented for high density max-csps in figure 1.
모the big difference between the results in number of assignments and in cpu-time for deeper look-ahead algorithms can be explained by the large effort that is spent in fdac for detecting conflicts and pruning during the first steps of the algorithms run. for deeper look-ahead  the backjumping method avoids assignment attempts which require a small amount of computation. the main effort having been made during the assignments of the first variables of the csp which are performed similarly  in both versions.
1 conclusions
branch and bound is the most common algorithm used for solving optimization problems with a finite search space  such as max-csps . former studies improved the results of standard branch and bound algorithms by improving the consistency maintenance procedure they used  wallace and freuder  1; larrosa and meseguer  1; larrosa et al.  1; larrosa and schiex  1; 1 . in the present study we adjusted conflict directed backjumping  cbj   which is a common technique for standard csp search  prosser  1; kondrak and van beek  1   to branch and bound with extended consistency maintenance procedures. the results presented in section 1 show that cbj improves the performance of all versions of the b&b algorithm. the factor of improvement in the number of assignments when using conflict directed backjumping is consistent and large. the factor figure 1: assignments and run-time of fdac and fdac cbj  p1 = 1 
of improvement in run-time is dependent on the consistency maintenance procedure used  as reported for standard csps by  chen and van beek  1  . the factor of improvement does not decrease  and even grows  for random problems with higher density.
