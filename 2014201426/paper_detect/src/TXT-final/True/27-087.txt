ion by interchangeability in resource allocation 
berthe y. choueiry  boi ealtings and rainer weigel 
laboratoire d'lntelligence artificielle 
swiss federal institute of technology  epfl  
in-ecublens  ch-1 lausanne  switzerland 
e-mail:  choueiry|faltings|weigel  lia.di.epfl.ch 

abstract 
resource allocation is a difficult constraint satisfaction problem that has many practical applications. fully automatic systems are often rejected by the ultimate users because  in many real-world environments  constraints cannot be formalized completely. on the other hand  humans are overwhelmed by the complexity of their task. we present a new way of solving the resource allocation  where a computer builds dynamic abstractions that simplify problem solving to the point that the user can intervene in the solution of the problem. these abstractions are based on the concept of interchangeability introduced by freuder. in this paper  we describe a heuristic for decomposing a resource allocation problem into abstractions that reflect interchangeable sets of tasks or resources. we assess the  quality  of the discovered neighborhood interchangeable sets by comparing them to the ones obtained by the exact algorithm described by freuder  both for data taken from a real-world application and for randomly generated problems. 
1 	introduction and motivation 
the resource allocation  ra  problem is to assign resources to a set of tasks  scheduled at given time intervals  such that no resource is assigned to two different tasks at the same time. it arises in many real-world applications. 
  in manufacturing  once the various jobs have been scheduled  it appears as the problem of distributing tools to the machining centers and of allocating routing vehicles to transfer the material. 
  in the operating units of a hospital  the availability of personnel and the program of surgical operations to be executed are decided at various administrative levels  days or weeks in advance. on a daily basis  one or two human operators distribute the qualified personnel  nurses and technicians  to the surgical operations as required. 
  in an airline company  the problem arises for allocating  to the various scheduled flights  aircraft  
1 	planning 
cabin crew  gates; as well as personnel  vehicles  and equipment for catering  baggage handling  cleaning  and fuel refilling. 
　fig. 1 shows an example of a resource allocation problem. the problem can be represented as interval orders  as shown on the left of fig. 1. in this paper  however  

figure 1: left: interval orders: a schedule of seven tasks whose start time and duration are fixed. for each task  a set of possible resources is shown. right: the corresponding constraint graph. 
we model the resource allocation problem as a discrete constraint satisfaction problem  csp   in which the constraints among variables are binary and denote mutual exclusion with respect to the values  as shown in fig. 1 right. the nodes of the constraint graph represent tasks to be executed  and their labels are sets of resources that can carry out  the tasks. arcs link nodes that intersect in time and have at least one resource in common. note that we consider only resources that are reusable and non-sharable  see . 
complexity. arkin and silverberg  l  showed that the resource allocation problem is np-complete  i.e.  the existence of a polynomial solution method is unlikely . in   we showed that an optimization version of the resource allocation problem in which certain tasks  compulsory tasks  must absolutely be allocated a resource and the number of the remaining ones  optional tasks  must be maximized is at least as difficult as m a x s n p complete  for which the existence of a polynomial-time approximation scheme is unlikely. 
requirement: interactivity vs. automation. often  constraints cannot be exhaustively enumerated. for example  the constraint that two persons do not work well together is often not formalized. moreover  constraints may vary over time. for example  a person may 

be sick and unable to carry out certain tasks. fully automatic methods are  therefore  often rejected by the ultimate users  who have to revise solutions with the full complexity of the original problem. thus  it is important to present them with compact representations that simplify the problem. 
abstractions as a new perspective. in this paper  we investigate the use of computers to dynamically build abstractions that structure the problem space and allow the users to solve the problem interactively. in  1   we introduced a heuristic called the value-assignment delay heuristic  vad  for decomposing a resource allocation problem into sub-problems. the vad tries to solve sub-problems independently and isolates conflicts between them. the tradeoffs of using this decomposition scheme and a comparison to related work in the scheduling and csp literature are reported in  1; 
1 . 
　by decomposing a problem  the vad implicitly generates equivalence classes of resources and tasks. we argue that these new objects structure the solution space of a resource allocation problem in a compact manner and identify equivalent choices. thus  they serve as a basis for abstraction. in this paper  we identify these various abstraction classes and characterize them in terms of interchangeability sets . 
　the paper is organized as follows. in section 1  we recall the main definitions of interchangeability that are of interest to us. in section 1  we describe and formalize the interchangeable sets discovered by the vad; then we show how they can be used as abstractions to simplify problem solving. in section 1  we evaluate the discovered neighborhood interchangeable sets with respect to the ones found by the exact algorithm. section 1 presents our conclusions. 
1 	interchangeability: definitions 
in   freuder introduces the concept of interchangeability and defines various kinds of value interchangeability. in this section  we quickly recall the definitions of interest to us. the phrase   i j  satisfies c  means that values i and j for two variables linked by a constraint c are consistent with respect to this constraint. 
definition 1 full interchangeability: 	a value 1 for a 
csp variable v is fully interchangeable with a value c for v if and only if every solution to the csp that assigns b to v remains a solution when c is substituted for 1 in v 
and vice versa. 
this means that values 1 and c can be switched for variable v in a given solution without affecting at all the rest of the problem and regardless of the constraints that apply to the variables. freuder notices that computing fully interchangeable sets may require  in general  computing all solutions  which can be a quite costly operation. 
definition 1 neighborhood interchangeability: a value b for a csp variable v is neighborhood interchangeable with a value c for v if and only if for every constraint c on v: 

neighborhood interchangeability is a stronger condition than full interchangeability  i.e.  not all fully interchangeable sets are neighborhood interchangeable   but is easier to compute. freuder describes a polynomialtime procedure for computing all neighborhood interchangeable sets1. 
definition 1 substitutability: given two values 1 and c for a csp variable v  1 is substitutable for c if and only if substituting 1 in any solution involving c yields another solution. 
substitutability is 'one-way' full interchangeability. 
definition 1 neighborhood substitutability: for two values 1 and c  for a csp variable v  b is neighborhood 
substitutable for c if and only if for every constraint c on v: 

neighborhood substitutability is 'one-way' neighborhood interchangeability. 
definition 1 partial interchangeability: two values are partially interchangeable with respect to a subset s of variables if and only if any solution involving one implies a solution involving the other  with possibly different values for variables in s. 
note that full interchangeability is partial interchangeability with s - 1. indeed  freuder outlines that:  partial interchangeability captures the idea that values for variables may differ among themselves  but be fully interchangeable with respect to the world . 
　using partial interchangeability  we may isolate a subproblem in which the partial solution can be affected by a change of the value of a variable in the isolated sub-problem  without having to update the rest of the solution. this idea of localizing the effect of a modification is very important in scheduling applications  where one tries to keep the stability of a global solution while adjusting a partial solution locally to accommodate unforeseen events. thus  partial interchangeability sets can serve as a basis for reactive scheduling strategies. in   freuder argues that interchangeable values are redundant and their removal simplifies the problem space. 
1 	interchangeability in ra 
the algorithm described in  is applicable to all types of constraints  however  it only finds neighborhood interchangeabilities  ni 1. below  we introduce a decomposition heuristic  called the vad heuristic  which is only applicable to constraints of mutual exclusion; but  in addition to the ni sets  it also determines other types of interchangeability for which no other algorithm is known so far. 
　　1	1
　　the worst-case complexity of this procedure is 1 n a   where n is the number of nodes and a is the domain size. 
   1 in   freuder proposes also a generalized version for finding a:-interchangeability. 
choueiry  faltings  and weigel 1 
1 	t h e value-assignment delay heuristic 
the idea of the vad heuristic  as stated in   is as follows:  delay the assignment of the most solicited values in a list coloring problem and try to solve the simplified problem without them. distribute the delayed values to those variables that really cannot do without them.  layed resources for their solution. a conflict is defined around each value set claimed by several nodes in the leaves  see fig 1. conflicts may be resolved according to some heuristic and domain dependent preferences or by interactive users' intervention. users may decide to relax constraints and  borrow  any of the values that remain unassigned. 
1 	planning 
　by isolating easy sub-problems  identifying conflicts  and localizing interactions among the various components of a resource allocation problem  the heuristic defines a tree structure useful for interactive decision making. the algorithm and termination criteria are described in detail in  1; 1   where we show that the worstcase complexity of the method is 1 n1 +  n+a an log a   n being the number of tasks and a the number of resources. 
s
　　this is the example  test 1-a  of table 1 in section 1  slightly modified to illustrate all the types of interchangeability addressed in this section. 


choueiry  faltings  and weigel 1 


proof: since no value in ui was delayed  this means that ui is needed only for vi during vi and assigning any element of ui to vi does not rule out any choice for the rest of the problem. therefore  the set of values for nodes adjacent to v*  for the case where vi is assigned an element of ci  will be a superset of that for the case where it is assigned any other value in its label. ＆ 
example from fig. 1: in c-1  each of {rolf  martine} are neighborhood substitutable for each of {henri  erika  mobwete  fernando  giorgio  alberto} for opio-
lemma 1 all values in a given set of delayed values d are partially interchangeable with respect to the set s of variables located downstream that claim d. 
proof: the set of delayed values is chosen at each step as the set of values simultaneously claimed by a set of variables  see . thus  if a variable claims any element of the set of delayed values  it also claims all the others  by construction. 	d 
example from figures 1 and 1: {henri  erika} are partially interchangeable for all the nodes in the leaf clusters c 1  ...  cs since they are admissible for all these nodes  although this information is not explicitly shown . 
　in   freuder suggests that interchangeability can also be computed dynamically during problem resolution   i.e.  dynamic interchangeability . an example of this is shown in fig. 1. suppose that a conflict resolution procedure  or the user   decides to assign b to task k. the delayed value set {a} is now fully interchangeable with {e  f} for variable task l. 

proof: since the values in the delayed set are claimed only by non-adjacent nodes  whether they are assigned to two or more nodes simultaneously cannot affect the problem in any way. in particular  each of them is neighborhood substitutable for all {vi in each vi. since all {v  can be proven neighborhood substitutable for each of these values using lemma 1  they are fully interchangeable. 	d 
as these lemmas show  in addition to the ni sets  the 
vad also determines other types of interchangeability for which no other algorithm is known so far. in the case of partial interchangeability  the vad also determines the sets of nodes with respect to which the values are i nterchangeabl e. 
1 	interchangeable sets as abstractions 
we claim that the vad decomposition scheme structures the solution space into compact families of partial solutions: qualitatively equivalent solutions can be generated by locally modifying the partial solutions in the isolated interchangeable sets. in fig. 1  it is easy to see that many solutions can be generated simply by switching partially interchangeable values for tasks in the same leaf cluster. this switching operation affects only the nodes in the leaf  while keeping the rest of the 'world' unchanged. thus  by only viewing the clustering tree generated by the vad  the user can easily assess the variety of possible solutions. classical enumerative methods fail to organize the solution space in such a compact manner: they present solutions to the users in a jumble without showing similarities and differences between alternative solutions. in particular  they fail to identify the boundaries within which the effect of a change remains local. 
　in interactive problem solving  interchangeable sets help the human decision maker to view alternative choices in a concise way. full or neighborhood interchangeable values can be replaced by one 'meta-value'. partial interchangeability identifies the boundaries in which changes are permitted. when a value a is neighborhood substitutable for a value 1 for a given variable the user is guaranteed to be able to replace 1 by a anytime a solution involving 1 for the variable is found  if b is not acceptable for some unquantifiable or subjective reason. 
in search  the main advantages of discovering inter-

1 	planning 

changeability sets are:  1  compacting the solution space representation by grouping families of solutions that are equivalent  thus allowing the search process to remain as local as possible  and  1  enhancing the performance of backtracking and consistency checking by removing redundant values. 
　in dynamic concept formation  see   interchangeability identifies groups of objects  sets of variables and sets of values  to become the basic components for a generalization process aimed at providing explanation. 
1 	evaluation of ni sets 
the vad heuristic is not guaranteed to discover all interchangeable sets. its performance depends on the structhey claim the same delayed set  they may be assigned values from this set simultaneously  see . 

ture of the problem at hand- the interchangeable sets approximated by the vad may differ from the exact ones in two ways:  1  the sets discovered by the vad may be only subsets of the largest possible ones and  1  some possible sets may be missed. 
　the conditions under which the vad discovers all exact sets of interchangeable values are so far unknown. we have evaluated the performance both on data from a case study in a hospital and on a variety of randomly generated resource allocation problems. the characteristics of the hospital case-study in terms of csp measures are reported in table 1. the random problems are generated following on the evolutionary model for generating random interval orders by scheinerman  and a resource model where the number and selection of resources follow a uniform distribution. 
　we report the results only for problem sizes n - 1 and n - 1  while varying the adjacency probability1 of the interval graph in {1  1  ...  1  1}  and the maximum domain size a = {n/1  1n/1 ...  1n/1 n} for each case  ten random problems were generated and each point in the experiments reported below is obtained by taking the average over the ten cases. 
　each time  we have compared the ni sets obtained by the vad decomposition with those obtained by the exact algorithm by freuder according to the two criteria introduced above  i.e.  maximality and existence . 
　let g -  v  e  be a constraint graph of v vertices  or variables  and e edges  or constraints   and 

we now consider the results of the evaluation regarding three different criteria: occurrence p1  1   coverage 
p1  1   and accuracy p1  1 as discussed below. 
occurrence: existence of ni sets. p  measures the  occurrence  of neighborhood interchangeability in a problem and is computed using the exact algorithm. a small value for pi indicates that few ni sets exist in g. 
		 1  
　in the real-world examples reported in table 1  we notice that the occurrence of ni is rather rare  p  is small . 

in fact  the other types of interchangeability characterized in section 1 seem to occur more often  for example  see fig. 1 . the evaluation of the latter has not yet been carried out. 
　for the randomly generated data  fig. 1 shows the following behavior:  1  as benson and freuder experienced  1j  only problems of small adjacency probability present interchangeability features: the number of ni sets becomes nearly zero for p   1.  1  for problems with a  small  value for p  the number of interchangeable sets increases with the number of resources.  1  the number of interchangeable sets decreases with the size of the problem1 even when the ratio of the number of values to the number of variables  a/n  is held constant. this is foreseeable because the resources are not structured  chaos increases . 
coverage: how many ni sets are approximated. p1 measures the number of sets that are affected by the behavior of the vad. a small value for p1 indicates thatfew of the ni sets discovered by the vad are different from the exact ones. a large value for p1 means that many sets are truncated. 
		 1  
for the set of real-world data described in table 1  no set of neighborhood interchangeable values was missed  p1 - 1 in all cases . for the randomly generated problems  the measured values of p1 are reported in fig. 1 and table 1. we can draw the following observations from 
fig. 1. for problems with small values for p  very few ni sets are truncated. the vad nearly finds all exact sets. this is the most important region since it contains most 
ni sets  p1 is large . when p increases  the number of ni sets that are not complete also increases. however  one should bear in mind that  for these problems  p  is small  which means that few ni sets exist. this explains why p1 deteriorates significantly even though the proportion of ni sets found is still fairly high. 
accuracy: 	the extent of ni sets approximation. 
the parameter p1 measures the accuracy to which the vad computes the ni sets1 

a small value for p1 indicates those sets affected by the approximation are heavily distorted  truncated . a value p1 = 1 means that all ni sets were completely missed by the vad. large values for p1 are desirable since they indicate that the ni sets discovered by the vad are hardly altered. 
　for the set of real-world data described in table 1  all the discovered ni sets were exact  p1 is undefined in all cases . 
   1the number of ni was so small  too small for any evaluation  for the cases n - 1 and a   1 that we decided to generate also  for this problem size  the cases a = 1  1  and 1. 



1 	conclusion 
because a changing and complex world cannot be completely formalized  resource allocation problems should not be addressed using fully automatic methods. in this paper  we propose the paradigm of dynamic abstractions as a new way of applying computers for such tasks. here  a computer is used essentially to structure a problem space into relevant abstractions. this allows a user to participate in solving the actual problem while taking into account the unformalized constraints which hold at that moment. 
　we claim that interchangeability is a useful notion to characterize adequate abstractions  then we present and analyze a heuristic for dynamically generating abstractions for resource allocation. although one still has to study the theoretical conditions under which the discovered ni sets are maximally defined  the approximation of ni sets by the vad is acceptable given that: 
  ni sets are more frequent in problems with small p and the effect of the  distortion  due to the vad decreases with p. 
  the vad can be computationally less expensive 
1 	planning 
than the exact algorithm1. 
  the computation of ni sets is not the purpose of the vad  whose goal is to localize interactions and conflicts among sub-problems; these results are only a fortunate  side effect . 
　as a general comment  we recall again that neighborhood interchangeability is not the only type of interchangeability discovered by the vad and that there exists  so far  no other algorithm for computing other types of interchangeability except for the obvious process of computing all possible solutions. note that the possibility of discovering interchangeable sets increases in structured domains with some semantics. thus  various real-world problems  such as scheduling  configuration  and design  may benefit greatly from finding interchangeability sets. note also that the three proposed parameters  p   p1 and p1  can be exploited to measure 
quality of interchangeable sets in general. 
　in future work  we hope to extend our approach in two directions: exploiting interchangeability sets in rescheduling and building a generalized theory of abstraction in csps using interchangeability concepts. 
acknowledgments 
the authors are indebted to dean allemang  guevara noubir  bradley richards and the anonymous reviewers for their comments. 
