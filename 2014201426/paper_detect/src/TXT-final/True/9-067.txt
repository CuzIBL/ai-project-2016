 
　　　this paper discusses the architecture of a metasystem  which can be used to generate i n t e l l i g e n t information systems f o r d i f f e r e n t domains of discourse. it p o i n t s out the kinds of knowledge accepted by the system  and the way the knowledge is used to do nont r i v i a l problem solving. the organization of the system makes it possible for it to function in the context of a large and expanding data base. the meta-system provides a basis f o r the d e f i n i t i o n of the concept of machine understanding in terms of the 
models that the machine can b u i l d in a domain  and the way it can use the models. 
	1. 	introduction 
       our objective is to create a meta-system which can be used to generate i n t e l l i g e n t information systems in d i f f e r e n t domains of discourse. the' meta system is c a l l e d the meta description system cmos . it has f a c i l i t i e s to accept d e f i n i t i o n s of descript i o n schemas and descriptions themselves  of   knowledge -- about f a c t s   objects  processes  and problem solving -- in a domain. a domain might be a disease system  a piece of mathematics  or computing systems themselves. the d e s c r i p t i o n schemas and descriptions of knowledge in a domain specialize the mds to act as an i n t e l l i g e n t information system f o r the domain. for a domain m  the information system associated w i t h it is called the coherent information system of 
m. 
       in our research we have two p r i n c i p a l concerns:   i   how may one describe knowledge in a domain to a computer; what kinds of knowledge should a system have to e x h i b i t i n t e l l i g e n t behaviour; what operational f a c i l i t i e s are needed to accept and use such knowledge    i i   how may the computer be made to use given knowledge automatically to solve problems in the domain and answer questions  
       the mds accepts and uses three kinds of knowledge: a  s t r u c t u r a l knowledge p e r t a i n i n g to the form and syntax of d e s c r i p t i o n s . 	descriptions may  of course  be strings of words in some language. 	the mds w i l l t r a n s l a t e such descriptions to structures w i t h i n a r e l a t i o n a l system. 	the r e l a t i o n a l system i t s e l f may consist of constants  	v a r i a b l e s   predicate symbols  function symbols  l o g i c a l operators and 
q u a n t i f i e r s . 	the s t r u c t u r a l knowledge s p e c i f i e s the s t r u c t u r e of the r e l a t i o n a l system used in a domain. 
b  sense knowledge: 	logical assertions p e r t a i n i n g to the sense in which structures are i n t e r p r e t e d   and constraints on admissable structures beyond those specified in the syntax. 	and  c  transformational knowledge: 	this pertains to the knowledge necessary to transform given descriptions of s p e c i f i c objects to new ones  	according to s p e c i f i e d c r i t e r i a . 
  
this work was supported by a research grant from 
nih  grant number rr-1  
　　　corresponding to these three levels of knowledge there is a hierarchy of problem solvers   checker  instantiator   theorem prover  tp  and designer  in order of increasing complexity. the  checker  instantiator  system acts as a sophisticated data management system that establishes  maintains and updates the data base of models of s p e c i f i c objects in a domain in a manner consistent with the s t r u c t u r a l and sense knowledge. checker can answer questions p e r t a i n i n g to any of the s p e c i f i c models f o r which the informat i o n is e i t h e r d i r e c t l y stored in the data base  or is d i r e c t l y derivable by evaluating a given l o g i c a l assertion in a given context. the theorem prover adds power to the checker in three ways: in c e r t a i n cases it helps reduce the search e f f o r t of checker by g i v i n g it advice based on deduced consequences of sense knowledge; where f e a s i b l e it can warn the checker of impossible s i t u a t i o n s in the generation and updating of models; it can also determine general t r u t h values of assertions based on the s t r u c t u r e and sense knowledge. the designer adds f u r t h e r power to the system by enabling the system to plan courses of actions using given action p r i m i t i v e s  transformation rules} in a manner consistent with the facts of a problem. this hierarchy imposes a very useful c l a s s i f i c a t i o n of system f a c i l i t i e s   and gives the system a considerable f l e x i b i l i t y . 
　　　the d e s c r i p t i v e language of a domain is i t s e l f specified in terms of the model d e f i n i t i o n s in the domain. language analysis is thus looked at as a 
model b u i l d i n g process. most importantly  the model d e f i n i t i o n s in a domain may include d e f i n i t i o n s of problem solving states  pss   relevent to the domain. the pss may provide f a c i l i t i e s to summarize the problem solving experience of the system. this summary may be used to i n t e l l i g e n t l y guide the problem solver. 
　　　this work on mds and cl-systems may be thought of e s s e n t i a l l y as a f u r t h e r extension of the trend s t a r t ed by ref-arf l 1   qa1   1     pops   1   strips   1   1   and planner   1     i t s problem solving a c t i v i t y uses  means-end  analysis  a concept o r i g i n a l l y introduced in gps   1     and function invocation schemes based on goals  introduced by planner. ct-systems have both 
the f l e x i b i l i t y of planner-like systems  and model based reasoning a b i l i t i e s of a gps l i k e system. the e n t i r e system depends on the way d e s c r i p t i v e data structures are organized in a given domain. however  
the a v a i l a b i l i t y of data s t r u c t u r e and model d e f i n i t i o n f a c i l i t i e s   and a separate data management system makes it possible to completely i s o l a t e the data s t r u c t u r e and data base d e t a i l s from the problem solving programs. this makes it possible to conceive 
of the meta system  	the mds  to create cl-systems 
for d i f f e r e n t domains. 	it seems reasonable t h a t   	if 
the classes of possible models of objects in a domain could he described to a computer then  in p r i n c i p l e   
1 the computer should be able to make use of the desc r i p t i o n s f o r problem solving and language understanding in the domain. in cl-systems we show how  a  classes of models can be defined and  b  how the d e f i n i t i o n s could be used f o r language analysis and problem solving in the domain. 
     the principal contributions of the proposed architecture are: 
	i  	a f a c i l i t y to use large data bases; 
	i i   	a stratification of knowledge in a domain and 
the f a c i l i t y to use a highly flexible descriptive 
mechanism to describe objects and problems in a domain; 
the possibility of describing knowledge in a domain in a systematic way to a computer; 
	i i i   	the definition of the descriptive language 
i t s e l f in terms of the models the system can build in a domain; and 
	iv  	the possibility of specializing the mds to 
operate efficiently as a problem solving system in a domain of discourse. 
　　　the mds is now being implemented in lisp 1. some parts of it  see section 1  are now ready. this paper is  therefore  a report on work currently in progress. it introduces the principal architectural concepts of mds and cl-systems in the context of an example  the missionaries and cannibals*  m&c  problem . the structure of checker and designer is explained. the operation of the theorem proven is 
discussed in - in a subsequent paper the language processor w i l l be discussed. 
	1. 	an overview of the system architecture 
1. 	templates and their instantiations 
1.1. 	the templates 
　　　the concept of templates  the devices used to specify structural knowledge is central to the entire system architecture. templates classify objects in a domain into objects of different kinds and types. each template specifies a certain description structure. thus  in the m&c problem  see table 1  place  people  vehicle  etc. are different kinds of objects. the template for place  for example introduces two relation symbols: occupants and position of. the pair of relation symbols  occupants  occupants of  for example  are inverses of each other in the sense that in instances of place and people the relations  place occupants people  and  people occupants of place  will always appear together in the data base of models. people is just a l i s t of persons. an instance of type classification occurs in the person template. a person can be a missionary or cannibal. in mds type classification always reflects distinctions in the way objects are used. the templates thus specify the structure of the relational system for a domain: the relation symbols to be used in the description of various kinds of objects in the domain  and the kinds of objects that a relation symbol may relate. 
　　　given such templates  one may use the instantiator to create descriptions  which are instances of the templates. such instances might be specified to the system in some external language  which is translated to the internal representation in the relational system. or  the system itself might generate an instance of a template when called upon to do so  in either case  to complete the instantiation of 1 template  all the relation symbols defined for the template should be assigned values. these values will 
# 
there are three missionaries and three cannibals on 
one bank of a river. they want to go to the other bank. there is only one boat available. it can carry only two people at a time. the cannibals at a shore should not outnumber the missionaries at the same shore. find a way of transporting them. 
	table i: 	templates for the m&c problem 
1. place:  occupants people occupants of   cc1 
 position of vehil position   cc1 
1. people:  elements person elements of  1. vehil:  elements vehicle elements of  
1. person:  type ptyp type of  
 occupant of placeli occupant   cc1 
1. ptyp: missionary  cannibal 
1. placel1:  elements  place  vehicle  elements of  
1. placel:  elements place elements of  
1. vehicle:  pilots people pilots of  
 position place position of  
 cango to placel destination of  
 capacity integer capacity of  
 occupants people occupants of   cc1 
 cc1   *! occupants   people x  *! occupants x  
   numberof missionary x 1 
 numberof cannibal x  v 
  nijmberof missionary x  is 1    
 cc1   *! position of   vehicle x  m position of x  
 x cango *     
 cc     *! occupants of.#.is 1  
 cc1  *! occupants.  .-＊. capacity of *!  
be specific instances of objects within the data base. 
     thus for the mftc problem one may create instances of placli's called rbankl and rbank1  a vehicle called boat  and as many missionaries and cannibals as necessary. each person will be the occupant of some place and the vehicle itself will be at one of the places. we have not  however  introduced any of the conditions of the problem. not all instantiations of the templates of the m&c problem would represent legal situations. the necessary additional constraints are introduced by the sense knowledge. every relation symbol in a template may have a consistency condition  cc  associated with i t . cc1 in table i is associated with the symbol  occupants . it says that the cannibals at a place cannot outnumber the missionaries. the symbol   * '   in cci refers to the current instance of place at which the cc might be evaluated. it is called the anchor;  people x  stands for    vx  x is people  . all cc's have the form:     * ! r p x }  where *! is the anchor  r is a relation symbol occurring in the template associated with *!  and p x  is some logical predicate. the predicate p x  is said to be anchored at the  template  relation symbol  pair. thus  the predicate in  co  is anchored at  place  occupants . 
　　　in  cci  notice that     * ! occupants x   is itself a term in its predicate. 	this has the following significance: for a place like  say rbankl  if the system is told to set  rbankl occupants y  for soma y  it 
would first construct the combined l i s t of existing occupants of rbankl and y  and then verify the predicate. cc's of this kind are called declarative cc's  as opposed to the other kind  called imperative cc's  like  say  for a hypothetical template persqn1  
 cs1   *i sibling   person  x  not   x is *!   
                      x child of.father of *!     cs1  may be used to find the siblings of a pers1 in terms of the child of and father of relation symbols. the checker is used to evaluate cc's. we shall discuss the evaluator in section 1  
     the significant points to be noted about cc's are the following: 
　　　 i  the knowledge represented by the cc's is of a different kind from the structural knowledge  specified by the templates. 

1 


1 

the checker makes sure that data entered into the data base is consistent  and also keeps track of what additional data is needed to complete the descriptions of objects with respect to the templates. the templates for a domain describe the structure of the data base for the domain. the checker uses this structure to guide the instantiator to create and retrieve items in the data base selectively. 
　　　the limitations of the checker arises in the automatic guidance it can provide in the updating process. 	the checker has facilities to interpret individual cc's and to recognize the relation symbols whose value in the data base might be affected as a result of a change made at one place in the data 
base. checker keeps track of the relation symbol  by cataloging the relation symbols in terras of their appearances in the various cc's. in general  a change in the value of one relation symbol might propogate through the data base to a series of other relation symbol values. as long as any given instance of the value of a relation symbol does not repeat itself in this series  checker will have no 
problems. it can execute the series of necessary changes without ever having to go back to a value that it had previously changed within the sequence  
　　checker simply performs search in the data base  and logical combinations of search. it has only simple facilities to keep track of alternate choices in search paths  and choices in possible valuations of relation symbols. also  checker can handle only constants as possible valuations for relation symbols. when the number of alternatives is large or when loops occur in an updating chain  the checker  if left to run will keep assigning new values to the relation symbols involved until a consistent set of valuations is obtained  or until all known possibilities are exhausted. the only choices it can generate are those that are already available in the data base  or those that may be obtained by evaluating specific consistency conditions in specific local contexts. it does not have the capability to deduce logical consequences and make use of them to find contradictions where possible. to do this general theorem proving capability is necessary. the essential difference between the checker and a theorem prover  tp  is the following: whereas the checker can assign as values to relation symbols only specific constants in the data base  the tp can assign as values  variables with specified logical properties. the tp can carry with it the logical properties assigned to variables and use them in making new assignments as it goes along. resolution based theorem proving systems have this capability built into the unification algorithm  see nilsson  1 . 
　　　in mds the checker w i l l invoke the tp whenever it does not find enough information in the data base to evaluate a cc at a particular anchor  or whenever the validity of an assertion is to be proven universally; not merely with respect to the facts known about the specific objects in the data base. the checker will call the tp also when it recognizes a loop in an updating chain. 
　　　the deduction process and the control structure of the tp in mds is different from that of a resolution based system   see  . 
1.1. 	the primitives 
　　　there are about twenty primitives that enable one to do programming in a backtracking environment. the primitives are classified as shown in figure 1a. 
the ecp's  environmental control primitives  in figure 1a are used to establish a control environment  cenviron  within a scope. the execution of functions within the scope are affected by i t . see table i i i for a description of the ecp's. the scp's are the sequential control primitives like go  cond  etc. there are seven active primitives  goal  assert  delete  cando  ifdon  try and bind. the execution sequences for the goal and other active commands are shown in figures 1b and 1c. goal i n -
vokes appropriate definitions from data base  and does  means-end  analysis when necessary. assert and delete issue i and d commands to the instantiator  when successful. all primitives  other than the control primitives  may have cando  ifdon and try functions associated with them. a primitive can be 
executed only if its associated cando's are satisfied. if a primitive fails then one may try its associated try functions. if a primitive is successful then its associated ifdon's should be executed. only if the ifdon's are also successfully completed may the primitive return success to its parent. let us follow the operation with an example. 



of action. in both these cases the problem solver needs to be guided intelligently in making its choices. the designer has some built-in facilities for intelligent selection of choices from a set of alternatives. the problem solving state  pss  provides this guidance. this is discussed in the next section. 
1.1. 	the problem solving state 
     the pss itself is defined by templates. the pss template is shown in table vi  this table is selfexplanatory. every time the designer invokes a function or executes a  fn-call  it will create an instance of pss corresponding to the function. the net-
work of all such pss instances is the problem solving protocol. the cc's associated with the pss template provide the necessary guidance to designer. of particular interest are the cc's associated with the bindings and alternates  see tables vi  relations. let us call these  ccb  and  ccf   respectively. these cc's will specify the choices of current bindings and current function. two important notions that make this possible are the notions of similarity of two pss instances  and cc summary of a pss instance. cc summary:  ccs : 	a ccs is a record of evalua-
tions of cc's branching conditions  cando conditions and bidding conditions  made during the tenure of a pss instance. for each sequence of conditions evaluated  the cc-summary will contain: the true residues of the conditions evaluated if the condition evaluated to true  the false residue  not true part and true part if the condition evaluated to false  the residue if the condition evaluated to nei. it will also have the outcome  fn-state  of the pss instance in which the condition was evaluated  and specific variable bindings if any in terms of the kinds and types of objects used. all variable bindings in the cc-summary of a pss w i l l be specified in terms of the variables that appear in the bindings of the pss. the concept w i l l become clear in the example considered below. the consistency condition  ccb  uses cc-summaries. 
　　　the general rule is: pick for bindings the same kind and type of objects that previously succeeded in  similar pss instances; do not pick the kind and type of objects that previously failed. use cc-summaries to check whether a chosen binding is likely to succeed. if no bindings could be picked by the above rules  then pick arbitrarily. 


1 


1 

　　　　　　　thus  the designer provides the high level control structure necessary to pass on to the checker the right cc's to be evaluated  and to the instant1ator  the right model changes to be done. the designer programs themselves are independent of the descriptive data structures used. again the templates and instantiator provide a desirable isolation. the pss itself may be changed for different domains of discourse  or different problem types. in this sense  the templates and the rules of transformation  together with the pss specialize the mds to a given problem  or a given domain of discourse. the problem solving control structures are driven by the domain dependent data. the checker  tp  designer  anri instantiator are alt part of the mds. 
     most importantly there is a significant stratification of knowledge in a domain  as seen by the system. domain dependent knowledge is made available 
to the system as templates  as cc's or as tr's  the pss templates play a particularly important role. depending upon how and where a given piece of domain dependent knowledge is specified the system uses it differently. 
　　　the relative isolation of the problem solving and model management programs from the descriptive data structures themselves  make the concept of mds feasible. the f a c i l i t y to arbitrarily specify descriptive data structures as well as non-deterministic programs makes the system highly flexible and powerf u l . the checker and instantiator provide the basic foundation. these two systems are small systems 
 about 1k pdp-1 words for instantiator and 1x for checker   and the programs here can be made very efficient. these features give promise that the proposed system architecture could operate in the context of large data bases. by defining the tem-
plates carefully the mds system can be specialized to operate efficiently in a given domain. the structure of mds is described in the next section. 
1. the meta description system 
　　　the block diagram of mds is shown in figure 1. in this figure dl{d   t d   and k d  are  respectively  the definitions of descriptive language  templates and knowledge  cc's and tr's  in a domain d  the linguist  tempest  and quest are  respectively  the subsystems that accept these definitions and create representations for them. the tempest is now a working system  about sk of pdp-1 words of compiled lisp 1 programs . the checker and instantiator are presently under construction. 
the data in dlp   t d   and k d  specialize the 
mds for the domain. the rest of the block diagram is self explanatory. 
1. 	concluding remarks 
     we have introduced the basic concepts of c1systems and the mi's. the cl-systems provide a basis for the definition of the concept of machine understanding in terms of models that a machine is capable 
of building in a domain  and the way the models are used. the understanding exhibited at the problem solving  level of checker is relatively simple understanding. a deeper level of understanding is exhibited in the kinds of problems that the theorem prover can solve  see  in  . at the level of designer the level of understanding is very sophisticated. the system is able to plan and build procedures to solve problems. 
　　　in this paper we have discussed only a part of the problem solving aspects of the system; the workings of the checker and designer. the operation of the language processor will be discussed in a subsequent paper. 
     we are proposing the use of dl d   t d   and k d  to transfer domain dependent descriptive knowledge to a computer. we have briefly indicated how such descriptive knowledge could be used to solve problems in a domain automatically. 
     the specification of dl d1  t d  and k d  in a domain w i l l   of course  require a very good understanding of the concepts and problems in a domain. there are several domains where  at present  such understanding is available. the mds provides a way of transfering this understanding to a computer. the study of a cis for the mds itself might throw light 
on the problem of making a computer build its own tenjplates to suitably model and reorganize a known corpus of knowledge in a domain. 
     there is much work to be done to make the mds a viable system. it is necessary to develop a working system f i r s t . we are presently involved in this task. 

1 
