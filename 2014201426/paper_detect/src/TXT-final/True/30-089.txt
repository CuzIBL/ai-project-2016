 
we address the problem of knowledge acquisition for alarm correlation in a complex dynamic system like a telecommunications network. to reduce the amount of information coming from telecommunications equipment  one needs to preprocess the alarm stream and we propose here a way to acquire some knowledge to do that. the key idea is that only the frequent alarm sets are relevant for reducing the information stream: we aggregate frequent relevant information and suppress frequent noisy information. we propose algorithms for analysing alarm logs: first stage is to discover frequently occurring temporally-constrained alarm sets  called chronicles  and second stage is to filter them according to their interdependency level. we also show experimental results with an actual telecommunications a t m network. areas: knowledge acquisition  discovery  temporal reasoning  applications  monitoring. 
1 	introduction 
telecommunications networks are growing in size and complexity  which means that a bigger and bigger volume of notifications needs to be handled by the management system. most of this information is produced spontaneously by equipment  e.g.  status change and dysfunction detection  and this message flow must be preprocessed to make effective management possible. 
　filters based on a per-notification basis fail to perform an adequate information preprocessing required by human operators or by management application software  which are not able to process such amount of events. a preprocessing stage must decrease this information stream by suppressing superfluous notifications and/or by aggregating relevant ones. 
　some papers deal with different approaches and propose more or less complex intelligent filtering: one can use some efficient rule-based languages  like in  moller et o/.  1    and/or object-based techniques like ecxpert  event correlation expert  which builds alarm correlation trees according to some handwritten rules  nygate  
1 	knowledge-based applications 
1 . more specific techniques are also studied to capture time constraints between alarms  dousson et a/.  1; jakobson and weissman  1 . 
　in any case  the problem of expertise acquisition remains the same: how to feed the filtering system  which aggregation rules are relevant  since time information is apropos for the telecommunications alarm propagation  we also have to be able to deal with numerical time constraints. one way for such a knowledge acquisition is model-based approaches like  bibas et al.  1  or  laborie and krivine  1   which use models to build a simulator for generating relevant faulty scenarios. 
　our approach is more akin to data mining techniques: it is based on a frequency analysis of actual alarm logs of the supervised system  the telecommunications network  to discover some frequent chronicles. the frequent chronicle approach is relevant to reach the aim of reducing the alarm stream: if a chronicle corresponds to a dysfunction  we aggregate the set of alarms for the human operator and if not  we only hide the corresponding alarms. at the moment  we do not use any extra knowledge  so the rule qualification  aggregation or suppression  must be performed by an expert. 
　the original idea stands in  mannila et a/.  1  but their work focuses only on two types of chronicles  which are called episodes : the parallel ones  alarms are not ordered  and the serial ones  alarms are completely ordered . some extensions for a more complex chronicle structure are proposed  but not tested  by combining serial and parallel chronicles. moreover  only a user given upper bound of chronicle duration was allowed to be a time constraint. we extend our frequency analysis with a time representation  which is able to deal with numerical time constraints. 
　we present in this paper a system  called face - frequency analyser for chronicle extraction  that enables an expert to process some powerful analyses of alarm logs and to identify some recurrent phenomena. in section 1  we expose some definitions for later use. section 1 details the first stage of our log analyser  where frequently occurring chronicles in alarm logs are discovered; section 1 corresponds to the second stage where a graph of dependencies between chronicles is established. then in section 1  before concluding  we show some results about 

an experiment with an actual a t m network. 
1 	representation and definitions 
1 	time 
we based our alarm correlation system on crs  a chronicle recognition system similar to ixtet1  described in  dousson  1   because of its real-time capabilities to deal with numerical time constraints. 
　　for complexity reasons  this system relies on timepoints as elementary primitives and considers the time as a linearly ordered set of discrete events. a time constraint between two time-points t  and t1 is represented by an interval   which corresponds to the lower and upper bounds on the temporal distance from t1 to t1. we also define a time constraint graph as a set of time-points with time constraints between them  constraint between  and  is an interval denoted by we define a partial order {tighter than  denoted by among constraint graphs as follows: 
　a constraint graph may have many equivalent representations. in particular  there is a unique equivalent constraint graph  which is minimal  with respect to  and its computation  and its consistency check  is ensured by the well-known path consistency floydwarshaws algorithm with the complexity of 1 n1   dechter et a/.  1 . we do not allow disjunctive constraints since this problem becomes np-hard. 
　in the following sections  we systematically apply this algorithm  and so  we always deal with the minimal time constraint graph. 
1 	alarm 
a l a r m : an alarm is a pair  a t  where a is the alarm type and t is the time instant  i.e.  occurrence date  
of the alarm. 
a l a r m occurrence: an alarm occurrence is a timestamped alarm  e.g.   a  1  . 
a l a r m log: an alarm log  is a time-ordered list of alarm occurrences. for example   a  1  b1  j1   c 1  a 1  b 1  c 1  b 1  b 1 . 
　　due to time-point primitives  an alarm has no duration. if we need some  we can introduce two alarm types corresponding to the beginning and the end of an alarm. for instance  in the telecommunications management  one usually uses a when the alarm loss of signal appears  and a when it disappears. 
　we also suppose that alarms are correctly timestamped in logs  which is often the case . the message propagation delay in a network must only be taken into account during the on-line recognition stage and this feature is actually performed by crs. 
l
　　the main differences between them are the heuristics used during the recognition because crs is specially developed for telecommunications networks  but it does not matter here because we use it as a black box. 
1 	chronicle model and instance 
chronicle model: a chronicle model c is a pair  s  t  where s is a set of alarms and is a constraint graph of their instants. we also denote a chronicle with n alarms  n is called the size of  
for example  figure 1 shows a breakdown link chronicle  where los stands for loss of signal and lof stands for loss of frame. 

unconstrained chronicle model: an unconstrained chronicle model  denoted by  s      is a chronicle model with no time constraint and no order between alarms. we also use alarm types for the simplified notation of an unconstrained chronicle model as in the following example: abb stands for   a t1   b t 1    b t1  .  1 . 
chronicle instance: a chronicle instance c of a chronicle model c is a set of alarm occurrences which is consistent with the time constraints of c. for example  { a  1  b  1  a  1 } is an instance of the left chronicle of figure 1. 
subchronicle instance: an instance c is a subchronicle instance of an instance c' iff c is a subset of c'  e.g.  { a l  c 1 } is a subchronicle instance of {{a  1  b 1  c 1 } but not of { a 1  c 1 } . 
subchronicle model: a model c is a subchronicle model of c  denoted by c  c  iff from any instance of c  we can extract a chronicle instance of c  e.g.  in figure 1 the two right chronicle models are subchronicle models of the left one . this relation defines a partial order on chronicle models. 

figure 1: chronicle and subchronicles models. 
superchronicle: c  resp. c  is a superchronicle instance  resp. model  of c!  resp. c   which is denoted by c  c'  resp. c   resp. c  is a subchronicle instance  resp. model  of c  resp. c . 
theorem 1 a chronicle model c =  1  t  is a subchronicle model of c =  s' t'  iff s s' and  
　for brevity  hereafter chronicle stands for chronicle model and instance stands for chronicle instance. 
!
of course  abb is equivalent to bab or bba. 
	dousson and vu du'o'ng 	1 

1 	instance set and frequency 
given an alarm log  and a recognition process  we denote  the set of instances of c recognized in  of course  this set depends strongly on the strategy implemented in the used recognition tool. 
　for our algorithms  we only need that the strategy guarantees the following property: 
property 1  
this property means that an alarm occurrence can't belong to two instances of the same chronicle model. 
　for instance  with  given in section 1  the instance set of the unconstrained chronicle ab could be: 

  etc. 
frequency of chronicle: given an alarm log  the frequency fq c  of a chronicle c in is the cardinal of for example  with given in section 1  the frequency of the unconstrained chronicle ab is 1. 
frequent chronicle: given a threshold c is frequent in we suppose that 
the threshold 
　　as our algorithms work with only one alarm log at a time  we now use the simplified notations and instead of respectively  and  
1 	discovering frequent chronicles 
this section presents algorithms to discover all the sets of frequent chronicles of size i  denoted by  
l e m m a 1 if a chronicle c is frequent in  all its subchronicles are also frequent in  
　a chronicle  won't be frequent if one of its subchronicles is infrequent. otherwise  if all the subchronicles of are frequent  will be a candidate for  i.e.   may be frequent . for example  with the unconstrained chronicle abc  if one of its subchronicles a  b  c  ab  ac  bc is infrequent  abc is also infrequent; otherwise  abc may be frequent and is a candidate. in fact  if we know that ab is frequent  we also know that a and b are frequent. thus we only need to check the frequency of ab  ac  bc  chronicles of size i - 1 . we denote  the set of candidate chronicles for  
　　so the intuitive solution to compute is to generate all the possible chronicles of size i from one of its frequent subchronicle of size i - 1  if ab is infrequent  we do not need to generate  and then to check its frequency. 
　based on these analyses  our main algorithm builds iteratively the exhaustive set of all frequent chronicles  see figure 1 . it starts by computing  which corresponds 
1 	knowledge-based 	applications 
to the set of all the frequent alarms in at an iteration i  it first computes the set from  function generatecandidate . it then calculates the frequency of each candidate and keeps only the frequent ones in its main loop ends at the iteration where there is no frequent chronicle of size  

figure 1: main algorithm 
　the following sections only give algorithms for the chronicle generation stage because we use crs to calculate the frequency: chronicles are modeled into crs  which receives  as alarm input stream and then the number of times of recognition performed by crs for each chronicle gives us the frequency of the chronicle. 
1 	candidate generation 
this section presents the algorithms to compute  from 

　　there are two subtasks to build a candidate  computing a set of i alarms occurring frequently together  i.e.  a frequent unconstrained chronicle  and establishing the time constraints between these alarms. therefore  in order to compute  we first compute the set of the candidate unconstrained chronicles of size that may be frequent. the set  of frequent unconstrained chronicles of size is then computed from  eventually  we establish time constraints between alarms of to generate the final candidates of  see figure 1 . 
figure 1: candidate generation 
　the frequency of unconstrained chronicles is easily computed by using the following lemma: 
l e m m a 1 	with an unconstrained chronicle c we have: 
   where. n ai  is the number 
of alarms  of c  whose type is ai. 
     1 here   r  stands for the greatest integer less than or equal to a real number r. 

　for example  with the alarm log given in section 1  the frequency of the unconstrained aab is: 

unconstrained candidate generation 
first   is used to construct the set  of the un-
constrained chronicles corresponding to the chronicles of 
 obviously   we then compute the set 
from t. lemma 1 enables us to suppress any chron-
icle including an infrequent subchronicle  see figure 1 . 

figure 1: unconstrained candidate generation 
for example  with the alarm log given in section 1  
           = 1 and i = 1  we have t = {ab ac bc bb} and thus  	- {a  b c}. 	by adding to ab each element of 	one by one  we generate the three candidates aab  abb  abc 	for  but aab is suppressed because one of its subchronicles  a a  is infrequent. we process similarly for ac  bc  bb and 	finally 	obtain {abb  	abc  	bbc . 
　with this exhaustive generation  one chronicle may be generated many times from those of t before checking its candidature for   e.g.  bbc is generated twice  from bb and from bc . to avoid this redundancy and also to reduce the number of generated chronicles  our optimized algorithm orders completely the alarm types of   e.g. in lexical order  and only adds to a chronicle  1     of r an alarm whose type is greater than or equals to the greatest alarm type of s  see example in figure 1 . it can be proved that this optimization reduces in half the number of chronicles for which one needs checking the candidature for  
establishing t i m e constraints 
once  is computed  the time constraints between the alarms of its chronicles are established by using theo-
r exhaustive generation optimized generation ad ac 
bb 
bc aab  abb  abc aac abc acc 
abb  bbb  	bbc 
abc  bbc  	bcc abb  	abc acc 
bbb  	bbc bcc figure 1: exhaustive vs. optimized generation for 
 the bold chronicles are the candidates in  
rem 1. the idea is that the time constraints between two alarms in the chronicles of are deduced from the time constraints between these alarms in the chronicles 
straint 	graph 	constructed 	from 	{a b c} 
these constraints is consistent 	so 
figure 1: establishing time constraints. 
1 	discovering chronicles of size 1 
the time constraints for the alarms are originally established at this stage and then are used to correlate alarms in the chronicles of size greater than 1. using the same strategy as described above  our algorithm computes firstly  then establishes the time constraints between alarms of the chronicles of  
　based on the distinct instances of a frequent chronicle ab in the alarm log  we establish the time constraint between a and b. a constraint  can be accepted as the time constraint between a and b if all the instances of  respect  but if all the instances of 
 are used  some noises may be taken into account. in order to avoid noises  one should use an instance threshold  instances 
of tab should be considered. 
　among these acceptable time constraints  one should use some criteria to select the good ones for a and b. in order to find only tight constraints between alarms  we select only the constraints so that their duration and the distance between a and b are as small as possible since 
alarm effects are rapidly propagated in telecommunications network. more concretely: 
  from the acceptable constraints  select  so that  is the smallest  criterion of the tightest constraint . 
	dousson and vu du'o'ng 	1 

  from the selected constraints  select  so that  is the smallest  criterion of the 
shortest distance . 
　searching good constraints  at most two  can be done using the algorithm a*. these constraints can be considered as the disjunctive constraint between a and b. for example  with the instance threshold  = 1 and the alarm log  = 1  b  1  a  1  b  1  1  1  b  1  a 1   it is easy to find that  -1  -1  and  1  are two good time constraints between a and b. 
   in fact  crs does not accept disjunctive constraints  therefore such ones will be unified to obtain the constraint for crs. in the above example  the constraint  will be  -1  1  instead of - 1   -1   1  1  for crs. another possibility could be to define two chronicles ab in crs  one with  -1 -1  and another with 
 1 . 
1 discovering frequent chronicles with chronicles known by experts 
if we have some expertise  we can use it to improve the discovery process: all known chronicles of size i are added to  moreover  in order to determine whether the chronicle c is frequent  we use theorem 1 to check if c is a subchronicle of one of the known chronicles. if it is  we already know that c is frequent. otherwise  we have to calculate the frequency of c. taking this remark into account  the number of chronicles to calculate the frequency may be much reduced. 
1 	c o m p l e x i t y 
at an iteration i  the global complexity of our algorithms is the sum of the following complexities: 
unconstrained chronicle generation  figure 1 : for each unconstrained chronicle  s'    of size i  checking if one of its subchronicles of size 
belongs to t can be done in time with binary search; because  has i unconstrained subchronicles of size i - 1   checking the candidature 
of  f o r c a n be done in time  
the number of unconstrained chronicles to check the candidature for 	can be overvalued to 
overvalued to 	which is a little better than one of  mannila et al.  1 . 
unconstrained chronicles frequency calculation: it requires q i  time for a unconstrained candidate of size i  lemma 1 ; so this complexity is  
establishing time constraints  figure 1 : for each unconstrained chronicle   1     of establishing the time constraint for one of its pairs of alarms can be done in time so  constructing a constraint graph corresponding to  1     requires  time. in addition to this complexity  
checking the consistency of a constraint graph of i 
time. therefore this complexity 
1 	knowledge-based applications 
constrained chronicle frequency calculation : 
 dousson  1  had shown that: for a chronicle of size i  the propagation when one of its alarms arrives requires  time; so we have a complexity of  for the chronicle; as the internal mechanism of crs generates on average i instances for one recognized  and i1 in the worst case   the average complexity of the frequency calculation is in the worst case . so this complexity is  and  in the worst case . 
1 	dependency filtering 
the number of frequent chronicles is always great. thus  once these chronicles are discovered  one should filter them to find the relevant ones. what should be the criteria of relevance  recall that our goal is to discover expertise for monitoring  so the discovered chronicles have to be able to identify phenomena produced during the functioning of the system. the question here is: does a chronicle signify itself a phenomenon or is it always included in a more complex one  for instance  is ab a phenomenon or does ab always come with other alarms  and so  the relevant chronicles may be abc or abb   
　we base the dependency relationship between a chronicle and one of its subchronicles on the alarms of the subchronicle that are not included in any instance of the superchronicle. 
　we define the independent instance set between two chronicles c and c as follows: 

　in term of dependency level  one can say that the chronicle c depends completely on all its subchronicles  i.e.  the phenomenon corresponding to c included the phenomena corresponding to all its subchronicles. if there is c so that  is high  one can say that 
the influence of c is not only showed in c  but also outside c. therefore  if  is a relevant chronicle  c is also relevant. on the other hand  if  is low  one can say that outside c  the influence of c is not remarkable. in other words  c should only be considered as an excerpt of c'. 
theorem 1  
proof: this is due to the fact that for any instance of  is superchronicle of c   there is at least one dependent instance c of c   
the following recursive formula gives an 

proof: recursively: suppose that the formula is true for any superchronicle c  theorem 1 gives it for c. d 
　let us suppose that the recognition process is contructed so that the instances of chronicles are recognized as soon as possible  first-coming instances . namely  the process guarantees the following property  crs does : 
property 1 for any chronicle its instance set  is totally ordered by the relation   before  between two instances of c  where is defined as follows: 
	for example  	with the alarm log given in sec-

　with our algorithms  we can prove the following theorem: 

　thanks to theorem 1  we can easily calculate the independent frequencies for chronicles with distinct alarm types. for the other kind of chronicles1  we can calculate their independent frequencies by exhaustive algorithm  i.e.  using the definition  and/or calculate the upper bounds for estimating purposes. 

o u t p u t of the filtering process 
based on the above analyses  the output of the filtering process is a graph g representing the dependency relationship between the frequent chronicles. there will be 
a link from c to c if  and  = 1. 1 
　a chronicle c is considered as independent if its independent frequencies against all its independent superchronicles greater than zero  i.e.  c has no links with its independent superchronicles in g. all the chronicles that have no superchronicle are independent. 
　figure 1 shows the dependency graph  which is computed from the alarm log  given in section 1 with 
 = 1. we exhibit here four independent chronicles a b b   ab  abc and bbc  to simplify the figure  the corresponding constraint graphs are not shown . 
1
　　 fortunately  first experimental results show that this kind of chronicles is relatively rare. 
1 one can define a dependency threshold for filtering. 

figure 1: dependency graph of the frequent chronicles. 
1 	experiment and results 
the first experiment of our approach was with the data from the french packet switching telecommunications network. the input data was a log of 1 alarms of 1 different types and corresponded to a duration of 1 hours. one run of our algorithms  i.e.  for one given value of fqmin  took about 1 minutes  and many runs exhibited a dozen of independent relevant chronicles  due to the size of the input  frequent phenomena are relatively rare . since the network is well known  this was more a validation experiment than an actual knowledge acquisition. in spite of that  one of the discovered chronicles was unknown but relevant to experts. moreover  it was a non-trivial chronicle in the sense that it was out of usual monitoring knowledge: this chronicle showed the influence of a non-telecom unit - a secondary power supply failure - with an alarm indicating the too high temperature on an equipment  the reason is that the air conditioning system was out of order since it was plugged on the secondary power supply . 

figure 1: experiment with a t m network data. 
　the second application is related to the first experimental national atm  asynchronous transfer mode  network. as this network is more recent  the challenge for our algorithms is to help efficiently experts with monitoring knowledge acquisition. the amount of data is more significant since we have a one month log with about forty thousand alarms dispatched through about 1 different types. for this application  an alarm type consists of the actual alarm type and its localisation: for instance  if telecommunications equipment are able to emit a los  loss of signal   we define a los-lyon for the lyon switch  a losjparis for the paris switch 
	d1uss1n and vu du'o'ng 	1 

and soon . figure 1 shows some experimental results. moreover  we can notice that we have very few chronicles containing twice the same alarm type or more; hence  theorem 1  section 1  gives us the exact independent frequency. 
　at this stage  we already know that some of them are relevant and some others must be filtered during on-line monitoring. figure 1  at the beginning of the paper  shows such a discovered chronicle: the first group  lofclear  losclear  linkup  corresponds to the connection re-establishment and the second group  lofactive  losactive  link down  indicates a connection breakdown; this chronicle signifies an unstable connection link  which fails in the 1 seconds following the re-establishment; this is a particular chronicle of the network and it is unpredictable according to the rules of recommendations of telecommunications management since it is a recurrent malfunctioning phenomenon. however  to improve the results  we need more investigations with telecommunications monitoring experts. 
1 	conclusion 
we present a chronicle discovery process that is very helpful for experts to discover monitoring knowledge from alarm logs. it is based on the key idea that a chronicle is frequent only if its subchronicles are frequent  like the work of  mannila et a/.  1  but the chronicle formalism is more expressive than their episode-rule structure . our process is also able to take into account and to establish numerical time constraints between alarms since this information could be discrepant for the fault detection. 
　the use of the same chronicle recognition system and the same chronicle model guarantees that semantics of recognition remains the same during the off-line  knowledge acquisition  and on-line processing  monitoring . 
　we also propose a method for sorting the discovered chronicles and exhibiting the most relevant ones. the main advantage is to focus the attention of an expert on few  about one third  discovered chronicles to understand and to be categorized for the monitoring process. 
　the first experiments show that our algorithms are able to deal with an amount of data compatible with the requirement of a discovery process and the preliminary results are quite promising since many discovered chronicles could be explained by the corresponding itu 1 recommendations. we will interact with equipment experts to validate more chronicles but we already know that this is a good way to acquire knowledge for monitoring a telecommunications network  like atm . we noticed that the approach also exhibits some non-trivial scenarios  which are very rarely modelled by experts. 
1
　　this is a limitation of our algorithms: we only discover chronicles that correspond to the phenomena repeating on the same equipment. in future work  we will introduce variables in chronicles to capture similar phenomena occuring on different places in the network. 
1
international telecommunication union 
1 	knowledge-based applications 
　future work will focus on addition of variables in discovered chronicles and on introduction of some knowledge in the telecommunications domain to ease the chronicle generation stage. experiments with the a t m network will also be pursued and another test on a sdh  synchronous digital hierarchy  network is planned. 
1 	acknowledgements 
thang vu duong is currently a ph.d. student at the 
cnet  r&d centre of france telecom   and is grateful to his advisor  malik ghallab  laas/cnrs  toulouse   for helpful suggestions. 
　the authors would like to thank thierry vidal  enit  tarbes   the gaspar project team for useful discussions and especially  philippe dague  lipn/cnrs  paris  for valuable comments on this paper. 
