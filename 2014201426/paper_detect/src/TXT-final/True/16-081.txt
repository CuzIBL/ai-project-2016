c o r r e o p o r t d o n c e i n 	l i n e 	d r a w i n g s 	o f 
	m u l t i p l e v i e w s 	o f 	o b j e c t s 
charles t h o r p e and steven shefer 
carnegie-mellon university 

a b s t r a c t 
as an object moves relative to a viewpoint  its appearance changes. 
in this paper we analyze the topological constraints on the changing appearance of line drawings of objects as the objects or the camera move. we start with a huffman-clowes junction dictionary. we show a way of deriving vertex types from junction types by inference rather than by table look-up. we then derive three constraints on the change in appearance of an object: conservation of vertices  conservation of vertex type  and conservation of adjacencies. using these constraints  we develop a matching algorithm that traces vertices from one image to the next. examples are given showing correct matching tor simple objects  including partially visible objects and multiple objects in the same scene. 
1 . i n t r o d u c t i o n 
　in this paper we examine the appearance of trihedral vertices from different viewpoints. this analysis is used to derive the effects cf changing viewing position on the appearance of line drawings of trihedral objects  that in turn helps solve the problem of identifying the same vertices in different pictures. the objects we consider are trihedral blocks; that is three planar sides meet at each vertex. the drawings are initially presumed to be perfect. the change in viewing position can come either from moving the camera  as in stereo vision  or from moving objects. 
　the first part of this paper examines the change in appearance of a vertex as the viewing angle changes. we start out with huffmanclowes enumeration of junctions  the two-dimensional images of three dimensional vertices. we show a way of deriving vertex types from junction types by inference rather than by enumeration and table look-up. we then develop a  transition table   showing how the image of a vertex can change from one type of junction to another as the viewpoint changes. 
　in the second part we show a matching process that relies on topology to identify the same vertices in two line drawings of the same scene. the only information used is line labels and connectivity. these give us three constraints: conservation of vertices  conservation of adjacencies  and conservation of vertex types. this process works for scenes with more than one object or with only part of an object visible. we discuss extensions and show several simple examples. 
this research was sponsored by the defense advanced research projects 
1. trihedral vertices 
1 introduction: huffman-clowes junction dictionaries 
　huffman  and clowes  independently developed  junction dictionaries   lists of possible appearances in line drawings of all configurations of trihedral vertices. they first note that there are only two types of edges: concave and convex. the two planes that form the edge divide space into four sections  with the edge appearing topologically different from each section. in the case of a concave edge  the edge will be obscured from three of the sections and will appear simply as a concave edge from the fourth  labeled  -  by huffman. for a convex edge  the edge will be visible from three sections. from the front  it will appear as a convex edge  designated with a  +  . from either side  it will appear as an occluding  obscuring  edge  with the nearer surface blocking the farther surface from view. huffman labels occluding edges with an arrow along the edge such that the surface on the right of the arrow occludes the surface on the left. 
　trihedral vertices are formed by the intersection of three surfaces  which is also the intersection of three edges. there are two ways of enumerating all possible trihedral vertices. the first deals with the types of edges that meet at the vertex. each of the three edges can be either convex or concave. this gives four different vertex types: all three edges convex  two convex and one concave  one convex and two concave  or all three concave. 
　the second method deals with the space filled by an object  and gives more geometric intuition. the three planes that form a trihedral vertex divide space into octants. some of the octants can be filled and the rest left empty. the combinations of filled and empty octants that give single  connected objects with three surfaces meeting at the center have one  three  five  or seven filled octants. these vertex types are usually named by roman numerals according to the number of filled octants. each corresponds to one of the types enumerated by their edges: type i is all three convex  type iii is two convex and one concave  type v is one convex and two concave  and type vii is all three concave. 
　huffman and clowes point out that each type of vertex can be viewed from each of the empty octants. the image of a vertex is called a junction. by viewing all vertex types from all empty octants they construct a  junction dictionary  showing all topologically different types of junctions that can occur in the trihedral world. table 1 shows all junctions  each listed by type of vertex of which it is an image. 
1 reasoning from junction type to vertex type notice in table 1 that each junction type can result from only one 

agency  dod   arpa order no 1  monitored by the air force avionics 
laboratory under contract f1-k-1. the views and conclusions kind of vertex. for instance  the arrow-shaped junction with one + contained in this document are those of the authors and should not be interpreted and two   labels can only be the image of a convex-convex-convex as representing the official policies  either expressed or implied  of the defense  type i  vertex. so if the labels of all lines on a junction are known  it advanced research projects agency or the us government. 
1 c. thorpe and s. shafer 

is possible to tell what three dimensional configuration must be pictured. 
the final case is two surlaces visible and the third edge hidden 
　this can be explained by edge types lines with + or arror by surface 1 the hidden edge is formed by the third surface and labels must be inages of concave edges lines with labels are surface 1 since this edge is under surface 1. surface 1 must be in images of concave edges. so every junction with three lines visible front of surface 1 at that point this means that the intersection of and labeled is easily traceable to the type of vertex that formed it. surfaces 1 and 1 must be concave  since surface 1 sticks out over for instance  the y junction labeled with two arrows and one minus surface 1. the other edge of surface 1 must then be occluding. must come from the type iii configuration  since two of its edges are then the hidden surface must run from the occluding edge to the convex and one concave. hidden edge  and must form a concave edge with surface 1. this is 
                                                       the one convex two concave case. the two symmetric cases of this are shown in figure 1. 
　if the hidden edge is within the arc dbe  the opposite situation traded for knowledge of hidden line position. this information exists. the one visible surface is the area outside of arc abc could come from other sources  such as intensity or orientation.  figure 1 . edges ab and bc are still occluding  and hence convex  for instance  in urban scenes there is very often a vertical edge at but the direction of their labeling arrows is reversed. the object lies each vertex. if the camera geometry is known  it is possible to entirely under the visible surface  and the invisible surfaces must predict the direction in the image of the vertical edge. if the vertical meet in a concave edge. this is the two convex and one concave edge is the missing one in an l junction  it would be possible to vertex type. 	determine the type of the vertex. 

c. thorpe and s. shafer 1 
1 effect of motion on appearance of trihedral vertices 

　as the viewpoint moves relative to the vertex  the appearance of the vertex may change. ac long as the viewpoint stays in one octant  the image of that vertex remains the same type of junction. but when the viewpoint crosses into another octant  the vertex will appear as a different junction type. there are two strong constraints on the change in junction type. the first is conservation of vertex type. since the underlying vertex type remains the same  the junctions must all be images of that type of vertex. so  for instance  a junction in row i of table 1 can become  due to viewpoint change  any other junction in row i  but cannot become a junction from rows iii  v  or vii. the second constraint is that each octant is adjacent to three other octants. as the viewpoint changes  it can only go from an octant to one of the three adjacent octants. so the junction type can only change to the junction type derived from an adjacent octant. these two constraints give a transition graph  showing all possible junction type transitions  as in figure 1. the conservation of type constraint splits the graph into four disjoint parts  one for each type of vertex. each part of the graph has eight nodes  one for each octant  with 1  1  1  or 1 of the nodes marked  invisible  because they correspond to viewing positions behind the object. 
　another constraint comes from the direction of the change. changing octants means crossing one of the three planes that meet at the vertex. if the motion of the camera is known to be parallel to one of the planes  or is known not to be large enough to cross a plane  the possible junction type transitions are constrained. for instance  in interpretation of aerial photgraphs of urban scenes it is often easy to tell whether the camera has crossed the plane of a wall furthermore  the motion of the camera will be nearly parallel to the plane of flat roots. these constraints can greatly reduce the possible appearance of vertices. 
1. c o r r e s p o n d e n c e 
　in this part of the paper  we show how to find correspondences consistent with the topological and line label constraints. studying topological constraints in isolation will make it easier to incorporate them into a full system which makes use of quantitative as well as topological information. 
　finding matching points is an essential step in tracking object motion and in calculating depth from stereo images. we discuss tracking the vertices of trihedral blocks from one line drawing to another. the two views can come from either stereo or from object motion. we make no assumptions about camera geometry  such as known epipolar lines   fixed relations among objects  or magnitude of the change between images. we assume that some other process has done huffman-clowes labeling on each image. this carries with it implicit assumptions of completeness of the scene and of a  general viewpoint   that is  no coincidental alignments in the image. 
1 constraints 
　the object of correspondence is find a match in the second image for each point in the first image. there are three constraints that a complete  consistent set of matches has to satisfy: conservation of vertices  conservation of type  and conservation of adjacencies. 
　conservation of vertices means that since the same objects are in each image  the same vertices must also be present. they may not be visible in each image  however. under perspective projection  it would even be possible to have all vertices that are visible in one image invisible in the other. 
　conservation of type means that a vertex must always keep the same shape. although its appearance may change  that change is constrained  see section 1 . since we assume that all lines are labeled  every junction's type is known. a junction in one image can therefore only match a junction in the recond image that is the image of the same type of vertex. 

1 c. thorpe and s. shafer 
　conservation of adjacency is really conservation of edges. if two junctions in one image are directly connected by an edge  the junctions they match in the second image must have a line connecting them or the possibility of an invisible edge between them. 
　these constraints allow some types of noise in the scene. missing lines can be handled by the  invisible edge  criterion. 
extra lines cannot be handled changing angles can be tolerated  since quantitative geometry is not important  but they must not change from concave to convex or vice versa  since vertex types  and thus edge types  must remain fixed. changing line length is permitted  which may be especially useful in real scenes. but polygonal approximations to curved surfaces will probably not work  since it is difficult to guarantee the same number of vertices in two different polygon fits. 
1 matching algorithms 

1.1 correspondence graph 
　our matching algorithms are based on a central data structure  the correspondence graph. each node in the correspondence graph is composed of a junction from one image and a junction from the second image  where the two junctions may be images of the same actual vertex. node formation uses the  conservation of type  constraint in figure 1  junctions b and t are both images of a type i vertex  so bt would be a node. junction u is an image of a 
　type iii vertex since b and u come from different types of vertices  they cannot match  so bu would not be a node. 
　invisible vertices must also be allowed for in the graph. unless we know otherwise from outside sources of information  we must assume that there can be any number of invisible vertices and that they can be of any type. we create the special junction  invisible  that can match any or all of the junctions. figure 1 shows all the nodes formed from the l blocks in figure 1. 
links in the graph connect nodes that are  consistent . 
consistent means that both nodes could be part of the same overall match. inconsistent means that if one node is correct  the other is incorrect. consistency is defined using the  conservation of adjacency  constraint and its logical implications. we define the 

consistent only if the distance from x to y in one image was exactly the same as the distance from x' to y  in the other image. for instance  node al is consistent with node ir since the distance from a to i  two edges  is the same as the distance from l to r. the difficulty with this is that all vertices might not be visible  so it might not be possible to toil what the shortest distance is between two junctions. the way we handle this is to calculate the upper and lower hounds of the distance. the upper bound is the shortest 
distance using only visible lines. the lower bound uses invisible lines wherever they could possibly run then the criterion for compatibility is that the range of distances must overlap. that is  the lower bound of the distance from x to y must not exceed the upper bound of the distance from x' to y' and vice versa. 
　in figure 1  the upper bound on the distance from a to e is 1. in order to calculate the lower bound  we have to decide if there could be an edge directly connecting a and e. this takes some reasoning about the planes that form the surfaces of an object. if the lines are labeled  it is easy to tell which lines and points lie in the same plane. a line labeled + or lies in the planes visible on either side of it. an occluding line lies in the hidden plane and the occluding plane but not the occluded plane. then in the example  lines fk and kj lie in the same plane. so do lines jl  ih  and hg. so points f  g  h  i  j  and k all lie in a plane  called plane 1. sim.larly  if there is an edge from e to a. then a. e. f  g. and h all lie in a plane  plane 1. since f  g. and h all lie in both plane 1 and plane 1 the planes must be identical. adih is also a plane  and since a. i  and h are in plane 1  b must also be. so must c and d. but then the whole figure lies in plane 1  and is not a trihedral figure at all. this argument can be formalized and extended to show that in a line drawing of a trihedral object there can never be just one junction with only two lines accounted for. if there were a line from a to e  g would be the only vertex with two known edges. since this is impossible  we infer that there must be at least one hidden vertex  and no direct connection from a to e. so the lower bound on the distance from a to e is two. 
　the lower bound on the distance from  invisible  to a junction is the distance from that junction to the nearest junction with less than three lines  plus one. the upper bound is infinite  since the connections between invisible junctions are unknown. figure 1 shows all the links for node al. 
1.1 searching the correspondence graph 
a complete match consists of a subgraph of the correspondence 

distance between two vertices to be the least number of edges that graph such that the nodes contain every junction in each scene and must be traversed to get from one vertex to the other. if all vertices are all linked to each other. a completely connected subgraph is and all edges were visible in an image as junctions and lines  it called a clique. finding cliques of a given size is np-complete  would be straightforward to determine the distance between two which suggests that the best algorithms will be exponential. the junctions. then  given two nodes xx' and yy.' they would be algorithm we use for search makes no claims to optimality. 

　wo define two sets of nodes  the set i of instantiated nodes  the clique  and the set p of possible nodes  to extend i . initially i is empty and p is the correspondence graph. at each stop some node n from p is considered for being moved to i. there are two cases: either n is included in i or it is excluded. if it is excluded  it is removed from p. the new i is the old i and the new p is the old p minus n. if it is included  the now i is the old i plus n. to generate the new p  we take the old p minus n intersected with the links of 
p. this guarantees that all members of p are always linked to all members of i  and all members of i are linked to each other. each case  n included and excluded  is generated and passed recursively to the search procedure. if at any point the union of i 
c. thorpe and s. shafer 1 
and p does not contain nodes that contain each junction  the conservation of vertices constraint is violated and that branch of the search terminates. figure 1 summarizes the algorithm  and figure 1 traces its execution for a few steps  following the  inclusion  branches. 
1.1 invisible vertices 
　in either of these cases invisible vertices must be handled as a special case. normally  a vertex is allowed to have only one match. for the special symbol  invisible   however  more than one match must be allowed because there may be more than one invisible vertex. on the other hand  a visible vertex only has a limited number of invisible neighbors. there is a special check that  if x matches x' and x has some number i of invisible neighbors  only i of the neighbors of x' may match  invisible . without this check we would generate matches such as a matches l and everything else matches  invisible . yet we know that  given a matching l  one of l's neighbors must match br one must match h  and only one of l's neighbors can match  invisible . 
1 comments and extensions 
　there may be more than one possible complete  consistent match for a pair of objects one cube  for example  can match another in 1 legitimate ways one vertex can match any of eight others. having fixed that. the cube can be rotated to 1 different positions. these matches are all topologicaly valid. 

1 c. thorpe and s. shafer 
　the algorithm will also produce 1 incorrect matches for the cube  each the mirror image of a correct match. since the only information used is connectivity  and not sidedness  any object with a plane of topological symmetry will have spurious mirror image matches. these could be removed by using quantitative information. we currently use an interactive program. 
　the constraints used make no assumptions about all parts of an object being visible. so without modification the routines can be used to match part of an object with an object template or with another partial view of the object. there are two caveats. first  incomplete images are usually harder to label with huffman clowes line labels. this may cause ambiguities in the matching  see below . second  incomplete images have more invisible vertices and more invisible edges. this allows lots of matches where only a few vertices are matched and all the rest match  invisible . these are all legitimate possibilities  and examples can deconstructed in which they are the only correct matches. put if it is known in advance that most of the vertices in the incomplete image are visible in the other image  either the search can return matches with the fewest  invisibles  matches or an upper bound can be set on the number of invisibles. 
　it is not always possible to assign unique huffman'clowes labels to an image. if more than one possible labeling exists  the correspondence process can be run separately with each possible labeling. then incorrect labelings may have no possible match  or only the match all invisible . so correspondence can be used to refire line labels if multiple views arc available. 
　trihedrality is at the basis of the assumptions about invisible lines. extending the algorithm to deal with non-trihedral objects would be possible  but the number of complete  correct matches possible for a pair of images would increase unmanageably unless other constraints were added. additional information could include  for example  knowing which vertices were non-trihedral  or knowing how many non-trihedral vertices there were. 
if quantitative data is available  it can be used in several ways. 
conceptually  the matching process could be run just using topological data  and the quantitative information used in a postprocessing step to find the most likely match or matches. it would be equivalent  but probably more efficient  to include all the data from the beginning. one scenario is that vertex positions are known to within some distance  or to within so many pixels of an epipolar line. then the possible matches are constrained  and many fev/er nodes would have to be created and searched. if positions are known precisely  they can be used to check the validity of the match. ullman   aggarwal and his group  1   ganapathy   and lawton 1   have all worked with various numbers of points visible in two or more images  and the available constraints. asada  yachida  and tsuji present a partial transition table use it with quantitative data in . 
1 examples 
we have implemented and tested the correspondence algorithm. 
here we show the results for a few simple figures. in each case  the images were labeled  with huffman-clowes line labels  by hand. each of these simple images has a plane of symmetry  so the mirror-image program was run to remove reflections from the output. all the resulting matches are topologically correct. 
　for the l blocks of figure 1  the program found five possible matches  see table 1 . the first match is the obvious one  which can be visualized as rotating the block approximately thirty degrees about a vertical axis. the second match is the same as the first  

except that it presumes that there are additional invisible vertices seen in neither view. the third match can be thought of as tipping the block onto its back  so that the horizontal rjart of the l becomes the vertical part and vice versa  then rotating it some 1 degrees. the last two matches have no vertices visible in both images. the difference between these two is that the last one allows for vertices that are not visible in either image. 
　figure 1 shows the same l-shaped blocks as figure 1  but with only part of the left-hand block visible. the additional constraint was given that there was a total of 1 invisible vertices. this eliminated matches in which one or two vertices from the partial block matched visible junctions in the right hand image and all other vertices matched  invisible . the first two matches correspond to match 1 in table 1  and the second two to match 1. the difference between matches 1 and 1 is in the match for h without quantitative information  it is impossible to tell whether h matches s  as in match 1  or t  as in match 1 . the same holds for matches 1 and 1. 
　figure 1 shows a block with a corner cut out. it was matched against itself  with the extra constraint given to the program that there were no invisible type vii vertices. this is a strong constraint  since it forces m to match itself. the results are shown in table 1. 
　finally  in figure 1 each image contains two objects  the l block and the block with the corner cut out. the program was told that there were no more than seven invisible vertices. it generated 1 matches: the three for the cutout block  times three for the l blocks  the last two l-block matches were eliminated because of the limit on invisible vertices   times a factor of two for different interpretations of the hidden part of the cutout block in the left image. there were three incorrect mirror images for each correct match  since the l block and the cutout block each have their own plane of symmetry. 


1. l inv  m inv  n inv  of pk oj rl s inv  th uc vd 
 inv  inv  
1. l inv  m inv  n inv  of pk oj rl sh t inv  uc vd 
 inv  inv  
1 lf m inv  n inv  o inv  ph qc rd s inv  tk uj vi 
 inv  inv  
1. lf m inv  nh o inv  p inv  oc rd s inv  tk uj vi 
 inv  inv  
table 1: matches for figure 1 
c. thorpe and s. shafer 1 

figu re 1: block with one corner cut out 
1aa bb cc dd ee ff gg hh li jj kk li mm 
 invisible  invisible  
1. ac bd ce df ea fb gi hj ik jl kg lh mm 
 invisible  invisible  
1. ae bf ca cb ec fd gk hi ig jh ki lj mm 
 invisible  invisible  
table 1: matches for figure 1 

