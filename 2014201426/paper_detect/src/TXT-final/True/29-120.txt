 
nonmonotonic reasoning is virtually absent from industry and has been so since its inception; the result is that the field is becoming marginalized within ai. i argue that this is because researchers in the area focus exclusively on commonsense problems which are irrelevant to industry and because few efficient algorithms and/or tools have been developed. a sensible strategy is thus to focus on industry problems and to develop solutions within tractable subtheories of nonmonotonic logic. i examine one of the few examples of nonmonotonic reasoning in industry - inheritance of business rules in the medical insurance domain - and show how the paradigm of inheritance with exceptions can be extended to a broader and more powerful kind of nonmonotonic reasoning. finally i discuss the underlying lessons that can be generalized to other industry problems. 
1 introduction 
nonmonotonic logic  the formalization of plausible reasoning  is invisible and virtually non-existent in industry. it is in a worse position  in this respect  than most other areas of artificial intelligence. it is true that ai researchers have long accustomed themselves to the huge gap between ai hype  which promises great things  e.g.  housekeeping robots  and ai reality  which delivers much less  robots that have a hard time collecting tennis balls . 
　yet ai as a whole is quite visible in industry and the marketplace. although ai has delivered less than was anticipated one or two decades ago  there is enough going on: expert systems are used in medical diagnosis  circuit configuration  and financial applications; dictation systems for restricted domains are on the market. unfortunately  such examples don't include anything that is based on nonmonotonic reasoning.1 
     1 it might be argued that fussy logic  zadeh  1   which also claims to capture plausible reasoning  has been used in industrial applications. without commenting on the merits of this argument  we merely note that the fields of fussy the absence of nonmonotonic reasoning from industry may have been small cause for concern in the early eighties  when ai showed endless promise  research money was plentiful  and the field was very young. as we approach the end of the nineties  however  we have reason to worry. funding has shrunk  and there is little tolerance for research programs that don't promise - and deliver - practical results in the foreseeable future. there is the real danger - if nonmonotonic reasoning and industry continue to inhabit separate worlds - that nonmonotonic reasoning will become marginalized and isolated; that funding for nonmonotonic research will dry up to the point where we are no better off than researchers in mathematics  or worse  philosophy ; that as a result the field will shrink  leaving only a few die-hards talking to one another instead of a vibrant research community which is tackling one of the hardest problems in reasoning. 
　i don't feel happy about writing that last paragraph. these are the sort of gloomy prognostications one is used to hear from people outside the field of nonmonotonic logic. when i've heard these sentiments in the past  i've usually put them down to some combination of schadenfreude and the resentment of practitioners toward theorists. this isn't the case here. on the contrary: i'm a member of the nonmonotonic reasoning community  and i'm concerned about the current state of nonmonotonic research. but this is concern rather than pessimism: i believe that we can stop the field from being marginalized  and strengthen nonmonotonic reasoning as a central part of mainstream ai. in order to do so  we must find some way to make nonmonotonic reasoning useful to industry. we need to understand why nonmonotonic reasoning and industry are so far apart and to figure 
logic and nonmonotonic logic are quite separate in both philosophy and community; thus  the presence of fussy logic in industry says little about the field of nonmonotonic reasoning. it is also true that the logic programming language prolog  clocksin and mellish  1  is used in industry: while its negation-as-failure mechanism makes it in theory suitable for expressing certain types of nonmonotonic reasoning  prolog in the commercial world is generally not used to capture nonmonotonicity and thus contributes little toward joining nonmonotonic research and industry. 

out how to bridge the gap. we also need to see if there are any examples of nonmonotonic reasoning in industry  and to study these examples for lessons to generalise and mistakes to avoid in the future. 
   the paper is accordingly structured as follows. section 1 discusses the reasons underlying the gap between nonmonotonic reasoning and industry and suggests possible strategies to bring these two areas closer together. section 1 examines in detail an example of a nonmonotonic system developed for industry - specifically  a benefits inquiry system for the insurance industry. the system uses a form of inheritance with exceptions in which logical rules - well-formed formulae - are attached to nodes in the inheritance network. the system is able to perform broad nonmonotonic reasoning. we examine the ways in which nonmonotonic techniques provide the system with the necessary expressiveness and reasoning ability. we subsequently consider generalizations of the system  and finally examine the lessons which can be applied in general to joining nonmonotonic reasoning and industry. 
1 analyzing the gap between nonmonotonic reasoning and industry 
nonmonotonic reasoning was first introduced in the late 
 1s  mcdermott and doyle  1; reiter  1; mccarthy  1  in order to formally capture plausible or default reasoning.1 plausible reasoning includes reasoning with exceptions  reasoning with default rules  rules that talk about a typical member of a class  rather than all members of a class   reasoning with incomplete information  and jumping to conclusions and retracting such conclusions if they are proved to be wrong. the aim in those early days was to construct a logic that is more powerful than classical first-order logic and to aid in developing programs that could reason more flexibly and fluently than the programs then available. nonmonotonic logic was supposed to make ai easier. as such  it could have been reasonably expected that nonmonotonic logic would become a tool of software engineers  as is the case  for example  with object-oriented programming . in fact  this has not happened: two decades later  open activity in nonmonotonic research is found only in academia and tolerant research labs. 
　what went wrong  the answer  in a nutshell  is that nonmonotonic reasoning is nowhere near ready to handle industrial-strength problems. researchers freely admit this  and have been freely admitting it for the last twenty years. after this length of time  the admission is in itself cause for concern. much of ai and all of industry is about getting things done. confession will not save us here: we need to determine why nonmonotonic reasoning hasn't helped get things done. three reasons come to mind. 
 1  nonmonotonic research has focussed almost exclu-sively on toy problems of commonsense reasoning. the 
   1 these papers as well as some of the classic papers in the field are collected in  ginsberg  1 . 
canonical tweety problem - inferring that tweety can fly from the facts that tweety is a bird and that birds typically fly; and retracting that conclusion upon discovering that tweety is a penguin - is still one of the benchmark problems that researchers seriously tackle when they develop new nonmonotonic logics or modify old ones.1 
　indeed  nonmonotonic theories have trouble solving a host of other toy problems such as the well-known yale shooting problem  hanks and mcdermott  1   which involves predicting that if one loads a gun  waits  and then fires the gun at a turkey  the turkey will die.1 
　it can be argued with a good deal of justification that commonsense reasoning is one of the more difficult areas of intelligent behavior for ai to model  davis  1  and that sneering at research on the tweety and yale shooting problems merely reflects a lack of understanding of the difficulties of the underlying issues. it may very well be that toy problems of commonsense reasoning are more difficult than industry problems. nonetheless  one can hardly be surprised that industry has not jumped to invest in technology based on research that is stymied by the likes of the yale shooting problem. 
 1  in fact  industry is primarily concerned with problems which have very little to do with commonsense reasoning. examples include diagnosing bacterial infections  determining where oil is likely to be found  and predicting variations in the stock market. nonmonotonic researchers typically ignore these problems  preferring instead to work on problems of commonsense reasoning  as discussed above. the result is that these researchers have very little to offer industry. the irony is that one can plausibly argue that non-trivial nonmonotonic reasoning is present in a wide variety of industry problems. for example  virtually any prediction task must be done in the absence of complete information about one's situation  and must use causal rules which have exceptions; this suggests that some form of nonmonotonic reasoning  such as nonmonotonic temporal reasoning  is needed. 
　industry seems to offer fertile ground for nonmonotonic researchers. the problem is that industry remains uncharted territory for the nonmonotonic community. 
   1  while all existing nonmonotonic logics  as far as i know  can solve the tweety problem  simple variations on this problem are beyond some well-known nonmonotonic systems. for example  a nonmonotonic reasoning system based on consequence relations  as in kraus  lehmann  and magidor  1  cannot infer that tweety can fly from the facts that tweety is a robin  robins are birds  and birds typically fly.  the problem is that chaining is in general not permitted.  a relatively simple fix  geffner  1  results in a system that can solve this variant tweety problem; the point  however  is that it is far from obvious that nonmonotonic systems can solve very simple reasoning problems. 
   1  it is assumed that firing a loaded gun at a turkey always results in the death- of the turkey. the difficulty arises in predicting that a gun that was loaded at one moment will remain loaded at the next. early papers on the yale shooting problem can be found in  ginsberg  1 ; for a recent analysis  see  morgenstern  1c . 
the result is that this community has not yet demonstrated that it is capable of solving any industry problems. it is all very well to argue that the seemingly hard problems facing industry are easier to solve than the deceptively simple commonsense problems upon which nonmonotonic research focusses  but this argument must be buttressed with solid solutions to problems in industry. 
 1  nonmonotonic reasoning techniques have not scaled up to industry. even if the nonmonotonic community were to start working on a problem directly relevant to industry  and to come up with a good solution  nonmonotonic reasoning is crippled by decidability and tractability problems  and a lack of good tools. specifically  nonmonotonic predicate logic is in general undecidable; even simple classes of propositional nonmonotonic logics are intractable. for example  determining whether a formula is in the extension of a propositional default theory is in general -complete  gottlob  1 . 
　there are some bright spots in this otherwise dark picture. there are relatively efficient polynomial algorithms for a particular type of nonmonotonic reasoning known as inheritance with exceptions  horty et al.  1; stein  1 .1 inheritance with exceptions is the nonmonotonic extension of inheritance  a simple form of reasoning with subclasses and superclasses that dates back to aristotle and the syllogism  kneale and kneale  1 . this extended form of inheritance allows one to posit exceptions to the general behavior of classes and to reason with those exceptions. it easily handles tweety-style problems  but cannot handle the yale shooting problem unless that problem is reformulated in a somewhat unnatural manner . in addition to work in this area  there are many promising results in the subfield of nonmonotonic reasoning known as logic programming: for example  computation of solutions for theories that are propositional  non-recursive  and in horn form is  dowling and gallier  1 ; computation of a unique solution set for courteous logic programs  a restricted form of prioritised defaults  is   grosof  1b . 
　but even these positive results are weakened by the lack of corresponding industrial-strength tools which implement these algorithms. for example  there are no commercially available tools for inheritance with exceptions  despite the fact that efficient algorithms have been known and published for almost a decade. anybody who wishes to use the technology in industry must build the code from scratch. in an age and an industry where tools have become a sine qua non  the lack of a good tool can freeze any possibility of using a nonmonotonic technique.1 
   1 the tractability of horty et al's algorithms is discussed in  selman and levesque  1 ; the complexity depends on the kind of chaining involved in path construction. the version presented in  horty  1  section 1  leads to tractable algorithms. stein's algorithm is 
   1 this was  indeed  my experience in developing the system described in section 1. despite the fact that it was clear that standard inheritance would not do the job  and that at least if the field of nonmonotonic logic has remained entirely separate from industry because first  nonmonotonic research and industry focus on very different problems  and second  researchers have not yet developed efficient algorithms and/or tools  the strategy for integrating nonmonotonic reasoning with industry becomes clear: 
　first  researchers in nonmonotonic logic should familiarise themselves with problems in industry  select a set in which nonmonotonic reasoning appears to be important  and focus on those problems in their research. second  researchers ought to actively design efficient algorithms for the tractable portions of nonmonotonic theories  and develop industrial-strength tools. 
　ideally  these endeavors should be carried out simultaneously. that is  as solutions to nonmonotonic problems in industry are found  tools to implement these solutions should be developed. that is not essential  however; what is important is that both tasks get done. 
　at this point  there are at best a handful of industry problems that have been solved using nonmonotonic techniques. the remainder of this paper will discuss one such problem and its solution. we will outline the problem  explain why nonmonotonic reasoning is necessary  present the nonmonotonic techniques used  and suggest how this method could be generalized to other problems in industry. 
1 the case in point: inheritance and inheriting rules in the medical insurance domain 
1 
1 	t h e p r o b l e m : benefits i n q u i r y 
problem description 
benefits inquiry is the process of querying an insurance company to determine one's benefits. in the medical insurance industry  customers may wish to know if a particular procedure is covered  as well as the specific rules that limit coverage. examples are: 
 will my son's tonsillectomy be covered  can it be performed in an inpatient facility  
 how many days can i stay in the hospital after a standard delivery  
inheritance with exceptions was needed  the fact that tools that performed standard inheritance existed  while tools that performed inheritance with exceptions did not exist  caused many involved with the project to strongly suggest that the existing tool be used. it is a mark of the dilbertian nature of the software and consulting industry today that using an existing tool to get the job done badly but quickly is considered preferable to building a tool and doing the job slowly but well. 1  a more detailed description of the knowledge structure and algorithms summarised in this paper can be found in  morgenstern  1a  and  morgenstern and singh  1 . 
1
　　in this paper  as well as in  morgenstern and singh  1   the term benefits inquiry also refers to the process performed by insurance company employees in answering such queries. 
　benefits inquiry occurs frequently in the medical insurance industry and has become increasingly complex: medical insurance companies today may have thousands of insurance products  each of which contains a myriad of services and regulations which change frequently. the vast amount of changing information is difficult to keep up with. in addition  there are many rules that have exceptions  and exceptions can be nested. for example  physical therapy is generally limited to twenty visits per year  unless more visits are ordered in writing by a physician  but spinal manipulation  a type of physical therapy  has a more generous limit  around thirty visits . the importance of exceptions suggests that some form of nonmonotonic research would be useful. 
　several years ago  i was asked to develop an expert system for benefits inquiry.  this was part of a comprehensive consulting engagement between ibm research and a large medical insurance corporation to update major portions of their information management system.  the primary goal of the expert system was to aid customer service representatives  csrs   the insurance company employees who answer customers' questions about their benefits. 
w h a t had been done 
customer service representatives were at that time using a  desktop  text-based system. information was divided into subject areas such as preventive care  immunization  and drugs; each subject area was associated with a piece of text  roughly the amount that would fit on a screen  highlighting salient pieces of information. for example  the screen on preventive care listed the types of preventive care available  such as routine physicals and immunizations  as well as coverage rates and allowed frequency of services. a topic mentioned in one screen could itself have a full screen devoted to it; thus  for example  immunization  mentioned in preventive care  was the subject of one of the screens. 
　although the desktop system allowed rudimentary search and indexing  it was deficient in several respects: 
　first  only a small amount of domain knowledge was encoded in the system. the amount of information that could be contained was strictly limited: a too-long menu would prove unwieldy to the csrs; on the other hand  if the chunk of information associated with a menu topic was too large  it would not fit on one or even several screens. 
　second  the system did not make explicit the interconnection between subject areas. for example  nothing in the system indicated a connection between the screens on immunization and preventive care. the csr had to reason that the schedule rate for preventive care probably applied to immunizations. 
　third  the system was difficult to update  and updates had to be performed manually. this could be especially troublesome when screens were interconnected. for example  if both the preventive care and immunization screens have schedule rate information and this schedule rate changes  the individual modifying the system must make changes on both screens. 
　fourth  due perhaps to the constraints just mentioned  the system was intended to handle only the most frequently asked questions. 
project goals 
we aimed to develop an expert system that supports benefits inquiry but avoids the drawbacks of the textbased system. in particular  this meant a system that allows questions at varying levels of granularity  gives unambiguous answers  allows representation of large amounts of material and navigation around a large information space  supports connections among related topics  and supports easy updates and modifications. 
　the ability to modify is important because products change so frequently. thus  the system had to be usable not only by csrs  but also by policy modifiers  pms   the insurance company employees responsible for making changes within a particular insurance product. 
1 	w h y i n h e r i t a n c e w i t h e x c e p t i o n s i s useful 
much of the information about medical services is taxonomic in nature. for example  spinal manipulation is a type of physical therapy; physical therapy  speech therapy  and occupational therapy are all types of therapy. coverage and accompanying restrictions are to a large extent inherited along taxonomic lines: physical therapy is covered  for example  because it is a subtype of therapy  and therapy is covered. on the other hand  there are exceptions: even though drugs are covered by the drugs benefit  and otc  over-the-counter  drugs are a subclass of drugs  otc drugs are not covered by the drugs benefit. thus  we could not use a standard inheritance network such as kl-one  schmolze and lipkis  1  or k-rep  mays et al.  1 . we needed at least the expressive power of an inheritance network with exceptions  horty et al.  1; stein  1 . 
　indeed  the structure needed to represent the organization of medical services and benefits is not purely taxonomic  since certain services have multiple supertypes. for example  genetic testing is both a subtype of diagnostic services and of family planning services. thus the structure is a dag  directed acyclic graph  rather than a tree. 1 
   1 in fact  a dag is needed to represent all cases of inheritance with exceptions. formally  multiple inheritance arises when there is an undefeated path from x to y  an undefeated path from x to z  and y 』 z  see below for definitions of these terms . inheritance networks in the literature have traditionally considered multiple inheritance only when these multiple paths have been initial segments of conflicting paths  as is the case in figure 1  where the positive path from otc to drugs and the negative path from otc to services covered by drugs benefit are initial segments of conflicting paths. here  we will also be interested in non-conflicting path multiple inheritance; cases of multiple paths that are not initial segments of conflicting paths. for example  in figure 1 there are non-conflicting paths between insulin syringes and inheritance with exceptions is all that is needed to determine which medical services are covered by which benefit. indeed  the first cut at the benefits inquiry system used inheritance with exceptions to do just this. the system was incomplete  since it did not indicate which regulations applied to a service; we emphasize this point in the next section. however  even this simple system demonstrated that a form of nonmonotonic reasoning could effectively be used in an industrial application. 
a brief review of inheritance 
we briefly summarize some notation for inheritance network with exceptions  taken from  horty  1  : a link between two nodes can be positive or negative. a positive  or isa  link between nodes x and y is written x 
a negative  or cancels  link between nodes x and 
y is written all links are defeasible. a path is a sequence of positive links  called a positive path  or a sequence of positive links followed by one negative link  called a negative path . the notation   resp.  represents a positive  resp. negative  path from x to y through the path  if there are positive and negative paths between two nodes  we follow the analysis of touretzky  1  and horty 1  in choosing a path. given a context - an inheritance network t and a set of paths $  a path is inheritable or undefeated if it is constructive and neither preempted nor conflicted. a path is constructive in a context if it can recursively be built out of the paths in a network; a path is con-
flicted in a context if there are paths of opposite sign in the context with the same starting and ending points; a path is preempted if there is a conflicting path with more direct information about the path's endpoint  i.e.  a direct link from an earlier point in the path . 
1 	w h y i n h e r i t a n c e w i t h exceptions isn't enough 
while much of the information in the medical insurance domain - in particular  the relations among benefits and services - is taxonomic  a large chunk of information  specifically business rules  does not seem to be taxonomic in nature. this information is central to the task of benefits inquiry  since csrs must determine which regulations apply to a service. 
　the problem with representing business rules in an inheritance hierarchy can best be appreciated by examining several rules. some rules lend themselves to representation within a semantic network. consider the rule: there is a co-pay of 1% for diagnostic services to represent this rule using the standard inheritance network model  one could have a node representing the services which have a 1% co-pay  and a subtype link between the diagnostic services node and this node. 
on the other hand  a more complex rule such as 
　patients in drug rehabilitation programs lose all rehab benefits for a year if they are non-compliant 
drugs  and insulin syringes and supplies. in this case we allow prioritisation of a particular path. 
cannot be so easily represented. one could posit a node that represents the services which have the property that if patients are non-compliant with respect to that service  then they lose all benefits for a year  and then have a subtype link between the drug rehab services node and this node. but such a node appears quite artificial and outside the spirit of a semantic network  where nodes are supposed to represent easily understood concepts. 
　the fact that much of the domain knowledge is not taxonomic in nature means that we must go outside of the standard structure of an inheritance network with exceptions. on the other hand  it is desirable to build on the inheritance network structure: first  because inheritance with exceptions already solves part of the benefits inquiry problem; second  because inheritance with exceptions is one of the few efficient nonmonotonic techniques. furthermore  there is an obvious connection between non-taxonomic and taxonomic knowledge in this domain. in particular  business rules often apply to particular services - i.e.  to nodes in the network. building on the existing network makes this connection explicit. 
　the next section suggests an extension to the network structure and explores the process of benefits inquiry in this context. 
1 t h e solution: integrating taxonomic and non-taxonomic information 
definition of a f a n 
we wish to introduce a knowledge structure that is capable of representing both taxonomic and non-taxonomic information. the aim is to represent the taxonomic information in a standard inheritance network with exceptions and to attach the non-taxonomic information to the network in some way. for the  instance of the  medical insurance domain  we would like to represent the fact that business rules generally apply to specific medical services and benefits by attaching business rules to nodes in the network. to do this  we introduce the concept of a formula-augmented semantic  or inheritance  network  fan   an inheritance network in which sets of logical formulae may be attached to nodes. in the medical insurance domain  the logical formulae usually represent business rules  but they could also represent other sorts of information  including lists or tables. 
formally  a fan is a tuple where 
  n is a set of nodes. a node represents some set of med-ical services; e.g.  physical therapy represents the set of physical therapy services. a node may represent a set of services that are covered by a particular benefit  as in the root nodes of figure 1. 
  the set of wffs w consists of well-formed formulae of a sorted first-order logic. 
  the background b is a  possibly empty  set of wffs of first-order logic  intuitively representing the background information that is true. in the medical insurance domain  it includes all rules that are true of all medical services and benefits. it may also include patients' medical records and pay scales. in general  it consists of non-taxonomic information that is too general to attach 

figure 1: 	a portion of the medical insurance network. 
lines represent isa links; slashed lines represent cancels links. note the presence of non-conflicting multiple path inheritance  and the ordering placed on links in the network. 


figure 1: taking the union of wffs at nodes yields inconsistency. 

to a specific node in the network. 
  ♀1 is the set of links on nodes  as described in sec. 1.   o  the ordering on links  gives a preference on links. this is useful for non-conflicting multiple path inheritance  since it allows us to prefer one path over another.   ♀1 is the set of links connecting nodes and sets of wffs. if n is a node and w is a set of wffs  n -  w means that the set of wffs w is attached to node n. intuitively  this means that each wff of w is typically true at n. 
inheriting well-formed formulae 
csrs must determine which set of business rules applies to a medical service or benefit. this translates into determining which wffs apply to a node. note that determining which wffs apply to a node is not the same as determining which wffs are attached to a node; the latter is a trivial operation. for example  figure 1   assume that there is a cost-share rule attached to the therapy node  specifying that the co-pay is 1%  and a rule attached to the physical therapy node  specifying a maximum of twenty visits a year without a doctor's written prescription. it seems clear that the cost-share rule attached to therapy also applies to physical therapy  since physical therapy is a subtype of therapy. that is  physical therapy in some sense inherits wffs from therapy. 
　the process of inheriting wffs is considerably more complex than standard attribute inheritance. one might think that wff-inheritance is performed in the following manner: to determine which wffs apply to a node n  compute all nodes ni such that there is an undefeated positive path from n to ni. then take the union u of all wffs attached to all such nodes ni. this suggestion  however  leads to inconsistency  as figure 1 shows. since there is an undefeated path from n1 to n1  we would get figure 1: the wffs at hgh are more specific than the wffs at rx  drugs and are thus preferable. 
 which 
is obviously inconsistent. note also that the procedure will not work correctly for node n1; although wffs n1  u wffs nl  is consistent  it is inconsistent with respect to the background b. 
　rather  the wffs that apply to a node are a maximally consistent subset of  there may be many maximally consistent subsets of u; some of these are obviously preferable to others. for example  in figure 1  the union of rules at hgh drugs is inconsistent. we have the choice to construct a maximally consistent subset by throwing out the cost-share rule at prescription drugs or by throwing out the cost-share rules at hgh drugs. intuitively  we would rather keep the cost-share rule at 
hgh drugs since it is more specific than the rule at 
drugs. thus  we prefer the maximally consistent subset 

it is known as a preferred maximally consistent subset 
　in general  we prefer wffs from nodes that are more specific and/or on preferred paths. thus  for example  figure 1   when one is computing the set of wffs which apply to cardiac rehab  the wffs attached to cardiac rehab are preferable to the wffs attached to physical 
1  a maximally consistent subset of u is a consistent subset 
s that is maximal; that is  if s' is a consistent subset of u  it is not the case that 

figure 1: preferences based on specificity and path ordering: spinal manipulation is preferred to physical therapy and physical therapy to therapy due to specificity; from cardiac rehab's point of view  pm&r is preferable to physical therapy due to path ordering. 
therapy  which are preferable to the wffs attached to therapy. in addition  the wffs attached to pm&r  physical medicine and rehabilitation  are preferable to the wffs attached to physical therapy. thus  the preferred maximally consistent set of wffs in this case is {maxvisits 
　other preference criteria may also be desired; for example  one may wish to assign some wffs a higher priority than others  as in  mccarthy  1    regardless of the rule's position in the network; for example  medical rules might have higher priorities than administrative rules. likewise  one may prefer a subset of rules based on what the rules entail; this is equivalent to preferring one extension or model to another  as in  shoham  1  . these criteria have not  however  been implemented in the current system. 
　preferred maximally consistent sets are not necessarily unique. 
the a l g o r i t h m 
how do we compute a preferred maximally consistent subset at a focus node n  first consider the simple case where there are no upward forking points  no multiple inheritance from the point of view of the focus node.  it is clear what we do not want to do. we do not want to first take the union of all sets of wffs at the nodes on the path from n to the root  then take maximally consistent subsets of this large set  and finally choose preferred maximally consistent subsets relative to the specificity criterion. such a method would be extremely inefficient. instead  we want to iteratively traverse the path  and perform the computation as we go along. 
　upward traversal turns out to be a better choice than downward traversal. this method for traversing the network is consistent with the specificity criterion. one begins at the focus node n  taking wffs n   the wffs attached to n  as the starting set. one then proceeds up the path  at each node taking a preferred maximally consistent subset of the set computed so far and the wffs attached to the current node. 
　this process will ensure that the specificity constraint is obeyed. to ensure that path-ordering is respected in case of forking paths  we examine all links at each forking point in the path  order them  and recursively proceed up the more preferred links before the less preferred links. 
　we must also ensure that we do not collect rules from nodes that are only on conflicted or preempted paths; to avoid this problem  we preprocess the fan to remove preempted and conflicted links  we do this using an extension of the procedure in  stein  1  which computes the specificity extension at a focus node . the complete wff-inheritance algorithm is described in  morgenstern  1a . 
computational issues 
it is clear that inheriting well-formed formulae is much more computationally intensive than inheriting attributes. inheriting attributes is polynomial; inheriting wffs  in the propositional case  is np-hard  since computing preferred maximally consistent subsets is np-hard.  inheriting general first-order wffs is clearly undecidable.  
　in practice this has not proven to be a real difficulty; by computing the set of inherited wffs iteratively  we deal with relatively small sets. we have also noted a possible divide-and-conquer strategy: it may be possible to divide rules into disjoint subsets  based on rule type  so that sets can contradict one another only within their own type.  this division is to a large extent natural; for example  cost-share rules never contradict medical rules.  finally  polynomialtechniques discovered by grosof  1b  may be applicable to sets of rules in the system. 
1 	t h e benefits i n q u i r y system 
the benefits inquiry system incorporates two tools  an inquiry tool which is used by csrs to answer customers' questions  and an authoring tool which is used by pms to modify products. both tools use a graphical interface which allows the user to navigate through the network and a reasoning engine which performs both attribute and wffinheritance. an early version of the system received excellent reviews from both the csrs and pms who used it. 
1 generalizing wff-inheritance 
can the techniques of wff-inheritance  which were developed for the particular problem of benefits inquiry in the medical insurance domain  be generalised to other problems in industry  
　some generalisations are obvious. wff-inheritance would clearly be useful for benefits inquiry in other parts of the insurance industry  such as life insurance and property and casualty insurance. in these industries  it is also the case that services are best organized taxonomically  and that business rules apply to services. wff-

inheritance is also useful for other tasks in insurance  such as adjudication  which would use a taxonomy of services very close to the structure used in benefits inquiry  and administration  which would use a taxonomic structure of products as well as services. 
　the nonmonotonic techniques discussed here are applicable to a wide range of other problems as well. indeed  it can be argued that the construct of a fan and its associated algorithms may prove useful in other domains which satisfy the following criteria: 1. there exists a large amount of taxonomic information 1. there exists a significant amount of non- taxonomic information  conceptually linked to the taxonomic information 
1. the non-taxonomic information can be mapped into 
wffs 
there are a number of potential domains: 
  legal reasoning  especially case law: legal cases are often organized taxonomically  and different legal rulings are associated with cases; it seems that these legal rulings can be mapped into wffs. most automated legal reasoning has been case-based  ashley  1   or analogical; adding wff-inheritance may significantly enhance the power of legal reasoning systems. 
  medical reasoning and treatment: medical con-ditions are often organised taxonomically  and protocols are associated with these conditions. the protocols are often rigorous sequences of steps which can be mapped into wffs. 
  reasoning in business organizations: the orga-nisation chart in many businesses is a perfect taxonomy  and there are many rules associated with different positions in the org chart. 
　these extensions are not straightforward; in particular  mapping business or legal rules into wffs is nontrivial. however  these examples indicate that the usefulness of fans extends far beyond the domain for which they were invented. 
1 into the future 
the detailed examination of an application of nonmonotonic reasoning to industry has taught us some valuable lessons and has suggested several directions for future research. 
 1  we need to constantly keep our eyes open for prob-lems in industry that could benefit from nonmonotonic reasoning. there are many such problems; the trick is to identify them. certainly  we should look out for problems that could benefit from fans  as suggested above. in general  we should look for domains where exceptions are relatively common. 
 1  basic research is still crucial. we need serious re-search on theoretical aspects of nonmonotonic reasoning. it would be best if such research were guided by specific issues highlighted by the study of particular problems in industry. in fact  one of the unexpected dividends of intensively studying a problem in industry is that it often results in the discovery of theoretical problems that were not previously considered. for example  while i was developing the benefits inquiry system described in section 1 discovered a number of issues that theories of inheritance had not previously examined. such problems include the interaction of composition and subtyping and non-unary inheritance  morgenstern  1b . 
　the importance of basic research cannot be overstated. some of the most heartening news about the current state of nonmonotonic research is the recent spate of exciting results regarding the complexity of some restricted nonmonotonic theories. examples include the result that computation of the answer set for courteous logic programs  a restricted form of prioritised defaults  is 1 n 1    grosof  1b . these results are being translated into commercial products. in particular  courteous logic programs are used in raise  a system for building intelligent agents  now commercially released  grosof  1a . 
 1  the proper balance between basic research and seri-ous involvement in industry is important  but difficult to maintain. one meaty industry problem can easily give a theoretical researcher enough material for a decade; on the other hand  we need to work on many industrial problems to get a fair idea of the problems that need to be solved  and to convince industry of the relevance of nonmonotonic reasoning. 
 1  we must develop tools to perform nonmonotonic rea-soning. we need to develop general tools for inheritance with exceptions; we also need to develop a tool for general inheritance with wffs. thus far  inheritance with wffs has been developed for only one application and modified for another. such a tool will facilitate the extension of fans to other problems in industry  as suggested above. 
　finally  we must keep in mind that researchers in nonmonotonic reasoning do not always face a friendly landscape. some things we ought to watch out for: 
1. shortsightedness. it always takes longer to solve a problem well  especially the first time. using nonmonotonic reasoning takes a lot more time  and the advantages may not always be obvious to anyone but ai researchers. ai researchers should be prepared for the possibility of an uphill battle  both with one's management chain and with the customer. this isn't a problem unique to the field of nonmonotonic reasoning  of course. 
1. refusing to accept the importance of plausible rea-soning. this comes in many guises: 
 i  the 1 rule. this line of argument runs as follows: even if we ignore exceptions  we'll still get things right most  around 1%  of the time  and with very little effort. isn't it worth taking that route  
　the 1 rule is particularly pernicious if one is willing to accept wrong answers 1% of the time  one can only hope that this rule is not invoked by the faa   but is quite troublesome even if one is merely willing to accept admissions of ignorance  answers of  i don't know   1% of the time. even in the relatively benign domain of benefits inquiry  a system that can't answer questions 1% of the time is not very useful: its performance would scarcely be better than the desktop systems that are de-

signed to answer the most frequently asked questions  or csrs without any aid of technology who can generally answer frequently asked questions right off the bat.  ii  the back-to-if-then-else movement. this argument recognises the importance of exceptions  but insists that any branching statement is all that is needed. people who use this argument are convinced that all that nonmonotonic reasoning is trying to achieve has been present since the days of algol 1 or earlier   iii  the protection-of-basic-researchers strategy. despite constantly urging nonmonotonic researchers to do something practical  management often tries to keep a buffer between researchers and industry. the trouble with this is that if researchers can't get close enough to industry  they can't find the problems that are most suitable; if they only hear about a problem second-hand  they don't have an accurate picture of the situation  and they can't determine whether and how nonmonotonic reasoning is useful. 
　the best way to counteract these obstacles is to demonstrate that nonmonotonic reasoning is capable of yielding practical results. we will achieve recognition when we affect the outside world. 
acknowledgements: i am grateful to ernie davis  benjamin grosof  and moninder singh for helpful discussions and suggestions. 
