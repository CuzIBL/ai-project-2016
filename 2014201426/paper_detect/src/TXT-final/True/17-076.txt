 
   meteor is a rule- and frame-based system for short-term  1 hour  severe convective storm forecasting. this task requires a framework that supports inferences about the temporal and spatial features of meteorological changes. initial predictions are based on interpretations of contour maps generated by statistical predictors of storm severity  lb confirm these predictions  meteor considers additional quantitative measurements  ongoing meteorological conditions and events  and how the expert forecaster interprets these extra factors. meteorological events are derived from interpreting human observations of weather conditions in the forecast area. to accommodate the large amounts of different types of knowledge characterizing this problem  a number of extensions to the rule and frame representations were developed. these extensions include a view scheme to direct property inheritance through intermingled hierarchies and the automatic generation of production system rules from frame descriptions on an as-needed basis for event recognition. 
	i 	introduction 
   the weather prediction task offers some particular challenges for expert system research and development. it is a domain characterized by complex scientific theories  e.g.  thermodynamics   assorted models and statistical predictors  and huge quantities of meteorological data that have both spatial and temporal characteristics. nonetheless  forecasting is still considered something of a  black art   if only because those models are not yet perfectly developed to allow forecasters to make consistently accurate  fine-grain predictions. with reality always providing the opportunity for perfect hindsight  a meteorologist can also acquire a repertoire of heuristics. often  the art of expert forecasting resides in the expert's knowledge of how the statistical predictors or models are affected by idiosyncratic features of his geographical region. in this regard  the problem is similar to many applications that have routinely been approached with a combination of statistical methods plus  local  expertise. 
we have been developing an expert system  called me-
teor  that performs a specialised forecasting task-the shortterm  1 hours  prediction of severe storms  usually hail storms. meteor predicts where storms will initiate  how 
 * this work was supported in part by an nserc industrial research fellowship to renee elio during a tenure at the alberta research council. 
intense they will be  and where they will move. one of our design goals was to automate as much of this prediction task as possible. this means that meteor starts with much of the same raw data that the expert uses-meteorological measurements  maps describing features on a large scale  and reports of conditions provided by trained observers at weather stations. this contrasts with an approach whereby the user characterizes the data or describes the problem in some symbolic form that an expert system can directly use  for instance  as elements to match rule conditions in a production system . meteor first derives what the state of the world is and then applies the expert's strategy  knowledge  and heuristics to interpret this knowledge and make predictions. 
   meteor is not a generalized forecasting system. a significant portion of it relies on the particular strategies and tools developed by the alberta research council's atmospheric sciences department. however  we believe that our approach and methods provide some useful insights into developing systems with similar domain characteristics and design goals. the main issue for us has been organizing and representing a variety of different types of knowledge. although meteor does not have access to all the data available to human forecasters  its problem is still data intensive. meteor has an internal representation of the forecast area that allows it to organize large quantities of meteorological measurements  synthesized information  and predictions. meteor is also able to integrate this knowledge spatially and temporally. in this paper  we will focus on how we have approached this problem by integrating and extending two common ai formalisms: condition-action rules and frames. 
	ii 	application background 
   the alberta research council's atmospheric sciences department has conducted a research program on weather modification and hail suppression for a number of years. during  hail season   an experienced meterologist and several assistants are responsible for predicting the occurrence  severity  and path of hail storms for this research program. 
   the meteorologist begins his task by trying to understand patterns of meteorological activity. he typically consults a large number of maps  both diagnostic and prognostic in nature  generated from meteorological measurements taken at weather stations throughout the continent. these maps provide information such as temperature  humidity  and wind direction and speed at several levels of the atmosphere. he also uses a statistical index that has been developed to measure convective activity . very simply  thb index  called the synoptic index of convection  or sc1  combines four predictor variables aimed at 
   

 a  sc1 index map 
   
	r. elio and j. de haan 	1 
1 yeg sa 1 e1 b k n 1 ovc 1+trw-
1/1/1/ cb1ac1 
 a  
ltgic-cc-cg sw quad. shwrs hvier n.w pres unstdy 1 
 b  
figure 1. example station report for station yeg  with cloud cover report  a  and remarks section  b  marked. 
on the map . the expert also produces another contour map of surface moisture  figure lb  and interprets it in a similar fashion. he combines the significant regions he has noted on each map to refine his prediction of storm location and to assess partially the direction of storm movement. 
   

 b  surface moisture index map 
figure 1. sample index contour maps 
evaluating whether the right ingredients-atmospheric instability and moisture-are present in the right amounts to generate convective activity. the index generates a single rating  -1 to +1  of the degree of potential convective activity. a higher rating means a more severe storm. for example  -1 means  scattered showers but no thundershowers  while +1 means  hail larger than golf balls . the positive-negative sides of this scale roughly correspond to a hail-no hail distinction. 
   this index is computed from meteorological data taken at the weather stations. values are interpolated between stations and the final output is provided in the form of a contour map  figure la . the expert interprets this map using other information. for example  he locates the regions of maximum sc1 and considers wind speeds and directions at a particular pressure level. he then delineates a storm initiation region  the grey areas marked in figure la  upwind of the maximum  where the values are changing most rapidly  i.e.  areas of strong gradient other information from the weather station reports provide qualitative information on weather conditions that the expert can use to forecast. an example station report is given in figure 1. a number of meteorological measurements are given in this report. the first  marked  a  in the figure  indicates which types of clouds are observed and what observable portion of the sky they cover. in this example  the first cloud layer the observer sees  cumulonimbus  cb   covers 1 of the sky. a second cloud layer of altocumulus  ac  covers the remaining 1 of the sky the observer can see. other data in the report describe the state of this cloud cover. for example  the cb clouds are  broken   bkn   meaning the observer can see through this layer. if an earlier report from this station had indicated the layer was overcast  this shift to broken might signify certain dynamics or processes were occurring. 
   the other important information is the optional remarks section of the report  marked  b  in the figure. in this section  the human observer at the weather station provides additional information on current conditions that are not easily expressed in coded format. what these remarks report is the following:  there is lightning in the clouds  from cloud to cloud  and from cloud to the ground in the southwest direction  relative to the station . showers are heavier in the north and west directions. 
the pressure  at the station  is unsteady.  
   both the cloud cover information and the information contained in the remarks section have gone unanalyzed in the past because there is no simple way to  understand  their information and codify it in a form usable by statistical models. however  these qualitative conditions are meaningful to an experienced meteorologist familiar with this particular forecast area. for example  our expert has a number of informal heuristic rules based on cloud formations. an example from this  lookout-the-window  strategy is a if there are cirrostratus clouds  then it's not likely a storm will occur.  this rule is not simply an empirical association  but is part of the expert's causal understanding of storm formation and thermodynamics. 
   in sum  this task is characterized by a huge amount of quantitative data that change during the course of the forecast period. the nature of how the data change over time is also informative. meteorological measurements are usually displayed and interpreted graphically  and the forecaster often communicates 
1 	r. elio and j. de haan 
his own predictions and conclusions graphically as well. the forecaster's world and his knowledge have a four-dimensional quality: the  things  about which he reasons have spatial characteristics  in the horizontal and vertical dimensions  as well as temporal characteristics. finally  the expert has qualitative knowledge and heuristics acquired from his experience with this forecast area. the use of this knowledge to interpret and augment the statistical indices distinguishes his forecasts from those of less experienced forecasters. 
	i l l 	knowledge representation 
   as noted earlier  we will focus on our approach to representing the different types of knowledge in this data-intensive task. since we believe no single formalism is appropriate for all types of knowledge that typically characterize expert problem-solving  our initial predisposition was to combine different knowledge representations. this turned out to be essential in handling this task. several problem features were compatible with a rule-based approach: there were many sub tasks meteor must perform to acquire and synthesize the data; there was a relatively well-defined strategic approach to interpreting the quantitative predictors and maps for making and fine-tuning predictions; and the qualitative knowledge could be captured in if-then associations. on the other hand  much of the domain knowledge lends itself to a hierarchic organization that will permit inheritance of properties. for example  there is knowledge about the concept  cloud  that is shared by both  nonconvective clouds  and  convective clouds.  there are many such hierarchically-related concepts  some related to weather conditions  others related to areas recognized on contour maps like those in figure 1. more importantly  meteor repeatedly instantiates these concepts dynamically for each forecast it makes during the day. the instantiated concepts must be organized in a way that is efficient for both storage and inferencing. we have chosen a frame-based representation for this type of knowledge. 
   not all of meteor's knowledge is symbolic  because not all of the data can be efficiently represented symbolically. the rule and frame components are augmented by lisp objects  primarily for representing and processing contour maps. the following sections concentrate on the manner in which the two primary formalisms were extended and integrated to represent the knowledge in this task. 
a. 	observations and events 
   one unique demand of this task is its temporal quality. meteorological events are processes occurring over time  but they are inferred from direct observations that are made at particular points in time. this is analogous to the distinction some expert medical diagnostic systems  make between symptoms and inferred pathological states. understanding the relationship between observations and events is critical  because much of the expert's qualitative knowledge concerns the recognition of certain meteorological events and their implications for forecasting. 
   we distinguish between an observation and event in the knowledge representation  primarily in terms of their spatial and temporal characteristics. observations occur at a particular place and time. events  inferred from observations  range over time and space. while a set of observations may signal that a particular event is occurring  we cannot unequivocally know when the event really started or stopped from this single data point. similar distinctions have been made by temporal logic systems . for meteor  the domain knowledge strongly constrains what is and is not likely temporally  so we use very simple temporal inference rules to capture the relation among observations and events. 
   unlike observations  events can be separated into stages. each stage specifies a set of required observations. more importantly  the stages indicate particular properties the required observations must have and how the observations must be temporally and spatially related. for example  the concept for the cloud type altocumulus-standing-lenticularis  acsl  will be instantiated when acls is observed. an acls observation is one of the required observations for a laminar-flow event. the event will be recognized  however  only when this acls observation occurs in the morning and to the west of certain other observations. in combination with a different set of observations  or with slightly different properties  this acls observation might signal another kind of event. the event frames specify these sorts of details about particular observation instantiations. 
   knowledge relating observations and events is initially represented in frames  since this formalism provides an easily-understood specification of concepts and properties that are related through type hierarchies. however  recognizing that events are occurring from a set of observations is really a matching problem: the same type of observation might be shared by different events  and each event typically requires several different observations. some production system languages  such as ops  1   provide powerful matching algorithms which can be exploited for this kind of problem. therefore  we separate event-matching into two stages: first find a set of potentially-matched events  and then check the observations against the detailed specifications on the event frames. the first stage is handled by production rules that meteor automatically generates from specifications of required observations on event frames. in this way  meteor takes advantage of the overlap among required observations associated with different events  via the rule matching network described in   by building rules of the form if obs-1 obs-1 obs-1 ... then event-a and if obs-1 obe-1 obs1 ... then event-b. when observations instantiated in the frame system are inserted in the production system's working memory  a number of potentially-matched events can be recognized. the second stage of event-matching examines each candidate event in turn  checking whether the relationships among instantiated observation match the specifications given in the candidate event's frame. 
   there are a number of advantages to this approach. first  it exploits the best aspects of the two formalisms. the frame structure allows instantiated concepts to participate in type hierarchies and have their interassociations available to meteor as additional properties. specific event properties can reference the properties of instantiated observations. since searching for observations is a relatively time-consuming task  we do not want to keep looking for the same type of observation for different events. in this regard  recognizing when particular events are occurring is best done by production rule matching. by adhering to a particular format for specifying required observations on the event frame  we can modify or extend meteor's knowledge about event and observation relationships 
   
	r. elio and j. de haan 	1 
at the frame level and still ensure that legal production rules 
   
are generated  on an as-needed basis. finally  the goal of eventmatching is to be able to make additional inferences concerning storm development. the inference rules associated with events are also initially stored on the event frames. only when an event is matched does meteor migrate its inference rules from the frame representation to the rule representation. 
   the last important feature of events is their temporal quality. because events are defined as spanning time  there must be a way to represent changes that a single property of an event can have over time. the most obvious example is  location . in general  any concept might have a mix of time-invariant and time-varying properties. we represent time-varying properties by specifying a path to a generic time frame. a time-frame essentially has an add/delete list format for indicating what a property's value was at a particular time. time frames are used extensively throughout meteor's knowledge representation. not only do they provide a way of maintaining what properties were  but they serve as a consistent way of representing predictions as changes to properties for future times. 
b. 	intermingled hierarchies 
   in this domain  the same concept can participate in several different conceptual hierarchies. however  some knowledge  especially membership  must be repeated across several hierarchies. we could use simple  unconnected hierarchies and duplicate knowledge when necessary  but there would be no easy way to maintain duplicated knowledge or to know all the hierarchies in which a concept participates. we have approached this problem by developing a view scheme that combines simple hierarchies into a single network. repeated concepts in the original hierarchies become a single node in this new network. each node represents the collection of all knowledge about a concept. knowledge that was particular to a single hierarchy defines a certain view of the concept. this view is maintained as a further subdivision of knowledge within the node. each node in the network has as many views as the number of simple hierarchies in which its concept originally participated. not all knowledge about a concept has to be associated with a view- it is possible to declare knowledge as being true of the concept in general. this approach is similar in spirit  if not complexity  to previous proposals for organizing knowledge around different perspectives and viewpoints . 
   an example is illustrated in figure 1. in this case  the concept cloud is a member of both the obs  observation  hierarchy and event hierarchy. the complete concept for cloud includes both its views as an obs and an event. knowledge generally true of cloud  that would have been found in both the obs and event hierarchies  resides on the cloud frame  frame 1 . knowledge unique to a cloud view  that would have been found in only one of the original hierarchies  is represented in view frames  frames 1 and 1  associated with the main node frame  frame 1 . there are three ways to separate the total knowledge about cloud. it can be viewed as an event  in which case knowledge is collected from frames 1  1  and 1. when viewed as an obs  knowledge from frames 1  and 1 is accessible. finally  all the knowledge associated with cloud  frames 1 -previously split over different hierarchies-is also accessible from cloud. this includes knowledge about what views it has. it might seem that all this knowledge could reside on the single cloud frame  with the property names implying 

figure 1. views in two combined hierachies 
the hierarchy from which each piece of knowledge originated. however  it is possible that the same property of a concept could have different values in different hierarchies. by placing properties on distinct views  we avoid this potential clash. 
   it is not necessary for a concept to have more than one parent in order to have views. although cirrus has only one parent in this example network  it was repeated in the original unconnected hierarchies. so  just like cloud  cirrus has views that reflect the original hierarchies. for example  cirrus can be viewed as a cloud event  in which case knowledge is collected from frames 1  1  1  1  and 1. when viewed as a cloud obs  knowledge is collected from frames 
1  1  1. 1  and 1. in effect  cirrus inherits views  e.g.  frames 1 and 1  from its parent  and consequently inherits properties from those views. 
   frames 1 in figure 1 represent part of meteor's initial hierarchy. the concepts at the lowest level of this hierarchy can be dynamically instantiated. it is possible to instantiate a particular view of a concept  thereby restricting the inheritance of other views associated with that concept. frames 1 and 1 illustrate two examples of view instantiations-event-1 and 
   
1 	r. elio and j. de haan 
obs-1.  these event and observation instantiations do not occur simultaneously and do not necessarily co-exist.  obs-1 is an instantiation of cirrus viewed as a cloud obs. it inherits only those properties on an inheritance path that include frames 1  1  1  1  and 1. similarly  event-1  as a-kind-of cirrus cloud event  inherits only those properties on a path consisting of frames 1  1  1  1  and 1. 
   the main advantages to this scheme are  a  properties common to all views can be shared;  b  the structure of the network need not be repeated for every simple hierarchy;  c  the number of ways of viewing a particular concept is part of the knowledge available to the system; and  d  the property inheritance mechanism of simple hierarchies is preserved. 
	iv 	implementation details 
   figure 1 shows the current meteor system and its major parts. meteor runs on a xerox 1 lisp machine and is written in interlisp-d and ops1 . initial data collection is done on a vax 1 running vms. 
a. v a x 1 side 
   meteor is configured by information that resides on the vax. this information contains geographical information about the forecast area  weather stations in the area  and its division into larger geographical regions  described below . it also describes a directory that is used to organize both station reports and contour maps generated from this station data. data from weather stations  figure 1  arrives hourly on a dedicated circuit line. this station data is automatically collected by processes that monitor a particular set of stations in the forecast area  currently about 1 stations . at present  meteor is being tested and refined using several test cases from the 1 hail season. 
b. xerox 1 side 
the frame and rule-based components reside on the 1. 
the rule-based component is currently implemented as three ops production systems  although they are compiled together . 
our version of ops1 was extended to compile its action sides  and its interface with the interlisp-d environment was improved. the forecaster production system initiates the configuration of the meteor's  storm world   described below  and is responsible for data acquisition  interpretation  and forecasting subtasks. this forecaster production system invokes two other production systems that have very specialized tasks: the remarks parser production system  which  translates* and parses the human observations contained in the station report remarks  figure 1  and the region builder production system  which identifies regions of meteorological activity from the parsed remarks and cloud reports  figure 1 . these are described in more detail below. 
the frame and view component was implemented in inter-
lisp-d. the production systems interact with the frame representation via the flexibility afforded by the ops1 language in accessing the interlisp-d environment. thus  the production rules can examine frames  transfer knowledge from frames into working memory  build new rules from knowledge stored on frames  initiate processes for building maps on the vax and transferring them to the 1  and initiate the creation of new 

figure 1. system organization 
frames to represent the instantiation of particular meteorological activities it has derived or inferred. 
   meteor currently starts with 1 production rules  across the three pss  and 1 frames. in the course of forecasting  many new frames are dynamically created that represent particular instantiations of the concepts in the type hierarchies. this could be an additional 1 or more frames per forecast. 
 there are typically four forecasts per day.  new ops rules are dynamically generated from information stored in frames on an as-needed basis  particularly to aid the event-matching described earlier. 
c. meteor output 
   meteor outputs it predictions by displaying a map of the forecast area on the 1 screen and outlining the location of one or more storm initiation regions. for each region  meteor displays a predicted intensity and direction  as well as the factors that support these predictions. qualitative influences on these predictions are also reported  e.g.   intensity may be lessened due to the influence of the mountains.  
v meteor's storm world 
   given maps like those in figure 1  meteor must be able to locate areas of absolute or relative maximum  identify areas of strong contour gradient  combine them with the location of other spatially-defined regions  and create new regions. there 
   
are a number of questions implicitly asked and answered in this process: does this region intersect with another region of a particular type  was there a particular activity southeast of this region two hours ago  thus  a knowledge-representation framework must support creating and reasoning about entities defined in space and time. 
a. 	representing meteorological activities 
   meteor's storm world  about 1 million km1  is represented as a two-dimensional array of map elements or mapels. mapels have no meteorological significance. the location of all objects in this world are defined by mapels. there are three ma-
jor types of objects in this world: stations  regions  and georegions. a station is a source of data  located by a single mapel. a region is a collection of mapels to denote some particular meteorological activity. example types of regions are  sc1 maximum    storm initiation   or  cirrostratus observation . georegions are collections of mapels  larger than regions  that represent a higher-level organization of the storm world. they are used primarily to speed certain inferences about the relative locations of regions. an example georegion would be  central alberta . the knowledge associated with these objects and their members is represented in frames within a type hierarchy. while station and georegion have a fixed set of members  region is dynamically instantiated to represent areas on contour maps and meteorological activities that are located in space and time. in fact  all meteor's dynamic instantiations must be a-kind-of region and have a corresponding a view as a region. in figure 1  then  the obs-1 instantiation of cirrus viewed as a cloud obs would more commonly be represented as concept with two separate views: the view shown in figure 1 as frame 1 and another view as a region. 
   the properties that region instantiations inherit from region are primarily spatial in nature. one such property is the mapels property. while this property is time-invariant for station and georegion members  since these objects do not move   it is time-varying for some instantiations of region  for activities moving through the forecast area . the time frames that describe the dynamic properties that obs-1 inherits as a-kind-of region are linked to its view as a region. by using time frames to describe the dynamic properties of the entire storm world  e.g.  what kinds of activities populated the world at a particular time   meteor can keep track of what the world looked like in the past and what it predicts the world might look like in the future. under this scheme  answers to the kinds of questions given above   does region a intersect with region b   and   was there a sc1 maximum southwest of region c four hours ago    are handled essentially the same way by the same mechanisms. 
b. 	b u i l d i n g regions 
   the production systems direct the identification and creation of new regions from two types of raw data: contour maps  figure 1  and weather station reports  figure 1 . 
   1. regions from contour maps-to glean the same information from the figure 1 contour maps as the expert does  meteor must recognize areas of maxima  locate the interesting areas of strong contour gradient  and create new entities in its internal storm world corresponding to these areas. plotted 
	r. elio and j. de haan 	1 
contour maps like those in figure 1 can be produced on the vax and transferred to the 1 at meteor's request. 
   the expert's strategy for locating  interesting  gradients on the contour map is embodied in the forecaster production system. the potentially interesting gradients are those with the greatest changes in slope that occur upwind of the maximum. the forecaster production system consults wind speed and direction data stored in the frame system  a time-varying property of certain station members . to get the changes in the slope of the contours  meteor takes the first derivitive of the contour map along the direction of the proper wind. given the original contour map  a derivitive map  and the mapel-space map  meteor examines those portions of the derivitive map that are upwind of the line of maximum. candidate storm initiation regions are strong gradients  those with a high enough derivitive value . once regions are located in mapel space  meteor can create regions in its internal storm world like the grey areas in figure 1 outlined by the forecaster. 
   1. regions from human remarks-there is considerable variability in the nature of abbreviations  in whether punctuation is used to join elements or signal the end of a phrase  and in word order. this variability occurs both within and across remarks. the job of meteor's remarks parser production system module  a production system plus lexical knowledge represented in frames  is to extract the remark from the station data  translate the abbreviations into full words  and parse the remark into its proper constituents. the remarks parser relies solely on a set of syntactic heuristics gleaned from a corpus of remarks. 
   the parsed remarks are a time-varying property of the station from which they originated. the qualitative region ps can then satisfy a request from the forecaster ps such as  determine if there are cirrostratus observations in northwestern alberta.  this request typically occurs when the forecaster production system is involved with event-matching. the request will actually include detailed property specifications for an observation that were found on the event's frame. the qualitative region ps examines the parsed remarks as well as the cloud cover information  searching for the requested observations  and locates those finds in mapel space. it then computes a set of mapels to define that region  and creates a concept that has views as a region and as particular kind of observation. 
	v i 	r u l e j u s t i f i c a t i o n 
in this paper  we have concentrated on describing how me-
teor's knowledge was designed to accommodate the problemsolving demands of this task. we want to describe briefly a further use of this framework for investigating how procedural and declarative representations can be integrated to obtain more expert-like problem solving. one feature of expert problem solving is the  conceptual leaps  that an expert seems to make. this observation that much of an expert's knowledge seems  compiled   1  is a notion common to many theories of skilled performance. there is usually a chain of causal relationships and supporting inference rules connecting what otherwise appears to be a mysterious transition from an antecedant condition to a consequence. we recognize this when our expert  having given a rule such as  if there are cirrostratus clouds  then a severe storm is unlikely   can produce a detailed causal justification for this assertion. 
1 	r. elio and j. de haan 
   as noted earlier  meteor has a redundant representation of some domain knowledge: those relating events and observation types  and those asserting the implications of a matched event. this knowledge resides in the event's frame representation but is migrated to the rule representation on an as-needed basis. we are exploring this method as a means of unpacking inference rules by referencing causal connections and relationships among the rule's related frames. just as an event's required-observations property specifies particular values for properties of instantiated observations  an event's inference rules are stored as properties whose values reference other concepts in the network. a mechanism aimed at justifying a procedurally-represented rule can follow these references through the frame representation. in doing so  it will find a number of low-level inference rules and relations that were never represented procedurally or directly used in problem-solving. these low-level rules and relations are the causal underpinnings of the expert's conceptual leap. 
   for example  the justification for the cirrostratus rule above rests on the notion that the required  players  associated with a cirrus event  e.g.  vertical motion in a downward direction  have properties that clash with the required  players  for a storm event  e.g.  vertical motion in an upward direction . these players can also exist as concepts in the type hierarchies  with their own associated inference rules indicating how instantiations of their properties would effect the properties of other concepts. for instance  if vertical-motion's direction property were instantiated as down  this would suggest that relative-humidity's direction-of-change property should be instantiated as decreasing . the notion of required players assembling with the correct properties and affecting each other's the properties is similar to some icai approaches aimed at helping students understand complex causal processes . 
   by separating the procedural knowledge from its declarative support  one can have an expert system that problem-solves as if its knowledge were compiled  but that could back up that compiled knowledge on demand. by having a facility for automatically migrating declaratively-represented rules to procedural form during problem solving  an expert system could access a wider range of inference rules on an as-needed basis than the set it originally began the problem with. 
vii summary and conclusions 
   meteor could have been designed to take symbolic specifications of weather conditions  along with their spatial and temporal characteristics  from a user. however  this would have precluded using much of the data we currently interpret. the quantity of the data  particularly qualitative information on weather conditions  was so great that it could not be processed by human forecasters in real-time. in this sense  meteor goes beyond what the expert currently does. this has increased the complexity of the problem  since this is the first opportunity the expert has had to use his qualitative knowledge about ongoing weather conditions during real-time forecasting. the positive aspect is that meteor will not only be useful to less-experienced forecasters  but will provide the expert with additional information that has been intelligently incorporated into its forecast. 
   we found it necessary to use and extend a number of different formalisms to handle the large amount of different types of knowledge: the meteorological measurements  data in map form  hierarchically-related domain concepts  strategies and subtasks  and qualitative inference rules. the view scheme is an efficent method of organizing the knowledge meteor uses. it also imposes a rigor on the frame structure and has made knowledge about this structure more explicit to the system. by giving some procedural knowledge an initial declarative representation  we have made this knowledge more accessible and potentially more versatile. these redundant representations could facilitate rule justification without compromising the conceptual-leap aspect of expert problem-solving. why  when  and how an expert system might unpack its procedural knowledge to aid its own problem-solving requires further consideration of the role of causal models in expert reasoning. 
	viii 	acknowledgments 
   we are grateful to geoff strong  our expert  for his continued patience and cooperation throughout this project. 
	ix 	