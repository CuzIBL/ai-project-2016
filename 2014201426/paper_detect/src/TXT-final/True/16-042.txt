 
　the weak methods occur pervasively in al systems and may form the basic methods for all intelligent systems. the purpose of this paper is to characterize the weak methods and to explain how and why they arise in intelligent systems. we propose an organization  called a universal weak method  that provides functionality of all the weak methods. a universal weak method is an organizational scheme for knowledge that produces the appropriate search behavior given the available task-domain knowledge. we present a problem solving architecture in which we realize a universal weak method. we also demonstrate the universal weak method with a variety of weak methods on a set of tasks.1 
1 . introduction 
　a basic paradigm in artificial intelligence  al  is to structure systems in terms of goals and methods  where a goal represents the intention to attain some object or state of affairs  and a method specifies the behavior to attain the goal. some methods  for example  hill climbing and means-ends analysis  occur pervasively in existing al systems. such methods have been called weak methods. it has been hypothesized that they form the basic methods for all intelligent systems   the purpose of this paper is to characterize the weak methods and to explain how and why they arise in intelligent systems.  we propose an organization  called a universal weak method  that provides the functionality of all the weak methods we provide an implementation of this method in a 
　production system architecture based on search in a problem space. 
1. the problem space hypothesis 
　a method  weak or otherwise  must be interpreted by an architecture. a key idea on which to base the architecture for an intelligent agent is search. human problem solving and al programs that work on problems of appreciable intellectual difficulty seem to always exhibit search. the case has been argued that a framework of search is involved in all human goal-directed behavior: a hypothesis that is called the problem space hypothesis 
. 
　we will adopt this hypothesis of the centrality of search and will build an architecture for the weak methods around it. problem search occurs in the attempt to attain a goal. the current situation exists in the agent in some representation  which will be called a 
this research was sponsored by the defense advanced research projects 
agency  dod   arpa order no. 1  monitored by the air force avionics 
laboratory under contract f1c-1. the views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies  either expressed or implied  of the defense advanced research projects agency or the us government. 
1 
an extended account with full details is available in . 
state. the agent can transform this representation to yield a new representation with operators. the set of possible states plus the operators will be called the problem space. together  the problem space and goal define the current task that the agent is working on. to attain a goal  the agent starts at an initial state  and applies a sequence of operators to reach some desired state. some goals also have path constraints that limit the paths that are acceptable. search control is the knowledge the agent has about the task that is used to make the decisions encountered while problem solving. the agent must select states  select and apply operators  decide if a 
subgoal should be used  and decide if a goal has succeeded  failed or should be suspended. a method corresponds to a specific pattern of search control knowledge that guides the agent in its 
decisions. 
1. a problem solving a r c h i t e c t u r e 
　in this section we give a particular search based problem solving architecture: soar. soar has representations for the objects involved: goals  problem spaces  states  and operators. each representation of an object can be augmented with additional information about the object or about the history of the object in the problem solving. 
　the current context of the architecture consists of a single object of each type: 
goal  problem space  state  operator 
objects in the current context  together with additional available objects of each type  are called the stock. although the stock is limited by the physical resources of the agent  we make the simplifying assumptions  for the present experiment  that there is unlimited access to the stock and that the stock has unlimited capacity and reliability. 
　a single generic action is available in soar to control the search in the problem space: rcplacement of an object in the current context by another object of the same type. after a replacement  the current objects to the right  in the above ordering  of the replacement become undefined. this initialization is necessary because each object depends on the partial context provided by other current objects. different methods of search are realized by selecting and replacing objects in the context. 
　search-control knowledge is brought to bear on this process by the elaboration decision application  eda  cycle  which involves three distinct phases of processing. the elaboration phase takes the objects from the stock as input  and augments the currentcontext objects. existing data cannot be modified  only augmented. the elaboration phase terminates when no more augmentations can be made. the decision phase follows the elaboration phase and replaces an existing object in the current context based on votes. using objects in the stock as input  and it collects votes: for  against and vetoes. all votes are totaled and soar replaces the left-most context-object type that has a new winning object. if the net votes for all objects of a type are negative  fail wins and 

1 j. laird and a. newell 
replaces the current object. following the decision phase  if the current state and operator are defined  the operator is applied to the state to produce a new state. the new state replaces the current state  while the current operator  through initialization  becomes undefined the elaboration phase is then repeated. 
　the elaboration and decision phases constitute the searchcontrol memory of the agent. we use a specialized production system  for them with productions of the form: 
if c  and c  and ... and c then a 
	1 	n 
the c are conditions that examine the current working context and the stock. the form of the conditions is limited to a class of patterns common to production systems . a is an action that either adds knowledge to a current object via an augmentation  for an elaboration production   casts a vote for an object  for a decision production   or applies an operator to a state. a 
production is satisfied if the conjunction of its conditions is satisfied. all satisfied elaboration productions fire concurrently during the elaboration phase. all satisfied decision productions vote together during the decision phase. 
　to achieve goals in this architecture  productions must be created that define the task:  1  problem space operators   1  detection of the desired states of the goal   1  initialization of the current context and stock with the appropriate goal  problem space  and initial state. a method to control the search is then defined by elaboration and decision productions. figure 1 shows the productions for simple hill climbing for these productions to be used on a specific task  they would have to be instantiated with domain knowledge to compare states and determine the applicability of operators. for figure 1  the elaboration productions compute the evaluation of the current state in relation to the desirea state. the productions for goal decisions detect if the desired state has been reached  or if all the operators have been tried for a state and rejected  fail wins   meaning a local minimum has been reached. the first state decision production will take a step up a hill by voting for the current state if it is better than its ancestor state. the second production rejects a step down the hill by voting for the ancestor state if it is better than the current state the operator productions veto operators that have already been applied to the state  and vote for operators that will apply to the state. 
elaboration 
state: if the current states has not been evaluated  compute the evaluation and add it to the state 
decision 
coal. if the current goal is solved  vote for supergoal. 
goal if the current operator is fail  vote for supergoal 
state if the current state has an evaluation greater than its ancestor state  vote for the current state 
state: if the current state has an evaluation less than its ancestor state  vote for its ancestor state 
operator. if an operator has been applied to a state before  veto it. operator if an operator will apply  vote for it 
figure 1: search control for simple hill climbing. 
1. a universal weak m e t h o d 
　the architecture of the previous section is suitable for encoding many weak methods 1 although we illustrated this only for hill 
　it is also suitable for encoding extended domain-dependent methods  but this is not  he focus of the paper 
climbing. for an architecture to be appropriate for realizing the weak methods generally  it must allow simple and direct encodings of all weak methods. one possibility is to have a separate description for each method and select one based on the current situation. another possibility is to analyze the situation and synthesize the appropriate weak method. 
　we suggest a third alternative: there should exist something  call it a universal weak method  uwm   that responds directly to a situation by behaving according to the weak method appropriate to the knowledge the agent has of the task. each weak method can then be characterized by the small amount of knowledge it has about the task. the uwm is what is left after this characteristic knowledge is removed. this is the default behavior: what is done  given nothing that is known about the task. when the knowledge  productions  for a method is added to the uwm  the system behaves according to that method. 
　figure 1 gives the elaboration/decision productions that constitute the uwm. the first elaboration production detects if all problem spaces have been vetoed  meaning none of the problem spaces were adequate for achieving the goal  and marks the goal unacceptable  an augmentation . the goal must be elaborated with this information so that when it is no longer the current goal  it will not be selected as a subgoal. the next two elaboration productions serve the same purpose for problem spaces  and states. all the decision productions for the goal  problem space  and state vote for an acceptable object and veto unacceptable objects. the operator productions perform the same task for operators. thus  even though the uwm does specify a nontrvial behavior  it is a simple specification that provides just enough control to search a problem space. 
elaboration: 
goal if the current problem spoce is fail  the goal as unacceptable 
problem space ii the current state is fail  the problem space is unacceptable state if the current operator is fail  the state is unacceptable 
decision: 
goal if there is an acceptable available goal  vote for it goal if there is an unacceptable available goal  veto it. 
problem space ii an acceptable problem space is associated to the current goal  vote for it 
problem space ii an unacceptable problem space is associated to the current goal  veto it. 
state. if an acceptable state is in the current problem space  vote for it. 
state if an unacceptable state is in the current problem space  veto it. 
operator if an acceptable operator is associated to the current problem space  vote for it. 
operator if an operator has already been applied to the current state  veto it 
figu re 1: the universal weak method. 
　to achieve a goal with the uwm  we must still define the task  operators and attainment-test  within soar with productions. with just the uwm and the task productions  soar will search the problem space  but unguided by any special knowledge of the task. search control knowledge must be added as elaboration/decision productions. these productions  along with the uwm  determine the behavior and thereby define a method. the elaboration productions define concepts such as depth  evaluation  difference or duplicate state based on the structure of the current task. the decision productions convert these concepts into action by voting for objects. figure 1 shows the decision productions that define simple hill climbing for any task. task dependent elaboration productions must be added to figure 1 to compute the evaluation of states. with these productions  the agent has the knowledge to compute an evaluation function for a state of the task and to use 

the evaluation function to select a state. when these productions are added to the uwm  soar will search using simple hill climbing. 
simple hill climbing 
state if the current stnte is not acceptable or has an evaluation worse than the ancestor state  vote for the ancestor state. 
state if the current state is acceptable and has an evaluation better than the ancestor state  vote for the current state. 
figure 1: simple hill climbing search control 
1. experimental d e m o n s t r a t i o n 
　in this section we demonstrate empirically that the uwm just defined is capable of producing many weak methods. we restrict the scope of the demonstration by not considering methods that involve subgoals. subgoals  of course  are critical to problem solving generally and also to weak methods. however  the role of subgoals in soar rests on the  predicted  existence of another functional capacity of a general intelligent agent  universal subgoaling   to set up subgoals to cope with difficulties that arise in accomplishing a task. we expect that the uwm and universal subgoaling jointly will produce all that might reasonably be called weak methods we attend here only to the uwm in isolation. 
　soar is implemented in a parallel production system architecture  xaps1 .1 twelve tasks were implemented in soar  with some of them sharing a common problem statement. they are mostly simple tasks familiar from theal literature  plus a few even simpler decision and logical tasks. such tasks are suitable for an initial test of a universal weak method  being familiar  easy to implement  and knowledge lean  the situation in which weak methods are used . elaboration and decision productions containing knowledge about the task  similar to those if figure 1  were added to control the search and produce the behavior of a weak method. productions were added that achieved the following weak methods: avoid duplicates  ad   heuristic search with operator selection heuristics  oshs   means ends analysis  mea   breadth-first search  brfs   depth first search  dfs   simple hill climbing  shc . steepest ascent hill climbing  sahc   best-first search  bfs   modified best-first search  mbfs  that is with one step lookahead   and a star  a* . 

j. laird and a. newell 1 
　figure 1 shows the results of the tasks and the weak methods. in the cases labeled +   the behavior was that of the stipulated weak method. in the cases left blank there did not seem to be any structure in the task that allowed inclusion of search-control knowledge leading to the weak method. search-control knowledge was added only if it had heuristic value. although in principle determining whether a method is being followed could be an issue  there is no doubt at all for the runs in question. the structure of the combined set of productions shows that the method will occur and the trace of the actual run simply serves to verify this. note that the success of a method on a task is not an issue  some succeeded  some did not   rather the question is whether the uwm plus the search-control production behaved appropriately. 
1. c o n c l u s i o n 
　we have attempted in this paper to take a step towards a theory of weak methods and an appropriate architecture for a general intelligent agent this has involved introducing a specific problemsolving architecture  soar  based on the problem-space hypothesis  and then a universal weak method that provides the ability to perform as any weak method given appropriate searchcontrol increments that respond only to the special knowledge of the task used by the weak methods we demonstrated the generality of the uwm by using many different weak methods for twelve tasks that the weak method exploits.1 this suggests that the weak methods can be defined as the methods that can be obtained by adding simple search control knowledge to the uwm  with universal subgoaling . 
