 
this paper presents the type-oriented relational learner rhb+. attaching type information to hypotheses is effective in avoiding overgeneralization as well as enhancing readability and comprehensibility. in many areas  such as nlp  type information is actually available  while negative examples are not. unfortunately  learning performance is usually poor if types are attached when only positive examples are available. rhb+ makes use of type information to efficiently compute informativity from positive examples only and to 
judge a stopping condition. the new technique of dynamic type restriction by positive examples lets covered positive examples decide the types appropriate for the current clause. the current version of rhb+  written in the typed logic programming language life  directly manipulates types as structured background knowledge when operations related to types are required. these features make rhb+ efficient and effective in attaching types selected from thousands of possible types. this leads to advantages over several previous learners  such as foil and progol. experimental results demonstrate rhb+ 's fine performance for both artificial and real data. 
1 	introduction 
inductive logic programming  ilp   muggleton  1  is a promising approach to knowledge-level learning from real-world examples such as the wide variety of facts contained in on-line newspapers or large-scale databases. major extensions related to types  or sorts  are  however  required for ilp systems to handle real-world relations. first  types should be always attached to hypotheses in order to make comprehensible rules with appropriate generality. second  background knowledge  even if it includes thousands of hierarchically structured types  must not deteriorate system performance. these extensions have to be achieved within the restriction that only positive examples are available because negatives 
1 	learning 
are not usually found in real-world data. actually  type hierarchy has played a key role in several natural lanuage processing systems  such as  ikehara et al.  1    hastings and lytinen  1   knowledge representation languages  ai't-kaci and nasr  1    ai't-kaci et al.  1    borgidaand patel-schneider  1    sowa  1  also incorporate types and they achieve efficient inheritance according to the type hierarchy used. 
　the following example illustrates that type information is essential to learning in the situation in which a human could learn rules of appropriate generality from a small number of examples by using type hierarchy. 



1 

clauses one by one by calling inner joop p po bk  which returns a hypothesis clause  where po is original positive examples and bk is background knowledge. covered examples are removed from p in each cycle; p1 remains unchanged. 
algorithm 	1 	inner joop p p1 bk  
1. given positive examples p p1  background knowledge bk. 
1. decide types of variables in a head by computing typed iggs of n pairs of elements in p  and select the most general head as head. 
1. if 	stopcond po  bk  head  	is 	satisfied  	return head. 
1- let body be empty. 
1. create a set of all possible literals l using variables in head and body. 
1. let beam be top k literals lk of l with respect to positive weighted informativity  
pwi p bk  head:-body lk  . 
1. do later steps  assuming that lk is added to body for each literal lk in beam. 
1. dynamically restrict types in body by calling restrict  p bk  head :- body  . 
1. if stopcond po bk  head :- body   is satisfied  return  head :- body . 
1. goto 1. 
　we will now see how types are utilized in each component of the rhb+ algorithm in the following sections. 
1 	d y n a m i c t y p e r e s t r i c t i o n by positive examples 
the special feature of rhb+ is the dynamic type restriction by positive examples during clause construction. restrict p bk  head :-body   in algorithm 1 does this part  where p represents positives  bk is background knowledge  and  head:-body  is a hypothetical clause. the restriction uses positive examples currently covered in order to determine appropriate types. informally  for each variable xi appearing in the clause  rhb+ computes the lub of all types bound to xi when covered positive examples are unified with the current head in turn. formally  the dynamic type restriction by positive examples is defined as follows. 
algorithm 1  dynamic type restriction by positive examples  
1. given a hypothesis clause hypo =  head .body  and positives p. 
1. collect all the types in hypo and put them into a list typeset. 
1. let p be examples in p covered by hypo. 
1 	learning 
1- for all elements pi of p   unify head and pif then prove body- make a list typeseti of bound types in the proved head and body so that the position of each type in typeseti correctly corresponds to the 
position of the original type in typeset. 
1. for all xk in typeset  compute lub rk of all bound types of xk in typeset    
1. for all k  bind tk to xk   
　type restriction binds a type to each newly introduced variable in the body. without a type restriction  newly introduced variables would always have no types  and rhb+ might produce over-general clauses. note that the result of the type restriction operation by unification dynamically affects the types of all variables related to the unified variable. this operation is directly implemented by using the type unification mechanism of life. 
　it would rather not aggressively add type to narrow the current cover but it is interesting that the dynamic type restriction significantly contributes to narrowing the current cover and helping the learner to find good hypotheses. 
example 1 
when we have positive examples and background knowledge as given in example 1 and additional data about cat socks. 
  additional positive example : 
{ speak  socks  cat-lang  } 
  additional background knowledge : 
{grew in  socks  japan   socks   cat . 
　suppose that speak agent  anything  is the current head. adding official lang/1   one of the candidates for additional literal  restricts the types in the head as follows. the current clause before the type restriction is: 
	speak agent  	y:anything  	:- 	official lang{x y . 
　the second argument of official lang matches an official language. this cause that covered positives are only examples relating to humans because the positive related to socks is no longer covered. therefore  the type agent is restricted to humans and we obtain: speak human  y-.language  :- officialjang x y . 
　after that  the data unrelated to humans will not affect the clause construction. this illustrates how the typing contributes to restricting types in forming typed clauses. 



1 
1 	learning time and type hierarchy size 
table 1: learning results of  death toll  

figure 1: learning time vs type hierarchy size 
　in order to estimate the effect of type hierarchy size on learning speed  we randomly generated positive examples that satisfied the following answer clause: speak a : person  b : language  :grew in a c : country   official jang  c  b . 
figure 1 shows that f o i l exponentially slows as the type hierarchy size increases. on the other hand  the learning speed of rhb+ and progol were not affected so much by the number of is a relations. mcrs of the results from the artificial data should not be taken seriously. 
1 	experiment by real data 
we extracted articles relating to accidents from a oneyear newspaper corpus written in japanese. 1 forty two articles are related to accidents that resulted in some numbers of death and injury. we parsed the sentences with the commercial-quality parser of our machine translation system  ikehara et al.  1   and performed semantic analysis to extract the case frames in the sentences. twenty five articles were well parsed and semantically analyzed. case frames were converted into literals and we created two kinds of positive examples from those literals. one was death.toll which represents the number of deaths in each article and the other was injury which represents the number of injuries in an article. in prepossessing  literals unrelated to positive examples were removed. the result was that three literals for each article were selected as background knowledge. the data set consisted of 1 positive examples. the background knowledge contained 1 literals with 1 kinds of predicates and 1 types and constants. 
　tables 1 and 1 show the learning results of foil  progol and rhb+.  hypo  shows the number of clauses in hypotheses hypo. t is the union of the hypotheses and background knowledge. |p|/|q t | shows the mcr  the ratio between covered positives and the empirical content of t  that is  the size of the set of all instances of the head provable from t handling type information seriously degraded the learning speed of foil. progol was relatively fast; however it's results were over-general in both experiments. r h b + recorded both good performance and appropriate generality of the outputs. 
　because of space limits  only the learning results from data  death toll  are shown here as follows. 

1 	related work 
some previous learners  such as f o i l  quinlan  1   
g o l e m 	 muggleton  	1  and progol 	 muggleton  
1  use type or sort declarations for curtailing the search space. their learning results  however  do not have type information linked to those declarations. simply including types and is a relations in background knowledge is not a solution to obtaining typed clauses. the reason is that the possibility of a long is a or type 

chain creates excessive overhead; the learner must search for all is a literals or type literals. for example  when the type hierarchy is twelve levels de p  a chain of up to twelve is.a literals should be checked. when is a represents direct links in a type hierarchy  one possible chain might be: is  a x  y  is a{y  z  ..  is a{w  v  is agent{v  .... 
　when is a includes indirect links in a type hierarchy  atoms to be checked are: 
	is a x  	male   is a x  human   ..  is a{x  agent  .... 
　when type literals represent types in a type hierarchy  atoms to be checked are: male x  human x   ... agent x  .... 
　in those cases  top-down learners spend too much time trying to construct those chains while bottom-up learners try to remove the some of is a or type atoms and find good hypotheses. 
　special treatment to types was presented in  yamazaki et al.  1 . it requires both positive and negative ex-
amples to efficiently decide one sa atoms. 
according to an input-output declaration  foidl 
 mooney and califf  1  generates implicit negatives by output queries for input arguments of positive examples in a normal ilp setting. rhb+ utilizes type information to compute the number of covered examples including implicit negatives. 
1 	conclusions and remarks 
rhb+  which learns typed prolog programs  was presented. its performance is not affected by the number of types or type hierarchies size for the sake of direct manipulation of types and utilization of type information in computing informativity heuristics and stopping conditions. it also achieved appropriate generalization levels of hypotheses. at this point  a full life compiler is not available but the current interpretive version of rhb+ showed good performance. the execution speed will markedly improved when a life compiler becomes available. 
acknowledgments 
we thank the anonymous referees for their constructive comments. it helped us improve performance of foil and progol in the experiments. 
