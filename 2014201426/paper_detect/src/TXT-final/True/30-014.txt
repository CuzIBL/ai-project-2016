 
description logics are formalisms for the representation of and reasoning about conceptual knowledge on an abstract level. concrete domains allow the integration of description logic reasoning with reasoning about concrete objects such as numbers  time intervals  or spatial regions. the importance of this combined approach  especially for building real-world applications  is widely accepted. however  the complexity of reasoning with concrete domains has never been formally analyzed and efficient algorithms have not been developed. this paper closes the gap by providing a tight bound for the complexity of reasoning with concrete domains and presenting optimal algorithms. 
1 	introduction 
description logics are knowledge representation and reasoning formalisms dealing with conceptual knowledge on an abstract logical level. however  for a variety of applications  it is essential to integrate the abstract knowledge with knowledge of a more concrete nature. examples of such  concrete knowledge  include all kinds of numerical data as well as temporal and spatial information. important application ar-
eas which have been found to depend on integrated reasoning with concrete knowledge are  e.g.  mechanical engineering ibaader and hanschke  1   reasoning about aggregation in databases  baader and sattler  1   as well as temporal and spatial reasoning  see  haarslcv et at.  1  and  lutz  
1  . many description logic systems such as e.g. classic and k'ris  see iborgida et ai  1   ibaader and hollunder  1   resp.   provide interfaces that allow the attachment of external reasoning facilities which deal with concrete information. surprisingly  the complexity of combined reasoning with abstract and concrete knowledge has  to the best of our knowledge  never been formally analyzed and provably optimal algorithms have not been developed. recent efficient implementations of expressive description logics like f a c t  see  horrocks  1   concentrate on logics for which reasoning is in ps pace. an important reason why these systems fail to integrate concrete knowledge is that no complexity results and no efficient algorithms are available. 
1 	automated reasoning 
¡¡¡¡baader and hanschke  extend description logics by concrete domains  a theoretically well-founded approach to integrated reasoning with abstract and concrete knowledge. on basis of the well-known description logic  they define the description logic which can be parameterized by a concrete domain in this paper  we extend .  by the operators feature agreement and feature disagreement. this leads to the new logic 
which combines  with the logic 
der and nutt  1 . algorithms for deciding the concept satisfiability and abox consistency problems for the logic are given. furthermore  the complexity of reasoning with is formally analyzed. since reasoning with involves a satisfiability check for the concrete domain  the complexity of the combined formalism depends on the complexity of reasoning in the concrete domain. the proposed algorithms are proved to need polynomial space which implies that  first  reasoning with is pspace-complcte provided that reasoning with the concrete domain is in ps pace  and  second  the devised algorithms are optimal. the obtained complexity results carry over to the description logic  the algorithmic techniques introduced in this paper are vital for efficient implementations of both and 
as a simple example illustrating the expressivity of consider the concept man 
 in this example  man is a primi-
tive concept  wife and wage are features  i.e.  single valued roles   and  is a concrete predicate. the given concept describes the set of men whose boss coincides with their wife and who  furthermore  have a higher wage than their wife. in this example  the wage of a person is knowledge of a concrete type while being a man is knowledge of a more abstract nature. the coincidence of wife and boss is described using the feature agreement operator  and cannot be expressed in the syntax used is defined in the next section. 
1 the description logic 
in this section  the description logic is introduced. we start the formal specification by recalling the definition of a concrete domain given in  baader and hanschke  1 . 
definition 1. a concrete domain is a pair where  is a set called the domain  and is a set of pred-

icate names. each predicate name p in is associated with an arity and an ary predicate a concrete domain is called admissible iff  1  the set of its predicate names is closed under negation and contains a name  for  and  1  the satisfiability problem for finite conjunctions 
of predicates is decidable. 
on the basis of concrete domains  the syntax of concepts can be defined. 
definition 1. let c  r  and f be disjoint sets of concept  role  and feature names1. a composition  of features is called a feature chain. any element of c is a concept. if c and d are concepts  r is a role or feature  
is a predicate name with arity  and are feature chains  then the following expressions are also concepts: 
  -ic  negation   	 conjunction     disjunction   
	 value restriction   	 exists restriction   
  predicate operator  
    feature a g r e e m e n t       f e a t u r e disagreement . 
a simple feature is a feature chain of length one. for a feature 
chain c and .c will be used as abbreviations for and respectively. as usual  a set theoretic semantics is given. 
definition 1. an interpretation  consists of a s e t   t h e abstract domain  and an interpretation function . the sets  and  must be disjoint. the interpretation function maps each concept name c to a subset of   each role name r to a subset of 
	  and each feature name 	to a partial function 
from   w h e r e w i l l be written as 	is a feature chain  then 
is defined as the composition of the partial functions let the symbols c  d  r  p  and u1  be defined as in definition 1. then the interpretation 
function can be extended to complex concepts as follows: 

   'in the following  the notion role  feature  is used synonymously for role name  feature name . 
an interpretation is a model of a concept c iff a concept c is satisfiable iff there exists a model of c. a concept c subsumes a concept d  written iff  for all interpretations 
subsumption can be reduced to satisfiability since c iff the concept -c is unsatisfiable. please note that the feature agreement and feature disagreement operators consider only objects from  and no objects from . agreement and disagreement over concrete objects can be expressed by using a concrete domain which includes an equality predicate. using disjunction   global  agreement and disagreement over both the concrete and the abstract domain can then also be expressed  see  lutz  1  . this approach was chosen since global agreement and disagreement are not considered to be very  natural  operators. we will now introduce the assertional formalism of 
definition 1. let and oa be disjoint sets of object names. elements of od are called concrete objects and elements of oa are called abstract objects. if c  r  f  and p are defined as in definition 1   and b are elements of 1 and  are elements of 
o d   then the following expressions are assertional axioms: 
a finite set of assertional axioms is called an abox. an interpretation for the concept language can be extended to the assertional language by mapping every object name from to an element of and every object name from to an element of the unique name assumption is not imposed  i.e. may hold even if  and b are distinct object names. an interpretation satisfies an assertional axiom 

an interpretation is a model of an abox a iff it satisfies all assertional axioms in a. an abox is consistent iff it has a model. 
satisfiability of concepts  as introduced in definition 1  can be reduced to abox consistency since a concept c is satisfiahle iff the abox  is consistent. in the next section  an algorithm for deciding the consistency of  aboxes is presented. 
1 	algorithms 
completion algorithms  also known as tableau algorithms  are frequently used to decide concept satisfiability and abox consistency for various description logics. completion algorithms work on  possibly generalized  aboxes and are characterized by a set of completion rules and a strategy to apply these rules to the assertional axioms of an abox. the algorithm starts with an initial abox  whose consistency is to 
	lutz 	1 

be decided. if the satisfiability of a concept c is to be decided  the abox  is considered. the algorithm repeatedly applies completion rules adding new axioms  and  by doing so  makes all knowledge implicitely contained in the abox explicit. if the algorithm succeeds to construct an abox which is complete  i.e.  to which no more completion rules are applicable  and which does not contain an obvious contradiction  then  has a model. otherwise   does not have a model. 
¡¡in  hollunder and nutt  1   a completion algorithm for deciding the satisfiability of can be executed in polynomial space. in  baader and hanschke  1   an algorithm for deciding the consistency of without feature agreement and dis-
agreement  aboxes is given. however  this algorithm needs exponential space in the worst case. this is due to the fact that the algorithm collects all axioms of the form : p  concrete domain axioms  obtained during rule application  conjoins them into one big conjunction for satisfiability w.r.t. the concrete domain. unfortunately  the size of this conjunction may be exponential in the size of  see  lutz  1  for an example . to obtain a polynomial space algorithm for deciding the consistency of aboxes  the concrete domain satisfiability test has to be broken up into independent  chunks  of polynomial size. 
the completion algorithm for deciding the consistency of 
 aboxes is developed in two steps: first  an algorithm for deciding the satisfiability of  concepts is devised. second  an algorithm is given which reduces abox consistency to concept satisfiability by constructing a number of  reduction concepts  for a given abox ao. a similar reduction can be found in  hollunder  1 . 
   before giving a formal description of the completion algorithms themselves  the completion rules are defined. to define the rules in a succinct way  the functions succja and chain a are introduced. let a be an abox. for an object  and a feature chain u  sua denotes the object 
b that can be found by following u starting from  in a. if no such object exists  succ   denotes the special object that cannot be part of any abox. an object name  oa 
is called fresh in a if  is not used in a. let a be an object from b e a n object from o d   a e a feature chain. the function chain is defined as follows: 

now  the set of completion rules can be formulated. please note that the completion rule  is nondeterministic  i.e.  there is more than one possible outcome of a rule application. 
definition 1. the following completion rules replace a given 
abox a nondeterministically by an abox a''. an abox .1 is said to contain a fork  for a feature/  iff it contains the two axioms 
and 	a fork can be eliminated by replacing all occurrences of c in a with b  or of x with y  resp. it is assumed that forks are eliminated as soon as they appear  as part of the rule application  with the proviso that newly generated objects are replaced by older ones and not vice versa. in the following  c and d denote concepts  a role  f a feature  p a predicate name from 
1 	automated reasoning 
rule applications that generate new objects are called generating. all other rule applications are called nongenerating. all applications of the rule are generating. 
application of the rules are usually generating but may be non-generating if fork elimination takes place. 
a formalized notion of contradictory and of complete aboxes is introduced in the following. 
definition 1. let the same naming conventions be given as in definition 1. an abox a is called contradictory if one of the following clash triggers is applicable. if none of the clash triggers is applicable to an abox a  then a is called clash-free. 
  primitive clash: 
  feature domain clash: 
  all domain clash: 
  agreement clash: 
an abox to which no completion rule is applicable is called complete. an abox a is called concrete domain satisfiable iff there exists a mapping from . s u c h that 
is true in 


figure 1: the sat algorithm. 
we are now ready to define the completion algorithm sat for deciding the satisfiability of  concepts. sat takes an abox  as input  where c has to be in negation normal form  i.e.  negation is allowed only in front of concept names. conversion to nnf can be done by exhaustively applying appropriate rewrite rules to push negation inwards. we only give the conversion rules needed for the new constructors feature agreement and feature disagreement  and refer to  baadcr and hanschke  1  for the rule set. 
any concept can be converted into an equivalent concept in nnf in linear time. some comments about the application of nondeterministic completion rules are in order. the application of the nondeterministic rule  yields more than one possible outcome. it is not specified which possibility is chosen in a given run of a completion algorithm. this means that the algorithms to be specified are nondeterministic algorithms. such algorithms returns a positive result if there is any way to make the nondeterministic decisions such that a positive result is obtained. 
¡¡¡¡the satisfiability algorithm makes use of two auxiliary functions which will be described only informally. the function apply takes two arguments  an abox .1 and a completion rule it applies r once to arbitrary axioms from a matching 's premise and  nondeterministically  returns a descendant of a that is obtained by rule application. the function satisfiable  takes as arguments a concrete domain  and a set c of concrete domain axioms. it returns yes if the conjunction of all axioms in is satisfiable w.r.t.  and no otherwise. the sat algorithm is given in figure 1. based on sat  we define the abox-cons algorithm for deciding abox consistency. this algorithm can be found in figure 1. 
¡¡a formal correctness proof for the algorithms is omitted for the sake of brevity and can be found in  lutz  1 . a 

figure 1: the abox-cons algorithm. 
short  informal discussion of the employed strategies is given instead. the sat algorithm performs depth-first search over role successors. this technique  first introduced by schmidtschau and smolka   1   for the logic    allows to keep only a polynomial fragment  called  trace   of the model in memory  although the total size of the model may be exponential. tracing algorithms usually expand the axioms belonging to a single object  only  and make a recursive call for each role successor of this object. this is not feasible in the case of since more than a single object may have to be considered when checking concrete domain satisfiability. the central idea to overcome this problem is to expand axioms not for single objects but for  clusters  of ob-
jects which are connected by features. this is done by the feature-complete function. during cluster expansion  chunks of concrete domain axioms are collected. any such chunk can separately be checked for satisfiability. to see this  it is important to note that roles arc not allowed inside the predicate operator  and thus concrete domain axioms cannot involve objects from different clusters  which are connected by roles . a similar strategy is employed for in  hollunder and nutt  1. the abox-cons reduces abox consistency to satisfiability by performing preprocessing on the initial abox and then constructing a reduction concept for each role successor of any object in the resulting abox. in the next section  the complexity of both algorithms is analyzed. 
1 	complexity of reasoning 
to characterize space requirements  a formal notion for the size of an abox is introduced. 

	lutz 	1 

c and 1 
otherwise. the size of an abox a is the sum of the sizes of all axioms in a. 
for the analysis of the space needed by sat  two lemmata are needed. 
lemma 1. for any input a  the function feature-complete constructs an abox a' with 
proof: the upper bound for the size of a' is a consequence of the following two points: 
1. feature-complete generates no more than ioms. 
1. for each axiom a  we have 
the second point is obvious  but the first one needs to be proven. the rules  and  will not be considered since they are not applied by feature-complete. for all other completion rules  the most important observation is that they can be applied at most once per axiom : c this is also true for axioms and t h e r u l e since there is at most one axiom per feature f and object we make the simplifying assumption that the premise of the   rule does only contain the axiom  i.e.  that it is applied to every axiom of this form regardless if there is an axiom  a  b  : f or not. this may result in too high an estimation of the number of generated axioms but not in one that is too low. we now prove the first point from above by showing that  for each axiom a in a  no more than  axioms are generated by feature-complete. 
no new axioms arc generated for axioms of the form 
 p since they do 
not appear in the premise of any completion rule  please recall the simplification we made about  the remaining axioms are of the form c. for these axioms  the property in question can be proved by induction on the structure of c. 
¡¡for the induction start  let c be or a concept name. in any of these cases  
it is trivial to verify that at most new axioms may be generated. for the induction step  we need to make a case distinction according to the form of c. let c be of the form the application of the rule generates two axioms and : e. by induction hypothesis  from these two axioms  at most axioms may be generated  respectively. hence  from   at most 
new axioms may be generated  the cases tor the remaining operators  and are analogous. because of the simplifying assumptions made  the case does not need a special treatment. 	
1 	automated reasoning 
lemma 1. for any input ao  the recursion depth of sat is hounded 	
proof: the role depth of a concept c is the maximum nesting depth of exists and value restrictions in c. the role depth of an abox a is the maximum role depth of all concepts occurring in a. as an immediate consequence of the way in which the input aboxes of recursive calls are constructed  we have that the role depth of the arguments aboxes strictly decreases with recursion depth. 
the space requirements of sat can now be settled. 
proposition 1. for any input  sat can be executed in space polynomial in  provided that this also holds for the function satisfiabley. 
proof: we will first analyze the maximum size of the arguments passed to sat in recursive calls. the argument to sat is an abox which contains axioms : c for a single object 
 it is obvious that there can be at most as many such axioms per object as there are distinct  sub concepts appearing in . this number is bounded by . furthermore  the size of any axiom is at most . it follows that the maximum size of arguments given in a recursive call is using feature-complete  the argument abox is extended by new axioms. combining the argument size with the result from lemma 1  we find that the maximum size of aboxes constructed during recursive calls is  to-
gether with lemma 1  it follows that sat can be executed in  space. 	¡ö 
this result completes the analysis of the sat algorithm. the abox-cons algorithm performs some preprocessing on the input abox and then repeatedly calls sat. its space requirements are investigated in the next proposition. 
proposition 1. started on input a  abox-cons can be executed in space polynomial in  provided that this also holds for the function satisfiabley. 
proof: it was already proven that sat can be executed in polynomial space if this also holds for satisfiable . thus  it remains to be shown that  for an abox a the size of preprocess  1  is polynomial in  we will only give a sketch of the proof  for the full version see  lutz  1 . ob-
jects are called old if they are used in a and new if they are used in  but not in  the proof relies on the fact that the preprocess function is identical to the feature-complete function except that preprocess does also apply the rule. an upper bound for the number of  applications performed by preprocess can be given as follows: if is applied to 
axioms  and then both a and b are old ob-
jects. this is the case since preprocess does not apply 
and  hence  no new axioms of the form  a  b : where r is a role  are generated. furthermore  there are at most old objects which means that the number of applications is bounded by . together with lemma 1  it can be shown that ¡ö 

the results just obtained allows us to determine the formal complexity of reasoning with concrete domains. 
theorem 1. provided that the satisfiability test of the concrete domain  is in ps pace  the following problems are pspace-complete: 
j. consistency of a boxes. 
1. satisfiability and sub sumption of 	concepts. 
1. satisfiability and subsumption of 	concepts. 
1. consistency of and 
if the satisfiability test of v is in a complexity class  with pspace  x  then all of the above problems are pspacehard. 
proof:  1  since  is a proper subset of   and the satisfiability problem for  is pspace-complete  sehmidt-schaub and smolka  1   deciding the consistency of  aboxes is pspacb-hard. it remains to be shown that it is in ps pace if this is also the case for the concrete domain satisfiability test. this follows from proposition 1 together with the well-known fact that pspace = npspace  savitch  1 .  1  is true since satisfiability as well as subsumption can be reduced to abox consistency  cf. section 1.  1  and  1  hold since is a proper subset of both logics and which are in turn proper subsets of 	
examples of useful concrete domains for which the satisfiability test is in pspace are given in ilutz  1 . 
1 	conclusions and future work 
we have presented optimal algorithms for deciding the concept satisfiability and the abox consistency problems for the logic . in contrast to existing decision procedures  the devised algorithms can be executed in polynomial space provided that this does also hold for the concrete domain satisfiability test. based on this result  it was proven that reasoning with is a pspace-complete problem. the rule application strategy used by the proposed algorithm is vital for efficient implementations of description logics with concrete domains. an interesting new result in this context is that in the case of and  satisfiability w.r.t. tboxes is a nexptlmb-hard problem  lutz  1. as future work  we will consider the combination of concrete domains with more expressive logics for which reasoning is in pspace  see e.g.  sattler  1 . furthermore  the logic  seems to be a promising candidate for the reduction of some temporal description logics in order to obtain complexity results for them. 
acknowledgments 1 would like to thank ulrike satller and franz baader for enlightening discussions and helpful comments. the work in this paper was supported by the  foundations of data warehouse quality   dwq  european esprit iv long term research  ltr  project 1. 
