 
we describe a transformational derivation system that semi-automatically derives a simplified version of mycin's therapy selection algorithm. it uses general transformation rules to explicitly integrate the multiple  sometimes conflicting goals that govern the design of heuristic algorithms. the generality of its transformations is demonstrated by using them to derive a variation based on formulating and integrating the same design goals differently. 
i 	i n t r o d u c t i o n 
　design of complex artifacts like programs  circuits  and buildings requires the integration of multiple  possibly conflicting design goals. thus knowledgebased design systems ought to represent and reason about multiple design goals  since the better they  understand  the design process  the more intelligent the assistance they can provide. current design systems tend to lack this capability. either they fail to address multiple goals  or decisions that integrate particular goals and resolve specific conflicts are implicitly precompiled into their knowledge base by a manual knowledge engineering process  mostow k swartout 1 . to remedy this deficiency  we need better models for explicitly reasoning about multiple goals in design  and other knowledge-intensive problem-solving tasks   mostow 1 . 
　one kind of intelligent design assistance is the ability to explain various features of the designed artifact. in the case of program design   swartout 1  points out that many questions about the designed artifact cannot be answered satisfactorily without referring to its development history  usually by asking its developer. for example  if a program feature depends on a particular manner of integrating certain design goals  explaining this feature involves referring to the design moves that carried out the integration  and the design rationale that motivated them  neches et al 1 . thus automating such explanations would require explicitly representing this design history 
   this work wa′ supported by nsf under grant number dmc-1  and by the rutgers center for computer aide to industrial productivity. 
1 	reasoning 
information in machine-understandable form. automated explanation is just one motivation for developing better models of goal integration in design;  mostow 1  describes a host of others. 
　we have chosen to investigate this problem in the domain of heuristic algorithm design. to explore the kinds of knowledge and reasoning needed to integrate multiple design goals in this domain  we rationally reconstructed a simplified version of mycin's therapy selection algorithm  clancey 1   chosen because it tries to satisfy several conflicting design goals. we identified three kinds of goals: 
  domain goals  here: medical goals  prescribe the algorithm output. 
  algorithm 	goals 	govern 	the 	algorithm's performance. 
  design process goals dictate the resources available to the design process  such as the time within which the algorithm design must be completed. 
in particular  we chose to address the following representative sample of the mycin design goals listed in  mostow & swartout 1 : 
  domain goals: 
o maximize drug effectiveness. 
o minimize the number of drugs in the therapy  
o avoid contra-indicated therapies. 
  algorithm goals: 
o maximize time efficiency. 
o maximize space efficiency. we encoded  in the form of domain-independent transformation rules  the general knowledge needed to integrate these goals and incorporate them into an algorithm. we call the resulting algorithm rmtsa  for reduced mycin therapy selection algorithm. given a set of drugs  the rmtsa is to generate the therapy  subset of drugs  that best satisfies the above medical goals  while not violating any of the algorithm goals. notice the potential conflict among the medical goals in situations where they cannot all be satisfied perfectly. while design process goals influence the design  we have not modelled them explicitly in the system. 

ii the model of algorithm design 
　we model algorithm design as a transformational derivation process leading from an initial specification to an executable algorithm. our algorithm design states consist of two parts  a dataflow graph and an agenda of design goals. the dataflow graph consists of algorithm components such as memories  mappings  filters  selectors  searches  and collects  whose input and output ports are connected through dataflow links. the agenda lists the design goals not yet incorporated in the algorithm being designed. design operators 
  transform a partially designed algorithm so as to incorporate  pursue  or avoid violating a design goal  
  integrate multiple  possibly conflicting  design goals into a combined goal  or 
  reformulate a design goal to enable the application of another design operator. 
　we adopted the ideas of using dataflow graphs and allowing non-correctness-preserving transformation rules from  kant & newell 1  kant 1  steier & kant 1 . pointers 	to 	preceding 	and 	succeeding 	algorithm components. 
　we have not attacked the problem of automatically controlling the selection of transformation rules. we avoided all issues of control by alternating user selection of a supposedly suitable transformation rule from the full set of rules  with automatic application of this rule to the current algorithm design state. 
　our system models the design of algorithms like the one shown below  consisting of a cascade of generators  mappings  filters  and sorters. 
iv the initial algorithm design state 
	we take the specification for the design 	of the 
	rmtsa as the initial state of our derivation. 	figure 
iv-1 shows the algorithm specification formulated in our representation. 
initial dataflow graph: 
iii a note on representation and implementation 
　our system is implemented in loops  an objectoriented programming environment developed at xerox  bobrow 1 . algorithm components  design goals  and data input to the algorithm are represented as objects. links between the components of a dataflow graph are represented as slots that contain 
1 　the semantics of each component type  memory  mapping  test  filter  search  and collect  is operationally defined by a rule for compiling it into interlisp code  teitelman 1 . a dataflow graph is compiled into its corresponding code by compiling each of its components and appropriately nesting the resulting pieces of code. the dataflow graph representation of the algorithm is executable if all its components are executable. in order for a component  or rather its compilation  to be executable  the component must not contain any non-operational statements. otherwise  more transformations are needed to operationalize the component. the $search component is an example of a compound component  which can include other algorithm components within its own internal structure  see figure iii-l . the $search schema has slots .set for the choice set  .map for the mapping function  identity as default   and .when for one or more filters  true as default . 

　the initial specification of the rmtsa consists of an initial dataflow graph and an initial agenda of design goals. the dataflow graph has two components. the mapping component s subsetsl enumerates all subsets of the input set. it is followed by the selecting component $ndselect  which non-deterministically selects from its choice set of therapies  subsets of drugs  a therapy that best satisfies the domain goals  .domaingoals  without the algorithm violating any algorithm goals  .algrthmgoals . the agenda of design goals lists three domain goals and two algorithm goals. 
v derivation of rmtsa1: first example 
　we now derive the rmtsa  introducing transformation rules as needed  and showing those portions of the resulting algorithm design state where changes have occurred. 
the initial algorithm design state appeared in figure 
iv-1. it lists $fewer-contra-indications as one of its domain goals. the transformation rule treatgoal as constraint treats this goal as a constraint. the cut-off value for thresholding - here 1 - is provided by the system developer to indicate that no contra-indications will be tolerated. the result of thresholding is a new predicate  $pred1  that returns true if the number of contra-indicated drugs in a given therapy is less than or equal to this cut-off value. 
treat goal asconstraint: treat goal g as a constraint. do so by thresholding using a user-provided cut-off value. 
application of refineselect to search replaces the non-deterministically selecting component s ndselectl by a newly created search component $search1. refineselecttosearch: replace nondeterministic selection of an element according to c o n s t r a i n t s b y a search for this element. 
at this stage  $ search 1 appears still in default format  and is operational. in fact  the entire algorithm is operational. however  since no goals have been incorporated yet  it would return the first generated subset of drugs  not the therapy that best satisfies the domain goals. 


	next  	we 	apply 	the 	transformation 
incorporateconstraints to the contra-indications constraint  now predicate $pred1  in order to incorporate it into $search1. 
1 	reasoning 
incorporateconstraints: to incorporate constraints cv ...  cn on a selected element  use them to filter the choice set. 
then transformation rule constraint tofilter creates a filter component $pfilt1  for ipred1. the last step is needed since in our representation only components  not predicates  are compilable into executable code. 
　　　constrainttofilter: reformulate constraint c as a filter. we obtain the algorithm design state shown. 

with:$search1.when =  $pfilt1  
　the goals $ more-drug-effectiveness and ifewer-drugs are converted into preferences by applying 
treatgoalaspreference twice  once to each goal. treatgoalaspreference: treat goal g as a preference. 
only the agenda of design goals has changed. 
.domain goals = nil 
.preferences =  $more-drug-effective $fewer-drugs  
　we can now use sortbypreferences to incorporate the preferences. the resulting dataflow graph will generate possible therapies  sort them according to the preferences  and search for the first one that satisfies the constraints. 
sortbypreferences: to incorporate one or more preferences p1  ...  pn on a selected element  use them to sort the choice set. 
if  mark the preferences for integration. additional effect: reduces average runtime. 

with: $sort1.sortcrit = 
 *combine* tmore-drug-effective s fewer-drugs  
.preferences 	= nil 
　in order to reduce the space cost of our algorithm  we now use condensepreference to condense smoredrug-effectiveness into 1 categories; we pretend we have been given this number by a domain expert. condensepreference: to help minimize space  condense a preference p into n categories. 
　we now notice a type clash: the input to $sort1 is a set of drugs  whereas $more-drug-effective in the sort criterion compares individual drugs. consequently  we extend the preference $more-drug-ertective into one that allows the comparison of sets of drugs. here the type clash is resolved by defining a new preference  

$ more-therapy-effective  which distinguishes between bags of drugs  mostow $ swartout 1 . depending on the kind of type clash and its context  other measures might be needed. 
　the changes brought about by condensing and bagextending smore-drug-eitective are not reflected in the dataflow graph or the goal agenda. apart from the creation of a new preference  the changes have taken place in the internal specification of $ more-drugeffective. the internal specifications of the domain goals are stated in rather unreadable lisp code  so we spare the reader the details. 
　the transformation conjoin preferences integrates the preferences $more-therapy-effective and $fewerdrugs. 
conjoinpreferences: to combine two preferences p and q  form their logical conjunction p a q . 
this step creates a preference $ better- therapy  which becomes the new sort criterion in $sort1.sortcrit. 

with:tsort1.sortcrit = $better-therapy 
　a final transformation pursues the algorithm goal $less-time-cost. 
precomputedata: 	to help reduce runtime  	precompute data known 	at 	design time. 
here it precomputes the data provided by the dataflow subgraph consisting of the components s subsetsl and $sort1  which depend only on information known at design time. precomputation eliminates the costly sorting from the algorithm  by abstracting the elements of the choice set  therapies  to therapy profiles  sorting the profiles according to the sort criterion  and storing the sorted list of profiles in a table. at runtime  the algorithm will use this precomputed table to generate the equivalence classes of therapies matching each successive profile  thereby generating therapies sorted according to the original sort criterion. the next two diagrams summarize this transformation step. 
before precomputedata: 


at run time  the algorithm uses the presorted list of profiles  or  instruction table''  as it is called in mycin   to generate therapies in sorted order according to the sort criterion sbetter-therapy. an instruction  for example   1 1 '  means  compose a therapy by selecting two drugs from drug effectiveness category 1  and no drugs from categories 1 and 1'  therapies 
matching the sorted profiles are tested for contraindications  and the first therapy with none is returned. 
　notice that the instruction table is actually just a small portion of the entire table that would have been computed if we had not instructed our profile generator to produce only a subset of all possible profiles. in our implementation  we contented ourselves with generating 1 profiles  which we reduced further by selecting only profiles that we considered  realistic . for example  if acceptable therapies never contain more than 1 drugs  then the profile   1 1   prescribing 1 drugs is not realistic. to keep the set of profiles finite  we chose not to generate any profiles that use more than 1 drugs. 
　presorting the profiles requires some design-time interaction. since $more-therapy-effective defines a partial order  $ better-therapy is partial too. for instance  it does not determine whether the profile 
  1 1    two first choice drugs  is better than   1 1    one second choice drug . in situations like this  the rule prompts the system developer to make the decision based on domain knowledge. ideally  the expert should also be required to explicitly formulate the reasons for the decision  or say if it is arbitrary. these reasons could then be recorded and used to eventually linearize partial orders. 
　the design of rmtsa terminates after the application of precomputedata. the criteria for successful termination of the design process are 
1 

fullfilled. all domain goals have been incorporated into the algorithm and have been reformulated and integrated so that the algorithm is fully operational. further  the algorithm satisfies the posted algorithm goals. a design would terminate in failure if one or more of the domain goals or algorithm performance goals could not be satisfied by applicable transformation rules. 
　to summarize  we show the rule tree underlying the derivation of rmtsa1. a longer version of this paper  mostow & voigt 1  presents the lisp code corresponding to the final algorithm  and a demonstration of its executability. 

vi rmtsa1: 	a variation 
　to test the generality of the transformation rules  we applied them to a variation of the rmtsa problem. the variation starts out with the same initial algorithm design state as for rmtsal  except for the algorithm goals $less-time-cost and $less-space-cost. the design diverges from the previous derivation when we formulate the goal tfewer-contra-indications as a preference and all the other goals as constraints. the resulting algorithm  shown below  returns the therapy with fewest contra-indications  subject to constraints on its effectiveness and number of drugs. it generates possible therapies  sorts them by the number of contra-indicated drugs they contain  and outputs the first one that has at most two drugs and passes a minimum effectiveness threshold. 

    mostow & voigt 1  details the derivation  the final state  and the result of compiling and executing it. the variation produces substantially different behavior from the original version: different questions are asked at design and runtime  and different therapies are output. nonetheless  the nature of the design task remains very similar to the first example. the same rules apply; only the thresholding transformation had to be slightly modified. some additional coding was necessary to enhance the design goal representations. the need to add information about the goals is not surprising  and can be viewed as feedback from implementation to specification  swartout 1 . 
a summary of the derivation is shown below. 

v i i conclusion 
we have demonstrated how transformation rules can 

1 	reasoning 

convert an initially non-operational algorithm specification into an operational algorithm so as to satisfy multiple  interdependent  and sometimes conflicting design goals. we hope to have given an impression of the various reformulation steps needed to incorporate domain goals into an algorithm  and of how performance goals shape the algorithm. 

　in retrospect  we identify four types of knowledge that enter the design process: domain knowledge  algorithm knowledge  goal knowledge  and control knowledge. in our example  domain knowledge describes the medical domain in which therapy selection takes place. algorithm knowledge describes various algorithm components  prescribes how to combine these components into an algorithm  and tells how to judge the performance of an algorithm. goal knowledge describes goals and the operators for reformulating and integrating thern. we feel that this  goal space  requires further investigation. 
　in our implementation  we have represented in the computer enough medical  algorithm  and goal knowledge to design the rmtsa. interaction with a human expert compensates for the system's lack of the experiential knowledge needed to set thresholds  determine the number of categories for condensing  etc. manual selection of transformation rules simulates the considerable control knowledge needed to guide the algorithm design process to an acceptable solution. 
　an interesting step towards explicit representation of such control knowledge would be to automate the reasoning that influences the formulation of a goal as a preference or constraint. comparing the two derivations  we can see the strong effect of such choices on the resulting algorithm. one heuristic is to formulate conflicting goals as p