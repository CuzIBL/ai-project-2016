
numerous logics have been developed for reasoning about inconsistency which differ in  i  the logic to which they apply  and  ii  the criteria used to draw inferences. in this paper  we propose a general framework for reasoning about inconsistency in a wide variety of logics including ones for which inconsistency resolution methods have not yet been studied  e.g. various temporal and epistemic logics . we start with tarski and scott's axiomatization of logics  but drop their monotonicity requirements that we believe are too strong for ai. for such a logic l  we define the concept of an option. options are sets of formulas in l that are closed and consistent according to the notion of consequence and consistency in l. we show that by defining an appropriate preference relation on options  we can capture several existing works such as brewka's subtheories. we also provide algorithms to compute most preferred options.
1 introduction
inconsistency management has been intensely studied in various parts of ai  often in slightly disguised form  poole  1; g. pinkas  1; rescher and manor  1; gardenfors  1 . for example  default logics  reiter  1  use syntax to distinguish between strict facts and default rules  and identify different extensions of the default logic as potential ways of  making sense  of seemingly conflicting information. likewise  inheritance networks  touretzkey  1  define extensions based on analyzing paths in the network and using notions of specificity to resolve conflicts. argumentation frameworks  dung  1  study different ways in which an argument for or against a proposition can be made  and then determine which arguments defeat which other arguments in an effort to decide what can be reasonably concluded. all these excellent works provide an a priori conflict resolution mechanism. a user who uses a system based on these papers is more or less committed to the semantics implemented in the system  and has little say in the matter  besides which most users querying kbs are unlikely to be experts in even classical logic  let alone default logics and argumentation methods .
the aims of the paper are:
1. to propose a unified framework for reasoning about inconsistency  which captures existing approaches as a special case and provides an easy basis for comparison.
1. to apply the framework using any logic  monotonic or nonmonotonic   including ones for which inconsistency management has not been studied before  e.g. temporal  probabilistic logics .
1. to allow end-users to bring their domain knowledge tobear  allowing them to voice an opinion on what works for them  not what a system manager decided was right for them.  in other words  to take into account the preferences of the end-user.
1. to propose efficient algorithms for computing the preferred options.
¡¡we do this by building upon dana scott's celebrated notions of an abstract logic. we start with a simple example to illustrate why conflicts can often end up being resolved in different ways by human beings  and why it is important to allow end-users to bring their knowledge to bear when a system resolves conflicts.
example 1  salary example  suppose a university payroll system says that john's salary is 1k  while the university personnel database says it is 1k. in addition  there may be an axiom that says that everyone has exactly one salary. one simple way to model this is via the theory  denoted salbase  below.
salary john 1k 	¡û	 1  salary john 1k 	¡û	 1 
	s 	salary x s  ¡Ä salary
salbase is obviously inconsistent. suppose   1  is definitely known to be true. then a bank manager considering john for a loan may choose the 1k number to determine a maximal loan amount that john qualifies for. but a national tax agency may use the 1k figure to send john a letter asking him why he underpaid his taxes.
neither the bank manager nor the tax officer is making any attempt to find out the truth  thus far  - however  both of them are making different decisions based on the same facts.
¡¡the rest of this paper proceeds as follows. in section 1  we recall scott's notion of what a logic is  scott  1 . then  in section 1  we define our general framework for reasoning about inconsistency for any scott logic. section 1 shows how to adapt the general framework to the particular case of inconsistent bases. in section 1  we show how existing works can be retrieved in our general framework. section 1 presents some examples of how the general framework can be applied in other logics such as temporal and probabilistic logics. in section 1  we develop algorithms to compute optimal options based on various types of monotonicity assumptions about the objective function. note that due to lack of space  we only include a few proofs - the full version of this paper will contain all proofs.
1 scott's abstract consequence operation
dana scott  scott  1  defines an abstract logic to consist of a set l  whose members are called well-formed formulas  and a consequence operator cn. cn is any function from 1l  the powerset of l  to 1l  intuitively  cn x  returns the set of formulas that are logical consequences of x according to the logic in question  that satisfies the following axioms:
expansion x   cn x .
idempotence cn cn x   = cn x .
monotonicity x   y   cn x    cn y  .
coherence cn.
it is easy to see that most well known monotonic logics  such as propositional logic  shoenfield  1   first order logic  shoenfield  1   modal logic  temporal logic  fuzzy logic  probabilistic logic  bacchus  1   etc.  can be viewed as a special case of scott's notion of an abstract logic. the nonmonotonic logics introduced in ai do not satisfy the monotonicity axiom  though marek et. al.  marek et al.  1  have defined the notion of non-monotone rule systems that extend scott's ideas to non-monotonic logics by dropping the monotonicity axiom above. in the remainder of this paper  we drop monotonicity axiom. once  l cn  are fixed  we can define a notion of consistency as follows:
definition 1  consistency  let x   l. x is consistent in logic  l cn  iff cn.
this says that x is consistent iff its set of consequences is not the set of all well formed formulas. note that the coherence requirement characterizing cn forces   to always be consistent - this is reasonable for pretty much any reasonable logic as saying nothing should intuitively be consistent.
1 a general framework for handling inconsistency
this section proposes a general framework for handling inconsistency under any logic. reasoning with inconsistent knowledge bases is a process which follows three steps:
1. constructing consistent subbases 
1. selecting among all the subbases the preferred ones called preferred subbases 
1. applying classical entailment on a choice of the preferred subbases.
throughout the rest of this paper  we assume that we have an arbitrary  but fixed  monotonic or non-monotonic  logic
 lthe basic idea behind our framework is to construct what cn . we call options  and then to define a preference relation on these options. the preferred options are intended to support the conclusions to be drawn from the inconsistent knowledge base. intuitively  an option is a set of formulas that is both consistent and closed w.r.t. the consequence in logic  l cn . definition 1  options  an option is any set o of elements of l such that:
  o is consistent.
  o is closed  i.e. o = cn o .
let opt l  be the set of all options that can be built from  l cn .
les us illustrate the above concept.
example 1l let l be a propositional= {a a ¡úlanguage  andb :  ob1}=. the followingcn {leta} k    o1  be the knowledge base k
options  for instance  can be built from k
the framework for reasoning about inconsistency has three components: a set of all options that can be built from the considered logic  a preference relation between the options  and an entailment mechanism.
definition 1  general framework  let  l cn  be a fixed logic. a general framework for reasoning about inconsistency in the logic  l cn  is a triplesuch that:
  opt l  is the set of options built from  l cn 
is a partial  or total  preorder 
that is  it is reflexive and transitive.
  |¡« : 1opt l  ¡ú opt l  is an entailment mechanism.
 the second important concept of the above general framework is the preference relation   between options. indeed is at least as preferred as o1. this relation captures the idea that some optionsmeans that the option o1 are better than others because  for instance  the user has decided that  or because those preferred options satisfy the requirements imposed by the developer of a conflict management system. for instance  in example 1  the user chooses certain options  e.g. the options where the salary is minimal or where the salary is maximal based on his needs . in most approaches for handling inconsistency  maximal consistent subsets of the inconsistent knowledge base have an important role. however  if we consider a kb such as k = { a ¡Ä b ;a ¡ú c;b ¡ú  c}  there are three maximal consistent subsets. one of these is mcs1 = {a ¡ú c;b ¡ú  c}. if we represent this kb as the default theory ¦¤ =  w d  where  we would get three extensions corresponding to the three maximal consistent subsets. however  one could argue that mcs1  and the extension corresponding to it  are too weak - we could have included either a or b by weakening the formula  a ¡Ä b  instead of dropping it altogether.
the third component of the framework is a mechanism for selecting the inferences to be drawn from the knowledge base. in our framework  the set of inferences is itself an option. thus  it should be consistent. this requirement is of great importance  since it ensures that the framework delivers safe conclusions.
the set of inferences is generally computed from the dif-
ferent preferred options. let. different entailment mechanisms can be defined foro be the set of all preferredwith oj options  i.e.
selecting the inferences to be drawn. here are some examples of such mechanisms.
definition 1 let be a framework  and o the set of its preferred options. let ¦× be an element of l.
universal criterion:  is called a universal consequence of l.
argumentative criterion: such that
is called
an argumentative consequence of l.
we can show that the set of inferences made using the universal criterion is itself an option of the language l  thus it is an entailment mechanism. moreover  it is included in every preferred option.
proposition 1 let  be a framework built from a monotonic logic  l cn .
	  the setoption of{opt¦×| ¦× lis a universal consequence of .	l} is an
is a universal conseq. of l}   oi.
	. by definition  any element in c	.
as each i  thus cn c    oi 
  o cnproof  sketch l}inwhich is a subset ofo c . consequently   c  according to the above definition of universalletocis an option i=  is closed  and consequently it is anis also consistent. similarly  since{as well ¦×| ¦× is a universal consequence ofobelongs to all the optionsi is consistent. thus . consequently cc
option.consequences . thus  c

similarly  we can show that the set of argumentative consequences is an option. thus  it is a valid entailment mechanism.
proposition 1 let  be a framework built from a monotonic logic  l cn . the set {¦×| ¦× is an argumentative consequence of l} is an option of opt l .
however  the following criterion is not a valid entailment mechanism since the set of consequences returned by it may be inconsistent  thus it is not an option.
example 1  such that ¦× ¡Ê oi.
1 optimal options that handle inconsistency
in the preceding section  we have developed the concepts of an option and a preferred option for any logic  l cn . however  this has been defined in a way that is independent of a knowledge base k. this section shows how to associate a set. of preferred options with an inconsistent knowledge base k
definition 1 we say an option o handles k iff there is a subsetsuch that. let base be a function that returns for any option o  the subbase k. thus  base o 
.
intuitively  an option handles k iff it is the closure of some subset of k. clearly  such a subset k must be consistent because o is consistent  by virtue of being an option  and as.
example 1  handling inconsistent default logic theories  let us consider default logic as our base logic  and suppose we consider the default theory ¦¤ =  w d  where w = {p} and d = { :pp}. most researchers in default logic would consider this theory to be inconsistent as it has no exten-
sion. however  it has two valid options:prefers¦¤1 =  {	¦¤1 =       and p}   . a user may specify a preference relation that
¡¡¡¡¡¡¦¤1. this shows how our framework can be applied to default logic.
definition 1 suppose  is a general framework for reasoning about inconsistency in logic  l cnoptimal  and suppose k is an inconsistent knowledge base. anis any member o ¡Ê opt l  such that: option for k
  o handles k and
  there is no other optionsuch that	.	 that handles k

what this definition says is that when reasoning about an inconsistent knowledge base k.  we always look at the set of optimal options that handle k
example 1 let us return to example 1. suppose we use o1 = { 1   1 } o1 = { 1   1 } o1 = { 1   1 }}. of course  we assume all of these options are also closed under usual first order consequence. first  let us say that these three options are preferred to all other options in the language.
  suppose themultiset score sc oi  of option. in this case  the scoreoi is the sum of the of is 1k  and that of o1 =
1k. we could now say that
osc1 owhich corresponds to the bank manager's viewpoint.j . in this case  the only option that handles k is

  scon the other hand  suppose we say that oi  ¡Ý sc oisj o. in this case  the only optimal option1 - this corresponds to the view thatiff that handles k the rule saying everyone has only one salary is wrong  perhaps the database has john being paid out of two projects simultaneously and 1k of his salary is charged to one project and 1k to another .
  now consider the case where we change our scoringmethod and say thatoence relation says that1ik sc}.	 in this case o1  = 1ksc. let us suppose that the prefer- osci   =o1 min={s 1| salk sc john s o1   =¡Ê.

then the only optimal option is o1 which corresponds exactly to the tax agency's viewpoint.
thus  we see that our general framework for optimally handling inconsistency is very powerful - it can be used to handle inconsistencies in different ways based upon how the preference relation between options is defined.
1 link with existing approaches
two kinds of approaches have been proposed in the literature for solving the problem of inconsistency. the first one consists of revising the knowledge base and restoring its consistency. the second approach accepts inconsistency and copes with it. the first approach initiated in  rescher and manor  1  proposes to give up some formulas of the knowledge base in order to get one or several consistent subbases of the original base. then plausible conclusions may be obtained by applying classical entailment on these subbases. in what follows  we consider the case of propositional bases. when the knowledge base is flat  i.e. its formulas are not weighted  maximal consistent subbases are built.
¡¡let k be a knowledge base that may be inconsistent  and s = {s1  ...  sn} its set of maximal  for set inclusion  consistent subbases. we can show that these subbases correspond to the preferred options of the above framework when the preference relation   between options is monotonic. let us first define that notion of monotonicity.
definition 1  monotonic relation  the relation   is said. monotonic iff for any
  is said anti-monotonic iff  if. proposition 1 let  be a framework such base  andthat   is monotonic. leto be the set of preferred/optimal options fork be an inconsistent knowledgek.
  such that o = cn si . such that oi = cn s .
in the case of prioritized knowledge bases  brewka has proposed in  brewka  1  a definition of the preferred subbases. the basic idea behind those bases is to take as many important information into account as possible. in this context  a knowledge basen k is supposed to be stratified into  such that the formulas in the samek1 
...  k  k = k1¡È...¡Èkn
strata are equally preferred  whereas formulas in a strata ki are preferred to formulas in kj with i   j.
definition 1 sj== 1 ... n¡È ...let¡È  ss1kn¡Èis a=...kpreferred subbase¡È1 s¡È...j...is a maximal  for set-inclusion ¡È k¡È kj.n be a knowledge base.of k if and only if. consistent subbase of k1 ¡È
incl k  denotes the set of preferred subbases of k
we show that in order to capture the results of the above approach  one needs to define the appropriate preference relation between options.
definition 1ok letiffkbasebe an inconsistent knowledge base  ando   ¡Ê  k  . let o1  oo1  ¡Ê¡Ê/ be the set of all options that handle k  and base
	  1	incl
proposition 1 let  be a framework such that   is defined as in definition 1. let be the set of preferred/optimalk be an inconsistent knowledge base  and o options for k.
  such that o = cn si .  such that oi = cn s .
1 new applications of the framework
in this section we show through the two following examples that the above abstract framework can be used for reasoning about inconsistency using temporal logic and even probabilistic logic.
example 1operator denotes the  next time instant  operator. thus  theconsider the temporal logic theory t. the  first rule says that if a is true at time t  b is true at time  t+1 . under standard temporal logic model theory  t is inconsistent.
 1 
 1 
 1 
cnwe may choose to consider just three options: { 1  1}  o1 = cn { 1  1}  o1 = cn { 1  1} o. sup-1 =
pose now that we can associate a numeric score with each formula  describing the weight of the source that provided the formula. let us say these scores are 1 1 respectively 
and the weight of an optionisformulas inthan or equal to the score ofo1.	ooijis the sum of the scores of the. in this case  the best optioniff the score of oi is greater
 example 1 consider the probabilistic logic  bacchus  1  theory t consisting of three formulas p :  1 1   p :  1 1   p :  1 1 . suppose we only consider options that assign a single non-empty probability interval to p. for two atoms  let diff a1 a1  = abs l1   l1  + abs u1   u1 . let us say that the score of an option. suppose we say that optiono = {a} is given byiff score oi  ¡Ü score oj . intuitively  this means that we are preferring options that change the lower and upper bounds in t as little as possible. in this case   1 1  is a preferred option.
is inconsistent  an optimal option may always exist becausethe reader may be tempted to think that given a k that in the worst case  cn    seems to be an option. however  this is not correct because we do not require that cn    be in opt l .
1 algorithms to compute optimal options that handle inconsistency
in this section  we develop procedures to find optimal options for any logicfirst define what it means for a formula to be compatible with l cn  under a varying set of assumptions. we a given set of formulas.
fconsistent. we use the notationdefinition 1  we say thatgiven a consistent setf is compatible withx   lx iffand a formulax ¡È {f} is
¡¡¡Ê l comp x  to denote the set of all formulas that are compatible with x.
¡¡we now develop an iterative fixpoint computational procedure to find an optimal option.
definition 1 suppose  l cn  is a logic  k is a subset of l  and   is a preference relation on options. we define an operator ¦£k associated with k that maps sets of options to sets of options as follows.

in other words  ¦£k x  works as follows:
  first  it picks a set y in x to expand.   it then finds an f ¡Ê comp y   ¡É k.
  it then closesinto ¦£k x . y ¡È {f} and adds this to the answer  i.e.
moreover  the repeated application ofclearly  the operator ¦£k is monotone under inclusion -¦£k yields a fixpoint.
this is defined as follows.
.
proposition 1 suppose  l cn  is a logic and k is a subset of l. then:
1. ¦£k is monotonic.
1.  is a fixpoint of ¦Ãk. 1. every set in ¦£¦Ø is consistent. k
¡¡note that the least fixpoint of ¦£k is the empty set and not ¦£¦Ø because the latter starts its iteration not with the empty k
set  but with the set containing the empty set! fortunately  we can make some concrete statements about ¦£¦Ø. k

is a general framework for handling inconsistency  andproposition 1 suppose  l cn  is a logic  k is a set of wffs. o is an optimal option that handles k iff:
1.  and
1. there is no such that.
the above result suggests an immediate algorithm to find an optimal option for s regardless of whether the preference relation is monotonic or not.
procedure coo-naive
1. x = ¦£¦Ø;
k
1. x = x ¡É opt lx ;such that there is no 1.	return any o ¡Ê such that.
¡¡one reason for the inefficiency of coo-naive is that it makes no assumptions about the preference relation. however  if the preference relation is known  for example  to be monotone or anti-monotone  then we can do better. coo-anti below shows that when   is assumed to be.
anti-monotone  we can do better than coo-naive
procedure coo-anti
	1.	= cn   
	1.	sol = {};	do
	1.	pick	s.t.
cn
if
;
	else cntodo x =¡Ètodo{f; } ¡È {|	f	¡Ê
	1.	
1. return any -preferred member of sol.
¡¡intuitively procedure coo-anti generates  -inclusion minimal closed and consistent subsets that are in opt l  using a bottom up procedure and then chooses the best ones.
it starts by checking if cn    is in opt l  - if so  it can be. otherwise  returned because of the anti-monotonicity of  it finds all formulas compatible with it and for each such formula  it finds the logical consequences. whenever it finds an option that handles k  it adds it to sol and deletes any . this option in sol that is worse than it  according to  procedure is continued.
¡¡pruning occurs in step  1  of the algorithm where the antimonotonicity of   is exploited. moreover  the algorithm proceeds in a greedy fashion  always choosing the best  or one of the best  sets from todo to expand in step  1 .
¡¡the reader may think that the first solution found by this bottom up procedure is optimal. unfortunately  this may not be the case because anti-monotonicity merely states that
. it is possible for to hold even if and hence  in the anti-monotonic case  one has to generate all  -minimal options before deciding which one is the best.
proposition 1 suppose  l cn  is a logic  is a general framework for reasoning about inconsistency  and k is a set of wffs. further  suppose   is anti-monotonic. 1. if there is an optimal option to handle k  then coo-
anti will return one.
1. if coo-anti returns o  then o is an optimal option that handles k.
¡¡just as in the case of anti-monotonic   preference relations  we can also improve on the coo-naive algorithm when   is monotonic. the coo-mon algorithm assumes monotonicity ofcoo-anti   and works in a similar manner as for but starts top down and eliminates members of
cn kcoo-mon  instead of starting the iteration from the empty set.algorithm uses the notion of a deletion candi-
the
date.
definition 1 suppose  l cn  is a logic and iffk is a set of wffs. a set y   k is a deletion candidate for k
1. cn k   y     k and
1. cn k   y   is consistent
1. and there is no setthat satisfies the previous two conditions.
¡¡in other words  a deletion candidate for s is a wff f whose removal from s causes at least one formula to no longer be inferrable from s. we use the notation delcand x  to denote the set of all deletion candidates of a set x.
procedure coo-mon
	1.1.	soltodo=={ }{;cn k do};
1. pick
x;
1. todo = todo   {x};	then
	1.	
	1.	todo = todo ¡È	 x 
1. return -preferred members of sol.
¡¡the coo-mon algorithm works as follows. it starts with cn k  and checks if it is consistent. if so  it adds it to sol and halts. otherwise  it deletes every possible deletion candidate  minimal set of elements from k that restore consistency . if any of the resulting options are valid options  then the best one according to   is returned. otherwise  a set from todo is selected and further deletion candidates are found. this is repeated until we either find an optimal option that handles k or there is none.
proposition 1 suppose  l cn  is a logic  is a general framework for reasoning about inconsistency  and k is a set of wffs. further  suppose   is monotonic.
1. if there is an optimal option to handle k  then coo-
anti will return one.
1. if coo-anti returns o  then o is an optimal option that handles k.
1 conclusion
in the literature  there are several proposals for handling inconsistency in knowledge bases. these proposals differ in i  the logic to which they apply  and  ii  the criteria used to draw inferences.
¡¡in this paper  we have proposed a general and unified framework for reasoning about inconsistency in a wide variety of logics. indeed  the proposed framework is based on an abstract logic as suggested by scott in  scott  1 . the framework has three basic components: a set of options that are consistent and closed subsets of well-founded formulas of the logic  a preference relation between the options and en entailment mechanism. the preference relation between options is a general notion. it may capture the requirements used in the literature  such as the maximality  but also other criteria maybe provided by the user for choosing among the options. we have shown that by defining an appropriate preference relation on options  we can capture several existing works such as the subbases defined in  rescher and manor  1   default logic and brewkas subtheories. the third component of the framework consists of an entailment mechanism that allows the selection of the inferences to be drawn from the knowledge base. such mechanism should return an option. this enforces the system to make safe inferences. we have also shown through examples how this abstract framework can be used in different logics such as temporal and probabilistic logics. another important contribution of the paper is the set of algorithms provided for computing most preferred options.
acknowledgments. this work was partly supported by afosr grants fa1 and fa1  aro grant daad1 and by the joint institute for knowledge discovery.
