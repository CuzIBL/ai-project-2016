
symmetry breaking has been shown to be an important method to speed up the search in constraint satisfaction problems that contain symmetry. when breaking symmetry by dominance detection  a computationally efficient symmetry breaking scheme can be achieved if we can solve the dominance detection problem in polynomial time. we study the complexity of dominance detection when value and variable symmetry appear simultaneously in constraint satisfaction problems  csps  with single-valued variables and set-csps. we devise an efficient dominance detection algorithm for csps with single-valued variables that yields symmetry-free search trees and that is based on the abstraction to the actual  intuitive structure of a symmetric csp.
1 introduction
during the past five years  symmetry breaking has been a topic of increasing interest in the constraint programming community. it was shown that symmetry breaking can play a decisive role in the solution of numerous constraint problems  and sophisticated symmetry breaking methods have been developed  such as the addition of symmetry breaking constraints  see for example  crawford et al.  1    symmetry breaking by adapting the search strategy  brown et al.  1   symmetry breaking during search  sbds   gent and smith  1   or symmetry breaking by dominance detection  sbdd   fahle et al.  1; focacci and milano  1 . especially the latter has attracted a lot of interest: improvements were suggested in  barnier and brisset  1; puget  1  for example. sbdd works by checking whether the current choice point under investigation represents a symmetric variant of a part of the search space that has been investigated completely before.
¡¡the core of an sbdd symmetry breaking code is dominance detection which was automated in  gent et al.  1  by using the generic computational group theory tool  yielding a method named gap-sbdd. while using a generic tool is appealing from the perspective of the ease-of-use for the constraint programmer  the generality comes with no guarantee of efficiency. therefore  in  van hentenryck et al.  1   the special case of dominance detection in the presence of some classes of pure value symmetry was investigated and proven to be computationally tractable. the approach taken was generalized in  roney-dougal et al.  1   where the notion of symmetry-freesearch trees  so-called ge-trees  was introduced. in combination with gap  ge-trees were shown to break arbitrary value symmetries in polynomial time.
¡¡in this paper  we continue this successful line of research by studying combinations of value and variable symmetry in constraint satisfaction problems  csps  and csps with set variables  set-csps . we offer three main contributions: the first regards a combination of variable and value symmetry for csps with single-valued variables. for the first time  in section 1  we show that the corresponding dominance detection problem is computationally tractable. in section 1  we build up on this result and show an efficient way of using the dominance detection algorithm for filtering rather than just pruning. the third main contribution regards set variables: in section 1 we show that the generaldominancedetectionproblem becomes np-hard for set-csps that contain symmetric set variables and value symmetry. finally  as a minor sidenote  in section 1 we show that higher forms of symmetry where sets of set variables are symmetric to other sets of set variables in combinationwith value symmetry can be reduced to the partial set variable symmetry case.
1 preliminaries
let us start out by introducing some notation that we will use throughout the paper. in the reminder of this paper  let us assume that n m p ¡Ê in.
definition 1
  a constraint satisfaction problem  csp  is a tuple  z v d c  where z = {x1 ... xn} isafiniteset of variables  v = {v1 ... vm} is a set of values  d = {d1 ... dn}isasetoffinitedomainswhereeach di ¡Ê d isthesetofpossibleinstantiationstovariable
xi and c = {c1 ... cp} isafinitesetofconstraints whereeach ci ¡Ê c isdefinedonasubsetofthevariablesinz andspecifyingtheirvalidcombinations.we saythatthecsphas single-valued variables iffforall di ¡Ê d itholdsthatdi   v.ifforalldi ¡Ê d itholds thatdi   1v  where1v denotesthesetofallsubsetsof v  wesaythatthecspisa set-csp.
  givenacspwithsingle-valuedvariables  an assignment a isaset ofpairs  x v  ¡Ê z ¡Á v suchthat  x v   x w  ¡Ê a implies v = w. givenaset-csp  a set-assignment a isasetofpairs  x s  ¡Ê z ¡Á 1v suchthat x s1   x s1  ¡Ê a impliess1 = s1.
definition 1
  givenasets andasetofsetsp = {p1 ... pr} such thatsi pi = s andthepi arepairwisenon-overlapping  wesaythat p isa partition of s andwewrite s = pi pi.
  givenaset s andapartition s = pi pi abijection ¦Ð : s 1¡ú s suchthat ¦Ð pi  = pi  where ¦Ð pi  =
{¦Ð s  | s ¡Ê pi} iscalleda partial permutation over
s = pi pi.
definition 1
  given a csp  z v d c   and partitions z = pk¡Ür pk v = pl¡Üs ql wesaythatthecsphaspartialvariableandvaluesymmetryiffallvariableswithin eachpk andallvalueswithineachql areconsideredas symmetric.
  giventwoassignments a and b onapartiallysymmetriccspwithsingle-valuedvariables wesaythata dominates b iffthereexistpartialpermutations¦Ð over
z = pk¡Ür pk and¦Á overv = pl¡Üs ql suchthatfor all x v  ¡Ê a itholdsthat ¦Ð x  ¦Á v   ¡Ê b.
  given a partially symmetric set-csp and setassignments a and b wesaythat a dominates b iff thereexistpartialpermutations ¦Ð over z = pk¡Ür pk and ¦Á over v = pl¡Üs ql suchthat a ¦Ð ¦Á    b  wherea ¦Ð ¦Á  := { ¦Ð x  ¦Á s  | x s  ¡Ê a}.
  giventwoarbitrary set- assignmentsaandb forapartiallysymmetric set- csp wecalltheproblemofdeterminingif a dominates b the dominance detection problem.
1 symmetric single-valued variables over symmetric values
the first general symmetry model that we study is powerful enough to manage symmetric single-valued variables over symmetric values. throughout this section  we consider the partially symmetric csp  z v d c  with single-valued variables. we assume also that we are given a partition of the variables pk¡Ür pk = z and a partition of the values pl¡Üs ql = v such that all variables within each pk and all values within each ql are considered symmetric. note that such partitions could be derived by a static analysis of a constraint program. the main objective in this section will be to show that there exists an effective symmetry breaking algorithm that runs in polynomial time for this scenario.
¡¡the key idea consists in the introduction of structural abstractions: to model a csp  we need to uniquely label each value and each variable with a name - which is  of course  not natural when certain variables and certain values are actually indistinguishable. we can rectify this by viewing each variable and each value as a member of a symmetry class. in the beginning  these classes correspond directly to the sets pk and ql. when assignments are committed  though  some of those initial symmetries are broken. then  in order to check which csp objects are still indistinguishable  we need to introduce subclasses of the original symmetry classes. we will see that we can detect the remaining symmetries by labeling each of those subclasses with a certain signature that is defined by the set of initial symmetries and the given assignments. we will see also that it is really these signatures that capture our intuitive wish to abstract from the csp model at hand to the actual structure of the problem.
1 signatures
consider the following example: we have variables x1 ... x1 over domains d x1  = ¡¤¡¤¡¤ = d x1  =
{v1 ... v1}. now assume that the first four and the last four variables are indistinguishable  i.e. p1 = {x1 ... x1} and p1 = {x1 ... x1}. furthermore  assume that q1 = {v1 ... v1}  q1 = {v1 ... v1}  and that we are given the following two assignments: a1 =
{ x1 v1   x1 v1   x1 v1   x1 v1   x1 v1   x1 v1 } and a1 = { x1 v1   x1 v1   x1 v1   x1 v1   x1 v1   x1 v1   x1 v1   x1 v1 }. see figure 1 a  for an illustration. when looking at the first assignment  we see that: 1. there is one value  v1  in q1 that is taken by two variables in p1 and one variable in p1. 1. there is one value  v1  in q1 that is taken by one variable in p1 and one variable in p1. 1. there is one value  v1  in q1 that is taken by one variable in p1. on the other hand  in the second assignment: i. there is one value  v1  in q1 that is taken by two variables in p1 and two variables in p1. ii. there is one value  v1  in q1 that is taken by one variable in p1 and one variable in p1. iii. there is one value  v1  in q1 that is taken by one variable in p1 and one variable in p1. lining up 1-i  v1 ¡ú1 v1  {x1 x1} 1¡ú {x1 x1} {x1} 1¡ú {x1 x1}   1-ii  v1 ¡ú1 v1  {x1} 1¡ú {x1} {x1} 1¡ú {x1}   and 1-iii  v1¡ú v1  {x1} 1¡ú {x1}   we see that a1 is structurally an assignment extended from a1  or  in other words  that a1 dominates a1  see also figure 1 b  .
¡¡what we have done in this small example is to abstract from the given model and the  arbitrary  names of variables and values to the actual structure of the problem. that is  instead of talking about specific variables and values  we considered members of classes. specifically  for each assignment we implicitly assigned each value a signature that captures by how many members of each variable-symmetry class it was taken. for instance  in a1 v1 has the signature  1 ¡Á p1 ¡Á p1   or  in shorter writing  the signature of v1 is siga1 v1  =  1 . in a1  on the other hand  the signature of v1 is siga1 v1  =  1 . consequently  v1 in a1 can be viewed as more specialized than v1 in a1  or one may also say that v1 in a1 dominates v1 in a1. in this terminology  v1 in a1 has signature siga1 v1  =  1  and therefore dominates v1 in a1. note that siga1 v1  is also  1   but that v1 in a1 does not dominate v1 in a1 since v1 ¡Ê q1 whereas v1 ¡Ê q1. in general:
             a1	a1 p1	p1
	a1	a1
             q1	q1 p1	p1
	 a 	 b 
figure 1: part  a  illustrates assignments a1 and a1. part  b  gives the signatures for each value  links pairs of values where the one in assignment a1 dominates to the one in a1  and a perfect matching that proves that a1 dominates a1 is designatedby solid lines.
definition 1
  wesaythatavalue v inanassignment a dominates a valuew inassignmentb iffv andw belongtothesame value-symmetryclassandsiga v  ¡Ü sigb w .1
  we say that a value v in an assignment a is structurally equivalent toavalue w inassignment b iff v and w belongto the same value-symmetryclass and siga v  = sigb w .
1 dominance detection using signatures
the following lemma shows how signature-abstractions can help to detect dominance relations among assignments:
lemma 1
anassignmenta dominatesanotherassignmentb inapartiallysymmetriccspiffthereexistsapartialpermutation¦Á overpl¡Üs ql suchthat v in a dominates¦Á v  in b forall v ¡Ê v.
proof: first  let us assume that a dominates b. then  there exist partial permutations ¦Ð over pk¡Ür pk and ¦Á over pl¡Üs ql such that for all  x v  ¡Ê a it holds that
 ¦Ð x  ¦Á v   ¡Ê b. since both x and ¦Ð x  belong to the same symmetry class  we have that for all values v ¡Ê v it is siga v  ¡Ü sigb ¦Á v    which is the same as to say that v in a dominates ¦Á v  in b. now assume there exists a partial permutation ¦Á over pl¡Üs ql such that siga v  ¡Ü sigb ¦Á v   for all v ¡Ê v . then  since each variable is assigned to at most one value  there exists a partial permutation ¦Ð over pk¡Ür pk such that for all  x v  ¡Ê a it holds that  ¦Ð x  ¦Á v   ¡Ê b. thus  we have that a dominates b. 
¡¡consequently  we have that a dominates b iff there exists a perfect matching in a bipartite graph where the edges are defined by the signature-relation of values  see figure 1 b  :
definition 1
giventwoassignmentsa andb letusdenotewithv 1 aset ofduplicatesofthevaluesinv byattachingaprimesignafter thevalues'names i.e.v 1 := {v1 | v ¡Ê v } .then wedefine the dominance detection graph ddg a b  :=  v ¡Èv 1 e  wheree := { v w1  | v in a dominates w in b} denotes thesetofarcs.
theorem 1
giventwoassignments a and b overacspwithpartially symmetricsingle-valuedvariablesand partiallysymmetric values thedominancedetectionproblembetween a and b hascomplexityo m + m1 + mn  wherem = o m1  is thetimeneededtodeterminewhetherthereexistsaperfect matchinginddg a b   m isthenumberofvalues andn isthenumberofvariables.
¡¡in the interest of space here and at many other occasions we must omit a formal proof. however  we would like to note that  with lemma 1  it is clear that the dominance detection problem can be solved basically by determining whether there exists a perfect bipartite matching in ddg a b . the additional complexity denoted in the theorem is due to the necessity to construct ddg a b  first. it is obvious that this can be achieved in time o nm1   which already proves that symmetry breaking in this scenario is tractable. however  the runtime can be improved to the complexity that is claimed here by using sparse representations of signatures. then  in the algorithm analysis we can exploit that the total number of non-zero signature components is bounded by o |a| + |b|  = o n .
¡¡interestingly it can also be shown that every bipartite graph can also be viewed as a dominance detection graph of a csp and assignments a and b that can be determined in time linear in the size of the given graph. and therefore  a perfect bipartite matching exists iff a dominates b  which makes the dominance detection problem at least as hard as bipartite matching. in other words  we can show that dominance detection takes time t where t ¡Ê   m ¡Éo m+m1+mn .
1 symmetry-based filtering
with theorem 1  we can break all symmetries when given a csp with partially symmetric variables and values in polynomial time when using a symmetry breaking by dominance detection  sbdd  approach  fahle et al.  1; focacci and milano  1 . what is annoying in this setting is that we still have to check every choice point to see if it is not dominated by one that was previously expanded  i.e. we still have to touch the garbage in order to see that it is garbage. we will now develop an algorithm that does not suffer from this disadvantage.
¡¡we achieve this goal by using dominance detection also for filtering rather than just pruning1. obviously  a brute-force approach could simply try assignments out and use the dominance detection algorithm above to perform filtering as well. this procedure would lead to a very poor runtime  though. in the following  we will show that filtering based on symmetry can be performed much more efficiently.
¡¡within sbdd  there exists a natural distinction between two types of filtering that apply: the first consists in making sure that none of the newly created children are symmetric to a node that was fully expanded before the node that is currently branching off. when applying unary branching constraints  which we assume are used here   this can be achieved by shrinking domain variables accordingly. the other  fundamentally different type of  filtering  consists in the creation of children that are also not symmetrical to each other. both types need to be addressed to achieve a symmetry-free search tree  which corresponds to the ge-trees in  roney-dougal et al.  1  . we distinguish the two types of filtering by naming them differently: symmetric-ancestor based filtering and symmetric-sibling based filtering.
symmetric-ancestor based filtering
the goal of symmetric-ancestor based filtering is to shrink the domains such that instantiating a variable with one of its domain values will not result in the creation of a search node that is symmetric to one that was previously expanded.
definition 1
givenadepth-first-searchtreet 1 wesaythatachoicepoint
b  associatedwithitshomonymousassignmentb thatcaptures previously committed unary branching decisions  is ancestor-symmetry resistant iffforallpreviouslyfullyexpandednodesa ¡Ê t  a iscalledan ancestor ofb andfor allvariablesx andvaluesv ¡Ê d x itholdsthatadoesnot dominateb ¡È { x v }.
¡¡assume that we are currently investigating choice point b and that a is some ancestor node that does not dominate b. observe that instantiating one more variable x ¡Ê pk for some k by setting x 1¡ú w ¡Ê ql for some l will change only the signature of w from sigb w  to sigb w  + ek  where ek denotes the unit vector with a 1 in the kth component. we set b1 := b ¡È { x w }. then  d1 := ddg a b  and d1 := ddg a b1  only differ in that the latter bipartite graph may contain some additional edges that must all be incident to w1 in the right partition. obviously  if d1 contains an m-matching  this matching must contain exactly one of those additional edges. consequently  if a dominates b1  then d1 must contain an m   1-matching. only if this is the case  work needs to be done to make b ancestor-symmetry resistant with respect to a.
¡¡so let us assume that d1 contains an m 1-matching. provided with that matching  using some straight-forwardmatching theory we can identify efficiently those and only those additional edges that would allow us to transform the existing matching into a perfect one. furthermore  it can also be shown that those critical edges are independent of the particular m   1-matching that we computed  for an introduction to matching theory we refer to  ahuja et al.  1  . among those critical edges that  if added  would allow us to construct an m-matching  the only ones that we need to consider are those which run between nodes v and w1 with v w ¡Ê ql for some 1 ¡Ü l ¡Ü s and for which there exists 1 ¡Ü k ¡Ü r such that siga v  ¡Ü sigb w  + ek. if and only if we find such a pair of nodes  a single extra assignment added to b will result in a successful dominance detection. precisely  every assignment of w to a previously unassigned variable x ¡Ê pk will result in a dominated choice point. thus  if we remove w from the domain of x for all unassigned x ¡Ê pk  we keep the unique parts of the search space and we never produce choice points that are symmetric to one that was expanded previously to b.
¡¡with theorem 1  the runtime needed for the initial valuematching algorithm is bounded by o m1 + mn . we can also prove that a filtering algorithm can be formulated that  once the matching is computed  runs in time o m1 + mn .1therefore  since within sbdd at most n m   1  ancestor nodes need to be considered  we can prove the following:
theorem 1
given a csp with partially symmetric single-valuedvariables and partially symmetric values  we can achieve ancestor-symmetryresistanceforagivensearchnodeintime o nm1 + n1 .
symmetric-sibling based filtering
to achieve full symmetry prevention  we also need to guarantee that newly created siblings are not symmetric to each other. therefore  after we choose the next variable to be assigned  but before we branch on it  we need to perform one more  filtering  step  it is actually more of an implicit pruning step  where we choose a single representative value out of each equivalence class of values which  when assigned to the chosen variable  would result in the creation of symmetric choice points. due to the fact that  whenever a sibling dominates another  they both must already be structurally equivalent  see definition 1   we can avoid producing symmetric siblings simply by choosing exactly one representative value among those that are structurally equivalent. the complexity of this filtering step is dominated by that of symmetricancestor based filtering.
¡¡putting ancestor and sibling-based filtering together  we have completed our development of an effective symmetry breaking algorithm for csps with partial single-valued variable and value symmetry that runs in polynomial time. note that the practical performance of the algorithms sketched can be enhanced in practice: for example  it is fully sufficient to check against previously expanded nodes for which an m   1   h-maximum matching was found only after variable instantiations to h different values have been committed. and as usual  by considering incremental updates of matchings  memory can be traded for cpu-time.
1 limits of efficient dominance detection
after having developed a polynomial symmetry breaking algorithmforcsps with partially symmetricsingle-valuedvariables in the presence of partial value symmetry  we now show that dominance detection for partially symmetric set variables in the presence of partial value symmetry is np-hard. more precisely  we reduce the corresponding dominance detection problem to subgraph-isomorphism.
¡¡in order to achieve the desired reduction we construct a set-assignment from a graph in the following way:
definition 1
given an undirectedgraph g =  v e  with c := |v |  we define a set of symmetric values n := {n1 ... nc}  andasetofsymmetricvariables p := {pij|{i j} ¡Ê e}.
then  the set-assignment a g  is defined as a g  := { pij {ni nj}  | {i j} ¡Ê e}.
theorem 1
given two undirected graphs g1 =  v e1  and g1 =
 v e1   g1 issub-isomorphicto g1 iff a g1  dominates a g1  whenallvariablesandvaluesareconsideredtobe symmetric.
proof: we start by showing that a g1  dominates a g1  if g1 is sub-isomorphic to g1. let ¦Ò : v 1¡ú v bijective such that {i j} ¡Ê e1 implies {¦Ò i  ¦Ò j } ¡Ê e1. then  for all  pij {ni nj}  ¡Ê a g1  it holds that  p¦Ò i  ¦Ò j  {n¦Ò i  n¦Ò j }  ¡Ê a g1 . therefore  a g1  dominates a g1 .
¡¡now let us assume that a g1  dominates a g1 . then  there exist functions ¦Ð : e1¡ú e1 and ¦Á : v 1¡ú v such that  pij {ni nj}  ¡Ê a g1  implies  p¦Ð {i j}  {n¦Á i  n¦Á j }  ¡Ê a g1 . by construction of a g1   this is equivalent to {n¦Á i  n¦Á j } ¡Ê e for all {i j} ¡Ê e. thus  ¦Á is a subisomorphism between g1 and g1. 
with theorem 1  it is easy to prove the following
corollary 1
thedominancedetectionproblemoverpartiallysymmetric setvariablesandpartiallysymmetricvaluesisnp-hard.
proof: we reduce the problem to subgraph-isomorphism. in order to apply theorem 1  we need to ensure that both graphs operate over the same set of nodes. in case that the set of nodes of the given graphs differ  it is easy to see that g1 cannot be sub-isomorphic to g1 if g1 contains more nodes than g1. in case that g1 actually contains fewer nodes than g1  it is easy to see that we can add isolated nodes to g1 without affecting subgraph-isomorphism. then  we have that both graphs contain the same number of nodes  and by relabelling the nodes in both graphs  we may assume that both graphs operate on the same set of nodes. 
¡¡note that  despite this negative result  in some important special cases the symmetry detection problem for csps with partially symmetric set variables and values is still tractable. for instance  when the set variables cannot overlap  the algorithm developed in section 1 can be adapted easily  by simply exchanging the roles of values and variables  to break all symmetries efficiently.
corollary 1
thedominancedetectionproblemoverpartiallysymmetric non-overlappingsetvariablesandpartiallysymmetricvalues istractable.
¡¡note that the dominance detection problem as we consider it here regards arbitrary assignments. this implies that  when the detection problem is tractable  we can break symmetries efficiently. however  the situation changes when we achieve an intractability result like the previous one: within methods like sbdd the assignments that need to be compared can only differ in a rather specific fashion. we can also show that these more specific dominance detection problems are nphard as well  therefore proving that sbdd in its general form is incapable of breaking symmetries in partially symmetric set-csps efficiently. however  we would like to stress that this result does not imply that symmetry breaking is np-hard in general since we do not consider other methods here like remodeling or the adaption of the branching scheme.
1 higher forms of symmetry
note that our intractability proof aboveshows that dominance detection over symmetric set variables and symmetric values is already np-hard when there exists only one set of symmetric set variables and one set of symmetric values. clearly  the problem stays np-hard when we allow partial symmetry. partial symmetryis very helpfulwhen even more complicated forms of symmetry need to be handled. consider for example the social golfer problem  sgp :
1 golfers want to play in 1 groups of 1 each week  such that any two golfers play in the same group at most once. how many weeks can they do this for  1
¡¡the problem can be generalized by parameterizing it to g groups of s players each  playing for w weeks  instances are usually written in g-s-w-format . a common model for the problemintroduces a set variable for each group  so that intragroup symmetries are broken automatically. groups within

week 1week 1
group 1group 1group 1	1	1	1	1	1*	*table 1: a partial instantiation of sgp 1-1.

figure 1: symmetry-breaking model for sgp 1-1 from table 1. we view the problem as containing six groups g1 ... g1  1 per week . only upon instantiation of the associated set variable  a group is assigned to a week.
the same week are symmetric  and furthermore  whole weeks are also symmetric  i.e. whole sets of set variables are symmetric to other sets of set variables. we can model this by introducing new week-values  one of which each group must be assigned to. consider the assignment to an sgp instance 1-1 given in table 1: by introducing two week-values w1 and w1 to one of which each group-variableis assigned upon instantiation  we can model the sgp as a dominance detection problem over symmetric set variables and partially symmetric values  see figure 1 . by means of this little trick  higher forms of symmetry can be reduced to symmetric set variables over partially symmetric values  which makes the corresponding dominance detection problem a most relevant research subject. we believe that developing fast algorithms that  approximately  solve this np-hard problem should be a focus of symmetry breaking research at this point.
1 conclusion
when breaking symmetry by dominance detection  a computationally efficient symmetry breaking scheme can be achieved if we can solve the dominance detection problem in polynomial time. therefore  we studied the complexity of dominance detection between arbitrary assignments for combined variable and value symmetry. for csps with partially symmetric single-valued variables and partially symmetric values we developed an efficient dominance detection algorithm that shaves the search-tree to a point where no two search-nodes can be symmetrical to each other. in contrast to these positive tractability results  for set-csps with symmetric variables and symmetric values  we found that the dominance detection problem is np-hard.
¡¡our algorithms are based on the structural abstraction of a given csp  a method that we refer to as structural symmetry breaking  ssb . when only the structure of variables and values that partition into whole equivalence classes of pairwise symmetric elements is considered  the work presented here effectively closes the outstanding complexity questions regarding sbdd. further research will have to regard csps whose symmetry structures are more refined. consider for example the case where the variables form a ring structure and all rotations on the ring yield to an equivalent csp. under what conditions can we break value and variable symmetry when the permutations on the csp elements form structures that are different from partitions 
¡¡in our view  it is perceivable that structural symmetries could be derived automatically by a static analysis of a given constraint program if the modeling language used provided semantics regarding symmetries. for instance  an alldifferent constraint could provide the information that all variables and values are treated as symmetric by this constraint. then  built-in efficient dominance detection algorithms like the one that we developed can be used efficiently to break the symmetries that were derived automatically  thus making symmetry breaking an effective and efficient component of constraint programming that is totally seamless for the user.
acknowledgments
many thanks to pierre flener and justin pearson for helping tremendously in polishing up the presentation of this work!
