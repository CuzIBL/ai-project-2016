 
this paper describes the english explanation facility of the owl 
digitalis advisor  a program designed to advise physicians regarding digitalis therapy. the program is written in owl  an english-based computer language being developed at mit. the system can explain  in english  both the methods it uses and how those methods were applied during a particular session. in addition  the program can explain how it acquires information and tell the user how it deals with that information either in general or during a particular session. 
1. introduction 
       the documentation of programs  or the lack of it  is a problem that continues to be troublesome. existing documentation is frequently outdated or inaccurate  can be difficult to obtain  and often can only be comprehended by programmers. 
	this 	problem 	exists 	for 	a 	number 	of 	reasons. 
documentation is often written only as an after-thought  after a 
system has been completed. frequently  the programmer is the only link between the system and its documentation. thus  changes in the system are not reflected in the documentation unless the programmer remembers or takes the trouble to change it. the documentation is also frequently physically separated from the system  so that a user may not have documentation available when he wishes to use the system. some programmers try to document the code they produce by using mnemonic names for variables and procedures  yet such documentation remains unavailable to non-programmers. 
       in this paper  a system is described which can explain itself. this system  called the owl digitalis advisor  is designed to advise physicians concerning digitalis therapy. it is written in owl i  a prototype of the owl language currently under development at mit hawkinson  1; long  1; sunguroff  1; martin  in preparation  . the system is  self-documenting  in the sense that it can produce english explanations of the procedures it uses and the actions it takes directly from code it executes. most of its explanations are produced in this manner  although a few types of explanation are canned phrases. the physician user may request explanations during a consultation session. the  explanations are designed to be understood by a physician with no programming experience. 
       as shortliffe  has suggested  if a program can explain its reasoning processes  user acceptance can be more easily obtained  since the user can assure himself that the program makes reasonable deductions which result in reasonable conclusions. additionally  an explanation facility may serve a valuable pedagogical function. a student or practitioner may use the system to improve his understanding of material he is studying by comparing his own reasoning with that of the system. finally  the ability to provide explanations serves as a valuable debugging tool. 
       in the remainder of this introduction  some of the medical aspects of digitalis therapy will be outlined  followed by a review of previous digitalis advisors and work in explanation. finally  a 
       brief overview of the owl digitalis advisor is given. 
	s p e c i a l i z e d 	sys 
1 
swartout computer science chusetts 1 
1 soma aspects of diqitalip therapy 
       in current practice  digitalis is prescribed chiefly to patients who show signs of congestive heart failure and/or conduction disturbances of the heart. digitalis is useful in treating these conditions  because it increases the contractility of the heart  making it a more effective pump  and slows the conduction of electrical impulses through the conduction system of the heart  thus correcting certain types of arrhythmias. the therapeutic effect of digitalis is achieved by maintaining the level of digitalis in the patient's body within certain bounds which are patient-specific. to determine the correct level for a particular patient  a feedback approach is employed: prescriptions are adjusted based on the effects of prior ones. although digitalis is a useful and widely used drug  ogilvie & reudy  1; doherty  1   it is also quite difficult to prescribe correctly. studies indicate that as many as 1% of all patients receiving digitalis show toxic symptoms  and that the mortality rate among these patients may be as high as 1%  ogilvie & reudy  1; peck  sheiner et al  1 . 
recently  a digitalis advisor has been developed by pauker  
silverman and gorry  which differs from earlier programs 
 peck  sheiner et al  1; jelliffe  buell  kalaba et al  1; jelliffe  buell  kalaba  1; sheiner  rosenberg & melmon  1  in two important respects. first  it constructs a patient-specific model  reflecting the program's knowledge of pharmacokinetics and special features of the patient's condition which may alter his response to therapy. this model is used to construct the initial dosage recommendations. second  the program makes assessments of the toxic and therapeutic effects which actually occur in the particular patient  after he has received the initial dose  to formulate subsequent dosage recommendations  rather than using the blood level of digitalis alone. this program was used as the basis for the owl digitalis advisor. 
1 other work in explanation 
       explanation capabilities have been implemented for systems operating in domains other than digitalis therapy. winograd's shrdlu  was an early example of a program with some ability to explain its reasoning. shortliffe  and davis  describe the explanation system that has been implemented for mycin  a system designed to help doctors in prescribing antibiotics. mycin functions m an interactive manner  and is capable of explaining why certain questions were asked  as well as the reasoning chain that it employs either in general or for a particular patient. the explanation systems of mycin and the owl digitalis advisor are compared later in this paper. 
       mikelsons has been working on the problem of explaining programs written in bdl  business definition language  to a user unfamiliar with programming  mikelsons  1 . his system uses two models: one to model the program's understanding of the problem and the other the user's. mikelsons' system is still under development  hence it is impossible to compare the performance of his system with that of the owl digitalis advisor. however  it does seem safe to say that his system is different from the digitalis advisor. the most fundamental difference is that when the digitalis advisor was written  an effort was made 
e m s - 1 : 	s w n r t o n t 
1 

to use one structure as much as possible as a combined user and program model. we will see that in most cases exhibiting an english translation of appropriate portions of this single model to the user is sufficient to give the digitalis advisor a good explanatory capability. in those cases where it is not possible to model the user's understanding of the problem with the computational model  the digitalis advisor uses comments placed in the code to re-cast the explanation in terms understandable to the user. thus  while mikelsons' system will use the more sophisticated  but also more complex  two model approach exclusively  the owl digitalis advisor relies on a simpler single model. 
       noah  sacerdoti  1  uses procedural nets to represent actions at various levels of detail  and can construct new plans from those that exist in the net. the digitalis advisor was not designed to construct new plans  but  like noah  is structured by levels of abstraction to facilitate the explanation process. 
1 an overview of the owl digitalis advisor 
       the owl digitalis advisor consults with a physician in an interactive manner. the advisor asks the clinician a number of questions about the patient and then produces a set of recommendations. after the patient has received an initial dose of digitalis  the program can produce a new dosage regimen based on the reaction of the patient. 
       while a session is taking place  the system can explain why it is asking a question. at the end of a session  the system can provide several distinct types of explanation. it can explain its procedures and actions either in general or for the patient at hand. it can explain how variables in its model are set or used either in general or for a particular patient. the system can offer the above explanations for previous sessions as well as for the current one. the system also allows the user to change his answers to determine the effect of different inputs on the system's recommendations. when an answer is changed  the system recomputes only steps that are affected-a process called  revising . once the affected steps have been recomputed  the system can provide the user with a concise explanation of the effects of the change. 
　　　originally  i had hoped that the digitalis advisor would be able to accept requests for explanations in english. unfortunately  work on the owl parser1 has been delayed. until it is completed  requests for explanations must be made in the form of lisp function calls. 
1. programming for explanation 
　　　the designer of a system that can explain itself faces a number of problems. one is to provide the user with an explanation that answers his question  yet does not swamp him with details. to accomplish ihis  the information contained in the system needs to be structured in some way. different methods for structuring the information have been proposed. 
　　　in the mycin system  davis uses the certainty factor of a rule as an indication of its  informational content . those rules that have a higher certainty factor are said to contain less information  because the designers of mycin feel that they are more like definitions. rules with lower certainty factors  hence less certain conclusions  supposedly contain more information. davis uses the expression -log certsinty factor  as the measure of the information contained in a rule. when the user asks why a 
　　　particular rule was invoked  he has the ability to specify how much information he wishes to see displayed at once by specifying a number between 1 and 1. the system goes up the 
1. a part of the owl system which converts natural english sentences into owl forms. 
goal path from the rule in question  explaining rules until the sum of the measures of information in the rules explained so far divided by the sum of the measures of information in all the rules between the rule in question and the top goal is equal to the number supplied by the user divided by 1. if the user specifies a high number  many goals will be displayed together  while a low number will cause just a few goals above the rule in question to be displayed. since the number of rules explained is based on their information content  for a given number  rules with high certainty factors will tend to be explained in conjunction with other rules  while those with low certainty factors will be explained alone. using this method has the desirable effect that the uncertain actions that the system takes will tend to be highlighted  since they will tend to be explained alone  while definitional rules will be explained in conjunction with other rules. the problem with this scheme is that the certainty with which a conclusion is reached does not necessarily indicate how important it is to explain the conclusion. in domains where conclusions may be reached with a high degree of certainty  the above method would indicate that it was just as important to explain one conclusion as any other. in the digitalis advisor  it is certain that a patient must be checked for digitalis sensitivities  yet it is also a very relevant thing to explain to a physician. in designing the digitalis advisor  an attempt was made to make the structure of the program reflect the structure of the methods used by doctors in prescribing digitalis. 
       designers of rule-based systems have also had trouble expressing knowledge about actions in the rule format. davis  1  page 1  notes: 
        a ... problem is the limit on the amount of knowledge which can conveniently be expressed in a single rule. actions which are  larger  than this limit are often achieved by the combined effects of several rules. for many reasons  this is difficult to do  and often produces opaque results.  davis  1  page 1  also observes: 
 rules are a reasonably natural and convenient form of knowledge encoding for what may be termed  single level  phenomena - it is easy to think of single decisions or actions in terms of a rule. 
　　　experience with mycin has demonstrated  however  that even experts acquainted with the program tend to think of a sequence of operations in procedural terms  and find flowcharts the most convenient medium of expression. while the flowcharts can always be converted to an equivalent set of rules  the conversion is non-trivial  and sometimes requires reconsidering the knowledge being expressed  since the two methodologies offer different perspectives on knowledge organization and use. 
in designing the owl digitalis advisor  it was decided to use a procedural system so that knowledge of actions could be placed in a hierarchical structure of procedures. since it is possible to group knowledge conveniently in this way  we will see that the explanations produced by the owl digitalis advisor are wellstructured. 
       another problem that confronts the system designer is the problem of reconciling the user's model of the problem with the program's model of the problem. that is  when explaining the program to the user  it is necessary to take into account the possibility that the user's model of the problem is very different from the program's. mikelsons has proposed the use of two models. a difficultly with this approach is that when the system 

spociaiized systems-1: swartout 1 

is modified  changes must be made not only to the program  but to the structures linking it to the user's model as well. it seems that to avoid the dangers of unintentional discrepancies between the models it would be a good idea to incorporate the user's model into the actual program as much as possible. 
       the digitalis advisor is structured into what are often called  levels of abstraction . the basic idea behind this approach is that the higher level procedures in the structure represent more general goals or actions  and these high level procedures call more specific procedures  which in turn call still more specific procedures . as mentioned above  this approach was used in sacerdoti's noah system. the idea of levels of abstraction also closely parallels ideas developed in structured programming. in his  notes on structured programming   1  page 1  dijkstra states: 
if i judge a program by itself  my central theme  i think  is that i want the program written down as i can understand it  i want it written down as i would like to explain it to someone. 
       in the digitalis advisor  the procedure used to start treating a patient with digitalis is called begin therapy  written   begin therapy   in owl i. one of the functions that   begin therapy   calls is a procedure that checks for any sensitivities the patient may have. it is called   check sensitivities  .   check sensitivities    in turn  calls a number of subprocedures. one of these is   check  sensitivity  due  to potassium       which checks for digitalis sensitivity due to a potassium imbalance. when the method or event1 for beginning therapy is described    check sensitivities   is displayed to the user as check 
sensitivities without any of the structure beneath it. it summarizes the calls below it  so that they do not have to be displayed. if the user is curious about how sensitivities are checked  he may ask  and he will see that one of the steps is to check sensitivity due to potassium. if he is still curious  he may inquire about the details of that step as well. notice that if he is not interested in any details  the entire process of checking sensitivities will be summarized as one step  so that he will not get output that he does not care about. 
       when a method is explained  in the current implementation of the digitalis advisor  it is assumed that a call to another method can be taken as a summary of the actions performed by that plan. thus  only the call need be displayed. the event created by the call is not offered as part of the explanation unless the user specifically asks about it. in the future  it might be desirable if the call could be flagged to indicate exceptions to this convention. 
       notice that this method of summarizing output contrasts with the certainty factor approach adopted in mycin. rather than attempting to make conclusions about the information content of a rule based on its certainty factor  we are attempting to structure the procedures of the advisor so that they model the structure of the expert's solution. this methodology places a burden on the'system designer since he is no longer free to structure the program in any manner  but instead must attempt to model the expert's methods with it. it also assumes that the user will be able to understand explanations derived from such a program. 
1. methods in owl i roughly correspond to procedures in other languages. events are trace structures of the execution of a plan  left behind by the owl interpreter as it runs. calls in owl  re like calls in other languages  except that methods are invoked by a pattern match. 
1 the explanation routines - now they work 
       in this section  the various explanation routines provided by the digitalis advisor are outlined the explanation routines produce explanations directly from the owl i code the interpreter runs  and from the  event structure** the interpreter creates. the explanations are not canned -- a change in the procedures used by the advisor will be reflected in changed explanations. even though they can translate the owl i methods to english  the explanation routines are quite simple. simplicity is possible because the owl i code itself is close to english and because the advisor is structured into levels of abstraction. 
1.1 describing methoda 
　　　one of the simplest explanation routines is describemethod  which describes owl i methods. this procedure is designed to answer the question  in general  how do you 
  . 	describe-method describes 	how 	an 	owl 	i 
procedure works in general  not how it applies to a particular patient. the routine is called with a single argument  which is the owl i plan to be described. describe-method traces out the links which connect the steps of the owl method and converts the steps to english as it encounters them. special routines are called recursively to explain certain owl primitives such as become  if-then  and or1. if describe-method encounters a call to another owl i plan  it only displays that call. as it produces an explanation  the system indents the output to indicate the structure of the owl plan. as an example  an owl method is listed below  followed by its english explanation. 
  check  sensitivity  due  to thyroid-function     summary:  factor  reduction  due  to myxedema     method: 
 if-then 
 current-val  status myxedema  unknoun  
 ask-user  quanta t1  :   
 or 
 if-then 
 or:1 
 status myxedema present  
 and:1 
 status myxedema unknoun  
 less-than 1  quanta t1     
 become-also 
 conditions 
correctable-and-present myxedema  :1  
 unbecome  conditions degradable myxedema  :1  
 become 
 factor 
 reduction  due  to myxedema    1 . 1     : 1   
 become-also  reasons reduction myxedema  :  
 and 
 become-also 
 conditions degradable myxedema  :1 
 unbecome 
 conditions 
correctable-and-present myxedema  ;1 
 become 
 factor 
 reduction  due  to myxeoema    1  :1 
 unbecome  reasons reduction myxeoema  :  1 
the owl code to check for sensitivity due to myxedema 
1. become statements assert facts  if-thens are conditionals  end ors correspond to cond statements in lisp. 

specialized systems-1: swartout 1 

 oescribe-method 
  check 
 sensitivity  oue  to thyroid-function       
to check sensitivity due to thyroid-function i do the following steps: 
1. if the current value of the status of myxedema is unknown then i ask the user the level of t1. 
1. i do one of the following: 
1 if either the status of myxedema is present or the status of myxedema is unknown and the level 
of t1 is less than 1 then i do the following substeps: 
1.1 i add myxedema to the present and correctable conditions. 
1.1 i remove myxedema from the degradable conditions. 
1.1 i set the factor of reduction due to myxedema to 1. 
1.1 i add myxedema to the reasons of reduction. 
1 otherwise  i add myxedema to the degradable conditions  remove myxedema from the present and 
correctable conditions  set the factor of reduction due to myxedema to 1 and remove myxedema from the reasons of reduction. 
an english explanation of the code to check sensitivity due to myxedema 
1.1 describing events 
the explanation routine which describes events is called 
describe-event. it is designed to answer the question  for this patient  how did you   . this routine is a little more sophisticated  since a certain amount of editing must be done to avoid making nonsensical explanations. the principal difference between explaining events and explaining methods is that when methods are explained  all possible paths through the method are outlined  but when events are explained  only the specific path taken during the event is displayed. thus  as one would expect  the chief differences between describe-method and describeevent are to be found in the routines that explain conditional statements. 
　　　when a simple conditional statement is encountered while explaining an event  a check is made to see if the predicate of the conditional succeeded or failed. the owl event structure contains this information. if the predicate failed  the statement is normally not described. if the predicate succeeded  the predicate is given as the reason for the actions taken by the statement. sufficient information is stored away by the interpreter as it executes so that it is always possible to give the actual reason for a decision  even in the case of conjuncts and disjunct*. 
　　　the owl or statement  which corresponds to the cond statement in lisp  is a more complex case. the or statement may contain several conditional statements and it can serve two distinct purposes. on the one hand  it can be used like a case statement  that is  each of the clauses of the or may involve the same variable  and all of the clauses together cover a set of disjoint possibilities. in that case  the order of the clauses usually does not matter  and the most appropriate explanation is merely to give the predicate that succeeded as the reason for the action taken. on the other hand  each of the clauses of the or may involve a different variable. in that case  the ordering of the clauses is often important  and it seems that in explaining the or  the predicates that failed as well as the one that succeeded should be given as reasons for the actions taken by the statement. to determine the type of the or statement  the explanation routine examines the variables used in the predicates before explaining the statement. in future versions of the owl i interpreter  it might be a good idea to use two different types of statements to eliminate the ambiguity. 
       to make explanations of numerical computations clearer  the value of a numeric variable is printed in parentheses following the variable whenever it is displayed. the values of non-numeric variables are usually clear from the context of the explanation and are not specifically displayed unless an assertion about the variable is being described. whenever a new assertion is made  the new value and the old value of the variable are both given. a sample explanation of an event is reproduced below. 
 describe 	  check 	 sensitivity 	 due 	 to 	thyroid-
function       
do you only want to see events from the current 
session   yes or no  n 
during the session on 1/1 at 	1  i checked 
sensitivity due to thyroid-function by executing the following steps: 
1. i asked the user the status of myxedema. the user responded that the status of myxedema was present. 
1. since the status of myxedema was present i did the following: 
1 i added myxedema to the present and correctable conditions. the present and correctable conditions then became myxedema. 
1 i removed myxedema from the degradable conditions. the degradable conditions then became hypokalemia  hypoxemia  cardiomyopathies mi  and potential potassium loss due to diuretics. 
1 i set the factor of reduction due to myxedema to 1. the factor of reduction due to myxedema was previously undetermined. 
1 i added myxedema to the reasons of reduction. the reasons of reduction then became myxedema. 
an explanation of the event of checking for sensitivity due to myxedema 
1 a 1 explaining ths use and setting of variables 
       since the owl knowledge base is completely crossreferenced  the digitalis advisor can explain how program variables are set and used. a description of the functions that perform this task  together with examples of their use may be found in swartout . 

specialized systems-1: swartout 1 

a.a parting with unfamiliar methods 
　　　when writing   computer program  it is sometimes necessary to use methods that are totally foreign to users of the system. this may be because the methods employed by humans are unknown  too inefficient or otherwise inappropriate for computer implementation. whenever this situation occurs  it will not be possible to give meaningful explanations by merely translating the code of the program into english. for example  the use of a weighted-sum to determine the clinical condition of a patient may be quite foreign to the average doctor. 
　　　to deal with this problem in the digitalis advisor  we have attached english comments to the owl code in those few places where the methods employed are not familiar to physicians. when the owl method is explained  the comments are displayed along with the translated owl code. the comments are intended to make the translated code understandable to the user. when an event is displayed  only comments associated with steps that actually executed are displayed together with the steps. 
　　　although this simple solution is adequate for the digitalis advisor  it would probably not be sufficient if the methods used by the program and user were different in complex ways. if the method used by humans were too inefficient  it might be best to use two methods: one for machine execution  and the other for 
explanation. this approach is similar to mikelsons'. 
1 revising 
　　　a question which may occur to the user of an expert consulting program is:  what would happen to the program's recommendations if i revised this answer i have given  . how the changes resulting from such revisions can be explained to the user will depend in part on how the recommendations are recomputed. in mycin  shortliffe  1   new recommendations are produced by accepting the changed answer and then recomputing the entire session. this approach has the disadvantage that many steps which are not affected by the change will be re-executed. thus  when an explanation of a revised recommendation is given to the user  either a large number of steps irrelevant to his question will be explained  or a rather sophisticated explanation module must be built to eliminate the explanation of unaffected steps. 
　　　another approach  used by the digitalis advisor  is to use a 
　　　smarter interpreter that will re-execute only those steps that could possibly need it1. this approach has the advantages that the re-execution process is generally more efficient and that the simple explanation routines described above  with a few minor modifications  can be used to produce concise explanations of the effects of revising an answer. a sample revision is given below. 
this revision occurs at the end of the sample session given 1n the appendix. the user indicates to the system that he wishes to make a new hypothesis about the status of hypoxemia. 
you stated that the status of hypoxemia was not suspected. if you wish to change that answer  please give your neu response below. 
uhat is the status of hypoxemla  ===  suspected 
the system reminds the user or his previous response and asks him for a new one. the user indicates that he suspects hypoxemia. this answer 1s different than the one he gave during the original session. 
uhat is the level of p1  	-  1 
please 	try 	to correct 	the hypoxemia as soon as possible. 
the user indicates that the patient 1s quite hypoxemic  and the advisor suggests correcting the condition. since the change 1n the status of hypoxemia has resulted in a change 1n the recommendations  the advisor prints the new parameters and makes a new prescription. 
parameters used to make recommendations: 
body store goal -   1 mg 
projected amount on board -     1 mg body stores shift -   1 mg remaining time to reach goal -     1 hrs. 
half life -  	1 hours 	1 days 
daily loss at equilibrium -   1 mg 
absorption factor - 1 
note that the recommended body stores goal was 1 mg before the revision. 
the dosage recommendations are: 
hours from nou 	oral 	iv nou 	1 + .1 mg 	.1 mg 
report back after the first dose. 
1 
1 
1 
1 
oral maintenance schedule: alternate .1 mg & .1 mg 
iv maintenance schedule: .1 mg revision completed. 
the system now returns to top level  indicating that all necessary changes have been made. the user may now ask the system to describe the revision. 
 descr i be-revi sion  
the results of the revision were: 
1. while checking sensitivity due to hypoxemia  i asked the user the status of hypoxemia i made a different 
decision than before the revision. since the current value of the status of hypoxemia was suspected i did the following: 

1. the algorithm used by the interpreter to accept revisions is beyond the scope of this paper. a more complete description of it  a proof of its correctness  and approaches proposed by others may be found in swartout   where it is called updating. 
1 i asked the user the level of p1. the user responded that the level of p1 was 1. 
1 since the level of p1  1  was less than 1 i did the following: 
1.1 i set the factor of reduction due to 

s p e c i a l i z e d 	systems-1: 	swartout 
1 

hypoxemia to 1.  before revising  the value was 1.  
1.1 i added hypoxemia to the present and correctable conditions. the present and 
correctable conditions became hypoxemia and myxedema. 
1.1 i removed hypoxemia from the degradable conditions. the degradable conditions became hypokalemia  
	cardiomyopathies-mi  	and 	potential 
potassium loss due to diuretics. 
1.1 i added hypoxemia to the reasons of reduction. the reasons of reduction became hypoxemia and myxedema. 
1. i hade a different decision than before the revision. since the status of hypoxemia was 
suspected and the level of p1  1. formerly undetermined  uas less than 1 i suggested correcting hypoxemia. 
1. while computing the factor of alteration  i set the factor of alteration due to sensitivities to the 
product of the factor of reduction due to advanced age  1 . the factor of reduction due to 
hypercalcemia  1   the factor of reduction due to hypokalemia  1 . the factor of reduction due to 
potential potassium loss due to diuretics 	 1   
the factor of reduction due to hypoxemia  1   the 
factor of reduction due to myxedema  1   and the factor of reduction due to cardiomyopathy-mi  1 . 
the factor of alteration due to sensitivities uas 
set to 1. 	 before revising  the value uas 1.  
1. i set the factor of alteration to the product of the factor of alteration due to sensitivities  1  and the quotient of the ueight of the patient  1  
and 1. the factor of alteration uas set to 1.  before revising  the value uas 1.  
1. uhile computing the body-stores goal. i set the body-stores goal to the product of the factor of 
alteration  1  ano the basic body-stores goal  1 . the body-stores goal uas set to 1. 
 before revising  the value uas 1.  
1. uhile 	giving 	recommendations. 	i 	printed 	the parameters. 
1. i made the prescription. 
1. limitations and advantages of this approach 
　　　this paper presents an approach to program explanation based on the code of the program and a trace of its execution. the chief advantage of this approach is its simplicity. if a program can be written in a sufficiently structured  close-toenglish style  very little additional work needs to be done to produce explanations of the code. additionally  if the program is modified  the changes are immediately reflected in the explanations. 
　　　because of this simplicity  this approach is most applicable to those programs which closely model methods employed by humans. if a user is not familiar with the methods employed by the program  he will have trouble understanding the explanations. 
thus  while physicians seem to understand the explanations offered by the digitalis advisor  the average layman has trouble if the concepts behind digitalis therapy are not explained to him. 
　　　while structuring programs using levels of abstraction is perhaps a better way of indicating the relative importance of steps than the method used by mycin  it is not the final answer. for one thing  there is currently no way to indicate the relative importance of steps at the same level. while it seems that it would be possible to solve this problem by placing markers on the steps  this has not yet been done. more importantly  this approach makes the assumption that the importance of a step in terms of explanation is closely modelled by its level of abstraction. while this seems to be true in the digitalis advisor  it might not be true for all domains. 
       another limitation is that the sorts of explanations that the system may produce are fixed when the program is written. if the explanation produced at one level of abstraction is too general  and the explanation at the next level down is too specific  the user has no way out  since there is no way to produce an explanation at an intermediate level if that level does not exist in the program. 
　　　finally  the system described above has no model of the user or what he is trying to accomplish. thus  cardiologists and laymen receive the same explanation  just as the explanations are no different for those who are trying to learn from the system than for those who are trying to debug it. as may be seen from some of the above examples  the system may display some things to a physician which should really only be shown to someone maintaining it. we are currently working on incorporating a model of the user into the system. 
       despite these limitations  we have found the explanation facility to be very useful in developing the digitalis advisor  since program bugs are much more apparent when they are expressed in english  and we have been encouraged to find that doctors who have seen the system generally find the explanations helpful and understandable. 
1. a sample initial session 
entries made by the user are in lower case. comments are in italics. in the actual implementation  most of the questions below are asked in a multiple-choice format  which was not used here to save space. 
what is the age of the patient  1 
what is the weight of the patient   in kg.  1 
what is the sex of the patient  male 
what is the cardiac rhythm  atrial fibrillation 
is there regularization of the ventricular rhythm  
absent 
what is the ventricular rate  1 
what is the status of pvcs  absent 
what is the reason of digitalization  arrhythmia 
what is the status of digitalis use  absent 
is the urine output of the patient greater than 1cc per day  yes 
is the renal function stable  stable 

s p e c i a l i z e d 	s y s t e n s - 1 : 	swartout 
1 

what sort of renal function measure is available  
creatinine-clearance 
enter recent creatinine-clearance values with date and time. 
date 	time 	test val 	renal f 
1/1 	1 	1 	1 
what is the level of serum calcium  1 
has iv calcium been administered within the last two hours  no 
what is the level of serum potassium  1 
is the patient being given or about to be given 
diuretics  no 
does the patient have cardiomyopathy or an acute mi  absent 
what is the status of hypoxemia  not suspected 
what is the status of myxedema  present 
how 	long 	do 	you 	wish 	to 	take 	to 	reach 	full 
digitalization  1 days 
finally  the system produces its recommendations. 
parameters used to make recommendations: 
body store goal -   1 mg 
projected amount on board -  	1 mg 
body stores shift -  	1 mg 
remaining time to reach goal -   1 hrs. 
half life -  	1 hours 	1 days 
daily loss at equilibrium -   1 mg absorption factor -   1 . 1 
how often do you wish to administer digitalis  t i d 
the system asks the user how often he wishes to give digitalis. the expression  tid  means three times per day. 
the dosage recommendations are: 
hours from now 	oral 	iv 
now 	.1 mg 	.1 + .1 mg 
report back after the first dose. 
1 	.1 + .1 mg 	.1 mg 
1 	.1 mg 	.1 mg 
1 	.1 mg 	.1 mg 
1 	.1 mg 	.1 mg 
1 	.1 mg 	.1 mg 
oral maintenance schedule: .1 mg iv maintenance schedule: alternate .1 & .1 mg 
1. acknowledgements 
i would like to thank all those who made this possible. howard silverman and dr. stephen pauker were very helpful with medical assistance. alex sunguroff helped with the owl interpreter. various discussions with members of the automatic programming group  the clinical decision making group  and  in particular  
lowell hawkinson  provided many valuable insights. i would especially like to thank my supervisors  professors william a. martin and peter szolovits for their patience and advice. 
this research was supported in part by the health resources 
administration  u. s. public health service  under grant 1 r1 mb 
1 from the bureau of health manpower and under grant hs 1 from the national center for health services research. 
1. 