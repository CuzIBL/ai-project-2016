 
　　　a technique for incorporating automatic transformations into processes such as the application of inference rules  subsumptlon  and demodulation provides a mechanism for improving search strategies for theorem proving problems arising from the field of program verification. the incorporation of automatic transformations into the inference process can alter the aearch space for a given problem and is particularly useful for problems having  broad  rather than  deep  proofs. the technique can also be used to permit the generation of inferences that might otherwise be blocked and to build some commutatlvlty or associativity into the unification process* appropriate choice of transformations and new l i t e r a l clashing and unification algorithms for applying them showed significant improvement on several real problems according to several distinct c r i t e r i a . 
introduction 
　　　in this paper we provide a technique for improving the proof search strategy for a particular class of problems  namely  those in 
which the concept of transformation of a l i t e r a l or term plays a large role. the technique involves incorporating automatic transformations into the inference process by modifying the existing unification and clashing algorithms. 
　　　in addition to significantly reordering the proof search space for these problems  the incorporation of automatic transformations allows many desirable inferences that might otherwise be blocked  e.g.  by demodulation or by ordering the arguments of equality l i t e r a l s in a canonical way . 
　　　the automatic transformation concept presented in this paper is applicable to any area that has  rewrite  .relations  e.g.  commutatlvlty  associativity  or ordering relations . the new l i t e r a l clashing and expanded unification algorithms are particularly effective in areas that tend to have  broad  rather than  deep  proofs. program verification is one such area. 
　　　various methods for building a theory into an automated theorem proving system have been considered in the literature. most f a l l into one or more of three loosely defined approaches: 
* this work was supported by the applied mathematical sciences research program  kc-1  of the office of energy research of the u.s. department of energy under contract w~1-iot-eng~1. 
1. unification in the presence of an equational theory     1           and   
simplification with complete set 1 of reductions     1      and   
1. special rules of inference     1          and   
　　　the technique presented in this paper allows some theory to be built into the inference process but differs significantly from the above three approaches. unlike the f i r s t approach  our technique does not attempt to find the f u l l set of unifiers when used in the context of a unification algorithm. unlike the second approach  the transformation concept can apply to predicates and l i t e r a l s as well as to terms and is not oriented towards complete sets of reductions  which  in fact  do not always exist . and unlike the third approach  the process is guided by the user's choice of eligible transformations. 
     we feel that it is important to reiterate our perspective and point of view. complete methods  e.g.  uniform strategies and complete sets of reductions  have many interesting theoretical properties. unfortunately  1 years of experience has shown that such methods do not yield useful theorem provers by themselves. in order to actually prove theorems  it is necessary to include many heuristics that not only make the program incomplete  but often make it too complex even to analyze. we feel that the technique presented in this paper is important and useful in spite of the lack of completeness. although we do prove some results about the operational characteristics of our proposals  we are not overly concerned about properties such as confluence  completeness  or minimality of the various expanded versions of our algorithms. 
　　　this pai er is divided into five sections. section ii discusses the motivation for including automatic transformations in the inference process. section i i i presents the new l i t e r a l clashing and unification algorithms. section iv evaluates test results from the new algorithms. finally  section v summarises our ideas and suggests areas requiring further investigation. 
　　　it is assumed that the reader has some basic knowledge of logic  automated theorem proving and program verification. in particular  familiarity with the concepts of subsumptlon and demodulation and with the inference rules resolution and paramodulatlon is assumed. 

1 

	i i . 	motivation 
　　　in this section we motivate our technique. subsection a discusses the nature of program verification proofs  and subsection b discusses b u i l t - i n incompleteness. 
a. 	nature of program verification proofs 
　　　program verification proofs often have a potentially useful property with respect to the graph that represents the search space. a proof often exists that is  broad  rather than  deep.  that is  the last step is a hyper-resolvent of clauses ci through cn  where each ci is derivable from the input clauses with a relatively low level deduction. further  many of the ci differ from their parents only in the form or sign of a l i t e r a l or term. for example  a l i t e r a l lt a b  in an input clause may have to be transformed into ~lt b a  before it w i l l clash with the denial of the theorem. this transformation is currently accomplished by resolving with one of the many clauses that give the properties of lt  equal  gt  etc. unfortunately  these axioms produce huge numbers of other resolvents at the same levels as the ci. these clauses and their descendants often significantly delay progress to a proof. 
	we propose to 	incorporate 	certain 	relations 
 such as lt x y   -  ~lt y x  and commutativity of a function  into the l i t e r a l clashing and unification processes. the relations w i l l behave like l i t e r a l and term transformations in this context. 
the new algorithms have two distinct effects: 
1. more general clauses are generated sooner by allowing the resolution of more l i t e r a l s . the earlier generation of more general clauses can have a significant effect on a proof search by preventing the generation of many less general clauses and their corresponding descendants. 
1. certain clauses that previously were at a high level in the graph that represents the search space may now have a relatively low level. because many of the clauses that are required in the proof may be generated at a lower level than before  strategies that are oriented towards breadth f i r s t search may be more effective than they were without the automatic transformation process. 
　　　note that the algorithm w i l l not prevent the generation of what would have been the intermediate clauses to inferences made with the new algorithm; it only reorders the search space  effectively delaying the generation of these clauses. the delay of these clauses until after a proof has been found is more likely when the proof is broad rather than deep. for this reason  the algorithm is particularly well suited for application to program verification problems. 
b. 	built-in incompleteness 
　　　building automatic transformations into a theorem proving system can help undo some of the incompleteness caused by other very useful strategies such as demodulation  when the demodulator set is not a complete reduction set  and ordering of terms in equality l i t e r a l s . 
　　　although our experience shows that demodulation is virtually necessary for theorem provers  it is rarely practical to attempt to find a complete reduction system for every new problem. therefore  demodulating clauses can block necessary deductions. for example  if equal g a  g b   were a demodulator and p f a g a    were generated  it would be changed to p f a g b    and would not clash with the clause ~p f x g x   . 
　　　it has been found extremely useful in practice to keep every equality l i t e r a l   equal t1 t}   in a single canonical form  either equal t1 t1  or 
equal t1 t1  but not both.  literals of the form ~equal t1 t1  are handled the same way . this practice can significantly reduce the size of the clause space but can  in general  lead to incompleteness in a way similar to that caused by 
demodulation. 
　　　the new algorithms presented in this paper overcome both of these problems  at least to some extent. 
	i i i . 	automatic transformations 
　　　a transformation is an operation performed on a l i t e r a l or term. we study two types of transformations: l i t e r a l transformations  which correspond to resolutions with clauses containing exactly two l i t e r a l s   and term transformations  which correspond to demodulation with equality units. the difference between the transformation process and the usual applications of the inference rules is that transformations are applied automatically during the clashing and unification processes when the blocking properties of other operations such as demodulation and equality ordering are not in effect. because each automatic transformation corresponds to a valid logical operation  the new clashing and unification operations are also valid inferences. 
　　　we w i l l present the new l i t e r a l clashing and unification algorithms and comment on controlling their use. we assume that the reader is familiar with the standard terminology  including ground term  composite term  major function symbol  set  bag  and wff   l i t e r a l or term . 
definition 1. a ground subterm of a term  t  is maximal in t if it is not the subterm of any ground term other than i t s e l f . 
definition 1. com wff    number of maximal ground subterms in wff plus the number of composite subterms  including the term itself  that are not ground. note that in this measure of the complexity of a wff each maximal ground term counts as one item  namely  the single domain element that the term names. 
examples: 
com f x j y x    - 1 + 1 - 1 c1m f x j y a    - 1   - 1 - 1 
c1m f x j a b    - 1 + 1 - 1 
c1m f a j b c    - 1 + 1   1 
note that the last example is the least complex in the above sense because it names a single constant element of the relevant domain. 
definition 1. two l i t e r a l s   li and l1  pre-claah if they have the same major function symbol and are 

1 

opposite in sign. note that two l i t e r a l s clash  resolve  if they pre-clash and their atoms unify* 

     we also impose several restrictions as follows: 

definition 1. a l i s t of clauses is f u l l y clashed if every resolvent  c1t of clauses ci and c1 on tne l i s t is either already on the l i s t or is subsumed by a clause on the l i s t . 
d e f i n i t i o n 1 . a l i s t of clauses is f u l l y paramodulated if every paramodulant  c1  of clauses c1 and c1 on the l i s t is either already on the l i s t or is subsumed by a clause on the l i s t . 
definition 1. a l i t e r a l  or term   t  is transformable by a l i s t of transformations if there exists at least one transformation  tr  on the l i s t such that tr t  = t. 
a. 	literal clashing algorithm 
　　　the basic step of resolution is the clashing of l i t e r a l s . the usual notion is that two l i t e r a l s clash  resolve  if they are opposite in sign and have a common instance. the new notion is that two l i t e r a l s claah if there are transformed versions of the l i t e r a l s that clash in the usual sense. 
　　　the s p i r i t of the new concept is to automate the  obvious** transformations by incorporating them into the l i t e r a l clashing process. the  obvious** transformations would include relatione that are in some sense rewrite rules such as lt x y  -  ~lt y x   where lt represents the  less than  relation. the allowable transformations have a very restricted form which we describe below. these restrictions are heuristic in nature and result in a more efficient and effective theorem prover than would otherwise be possible. we distinguish these restricted transformations from transformations that have more deductive power  such as lt x y  -  lt x s y    where s x  stands for the successor of x. the distinction is informal and clearly subject to interpretation. 
　　　a l i t e r a l transforming clause  transformation  is a clause with exactly two l i t e r a l s   li and l1. the mechanism for applying these transformations is resolution. note that each such clause in fact represents two transformations  -li -  l1 and h-1 -  l i . 
　　　to be of any value  a transformation clause clearly must be deduclble from the clause space representing the problem to be solved. we assume that this property is satisfied in a l l further discussions of transformations. 
　　　for ease and efficiency we use two distinct l i s t s of tranaformations: 
lclashl - those that change sign and/or major function symbol 
lclash1 - those that permute arguments 
restricting the set of transformations that can f i r s t be applied to those that change sign and/or predicate symbol of a l i t e r a l provides an efficient sieve for l i t e r a l s that are not clashable. that is  no attempt w i l l ever be made to unify the atoms of two l i t e r a l s unless they have transformed versions that pre-clash. although having a single f u l l y clashed l i s t of transformations would lend itself to a very simple algorithm for applying the transformations  we feel that the trade-off between the computational efficiency of having two hats and the simple organisation of the algorithm justifies having the two l i s t s . 
1. in applying transformation li l1 to a l i t e r a l l  no substitutions may be made to l itself. 
1. li and l1 contain exactly the same set of variables. 
1. the major function symbols of li and l1 have exactly the same number of arguments. 
1. com ll  - c1m l1  
1. lclash1 is f u l l y clashed. also  the union of lclashl and lclash1 is fully clashed subject to the qualifications: 
a. tautologies generated by resolving clauses in lclashl need not be added. 
b. after the union of l i s t s lclashl and lclash1 is fully clashed  consider the set of a l l transformations  li l1  on lclashl such that exactly one of the l i t e r a l s   li or l1  is transformable by lclash1. if there are two transformations in this subset that differ only by a single application of a transformation in lclash1  that i s   the clauses are permutation variants of each other where the permutation is an eligible transformation   then only one of the transformations need be kept on lclashl. keeping a l l such permutation variants w i l l not affect the results of the algorithm but might cause some unnecessary duplication of work. 
　　　although omitting the qualification to restriction 1 would result in l i s t s with nice theoretical properties  see lemma 1 below   removal of redundant and ineffective transformations is consistent with the goal of keeping the set of applicable transformations small. 
　　　note  too  that restriction 1 is not prohibitive if the number of clauses involved is small. in particular  note that the resulting set w i l l be f i n i t e because of the restrictions placed on the complexity of the transformations  for example  -p x  p f x   is not allowed . 
　　　a transformation  set of transformations  is not eligible if it indirectly violates the above restrictions  even if the transformation clause itself is eligible. for example  the pair of transformation clauses --q a  r a  and -* a  q b  would not be eligible because the f u l l y clashed property would require the transformation clause -*q a  q b  to be present. this transformation clause is not eligible because it does not correspond to a transformation that changes sign and/or predicate symbol  for lclashl  or to a transformation that permutes arguments of a l i t e r a l  for lclash1 . 
1 1 　　　most of the restrictions above put limits on the set of transformations and the way they can apply. a few however  like the f u l l y clashed properties  make the operation of the algorithm simple and efficient in that at most two transformation steps w i l l be required on any l i t e r a l   one from lclashl and one from lclash1. although these restrictions may seem to make the set of transformations on l i s t s lclash1 and lclash1 very complicated  most of the restrictions are necessary only to cover special cases that w i l l not commonly arise in practice. on one set of real problems that was tested  see section iv   the entire set of transformations consisted of the 
following: 
	~lt x y  	~lt y x  
	-lt x y  	-equal x.y  
	~lt x num1  	-ib cc.x  
	hlt cn.x  	~ib cc x  
	hequal x y  	equal y x  
	hbqualarr x y  	equalarr y x  
these clauses were formulated under an interpretation in which ib x y  represents the fact that index y is in bounds for array x; cc is an array; num1 and cn are integer constants; and equalarr represents equality between arrays. 
　　　the following lemmas and theorems help motivate an algorithm that effectively makes use of the l i s t s of transformation clauses defined above. the two theorems illustrate the trade-off between techniques that can be shown to have nice theoretical properties and those that are useful in practice. theorem 1 characterizes the l i t e r a l clashing properties of the lists ixlashl and lclash1 when transformations can be applied without a substitution restriction  e.g.  restriction 1 above . theorem 1 characterizes the transformation properties of the l i s t s when the substitution restriction is in effect. 
　　　note that the identity transformation  represented by tautologies  is implicitly  but not explicitly  in every set of transformations  clauses . that i s   while the reference to the existence of a transformation with certain properties includes the possibility of the identity transformation  the reference to literals that are transformable by a certain set does not. 
notation: 
c i- c if clause c 	is 	deducible 	from 	clause space 	c 	with 	ordinary resolution  without 	a 	substitution restriction . 
a |-  b with respect to a set of clauses c if unit clause b is deducible from unit clause a with a single ordinary resolution step. 
lemma 1. let a and b be literals treated as unit clauses. let c be a set of transformation clauses  exactly two literals  that is fully clashed. if the conjunction of b and c is satlsflable  but the conjunction of a  b  and c is unsatlsfiable  then a i-  ~b' with respect to c  where b and ~b' clash. 
proof. because a must clearly participate in the derivation of the empty clause  the fully clashed property implies that if a and c i b'  where b and -b' clash  then a i-  m '. the lemma then follows from corollary 1 on page 1 of   1   . 
　　　let c above be partitioned into two sets  ci and c1  such that ci consists of those clauses which  when thought of as transformations  change sign and/or predicate symbol  and c1 those clauses that remain. now replace ci with ci' which 'is constructed from ci as follows: for each clause in ci  add the clause to ci' unless it is the resolvent of a clause in c1 and a clause already in 
ci 1 and exactly one of i t s l i t e r a l s is transformable by c1. in other words  the omitted clauses are clauses that can be derived by applying a transformation from c1 to one of the l i t e r a l s of a transformation clause in c i ' . 
　　　note that ci' may not be uniquely determined by ci. the order that the clauses are inspected may determine which clauses in ci are omitted from c i ' . this has no bearing on the lemmas and theorems that follow. 
lemma 1. 	let a l   a1  . . . an be unit 	clauses 	such 
ttial st* |-  a1 |-  ... |-   an with respect to 
ci' and c1. at least one of the following must hold: 
 1  there exists a unit clause  b  such that al i-  b with respect to ci' and b |-  an with respect to c1. 
 1  there exists a unit clause  b  such that al i-  b with respect to c1 and b i-  an with respect to c i ' . 
proof. because c is fully clashed  al i-  an with respect to c. let c be the clause in c that resolves with al to produce an. if c is in either c1 or c i '   then there is nothing to show because the identity transformation is implicitly in ci'  b - al  and c1  b - an . if c is not in c1 or ci' then it must be the resolvent of a clause in ci' 
with a clause in c1  and the lemma follows. 
lemma 1. 	let a l   a1  ... an be as in lemma 1. 	if 
 ail is transformable by c1  then outcome  1  of lemma 1 holds. 
proof. because c is fully clashed and ci and c1 partition c  it follows that al |-  an with respect to either ci or c1. if al and an have the same sign and predicate symbol  then al i-  an with respect to c1. in this case both  1  and  1  of lemma 1 hold because the relevant transformation from ci' is the identity transformation. 
　　　if al and an differ in sign and/or predicate symbol  then al i-  an with respect to ci. if both al and an can clash against clauses in c1  then al i-  an with respect to ci' because ci' 
contains a l l clauses from ci in which both literals are transformable by c1. in this case  both  1  and  1  hold as the relevant clause from c1 is the identity transformation. if al cannot clash against any clauses in c1  then  1  cannot hold unless the relevant clause from c1 is the identity transformation. the fact that outcome  1  must hold then follows from lemma 1. 
　　　first  assume that the transformation process uses ordinary resolution. that is  substitution is not restricted to the transformation clauses. 
theorem 1. 	consider the conjunction of the clauses 
tn lclash1  the clauses in lclash1  and two l i t e r a l s   literala and literalb as unit clauses. if the resulting clause space is unsatlsflable but is satlsflable without either of the two l i t e r a l s   then there exists a transformation  t r l   from lclash1 and a transformation  tr1  from lclash1 such that either tr1 trl literala   clashes with literalb or tr1 trl literalb   clashes with literala. in particular  the following hold true: 

1 

    1  if literal* is transformable by lclash1  then there exist trl and tr1 such that 
tr1 trl literals   clashes with literala. 
    1  if literalb is transformable by lclash1  then there exist trl and tr1 such that 
tr1 trl literala   clashes with literalb. 
    1  if neither literala nor literalb is transformable by lclash1  then there exist trl and tr1 such that tr1 trl literalb   clashes with literala. 
proof. recall that lclashl consists only of transformations that change sign and/or predicate symbol and that lclash1 consists only of transformations that permute arguments of a l i t e r a l . recall also that lclash1 is fully clashed  and that the conjunction of the two l i s t s is fully clashed up to deletion of tautologies and clauses that can be derived by the resolution of a 
clause on lclashl with a clause on lclash1. 
　　　because the clause space is unsatlsflable  there must exist a sequence of unit  single l i t e r a l   clauses ao  a l   . . . an such that literalb - ao |-   al |-   a1 |-   . . . |-   an - m-iterala* where -literala' and literala clash  see  . similarly  there must exist a sequence of unit clauses bo  b l t . . . bm such that literala - bo |--  bl i-   b1 i-   . . . i-  bm - -literalb' where -literalb' and literalb clash. 
　　　the f i r s t two parts of the theorem follow immediately from lemma 1 and lemma 1. the third part follows from lemma 1 and the observation that outcome  1  of lemma 1 must hold when al of lemma 1 is not transformable by c1. 
　　　now  consider the transformation process as defined originally. that i s   substitution is now allowed only into the transformation clauses themselves. 
notation: 
let a and b be l i t e r a l s . 
a -  b if there exists a transformation tr on either lclashl or lclash1 such that tr a  - b. 
a - l -   b  a -1-  b  if there exists a transformation tr on lclashl 
 lclash1  such that tr a  - b. 
a - k -  b if there exists a l   a1  . . . ak such that a -  al -   1 -  . . . -  ak - b.  if k - 1 then a - b.  a - * -  b if a - k -  b for some k    1. 
lemma 1. a -l-  b if and only if -b ＊l-   similarly for lclash1 . 
proof  a - l -   b if and only if there exists a 
transformation clause  li l1  and a substitution  s  such that l1 s  - -a and l1 s  - b  because substitutions are allowed only into the transformation clauses . 
theorem 1. 	a - * -  b implies that there exists a' 
 suce etiat either a -l-  a' -1-  b or -b -l-  a' -1-  - a . 
proof. this proof follows from lemma 1 and lemma 1 where al and an in lemma 1 are thought of as ground l i t e r a l s  so no substitutions are possible . 
　　　theorem 1 and theorem 1 imply that although it is sufficient to transform only one l i t e r a l when attempting to clash two l i t e r a l s with transformations  it may be necessary to choose the appropriate l i t e r a l to transform. theorem 1  in effect  says that without the substitution restriction the choice is based on a simple inspection of the transformations on lclash1. theorem 1  which refers only to the transformation process itself and not to the underlying goal of clashing l i t e r a l s   gives no information about making the choice. 
　　　this d i f f i c u l t y can be overcome in a program by attempting transformations in both directions. alternatively  a program might attempt to analyse the two l i t e r a l s and the set of transformations. in our program  however  we have found it adequate to choose  by simple inspection as above  one l i t e r a l to transform. 
algorithm 
　　　the algorithm used in our program is as follows: let literal1 and literal1 be the l i t e r a l s to clash. 
step 1: choose which l i t e r a l to transform. 
if 	literal1 	is 	transformable 	by 
lclash1  then transform literal1  else transform literal1. 
let literalb be the l i t e r a l chosen to be transformed  and let literala be the l i t e r a l that remains unchanged. step 1: find a transformation from lclashl to apply to literalb to make it pre-clash with literala. step 1: for each pre-clashable pair  find a transformation on lclash1 that makes the l i t e r a l s unifiable. 　　　in our program  we halt when the f i r s t clash is found rather than finding a l l possible clashes. it follows that the completeness property is sacrificed unless transformations are available for normal inference. because the automatic transformation concept was designed for performance in an applied environment  however  completeness is not of large concern. also  because many clauses that participate in program verification proofs are ground  and so can clash in at most one way    the f i r s t clash is very often the only clash. 
　　　it is important to note that the new l i t e r a l clashing algorithm is not a  pre*theorem prover.  that is  it is not the case that the algorithm corresponds to using the theorem prover  or theorem prover search strategies  to find a proof that two literals are inconsistent. the process is a direct and f i n i t e search through the two l i s t s   lclashl and lclash1. 
1 　　　let m be the number of transformations on lclashl that can apply to literalb  and let n be the number of transformations on lclash1 that can apply to the major function symbol of literala. it follows that at most mn transformations can be applied in the algorithm to test the clash of literal1 and literal1. in general  m and n w i l l be small. this fact is important because each application of a transformation requires a unification test  which can significantly add to the cost of the algorithm. 
       it is important to choose an e f f e c t i v e 
       transformation s e t . some transformations can cause unnecessary redundancies and i n e f f i c i e n c i e s . for example  it might be b e t t e r to have the u n i t clauses q a b  and q b a  both in the clause space than to have the single u n i t clause q a b  and the transformation clause -q x y  q y x   which might 
apply at many unnecessary places. 
b
	  	expanded u n i f i c a t i o n algorithm 
　　　a s i m i l a r transformation process has been developed fo r u n i f i c a t i o n of terms using e q u a l i t y l i t e r a l s equal t1 t1  in place of transformation clauses and paramodulation in place of r e s o l u t i o n  again w i t h a s u b s t i t u t i o n r e s t r i c t i o n   . although ve consider the concept of l i t e r a l transformations to be the most useful and important proposal in t h i s paper  we present the f o l l o w i n g for two reasons. f i r s t   there are some s i m i l a r i t i e s but also some important differences between the transformation of l i t e r a l s and terms. and second  the h e u r i s t i c s c i t e d below may help o f f s e t some of the i m p r a c t i c a l aspects of various complete u n i f i c a t i o n systems that b u i l d in s i r o p l i f i e r s . 
       we again p a r t i t i o n the transformations i n t o two l i s t s   unify1 and unify1  that change the major f u n c t i o n symbol of a term and permute arguments  r e s p e c t i v e l y . we have the same r e s t r i c t i o n s on the complexity of terms and variable s u b s t i t u t i o n s that we had in the l i t e r a l clashing a l g o r i t h m . in a d d i t i o n   we have the f o l l o w i n g r e s t r i c t i o n s : 
1. the bag1 of variables in tl and t1 are i d e n t i c a l . 
1. tl 	 t1  is not a 	proper 	subterm 	of 	t1 
  t l   . 
1. the set of transformations   i d e a l l y   should be f u l l y paramodulated. 
       p r a c t i c a l considerations l i m i t the a p p l i c a t i o n of last property. for example  the pair of clauses 
equal f x y  f y x   	and 
equal f x f y z   f f x y  z   can generate an i n f i n i t e set of e l i g i b l e transformations. although the e l i m i n a t i o n of any such transformations can cause blocks in the expanded u n i f i c a t i o n algorithm given below  it is reasonable to r e s t r i c t the l i s t to a small set of the most simple and roost general transformations. 
　　　note that the f u l l y clashed property implies that a l l instances of a p p l i c a t i o n of t r a n s i t i v i t y 
of e q u a l i t y w i l l be present. that i s   if equal t1 t1  and equal t1 t1  are e l i g i b l e t r a n s f o r m a t i o n s   then equal t1 t1  must be an e l i g i b l e t r a n s f o r m a t i o n . 
       note also that the requirement com tl  c1m t1  and r e s t r i c t i o n s 1 and 1 prevent i n f i n i t e sequences of expanding transformations such as a 
       -  f f a   -  . . . . 
　　　the f u n c t i o n a l r e f l e x i v i t y axioms  instances of equal x.x    which act as i d e n t i t y transformations  w i l l be assumed to be i m p l i c i t l y on a l l l i s t s   but need not be e x p l i c i t l y present. this assumption corresponds to the assumption about t a u t o l o g i e s in the discussion of the l i t e r a l clashing a l g o r i t h m . 
n o t a t i o n : 
let r and s be terms* 
r -  s if there e x i s t s a transformation tr on e i t h e r unipyl or unify1 such that t r   r   - s. 
theorem 1. 	r -  1 if and only if s -  r. 
proof  r -  s if and only if there e x i s t s a transformation clause  equal t1 t1   and a s u b s t i t u t i o n   s  such that t1 s  - r and t1 s  ＊ s  because s u b s t i t u t i o n s are allowed only i n t o the transformation c l a u s e s   . 
　　　the f o l l o w i n g theorem helps j u s t i f y the recursive o r i e n t a t i o n of the expanded u n i f i c a t i o n a l g o r i t h m . in g e n e r a l   it is possible that the transformation of a term  t  might be blocked unless some transformation is f i r s t applied to a proper subterm of t. the theorem shows that t h i s problem does not a r i s e w i t h i n the context of the expanded u n i f i c a t i o n a l g o r i t h m . 
theorem 1. 	let t be a term with proper subterm 	r  
 ih1 l e t t r l and tr1 be two transformations represented by transformation clauses  equal t1 t1  and equal t1 t1   r e s p e c t i v e l y . assume that t r l and tr1 are on a l i s t that is f u l l y paramodulated. 
if t* 	is the term that is generated by s u b s t i t u t i n g 
r w i t h t r l   r   in t  and t'  - t r 1   t f     then there e x i s t s a t r a n s f o r m a t i o n   tr1  such that tr1 t  subsumes t 1 ' . 
proof. the f a c t that t r l is applicable to r implies that there e x i s t s a s u b s t i t u t i o n   s i   such that e i t h e r t1 s1  - r or t1 s1  - r. without loss of g e n e r a l i t y   assume that t i   s i   - r. then t' has subterm t1 s1 . the f a c t that tr1 is applicable to t* implies that there e x i s t s a s u b s t i t u t i o n   s1  such that e i t h e r t1 s1  - tf or t1 s1  - t*. without loss of g e n e r a l i t y   assume that t1 s1  t ' . now  because t1 s1  has subterm  t1 s1   it follows that equal t1* t1  is a paramodulant of some instances of equal t1 t1  and equal t1 t1   where t1' is the r e s u l t of replacing the subterm  t1 s1   in t1 s1  w i t h t1 s1 . because the l i s t of transformations is f u l l y paramodulated  and the f u n c t i o n a l r e f l e x i v i t y axioms are i m p l i c i t l y present   tr1 is the transformation that is represented by e i t h e r clause  equal t1* t1   or by 
a clause that subsumes equal t1* t1 . 
       because the f u l l y paramodulated property accounts for a p p l i c a t i o n s of t r a n s i t i v i t y of e q u a l i t y   at any point in the expanded u n i f i c a t i o n a l g o r i t h m   it s u f f i c e s to apply at most one transformation to a term. 
a l g o r i t h m 
　　　the new u n i f i c a t i o n algorithm can be described as a simple recursive process. at the outer l e v e l i t i s s i m i l a r t o the l i t e r a l clashing algorithm i n that it f i r s t uses the transformations on unify1 to match major f u n c t i o n symbols and then uses the the transformations on un1fy1 to get u n l f i a b l e sequences of arguments. the recursion comes to play  of course  when u n i f i c a t i o n is to be applied to each pair of  permuted  arguments. 
　　　term transformations can be incorporated i n t o any process that uses u n i f i c a t i o n i n c l u d i n g 
　　　c l a s h i n g   demodulation and subsumption. our experience is that these transformations w i l l have 

1 

less impact in certain applications  such as program verification  than l i t e r a l transformations. 
	xv. 	testing amd evaluation 
　　　two sets of problems were used to test the new l i t e r a l clashing algorithm with the expanded unification algorithm included as the unification step: 
1. eleven real problems currently being tested by b. t. smith on the environmental theorem proving system  
1. slight 	variations 	of 	the 	eleven probles 
　　　the second set of problems was designed to help characterise the conditions in which the new l i t e r a l clashing algorithm has the most favorable effects on the proof search space. 
　　　the eleven real problems were tested with various search strategies  including those most commonly used by b. t. smith  1j. the problems run with transformations and those run without transformations w i l l be referred to as the  trans  and  notrans  versions  respectively. the following observations have been made: 
finding proofs; in no case did the notrans version find a proof when the trans version did not. in one case the trans version found a proof when the notrans version did not. 
total number of clauses in search space  in cases in which a proof was found : the notrans version tended to have fewer clauses than the trans version. this result is reasonable because the transformation process has the effect of producing more clauses at earlier levels in the graph that represents the search space. because a l l of the search strategies used have some element of breadth f i r s t search in them  the general effect of the transformation process is a net increase in the total number of clauses added to the clause space. there were isolated cases in which the trans version actually had up to 1 percent fewer clauses than the notrans version  and a few cases in which the trans version had as many as 1 percent more clauses than the notrans version  but on the average  the trans version produced approximately 1 percent more clauses than the notrans version. 
number of clauses that participate in proof: the value for the trans version never exceeded the value for the notrans version. the differences ranged as high as six clauses  1 percent . 
number of clauses selected by the search strategy: the value for the trans version exceeded the value for the notrans version in only one case. the single increased value was from 1 to 1 clauses  less than 1 percent . the decreased values ranged up to over 1 percent  1 to 1 clauses . 
number of selected clauses that participate in the proof: the value for the trans version never exceeded the value for the notrans version  	reductions 	ranged 	up 	to 	1 percent. 
depth of empty clause: the value for the trans version was less than or equal to the value for the notrans version in a l l but one of the problems tested  with reductions of up to 1 percent. in the one exception  the trans version increased the depth of the notrans version from 1 to 1. this behavior is possible because there can be more than one proof to a problem  and because the search strategies used are not exactly breadth f i r s t searches. in the problem in which the depth was higher in the trans version than in the notrans version  a longer path to the empty clause  deeper proof  was found before the shorter path  less deep proof  was discovered. 
　　　in a second set of experiments  noise  extraneous literals and complications of terms  was added to the real problems. the negative effect of adding noise was consistently and significantly worse in the problems run without transformations than in the problems run with transformations. 
summary 
       the modified r e a l problems tested above i n d i c a t e that the automatic transformation concept does have the p o t e n t i a l to become a powerful extension to a resolution-based automated theorem proving system. except f o r i s o l a t e d cases program verification problems run with automatic transformations did no worse than problems run without transformations  and sometimes  the performance was significantly better. 
　　　the results  however  were not as promising as expected. this suggests that although the concept may be quite useful  better search strategies putting more emphasis on breadth f i r s t search might be developed to capitalise on the power of the transformation process. at present the user must pick a subset of transformation clauses to become automatic transformations. work needs to be done to provide general rules for making these choices. 
　　　various modifications to the new l i t e r a l clashing and expanded unification algorithms might also be investigated  including relaxation of some of the rules for e l i g i b i l i t y of transformations and r les for applying transformations. in particular  relaxation of the rule about restricted substitution into the terms and/or l i t e r a l s being transformed could significantly affect the resulting clause space. finally  the incorporation of the automatic transformation concept into other areas such as demodulation or subsumptlon might be investigated. 
