 
the new millennium remote agent  nmra  will be the first on-board ai system to control an actual spacecraft. the spacecraft domain raises a number of challenges for planning and execution  ranging from extended agency and long-term planning to dynamic recoveries and robust concurrent execution  all in the presence of tight real-time deadlines  changing goals  scarce resource constraints  and a wide variety of possible failures. nmra is one of the first systems to integrate closed-loop planning and execution of concurrent temporal plans. it is also the first autonomous system that will be able to achieve a sustained  multi-stage  multiyear mission without communication or guidance from earth. 
1 introduction 
we are developing the first on-board ai system to control an actual spacecraft. the mission  deep space one  ds-1   is the first in nasa's new millennium program  nmp   an aggressive series of technology demonstrations intended to push space exploration into the 1st century. ds-1 will launch in mid-1 and will navigate and fly by asteroids and comets  taking pictures and sending back information to scientists on earth. one key technology to be demonstrated is spacecraft autonomy  including on-board planning and plan execution. the 
   *this paper describes work performed at the jet propulsion laboratory  california institute of technology  under contract from the national aeronautics and space administration. 
　recom technologies  nasa ames research center  ms 1  moffett field  ca 1. 
   caelum research  nasa ames research center  ms 1  moffett field  ca 1. 

　　jet propulsion laboratory  california institute of technology  1 oak grove drive  pasadena  ca 1. spacecraft will spend long periods without the possibility of communication with ground operations staff and will  in fact  plan how and when it will communicate back to earth. it must maintain its safety and achieve high-level goals  when possible  even in the presence of hardware faults and other unexpected events. 
　this paper describes our approach to planning and plan execution in the context of spacecraft autonomy. our approach is being implemented as part of the new 
millennium remote agent  nmra  architecture  pell et a/.  1 . this architecture integrates traditional realtime monitoring and control with constraint-based planning and scheduling  muscettola  1   robust multithreaded execution  gat  1   and model-based diagnosis and reconfiguration  williams & nayak  1 . 
　the paper is organized as follows. section 1 discusses the spacecraft domain and requirements which influence our design. section 1 describes our approach to planning  execution  and robustness  and illustrates the top-level loop of our system. section 1 addresses the issues involved in generating plans to support robust execution  and section 1 shows how such plans are executed. we then consider related work and conclude. 
1 domain and requirements 
the autonomous spacecraft domain presents a number of challenges for planning and plan execution. many devices and systems must be controlled  leading to multiple threads of complex activity. these concurrent processes must be coordinated to control for negative interactions  such as vibrations of the thruster system violating stability requirements of the camera. also  activities may have precise real-time constraints  such as taking a picture of an asteroid during a narrow window of observability. 
　virtually all resources on spacecraft are limited and carefully budgeted. the system must ensure that they are allocated effectively to goal-achievement. some resources  like solar panel-generated power  are renewable but limited. others  such as total propellant  are finite and must be budgeted across the entire mission. 
　
the planner reasons about resource usage in generating plans  but because of run-time uncertainty the resource constraints must also be enforced as part of execution. 
　the planner and plan execution system must reason about and interact with external agents and processes  such as the on-board navigation system and the attitude controller. these external agents can provide some information at plan time and can achieve tasks and provide more information at run-time but are never fully controllable or predictable. for example  the attitude controller can provide estimates of turn durations at plan time  but the completion of turns during execution is not controllable and can only be observed. plans must express compatibilities among activities  and the plan execution system must synchronize these activities at run-time. 
　in addition  planning and the information necessary to generate plans are also limited resources. because of the limited on-board processing capabilities of the spacecraft  the planner must share the cpu with other critical computation tasks such as the execution engine  the realtime control loops and the fault detection  isolation and recovery system. while the planner generates a plan  the spacecraft must continue to operate. moreover  the plan often contains critical tasks whose execution cannot be interrupted in order to install newly generated plans. thus inserting a planning activity means many other activities must be suspended or postponed. since planning is expensive  plan failure is costly. thus plan execution must be robust in the face of a wide variety of hardware faults and delays. 
1 approach 
our approach separates an extensive  deliberative planning phase from the reactive execution phase  executing infrequently generated plans over extended time periods. how frequently and how far in advance the system should plan is constrained by several factors  including uncertainty about the results of execution. for example  uncertainty about how much thrust has accumulated after a thrusting maneuver means the system can't reliably plan how many thrusts will be needed to reach the target  thus reducing how far in advance it is productive to plan such thrusting activities. while uncertainty motivates frequent planning with short scheduling horizons  the cost of planning motivates plans with long horizons. 
　in our approach the generation of the next plan is explicitly represented in the current plan as a task. by considering the costs and constraints of planning  the planner automatically optimizes future planning activities. when the executive reaches this task in the current scheduling horizon  it asks the planner to generate a plan for the next scheduling horizon while it continues to execute the activities remaining in the current plan. when the executive reaches the end of the current horizon  the plan for the next horizon will be ready and the executive will then install it and continue execution seamlessly. 
　ideally  we would like to have the planner represent the spacecraft at the same level of detail as the executive. this approach is taken by  bresina et a/.  1   and by  levinson  1 . the approach  when feasible  has a number of benefits. first  it enables the planner to simulate the detailed functioning of the executive under various conditions of uncertainty  and to produce a plan which has contingencies  branches  providing quick responses for important execution outcomes. second  it enables the use of one language rather than two for expressing action knowledge  which simplifies knowledge engineering and helps maintain consistency of interfaces. third  it enables the planner to monitor execution in progress and project the likely course of actions  and then provide plan refinements which can be patched directly into the currently executing plan. 
　unfortunately  in our domain this single representation approach is not practical because the complexity of interactions at the detailed level of execution would make planning combinatorially intractable. thus  we have found it necessary to make the planner operate on a more abstract model of the domain. examples of abstractions are: 
  hiding details of subsystem interactions controlled by the executive 
  merging a set of detailed component states into ab-stract states 
  not modeling certain subsystems 
  using conservative resource and timing estimates 
　these simplifications have several consequences which impact our design. one important consequence is that the planner can no longer model or predict intermediate execution states. since the executive is managing multiple concurrent activities at a level of detail below the planner's visibility  it is difficult to provide a well-defined initial state as input to the infrequent planning process. also  a newly generated plan may be invalidated by execution activities that occur during or even after planning but prior to execution of the new plan  since the initial conditions of that plan may no longer be consistent with the state of the spacecraft. 
　we address the problem of generating initial states for the next planning round differently depending on the status of the currently-executing plan. plans normally include an activity to plan for the next horizon. at this point  the executive sends to the planner the current plan in its entirety  with annotations for the decisions that were made so far in executing it. the current plan serves as its own prediction of the future at the level of abstraction required by the planner. thus  all the 
	pell  et al. 	1 
planner has to do is extend the plan to address the goals of the next planning horizon and return the result to the executive. the executive must then merge the extended plan with its current representation of the existing plan. the net result is that  from the executive's perspective  executing multiple chained plans is virtually the same as executing one long plan. this has the useful consequence that it enables the executive to engage in activities which span multiple planning horizons  such as a 1-month long engine burn  without interrupting them. 
　in the event of plan failure  the executive knows how to enter a stable state  called a standby mode  prior to invoking the planner  from which it generates a description of the resulting state in the abstract language understood by the planner. note that establishing standby modes following plan failure is a costly activity  as it causes us to interrupt the ongoing planned activities and lose important opportunities. for example  a plan failure causing us to enter standby mode during the comet encounter would cause loss of all the encounter science  as there is no time to re-plan before the comet is out of sight. such concerns motivate a strong desire for plan robustness  in which the plans contain enough flexibility  and the executive has the capability  to continue executing the plan under a wide range of execution outcomes. 
1 planning 
a principal goal of the nmra is to enable a new generation of spacecraft that can carry out complete  nominal missions without any communication from ground. this is a great departure from previous and current missions  such as voyager  galileo or cassini  which rely on frequent and extensive communications from ground. in traditional missions  ground operations routinely uplink detailed command sequences to be executed during subsequent mission phases. such communications require costly resources such as the deep space network  which makes them very expensive. uplink independence is particularly important for missions that require fast reaction times  as it is the case for autonomous rovers  comet landers and other remote explorers ; in this case detailed ground-based control is infeasible due to long communication lags. in case of loss of uplink capabilities  previous spacecraft could carry out a critical sequence of commands stored on board before launch. however  these sequences were greatly simplified when compared to the uplinked sequences and could only carry out a small fraction of all mission goals. 
mission manager 
nmra is launched with a pre-defined  mission profile  that contains a list of all nominal goals to be achieved during the mission. the detailed sequence of commands to achieve such goals  however  is not pre-stored but is generated on board by the planner. a special module of the planner  the mission manager  determines the goals that need to be achieved in the next scheduling horizon  typically 1 weeks long   extracts them from the mission profile and combines them with the initial spacecraft state as determined by the executive. the result is a specific planning problem that  once solved  yields detailed execution commands. this decomposition into long-range mission planning and shorter-term detailed planning enables nmra to undertake an extended diverse mission with minimal human intervention. 
requirements for robust execution 
the nmra must be able to respond to unexpected events during plan execution without having to plan the response. although it is sometimes necessary to re-plan  this should not be the only option. many situations require responses that cannot be made quickly enough if the nmra has to plan them. 
　the executive must be able to react to events in such a way that the rest of the plan is still valid. to support this  the plan must be flexible enough to tolerate both unexpected events and the executive's responses without breaking. this flexibility is achieved by  1  choosing an appropriate level of abstraction for the activities and  1  generating plans in which the activities have flexible start and end times. 
　the abstraction level of the activities in the plan must be chosen carefully. if the activities are at too fine a level of granularity  then the plan will impose too many constraints on the behavior of the executive  making plan execution more fragile. however  if the granularity is too coarse  then there may be interactions among the sub-actions of activities that the planner cannot reason about. in ds1  activities are abstracted to the level where there are no interactions among their subactivities. this level allows the planner to resolve all of the global interactions without getting into details that would over-constrain the executive. 
　the other mechanism by which the executive can respond to events without breaking the plan is having activities with flexible start and end times. plans in dsl consist of temporal sequences of activities. each activity has an earliest start time  a latest start time  an earliest end time  and latest end time. the planner uses a least commitment approach  constricting the start and end times only when absolutely necessary. any flexibility remaining at the end of planning is retained in the plan. this flexibility is used by the executive to adjust the start and end times of activities as needed. for example  if the engine does not start on the first try  the executive can try a few more times. to make time for these extra attempts  the end time is moved ahead  but not beyond the latest end time. 
　changing the start or end time of an activity may also affect other activities in the plan. for example  if the spacecraft must take science data five minutes after shutting down the engine  then changing the end time of the engine f i r i n g activity will change the start time of the take science data activity. to make the changes  the executive must know about the temporal constraint between the f i r e engine activity and the take science data activity. the plan therefore contains all of the temporal constraints among the activities. 
　although the planner is typically enabled to leave flexibility in the activity start and end times because the times are under-constrained  it is sometimes required to provide such flexibility in order to operate the spacecraft successfully. for example  when the engine is commanded to turn on  it goes through a warm up procedure and turns itself on. the warm up procedure can take up to ten minutes  but the actual warm up time is not known at plan time. it is not known until the engine actually turns on. we currently handle such cases by providing enough time in activities to handle worst-case outcomes  although we are developing a method to plan explicitly about execution-time uncertainty. 
1 execution 
from the point of view of the nmra executive  a plan is a set of time-lines. timelines consists of a linear sequence of tokens  each of which represents an activity which should be taking place during a defined temporal period. a token has a start and end window  a set of pre- and post-constraints. the start and end windows are intervals in absolute time during which the token must start and end. the pre- and post-constraints describe dependencies with respect to the starts and ends of tokens on other time-lines. 
　there are three different types of pre- and postconstraints: before  after  and meets. the semantics of these constraints is fairly straightforward. a before constraint specifies that the start of a token must come before the start of another token. an after constraint specifies that the end of a token must come after the end of another token. the amount of time that may elapse between these two related events is specified as an interval. a meets-constraint specifies that the start  end  of a token must coincide with the start  end  of another token. 
issues 
plan execution would be relatively straightforward were it not for the fact that different token types have different execution semantics. in particular  there are different ways of determining whether or not a particular activity has ended. some activities are brought to an end by the physics of the environment or the control system  e.g. turns  while others are brought to an end simply by meeting all its internal plan constraints  e.g. the periods of constant-attitude pointing between turns . 
　the situation is further complicated by the fact that a naive operationalization of these constraints leads to deadlock. consider a const ant-pointing token a followed by a turn token b. token a  waiting for the turn  should end whenever token b  the turn  is eligible to start. however  b is constrained by the planner to follow a  and so b is not eligible to start until a ends. thus  a can never end  and b can never start. 
　another issue is that some tokens don't achieve their intended post-conditions until some time after they have started. for example  consider a time-line for a device containing a token a of type device-off followed by token b of type device-on. the intent here is that the executive should turn the device on at the junction between a and b  but this cannot be done instantaneously. thus  a token on another time-line  constrained to start after b  may fail if it depends upon the device being on  since the device may not in fact be turned on until some time after b starts. one possible solution to this problem is to change the planner model so that it generates a plan that includes an intermediate token of type device-tuming-on  but this can significantly increase the size of the planner's search space  and hence the time and resources required to generate a plan. 
　to solve these problems  we separate the execution of a token into three stages: startup  steady-state  and ending. the startup stage performs actions to achieve 
the conditions that the planner intends the token to represent. the steady-state stage monitors and maintains these conditions  or signals failure if the conditions cannot be maintained . the ending stage allows the token to perform cleanup actions before releasing control to the next token on the time-line. tokens may have null actions in one or more stages. the algorithm for executing a token in this three-phase framework is as follows: 
1. wait for the beginning of the token's start window. 
1. in parallel 
 a  wait for token's pre-constraints to be true  and 
 b  check that the end of the start window has not passed. if it has  signal a failure. 
1. signal that the token has started. 
1. execute the achieve-portion of the token. 
1. spawn the maintain-portion of the token as a parallel task. 
1. wait for the start of the token's end window. 
1. wait for the token's post-conditions to be true. 
1. wait for the pre-conditions of the next token to be true  except those that refer to the end of this token. 
	pell  et al. 	1 
　
1. stop the maintain thread spawned in step 1  and execute the cleanup-portion of the token 
1. check that the end of the end window has not passed. if it has  signal a failure. otherwise  signal that this token has ended. 
　this algorithm allows all the token types to be executed within a uniform framework. 
1 related work 
nmra is one of the first systems to integrate closed-loop planning and execution of concurrent temporal plans. it is also the first autonomous system that will be able to achieve a sustained  multi-stage  multi-year mission without communication or guidance from earth. 
　bresina et al.  1  describe a temporal planner and executive for the autonomous telescope domain. their approach uses a single action representation whereas ours uses an abstract planning language  but their plan representation shares with ours flexibility and uncertainty about start and finish times of activities. however  their approach is currently restricted to single resource domains with no concurrency. 
　drabble  1  describes the excalibur system  which performs closed-loop planning and execution using qualitative domain models to monitor plan execution and to generate predicted initial states for planning after execution failures. the  kitchen  domain involved concurrent temporal plans  although it was simplified and did not require robust reactions during execution. 
　currie & tate  1  describe the o-plan planning system  which when combined with a temporal scheduler can produce rich concurrent temporal plans. reece & tate  1  developed an execution agent for this planner  and the combined system has been applied to many real-world problems including the military logistics domain. the plan repair mechanism  drabble  tate  & dalton  1  is more sophisticated then ours  although the execution agent is weaker and does not perform execution-time task decomposition or robust execution. 
　the cypress system  wilkins et a/.  1  and the 1t system  bonasso et al  1  also address the closedloop integration of planning and execution in the context of concurrency  although neither of these systems deals with temporal plans. it is interesting to compare how these systems differ from ours concerning the generation of execution context for the planner and the integration of new planning information back into execution. cypress shares the same action formalism between planning and execution. this enables the planner to watch over execution and simulate the results forward  as discussed in section 1. the planner can detect problems in advance and send back a detailed plan refinement  and the executive can replace un-executed portions of its current plan with new portions and continue running uninterrupted. 
　in 1t  the planner maintains such tight control over execution that it does not even send the full plan it has developed. instead  it sends directives to the executive one at a time  and the executive then responds to each directive in turn. this provides an interesting solution to the problem of keeping the planner informed about execution and also to the problem of integrating new planning information into the execution context. however  this approach is problematic in our domain as it places severe time constraints on the planner so that it can decide what to do before the executive runs out of activities  and it requires the computational and informational resources to be available for planning on a continuous basis. this is a luxury we could not afford on a spacecraft  as discussed in section 1. 
　other systems integrating planning and execution in real-world control systems include guardian  hayesroth  1   soar  tambe et a/.  1   atlantis  gat  
1  and tca  simmons  1 . these systems invoke planning as a means to answer specific questions during execution  like whether a particular treatment would take effect in time to heal the patient  which evasive maneuver will counter the opponents current attack plan  and which path to take to get to a particular room . this use of planning contrasts with our approach  in which the planner coordinates the global activity in the system. the local approach has the advantage of making use of special-purpose planners which can be built to answer narrow questions  but our global approach has the advantage of ensuring that the different activities undertaken at execution will not interact harmfully. it is not clear how the local approaches can be extended to provide similar guarantees. 
1 conclusion 
a growing body of work is addressing issues of robust planning and execution in the face of failures and uncertainty. the lockheed underwater vehicle  ogasawara  1  uses decision-theoretic planning and execution to select courses of action which maximize utility. circa  musliner  durfee  & shin  1  considers a set of states  actions  and critical failures to be avoided. it then inserts a set of sense-act transitions into a real-time controller to ensure that the controller will never enter the critical failure states. cassandra  pryor & collins  1   buridan  draper  hanks  & weld  1   o-plan  currie & tate  1  and jic  drummond  bresina  & swanson  1  all consider actions with uncertain outcomes and produce plans that enable execution-time recovery without having to take time out for replanning. 
　we are currently working on extending our planning approach to support such capabilities in the context of concurrent temporal plans. our present levels of robustness are achieved using the complementary approach of flexible  abstract  and conservative plans which can be exploited by a smart executive. 
　a final distinction between nmra and most other planning and execution systems is that our planner actually plans how and when it will plan for the next horizon. that is  it inserts a  plan next horizon  activity into the plan and plans other supporting activities around this goal. such activities include information-gathering activities which will be necessary before another plan can be built. the executive then achieves these activities to enable this form of planning over multiple horizons. we believe this is a necessary capability of extended agency  and one which will become of growing concern as we design autonomous agents to achieve goals unassisted over years or decades of activity. 
