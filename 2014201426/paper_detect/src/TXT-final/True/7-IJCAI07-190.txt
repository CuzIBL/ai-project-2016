
we introduce normative temporal logic  ntl   a logic for reasoning about normative systems. ntl is a generalisation of the well-known branchingtime temporal logic ctl  in which the path quantifiers a   on all paths...   and e   on some path...   are replaced by the indexed deontic operators o¦Ç and p¦Ç  where for example o¦Ç  means    is obligatory in the context of normative system ¦Ç . after defining the logic  we give a sound and complete axiomatisation  and discuss the logic's relationship to standard deontic logics. we present a symbolic representation language for models and normative systems  and identify four different model checking problems  corresponding to whether or not a model is represented symbolically or explicitly  and whether or not we are given an interpretation for the normative systems named in formulae to be checked. we show that the complexity of model checking varies from p-complete up to exptime-hard for these variations.
1 introduction
normative systems  or social laws  have been widely promoted as an approach to coordinating multi-agent systems  shoham and tennenholtz  1 . crudely  a normative system defines a set of constraints on the behaviour of agents  corresponding to obligations  which may or may not be observed by agents. a number of formalisms have been proposed for reasoning about normative behaviour in multiagent systems  typically based on deontic logic  meyer and wieringa  1 . however the computational properties of such formalisms - in particular  their use in the practical design and synthesis of normative systems and the complexity of reasoning with them - has received little attention. in this paper  we rectify this omission. we present normative temporal logic  ntl   a logic for reasoning about normative systems  which is closely related to the well-known and widelyused branching time logic ctl  emerson  1 . in ntl  the universal and existential path quantifiers of ctl are replaced by indexed deontic operators o¦Ç and p¦Ç  where o¦Ç  means that    is obligatory in the context of the normative system ¦Ç   and p¦Ç  means    is permissible in the context of the normative system ¦Ç . here    is a temporal logic expression over the usual ctl temporal operators       and u  every temporal operator must be preceded by a deontic operator  cf. ctl syntax   and ¦Ç denotes a normative system. in ntl  obligations and permissions are thus  first  contextualised to a normative system ¦Ç and  second  have a temporal dimension. it has been argued that the latter can help avoid some of the paradoxes of classical deontic logic. ntl generalises ctl because by letting ¦Ç  denote the empty normative system  the universal path quantifier a can be interpreted as o¦Ç ; much of the technical machinery developed for reasoning with ctl can thus be adapted for ntl  emerson  1; clarke et al.  1 . ntl is in fact a descendent of the normative atl  natl  logic introduced in  wooldridge and van der hoek  1 : however  ntl is much simpler  and we believe more intuitive  than natl  and we are able to present many more technical results for the logic: we first give a sound and complete axiomatisation  and then discuss the logic's relationship to standard deontic logics. we introduce a symbolic representation language for normative systems  and investigate the complexity of model checking for ntl  showing that it varies from p-complete in the simplest case up to exptimehard in the worst. we present an example to illustrate the approach  and present some brief conclusions.
1 normative temporal logic
kripke structures: let ¦µ = {p q ...} be a finite set of atomic propositional variables. a kripke structure  over ¦µ  is a quad  where: s is a finite  non-empty set of states  with s  being the initial states; r   s ¡Á s is a total binary relation on s  which we refer to as the transition relation1; and v : s ¡ú 1¦µ labels each state with the set of propositional variables true in that state. a path over r is an infinite sequence of states ¦Ð = s1 s1 ... which must satisfy the property that  u ¡Ê n:  su su+1  ¡Ê r. if u ¡Ê n  then we denote by ¦Ð u  the component indexed by u in ¦Ð  thus ¦Ð denotes the first element  ¦Ð the second  and so on . a path ¦Ð such that ¦Ð = s is an s-path.
normative systems: in this paper  a normative system is a set of constraints on the behaviour of agents in a system.
more precisely  a normative system defines  for every possible system transition  whether or not that transition is considered to be legal or not. different normative systems may differ on whether or not a transition is legal. formally  a normative system ¦Ç  w.r.t. a kripke structure is simply a subset of r  such that r   ¦Ç is a total relation. the requirementthat r ¦Ç is total is a reasonableness constraint: it prevents normative systems which lead to states with no successor. let n r  = {¦Ç |  ¦Ç   r  &  r   ¦Ç is total } be the set of normative systems over r. the intended interpretation of a normative system ¦Ç is that  means transition  is forbidden in the context of ¦Ç; hence r ¦Ç denotes the legal transitions of ¦Ç. since it is assumed ¦Ç is reasonable  we are guaranteed that a legal outward transition exists for every state. if ¦Ð is a path over r and ¦Ç is a normative system over r  then ¦Ð is ¦Ç-conformant if.
let c¦Ç s  be the set of ¦Ç-conformant s-paths  w.r.t. some r .
¡¡since normative systems are just sets  of disallowed transitions   we can compare them  to determine  for example  whether one is more liberal  less restrictive  than another: if
  then ¦Ç places fewer constraints on a system than ¦Ç  hence ¦Ç is more liberal. notice that  assuming an explicit representation of normative systems   i.e.  representing a normative system ¦Ç directly as a subset of r   checking such properties can be done in polynomial time. we can also operate on them with the standard set theoretic operations of union  intersection  etc. taking the union of two normative systems ¦Ç1 and ¦Ç1 may yield  depending on whether r    ¦Ç1 ¡È ¦Ç1  is total  a normative system that is more restrictive  less liberal  than either of its parent systems  while taking the intersection of two normative systems yields a normative system which is less restrictive  more liberal . care must be taken when operating on normative systems in this way to ensure the resulting system is reasonable.
syntax of ntl:	the language of ntl is a generalisation of
ctl: the only issue that may cause confusion is that  within this language we refer explicitly to normativesystems  which are semantic objects. we will therefore assume a stock of syntactic elements ¦²¦Ç which will denote normative systems. to avoid a proliferation of notation  we will use the symbol ¦Ç both as a syntactic element for normative systems in the language  and the same symbol to denote the corresponding semantic object. an interpretation for symbols ¦²¦Ç with respect to a transition relation r is a function i : ¦²¦Ç ¡ú n r . when r is a transition relation of kripke structure k we say that i is an interpretation over k. we will assume that the symbol ¦Ç  always denotes the emptyset normative system  i.e.  the normative system which forbids no transitions. note that this normative system will be reasonable for any kripke structure. thus  we require that for all i: i ¦Ç   =  . the syntax of ntl is defined by the following grammar:

 where p ¡Ê ¦µ and ¦Ç ¡Ê ¦²¦Ç. sometimes we call ¦Á occurring in an expression o¦Ç¦Á or p¦Ç¦Á a temporal formula  although such an ¦Á is not a well-formed formula .
semantic rules: the semantics of ntl are given with respect to the satisfaction relation  |= . k s |=i   holds when k is a kripke structure  s is a state in k  i an interpretation over k  and   a formulae of the language  as follows:
;
	k s |=i p iff p ¡Ê v s 	 where p ¡Ê ¦µ ;
k s |=i    iff not k  s |=i  ;
k s |=i   ¡Å ¦× iff k s |=i   or k  s |=i ¦×;
;
;
k s |=i o¦Ç  u ¦×  iff  ¦Ð ¡Ê ci ¦Ç  s   u ¡Ê n  s.t. k ¦Ð u  |=i ¦× and  v  1 ¡Ü v   u  : k ¦Ð v  |=i  
k s |=i p¦Ç  u ¦×  iff  ¦Ð ¡Ê ci ¦Ç  s   u ¡Ê n  s.t. k ¦Ð u  |=i ¦× and  v  1 ¡Ü v   u  : k ¦Ð v  |=i  
the remaining classical logic connectives   ¡Ä    ¡ú        are assumed to be defined as abbreviations in terms of   ¡Å  in the conventional manner. we write k |=i   if k s1 |=i   for all s1 ¡Ê s1  k |=   if k |=i   for all i  and |=   if k |=   for all k. the remaining ctl temporal operators are defined:
o¦Ç  ¡Ôop¦Ç  ¡Ôpo 
¦Ç¡Ô p¦Ç   p 
¦Ç¡Ô o¦Ç   recalling that ¦Ç  denotes the empty normative system  we obtain the conventional path quantifiers of ctl as follows:
a¦Á ¡Ô o¦Ç ¦Á  e¦Á ¡Ô p¦Ç ¦Á.
properties and axiomatisation: the following proposition makes precise the expected property that a less liberal system has more obligations  and less permissions  than a more liberal system.
proposition 1 let k be a kripke structure  i be an interpretation over k  and ¦Ç1 ¦Ç1 ¡Ê ¦²¦Ç: if i ¦Ç1    i ¦Ç1  then k |=i o¦Ç1  ¡ú o¦Ç1  and k |=i p¦Ç1  ¡ú p¦Ç1 .
we now present a sound and complete axiomatisation for ntl and some of its variants. first  let ntl  be ntl without the empty normative system ¦Ç . formally  ntl  is defined exactly as ntl  except for the requirement that ¦²¦Ç contains the ¦Ç  symbol and the corresponding restriction on interpretations. an axiom system for ntl   denoted    is defined by axioms and rules  ax1 - r1  in figure 1. ntl  can be seen as a multi-dimensional variant of ctl  where there are several indexed versions of each path quantifier.
¡¡going on to ntl  we add axioms  obl  and  perm   figure 1 ; the corresponding inference system is denoted . we then  have the following chain of implications in ntl  the second element in the chain is a variant of the deontic axiom discussed below . if something is naturally  or physically inevitable  then it is obligatory in any normative system; if something is an obligation within a given normative system ¦Ç  then it is permissible in ¦Ç; and if something is permissible in a given normative system  then it is naturally  physically  possible:

¡¡finally  let ntl+ be the extension of ntl obtained by extending the logical language with propositions on the form
 ax1  all validities of propositional logic

 ax1b  o¦Ç      p¦Ç   

 ax1b  p¦Ç      o¦Ç   
 ax1  p¦Ç    ¡Å ¦×     p¦Ç   ¡Å p¦Ç ¦× 
 ax1  o¦Ç      p¦Ç   
 ax1  p¦Ç  u ¦×     ¦× ¡Å    ¡Ä p¦Ç p¦Ç  u ¦×   
 ax1  o¦Ç  u ¦×     ¦× ¡Å    ¡Ä o¦Ç o¦Ç  u ¦×   
 ax1  p¦Ç  ¡Ä o¦Ç 
 ax1  o¦Ç    ¡ú   ¦× ¡Ä p¦Ç     ¡ú    ¡ú  o¦Ç ¦Ã u ¦×  
 ax1b  o¦Ç    ¡ú   ¦× ¡Ä p¦Ç     ¡ú    ¡ú  o¦Ç ¦× 
 ax1  o¦Ç   	¡ú	  ¦× ¡Ä  ¦Ã	¡ú o¦Ç     	¡ú	  	¡ú
 p¦Ç ¦Ã u ¦×  
 ax1b  o¦Ç    ¡ú   ¦× ¡Ä o¦Ç     ¡ú    ¡ú  p¦Ç ¦× 
 ax1  o¦Ç    ¡ú ¦×  ¡ú  p¦Ç   ¡ú p¦Ç ¦× 
 r1  if    then  o¦Ç    generalization 
 modus ponens 
 perm  p¦Ç¦Á ¡ú p¦Ç ¦Á

 perm+  
figure 1: the three systems ntl    ax1 - r1  derived from an axiomatisation of ctl ; ntl   ax1 - r1   obl   perm  ; ntl+   ax1 - r1   obl+   perm+  . ¦Á stands for a temporal formula.
 and can then be defined   interpreted in the obvious way  e.g. iff i . an axiom system for ntl+  denoted +  is obtained from   by adding the schemes  obl+  and  perm+   figure 1 .
theorem 1  soundness and completeness  the inference mechanism   is sound and complete with respect to validity of ntl  formulas  i.e.  for every formula   in the language of ntl   we have . the same holds for  with respect to formulas from ntl and + with respect to ntl+.
proof: all three cases are proven by adjusting the technique presented in  emerson  1 . for the ntl  case  the tableau-based construction of  emerson  1  immediately carries through: we will encounter  for every generated state  successors of differentdimensions. for the case of ntl  which includes the symbol ¦Ç   we have to add clauses corresponding to  obl  and  perm  to the construction of the closure cl    of a formula  : if o¦Ç ¦Á  respectively  p¦Ç¦Á  is in cl    then also o¦Ç¦Á  respectively  p¦Ç ¦Á  should be in cl   .
in the case of ntl+  we have to close off cl    under the implications of axioms  obl+  and  perm+ . 
¡¡going beyond ntl+  we can impose further structure on ¦²¦Ç and its interpretations. for example  we can add unions and intersections of normative systems by requiring ¦²¦Ç to include symbols whenever it includes  and require interpretations to interpret  as set union and  as set intersection. as discussed above  we must then further restrict interpretations such that r    i ¦Ç1  ¡È i ¦Ç1   always is total. this would give us a kind of calculus of normative systems. let k be a kripke structure and i be an interpretation with the mentioned properties:

 all of which follow from proposition 1 . having such a calculus allows one to reason about the composition of normative systems.
relationship with deontic logic: the two main differences between the language of ntl and the language of conventional deontic logic  henceforth  deontic logic   are  first  contextual deontic operators allowing a formula to refer to several different normative systems  and  second  temporal operators. all deontic expressions in ntl refer to time:
   it is permissible in the context of ¦Ç that   is true at the next time point  ; o¦Ç     it is obligatory in the context of ¦Ç that   always will be true  ; etc. deontic logic contains no notion of time. in order to compare our temporal deontic statements with those of deontic logic we must take the temporal dimension to be implicit in the latter. two of the perhaps most natural ways of doing that is to take  obligatory   o   to mean  always obligatory   o¦Ç     or  obligatory at the next point in time   o   respectively  and similarly for permission. in either case  all the principles of standard deontic logic  sdl  hold also for ndl  viz. 
o   ¡ú ¦×  ¡ú  o  ¡ú o¦×   k ;  o¡Í  d ; and from   infer o   n . the two mentioned temporal interpretations of the  crucial  deontic axiom d are  both ntl validities :
 o¦Ç ¡Í and  o¦Ç ¡Í
with these translations  all of the most commonly discussed so-called paradoxes of deontic logic also holds in ntl. however  it has been argued  cf.  e.g.   meyer and wieringa  1   that one of the causes behind some of the instances of the paradoxes  particularly those involving contrary-to-duty obligations  is that the language of conventional deontic logic is too weak  and that by incorporating temporal operators some instances of the paradoxes can be avoided.
1 symbolic representations
in practice  explicit state representations of kripke structures are rarely if ever used when reasoning about systems  because of the state explosion problem: given a system with n boolean variables  the system will typically have 1n states. instead  practical reasoning tools provide succinct  symbolic representation languages for defining kripke structures. we present such a language for defining models  and also introduce an associated symbolic language for defining normative systems.
a symbolic language for models:	we present the sim-
ple reactive modules language  srml   a  stripped down version of alur and henzinger's reactive modules language  rml   alur and henzinger  1   which was introduced in  hoek et al.  1 . srml represents the core of rml  with some  syntactic sugar  removed to simplify the presentation and semantics. the basic idea is to present a kripke structure k by means of a number of symbolically represented agents  where the choices available to every agent are defined by a number of rules  defining which actions are available to the agent in every state; a transition  in k corresponds to a tuple of actions  one for each agent in the system. here is an example of an agent definition in srml  agents are referred to as  modules  in  s rml :
module toggle controls x
init  x := 
 x := ¡Í update
1 : x  x

 this module  named toggle  controls a single boolean variable  x. the choices available to the agent are defined by the init and update rules1. the init rules define the choices available to the agent with respect to the initialisation of its variables  while the update rules define the agent's choices subsequently. in this example  there are two init rules and two update rules. the init rules define two choices for the initialisation of variable x: assign it the value  or the value ¡Í. both of these rules can fire initially  as their conditions    are always satisfied; in fact  only one of the available rules will ever actually fire  corresponding to the  choice made  by the agent on that decision round. the effect of firing a rule is to execute the assignment statements on the r.h.s. of the rule  which modify the agent's controlled variables.  the  prime  notation for variables  e.g.  x  means  the value of x afterwards .  rules are identified by labels  ; these labels do not form part of the original rml language  and in fact play no part in the semantics of
srml - they are used to identify rules in normative systems  as we shall see below. we assume a distinguished label    for rules  which is used to identify rules that should never be made illegal by any normative system. with respect to update rules  the first rule says that if x has the value   then the correspondingaction is to assign it the value ¡Í  while the second rule says that if x has the value ¡Í  then it can subsequently be assigned the value . in sum  the module nondeterministically chooses a value for x initially  and then on subsequent rounds toggles this value. in this example  the init rules are non-deterministic  while the update rules are deterministic. an srml system  ¦Ñ  is a set of such modules  where the controlled variables of modules are mutually disjoint.
¡¡the kripke structure corresponding to srml system ¦Ñ is given as follows: the state set s¦Ñ and valuation function v¦Ñ corresponds to states  valuations of variables  that could be reached by ¦Ñ  with initial states s¦Ñ1 being states that could be generated by init rules; the transition relation r¦Ñ is defined by iff there exists a tuple of update rules  one for each module in the system  such that each rule is enabled in s and s is obtained from executing this collection of rules on s.
a symbolic language for normative systems: we now introduce the srml norm language  snl  for representing normative systems  which corresponds to the srml language for models. the general form of an snl normative system definition is:
normative-system id
¦Ö1 disablesk
¡¤¡¤¡¤
¦Öm disablesmk
 here  id ¡Ê ¦²¦Ç is the name of the normative system; these names will be used to refer to normative systems in formulae of ntl. the body of the normative system is defined by a set of constraint rules. a constraint rule
¦Ö disablesk
consists of a condition part ¦Ö  which is a propositional logic formula over the variables of the system  and a set of rule labels we require  is satisfied in a particular state  then any srml rule with a label that appears on the r.h.s. of the constraint rule will be illegal in that state  according to this normative system. an snl interpretation is then simply a set of snl normative systems  each with a distinct name.
¡¡given snl normative systems ¦Ç1 and ¦Ç1  for some srml system ¦Ñ  we say: ¦Ç1 is at least as liberal as ¦Ç1 in system ¦Ñ if for every state s ¡Ê s¦Ñ  every rule that is legal according to ¦Ç1 is legal according to ¦Ç1; and they are equivalent if for every state s ¡Ê s¦Ñ  the set of rules legal according to ¦Ç1 and ¦Ç1 are the same.
theorem 1 the problem of testing whether snl normative system ¦Ç1 is at least as liberal as snl normative system ¦Ç1 is pspace-complete  as is the problem of testing equivalence of such systems.
proof: we do the proof for checking equivalence; the liberality case is similar. for membership of pspace  consider the complement problem: guess a state s  check that s ¡Ê s¦Ñ 
 reachability of states in rml is in pspace  alur and henzinger     and check that there is some rule legal in s according to ¦Ç1 is not legal in s according to ¦Ç1  or vice versa. hence the complement problem is in npspace  and so the problem is in pspace. for pspace-hardness  we reduce the problem of propositional invariant checking over  s rml modules  alur and henzinger   . given an srml system ¦Ñ and propositional formula    define normative systems ¦Ç1 and ¦Ç1 as follows  where  does not occur in ¦Ñ :
normative-system ¦Ç1	normative-system ¦Ç1
	   disables 	¡Í disables 
according tois always enabled; thus ¦Ç1 will be equivalent to ¦Ç1 iff   holds across all reachable states of the system.

1 model checking
model checking is an important computational problem for any modal or temporal logic  clarke et al.  1 . we consider two versions of the model checking problem for ntl  depending on whether the model is presented explicitly or symbolically. for each of these cases  there are two further possibilities  depending on whether we are given an interpretation i for normative systems named in formulae or not. if we are given an interpretation for the normative systems named in the formula  then ntl model checking essentially amounts to a conventional verification problem: showing that  under the given interpretation  the model and associated normative systems have certain properties. however  the uninterpreted model checking problem corresponds to the synthesis of normative systems: we ask whether there exist normative systems that would have the desired properties.
explicit state model checking: the interpreted explicit state model checking problem for ntl is as follows.
given a kripke structure  interpretation i : ¦²¦Ç ¡ú n r  and formula   of ntl  is it the case that k |=i   
the ctl model checking problem is p-complete  schnoebelen  1 . the standard dynamicprogrammingalgorithmfor ctl model checking may be easily adapted for interpreted explicit state ntl model checking  and has the same worst case time complexity. more interesting is the case where we are not given an interpretation. the uninterpreted explicit state model checking problem for ntl is as follows.
given a kripke structureand formula   of ntl  does there exist an interpretation i : ¦²¦Ç ¡ú n r  such that k |=i   
theorem 1 the uninterpreted explicit state model checking problem for ntl is np-complete.
proof: for membership in np  simply guess an interpretation i and verify that k |=i  . since interpretations are polynomial in the size of the kripke structure and formula  guessing can be done in  nondeterministic  polynomial time  and checking is the interpreted explicit state model checking problem. hence the problem is in np. for np-hardness  we reduce sat. given sat instance   over variables x1 ... xk  for each variable xi  create two variables t xi  and f xi   and define a kripke structure with 1k + 1 states  as illustrated in figure 1; state s1 is the initial state  and state s1k is a final state. let    denote the ntl formula obtained from   by systematically replacing every variable xi with  p¦Ç t xi  . define the formula to be model checked as:
   ¡Ä v1¡Üi¡Ük p¦Ç  t xi  ¡Å f xi    ¡Ä
v1¡Üi¡Ük p¦Ç t xi  ¡ú  p¦Ç f xi   p¦Ç f xi  ¡ú  p¦Ç t xi  
this formula is satisfied in the structure by some interpretation iff   is satisfiable.	

figure 1: reduction for theorem 1.
symbolic model checking: as we noted above  explicit state model checking problems are perhaps of limited interest  since such representations are exponentially large in the number of propositional variables. thus we now consider the srml model checking problem for ntl. again  we have two versions  depending on whether we are given an interpretation or not.
theorem 1 the interpreted srml model checking problem for ntl is pspace-complete.
proof: pspace-hardness is by a reduction from the problem of propositional invariant verification for srml  alur and henzinger   1. given a propositional formula   and an  s rml system ¦Ñ  let i = {¦Ç }  and simply check whether
k¦Ñ |=i o¦Ç   . membership of pspace is by adapting the
ctl symbolic model checking algorithm of  cheng  1 . 
theorem 1 the uninterpreted srml model checking problem for ntl is exptime-hard.
proof: by reduction from the problem of determining whether a given player has a winning strategy in the two-player game peek-g1  stockmeyer and chandra  1  p.1 . an instance of peek-g1 is a quad where: x1 and x1 are disjoint  finite sets of boolean variables - variables x1 are under the control of agent 1  and x1 are under the control of agent 1; x1    x1¡Èx1  are the variables true in the initial state of the game; and   is a propositional formula over x1 ¡È x1  representing the winning condition. the agents take try to make   true  by taking it in turns to alter the value of at most one of their variables. the decision problem is to determine whether agent 1 has a winning strategy in a given game. the idea of the proof is to define an srml system that such that the runs of the system correspond to plays of the given game instance  and then to define an ntl formula to be model checked  which names a normative system ¦Ç  such that the transitions legal according to ¦Ç correspond to a winning strategy for player 1. the construction of the srml system follows that of the exptime-completeness proof of atl model checking in  hoek et al.  1   with the difference that player 1's update rules are given labels  so that they may be disabled . the formula to model check then defines three properties:  i  if it is agent 1's turn  then according to ¦Ç at most one of its possible moves is legal;  ii  all of agent 1's moves are legal according to ¦Ç  i.e  agent 1 must win against all of these ; and  iii  the legal paths according to ¦Ç must represent wins for agent 1. 
1 example: traffic norms
consider a circular road  with two parallel lanes. vehicles circulate on the two lanes clockwise. we consider two types of vehicles: cars  and ambulances. the road is discretised in a finite number of positions  each one represented as an instance of a proposition at lane-number lane-position vehicle-id . thus at 1 car1  means agent car1 is on lane 1 at position 1  lane 1 is the outer lane  lane 1 is the inner lane . we also refer to lane 1 as the left lane and to lane 1 as the right lane. at each time step  cars can either remain still or change their position by one unit  moving either straight or changing lane. ambulances can remain still or change their position by one or two units  either straight or changing lanes at will. we are interested in normative systems that prevent crashes  and that permit ambulances take priority over private cars. so consider the following normative systems:
  ¦Ç1: ambulances have priority over all other vehicles
 i.e.  cars stop to allow ambulances overtake them ;
  ¦Ç1: cars cannot use the rightmost  priority  lane;
  ¦Ç1: vehicles have  right  priority  i.e.  left lane has to give way to any car running in parallel on the right lane .
we modelled this scenario using an rml-based model checking system for atl  alur et al.  1 . each vehicle is modelled as a module containing the rules that determine their physically legal movements and global traffic control is modelled as a set of norms that constrain the application of certain rules. for example  here is the  somewhat simplified  definition of a car  we abuse notation to facilitate comprehension: for example addition and subtraction here are modulo-n operations  where n is the number of road positions  and the at ...  predicates are implemented as propositions :
module car-1 controls at l p car-1 
init
¡¡ // initialise ... update
car-1-straight:
at l p car-1  & not at l p+1 car-1   &
... & not at l p+1 vehicle-n   -  at l p+1 car-1 ' := t  at l p car-1 ' := f;
car-1-right:
at 1 p car-1  & not at 1 p+1 car-1   &
... & not at 1 p+1 vehicle-n   -  at 1 p+1 car-1 ' := t  at 1 p car-1 ' := f;
car-1-left: at 1 p car-1  & not at 1 p+1 car-1   &
... & not at 1 p+1 vehicle-n   -  at 1 p+1 car-1 ' := t  at 1 p car-1 ' := f;
car-1-still: t -  skip;
we can then define the norms described above using
snl;  again  we abuse notation somewhat in the interests of brevity; variables must be expanded out for each car and position  in the obvious way :
normative-system n1
at 1 p car-i  and at 1 p-1 amb-j  disables
¡¡car-i-straight  car-i-left  car-i-right; normative-system n1
at 1 p car-i  disables
car-i-straight  car-i-still;
at 1 p car-i  disables car-i-right;
normative-system n1
at 1 p car-i  and at 1 p car-j  disables car-i-straight  car-i-right;
¡¡using a model checker  we can then evaluate properties of the system; e.g.  if there is only one ambulance then we have o¦Ç1¡È¦Ç1¡È¦Ç1  crash.
1 conclusions & acknowledgments
several issues present themselves for future work: tight bounds for complexity of uninterpreted symbolic model checking  the complexity of satisfiability  and a full implementation of a model checker encompassing the variations discussed in section 1 are the most obvious.
¡¡we gratefully acknowledge support from the spanish research project web i -1  tic1-c1   the eu funded project openknowledge  fp1   and the uk epsrc project  virtual organisations for e-science .
