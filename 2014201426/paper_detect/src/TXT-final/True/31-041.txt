 
a decision method for reiter's default logic is developed. it can determine whether a default theory has an extension  whether a formula is in some extension of a default theory and whether a formula is in every extension of a default theory. the method handles full propositional default logic. it can be implemented to work in polynomial space and by using only a theorem prover for the underlying propositional logic as a subroutine. the method divides default reasoning into two major subtasks: the search task of examining every alternative for extensions  which is solved by backtracking search  and the classical reasoning task  which can be implemented by a theorem prover for the underlying classical logic. special emphasis is given to the search problem. the decision method employs a new compact representation of extensions which reduces the search space. efficient techniques for pruning the search space further are developed. 
1 	introduction 
in this paper we develop a theorem-proving method for default logic of reiter . default logic is one of the most well-known nonmonotonic logics  marek and truszczyriski  1 . there is a body of results indicating that default logic captures a large number of different forms of nonmonotonic reasoning. default logic is closely related to logic programs and deductive databases  gelfond and lifschitz  1 . connections have been established between default logic and autoepistemic logic and mcdermott and doyle style nonmonotonic modal logics  konolige  1; truszczyiiski  1   circumscription  etherington  1   diagnosis  reiter  1   and abductive reasoning  poole  1 . 
¡¡in default logic knowledge is represented by a default theory  which consists of ordinary first-order formulae and nonmonotonic inference rules  default rules. possible sets of conclusions from a default theory are defined in terms of extensions of the default theory. in this paper we consider three basic reasoning tasks: extension existence  whether a default theory has an extension   
1 	automated reasoning 
brave reasoning  whether a formula is in some extension 
of a default theory  and cautious reasoning  whether a formula belongs to every extension of a default theory . computational properties of nonmonotonic reasoning have received considerable attention. this research provides a valuable basis for developing nonmonotonic theorem-proving techniques. the complexity of propositional default reasoning has been located at the second level of the polynomial time hierarchy  garey and johnson  1 : extension existence and brave reasoning are ep/1-complete and cautious reasoning ilp/1-complete  gottlob  1 . this means that full propositional default logic can be implemented in polynomial space and that it is strictly harder than propositional reasoning unless the polynomial time hierarchy collapses. 
¡¡developing theorem-proving techniques for default logic and other nonmonotonic logics has turned out to be difficult. existing techniques are quite straightforward and little emphasis has been laid on efficiency considerations. for example  in recent approaches  junker and konolige  1; risch and schwind  1; baader and hollunder  1  to automating default logic exponential space is needed or the methods are based on solving subtasks that seem to be computationally harder than the original default reasoning task. 
¡¡we consider first approaches where a reasoning problem in default logic is reduced into another problem like a truth maintenance problem  junker and konolige  1  or a constraint satisfaction problem  ben-eliyahu and dechter  1 . a crucial feature of the reduction mappings is that classical deductions needed in default reasoning have to be encoded. this implies that reductions are computationally feasible only for very restricted subclasses of default logic. typically  the reductions lead to an exponential increase in the problem size because of the exponential number of deductions to be encoded. moreover  computing the reduction mapping appears to be harder than the original default reasoning problem. this is because even the problem of finding a single deduction   i.e.  a proof of a given formula from a set of formulae  is closely related to logic-based abduction  which is p/1-complete  eiter and gottlob  1 . for a more detailed discussion  see  niemela  1 . 
¡¡risch and schwind  propose a tableau-based method for finding extensions. also this approach suffers from the problem of exponential worst-case space complexity. baader and hollunder  present an approach to generate all extensions of a default theory by pruning defaults in a top-down way. when eliminating defaults  this method uses heavily a subroutine computing all maximal consistent subsets  i.e.  given sets e and h the subroutine is expected to find all maximal subsets h' of h such that e u h' is consistent. it seems that finding all such maximal subsets is computationally expensive and at least as hard as the decision problems in default logic. this is because  for example  finding a maximal subset not containing a given formula in is closely related to logic-based abduction. to see this consider a maximal subset h' c h for which e u h1 is consistent but ip € h - h''. hence  e u f u {ifi} is not consistent which implies that -  is a logical consequence of ell//1  i.e. h' is an abductive explanation of from the hypotheses h and the background theory e. 
¡¡in this paper we develop a decision method for default logic that handles important subclasses of default reasoning  i.e.  the full propositional case as well as closed default rules together with a decidable fragment of the underlying first-order logic  but does not suffer from the two problems:  i  exponential space requirements and  ii  the use of computationally too difficult subtasks as a part of the method. as a basis of the work we have taken a decision method for autoepistemic logic presented in  niemelsl  1  because this approach satisfies the two requirements. as autoepistemic logic and default logic are closely related  konolige  1; niemela  1   the approach is directly applicable to default logic. however  there seems to be some room for improvements. in this paper we take the basic ideas from |niemela  1  and apply them directly to default logic in order to fully exploit the special characteristics of default reasoning. 
¡¡the paper is organized as follows. section 1 introduces default logic and develops a concise representation of extensions. this representation is based on ideas from autoepistemic reasoning and it forms the basis for the decision method. section 1 develops a basic algorithm for default reasoning. it provides a framework for integrating optimization techniques. section 1 presents optimizations of the basic algorithm and section 1 contains the concluding remarks. 
1 	default logic 
we are going to use intuitions from autoepistemic reasoning and to facilitate this we employ somewhat nonstandard notations for default logic. first  we introduce a new operator nb  : nb 1  expresses that a formula  fi is  not believed   i.e.  j  does not belong to the extension in question. second  we write default rules using the new operator. a default rale is an expression of the form ai ... an nb 1i  ... nb 1m  *-  c  1  where a  ...  an  b  ...  1m  c are arbitrary  first-order  formulae. this is just an alternative notation for a default rule in the standard form 
ai a       a an : - 1i ...  - 1m c 
¡¡a default theory is a set of default rules of the form  1 . in reiter's  original presentation a default theory can contain ordinary first-order formulae in addition to default rules. here for uniformity the first-order formulae are represented as default rules  i.e.  a first-order formula  p is represented as a rule  -   / . 
¡¡a default rule of the form  1  can be thought of as representing an autoepistemic formula 
¡¡¡¡la  a       a lan a l- lbx a       a l- lbm -  c. under this translation  proposed by truszczyriski   an extension of a default theory is the l free part of an lhierarchic expansion of the translated theory  niemela  1  or the l free part of a consistent  -expansion of the translated theory for a range of nonmonotonic modal logics s  truszczynski  1 . hence default rules of the form  1  provide an interesting  standard  form of autoepistemic formulae. 
¡¡next we give the definition of an extension of a default theory. technically our definition is somewhat different from that given by reiter  but it leads to the same class of extensions. the definition is given by using the notions of a deductive closure and nb-formuiae. 
¡¡we call nb-formulae expressions of the form nb  /   where 1 is a formula. for a set of formulae 1  nb 1  = {nb 1   | 1  g s}. by s+  1   we denote set of formulae  nb-formulae  in s. for example  if s {a nb 1  nb c }  s+ = {a} and s' - {nb 1  nb c }. 
¡¡we denote by dcl e  l  the deductive closure of a set of rules e of the form  1  and a set of formulae and nbformulae l. dcl e l  is the smallest set of formulae which contains l  and which is closed under e' and 
first-order derivations where 
e' = {ai ... an  - c | ai ...  an nb 1i  ...  nb 1m   -  c € e and for allz = 1 ...  m nb &i  ¡ê l~~}.  1  
for example  let e - {nb p   -  q; -i-ig c-  - - r} and 
l =  p nb p }. then e' - { -+ q; -i-ng t-* - - r} and 
dcl e l  - th {p g - -ir}  where th s'  denotes the set of the first-order consequences of a set of formulae s. 
this means that  e.g.  r g dcl e  {p  nb p } . 
¡¡notice that the deductive closure is a monotonic operator also with respect to the premises l: if l c u  then dcl e l cdcl e l' . 
¡¡for a set of rules e  a set of formulae a is called an extension of e iff a - dcl e nb a   where a is the 
complement of a  i.e.  the formulae not in a. 
¡¡we develop a compact characterizing condition for extensions. the formulae that occur inside the nb   operator play a crucial role. for a set of rules e  we denote by nant e  the negative antecedents in e  i.e.  the set of formulae b such that nb 1  appears in e. for example  nant {nb p   -+ q;  q  -  -  r}  = {p}. the following proposition makes the role of nant e  evident. it is based on the observation that for the deductive closure of a set of rules only the nb-formulae appearing in the rules are of importance  i.e.  dcl e nb a   = dcl e nb nant e -a  . 
proposition 1 for a set of rules e  a set of formulae a i'1 an extension o/s t/fa = dcl e nb nant e -a  . 
	niemela 	1 
the situation is similar to that in autoepistemic logic where a stable expansion is uniquely determined by the modal subformulae in the premises  niemela  1   for characterizing extensions  we are able to use ideas from the full set based characterization of stable expansions  niemela  1 . the novelty here is that we exploit the strong groundedness of extensions which implies that ordinary formulae appearing as antecedents of rules  prerequisites  do not play a role in determining extensions and only nb-formulae  justifications  are essential. 
¡¡our aim is to provide a compact characterizing set for each extension. the characterizing sets are called full sets and they are sets of nb-formulae built from formulae in nant 
definition 1 for a set of rules 	a set 	of nb-
formulae is called -full iff the following condition holds for all 
	for example  let 	= {nb{p  	p . 
then  nb p } is   full  because {nb p }  and but  e.g.    is not -full  as p e . it turns out that for every full set there is an extension and for each extension a corresponding full set. 
theorem 1 let 	be a set of rules. 
¡¡ i  if a set 	is an extension of . 
¡¡ ii  if there is an extension of   then - nb is a-full set such that- 
¡¡theorem 1 suggests the following straightforward method for finding all extensions. for each subset s of j  test whether nb 1  is . if a full set a is found  is an extension of by theorem 1 
 i  and by theorem 1  ii  for each extension ' there is a corresponding full set a such that 	a . 
example 1 the straightforward method is not very practical. if there are n nb-formulae in  fullness tests are needed although there can be a single extension which is easily constructible as the following set of rules shows. 
full set neither can nb a-1  and so on. 	¡ö 
1 	automated reasoning 
1 	the basic algorithm 
in this section we develop a basic algorithm for solving default reasoning problems. the basic algorithm serves as a framework for developing further optimization methods  which are discussed in the next section. the algorithm is based on ideas introduced in  niemela  
1  in the context of autoepistemic reasoning. the algorithm presented in figure 1 is given as a function extensionsdl that is the skeleton for the decision procedures for brave and cautious reasoning as well as for checking the existence of extensions. 
¡¡when describing the algorithm we use the following three concepts. 
¡¡ i  a set of formulae and nb-formulae a is grounded in a set of rules for example  and {b  nb a } are grounded in 
is not. 
¡¡ ii  we say that a set of formulae s agrees with a set of formulae and nb-formulae a if for all formulae   nellset e s and for all . for example  the set {a  b  agrees with but not with 
¡¡ iii  a set of formulae and nb-formulae a covers a formula 1 if either for example  the set {nb a   b  covers a. a set of formulae s is covered by a if each formula in s is covered by a. 
¡¡the function extensionsdl takes as input a set of rules sets b and f which determine the common part of the extensions to be considered and a formula   which is just passed as an argument to the function test. the aim of extensionsdl is to return true iff there is an extension of agreeing with buf such that test returns true. this is accomplished by constructing sets agreeing with b u f until a full set a is found such that for the corresponding extension =   returns true. 
¡¡we represent a partially constructed full set using the set b that contains nb-formulae and ordinary formulae. the nb-formulae b~ are the formulae included in the partially constructed full set. an ordinary formula x in b indicates that the corresponding nb-formula nb x  cannot be included in the full set. the idea is to expand b until it forms a full set. the number of possibilities can be reduced by observing that if a formula is grounded in the rules given the partially constructed full set cannot be included in 
the full set and x is added to b. the set f contains formulae  for which nb x  is excluded from the full set to be constructed  and x should be included in b   but which are  frozen :  is added to b only when the 
groundedness condition is satisfied  i.e.  
the function extensionsdl uses three functions 
  expand  for expanding b  
  conflict  for detecting conflicts   and 
  test  for testing extensions . 
by changing the function test the various decision procedures are obtained. for the first two functions we present minimal requirements  e1-e1  c1-c1  that the implementations of these functions have to satisfy in order to guarantee the soundness and completeness of the decision procedures. these two functions form the crucial 



1 	optimizations 
the basic algorithm divides default reasoning into two major subtasks. one is the search problem of examining all the alternatives for full sets. this is implemented using  chronological  backtracking and in the worst case the algorithm can search through alternatives where n is the number of different nb-formulae in the premises. the other is the classical reasoning problem of deciding whether a formula  is in the deductive closure of a set of rules given some formulae  and nb-formulae  
1 	automated reasoning 
expanding b 
the function expand extends the current common part b of the full sets to be constructed. the more formulae are added  the fewer choice points for backtracking are left; every new formula included to b cuts the remaining search space by half. 
¡¡although the implementation e-io can reduce the search dramatically like in the case of example 1  its basic weakness is that it cannot detect when a formula cannot be in an extension. an optimized version of the implementation should be able to detect simple case like 


	niemela 	1 

expand and conflict the search space is often kept relatively small and we have been able to handle default theories with a few hundred default rules. 
¡¡the method developed in this paper is closely related to that presented in  niemela  1  for autoepistemic reasoning. the key difference is that the novel method uses the new compact characterization of extensions which leads to a smaller initial search space. we exploit the strong groundedness of default extensions which implies that extensions are determined by the justifications of the default rules  while in the earlier approach  niemela  1  both prerequisites and justifications of the default rules are employed in the characterization. optimization techniques that prune the search space are discussed already in  niemela  1 . the technique of expanding the set b  e-il  is proposed in  niemela  1  but the conflict detection method  c-il  is novel. 
¡¡there are interesting areas for further research. the decision method in this paper uses heavily classical reasoning for pruning the search space. this implies that the development of efficient theorem-proving techniques for implementing the needed classical reasoning in a goaldirected way is important. the potential search space is very large and further work is needed for developing new pruning techniques. the basic algorithm with the requirements for the functions expand and conflict offers a framework for developing these kinds of optimizations. the decision method can be used in a goal-directed manner by initializing the sets b and f accordingly. for example  if we are interested in extensions containing p but not q  we can start the method with b = {nb q } and f - {p}. an interesting topic for further research is to develop goal-directed techniques where a default reasoning task is analyzed and divided to appropriate subtasks. in the method there is a heuristic choice when a new formula x € nant e  not covered by b u f is selected. a further area of study is the development of efficient search heuristics. 
