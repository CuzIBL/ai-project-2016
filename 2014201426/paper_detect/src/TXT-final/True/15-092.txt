 
the knowledge representation used in uc provides a flexible framework suitable for a large variety of natural language processing tasks including parsing  inference  planning  goal analysis  and generation. although many of the knowledge structures are specific to the unix consultant domain  a common design goal is the use of associative processing. by providing direct links between related knowledge structures  inference and other processing can be done very efficiently. access to representations in uc is by hash indexing which simulates a real associative memory. 
1. introduction 
uc  the unix* consultant  is a natural language program that converses in english with users in the domain of the unix operating system. uc provides information on usage of system utilities  unix terminology  and plans for accomplishing specific tasks in the unix 
environment  all upon direct query by the user. in order to accomplish these tasks  uc must perforce have a considerable knowledge base  a large part of which is particular to the unix domain. the specific representations used in this knowledge base are essential to the successful operation of uc. not only are the knowledge structures used in parsing  inference  planning  goal detection  and generation  but also the format of representation must permit the high efficiency in access and processing of the knowledge that is required in an interactive system like uc. this paper describes the details of this representation scheme and how it manages to satisfy these goals 
of usability and efficiency. an overview of the uc system can be found in wilensky  1 . for an introduction to the knowledge structures in uc  see chin  1 . in contrast  a totally different approach to the same problem domain is described in douglass and hegner  1 . 
s. the representation 
uc uses a framelike representation where some of the contents are based on schank's conceptual dependencies. the knowledge structures are stored in pearl databases  pearl is an al package developed at berkeley that provides efficient access to lisp representations through hashing mechanisms  c.f. deering  et. al.  1 and 1 . since the knowledge to be represented is highly domain dependent  it is instructive to look at the range of queries that may be encountered by a unix consultant. the following dialogue is taken from actual uc sessions: 
user: how can i delete a directory  
uc: to delete a directory with name directory name  type ' rm directoryname '. 
f this research was sponsored it part by the office of naval raearck under contract n1m-1o-c-1 aad the national science foundations under fraat 1st-1 
  unix is trademark of bell laboratories user: what is a directory  
uc: 	a directory is kind of file which is used to hold a set of files. 
user: why can't i remove the directory tmp  
uc: 	the directory tmp must be empty before the directory can be deleted. 
the first two queries are representative of direct requests for information from uc and differ only in the type of information and the method of processing. the first asks for the name and usage of a unix utility. in general  with queries of the first type  the user states the goals or results  hat are desired or the actions to be performed and then asks uc for a plan to achieve those goals or perform those actions in unix. to process such  how  questions  uc encodes in its data base a large number of plans or equivalently the knowledge necessary to generate those plans as needed. the serond query is an information request for the definition of certain unix or general operating systems terminology. although such requests can be bandied easily by canned textual responses  it is much harder to encode the knowledge in a format useful for generation. 
in the third query  the user describes a situation where his expectations have failed to be substantiated and asks uc to explain why. in general  the user simply presents a problem and asks for the solution. uc may have to infer the goals of the user and from that which plan the user likely had bern using. once the plan is known  then uc must check for the proper execution of the plan  looking for misplaced steps or violated preconditions to the plan. 
s. an analysis 
to see how the knowledge structures are actually used  it is instructive to follow the processing of queries in some detail. the english input is first parsed from left to right by the phran parser  wilensky and arena  1a and b  into internal representations. for instance  the query of example three is parsed in sections. the clause   delete the directory tmp  is represented as a causation frame where the user  actually a frame which is not shown  does something to cause the directory  another frame not shown  to no longer exist. 
 causation  antecedent  do  actor *user*    
 consequent  state-change  actor directory 1  
 state-name physical-state  
 from existing  
 to non-existing     
the final form of the representation of query three is a question frame with the single slot  cd  which is filled by a causation frame. the causation represents  why   with antecedent 'unknown*  the user is unable to perform the action  actl  which is the causation frame for deleting shown above. 
 question  cd  causation  antecedent 'unknown*  
 consequent  able  actor *user*  
 value unable  
 perform actl       
once the input is parsed  uc which is a data driven program looks in its data base to find out what to do with the representation of the input. an assertion frame would normally result in additions to the database and an imperative might result in actions  depending on the goal analysis . in this case  when uc sees a question about why someone is unable to do something  it interprets this as a statement that the user failed to perform the action  and that it should check the preconditions for the plan for that action. this knowledge is all encoded associatively in a memory-association frame where the recall-key is the associative component and the cluster slot contains a set of structures which are associated with the structure in the recall-key slot. 
 memory-association 
 recall-key  question 
 cd  causation 
 antecedent 'unknown*  
 consequent  able  actor 'person  
 value unable  
 perform tact        
 cluster   fail  cd tact   
 goal  planner  person  
 objective  states   
 assertion  cd  planfor  result  states  
 method  plan     
 check-preconds  cd  plan      
the above memory-association circumvents the need to infer that the user failed  to delete the directory  that the user has a goal and there is a plan carrying out the objectives of that goal. in uc  knowledge about plans is encoded in a large number of planfor frames which are used almost directly to handle informational queries about unix commands. in this example the usage of the plan is less direct since uc must check the preconditions for that plan. this intention is stored in the check-preconds frame. 
the plan itself was actually activated earlier when  deleting the directory tmp  was parsed and a memory-association reminded uc of the following planfor deleting the directory  tmp  which was instantiated by unification with the patterns in the general planfor deleting directories: 
 planfor  result  state-change  actor directory1  
 state-name physical-state  
 from existing  
　　　　　　　　　　 to non-existing     method  mtrans  actor *user*  
 object  command  name rmdir  
 args  tmp   
 input *stdin*  
 output *stdout*  
 diagnostic *stdout*    
 from *user*  
 to *unix*     
when uc processes the check-preconds  it looks for a preconds frame for the given plan and checks the preconditions listed therein: 
 preconds  plan  mtrans  actor tuser  
 object  command  name rmdir  
 args   directoryname   
 input *stdin*  
 output *stdout*  
 diagnostic *stdout*    
 from  user  
 to *unix*    
 are   state  actor  all  var  file  
 desc  file   
 pred  inside-of 
 object 'directory      
 state-name physical-state  
 value non-existing   
	  	          
	d. chin 	1 
one precondition in this case is that the directory must be empty before it can be deleted. upon querying unix directly  uc determines that this precondition is not satisfied  so it generates a message using the phred generator  jacobs  1  to inform the user of this fact. of course if this precondition was not the problem  uc would continue to check the rest. also in multi-step plans  uc would make sure that the steps were carried out in the proper order. 
the informational query of  how can i delete a directory  is handled in an even more straight forward way. it is first parsed into a question frame: 
 question 
 cd  planfor  result  state-change  actor directory1  
 state-name physical-1tate  
 from existing  
 to non-existing    
 method 'unknown*     
then the following memory-association directs uc to look for an out-planfor frame whenever a question about how to do something  expressed as a planfor with an unknown method  is encountered: 
 memory-association 
 recall-key  question  cd  planfor  result tconc  
　　　　　　　　　　　　　　　　 method *unknown*       cluster   out-planfor  query tconc  
 plan  *any*      
the meaning of an out-planfor is that an answer to the query in the query slot is to simply execute the plan in the plan slot. theoretically outrplanfors represent compiled answers to queries which the expert consultant has encountered so often that an immediate solution is already available. 
 out-planfor  query  state-change  actor  directory  
 state-name physical-state  
 from existing  
 to non-existing    
 plan  output  cd  planforlo      
in this case  the plan in the out-planfor is an output frame  the contents of which are passed to the generator. planforlo in the output frame is the general version of the planfor shown in the previous discussion. in more complex queries where uc does not have an outplanfor compiled away  the problem of creating a plan to handle that particular situation is done by the planning component of uc  pandora  faletti  1 . 
the processing of queries about terminology requires a somewhat different approach. definitions are actually generated from basic knowledge. for example  the definition of a directory uses the fact that a directory is a kind of file in the type hierarchy of frames in uc. also  used is the fact that a directory is a kind of functionalobject all of which have function*. the function of directories is to hold files. although it would be possible for a consultant like uc to have definitions  compiled  away in its memory  it was felt that requests for definitions are so rare that this was unlikely  so uc generates all definitions from scratch. 
1. associative processing for efficiency 
a common theme in the knowledge representation of uc is the use of associative processing to achieve efficiency. instead of potentially exponential cost inference engines  the knowledge structures in uc are designed to provide direct associations among relevant knowledge. for example  planfors provide immediate links between plans and their effects  out-planfors connect common queries to their generator ready outputs  and memory-associations provide a general mechanism for associative links of almost any kind. 
1 	d. chin 
although computational methods of inference are undoubted still needed and desired  the premise taken in uc is that most common everyday inferences made by humans are not computational but rather fall out of the structure of memory. this can be modeled in ai programs like uc through appropriate design of knowledge representations. 
lacking true associative memory  uc uses the hash indexing provided in pearl databases to simulate associative access. frames stored in pearl databases are indexed by combinations of the frame type and/or the contents of selected slots. for instance  the planter of the example is indexed using a hash key based on the state-change in the planter's result slot. it is stored by the fact that it is a planter for the state-change of a directory's physical-state. this degree of detail in the indexing scheme allows this planter to be immediately recovered whenever a reference is made to deleting a directory. 
similarly  a memory-association is indexed by the filler of the recallkey slot  an out-plan for is indexed using the contents of the query slot of the out-planter  and a preconds is indexed by the plan in the plan slot of the preconds. indeed all knowledge structures in uc have associated with them one or more indexing schemes which specify how to generate hashing keys for storage of the knowledge structure in the uc databases. these indexing methods are specified at the time that the knowledge structures are defined. thus although care must be taken to choose good indexing schemes when defining the structure of a frame  the indexing scheme is used automatically whenever another instance of the frame is added to the uc databases. also  even though the indexing schemes for large structures like planters involve many levels of embedded slots and frames  simpler knowledge structures usually have simpler indexing schemes. for example  the representation for users in uc are stored in two ways: by the fact that they are users and have a specific account name  and by the fact that they are users and have some given real name. thus although extra work must be done to work out usable and efficient hash indexing schemes for structures  the gain in processing efficiency is well worthwhile. 
1. technical data 
uc is a working system which is still under development. in size  
uc is currently two and a half megabytes of which half a megabyte is franz lisp. since the knowledge base is still growing  it is uncertain how much of an impact even more knowledge will have on the system especially when the program becomes too large to fit in main memory. in efficiency  queries to uc take between two and seven seconds of cpu time on a vax 1. currently  all the knowledge in uc is hand coded  however efforts are under way to automate the process. 
1. acknowledgments 
some of the knowledge structures used in uc are refinements of formats developed by joe faletti and peter norvig. yigal arens is responsible for the underlying memory structure used in uc  arens  1  and of course  this project would not be possible without the guidance and advice of robert wilensky. 
1. 