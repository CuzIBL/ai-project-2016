 
we have created ladder  the first language to describe how sketched diagrams in a domain are drawn  displayed  and edited. the difficulty in creating such a language is choosing a set of predefined entities that is broad enough to support a wide range of domains  while remaining narrow enough to be comprehensible. the language consists of predefined shapes  constraints  editing behaviors  and display methods  as well as a syntax for specifying a domain description sketch grammar and extending the language  ensuring that shapes and shape groups from many domains can be described. the language allows shapes to be built hierarchically  e.g.  an arrow is built out of three lines   and includes the concept of  abstract shapes   analogous to abstract classes in an object oriented language. shape groups describe how multiple domain shapes interact and can provide the sketch recognition system with information to be used in top-down recognition. shape groups can also be used to describe  chain-reaction  editing commands that effect multiple shapes at once. to test that recognition is feasible using this language  we have built a simple domain-independent sketch recognition system that parses the domain descriptions and generates the code necessary to recognize the shapes. 
1 	introduction 
to date  sketch recognition systems have been domainspecific  with the recognition details of the domain hardcoded into the system. developing such a sketch interface is a substantial effort. we propose instead that recognition be performed by a single domain-independent recognition system that uses a domain specific sketch grammar  an approach used with some success in speech recognition  zue et al  1; hunt and mcglashan  1  . programmers could then create new sketch interfaces simply by writing a sketch grammar describing the domain-specific information. 
　we have created ladder  a sketch description language that can be used to describe how shapes and shape groups are drawn  edited  and displayed. these descriptions primarily concern shape  but may include other information helpful to the recognition process  such as stroke order or stroke direction. the specification of editing behavior allows the system to determine when a pen gesture is intended to indicate editing rather than a stroke. display information indicates what to display after strokes are recognized. 
　the language consists of predefined shapes  constraints  editing behaviors  and display methods  as well as a syntax for specifying a domain description and extending the language. the difficulty in creating such a language is ensuring that domain descriptions are easy to specify  and that the descriptions provide enough detail for accurate sketch recognition. to simplify the task of creating a domain description  shapes can be built hierarchically  reusing lowlevel shapes. shapes can extend abstract shapes  which describe shared shape properties  preventing the application designer from having to redefine these properties several times. the language has proven powerful enough to describe shapes from several domains. the language enables more accurate sketch recognition by supporting both top-down and bottomup recognition. descriptions of how shapes may combine can aid in top-down recognition and can be used to describe  chain-reaction  editing commands. 
　our contribution is in creating ladder  the first sketching language to incorporate editing  display  and shape group information. to test our language  we have built a simple domain-independent sketch recognition system that parses the domain description and successfully recognizes shapes based on these descriptions. 
　section 1 describes the components of the language  including the predefined shapes  constraints  editing behaviors  and display methods available. section 1 describes the syntax and content of a sketch grammar designed in the language. section 1 describes a system we have implemented to test the language and ensure that shapes in a domain can be recognized based on their descriptions. section 1 describes related work done in the development in sketch languages. 
1 	language contents 
the language consists of predefined shapes  constraints  editing behaviors  and display methods. figure 1 shows an example description for openarrow drawn in  figure 1 . the description of a shape contains a list of components  the elements from which the shape is built   geometric constraints on those components  a set of aliases  names that can be used 

describing editing gestures permits the recognition system to discriminate between sketching  pen gestures intended to 

1 	predefined shapes 
the language includes a number of predefined primitive and non-primitive shapes  usable as building blocks in describing other shapes. the primitive shapes are shape  point  path  line  beziercurve  and spiral. circle  arc  and ellipse are examples of non-primitive shapes included in the language library; all three are more specific versions of the primitive shape spiral. the openarrow in figure 1 is a non-primitive shape built out of three primitive shapes. 
　the language uses an inheritance hierarchy; shape is an abstract shape which all other shapes extend. shape provides a number of components and properties for all shapes  including boundingbox  centerpoint  width  and height. each predefined shape may have additional components and properties; a line  for example  also has pl. p1  the endpoints   midpoint  length  angle  and slope. components and properties for a shape can be used hierarchically in shape descriptions. when defining a new shape the components and properties are those defined by shape  and those defined by the components and aliases section. 
leave a trail of ink  and editing gestures  pen gestures intended to change existing ink   and permits us to describe the desired behavior in response to a gesture. 
　in order to encourage interface consistency  the language includes a number of predefined editing behaviors described using the actions and triggers above. one such example is draglnside  defines that if you click-hold-drag the pen starting inside of the bounding box of a shape  the entire shape automatically moves with it. 
　when defining a new editing behavior particular to a domain  there are two things to specify: the trigger - what signals an editing command- and the action - what should happen when the trigger occurs. the language has a number of predefined triggers and actions to aid in describing editing behaviors. 
1 	knowledge representation 　for instance  in figure 1  the openarrow contains three editing behaviors. the first editing behavior says that if you click and hold the pen over the shaft of the openarrow  when you drag the pen  the entire openarrow will translate along with the movement of the arrow. the second editing behavior states that if you click and hold the pen over the head of the arrow  the head of the arrow will follow the motion of the pen  but the tail of the arrow will remain fixed and the entire openarrow will stretch like a rubber band  translating  scaling  and rotating  to satisfy these two constraints and keep the openarrow as one whole shape. all of the editing behaviors also change the pen's cursor as displayed to the sketcher  and display moving handles to the sketcher to let the sketcher know that she performing an editing command. 
　the possible editing actions include wait  select  deselect  color  delete  translate  rotate  scale  resize  rubber-band  show-handle  and set-cursor. to give an example: 
 rubber-band shape-or-selection fixed-point move-point 
 new-point   translates  scales  and rotates the shape-or-selection so that the fixed-point remains in the same spot  but that the move-point translates to the new-point. if new-point is not specified  move-point translates according to the movement of the pen. 
　the possible triggers include: click  double-click  clickhold  click-hold-drag  draw  draw-over  scribble-over  and encircle. possible triggers also include any action listed above  to allow for  chain-reaction  editing. 
　shape groups allow designers to define  chain-reaction  editing behaviors. for instance  the designer may want to specify that when we move a rectangle  if there is an arrow head inside of this rectangle  the arrow should move with the rectangle. 
1 	predefined display methods 
an important part of a sketching interface is controlling what the user sees after shapes are recognized. the designer can specify that the original strokes should remain  or instead that a cleaned version of the strokes should be displayed. in the cleaned version  the original strokes are fit to straight lines  clean curves  clean arcs  or a combination. 
another option is to display the ideal version of the strokes. 
in this case  lines that are supposed to connect at their end points actually connect and lines that are supposed to be parallel are actually shown as parallel. in the ideal version of the strokes  all of the noise from sketching is removed. 
　it may be that we don't want to show any version of the strokes at all  but some other picture. in this case  we can either place an image at a specified location  size  and rotation  or we can create a picture built out of predefined shapes  such as circles  lines  and rectangles. 
　the pre-defined display methods include: original-strokes  cleaned-strokes  ideal-strokes  circle  line  point  rectangle  text  color  and image. each method includes color as an optional argument. 
1 	specifying a domain description 
a domain description contains a list of the domain shapes and shape groups  as well as definitions for each of them. descriptions can be hierarchical and can refer to other shapes in the language. this section provides examples from the domain description sketch grammar of uml  unified modelling language  class diagrams  booch et al  1 . 
1 indicating domain definitions 
the compiler uses a list of domain shapes and shape groups to confirm that each shape is properly defined and to speed recognition by creating recognizers only for sub-shapes needed by the domain. 
1 	defining shapes 
a domain shape is a shape that is meaningful in the domain. geometric shapes usually occur in several domains and are the building blocks of the domain shapes. for instance  in the domain of uml class diagrams  the domain shapes  followed by their geometric shape component  are: general classes  represented by rectangles   interface classes  circles   interface associations  lines   dependency associations  openheaded arrows   aggregation associations  diamond-headed arrows   inheritance associations  triangle-headed arrows   information associations  dotted lines or dotted open arrows . 
　a shape definition includes primarily geometric information  but can include other drawing information that may be helpful to the recognition process  such as stroke order or stroke direction. a shape definition is composed of seven sections. all sections are optional except the components section. 
1. the description contains a textual description of the shape  e.g.   an arrow with a triangle-shaped head   
1. the is-a section specifies any class of abstract shapes  section 1  that the shape may be a part of. this is similar to the extends property in java. all shapes extend the abstract shape shape. 
1. the components section lists the components of the shape. for example  the trianglearrow in figure 1 is built out of the openarrow from figure 1 and a line. components can be accessed hierarchically. 
1. the constraints section specifics relationships between the components. for example  in the trianglearrow in figure 1   coincident head1.pl headl.pl  specifies that an endpoint of head1 and an endpoint of head i are located at the same point. 
the constraints section can specify both hard constraints  such as the one listed above  and soft constraints  which are specified by the keyword soft. hard constraints are always satisfied in the shape  but soft constraints may not be. soft constraints can aid recognition by specifying relationships that usually occur. for instance  in figure 1 the shaft of the arrow is commonly drawn before the head of the arrow  but the arrow should still be recognized even if this constraint is not satisfied. 
1. the aliases section allows us to compute certain properties and name them for use later. for instance  in figure 1  headl is defined and used in a constraint for simplicity. components specified in the aliases section can be accessed hierarchically. for instance  trianglearrow uses head and tail from the openarrow in figure 1. 
1. an editing section specifies how the shape can be edited. common editing commands involve movement 

and deletion of the shape. each editing behavior must specify a trigger and an action listed in section 1. shapes can be defined to be moved as a whole rather than having to move individual lines. for instance  in figure 1  one editing behavior for the trianglearrow indicates that if the user presses and holds the pen on the shaft for a brief period  the pen will drag the entire trianglearrow when moved. 
1. a display section specifies what should be displayed on the screen when the shape is recognized. this section is generally included only for domain shapes  not for geometric shapes. in the umlinheritanceassociation in figure 1  the arrow will be displayed using straight lines for the arrow head and the original stroke for the shaft. 
 define shape trianglearrow 
	 description 	 an arrow with a triangle-shaped head   
 components 
 openarrow oa  
 line head1   
 aliases 
 line shaft oa.shaft   line headl oa.headl  
 line head1 oa.head1   point head oa.head  
 point t a i l o a . t a i l     
 constraints 
 coincident head1.pl headl.p1   coincident head1.p1 head1.p1   soft draw-order shaft headl  
 soft draw-order shaft head1   
 editing 
	  	 trigger 	  c l i c k h o l d d r a g shaft   
 action 
 translate this  
 set-cursor drag  
 show-handle move t a i l head   ...   
figure 1: the description for an arrow with a triangle-shaped head. 
 define shape umlinheritanceassociation 
 is-a umlgeneralassociation  
 components 
 trianglearrow arrow   
 aliases 
 point head arrow.head  
 point t a i l arrow.tail  
 line shaft arrow.shaft   
 display 
	 original strokes 	arrow.shaft  
 cleanedstrokes arrow.headl arrow.head1 arrow.head1   
figure 1: the domain shape uml inheritance association is defined by the geometrical shape trianglearrow from figure 1. 
1 	defining abstract shapes 
in the umlinheritanceassociation defined in figure 1  the is-a section specifics that the umlinheritanceassociation is an extension of the abstract shape umlgeneralassociation. abstract shapes have no concrete shape associated with them; they represent a class of shapes that have similar attributes or editing behaviors. these attributes can be defined once in the abstract shape description rather than for each domain shape. for instance  in figure 1 and figure 1  notice that the openarrow and the trianglearrow have identical editing behaviors defined. rather than repeatedly listing these editing behaviors in each shape  we could create an abstract shape which specifies these editing behaviors. 
　an abstract shape is defined similarly to a regular shape  except it has a required section instead of a components section. each shape that extends the abstract shape must define each variable listed in the required section  in its components or aliases section. 
　figure 1 presents a diagram of the inheritance hierarchy for the abstract and non-abstract shapes in the uml class diagrams domain. in uml  umldependency association  the umlinheritanceassociation  the umlaggregationassociation  the umlinformationassociation  and the interfaceassociation are all links represented by arrows or lines and all have the same editing behavior. thus  we can create the abstract shape umlassociation  which lists the editing behavior of these shapes. figure 1 shows the abstract shape description of the umlassociation. notice that the required variables are used when defining editing behaviors. 
 define abstract-shape umlassociation 
 is-a shape  
 required 
 point head  
	 point 	t a i l   
 line shaft   
 editing 
	  	 trigger   c l i c k h o l d d r a g shaft   
 action 
	 translate 	this  
 set-cursor drag  
 show-handle move t a i l head   ...   
figure 1: the description for the abstract class umlassociation. 
1 	defining shape groups 
a shape group is a collection of domain shapes that are commonly found together in the domain. defining shape groups provides two significant benefits. shape groups can be used by the recognition system to provide top-down recognition  and  chain-reaction  editing behaviors can be applied to shape groups  allowing the movement of one shape to cause the movement of another. 
　in the domain of uml class diagrams  there are six legal shape groups that describe the visual relationship between uml associations and uml classes. for example  one shape group consists of an association combined with a general class  such that the tail of the association is inside or near the general class shown in figure 1 and described in figure 1. a shape group definition is similar to that of a shape definition. 

	i 	 	-	* 
figure 1: an association attached to a class at its tail. 
　if a single shape in a sketch can be part of many instances of a shape group  then we place the key word multiple before the component shape of the shape group. in uml class diagrams  for example  a single umlassociation can be part of only one instance of a shape group  while a single umlclass can be part of many instances of umlgenciassgen association tail. 

1 	knowledge representation 

figure 1: the inheritance diagram of uml class diagram shapes. 

 define shape-group 
umlgenclassgenassociationtail 
 description  a general class attached to the t a i l of a general association   
	 is-a 	umlassociationattachedtail  
 components 
	 multiple 	 generalclass ct   
 generalassociation r    
figure 1: description of the shape group from figure 1. 
1 	defining abstract shape groups 
abstract shape groups definitions allow the reuse of shared properties across multiple shape groups. the definition of a umlassociationattachedtail in figure 1 indicates that the tail  but not the head  of the association is inside the class  preventing us from having to redefine the constraints many times  and allows us to define one general editing behavior for many shapes. an editing behavior for the umlassociationattachedtail indicates that whenever you move a umlclass that is attached to the tail of a umlassociation  the head of the umlassociation remains fixed in its original location  but the tail of the umlassociation remains attached to the umlciass as it moves; the umlassociation acts like a rubber band  translating  scaling  and rotating  to satisfy these constraints. 
 define abstract-shape-group 
umlassociationattachedtail 
 required 
 association r  
 class ct   
 constraints 
	 contains ct 	r . t a i l   
 iconlains ct r.head   
 editing 
	 trigger 	 translate ct   
	 action 	 rubber-band r r.head r . t a i l         
figure 1: definition for an abstract shape group. 
1 	defining constraints 
we believe the language contains sufficient constraints to define a broad range of domains. when an additional constraint is needed  it can be defined using a macro facility. the sections of a sketch-constraint definition include description  components  and constraints. 
1 testing 
1 	examples of shapes described in the language 
we have evaluated the language by showing that it can describe a wide variety of symbols from a number of different domains. we have used it to describe over a hundred shapes 
 define constraint centered-in 
 description  tests if shapel is centered inside shape1   
 components 
 shape si  
 shape s1   
 constraints 
 contains s1 si  
 coincident s1.center s1.center    
figure 1: definition for the constraint centered-in. 
from the domains of uml class diagrams  mechanical engineering diagrams  course of action diagrams  and letters of the alphabet. illustrative examples are given below. 
polygon 
a polyline  shown in figure 1a   may contain a variable number of line segments. a variable number of components is specified by the key word vector and must specify the minimum and maximum number of components. if the maximum number can be infinite  the variable n is listed. for instance the polyline must contain at least two lines  and each line must be connected with the previous. the definition of a polygon easily follows from the definition of the polyline 

figure 1:  a poly line  b  dashed open arrow  c  stick figure 

figure 1: shape description of a polygon. 
dashed open arrow 
a dashedopenarrow  figure lib  is made from a openarrow  and a dashedline  which in turn contains at least two line segments. when given a third argument specifying a length  the constraint near states that two points are near to each other relative to a given length. 
stick figure 
the definition of a stick figure  figure lie  shows how we can create new components to help describe shapes. it creates 


figure 1: description of a dashed line and a dashed open arrow. 
a new line between the feet for use in defining constraints  ensuring that both feet lie below the body. 

figure 1: description of a stick figure. 
1 	system implementation 
we built a simple domain-independent recognition system to test whether sketches can be recognized from our domain descriptions. the system parses a domain description into java code and jess  a rule-based system that interfaces with java   friedman-hill  1  rules  and uses them to recognize sketches. for example  using the domain description for uml  the system successfully recognized hand-drawn sketches of all of the shapes in figure 1 regardless of overlap. 
domain description parsing 
the domain description is parsed to create recognition code  creating at least one jess rule  containing the shape recognition information   and one java file  describing the shape   for each shape description. the system then uses the jess rules to recognize sketches. 
jess rule example 
the rule automatically generated for the trianglearrow from figure 1 is shown in figure 1. if a shape description contains a vector  such as that of the dashedarrow in figure 1  two jess rules are created  one containing the base case  and the second containing a recursive rule. 
stroke preprocessing 
the recognition system has several stages of recognition. 
first  each time a stroke is drawn  the stroke is pre-processed 
 sezgin et al  1  into either point  line  curve  arc  or a combination thereof  allowing users to draw objects in a single stroke or with multiple strokes. these primitive shapes are then asserted to a jess database. 

figure 1: automatically generated jess rule for the triangle arrow. 
recognition of shapes 
recognition is handled by the jess rule based system. we have automatically generated templates for the jess system to fill in. once jess finds the appropriate components  the rule is fired and the constraints are tested. the constraints are java functions with which jess interacts. all possible shapes are found  even if the shapes share lines or other components. if the shape can be a domain shape  i.e.  a final shape in the domain   the shape is asserted as a domain shape. 
domain shapes 
when domain shapes are created  a rule fires in jess confirming that no two found domain shapes share the same subcomponents. if two domain shapes do share subcomponents  one domain shape is retracted. the domain shape chosen to remain is the one containing more primitive components  following ockham's razor ; if the two shapes contain the same number of components  the shape created first is chosen  since previously chosen recognitions have higher precedence. if a domain shape is found  then the recognition system displays the shape as the designer specified and editing commands can then be performed on the shape. 
1 	related work 
1 	knowledge representation shape description languages  such as shape grammars  have been around for a long time  stiny and gips  1 . shape grammars are studied widely within the field of architecture  and many systems are continuing to be built using shape grammars  gips  1 . however  shape grammars were developed for shape generation rather than recognition  and don't provide for non-graphical information  such as stroke 
order  that may be helpful in recognition. they also lack ways for specifying shape editing. 
   within the field of sketch recognition  there have been other attempts to create languages for sketch recognition. bimber et. al  describe a simple sketch language using a bnf-grammar. the language describes three-dimensional shapes hierarchically. this language allows a programmer to specify only shape information and lacks the ability to specify other helpful domain information such as stroke order or direction and editing behavior  display  or shape interaction information. 
　mahoney  uses a language to model and recognize stick figures. the language currently is not hierarchical  making large objects cumbersome to describe. caetano et. al. 
 use fuzzy relational grammars to describe shape. both mahoney and caetano lack the ability to describe editing  display  or shape grouping information. 
　the electronic cocktail napkin project  gross and do  1  allows users to define domain shapes by drawing them. a shape is described by the shapes it is built out of and the constraints between them. the cocktail napkin's language is able to describe only shape. 
   jacob  jacob et al  1  has created a software model and language for describing and programming fine-grained aspects of interaction in a non-wimp user interface  such as a virtual environment. the language is very low-level making it difficult to define new interactions  and  in the domain of sketching  does not provide a significant improvement to coding the domain-dependent recognition system from scratch. 
　the language described in this paper is being used in several other systems  including sketch learning from example 
 veselova  1   smart compiling using hmm's  sezgin  1   and an intelligent bayesian network context oriented sketch recognition system  alvarado et al  1 . 
1 	conclusion 
1 future work 
we plan to examine more domains to ensure that the language contains the appropriate primitives. we would also like to test our syntax on a wide user base. large domains benefit from visual diagrams  such as the one in figure 1. we plan to automatically generate some of these visual diagrams to help with the grammar-writing process. 
1 	contributions 
we have created ladder  the first language to describe how sketched diagrams in a domain are drawn  displayed  and edited. the language consists of pre-defined shapes  constraints  editing-behaviors  and display methods  as well as a syntax for specifying a sketch grammar and extending the language  ensuring that shapes and shape groups from many domains can be described. the syntax simplifies the definition of new shapes by allowing shapes to be built hierarchically and by providing abstract shapes to contain common shape properties. shape groups describe how domain shapes interact  and can provide information to be used in top-down as well as bottom-up recognition. shape groups can also be used to describe  chain-reaction  editing commands. we have built a simple domain-independent sketch recognition system for testing that recognition is feasible based on the descriptions provided. 
acknowledgments 
this work is supported in part by the mit oxygen collaboration. 
the authors would like to thank jacob eiscnstcin for the name lad-
der and jacob eisenstein  michael oltmans  mark foltz  and vineet sinha for their help in reviewing this paper. 
