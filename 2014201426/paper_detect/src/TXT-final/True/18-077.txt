 
   in a temporal planning and reasoning system  many logical assertions will have a limited life span: they are  terminated  by later  contradictory assertions. by observing assertion terminators  the lifetime of an assertion can be bounded within an interval called the scope. assertion scopes can greatly reduce the number of relevant matches returned from an assertion database. scopes and terminators also permit the more efficient determination of contemporaneous assertions for forward chaining of event rules. window cutoff is an execution time accelerator for determining if two activities are ordered in a plan  a high frequency  utility operation in plan synthesis. the acceleration is accomplished by doing an early cutoff of search paths to the  lower  activity based on time constraints. these mechanisms reduced the execution time of a temporal planner called deviser by four orders of magnitude for 1 goals  allowing very long planning problems to be solved. the mechanisms described employ time constraints to accelerate planning  and are not applicable to precedence planners. deviser is a 
   performance planner which has been applied experimentally in planning activities for the voyager spacecraft in its encounter with uranus in 1. 
i introduction 
   in september 1 i translated my temporal planner deviser i  vere  1  from interlisp on the dec-1 to zetalisp on the symbolics 1 computer. the zetalisp version executed about ten times faster and no longer ran out of memory on larger problems. these new circumstances enabled me to perform some experiments to see how execution time increased as a function of the number of goals. the experiments were for a voyager knowledge base  with a set of imaging goals which required no backtracking. the results are given in figure 1  a semilog graph. deviser i showed a steep exponential growth which soon overwhelmed the 
    this paper presents the results of one phase of research carried out at the jet propulsion laboratory  california institute of technology  and sponsored by the national aeronautics and space administration under contract no. nas-1. 

taster machine. beyond 1 goals the graph is an extrapolation. dissatisfaction with these results led me to consider time constraints as a means for improving performance. since then a new version of the planner  deviser i i   has been implemented which exhibits a much shallower performance curve. this improvement amounts to an estimated four orders of magnitude for 1 goals  and is due to the mechanisms which will be described. these mechanisms apply time constraints to improve the efficiency of several important low level operations of plan synthesis. about three fourths of the slope improvement in figure 1 is due to temporal scoping  and the remaining one fourth is due to window cutoff. 
   in the past  temporal planners have been investigated because many applications require time as an explicit parameter. the results of this investigation indicate that time can also serve as an important source of additional constraints which can accelerate planning. 
   deviser ii lies along the evolutionary path of noah  sacerdoti  1  and nonlin  tate  1 . 
these earlier planners did not model time. 	such a 
   
1 s. vere 
program will be called a precedence planner  since it merely establishes the precedence of activities in a plan. other approaches to incorporating time into a planner are to be found in  allen and koomen  1; cheeseman  1; mcdermott  1; and salter  1 . these papers  with one exception  do not address the question of the efficiency or performance curves of the resulting system. allen confessed that his system was rather inefficient even on blocksworld problems. none have attempted to take advantage of time constraints to improve the efficiency of the planner. 
ii review of deviser window logic 
   in a temporal logic system  the truth of an assertion  literal  must in effect be a function of time.  throughout this paper the terms assertion and literal may be used interchangeably . in the  window logic'' system of deviser  every assertion is associated with an activity  and every activity has associated with it a start time interval   window   and a duration  which may be a function of the activity parameters. 
   in a temporal blocksworld where a pickup action requires 1 second  the action description is 


   figure 1 shows a small blocksworld plan in which a deadline is imposed on the goal state. the plan start time is 1. the three actions in the plan have only interval constraints on their start times. the dashed lines may be ignored for the moment. note that each activity except for the start and stop nodes has a start time window  duration  and set of assertions. 
   
   figure 1 shows the temporal relation between preconditions and postconditions. the extent of the preconditions and postconditions are indicated by timelines. preconditions must become true on or before the start of the activity  and persist through the duration of that activity. 
preconditions not contradicted by postconditions continue to hold. postconditions  assertions  of an activity become true when the activity finishes and continue to hold indefinitely thereafter until they are explicitly contradicted by assertions of a later activity. if certain preconditions need only hold at the start of an activity  but not through the duration   that activity may be decomposed into subactivities whose preconditions behave as in figure 1. this is explained in  vere  1 . 
   the figure shows the start time of the activity as a point in time. this is generally only true for activities which have been scheduled. during plan generation  the start time is typically an interval. this should be contrasted with the conventions of other temporal logic systems  e.g.  allen and koomen  1   in which an interval specifies the lifetime of an assertion  and the start time is constrained to a point. 

figure 1. 	terminator relations in a blocksworld plan 
   strictly speaking  it is activity nodes which are ordered and have start times  not assertions. however  it will be convenient to speak of assertions being ordered or having start times when in fact these relations apply to the nodes to which those assertions belong. 
   
s. vere 1 
i l l assertion terminators and temporal scopes 
   
   in a temporal logic  assertions may in the course of time cease to be true. however  they do not die naturally; instead  they are terminated by later contradictory asertions. 
   assertion t is defined to be a terminator for assertion a iff: a and t are contradictory; t follows a in time; and no assertion t' exists satisfying the first two conditions such that t follows t1 in time. 
   usually an assertion has a single terminator  or none at all. however  because activities in a plan are only partially ordered  it is possible for an assertion to have several terminators which are mutually unordered. also  as planning progresses and new activities are introduced and ordered  the terminator s  of an assertion may change. 
   referring back to figure 1  the dashed lines connect selected assertions and their terminators. thus  clear a  of n1 is the terminator of  not 
 clear a   of n1. in the case where an assertion has no terminator  it holds forever.  on a b  of n1 is one example of an unterminated assertion. 
   the temporal scope of an assertion a is defined as an interval  t1 t1  where t1 is the earliest finish time of the assertion1s activity node and t1 is the minimum of the latest finish times of the terminators of a  or infinity if the assertion is unterminated. thus the scope bounds the lifetime of the assertion. since activity start times and terminators change as planning proceeds  so do temporal scopes. each time the latest start time or duration of an activity is revised  a check is made of all assertions of that activity. if an assertion serves as a terminator of an earlier assertion  the scope of that earlier assertion may have to be revised too. 
   again referring to figure 1  we can deduce that the temporal scope of  not  clear a   in n1 is  1  since the earliest finish time of n1 is 1 and the latest finish time of n1  which asserts the terminator  clear a   is 1. figure 1 illustrates the notion of temporal scopes in the abstract  and shows their relation to earliest and latest finish times for assertions and their terminators. 
   maintaining temporal scopes for each assertion during plan synthesis dramatically improves the overall efficiency of the planner for large goal sets. in a planning engine such as deviser  processing of assertion retrievals is a fundamental contributor to total execution time. screening out irrelevant retrievals with the temporal scope meohanism vastly shortens the number of assertion candidates which must be sorted and processed by fundamental  high frequency planning operations. 
   the primary application of terminators and scopes is in screening retrievals from the distributed assertion database. without scopes  the retrieval mechanism must return a list of all literals matching a given pattern. the subroutine requesting the retrieval must then process this list to determine the  relevant  matches  and this is time consuming. the function bounded.matches is the low level function which uses scopes in accessing this database. bounded.matches takes as arguments an assertion and a time interval. it returns a list of all assertions in the database which match the given assertion and whose scopes intersect the given interval. thus we are able to filter out most irrelevant retrievals with a quick numerical test. of course this trick is going to work only in a planner which models time. 
   bounded.matches is called with high frequency in the planner in the following operations: 
- looking for possible  tie-ins'' to allow phantom node creation; 
- finding conflicts after an expansion of a node or instantiation of a literal; 
- checking phantom node violation after a literal instantiation; 
- checking for infinite loops in the backtracking process; 
- checking contemporaneous literals for forward chaining. 
   
1 s vere 
   to illustrate  we will examine the first operation in more detail. if the assertion of a goal node matches an assertion true in the plan  above  the goal node  i.e. earlier   that goal node can be converted to a phantom node  which indicates that no action is required to satisfy the precondition. the situation is shown in figure 1. b is a goal node for activity c  and b's assertion is  p . we want to know if there is some activity node a above which asserts  p  and if  p  s t i l l holds down at c. a necessary condition is that the scope of a matching literal  such as  p  of node a  have a scope intersecting the critical interval bounded by the earliest finish time and latest finish time of c. the result is that 
bounded.matches is able to return just the few matches overlapping the critical interval  rather than the hundred or more that might exist in a long plan. of course  these bounded matches must s t i l l be further screened to select those literals which satisfy all requirements for a tie-in. 

contemporaneous  their scopes may be intersected  a computationally cheap operation. if this intersection is null  the literals cannot be contemporaneous. however  a non-null intersection unfortunately is not sufficient. figure 1 shows a segment of a plan diagram which illustrates this. clearly assertions  a  and  b  are not contemporaneous  since the terminator of  a  is a predecessor of  b . yet their scopes intersect:  a    1 ;  b    1 infinity . 
   this example illustrates the need for a second condition: for a set of literals to be contemporaneous  no literal in the set may follow the terminator of another literal in the set. 

   
   literals are contemporaneous if they are simultaneously true at some instant of time. in a dynamic temporal logic system  to determine if a 
   forward-chaining event rule should fire  it is necessary to determine if there are contemporaneous literals which match the rule antecedent. the situation is more complex than in conventional forward chaining systems such as 1ps1  forgy  1   in which there is a single set of assertions all simultaneously true. in a parallel plan  the assertions are sprinkled throughout the plan and it oan be an expensive computational process to find contemporaneous matches for the antecedent. here too the concepts of scope and terminators can help to accelerate the computation. 
to determine if a set of candidate 	literals 	is window cutoff is a mechanism for accelerating the determination of whether one activity  follows  another in a plan   i.e. whether the activities are ordered. this is a fundamental  high-frequency utility operation in plan synthesis which contributes heavily to the total execution time of the planner. the ordering relation is the transitive closure of the successor relation  which is denoted by the solid directed arcs in a plan diagram such as figure 1. successors of an activity are stored explicitly in deviser i i   but the ordering relation must be computed.  to store the ordering relation explicitly would be unthinkable since successors are constantly changing as the plan develops . for a precedence planner  determining if one activity follows another is straightforward but expensive. you just begin at one node and do a blind search down 
   
through the plan diagram looking for the other node. in a temporal planner  window cutoff provides a mechanism for early termination of search paths based on time constraints which must hold between ordered nodes. 
   suppose we are trying to determine if activity node nb follows activity node na in a plan. we begin by examining the successors of na to see if nb is among them. if not  we must search among the successors of the successors . . .  keeping a record of nodes visited  until nb is found or all nodes reachable from na have been visited. suppose that we arrive at node nc somewhere below na  that nc has not already been visited  and that nc is not 
nb. in a precedence planner we must now search the plan below nc. however  in a temporal planner we may be able to cut off the search at nc if the windows of nc and nb are such that nb could not possibly lie below nc. 
   following is a tutorial version of the function ordered  which illustrates window cutoff: 

vii conclusion 
   the notions of temporal scopes and terminators contribute to the screening of assertion retrievals  and to the determination of contemporaneous assertions for forward chaining in a temporal planner. window cutoff oan accelerate the determination of the ordering relation on activities. these features dramatically improved the execution time performance of deviser  enabling it to solve in a few hours large planning problems for the voyager spacecraft consisting of over one hundred goals. this is at least an order of magnitude faster than human performance. the mechanisms for this performance improvement apply 
s. vere 1 
only to temporal planners  since they are based on time constraints. 
