
in an important recent paper  lin and zhao introduced the concept of a loop formula  and showed that the answer sets for a logic program are exactly the models of clark's completion of the program that satisfy the loop formulas. just as supportedsets are a model-theoretic account of completion   externally supported  sets  defined in this paper  are a model-theoretic counterpart of loop formulas. this reformulation of loop formulas shows that they are related to assumption sets  sacca＞ and zaniolo  and to unfounded sets  van gelder  ross and schlipf; leone  rullo and scarcello   invented many years earlier. other contributions of this paper includes a
simplification of the definition of a loop  extending it to programs with classical negation and infinite programs  and a generalization of the definition of a loop formula.
1 introduction
the completion semantics  clark  1  and the answer set semantics  also known as the stable model semantics   gelfond and lifschitz  1  are two well-known proposals for defining the meaning of negation as failure in logic programs.1 the former is attractive because it is simply a translation from logic programs to classical logic  but it sometimes gives unintuitive results  przymusinski  1  section 1 . it is well known that an answer set for a logic program is also a model of its completion  while the converse  generally  does not hold.
　by adding so-called  loop formulas  to completion  lin and zhao  defined a set of formulas whose models are exactly the answer sets. the idea comes from observing that  loops  are related to the mismatch between the models of the completion and the answer sets. intuitively  every atom in an answer set can be  derived  from a program in a finite number of steps. the atoms in a loop that are not  supported from outside  cannot be derived in a finite number of steps  but they do not contradict the completion of the program.
　the lin/zhao theorem allows us to compute answer sets using sat solvers  which has led to the implementation of sat-based answer set solvers assat1  lin and zhao  1  and cmodels1  giunchiglia et al.  1 . these systems turn a logic program into a propositional theory and then call sat solvers  such as chaff  sato and relsat  to find its models  which in turn correspond to the answer sets. thanks to recent progress with sat solvers  in several benchmark examples they found answer sets faster than other answer set solvers such as smodels1 and dlv1.
　a program that has no loops is called  tight   and for tight programs the completion semantics and the answer set semantics are equivalent to each other. this fact was discovered earlier by fages   and then was generalized and extended by erdem and lifschitz  to programs with nested expressions  in the sense of  lifschitz et al.  1   in the bodies of rules.
　lee and lifschitz  showed that program completion  loop formulas and the lin/zhao theorem can be extended to disjunctive logic programs and  more generally  to arbitrary programs with nested expressions. as a consequence  the concept of a tight program and fages' theorem are extended to disjunctive programs as well.
　yet the previous work on loop formulas has been limited to finite programs withoutclassicalnegation. in this paper  we lift these limitations. first  to account for programs that allow classical negation  we propose a model-theoretic counterpart of loop formulas-the concept of an  externally supported  set. it is similar to the model-theoretic counterpart of clark's completion-the concept of a supported set introduced in  apt et al.  1 . interestingly  this reformulation of loop formulas shows that they are related to assumption sets  sacca＞ and zaniolo  1  and to unfounded sets  van gelder et al.  1; leone et al.  1  invented many years earlier. second  we extend the concept of a loop formula to programs with nested expressions. finally  we extend the notion of a loop and the theorem on loop formulas to infinite programs.
in the next section we introduce the concept of an externally supported set  extend the notion of a loop to infinite programs  state our main theorem  and discuss its relation to fages' theorem about tight programs. in section 1 we use the main theorem to define two transformations turning a logic program into an equivalent propositional theory. in section 1  we relate externally supported sets to assumption sets and to unfounded sets  and compare our reformulation of loop formulas with the original definition by lin and zhao. the main theorem is generalized to arbitrary programs with nested expressions in section 1.
1 externally supported sets
1 nondisjunctive case
we begin with a review of the answer set semantics for nondisjunctive programs given in  gelfond and lifschitz  1  section 1 . 1 the words atom and literal are understood here as in propositional logic; we call the negation sign in negative literals classicalnegation  to distinguish it from
the symbol for negation as failure  not .
a nondisjunctiveruleis an expression of the form
	not	not	 1 
 	  where all	are literals. we will often write  1  in the form
 1 
where	is	  and	is not	not	  and we will sometimes identify	with the set	.
　a nondisjunctive logic program is a set of rules of the form  1 .
　we say that a set of literals satisfies the body of rule  1   symbolically   if   and
               . we say that	satisfies a nondisjunctive program	 symbolically	  if  for every rule  1  of that program 	whenever	satisfies	.
　the reduct of a nondisjunctive program with respect to a set of literals is obtained from by deleting each rule  1  such that   and replacing each remaining rule  1  by . a consistent set of literals is an answersetfor if is minimal among the sets of literals that satisfy .
　we say that a set of literals is supported by w.r.t. a set of literals if there is a rule  1  in such that   and . informally  such a rule  1  characterizes a
　source of support for the literal in .1
　now we make the notion of a supported set slightly stronger. we will say that a set of literals is externally supportedby w.r.t. if there is a rule  1  in such that
　　　    and . informally  the new  third condition ensures that the support for the literal in comes from outsideof .

figure 1: the dependency graph of
	for example  consider the following program	:
each of the sets and is externally supported  hence also supported  by w.r.t.   while is supported but not externally supported by w.r.t. . on the other hand  let be the following program that adds two rules to	:
	not	not
then every nonempty subset of	is externally supported by	w.r.t.	.
　the positivedependencygraphof is the directed graph such that its vertices are the literals occurring in   and its edges go from to for each rule  1  of .
　when is finite  a nonempty set of literals is called a loopof if  for every pair   of literals in   there exists a path from to in the positive dependency graph of such that all vertices in this path belong to .1 in other words  a
　nonempty set of literals is a loop of iff the subgraph of the positive dependency graph of induced by is strongly connected. note that  for every literal that occurs in   the singleton set is a loop  according to this definition.1
　the positive dependency graph of   shown in figure 1  has four loops:       .
main theorem for finite nondisjunctive programs for any finite nondisjunctive program and any consistent set of literals  the following conditions are equivalent:
	is an answer set for	.
	satisfies	  and every set of literals that has a common
	element with	is externally supported by	w.r.t.	.
	satisfies	  and every loop of	that is contained in
	is externally supported by	w.r.t.	.
	out of the three implications	to	 	to	 	to
     the second is obvious  because every loop that is contained in has a common element with . program above has two answer sets: and . since implies
　  it follows that every set of atoms that has a common element with is externally supported w.r.t.   and every set of atoms that has a common element with is externally supported w.r.t. . on the other hand  since implies   to show that is an answer set we only need to check that every loop which is a subset of  that is  each of       is externally supported w.r.t. .
similarly  to show that is an answer set  we only need to check that is externally supported w.r.t. .
　the equivalence between and is a generalization of a theorem from  sacca＞ and zaniolo  1  as we will discuss in section 1  and the equivalence between and is a model-theoretic account of loop formulas as we will discuss in section 1.
1 extension to programs in canonical form
we will extend the main theorem to finite programs with nested expressions  lifschitz et al.  1 . in this section  for simplicity  instead of arbitrary rules with nested expressions 
we consider rules of the form
	not	not
                                1  not not	not not
 	  where all	are literals.1 we will call
such rules canonical  and will often write  1  in the form
 1 
where	is is  andisnotnotnot notnot notwe will sometimes identify with the set and with the set	.
a canonicalprogramis a set of rules of the form  1 .
　the definition of satisfaction given in section 1 is extended to canonical programs as follows. we say that a set of literals satisfies the body of rule  1  if
　　　　　　 	  and	. satisfies a program if  for every rule  1  of that program 
at least one of the literals in belongs to whenever satisfies .
　the reduct of a canonical program with respect to a set of literals is obtained from by deleting each rule  1  such that   and replacing each remaining rule  1  by
　　　. a consistent set of literals is an answersetfor if is minimal among the sets of literals that satisfy .
　given a canonical program and a set of literals  we will say that a set of literals is externallysupported by
w.r.t.	if there is a rule  1  in	such that	 
             and . the last condition is suggested by the extension of the definition of a
         supported set to disjunctive programs proposed in  baral and gelfond  1  and  inoue and sakama  1 .
　the definition of a positive dependency graph is extended to the general case straightforwardly: for each rule  1  in   the edges of the graph go from each literal     to each literal    . the definition of a loop from
section 1 remains the same for arbitrary finite programs.
the theorem from section 1 remains true if we replace
 nondisjunctive  in its statement with  canonical. 
	for example  let	be the program
not
which has two answer sets: and . the comments about these answer sets at the end of section 1 apply to program as well.
1 extension to infinite programs
so far we restricted our attention to finite programs only. indeed  unless we modify the definition of a loop  the theorem in section 1 does not hold for infinite programs: conditions and are equivalent to each other even for infinite programs  but condition turns out weaker than the others. for example  consider the following infinite program :
where each is an atom. the program has no loops  in the sense of section 1  other than singletons. besides   which is the only answer set for   there is one more set that satisfies condition : .
　looking at the example  we observe that condition is weaker than condition in that it does not account for infinite paths in the positive dependency graph which do not correspond to loops  while condition tells us that the sets that correspond to such infinite paths should also be externally supported. we propose to modify the definition of a loop as follows.
　given a  possibly infinite  program and a set of literals  we say that is unbounded if  for every literal   there exists an infinite path in in the positive dependency graph of that starts from and does not visit the same vertex more than once. a nonempty set of literals is called a
　loopof if is unbounded  or for every pair   of literals in   there exists a path from to in the positive dependency graph of such that all vertices in this path belong to . when is finite  no set of literals that occur in is unbounded  so that this definition of a loop reduces to the earlier definition.
　in program above  every set is a loop according to this definition  since it is unbounded. but it is not externally supported by w.r.t. . the theorem from section 1 remains true if we replace  finite nondisjunctive  with  canonical :
1 tight programs
the notion of a loop helps us simplify the definition of a  tight  program  erdem and lifschitz  1 . let be any canonical program. we will say that a loop of is trivialif the loop consists of a single literal such that the positive dependencygraph of does not contain an edge from the literal to itself. for example  in program above  every singleton loop is trivial  while every loop is not.
we say that is absolutelytightif every loop of is trivial. let be the set of rules of whose heads and bodies are satisfied by . program is tightona set of literals if the subgraph of the positive dependency graph of induced by has no loops other than trivial ones. these definitions are more general than the corresponding definitions in  lee and lifschitz  1  in that they are applicable to infinite programs and to programs with classical negation as well. we get the following corollaries to the main theorem  which generalizes propositions 1 and 1 from  lee and lifschitz  1 .
corollary 1 for any absolutely tight canonical program and any consistent set of literals  is an answer set for iff satisfies and is supported by .
corollary 1 for any canonical program	and any consistent set	of literals such that	is tight on	 	is an answer set for	iff	satisfies	and	is supported by	.
1 translating logic programs into propositional logic
in application to finite programs without classical negation  conditions and of the main theorem suggest ways to turn a program into an equivalent propositional theory. this translation is closely related to the lin/zhao theorem on loop formulas  as we will see in section 1.
　consider a finite program whose rules have the form  1  where all are atoms. for any set of atoms  the external supportformulafor is the disjunction of the conjunctions
 1 
for all rules  1  of	such that	  and	.
we will denote the external support formula by es	.
　condition of the main theorem suggests the propositional theory which consists of the implications 1
 1 
	for all rules  1  in	  and
the implications es for all sets of atoms that occur in .
　on the other hand  condition of the main theorem suggests the propositional theory   which consists of
the implications  1  for all rules  1  in	  and the implications
	es	 1 
	for all loops	of	.
formula  1  is called the conjunctiveloopformulaof	.
corollary 1 for any finite program without classical negation and any set of atoms  is an answer set for iff is a model of iff is a model of .
　note that the number of loops is exponential in the worst case. but we cannot do much about this: lifschitz and razborov  showed that any equivalent translation from logic programs to propositional formulas involves a significant increase in size assuming a conjecture from the theory of computational complexity which is widely believed to be true.
1 unfounded sets and disjunctive loop formulas
since conditions and in the statement of the main theorem are equivalent to each other  any intermediate condition between the two also characterizes answer sets. in this section  we study two such conditions related to some earlier work.
1 relation to unfounded sets
the first condition is satisfies	  and every nonempty subset of	is exter-
	nally supported by	w.r.t.	.
since implies   implies   and     are equivalent to each other  it is clear that all these conditions are equivalent to each other.
　in fact  the equivalencebetween conditions and was established before for the special case when the rules of the program have the form  1  with . it is related to the notion of an unfounded set originally introduced in  van gelder et al.  1  to characterize negative conclusions under the well-founded semantics. sacca＞ and zaniolo  showed that answer sets for a nondisjunctive program can be characterized in terms of unfounded sets.1 leone et al.  extended the notion of an unfounded set and the theorem by sacca＞ and zaniolo to disjunctive programs.
　their definition can be further extended to programs with rules of the form  1  as follows. a set of literals is unfoundedby a program w.r.t. a set of literals if  for each rule  1  in such that   at least one of the following conditions holds:     or .
　it is easy to see that is not unfounded w.r.t. iff is externally supported w.r.t. in the sense of section 1.
　a set of literals is called unfounded-freeif it does not have any nonempty subset that is unfounded w.r.t. . the equivalence between conditions and stated above can be reformulated as follows: is an answer set for iff satisfies and is unfounded-free. this is a generalization of corollary 1 from  sacca＞ and zaniolo  1  and theorem 1 from  leone et al.  1  to programs with rules of the form  1 .
　for finite programs without classical negation  condition suggests the following translation into propositional logic  which consists of
the implications  1  for all rules  1  in   and the implications  1  for all nonemptysets of atoms that occur in .
　note that is a superset of . in   is not empty. if it were  then the implication would be unsatisfiable.
corollary 1 for any finite program without classical negation  a set of atoms is an answer set for	iff it is a model of	.
1 relation to disjunctive loop formulas
here is another condition intermediate between	and	:
　satisfies   and  for every loop   every set of literals that has a common element with is externally supported by w.r.t. .
　given a finite program whose rules have the form  1  where all are atoms  the propositional theory consists of
the implications  1  for all rules  1  in	  and the implications
	es	 1 
	for all loops	of	.
formula  1  is called the disjunctiveloopformulaof	.
corollary 1 for any finite program	without classical negation  a set of atoms is an answer set for	iff it is a model of	.
　in fact  if is nondisjunctive   1  is essentially the loop formula defined by lin and zhao . in the rest of this section  we give a more precise description of the relationship between this special case of corollary 1 and the lin/zhao theorem.
note first that when	is nondisjunctive 	consists of the implications
 1 
for all rules  1  in	  and the implications
 1 
	for all loops	of	.
　we now review the lin/zhao theorem. the completion of the same program   comp   consists of the equivalences
for all atoms	that occur in	.
　by lf we denote the set of the disjunctive loop formulas  1  for all non-trivial loops .
theorem 1  lin and zhao  1  theorem 1  for any finite nondisjunctive program without classical negation  a set of atoms is an answer set for iff it is a model of
comp	lf	.
　to see why comp	lf	is equivalent to	  observe first that comp	can be rewritten as the set of impli-
cations  right-to-left 
 1 
and  left-to-right 
 1 
implications  1  can be further broken into implications  1 . in implications  1   every singleton set is a loop. if the loop is non-trivial  then lf contains the corresponding implication  1   which is stronger than  1 . consequently  in the presence of lf   implications  1  for all non-trivial loops can be dropped. on the other hand  if is trivial  then   so that  1  coincides with  1   where
　　　　 . to sum up  comp lf can be equivalently rewritten as the set consisting of formulas  1   formulas  1  for trivial loops  and formulas  1  for non-trivial loops  they form lf  . this set is exactly .
1 loop formulas for programs with nested expressions
lifschitz et al. extended the answer set semantics to programswith nested expressions.  formulas  defined in that paper allow negation as failure      conjunction     and disjunction     to be nested arbitrarily. a program with nested expressions is a set of rules of which both heads and bodies are formulas. the following program   for instance  is a program with nested expressions which is not in canonical form because the first rule has a disjunction in its body.
	not	not
　for the semantics of such programs  along with the definition of satisfaction  we refer the reader to section 1 of  erdog an and lifschitz  1 . recall that an occurrence of a formula in a formula is singularif the symbol before this occurrenceis ; otherwise  the occurrenceisregular lifschitz et al.  1 . for any formula   by poslit we denote the set of all literals having a regular occurrence in
that is not in the scope of negation as failure. for instance  poslit not not not .
　for a set of literals  by we denote the formula obtained from a formula by replacing all regular occurrences of literals from that are not in the scope of negation as failure with ; by we denote the program obtained from a program by the same substitution. in application to canonical programs  this operation is closely related to the concept of external support:
proposition 1 let be a canonical program  and a set of literals satisfying . for any set of literals  is externally supported by w.r.t. iff does not satisfy .
　for example  for program in section 1 we checked that is externally supported w.r.t. . on the other hand  the program is
	not	not
and we can check that does not satisfy the program  in accordance with proposition 1.
　proposition 1 shows that the main theorem in section 1 can be stated without mentioning external support: in conditions and   we can replace   is externally supported by w.r.t.   with   does not satisfy .  this fact can be used to generalize the main theorem to arbitrary programs.
　first we need to generalize the definition of a positive dependency graph to programs with nested expressions. the positivedependencygraph of a program with nested expressions is the directed graph such that its vertices are the literals occurring in   and its edges go from each literal in poslit head to each literal in poslit body for each rule head body of .
　if is canonical  this definition reduces to the earlier definition. the positive dependency graph of is the same as the positive dependency graph of as shown in figure 1.
　once we define a positive dependency graph  the definition of a loop given in section 1 remains the same for programs with nested expressions.
main theorem for any program with nested expressions and any consistent set of literals  the following conditions are equivalent:
	is an answer set for	.
	satisfies	  and  for every set	of literals that has a
	common element with	 	does not satisfy	.
	satisfies	  and  for every loop	of	that is con-
	tained in	 	does not satisfy	.
　the translations through can be extended to finite programs with nested expressions that do not contain classical negation. for instance  the extended theory consists of the implications body head for all rules head body in   and the implications for all sets of atoms that occur in .
1 conclusion
the following are the main contributions of this paper:
we reformulated the definition of a loop formula so that loop formulas became a generalization of completion.
we generalized the definition of a loop formula and the lin/zhao theorem to programs with nested expressions  not necessarily finite.
we presented a model-theoretic account of loop formulas-the concept of an externally supported set- and showed that loop formulas are related to assumption sets and to unfounded sets.
　it is interestingto note that the computationalmethodsused in dlv and in sat-based answer set solvers are related to each other  in view of our main theorem: dlv uses condition  leone et al.  1  theorem 1  for finding answer sets for disjunctive programs  and assat and cmodels use condition for nondisjunctive programs.
acknowledgements
i am grateful to vladimir lifschitz and fangzhen lin for many useful discussions. vladimir helped me develop the idea and improve the presentation significantly. i am also grateful to anonymous referees for their comments. wolfgang faber suggested that there may be a relationship between loop formulas and unfounded sets. nicola leone gave pointers to earlier work on unfounded sets and on assumption sets. this work was partially supported by nsf under grant iis-1.
