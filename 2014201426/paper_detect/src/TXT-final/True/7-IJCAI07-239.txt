
computers have already eclipsed the level of human play in competitive scrabble  but there remains room for improvement. in particular  there is much to be gained by incorporating information about the opponent's tiles into the decision-making process. in this work  we quantify the value of knowing what letters the opponent has. we use observations from previous plays to predict what tiles our opponent may hold and then use this information to guide our play. our model of the opponent  based on bayes' theorem  sacrifices accuracy for simplicity and ease of computation. but even with this simplified model  we show significant improvement in play over an existing scrabble program. these empirical results suggest that this simple approximation may serve as a suitable substitute for the intractable partially observable markov decision process. although this work focuses on computer-vs-computer scrabble play  the tools developed can be of great use in training humans to play against other humans.
1 introduction
scrabble is a popular crosswords game played by millions of people worldwide. competitors make plays by forming words on a 1 x 1 grid  see figure 1   abiding by constraints similar to those found in crossword puzzles. each player has a rack of seven letter tiles that are randomly drawn from a bag that initially contains 1 tiles. achieving a high score requires a delicate balance between maximizing one's score on the present turn and managing one's rack in order to achieve high-scoring plays in the future.
　because opponents' tiles are hidden and because tiles are drawn randomly from the bag on each turn  scrabble is a stochastic partially observable game  russell and norvig  1 . this feature distinguishes scrabble from games like chess and go  where both players can make decisions based on full knowledge of the state of the game. stochastic games of imperfect information can be modeled formally by partially observable markov decision processes  pomdps   littman  1 . while pomdps are expres-

figure 1: a sample scrabble game. the shaded premium squares on the board double or triple the value of single letter or a whole word. note the frequent use of obscure words.
sive and theoretically powerful  solving them is intractable for problems containing more than a few states.
　at the beginning of a scrabble game  an opposing player can hold any of more than four million different racks. although the number of possibilities decreases as letters are drawn from the bag  solving scrabble directly with a formal model like pomdps does not seem to be a viable option.
　scrabble's inherent partial observability invites comparison with games like poker and bridge. significant progress has been made in managing the hidden information in those games and in creating computer agents that can compete with intermediate-level human players  billings et al.  1   ginsberg  1 . in scrabble  championship-level play is already dominated by computer agents  sheppard  1 . although computers can already play better than humans  scrabble is not a solved game. even the best existing computer scrabble agents can improve their play by incorporating knowledge about the unseen letters on the opponent's rack into their decision-making processes. improvements in the handling of hidden information in scrabble could shed insight into more strategically complex partially observable games such as poker. furthermore  advanced computer scrabble agents are of great benefit to expert human scrabble players. humans rely on computer scrabble programs to improve their play by analyzing previous games and identifying where suboptimal decisions were made.
　one of the strategies that has been successfully used in poker-playing programs is opponent modeling-trying to identify what cards the opponents have and how they might play  based on observations of previous plays.  billings et al.  1  in this work  we propose an opponent modeling strategy for scrabble.
　first  we run simulations in which one of the players is given full knowledge of his opponent's rack. these results show how much potential benefit there could be in attempting to make such inferences. then we attempt to achieve some fraction of that potential improvement by creating a simple model of our opponent based on bayes' theorem  bolstad  1 .
　our computer agent makes inferences about what tiles the opponent may have based on observations from previous plays. while our agent relies heavily on multi-ply simulations-as other popular computer scrabble programs do-we use these inferences to bias the contents of our opponent's rack during simulation towards those letters which we believe he is more likely to have. our model sacrifices accuracy for simplicity. but even with this simple model  we show empirical results that suggest this strategy is significantly better than other common approaches for computer play that make no attempt to deduce the opponent's letters. this strategy may be a suitable substitute for the computationally intractable partially observable markov decision process.
　the structure of the paper is as follows. section 1 gives an overview of scrabble  including a review of the rules and basic strategy. section 1 discusses previous work on scrabbleplaying artificial intelligence. in section 1  we present an algorithm which makes inferences about the opponent's tiles. experimental results are discussed in section 1. finally  possibilities for future work are presented in section 1.
1 scrabble overview
alfred m. butts invented scrabble during the 1s. he used letter frequency counts from newspaper crossword puzzles to help determine the distribution of tiles and their relative point values. of the 1 letters in the standard scrabble game  there are 1 tiles for common vowels like a  e  and i  but only one tile each for less common letters like q  x  and z1.
　point values for the individual letters range from one point for the vowels to 1 points for the q and z. there are two blank tiles that act as  wild cards ; they can be substituted for any other letter. the blanks do not have an intrinsic point value but are extremely valuable because of the flexibility they add to a player's rack.
　the first player combines two or more of his letters into a word and places it on the board with one letter touching the center square. thereafter  players alternate placing words on the board  and each new word must have at least one letter that is adjacent to an existing word. new tiles placed on a single turn must all be played in one row or one column.
　players score points for all new words formed on each turn. the score for each word is determined by adding up the total points for the individual tiles; premium squares distributed throughout the board can double or triple the value of an individual tile or the whole word.
　as long as letters remain in the bag  players replenish their rack to seven tiles after each turn. a scrabble game normally ends when the bag is empty and one player has used all of his tiles. the game can also end if neither player can make a legal move  but in practice this rarely happens.
　when a player manages to use all seven of his letters in a single turn  the play is called a bingo and scores a 1-point bonus. while novice players rarely  if ever  play a bingo  experts might average two or more per game. since experts usually score in the 1 point range  the bonus for a bingo is highly significant.
1 basic strategy
human scrabble players must exert considerable effort to develop an extensive vocabulary-including knowledge of many obscure words. since computer agents can easily be programmed to  know  all the legal words and can quickly generate all possible plays for any rack and board configuration  they already have a significant advantage over human players.
　a large vocabulary and the ability to recognize highscoring opportunities are necessary but not sufficient for highlevel play. simply making the highest-scoring legal play on each turn is not an optimal strategy. using this greedy approach frequently causes a player to retain tiles that are naturally more difficult to play  eventually leading to awkward racks like  uhhwvvy . with such a challenging rack  even the highest-scoring move is not likely to be very good.
　more experienced players are willing to sacrifice a few points on the current turn in order to play off an awkward letter or to retain for future turns sets of letters that combine well with each other. maintaining a good mix of consonants and vowels and avoiding duplicate letters  which reduce flexibility  are common goals of rack balance strategies. perhaps most importantly  expert scrabble players try to manage their racks so as to maximize the potential for bingo opportunities.  edley and williams  1 . in general  the concept of rack balance causes a player to evaluate the merits of a move based on how many points it scores on the current turn and on the estimated value of the letters that remain on the rack  called the leave .
　defensive tactics are also important. a player does not want to make moves that will create high-scoring opportunities for the opponent. furthermore  if the board configuration and opponent's rack are such that the opponent could make a high-scoring move on his next turn  a player might want to consider moves that will block that opportunity  even if the blocking play does not score as well on the current turn as some other available alternatives. also  if one player manages to establish a large lead early in the game  it may be in his best interest to keep the board as closed as possible  for example  he might try to cut off areas of the board where a lot of bingos could be played.
　it should be noted that luck plays a significant role in the outcome of a scrabble game. sometimes the random drawing of letters overwhelmingly favors one player  and not even the best strategy could compensate for the imbalance. in a game like poker  a timely bluff can lead to a big win for a player with a lousy hand. but in scrabble  a bad rack can be downright crippling. of course  over the course of many games  the luck of the draw evens out and the most skilled player can expect to win more games.
1 scope of study
the primary goal of this work is to improve upon championship-caliber scrabble computer programs by addressing the elements of uncertainty inherent in the game. we assume that our opponent is also a computer. not all aspects of the game are relevant to the present work. we are restricting our focus in the following ways.
number of players
we assume a two-player game. official rules allow for up to four players  but tournament matches  and even most casual games  involve only two competitors. as mentioned previously  there is already a great deal of luck involved in drawing  good  tiles; having more than two players only exacerbates the problem because each competitor takes even fewer turns and therefore has fewer opportunities to overcome bad luck with skill.
timing constraints
tournament scrabble is played under time constraints  often 1 minutes per player per game. point deductions are assessed for time taken in excess of the limit. since our scrabble-playing code is developmental in nature  we do not impose rigid timing restrictions. however  for practical purposes  the computation allowed to each agent is limited in a way that keeps the running time for a game to about what it would be in a tournament setting: 1 minutes.
endgame
once the bag of letters has been exhausted  a player may deduce exactly the opponent's rack  simply by observing the letters on the board and on his own rack. expert scrabble players do this kind of tile counting routinely. when the bag is empty  scrabble becomes a game of perfect information  and strategy changes. the focus of this work is decision-making under uncertainty  so we ignore the facets of endgame strategy  which have been studied elsewhere  sheppard  1 .
lexicon
the set of permissible words has a significant impact on how scrabble is played. words which are hyphenated or which occur exclusively as proper nouns or abbreviations are always illegal. but inclusion of certain slang  colloquial  archaic  and/or obscure words varies from one  official  word list to another. these differences can change how some letters are evaluated. for example  if the word qi is allowed  the q is likely considered an asset; otherwise it is a significant liability. in this study  we use the twl1  tournament word list  lexicon exclusively. our belief is that while specific parameters may need to be tuned for the various lists  the general models and strategies are applicable to any of the commonly used word sets.
challenges and bluffing
finally  we ignore the  challenge  rule. normally  when a competitor makes a play  his opponent has the option of challenging the legality of the newly played word s . in this case  both players look up the word in whatever dictionary has been agreed upon for the game  and the loser of the challenge forfeits a turn. some players will intentionally make a  phoney   hoping that their opponents will be unfamiliar with the word and will challenge it. this kind of bluffing tactic must be reckoned with in human tournament play. in this work  we focus on computer-vs-computer play. our agent's knowledge base contains all of the legal words  and we assume that our opponent has the same information. we therefore ignore the aspect of challenges.
1 previous work
while computers are indisputably the most proficient scrabble players  it is not generally known which scrabble-playing program is the best. brian sheppard's maven program decisively defeated human world champion ben logan in a 1 exhibition match. since that time  the national scrabble association has used maven to annotate championship games. maven's architecture is outlined in  sheppard  1 . the program divides the game into three phases: the endgame  the pre-endgame  and the midgame. the endgame starts when the last tile is drawn. maven uses b*-search  berliner  1  to tackle this phase and is supposedly nearly optimal. little information is available about the tactics used in the preendgame phase  but the goal of that module is to achieve a favorable endgame situation.
　the majority of the game is played under the guidance of the midgame module. on its turn  maven generates all possible legal moves and ranks them according to their immediate value  points scored on this turn  and on the potential of the leave. the values used to rank the leaves are computed offline through extensive simulation. for example  the value of the leave qu is determined by measuring the difference in future scoring between a player with that leave and his opponent  and averaging that value over thousands of games in which it is encountered.
　once all legal moves have been generated and ranked according to the static evaluation function  maven uses simulations to evaluate the merit of those moves with respect to the current board configuration and the remaining unseen tiles. since it is not uncommon to have several hundred legal plays to choose from on each turn  deep search is not tractable. sheppard suggests that deep search may not be necessary for excellent play. since expert players use an average of 1 tiles each turn  complete turnover of a rack can be expected every two to four turns. simulations beyond that level are of questionable value  especially if the bag still contains many letters. maven generally uses two- to four-ply searches in its simulations.
　after the publication of  sheppard  1   rights to maven were purchased by hasbro  and it is now distributed with that company's scrabble software product. since its commercialization  additional details about its strategies and algorithms have not been publicly available.
　jim homan's crosswise is another commercial software package that can be configured to play scrabble. in 1 and 1  crosswise won the computer scrabble competition at the computer olympiad.  in subsequent olympiad competitions  scrabble has not been contested.  the algorithmic details of crosswise are not readily accessible. unfortunately  maven and crosswise have not been pitted against each other in an official competition  so it is not known which program is superior. based on publicly available information  maven would probably have the edge. homan claims that crosswise generated over us $1 million in sales  which shows that there is a great demand for powerful scrabble computer programs. in march 1  jason katz-brown and john o'laughlin released quackle  an open source crossword game program1. quackle's computer agent has the same basic architecture as maven. it uses a static evaluation function to rank the list of candidate moves and then makes a final decision based on the results of simulations using a small subset of the most promising candidate moves. during the simulations  quackle must select one or more potential moves for the opponent. since quackle does not know what letters its opponent holds  it randomly selects a rack of letters from the set of tiles that it has not seen  i.e. all letters that are not currently on its own rack and have not already been placed on the board . quackle ignores the fact that not all possible racks are equally likely for the opponent.
　in the next section we show how we can use the opponent's most recent play to bias our selection of his tiles during simulation towards racks which we believe are more likely to occur. estimating the probability that our opponent holds certain tiles requires us to create a model of his decision-making process. opponent modeling has been shown to be profitable in other partially observable games  such as poker  billings et al.  1 . we suspect that opponent modeling in scrabble would be somewhat easier than in poker. many different styles of play can be played profitably in poker  and expert players are known to change their strategies drastically during a single match. among expert scrabble players- computers and humans- there is much less variation in strategy. we expect this fact to lead to simpler opponent models in scrabble.
1 modeling the opponent's rack and play selection
a reasonable question to ask is   how much would it help me if i could see my opponent's rack   to help answer this question  we conducted experiments in which we allowed our player to have full knowledge of the opponent's letters. during the simulation phase of the decision-making process  when evaluating the possible responses our opponent could make to one of our available moves  we generate all of the possible moves that the opponent could make using the rack that he actually has  instead of randomly assigning tiles from the set of letters that we have not seen . the opponent in these tests was quackle's strong player  which also uses simulations but makes no assumptions about our letters. the results are summarized in table 1 and figure 1. there is high variability in the final scores for the games  with extreme wins and losses for both players. this underscores the role that luck plays in the outcome of a scrabble game. it is clear  however  that the full knowledge player has a great advantage  scoring 1 more points per game on average. the difference is highly statistically significant  p   1 using random permutation tests  ramsey and schafer  1 . 
　knowing the contents of our opponent's rack allows us to play more aggressively in some situations  because we can be certain that our opponent does not have a high-scoring countermove. it allows us to avoid plays that would set him up for a bingo on his next turn. and it gives us an opportunity to block spots on the board that would be lucrative to him on his next turn  given his current rack. in real-world play  we cannot know for certain what letters our opponent holds- unless the bag is empty-but the results of these hypothetical full knowledge simulations give an upper bound on what we can expect to gain by trying to make some inferences about this hidden information.

figure 1: point differential over 1 games between quackle's strong player and an agent with full knowledge of its opponent's tiles. each bar shows the result of one game. negative values indicate games in which the full knowledge agent lost. the wide variability in the outcomes is a result of the luck inherent in drawing letters from the bag.
full knowledgequacklewins1mean score1biggest win1table 1: summary of results for 1 games between quackle's strong player and an agent with full knowledge of its opponent's tiles.
　during simulation  our model of the opponent consists of two parts. first  we construct a probability distribution over the possible racks that the opponent may have. second  we must model the decision-making process that our opponent would go through to select a move  given his rack and the configuration of the board. obviously  these two components are closely related: the letters left on the opponent's rack before replenishing from the bag are a direct result of the move he chose to play on his last turn.
　while we do not know exactly what tiles our opponent has  we can make some inferences based on his most recent move. consider the game situation shown in figure 1. our opponent  playing first  held  iimnoo and played  1e imino   o  1. we can observe only the letters he played- imino-and the letters on our own rack glorrtu  leaving 1 letters which we have not seen: 1 in the bag and two on his rack. when the opponent draws five letters to replenish his rack  each of the tiles in the bag is equally likely to be drawn. but assuming that the two letters left on his rack can also be viewed as being randomly and uniformly drawn from the 1 letters that we have not seen would be a gross oversimplification. of the 1 possible two-letter pairs for the oppo-

figure 1: the state of the board after observing the opponent play imino with a leave of  o. the active player holds glorrtu. between the two letters left on the opponent's rack and the letters left in the bag  there are 1 unseen tiles.
nent's leave       a ...  z aa ab ... az ... yz   some are considerably more probable  given the most recent play. suppose our opponent's leave is  h. that would mean that he held  hiimno before he played. if he had held that rack  he could have played  1d hominid 1   a bingo which would have earned him 1 more points than what he actually played. were our opponent a human  we would have to account for the possibility that he does not know this word or that he simply failed to recognize the opportunity to play it. but since our opponent is a computer  we feel confident that he would not have made this oversight and conclude that his leave after imino was not  h. likewise  we can assume that his leave was not  l   1d million 1  .
　suppose his leave was nv. with iimnnov  he could have played  1g vino  imn  1 . while this would have scored two fewer points than imino  it has a much better leave  imn instead of nv  and would likely have been preferred. in general  we can consider each of the possible leaves that an opponent may have had  based on the set of tiles we have not seen   reconstruct what his full rack would have been in each case  generate the legal moves he could have made with that rack  and then use that information to estimate the likelihood of that leave. using bayes' theorem

　the term p leave  is the prior probability of a particular leave. it is the probability of a particular combination of letters being randomly drawn from the set of all unseen  by us  letters. this is the implicit assumption that quackle makes about the opponent's leave. the prior probability for a particular draw d from a bag b is

　where α is a distinct letter  bα is the number of α-tiles in b  dα is the number of α-tiles in d  and |b| and |d| are respectively the size of the bag and size of the draw.
　we will be interested in computing probabilities for all of the possible leaves; we can therefore take advantage of the fact that

　the p play | leave  term is our model of the opponent's decision-making process. if we are given to know the letters that comprise the leave  then we can combine those letters with the tiles that we observed our opponent play to reconstruct the full rack that our opponent had when he played that move. after generating all possible legal plays for that rack on the actual board position  we must estimate the probability that our opponent would have chosen to make that particular play. we are assuming that our opponent is a computer  so it might be reasonable to believe that our opponent also makes his decisions based on the results of some simulations. unfortunately  simulating our opponent's simulations would not be practical from a computational standpoint. instead  we naively assume that the opponent chooses the highest-ranked play according to the same static move evaluation function that we use. in other words  we assume that our opponent would make the same move that we would make if we were in his position and did not do any simulations. this model of our opponent's decision process is admittedly overly-simplistic. however  it is likely to capture the opponent's behavior in many important situations. for example  one of the things we are most interested in is whether our opponent can play a bingo  or would be able to play a bingo if we made a particular move . if a bingo move is possible  it is very likely to be the highest-ranking move according to our static move evaluator anyway. a key advantage of modeling the opponent's decision-making process in this way is that the calculation of p play | leave  is straightforward. if the highest-ranked word for the corresponding whole rack matches the word that was actually played  we assign a probability of 1; otherwise  we assign a probability of 1. let m be the set of all leaves for which p play | leave  = 1. then the computation simplifies
to

　returning to our earlier example  if the opponent plays imino  there are only 1 of 1 possibilities to which we assign non-zero probability. using only the prior values for p leave   the actual leave  o is assigned a probability of
1. after conditioning on play  that leave is assigned a 1 probability. in this example  there were only 1 possible leaves to consider  but in general  there could be hundreds of thousands. it may be too expensive to run simulations for every possible leave  but we would like to consider as much of the probability mass as possible. using the posterior probabilities  1% of the probability mass is assigned to about 1 possible leaves. using only the priors  the 1 most probable leaves do not even account for 1% of the probability mass. however many samples we can afford computationally  we expect to get a much better feel for what our opponent's response to our next move might be if we bias our sampling of leaves for him to those that are most likely to occur.
　during simulation  after sampling a leave according to the distribution discussed above  we randomly draw tiles from the remaining unseen letters to create a full rack. we have created an inference player in the quackle framework that is very similar to quackle's strong player. it runs simulations to the same depth and for the same number of iterations as the quackle player. the only difference is in how the opponent's rack is composed during simulation.
1 experimental results
table 1 shows the results from 1 games in which our inference agent competed against quackle's strong player. while there is still a great deal of variance in the results  including big wins for both players  the inference player scores  on average  1 points per game more than the quackle strong player and wins 1 more games. the difference is statistically significant with p   1.
with inferencesquacklewins1mean score1biggest win1table 1: summary of results for 1 games between our inference agent and quackle's strong player.
　the five-points-per-game advantage against a noninferencing agent is also significant from a practical standpoint. to give the difference some context  we performed comparisons between a few pairs of strategies. the baseline strategy is the greedy algorithm: always choose the move that scores the most points on the present turn. an agent that incorporates a static leave evaluation into the ranking of each move defeats a greedy player by an average of 1 points per game. when the same static player competes against quackle's strong player  the simulating agent wins by an average of about 1 points per game. to be able to average five points more per game against such an elite player is quite a substantial improvement. in a tournament setting  where standings depend not only on wins and losses but also on point spread  the additional five points per game could make a significant difference. the improvement gained by adding opponent modeling to the simulations would seem to justify the additional computational cost. the expense of inference calculations has not been measured exactly  but it is not excessive considering the costs of simulation in general.
1 conclusions and future work
the empirical results discussed above suggest that opponent modeling adds considerable value to simulation. we do not expect that the value of information gained through opponent modeling will be the same in all situations. in particular  we expect the value to vary with the number of unseen tiles and with the number of tiles played by the opponent on his previous moves. efforts are currently underway to analyze when the opponent modeling is most helpful.
references
 berliner  1  hans berliner. the b* tree search algorithm: a best-first proof procedure. artif. intell.  1- 1  1.
 billings et al.  1  darse billings  aaron davidson  jonathan schaeffer  and duane szafron. the challenge of poker. artif. intell.  1-1  1.
 bolstad  1  william bolstad. introduction to bayesian statistics. wiley  indianapolis  in  1.
 edley and williams  1  joe edley and john d. williams. everything scrabble. pocket books  new york  1.
 ginsberg  1  m. l. ginsberg. gib: steps toward an expert-level bridge-playing program. in proceedings of the sixteenth international joint conference on artificial intelligence  ijcai-1   pages 1  1.
 littman  1  michael lederman littman. algorithms for sequential decision making. technical report cs-1  1.
 merriam-webster  1  merriam-webster. the official scrabble players dictionary. merriam-webster  1.
 ramsey and schafer  1  fred l. ramsey and daniel w. schafer. the statistical sleuth: a course in methods of data analysis. duxbury  pacific grove  ca  1.
 russell and norvig  1  stuart russell and peter norvig. artificial intelligence: a modern approach. prentice-hall  englewood cliffs  nj  1nd edition edition  1.
 sheppard  1  brian sheppard. world-championshipcaliber scrabble. artif. intell.  1-1  1.
1 variants of scrabble have been developed for many different languages. here we restrict our focus to the original english version.
1 to avoid legal issues  quackle does not officially have anything to do with scrabble. 