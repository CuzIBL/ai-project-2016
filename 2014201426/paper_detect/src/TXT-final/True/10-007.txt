 
　　　the use of a semantic network to aid in the deductive search process of a question-answering system is described. the semantic network is based on an adaptation of the predicate calculus. it makes available user-supplied  domain-dependent info mat ion so as to permit semantic data to be 
used during the search process. 
　　　three ways are discussed in which semantic information may be used. these are: 
 a  to apply semantic information during the pattern-matching process. 
 b  to apply semantic well-formedness tests to query and data inputs. 
 c  to determine when subproblems are fullysolved   i . e .   they have no solutions other than a fixed  f i n i t e number . 
　　　an example is provided which illustrates the use of a semantic network to perform each of the above functions. 
1. introduction 
　　　semantic networks have been used primarily in natural language applications to help disam-
biguate sentences and to understand natural language text. in this paper we consider the use 
of a semantic network to aid in the deductive search process of a question-answering  qa system. the semantic network is based on an adaptation of the predicate calculus and is described only briefly in this paper and more extensively by mcskimin and minker  mcskimin  1  and mcskimin and minker  . terminology from the predicate calculus w i l l be used throughout the paper. 
　　　three ways w i l l be discussed in which semantic information may be applied to help restrict deductive searches. these are: 
 1  to apply semantic information during the pattern-matching process  unification a l gorithin . most current pat tern-matching systems are based solely on syntactic tests. using the semantic network  semantic constraints may be applied during the patternmatching process to inhibit data base assertions and general axioms that are semantical!}' irrelevant to the search from entering into the deductive search space. 
 1j to apply semantic well-formedness tests to query and data base assertions input to the system so as to reject queries that have no answer because they violate semantic restrictions. thus  it should be possible to determine that a query such as  who is the person who is both father and the mother of a given individual n is not answerable. 
 1  to identify those queries which have a known maximum number of solutions so as to terminate searches for additional answers once the known fixed number is found. 
　　　the semantic network discussed in this paper is described briefly in section 1. in section 1  
we describe how the semantic network may be used to solve some of the problems associated with the above items. an example which illustrates the use of the semantic network is presented in section 1. a summary of the work and future directions is given in section 1. 
	1. 	seniantjc 	network 
　　　although the term 'semantic network' has been used extensively in the literature  there is no universal agreement as to what constitutes such a network. hence  we shall define the term in the context of this paper. 
　　　the semantic network to be described arose out of the need to provide meaning to objects in a domain and to statements made about these objects so as to make deductive searches more eff i c i e n t . although the semantic network developed is used in deductive searches  it nevertheless 
bears considerable relationship to those developed through the need to understand natural language by computers. the semantic network developed by schubert   for example  bears many similarities to the one used here. 
　　　the semantic network described here is an adaptation of the predicate calculus and is able to express quantification  functions  terms and logical connectives. the adaptation is based upon the notation of fisimian and minker  fishman   fishman and minker    who modified predicate calculus clause notation to handle sets of objects that have the same template structure. 
　　　thje article by schubert  discusses many semantic network representations used for natural language processing  and surveys the literature so that we neither refer to nor compare our 	work on semantic networks with that achieved by others. 
	form convenient for use. 	coasequently  a major 
matural 	lanrnj age-1 	: mcsk imin 
1 　　　in order to implement the techniques described in the introduction  domain-dependent information must be stored in the computer in a 
part of this research has concerned the identification of the types of semantic information to be stored  and the development of structures in which to store the information. to this end  a collection of structures termed the  semantic network  
has been developed which contains a l l information available to the question-answering system. 
     the semantic  network consists of four components:  1  the semantic graph which specifies the set-theoretic relation between named subsets of the domain;  1  the data base of assertions and inference rules;  1 the semantic form space which defines the semantic constraints placed on arguments of relational n-tuples; and  1  the dictionary which defines the set membership for each element of the domain. all four components of the semantic network are used by the techniques described above for making the qa process more efficient. illustrations of how this information is used will be given in the next section. 
 a} the semantic graph 
     the major emphasis of this effort is the investigation of techniques by which user-supplied semantic information may be stored in a computer and used to make the deductive inference process more efficient. the approach taken is to define explicitly the' contents of the domain of discourse d as well as the relationships in which various subsets of the domain may occur. 
     to this end  much of the work has involved the investigation of how one might subdivide the domain d into a finite number of named subsets sj such that all elements of each s  have some set of properties in common. these sets are expressed as boolean category expressions  bce . examples are: senatord male -liberal  state  judge f  lawyer. the names  senator    state  and  judge  are examples of what are defined to be the simplest type of bce possible and are called semantic categories. a bce is any arbitrary combination of categories using the set operations of union 
 ll   intersection  n  and complement  - . 	it is necessary to subdivide the domain d into subsets since certain relational statements may only be 
made about specified subsets of d  and one would like to make these subsets explicit rather than implicit. this subdivision is specified by a semantic graph gs which defines how each category c is subdivided into subsets c1 c1 ... cn and how each of the cj is similarly defined. figure 1 shows an example of such a graph. note that both animate and living are the superset of animal; however animate is the superset of robot which is disjoint from living  and living is the superset of plant which is disjoint from animate. thus  animate and living o v e r l a p . 
     subdividing d in this manner and defining where in the hierarchy each domain element lives  the function of the dictionary   has several advantages over expressing set memberships by unary relations. in particular  it should be computationally more efficient to perform trivial set membership inference using such a structure rather than by using unary relations. thus  sirica ♀ judge might be stored in the dictionary rather than storing the unit clause judge sirica  in the data base. the rationale for this choice is given in mcskimin . 
 b  data base 
     assertions are facts  whereas general axioms are used to infer assertions about domain elements that are otherwise stored implicitly in the data base. both types are stored in a  parallel clause  notation  termed n-o notation  an extension of the n-representation of fishman and minker. an example of an assertion in n-o notation is:   a x y   {{  parent /a  ruth herb /x  lanne carol jim /y}} . the assertion states that ruth and herb are the parents of anne  carol and jim. an example of a 
general axiom is:    a x  y.  v  1  x  y   {{  res ide /a  congressperson/x state/y  represent /b 1 . the axiom states that for all    1  x  and y  if the object x is in the set congressperson  and the object a is the predicate  reside  and x i resides in 



and the two ii-a literals would be prevented from unifying. thus  clause  1  would never be entered into the search space  so that it would not lead 
to a deductive search path  thereby decreasing the time and space used over that of a purely syntactic pattern match. 
　　semantic unification is applied during the deductive search process. 	it is also applied when one is entering new facts or general rules into the system  and when a query is entered. 	these are described in the following sections. 
1 	semantic well-formedness of n-o clauses 
　　one way in which the n-o unification algorithm may be used is to perform semantic well-formedness tests on n-o clauses input to a quest ion-answering system  n-o clauses are used in two different ways: both as assertions and general axioms to be stored in the data base  and as questions posed to the system. as noted previously  the data base comprises one part of the semantic network. the data base stores facts about members of the domain  i.e.  assertions  and provides general axioms that are used to deduce implicit assertions from those already known. both of these are stored as it-a clauses. 
　　the semantic form space defines how domain elements may interact; that is  in what combinations they may co-occur in n-o clauses of the system. in particular  semantic forms define the subsets of the domain univ from which arguments 
of relations must be chosen. 	it is necessary that all data base clauses conform to these rules. if data base clauses were stored that did not conform with these rules  incorrect deductions could 
be generated. 
　　in addition  when a query is posed to a qa system  it is useful to know if it is potentially unanswerable. a query may be unanswerable for several reasons. if a query makes reference to domain elements that  are unknown to the system  then it is very unlikely that the questions about that object could be answered. 
　　a query could also be unanswerable because it violates the constraints specified by the semantic form space. 	thus  if one asked whether president carter voted for a certain congressional b i l l   the system should answer that the question was not-
well -formed since only members of congress may vote for bills and carter is not a member of congress. naturally  doing so requires the availability of a complete semantic network including dictionary  semantic graph  and semantic form space. by rejecting such a query  it is possible to avoid a futile search for an answer which  assuming the data base is consistent  will never be found. 
　　the purpose of the n-o unification algorithm is to detect such discrepancies in both data base clauses and queries. 	this is done by unifying each ii-a literal l of an input clause against all semantic forms  which are stored in ii-o clause 
representation themselves . 	if some instance of the ii-a literal l fails to unify with any n-o semantic form in the semantic space  then that instance of the n-o literal l does not conform with semantics because at least one of its arguments conflicts with the corresponding argument of all semantic forms for that n-tuple size. 
　　　although some instances of the n-o literal l might fail to unify with any semantic form  others may succeed. what is desirable therefore  is to transform a ii-o clause input to the system into one  or perhaps several  clauses that are entirely well-formed. these clauses may then be entered into the data base or input to the deductive 
mechanism as appropriate. those instances failing to unify should be isolated and the user informed of the error. 	the semantic well-formedness algorithm which does all of these things is given by mcskimin. 
　　　an important part of the well-formedness algorithm is the unification of input literals against the semantic form space. each semantic form p =  t  j   consists of a template t of the form:  vo vj ... vn  v s and a n-o set  k the tuple  v 1  ... v n   is called the distinguished l i t eral of f  and the literals in s are called the semantic literals of p. 
　　　unifying substitutions are also applied to the semantic literals which are carried along dur-
ing the process   appended to the query  during the 
deductive search to perform further semantic checks on a literal by retrieving or inferring information from the data base  rather than the semantic space . 
　　　the tuple v =  vq vi ... v n   along with the substitutions for the placeholder variables v-j occurring in * determine what elements of the domain may co-occur in arguments of an  n+1  tuple. if a portion of an input literal h unifies with some semantic form f on literal v  then that combination of predicate and domain elements is considered well-formed. if a literal l does not unify with any semantic form  then it is not well-formed since it conflicts with all possible ways that 
domain elements may be combined. 
　　　an example of semantic well-formedness  and how the semantic form s is used will now be given. 
example: let f -   u x y  v b x y  {{ m /a  female/x  animal/yy  equal /♀}}  be a semantic form that determines the well -formedness of the  mother  predicate.  a x y  is the distinguished 1 iteral in the semantic form. the semantic literal  1 x y  is used to indicate that if x and y are equal then a semantic conflict has been detected. for example  the following query  asking if mary is her own mother  when resolved with the semantic form f  yields the new clause    1 x y   {{imj/a   mary /x   mary /y   equall/p  }  . 
the inferred n-o literal   b x y  {{  f jial /1   mary /x  mary /y}}   is not unified against the semantic forms since it descended from a semantic literal. thus  all literals that came from the query have been successfully unified against the semantic form. the literal that remains is then 
appended to the query to form the new query: 
% a x y  v  |1 x y  {{ m /cx   mary /x   mary /y  
 equal /1}k 
before the proof mechanism starts to answer 

matural language-1 : mcsklmln 
1 

the query  a test is made to determine if there are any l i t e r a l s eligible for predicate evaliiation. if there are  then they are evaluated. thus  in this case  the proof mechanism evaluates the l i t e r al  1 x y  to true and the entire clause is therefore removed from the search space  which indicates that the question is unanswerable. if the l i t e r a l s appended to the query are not eligible for predicate evaluation  they are treated as any other l i t e r a l and must be resolved away in order for the query to be answered. 
       in this section it lias been shown how semant i c constraints may be used to reject semantical!y inconsistent queries and data base assertions. the third use of the semantic network is given in the following section. 
1 	semantic actions in the search space 
       a major problem facing any problem solving system is the growth of the search space. 	when the problem to be solved is complicated  the search space grows and usually  when a solution is 
not found  one runs out of machine work-space rather than time. one can use knowledge about  the problem domain to help decrease the workspace needed. 
1.1 	representing counting restrictions 
       a natural candidate for decreasing the workspace is to have knowledge concerning predicates. in particular  one might refer to counting predicates as ones in which there can be either a fixed or an upper bound to the number of solutions to the problem. for example  when referring to the u.s. senate  there are two senators who represent one state. thus  if one is searching for an answer to a subproblem which concerns senators who represent maryland  only a maximum of two may be found in the system. 
       to take advantage of counting predicates  counting information must be represented in the semantic network  and a bookkeeping mechanism must exist during the search process to keep track of 
when a solution has been found  and when a l l possible solutions have been found. we sketch how this is accomplished below.  see mcskimin for details.  
       to motivate the discussion  consider the following query   who represents the states of new york or new jersey  . the query  in n-o notation may be given in negated form as: f  a x y   {{ represent *   ny nj /y}}  . information of a general nature concerning the predicate represent is contained in the semantic form space. thus  it is desired to denote that two senators represent every state  and that there are 1 representatives for nj and 1 from ny  and that each senator or congressman can represent at most one state. 
       the above semantic information can be represented in the semantic form space as  
f: 	c a x y  {{ represent /q senator#l/x state#1/y} 
	{ represent /a  rep#l/x  	 nj #1/y  
{ represent /a repfa/x  ny #1/y}} . 
by the notation b #m/v  is meant  that each element of a boolean category expression  bce   b  can occur in at most m distinct n-tuplcs which unify with that particular substitution set. 
       the query  when tested against a semantic form during a well-formedness test is modified to reflect the above possibilities. 	thus  q becomes 
q1: h a x y  {  represem  /a scnatorfl/x  ny nj #yy { represent /a rep#i1x   njl#1/yl { represent /a rej #l/x   ny|#1/y}}j. 
　　　for every substitution set cpi of a predicate there is associated a semantic set count  ssc   
which represents the number of possible solutions that can be found relative to the predicate. let the substitution set cp be given by  cp = {s 1 //l/v 1   siftiii/vj ...  s n #m n /v n j. then it is easy to see 
that 	n 
	ssc = min 	 card s.    m.   
	i-1 	l 
where  . ard sj   is the cardinality of the set s.  and m-j  is the element semantic count. thus  for cp = { reprrsbnrr /cx senatorftl/x   ny nj fl1/y   sso inin ioo-l 1 =1  where card  senator  =1. tliat is  there are only 1 possible solutions - the two senators from each state for the particular substitution set. if one sums the ssc over a l l substitution sets relative to the subproblem   l i t e r a l     one obtains the total possible solutions. if a l l solutions are found for a l l substitution sets  the l i t e r a l is said to be f u l l y solved. for the single subproblem associated with the sample query there are 1+1 possible semantic solutions. 
　　　the syntactic count  sc  for a substitution set is simply the number of possible entries in the relation  and is given by sc = ff card s- . i=l 	1 
this number is always greater than or equal to the semantic set count  and generally is considerably larger. in particular sc-1 for the above ex-
ample. 
　　　ciiven an n-o literal in the search space  a target syntactic count  tsc is specified for each substitution set cp/ for each l i t e r a l   and is defined as tscj *  ′cj -sscj  . when a n-o literal is to be solved  it is removed from the clause and placed in a special l i s t . the literal on the l i s t is initially given the count  equal to sc. as unique solutions are found for the l i t e r a l   they are subtracted out of the substitution set  and the count of the literal initially set to sc is decremented by the number of unique solutions found. when the count for the literal on the list equals tsc  then the literal is fully solved. 
　　　to take advantage of counting predicates  it is necessary to know  when  during the search process  a literal has been solved  and if so  whether the literal has been fully solved. in the environment of question-answering systems  fishman  1  has experimental evidence which indicates that linear resolution with selection function  sl resolution   developed by kowalski and 
kuehner   and independently by loveland  1   who termed it model elimination   or a variant thereof  will be used for the inference 

natnral 	lanrua ke-1: mcskimin 
1 k 

mechanism. sl resolution is very convenient to use since one knows exactly when a literal has been solved. this occurs when truncation takes place. the bookkeeping associated with sl resolution permits one to backup to the clause where one first started to search for a solution to the l i t eral. it is at the clause where one first starts to search for a solution to the literal that one 
wants to initiate semantic actions. 
     three types of semantic actions may be taken when fully solved substitution sets of a search space literal l = l   are found. starting at the clause in which the fully solved substitution set appears  one must remove from the search space each substitution set that has been fully solved. this will inhibit any further clauses from being resolved against  the clause. if  all resolvents from the n-a literal have been found  some of the resolvents may not yet have been entered into the workspace. in this case  a pointer to the resolvent set would exist  and could be deleted. the reason for inhibiting any additional clauses from entering the search space is because all solutions have already been found  and no other solutions are possible. by bringing in additional clauses  one is merely trying to find another solution via a different path. the best that can result is that a duplicate solution will be found. 
if all substitution sets cp; become fully 
solved  then the entire subproblem l= l/i   is fully solved  all further resolvents or potential resolvents of i should be deleted. thus all further interactions between l and the data base are avoided. the semantic action of removing fully 
 solved sets and subproblems can thus potentially save a great deal in search effort. 
     unfortunately  the interactions  i.e.  resolution operations  between literal l and data base clauses are seldom serial in nature. rather  itis often the case that several interactions may proceed at the same time as cooperating processes 
 or coroutines  controlled by the search strategy. as a consequence  even though some literal l becomes fully solved  there may be deductions in progress for l that  if continued may duplicate solutions already found. therefore  ideally  these processes should be terminated. thus  the second type of semantic action taken is to prune possible redundant derivation trees from the search space. a convenient data structure to facilitate pruning is one in which the immediate resolvents of a clause are linked together in a list  where each clause in the list points to its parent clause  and the parent clause points to the first and last entries in the list  i.e.  it is a binary tree . pruning in such a search space data structure is straightforward  and is not discussed further here. 
     the third type of semantic action concerns the literals of generated clauses in redundant derivation trees. as each clause  t is generated by resolution or factoring  the search strategy may select a literal from  t to be resolved against the data base. the literal might be on a list of literals waiting to be resolved  for example  see minker et al.   or in the process of being resolved. leaving such a literal there will permit it to interact with the data base  thus producing more unnecessary deductions. therefore  if such a list exists  the selected literals from all clauses of a redundant derivation must be removed from the list and resolvents in process or that liave been found must be terminated or deleted as the case may be. 
     the following section illustrates how the above techniques may be used together in answering a query. 
1. an example of the use of semantics in a qa system 
     the data base used in this example consists of assertions and general rules that might be useful in a political context. assume there are many 
assertions that state where a member of congress 
1egally resides; i.e.  
a :  cx x y  l{  rhsldl /a  tbeall mathias holt ...  hogan gude /x  mdj/yj  
a. : 	{  residh/cx   buckley javits chisholm  ... abzugj/x  ny /y } 
these assertions mav be used to derive the state a member of congress represents by the following general rule: 
r  :  '  a x y  v  i x y   {{  restdej/u  congress/x  state/y   represent/1 }  . 
     in addition  there might be several axioms that are used to deduce whether a member of congress supports a special interest group  such as organized labor  by referencing numerical ratings established by different lobbying groups  e.g.  
cope  the committee on political education of the aflc1 . for instance if a senator or representative lias a cope rating of 1  on a 1 scale  then one may conclude that he  she  supports organized labor. many of these rules may be stored as well as other general rules that deduce whether one supports some state  country  or interest group. these rules are given below.1 
r. : k a x y  v  e x y   {{  cope j /a  congress/x  
r1/yt  support /1  labor/z } 
py 	{  nsc /a congress/x  
r1/y1 	 supportj/1  defense/z}  
r1: 	ka x y  v  b x y  {{  represent /ex congress/x  state/y  	 support /1 } 	 . 
the last rule states that if a member of congress represents a state  then he or she would be expected to support that state. 
     to derive whether one would support a special-interest group  the ratings of each senator and representative could be stored as assertions: 
a~:  a x y  {{ nsc /a  mathias cranston ...  mitchell /x /y}  
j
note: nsc = nat. security council  a defense lobby; nfu = nat. farm union; and lcv = league 
of conservation voters; r1loo = a category containing all integers from 1 to 1. 

natural 	lankiia*e-1: mcskimfn 
1 

the semantic set count is calculated. in this case  there are soi 1=1 syntactic solutions and ss1 semantic solutions. thus  the value tsc is stored with the represent 
literal l and referenced whenever new solutions 
are found. l is then modified to remove those solutions found so far. when the syntactic count of l equals tsc=1  l will be fully solved. this process is illustrated by the proof tree of figure 1 using sl resolution. 
1  the general rule r1 is resolved with since no direct match is possible. since senator 
c congress and  md ny   state  resolvent 1 is formed. 
1  the reside literal l is now the right-most  and only  literal in the sl resolvent  and is thus solved next. the element set counts from semantic form i;1 are read  and the number of solutions for l is calculated as  ssc=min 1-l 1-v  = 1  where  v  means an unknown number of solutions are possible. the target syntactic count is calculated as tso l1 -1  and stored with the reside literal. thus  1 solutions must be found before the literal is considered fully solved. since it is semantically impossible for 1 senators to reside in two states  this situation will never occur. fortunately  the reside literal will become indirectly fully solved because its ancestor the represent literal  will be fully solved. this process is described below. 
1  many reside assertions are stored in the data base; only those instances are allowed to enter the search space that involve senators from md or ny -
all representatives from md and ny and any resident of some other state is excluded. since {beall  mathias  buckley  javits} c senator they are the only ones that pass through the n-o unification algorithm. 
1  since the a-literal  appears as the 
right-most literal of clause 1  it implies that a subproblem lias been solved. up-links are followed 
until appears without brackets in clause 1  denoting the point at which the current deductive chain began as indicated by the dotted lines of figure 1 . the solutions found are: 
by the procedure described in mcskimin  these solutions are removed from clause 1  whose syntactic count is 1  leaving a new clause whose syntactic count equals 1. since this does not equal the target syntactic count of 1  no semantic actions can be taken. 
1  
from clause 1  yielding clause 1. 
1  another subproblem has been solved since is the right-most literal of clause 1. up-links are followed until first appears without brackets  clause 1 . since four solutions have been found for the literal  its syntactic count becomes 1. since this equals the target syntactic count  is therefore removed from the search space to prevent other inference rules from attempting to deduce the senators from md or 
rf*-1: mcskimin 
1 

ny. 	in addition  the literal hy x z  from clause 
1 is removed also since all residents of md and ny of interest have been found. thus  even though this literal had 1 solutions left to find  it could be pruned since it was a. descendant of a literal which was fully solved. these are examples of semantic actions. 
1  the a-literal  m  x z j is next truncated from clause 1 yielding clause s  which is next solved in a similar fashion. 
　　this example lias illustrated how user-supplied semantic information may be incorporated within the framework of predicate calculus so as to make the deductive inference process more efficient. three methods were shown to be effective in reducing the amount of effort involved in answering a query: semantic well-formedness tests  semantic operator selection  and semantic actions. naturally  these are not beneficial for all data bases; conditions under which each is expected to prove most beneficial are given by mcskimin. 
1. summary 
     we have described three basic uses of a semantic network:  1  to semantic-ally unify two literals.  1  to perform semantic well-formedness tests.  1  to perform semantic actions. semantic unification serves to decrease the number of deductions that one may have over syntactic methods. semantic well-formedness tests serve to delete data from entering the data base if they are not soman tically well-formed relative to the domain of application. semantic well-formedness tests may also introduce new literals into the search space which 
mast be satisfied for a solution to be found. semantic actions serve to use counting information to determine when a literal has been fully solved  and to take actions based upon this information. these actions serve to delimit the search space. 

　　　an alternative approach to the one described here would be to build into the system unary predicates rather than set information as represented in the semantic graph. we do not believe that such an approach would be effective since the addition of axioms to the system to represent transitive superset relations and disjoint relations would be too 
cumbersome to deal with in practice and would lead to very long proofs. 
　　　although the approach appears to be viable  we cannot yet provide experience which would demonstrate its effectiveness. we expect to determine its effectiveness. one factor is the data struc-
ture to be used to perform pattern-directed search for clauses which semantically and syntactically 
match l i t e r a l s in the data base. a second factor w i l l be the amount of time required to perform the conflict algorithm. this algorithm determines whetlicr or not two boolean category expressions are semantically consistent. if the conflict algorithm is too time consuming  it may defeat the whole 
approach and make it comparable to a s t r i c t l y syntactic approach. further analysis is needed to estimate whether the effort expended in executing the semantic routines w i l l exceed the extra effort incurred if they are not performed at a l l . 
　　　we believe that an advantage will be shown for the techniques described here. we are currently implementing a system  mrpps 1 which incorporates the techniques described here. we expect to experiment with the system to determine how well it w i l l work on large data bases. 
ac kno w 1 ed g emen t s 
　　　the authors wish to express their appreciation to the national science foundation for the supjx rt that they liave provided for this effort under nsf cj-1. they would also like to express their appreciation to mr. guy zanon for his careful reading of the paper and his many suggestions. 
