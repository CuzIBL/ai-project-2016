 
　　　we report here on the goals and status of an i n t e l l i g e n t t u t o r i n g system being developed for novice pascal programmers. we also describe our approach to program understanding  bug f i n d i n g   and the inference of misconceptions. examples of the system's c a p a b i l i t i e s are given. 
introduction 
　　　we a l l know - and grumble - about the error messages that one gets from a computer system. that problem is magnified for the novice programmer who is learning a f i r s t programming language. with the number of individuals who are learning programming rapidly growing  there is a clear need for i n t e l l i g e n t t u t o r i n g systems which can assist the novice at a most c r i t i c a l time: when he/she is alone  one-on-one  with the beast. 
objectives and status of system 
　　　we are b u i l d i n g an i n t e l l i g e n t t u t o r i n g system  meno-ii  t a i l o r e d to the needs of novice pascal programmers. the goals of meno-ii are: 
* catch run-time  semantic and pragmatic  bugs in the student programs ** 
- focus on introductory programs: s t r a i g h t l i n e   branching  simple looping. 
- must be fast and robust; at least 1% of student programs are buggy 
* suggest misconceptions in the students' heads which underlie the bugs 
-   t a l k   in language which is close to programming so student w i l l understand 
* this work was supported by the army research i n s t i t u t e for the behavioral and social sciences  under ari grant no. mda1-c-o1. any opinions  f i n d i n g s   conclusions or recommendations expressed in t h i s report are those of the authors  and do not necessarily r e f l e c t the views of the u.s. government. 
   while i n t e r e s t i n g   we are not concerning ourselves with syntax errors  see   1     . 
* i n s t r u c t / t u t o r the student with respect to the misconceptions. 
the current status of the system corresponding to these objectives i s : 
* meno-ii can find over two dozen bugs with respect to r e p e t i t i o n and assignment 
* meno-ii can suggest underlying misconceptions for a subset of those bugs 
* t u t o r i n g has 	not 	yet 	been 	implemented 	in meno-ii. 
	leverage on program understanding: 	the bug finder 
　　　the bug finder must be able to recognize two types of bugs: problem independent ones  and problem dependent ones. an example of the former type is the e x p l i c i t inclusion of an increment to the index variable in a for loop. bugs of t h i s sort r e f l e c t confusion about the semantics of the various programming language constructs. 
　　　in order to recognize problem dependent bugs  however  the bug finder must be t o l d what the program is supposed to do; oftentimes a student program w i l l run  but it w i l l solve the  wrong  problem. for example  in figure 1a  we depict a problem .for which the the program in figure 1b is the correct s o l u t i o n ; the program in figure 1c does not solve the problem  but does in fact execute. in other i n t e l l i g e n t t u t o r i n g systems  the student provided a s p e c i f i c i a t i o n of the goals of the program   e . g .     1     . in contrast  our approach is to have the teacher provide the s p e c i f i c a t i o n   since everyone in the course w i l l be working on the same problem. 
　　　the vehicle for t h i s   i n t e n t i o n s p e c i f i c a t i o n   is a problem description language  pdl  which we are developing for introductory programming problems. the pdl allows us to specify the components of a program solution to the intended problem. in figure 1. the pdl s o l u t i o n for the problem in figure 1 is given. 
　　　this language is based on what an expert programmer might know about problems of t h i s type. in p a r t i c u l a r   t h i s knowledge is focussed on types of looping plans and the various roles which variables play in programs. for example  the 
1 
　　　
program in figure 1b i l l u s t r a t e s what we c a l l the new value controlled running total loop plan; it is j u s t a special case of the running  total loop plan  in which the loop  while accumulating a t o t a l   is c o n t r o l l e d by the value of the read variable   i . e .   the new  value v a r i a b l e   . this knowledge is described at greater length in   1   . this characterization of programming knowledge draws on the work of  1   1   1  and  1. 
       the bug finder is given a pdl s p e c i f i c a t i o n of the program s o l u t i o n ; c u r r e n t l y t h i s is in a 
       procedural form  but eventually it w i l l be table d r i v e n . the bug finder then parses as a student program into a syntax tree representation. in order to f a c i l i t a t e speedy r e t r i e v a l   t h i s structure has been augmented w i t h :  1  extra l i n k s   e . g .   a l l occurrences of a variable are chained t o g e t h e r      1  semantic annotations at a node which summarize the subtree below   e . g .   the statement i:=i+1 would be summarized as 
 increment-by-one  . the pdl s o l u t i o n description is then matched against t h i s augmented parse t r e e . for example  in comparing the description in figure 1 with the program in figure 1c  the bug 
finder 	recognizes 	that 	the 	new value variable  
score  should have been modified in the loop by a read  as opposed to being modified l i k e a counter. bugs are then reported to the tutor module  described below . 
　　　the guiding metaphor of the bug finder is pattern matching at the loop plan l e v e l . thus  two d i f f e r e n t programs  which solve the same 
problem can be recognized as such. the bug finder keys o f f the loop being used and c a l l s in knowledge specialized to that p a r t i c u l a r loop to help in the matching. currently  the bug finder does not do exhaustive control or data flow analysis; it does do s p a t i a l data flow analysis to recognize t h a t : 
x := sum; 
　　　sum := x = nu value; is equivalent to sum := sum + nu  value. nor do we map the progam into a logic formalism and do the analysis in t h i s l a t t e r representation; we feel that without extensive t r a n s l a t i o n the explanation that would r e s u l t from t h i s type of approach would be   t o far away  from the student's understanding of the program to be of much help. 
tying bugs to misconceptions: building a model of the student 
　　　given a bug in the program  one needs to i n f e r the underlying misconceptions  in the head of the student  which could have caused the bug     1   . based on the expert's plan knowledge we have b u i l t a knowledge network  the competence model  which describes the correct components of a loop and t h e i r r e l a t i o n s h i p s . we also have b u i l t 
a
  bug model which s p e c i f i e s the surface c h a r a c t e r i s t i c s in the program of the common bugs which we have i d e n t i f i e d   1    1   . f i n a l l y   a 
 set of inference routines t i e the bug model to the competence model in order to derive the 
performance model  i . e .   a model of the student's possible misconceptions. both the bug model and the competence model are implemented in a version of kl-one     1     which we have augmented with some special arcs to f a c i l i t a t e quick r e t r i e v a l . 
for example  the bug in the program in figure 
1c could have been caused by the following misconceptions  which would be inferred by our tutor module:  1  the student simply misunderstood the problem   1  the student did not understand how to get new  successive values  or  1  the student did not understand how the read statement worked. for example  the student might have thought that the variable score was declared to be of  type read  and that if 1 were to be added to i t   then the system  would know  to do a read. 
　　　currently  the competence model contains about 1 concepts which represent loop plans  variable r o l e s   and the various r e l a t i o n s h i p s among these e n t i t i e s . the bug model contains approximately 1 bugs associated p r i m a r i l y with the improper i n i t i a l i z a t i o n and modification of various v a r i a b l e s . we are expanding both networks  and we are developing rules which can better diagnose misconceptions   e . g .   if there are m u l t i p l e   related bugs  then t h i s should help focus the diagnosis . s t i l l to be worked in is the h i s t o r y of the student's i n t e r a c t i o n s . 
tutoring 
　　　the current system functions as a  smart compiler ; it finds bugs  diagnoses misconceptions  and simply l i s t s t h i s analysis to the student. we plan to have the tutor engage in a dialogue with the student for better diagnosis and i n s t r u c t i o n purposes. however  we do not plan on allowing the user to communicate via natural language; r a t h e r   we plan to use dynamically generated m u l t i p l e choice questions presented via a menu screen. we w i l l   however  allow the user to submit program fragments in response to questions from the system. with t h i s system  we want to explore the range of possible i n t e r a c t i o n scenarios. in p a r t i c u l a r   our objective is to  parameterize  the amount and type of i n t e r a c t i o n in order to i n s t r u c t along the continuum from t u t o r i n g   1  to coaching     1     . 
concluding remarks 
　　　there are a number of assumptions which underlie our approach  and which are s t i l l open questions. for example: 
1. can we define a pdl s u f f i c i e n t for the problems under consideration  we feel that t h i s w i l l be answered in the a f f i r m a t i v e . 
1. w i l l the pattern matching approach  without exhaustive data or control flow analysis be s u f f i c i e n t to handle the looping problems  can t h i s be extended to handle programs with procedures  can we continue h e u r i s t i c a l l y handling questions that t y p i c a l l y required rigorous deduction systems  these are the the most troublesome questions. 
　　　
1 
　　　
1. w i l l our analysis  in terms of plans and variable r o l e s   provide enough leverage into the students' thinking  since we do not see the h i s t o r y of the design  as m i l l e r ' s spade-1 system does     1       it is unclear whether we can s u f f i c i e n t l y reconstruct the student's plan from simply the raw code. 
　　　these are empirical questions which we plan to explore through tests of the system. in the f a l l semester of 1  we plan to t r y out meno-ii in a class of 1 students taking introductory pascal programming. they c e r t a i n l y w i l l exercise the system  and tax it to i t s l i m i t s . 
