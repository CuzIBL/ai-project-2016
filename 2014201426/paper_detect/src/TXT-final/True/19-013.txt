 
the issue of integrating inheritance rules into 
prolog has recently received some attention in literature. a prolog-based interpreter extended with a special  built-in mechanism for handling is a taxonomies has been built. the motivation for this work stems from two observations:  1  is a hierarchies are common in many domains  and  1  the issue of representing in prolog is a hierarchies  and the inheritance properties related to i t   is not so straightforward as it would seem at a first glance  especially whether time and space efficiency are required. the model underlying the proposed extension is shown and compared with relevant literature. we describe how some new capabilities have been added to a standard prolog interpreter in order to implement the extended interpreter. in particular  the unification algorithm and the management of some data areas have been modified. the space requirements and time performance of the extended interpreter are compared with those of the original standard prolog interpreter  and the results of a series of tests are discussed. 
	i 	introduction 
　　set inclusion and membership are quite general and intuitive relations in many applicative domains. some special built-in mechanisms for handling them were successfully applied to automatic theorem proving  1 1   and ultimately in logic programming  1 . the concept of property inheritance is the basis of such mechanisms. the programmer defines a property as a feature of every element in a class  instead of defining the property for each single element. classes are organized in hierarchies  often called is a taxonomies. the inheritance mechanism makes use of the taxonomies and reconstructs the original property. 
　　at a first glance  it seems that the prolog resolution rule is suitable for this kind of taxonomic reasoning. a straightforward way of describing taxonomies in prolog is the following. a class is represented as an one-argument predicate symbol. for each is a arc  i.e. membership  assert in the database a clause: cla1 name object name . 
1 	architectures and lanquaqe1 
where class name and object name are the two elements connected by the is a arc. for each s s arc  i.e. set inclusion  assert a clause: 
classjiame a  :- subclassjiame a . 
clauses for generic properties may refer to taxonomic predicates as follows: generic property .. a ..  :- ... class narae a  .. this approach  called top-down  is quite natural  but not efficient if we want to prove a property for an instantiated object. the reason is that the top-down approach is generative. prolog searches through the taxonomy until it finds the object  rather than directly access to its class and verify the consistence with the required class. thus if we are using the top-down approach for this kind of goals  the search time depends on the order in which classes and objects are generated. moreover  if the goal fails  search time is required in order to scan the whole taxonomy. 
　　as an alternative approach - let's call it bottom-up - we introduce two  or more  clauses of the form: 
claasjnaae  classjnaae    - 1 clasa narae a  :- superclass name a . -1-
with the following  informal  semantics. 
- 1 - class name is a subclass of itself. -1- class  name is a subclass of every class a provided that 1uperclass name is a subclass of a. the top class of the hierarchy is only subset of itself: topclass name topclass name . 
for each object a single clause must be given: 
objectjnarae a  :- object classjiame a . 
that is  objectjname is an instantiation of class a  if object class name is a subclass of a. 
membership is tested by asking a goal like: 
 - object name te1t clasb . 
　　this representation is efficient for this kind of goal. unfortunately  generative goals are quite difficult to formulate in the bottom-up approach. 
　　a mixed approach is useful  provided that a technique is employed in order to distinguish the top-down and the bottom-up clauses. the disadvantage in the mixed approach is that a lot of memory is required  because of the two different sets of clauses. 
it is widely accepted in literature that the 

inheritance mechanism should be embodied directly into the unification algorithm  rather than into resolution. the resulting system is hopefully more efficient than the standard prolog  when handling taxonomies. an ad-hoc mechanism is also a viable solution for improving declarativeness of logic programs  at least as regards the taxonomy mechanism. 
　　in order to support this assertion with some experimental evidence  we have built taxlog  a prolog interpreter which uses restricted variables for reasoning about classes and objects. taxlog finds a description of both of them in a userdefined taxonomy. taxlog implements a rather different model than login  1   in order to allow the programmer to define taxonomies having a class-metaclass structure  1 . we compared the performance of taxlog with standard prolog in a 
　　series of tests in order to measure: 
. the overhead involved by the taxonomic reasoning machinery  
. the time and space advantages that result in an intensive usage of the mechanism. 
　　section ii of this paper describes our informal model of taxonomic reasoning  and section i i i describes the relevant literature and discusses the differences between taxlog and other approaches. section iv contains the main implementation techniques we adopted for extending the capabilities of a standard prolog interpreter and for building taxlog. finally  in section v we report and discuss the results we obtained in some experiments  and compare the performance of the standard prolog interpreter with that of taxlog. 
ii taxonomies and objects in taxlog 
　　taxlog taxonomies are built up from nodes  which are denoted by constants  and two kinds of arcs  is a for membership and s s for set inclusion. three special primitives allow the programmer to define taxonomies. 
　　mkcateg class level  declares a new class to the system  and relates it with a level. the system actually uses the class level as a simple heuristics when an ss-relation must be proved. 
　　mkisa atom class  builds an is a arc between the atom and the class. the class is not required to be a leaf of the s s network; moreover  if any previous is a arc has been declared  the old edge will be deleted and substituted with the new one. 
　　mkss subclass class  builds an s s arc between subclass and class  assuming that subclass is a specialization of class. 
here follows an example of taxonomy definition. 
 - mkcateg european 1   mkcateg  c i tal ian  french  german  engl ish j 1   mkss  c i tal i an  french  german  engl i sh  europeanl   mkisa me italian . 
　　appendix 1 shows a user-friendly syntax for defining taxonomies. actually  this syntax is described by prolog clauses  and is loaded at initialization time. 
　　note that the same constant may be considered both as an object and a class; as an object it can be classified in a class by means of an is a edge. thus  in taxlog we can build taxonomies where superclasses are distinct from metaclasses. in the foregoing example  a metaclass may be defined: 
 - mkcateg nationality 1   mkisa citalian french german englishj  nationality . 
　　the issue of extending the prolog unification to an efficient use of taxonomies has been solved by introducing restricted variables  that is by allowing variables to be quantified over classes. in prolog terms  an atom and a variable restricted to a clasb are unifiable only if the atom is a member of the class. an atom is a member of each class linked with it by a chain of exactly one is a and zero or more s s arcs. this inheritance rule avoids some typical problems arising when no distinction is made between isa and ss arcs  in our example   me  is not a  nationality ! . 
　　taxlog interprets logic programs whose clauses are quite similar to prolog ones  except that variables can be restricted to the classes defined in the taxonomy. as an example of taxlog clause  consider the following  taken from  1 : 
happy x  :- like x y   got x y  x isa person. 
　　the constant person has been declared as a class. in the clause  x is a variable restricted to person  and y is unrestricted. the ' : ' binary operator separates a clause from the restriction declarations over the variables. the parser can recognize the precondition part of a clause from the restriction part  and build an internal structure for representing restricted variables. see appendix 1 for a brief description of the read and write primitives. 
　　the unification algorithm has been extended  and actually covers three new cases: 
. unify an atom and a restricted variable: this operation succeeds if the atom has boen declared as member of either the restriction class or a specialization of i t ; in every other case  including if the restriction class is a specialzation of the atom class  the unification fails; 
. unify an unbound variable and a restricted variable: the two variables share  and the same restriction constrains the unified variable; 
. unify two restricted variables; they are unified in the intersection of their restrictions. 
　　the user may submit taxlog any goal containing restricted variables; analogously a taxlog answer can be an atom  a structure  a restricted variable  
	montini 	1 

or an unrestricted variable. this fact distinguishes taxlog from traditional prolog interpreters  because taxlog answers can refer to classes  not purely to single objects  by means of restricted variables. note that this fact can avoid some confusing answers  that arise from an uncorrect mixing of classes and objects. thus even in answers we can distinguish properties of each object in a class from properties of a class as an object. for example  if we declared: 
 - mkisa doggy1 dog   mkisa doggy1 dog   mkisa dog animal species . 
and have the following clauses: barks a  : a isa dog. contains a zoology book  : a isa animalj1pecies. the goal barks x  produces the answer: x ＊  1 :  1 isa dog. 
while the equivalent prolog answer is: 
	x = doggy1; 	 ask an other solution  
x = doggy1 
the taxlog goal 
 - contains dog zoology book . 
succeeds  while the goal 
 - contains x.zoologybook  : x isa dog. 
fails  because the property  contained into the zoology book  refers to the class of dogs as a whole  not to individual dogs. 
　　there exists a suitable instantiation predicate  which allows the user to take taxlog answers back to prolog-style. this predicate extends decsystem-1 prolog current atom a  predicate  1 . the goal is successively satisfied by instantiating the variable a to the atoms in a system-dependent order. if a is a restricted variable  the goal will be satisfied exclusively by the atoms whose class satisfies the given restriction. we can use current atom in order to enumerate the atoms which are members of a class and of its specializations. in the  barks  example  a taxlog goal like: 
 - barks x   current atorn x . 
produces the very same sequence as prolog  
	there 	is a discrepancy 	between taxlog and 
prolog answers when some class at the lowest level of the taxonomy is empty. the discrepancy may be eliminated by applying the current atom predicate. for example  if no object has been declared member of the  dog  class  the taxlog goal barks x  produces the answer: 
　x   1 :  1 isa dog. but the taxlog goal: 
 - barks x   current atom x . 
fails  as well as barks x  submitted to prolog. 
i l l relevant literature 
　　mcskimin and minker  1  introduce the tt-a clause representation for first order predicate calculus  where a variable quantification method 
1 	architectures and languages 
over subsets of the universe of objects is used. variable restrictions are managed by a semantic unification algorithm. in a dictionary  semantic categories are related to constants  function domains and ranges  and predicates by means of membership relations. moreover  three kinds of relation interconnect semantic categories  that is superset  equality and disjointness. 
　　walther  1  extends the markgraf karl refutation procedure to a many-sorted theorem prover on the basis of its many-sorted calculus  where variables can be declared quantified over a sort. some experimental results are available. cohn  1  uses a sorting function to describe sort restrictions deriving from the argument positions of the function and predicate symbols that it occupies. 
　　finally  ait-kaci and nasr  1  propose psi-term unification as a built-in mechanism for handling is a taxonomies within prolog. 
　　our proposal differs from ait-kaci and nasr for a number of reasons. the main reason is that we distinguish is a and s s arcs  and thus enable metaclasses to be represented. in login there is no way of distinguish the class level from the object level  because both are considered as subtypes. 
　　an other difference between the two approaches is that login allows functor symbols to be unified according to the taxonomy  while taxlog forbids it. it is possible to perform this kind of taxonomic reasoning in taxlog by representing the taxonomic factor as an adjunctive argument of a general functor symbol  thus enabling the difference between type-constructor and functor being used in order to preserve the efficiency in unification. the functor unification is performed in taxlog as address comparison  while the inheritance property is entrusted to the simpler unification algorithm for constants. 
　　we think that the taxlog proposal may be considered  in a sense  complementary to login. many of the features introduced in login are quite interesting for supplying prolog with a suitable support for programming. in particular  we think that the three main representation improvements  non-fixed arity for terms with explicit labeling  tagged arguments  and compile time enforcement of taxonomic consistency should be effectively used in the design of prolog compilers. nevertheless  as a run time support  we think that taxlog is quite efficient  and provides the user with a clearer and more intuitive semantics. 
iv integrating taxonomies into a prolog interpreter 
　　a prototype version of the taxlog interpreter has been built by suitably extending an existing prolog interpreter  1   fully compatible with the standard described in  1 . the prototype is written in c language and currently runs on an at&t 

1 microcomputer under the unix tm * system v as operating system. 
　　the taxlog prototype interpreter currently implements all the functionalities described in the previous sections  except for the following restriction to the structure of taxonomies: each class is allowed to have only a single father. this  actual  limitation causes taxonomies to have a tree structure. 
　　the following modifications to the prolog interpreter have been done. 
　　a new system area has been defined for classes  besides the traditional execution stacks  local  global  trail stack   and the database. the category area contains the class descriptors and a representation for is  a and s s arcs. for each class record the following information is stored: 
. a pointer to the generalization class  
. a pointer to the list of specialization classes  
. a pointer to the class member list  
. the class level  
. a pointer to the atom denoting the class. 
　　two fields have been added to the atom internal structure  a pointer to the class denoted by the same string as the atom  and a pointer to the class the atom is a member of. 
　　restrictions on variables are actually represented as pointers to the category area. the resolution algorithm is substantially unchanged  but the unification algorithm has been extended as described in section i i . the stack record internal structure has been left unchanged. the trail stack mechanism only has been modified: when a restricted variable is instantiated  or is restricted to a more specific class  the old restriction is saved  together with the address of the variable. much care has been taken in order to use as little as possible space for the trail records. actually taxlog saves space for unrestricted variables  because it does not push on the trail the  undefined  value for them. during the backtracking phase  a test is performed on the second element on the top of the trail: if it is a restriction  i.e. a pointer to the category area   then this is the old restriction for the variable whose address is stored on the top of the trail. 
　　finally  the clause internal data structure contains a representation for restrictions on clause variables. actually  for a number of reasons restricted variables are classified as global. the clause representation consists thus of an array of initial values for global variables only. when a clause is selected for matching  the system builds two new contexts in the local and global stacks  and initializes the global stack record to the restrictions descripted in the clause. if no restricted variable appears  the clause 
 unix is a trademark of at&t bell laboratories. representation is almost identical to prolog but a 
flag indicating whether or not an initial global stack record exists in the clause representation. 
v performance comparison between prolog and taxlog 
　　some considerations and experiments have been made in order to compare the performance of taxlog and prolog and to measure  in terms both of required space and computation time  the overhead and the advantages involved by the extensions. 
a
* 	time efficiency 
　　we carried out two series of experiments for measuring time efficiency. much care has been taken in order to exclude data pollutions due to the presence of other users in the system. we took the tms  utime datum  and obtained it by means of the times system call. it represents the cpu time used by the calling process in order to execute operations in the user space  1 . the experiments took place with the operating system in single-user mode. 
1. 	time overhead due to the taxonomy mechanism 
　　in the first series of tests the programs do not make use of taxonomic reasoning at all. note that taxlog is an extension of prolog  thus we could use the very same source programs in our experiments for both the interpreters. 
table 1 - average execution times  1 runs   data in looths sec.  
procedure datum  nreverse 1ist1  qsort list1  deriv timeslo  deriv dividelo  deriv loglo  deriv ops1  serialise palin1  dbquery** dbquery prolog 
1 
1 .1 
1 
1 
1 
1 
1 
1 1 taxlog 
1 
1 
1 
1 
1 
1 
1 
1 1 ratio 
1 
1 
1 
1 
1 
1 
1 
1 
1 we took the test programs from warren  1 : 
   reverse  which inverts the terms of a list  applied to list1  a 1 element list; 
. qsort  a version of the quicksort algorithm  applied to the warren list1 list; 
  deriv  a program for computing symbolic derivatives  applied on four different arithmetic expressions  named timeslo  dividelo  loglo  and ops1; 
. serialise  which translates a given string into a list of numbers which represent the character 
**in the dbquery example  the system gives five answers. we reported in the table  respectively  the time for the first answer and the time for the refutation. 
	montini 	1 

codes  applied to the string palin1; 
. dbquery  which represents a simple query application on a little geographic database. table 1 summarizes the results of this series of tests. for the warren's examples  the overhead falls into the interval between 1% and 1% of the total execution time. 
　　the overhead does not depend on the total execution time. it is due exclusively to the higher complexity involved in the unification  because taxlog considers the case of restricted variables even if in these examples they do not appear. 
1. 	time advantages in using taxonomies 
　　in this second series of tests we measured the improvement which derives from an extensive use of the taxonomic reasoning capability. the testing program represents a simple query on a database. some properties in the database are defined by using objects and classes declared in a taxonomy. in the query some variables are restricted. 
　　two different versions have been built for each test program. in the standard prolog version  no restricted variable appears  while the taxlog version contains a description of the taxonomy in terms of the primitives we introduced. a number of difficulties has been faced in order to make significant the comparison between the two systems. first  even though the two systems interpret the same example  they give a different number of answers  because prolog instantiates variables to the constants which satisfy the goal  but taxlog generalizes answers as far as possible to categories. in order to have comparable results two kinds of measures have been taken: the firstanswer time  that is the time the system takes in order to find the first solution for the goal  and the refutation time  i.e. the time the interpreter takes to generate all solutions and then answer 
 no . 
　　second  first-answer times in a prolog interpreter are greatly dependent on the clause ordering: in a choice point the interpreter examines directly the correct branch only if it is the first in the database. first-answer times were taken with the database ordered in the most favourable way. note that the taxlog interpreter is very little sensitive to the order of the various parts of a taxonomy. thus  the first-answer time is the most favourable measure for prolog. on the contrary  the refutation time is fully independent from the clause ordering in the database for both systems  provided that no extra-logical feature  such as cut  assert  etc.  appears. in general  taxlog capabilities are exploited for refutation problems. 
　　third  two different kinds of query have been taken into consideration. in the first case there is a two-variable query: the interpreter satisfies 
1 	architectures and languages 
the goal by finding a suitable combination of values for the two variables. in the second case two constants appear instead of the variables: the interpreter proves that the query is satisfied by the two constants. two-variable queries have been measured  for taxlog  in two different ways: in the first  an answer is given in terms of restricted variables  in the second way the answer is made uniform to standard prolog by filtering it through the current atom primitive. 
　　fourth  the test programs for the two systems are not equal: it is therefore possible that different implementation techniques for the same program require different answer times. with respect to standard prolog  the two solutions  top-down and bottom-up  have been considered for the problem of searching through a taxonomy. note that for first-answer times with optimal ordering of clauses top-down and bottom-up are almost equivalent  because no true search is required. thus  only results for top-down are reported. the difference between the two approaches may be better appreciated for refutation times. 
　　finally  first-answer times for random clause ordering range from the first-answer time for optimal clause ordering  including it  to the refutation time  excluding i t   . thus the comparison of the two measures gives an idea of the answer times for increasingly more non-deterministic problems. 
　　in appendix 1 we report the test program for each version. 
first-answer times 
　　the test has been repeated for increasingly deeper taxonomies: the results  see table 1  show that first-order times linearly depend on the taxonomy depth. as the rate is much higher for prolog than for taxlog  we have proved that a single complex unification step is far more efficient than a taxonomic deduction with a simple unification algorithm. note that taxlog results for two-variable queries do not depend on the taxonomy size  because only one clause is used  and taxonomic information is not required  see appendix 1 . 
refutation times 
　　three groups of tests have been done  in order to measure the refutation time rate resulting in increasing  uniformly : . the number of objects per class  . the number of subclasses per class  . the depth of the taxonomy. 
　　all experiments for each group of tests make use of balanced taxonomies with a uniform number of objects per bottom-level class. table 1 shows the results for these tests. 

table 1 - average first-answer times 
	two constants 	twc   variables 
taxonomy prolog taxlog prolog taxlog taxlog depth top-down top-down   
1.1.1.1.1.1 1 1 1 1 1 
 1.1 	1 	1 	1 	1 
 1.1 	1 	1 	1 	1 1 	1 	1 	1 	1 	1 1 	1 	1 	1 	1 	1 1 	1 	1 	1 	1 	1 1 	1 	1 	1 	1 	1 1 	1 	1 	1 	1 	1 1 	1 	1 	1 	1 	1 1 	1 	1 	1 	1 	1 1 	1 	1 	1 	1 	1 1 	1 	1 	1 	1 	1 1 	1 	1 	1 	1 	1 
1 	1 	1 	1 	1 	1 1 	1 	1 	1 	1 	1 

         table 1 - average refutation times increasing the no. of objects per class. two variables 	two constants number of prolog taxlog taxlog prolog prolog taxlog objects 	top 	top 	bottom per class down 	down 	up 
1.1 	1 1 1 1 	1 
1.1 	1 	1 	1 1 	1 
1.1 	1 1 1 1 	1 
1.1 	1 	1 1 1 	1 
　　increasing the no. of subclasses per class. two variables 	two constants number of prolog taxlog taxlog prolog prolog taxlog subclasses top 	  	top 	bottom 
per class down 	down 	up 
1.1 	1 1. .1.1 	1 	1 
1.1 	1 1  .1.1.1 	1 
1.1 	1 1  .1.1 	1 	1 
1.1 	1 1 .1.1 	1 	1 
increasing the depth of the taxonomy. 
	two variables 	two constants 
depth 	prolog taxlog taj dog prolog prolog taxlog 
of the 	top 	# 	top 	bottom 
taxonomy 	down 	down 	up 
1.1 	1 1  .1.1.1 	1 
1.1.1. .1.1.1.1 1 1 1  .1.1.1.1 
	1 	1 	1 1. .1.1.1 	1 

 the results in these columns refer to answer times for queries filtered through the current atom primitive  in order to take taxlog answers back to prolog style. 
b. 	memory requirements 
　　some considerations arise when the space requirements for the two systems  prolog and taxlog  are compared. we can distinguish between static and dynamic space requirements. 
1. 	static space requirements 
　　actually  taxlog imposes a space overhead of two words per atom  in order to store the two additional pointers  see section iii . this overhead must be payed for each atom in the system  thus included all atoms which are members of no class. 
　　in order to store taxonomic relations  we need some space for classes  and for s s and is  a arcs. table 1 summarizes space requirements for taxlog  and for the two approaches  top-down and bottom-up  in prolog. in these measures we do not consider the space for storing atoms. classes are represented in taxlog by entities in the category area  while in 
prolog they are represented as unary functors. the bottom-up approach  moreover  requires some space for storing a clause for each category entry. in prolog more space is needed in order to store s  s and is a arcs than in taxlog because the arcs are represented as normal clauses  and thus a representation for head  tail  and control information must be provided. 
table 1 - static space requirements for storing a 
taxonomy  in words . 
	taxlog 	prolog 	prolog 
stored object 	top-down 	bottom-up 
class 	1 	1 	1 
s s arc 	1 	1 	1 
is a arc 	1 	1 	1 

　　clauses not involving restricted variables need the very same space for both systems. when restricted variables appear  instead  the space difference between prolog and taxlog depends on two parameters: t  that is the number of taxonomic restrictions in a clause  and their equivalent representation as predicates in standard prolog   and v  that is the number of global variables in the taxlog clause. for our implementation  a formula gives the difference in number of words: 
 prolog space - taxlog  space    1 * t - v 
　　note that an intensive use of taxonomic restrictions favours taxlog  because prolog requires space in order to store the predicate form of the taxonomic restriction and the comma separator  while taxlog stores directly the restriction as a pointer to the category area in the initial environment. but restricted variables are considered global  and  actually  the initial environment contains a word for each global variable. this fact explains why the corrective factor appears in the formula. 
	montini 	1 

1. 	dynamic space requirements 
　　it is worth noting that taxlog requires the very same dynamic space as prolog  if the taxonomy mechanism is not used. the only stack space waste that taxlog imposes  respect with prolog  is in trail management  because the old variable restrictions must be stored together with the variable addresses  during the unification. but the careful trail management algorithm we used saves this space when unrestricted variables are instantiated. 
　　surprisingly  even if taxonomies are used  much dynamic space is gained  as the data in table 1 confirm  because many stack records  that prolog pushes on the local stack for handling the clauses describing the taxonomy  are simply not used  and thus not stored  by taxlog. consequently  more space is gained in the trail stack  because there is no need of saving the addresses of the taxonomic clauses; moreover  less variables exist in the system. the increase in the global stack size is due to the fact that restricted variables are classified as global  and thus are stored in the global stack instead of the local stack. 
　　table 1 refers to the same examples used for first-answer time queries with two variables. data are relative to the smallest taxonomy  depth = 1 . bigger taxonomies give the same results for taxlog  but a higher space usage for prolog  due to the stack records for the taxonomy clauses. 
table 1 - dynamic space requirements for an example  in bytes . 
memory area taxlog prolog top-down local 	stack s1 1 global stack 1 1 trail 	stack 1 1 vi conclusions 
　　the efficiency of a prototype of the taxlog interpreter has been valued with respect to standard prolog by means of a series of measurements. the maximum overhead  due to the higher degree of complexity of the extended interpreter  is about 1% of the execution times  and is fully independent from the size of the test problem. an intensive use of taxonomies involves considerable improvements in terms of execution times. the taxonomic reasoning model employed in taxlog is quite general: this system feels a good candidate for many practical applications  1 . 
acknowledgements 
　　most work on the model has been accomplished by the author and cristina bena  whose contribution is invaluable. useful suggestions came to this work from franco sirovich  gianfranco rossi and alberto 
1 	architectures and languages 
martelli at the comp. science dept. of university of turin. the author wishes to thank his colleagues at laboratorio di intelligenza artificiale for their support and helpful discussions. 
appendix 1 - user-friendly syntax for defining taxonomies 
　　a simple  user-friendly syntax has been defined for helping the programmer to introduce taxonomies into the taxlog system. a bnf description of the grammar is given  together with a prolog description of its semantics and an example. 
bnf description: 
taxonomy declaration ::= declare tree. 
tree ::= atom 
| atom :=s list of elements 
| tree -  tree {   tree i 
　list of elements ::= catom {   atom note: {j are the usual kleene closure operators  and indicate zero or more occurrences of a pattern. prolog interpretation: 
 - op 1 fx declare   op 1 xfy.'- '   op 1txfx  :=  . declare tree :- declare tree 1  . 
declare  a- b  n top  :- !  declare a n top   nmlo is n - 1  declaress top b nmlo . declare  a := l  n a  :- !  mkcateg a n   mkisa l a . 
declare a n a  :- mkcateg a n . 
declaress t  b c  n  :- !  declare b n topb   mkss topb t   declaress t c n . dec1areas t b n  :- declare b n topb   mkss topb t . 
example: 
 - declare european -  italian :* fmej  french  german  english. 
 - declare nationality :  citalian  french  
german  engli sh 1. 
appendix 1 - reading and writing taxlog terms 
　　from the syntax point of view  the taxlog interpreter accepts exactly the prolog constructs. the read primitive first builds the deep structure of the input expression  considering the special 
1
 :  symbol as a normal syntactic operator*  then interprets it and considers its second argument as a succession of restrictions to be applied to the variables appearing in the first argument. the read primitive makes therefore the symbol ' :' and the syntactical structure of the restrictions 
 note that in the bootstrapping phase the operators are currently defined as follows: 
 - op 1fxfx  :    op 1 xfx  :-    op 1 xfy       etc. 

transparent to the rest of the system. for example if the goal: 
　 - read a   functor aff arity . is given the input sequence: structure varl var1 var1  : varl isa catl. the taxlog answer is the following: 
a   structure  l  1  1  :  1 isa catl 
f   structure 
　arity *= 1 while the goal: 
 - read a   arg l a v . 
with the same input structure as before produces the following answer: 
a = structure  l  1  1  :  l isa catl 
v =  1 :  1 isa catl 
　　the write primitive writes its argument with the same syntax as the answers: if in its argument any restricted variable appears  the write primitive prints the argument denoting each variable with a symbol. then the special  :  operator is printed  followed by the restrictions on the variables in the format: 
	 variable  	isa  class  
　　the symmetry between read and write has been maintained: structures written on a file by taxlog are in the format accepted by the read primitive. 
appendix 1 - test programs 
　　here follows an example of the test programs and taxonomies for time measurement. 
taxlog 
 - mkcateg zero 1   mkcateg  a b1   mkss ♀a b1 zero   mkisa oa a f mkisa ob b . 
relation a b  : a isa a  b isa b. 
prolog  top-down zero a  :- a a . 	zero a  :- b a . a oa . 	b ob . relation a.b  :- a a   b b . 
prolog  bottom-up zero zero . 
a a . b b . a a  :- zero a . b a  :- zero a . oa a  :- a a . ob a  :- b a . relation a.b  :- isa a a   isa b b . 
isa 1fc  :- i = ..c 1 c    i. 
measurements for first-answer times measure :- cpu time tl   
	relation*a b   	/*  1  */ 
cpu time t1   tdiff is t1 - tl  write tdiff . 
for two-constant queries  instead of  1  use: relation oa ob   
for taxlog two-variable queries with current atom  instead of  1  use: relation a b   current atom a   current atom b   measurements for refutation times measure :- cpu time t   refuted . 
refute    :- relation a.b   f a i l . /*  1  */ refute tl  :- cpu time t1   tdiff is t1 - tl  write tdiff . 
for two-constant queries  instead of  1  use: refute    :- relation oafob   fall. for taxlog two-variable queries with current atom  instead of  1  use: 
refute    :- relation a.b   current atom a   current atom b   fail. 
