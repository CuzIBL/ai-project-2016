 
　　　this paper presents a semantic and deductive formal system for automatic theorem-proving. 	the system has  as its deductive component  a form of natural deduction. 	its semantic component relies on an underlying representation of a model. 	this model is invoked to prune subgoals generated by the deductive component  
whenever such subgoals test false in the model. in addition  the model is used to suggest inferences to 
be made at the deductive level. 	conversely  the 
current state of the proof suggests changes to be made to the model  e.g. when a construction is required as in geometry. 
　　　the system is seen to possess a very smooth and transparent interface between its semantics and deductive syntax. 	these semantic and syntactic subsystems interact continuously during the search for a 
proof  each suggesting to the other how next to proceed. particularly appealing is the naturalness of the system from a human point of view. 
1. introduction 
　　　the past dozen years or so have witnessed a great deal of programming energy devoted to mechanizing first order logic. several proof procedures have been proposed and implemented with varying degrees of success. among these are systems of natural deduction1  herbrand search procedures1  and resolution1. 
　　　it quickly became apparent that these proof procedures alone were impractical on any interesting 
mathematical theory. one approach toward alleviating these difficulties was to develop completeness preserving refinements of the rules of inference. essent i a l l y   these are suitably restricted rules  often depending upon the syntactic structure of the formulae  
which generate a narrower  hut usually deeper  search tree. 	virtually a l l of the results obtained along these lines are for resolution systems. 	examples are resolution with merging1  linear resolution'  a-ordering1 etc. plus a whole host of combined strategies. experimental evidence1 indicates that this approach alone fails on even mildly serious theorems. 
　　　virtually everyone is now agreed that knowledge about the problem domain must be used in the logic. the question is how. there seem to be two approaches. 
1 semantics as domain dependent heuristics 
　　　in this approach semantic information is embedded  in the logic  as suitable domain dependent heuristics 
which depend  for their effect  upon the syntactic 
form of the current formulae and which therefore act like new rules of inference. no representation of the problem domain itself is present. semantics is conveyed through some fixed set of heuristic procedures representing that knowledge of the problem domain 
which is believed to be significant in guiding the search for proofs. 	this semantic information is i n corporated into the system by augmenting its purely syntactic rules - the theorem-prover continues to be syntax-driven. 
　　　examples of this approach may be found for analysis   set theory1  and equality1. it is reasonably clear that such domain dependent heuristics w i l l be essential components of any theorem-prover capable of doing real mathematics. for example  a number theorist w i l l require procedures for solving equations and formula manipulation. we shall argue that much more than this is required. 
　　　one difficulty with this approach is the need to anticipate  at the coding stage  all. of that knowledge about the problem domain which could be of assistance in discovering proofs. this knowledge is then embedded in the logic in the form of suitable heuristics which govern the generation of successor nodes in the proof tree. unfortunately  such heuristics are rarely in-
dependent  but interact in highly complex ways. if  later  some new heuristic is discovered  this can lead to a major overhaul of the program. there is  under this approach  a very real danger of an overproliferation of special  mutually interacting heuristics with an attendant loss of system extensibility. 
　　　it can also be argued that domain dependent heuristics capture a weak notion of semantics in the sense that they affect the proof tree only under certain prespecified conditions. insofar as a formula enters into such a condition it may he said to have 
meaning so that the. corresponding heuristic decision has a semantic basis. 	but there is no concept of the 
meaning of an arbitrary formula  and hence no provision for decisions based upon general semantic considerations. in particular then  if a node of the proof tree 
has no associated heuristic  no semantic decision can be made about its most plausible successors. 
　　　worse s t i l l is the lack of any kind of reasonable control over dead-end searches. if the application of an heuristic or rule of inference leads the proof astray  there is no provision for using knowledge about the problem domain to detect this. those techniques which are currently used  such as setting parameters for maximal clause length or depth of function-nesting are clearly ad hoc  and independent of the domain. this difficulty with blind alleys is compounded in the presence of a large number of axioms and theorems which might be irrelevent to the proof being sought. such formulae are guaranteed to lead to dead-end searches. there is no way that a serious theorem-
proving system can avoid having to deal with this situation. to our knowledge  no current theoremprover  a l l of which are based on refinements and/or domain dependent heuristics  is capable of coping with this problem. 

1 

1 

1 

1 

1 
new york: mcgraw-hill  1  1. 
1. loveland  d.w. a linear format for resolution. symposium on automatic demonstration 
 ed. laudet  m.  new york: springerverlag  1 . 
1. kevins  a.j. a human oriented logic for automatic theorem proving  mit a . i   laboratory memo no.1  oct.1   
1. norton  l.m. 	experiments with a heuristic theoremproving program for predicate calculus 
which equality. a r t i f i c i a l intelligence  1  1   1. 
1. reiter  r. 	the use of models in automatic theorem proving. 	university of british columbia  
dept. of computer science technical report 1  sept. 1 . 
1. robinson  j.a. a machine oriented logic based on the resolution principle  j.acm  1  1   1. 
1. slagle  j.r. automatic theorem proving with renamable and semantic resolution. j.acm 1  1   1. 
1. wang  h. toward mechanical mathematics. ibm j. res. dev. 1  1   1. 
1. woe  l.  robinson  g.a.  and carson  d.f. 	the concept of demodulation in theorem proving. 	j.acm  1  1   1. 
acknowledgements 
　　　this research was supported by national research council of canada grant a-1. i have greatly profited by conversations with john seeley brown about 
this work. 
