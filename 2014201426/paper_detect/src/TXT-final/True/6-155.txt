 
an additive fluent is a fluent with numerical values such that the effect of several concurrently executed actions on it can be computed by adding the effects of the individual actions. we propose a method for describing effects of actions on additive fluents in the declarative language  an implementation of this language  called the causal calculator  can be used for the automation of examples of commonsense reasoning involving additive fluents. 
1 introduction 
action languages  gelfond and lifschitz  1  serve to describe effects of actions on the states of the world. for instance  the expression 
	walk causes location x  = / 	 1  
is a proposition  or  causal law   of action language  giunchiglia et al  1  that describes an effect of action walk : this action causes the location of  to become /. the semantics of action languages is defined in terms of  transition systems -directed graphs whose vertices correspond to the states of the world  and whose edges correspond to the execution of actions. the execution of a sequence of actions can be represented by a path in such a 
graph. 
　some action languages  including     allow us to talk about the effects of the concurrent execution of actions. causal law  1  is understood in  to imply that location holds after any event that involves the execution of walk   even if other actions are executed concurrently. to distinguish the events involving the concurrent 
execution of actions a1 and    from the events that involve but not  we can write 

　in this paper we investigate the possibility of using i to represent the effects of actions on fluents of a special kind  called  additive.  an additive fluent is a fluent with numerical values such that the effect of several concurrently executed actions on it can be computed by adding the effects of the individual actions. for example  the gross receipts of a store are represented by an additive fluent: when several customers pay to different cashiers simultaneously  the gross receipts will increase by the sum of the  contributions  of the individual customers. the voltage of a battery is an additive fluent: the increase in voltage obtained by adding several cells to a battery can be computed by addition. in mechanics  the velocity of a particle is an additive fluent  because the net effect of several forces on this fluent over a time interval equals the sum of the effects of the individual forces. additive fluents are ubiquitous; this may be the reason why adding numbers is such a useful operation. 
　unfortunately  the causes construct of  and similar languages is not directly applicable to describing the effects of actions on additive fluents. consider  for instance  the effect of the action buy  customerbuys books  on the number of books available at the bookstore. the causal law 
		 1  
is applicable in the case when no customer other than is buying books at the same time: books are available after the event if there were books in the store before the event. but  1  is not acceptable if we are interested in the concurrent execution of such actions. 
　we introduce here a syntactic construct  increments  that allows us to describe the effects of actions on additive fluents. semantically this construct is treated as  syntactic sugar  on top of  the propositions involving that construct are viewed as abbreviations for causal laws of  the interpretation of increments described below has been used to extend the implementation of  called the causal calculator  ccalc   to cover additive fluents. 
　after a review of transition systems and of the syntax of in the next two sections  we describe the syntax of increment laws  section 1   define their semantics by showing how to treat them as abbreviations  section 1   and illustrate the use of additive fluents in the language of ccalc by formalizing an example that involves buying and selling  section 1 . two other examples of commonsense reasoning related to additive fluents are discussed in sections 1 and 1. a proposition stated in section 1 confirms that additive fluents behave as one would expect on the basis of the informal discussion of additivity above  and thus provide a justification for the approach to formalizing additive fluents proposed in this paper. 

reasoning about actions and change 	1 


figure 1: a transition system. 
1 transition systems 
consider a set of symbols  called constants  along with a nonempty finite set of symbols dom c  assigned to each constant c. we call dom c  the domain of 
　the constants are divided into two groups-fluent constants and action constants. intuitively  a fluent constant represents a fluent  and the elements of its domain are the possible values of that fluent. a state of the world is characterized by a function that maps each fluent constant to an element of its domain. in  giunchiglia et al.  1  section 1   fluent constants are further subdivided into simple and statically determined; in the examples below  only fluent constants of the first kind will be used. 
　a function that maps each action constant to an element of its domain characterizes an event occurring over a time interval between two successive states. in many examples of the use of the domain of every action constant is the set of truth values constants with this domain are called boolean. intuitively  a boolean action constant represents an action; the value of such a constant is t if the action is one of those that are executed as part of the event. 
　a transition system is a directed graph whose vertices are functions that map every fluent constant to an element of its domain  and whose edges are labeled by functions that map every action constant to an element of its domain. the vertices of a transition system are called its states. the functions labeling the edges of a transition system are called events. as an example  consider a transition system representing the effect of buying a book on the number of books that the person owns  figure 1 . it uses two fluent constants-has a   the number of books that alice has  and has b   the number of books that bob has -with the domain {1 ...  n}  where n is a fixed nonnegative integer  and two boolean action constants-buy a   alice buys a book  and buy b   bob buys a book . every state is represented by two equations showing the values of the fluent constants. every event is represented by the set of action constants that are mapped to t. the loops are labeled by the trivial event 1  no actions are executed . the horizontal edges are labeled by the event in which alice buys a book and bob doesn't; along each of the vertical edges  bob buys a book and alice doesn't. the diagonal edges correspond to alice and bob buying books concurrently. 
1 syntax of c+ 
the review of the syntax of c+ in this section follows  giunchigiia et al.  1  section 1 . an atom is an expression of the form where c is a constant and dom c . for instance  the equalities in figure 1 are atoms. a formula is a propositional combination of atoms. by a fluent formula we mean a formula such that all constants occurring in it are fluent constants. an action formula is a formula that contains at least one action constant and no fluent constants. a static law is an expression of the form 
	caused f if g 	 1  
where f and g are fluent formulas. an action dynamic law is an expression of the form  1  in which f is an action formula and g is a formula. a fluent dynamic law is an expression of the form 
　　　　　　　　caused f if g after h  1  where f and g are fluent formulas and h is a formula  provided that f does not contain statically determined constants. a causal law is a static law  or an action dynamic law  or a fluent dynamic law. 
here are two examples. the expression 
	 k 	 1  
where is an abbreviation 
for the fluent dynamic law 

is an abbreviation for the fluent dynamic law 
is the 1-place connective  false  . 
　causal laws  1  and  1  describe an effect of action buy and a restriction on its executability. to get a complete description of figure 1 in language  we need two more postulates. first  we should specify that the edge labels of the transition system may assign truth values to the action constants buy arbitrarily. this is expressed by 
	exogenous buy 	 1  
which stands for the pair of action dynamic laws 
action buy is exogenous in the sense that the action description does not determine whether that action is executed. if it is not executed then there is a cause for this; if it is executed then there is a cause for that too. second  we need to say that the fluent constant has  satisfies the  commonsense law of inertia : in the absence of evidence to the contrary  its value after an event is assumed to be the same as its value before the event. this is expressed by 
	inertial has 	 1  
reasoning about actions and change 

which stands for  fluent dynamic laws 	notation: x ranges over {a  b}. 

caused has 
	if the value of has 	after an event is the 
same as the value before the event then there is a cause for this. intuitively  inertia is the cause. 
　an action description is a set of causal laws. the semantics of  described in  giunchiglia et al  1  section 1   specifies the transition system represented by any given action description. for instance  action description  1 - 1  represents the transition system shown in figure 1. 
　this action description does not say explicitly that the trivial event has no effect on the values of has a  and has b   or that event does not affect the value of has b . nevertheless  every edge of the transition system labeled is a loop  and every edge labeled  is horizontal  because of the postulates  1  that express  under the semantics of the persistence property of has x . 
　similarly  causal laws  1 - 1  do not say anything about the concurrent execution of actions buy a  and buy b . but the 
edges labeled  in figure 1 are directed diagonally  in accordance with our commonsense expectations. this fact illustrates the convenience of the approach to concurrency incorporated in the semantics of 
　however  as discussed in the introduction  this built-in mechanism is not directly applicable to the effects of actions on additive fluents. we are now ready to turn to the main sub-
ject of this paper-extending with the additional notation 
that resolves this difficulty. 
1 increment laws 
in our proposed extension of  some of the simple fluent constants can be designated as additive. the domain of every additive fluent constant is assumed to be a finite set of numbers. we understand  numbers  as  symbols for  elements of any set with an associative and commutative binary operation that has a neutral element 1.' effects of actions on additive 
fluents are described in extended by causal laws of a new kind- increment laws.  accordingly  we modify the definition of a causal law reproduced in section 1 in two ways. first  in causal laws  1  and  1  formula f is not allowed to contain additive fluent constants. second  we extend the class of causal laws by including increment laws-expressions of the form 
	a increments c by  if g 	 1  
where is a boolean action constant  is an additive fluent constant  is a number  and 
is a formula that contains no boolean action constants. 
　　　 thc additive group of integers is the main example we are interested in  and this is the case that has been implemented. the max operation on an ordered set with the smallest element is another interesting case. 
reasoning about actions and change 
action constants: domains: buy boolean additive fluent constant: domain: instore 	
causal laws: 
buy increments instore by -1 exogenous buy 
figure 1: an action description in extended c+. 

figure 1: the transition system described by figure 1. 
we will drop 'if g' in  1  if g is t. in extended an action description is a set of causal laws that contains finitely many increment laws. 
　in the next section we define the semantics of extended by describing a translation that eliminates increment laws in favor of additional action constants. 
as an example  consider the effects of actions buy  a   
buy b  on the number of books available in the bookstore where alice and bob are buying books. a description of these effects in extended is shown in figure 1  as before  tv is a fixed nonnegative integer . the transition system represented by the translation of figure 1 into the non-extended language is depicted in figure 1  with the auxiliary action constants dropped from the edge labels . the causal laws in figure 1 do not say explicitly that the trivial event has no effect on the value of instore  or that the concurrent execution of actions buy a  and buy b  decrements the value of this fluent by 1. nevertheless  every edge of the corresponding transition system labeled is a loop  and every edge labeled goes up 1 levels  in accordance with our 
commonsense expectations. this happens because figure 1 classifies instore as an additive fluent constant. 
　the causal laws in this action description do not say explicitly that actions buy  are not executable when instore = 1  and that actions buy a   buy b  cannot be executed concurrently when instore = 1. this is taken care of by our semantics of increment laws  in view of the fact that the domain of instore does not contain negative numbers. 
1 

1 translating increment laws 
let d be an action description in extended i . in connection with the increment laws  1  in /   the following terminology will be used: about the boolean action constant fluent constant c and the number in  1  we will say that is a c-contributing constant  and that is a contribution of to c. 
　the auxiliary action constants introduced in the translation are expressions of the form contr where c is an additive fluent constant  and a is a c-contributing action constant. the domain of contr  consists of all contributions of and number 1. 
to translate the increment laws from d  we 
 i  replace each increment law  1  in d with the action dynamic law 
 ii  for every auxiliary constant contr a c   add the action dynamic law 
	caused 		 1  
 iii  add the fluent dynamic laws caused 
contributing constant a to an element of the domain of contr so t h a t ~ ~ is in the domain of c. 
the sum and the multiple conjunction in  1  range over all c-contributing constants 
　causal law  1  interprets increment law  1  as the assertion that executing  possibly along with other actions  causes constant contr to get the value  under some conditions characterized by formula g. causal laws  1  say that the value of this constant is 1 by default  that is to say  when another value is not required by any increment law. causal laws  1  say that the value of an additive fluent constant after an event can be computed as the sum of the value of this constant prior to the event and the contributions of all actions to this constant. 
　the result of translating increment laws from figure 1 is shown in figure 1. in this case  the translation described above introduces two auxiliary action constants: contr{buy{a   instore  and contr{buy{b   instore . the domain of each of them has 1 elements: the contribution -1 of #mv x  to instore and number 1. 
　the edges of the transition system described by figure 1  and the corresponding events  can be computed using the methods presented in  giunchiglia et al.n 1  sections 1  1 .  this calculation involves turning the action description into a definite causal theory and computing the models of the completion of this theory.  every event assigns values to each action constant  including the auxiliary constants contr buy instore . for instance  the label notation: ranges over {a  b}. 
figure 1: the result of translating increment laws from figure 1. in figure 1 represent the following event e: 
　the causal calculator  which implements ment laws  can be downloaded from http : //www.cs.utexas.edu/users/tag/ccalc/ . 
1 reasoning about money 
as an application of these ideas to automated commonsense reasoning  consider the following example: 
i have $1 in my pocket. a newspaper costs $ 1  and a magazine costs $1. can 1 buy 1 newspapers and a magazine  a newspaper and 1 magazines  
these questions are about the executability of some concurrently executed actions  and the answers are determined by the effect of these actions on an additive fluent-the amount of money that 1 have. 
　figure 1 describes the relevant properties of buying and selling in the input language of ccalc. there arc objects of four sorts in this domain: agents  resources  items  to be purchased  and  nonnegative  integers; items are a subset of resources. the buyer and the seller are agents; money is a resource; 1 ...  maxlnt are integers. the price of an item is an integer. the number of units of a resource that an agent has is an integer-valued additive fluent. buying is an exogenous action. the four causal laws that follow these declarations are self-explanatory; decrements is an abbreviation defined in terms of increments. the last causal law expresses that the number of units that are being purchased is uniquely defined. 
　figure 1 expresses the first of the two questions stated at the beginning of this section. the line maxstep : : 1 tells ccalc that the query is about paths of length 1 in the transition system. the question is whether the transition system contains an edge that begins in a state in which the buyer 
reasoning about actions and change 

- sorts agent; resource    item; nnlnteger. 
variables ag :: agent; it :: item; res : : resource; m n : : nnlnteger. objects 
buyer seller : agent; 
money : resource; 
1..maxlnt : nnlnteger. 
: - constants price item  :: nnlnteger; has agent resource  
　　　　　　:: additivefluent nnlnteger ; buy item nnlnteger  :: exogenousaction. 
buy it n  	increments has buyer it  by n. buy it n  decrements has seller it  by n. 
buy it n  increments has seller money  by m*n if price it =m where m*n =  maxlnt. 
buy it n  decrements has buyer money  by m*n if price it =m 
where m*n =  maxlnt. 
nonexecutable buy it m  & buy it n  where m =n. 
figure 1: buying and selling 
 :- objects newspaper magazine :: item. price newspaper =1. price magazine =1. 
:- query maxstep :: 1; 
1: has buyer money =1  buy newspaper 1   buy magazine 1 . 
figure 1: do i have enough cash  
has $1  and whose label includes buying 1 newspapers and 1 magazine. ccalc responds to this query by finding such an edge.1 its reply to a similar question about 1 newspaper and 1 magazines is negative. 
1 reasoning about motion 
some additive fluents mentioned in the introduction-for instance  the velocity of a particle-are real-valued  rather than integer-valued. ccalc cannot deal with real numbers yet  and its input language does not allow us to express properties of such fluents. 
　but let's imagine a movable object that is immune to this complication-the spacecraft integer. far away from stars and planets  the integer is not affected by any external forces. as its proud name suggests  the mass of the spacecraft is an integer. for every integer  the coordinates and all three components of the integer's velocity vector at time are integers; the forces applied to the spacecraft by its jet engines over the interval  for any integer  are constant vectors whose components are integers as well. if the crew of the integer attempts to violate any of these conditions  the jets fail to operate! 
　our formalization of the motion of the integer uses the fluents pos where a ranges over {x  y  z}  to represent the current position of the integer along the a axis. the additive fluents vel  are the components of its velocity. according to newton's second law  the acceleration created by firing a jet can be computed by dividing the force by the mass of the spacecraft. this relationship can be expressed without mentioning the acceleration explicitly-in terms of the change in the velocity over a unit time interval: 
fire j  increments vel 	by 	/mass {{force 
　to test our representation  we instructed ccalc to answer the following question: 
the mass of the integer is 1. the integer has two jets  and the force that can be applied by each jet along each axis is at most 1. the current position of the integer is  -1 1   and its current velocity is  1 1 . how can it get to  1 1  within 1 time unit  
　one of the solutions found by ccalc is to apply the forces  1 1  and  1 -1 . 
1 missionaries and cannibals with two boats 
in the missionaries and cannibals problem  mcp   three missionaries and three cannibals come to a river and find a boat that can hold two people. if the cannibals ever outnumber the missionaries on either bank  the missionaries will be eaten. how shall they cross  the shortest solution involves 1 steps. 
　lifschitz  showed how to express this puzzle and some of its elaborations due to mccarthy  in the language of ccalc. some simple elaborations of mcp in the spirit of this work require that the number of members of a group  missionaries or cannibals  at a given location be treated as an additive fluent. this is the case  for instance  when several boats are available and are allowed to operate concurrently. 
　using the ideas of this paper  we formalized the modification of mcp in which the travelers find two boats: a small boat that holds one  and a bigger boat that holds two. using our formalization  ccalc has determined that the modified problem can be solved in 1 steps. 
1 properties of additive constants 
by examining figure 1 in isolation from its symbolic description in figure 1 we can see that the constant in store exhibits some features typical for additive fluent constants. 
consider  for instance  the edges that start at the vertex 
instore = 1 and are labeled by the events {buy a } and 

reasoning about actions and change 	1 

{buy b }. each of them leads to the vertex instore = 1  so that each of these two events  when it occurs in the state instore = 1  increments the value of instore by - 1 . in accordance with the intuitive idea of an additive fluent  we can expect that the  union  of these events  when it occurs in the same state  will increment the value of instore by  and this is true  because the edge in figure 1 that starts at the vertex instore = 1 and is labeled  leads to the vertex instore = 1. 
　proposition 1 below generalizes this observation to a class of action descriptions in the language c+ extended as described in sections 1  1. by d we denote any action description in this language. 
about events in the transition system 
represented by d we say that eo is a disjoint union of if  for every boolean action constant a  
t then there exists a unique 
	for this 	r every non-
boolean action constant then  for all 
　in the rest of this section we assume that the set of numbers is a commutative group. 
the special case corresponding to ditive fluent constants are not affected by  trivial  events. in this sense  they are similar to the fluent constants for which inertia is postulated: 
corollary 1 let e be an event such that for every boolean action constant  if the transition system represented by d contains an edge that leads from a state s to a state $' and is labeled e then  for any additive fluent constant c  $' c  = s c . 
　the special case corresponding to n = 1 implies that the effects of any set of actions on an additive fluent is deterministic: 
corollary 1 // the transition system represented by d contains an edge that leads from state s to state so and is labeled e  and an edge that leads from s to state si and is also labeled e  then  for any additive fluent constant c  so{c  =1i c . 
1 discussion 
in this paper we showed how an implemented  declarative language for describing actions can be used to talk about the effects of actions on additive fluents. this was accomplished by extending the syntax of the action language c+ from igiunchiglia et ai  1  by increment laws and by showing how to treat these laws as abbreviations. 
　it is interesting to note that this treatment of additive fluents would have been impossible if  instead of c+  we used its predecessor c from igiunchiglia and lifschitz  1 . non-boolean  non-exogenous action constants such as contr a  c   and action dynamic laws such as  1  and  1  are among the features of c+ that were not available in c. 
　in literature on planning  fluents with numerical values are often referred to as  resources  fkoehler  1 . the concurrent execution of the actions that involve resources is usually limited to the  serializable  case  when all ways of sequencing the concurrent actions are well-defined and equivalent. this condition is not satisfied  however  for many uses of additive fluents  including the space travel example  section 1  and the modified mcp  section 1 . consider  for instance  the state with two cannibals and three missionaries on the first bank  and imagine that the missionaries are using both boats to cross simultaneously. the concurrent execution of the actions cannot be replaced by the larger boat crossing first and the smaller boat crossing after that-in the state between the two actions  the missionaries on the first bank would be outnumbered by the cannibals. this example shows that crossing the river in the modified mcp is not serializable. 
acknowledgements 
we are grateful to yuliya babovich  jonathan campbell  esra erdem  selim erdogan  paolo ferraris and wanwan ren for useful discussions related to the subject of this paper. this work was partially supported by the national science foundation under grant iis-1 and by the texas higher education coordinating board under grant 1-1. 
