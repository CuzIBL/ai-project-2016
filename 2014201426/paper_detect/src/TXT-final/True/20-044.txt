. 
a system is described which can generate programs for machine vision systems whicji have to measure a number of parameters of an industrial object in a camera image. programs are generated starting from descriptive object models. the object models used are context-free attribute grammars  hence the generated programs are parsers. errors in generated programs  caused by using inaccurate models  are screened by comparing the measurements produced by generated programs with values of the desired parameters provided for example images. 
i n t r o d u c t i o n 
　　　this paper describes our research on a method to generate programs for machine vision systems. the program generation process is initiated by a query from the user. this query typically requests the system to provide a program that can decide about the presence of a specific object in an image and provide measurements of a number of its parameters  e.g. its position and orientation  hinge openings etc. . in the program generation process we use image generation models  i.e. image grammars. we try to keep these models simple and valid for different classes of scenes by including program testing in example images in the program generation process. 
     in general the design of an industrial machine vision program depends on a number of factors: 
1. the kind of object that must be recognized. 
1. the required parameter measurements and a priori available parameters. 
1. the available hardware and software to perform primitive measurements on images. 
1. the kind of scene the object is in. 
1. overall program specifications  such as speed and reliability 
in most current machine vision applications a human programmer accounts for these factors when he writes the program. in this paper we will discuss our research work on the automation of this programming process. 
     one of the fundamental problems in this automation effort is the fourth factor listed above. this factor subsumes such things as overall image quality  illumination  the presence or absence of confusing objects etc. these factors differ from application to application and their consequences are hard to model in advance. they force the human programmer to write his programs in terms of fairly low-level primitives and to design his programs by trial and error testing in images. we believe that an effective way to avoid having to make detailed application-specific models in advance is to incorporate this 
1 	perception 
trial and error testing of programs in our system. 
     the design of our systetm is centered around a planner  which  given a model and a goal measurement  generates a sequence of program steps. these steps perform primitive measurements in the image and combine the results in arithmetic steps to produce the goal measurement. the steps of such a program can be divided into two stages  hypothesis generation and verification. in hypothesis generation the program produces the desired measurements and performs only those image observations strictly needed for these measurements. in the verification stage the program uses measured parameters to make predictions that are tested by means of observations in the image. in this paper we will concentrate on the planning of hypothesis generation programs. 
     the mechanism of our system will be illustrated throughout this paper by means of an example object consisting of two disks of identical size 

     this  twodisks  object has three parameters: r  the position of one disk  d  the connecting vector to the other disk  and s  the site of the two disks. we will suppose that d has to be measured. we will assume that there is a primitive program  diskprograml . when called by dl-diskprograml    this program produces measurements for the position r and scale s of single disks in the image. these are then available as dl.r and dl.s respectively.  note that  diskprograml     does not produce a unique result if there is more than one disk in the image. hence we presuppose some mechanism to go through alternative results  one pair r s for every disk in the image  e.g. by means of backtracking . a typical program to produce d in a hypothetical twodisk object in an image is: 
1. 1. 
1. 
this hypothesis can be verified further by the following verification program: 


our planner accounts for the first three factors influencing programs by means of a number of input sources: 
1. object models 
1. queries for parameter measurements 
1. a library of primitive measurement functions 
object models 
     our planner is provided with models of how an image is generated given the parameters of an object. for this purpose we use context-free attribute grammars. a program to measure parameters on an object performs the inverse of the grammatical generation function: it produces a parsing in the sense of the grammar. for our example the grammar can be expressed in the following substitution rule: terminals: 

this expresses that the two  parts    d l   and  d1  are substituted for the  twodisks  object  and it gives the relations between the  attributes  r  s of dl and d1 and the attributes of the  twodisks  object. 
we want the grammar has to meet several requirements: 
the grammar should be  as much as possible  independent of the application  no details should be added per application  
the planner must be able to use the grammar in such a way that the complexity of the program depends on the application but not the complexity of the grammar. 
     the first requirement is only put to the test if we try the system on many kinds of application and not on just  a few  example images. we try to realise these requirements by including descriptions of objects at several levels of detail in a single grammar. for example  suppose we replace the  twodisks  by  twosquares  with component squares with slightly rounded corners; for most purposes a grammatical description as a perfect square may be sufficient  but for some applications the corner rounding must be included. if this is the case  we include both the perfect square description and the rounded square as alternatives in the grammar  not necessarily stating the relation between the two descriptions  in this case that the one is a more precise version of the other . 
     the price we have to pay for this is that in general the grammars are not entirely consistent. the idea is that this is not fatal because the resulting programs will be tested before use. 
queries for parameter measurements 
　　　the planner must be told what its goal measurement is. this will be done by an external agent. we feel that if our system is to be useful for current programmers we should not force them to give away all of the responsibility for programming at once. we realise this in our system by formulating the goal in terms of a program. this program may contain variables which are not given a value  but which are given meaning as attributes of the grammar. for example 

this prompts the planner to produce a program that determines d with a precision plus or minus 1  s  not being mentioned  does not have to be measured. if the external agent wants to take some work from the planner  he could give the more detailed goal program 

now the planner can restrict itself to devising programs to determine r of dl and d1. 
the library 
     a third determining factor is the availability of primitive functions. the planner must be provided with a library of such primitives  together with specifications connecting them to grammatical symbols and their attributes. an example b the  diskprograml  primitive mentioned above. its formal entry in the library could be of the following form: 
diskprograml  image disk  r s   produces code reference: 
this expresses that diskprograml is a parsing function  which performs the inverse of the generation implied by the terminal symbol  disk  in the generative grammar. it also expresses the accuracy of the function. preferably  the library will have to contain a number of alternative primitives  which differ in effectiveness in different contexts  for any terminal of the grammar  and possibly also for a number of non-terminals. 
　　　in our work we make use of paps  picture acquisition and processing system   a vision system developed within philips for applications in factory automation . one of the strongest properties of this system is its ability to do template matching at tv-image speeds. most of our primitives use this facility; they generate coordinates of primitive features as positions where the template has matched. in  diskprograml  we have implemented the disk position measurement in this way. 
the planner 
　　　having discussed the inputs to the planner we are now in a position to discuss the planning process itself. the planner must plan a program which calculates a goal variable. this calculation can be achieved in a number of ways: 
1. express the variable in a generative way in other variables by means of the grammar 
1. call a primitive that can measure the variable from an image 
1. solve for the variable by inverting one or more of the generative relations in the grammar 
 this involves an equation solving system  
the planner tries to apply any of these rules to its goal. if it does so  any rule can recursively generate new goals. the planner continues to apply the rules on these new goals until no unknown variables remain. in the process the planner produces a trace of procedures that must be invoked in the task program. an example: starting from 
	de haas 	1 
where d of  twodisks  must be determined. the planner 
applies rule 1  solving d from 	

where r of dl and d1  both disks   must be determined. applying rule 1 twice  the planner generates the final program: 

where no more variables are unknown. note that neither the equality of the two disk sites nor the distinctness of the two disks is verified in this program. this neglect of verification is even more obvious if we query for s: the goal program: print  leads by rule  1  with dl.s=s and rule  1  to 

the second disk isn't even inspected here  of course there is no need for inspection if only images of pairs of equal sized disks are shown: the need for verification depends on the kind of scene . 
     in most realistic problems the planning process will be considerably more complicated  hence we have to use some pruning mechanism. this may lead the planner to miss solutions. for our purposes this is not a serious problem because usually our problems have many possible solutions and we are more interested in discovering good ones than in discovering all. 
     finally  we must account for the fourth factor influencing machine vision programs: the kind of scene. in this step we must compensate for inaccuracies of our models. for example  in the twodisks model we stated nothing about what happens if the two disks come close together. yet the selection of templates for the  diskprograml  primitive is likely to be affected by such a factor. alternatively  if there are many objects in the scene which closely resemble disks  we might want a template that distinguishes between them and a disk. the planner must choose a template appropriate for the task by testing in some example images. 
     this is done as follows: a teacher provides the planner with a number of example images  together with sets of attributes for objects present in these images. these sets are used  with the generative grammar  to calculate the desired outcome of statements in the generated programs. by comparing these desired results with the measurements obtained from selectable primitives the planner verifies the relations and primitives it selects. 
1 	perception 
conclusion 
　　　the work described in this paper is a continuation of the work reported by persoon . his problem: recognition of rigid objects from images by means of a learned object description  is also pursued by bolles and faugeras . we have added to this work measurement of attributes other than position  orientation and scale   e.g. both disksise s and distance vector d in the  twodisk  model; both orientation phi  length l and width w variable in a rectangle model . this is a non-trivial step because the estimation of position  orientation and scale from position observations of features can be expressed as a linear estimation problem. this can be solved by accumulating observations from an image in a least-squares estimator for non-linear problems a structurally more complicated estimator is needed. 
     this leads us in the direction of more general modeldriven image analysis systems of which acronym is a prominent example  for a review of related systems see  . our approach differs from this work in that we use fairly rigid object models  with only a limited number of strictly parametrised deformation modes. moreover  we include an off-line vision planning stage  using examples. hence we avoid the problem of interpreting a kind of scene offered for the first time to the system. in this way we try to economise on model complexity. 
