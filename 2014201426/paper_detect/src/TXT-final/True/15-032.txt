 
   this paper describes a system called pds  a forward chaining  rule-based architecture designed for the online  realtime diagnosis of machine processes. two issues arise in the application of expert systems to the analysis of sensor-based data: spurious readings and sensor degradation. pds implements techniques called retrospective analysis and meta-diagnosis as solutions to these problems. these techniques and our experiences in knowledge acquisition in a large organization  and the implementation of pds as a portable diagnostic tool are described. 
1 introduction 
   research in the field of al diagnosis systems has been evolving rapidly since the first event based  nelson  1  or surface  hart  
1  reasoning systems  shortliffe  1; pople  1; fox & mostow  1; duda et al.  1   to systems that have functional or deep knowledge of their domain  davis et al.  1; genesereth  1; underwood  1; mcdermott & brooks  1 . whatever the style of diagnosis  these systems assume that information is provided manually through a question asking/answering dialogue  or automatically by means of sensors  or other devices. in both cases  the information is handled in the same manner  which  we have found  should not always be the case. in applications where the sources of information may be errorful  e.g.  sensors   we found that it is just as important for a diagnostic system to reason about the sources of its information and their veracity  as it is to perform diagnosis based on the information. 
	during the summer of 	1  we began the design and 
construction of a rule-based architecture  called pds  for the online  realtime diagnosis of malfunctions in machine processes. diagnoses would be based on information acquired from tens to hundreds of sensors attached to a process. during the application of pds  a number of sensor related problems arose. first  the process sensors in our applications degrade over time  reducing their diagnostic value. second  a properly operating sensor may provide spurious readings periodically due to factors exogenous to the process. though the frequency of such malfunctions are small  their detection may result in substantial savings. for example  in the electrical power utilities  replacement costs of electricity lost due to sensor malfunction averages $1/year per plant  meiger et al.  1 . any diagnosis system which is to receive its information directly from devices which possess these characteristics must be able to handle the information without providing incorrect diagnoses  or at least have its diagnosis degrade gracefully with the sensors. as a result  pds was extended to deal gracefully with these problems. these extensions are the topics of this paper. 
　in the following  the architecture of pds is described. we then examine the facilities provided by pds to deal with sensor problems. following  we discuss our experiences in the acquisition and testing of knowledge in pds  and describe its implementation. 
1 pds: basic representation 
pds is a forward chaining rule-based system implemented in the 
schema representation. language srl  fox  1; wright & fox  
1 . the representation and propagation of belief is similar to that found in mycin  shortliffe  1 . for each rule  there are schemata describing each constituent part of the rule's antecedent  or evidence   a schema describing the rule's consequent  or hypothesis   and a schema describing the relationship between the rule's evidence and hypothesis. the implementation of rules as schemata results in an inference net similar to that found in prospector  duda et al.  1  sensor readings  hypotheses  and malfunctions are represented as sub-types of the pds-node schema  figure 1 . 
{{ pds-node 
mb:  level of belief in the node being true  
md:  level of disbelief in the node being true  
cf:  level of certainty = mb - md  
supporting rules:  rules for which this node is hypothesis  
supported-rules:  rules for which this node is evidence  
signal:  contains signal schema name s   
description:  english description of the node  
has-is-a:  or sensor hypothesis malfunction  
}} 
figure 1: generic node in pds 
　the following specializations  see has-is-a slot  of pds-nodes are defined: 
1. sensor schemata represent the actual sensors. two additional slots are defined to store the current reading: reading-value and reading-time. 

	m. fox et al. 	1 
1. malfunction schemata correspond to those states of the physical system which are indicative of the problem s  to be diagnosed. 
1. hypothesis 	schemata 	represent 	intermediate conclusions in the inference net. 
　a belief-rule schema  figuie 1  represents those rules which are used by the inference program to propagate belief. 
{{ signal 

　evidence is represented as a boolean combination of nodes. the combination is explicitly represented by and  or  and not schemata. each belief-rule has associated with it one or more contexts which are also represented as a boolean combination. if the context is evaluated to be true  then the rule will be included in the diagnostic process. 
　belief propagation is similar to the one used by mycin. to summarize  each hypothesis and malfunction has associated with it a measure of belief mb  and disbelief md. these measures are altered by the evaluation of supporting belief-rules. in a belief- rule  the sufficiency of evidence is determined by evaluating 
the contents of the sf-function slot. the necessity of evidence is determined by evaluating the contents of the nf-functicn slot. table 1 shows the direction of change of beliefs and disbeliefs as determined by evidence cf  the cf of disjunctive evidence  or  is the maximum of the constituents  and the cf of conjunctive evidence is the weighted average of constituents  and  or the mimimum of constituents  fand    and the rule's sf and nf  an up-arrow indicates an increase  a dash indicates no change . actual updating is performed using mycin's updating rule  e.g.  

　a pds-nodo may have one or more signals attached to it  figure 1  when the node with which a signal is associated has a certainty factor cf in the range specified in the signal definition  then the text in the message slot is displayed and the function whose name is in the action slot is evaluated  this may trigger an alarm  for example . 
minrange:  constant  
max range:  constant  
message:  text to be displayed  action:  function-name  
description:  english text describing the signal  
}} 
	figure 1: 	signal schema 
   a context  figure 1  specifies an external condition which may be relevant to the execution of the diagnostics. for'example  when diagnosing a machine  different rules may apply at startup than found during normal operation. for each rule  a boolean of contexts can be defined  such that the rule will fire only when the context specification is true. 
{{ context 
value:  true| false | 1 | 1  
description:  english description of this context  
}} 
	figure 1: 	context schema 
　as found in most knowledge representation systems  srl provides the user with the ability to define type hierarchies of schemata using the is-a relation  and instances of types using the instance relation. rules may refer to types of hypotheses  sensors  and malfunctions  rather than instances. when the knowledge network for a particular machine is created  instances of sensors  etc. inherit rules attached to nodes in their related type hierarchy. a library of rules may be created for different types of machines  and instantiated with little effort. 

1 	m. fox et al. 
1 retrospective analysis 
   spurious readings do occur often enough in sensors to require their detection and omission from the diagnostic process. these readings may be due to factors exogenous to the process  or to sensor malfunction. spurious readings are handled in most diagnostic systems before they reach the system: the readings are smoothed or omitted  manually or by a preprocessor associated with the sensor. it quickly became apparent in our applications that such an approach was not sufficient. first  external modification of readings prohibit the system from performing other types of analyses not anticipated in the design of the sensor and its preprocessor. second  we found that retrospective analysis of the unaltered sensor data was important in order to refine the rule base. 
　solutions to this problem were found to have much in common with other diagnostic techniques. in particular  a variety of time series analyses was found to be important. rate of change  first derivative   averages  filtering  and curve smoothing are examples of the kinds of time domain analysis employed both at the front end of diagnostic systems  and during the diagnosis itself. 
   to provide general retrospective analysis support  pds provides the ability to store and analyze successive readings of a sensor  or the successive values of any other node. a reading-set schema  figure 1  acts as a memory for pds. successive readings/values are stored in the reading-list slot. information about a reading  e.g.  time of reading  may be attached directly to it using srl's facility for attaching meta-schemata to a schema  slot  and/or value. 
   another type of rule  called reading-transform  figure 1   is the link between some input node  usually  but not necessarily a sonsor node  and a reading-set node. when a reading-transform rule fires  its transform function is applied to the value found in the rule's evidence node. if the evidence node is a sensor  the value is a sensor reading  otherwise it is the node's certainty factor. the transform is useful for such things as conversions of engineering units  scaling  etc. the result of the transformation is automatically appended to the reading-list of the reading-set node. when all the rules leading to a reading-set 
node have fired  the function specified in the reading-set schema is applied to the reading-list. this function does all the required 
signal processing and the result is placed in the statistic slot of the reading-set node the statistic can  from this point on  be 
used as a  normal  sensor reading. 

1 mota-diagnosis 
　the sensor intensive applications of pds share the problem of sensor degradation; environments containing corrosive chemicals and widely varying temperatures can reduce sensor performance. this problem has been solved partially at the machine level by the placement of redundant  overlapping sensors. but at the diagnosis level  the problem of recognizing and removing malfunctioning sensors from the diagnostic process has received little attention in the al literature. 
   if the rules which used sensors as evidence only referred to a single sensor  then it might be possible to summarize the acceptability of a sensor's reading by the cf associated with it. setting the cf to zero would stop propagation of any belief or disbelief by the supported rule.  the change in belief provided by a 
   rule is the product of either the rule's sf or nf and the evidence's cf.  but in many applications sensors may be combined as evidence in a single rule. using cf's to reflect sensor degradation in such systems would have an unexpected result. consider the following: 
1.lf evidence is conjunctive and the fuzzy minimum operator  fand  is used to derive the evidential cf  then the existence of a zero cf would remove the entire rule though the other sensors may be operating and overlap the redundant sensor. 
1. if evidence is conjunctive and a weighted average is used to derive the evidential cf  then the sensor s  with a zero cf would reduce the rule's change in belief since its weight is not reduced  pds uses a weighted average to derive the evidential cf . 
neither approach solves the problem satisfactorily. 
　we call the solution implemented in pds meta-diagnosis. the first step in meta-diagnosis is the detection of sensor degradation. this is accomplished through the use of rules which monitor a sensor's behavior. the ultimate consequent of these rules is one or 

m. fox et al. 1 
more sensor malfunction schemata. 	the second step is the 

adaptation of rules to reflect the reduction in importance of a malfunctioning sensor in the diagnostic process. this is accomplished through the introduction of a 
parametric-alteration rule  figure 1 . this rule provides the capability of altering the definition of any other node or rule in the system. a parametric-alteration rule may be attached to any node. when the evidence slot in the node changers  the rule's transform function is applied to the value  possibly altering the hypothesis schema. 
{{ composite-sensor is-a: pds node 
sensor:  list of sensors whose readings are to be combined  transform:  function which generates a composite reading  
reading-value: 
}} 
	figure 1: 	composite-sensor schema 

 { parametric-alteration is-a: rule 
evidfnce:  the schema monitored by this rule  
evidence slot:  the slot whose value is monitored by this rule  
transform:  function whose result is placed in the hypothesis slot  
hypothesis:  schema altered by this rule  
hypothesis-slot:  slot in hypothesis altered by this rule  
}} 
	figure 1: 	parametric-alteration schema 
　an example of the use of this type of rule is the reduction of a sensor's weight in the conjunctive evidence of a belief-rule. it is important to note that this is a metarule in the sense that it alters the rule base  while not performing actual diagnosis. such rules must be used carefully as they may introduce cycles in the propagation of belief. 
1 composite sensors 
   an alternative method of analyzing and reacting to readings from redundant overlapping sensors  which falls short of altering the rule base as provided by meta diagnosis  is to combine multiple sensors into a single composite sensor. in many domains  techniques such as: 
  voting  and 
  auctioneering  i.e.  ignoring the lowest or highest reading  
are used to combine sensor readings. pds supports the exploration of these types of techniques by means of a composite-sensor schema  figure 1 . 
   the transform slot contains a lisp function which analyzes the individual readings of the sensors listed in the sensor slot  and fills the reading-value  mb  and md slots with the composite reading. standard functions can be provided to implement voting  auctioneering  and other multiple sensor techniques. 
1 knowledge acquisition and testing 
　a number of systems capable of performing on line diagnosis in an industrial environment are under development at the westinghouse electric corporation. a working prototype of one of these systems is being installed and tested at this time and is the subject of the following discussion. although many of the steps in the development of this prototype arc common ones to the creator of an expert system  they often brought unexpected results when carried out in the commercial environment of a single large company. 
   the knowledge engineer responsible for the generation of rules for this system was actually a team. the person writing the rules was an engineer whose background was in the problem being diagnosed  a quasi-expert  and whose acquaintance with pds consisted of a working knowledge of the general principles and those structures which applied specifically to the problem at hand. working in close conjunction with this  quasi-expert  was an engineer whose background was in expert systems and who knew pds in depth. 
   as with the development of most systems of this type  the first step was the creation of a small system that we called a  root system . it began with ten sensors and used forty-four rules and twenty-nine intermediate hypotheses to indicate seven malfunctions. it took approximately one month to develop and test. this  root  served us in two ways. first  it acted as a vehicle for eliciting information and stimulating the thinking of the experts. secondly  it was a tool to sell the experts on the feasibility of what they were being asked to undertake and  more importantly  to sell upper management on the probability of a return on what they were being asked to invest. 
   the testing scheme developed for the  root system  was a general one  and with some expansion was used for the prototype itself. first  approximately 1 sets of test data were generated in four groups. group one tested the interactions of the rules themselves. group two tested the system's response to malfunctions previously diagnosed by the experts. group three tested the experts' response to malfunctions diagnosed by the system. group four comparison-tested the responses of the experts and the system to data neither had  seen  before. 
　the second phase of the testing is currently under way  and involves the installation and operation of the sensors used in the diagnosis system in an industrial environment. the resulting data are fed directly to the diagnosis system and the presence of any malfunctions are noted  recorded and displayed. 
　preliminary results of this testing are promising. although mathematical analysis of these results has not yet been performed  me expert analyses of the data have agreed quite closely with the computer analyses. 

1 m. fox et al. 
　no development project is without its problems and this one has been no exception. our first major problem was in convincing the necessary experts to participate in the project. older and more established engineers  most useful as exports  have been traditionally wary of computer systems and the perceived possibilities of being replaced by a machine. also the necessary experts were distributed throughout the company  raising many organizational problems. 
   once a sufficient number of experts agreed to participate in the project  we discovered the second major difficulty; problems within the cognitive models of the experts themselves. when the experts were questioned about the if-then rules used in their thinking processes their first tendency was to go from a sensor reading to a final malfunction in one step. this is not to say that one-step diagnoses are not possible  just uncommon. after some work  the experts began to think of their diagnosis rules step-by-step  but then the difficulties of verbalizing the steps became evident; at this point the quasi-expert status of the knowledge engineer became very valuable. after the rules had been established to the satisfaction of the experts and the knowledge engineer  quantifying the steps in terms of sufficiency and necessity functions became the final hurdle. for this step of the process a script was developed using the form of the questions that  through trial and error  seemed to elicit the most consistent responses from the experts. this script was then used for all experts evaluating all rules. the fact that most engineers are very logic-oriented and generally resent what they consider to be a need to justify their decision-making processes should not be discounted at any step of the cognitive process. 
　the third problem encountered was an actual gap in the knowledge of the experts. the expert diagnosis of the system under consideration is in itself a new problem and the knowledge of sensor malfunction and the forms it may take is exlremely limited. at this time the problem is being addressed by using the data from the on-line test as a basis for the ongoing development of rules relating to sensor behavior. 
   the sensors were also the source of another problem  this time in the testing of the system. since the sensors being used for the on-line test malfunctioned more often than desired  it was difficult to obtain data to test anything but malfunction detection rules. it is expected that this problem can be overcome by the use of more efficient sensor systems currently being designed. 
　the most difficult problem discovered during development was the disagreement of the experts on certain rules of diagnosis. it is difficult for a knowledge engineer to offer any solution to this problem. when the problem occurred an attempt was made to hold group meetings of the experts to discuss the disagreements and reach a consensus. if no agreement could be reached  the rule was modified  usually making it less effective. fortunately  this occurred infrequently and did not unduly reduce the efficacy of the system. 
　some  rules of thumb  became obvious during the project and when followed gave optimum results for the time involved. it is probably best to present then in list form: 
i. do not misrepresent the capacities of the system. it will alienate the experts and raise management expectations to a level the system cannot deliver. 
1. develop a script for use in questioning the experts. if the same question is asked two ways  it will often elicit answers as if two different questions had been asked. 
1. after a phase of development is completed  by judgement of the knowledge engineer  turn the system over to any interested experts. this often results in information that was missed during questioning. 
1. for best efficiency  the team approach to knowledge engineering seems to be successful. the quasi expert knew when steps were left out and could offer the experts assistance in verbalizing their thought processes  while the pds expert insured that the most efficient pds structures were used throughout. 
1 implementation 
　as mentioned earlier  pds is written in srl  which in turn is implemented in the fran/. lisp dialect of lisp running on a vax-1  under the vms operating system. the program consist of four parts: the knowledge base development functions  the input simulation functions  the inference mechanism and an explanation facility. 
the knowledge-base development part of pds provides the 
 tools  that the knowledge engineer  or the sophisticated expert  can use to develop the rule base. aside from the obvious functions that ease the addition  deletion and editing of rules  an extensive library of utility functions exists to list and describe the rules  to save and restore the rule base  to print hard copy listings  to initialize the system to a predefined state  and so on. 
　testing of the rules is facilitated by the presence of functions that allow the manual entry of sensor values and the cutting of specific contexts. input data can be entered in lieu of actual sensor readings. an edit function is provided to allow the study of the effects of small modifications in sensor values on the propagation of belief process. 
　the inference program performs forward propagation of belief from sensor nodes. if a parametric alteration rule fires  all nodes and rules directly or indirectly affected are re-evaluated. 
   the explanation facility is quite primitive. it does not involve natural language generation  but rather it puts together sentences from  canned  fragments contained in the description slot of the various schemata. plans exist to improve on this particular feature  both in the language generation aspect and in the range of questions it can answer  the only question at this time is  why    . the explanation facility can be connected to a text-to speech converter  the prose 1 board by telesensory.lnc   thereby being able to  speak  its explanations. 
   a goal of this project is to provide machine technicians with a portable and inexpensive diagnostic tool. a microprocessor version of pds is being implemented on a four board package  cpu  memory  graphics i/o and text-to-speech converter   that fits in a hand-carry suitcase. we call it the  expert in a box  version of pds. it has two modes of operation. in the independent mode  it can perform diagnosis only. in the alternative mode  it can connect  

via a built-in modem  to the vax. and thereby act as an intelligent remote terminal for the expert system. in this mode  it can also be connected to a loudspeaker  for voice explanations  and to a color graphic display. 
1 conclusions 
   pds is a forward chaining rule-based system for process diagnosis. it is being implemented in environments in which data acquisition is totally automated  thereby limiting the amount of user interaction. in pursuing its implementation in tnese environments  problems of spurious readings and general degradation had to be solved. we chose to solve ihese problems in three ways. first  raw data was introduced  stored  and retrospectively analyzed in the knowledge base in order to provide greater flexibility. second  meta-diagnosis was performed to adapt the rule-base to changes in its physical environment  i.e.. sensor degradation ; as sensors degrade  pds focuses its analysis only on the sensors which provide reliable information. third  redundant senior readings were analyzed and combined into a composite sensor. the approach reported here is just a step towards the general problem of the intelligent acquisition and analysis of sensor-based information. techniques such as sensor redirection and tuning remain to be investigated. 
1 acknowledgements 
this research was supported by the westinghouse research and 
development center. chris kemper  a domain expert and system user  provided valuable feedback on the design of pds. r. byford and a.i szabo provided continued management support. many thanks to brad allen of the intelligent systems laboratory for his invaluable help and support. 
1 