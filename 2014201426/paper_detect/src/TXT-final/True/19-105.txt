 
today's computer networks are large and complex. their dayto-day operation and maintenance can benefit from the support of an expert system  mainly as an aid in troubleshooting. network troubleshooting has characteristics  like incomplete data  high rate of events  simultaneous presence of several problems  which raise interesting problems in the development of an expert system. 
dantes is an expert system designed to provide real-time assistance to network operators. this paper presents the system and stresses the development issues that are peculiar to network troubleshooting. of particular importance are 
performance of inference in real-time  multi-problem handling  and consideration of time in reasoning and revision of belief dealing with such issues and especially with real-time efficiency is primarily a question of system design. this has implications for the knowledge base organization  reasoning mechanism  and recording of deductions. 
1. introduction 
dantes is a real-time assistant to network supervisors in carrying out their troubleshooting activities. troubleshooting is the part of network control that concerns the detection and diagnosis of network problems with the aim to identify the deficient component. dantes is driven by external events  which can be spontaneous network alarms  result of tests  manual operator input  etc. 
the system analyses each event and  when it detects a malfunction  warns the supervisor  giving advice and indications for the  manual  tasks that need to be performed. 
at first sight  network troubleshooting is quite similar to other applications of ai to industrial environment. however  it presents characteristics that make the development of an expert system in this domain an interesting challenge. of particular importance are : 
- integration of structural and heuristic knowledge: 
dantes uses structural knowledge  about the network and about network events  and heuristic knowledge about fault detection and diagnosis. both kinds of knowledge require different representation paradigms  and must be integrated. 
- inference mechanism with real-time efficiency : troubleshooting must be done in real-time. 
- multi-problem handling: 
in contrast with most industrial processes  which only present one problem at a time  coexistence of several problems is standard in large computer networks  and cannot be ignored. 
- reasoning with time : 
in common with other industrial processes 1   time aspects are important in network troubleshooting. they are not limited to correlation of events having occurred at different moments in time. 
of special interest is the consideration of time in plausible reasoning 
 and belief revision with time : some deductions must be revised after a time lapse. 
the purpose of this paper is to discuss the issues that arise from dealing with such features in expert system development. two aspects are considered in detail : knowledge representation and reasoning mechanism design. 
dantes principles have been tested on a nationwide meshed network interconnecting more than 1 processors. 
the dantes prototype system has been implemented on a ti explorer lisp machine. 
1. domain characteristics 
the supervision of a large computer network is usually handled from a control center. exception events occurring in the network arc reported to the control center through the intermediary of the network itself. these events must be interpreted by human operators to detect and diagnose problems. in this context  a problem is any abnormal situation serious enough to disturb communication between network components. the complexity of troubleshooting is due to the following aspects : 
event correlation 
a single event is usually not significant. an abnormal situation often generates a large number of events  each containing a small piece of information. situation analysis and characterization must be done by a reasoning process integrating the various events. at first glance  event correlation seems quite straightforward : the reported events need only be divided into groups of related components; the resulting event sequences will then be compared with the standard sequences characterizing a problem and hence will lead us to conclude about the problem. this is not so for a number of reasons: 
- time correlation : events related to a given situation are scattered 
over a time interval which can be long : hours  even days for some degradation problems. 
also  the rate at which events appear can have an importance; e.g. a 
modem fluctuation once an hour is not serious  but 1 times a minute is. 
- space correlation : an abnormal situation can induce events on several network components : on the faulty component  on hierarchically related components and on components interconnected through the network. a problem must sometimes be indirectly detected  from related events reported by components other than the faulty one. 
- redundant events : many events are a direct consequence of others and give no additional information. events can even be reported  via the network  after the problem has been fixed. such events can only distract the operators and should be masked. 
to cover the various aspects of event correlation  especially event space correlation  dantes needs structural knowledge 
* about the network  including its components and the relations among them. 
* about events which can occur for these components. 

* this research was supported by iwonlirsia 
	mathonet  van cotthem  and vanryckeghem 	1 

reasoning with incomplete data 
network troubleshooting always begins and often proceeds with incomplete information. information is gathered incrementally as more events are reported. event interpretation does not always lead to a definite conclusion : events can be lost or not reported because communication to the control center is down  and different problems sometimes start off with the same event stream. in most cases  only hypotheses can be assumed about a given situation. when incoming events add information  these hypotheses need to be reconsidered or refined. hence  the inference mechanism must have plausible reasoning allowing revision of belief . revision of belief is not only triggered by events  but also by time progression. the absence of events can sometimes be as significant as their appearance and should be interpreted as such. for instance  suppose events lead us to suspect some degradation on a component other events should occur a short while after to confirm the degradation. if no event is reported  the assumption of degradation must be removed. 
molti problem handling 
any computer network usually has several unrelated problems pending. corresponding events generated for each will therefore be intermixed. some abnormal situations are more critical than others  and should be dealt with first. since information is progressively gathered  the reasoning related to a given problem is achieved in several stages  discontinuous in time and triggered by event arrivals. in between the stages  the reasoning activity can focus on other abnormal situations. at each stage  the inference mechanism must record all deductions already made to enable the reasoning to continue properly. 
event explosion 
the number of events increases rapidly with the size of the network  typically like n n-1  where n is the number of active connection points. our sample network presents an event every 1 seconds on average  sometimes peaking to one per second. this situation adds to the efficiency requirement for the reasoning mechanism  as the system is meant to work in real-time. 
1. knowledge representation 
three kinds of knowledge must be considered: 
* structural knowledge; 
* deductions  the data types created and manipulated during reasoning activities; 
* knowledge about problem detection and 
diagnosis which specifies how to interpret network events  how to recognize problem situations and how to isolate faulty components. 
we believe no single paradigm is appropriate. we have thus combined different knowledge representation techniques. 
1. structural knowledge 
structural knowledge about the network and the network events lends itself to a hierarchical organization that permits inheritance of properties. 
a structured object formalism  is best suited to represent this knowledge. each type of network object and of network event is represented by a class in a class inheritance hierarchy. a child class is considered to be a specialization of the parent the child inherits the parent properties but can add to or change them. 
dantes' structural knowledge comprises two basic hierarchies : the network component hierarchy and the network event hierarchy. 
some important object type properties will be used later and are worth mentioning: 
a  network components: 
* properties representing relationships between objects  such as the component/subcomponent relationship or the relationship between objects which are physically interconnected ; 
* properties used by the reasoning process like status  which is a summary of object current situation. strictly speaking  such properties do not belong to the structural knowledge but are most naturally incorporated in the classes. 
the network configuration is represented by instances of object classes as defined above. 
1 	knowledge representation 
b  network events: 
the main properties serve to identify an event in time and space  send-time. receive-time  send-machine  ...  and to define event treatment characteristics  e.g. threshold and interval  used in  if the event occurs more than threshold times during a time interval  then the situation is serious  . 
1. deductions 
1.1. general principles 
deductions can belong to three basic types : symptom  hypothesis and result. a symptom represents a  set of  events which may be required for future task handling. symptom and event differ in their utilization and in their temporal interpretation. an event occurs at a specific moment in time  then it disappears. a symptom is recorded for future utilization in the reasoning process. symptoms range over time. as such  they have a start-time and a stop-time property. this enables symptoms to represent a sequence of events of a same type and having occurred during a time interval. 
the distinction between hypothesis and result lies in their logical interpretation. a hypothesis is an assertion about a network object which may be true or not. a result is a true assertion about a network object. hypotheses are introduced to handle plausible reasoning in an approach very similar in spirit to . 
the definition of these new notions forces us to introduce three additional hierarchies. however  an event and its corresponding symptom can be interpreted as different views of the same concept the same is true for hypothesis and result. different views of a same concept can share identical properties. using pure hierarchies leads to an inconvenient duplication of knowledge : a same concept can be present in several hierarchies. we have used another solution similar to the viewpoint approach in knowledge organization  1  and inspired by . hierarchies containing identical concepts arc fused in a single lattice. a concept present in several hierarchies is represented in this lattice by a single node containing the properties common to all concept views. properties specific to a view define a viewpoint of this concept 
deductions are linked by a n to m relationship  deduction-used/ 
deduced-from  expressing their use in the reasoning process. the deductions relative to an abnormal situation form a network representing our knowledge about the situation. 
1.1. management of deductions 
as a consequence of multi-problem handling  the reasoning process creates and uses many unrelated deductions. these could all be recorded in an ad hoc data structure disconnected from the network objects  a sort of large working memory. this solution does not allow an easy and efficient selection of the elements relevant to the reasoning process. moreover  it is unnatural since deductions can be associated with network objects : they always represent an assertion about some specific object  and can be recorded there  in a data structure called history. the first strategy that comes to mind  scattering deduction recording over all the objects involved  has the same disadvantages. the optimal approach consists in associating a history with only some selected object types chosen according to the following criteria: 
- the component function in the network; 
- the component importance in the network structure : some components divide the network into independent functional units; 
- the component size : a component with a large number of subcomponents can record historic data for all its sub- components. history can contain any number of deductions. deductions which are no longer valid must be removed. at first glance  all deductions related to a problem could be removed when a conclusion is reached. however  recording of conclusions is particulary useful for a direct diagnosis of problems which occur repetitively on the same network component say  if a connection has presented failures due to a faulty subcomponent  a modem for instance   the next time a failure occurs for this connection  one can likely suspect this subcomponent several mechanisms can be employed for the selective garbage collection of history : deduction fixing and timeout features. they are discussed in section 1. 

1. problem detection and diagnosis knowledge 
recent applications of knowledge based techniques to industrial systems have introduced the concept of deep reasoning  : the system is represented by a deep model which integrates a representation of the system structure with its components and the relations among them  and the functional description of each component  1 ; reasoning is carried out by simulating system functioning from this model. 
this technique does not apply here because the knowledge is mostly heuristic : a large computer network is very complex; knowledge about the network behaviour is also very fragmented among several experts each having a specific domain area. simulation is inefficient  often impossible  and in general not very useful. model based reasoning can only be used at a very elementary level  like in  if a switching node is down  all processors connected to it are not obtainable . 
the heuristic nature of the knowledge would lead us naturally to a production rule representation. to meet task requirements  the rules should have the following features : 
- they must be well integrated into the structured object formalism used to represent structural knowledge : rules should easily access objects of the structural knowledge and their properties  including history and status . 
- the selection and application of rules related to a problem must be very efficient to cope with the real-time constraint. an alternative is to represent detection and diagnosis knowledge using techniques of procedural attachment  to structured objects  demons in frame terminology  . event treatment demons are defined for network object types. when an event occurs  the corresponding demon is executed. this technique is certainly efficient but not flexible. 
the representation technique we have chosen combines the advantages of rules and demons. in our approach  a rule is defined on an object class and rule application takes place for an instance of this class in a way very similar to the loops rule oriented programming approach  1 . rule definition has the following properties : 
- class : the class to which the rule is associated. for dantes domain  it references an object type in network representation. rules are class properties inherited in the classical way. 
- name : the rule name. 
- trigger : it specifies the network events or system actions which can cause rule application. typical actions considered as trigger are deduction assertions made by the system. the trigger property can then reference the precise viewpoint which may trigger the rule  or simply the whole concept type if concept view is not important for rule triggering. 
- state : the status value that a network object instance must have to enable rule application  
- environment: it allows the declaration of variables local to the rule. this declaration is optional. note that a rule environment always include some local variables automatically bound by the system  e.g. current-object bound to the instance for which the rule is invoked . 
-body : the body contains any lisp forms  to be evaluated sequentially. generally  the body is an  if condition then action  form where condition and action concern the history of network objects known in rule environment. 
example 
 defrule  connection :ri  
 trigger event modem-status-change  
 state  up degrading   
 if 
 is-suggested current-object 'degradation  
 then  suggest current-object 'result:failure     
this rule  with name :r1  is defined for class connection. the rule is triggered by the event modem-status-change  we specify the viewpoint to consider  on connection instances with status set to up or degrading. the rule body states that if the current object already presents a degradation  hypothesis or result without precision   then one can conclude that a failure exists on this connection and one specifies the viewpoint of the failure : it is a result  the keyword result: prefixes failure . 
with these rules  problem detection and diagnosis expertise can be expressed succintly  in a declarative way. moreover  the rule base is not flat : rules are grouped by object class. this organization allows a distribution of expertise among the different object types of the network representation at the very place where the application of knowledge can be useful and efficient. rule organization also helps to efficiently select the rules related to a given problem. as rule application takes place on an instance of a class  the selection of the rules which can be applied can directly start from the subset of rules defined for this class. the trigger and state properties allow a flexible and powerful control of rule selection and application. both attributes are used for a precise description of the situations where the rule may be applied. 
1. reasoning process 
1. general principles 
events occurring in the network are transformed into dantes internal formalism  object oriented . the network objects concerned by this event are determined from information associated with each event type. a message reporting the event is sent to each object. at message reception  the object selects  from the rules associated to it  those whose trigger matches the event received and whose state matches the object's status value. the selected rules arc tried sequentially in their order of selection. this rule application can produce deductions which  in turn  can trigger other rules  thus continuing the inference  and possibly updating the deduction network. figure 1 illustrates this principle. 
this inference mechanism restricts problem solving activities to only the network objects concerned by the problem. together with the corresponding distribution of history and the organization of rules  it makes the inference process manipulate only knowledge relevant to the problem. this permits to handle multi-problem reasoning in an efficient and elegant way. 
one can view the logic followed as a generalized  state transition reasoning  as commonly used in communication protocol design. each object is in a well defined state  given by status . the occurrence of events and the resulting deductions will eventually alter the state of one or several objects. 
the inference mechanism comprises three basic operations : 
* create deduction; 
* remove deduction set and update the deduction network resulting from this deletion ; 
* fix a deduction set  i.e. remove from the deduction network related to an abnormal situation  all those deductions which arc not used to deduce the given set. 

figure 1 
	mathonet  van cotthem  and vanryckeghem 	1 

1. time aspects of inference 	1. conclusion 

from section 1  we glean that the two most important aspects related to time are: 
- time correlation between events ; 
- belief revision with time : some deductions become invalid after a while  i.e. they have a  lifetime    and should thus be removed. deciding when a deduction gets too old is part of domain expertise. 
these features can be implemented in several ways : integrated in the heart of the system  by functions  or by rules. knowledge about time correlation is best expressed by rules. conditions for time correlation of events refer only to the properties of : 
- the incoming event; 
- symptoms or other deductions to which this event can be related; - network objects concerned by this event. 
on the other hand  revision of deduction with time is directly concerned with the whole deduction network to which they belong. if a deduction is used to derive other  valid  deductions  it cannot be invalid. checking whether a deduction can be revised  and subsequently removed  could be implemented in the rule base. this is however highly inefficient  these 
rules have to be tried on a regular time basis  and would pollute the rule base with knowledge which is in fact control knowledge and not domain expertise. as amply stressed in the literature  1  both kinds of knowledge must be separated for the transparency of the knowledge base. 
our approach is as follows : to handle revision of deductions with time  we have added to each trigger object type a timeout viewpoint  which contains all properties allowing time management of these objects in the reasoning process. a deduction is in timeout if and only if the deduction has not been in use for a predefined time  the timeout interval . 
a deduction is not in use during a certain interval if and only if: - it has not been used to derive any deduction s ; - no deduction deduced from it is still in use. 
the implementation uses a separate timeout process which maintains a list of timeout viewpoints for deductions which can be in timeout. when a deduction times out  the timeout process reports to the associated object. 
the timeout viewpoint of a trigger can be used to trigger rules just like the other viewpoints of trigger objects  event  symptom  hypothesis or result . 
this allows removal of deductions after a certain period and also : - specific action for deductions at regular times; 
   - polling of certain conditions by the inference engine. these facilities allow us to deal with time aspects in expert systems  without increasing the time required for rule selection. 
1. realtime aspects of inference 
real-time considerations are important for the design of dantes. in the following  we discuss several features built in dantes  which arc typical 
of traditional real-time systems. 
real-time implies fast response  hence one must: 
- minimise the amount of code executed; 
- avoid disk accesses by limiting virtual memory size and usage. the rule selection mechanism  using state and trigger properties of rules  limits drastically the number of rules tried at each inference step. for our sample network  the ratio between the number of rules selected at each inference step and the total number of rules in the knowledge base is at most 1. 
all aspects concerned with memory management are mostly machine dependent. we have incorporated the following features : 
- deductions are allocated and deallocated by the inference engine  in a special area on which no garbage collection is done; 
- the structural knowledge is static and can be loaded in a static area 
 no garbage collection ; 
- a judicious choice of which parts  code or data  should stay in physical memory leads to a minimization of disk access; 
- code reduction and optimization are used in the rule compiler  augmenting the code efficiency; 
- the dynamic work area is quite small  with frequent on-line garbage collection. 
1 	knowledge representation 
this paper introduced dantes  an expert system to assist network operators in the maintenance and problem diagnosis of a large computer network. apart from its significant economic value  dantes presents interesting functional aspects which are not found in other industrial expert system applications : 
- it is driven by discrete external events; 
- time aspects are important  not only in the correlation of events  but also in the reasoning process; 
- multi-problem handling; 
- the inference process must be real-time and sustain a high rate of incoming events. 
dantes combines a number of paradigms  each well suited for a part of the problem. the salient aspects of the proposed system are : 
- the integration of heuristic and structural knowledge; 
- the ability to treat several distinct problems concurrently; 
- a fast and efficient rule selection and rule application mechanism; 
- a fast and original approach to handle time in the inference process; 
- various design and implementation issues to provide real-time performance. 
we believe that the proposed solution forms a framework that can be used in many real-time expert system. the inference mechanism provides a natural way to deal with time dependent knowledge without imposing undue restrictions on the formulation of the rules. 
1. acknowledgements 
we are grateful to francoise van den berghe  our domain expert  for her continuous cooperation throughout this project. we thank suzanne galand for her helpful comments about this paper. 
