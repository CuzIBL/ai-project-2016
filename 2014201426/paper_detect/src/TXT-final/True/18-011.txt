 
　　this paper is concerned with the problem of generalization heuristics  which are incorporated into our verification system for prolog programs. two kinds of generalization are discussed  that is  a mechanical generalisation and an intelligent generalization. we show that the mechanical generalization used in boyer-moore*s theorem prover  bmtp  can be performed by the simplification rule of our verification system  as well as in the case of cross-fertilization. to the intelligent generalization heuristic  which is not employed in bmtp  we give a generalization scheme which is naturally incorporated into our inference system of the extended-execution style of the prolog interpreter  and which proves to be effective also for flawed induction schemes. 
i. introduction 
　　this paper is concerned with a verification system for prolog programs which is currently under development  as one of the subprojects of the fgcs  intelligent programming system  . 
　　logic programming is often advocated as a desirable choice for the verification problem because of its clear semantics  e.g.   . in the design of our verification system  we have tried to take advantage of prolog's characteristics and present first order inference in an extended execution style of a prolog interpreter  1 . not only first order inference but induction is indispensable as a means of proving interesting properties of prolog programs such as termination and correctness. in the case of functional language  boyer-moore's theorem prover  bmtp   is famous for its automatic application of induction and many sophisticated heuristics constructing inductive proofs. into our verification system  various kinds of heuristics have been integrated  most of which are inspired by bmtp and are developed to suit the verification of prolog programs 
 e.g-  . 
in this paper  special attention is paid to  generalization 
heuristics  which are applied when a theorem to be proved is too weak and it is necessary and easier to prove a theorem that is stronger than the original weak one. we deal with two kinds of generalization heuristics. the first generalization heuristic  we call it mechanical generalisation in this paper  corresponds to the one used in bmtp  and the second  called intelligent generalisation   is one that is not employed in bmtp but is left to the user. some work has been done with respect to functional language to mechanize the intelligent generalisation heuristic  e.g.   1  . our main purpose lies in an attempt to clarify how these two kinds of generalization heuristics can be incorporated into the verification of prolog programs. 
after summarizing some preliminary materials in section 
ii  we present our verification methods for prolog programs in section iii. in section iv  we explain two kinds of generalization heuristics ; first  we illustrate that the mechanical generalization is naturally incorporated by the simplification rule of our verification system ; secondly  we show some examples which cannot be proved by simply applying first order inference and induction  and therefore motivate us to incorporate the intelligent generalization heuristic. in section v  we discuss in detail how the intelligent generalization is performed in the framework of our verification system of prolog programs. lastly in section vi  we discuss the relation to other work and some implementation issues. 


1 h. seki 
 iii  when g h or gvh is a positive  negative  subformula of f  then g and h are positive  negative  subformulas of f. 
 iv  when  is a positive  negative  subformula of f  then g is a negative  positive  subformula of f and h it a positive  negative  subformula of f. 
　　next  variables which appear in a specification are distinguished in the following way. let f be a closed first order formula. when  is a positive subformula or  is a 
negative subformula of f  then x is called a free variable of f. on the other hand  when  is a negative subformula or  is a positive subformula of f  then y is called an undecided variable of f. in other words  when f is transformed into prenex normal form  free variables are variables quantified universally  and undecided variables are those quantified existentially. 
　　a goal formula is a formula which is obtained from an 1-formula by replacing each undecided variable y with  y and deleting all quantifications. furthermore  a substitution o for a goal formula g is called a deciding substitution when a 
　　instantiates no free variable in g. 

　　a replacement of an occurrence of a term t in a formula f by s is denoted by ft s   and a replacement of all occurrences of a term t in a formula f by s is denoted by ft s . formula f is said to be in a reduced form  with respect to logical constants true and false  if f is either  i  true or  ii  false  or  iii  if neither true nor false occur in f. the reduced form of a formula f is denoted by f i. 
iii. inference rules 
　　in this section  we give a brief description of our verification procedure for a specification  for a detailed explanation  see  . 
a. extended execution 
　　since a specification is not restricted in a horn clause but is expressed in an 1-formula  we need some extension of the usual prolog interpreter. for this purpose  our verification system uses the following four inference rules. 

　　these four inference rules are repeatedly applied to a given goal formula until it is reduced to true or false. if these rules cannot be applied any more  then we appeal to the following induction. 
b. induction 
　　our verification system utilizes inductive proofs which are based on structural induction schemes. those induction schemes are also used in  1    for the verification of prolog programs. for example  the following is an induction scheme for list x : 

iv. generalization heuristics 
   in the following  we discuss two kinds of generalization heuristics incorporated into our verification system. 
a. mechanical generalization 

where term reverse l  in the first formula it replaced by a new variable n and thus a more general formula is obtained. on the other hand  let g be a goal formula : 

　　when we apply the simplification rule to the above underlined positive and negative rever$t l  m  in g  then we generate the following and-goals : 

which are immediately reduced to : 

and true  respectively. this inference exactly corresponds to the above-mentioned generalization heuristic employed in bmtp. 
　　likewise  the inference of cross-fertilization in bmtp also corresponds to the one performed by simplification . in this way  generalization and cross-fertilization  which are treated as different heuristics in bmtp  are performed in a unified way by the simplification rule in our verification system. 
　　furthermore  the heuristic of eliminating destructors in bmtp can be considered as a kind of generalization heuristic. 
for example  selectors for data structure like ear l  and cdr l  appearing in the goals of bmtp are eliminated and replaced by variables. in prolog programs  we usually don't use such selectors explicitly ; we do without them by using unification. hence  prolog programming style sometimes makes unnecessary such a generalization heuristic as eliminating destructors. b intelligent generalization 
　　the second generalization heuristic differs from the above one  and bmtp intentionally does not employ it because it requires  creative* insight  chap.xii in  . in the verification of prolog programs  however  there are also some cases where  in proving an induction step goal  we cannot use its induction hypothesis because of mismatching with its conclusion. as an example of such a case  consider the proof of the following theorem. 
theorem  rever se-rever se . 

end. where program reverse is defined as follows : 

　　first  we try to prove the above theorem by induction and the induction scheme in section i i l - b is generated for list: x  where 
　　the proof of its base case  q       is trivial. the proof of the induction step goal  however  is not easily performed 
h. seki 1 
because of those underlined mismatched literals shown below : 

　　here  since we cannot apply simplification because of mismatching between *     and '' a '' in the above underlined parts  there is no way to use the induction hypothesis. these  phenomena  often happen to the verification of prolog programs containing a  accumulator   like the second argument of reverse  which  though they make the computation linear order  cause at the same time mismatching between an induction hypothesis and its conclusion. hence  in order to solve these kinds of mismatching  it is necessary to incorporate some heuristics in order to generate a generalized goal. our verification system generates the following goal mechanically : 

　　we call such kind of generalization an 'intelligent generalisation.  it is easily known that the above theorem is actually a generalised goal of go and its proof can be rather straightforwardly performed. 
v. intelligent generalization heuristic 
　　in this section  we state how the intelligent generalization heuristic is applied to the proof of an induction step goal and give the intelligent generalization scheme which mechanically generates its generalised goal. we then go on to show that its scheme is also effective for flawed induction schemes . 
a intelligent generalisation scheme 
　　at first  for ease of understanding  we illustrate the intelligent generalization heuristic by using the previous example. 

　　the first step of intelligent generalization is to find those mismatching arguments which make it impossible to use the induction hypothesis. in the above example  those mismatching arguments are       and   a   in rever$e x {    yo  and reverse x   a  y   respectively. 
　　next  we replace the mismatching arguments in the induction conclusion by new variables. in the above    a   is replaced by a new variable  say  t. we call those variables contained in the mismatching arguments  mismatching variab/ei   and those arguments in the induction conclusion which contain mismatching variables are called  arguments relating to mismatching.  in this case   a  is a mismatching variable and '' a|x   is an argument relating to mismatching. these arguments relating to mismatching are also replaced by new distinct variables. in this case  we replace '' a|xj  by a new 

1 h.seki 



vi. concluding remarks & related work 
　　this paper has shown how generalization heuristics are incorporated into the verification system of prolog programs. 'two kinds of generalization  mechanical generalization and intelligent generalization  are discussed. we have shown that the mechanical generalization used in bmtp can be performed by simplification in our verification system  as well as in the case of cross-fertilization. to the intelligent generalization heuristic we have given a generalization scheme which is naturally incorporated into our inference system of the extended-execution style  and which has proved to be effective also for flawed induction schemes. 
we owe our heuristics to bmtp and other related work by 
moore  1  and aubin   although there is a difference in target languages and deduction methods. as for the inferring constraint relation mentioned in section v  we find some relevance to shapiro's  model inference system which is a general theory to infer a prolog predicate satisfying given facts. our intelligent generalization scheme differs in that it gives a prolog predicate some constraint relations to be satisfied. 
　　the generalization heuristics presented here have been examined by numerous hand proofs and their first versions have been implemented in dec-1 prolog on dec-1 as one of the heuristics of our verification system for prolog programs. we intend to implement our verification system on psi  as a basis for  intelligent programming environment- for prolog programming on which we can perform various kinds of experiments such as program transformation and synthesis. 
acknowledgments 
　　the author appreciates k. fuchi director of icot    k. furukawa  chief of icot 1nd laboratory  and t. yokoi chief of icot 1rd laboratory  for the chance of doing this research. he is greatly indebted to t. kanamori for valuable comments  especially on the extended execution. he would also like to thank a. fusaoka  h. fujita and k. suzuki for their useful discussions and help. 
