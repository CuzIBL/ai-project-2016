	parallel 	processing 	of 	resolution 
takahira 	yamaguch1*  	yoshikazu tezuka** 	and 	osamu kakusho* 
* 	the itistilute of scientific and industrial research  osaka university  
1 mihoqaoka  lbaragi   osaka 1  japan 
** faculty of engineering  osaka university   -'  yamadaoka  suita  osaka 

1  japan 
a b s t r a c t 
in this paper  parallel resolution algorithm 
 para  is described to improve the execution efficiency in resolution process. para consists of two parts: parallel unification and generation of a resolvent. the first part is characteristic of para  which partitions whole set of expressions w into independent clusters as pre-processing and unifies each cluster in parallel. the efficient implementation for the processing peculiar to para is presented and checked by means of the experiment in comparison of execution efficiency of resolution. experimental results show para is very effective in occurrence of many clusters. 
1.introduction 
   unification in first-order logic is to match corresponding arguments in two predicates. this processing is important in resolution  and the efficient implementation for it has been the subject  of much investigation - 1l. but this research in unification was out of parallelprocess ing. 
　　with regard to unification  resolution  parallelism  two representative ways  the postprocessing way and the pre-processing way  would be considered. in case of the former  after unification  the consistency of substitution must be checked and each substitution component must be composed. this processing would be computed with unification and so the post-processing way is considered to cost much. on the contrary  in case of the latter  the pre-processing way to partition a set of expressions firstly could cost l i t t l e   because this processing could be computed without unification. 
     from this consideration  in this paper  para is presented as one of the pre-processing ways. the characteristic of para lies in partitioning whole set of expressions w  the pairs of corresponding arguments in resolved literals  into clusters  sets of pairs of arguments such that each set has no variables in common  as pre-processing and unifying each cluster independently in parallel. 
1.parallel resolution algorithm 
     resolution consists of unification and generation of a resolvent. it costs more time to execute unification and so unification must be executed efficiently. the unification problem can be expressed as simultaneous equations  and the solution of them can be considered as most general unifier  mgu . the ordinary serial unification is process which solves simultaneous equations sequentially. they could  however  be divided into subsets of equations which are parallel-processed independen tly. parallei resolution consists of two parts: parallelprocessing of unification and generation of a resolvent. fig.1 shows para. firstly para partitions whole sets of expressions w into clusters of wl-wm which include no variables in common as pre-processing. secondly  after this pre-processing  para tries to unify each cluster independently in parallel. if all clusters are unifiable  para obtains the mgu of w by uniting the mgus of all clusters. otherwise para concludes that w is not unifiable. finally  after having obtained the mgu of w  para generates the resolvent and clustering information  which will be described later . 


1.efficient processing for peculiar phase in para 
　　the phases with * sign in fig.1 are peculiar to para. among these phases  clustering of w and generation of clustering information must be processed efficiently. 
1 clustering information 
since w is partitioned based on variables  
clustering information will have to include the following information in order to execute clustering of w efficiently . 
 1  variable information  of argument  
 1  cluster information  of literal  
     variable information shows what variables each argument of literal has. variable information is stored in a form easy to treat. 
cluster information shows how one literal can be divided. clustering information consists of the above two pieces of information and the number of them. this is stored corresponding to each literal  as shown in fig.1. 

1 cluster operation algorithm 
　　clustering of w is executed by means of applying cluster operation to cluster information of resolved literals. cluster operation is the process which makes clusters for parallel unification. it matches n-th component of one cluster information with all components of the other and combines matched 
components. 	p a g x1  x1 f g x1    	and 
p x1 x1 f x1  f x1   turn out niot to be divided divided by means of applying cluster operation to cluster information of them. 
1 clustering information generation algorithm 
　　generating clustering information is executed by means of making use of variable 
information of parent clauses. 
t. yamaguchi et al. 1 
** clustering information generation algorthim ** 
     step 1 : delete variable information of resolved literals of parent clauses. the rest is variable information of clrsv' which is an incomplete resolvent which mgu is not applied. 
     step 1 : generate the pairs of the variable number  natural number corresponding to each variable  included in  term  of mgu and the variable number corresponding to the substituted variable of mgu. 
     step 1 : apply variable information of mgu to variable information of clrsv' and generate variable information of clrsv which is a complete resolvent. 
     step 1 : generate cluster information of first literal by means of clustering variable information. 
     step 1 : connect variable information of and cluster information of and let them 
clustering information of clrsv. 
1.comparison of para and sra 
to compare para with sra  serial resolution 
algorithm   1 logic programs  have been run on two algorithms using theorem proving system  senri  . the run time for each process has been measured with executing snl resolution and the total time for resolution process has been finally compared. table 1 shows the experimental results. 
　　para has about 1-fold improvement in unification process and about 1-fold improvement in resolution process over sra on the average. 
     comparing the run time for generating resolvents in two algorithms  the run time of para is about twice one of sra. this implies that the run time for generating clustering information is as small as one of generating resolvents and so does not affect the total time so badly. 
　　　since the redundancy for generating clustering information adds to resolution process  the improvement rate of resolution process becomes worse. the improvement rate of resolution process is  however  around 1times of the number of clusters. moreover the improvement rate of both unification process and resolution process rises in proportion to the number of clusters. 
1. comments 
     in this experiment  some pairs of resolved literals  in which para becomes effective or ineffective  emerged definitely. table 1 reports these literal pairs in detail. 
 1  literal pair 1  in which resolution succeeds and para becomes effective  
-  mic1m fm1 fujitsu 1  
	mic1m  xi  	x1   x1  1  
     literal pair 1 is divided into 1 clusters at the pre-processing. since the mgu of each cluster has only substitution component  the run time for substitution is short. so parallel resolution becomes very effective. 

1 t. yamaguchi et al. 
　　　1 logic programs have literal pairs inconvenient for para as well as convenient for para and so the experiment is fair. since the decrease in cost caused by convenient literal pairs is over the increase in cost caused by inconvenient literal pairs  para is effective to ordinary problems which include inconvenient literal pairs as well as convenient literal pairs. 
1.conclusion 
　　　para has been introduced for the improvement of execution efficiency for resolution process. it is characteristic of para to partition whole set of expressions w into independent clusters as pre-processing and 
	unify each 	cluster in parallel. 
     the 	experimental results in 	comparison 	of execution 	efficiency 	for 	resolution 	show 	the following. 
 1  the 	processing 	peculiar 	to 	para has been implemented efficiently. 
 1  the improvement rates of both unification process and resolution process by parallel-processing rise in proportion to the number of clusters. 
 1  since the decrease in cost caused by convenient literal pairs is over the increase in cost caused by inconvenient literal pairs  para is effective to ordinary problems. 
     finally  unification in this paper is limited to be basic unification in . 
parallel-processing of refined unification in  or  would  however  be possible and further improvement could be expected. 
