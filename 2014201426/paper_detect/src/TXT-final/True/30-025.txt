 
the rapid development of efficient heuristics for deciding satisfiability for propositional logic motivates thorough investigations of the usability of np-complete problems in general. in this paper we introduce a logic of action and change which is expressive in the sense that it can represent most propositional benchmark examples in the literature  and some new examples involving parallel composition of actions  and actions that may or may not be executed. we prove that satisfiability of a scenario in this logic is np-complete  and that it subsumes an np-complete logic  which in turn includes a nontrivial polynomial-time fragment  previously introduced by drakengren and bjareland. 
1 	introduction 
the rapid development of efficient heuristics for deciding satisfiability for propositional logic  gsat and similar heuristics  selman et a/.  1   motivates thorough investigations of the usability of np-complete problems in general. in this paper we introduce a logic of action and change which is expressive in the sense that it can represent most propositional1 benchmark examples in the literature  and some new examples involving parallel composition of actions  and actions that may or may not be executed. we prove that this logic extends a previous formalism  where sati lability for scenarios is np-complete  and for which reasoning could be done in polynomial time in a fragment of the logic  drakengren and bjareland  1 . although the polynomial class they characterize is nontrivial  its expressiveness is very limited. this also holds for the tractable fragments of the action description language a  gelfond and lifschitz  1   found by liberatore . in that work  liber atore showed that satisfiability of a is np-complete  and 
   *this research has been supported in parts by the swedish research council for engineering sciences  tfr   the knut and alice wallenberg foundation  and asf a brown bovery  dept isy/amc . 
1  this means that fluents are propositional. 
automated reasoning 
marcus bjareland* 
dept of comp and info science 
linkoping university 
s-1 linkoping  sweden marbjoida.liu.se 
he provided an encoding of a into propositional logic in order to able to use e.g. gsat. there seems to be no other analyses of computational complexity for similar formalisms  for instance for the situation calculus  mccarthy and hayes  1 . 
1 	overview 
we will develop a logic for action and change in similar spirit as in drakengren and bjareland   henceforth  for convenience we shall denote this paper db1   i.e. we will define the syntax and semantics of a temporal propositional logic  syntactically  but not semantically related to tptl  alur and henzinger  1   with the possibility of expressing time points as linear polynomials with rational coefficients. then we introduce the notion of a scenario description  which is basically a set of formulae in the temporal logic  and formulae that describe the change of fluent values over time. an interpretation of a scenario description is a function  which given 
a set of formulae yields the possibilities as to what combinations of changes are allowed by the set of formulae. for instance  a scenario description may allow either the combination of changes that the feature loaded and alive both are set to false at time 1  or the combination that gunner sleeps is set to true at time 1. a model of a scenario description is defined as an interpretation such that for some possible combination of changes  fluents change values iff they are explicitly stated to change by this combination of changes. this way of defining interpretations enables us to  semantically  model composition of actions as operations on sets of combinations of changes  and to  syntactically  model them on the object-level. in fact  we will view every boolean combination of changes as an object-level composition of separate actions  in an arbitrary number of levels. the basis case is then the change features  which are syntactical constructs that state that the value of one feature changes to true or false. 
　for the results regarding computation  the nphardness of satisfiability in our logic is obvious  since we can encode propositional logic in it. np-membership  on the other hand  is more tricky to prove: the obvious way of guessing an interpretation and a combination of changes and verifying that the interpretation is 

a model using this combination of changes in polynomial time fails  since the set of combinations of changes can be exponentially large. instead  we guess also how a combination of changes is obtained from the interpretation  and this solves the problem. however  this proof technique fails if we introduce quantification over time points  which is used in approaches to ramification  see e.g. gustafsson and doherty  . 
1 	scenario descriptions 
this section defines syntax and semantics of the logic together with some illustrating examples. 
1 	syntax 
we begin by defining a slight  syntactical  extension of the temporal logic in db1. what differs is that the binary operator  for exclusive or is included  but it is straightforward to check that all relevant results of db1 hold with this extension. 
definition 1 a signature is a tuple where  is a finite set of time point variables and is a finite set of propositional features. a time point expression is a linear polynomial over  with rational coefficients. we denote the set of time point expressions over 
iff it does not occur within the scope of a  a  expression in  if no feature occurs free in  is closed* 
　the size of a set of formulae is the sum of the lengths of the formulae in the set. 
we shall be informal with respect to specifying over what signature the language is defined  when it is clear what signature is intended. 
　　in db1 a special language for expressing action scenarios  extending the basic temporal logic  is defined. in this paper  we shall not need that; we just modify the semantics of the temporal logic  and identify a distinguished set of features which designate change of another feature. this is the natural generalisation of sandewall's concept of occlusion  which in turn is equivalent to what is accomplished by a release statement in the language  giunc higlia et a/.  1 . a scenario description. we will call features of the form  and f  change features. given the set 
is denoted -
the set consists of all fluents that are supposed to be inert  i.e. features that will not change value over time  unless explicitly stated. the fluents not in  are non-inert. intuitively  the set  of features is intended to model that the corresponding features in  can be subject to change  and remain unchanged otherwise. 
　we now present some examples in order to present some properties of our formalism  and to try to convince the reader that most propositional benchmark examples in the literature  see e.g. sandewall  for a list  can be represented. 
example 1 we take an example  the russian turkey 
shoot  rts   by sandewall   where we initially  at time point 1  assume that a turkey is alive  and that a gun is unloaded. then we load the gun  at time point 1   spin the chamber  at 1   and fire the gun  between 1 and 1 . the intended conclusion of this scenario is that we cannot prove that the turkey is alive  or dead  after the firing action has been executed. semantically we want one model where the turkey is dead  and one where it is alive  after the execution of the firing action. we now formalise the scenario: 
example 1 as an example of parallel composition we use the balls and boxes scenario  bbs : we have two non-empty boxes on the ground  standing side by side. our first action  o  is to drop a ball between the boxes  so that it is unknown in which box the ball will end up. the second action  ti1  is to throw a ball into the left box. 
initially both boxes are empty. we are interested in the case when both a  and a1 happen. we use the features left empty  and rightempty  which cire true if the left  or the right box is empty  respectively. 

the effect of both a  and a1 happening  as described by the second and third formulae in the set above  as we will see below  will be 

the intended conclusion is that either only the right box is empty  or both boxes are nonempty. we cannot get 
	drakengren and bjareland 	1 

the second case by formulating the composite action in a straightforward manner in e.g. pmon 1  doherty  1   since 

is equivalent to 
i.e. the box to the right will be empty. 
example 1 finally  we model actions that may or may not be executed as  where a is decribes an action  and t the truth value true. when we define the semantics of scenario descriptions  the intuition behind this syntax will be clear. logics like pmon will have similar problems with this construct  but for reasons of space  an example of that is omitted. 
for an example with interactions between concurrently executed actions  see db1  which is the soup bowl lifting example of  baral and gelfond  1  . 
1 	semantics 
we now define the semantics of the temporal logic. the semantics will be directly defined in terms of scenario descriptions; note however that the semantics will be identical to the standard semantics of the basic temporal logic of db1 if we set 
definition 1 let be a signature. a state over is a function from to the set of truth values. a history over is a function   from to the set of states. a valuation is a function from . to 
it is extended in a natural way  giving e.g. 	  
　an interpretation over  is a tuple is a history and  is a valuation. 
similarly for a scenario description  with signature 
     1 is an interpretation for t iff / is an interpretation over 
in ordinary logic  we use the notion of truth value for a formula in a model. here we shall genereralise this  so that we instead obtain a set of possible combinations of changes  where an empty such set corresponds to f  and a nonempty set corresponds to t  but with possibly several alternatives for changes of actions  this is nondeterminism on the semantical level . 
 definition 1  combination of changes  possible combinations of changes  let be a scenario description    and let be an interpretation over a. a set e of tuples where  is said to be a combination of 
changes  one tuple therein is said to be a change   and a set e of such combinations is said to be set of possible combinations of changes. 
　　it seems that most other logics of action and change would have similar problems. 
automated reasoning 
   given / and ♀  the set of possible combinations of changes of in j for a time point  denoted 
is a set e  note that this is a set of sets  of possible combinations of changes is defined below. for this we first need an auxiliary function condeff  b  e   taking a truth value b and a set e of possible combinations of changes  returning e if b is true  and otherwise. 
of possible combinations of changes as follows. 

since the result of / does not depend on t when is closed  we can write  in these cases. if we say that  is true in /. 
　with this definition of interpretations  it is clear that we model any boolean combination of combinations of changes as composition. for example  disjunction is non-deterministic composition  and conjunction is parallel composition  with  parallel  here  we denote that the changes could possibly be simultaneous . however  note that negated change features  e.g. as antecedents in implication  do not affect the resulting set of combinations of changes. for example  the formula 
 is equivalent to   since a negated change is interpreted to or that is  we do not model that something should not change. this of course means that implication is causal and not material  see e.g. mccain and turner  . 
　intuitively  we should interpret the empty set of possible combinations of changes so that there is no possible combination of effects that could have taken place  and the set containing only the empty set as its possible combination of changes that the only possibility with respect to changes is that nothing changes. this is coherent with how the truth value is defined above. 
we will briefly discuss how our three examples are interpreted: 

  for rts  the interesting part to interpret is the spin-ning action  which yields: 

thus  we have three possibilities of change due to the spinning action  that loaded becomes true  that it becomes false  or that it becomes both true and false  this is  of course  impossible  and it is taken care of by the histories  as we will see below . 
  for bbs  we focus on the composite action 
i.e. 

for which we get the following possible combinations of changes: 

by definition of the operator vx on sets of possible combinations of changes  we get the following: 

there are two possibilities: in the first combination of changes  only the right box will be empty  whereas in the second  both boxes are nonempty. 
  for the  maybe  action  we note that 
the resulting set will include it is possible that the resulting action has no effects at all  which is what we intended. 
proposition 1 let  be a set of formulae over a sigcontaining no formulae of the type  or 
. then / is a model of  in the sense of db1 iff for the scenario description 
proof: an easy induction shows first that  and then that 
t according to the definitions of db1. 
finally  we need to code the fact that actions succeed  and inertia  the frame problem  into the formalism. this is done by identifying all time points where a feature / can possibly change its value  exactly as in db1. during every interval where no such change time point exists  / has to have the same value throughout the interval. 
　when looking at the following definition  it is instructive to look at the corresponding definition in db1. 
definition 1 let be a scenario description. a mode  of t is an interpretation  for which there exists an e  such that 
  for each 	and 	with no 	 half-open interval  
	 for some 	  we have 
  for each 	e  it holds that 
intuitively  this definition ensures that no change in the value of a feature occurs in an interval if nothing changes it explicitly  and all specified changes have effect. note that e is always a finite set  so this definition makes sense1. 
　denote by mod the set of all models for a scenario description 
   a formula is entailed by a scenario description denoted   iff 1 is true in all models of  is satisfiable iff mod 
fact 1 if is a scenario description and  a formula  then 	is unsatisfiable. 
next we establish that this formalism indeed subsumes that of db1. an auxiliary result is needed1. 
definition 1  corresponding action formula  let  be the action expression lnf 1  in the sense of db1 . then the formula 

the subsumption result follows. 
proposition 1 let  be a scenario 
description in the sense of db1  let a be the set of action formiae corresponding to action expressions in scd  and define the scenario description 
where  then the set of models of t' is iden-
tical to the set of models of proof: just compare the definitions. 
　1 complexity results 
the following result is easy. 
theorem 1 deciding satisfiability of a scenario description is np-hard. 
proof: np-hardness follows  since we can express satisfiability of propositional logic formulae. 
     1 often  the term intended model is used for models of scenario descriptions. however  it seems more philosophically correct to name it just model we shall also name the intended models in db1 just models. 
1
　　infinite sets of changes could express open intervals of changes  which would require some more machinery to obtain a suitable definition. 
   1 due to space limitations  we refer the reader to the original paper instead of repeating the definitions here. 
	drakengren and bjareland 	1 

np-membership  on the other hand  is more involved to prove. for instance  the obvious method of guessing a combination of changes and verifying that this set is a member of the set of possible combinations of changes  fails  since the set of sets can be exponentially large. we need some auxiliary notions. 
definition 1 let  be a set of formulae. then define time to be the set of time point expressions used in 
　　also  for a scenario description define time and changes   to be the set time 
	let j be an interpretation over 	and suppose that 
	. for each 	find 	an 	time 
such that  such an always exists ; collect these tuples in the set u'. now let synteff be a function taking and e  returning such an f/  that is  synteff  such a function clearly exists . 
　the function thus makes a syntactic representation of a set of changes  relative to a scenario description and an interpretation. such a set is said to be a syntactic combination of changes. 
next  we shall show how to represent an interpretation / in terms of a set of formulae. 
represents the interpretation /  given 
that only the time point expressions in t are important. 
proposition 1 verifying for an arbitrary subset b a t  whether b - intrep i t  for some j and t can be done in time polynomial in the size of a t . proof: we use a result of db1  saying that satisfiability of a set of horn formulae can be solved in polynomial time. for this proof  it is enough to know that formulae in a t  and negations of such formulae are horn formulae. 
construct the set 
now it is clear that b* has a model / iff b - intrep and the result follows. 
corollary 1 let / be an interpretation over 
                           and let w ~ intrep 1   t . then querying whether 	a{t  can be done in time polynomial in the size of a t . proof: just check whether 
definition 1  annotated formula  let be a scenario description  and let the formula  which is never a member of be obtained from 1 by replacing every subformula is counted as a subformula of itself  by the expression for with some arbitrarily chosen e changes 
and time . then  is said to be an annotated formula for . note that the size of r is polynomial in 
automated reasoning 
the size of and that can always easily be recovered from then we write = unannotate 
definition 1  syntactic scenario interpretation  syntactic scenario model  let be a scenario description  t = time s a p a i r w i t h 
w 	an annotated formula for 
   then s is said to be a syntactic scenario interpretation for 
　for the definition of a syntactic scenario model  we need an auxiliary definition: define the function condeff1 b e   a syntactic variant of the function condeff   taking a truth value b and a set e of pos-
sible syntactic combinations of changes  returning e if b is true  and  otherwise. 
furthermore  for a syntactic scenario interpretation 

where the operators ~s a  v  va.  -  and  -  on sets e   ei of possible syntactic combinations of changes are defined by 
combinations of changes  taking into account which syntactically differing time points are semantically equal. note that this relation can be computed in polynomial time  due to our assumptions. 
　now  if the following conditions hold  then s is said to be a syntactic scenario model of 

  w = intrep{i t  for some interpretation / 
   is true for every subformula 

it is clear that s can be computed in polynomial time  and similarly for the remaining checks  so checking wheter a syntactic scenario interpretation is a syntactic scenario model can be checked in polynomial time. 

theorem 1 deciding satisfiability of a scenario description is np-complete. 
proof  sketch : it remains to prove np-membership  by theorem 1. now  we can use a syntactic scenario interpretation as a guess  and then verify whether it is a scenario model or not in polynomial time  by the previous results. the existence of a syntactical scenario model and the existence of a model of the scenario description can easily proved to be equivalent. 
1 	discussion 
we have expanded the expressivity boundaries for reasoning about action in np time. this is a proof that a polynomial-time reduction exists to propositional logic  making stochastic search procedures like gsat applicable to the problem. the formalism presented here is clearly more expressive than e.g. a in all aspects except that we do not have branching time  we can handle explicit  continuous time  nondeterministic actions  
u
maybe  actions and so on   so the result that computa-
tional complexity of satisfiability in the two formalisms is equivalent is somewhat surprising. then a question is: how much further can one go  since there is no precise measure for expressivity  this is a difficult question. moreover  some extensions of the logic presented in this paper will not prove to be np-complete with the proof technique we have employed. a basic tool in the npmembership proof is to find a polynomially-sized representation of an interpretation. now  if would extend the logic to allow quantification over time points  which could represent causal rules   we could have a scenario description where 
this scenario description has uncountably many models  so the method of representing interpretations and changes in polynomial space will fail  there are only countably many representations of whatever needs to be represented . thus  some new proof technique would have to be employed. 
1 	conclusions 
we have introduced a logic of action and change which is expressive in the sense that it can represent most propositional benchmark examples in the literature  and some new examples involving parallel composition of actions  and actions that may or may not be executed. we have proved that satisfiability of a scenario in this logic is npcomplete  and that it subsumes an np-complete logic introduced by drakengren and bjareland  
