 
this paper describes a method to automate the diagnosis of students' programming errors in programming learning environments. in order to recognize correct students' programs as well as to identify errors in incorrect student programs  programs are represented using an improved dependence graph representation. the student program is compared with a specimen program  also called a model program  at the semantic level after both are standardized by program transformations. the method is implemented using smalltalk in siples-ii  an automatic program diagnosis system for samlltalk programming learning environments. the system has been tested on approximately 1 student programs for various tasks. experimental results show that  using the method  semantic errors in a student program can be identified rigorously and 
safely. semantics-preserving variations in a student program can be eliminated or accommodated. the tests also show that the system can identify a wide range of errors as well as produce indications of the corrections needed. this method is essential for the development of programming learning environments. the techniques of the improved program dependence graph representation  program standardization by transformations  and semantic level program comparison are also useful in other research fields including program understanding and software maintenance. 
1 introduction 
it is essential for a programming learning environment to be able to determine whether a program written by a student is coirect. the system should recognize correct student programs even they contain diverse variations. the system should also be able to identify errors together with the corrections needed if the student's program is incorrect. 
　research on the automatic diagnosis of student programs relates to many fields such as programming learning environments  ramadhan and du boulay  1; ueno 1   automatic program assessment  thorbum and rowe  1   
1 	qualitative reasoning and diagnosis program analysis and understanding  rich and wills  1   and software maintenance  kozaczynski et al.  1 . however  there are few prototypes of systems focusing on the problem of automatic diagnosis of programming errors. existing work includes adam & laurent   johnson & soloway   and murray . to our knowledge  no existing system performs the automatic diagnosis of programming errors entirely satisfactorily today due to the difficulty of the problem. 
　in this paper  we describe a method to automate the diagnosis of students' programming errors in programming learning environments. specimen programs  also called model programs  are used as the input to the diagnosis of student programming errors. the automatic diagnosis of students' programming error  is achieved by semantically comparing the student program with a specimen program after both have been standardized by program transformations. programs are represented as abstract syntax trees  asts  and augumented object-oriented program dependence graphs  aopdgs . 
the method has been implemented using smalltalk in 
siples~ii  an automatic program diagnosis system for 
smalltalk programming learning environments. the system has been tested on approximately 1 student programs for various tasks. experimental results show that  using the method  semantic errors in a student program can be identified rigorously and safely. semantics-preserving variations in a student program can be either eliminated or accommodated. 
　this method is essential for the development of programming learning environments. the generality of the method makes it applicable to other object-oriented programming languages such as c++ and java as well because the aopdg representation is applicable to general objectoriented programming languages. it is also applicable to non-objected-oriented programming languages where programs can be represented in ordinary augmented dependence graphs. the techniques of  a  the improved program dependence graph representation   b  program standardization by transformations  and  c  semantic level program comparison  are also useful in other research fields including program understanding and software maintenance. 

1 automatic diagnosis procedure 
in our approach  for a programming task  different model programs are used to diagnose student programs that are coded based on different algorithms. student programs using the same algorithm are standardized and compared to their corresponding model program. the automatic diagnosis procedure in siples-ii is shown in fig. 1. 

fig. 1. automatic diagnosis procedure in siples-h 
　in siples-ii  a student program  sp  and a model program  mp  represented in source code are obtained. programs are first processed by a parser and the parse trees of the two programs are generated. based on a set of backusnaur forms  bnf  for smalltalk  the ast representations of the two programs are produced  called sptree and mptree. the ast representation is suitable for the program analysis at the syntax level and for the program transformations  loveman  1 . after that  basic transformations  which do not require definition-use information  du information  are performed to standardize the sptree and the mptree. 
　in order to calculate du information  flow graphs for the student program and the model program are produced based on the sptree and the mptree. several kinds of   vertices are augmented to the flow graphs in order to combine them with features of static single assignment  ssa  form where every use of a variable is only defined by one definition. the du information for the two programs are calculated and used both in the advanced standardization transformations and the generation of the data dependence subgraphs in aopdg representations. we call the aopdgs for the sp and the mp spgraph and mpgraph respectively. 
　the comparison between the spgraph and the mpgraph produces the following results.  1  a mapping between sp statements and their semantics-equivalent mp statements. we call this the equivalent map.  1  a mapping between sp statements and mp statements that are semantics-equivalent but textually different from the sp statements. we called this the textual difference map.  1  a set that includes unmatched statements in the sp and the mp. the set is called the unmatched set. 
　based on the comparison results  the sp statements in the equivalent map and the textual difference map are recognized as correct statements in the error-detection step. for every unmatched sp statement  the most similar unmatched mp statement is found and the differences between the two statements are identified. among these differences  those that are actually legal variations are learned and eliminated by the system. unresolved differences are reported as errors in the student program. unmatched statements in the sp with no unresolved difference identified are reported as controlling errors in the diagnosis report. 
1 an example 
we use a running example to explain our approach. the task description is given below. 
　define a method called taxifeewith: mile isbookingcase: bookingcase. if  bookingcase  is true  a booking fee of $1 should be charged  and the price per mile is $1; otherwise  no booking fee is charged  and the price per mile is $1. the total taxi fee is calculated by mile*price + bookingfee. 
　a model program is the following  where names for the method head and statements are given at the left-hand side. 

	xu and chee 	1 

1 possible semantics-preserving variations in a student program 
in programming learning environments  a program written by a student may have many semantics-preserving variations 
 spvs  compared to a model program. in general  there are 1 possible types of variations. these are given below. 
  spv1: different algorithms may be used. the student program will be quite different from the model program. 
  spv1: different format of writing program at the source code level. for example  more or less spaces  comments  etc. 
  spv1: different ways of writing message sequences. for example  message sequences may be written in cascaded messages. 
  spv1: different temporary variable declarations. temporary variables may be declared in a method temporary variable declaration or in a block temporary variable declaration. 
  spv1: different ways of writing algebraic expressions. 
  spv1: different messages used for a same control structure. 
  spv1: different numbers of temporary variables or block temporary variables are used. 
  spv1: there are may be some dead codes or some statements for debugging purpose in the student program. 
  spv1: different statement orders. 
  spv1: different parameter names in the method head or different temporary variable names or different block temporary variable names are used. 
  spv1: different control structure used. the way of computation in the sp is different from that in the mp. 
  spv1: different ways of writing a statement. a component in a statement in sp is different from that in a statement in mp although the computational results of the two components are the same. 
1 	differences between the mp and the sp 
a human tutor may identify the following six differences between the student program and the model program. 
  difference 1  spv 1 : different parameter names are used in s entry and ss1. 
  difference1  spv 1 : different statement orders of 1 and s1 compared to that of ms1 and ms1. 
  difference1  spv 1 : different source-code format in 
1 compared to that in ms1. there is an extra ''''before the ''j'' in ss1. 
  difference1  spv 1 : different values produced at the point of ss1. price and bookingfee are calculated out of the if false: control structure in the mp  whereas they 
1 	qualitative reasoning and diagnosis 
are calculated inside the if false: control structure in the sp. however  this is a semantics-preserving variation  because at the point of ss1  the values produced are the same compared to the values produced in the mp at the point of ms1end. 
  difference1  error : different computation carried out in ss1 compared to ms1end. this is a semantic variation  which is an error in the student program. 
  difference1  spv 1 : different numbers of temporary variables are used in ss1 and ss1end. the difference changes the way computations are executed without changing the values computed. 
the challenge in the automatic diagnosis of students* programming errors in this example rests in identifying differences as an error in the student program while accommodating other semantics-preserving changes in the student program. 
1 	program representations 
three representations of programs are used in the diagnosis procedure: source code representation  ast representation  and aopdg representation. the ast representation is amenable for program transformation. the aopdg representation combines the strengths of opdg representation  mcgregor et al.  1  and the program representation graph  prg   yang et al.   1   it is used for the semantic level comparison of programs  horwitz   1 . the merits of the aopdg representation include:  1  it eliminates many variations existing at the source code level and ast level   1  it is indispensable for the program comparison algorithm  and  1  it makes the comparison accommodate semantics-preserving behavioral changes in the student program compared to the model program. 
1 	ast representation 
the generation of the abstract syntax tree for a program is based on the backus-naur forms  bnf  of the programming language. an ast representation of a program is a frame-based representation based on the parsing tree with additional program analysis information added. 
　representing programs in ast eliminates spv1 in programs. in the running example  difference1  the  .  before the      is eliminated. 
1 aopdg representation 
an aopdg for a program is constructed based on the augmented object-oriented flow graph  aofg  of the program and the du information calculated. an aofg is constructed from the ofg of the program  and an ofg is an improved flow graph. it accommodates the situation in pure objectoriented programs that statement sequence may appear in a block as a component of another statement. this is not allowed in programs such as c++ and java. in the ofg  there 

are additional flow edges coming out from a conditional node besides the usual true/false branches. 
to construct an aofg from an ofg  a vertex labeled 
'' initial: x := initialm  is added at the beginning of the ofg for each variable x that may be used before being defined. a   vertex labeled '' enter x := x  is added inside each loop statement immediately before the loop predicate for each variable x that is defined within the loop  and it is live immediately before the loop predicate  i.e.  x may be used either inside the loop  after the loop  or by the loop predicate before being redefined . a vertex labeled ''  exit x := x  is added immediately after the loop for each variable that is defined within the loop and is live after the loop. 
　an aopdg consists of an augmented object-oriented control dependence subgraph  aocds  and an augmented object-oriented data dependence subgraph  aodds . similar to the construction of cds and dds  aocds for a program is constructed based on aofg  and aodds is constructed by calculating du information on aofg. 
　in aocds representation  there are six types of vertices: entry vertex  end vertex  statement vertex  initialization   vertex  enter   vertex  and exit   vertex. the source of a control edge in aocds is always either an entry vertex or a predicate vertex  i.e. a conditional statement vertex . 
　there are five types of control dependence edges: controltrue  controlfalse  controlloop  entertrue  and enterfalse  and the types of dependence edges are ftowl  flow1 ...  flown  flowtrue  flowtalse  fbwenter  flowexit  and flowwhile. 
　by representing the programs in aopdgs  spv1 in programs is eliminated. in the running example  the aopdg representations of the sp  spgraph  are given in fig. 1. difference1 in the sp is eliminated by representing the sp and the mp in aopdgs. 

1 program transformations 
the basic standardization transformations performed are as follows.  1  the statement separation standardizes cascaded messages to a message sequence.  1  the temporary declaration standardization makes all temporary variables to be only defined in the method temporary variable declaration.  1  the algebraic expression standardization applies a set of rules of associativity  commutativity  and distributivity on an algebraic expression until no more transformation rules can be applied.  1  control structure standardization standardizes all control structures into one of three structures-iftrue:iffalse:  whiletrue:  and to:by:do:-by applying 1 transformation rules such as receiver iftrue: b1- receiver iftrue: b1 
if false: 1  where b1 is a block. 
with basic standardization transformations  spv1  spv1  
spv1  and spv1 are eliminated in programs. in the running example  algebraic expression standardization is applied on both sptree and mptree  and control structure standardization is applied on the mptree. 
　advanced standardization transformations of forward substitution and dead code removal  muchnick  1  are used to eliminate spv1. in the running example  no advanced standardization transformation is applicable to the mp. for the sp  ss1end is changed by forward substitution and ss1 is removed by dead code removal. difference1 in the sp is eliminated. the sp standardized by advanced standardization transformations is given below; this corresponds to the aopdg in fig.1. 


fig. 1.the aopdg representation of the student program 

1 	program comparison 
the comparison algorithm is based on the idea that two statements with different operators  different operands  or different controlling predicates will have difference behaviors. the vertices in the student aopdg  i.e. the statements in the student program  and the vertices in the model aopdg are classified into a same partition set in initial partition. a stable coarsest refinement of the initial partition is computed using a basic partitioning algorithm  yang et a/.  1 . the idea in the basic partitioning algorithm is that a set in a partition containing several vertices whose predecessors belong to different sets in the partition must be split into smaller sets according to the partitions of their predecessors. the results of the comparison reveal the semantic differences between the student program and the 
	xu and chee 	1 

model program and accommodate the semantics-preserving 
behavior changes between the two programs. 
　　spvi1 is accommodated in program comparison. in the running example  the refined partition is given below  where the names of the partition sets are shown on left. the equivalent map  the textual difference map  and the unmatched map are also given. 
difference 1 is correctly identified as textual difference in this step because taxifeewith:isbookingcase: -  mentry sentry  and iftrue :if false: -   mso1 ss1  are in the textual difference map. difference1 is accommodated in the comparison because 1-  ms1 ss1  and 1-  ms1 ss1  are in the equivalent map. differences is correctly identified as a semantic error because +-  ms1end  and new1-  ss1end  are in the unmatched map. 
1 	error detection 
　the results of the comparison report those statements in the sp that have semantic errors. however  a programming learning environment should be able to pinpoint the errors in the incorrect statements and to provide corrections of the errors. an error detection step is necessary. in this step  spv1 is eliminated by changing the model program according to the textual difference map. the system pinpoints errors in an incorrect student statement by comparing it with the most similar model statement. the system also learns equivalent expressions used in the sp and the mp to eliminate spv1. the diagnosis report for the running example is given below. 

1 	variations and handling strategies 
all of the 1 semantics-preserving variations except spv1 are handled by various strategies discussed above. for spv1  different model programs corresponding to different algorithms are used to diagnose student programs that use different algorithms. hence  when a student program significantly differs from all the model programs  a new model program must be input by the teacher. 
　the semantic differences left in the student program are identified as student programming errors in the diagnosis report. it is possible that a reported error may actually be a semantics-preserving variation because it is not included in the 1 types of spvs. however  in our approach  it is impossible to miss an error if one actually exists. hence  the approach described here is both safe and conservative. 

in this paper  we proposed a new approach for automatic 

diagnosis of students' programming errors in programming 
1 	qualitative reasoning and diagnosis 

learning environments. in this approach  automatic diagnosis of student programs is achieved by comparing the student program with the model program after both have been standardized by program transformations. the approach is implemented in a system called slples-ii using smalltalk/visualworks 1. it has been tested on approximately 1 student programs for 1 different programming tasks. the test results are shown in table 1. 
　from table 1  we see that both the rate of correct program diagnosis and the rate of correct statement diagnosis are 1% after the system learns sufficient model programs. from the figures shown in table 1  the number of model programs needed for diagnosing a method definition is in the order of 1 to 1  and the number of the model programs needed for diagnosing a class definition is 1 only. 
　our experimental data also show that after the system has processed about 1 student programs for a programming task  the possibility of failing to diagnose errors due to the lack of a model program is less than 1%. this means that the number of model programs required becomes quite stable after about 1 student programs are processed. it is reasonable to believe that  in practice  the number of model programs required is small although in theory the number of model programs needed is undecidable. 
　in summary  the new features of our approach are as follows: 
  the aopdg program representation reflects semantic information of the program  eliminates many nonsemantic variations  and is amenable to transformations and comparison. 
  programs are analyzed  standardized  and compared rigorously at the semantic level. by  rigorously   we mean that the results are guaranteed to be correct. 
  student programming errors are identified safely. by  safely   we mean that the approach may regard an actually correct statement as an incorrect statement  but the approach will never regard an actually incorrect statement to be a correct statement. it is a conservative approach. 
  correct programs are recognized by the system handling all the possible variations. 
  errors in incorrect programs are identified and corrections to the errors are also provided. 
this method is essential for the development of programming learning environments. the techniques of  a the improved program dependence graph representation-aopdg   b  program standardization by transformations  and  c  semantic level program comparison  are also useful in other research fields including program understanding and software maintenance. 
　our future work includes refining the method and applying the approach to program understanding and software maintenance. 
