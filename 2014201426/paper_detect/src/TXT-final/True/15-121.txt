 
the language prolog owes much of its increasing popularity to the fact that one can use it to write knowledge based systems in a declarative style  writing a specification which is also executable. when a system written in prolog produces a yes answer to a question  it can be made to produce an explanation of its reasoning 
however  some reasonable specifications written in prolog do not produce any answer when executed. also  when a knowledge base answers no to a question  it does not explain why. 
this paper describes a new inference engine  called prolog/exl. many programs which do not produce any answer in prolog do produce answers in prolog/exl. prolog/exl provides explanations of both yes and no answers. 
i introduction 
it has been pointed out that advice from an expert system may only be useful if the system can explain the reasons for the advice. for example  given the advice  your car cannot be repaired for less than the cost of a new one   most people would want to know why. several existing expert systems can 
explain their activities to some degree  e.g. 1  1   and michie  1  has argued persuasively that expert systems should be understood by their users. 
in many expert systems  the knowledge required for expertise is held in the form of assertions and if-then rules  1  1 . most such systems answer a question by chaining through rules to reach assertions. in  1  it is proposed that it is useful to think of an explanation as an edited proof  and to think of a proof as an edited trace.  1  takes a similar point of view. 
the assertions and rules in a system can be used to represent a portion of the real world in two different ways. under the  closed world assumption   1  only positive facts*are stored  and it is assumed that all facts which cannot be deduced are false. the representation is the one used in relational data bases  1 . under the  open world assumption   both positive and negative facts are present  and a fact which is not listed is considered to be unknown. for example  the emycin  1  confidence factors +1 and -1 can be considered as denoting true and false  respectively  in an open world knowledge base. 
in the language prolog  1   the closed world assumption prevails  unless the language is used to simulate a system such as emycin   and the property that a fact is false if it cannot be deduced is normally provided via a library definition of a  not  symbol.   1   1  have shown that this leads to reasonable logical behavior under some assumptions which are acceptable in practice. proof extraction can be used to cause any knowledge base written in prolog to provide explanations of yes answers  1 . however  when such a knowledge base answers no to a question  it does so by failing to find a proof. hence proof extraction cannot be used directly to explain why something is not so. 
this paper describes how a modified interpreter  called prolog/exl  assigns a procedural meaning to some programs which lack this in present prologs  and how explanations of both failure and success are generated. 
ii declarative and procedural meanings 
this 	section 	assumes some acquaintance with the 
prolog language  1 . our notation for a prolog clause follows  1  in using ' -' and '&' for 'if and 'and'  respectively. variables start with a capital letter  whereas constants do not.  1  describes the declarative and procedural ways of viewing a prolog program. 
the majority of prolog programs which are declaratively reasonable also behave as expected procedurally. however  under standard interpreters  1  1   some return no answer. by way of example  consider 

declaratively  this program states that  in addition to the assertions  fly jfk  sfo  also holds. procedurally  trying to show this yields an unbounded recursion on the first clause  so no answer is computed. 
with present interpreters  such a program must normally be rewritten e.g. by interchanging the first two clauses  or as 

the change is easy enough  and it fixes one problem. however  suppose we add the assertion flight sfo  jfk  and ask for all of the possible pairs of endpoints of journeys. in standard prolog no answer is found at all  because the interpreter keeps trying longer and longer proofs of the same 
journeys. 	prolog/exl finds the correct answer. 
while it is possible to now rewrite this program so that it terminates in standard prolog  there are other more complicated programs which do not return answers. so it seems better to try to change 
the prolog interpreter to deal with the problem  1 . it turns out that this change is also needed for explaining 'no' answers  as described below. 
as has been pointed out in  1   a prolog interpreter in prolog can be written as four clauses  one of which has the form 

prolog/exl keeps a record of the rules which it has used to arrive at its current point in the computation. the clause above is replaced by clauses which test a rule before it is applied. a rule is only used if it has not already been used  
or if it is a special case of a rule which has been used. experimentally  this appears to assign the same procedural meaning to existing programs as does a standard interpreter  but it also assigns the expected meaning to a large number of programs  such as example 1  which do not normally terminate. 
ill explaining yes and no answers 
to explain a yes answer  	a 	prolog interpreter in 
prolog can be adapted to accumulate a proof tree d u r i n g execution  by adding one argument to the 'demo' predicate. the proof tree  or part of it  can then be used as an explanation  1 . 
now consider the question 'can one f l y from ihr to lax  '. based on example 1  the answer is no  as there are no flights out of ihr at all. unfortunately  an interpreter which gathers explanations in the manner just outlined yields no explanation of t h i s . the computation simply fails  so some other approach is needed. 
	a. walker 	1 
to explain both yes and no answers  prolog/ex1 proceeds as follows. first  it checks to see if the answer is yes  using the approach just outlined. if there is no proof  then  instead of failing  it proceeds to explore possible partial proofs in which certain steps are assumed to succeed  even though in fact they fail . these steps are marked as conditional  and are printed with a question mark in an explanation tree  to indicate where the failures occur. assuming that a failing goal has succeeded potentially opens up an unbounded computation. hence the technique described in section ii is used to limit the computation. 
in finding explanations  prolog/exl follows several guidelines about what kind of explanation is likely to be a help. for a yes answer  it finds a shortest explanation. for a no answer  it finds a conditional explanation in which the first assumption is as deep as possible. also  for a no answer  if there is a constant in the question  it makes sure that the constant is in the knowledge base and is reachable from the question; otherwise it generalizes the question by changing all other constants to distinct variables. 
to see how this works  consider the behavior of example 1 when interpreted by prolog/exl. 
if we ask to fly from jfk to lax  we get 

this can be read as explaining that we can fly from jfk to lax because: there is a flight from jfk to bos and we can fly from bos to lax  and so on. note that this is the shorter of two possible proofs. the tree can be used to synthesize an explanation in english as in the work of weiner  1   or can be directly mapped into quasi-english as in the syllog system  1 . 
if we ask to fly from sfo to ihr  we get 

which says that this would be possible  via lax  except that there are no flights out of lax  and there is no sequence of flights into ihr. if we ask to fly from ihr to lax  we get 

indicating 	that there are no flights out of ihr. 
 1  gives the behavior of prolog/exl on a knowledge base which is more realistic than example 1. 
1 	a.walker 
the combined techniques of section ii and of this section lead to behavior that is reasonably helpful. this behavior is built in to the prolog/exl interpreter  so it is available to all knowledge bases without extra effort on the part of the people who write the rules. 
iv conclusions 
when a knowledge base answers a question  its rules are combined by pattern matching  in ways that the writers of the rules may not have foreseen in detail. so  both for the people who provide the rules and for other users  it is important that the knowledge base be able to explain the reasoning that leads to its results  i.e. that it be able to provide some information about what instances of what rules have been used. 
if a knowledge base answers yes to a question under a standard interpreter  then an explanation can be produced either by a compiled method  1   or by an interpreter modified to accumulate a proof tree. however  there are declaratively reasonable programs which have no procedural meaning in standard prolog  that is  certain questions do not yield answers. 
if  in standard prolog  the answer to a question is no  then the answer is the result of a failure to find a proof of a yes answer. all of the rule matches made during the attempted proof are discarded  and no explanatory information remains. 
this paper has described prolog/ex1  an inference engine which assigns a procedural meaning to many programs which do not produce an answer in standard prolog. prolog/exl provides explanations of both yes and no answers. a 'no' explanation either indicates that some object is missing from the knowledge base  or that while the necessary objects are present  some relationship between them is missing. 
prolog/exl allows one to write purely declaratively in many cases in which standard prolog does not  and it provides explanations of both yes and no answers. when there are several explanations for an answer  one which is likely to be useful is chosen. 
v acknowledgements 
it is a pleasure to acknowledge that this work has benefited from conversations with chin chang  se june hong  antonio porto  david h. d. warren  and walter wilson. 
