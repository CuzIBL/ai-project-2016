
a same-syntax extension of rdf to first-order logic results in a collapse of the model theory due to logical paradoxes resulting from diagonalization. rdf is thus the wrong material for building the semantic web tower.
1 the semantic web
the semantic web is an extension of the current web in which information is given well-defined meaning  better enabling computers and people to work in cooperation.  berners-lee et al.  1 
thus the goals of the semantic web are very similar to the goals of knowledge representation-to provide means for representing information in a way that can be processed by machines.
　the base language of the semantic web is rdf  manola and miller  1   a simple representation language based on a graph structure.
the semantic web provides a common framework that allows data to be shared and reused across application  enterprise  and community boundaries.  ...  it is based on the resource description framework  rdf   which integrates a variety of applications using xml for syntax and uris for naming.
 http://www.w1.org/1/sw/ 
rdf is based on labelled graphs-an rdf knowledge base is  roughly  a graph where some of the nodes have labels  in the form of uri references and literal data  and the edges have labels  which are also uri references . node labels are unique  i.e.  a uri reference can be the label of at most one node.
　the normative surface syntax for rdf is xml. this syntax is called rdf/xml  dave beckett  1 . there are other surface syntaxes for rdf  including n-triples  jan grant and dave beckett  1 . what counts in rdf is the graph that is conveyed and not any other aspect of the surface syntax.
　rdf  however  is more than just a graph language. it is actually a logic  with a model theoretic semantics and an entailment relationship. the details of all this have been specified in an w1c recommendation  hayes  1 . in essence  an rdf graph can be read as a collection of facts corresponding to the edges in the graph  which are generally referred to as triples  where an edge with label r  the property  from node n1  the subject  to node n1  the object  corresponds to the fact r n1 n1 . if n1  n1  has a label then it is treated as a constant and its label is the name of the constant  if n1  n1  doesn't have a label then it is treated as an existentially quantified variable with some arbitrary name. the model theory for rdf is slightly non-standard  to provide an integrated meaning for edge labels that are also node labels.
　so in rdf the only way of providing information is via triples  graph edges . these triples are often written informally in a form very similar to n-triples. an edge with label r from a node labelled with the uri reference a to node labelled with the uri reference b is written as
a r b .
as uri references can be very long  names of the form n:l are very often used where the uri reference is constructed by concatenating the expansion of n to l.  the expansion is generally specified informally or left unspecified.  nodes without labels are given  local tags  of the form :l. these tags are not uri references or constant names; they instead correspond to existentially quantified variables.
　because rdf has only triples  there is no way of providing syntactic constructs beyond what is specified above  i.e.  binary facts  implicit conjunction  and existential quantification . any other syntactic constructs have to be encoded as triples and their special meaning conveyed by stating semantic conditions in the model theory.
　rdf has only a few of these semantic conditions. there is a particular property  rdf:type  which is considered to be the typing construct  i.e.  the triple a rdf:type b .
is interpreted as a has type b  or a belongs to the class b . there is a semantic condition that any name used as an edge label  i.e.  as a property  must have type rdf:property.
　rdf is thus a very simple representation language. however  triples are a very powerful construct in that any ground or existentially quantified atomic fact can be encoded in rdf triples by by using a new unnamed node with triples that link it to each of its arguments. this simple trick has been used in many other knowledge representation formalisms.
1 extending the semantic web
the power of triples has given rise to a vision that rdf should be the universal language for the semantic web. this means that the syntax of all semantic web languages should be  rdf  triples and their meaning should be specified as semantic conditions that add to the rdf model theory.  this is often referred to as a same-syntax extension of rdf. 
　this process was successfully carried out with rdf schema  dan brinkley and r. v. guha  1   an extension to rdf that provides simple vocabulary structuring facilities. rdf schema interprets nodes labelled with particular uri references as providing these vocabulary structuring facilities. in particular  rdfs:class is interpreted as the type of all types  so that if something is used as a type its types must include the interpretation of rdfs:class  and objects of type rdfs:class are called classes ; and rdfs:subclassof is interpreted as requiring a subtyping relationship between its arguments. these interpretations are provided by appropriate semantic conditions that extend the rdf model theory to the rdf schema model theory  hayes  1 .
　problems first arose in this vision when the semantic web was extended to include an ontology language. the charter for the group charged with doing this extension included the requirement that the language  will be designed for maximum compatibility with xml and rdf language conventions   http://www.w1.org/1/ swv1/charters/webontologycharter . this was interpreted for the working group as requiring that the resultant language be a same-syntax extension of rdf.
　after considerable work  and some compromises  the resultant language  owl  dean et al.  1   was finally specified as a same-syntax extension of rdf  patel-schneider et al.  1 . because the only syntax allowed is triples  complex owl constructs  such as description logic  baader et al.  1  restrictions  have to be encoded as a number of triples. for example  the description logic restriction that represents everything whose friends are lawyers   ex:friend.ex:lawyer  is encoded as the triples
:x rdf:type owl:restriction .
:x owl:onproperty ex:friend .
:x owl:allvaluesfrom ex:lawyer .
because all triples are facts  entailment would not work correctly in owl unless owl interpretations required that there be facts corresponding to every possible piece of complex owl syntax.  these requirements are often called comprehension principles.  otherwise  it would not be the case that ex:john belonging to  ex:friend.ex:lawyer entailed ex:john belonging to  ex:friend. ex:lawyer t ex:doctor   the restriction that represents everything that whose friends are lawyers or doctors.  why  because there might not be enough facts to encode the union of lawyers and doctors. 
　the success of rdf schema and owl as same-syntax extensions of rdf has lead to several calls to make another extension of the semantic web in a similar style to a first-order logic language.
　what do i mean here by a  similar style   well   style  is in the eye of the beholder  but some ground rules can be laid down. first  the syntactic constructs of the extension have to be encoded as rdf triples. this means that  for example  encoding first order sentences as strings or goedel numbers is not permitted. second  the extension has to give meaning to every rdf graph. this means that the extension can't identify a subset of rdf graphs  such as tree-like rdf graphs  as well-behaved  and only provide meaning for these graphs.
　what then would an  rdf logic  look like  it would provide enough constructs to nicely provide facilities for all of first-order logic  including predicates  constants  variables  conjunction  disjunction  negation  quantification  equality  functions  etc. . its entailment relationship would  when restricted to the constructs that are used to provide the facilities of first-order logic  mirror entailment in first-order logic.
　a language suitable for this purpose is binary predicate calculus with equality.  recall that predicate calculus is function-free first-order logic without function symbols and equality  barr and feigenbaum  1  volume 1  p. 1 .  as indicated above  binary predicates can be used to encode predicates of arbitrary arity  also equality can be used to encode functions thus obtaining all the facilities of first-order logic.
1 rdf logic
our task is thus to design a same-syntax extension of rdf to binary predicate calculus with equality. we are defining  logical  interpretations  special rdf interpretations that provide a mechanism for logical constructs. we both add some new vocabulary and some new semantic conditions  in the same style as used in the rdf model theory  hayes  1 .
1 equality
equality is the easiest part of our task. all we need to do is to  anoint  a particular uri reference as the equality predicate by providing its semantic conditions. as owl already has a notion of equality  we will use the uri reference that it uses for this purpose  which we will write  using the standard abbreviation  as owl:sameas. the semantic condition for equality is
equality condition:
hx yi（iext i owl:sameas  iff x = y
this condition says that in any logical interpretation two domain elements are related by the relationship that is the property interpretation  i followed by iext 1 of owl:sameas precisely if they are the same.
1 encoding formulae
because of the need to use only rdf syntax we have to have an encoding facility for predicate calculus formulae. there are many possible schemes to do so  but let's pick one that uses rdf as much as possible.1 as in owl  we are also going to need comprehension principles so that the formulae exist in all interpretations so we might as well introducethem along with the syntax encoding.
　we will use lx:formula as the class of formulae and lx:atomic as the class of atomic formulae. we can't just use rdf triples directly as atomic formulae because these formulae might not be true and they might have variables in them. we require that atomic formulae be formulae  i.e. 
atomic formulae condition:
icext i lx:atomic   icext i lx:formula  
we are here using some terminology from the rdf schema semantic conditions. icext x   the class extension of x  is defined as those domain elements that have x as one of their types.
　we will use lx:predicate  lx:subject  lx:object  and lx:subjectv and lx:objectv to construct atomic formulae. in our syntax anything can be a variable  so we need to distinguish when something is being used as a variable or not and thus we need two variants of the subject and object links. we do not allow predicates to be variables  i.e.  our logic is syntactically first-order  not higher-order.
　our first comprehension principles are concerned with atomic formulae  requiring that all atomic formulae exist in all logical interpretations. there are four different comprehension principles corresponding to the different ways variables can be used in atomic formulae.
atomic formulae comprehension principles:
 r （ ip  x y （ ir1
 f1 （ ir	f1 （icext i lx:atomic   & hf1 xi（iext i lx:subject   & hf1 ri（iext i lx:predicate   &
hf1 yi（iext i lx:object  ;
 f1 （ ir	f1 （icext i lx:atomic   & hf1 xi（iext i lx:subjectv   & hf1 ri（iext i lx:predicate   &
hf1 yi（iext i lx:object  ;
 f1 （ ir	f1 （icext i lx:atomic   & hf1 xi（iext i lx:subject   & hf1 ri（iext i lx:predicate   & hf1 yi（iext i lx:objectv  ;
 f1 （ ir	f1 （icext i lx:atomic   & hf1 xi（iext i lx:subjectv   & hf1 ri（iext i lx:predicate   & hf1 yi（iext i lx:objectv  .
　we will use a limited but complete set of connectives to construct composite formulae  so lx:negation  lx:conjunction  and lx:exists are our only classes of composite formulae. we will use lx:left and lx:right as our structural connectives for all composite formulae.
we require that composite formulae be formulae  i.e.  composite formulae conditions:
icext i lx:negation   icext i lx:formula  
icext i lx:conjunction   icext i lx:formula  
   icext i lx:exists   icext i lx:formula   we also need the composite formulae to exist.
negation comprehension principle:
 f （icext i lx:formula    n （icext i lx:negation   hn  fi（iext i lx:left  
conjunction comprehension principle:  f g （icext i lx:formula    j （icext i lx:conjunction   hj  fi（iext i lx:left   & hj gi（iext i lx:right  
quantification comprehension principle:
 f （icext i lx:formula     v （ ir  q （icext i lx:exists   hq vi（iext i lx:left   & hq  fi（iext i lx:right  
　we have now guaranteed that all finite non-circular formulae exist in all interpretations. lots of other formulae or quasi-formulae might exist as well  of course  but  in keeping with the permissive nature of rdf  we won't rule them out.
1 truth
so far all we have is the existence of formulae  not whether they are true or not. we now need to provide a mechanism for determining the truth of formulae in an interpretation. we start out doing this meta-theoretically and only later provide syntax for determining true formulae.
　because this is a first-order logic  i.e.  it has variables  we need some mappingfrom variables to their values. our mechanism needs to be slightly different from that in standard firstorder logic because our variables are just elements of the domain of discourse.
definition 1  variable mapping  let v be the set of total mappings from ir to ir.
　now we can provide a meta-theoretic mapping that  given a formula and a variable mapping  assigns a truth value to the formula.
definition 1  formula truth  let bool be a total mapping from ir〜v into boolean values  true and false  such that
 v （v
1.  f （icext i lx:atomic     x （ ir   r （ ip   y （ ir  hf xi（iext i lx:subject   & hf ri（iext i lx:predicate   & hf yi（iext i lx:object   ★
bool f v =true iff hx yi（iext r 
1.  f （icext i lx:atomic     x （ ir   r （ ip   y （ ir  hf xi（iext i lx : subjectv   & hf ri（iext i lx:predicate   & hf yi（iext i lx:object   ★
bool f v =true iff hv x  yi（iext r 
1.  f （icext i lx:atomic     x （ ir   r （ ip   y （ ir  hf xi（iext i lx:subject   & hf ri（iext i lx:predicate   & hf yi（iext i lx:objectv   ★ bool f v =true iff hx v y i（iext r 
1.  f （icext i lx:atomic     x （ ir   r （ ip   y （ ir  hf xi（iext i lx:subjectv   & hf ri（iext i lx:predicate   & hf yi（iext i lx:objectv   ★ bool f v =true iff hv x  v y i（iext r 
1.  f （icext i lx:negation     x （ ir hf xi（iext i lx:left  ★
bool f v =true iff bool x v =false
1.  f （icext i lx:conjunction     x （ ir   y （ ir  hf xi（iext i lx:left   & hf yi（iext i lx:right   ★ bool f v =true iff
 bool x v =true& bool y v =true 
1.  f （icext i lx:exists     x （ ir   y （ ir  hf xi（iext i lx:left   & hf yi（iext i lx:right   ★ bool f v =true iff  w （ ir bool y v 1 =true where v1 x = w  v1 z =v z  otherwise.
　note that this gives truth values to all elements of the domain of discourse  including non-formulae  but does not give any specification of what these truth values are for nonformulae. note also that this does provide conditions on the truth values for over-specified formulae like a formula that is both a conjunction and a disjunction. finally  note that this is not a recursive definition of truth values. instead we just require that boolsatisfies the above conditions and rule out interpretations for which no suchboolexists; which amounts to almost the same thing but with fewer opportunities for paradoxes. for example  this method will work for infinite and circular formulae.
　now we need some way of getting at the truth of formulae. we will use lx:true to do so  providing the appropriate semantic condition so that true formulae belong to its class extension:
truth condition:
f （icext i lx:true   iff
 v （v bool f v =true
　this looks as if icext i  lx:true   is defined somehow after bool  but this is not really the case  as booldepends on icext i  lx:true   for formulae that use lx:true.
　a logical interpretation is then simply an rdf interpretation that satisfies the above semantic conditions  including having a bool mapping  and logical entailment is defined in the obvious way.
1 the result
i claim that this is about as good a version of rdf logic as one can get. i would have liked to make the following claim:
claim 1 for every logical interpretation  l  there is a  standard  predicate calculus with equality interpretation  p  such that for every predicate calculus sentence  s  i.e.  a predicate calculus formula with no free variables  for every domain element  d  in l that corresponds to s  in the obvious way  s is true in p iff d （icext i lx:true  .
this could be then used to show a strong correspondence between rdf logic and predicate calculus with equality.
　unfortunately  this claim is not true. ian horrocks  horrocks and patel-schneider  1  has pointed out that there are sentences whose truth is affected by the unusual nature of the rdf semantics.  actually ian's observation was done in the context of scl  http://www.ihmc.us/users/phayes/cl/   but scl has similar semantic features to those of rdf.  for example  in an rdf interpretation that has only one domain element  there is only one predicate  no matter what name.
　this doesn't matter much in rdf and rdf schema because neither can place conditions on the size of the domain. however  such conditions can be easily stated in predicate calculus with equality. for example  the formula
　  x  y x = y ★ ex:p ex:a ex:a   ex:q ex:a ex:a   is not a theorem of predicate calculus with equality but every encoding of it is true in every logical interpretation.
　so i can only claim that this version of rdf logic is as good as any other. further  i claim that this version of rdf logic is as paradox-free as any other.
1 self-reference and diagonalization
does the above encoding actually work  well  in a word  no. it falls prey to one of the  many  paradoxesrelated to the truth predicate  first noticed by tarski  tarski  1 .
　as in owl  we have only provided comprehension principles for tree-like formulae. this means we don't require the existence of self-referential sentences like the liar's sentence   i am lying  or  this sentence is false    which would here be encoded as
:x rdf:type lx:negation .
:x lx:left :x .
if this construction had to exist in every logical interpretation then there would be no logical interpretations.  try to determine whether i  :x  （icext i lx:true  .  we have thus lost something of the free-form flavour of rdf  as some selfreferential sentences are useful and we can't entail them  but otherwise our model theory have have easily been shown to break down.
　we have also been careful not to break down on selfreferential sentences if they do occur. for example  if we had defined bool in a recursive manner starting with atomic formulae  then we would have had problems with circular and infinite formulae.
　we have thus been fairly careful not to get hung up on the obvious problems. however we still have enough power in our formalism for it to break down. this is actually not a surprising result-just about any encoding of first-order logic falls prey to the problem  but our minimalist rdf logic is weaker in some ways than the standard first-order logics in which this result is usually shown.
　what we are going to do next is to show how our encoding breaks down by building a self-referential sentence using a process of diagonalization. we are proceeding in a somewhat similar fashion as done by goedel in his diagonalization lemma.
1 building up formulae
throughoutthis process we will need to get ahold of composite syntactic structures. the formulae for this turn out to be fairly long  so we will introduce some abbreviations. these are only abbreviations and thus don't add any power.
　first  an abbreviation for a formula that checks for a single triple.
definition 1 let s  p  and o be uri references  and let sv and ov be boolean values. then require s sv p o ov  is a formula that looks like
:r rdf:type lx:atomic .
:r lx:predicate p .
	:r lx:subjectv s .	if sv = true
	:r lx:subject s .	if sv = false
	:r lx:objectv o .	if ov = true
	:r lx:object o .	if ov = false
　next  an abbreviation for a formula that checks for a collection of triples all with the same subject.
definition 1 let s be a uri reference  used for the subject ; let t be a uri reference  used for the type of the subject ; let p1  a1  p1  a1  ...  pn  an be uri references  used for predicates and values ; let q1  v1  q1  v1  ...  qm  vm be uri references  used for predicates and variables . then construct s;t;p1 a1 ... pn an;q1 v1 ... qm vm  is a formula that is a conjunction of
require s true rdf:type t false  require s true p1 a1 false  ... require s true pn an false  require s true q1 v1 true  ... require s true qm vm true 
　this doesn't actually construct anything  of course. neither does it require the existence of anything. however  for any domain element v such that v （icext i t   hv i a1 i（iext i p1   ... hv i an i（iext i pn   hv v1i（iext i q1   ... hv vmi（iext i qm  
then	construct s;t;p1 a1 ... pn an;q1 v1 ... qm vm 	is true under any variable mapping that maps s to v and vi to vi  1 ＋ i ＋ m. note especially that because all the non-circular formulae exist  from the formula comprehension principles  therefore any non-circular formula  built  in this way will exist.
1 diagonalization
diagonalization of a formula with one free variable is the application of that formula to itself  i.e.  the diagonalization of a x  is a 'a x '   where the quotes are not string quotes  but instead represent some encoding process. diagonalization is part of the process of creating a self-referential structure.
definition 1 let s and g be uri references  used as variable names  then diag s g  is a formula of the form
:e1 rdf:type lx:exists .
:e1 lx:left s1 .
:e1 lx:right :e1 .
:e1 rdf:type lx:exists . :e1 lx:left s1 .
:e1 lx:right :c1 .
:c1 rdf:type lx:conjunction .
:c1 lx:left construct s;lx:exists;
lx:left x;lx:right s1  .
:c1 lx:right c1 .
:c1 rdf:type lx:conjunction .
:c1 lx:left construct s1;lx:conjunction; ;lx:left s1 lx:right g  .
:c1 lx:right construct s1;lx:atomic;
lx:subjectv x  lx:predicate owl:sameas; lx:object g  .
　diag s g  is true under a variable mapping v precisely when there are some domain elements s1 and s1 such that the variable mapping of s  v s   is a domain element with the following characteristics
v s （icext i lx:exists   hv s  i x i（iext i lx:left   hv s  s1i（iext i lx:right   s1 （icext i lx:conjunction   hs1 s1i（iext i lx:left   hs1 v g i（iext i lx:right   s1 （icext i lx:atomic   hs1 i x i（iext i lx:subjectv   hs1 i owl:sameas i（iext i lx:predicate   hs1 v g i（iext i lx:object  
informally  if g is a formula with only x free  which we could write g x   then if diag s g  then s is the formula g 1g x 1 .
1 a paradoxical formula
now consider any logical interpretation. all non-circular finite formula exist in this interpretation  so  in particular there is a formula with the following characteristics.  here i am being a bit sloppy  using triples instead of a metatheoretical formulation  but this does not introduce any problems. 
:p rdf:type lx:exists .
:p lx:left y .
:p lx:right :p1 .
:p1 rdf:type lx:conjunction .
:p1 lx:left :p1 .
:p1 lx:right :d .
:p1 rdf:type lx:atomic .
:p1 lx:subjectv y .
:p1 lx:predicate owl:sameas . :p1 lx:object :d .
:d rdf:type lx:exists .
:d lx:left x .
:d lx:right :d1 .
:d1 rdf:type lx:conjunction . :d1 lx:left diag x y  .1:d1 lx:right :d1 .
:d1 rdf:type lx:negation .
:d1 lx:left :d1 .
:d1 rdf:type lx:atomic .
:d1 lx:subjectv x .
:d1 lx:predicate rdf:type . :d1 lx:object lx:true .
　informally this is the formula  x  x = d  & d where d is  y diag y x  &  true y .
	now what is the truth value of	:p  i.e.  is	:p in
icext i lx:true    well the truth value of :p is precisely the truth value of :d under a variable mapping that maps x to :d  i.e.  bool :d x = :d .
　but this is true exactly when there is some diagonalization of :d whose truth value is false and false exactly when every diagonalization of :d has truth value true. as the diagonalization of :d is a vanilla formula  finite  non-circular  thus at least one exists in any interpretation.
　but the truth value of any diagonalizationof :d is precisely the truth value of :d under a variable mapping that maps x to
:d  i.e.  bool  :d x = :d . so if bool  :d x = :d  =true then it must be false  and if bool  :d x = :d =falsethen it must be true. therefore no truth valuation for this formula can exist.
　as a formula of this form exists in every interpretation  therefore there are no logical interpretations and our extension breaks down. nothing in this argument depends on the details of the encoding and constructions so any extension falls prey to the same problem as long as it is possible to represent the diagonalization relationship.
1 discussion
what happened 
　because the syntax of rdf is so impoverished we had to write formulae using facts-facts that have to be true everywhere. then to state that a formula is true we had to use a truth predicate-no other solution is possible.1 as the resultant logic has sufficient power to specify a form of diagonalization a paradox exists in the logic  resulting in its collapse.
is is possible to wiggle out of this dilemma 
not really.
　if strings were used for formulae and no string manipulation primitives were available  then there would be no problem  but i have already argued that such string encodings are not permissible. in any case  adding string manipulation  i.e.  concatenation  to the language would bring back the paradox. similar issues rule out using otherencodingslike goedel numbers.
　if our truth  predicate  was weakened  perhaps so that it treated itself specially  as in kif
 http://logic.stanford.edu/kif/kif.html   then it might be possible to wiggle out. however  our truth predicate forms the basis of our logic  and thus weakening it weakens our logic  which i claim is also not permissible.
　this also rules out  for example  potential solutions related to overall incomplete reasoners like the cycl reasoner  http://www.cyc.com/doc/handbook/oe/oe-handbooktoc-opencyc.html . it is not that the reasoning process of the solution is broken. instead the fundamental model theory of i see no way out of this dilemma  and so i claim:
claim 1 a paradox-free same-syntax extension of rdf to first-order logic is not possible.
note that this is a much stronger claim than
claim 1 a same-syntax extension of rdf to first-order logic is not desirable.
　in conclusion  a puff of philosophical wind is sufficient to knock over a semantic web tower built solely from rdf. a stronger tower needs better building materials.
