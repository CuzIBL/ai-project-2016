
in distributed systems  learning does not necessarily involve the participation of agents directly in the inductive process itself. instead  many systems frequently employ multiple instances of induction separately. in this paper  we develop and evaluate a new approach for learning in distributed systems that tightly integrates processes of induction between agents  based on inductive logic programming techniques. the paper's main contribution is the integration of an epistemic approach to reasoning about knowledge with inverse entailment during induction. the new approach facilitates a systematic approach to the sharing of knowledge and invention of predicates only when required. we illustrate the approach using the well-known path planning problem and compare results empirically to  multiple instances of  single agent-based induction over varying distributions of data. given a chosen path planning algorithm  our algorithm enables agents to combine their local knowledge in an effective way to avoid central control while significantly reducing communication costs.
1 introduction
the problem of true multi-agent learning has far more complexity than simply having each agent perform localized induction in isolation  see  stone and veloso  1; kazakov and kudenko  1  . wei  and dillenbourg clearly identify this problem  interaction does not just serve the purpose of data exchange  but typically is in the spirit of a cooperative  negotiated search for a solution of the learning task   wei  and dillenbourg  1 .
　the reason that interaction and cooperation during learning is important  is because the crucial knowledge necessary in learning a hypothesis is typically distributed over a number of agents. this gives rise not only to the problem that no individual agent can accomplish the learning task alone  but also the problem of knowing what background knowledge from each agent is required for constructing the global hypothesis  given that sharing complete knowledge is often not feasible. due to the above two constraints  neither of the two extremes of the collaboration scheme would work  i.e. learning in isolation or communicating everything. therefore  the interaction between agents while performing a learning task needs to be elaborated  such that agents draw together knowledge when necessary. further  they should draw only the necessary knowledge together.
　in prior work published by the authors  huang and pearce  1a   the possible synergy between program execution and induction has been demonstrated for inducing missing predicates in a distributed program setting. under the multi-agent interactive learning framework  mails  agents are equipped with background knowledge  expressed as logic programs  and they reason about what they know  based on their collaboratively engagement in learning tasks  through communicating positive and negative examples  based on the prior success and failure of goals from the perspective of each agent . recently  the approach has been formalized for a wider range of problem solving tasks based on the  more generalized  problem of collaborative inductive logic programming  cilp   huang and pearce  1b .
　in this paper  we further develop the work by extending and integrating the epistemic aspects of the approach and better evaluate the approach for an extended task. we illustrate the approach using the well-known path planning problem in a distributed setting  where path information  such as reachability and cost  is distributed over different agents. although each agent perceives only partial information about the environment  our approach enables them to combine their local perceptions in an effective way and collaboratively work out the path from a source to a destination  which no agent would be able to do in isolation. we empirically show that the approach shows promise for avoiding central control and reducing communication costs involved.
　the collaborative inductive logic programming  c-ilp  technique is based on an inverse resolution approach to learning  muggleton and raedt  1 . we follow in the tradition of prior work on context sensitive models and decisiontheoretic ilp for efficiently constraining the search and finding optimal models  srinivasan  1 . for our knowledgebased needs of distribution  this involves scoring hypothesis during induction: which model is the optimal choice for the current context relative to each agents viewpoint and goals 
　an important aspect of our approach is that it seeks to integrate processes of both deductive and inductive inferencing during problem solving. our research views the synergy of combining both processes as an effective way of acquiring new knowledge while performing reasoning; such that an agent performing induction may have a number of deductive subroutines that can be used at its discretion  and vice versa.
　section 1 defines the problem of collaborative ilp. section 1 and 1 describe details of our proposed induction technique involving distributed knowledge sources when applied to the distributed path planning problem. section 1 reports on the empirical results addressing the advantages of our approach. section 1 looks at some existing work on path planning in multi-agent environments and other distributed problem solving techniques in situations where no centralized control is possible.
1 the collaborative ilp problem
the process of inductive logic programming is often defined as such: when provided with some background knowledge b and examples e of a concept  an ilp algorithm constructs a hypothesis h such that b … h |= e  muggleton  1 . in multi-agent systems  ilp involves generating hypotheses using the collective background knowledge. more formally  the process of collaborative ilp  c-ilp  in multi-agent systems can be defined as follows.
definition 1 the collaborative ilp problem is defined by the set of agents a; the background knowledge bi  where i （ a  for each agent i; and the set of positive and negative examples e+i and e i for each agent i. further  is the set of all background knowledge and
and are the sets of all positive/negative examples. then collaborative ilp can be viewed as the process of collaboratively generating the hypothesis h such that the following conditions hold:
1. prior satisfiability:
1. posterior satisfiability:
1. prior necessity:
1. posterior sufficiency: b … h |= e+  and
1.   i （ a such that bi … h |= e+
　the first four conditions are adapted from ilp in a single agent setting  muggleton and raedt  1  and are generalized to allow hypothesis generation over the agents' total background knowledge. the fifth condition asserts that there is no individual agent who is able to induce the hypothesis based solely on its own background knowledge.
　due to constraints associated with resource bounded multiagent systems  bringing distributed background knowledge together into one agent to execute a centralized ilp algorithm is often infeasible in practice. therefore  inductively generating the hypothesis in multi-agent systems relies on careful exchange of information between agents during learning  for which we believe epistemic reasoning plays an important role.
1 path planning using induction
in this section and the sections following  we demonstrate an application of the c-ilp approach to the distributed path planning problem and use the distributed path planning problem to show empirically the advantages of the approach in reducing communication costs while allowing agents to collaboratively learn through interaction.
　as in logic programming domain  capital letters are used to denote free variables and small letters bound. the term reachable a b  stands for  b is reachable from a . the term link a b  means  there exists a link from a to b . the link term can also include extra arguments containing information about the link  such as cost  but for illustration we stick to the two-argument form. we assume each car is equipped with the following background knowledge:
1. link a b  ★ reachable a b 
1. reachable a b  … reachable b c  ★ reachable a c 
　the first background knowledge simply captures the meaning that if there exists a link from a to b  then it's reachable from a to b. likewise  the second clause says that if it's reachable from a to b and it's reachable from b to c  then it's reachable from a to c. a car also records links that it has gone through previously in history in its knowledge base  in the form of link a b . in another word  if a car could perform deductive reasoning  it would infer based on the background knowledge and the knowledge it has gained historically  given any query in the form reachable a b   whether it is reachable from one location to another.
　on the other hand  under an inductive framework  given the same query reachable a b   the car can come up with hypotheses h  together with its background knowledge b  to explain this query  i.e. h … b |= reachable a b . viewed from a slightly different perspective  the inductive technique can be used to uncover a path from one location to another since if a path does exist  the inductive process will at some stage generate a hypothesis containing only link terms  which effectively corresponds to the actual path from a to b.
　equipped with an inductive process and some simple background knowledge as the above  our approach allows a car to issue a query in the form reachable a b  while seeking a path from a to b. when engaged in answering this query  the cars being consulted attempt to induce  by performing ilp technique such as inverse resolution  a series of hypotheses to explain this query based on their own background knowledge.
　fig.1 illustrates the process of inverse resolution while generating hypotheses to explain the query reachable a g  given a link history link c d   link c e   link d e   link d f   link f g . the background knowledge used at each step is shown on the left and the hypotheses generated along the way are shown on the right branches. the hypothesis hn = reachable a c … link c d …link d f …link f g  in the example is interpreted as: reachable a g   the query  is true so long as reachable a c  is true given that link c d   link d f  and link f g  are all known to be true.
　surely  a hypothesis generated by a single agent doesn't always correspond to a path since knowledge of an individual is often incomplete. just as what happens in the previous example  based on its local knowledge  the car in the example
genhypo query 
1:	○ {	}	○  
1:
1:	choose hypothesis h from hyplist
1:	if   t in h such that dijkstra t  path  is true then 1:	replace t with path and store h into hyphistory
1:	else
1:	generate all subsequent hypotheses hypall based on h
1:	if hypall =   then
1:	hyphistory ○ {h} “ hyphistory
1:	else
1:	hyplist ○ hypall “ hyplist
1: scorehypo hyphistory 
1: return all h in hyphistory in the order of score.　　　　　　　　　　　　　　　　　  link a b   reachable a b reachable a c  hn   link c d   link d f   link f g    reachable a b     reachable b c   reachable a c ，，，
  reachable a b     reachable b c   reachable a c reachable a c  h1	  reachable c g 
reachable a g 
efigure 1: inverse resolution: background knowledge used is shown on the left branches and hypotheses generated on the right.figure 1: algorithm for hypothesis generation utilizing deductive shortest path subroutine and scoring.
is unable to find out a path from a to g. however  returning a hypothesis such as hn is more helpful than simply failing in a multi-agent environment and we will show shortly how this partial solution can be used during future endeavors to uncover the full path.
1 hypothesize paths by induction
　discovering the partial solution relies on generating the hypotheses in a controlled fashion. the basic algorithm for doing so is sketched out in fig. 1. the algorithm starts by choosing the first hypothesis h from hyplist  initialized to contain only the query  and applying inverse resolution using h and each background knowledge. the resulting hypotheses  if there is any  is then stored back to the hyplist. if no further hypothesis is returned by the inverse resolution process  then take h out of the hyplist and store it into hyphistory. the algorithm keeps picking up the next hypothesis in the hyplist until it becomes empty. in this way  all possible hypotheses that can be generated starting from the query itself are explored.
　because every hypothesis  which explains the query  can be the one that contains the solution  they all need to be generated. therefore  the complexity of the algorithm in the worst case involves expanding starting from query with each of the background knowledge and unifying with every possible known location until all hypotheses become longer than the total of known path. if l denotes the number of known locations  k denotes the number of known links and b denotes the number of background knowledge  then the complexity of the algorithm in the worst case is o  l 〜 b k . however  because many of the generated hypotheses can be discarded halfway through the search before they become meaningless  the average case complexity is significantly lower.
1 deduction directed search
inductively generating hypotheses in an uninformed way described above can make search space intractable very quickly. for this reason  the basic algorithm is extended so that it allows a path searching subroutine  such as dijkstra's algorithm  to be employed as a heuristic for identifying promising hypotheses and pruning away search space in a mindful way. dijkstra is run on each reachable term contained in hypothesis h to uncover a path based on historical link information. for example  if link c d   link d f  and link f g  are all known  then the path searching subroutine will uncover a path from c to g in hypothesis h = reachable a c …reachable c g  and will change the hypothesis to h = reachable a c …link c d … link d f  … link f g  without having to go though the inverse resolution a large number of times to arrive at the same hypothesis.
　by integrating both deductive and inductive processes  our approach allows an agent performing induction to employ deductive subroutines that can be used at its discretion. for example  an agent may have a subroutine for finding the shortest path while also having a subroutine finding any particular path. this aspect of the research has its own significance because deductive inference and inductive inference often take two independent paths. our approach has shown that they can be combined tightly together as an effective way of acquiring new knowledge while performing reasoning. it also sheds a light on programming inductive agents at a higher level of abstraction in which what algorithm an agent actually runs doesn't have to be hard coded. instead  a number of different deductive subroutines may be employed and these deductive subroutines can be utilized by agents when required. based on what an agent is committed to do at a particular moment  it selects the suitable subroutine to execute as part of problem solving while executing the same induction process.
1 collaborative path planning
in the previous section  we have demonstrated how induction allows an agent to not only find out a path if it exists but also 'guess' a hypothetical path which can be pursued further. in this section  we explore the interactive aspects which enable multiple agents with distributed knowledge to collaboratively find out a path. take the example in fig. 1 and assume car a is interested in going from a to l. posted as a collaborative ilp problem as defined in section 1  the path planning problem becomes:  collaboratively find a hypothesis h such that the example e = reachable a l  is

figure 1: example showing path information being distributed among four agents. one path from a to l is a-d-g-j-l.
explainable using the total background knowledge b of all agents . it can be observed from the figure that one such hypothesis would be h = link a d  … link d g  … link g j  … link j l .
　generally speaking  in a distributed setting  the pursuit of a global hypothesis involves the following key elements:  i  the global inductive problem must be decomposed into a series of localized inductive problems that can be solved by individual agents;  ii  an individual agent's inductive process must enable it to contribute a partial solution to the problem; and  iii  the agents must carefully maintain their knowledge and systematically exchange information such that the partial solutions can be integrated together to form the final solution. while element  ii  has been described thoroughly in the previous sections  here we provide a description to what is involved in  i  and  iii .
　consider the example in fig. 1 again. the interaction steps can be summarized as follows:
l 
1	a :e = reachable a l 1	a asks c :e = reachable a l 1	c induces:h = reachable a g  link g j  link j 1	c replies:h = reachable a g 1	a deduces:k1 = ka kc reachable g l   
k1 = ka  iki reachable a g  	★
ka reachable a l   1	a :e = reachable a g 1	a asks b :e = reachable a g 1	b induces:h = reachable a c  link c d  link 1	b replies:h = reachable a c 1 a deduces:k1 = ka kb reachable c g   
k1 = ka  iki reachable a c  	★
ka reachable a g   1	a :e= reachable a c 1	a induces:h= link a c d g 
　car a starts  step 1  with e = reachable a l  which it wants to construct an h to explain. assume car a asks car c first. car c will perform the induction and obtain a hypothesis  say h = reachable a g  … link g j  … link j l . it returns reachable a g  back to car a. car a infers that car c knows reachable g l   by performing reasoning on the definition of reachable   step 1 . therefore  it knows that as long as someone knows  or can explain  reachable a g   the path can be found. at this stage  step 1   the overall problem has changed. car a is now interested in constructing an h to explain e = reachable a g . later on  through collaboration with car b  they would be able to induce the path from a to g. since car a remembers that car c knows reachable g l   the full path from a to l would thus be

figure 1: interaction and information passing among the cars in fig. 1 when searching for a path from a to l.
cpp query know 
1: hyp ○ genhypo query  // induce the path by itself
1: if pathfound hyp  then
1:	path ○ retrievepath know 
1:	return path
1: for  i （ a do
1:	hyps ○ hyps“ ask i  query 
1: if hyps =   then
1:	return fail
1: if pathfound hyps  then
1:	path ○ retrievepath know 
1:	return path
1: while	do
1:	query ○ choosebest hyps  // hypothesis to pursue next
1:	know ○ genknow query  // generate new knowledge
1:	hyps	hyps   {query}
1:
1: return failfigure 1: algorithm for collaborative path planning that combines agent interaction  induction and epistemic reasoning.
found eventually. of course  this requires car a to go back to its knowledge base and retrieve what has been inferred before about who knows what. the actual transfer of link information will then take place. the interaction among the three cars in this example is shown in fig. 1.
　our general algorithm for collaborative path planning is given in fig. 1. when engaged in answering a query  an agent first attempts to solve it by itself  line 1 to 1 . if it succeeds  it goes back to its knowledge base  retrieves the path  returns it and finishes. if it fails to find the path itself  it asks every other agent in the team  line 1 to 1 . if no hypothesis is received from any other agent  it fails since the path doesn't exist. if any hypothesis indicates the path has been found  it goes back to its knowledge base  retrieves the path  returns it and finishes. otherwise  line 1 to 1   it picks the most promising hypothesis among all returned by the other agents and proceeds with it as the new query  until all those hypotheses have been tried in which case it fails since the path doesn't exist. during retrieval of the path  it bases on the knowledge in its knowledge base to decide whom to request for the actual link information.

figure 1: left: shows communication costs  amount of information transferred  associated with the c-ilp approach to collaborative path planning. middle: compares communication costs using the c-ilp approach with a centralized approach  with a graph of 1 links for different numbers of agents. right: shows communication savings as the information per agenthere  communication saving comes from three aspects: 1  increases  using 1 agents and graphs of different sizes.
communication of link information doesn't happen until a path has been fully worked out by keeping track of who knows what as epistemic information; 1  if car d knows a thousand nodes  only the ones that lead to node l will ever be transferred across; 1  instead of returning all generated hypotheses back to the initiator  a scoring method can be adopted to discriminate the hypotheses further. for example  we have used a variation of the minimum description length  mdl  metric to favor shorter hypotheses but using more link terms in our implementation. however  it is noticed that regardless of what scoring method is being used  just returning the hypothesis with the highest score to the query initiator often makes the entire approach incomplete. this is due to the fact that each agent can make no assumption about other agents' knowledge status  while evaluating a hypothesis and the scores assigned only reflect its own knowledge of the world. therefore  it can often be the case that a suboptimal hypothesis to one agent may well be what the other party is actually looking for. generally speaking  the best one can do is to increase the likelihood of returning a better hypothesis in earlier attempts by having the agents progressively returning starting from the hypothesis with the highest score  one at a time  until either all hypotheses are returned or the other party is satisfied.
1 experiments and analysis
some preliminary experimental results were shown in  huang and pearce  1b  focusing on pairwise communication costs during interaction between two agents. more thorough experiments have been performed and the results reported in this paper analyze the effect in communication costs with different numbers of agents  a  and with varying graph sizes  g. in our experiments a varies from 1 to 1 and g varies from 1 to 1. the experiments involve distributing the total g links randomly over the a agents. we ran 1 trials for every different value of a and g using the c-ilp approach and compared this against a centralized approach in terms of the total communication cost involved  measured as the number of  terms  transferred . the centralized approach involves having every agent  one at a time  transferring across distributed path information to the query initiator before executing a path finding algorithm.
results are summarized and plotted in fig. 1. the one on the left shows the increasing of communication costs associated with the proposed c-ilp approach as the total number of agents in the system arises. the middle graph compares communication costs using the c-ilp approach against the centralized approach  with a graph of 1 links and varying number of agents. we noticed that communication savings with the c-ilp approach are significant when the total number of agents is small. as the number of agents increases  along with the entropy of the system  the benefit decreases and finally the cost using c-ilp exceeds that of the centralized approach. a similar situation occurs when using graphs of other sizes. we believe this can be explained in terms of the participation of agents during the solution of the c-ilp problem. as the number of agents increases  the link information is more evenly distributed over agents and each agent solves a smaller partial sub-problem. as a result  each agent has less knowledge which makes it harder to come up with useful hypotheses. consequently  communication costs can override the benefit gained from induction. we explore this aspect and illustrate in the graph on the right the relationship between communication costs and partial knowledge represented as  links per agent   l. it is found that the c-ilp approach outperforms the centralized approach uniformly with different numbers of agents and graph sizes when each agent has  roughly speaking  1 links or more.
　more sophisticated epistemic reasoning also promise to extend the basic techniques presented above to make it more cost effective. as previously commented  better scoring techniques than we have used here are possible  facilitating the exchange of additional epistemic information which would lead to additional savings in communication. for example  agents may benefit from gathering and considering hypotheses from more than one agent before pursuing further; they may discriminate information from one source against another; they may know who is more likely to know the answer to a particular query; they may even know based on some prior knowledge whom to avoid asking some particular queries. in general  we believe performing reasoning at epistemic level will play a key role in tackling these problems  van der hoek  1 . nevertheless  our model accommodates the treatment of reasoning at epistemic level using the k operator and the knowledge base.
1 related work
exploratory work by davies  davies  1  has also investigated learning new concepts among multiple agents using decision tree techniques. however  our work develops multiagent induction based on a more formal treatment and integration of knowledge  fagin et al.  1 . this includes integrating capabilities and utilizing induction  muggleton  1  towards the aims of true multi-agent learning  as identified by  kazakov and kudenko  1   using inductive logic programming  ilp .
　our work shares some similarities with abductive logic programming  alp   denecker and kakas  1  given that it integrates deduction and induction to constrain explanations. consequently  the kind of induction we tackle can also be viewed as abduction  or explanatory induction as defined in  lachiche  1   as opposed to the  harder to compute  descriptive induction.
　since ilp  in the limit  can be intractable unless the search is effectively constrained  traditional implementations of ilp frequently rely on the incorporation of domain knowledge to constrain the search: based on contextual information  in the spirit of  srinivasan  1 .
　in relation to the hypothesis scoring technique used in this paper  since it chooses the minimum size hypothesis it is essentially a minimum description length  mdl  approach  also known as minimum message length  mml  in some literature. it is well known that the mdl heuristic  in general  does not necessarily guarantee solutions due to the limitation of independence of evidence assumption inherent in minimum hypothesis formulation  for details  see  li and vitanyi  1  . however  the key to our approach does not rely specifically on mdl and can utilize any  possibly even complete  technique for scoring hypothesis  given the specific constraints of individual applications.
1 conclusion
in this paper  we have looked at the problem of path planning in multi-agent environments by combining partial knowledge of the individuals and have demonstrated a distributed inductive approach as an effective technique for problem solving. experiments have showed the promise of our inductive approach not only for overcoming the problem of knowledge being distributed but also for saving communication costs while allowing the agents to combine localized knowledge and collaboratively find solutions. we have also demonstrated how deductive algorithms could be embedded as an heuristic within the process of induction to achieve an informed way of performing induction. we claim although the problem we looked at in this paper is specific  the approach that involves the integration of deduction and induction processes while solving problems involving collaboration is useful in general.
