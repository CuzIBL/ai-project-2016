 
　　　in this paper we approach  using artificial intelligence methods  the problem of finding a minimal-cost path in a functionally weighted graph  i.e a graph with monotone cost functions associated with the arcs this problem is important since solving any system of functional equations in a general dynamic programming formulation can be shown equivalent to it. a general heuristic search algorithm with estimate is given  which is a nontrivial extension of algorithm a* by hart  nilsson and raphael. putting some constraints on cost functions and on the estimate  this algorithm can be simplified until the classical version  with additive cost functions  is reached. 
i. introduction 
　　　dynamic programming is a well-known methodology for representing optimization problems in terms of the so-called functional equations and for solving them. while in the artificial intelligence literature dynamic programming is often described reductively as a static  breadth-first technique for searching cycle-free graphs  a general model for the discrete  deterministic case has been given by karp and held . this model  called sequential decision process consists essentially of a finite automaton with cust functions associated with the transitions. if the cost functions arc monotone  and if a limit condition is satisfied  searching the transition graph of the finite automaton is equivalent to solving a suitable set of functional equations. the authors have shown how both the functional equations model and the karp and held model can be derived from a quite primitive problem-reduction schema  1  which directly interprets the bellman's concept of problem embedding and shows how the optima 
	lity 	principle holds if and only if the cost functions are monotone. 
　　　in this paper  we approach the problem of searching a functionally weighted graph with methods proper of artificial intelligence  in particular we extend the heuristically guided search method by hart  nilsson and raphael  since here the cost of an arc is represented by a generic monotone function  the extension is nontrivial  and it may happen that no simple or no finite optimal path exists. putting further constraints on the cost functions and on the estimate  strict monotomcity  positive mo notonicity  it is then possible to simplify the general search algorithm until the classical version is reached. 
　　　the relevance of bridging the gap between dynamic programming and heuristic search methods is twofold. on one hand  the karp and held model provides a framework where search problems can be stated in quite general terms and  heuristic  search algorithms can be proved 
effective under well specified constraints. on the other hand  if good estimates can be derived from the problem domain  the solution of problems amenable to a dynamic programming representation can be greatly sped up. 
1- djynarmic programming 
　　　dynamic programming  1  is an optimization technique based on the representation of a problem as a process which evolves from state to 
state. when the cost structure is appropriate  the determination of an optimal solution may be reduced to the solution of a system of functional equations. a general form of such equations is the following  1   
1 

functionally weighted graph from node ni to the solved node n 
　　　this theorem shows that a dynamic programming problem can be reduced to a minimal-cost path problem  if the cost of a path is suitably defined therefore such a problem could be solved by using algorithms for finding minimal-cost paths in a functionally weighted graph. these algorithms are well-known in the case of additive costs  i e. where the cost functions have the form f x  = x+a  1  in the next section we give a general search algorithm which uses heuristic information to guide the search 
　　　conversely  this theorem says that a minimal-cost path problem can be solved by solving a system of functional equations with  for example  the iterative algorithm. such a result is well-known in the additive case  
and several iterative algorithms have been given for finding the shortest path in a graph . 
　　　we point out that the model of dynamic programming presented in this section is general as far as monadic functions are considered. however there are dynamic programming problems which are better modelled by assuming that the functional equations contain polyadic functions  in this case our model can be generalized to an and/or graph  1 . 
1. a general propagation algonthmwith estimate 
　　　in the previous section we have described a general model for dynamic programming and an iterative solution algorithm. no better method is available  unless special assumptions are made on the functions f and/ or an estimate is supplied for the cost of all intermediate problems based on information from the problem domain this line of development cor responds to merging the branch-and-bound idea with dynamic programming and has been originally pursued by hart  nilsson and raphael  in the special case of additive functions with positive weights. here we give a general algorithm for searching functionally weighted graphs and we show its validity when the estimates arc lower bounds 
　　　let g be a functionally weighted graph with n+1 nodes ni  ... .... n   n 	* and monotone cost functions f   given a path p from node n 	to node nik  p = ni1 nj1 .... n t k   *c define the cost function of path p as the  monotone  function f  x  obtained by composing the cost functions of the arcs of p 
  
furthermore we define the distance function d   x  from node n  to node 

where p.. is the  possibly infinite  set of paths from n to n . notice that the distance is defined  for every x. as the greatest lower bound and not simply as the minimum  because  in some cases  it can only be obtained as a limit  i.e. with an infinite path 
　　　finally wc can define the solution cost c of a node n   i= 1 .... n  as the gib of all values which can be achieved by applying the cost func tion of every path from of the solved node 

     we give now an algorithm for finding the solution cost c of a given node n  of g. called the top node  and a path for which this cost is achieved  called solution path note that  when the solution cost c  is obtained as a limit  no  finite  solution path exists. this algorithm is a 
     bottom-up propagation algorithm  i.e. it propagates toward the top node starting with the solved node n which  from now on  will also be called bottom node and denoted with nt no restriction is made on the generality of the algorithm by having only one bottom node and one top node. in fact  if more than one top node were present  we could add to the graph a new node n1 connected to each top node through an arc with the identity function associated with it  and we could consider n1 as the top node of the new graph 
　　* 	usually  in the artificial intelligence literature  aearcti algorithm* are given for infinite graphi must results of thes paper can he extended to this casc. 
　　　at each step  the algorithm selects a node ni and expands it generating all of its parents  i.e. all nodes n. such that  n n   is an arc of g. the selection of the node to be expanded is made according to a total estimate e associated with each node n   which is an estimate of the 
solution cost ct of node nt  with the constraint  hat the solution path passes through node n the total estimate e can be expressed as follows 

where gi is an estimate of the solution cost ci of node n and h.  x  is a monotone function which gives an estimate of the distance function c .  x  fiom ni to nj . this estimate can be obtained using the heuristic information available from the problem domain  whereas gi will be constructed step by step by the algorithm 
　　　our algorithm is an extension to the case of monotone cost functions of algorithm a* by hart  nilsson and raphael  1   which consi-
ders the case of additive cost functions with positive weights  i.e. 

for every arc  n n  . furthermore  algorithm a* assumes that the bottom 
and that the estimate h  x  is also an additive thus  the total estimate becomes  in this ca-
　　　since our algorithm deals with the general case of monotone cost functions  the extension is nontrivial and some new features have to be added first of all we point out that the solution path can contain the top node n more than once this happens when the distance function from the top node to itself is smaller than the identity function  dtt  x    x  for soir.c x   i.e. the top node belongs to a cycle which can reduce its cost this fact is taken into account by adding a new node n1 to the graph and an arc  non   with the identity function lix  associated with it. the algorithm will stop only when this node will be encountered. 
     furthermore  a solution path can contain the same node several times. therefore  if we want to obtain the solution path by tracing back through the pointers from the top node  we must have more than one pointer for each node. this is achieved by associating with each node a stack of pointers  to which a new element is added every time the node is reopened. 
1 



of the algorithm  each node ni has a total estimate  except for node n1 for which we h a v e a c c o r d i n g to the condition on ties 
in step 1 of the algorithm  the node whose gi value is smallest is expanded at each step since n1 is the only node with total estimate 	. the algorithm will stop only after all other nodes have been closed. in this case it is clear that the solution cost of all nodes is determined simultaneously. thus the estimate h  for each node can be always assumed when the above more general problem must be solved. 
　　　note that this algorithm may be used in the case of additive cost functions  if negative weights are allowed and no estimate is available. 
1 positively monotone cost functions  and consistent and strictly 
monotone estimates 
　　　the first case we examine is when all cost functions are positively monotone. a monotone function is called positively monotone iff for all arguments x we have 

examples of positively monotone functions are as follows 

　　　it is easy to sec that the composition of two positively monotone functions is still a positively monotone function  and thus the cost function of every path is also a positively monotone function as a consequence  the estimates can also be assumed positively monotone without restrictions 
　　　for positively monotone cost functions we have the following theorem   for the proofs of all theorems in this section  see the appendix . 
theorem 1. let c be a functionally weighted graph with positively monotone cost functions then there always exists a simple solution path from the top node. 
　　　from the above theorem it lollows that algorithm search cm take into account only temporary solution paths without cycles thus the algorithm can be simplified by eliminating the slacks of pointers and by replacing them with only one pointer for each node  as in algorithm a* . 
       when the estimate h is strictly monotone  looking at g values in step 1 of algorithm search for solving tics is no longer useful since i m p l i e s t h u s in this case algorithm search 
　　　note that positive monotonicity alone  while insuring termination  does not guarantee that all closed nodes are never reopened. this case is well-known in the special  classical case of a graph weighted with positive constants  with estimate |1|. following |1|. we thus introduce consistent estimates an estimate  is ctinsistent iff for all arcs 
 nj ni  and lor all x we have 

　　　in the case of consistent estimate  but not necessarily for positively monotone cost functions  we can prove the following theorem 
theorem 1 let  i be a funchonally weighted graph with consistent estimate  then the values of the total estimate e of 
the nodes closed in the successive iterations of algorithm search form a  possibly infinite  nondecrcasing sequence 
     the above result does not mean that closed nodes are never reopened. in fact a node ni could he closed a second time with the same estimate ci but with an improved cost g otherwise n would 
not be reopened  the monolonicily of h does not allow 
　　　for instance  let us consider the graph in fig 1 the exact distances arc as follows 


　　　if the estimate is consistent  the above theorem allows to add a new termination condition to algorithm search:  if the top node in closed and has a total estimate snwllcr than the node currently under closure  stop with success . this condition allows for instance to slop at the third iteration of the previous example. 
　　　if the two conditions of positive monotonicity of the cost functions and of consistency of the estimate are taken jointly  we can prove the following theorem  which is an extension of a result bv hart. niluon 
and raphael |1|. 	  
theorem 1. let g be a functionally weighted graph with positively monotone cost functions and with a consistent estimate then when algorithm search closes a node n.. its cost gj is the solution cost of n . thus algorithm search never reopens a node. 
　　　the above theorem provides an obvious termination condition for algorithm search  stop when the top node is closed . 
the above results apply  as pointed out before  to the well-known 

1 

case of additive cost functions. however their generality allows also the application to cost functions of different form  where the standard a* algorithm cannot be used an example is provided by the so called 
secondary optimization problem which arises when we want to find the best ordering of vanahlc elimination in non-serial dynamic programming  1| the problem can be stated as that of finding the minimal cost path in a weighted graph  but where the cost of a path is the maximum among all the weights of its arcs therefore the cost functions of this graph are of the form 
i.e. they are positively monotone functions and algorithm search can be used for finding the solution path  if suitable estimates are provided* a further example of positively monotone but nonadditive cost i unctions is the so called i -dimensional stock cutting problem   where we want to determine the minimum number of standard pieces of material of length l from which it is possible to cut at pieces of length 1   a1 pieces of length 1   .... and an pieces of length i in the graph representation  if this problem  the meaning of an arc is  cut a piece of length 
i ' and the cost  unction associated with it is 1. 
1. 
1. 1 
1. 
1 
1 