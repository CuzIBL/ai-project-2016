 
       sisp/i is an i n t e r a c t i v e system whose goal is the automatic inference of lisp functions from a f i n i t e set of examples {   x .   f   x .       where x. is a 
l i s t belonging to the domain of the f u n c t i o n f we 
want to i n f e r . sisp/i is able to i n f e r the recursive form of many l i n e a r recursive functions and i t s s t o p - c o n d i t i o n . sisp/l t r i e s to work with one example only. when it f a i l s   it asks for new ones: using then a method of generating new p a r t i a l subproblems  sisp/l is able to perfect i t s generated recursive f u n c t i o n u n t i l it gets a correct one. 
i. introduction 
       in t h i s paper we describe the system sisp/l whose goal is the automatic inference of lisp functions from a f i n i t e set of examples {   x .   l   x .     }   
where x. is a l i s t belonging to the domain of the f u n c t i o n f we want to i n f e r . 
       the problem o r i g i n a t e s from a more general one: how to b u i l d a  learning-quest ion-answeringsystem   l.q.a.s.  using a f u n c t i o n a l method to provide an answer to any given question. the method we propose in sisp/l is n a t u r a l l y well adapted to the l.q.a.s. we are. developping  1  1. 
in the f i e l d of  automatic programming from 
examples   an important piece of recent work is thesys by summers l1j. the major r e s u l t of t h i s work  is the f o l l o w i n g : using a small number of well chosen examples 
    n i l   f   n i l           a     f     a       . . . } thesys is able to i n f e r a recursive expression $ equivalent to f for every x belonging to the domain of f. 
       only a small class of functions can however be obtained by summers's method  which works by l o o king for a recurence r e l a t i o n between r e p r e s e n t a t i ve predicates p. of the given input s t r u c t u r e and for a recurence r e l a t i o n between the map functions m. p r o v i d i n g the given outputs from the given i n puts. then  using a f i x e d point theorem  v is constructed . 
	although summers's method 	is very powerful 	it 
	auto. 	prop:.-1 
1 
has four important drawbacks: 
1 . - the constructed expression  p is n e c e s s a r i l y r e c u r s i v e : 	for instance 	the 	i d e n t i t y f u n c t i o n w i l l be infered by v  x    	if 	x * nil then nil else cons  car x     cdr x    1 . - thesys needs well 	chosen examples  which in p a r t i c u l a r must contain the 	stop c o n d i t i o n of the recursive f u n c t i o n v. 	for i n s t a n c e   	the construct i o n of the f u n c t i o n reverse requires the f o l l o w i n g set of examples: 
{ nil + n i l     	  a  -   a       	  a b  -  b a       
  a b c  +  c b a     } 
1 . - the f u n c t i o n to be constructed has to present only one   i t e r a t i v e level 1 . for instance  thesis f a i l s to construct a correct f u n c t i o n corresponding to the example:  p q r s  -   p p q p q r p q r s  . 1 . - when thesys has to solve a d i f f i c u l t problem  it does not t r y to generate a p a r t i a l   simpler 
problem f o r which it could e i t h e r f i n d a c o r r e c t s o l u t i o n or perhaps use a knowledge p r e v i o u s l y stored in a data base by the system i t s e l f . thus  thesys cannot be e f f i c i e n t l y used in a l.q.a.s. without important m o d i f i c a t i o n s . 
       the method we propose in t h i s paper is very d i f f e r e n t i n p a r t i c u l a r   i t has the b u i l t capacity to use a professor in i n t e r a c t i v e mode. it does not l i e yet on any t h e o r i c a l groundwork  but allows us to overcome some of the previous drawbacks  a l though new ones appear: 
- recursion is not a u t o m a t i c a l l y i n f e r e d by the synthesis a l g o r i t h m ; for instance  using the example   a b c  -*  a b c       stsp/1 i n f e r s the f u n c t i o n  p v*p  x  = x for any x. 
- f o r some   s i m p l e   f u n c t i o n s   s'isp/1 needs only one example  x  f   x     . 
in the case where a recursive expression is i n f e r e d   the stop c o n d i t i o n is then found by sisp/l 	i t s e l f . however the. l i s t x must be long enough to be r e presentative of the f u n c t i o n f. 	for instance  
reverse is obtained using the only example   a b c d  +  u c b a       but is not obtained w i t h   a b c     c b a     . 
- when the f u n c t i o n f is  more complicated  sisp/l f a i l s to construct a correct f u n c t i o n w i t h only one example and it then t r i e s to work w i t h two examples. - when the f u n c t i o n f is  much more complicated   
sisp/l 	generates a new p a r t i a l 	simpler problem 
 y  & y   where y is defined in terms of x and g y  is defined in terms of f   x   . to solve t h i s new problem  sisp/l sometimes needs a new example   x 1   f   x '     which is used to deduce an example  y'  g   y '       the i n t e r a c t i o n is only used in the sense of asking for new examples  when necessary. sisp/l is thus extensible and has the p o t e n t i a l i t y to use a s e l f constructed knowledge data base. 
       some o b j e c t i o n s can be raised to our i n t e r a c t i v e method: 
- when a f u n c t i o n f needs several examples to be i n f e r e d   the professor sometimes has to give an 
appropriate sequence of examples. - we do not e x a c t l y know the class of f u n c t i o n s which sisp/l is able to i n f e r . however  it seems to be much larger than thesys one. for instance 
    p q r s   -     p p q p q r p q r s     	i s 	i n f e r e d b y 
sisp/l using only one example whereas the half f u n c t i o n   p q r s t u  +  p q r       which is i n f e r e d by thesys  requires two examples by s i s p / l . 	in f a c t   
: 	jouannauh 

we hope that sisp w i l l be able to i n f e r a larger 
class of 	l i n e a r recursive 	f u n c t i o n s . 
	i i . 	general description of the method 
1. - l¡ìngu¡ìge 
       sisp/i i n f e r s functions defined on character s t r i n g s  abcd...  which w i l l be represented by the l i s t  a b c d . . .   . 
       sisp/1 synthetizes lisp-functions b u i l t w i t h the f o l l o w i n g basic f u n c t i o n s   described here by ex amp1 e s: 
lcar:  a b c d  -*  a  	cdr:  a b c d  -   b c d  
lrac:  a b c d  -+  d  	rdc:   a b c d  -   a b c  conc:  a b    c d  ¡ö    a b c d   
conct:  a b   	 c d    e f  +  a b c d e f  
pref: 	  b c     	  a b c d      a  l p r e f i x of  b 	c  in 
  a b c d    
suff:  b c   	 a b c d  ¡ö+  d  i s u f f i x of  b c  in 
 a b c d   j 
and a c o n t r o l s t r u c t u r e using cond and null. 
1*~ notion of typ e 
       a type is a set of l i s t s which can be defined by r u l e s which are summarised as follows  1: 
a  the set of known inputs   x   and the set of outputs   f   x   m of the f u n c t i o n f to be synthetized are types. 
b  if x is a type and f a lisp f u n c t i o n   	then the set of outputs of f r e s t r i c t e d to x as 	input is a type. 
c  if y is a type and g a lisp f u n c t i o n then the set x of x such as g x  c- y i s a type. 
	1 ~ 	segment  .i on pattern 
let f be a f u n c t i o n to be synthetized and 
 x  	f   x     	an example of   i n p u t - o u t p u t   of 	t h i s f u n c t i o n . 
       sisp/1 uses a general h e u r i s t i c to create an expression of the f u n c t i o n : 
a  segmentation of s t r i n g s x and y = f   x   	i n t o three consecutive segments such t h a t : 
conct  px  c   sx  ¡ö+ x 
       conct  py  c  s y  -  y where c denotes the larger s t r i n g common to x and y  px and py denote the p r e f i x s of c in x and y  sx and sy denote the s u f f i x s of c in x and y. 
b  b u i l d i n g of 	r e l a t i o n s between 	these segments. 
¡¡¡¡¡¡a  segmentation pattern  of   x   y     f o r a l l x and y  is defined as the network shown in f i g u r e i. 
       we can see on t h i s network: - seven nodes representing types r e s p e c t i v e l y associated to the s t r i n g s x   y   c   p x   p y   s x   s y . - twelve r e l a t i o n s between nodes. each r e l a t i o n consists of a f u n c t i o n and a scheme  i   i          
i 	-  j  which i n d i c a t e s the input nodes i   	i 	  . . .   
i  	in t h i s order and 	the output node j. r 	this order n
is represented on the network by a double arrow. 
note that f u n c t i o n s fx  fy  gpx  gpy  gsx  
gsy are b u i l t by sisp/1 	using the basic f u n c t i o n s lcar  cdr  lrac  rdc  and the composition r u l e . they are choosen of the 	less possible complexity  the smallest number of basic f u n c t i o n s   . 
       in some cases  the segmentation p a t t e r n is simpler: 
       - when one or several s t r i n g s are empty   n i l     .. the associated nodes are suppressed from the p a t t e r n . 
       - when two s t r i n g s are equal  	the associated 
nodes are joined together. for instance  if x and y are the same  the pattern is reduced to one node; if x and y have no common part  the pattern is reduced to only two nodes. 
1*   ¡ìy.¡êlt}¡êsis fron} on¡ê exam¡êle 
the synthesis consists of three steps: 
a  sisp/1 generates a network   c a l l e d a  segmentat i o n s t r u c t u r e     by the f o l l o w i n g process: 
        1  generate the segmentation p a t t e r n of  x y .the generation gives the two sets of p a i r s : 
{ px  	p y     	  c   p y     	 sx  py } 	k p x   s y       c   s y      sx  sy  } 
        1  as long as py and sy are not empty  choose one pair in each set by a h e u r i s t i c way; for each of these p a i r s   rename it as  x y  and go to step 1. 
b  sisp/1 	looks at the segmentation s t r u c t u r e for a 	l a t t i c e in which the minimal and f i n a l nodes are r e s p e c t i v e l y x and y   t h a t is x and y t y p e s   . 	this l a t t i c e 	is stepwise constructed using algorithm 	1  
defined as f o l l o w s : 
def i n i t i ons: 
       - lat is the constructed part of the l a t t i c e at any step  except in the f i n a l step  lat is not a l a t t i c e   . 
       - an incomplete node of lat i s a node such that the r e l a t i o n ending at t h i s node 	  i n lat  owns some e n t r i e s which are not connected 	to x. these nodes are c a l l e d u n s a t i s f i e d 	e n t r i e s . 
       - beg  z  is the set of nodes in lat which are less than z and which are not u n s a t i s f i e d e n t r i es. 
       - p is a   p a t h   from beg  u  to v  where u and v are nodes of lat  if p is an oriented path s t a r t i n g from one node belonging to beg  u  and ending at v. this path may c o n t a i n incomplete nodes together w i t h t h e i r u n s a t i s f i e d e n t r i e s * example of lat: 

	nodes 1  1  	1 are incomplete nodes 
nodes 1  1  1  1 are u n s a t i s f i e d e n t r i e s a l l others nodes are complete nodes. beg  1  - {x  1  1  1  1} 
a l g o r i t h m 1: 
1 . lat  - x 
1 look f o r a path p between x and y. 
1 add path p to lat. 
1 lf there is no incomplete node in lat then stop else select the minimal one and c a l l it n.   i t can be demonstrated that a l g o r i t h m 1 generates a set of incomplete nodes which is t o t a l y ordered on lat . 

auto. 	pror.-v j o n a n n a u h 


	auto. 	prog.-1: 	jouannaud 








	auto. 	p r o r . - 1 : 	jouannaud 
1 
