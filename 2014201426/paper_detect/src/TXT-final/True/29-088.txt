 
this paper describes a constrained bin-packing 
 problem  cbpp  and an approximate  anytime algorithm for solutions. a cbpp is a constrained version of the bin-packing problem  in which a set of items allocated to a bin are ordered in a way to satisfy constraints defined 
on them and achieve near-optimality. the algorithm for cbpp uses a heuristic search for labeling edges with a binary value  together with a beam search and constraint propagation. some experimental results are provided. this algorithm has been successfully applied to industrial-scale scheduling problems. 
1 	introduction 
we can see many instances of the bin-packing problem  bpp  which is characterized as follows: given a finite number of bins whose sizes are the same  and a finite set of items whose size is no more than the bin size  find a partition of the items into disjoint subsets such that the sum of the sizes of the items in each subset is no more than the bin size  and such that the number of the bins used is as small as possible. this bin-packing problem is np-hard  garey and johnson  1; martello and toth  1 . 
　the manufacturing and process industries often need to create production units consisting of subunits that are identical with respect to some criteria. these production subunits are normally called groups  batches  or lots  vollman et a/.  1 . when creating such groups we frequently face problems that can be considered particular instances of the constrained bin-packing problem  cbpp   which has additional restrictions over the binpacking problem in that items in each group have to be sequenced satisfying all given constraints  creating ordered groups. in addition to satisfying all the con-
straints  items in each bin should be ordered in a way to minimize primarily the number of bins and secondly aggregate cost. 
　consider an example of a production scheduling problem from the steelmaking industry. given a number of orders  items  from customers  production schedules are 
1 	search 
created by grouping the orders by considering many attributes such as chemical composition  process routing and delivery due date. at the melt shop large bins called converters are used to transform molten iron into purified molten steel. a converter typically contains a maximum of 1 tons. a group of orders in the converter is called a heat. for the production of the same set of orders  some groupings require fewer heats to be made than other groupings due to better utilization of the converter. this is desirable because there is a high fixed cost associated with processing a heat that is independent of the size of the heat. hence  one of the primary goals in steelmaking scheduling is to minimize the number of heats at the melt shop required to produce all of the given orders. this problem description alone is similar to bpp. 
　yet another issue is the production cost which is incurred when producing one order after another. due to the characteristics of subsequent processes such as casting and rolling  even for two solutions with the same number of heats  the total cost of producing all orders may be different depending on the sequence of orders within each heat. therefore  a secondary goal is  for the same number of heats  to find the sequences of orders within individual heats that minimizes the aggregate production cost. with this secondary requirement  the problem becomes cbpp. 
　for the exact solution of ordinary  unconstrained  bpp  very little can be found in the literature  eilon and christofides  1; hung and brown  1   and they can solve only small size instances. we can find approximate algorithms of bpp in the literature  a few of which include first fit  best fit  first fit decreasing  and best fit decreasing  garey and johnson  1; martello and toth  1 . 
　in ordinary bpp  we can choose any item to fill a bin from the item pool. in contrast  in cbpp  the next item to choose from is limited to a subset of the item pool whose elements can feasibly be inserted into the bin. whereas many reports on the ordinary bpp algorithm are available  to the best of our knowledge  no literature on algorithms regarding the cbpp exists. 
　a directed graph with all of its edges labeled uniquely determines a solution. possible labels associated with 

each edge is binary: 1  selected  or 1  discarded . in this paper  we present an approximate algorithm for cbpp that finds near-optimal solutions in a reasonable amount of time. we call this algorithm an approximate 1 labeling algorithm. given a directed graph constructed from a cbpp  the 1 labeling algorithm labels all edges as either 1 or 1 until exhausted  in an incremental way  resulting in a set of ordered groups. heuristic information such as the topological structure of graphs is used in selecting edges to label. this algorithm was developed at ibm t.j. watson research center as a means to solve large-scale industry grouping and scheduling problems. it is currently used in several real-world applications. 
　the remainder of this paper is organized as follows. in the next section  the problem statement is given. in section 1 we present an approximate algorithm for cbpp in detail. we then provide experimental results together with some analysis. 
1 	problem statement 
the following is an abstraction of cbpp. 
we are given a finite set of items  each of which has a size. an ordered group is an ordered subset of those items. the total weight of the ordered group cannot exceed the bin capacity. if two items in and im are adjacent in the bin  we incur a cost from im to i n   which is not necessarily the same as a cost from in to i m   and which may be infinite  implying that the solution is infeasible. the primary goal is to create a feasible solution with minimum number of ordered groups. when two solutions have the same number of ordered groups  the one with the minimum aggregate cost is preferred. 
　cbpp can be considered a combined version of the bin-packing problem and the traveling salesman problem  tsp  because the bins have a fixed capacity  items in a bin are ordered  and we wish to minimize the aggregate cost. furthermore  when an item  ik  is assigned to a 
　bin  only a subset of the unassigned items which could follow ik can be placed in the same bin. 
　in general  we can put any number of constraints on the problem. some examples of the constraints frequently encountered in industrial search problems are: 
  items of type a can not follow items of type b or e in a bin 
  two different items of type c within a bin should be separated by some number of items with an aggregate size of at least s 
  the aggregate size of items of type d in a bin cannot exceed s 
  the number of items of the same type in a bin is limited to n 
　note that the first constraint is a local constraint between two adjacent items  while the rest are non-local constraints. 
1 	an approximate algorithm for cbpp 
in this section  we present the underlying data structure  the cbpp graph  a heuristic that aids in solving the cbpp  and the detailed description of the 1 edgelabeling algorithm  an approximate algorithm for cbpp. 
1 	c b p p g r a p h s 
the problem space of a cbpp can be represented by a directed graph  g v  e   where v is a set of vertices and e is a set of directed edges. initially  each item in in 
cbpp is mapped to a vertex vn in v. so  the number of items in cbpp is the same as |v|. a directed edge e vi vj  in e incidents from vi  tail  to vj  head . each directed edge e is assigned a non-negative cost c e  and represents a valid path from the tail vertex to the head vertex with an associated cost. by valid  we mean that the sum of the sizes of the items associated with the vertices does not exceed the bin capacity  and that the sequencing from the tail vertex to the head vertex does not violate any constraints defined between the two. in general  there may be a number of constraints defined between two vertices  as was seen from the examples of the constraints in the previous section. 
　a cbpp graph is usually incomplete  and  in many cases  it is quite sparse because of many constraints among the vertices. this is the difference between the problems we are dealing with and the optimization problems such as the ordinary bpp  which is fully connected with uniform cost  and the symmetrical traveling salesman problem  lawler et a/.  1   where no constraints are imposed on edges.1 
　as search  labeling  proceeds  |v| of a cbpp graph is decreased as a result of concatenation of two vertices  creating a new vertex  ordered group   as shown in figure 1. 
　note that a vertex represents either an original atomic vertex  an item  or an ordered group which is a sequence of items. an initial cbpp graph represents a solution where the number of bins is equal to the number of vertices. obviously  it is not a good solution. two adjacent vertices connected by an edge labeled as 1 are concatenated. 
　an ordered group for each bin in a cbpp is conceptually equivalent to a sequence of vertices concatenated with edges  where the total size of an ordered group should not exceed the bin capacity. therefore  the cbpp can be regarded as a search that labels edges so as to minimize the number of ordered groups with the minimum aggregate cost. the problem is to find a labeling of edges. 
1
　　note that the cbpp graph is different from the constraint graph  or network  usually referred to in ai. in the constraint graph  each node represents a variable having its own domain values  and each edge bears a set of constraints between the two values of the two variables. 
	lee & trumbo 	1 


figure 1: concatenation of two vertices  and creation of an ordered group. in  a   it is assumed that edge e1 connecting two vertices vi and vj is selected and labeled as 1. a new vertex  ordered group  vk in  b  is created by concatenating vi and vj. as a result  the existing edges  e1 e1 e1  e1 and e1 are labeled as 1. the size of ordered group vk is the sum of those of vi and vj; and the cost of vk is the sum of costs of vi  vj and e1. 
1 	h e u r i s t i c s 
finding an optimal set of ordered groups is computationally intractable. to cope with this problem and to produce near-optimal solutions search heuristics are used. using heuristic information often has a significant impact on the performance of search algorithms. in the cbpp solution  a heuristic based on topological structure is used in selecting edges to label. in addition  a beam search and constraint propagation techniques are exploited to prune the search space. 
　an abstraction of a search problem is a search tree. the nodes of the tree represent the states  and the links of the tree represent the operators. a state represents a subset of the whole search space. in cbpp  each labeling of an edge in the graph corresponds to an execution of an operator  which in turn changes one state to another. 
　the search starts from the root node with an initial cbpp graph. then  from the current cbpp graph  we collect all edges and rank them according to predetermined heuristics. during the search  an ordered groups are dynamically created by concatenating two vertices with an edge in the current cbpp graph. optimality of the solution is dependent on which edges are selected and labeled during the search. 
　the heuristic used for selecting which edges to label is based on the topological structure of the cbpp graph. the urgency of edge e vi  vj  is defined as the smaller of out-degree vi  and in-degree v; . for example  in figure 
1 	search 
1 a   the urgency of e1 vi  vj  is 1  which is the smaller of 1  out-degree of vi  and 1  hvdegree of vj . the urgency represents the possibility that either vertex vi or vj loses the chance to grow  resulting in a deadlock . intuitively  the fewer e's sibling edges exist  the higher its chance to be selected would be. this topological heuristic helps the algorithm to find the minimum number of ordered groups  where a single item is regarded as one ordered group. 
　in addition to the urgency  we may use other heuristics on both domain-dependent and domain-independent information. 
1 	1 e d g e - l a b e l i n g a l g o r i t h m 
initially all the edges in the cbpp graph are unlabeled  but they are eventually labeled as either 1 or 1. the labeling algorithm derives a set of ordered groups by incrementally labeling a selected edge as 1  discarded  or 1  selected  until all edges are completely labeled. when an edge is labeled as 1  we have a new ordered group concatenating two vertices connected by the edge; and  the two existing ordered groups being concatenated are discarded. 
　from the viewpoint of the search space  labeling an edge e as either 1 or 1 partitions the solution search space into two: one including solutions with e labeled as 1 and the other including solutions with e labeled as 1. the labeling algorithm incrementally modifies an initial cbpp graph to one with more number of edges labeled. the algorithm is basically a depth-first search. the detailed procedure of the 1 edge-labeling search follows. in this description  g n  v e  denotes a cbpp graph associated with search node n. 
1 edge-labeling a l g o r i t h m 
1. initialize solutions and open-nodes to the empty set and create the root node as node n of the search tree. 
1. sort all unlabeled edges e e b at gn v  e  in terms of edge selection heuristics. 
1. push the best beam-width number of edges onto best edges n . 
1. pop 	the the first edge  e v i  vj   from best-edgesfn   and label it as i. if best edges n  is still non-empty  then push n onto open-nodes. 
1. create a new search node s  a child node of n  and generate the new cbpp graph gs v  e  from gn v e . label e vi vj  in gs v  b  as 1. 
for the new child node 1: 
1a. concatenate the two items  or ordered groups  vi and vj-  creating a new ordered group. remove vi and vj from 1 and add the new ordered group  vi  vj  to 1. 
1b. each of the edges in the current cbpp graph gs v  e  is evaluated and those which no longer satisfy all relevant constraints are labeled as 1 and removed1. 
1c. if any edges in gs v e  are unlabeled  set n = s and go to step 1  otherwise continue with step 1. 
1. induce the solution s from s and evaluate. if s can be considered a member of the set of best solutions discovered so far  store s in solutions. 
1. if open.nodes is not empty and we need a better solution or additional solutions  and if we have not exceeded the maximum number of search iterations  pop the top node n from open.nodes and go to step 1. otherwise exit with solutions. 
notes: 
step 1  initialization : generated solutions  sets of ordered groups  will be kept in solutions. intermediate search tree nodes that can be further expanded for alternative search branches will be pushed onto the stack open-nodes. 
step 1a  creation of a new search node : as an example  consider figure 1 a   where edge is being labeled as l selected . then  as can be seen in  b   vertices vi and vj are concatenated and a new vertex  ordered group  vk is created. 
as a result of this step  the number of ordered groups in the new search node is always one less than that of its parent search node. in general  if we start the search with n ordered groups then it is reduced to n - k at the k-th search level with the level of the root node defined as 1. 
step 1b  labeling inconsistent edges as 1 : here  constraint propagation is effectively used in pruning the search space  and finding the termination of the search tree. for example  again consider figure 1 b . as a consequence of labeling of e1 as 1  five incident edges  and es are labeled as 1  discarded . in addition  some of edges  not yet labeled may be labeled 
as 1 as a result of constraint checking in this step. 
   note that the heuristics employed in the labeling search focus on the selection of an edge to label  instead of on the selection of a node to expand. since the goal state is neither unique nor explicitly given it is practically impossible to compute a heuristic evaluation function that estimates of the cost of reaching the goal state from the current search node  nilsson  1 . 
     1 in practice  only those edges topologically connected to the committed edge  as well as those edges selected using the topological heuristic  are evaluated. 
1 	more on 1 edge-labeling 
the worst case space and time complexity of the 1 edge-labeling search are 1 n  and  respectively  where b is the branching factor  the beam width in our case  and n is the number of items. notice that the worst case depth of the search tree is n - 1. as described in the algorithm  the algorithm only needs to store a stack of the nodes on the search path from the root to the current search node; hence  the memory requirement is only linear in the number of items  or the search depth . in contrast  in situation where the branching factor is large  the time complexity of the search algorithm exponentially grows with the search level. therefore  limiting the branching factor  beam width  is crucial to the performance. 
　one possible drawback of using beam search is that we might miss a path in a node expansion which really is the best choice. as a result  a naive adoption of the beam search may yield bad solutions  winston  1 . however  we mitigate this drawback of the beam search in the proposed edge-labeling algorithm. using edge-labeling  we can construct an identical ordered groups  sequence  in many different ways since the edges included in the ordered group are consistent and independent one another. for example  there are 1! = 1 different ways to construct a particular ordered group with 1 vertices  1 edges . in order words  in the situation where even if the truly second best edge e1  instead of the truly best edge e1  is selected for some reason at the current search level  it is highly likely that e1 is selected on the next level. 
　in addition to the apparent savings of computational resources  exploiting beam search enables quick navigating in the solution space  which is essential to find a near-optimal solution within a limited amount of time. in the traditional algorithms for instantiating variables  it is not easy to quickly move around the search space since they basically rely on backtracking  knuth  1 . although it is possible to use the beam search in this kind of search  it is not possible to recover from missing variable assignments once performed. in the edgelabeling algorithm  however  it is possible without experiencing such a problem. by limiting the beam width  we can quickly move around the search space. as an extreme case  if we set the beam width to one  each branch from the root node results in a single solution and every solution is likely to be different from the rest. 
1 	experiments 
the 1 edge-labeling algorithm for cbpp was implemented in the c + + programming language under aix on an rs/1h workstation with 1mb of memory. to test the algorithm  we generated several problems by varying the number of items and the sparsity of the initial cbpp graph. the sparsity is defined as the ratio of the actual number of edges in the graph with finite cost to the number of edges in a complete directed graph with the same number of vertices. the size of each item was 
	lee & trumbo 	1 

set to a positive random value less than the bin size. the cost incurred when one item is placed adjacent to another was determined by a square matrix of positive random values. 
　for the experiments we used the urgency measure as the primary rule in selecting an edge from among the unlabeled edges. if multiple edges were chosen based on this measure  then the cost of the edges was used as a tie-breaker. 
   the goal is to find the minimum number of ordered groups with the minimum aggregate cost. however  as previously stated  finding a near-optimal solution in a reasonable amount of time is often more important than finding a truly optimal solution. accordingly  we stopped each search after ten minutes elapsed time and examined the set of solutions that had been generated. 
   to provide an insight on the 1 edge-labeling algorithm  we also generated results using the best-fit decreasing  bfd  algorithm  which is one of the best approximate algorithms for bpp  martello and toth  1 . in the bfd  all the items are sorted in a decreasing order of size  and an item with lower index is considered first. a bin which can accommodate the item with minimum residual capacity is used for packing. although the bfd algorithm is for bpps we believe that the results of it can be a reference when evaluating the results of the 1 edge-labeling algorithm. the results are summarized in tables 1. in those tables  the second column   bins  cbpp   denotes the number of bins  and the third column   cost  cbpp   denotes the aggregate cost of all ordered groups in a solution. note that a solution with a bigger aggregate cost is better than another solution with a smaller aggregate cost  if the number of bins of the former is less than that of the latter. 
   the time for the bfd heuristic was negligible and is not shown. since the bfd heuristic only attempts to find a feasible solution and does not minimize the aggregate cost  the cost for the bfd solution is not shown. 
　we note that the 1 edge-labeling algorithm found good solutions to the problem. with respect to the number of bins used  the 1 edge-labeling algorithm did well except when the sparsity was unity while the number of items was large. the reason that bfd's result is better than that of the 1 edge-labeling algorithm in the case the sparsity is close to unity or the number of items is large is that the run time is limited to ten minutes  so  only a small portion of the search space is investigated . on average  the 1 edge-labeling algorithm yielded solutions which used 1% fewer bins than the bfd heuristic. 
   figure 1 shows the progression of the 1 edge-labeling algorithm for a graph with 1 items and sparsity 1. the time for the 1 edge-labeling algorithm is the time when the indicated solution was generated. the 1 edge-labeling algorithm found  after 1 seconds  a solution that used 1 bins which is already better than the 1 bin solution found using the bfd heuristic. between 1 and 1 seconds  the 1 edge-labeling algorithm found a lower cost solution using 1 bins and then a solution with 1 bins. between 1 and 1 seconds  the algo-
1 	search 
sparsity bins  
cbpp cost  
cbpp bins  
bfd 1 
1 
1 
1 1 
1 
1 
1 1 
1 1 1 
1 
1 
1 table 1: results for 1-item cbpp 
sparsity bins  
cbpp cost  
cbpp bins  
bfd 1 1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 1 
1 
1 
1 
1 
1 table 1: results for 1-item cbpp 
i sparsity bins  
cbpp cost  
cbpp bins  
bfd 1 
1 
1 
1 
1 
1 
1 1 
1 
1 1 1 1 
1 
1 
1 
1 
1 
1 1 
1 1 
1 
1 table 1: results for 1-item cbpp 
sparsity bins  
cbpp c1t  
cbpp bins  
bfd 1 1 
1 
1 
1 1 
1 
1 
1 
1 1 
1 
1 
1 
1 1 
1 
1 
1 
1 table 1: results for 1-item cbpp 

table 1: results for 1-item cbpp 


figure 1: progression of the 1 edge-labeling algorithm. it is an anytime algorithm and it is shown that bin usage and aggregate cost are further optimized as search proceeds. 
rithm reduced the path cost at 1 bins from 1 to 1. this anytime  dean and boddy  1  behavior of the 
1 edge-labeling algorithm is very useful in industrial problem solving. 
1 	conclusion 
we have defined a class of problems called constrained bin-packing problems which characterizes many frequently encountered industrial scheduling problems. because no known existing techniques can effectively solve this class of problems  we have developed a cbpp algorithm which is based on an approximate 1 edgelabeling. 
　we believe that this technique meets most of the industrial requirements in term of time  space and quality. for difficult search problems  many near-optimal solutions can be found where previously even a single solution was considered difficult  if not impossible  to obtain  and most importantly  the algorithm can find these nearoptimal solutions in a reasonable amount of time. 
　however  as with any technique  there is a limit to the scope of its application. we consider the cbpp solution technique inappropriate for unconstrained problems such as the simple traveling salesman problem for which there exist other techniques that yield better solutions in less time. 
the approximate 1 edge-labeling algorithm for 
cbpp described in this paper has been successfully applied to industrial grouping and scheduling problems. 
acknowledgments 
we would like to thank jayant kalagnanam and richard goodwin for their valuable comments on the draft of this paper. 
