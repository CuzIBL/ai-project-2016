compact propositional encodings of first-order theories
deepak ramachandran and eyal amir computer science department
university of illinois at urbana-champaign
urbana  il 1  usa
{dramacha eyal} cs.uiuc.edu
¡¡
1 introduction
a propositionalization of a theory in first-order logic  fol  is a set of propositional sentences that is satisfiable iff the original theory is satisfiable. we cannot translate arbitrary fol theories to propositional logic because fol is only semi-decidable. however  when possible  it is often advantageous to do so because we can use optimized  efficient sat solvers  e.g.  moskewicz et al.  1   to solve the resulting sat problem. propositionalization is used frequently in planning  kautz and selman  1   relational data mining  krogel et al.  1   and formal verification  kropf  1 .
¡¡current propositional encodings  naive prop.   based on  gilmore  1   result in prohibitively large propositional encodings even for moderate applications and assume a known finite domain for the theory. however despite their drawbacks  they are the most efficient solutions known so far. examples of naive prop. are given in table 1.
¡¡we briefly describe a novel  systematic approach to translating two important subsets of fol into propositional logic. our approach leverages structure in the fol formulation to provide significantly more compact propositional encodings without requiring a finite fixed domain.
¡¡specifically  we present algorithms for translating two important decidable subsets of fol:  1  function-free monadic  and  1  the bernays-schoenfinkel-ramsey¡§ class  see  borger¡§ et al.  1   in which all existential quantifiers must occur before all universal ones  all arity is allowed for predicates  with equality  but no functions . these subsets cover important problems in ai and computer science  such as expressive planning  data mining  constraint satisfaction  propositional modal logic  and quantified boolean formulae  qbf .
¡¡our algorithms generate propositional encodings of these subsets of fol as follows. they start by grouping axiom sets into a tree of partitions following the approach of  amir and mcilraith  1 . then  they translate each partition separately using only a restricted set of constants that depend on
fol theorynaive prop.  p a ¡Äq b    pa¡Äqb  xp x    y q y  pa¡Äpb¡Äpc     qa¡Ä qb¡Ä qc   z r z c ¡Ä q a   r a c ¡Ä q a  ¡Å r c c ¡Ä q a  table 1: naive propositionalization


p1¡Åp1 ...
 e p1 p1  ...
p1   e p1  a  partitioning {ai}i¡Ün  b  part-prop-monadic   {ai}i¡Ün  figure 1: the partitioning of the theory a.
the structure of the partitioning. finally  they combine the translated parts into a single propositional theory.
¡¡in the following  we briefly describe our methods with examples  and then present experimental results from applying these methods to an encoding of the pigeonhole problem.
1 partitioned prop. for the monadic class
figure 1 shows an example of the partitioned prop. of a theory in the monadic class  all predicates have arity 1 . the theory a on the left is partitioned into a1 a1 ...an. there is an edge between every two partitions that share symbols. the partitioning is done in such a way that message-passing  amir and mcilraith  1   a reasoning procedure that involves sending messages between partitions when a formula is in the intersection language  is sound and complete.
¡¡figure 1 b  shows the propositional encoding of the partitioned theory. there are two kinds of propositonal symbols  those of the form pa  which stand for p a   and e p q...  which stand for  x p x ¡Äq x ... . it can be shown that every monadic fol formula can be converted into an equivalent propositional sentence using only these symbols. to ensure that the propositional symbols have the right semantics we need to add some consistency axioms to the propositionalization. for eg. p1   e p1  ensures that if there is some constant h1 for which p1 h1  holds  then  xp1 x  holds as well and e p1 p1    e p1 ¡Äe p1  ensures that if ¡Ô  x p1 x ¡Äp1 x   is true  then  xp1 x  and  xp1 x  is true as well.
the union of these partitioned propositionalizations can be

figure 1: the solid boundaries represents the constants and the broken ones represent the predicates in each separate propositionalization.
shown to be equisatisfiable with a. the proof relies on the completeness of the message passing procedure. briefly  it can be shown that if the intersection graph of the partitioning is a tree  for every formula ¦Á s.t. a   ¦Á  there is a proof s.t. each step uses either axioms that are completely within the same partition ai or messages transmitted to ai from other partitions. the proof of this relies on the following theorem:
theorem 1  craig's interpolation theorem . if ¦Á and ¦Â are first order formula s.t. ¦Á   ¦Â  then there is a formula ¦Ã ¡Ê l l ¦Á  ¡É l ¦Â   such that ¦Á   ¦Ã and ¦Ã   ¦Â.
1 partitioned prop. for the ramsey class
it is known that the naive partitioning is correct for the ramsey class without any additional semantic assumptions  borger¡§ et al.  1 . the number of propositional symbols used is |p||c|k where k is the maximum arity of any predicate. this can be significantly reduced by partitioning. but it is not enough to propositionalize each partition individually. for example  consider the case where p c  and  x p x    q a   are in different partitions. because we propositionalize these separately  p c    q a  will not be in the propositional theory and thus q a  cannot be deduced.
¡¡however  it can be shown that there exists an ordering   of the vertices in the intersection graph of the partitioning such that a correct propositionalization results if we propositionalize the predicates of each partition ai w.r.t. every constant that occurs in some partition aj  aj   ai. for example  in a prop. of the theory in figure 1 a   p1 will be in the language  but p1 will not. there are n such orderings  one for each choice of a partition as the root of the tree. in the case of a binary tree with n vertices  figure 1  each prop. will have  variables. thus the problem of satisfiability of a reduces to n independent sat instance of size
. the running time will be compared to the naive prop. which takes o 1|p||c|k .
1 experimental results
in figure 1 we present the results of some experiments with our algorithms on two different problems. the first is a firstorder encoding of the pigeonhole problem that belongs to the ramsey class. the upper two graphs compare our ramsey prop. with the naive prop. for this problem  on the basis of the number of variables created and the running time for the sat solver. our algorithm does substantially better  enabling the solution of problems that are outside the scope of the naive encoding. the size of the encoding for the partitioned ramsey prop. grows as o plogp  versus o p1  for the naive prop  where p is the number of pigeons. the running time for our sat solver shows orders of magnitude speedup.
¡¡the bottom two graphs present a similar comparison for a partitioned pigeonhole problem  i.e. where each pigeon can be assigned only to a fixed subset of the holes  which is in both the ramsey and monadic classes. we compare both the monadic and ramsey partitioned prop. with naive prop. for the naive prop.  the size of the encoding grows as o p1  versus o p  for the partitioned monadic prop.
¡¡the experiments were done on a 1 ghz linux machine with zchaff  moskewicz et al.  1  as the sat solver.

figure 1: experimental results
