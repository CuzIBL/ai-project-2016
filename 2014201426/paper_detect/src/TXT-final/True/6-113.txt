 
voting is a general method for preference aggregation in multiagent settings  but seminal results have shown that all  nondictatorial  voting protocols are manipulable. one could try to avoid manipulation by using voting protocols where determining a beneficial manipulation is hard computationally. a number of recent papers study the complexity of manipulating existing protocols. this paper is the first work to take the next step of designing new protocols that are especially hard to manipulate. rather than designing these new protocols from scratch  we instead show how to tweak existing protocols to make manipulation hard  while leaving much of the original nature of the protocol intact. the tweak studied consists of adding one elimination preround to the election. surprisingly  this extremely simple and universal tweak makes typical protocols hard to manipulate! the protocols become np-hard  #p-hard  or pspace-hard to manipulate  depending on whether the schedule of the preround is determined before the votes are collected  after the votes are collected  or the scheduling and the vote collecting are interleaved  respectively. we prove general sufficient conditions on the protocols for this tweak to introduce the hardness  and show that the most common voting protocols satisfy those conditions. these are the first results in voting settings where manipulation is in a higher complexity class than np  presuming pspace  np . 
1 introduction 
often  a group of agents has to make a common decision  yet they have different preferences about which decision is made. thus  it is of central importance to be able to aggregate the preferences  that is  to make a socially desirable decision as to which candidate is chosen from a set of candidates. such candidates could be potential presidents  joint plans  allocations 
    the material in this paper is based upon work supported by the national science foundation under career award iri-1  grant iis-1  itr iis-1  and ttriis-1. 
of goods or resources  etc. voting is the most general preference aggregation scheme  and has been used in several multiagent decision making problems in ai  such as collaborative filtering  e.g.  pennock et ai  1   and planning among automated agents  e.g. lephrati and rosenschein  1; 1 . 
¡¡a key problem voting mechanisms are confronted with is that of manipulation by the voters. an agent is said to vole strategically when it does not rank the alternatives according to its true preferences  but differently so as to manipulate the outcome to be more favorable to the agent. for example  if an agent prefers nader to gore to bush  but knows that nader has too few other supporters to win  while gore and bush are close to each other  the agent would be better off by declaring gore as its top candidate. manipulation is an undesirable phenomenon. for one  because social choice schemes are tailored to aggregate preferences in a socially desirable way  and if the agents reveal their preferences insincerely  a socially undesirable candidate may be chosen. 
¡¡a seminal negative result  the gibbard-satterthwaite theorem  shows that if there are three or more candidates  then in any nondictatorial voting scheme  there are preferences under which an agent is better off voting strategically  gibbard  1; satterthwaite  1 .  a voting scheme is called dictatorial if one of the voters dictates the social choice no matter how the others vote . in automated group decision making where the voters are software agents  the manipulability of protocols is even more problematic  for at least two reasons. first  the algorithms they use to decide how to vote must be coded explicitly. given that the voting algorithm needs to be designed only once  by an expert   and can be copied to large numbers of agents  even ones representing unsophisticated human voters   it is likely that rational strategic voting will increasingly become an issue  unmuddied by irrationality  emotions  etc. second  software agents have more computational power and are more likely to find effective manipulations. 
¡¡we take the following tack toward avoiding manipulation: ensuring that finding a beneficial manipulation is so hard computationally that it is unlikely that voters will be able to manipulate. so  unlike in most of computer science  here high computational complexity is a desirable property. the harder it is to manipulate  the better. 
¡¡prior work on the complexity of manipulating elections has focused on existing protocols ibartholdi et a/.  1; bartholdi and orlin  1; conitzer and sandholm  1a . 
1 

this paper is the first to take the next step of designing new protocols that are especially hard to manipulate. rather than designing these protocols from scratch  we show how to tweak existing protocols to make manipulation computationally much more difficult  while leaving much of the original nature of the protocol intact  for the following reasons: 
 results on the computational complexity induced by a tweak typically apply to a large family of protocols. 
 many of the original protocol's nice theoretical properties are preserved by the tweak. 
 in practice  it will be much easier to replace a currently used protocol with a tweaked version of it  than with an altogether new protocol. 
¡¡the type of tweak we study in this paper is the following. all the candidates are paired in a preround; of each pair of candidates  only the winner of their pairwise election survives.  the winner of the pairwise election between two candidates is the candidate that is ranked above the other more often in the votes.  after the preround  the original protocol is executed on the remaining candidates. the schedule of the preround  i.e.  who faces who  can be determined before the votes are collected; after the votes are collected; or while the votes are collected  the processes are interleaved . we study these three cases in sections 1  1  and 1  respectively. l 
1 definitions 
1 	elections and voting protocols 
an election consists of a set of candidates c  a set of voters 
v  and a protocol for deciding on a winner w € c given all the voters' votes.  here  a vote is a total ordering of the candidates.  a deterministic protocol is a function from the set of all combinations of votes to c.  all our results hold even for unweighted voters  so in this paper this function will always treat the voters symmetrically.  a randomized protocol is a function from the set of all combinations of votes to probability distributions over c. an interleaved protocol is a procedure for alternating between collecting parts of the voters' votes  e.g. whether they prefer candidate a to candidate /;  and drawing and publishing random variables  such as parts of the schedule for an election   together with a function from the set of all combinations of votes and random variables to c.  collecting only parts of the voters' preferences is also known as elicitation.  
¡¡¡¡the high complexity results obtained in this paper are dependent on the number of candidates growing. this places them in line with all the early results in this area  bartholdi et al  1; bartholdi and orlin  1   but in contrast with more recent results  conitzcr and sandholm  1a  that show high complexity of manipulation with a constant number of candidates for some protocols. having high complexity of manipulation occur with a constant number of candidates already is certainly preferable to having it occur only with a growing number. on the other hand  unlike in that paper  the results here hold even when the voters all have equal weight  and even when manipulation is attempted by an individual rather than a coalition  making the results in this paper stronger in that sense  so there is a tradeoff. 
¡¡the standard definitions of most voting protocols allow for the possibility of ties between candidates  in which case a tiebreaking rule is required to fully specify the protocol. all our results hold for any tie-breaking rule  so we do not need to specify such rules here. 
¡¡in this paper we apply our technique to the most common voting protocols  in these definitions  whenever points are defined  the candidate with the most points wins : 
 plurality. a candidate receives 1 point for every voter that ranks it first.  thus  the voters effectively only vote for one candidate.  
 borda. for each voter  a candidate receives m - 1 points if it is the voter's top choice  m - 1 if it is the second choice ...  1 if it is the last. 
 maximin. a candidate's score in a pairwise election is the number of voters that prefer it over the opponent. a candidate's number of points is the lowest score it gets in any pairwise election. 
 single transferable vote  stv . the winner determination process proceeds in rounds. in each round  a candidate's score is the number of voters that rank it highest among the remaining candidates  and the candidate with the lowest score drops out. the last remaining candidate wins.  a vote ' transfers  from its top remaining candidate to the next highest remaining candidate when the former drops out.  
1 preround 
the tweaks we study in this paper all involve the addition of a preround. we will now define how this works. 
definition 1 given a protocol p  the new protocol obtained by adding a preround to it proceeds as follows : 
1. the candidates are paired. if there is an odd number of candidates  one candidate gets a bye. 
1. in each pairing of two candidates  the candidate losing the pairwise election between the two is eliminated. a candidate with a bye is never eliminated. 
1. on the remaining candidates  p is executed to produce a winner. for this  the implicit votes over the remaining candidates are used.  for example  if a voter voted a y b c d c  and b and c were eliminated  the voter's implicit vote is ad e.  

 the pairing of the candidates is also known as the schedule for the preround. if the schedule is decided and published before the votes are collected  we have a deterministic preround {dp re   and the resulting protocol is called dp re + p. if the schedule is drawn completely randomly after the votes are collected  we have a randomized preround  rpre   and the resulting protocol is called rpre + p. finally  if the votes are elicited incrementally  and this elicitation process is interleaved with the scheduling-and-publishing process  which is again done randomly   as described in detail in section 1  we have an interleaved preround  ipre   and the resulting protocol is called i pre + p. 
1 manipulation 
we now define the computational problem of manipulation. 
because all our hardness results hold even when the voters are unweighted  only a single voter is trying to manipulate  and all the other voters' votes are known to the manipulator  we will only define this simple setting here. any hardness results in this simple setting immediately imply hardness in all more general settings. 
definition 1  constructive-manipulation  
we are given a protocol p  a candidate set c  a preferred candidate p  and a set of votes s corresponding to all the other voters* votes. the manipulator has yet to decide on its vote  and wants to make p win. then the constructive manipulation question is: 
  for deterministic protocols  can the manipulator cast its vote to make p win under  
  for randomized protocols  can the manipulator cast its vote to make the probability of p winning under p at least some given  
  for interleaved protocols  given the initial random choices  if any  by the protocol  is there a contingency 
plan  based on the random decisions the protocol takes between eliciting parts of the votes  for the manipulator to answer the queries to make the probability of p winning under p at least some given  
1 complexity of manipulating untweaked protocols 
in this section  we briefly review the complexity of manipulating voting protocols  as a benchmark for our results. constructive-manipulation is in p for the plurality  borda  and maximin voting protocols ibartholdi et al  1 . the only voting protocol for which constructive-manipulation is known to be np-
hard is the stv protocol  bartholdi and orlin  1  .1 
1 np-hardness when scheduling precedes voting 
in this section  we examine the complexity induced by the preround when the voters know the schedule before they vote. 
1 a sufficient condition for np-hardness 
we present a sufficient condition under which adding a preround with a preannounced schedule makes manipulation np-hard. the condition can be thought of as an np-hardness reduction template. if it is possible to reduce an arbitrary sat instance to a set of votes satisfying certain properties under the given voting protocol  that protocol-with a preround- is np-hard to manipulate. 
theorem 1 given a voting protocol p  suppose that it is possible  for any boolean formula in conjunctive normal form 
1
construcnve-mantpulation is np-hard also for the 
second order copeland protocol  bartholdi et a/.  1   but the hardness is driven solely by the tie-breaking rule. 
 i.e.  a sat instance   to construct in polynomial time a set of votes over a candidate set containing at least where  l is the set of literals  
               where v is the set of variables used in   with the following properties: 
 property la  if we remove  for each  one of and p would win an election under protocol p against the remaining candidates if and only if for every clause  where k is the set of clauses in   there is some i l such that ci has not been removed  and i occurs in k. this should hold even if a single arbitrary vote is added. 
  property lb  for any  are tied in their pairwise election after these votes. 
then constructive-manipulation in dp re + p is 
np-hard  and np-complete if p is deterministic and can be executed in polynomial time . 
proof: consider the following election under dpre + p. 
let the candidate set be the set of all candidates occurring in the votes constructed from   the  original candidates    plus one dummy candidate for each of the original candidates besides those in c . to each of the constructed votes  add all the dummy candidates at the bottom; let the resulting set of votes be the set of the nonmanipulators' votes. a single manipulator's vote is yet to be added. let the schedule for the preround be as follows: for each and face each other in the preround; and every other original candidate faces  and  because of the dummy candidates' position in the votes  defeats  a dummy candidate. thus  the set of candidates that make it through the preround consists of  for each    one of a n d a n d all the other original candi-

dates. the manipulator's vote will decide the winner of every match-up  because by property lb  all these pair-
wise elections are currently tied. moreover  it is easy to see that the manipulator can decide the winner of each of these match-ups independently of how it decides the winners of the other match-ups. thus  we can think of this as the manipulator giving the variables truth-values: v is set to true if survives  and to false if  survives. by property la it then follows that  wins if and only if the manipulator's assignment satisfies all the clauses  i.e. is a solution to the sat instance. hence there is a successful constructive manipulation if and only if there is a solution to the sat instance  and it follows that constructive-manipulation in 
dpre 1 p is np-hard.  it is also in np if p is deterministic and can be executed in polynomial time  because in this case  given a vote for the manipulator  it can be verified in polynomial time whether this vote makes p win .  
1 	examples 
we now show how to apply theorem 1 to the well-known protocols we discussed  thus showing that each of these protocols-with a preround-is np-hard to manipulate. 
theorem 1 there exists a reduction that satisfies properties la and lb of theorem 1 under the plurality protocol. 
1 
when it does not matter for our proofs whether a given vote 
is 	we write  
proof: given the formula   let the candidate set be the minithally required candidates  ' plus a set of candidates corresponding to the set of clauses k of   ck =  
   . then  let the set of votes be as follows: 	votes ranking the candidates 	for each  
votes ranking the candidates  and for each votes ranking the candidates 
               additionally  we require that these votes are such that after counting them  for each and are tied in their pairwise election  so that property lb is satisfied.  this is possible because the total number of votes is even  and the majority of the votes do not yet have any restrictions on the order of the cl.  we now show property la is satisfied. we first observe that regardless of which of the candidates corresponding to literals are removed  p will get votes. now  if for some  all the candidates ci with are removed  then ck will get at least votes and p will not win. on the other hand  if for 
each at least one candidate ct w i t h r e m a i n s    then each of the c* will get precisely votes. because each remaining cj can get at most votes as well  p will win. in both cases there is a  margin  of at least 1  so a single additional vote will not change this. thus  property la is satisfied.  
theorem 1 there exists a reduction that satisfies properties la and lb of theorem 1 under the borda protocol 
proof: given the formula   let the candidate set be the minimally required candidates plus a set of candidates corresponding to the set of clauses k of  ck = which we order in some arbitrary way 
let m be the total number of can-
didates this defines. then  let the set of votes be as fol-
 here  the slight abuse of notation 
curs in the clause corresponding to c ;  am votes ranking the 

additionally  we require that these votes are such that after counting them  for each  are tied in their pairwise election  so that property lb is satisfied.  this is possible because the total number of votes is even  and the majority of the votes do not yet have any restrictions on the order of the q.  we now show property la is satisfied. it is easy to see that none of the q can win  regardless of which of them are removed. thus  we only need to consider the ci and p. the last votes will have no net effect on the relative scores of these candidates  so we need not consider these here. after the first m votes  any ck for which all the ci with have been removed will be tied with p  and any other c  will be at least am points behind p. finally  from the last remaining two votes  any will gain points on p. it follows that p wins if 
and only if for every clause there is some with such that c  has not been removed. in both cases there is a  margin  of at least points  so a single additional vote will not change this. thus  property la is satisfied. ¡ö 
theorem 1 there exists a reduction that satisfies properties la and lb of theorem 1 under the maximin protocol 

are such that after counting them  for each v e v  c+v and c-v are tied in their pairwise election  so that property lb is satisfied.  this is possible because the total number of votes is even  and the majority of the votes do not yet have any restrictions on the order of the c/.  we now show property la is satisfied. regardless of which of the candidates corre-
sponding to literals are removed  p's worst score in a pairwise election is against any of the c/c  namely 1 + 1. any c  for which all the cl with / k have been removed will get its worst pairwise election score against any of the c l   namely 1 + 1. finally  any other ck will get its worst pairwise election score against one of the q with / k  namely  1 it follows that p wins if and only if for every clause k e k there is some / k such that cl has not been removed. in both cases there is a  margin  of at least 1  so a single additional vote will not change this. thus  property la is satisfied. ¡ö 
theorem 1 there exists a reduction that satisfies properties la and lb of theorem 1 under the stv protocol 
proof: we omit the proof due to limited space. 	¡ö 
 
theorem 1 in any of dpre + plurality  dp re + 
borda  dpre + maximin  and dpre + stv1   constructive-manipulation is np-complete. 
proof: np-hardness is immediate from the previous theorems. the problem is in np because these protocols can be 
1
¡¡¡¡the np-completeness of manipulating dpre + stv is  in itself  not that interesting  because stv is already np-hard to manipulate without the preround as we discussed. nevertheless  our method highlights a different aspect of the np-hardness of manipulating dpre + stv. we build on this reduction later to prove pspace-hardness of manipulating stv with a preround when the scheduling of the preround is interleaved with the vote clicitation. executed in polynomial time. 	
¡¡in the next sections  we will raise the bar and bring the problem of manipulating elections to higher complexity classes by abandoning the assumption that the schedule for the preround should be known in advance. 
1 p-hardness when voting precedes scheduling 
in this section  we will examine the complexity induced by the preround when the schedule is drawn completely  uniformly  randomly after all the votes have been collected. 
1 a sufficient condition for p-hardness 
we present a sufficient condition for a voting protocol to become #p-hard1 to manipulate in this setting. again  this condition can be thought of as a reduction template. if it is possible to reduce an arbitrary permanent instance to a set of votes satisfying certain properties under the given voting protocol  that protocol is p-hard to manipulate when a randomized preround is added to it.  in the permanent problem  we are given a bipartite graph b with the same number of vertices k in both parts  and are asked how many matchings there are. this problem is p-complete  valiant  1 .  
theorem 1 given a voting protocol p  suppose that it is possible  for any bipartite graph b with the same number of vertices k in both parts  labeled 1 to k in one part  k + 1 to 1k in the other   to construct in polynomial time a set of votes over the candidate set {c1 ...  c1k  p}  where c1 corresponds to vertex i in b  with the following properties: 
  property 1a  if we remove k of the ci  p would win an election under protocol p against the remaining c1 if and 
only if the removed c1 are exactly all the ct with k +1k i  1k; 
  property 1b  p loses its pairwise election against all c1 
	with 	k+1  1k; 
  property 1c  for any l i f e and k: +1 j 1k  c1 

defeats c1 in their pairwise election if and only if in b  
 there is an edge between vertices i and j.   property 1d  all the previous properties still hold with any additional single vote. 
then constructive-manipulation in rpre + p is 
#p-hard. 
proof: given the set of votes constructed on the basis of an arbitrary b  let us compute the probability that p wins under the protocol rpre + p with only these votes. in the preround  there are k matches and one bye. by property 1a  p will win the election if and only if the k candidates eliminated in this preround are precisely all the c* with k + 1 i 1k. by property 1b  p could not win a preround match against any of these  so p will win the election if and only if it gets the bye  and each of the c1 with k+1  1k faces one of the cx with 1  k that defeats it in the preround. then  by property 
   1  p is the class of problems where the task is to count the number of solutions to a problem in np. 
1c  it follows that p wins if and only if the preround pairing corresponds to a matching in b. thus the probability of p winning is   where ms is the number of matchings in b and e 1fc  1fc + 1  is the number of different ways to pair 1k of the 1k -f 1 candidates in the preround  which is straightforward to compute . thus  evaluating p's chances of winning in this election is at least as hard as counting the number of matchings in an arbitrary b  which is p-hard. moreover  because we can compute p's chances of winning solely on the basis of properties 1a  1b  and 1c  and by property 1d  these properties are maintained for any single additional vote  it follows that a manipulator cannot affect p's chances of winning. thus  constructive-manipulation in this case simply comes down to computing p's chances of winning  which is p-hard as demonstrated. ¡ö 
1 a broadly applicable reduction 
in this subsection we present a single broadly applicable reduction which will satisfy the precondistions of theorem 1 for many voting protocols  including all of the protocols discussed in this paper  thus proving them #p-hard to manipulate when the voting precedes the preround scheduling. 
definition 1 we label the following reduction r . given a bipartite graph b with the same number of vertices k in both parts  labeled 1 to k in one part  k- -lto1k in the other   we construct the following set of 1 + 1 votes: 

¡¡we now have to show that this reduction satisfies the preconditions of theorem 1. we start with the properties that are protocol-independent. 
theorem 1 r  satisfies properties 1b and 1c of theorem 1  under any protocol p  because these properties are independent of p   even with a single additional arbitrary vote. 

proof: in the pairwise election between p and any one of the 
ct with  p is ranked higher in only 1 votes  and thus loses the pairwise election. so property 1b is satisfied. for a pairwise election between some ci and cj  the first 1 votes' 
net contribution to the outcome in this pairwise election is 1. additionally  the two votes associated with any pair q  r i and also have a net contribution 
of 1  if either or . the only remaining votes are the two associated with the pair so ci; wins the pairwise election by 1 votes if there is an edge  i  j  in b  and cj wins the pairwise election by 1 votes otherwise. so property 1c is satisfied. because both are satisfied with a  margin  of at least 1  a single additional vote will not change this. ¡ö 
¡¡finally  because property 1a is protocol-dependent  we need to prove it for our reduction on a per-protocol basis. this is what the following four theorems achieve. 
1 examples 
theorem 1 r  satisfies property 1a of theorem 1 under the 
plurality protocol. this holds even when there is a single additional arbitrary vote. 
proof: if at least one of the c  with is not removed  p can get at most votes  whereas the lowestindexed remaining candidate among the ct with 1k will get at least 1 votes  so p does not win. on the other hand  if all the c1 with are removed  /; will get at least 1 + 1 votes  which is more than half the votes  so p wins. in both cases there is a  margin  of at least 1  so a single additional vote will not change this.  
theorem 1 r  satisfies property 1a of theorem 1 under the borda protocol. this holds even when there is a single additional arbitrary vote. 
proof: if at least one of the ct with is not removed  consider the highest-indexed remaining candidate among the c1 with call it h. the first  
votes will put h at least 1k:1 - 1a;1 points ahead of p.  1 1 of them rank h above p  and the 1 others can give p an advantage of at most k each.  the 1 remaining votes can contribute an advantage to p; of at most k each  and it follows that h will still have at least 1 - 1 more points than p. so 
p does not win. on the other hand  if all the ci with k + 1 i  1k are removed  then there are two groups of 1 1k:1 among the first 1 votes which  over the remaining candidates  are each other's exact inverses and hence have no net effect on the scores. also  the last 1 votes  which are organized in pairs  have no net effect on the score because  over the remaining candidates  the votes in each pair are each other's exact inverse. the remaining votes all rank p highest among the remaining candidates  so p wins. in both cases the  margin  is big enough that a single additional vote will not change this.  
theorem 1 r1 satisfies property 1a of theorem 1 under the 
maximin protocol. this holds even when there is a single additional arbitrary vote. 
proof: if at least one of the c1 with is not removed  then in any pairwise election between such a candidate and p  p will get at most 1 votes. however  the lowest-indexed remaining candidate among the ct with k +1  will get at least 1k:1 votes in every one of its pairwise elections. so p does not win. on the other hand  if all the c1 with are removed  p will get at least votes in every one of its pairwise elections  which is more than half the votes; so p wins. in both cases there is a  margin  of at least 1  so a single additional vote will not change this.  
theorem 1 r  satisfies property 1a of theorem 1 under the stv protocol. this holds even when there is a single additional arbitrary vote. 
proof: if at least one of the c1 with  is 
not removed  consider the lowest-indexed remaining candidate among the c1 with  call it /. / will hold at least 1 votes as long as it is not eliminated  and p can hold at most 1 votes as long as / is not eliminated. it follows that ;; will be eliminated before /  so p does not win. on the other hand  if all the the ct with are removed  p will hold at least 1 + 1a;1 votes throughout  which is more than half the votes; so p cannot be eliminated and wins. in both cases there is a  margin  of at least 1  so a single additional vote will not change this.  
theorem 1 in any of rpre + plurality  	rpre -f 
borda  	rpre 	+ 	maximin  	and 	rpre 	+ 	stv  
constructive-manipulation is #p-hard 
proof: immediate from the previous theorems. 	
1 pspace-hardness when scheduling and voting are interleaved 
in this section  we increase the complexity of manipulation one more notch  to pspace-hardness 1 by interleaving the scheduling and vote elicitation processes. 
¡¡we first discuss the precise method of interleaving required for our result. the method is detailed and quite complicated. nevertheless  this does not mean that the interleaving should always take place in this particular way in order to have the desired hardness. if the interleaving method used for a particular election is  say  randomly  chosen from a wider  and possibly more naturally expressed  class of interleaving methods containing this one  our hardness result still goes through  as hardness carries over from the specific to the general. thus  our goal is to find the most specific method of interleaving for which the hardness still occurs  because this gives us the most information about more general methods. we only define the method for the case where the number of candidates is a multiple of 1 because this is the case that we will reduce to  so it does not matter how we generalize the protocol to cases where the number of candidates is not a multiple of 1 . 
definition 1 i pre proceeds as follows: 
pspace is the class of problems solvable in polynomial space. 
1. label the matchups  a matchup is a space in the preround in which two candidates can face each other; at this point they do not yet have candidates assigned to them  1 through  
1. for each matchup i  assign one of the candidates to play in it  and denote this candidate by c i  1 . thus  one of the candidates in each matchup is known. 
1. for some k which is a multiple of 1  for each i with 1 i k  assign the second candidate to play in matchup i  and denote this candidate c i  1 . thus  we have k fully scheduled matchups. 
1. for each pair of matchups  1i - 1i  with i   assign two more candidates to face the candidates already in these two matchups  and denote them and .  thus  at this point  all that still needs to be scheduled is  for each i  which of these two 
1. 
  ask all the voters whether they prefer 
            we observe that  even if the number of already scheduled matchups is k - 1  the elicitation process trails behind the scheduling process by a factor 1.  
1. elicit the remainder of all the votes. 
¡¡one important property of this elicitation process is that the voters are treated symmetrically: when a query is made  it is made to all of the voters in parallel. thus  no voter gets an unfair advantage with regard to knowledge about the schedule. another important property is that the elicitation and scheduling process at no point depends on how the voters have answered earlier queries. thus  voters cannot make inferences about what other voters replied to previous queries on the basis of the current query or the current knowledge about the schedule. these two properties guarantee that many issues of strategic voting that may occur with vote elicitation  conitzer and sandholm  1  1bl in fact do not occur here. we are now ready to present our result. 
theorem 1 given a voting protocol p  suppose that it is possible  for any boolean formula  in conjunctive normal form  i.e.  a sat instance  over variables v - x  y with 
  and corresponding literals l   to construct in polynomial time a set of votes over a candidate set containing at least  with the following properties: 
 property 1a  if we remove  for each  one of and   p would win an election under protocol p against the remaining candidates if and only if for every clause  where k is the set of clauses in    there is some i l such that cl has not been removed  and i occurs in k. this should hold even if a single arbitrary vote is added. 
  property 1b  for any x are tied in their pairwise election after these votes. 
  property 1c  for any y  y  cy and  are both losing their pairwise elections against cly by at least 1 votes  so that they will lose them regardless of a single additional vote . 
then constructive-manipulation in i pre -f p is 
pspace-hard  and pspace-complete if p can be executed in polynomial space . 
proof: consider the following election under ipre+ p. let the candidate set be the set of all candidates occurring in the votes constructed from  the  original candidates    plus one dummy candidate for each of the original candidates besides the . to each of the constructed votes  add all the dummy candidates at the bottom; let the resulting set of votes be the set of the nonmanipulators' votes  according to which they will answer the queries posed to them. the manipulator has yet to decide on its strategy for answering queries. after step 1  according to definition 1  of i pre 1- p  up to which point the manipulator will not have had to make any decisions   let the situation be as follows: 
the number of already fully scheduled matchups is k -
	. in matchup 	faces 
in the remaining fully scheduled matchups  candidates not corresponding to a literal face a dummy candidate. 
	matchups 	already 
have candidates r+1/i and r 1/i in them  respectively. the other two candidates to be assigned to these rounds are  and a dummy candidate. 
¡¡thus  what will happen from this point on is the following. for i ranging from 1 to first the protocol will schedule which of and t face which of and the dummy candidate. the r/ facing the dummy will move on  and the other will be defeated by   by property 1c. second  everyone will be asked which of and is preferred  and because the nonmanipulators will leave this pairwise election tied by property 1b  the manipulator's vote will be decisive. thus  we can think of this as nature and the manipulator alternatingly giving the variables in y and x respectively truthvalues:     is set to true if  survives  and to false if survives. by property 1a it then follows that p wins if and only if the resulting assignment satisfies all the clauses  i.e. is a solution to the sat instance. thus  the manipulator's strategy for setting variables should aim to maximize the chance of the sat instance being satisfied eventually. but this is exactly the problem stochastic-sat  which is pspachcomplete ipapadimitriou  1 . 
¡¡if p can be executed in polynomial space  the manipulator can enumerate all possible outcomes for all possible strategies in polynomial space  so the problem is also in pspace. ¡ö 
¡¡because the preconditions of theorem 1 are similar to those of theorem 1  we can build on our previous reductions to apply this theorem to the well-known protocols. 
theorem 1 for each of plurality  dor da  maximm  and stv  there exists a reduction that satisfies properties 1a  
1b and 1c of theorem 1. thus  in any ofipre-{-plurality  i pre + dor da  i pre + maximin  and i pre + stv  constructive-manipulation is pspace-complete. 
1 

sketch of proof: we can modify the reductions from section 1 to satisfy the preconditions of theorem 1. this is done by adding in the in such a way as to achieve property 1c  ranking them just above their corresponding cy and c-y in slightly more than half the votes   while preserving property 1a  by ranking them as low as possible elsewhere . ¡ö 
1 conclusions 
voting is a general method for preference aggregation in multiagent systems  but seminal results have shown that all  nondictatorial  voting protocols are manipulable. one could try to avoid manipulation by using voting protocols where determining a beneficial manipulation is hard computationally. a number of recent papers study the complexity of manipulating existing protocols. 
¡¡this paper is the first work to take the next step of designing new protocols that are especially difficult to manipulate. rather than designing these new protocols from scratch  we instead showed how to tweak existing protocols to make manipulation hard  while leaving much of the original nature of the protocol intact. the tweak studied in this paper consists of adding one preround to the election  where candidates face each other one against one. the surviving candidates continue to the original protocol. surprisingly  this extremely simple and universal tweak makes typical protocols hard to manipulate! the protocols become np-hard  #phard  or pspace-hard to manipulate  depending on whether the schedule of the preround is determined before the votes are collected  after the votes are collected  or the scheduling and the vote collecting are interleaved  respectively. we proved general sufficient conditions on the protocols for this tweak to introduce the hardness  and showed that the most common voting protocols satisfy those conditions. these are the first results in voting settings where manipulation is in a higher complexity class than np  presuming pspace   np . 
