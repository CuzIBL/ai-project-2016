 
desired algorithms to be synthesized are described i m p l i c i t l y by example problems that the algorithms should solve. the example problems are f i r s t solved by the problem-solver lawaly. the obtained solution represents a trace of the desired algorithm. from the trace  the algorithm is synthesized by the synthesizer syn. syn writes recursive programs with repeat statements  and generates i t s own subroutines. examples of functions synthesized include r e p e t i t i v e robot tasks and tree traversal algorithms. 
	1. 	introduction 
a program synthesizer transforms the i m p l i c i t or e x p l i c i t description of an algorithm into executable code. although a compiler for a high level language might be considered a synthesizer  since it transforms an algorithm w r i t t e n in the language into executable machine code  generally discussions of program synthesizers are r e s t r i c t e d to those systems which transform into code descriptions which are   f a r   from being executable. the concept of   f a r   is r e l a t i v e to a state of knowledge. for example  some synthesizers accept descriptions of algorithms in the predicate calculus. on the other hand  kowalski  1  has argued in favor of a predicate calculus programming language. when a compiler for such a programming language is available  we can expect that some synthesizers w i l l lose their  raison d ' e t r e   . 
approaches to program synthesis can be d i s t i n g uished according to the descriptions of the a l gorithm to be synthesized. properties of the a l gorithm can be given to the synthesizer  expressed in a programming language  1  or a l o g i c a l c a l culus  1 . a theorem-prover is used to extract the synthesized program. this approach suffers from d i f f i c u l t i e s in obtaining axiomatizations  and from the lack of power of present theorimprovers. 
another approach  1  starts from the traces that the algorithm would have produced-if it existedon some p a r t i c u l a r test cases. the traces are generalized to the synthesized program. in t h i s way  a variety of looping programs have been obtained. this approach suffers from the tedium experienced by human beings in producing traces  and from the errors that a l l too often manage to creep into the traces. the above approaches are described more f u l l y in section 1. 
we present here a novel approach to synthesis. the program to bo synthesized is described i m p l i c i t l y by sample problems that are assumed to be typical of the class of problems that the program should solve. the sample problems are f i r s t solved by the problem-solver lawaly  1 . the obtained solutions are traces which are generalized to the synthesized programs. other e f f o r t s to synthesize programs given input-output p a i r s . but without the use of a problem-solver  arc described in  1 . 
our synthesizer syn has generated recursive programs with repeat statements. syn writes its own subroutines. the synthesis process is t o t a l l y automatic once sample problems  and the elementary operations necessary to solve the problems  have been given. 
syn is a running system programmed in lisp. the behavior of syn is exemplified by several sample problems. 
1. approaches to program synthesis 
1 properties of programs. 
in many approaches to program synthesis  the synthesizer is given a description of properties of the desired program in some language  for example logical c a l c u l i or a programming language. 
1.1 properties in a programming language. 
slklossy  1  has described a synthesizer which accepts properties of algorithms expressed in lisp. 
examples of such properties are:  equal  times a 
 plus b c    plus  times a b   times a c       	and 
 equal  append a  append b o   append  append a b  c  . the synthesizer uses a property prover similar to that of boyer and moore  1 . 
1.1 properties in logical c a l c u l i . 
several synthesizers accept descriptions of prope r t i e s of algorithms in the predicate calculus  waldinger  lee and manna  1   1   1   . a theorem prover is used to synthesize the algorithm. other l o g i c a l c a l c u l i have been used  for example by luckham and buchanan  1  in a synthesizer that permits manmachine i n t e r a c t i o n . 
1 traces of the algorithm 
the approaches described in section 1 suffer from several drawbacks: a  it is often d i f f i c u l t   if not downright painful at times  to give adequate axiomatizations of algorithms and t h e i r associated data structures  b  among the major d i f f i c u l t i e s encountered in the approaches via logical c a l c u l i  section 1.1  is the requirement that the axiomatization be complete. if some property of the algorithm or data structure is not included  the theorem-prover used by the synthesizer cannot complete a proof  and no algorithm is synthesized. this d i f f i c u l t y does not exist in the approach via programming language description  sect ion 1 1   since the synthesizer can produce p a r t i a l syntheses which immediately result in demands for additional properties  c  presently available theorem-provers in p a r t i c u l a r for l o g i c a l c a l c u l i   appear too weak to synthesize d i f f i c u l t programs. u n t i l the theorem-provers become more powerful  the l o g i c a l c a l c u l i approach has been called  not pragmatic  

1 

by i t s own supporters  1 . 
human beings often understand a given program by executing  or simulating the executing of  the a l gorithm on some test cases  i . e . by considering traces of the algorithm. s i m i l a r l y   human beings often prefer to have a desired algorithm  to be programmed  explained to them by a description of the behavior of the algorithm on some p a r t i c u l a r sample problem  i . e .   in terms of traces. biermann  1  has described a synthesizer which accepts the traces of an algorithm to be synthesized. the traces are assumed to be equal to the traces that the desired algorithm   i f it existed  would have produced on the same test cases. the synthesizer generalizes the traces to a program which does produce the correct traces on the sample test cases. the programs synthesized include loops  and subroutines if these were specified in the traces. 
1 example problems 
biermann  personal communication  has reported that inputting the traces by hand was not only t e dious  but could not always be done without the inclusion of errors in the traces. we have therefore been led to automate the production of traces  both to avoid errors and to eliminate a tedious task. 
in our synthesizer  syn  the inputs are s p e c i f i c   sample problems belonging to the class of problems which the algorithm to be synthesized should solve. the human being is saved the tedium of producing traces. in a d d i t i o n   the description of the desired algorithm is not given under any form. the user of the synthesizer has the same relationship with the synthesizer as he has with a systems programmer: he only describes problems to be solved. it is the synthesizer's task  as it is the system programmer's to develop an algorithm that solves the sample problems  and in addition a reasonable class of more general problems that include the sample problems. 
the problems input to syn are solved by the problem -solver lawaly  1  which produces a solution 
which is interpreted as the trace of the desired algorithm. 	the trace is then generalized to an algorithm. 	the synthesizer proper  also called syn  which produces programs from the traces  bears almost no resemblance to biermann's synthesizer . 	while biermann produced looping programs  syn writes recursive programs with repeat statements in a language similar to lisp. 	syn also generates i t s own subroutines. 
since the problem solver lawaly has been described elsewhere in the l i t e r a t u r e   we shall concentrate on the synthesizer proper. since  as we have argued  programs are best understood by describing their trace on a sample problem  we shall exhibit the behavior of syn on a simple sample problem. 
	1. 	syn on a simple sample 
we consider a simple problem  i l l u s t r a t e d in figure 1. a robot is on ground x. she holds a flag flag. she can climb from x on boxes a  b  and c  one a f t e r the other. on the top box c she can plant the f l a g . we want the robot to plant the flag and return to the ground x. 

as in  1   the world is described by a set of true f a c t s   and the c a p a b i l i t i e s of the robot are given by elementary operators. the format of each operator i s :  operator-name   l i s t of arguments   set of preconditions of the operator   delete set of the operator   add set of the operator    for an operator to be applicable to the world ow  the preconditions of the operator must be s a t i s fied in ow. as the result of the application of the operator  the world changes into a new world nw given by: 

figure 1 l i s t s the operators relevant to the example task. in a more complex world  a more c a r e f u l axlomatization could be necessary  1 . figure 1 shows the sequence of operators which constitutes the solution trace found by lawaly to the problem. each step of the solution is indexed by  ei  for subsequent reference. 


1 

the semantics of odbol are as follows: 
- when a function f is c a l l e d   the formal parameters of f are bound to the actual parameters of the c a l l . 
- having bound the parameters  each  block  in the  body  is scanned from l e f t to r i g h t u n t i l an   i f part  is found to be true. the corresponding  opart  is then executed.   i f no  ifpart  is true and the  body  is exhausted  then an error has occurred.  
- the  op s w i t h i n the block are executed from l e f t to r i g h t   as in the prog feature in lisp. if the  op  is a function c a l l   the indicated funct i o n is executed with the indicated arguments. otherwise the  op  is executed and control passes to the next  op . an end is treated as a return statement in a lisp prog. a repeat statement is equivalent to a transfer to the top of the  block   unless the block condition is now f a l s e   in which case control is passed to the next statement   a l ways an end according to the syntax.  
- in the case of exists  the i d e n t i f i e r s in the  idnlist  are bound before entering the block  and these bindings hold throughout the rest of the block. if more than one possible binding is found for an i d e n t i f i e r   then one of the bindings is chosen a r b i t r a r i l y .  repeat statements or recursion w i l l make the system consider several of the possible bindings.  
1 	arguments of the function. 
the function to be synthesized must be given a list of arguments. to select the arguments  we consider the preconditions of the f i r s t operator in the trace. the preconditions are ranked according to a hierarchy  see 1 . the lowest ranked precondit i o n   corresponding to the most r e s t r i c t i v e precondition  is selected. i t s arguments become the arguments of the function. 
in our example  among the preconditions of the operator  climb x a   the most r e s t r i c t i v e one is  onrbt x   hence x is selected as the argument of the function   c a l l it ff  to be b u i l t . 
if the f i r s t operator is to some extent incidental to the s o l u t i o n   this approach would appear unsati s f a c t o r y . however  as is shown in section 1  syn w i l l then generate a f i r s t function which accomplishes the incidental work  and c a l l s another function which performs the s i g n i f i c a n t tasks. 

the l i n e references correspond to the order in which the lines of code are generated. 
	so f a r   we have l i n e li only. 	the  ifpart  of the 
 
 block  comes from the preconditions for  climb x a   namely  on a x  and  onrbt x . the l a t t e r provided us with the variable x.  on a x  involves a new object. a  so an exists construct is i n t r o duced. we obtain l i n e l1. having used e l   we consider e1. since the operators in e1 and el are the same  recursion is attempted  yielding l i n e l1. the recursion is on a  since a occupies the same position in e1 as x did in e l . 
the new program is executed to v e r i f y that it conforms with the trace. in f a c t   not only el and e1 agree with the program  but e1 ae w e l l . as we try to execute  ff c   the condition  exists   a l pha   on alpha c   is not s a t i s f i e d in the world  hence the test f a i l s   and we need to write new code. from the preconditions of p l a n t f l a g in e1  
we generate a second test in the conditional  l i n e 
l1. notice how the constant flag becomes a v a r i able. previously  the ground x also became a vari a b l e . 
we next consider e1:  unclimb c b . the constants c and b in e1 are the name ones that were current in the c a l l  ff b .  as the p a r t i a l programs are executed  a l l contexts are saved for subsequent examination  if necessary.  hence  it appears that a change of recursive level has taken place  since b is unknown in the c a l l  ff c . hence  we terminate the p l a n t f l a g part of the program by 
adding end  line l1 -which forces a return to the previous recursive l e v e l - and by inserting an uncliimh  line l1. 
looking at e1:  unclimb b a   we notice that the recursive context is changed again. hence  an end is inserted after the unclimb  line l1. ae before  new code must be checked against the trace. in f a c t   even e1 is generated  hence the synthesized program is found completely s a t i s f a c t o r y . 
	1 	comparison with human programs. 
the authors have asked several friends and c o l l e a gues to describe a generalization to the simple sample problem of figure 1. invariably  the sol u t i o n was of the form: 
-make a loop as the robot climbs to the top; 
-plant the f l a g ; 
-make a loop as the robot unclimbs down to the ground. 
it is remarkable that the program synthesized by syn is in fact   b e t t e r   than the version proposed by a l l humans  including ourselves!  as the most   n a t u r a l   s o l u t i o n . the solution ff can be described as follows: a series of recursive c a l l s leads the robot up to the top; she then plants the f l a g . then  as the recursive c a l l s are undone  the robot climbs down. so  in p a r t i c u l a r   the 
1 

operators  climb x a  and  unclimb a x  are paired in the same function c a l l   and t h e i r complementary relationship is made transparent. by contrast  the  climb  and  unclimb  operators are separated in the two d i s t i n c t   separate loops in the human program. 
the above example does not i l l u s t r a t e a l l the capa b i l i t i e s of syn. some modifications of the simple sample problem w i l l give a more complete picture of syn. 
1 	repeat statements. 
if the robot holds several flags  and plants a l l of them on the top box  the second block of ff would be synthesized as: 

recursion could also have been used  but it would define  ff x  in terms of  ff x   the i n f i n i t e r e cursion being avoided because of side e f f e c t s . hence  a repeat statement appears  cleaner  and easier to implement. some synthesized programs contain several embedded repeat statements  see section 1. 

hence the robot climbs only to b  then plantflag1's   s i c !   . synthesizing the procedure  we would generate lines l1  l1 and l1 of code. when x is bound to b  ff would make the robot climb on c  which is not in the trace. hence  an  ifpart  is inserted to prevent the execution of  ff c . the p a r t i a l d e f i n i t i o n of ff1 now becomes: 
 ff1  lambda  x   cond 	 l1  
  exists  flag c  on c x  top c  holding flag   
   begin  plantflag1 flag c x . . .    l1'  followed by l1 and l1. of course  syn must v e r i f y that t h i s new insertion does not change the agreement of the program with the e a r l i e r parts of the trace. 
1 	writing new functions. 
parameters is inappropriate  see sections 1 and 1 . 1   . 
1. some additional synthesized programs 
in t h i s section we describe some additional problems that were given to syn  and the r e s u l t i n g synthesized programs in odbol. each problem was synthesized independently and the actual computer outputs are given. 
1 returning to the f i r s t step. 
we modify the f i n a l state of the f i r s t example problem by l e t t i n g the robot f i n i s h on step a i n -

where f1 is i d e n t i c a l to ff except for v a r i able names. 	in the solution f1  a step is climbed and an a u x i l i a r y function is created  ess e n t i a l l y i d e n t i c a l to ff  which does the symmetric climbing and unclimbing  and plants the f l a g . 	the symmetry of much of the solution is 
apparent. 
1 picking up a backpack before planting the flag-
before accomplishing the same task as in figure 1  we require that a backpack be picked up as a f i r s t step. hence t h i s f i r s t step is irrelevant to the main problem to be solved. the synthesized pro-

where f1 is i d e n t i c a l to ff. f1 picks up the backpack  now a variable  and c a l l s an a u x i l i a r y function f1  essentially i d e n t i c a l to ff  which does a l l the work. 
this problem shows that syn was not misled by i n cidental early actions in the trace. 
1 binary tree traversals. 
tree traversal algorithms are popular recursive algorithms. we s t a r t with a tree  and describe the order in which the nodes should be traversed. we shall describe results for postorder  inorder  and preorder t r a v e r s a l s . the tree is shown in figure 1. 


odbol does not allow the binding of variables past the   i f p a r t   of a  block  . if we want to test whether there is a nice cube on a  which should be picked up if it is already melting  before c a l l i n g ff again  we must have access to a variable that can be bound to nice cubes. syn would c a l l a new function gg with a d e f i n i t i o n similar t o : 
 gg  lambda  a   cond 
       exists  nicecube   melting nicecube at begin  pickup nicecube a   . . . hence  we can see that syn f i g h t s the increased complexity due to a d d i t i o n a l bindings w i t h i n a  block  by creating new functions that absorb the bindings. the creation of new functions is also h e l p f u l when the o r i g i n a l choice of function 
1 


1 

should be embedded in a man-machine environment be- 1- project mac progress report x  massachusetts fore s i g n i f i c a n t advances in the automatic produc- i n s t i t u t e of technology  cambridge  1  
	t i o n of complex  q u a l i t y software can be achieved. 	1. 
	1. 	