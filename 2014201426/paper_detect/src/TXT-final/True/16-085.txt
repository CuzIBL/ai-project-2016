 
　　　　　　fn this paper we propose 	a 	new hierarchical structure for describing 	1 objects  	called 	the 	prism 	tree. 	this ternar  tree structure  inspired from 	the planar 	strip 	tree  	is 	b u i l t 	from 	an i n i t i a l trianguiation 	of 	the 	object 	by 
using a polyhedral approximation algorithm. different properties of this representation are shown  as well as algorithms for intersecting objects and neighbor finding techniques. 
introduction 
　　　　　　multilevel 	representations have been found useful in computer 	vision 	for several years now   l   1   1   1   . 	by 	allowing the access and manipulation of regions and objects at various levels of d e t a i l s   	they provide 	a 	natural 	data 	structure 	for thinking about objects in the context of a given task. 	they also are excellent 	tools for speeding up various algorithms 	by 	the fact that  divide and conquer  	techniques are 	easily 	implemented 	on 	such 	data structures. in this 	paper 	we 	propose 	a representation for 1-d objects which is 	a 
　　　　　　generalization of 	ballard's 	strip 	trees    	in 	this 	method 	space 	curves 	or surfaces are 	hierarchically 	approximated by 	using 	a 	prism 	as 	enclosing 	box  yielding a ternary tree 	structure 	called the prism 	tree. 	one 	advantage 	of 	this structure is that 	it is i n t r i n s i c 	to 	the object 	shape  	and 	therefore 	invariant through r i g i d 	transformations. 	moreover  this tree structure 	allows 	to 	implement 
e f f i c i e n t l y 	neighbor 	finding 	operations and 	surfaces 	intersections 	as 	tree traversal algorithms. we f i r s t explain the 
general principle of our approach and show how to build a prism tree from a polyhedral representation of an object  then prove a theorem that allows to 
e f f i c i e n t l y test 	intersections of surfaces  	and 	describe 	algorithms 	for performing various operations on objects. 
1. faugeras and j. ponce 1 
	ii polyhedral approximation 	t r i a n g l e . 	this triangle is then s p l i t in a 
	and prism tree construction 	way quite analog to the split step  so the 
starting gp describes a 1 faces polyhedron 
	we assume 	that 	at 	the 	lowest 	made of two tetrahedra sharing a face that 
l e v e l   	the 	objects 	are 	represented 	b  	is the 	i n i t i a l 	triangle 	  f i g . 	1 . 	but 
polyhedra: 	our 	data 	is 	the 	graph 	go 	notice that any other triangulation 	could 
defined by the points in 	1-d 	space  	and 	be used as w e l l . it is now time to 	define 
the polyhedral edges joining 	them. 	there 	clearly the meaning of st and the 	way 	to 
are 	several 	ways 	of 	obtaining 	such 	cut 	it 	in 	three 	 or 	two 	for 	the 
polyhedra from range data  1   1   - 	adjustments  parts. 	in fact there are 	two 
possible algorithms  denoted algra and i. 1 .polyhedral 	approximation algli  : 

             we use a top-do wn approach. we consider a triangulation of the object which is refined at each step until some error threshold thr is reached. during the execution of the algorithm  the triangulation is considered as a  face -graph gp . we associate to each triangle t a node with diverse a t t r i b u t e s : the vertices  denoted p  1  r  the  part st of the surface associated to t   we will see later what we mean by these words   and the corresponding error err  e.g. the maximal distance from the triangle to the surface . the edges of gp are defined by the neighboring relations of the triangles  two triangles sharing an edge are neighbors . the algorithm loops over the following steps 
.split step   f i g . 1  
po1 each triangle t verifying err greater than thr do 
 find m  point of st lying at maximum distance of t 
let tl  t1  t1 be the nodes defined b : 
the vertices of tl are p  q  m the vertices of t1 are q  r  m the vertices of t1 are r  p  m 
   st  has been s p l i t   into three parts corresponding to tl  t1  t1  err1  err1  err1 are the corresponding errors  then replace the node t by tl  t1  t1 in the graph  in particular update the neighbors of t . 
 adjustment step   f i g . 1  if we only used the split step   old edges would ever remain  even if they are very far from the surface.this is the reason why we add this step which removes the edge between two faces having just been s p l i t 
por each pair tl  t1 of such triangles do find m  point of stl union st1 which is the closest  from the bissector plane of tl and t1   and the furthest from their common edge 
 s p l i t tl in two triangles of vertices p1 q m and p1 r m  s p l i t t1 in two triangles of vertices p1 q m and p1 r m update the graph the same way as in the split step. 
　　　　　　let us add some 	d e t a i l s . 	pirst the algorithm has to be i n i t i a l i z e d with a s t a r t i n g graph: it is usually obtained 	by taking three points which define 	a 	f i r s t the f i r s t one  described in   1    works for objects defined by polyhedra without holes  genus zero . it uses the property that in this case go is planar  so each cycle drawn on this graph cuts it into two connected components. let us consider a pair of neighboring triangles tl and t1 of gp  let q and r be their common vertices  if we associate with each of these pairs a path  q r  in go  we define for each node t of gp a cycle  p q    q r   r p  of go and  as it is a planar graph  a connected subset st of go. thus we only have to give an algorithm for finding non intersecting paths to define a 
　　　　　　p a r t i t i o n of the surface in st's. we define them recursively by using the split step  the case of the adjustment step is quite analog and w i l l be omitted . let t be a node to s p l i t   f i g . 1   and m the s p l i t t i n g point. we suppose the paths 
 p q    q r   and  r p  defined. let tl  t1  and t1 be the triangles pqm  qrm  and rpm   and pi  p1  and p1 the bissector planes of the pairs t1 t1   t1 t1   and t1 t1. we define  p m  as the path in st which is the closest to the plane p1. the path  q m  is defined similarly using the plane p1 and only considering points which do not belong to  p m . these two paths and the path  p q  define a cycle which cuts st in two components ci and c1. let ci be the component which contains r  we now find a path  r m  in ci by using the plane pi. the three paths do not intersect  and they s p l i t st into three components stl  st1  and st1 which correspond to the cycles  p m q    q m r   and  r m p  . 
　　　　　　the 	second 	possible 	way 	of defining the st's does not 	make 	e x p l i c i t use of the graph 	go. 	st 	is 	no 	more 	a subgraph but. simply a l i s t of 	points. 	we w i l l also define it recursively 	by 	using the split step. suppose st is defined 	for a triangle t that we are going 	to 	s p l i t . we keep the same notations and s t i l l 	call 
pi  p1  p1 the three bissector planes defined by the s p l i t t i n g . stl w i l l simply be the subset of st composed of the points of st which l i e between the planes p1 and p 1  st1 and st1 w i l l be defined s i m i l a r l y   and it is clear that we so obtain a 
p a r t i t i o n of st. we must though remark that there is in general no guaranty that 

1 o. faugeras and j. ponce 
st is connected   f i g . 1   so ws have to be cautious when using this method  in the case of a convex shape  one can nevertheless easily prove that the st's stay connec ted . 
1  prism tree .construction 
　　　　　　we now consider gf at some level of the recursion. let t be one of i t s nodes  and st the associated part of the surface  which can be either a l i s t or a subgraph . we wish to define an enclosing box of st. with i t s three neighboring triangles  t defines three bissector planes pi  p1  and p1   f i g . 1 . the  prism  associated to t w i l l be the smallest 1-faces polyhedron of which three faces are parallel to pi  p 1   and p1  and the two remaining ones are parallel to the pqr plane  that contains all the points of 
st   f i g . 1 . these five planes w i l l be denoted pp1  pp1  pp1  p1  and pb1 and the two triangles of the prism parallel to t w i l l be denoted tbi and tb1. we can now build a ternary tree as the recursion proceeds. although it is surely not the most concise description of a prism  we suppose for the sake of c l a r i t y and efficiency that one finds 1t each node of the tree the following informations: p  q  r  pp1  pp1  pp1  tbi  tb1  three flag bits reg   mark  we w i l l explain their use in the sequel  and adj  =1 if the node has been obtained through an adjustment   and four pointers s1  son1  s1  and father. the root points on two nodes 
  f i r s t pointer at nil  associated to the two half surfaces defined by the i n i t i a l t r i a n g l e . we define  the children nf :. 
　　　　　　　. a triangle t s p l i t into three sub-triangles ti t1 t1 corresponds to a node the three children of which are defined by t1 t1 t1. an adjusted triangle has only two children  the third pointer being set at nil. in turn  each child points towards i t s father. in the sequel  a pointer to a node w i l l be denoted pt  and the corresponding node pt*. f i g . 1 show1 an example of pri1m tree for a simple objec t . 
i l l some properties of the prism trees 
             in order to prove some important properties of prism trees  we need to define a regular prism: a prism w i l l be said to be regular if the associated st is connected  and if i t s three planes pp1  pp1  and pp1 are pi  p1  and p1 themselves 
  f i g . 1 . this notion is quite similar to the regular strips of ballard   l   and prevents pathological configurations   f i g . 1 . this is the reason why at each node of the prism tree we keep the regularity bit reg which w i l l be set if the corresponding prism is regular. 
	it. is clear that 	a 	node 	of 	a 

o. faugeras and j. ponce 1 
             by using this theorem and the obvious fact that if two prisms do not intersect  null intersection  then the underlying surfaces do not intersect e i t h e r   the next two sections w i l l show how one can check whether two surfaces i n t e r s e c t   and find their intersection curve considered as a prism tree. prom now on  we suppose that we dispose of two functions vol pt  and prismint pt pt' . vol pt  returns the volume of the prism associated to pt*. pr ism int pt pt   returns clear  possible  or null according to the type of intersection of the prisms associated to pt* and pt'*. moreover  if a node is not regular  reg=1  prismint w i l l never return clear unless both nodes are we now wish to find the intersection curve of two surfaces. this will be done by finding and marking  using the mark flag  in the two trees all the 
nodes whose prism intersects the other surface. we use the obvious property that if a node intersects a surface  then a l l i t s ancestors intersect this surface. conversely  a l l the descendants of a node that does not intersect a surface do not intersect it either. this gives the following algorithm  where a l l the flags mark have previously been i n i t i a l i z e d 1. 
　　　　　　when 	the 	execution 	of 	the algorithm is complete  a l l nodes having 	a  clear  descendant have been 	marked  	and no descendant of a  null  	node 	has 	been marked. to obtain the intersection 	curve  one has only to v i s i t one of the trees and to prune it from all the 	nodes 	marked 	1  in that case  the regularity flag of 	ail the ancestors of these nodes must 	be 	set to 	1 . 	notice 	that 	we 	have 	two representations of the curve  one for each tree. 
vi a neighbor finding algorithm 
　　　　　　algorithms 	which 	operate 	on hierarchical 	structures 	often 	need 	to explore the 	 neighbors  	of 	the 	visited nodes   1     	in our case  the neighbors of a node 	are 	clearly 	defined : 	during 	the construction 	of 	the 	tree  	a 	graph structure has been maintained. so at 	each level of the tree  the neighbors of a node 
t 	can 	be 	defined 	as 	the 	nodes 
corresponding to the neighbors in gp of the triangle associated to t. by storing gp at each level of the tree  one would have an easy  but very memory consuming  way of finding the neighbors. we w i l l show in this section how one can find the neighbors of each node without  storing the 

1 o. faugeras and j. ponce 
gf's. notice f i r s t that the only tree transformation we have defined is the surp inter procedure  which prunes the tree without modifying it1 structure  so that each node of a tree has always three neighbors  some of them being eventual!  empty  nil p o i n t e r   . 
             we f i r s t define the  eldest  son of a node. when s p l i t t i n g a node by using the approximation algorithm  three new triangles  and three new edges are created  so that each triangle has always two  new  and one  old  edge. the child of a node which corresponds to this  old  edge w i l l be called the eldest son of the node   e . g . in f i g . 1  the triangle 1 is an eldest son . in the case of an adjustment  it is clear that the eldest son w i l l be the missing one. during the construction the pointer sqn1 w i l l always represent the eldest son. 
　　　　　　we f i r s t consider the case where no adjustment has occured. then we find the three neighbors of a node using the following algorithm: 
let t be the node visited 
	.two 	of 	i t s 	neighbors 	are 	i t s 	two 
brothers 
	let e be the remaining edge   i t can 	be 
found by examining the vertices of t  if t is an eldest son 
then ascend the tree u n t i l the current 
	node is no more an eldest son. let 	tl 
be this son else t1:= t 
.let t1 be the father of tl .descend the tree by v i s i t i n g at each level the only son that shares e with t u n t i l the node is a leaf or it is at the same level as t 
. t h i s node is the third  exterior  neighbor of t 
it is easy to see that the algorithm  works : if a node is an eldest son  i t s father shares e with a neighbor which is not i t s brother  obvious   so we have to ascend the tree. moreover the edge e of a node is always the   o l d   one  suppose that the node is not an eldest son  then e is an edge of i t s father  but cannot be i t s  oldest  one  so the father shares it with one of i t s brothers. 
             we can now extend this method to the case of the adjusted nodes  adj=l . the difference is that an adjusted node t ha1 not two neighboring brothers  but only one  the third one is i t s adjustment neighbor e.g. triangles 1 and 1 in pig. 1 . let e be the corresponding edge. 
we find the two usual neighbors by the previous algorithm. for the adjustment neighbor  we look at the father tl. tl has been adjusted with one of i t s neighbors 
t1  which is 	i t s 	exterior 	neighbor. 	we simply have to find t1 by the previous algorithm  and the neighbor of t is the son of t1 which shares e with t. 
vii intersection op two volumes 
　　　　　　in 	 l   	ballard 	gives 	an algorithm for computing 	the 	intersection of two areas defined by the strip trees of their boundaries. the method 	consists 	in finding in each of the trees a l l the nodes which intersect or are 	inside 	the 	other area. 	the 	intersection 	area 	is 	then obtained b  considering all 	these 	nodes. let us denote a and a' the 	areas  	and 	s and s' the 	corresponding 	trees. 	ballard uses 	a 	function 	strip inside 	to 	check wether a 	node 	of 	s 	which 	has 	a 	null intersection with s' 	lies 	or 	not 	inside a'. this is 	v e r i f i e d 	by 	traversing 	the whole tree s'  and counting the number 	of clear 	intersections 	of 	a 	semi-infinite 
strip issued from the node with s'. if this number is odd the node lies inside a'  analog to the usual method for testing wether a point lies within a polygon . the disadvantage of this algorithm is that it computes the function strip ins1de for each null intersection node  implying at each time a f u l l traversal of s' . 
             such a method could be used for prism trees. a 1-d solid is defined oy i t s closed surface  and the associated prism tree pt. any prism can be c l a s s i f i e d in one  and one only  of the three following types: 
 1: the intersection of the prism with the surface is non empty 
1: prism f u l l y inside the surface 
 1: p r i s m f u l l y outside the surface let us consider two objects represented by two prism trees pt and pt'  it is possible to mark a l l their nodes of type 1 by using the algorithm of section v. testing the type of a null intersection node can be 
made by the following 1-d equivalent  p inside  of the function strip inside: let us consider a node t of pt. we can associate to it a s e m i - i n f i n i t e straight line l normal to t  issued from the barycenter of this triangle on the tbi side  pig. 1 . the notion of clear intersection can be extended by saying that l has a clear intersection with a regular prism t' if it intersects the corresponding tbi' and tb1'. prom lemma 1 we deduce that in this case l intersects st1 an odd number of times. the function 
p inside is then 	computed 	by 	traversing 
pt' and counting the number of these clear intersections  it returns the type  1 or 1  of the node. the intersection of the two objects is described by the two trees pruned of their nodes of type 1. remark that a node of type 1 or 1 has a l l i t s 
descendants of same type  so they do not need to be examined. 

　　　　　　however  	one 	his 	s t i l l 	to traverse 	pt  	at 	each 	null 	node. 	the situation is even worse than 	in 	the 	1 case as we deal with a ternary tree and 	a more complex inside function. he propose a r i g h t l y different algorithm for 	avoidinq too many computations of p 	inside 	it 	is dosed on the fact that if fwo 	neighboring 
prisms of pt have a null intersection with pt   then they lie both inside or outside the surface associated to pt'  proof-
suppose that one lies inside and the other outside  then their common edge lies it the same time inside and outside the surface  which is impossible . so one has only to compute p in1ide for a few nodes' and to explore and mark for each of these modes i t s connected component of null intersection nodes by using the neighbor endmg algorithm of the previous section this gives the following alagorithm. 
o. faugeras and j. ponce 1 
representation is object-centered and is therefore invariant to rigid motions. it is hierarchical and allows us to think about and describe objects at various levels of resolution. last but not least it is an efficient tool for performing various boolean operations on objects. ware pursuing the analysis of the 
corresponding algorithms. it is clear that they will be more efficient for trees composed essentiall  of regular nodes'. this implies that the polyhedral approximation  described in section ii be adapted to the object shape. it. turns out that this is true for convex  or almost 
convex  objects and therefore we plan to use the prism tree representation on such subparts when necessarv. we are also exploring applications in cad  combining primitive solids by boolean operations  

1 o. faugeras and j. ponce 
