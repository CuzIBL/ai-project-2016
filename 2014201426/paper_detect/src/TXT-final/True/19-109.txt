* 
the problem of intelligent machine drafting is presented  and a description of an existing implementation as part of a graphical generator function is given. the concept of graphical deep knowledge is defined as a representational basis for intelligent 
machine drafting problems as well as for physical object displays. a  partial  task domain analysis for graphical deep knowledge is presented. primitives that are necessary to deal with a world of 1-d forms and colors are introduced. among 
them are primitives for describing forms  positions  parts  attributes  sub-assemblies  and an abstraction hierarchy. the use of the  linearity principle  for knowledge structure derivation from natural language utterances is shown. 
	i 	introduction 
　　　traditional computer graphics systems have been criticized in the literature for being a poor environment from a knowledge representation point of view  l  in graphics as well as in other areas of software development  programmers have been taught not to code any items that are irrelevant to the actual execution 
of a given task. over the last several years it has been an essential goal of al programming to reverse the process of elimination 
of knowledge from the coding process. the ai programmer tries to make his knowledge conscious and tries to incorporate much of it in his program. 
     the use of al techniques in other areas of computer science has led to the replacement of the  eliminate knowledge  para-
digm by the  add knowledge paradigm  outside of ai proper. in this sense we interpret brown et al.  and in this sense we want 
our work to be understood. 
in the setting of the vmes project  versatile maintenance 
expert system  for printed wiring board maintenance  we have been working on a knowledge based graphics system. in this paper a new class of layout/routing problems that we have encountered will be described  intelligent machine drafting   and a task domain analysis of what we call graphical deep knowledge will be given. 
	a. 	the display program 
　　　a major part of the vmes user interface is a display program  named tina   which is called by the maintenance reasoner of vmes and keeps the user constantly informed what vmes is currently  thinking  about. for this purpose it displays  using certain symbol colors  a logical diagram of the circuit board currently being analyzed. suspected components are displayed in green. components found faulty are displayed in red. violated 
* this work was supported in part by the air force systems command  rome air development center  griffias air force base  new york 1  and the air 
force office of scientific research  boiling afb dc 1 under contract no. f1-c-1  which supports the northeast artificial intelligence consortium  naic . 
	geller end shapiro 	1 


figure 1 
a sneps network giving  partial  information about an adder-multiplier 
of arc labels necessary for one limited domain will converge towards a stable set  therefore identifying this set is a way of task domain analysis  
　　if people can describe a simple arrangement of objects by a short sentence then it should be possible to describe it with a rea sonably simple sneps structure. if this is not the case then the number of user denned primitives has to be extended to accom modate the sentence.  of course new primitives will also have to be used if the sentence is not representable at all . 
　　for instance if two people are sitting in front of a graphics terminal displaying the adder-multiplier  which has been used in maintenance research. fig. 1   and one of them asks: 
tell me the names of all multipliers   
then the other person will presumably be able to do that. therefore we would want our graphics interface to be able to do the 
same thing. we also want the knowledge base to contain infor mation on all multipliers in a format approximately linear in size with respect to the answer given by a person. this leads directly to an old idea  the implementation of a class hierarchy.  less obvious examples will be given throughout this paper.  

　　fig. 1 shows an example of a typical sneps network in order to provide some intuition for the reader not familiar with sneps. the syntax and semantics of sneps have been carefully defined  1i sneps is also a  neat  kr system that incorporates full first order predicate calculus. we will use fig. 1 to introduce the network notation that will be used in this paper. 
　　the nodes ml  m1  m1 m1  m1 represent propositions. m1 expresses the fact that the object 1 a1 is of type adder. an equivalent first order predicate calculus representation for fig. 1 
would be the following one: 

1 	knowledge representation 
this representation is unnecessarily redundant  and we will introduce a pseudo-predicate notation according to the following formal scheme. given a conjunction of a number of binary predicates with identical first arguments  transform the first argument into a pseudo predicate. transform all binary predicates into arguments at odd numbered positions  and insert all second arguments at even numbered positions. in symbols: 

this transformation is syntactic sugar and has no influence on the meaning of the representation which depends on the combination of system primitives  arcs . therefore all the a1's that will be given in the following sections are to be understood as examples. 

　　the creation of logical circuit board diagrams from a knowledge base is not addressed by a number of commercially available computer aided drafting systems as well as research on cad  layout systems  and routers  1 . work has concentrated on layout and routing of physical diagrams. logical diagrams arc usually created with a graphics editor or by computer from hand sketches . 
　　we are interested in layout and routing of logical circuit diagrams. physical diagrams created by cad systems have to be realized in hardware  and therefore the layout is usually optim ized for signal length  area consumption  power consumption or heat dissipation. none of these requirements exist for logical diagrams. rather one wants to create pictures that are optimized in a  human factors  sense  lo . the described difference can best be compared with the shift in attention in programming language research from space and time efficient programs to read able and maintainable languages. 
　　physical and logical routers also differ in their initial problem setting. a physical router prohibits wire crossings and makes use of different layers and  vias  to avoid them. a logical router permits wire crossings. it uses a special symbol  usually a dark dot at an intersection  to mark clearly whether a crossing is meant to be an electrical connection or not. 
def: intelligent machine drafting  imd . 
intelligent machine drafting is the activity of automatic creation of a cognitively appealing logical diagram of a sys tern from a knowledge base which contains no numerical 
　　coordinates of the components of the system. the application of imd to circuit boards implies the need for a module that creates cognitively appealing layouts of all components and a logical  as opposed to physical  router that connects them. 


　　imd has turned out to be an interesting problem from a theoretical point of view. it used to be the working method of engineering  and is still common  that a design engineer would send a hand sketch to a draftsman who would then draw a nicely laid out version of it. the job of the draftsman is usually considered a  low intelligence  position  requiring only a minor level of technical education. however this  low intelligence problem  differs from many  hard** ai problems because it cannot be translated easily into a symbolic representation. solving 1mi  problems by humans requires use of  part of  the perceptual system  and possibly of the imagery system  both domains which researchers have not yet related well to the domain of problem 
solving. 
	a. 	imp for circuit board display 
　　we have defined a very limited class of objects called a*m* which is a simple generalization of the adder-multiplier of fig. 1  and we have implemented a fully automatic layout and logical routing program for this class. a formal description of the class a*m* has been formulated. however  we will limit ourselves in this paper to an intuitive explanation. 
- a device of class a*m* consists of at most one main object which is assumed to be a large box graphically containing all objects asserted as its parts. in the absence of this main object the screen itself is considered the main object. 
signal flow in an object of the class a*m* as well as in its parts is strictly from left to right  with no feedback at any stage. 
the  signal length   maximum number of components a signal has to pass through from system input to system out put  and the  signal width   maximum number of components that are active in parallel  assuming constant delay for every component  are small enough that linear chains of components can be constructed that will fit into the given main object  leaving enough additional space for wiring. 
- the main object as well as all its parts have ports. besides that there is no second level of the part hierarchy.  the ports of the main object are shown as little black boxes in fig. 1.  
　　the current implementation makes a few additional assumptions which are not part of the a*m* definition  which however do not impose severe loss of generality and will be eliminated in the future. among these assumptions are the constancy of the port size for all components and the assumption of 
small variation of size among components. forward jumps of connections have not yet been implemented. 
　　for efficiency reasons there is no backtracking programmed into the router  therefore one can design pathologically unsolvable cases rather easily  which does not currently concern us  given that the  general purpose routing problem  has not yet been solved either . work on imd as well as on the display of physical board diagrams from a knowledge base have motivated our work on graphical deep knowledge  which will be defined in the next sections . 
ill graphical deep knowirlffipflf 
	a. 	definition of graphical deep knowledge 
　　a large number of scientific fields make marginal to extensive statements about the representation of knowledge dealing with forms and colors. space limits us to mention three main areas  natural language graphics  knowledge based graphics 
 1   and the imagery debate between  imagists   1  and  propositionalists   1 . the existence of some propositional representations is now widely accepted in all camps. however  many researchers seem to gloss over the details of their representation  just stating that problem so and so could be done with a list of propositions. kosslyn's implementation  a notable exception   implies an important criterion for a propositional representation of forms  namely that it can be used to create actual pictures. we want to call this criterion projective adequacy. 
　　a system that also permits reasoning based on shapes or positions of objects will be said to demonstrate deductive graphical adequacy. the type of reasoning permitted is either analogical or propositional. in order to avoid any possible terminological confusions we will shun the terms  spatial knowledge    visual knowledge  and even  graphical knowledge  and use the term  graphical deep knowledge . 
def: graphical deep knowledge 
a knowledge base is said to contain graphical deep knowledge if at least part of its knowledge exhibits deductive graphical adequacy  and part of its knowledge exhibits projective adequacy. 
the term  deep  is used in analogy with deep structures in linguistics. 
　　one major goal of our research is to create a base of graphical deep knowledge that is adequate for displaying and reasoning about objects in general and about the domain of circuit boards in particular. our current analysis of graphical deep knowledge is given in the following sections. 
b. form knowledge 
objects may have individual forms or inherited forms. 
	ml  object d1 form xand modality function  	 l  
m1  object d1 type and-gate modality function   1  m1  sub-class and-gate class boolean modality function   1  m1  class boolean form xboolean modality function   1  
 1  describes an object  individual  dl that has a form xand. the last binary predicate  modality  is used to discriminate between different display modes. circuit boards permit display of their wire plan  logical or functional representation  and of their physical structure. the forms used for these two displays are usually different  therefore the form proposition must be qualified by the display modality for which this item of knowledge is valid. 
　　a form like  xand  is at the same time a node in the semantic net and a lisp function that  if executed  would draw a specific form. form functions are parameterized by the starting position. therefore one form function can display the same object at different positions  but no other modification is possible. 
 1  assigns d1 to the class of and-gates which are by  1  recognized as a sub-class of the class of boolean components which by  1  are all assigned the same form  namely xboolean. we have never found it necessary to inherit a form using an intermediate class. 
	c 	position specification 
　　a large number of representations for positions is possible. all object positions refer to the position of an object's fixed reference point 
　1. concrete end fuzzy absolute positions m1  object dl abspos m1  x nx  y 1 x   modality function   1  
 1  describes an absolute position of dl. the position is given by the substructure m1 which contains actual coordinate values. 
geller end shapiro 1 


1 	knowledge representation 

m1 object d1 relpos ml1 x 1 y-1   1  modality function  
	m1  object d1 sub-parts d1 modality function  	 1  
 1  shows a part assertion  a descriptive tool that will be reviewed later on. because of  1  the relative position asserted by  1  will be interpreted as being relative to d1. 
　　combinations of the representational constructs introduced are in general possible. for instance an implicit reference object may be used with all types of relative coordinates  including fuzzy ones  1  1 . 
   ml1  object d1 frelpos left modality function   1  m1  object d1 sub-parts d1 modality function   1  d. inherited relative positions- if one adder has its first port at half a body length from its reference point  then this will presumably hold true for all the adders in the system  and one would not want to assert this over and over again. a solution to this problem is to make the relative position itself inheritable. this option is exemplified by the following set of propositions. the relative position is given in reference object coordinates and inherited through an intermediate class  half-adder . 
m1  object d1 type half-adder modality function   1  m1  object dlo sub-parts d1 modality function   1  m1  sub-class half-adder class adder modality function   1  m1  object dlo form xadd modality function   1  m1  class adder relpos m1  brx 1 bry .1   1  modality function  
　　 1    1   and  1  specify the relative position of d1 which is inherited from the class  adder ;  1  specifies the reference object dlo by force of its super-part relationship to d1.  1  is necessary to permit the derivation of the size of dlo which in turn is necessary for the computation of reference object coordinates. 
1. logical reasoning with fuzzy positions 
　　the following structure is a sneps rule that expresses the fact that  if one object is left of another object  then the other object must be right of the first object and vice versa . for a detailed explanation of the structure of sneps rules  see  
m1 avb v1 v1 v1  	 1  thresh 1 arg  m1 object vl rel-to v1 modality v1 frelpos left  arg  m1 object v1 rel-to vl modality v1 frelpos right   
if the knowledge base contains the absolute position of b and the fuzzy position of b relative to a but no positional information about a itself  then a's fuzzy position can be derived with rule 
 1  or a variation of it. 
d. parts. clusters. and assemblies 
　　part hierarchies are a commonly used construct in ai . our research has indicated that a part hierarchy alone is not sufficient for graphical deep knowledge representations. we have added two other types of part-like hierarchies  called assemblies and clusters. 
　　the display of a complicated object with several levels of parts might be impossible on a limited resolution display device. a natural way to limit the complexity of such a display task is to limit the number of levels of the hierarchy that are actually displayed. this is a very elegant solution because it does not require the introduction of any new representational construct. 
　　 1  showed our representation of a simple part relation. an object can of course have more than one part. the ubiquitous modality attains a special importance for part hierarchies. circuits like and gates  or gates etc. are displayed as single objects in a logical diagram. in real hardware there are usually four binary and gates in a single chip. these four gates might be parts of different logical units. however  in a physical representation all four of them must be parts of the same integrated circuit. 
1. assemblies 
　　work on the maintenance part of the vmes project has led to the realization that certain objects should never be displayed without their parts. for instance  a port is a part of a multiplier  but a multiplier should never be displayed without its ports. sub-assemblies are therefore objects that have a real part-whole relation to a specific object and which are supposed to be displayed whenever the object they are part of is displayed. 
　　the representation of sub-assemblies is similar to part whole relations  except that the arc  sub-assems  is used instead of  sub-parts . 
	m1  object dlo sub-assems d1 modality function  	 1  
1. clusters 
　　printed circuit boards sometimes show groups of objects that stand in a logical relation to each other  comparable to a part-whole relation. nevertheless they are neither sub-parts nor sub-assemblies. sub-parts and sub-assemblies have a main object that is itself displayable  i.e. that has a form. however  a grouping of components might consist of objects of the same size and importance  none of which deserves the status of main object. fig. 1 shows a voltage divider and a t filter which are typical examples of such circuits. 
　　a grouping which exists only as an abstraction is called a cluster. if one combines the concept of cluster with the concept of level a dilemma emerges. either the abstract object is left out of the hierarchy  which is undesirable  because anything that seems natural to a person should be directly representable in the network  lp!    or the abstract object is put in the hierarchy and the objects of the cluster are made its parts. but now the idea of creating simplified displays by limiting the number of levels displayed does not work any more  because the abstract object is not displayable in the same sense as real objects are. moreover if one is willing to give an abstract object a symbolic form  then both the symbolic form as well as the cluster elements would be displayed if one wants to see all the levels of the part hierarchy. this would complicate the display unnecessary. 
　　our answer to this problem is to create an additional hierarchy which stands somewhere in between a part hierarchy and an abstraction hierarchy. if a is an object  without form  which has sub-clusters ft  c  and 1  then a will be displayed only bydisplaying ft  c  and d. however if a partial display is enforced in a way that would exclude the level of b  c  and i  from showing  a will be displayed symbolically by a box  akin to the display format in block diagrams. fig. 1 shows the new display format for fig. 1. the network representation of a sub-cluster is shown by  1 . 
	m1  object dlo sub-clusters d1 modality function  	 1  
e. attributes and attribute mappings 
　　one important factor in designing a system based on graphical deep knowledge is a clear separation between icons and the objects that are represented by these icons  an observation that has been made by others also . this separation forces one to 
	geller and shapiro 	1 


distinguish between attributes of objects and attributes of pic* tures. a typical example of an attribute of a picture is blinking. on the other hand  faultiness is an attribute of a component  not of the picture of a component. attributes like faultiness cannot be displayed directly and therefore have to be symbolized with pictorial attributes. 
     attributes are represented by the name of an attribute-class with 1 to 1 positions for attribute values. the following exam ples show an attribute with no attribute-value  1   an attribute with one position containing the value  faulty   1 . and an attribute with two positions containing the values  left  and  1   1 . no need for any attributes with more than three positions for attribute-values has arisen yet. 

the attribute statements  1  -  1  apply to objects as opposed to pictures. 
     attribute classes are linked to functional that can be applied to form functions. such a functional is called a modifier junction.  1  asserts that d1 has the attribute-class  rotated  with two values -left  and  1   degrees   which requires a change to its form before it can be displayed correctly. therefore a modifier function that rotates forms is bound to this attribute class and the form of d1 is passed to it as first argument the attribute values  marked by the arcs atrb  atrbl  atrb1 and possibly atrb1  are passed in correct order as additional arguments to 
the modifier function. 
　　the binding of an attribute-class to a modifier function is asserted in the knowledge base. this makes it amenable to easy change by the user. utterances like 
1 	knowledge representation 
 represent the state faulty by red color and  1a  the state good by blue color.  
have led to this representational decision  linearity principle! . in  1b  the complete mapping necessary for  1a  is given. 
m1  attr state 	 1b  mod-func color modality function vall m1  expressed faulty expressed-by red  vail m1  expressed good expressed-by blue   
it binds the attribute-class  state  to the modifier-function  color . the two sub-structures at the end of the vail arcs show value mappings between object attributes and picture attributes. the object attribute of faulty state is represented by the picture attribute of red color  vall corresponds to atrbl and specifies value mappings that apply to the first attribute position. 
sometimes one encounters numerical attribute values as in 
 1 . representing a mapping between two large lists of numbers would be unwieldy to impossible. luckily in many practical cases the relation between the attribute value of a picture and the attribute value of the corresponding object is an identity function. this case is taken care of by using the attribute value of the object if there is no explicit mapping from object value to picture value. this also can take care of a mapping that is the identity function except for a few singularities. 
　　if a more complicated function is necessary to transform from object attribute-value to picture attribute-value then the mapping function has to be integrated in the attribute functional itself. 
　　the method used to associate an actual function with an attribute-class is identical to the method used for form functions. the node specifying a modifier-function is at the same time the name of a lisp function. 
　　an important finding of our work has been that there is inheritance along part hierarchies  something we have not yet seen in the literature. for instance  if an object is represented with an attribute like  scaled   then one would want all its parts to inherit this attribute. even more interesting is the fact that this inheritance does not apply to all attributes and depends on the attribute-class itself. if one asserts  for instance  the faultiness of an object then it would defeat the whole purpose of a maintenance system to have all its parts inherit faultiness. 
　　given that one can easily express a fact like  scaling is inheritable   one should also  linearity principle!  have a correspondingly simple representation in the network which is exactly what has been implemented. 
	m1l  inheritable size  	 1  
if  1  is part of the current knowledge base then the attributeclass  size  will apply to the parts of all objects for which the size attribute has been asserted. 
iv implementational state 
　　tina is going through its fourth cycle of implementation which is done in franz lisp on top of sneps. all of the shown knowledge structures  and more  are representable and retrievable from the network knowledge base  and most of them are interpreted in a way consistent with the descriptive semantics given in this paper. an older version of tina  has been applied to a real circuit board used for telecommunication purposes  pcm board . the imd system described has been used for the addermultiplier only. 

v conclusions 
　　the problem of intelligent machine drafting has been introduced  and it was argued that it is a theoretically interesting al problem which is sufficiently different from other cad tech niques to deserve separate investigation. the class a*m* has been defined informally  and a few additional restrictions of the current imd implementation for objects of this class have been given. the definition of graphical deep knowledge and a  par tial  task domain analysis of this area have been presented. a number of representational primitives have been introduced by way of example. these primitives comprise structures for representing knowledge about forms  concrete and fuzzy posi tions  and attributes. positions have been differentiated into abso lute and relative positions with explicit and implicit reference 
objects. pixel based coordinates  body coordinates and reference object coordinates have been introduced. part hierarchies have been discriminated into real part hierarchies  sub-assemblies  and abstraction-hierarchy like clusters of objects. the derivation of some of these structures based on the  linearity principle  has been demonstrated  by presenting examples for motivating natural language utterances. a generator function which creates 
graphical representations from a knowledge base containing the indicated structures has been implemented. 
