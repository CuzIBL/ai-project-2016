 
we present a general-purpose method for dynamically factoring a planning domain  whose structure is then exploited by our generic planning method to find sound and complete plans. the planning algorithm's time complexity scales linearly with the size of the domain  and at worst exponentially with the size of the largest subdomain and interaction between subdomains. the factorization procedure divides a planning domain into subdomains that are organized in a tree structure such that interaction between neighboring subdomains in the tree is minimized. the combined planning algorithm is sound and complete  and we demonstrate it on a representative planning domain. the algorithm appears to scale to very large problems regardless of the black box planner used. 
1 introduction 
many planning algorithms use independencies or loose interactions between components in the planning domain to find plans more efficiently. for example  hierarchical planners divide a goal into subgoals  high-level operators  using a decomposition of the domain into loosely interacting parts  e.g.   knoblock  1; erol et ai  1  . planning is done at each level separately  and later the subplans are pieced together to build a valid plan. other planners that use domain decomposition  e.g.   lansky and getoor  1   are not limited to domains with explicit hierarchical structure  but require backtracking across subdomains  and often replan for subgoals that already have valid plans. in general  domaindecomposition planning does not scale well because backtracking between subdomains can dominate the complexity of the search  and the domain decomposition is often ad hoc. 
　in this paper we present an approach to planning that scales to very large domains by taking advantage of domain structure. this approach is composed of two procedures: factoring and planning. the factoring procedure partitions a planning domain into loosely interacting subdomains that are organized in a tree structure. our factoring procedure uses decomposition algorithms from graph theory  and our contribution in this matter is in translating the planning-problem decomposition task into a graph decomposition task. after factoring  our planning procedure finds plans for multiple subgoals in each of the subdomains separately  using a generic black box planner. it searches over possible plans using complex action descriptors from each of the subdomains to form a plan for the overall goal. the planning procedure uses dynamic programming principles  and backtracking occurs only within a subdomain as part of the black box planner. 
　we prove that our planning procedure runs in time linear in the number of subdomains and takes time that is at most exponential in the size of the largest subdomain and the number of dependencies between subdomains. the type of factoring that we select is justified by this complexity result. we also prove that the combined algorithm is sound and complete  and that it can be applied to solve any planning problem using any generic black box planner for planning within subdomains. the complexity is upper bounded by the complexity of the black box planner on the unpartitioned domain. 
　we implemented and tested our planning algorithm on a simple domain to guide further development. we created two implementations  one with the ipp planning system  koehler and hoffmann  1  and one with the ff planner  hoffmann and ncbel  1 . we compared the results of our algorithm with those of ipp and ff  and have shown that for a single domain our results scale much better than these planners alone. the example validates our analytical results and shows that our planner's performance scales linearly with the size of the domain for this problem  motivating further development. 
1 factored planning 
in this section we present an algorithm for planning with a partitioned planning domain  where the subdomains are arranged in a rooted tree. each subdomain corresponds to a subset of the fluents  or single states  in the domain and a 
subset of the actions which use only those fluents. neighboring subdomains may share fluents and actions  and the ideal partition has the smallest number of shared fluents. we analyze this algorithm computationally and present a procedure for finding a tree partition with close-to-optimal properties. 
1 	partitioned planning problems 
we restrict ourselves to partitioned planning problems that are described using a simple propositional action language. a partitioned domain description is a labeled graph that describes a set of subdomains and the connections between the 

planning 	1 

subdomains. formally  a partitioned domain description is a labeled graph with 
  vertices: for all  is a 
planning domain description with a set of propositional //meflav  features of our do-
main that may change value over time   
a set of action  operator  definitions over 
  edges e over 	and 
  a labeling / of the edges in e. for every is a subset of fluents from 
　the label includes at least the fluents shared between but it may include other  e.g. global  fluents. we use the convention that action  refers to the action definition  also called action schema  and that at denotes the instantiation of the action in a plan. we say that action is in subdomain iff it is defined in 
　we specify the preconditions and effects of actions in ai using the simple language of situation calculus  with prepositional fluents   and allow actions to have conditional effects. we use the simple compilation technique of  reiter  1  to provide monotonic semantics for this language  and avoid the frame problem . all of our results apply to the pddl language  fox and long  1  as well. pddl is the representation language used in our example  section 1  to model the domains  the subdomains  and the plans. 
1 	planning algorithm 
here we present our planning algorithm  partplan  figure 1   which finds plans in a partitioned domain. we use the following notation. for p a set of propositional fluents  is the language of p  i.e.  the set of propositional sentences that can be built with p. 
high-level overview 
partplan processes a partitioned domain tree iteratively from the leaves to the root  the subdomain that holds the goal of partplan . it selects a leaf subdomain  tries to build plans for each of a set of possible preconditions and goals  step 1b   records the successful attempts  adds them as new  macrolike  actions to this leaf's single parent subdomain  step 1c   and removes that leaf subdomain from the graph. 
　the result of planning in each subdomain is not a complete plan  but rather a compilation of capabilities  which contain both subdomain actions and capabilities of descendant subdomains. generally  every subdomain's capabilities are those plans that it can find  using its own actions and capabilities of its neighbors  that affect the fluents that it shares with its parent subdomain in the tree. capabilities of a subdomain are shared by sending a message to the parent domain containing a complex action describing the capability. 
　when the tree is reduced to the single subdomain  after the iterative processing and removal of leaves  that contains the problem goal  we perform planning in that node to achieve the goal condition  based on the capabilities from the  eliminated  child subdomains  step 1 . then  the plan found by this subdomain is expanded into a plan that achieves the overall problem goal  using the actions of this subdomain along with the reported capabilities of the children in the tree. every capability that appears in this plan is expanded into a subplan by the subdomain that reported it. those subplans can themselves contain capabilities that are then expanded  and the process continues until the plan contains only the original domain actions. 
the simple algorithm is incomplete 
the view presented above leaves the exact nature of planning in each subdomain unspecified. it suggests  roughly  that planning in each subdomain takes the form of finding a plan that starts from some initial state of local fluents and reaches a specified end state of local fluents. unfortunately  limiting ourselves to this kind of message from children subdomains to parents is incomplete  as demonstrated in the following example  see figure 1 for an illustration . 
charger battery l full 
battery1 full second powe 	line robot actions: 
charge  switch 
fluents: 
battery i full battery 1 full second power line upgraded actionsadd line segment 
fluents: 
battery 1 ..full 
battery 1 iu ii 
sccond power lme one segment two scgments figure 1: subdomains for upgrading a battery charger. 
　consider a scenario in which we have a charger that can charge batteries and a robot that can connect power cables together and that uses two batteries. initially  every charge action of the charger charges exactly one battery  so two charge actions are required to charge both of the robot's batteries. however  if the charger is connected to an additional power source  then a single charge action charges two batteries at once. our task is to upgrade the charger so that it can charge two batteries at once. for this  the robot needs to build a power line that is long enough to reach the charger  and the charger needs to switch to using both sources. thus  building this line requires multiple charges interleaved with adding lines. a plan that solves this problem needs to charge the robot's batteries  add a line segment  charge again  add another line segment  charge again  add the final line segment  and switch the charger to the new mode. 
　we want our factored-planning approach to apply to any given planning problem and be complete  i.e.  find a plan if there is one  regardless of the plan partition. we will show that there is a partitioning of this problem so that simple messages of the form  if x holds  then 1 can make y hold  are not sufficient in a directed tree to find a complete plan. messages of the form  if holds  then 1 can cause if you subsequently make hold  then 1 can cause to hold  are required for domains with interleaved interactions as in this example. these complex messages can be extended for larger numbers of interleaved preconditions and effects  and the algorithm we present allows that type of message. 
　one possible partitioning of the example above is presented in figure 1. on the left-hand side we include the actions charge and switch  and the features battery i. full  battery1.full  second jpotver. and upgraded. the action charge has the following effects and preconditions: 

action switch has the following effects and preconditions: 
  if second .power dine  then switch causes upgraded. 
　on the right-hand subdomain we include the action add dine .segment  and the features 
--------------- 	one.segment  and 
two.segments. the action add dine.segment has the following effects and preconditions: 
　now  consider all the possible simple messages  i.e.  messages of the form  if x  then 1 can cause y to hold . we require each of those x and y to be a combination of fluent values for fluents that are shared between the two subdomains. in our case  those shared fluents are battery1.full  and second.power.line. 
　assume that we chose the root node in our partition to be the left-hand side subdomain. the only non-trivial message that the right-hand side can send is  then 1 can cause 
　we would like to find a plan in the root subdomain  the left-hand side subdomain  that uses these messages and that results in the charger being upgraded. note that this is not possible with only simple messages. 
　one way to resolve this problem is to allow more complex messages. particularly  in our example  we can allow the following message to be sent: 
　if our planner on the left-hand subdomain can handle such complex actions  then it can use such a message to find a plan that succeeds in upgrading the charger. indeed allowing this kind of messages makes our planning algorithm complete. this is consistent with results achieved by  amir and mcllraith  1; mcllraith and amir  1  for inference in first-order logic  and is also consistent with  amir  1  that presented results for projection in factored domains. 
　an alternative to using such long messages is to include internal  i.e.  not shared  fluents in shorter messages. however  this has the effect of breaking the encapsulation and structure that we strive to employ  reducing our problem to that of traditional planning on the entire domain and forcing backtracking across different subdomains. 
detailing the planning algorithm 
procedure partplan is presented in figure 1 and its subroutines are presented in figures 1 and 1. partplan is given a partitioned planning domain a 
set of initial conditions indexed by subdomain such that is the initial state for the fluents in a goal state condition in for root node   and search parameters  interactions  and d  depth . it returns a plan for achieving the specified goal conditions in the given domain  if such a plan exists under the search constraints. notice that we show goals that can be represented in a single subdomain. we illustrate how to get around this restriction in section 1. 
figure 1: planning with subdomains 
we discuss two of the subroutines of partplan in detail. 
the first  singleplan  is presented in figure 1. it determines whether there is a plan with at most actions in subdomain that starts with the state described by the initial state 
and arrives at a state that satisfies we require the plan to have preconditions interleaved within effects  corresponding to the number of interleaved conditions in the message  e.g.  in  1   the message sent in our example above  
 to find such an interleaving message the planner uses fluent-setting actions  which set the fluents in 
to a truth assignment in one of they correspond to  yet undetermined  action sequences that can be performed in ancestor  or cousin  subdomains. if the parent subdomain wishes to use the result of this planning  it will need to find a sequence of actions that replaces these fluent-setting actions. 

planning 	1 

figure 1: planning in a single subdomain  and storing a plan. 
　subroutine sendmessage  figure 1  takes a plan found by subdomain   stored in table t by subroutine storeplan  and adds a new complex action definition in the parent subdomain  whose initial state and goal are fluents found in this new action contains complex action definitions from child subdomains and actions local to plans execute sequentially to ensure that the preconditions for complex actions are satisfied at the appropriate times. 
1 	properties of partplan 
in this section we prove the completeness and soundness of partplan and analyze its computational behavior. we pursue the intuition that our planning algorithm can find a plan more efficiently if the number of interactions between subdomains is small. the maximum shared fluents across the partition determines the time complexity of the algorithm. 
definition 1  width of a plan  let 	be 
a partitioned planning domain tree  and sequence of actions. the width of for g is the largest  minus one  for which there is subsequence of actions and 
an 	edge 	in g such t h a t a r e in subdomains 
on different sides of 
the plan-width k for our partitioned domain is the least that will allow partplan to find a plan. in our example in figure 1 
1 because for 1 there is no message that we can send that will allow us to find a plan in the left-hand subdomain. 
also  notice that every plan for d has width at most 
　a tree decomposition of planning domain d is a partitioned domain description tree  satisfying the run-
ning intersection property: if a fluent / appears in and also in pj  then all the edge-labels on the path between in g must include /. 
theorem 1 let g d  e l   be a tree decomposition of planning domain d with m subdomains. partplan g  i  q  k  d  returns a plan n of that achieves q in d starting from i  if and only if one exists with width at most 1k and at most d   m actions. 
　the role of d is to bound the length of the complex actions to at most d interactions; bounding this variable can be used in 

an iterative deepening algorithm to find plans with the shortest possible complex actions. the parameter  can be used similarly  and its role is to restrict the length of messages that are sent from children subdomains to parent subdomains. 
corollary 1 iterative deepening of search parameters in partplan is sound and complete planning algorithm. 
　the time bound for procedure partplan is exponential in the number of fluents in the links between subdomains and the plan-width of the partitioned-planning problem  but is linear in the number of subdomains. 
theorem 1 partplan 	terminates in time 
being the largest 
number of action symbols and largest number of fluent symbols in any subdomain  respectively  and i being the largest number of symbols in for all subdomains 
1 	automatic factoring 
theorem 1 assumes that a tree decomposition g b  e l/  is given. for a planning domain d we can build the decompositions by hand  adding a knowledge-engineering and planning perspectives to the domain description. we can also find a decomposition automatically using graph decomposition techniques. in this section we describe such an algorithm. 
　the notion of tree decomposition in planning domains is a special case of tree decomposition in graphs  robertson and seymour  1 . the width of a tree-decomposition is the width of the largest subset in the tree minus one. the treewidth of a graph g v  e  is the minimum width over all tree-decompositions of g minus one 
　finding optimal tree decompositions is np-hard. nonetheless  there are several algorithms that find close-to-optimal tree decompositions  e.g.   becker and geiger  1; amir  
1    and there are also some heuristics  e.g.   kjaerulff  1   that have been applied successfully in inference algorithms for bayesian networks and theorem proving. 
　the reduction of the planning decomposition problem into a graph decomposition problem is as follows. we create a graph g v  e  with a vertex v for every propositional fluent in our domain d. e is the set of edges in this graph  and it includes an edge between v if and only if there is an action definition that includes both v  u  either as a precondition or as an effect . in the next step we find a tree decomposition  1  t   	for this graph 
 using one of the algorithms mentioned above. finally  we create a partitioned domain description as follows: the vertices  domain descriptions  are chosen such that  includes all the fluents in and  includes all the action definitions that can be expressed with the fluents in the edges in ed are the tree edges  f  in t. the labeling i of a edge is the set of fluents that are shared between the vertices   i.e.  

　this algorithm complexity is taken up by the decomposition of the graph g v e . most heuristics are at most o and one approximation algorithm  amir  1  takes time 
  fc is the treewidth of g  and is typ-
ically much smaller than n . this is an upper bound on the time taken by the planning domain decomposition algorithm. 
1 	distribution of the goal 
so far we have assumed that the goal is represented in the set of fluents of a single subdomain. in many planning problems the goal consists of a conjunction of conditions on many different fluents. if we create a single subdomain that includes all those fluents  then the width of the tree decomposition will be high  and so will be the planning time. instead  we can distribute the goal between subdomains  as we show here. 
　assume that we are given a tree decomposition g d  e  i  of domain with let a goal condition be where qx is a part of the goal represented with the fluents in pi. arbitrarily  choose a single subdomain  as the root of the tree. to each subdomain we add a new fluent symbol  and a new action  for every leaf subdomain  precondition is and its effect is qt. for every internal node in the tree  with c h i l d r e n s precondition is and its effectis 
　when planning with this revised decomposition we use a single goal  in subdomain the revised planning problem in this tree decomposition is equivalent to the original one  and we have reduced a  worst case  exponentially large problem down to a linear one. 
1 an extended example 
consider the following domain  where a robot can move around in a set of rooms connected by doors as a ring  cimatti and roveri  1 . each room has a window which can be open  closed  or locked. the robot has four possible actions: move clockwise  move counterclockwise  close the window of the current room  and lock the window of the current room if the window is already closed. the goal state is that the windows of all the rooms are locked. the start state is the robot in one of the rooms and some configuration of windows open  closed  and locked. in this simple example we assume that the state of windows and the location of the robot are known. in other words  the initial condition is one of  possible initial configurations. 
define the following set of fluents: 
  agent location: 
  windows closed: 
  windows locked: 
  windows locked from room 1 up to room 
the 	fluents 	represent 	conjunctions 	of the fluents from parent and ancestor 
subdomains in the tree  as in the previous section. define the following set of actions and corresponding effect axioms:   actions: close  
planning 	1   effect axioms: 
　in the last set of axioms we use the convention that addition and subtraction are modulo the number of rooms in the ring. in other words  the next room after is mod 
　for the ring of rooms  an obvious partition turns out to be a good one. specifically  we associate each subdomain with one room  letting the fluents and actions for subdomain dt be 

　each subdomain contains all actions whose preconditions and effects mention only fluents in that subdomain. 

figure 1: subdomains for ring of rooms. 
　the graph of subdomains is not a tree  see figure 1 . one way to turn it into a tree decomposition is by removing one of the edges completing a cycle and adding  in the worst case  the label of that edge to the rest of the edges in this graph  this is an example of a more general algorithm that is outside the scope of this paper; see  amir and mcllraith  1  . the result is presented in figure 1. the graph g connects every two consecutive subdomains but   for m being the num-
ber of rooms  and subdomains . the labeling on the edges is originally after transforming to graph into a tree we get the labeling 


figure 1: tree decomposition for ring of rooms. 
　we show how partplan finds a plan for this domain. we set the goal to be which is expressed in the fluents of subdomain rn. we set t - to be the root of the tree. 
　we take node whose parent in the tree is = 1  and find all the plans possible with one such plan is  if the robot is in room 1 and the window is open  then close  lock and move clockwise.  we find a plan for d : 
both pre1 eff1 are complete state descriptions in 
there is a plan that singleplan d 1  i1   pre1    ef 1   ett 1  
d  will return. thus  one message that is sent to subdomain  is  if in some state the robot is in room 1  then d  has a sequence of actions that results in all 1 being true and the robot moving to room 1.  in more precise terms  the definition for this capability  is added to subdomain by subroutine sendmessage. 
　now  we take node whose parent in the tree is 1  and find all the plans possible with one such plan is   if in some state the robot is in room 1  then move counter-clockwise  execute a subdomain-1-action  then close  lock and move clockwise.  we find a plan for do-

these are all complete state descriptions in z' 1 . there is a plan that s i n g l e p l a n   e f f     d  will return. the message that is sent to subdomain .   is roughly speaking  if the robot is in room 1  then d1 has a sequence of actions that results in all1 being true . in more precise terms  the definition for action  is added to subdomain by subroutine sendmessage. 
　this method continues for all the subdomains up to that contains the goal. subdomain can conclude that there exists a plan for closing and locking all the windows  satisfying allm. if the initial condition of our problem specifies that the robot is in room r  then starting in subdomain dr wc will already have a plan independent of the position of the robot. this will lead to a complete plan in subdomain m. 
　when the plan is found in subdomain the algorithm then goes on to expanding the complex actions into their capability plans. for example  when the complex action c1 i of subdomain 1 is encountered in the plan it is expanded into a segment that is placed instead of r 1ti in plan it results in a sequence of actions that is between the state satisfying condition eff 1  i.e.  when the robot appears in room 1  and the state satisfying eff1. 
　using this domain and associated tree decomposition above we implemented our algorithm to see that the run time scaled linearly as the number of rooms increased. the results are compared in figure  1   which shows four different planning algorithm on this domain as the size of the domain grows. for all runs  the optimal-sized plans were found. in very small domains  there is some constant time overhead involved in the partplan algorithm  but asymptotically the partplan algorithms begin to dominate because of the linear scaling with respect to the number of rooms. although this example is not rigorous enough to show the empirical dominance of the partplan algorithm for every domain  it does motivate further development of the ideas in real-world domains. 
1 related work 
some of the techniques that we apply have been used before in automated reasoning. best known are methods for reasoning with probabilistic graphical models  pearl  1j   logical theories  dechter and rish  1; amir and mcllraith  1  and constraint satisfaction problems  dechter and pearl  1 . the common principle for those applications is the advantage taken of low treewidth available in many domains. with a tree decomposition of close-to-optimal width  


figure 1: comparison of run time for ipp  ff  partplan-ipp  and partplan-ff. the figure on the left is for 1 rooms  the figure on the right is for 1 rooms. the scale on the ;y-axis is in milliseconds. 
these reasoning algorithms use two sweeps of the tree  an evidence collection and evidence distribution sweep  and the entire process is linear in the number of nodes. 
　similar techniques to these have also been used in probabilistic planning to find approximate policies for factored mdps  e.g.  lguestrin et al.  1    and also in the context of multi-agent stochastic planning with mdps. the main difference with this approach is that we find an exact solution  and we act in domains that do not have universal reachability  all states are reachable from all states   as is assumed in mdps. 
section 1 discusses approaches for multi-agent planning 
llansky and getoor  1; ephrati and rosenschein  1; wolverton and desjardins  1 . 
1 conclusions 
two contributions of our work are automated planning domain decomposition by minimizing subdomain interactions  and an algorithm to plan in this decomposed domain with no backtracking. the planning algorithm is sound and complete  and exploits a low treewidth partition for a particular planning domain  enabling planning to scale linearly with the domain size. our automatic factoring algorithm for a planning domain attempts to optimize the run-time complexity of the planner. theoretical results and empirical examples show that the planning algorithm scales well in domains with decomposable structure. 
　directions for future work in this area include the development of algorithms for richer domains and description languages  such as nondeterministic planning actions  stochastic actions  and actions involving duration and numerical parameters. our approach is built on the language of situation calculus  in which we developed our first version of the algorithms   leading us to believe that it will extend to these directions and more. our work connects automated reasoning and planning  and we expect to extend this connection to allow first-order decomposition of planning and other related problems  such as diagnosis and reactive control. 
acknowledgments 
the first author is supported under an onr muri funds 
n1-1  and n1-1  and nsf grant ecs-1. the second author is supported under an nsf graduate research fellowship. 