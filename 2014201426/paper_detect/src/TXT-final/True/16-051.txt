 
     in programming a computer to control a manipulator  the problem of avoiding obstacles present in the environment must be faced. this paper presents a simple world model containing the manipulator as well as obstacles  and describes an algorithm for guiding the manipulator to a specified destination point while avoiding collisions 
with obstacles. the algorithm combines a number of heuristics with a method for stepwise optimization based on a linear programming technique. a brief description of the computer program avoid and a sample of computer simulated tasks solved by it are presented. 
i introduction 
     one of the main problems in robotics is the problem of devising efficient computer methods to control a manipulator. a typical approach to this problem involves the use of information obtained from visual as well as other sensory feedback for specifying an internal world model in computer 
memory. having this model and an appropriate 
algorithm  the computer would hopefully be able to direct the manipulator to perform tasks requiring some intelligence and dexterity. 
ii world model 
     in the situation shown in figure 1  the  world  consists of a part of the euclidean plane containing the planar manipulator and the obstacles 1 and 1 . the manipulator is assumed to be a group of four links 1   1  1   1  connected by the revolute joints b   b   b   b1 . the first link i1 is connected to ground at the origin by the first joint b1 while the endpoint b1 of the 
last link 1  contains the jaws j  or some other type of terminal device of negligible size and orientation. thus  to describe a configuration  say  cnf   of the manipulator it will stiff ire to1 specify the vector of relative angles 
1  . the position of each joint b.  i=1 ... 1  in the plane is given by the formula 
		 1  
where the vector functions bj. are combinations of trigonometric functions. the set of all possible 
values forms a 1-dimensional state space ' the class of obstacles under consideration is restricted to convex polygons. the ith obstacle has vertices ai  1  ai 1..  and edges ai 1 
a.     . . . the position and shape of each obstacle is'assumed to be completely specified. 
	i l l 	basic task 
     assuming the path g  with the initial point g1 and final point g   for the jaws is specified in advance  the task consists in moving the 
manipulator from the initial configuration to a final one while avoiding obstacles. this problem could be stated as follows: given the initial configuration of the manipulator and the path g for the jaws  compute a continuous sequence of configurations such that  i  the first configuration in the sequence is the initial configuration;  ii  the jaws in each configuration in the sequence lie on the curve c and in the final configuration coincide with the final point g ;  iii  no configuration in the sequence intersects with any of the obstacles. it is presumed that the jaws in the initial configuration are located at the point g   and that neither the initial configuration nor trie path g intersects with the obstacles. 
     our aim is to devise a computationally efficient algorithm for planning manipulator motions  
i.e. capable of using the model described above for obtaining a curve in the -space such that the 
corresponding sequence of configurations should satisfy conditions  i - iii  listed above. the 
major difficulty arises from the fact that the manipulator moves in the plane containing 
obstacles whereas the state space   in which the control variables  move  is of an entirely different nature. 
	iv 	preliminaries 
¡¡¡¡¡¡first of all  the continuous decision curve in-space and the corresponding continuous configuration sequence are to be replaced with a finite  possibly small  number of points. this is to be done with care  however  since the existence of a finite sequence of permissible configurations  i.e. configurations free of intersections with obstacles  does not guarantee the existence of a continuous permissible sequence. to overcome this difficulty  the obstacles should be replaced with 1-covers  that is  the polygons which contain the obstacles as subsets and have at least€-wide free 
margins. this procedure has an additional advantage of enabling the original obstacles to have any shape. for simplicity  the symbols cnf and  will be used for the ith configuration in a discrete sequence and the corresponding vector of angles respectively  while cnf and will denote the next   i+l th  configuration and its angle vector. for computing a continuous sequence of configurations permissible with respect to obstacles  it will suffice to compute a finite configuration sequence in which all the configurations are permissible 
with respect to -covers and each one is close enough to the next  i.e. 
	 k=l ... 1  	 1  
the choice of 	depends on the value of€. now the manipulator motion reduces to a number of 
steps each consisting in computing an increment d 
	 k=l ... 1  	 1  
these increments enter into the linear version  1  
		 i=1 ... 1  
¡¡¡¡¡¡to simplify matters further  the path g for the jaws is assumed either to be a broken line with 
verticies g   g1 ... g   and segments g   g  ...  gn or to have been approximated with such a line. the jaws are permitted to move nearby this line in such a way that the distance between the jaws and the line should never exceed a tolerance constant  thus  the basic task has been reduced to securing the motion of the jaws along each of the n c o r r i d o r s i n succession. 
v overview of the method 
¡¡¡¡¡¡now we outline the major ideas and techniques of the avoid system  leaving details for sections 1 and 1. 
¡¡¡¡¡¡supposing all  have been computed  the current configuration enf is permissible  and the jaws j are inside the corridor cr.  the problem reduces to computing increments k= i  . . . 1  
which on substituting in  1  imply that 
1  inequalities  1  hold; 
1  the jaws in configuration  are inside cr.; 
1  the resulting configuration  is permissible; 
1  the distance covered by the jaws is maximized. 
here the design constraints are temporarily omitted. dropping condition 1 for a moment  the problem nay be viewed as a linear programming problem  lpp . indeed  condition 1 can be transformed into the form 

where f is a scalar linear function  sect.1   whilst condition 1 combined with 1 is just a 
linear constraint set  lcs . supposing such an lpp could be easily solved  see sect. 1   we get satisfying conditions 1 1. 	computing 
first from  1  and then  . from  1   we obtain cnf and can check it for permissibility. if is permissible  we replace enf with and proceed 
as before; otherwise  the lpp must be modified to 
render  permissible. by d e f i n i t i o n   i s not permissible if it collides with at least one obstacle. such a collision occurs  when either 1  j o i n t c u t s into e d g e o f obstacle 1; or 1  link .. cuts off v e r t e x c o l l i s i o n of type 1 takes place when j o i n t n its motion tries to run through edge a.. to prevent this  we can forbid the joint b-j to puncture the edge a. at the 
moment of collision  thereby forcing it to j ride the edge a.. let the edge a. have equation 

using  1   equation  1  can be transformed into the form 
		 1  
and appended to the lcs. clearly  a solution to the thus modified lpp is permissible if the detected collision of b. with a. is the only one at the moment. subsequent collisions of both types  if any  could be similarly dealt with one at a time. 
       the design constraints  which can be readily incorporated into the lcs  and the constraints resulting from conditions 1 above  put into the lcs earlier  are called permanent constraints  
whilst the constraints  1  are temporal ones. in sect. 1 it will be shown that as a result of the proper choice of a solving method  only minor modifications of a s o l u t i o n f o r the lpp are required to account for tne additional constraints 
 1 . 
       as long as the joint b. keeps riding the edge a.  the temporal constraint  1  remains in the lcs. sooner or later  however  either b. will reach an end of the edge a. and slide off  or it 
will take off from the edge. either of these cases is accounted for by dropping the corresponding constraint  i.e. by deleting the inequality  1  from the lcs. treatment of the take-off case requires no special care since it involves an immediate dropping of the constraint in question from the basis  see sections 1 and 1 . to account for sliding-off  a special checkup procedure has been set up in the avoid system for signalling to the control structure the fact of b. being off edge a. in either case the constraint in question is j eliminated  thereby cutting down on the number of constraints in the lcs. type 1 constraints  if any  are treated similarly. 

     summing up  it may be said that a major function of avoid consists in generating and solving a scries of lpps  each with a slightly different constraint set. some of the constraints  the temp-
oral ones  are inserted or deleted as a need arise  
reflecting interaction of the manipulator with obstacles. thus  the difficulty mentioned in section 1 is overcome stepwise by converting the restrictions imposed by obstacles in the vicinity of the current point into state space restrictions where they can be easily dealt with. avoid's ability to insert and delete these additional constraints at each step renders the system sufficiertly flexible. 
	vi 	the dual method in linear programming 
     now we will present briefly a particular implementation format for the dual method in linear programming as being most suitable for the lpp under consideration. there are two major features to the lpp to be solved. the first is the existence of a subproblem of the given lpp  solution to to which is readily available. subproblem here 
means another lpp with the same objective function and fewer constraints in the lcs. the second feature is the probable need for incorporating additional  temporal  constraints into the lcs after the solution has been obtained  which entails modifying the solution to account for the newcomers. both features are easily accomodated in the dual method format described below. 
     consider the following lpp: find x= x1  ... xn   which minimizes the linear objective function 
min f x  	 1  x 
and satisfies the constraints 

where all f. are linear functions.  1 - 1  constitute the 1subproblem. we proceed in two stages. first  the subproblem  1 - 1  is solved  i.e. a point x1 is found which minimizes  1  subject to 
the constraints  1 - 1 . this is a fairly simple task since our case  see section 1 :  i  inequalities  1  hold;  ii  inequalities  1  which combine the design constraints and inequalities 
 1  have the form 

for which constants h are easily computed. thus  the n-dimensional subproblem factorizes into n onedimensional ones  n=1 . the solution x1 for this subproblem is a vertex of the n-dimensional parallelepiped determined by inequalities  1   
 1 . the constraints generating the solution x1. are called basic. the second stage  involving the entire problem  1 - 1   consists in checking one by one whether the solution x1 found thus far satisfies each of the remaining constraints  1 . if it does  the process terminates  and x1 is the sol-
ution for the entire lpp; otherwise  the first violated constraint enters the basic constraint set at the expense of some other constraint which drops from the basis. the solution point shifts from x1 to some x1 with f x1   f  x1  . the process terminates when the entire list of constraints is run through without modifying the basis. it is seen 
now that a newly emerged constraint causes at most a slight modification in solution  which allows us to save on the bulk of initial computations. 
	vii 	structure of the planning algorithm 
¡¡¡¡¡¡in this section the planning algorithm of the avoid system is presented on a step-by-step basis. a simplified flow-chart for computing the motion of the jaws along a corridor cr1 from its back side to the front side f is shown in fig.1. more 
details are given in   
principal matrix 

¡¡¡¡¡¡box 1. here the principal matrix pm for the lpp is computed for the current configuration cnf. pm has 1 columns and  1+t  rows  where t is the number of temporal constraints in the lcs at the moment. column 1 consists of constant terms of the corresponding inequalities; columns from 1 to 1 contain their coefficients in x . row 1 contains coefficients f in x of the objective function f j+dj   where f . =1 is the equation of the front side of the corridor.  and nonnegative variables x are obtained from by linear substitutions 
 1 . rows from 1 to 1 contain permanent constraints  rows below 1 contain temporal constraints if any. coefficients in rows 1 to 1 are those from inequalities  1   whilst coefficients in rows 1 are determined by the fact of the jaws j moving inside the corridor  i.e.  by the formula 

or 

rows 1 and 1 feature coefficients for exemplary constraints for collisions of type i  for joint b  
involved in the collision  and of type 1  for link respectively. the derivation of formulas for 
and v is straightforward. 
     box 1. the initial basis is chosen by means of the jordan elimination procedure applied to the elements  1    1    1    1  of pm in turn. the number of eliminations required for solving this subproblem  cf. section 1  is 1 to 1. 
     box 1. now a solution for the entire lpp is obtained. the resulting values of x are to be used in formulas  1  for computing  . the corresponding value of the objective function f occupies the space  1  in pm. 
	box 1. the new configuration 	  i.e. angles 
	and positions of joints 	  are computed by 
formulas  1  and  1 . 
     boxes 1 and 1. having obtained   it is checked for collisions with the obstacles. if no collision is detected  control is transferred to box 1; otherwise  a proper temporal constraint is appended to the lcs  box 1   and the process of solving the new lpp resumes  box 1; see also section 1 . 
     box 1. after colliding with an obstacle  the joint keeps riding it  and the corresponding temporal constraint remains in the lcs for a number 
of steps. but after a while the joint either slides off the edge or takes off. to account for either event without detecting relevant intersection afresh at each step  the inheritable basis technique is introduced. if a constraint enters the basis  it is likely to remain there for the time being. therefore  after computing   all the necessary information for the collision  i.e.  type of the collision  number i for b.  etc.  is retained for future use. entering this most-likely to-be-encountered constraint into the lcs at the next step prior to the main body of calculations  box 1  saves the system a lot of trouble. sooner or later  however  any temporal constraint will dr p from the basis and therewith from the lcs. 
     box 1. this stage of computation involves outputting configuration  to storage as the latest one in the sequence and installing it as the current configuration cnf. 
boxes 1 and 1. clear without comments. 
	viii 	simulation results 
     to illustrate the performance of the computerimplemented version of the avoid system  some of the experiments run with it are displayed below. the chosen manipulator model has four links  each of length 1. bold lines are used for obstacles and configurations while  and corridors for the jaws are shown with thin ones. 
¡¡¡¡¡¡task 1  fig.1 . the coordinates of the three vertices of the only obstacle available are a - 1  -1   a - 1  -1   a =  .1  -1  whilst those of the -cover are  -1  -1    1  -1    1 -1 . the broken line for the jaws1 motion consists of a single segment with initial point g =  1 -1 .1  and final point g1= 1  -1 . it requires 1 steps of the system to solve the problem. the initial  no.l  and the final  no. 1  configurations are shown in fig. 1. in the process of planning the second step the joint b1 strikes on the edge 1 
of the cover  which leads to the insertion of a temporal constraint of type 1. during the planning of the fourth step  the link 1 cuts off the. vertex 1 while the joint b1 takes off the edge 1  which results in dropping the first temporal constraint. the second temporal constraint  remains in the basis until the end. the distance covered by the jaws for the sequence of 1 steps is 1  the mean step size being 1. 
¡¡¡¡¡¡task 1  fig.1 . the task site here features two obstacles 1 and 1 and the broken line  of 1 segments for the jaws. this rather difficult task takes 1 steps to accomplish. after a number of interactions of the links with both obstacles  the jaws happily reached their destination point g . 
task 1  fig.1  has been solved in 1 steps. 
	ix 	conclusions 
¡¡¡¡¡¡though the problem of planning manipulator motion in between obstacles has been taken up in a number of papers  see references  no comparative study of different methods for solving this problem has been attempted. various facets of our approach may be found in  l  -  . advantages of the avoid system are. as follows. 
¡¡¡¡¡¡1. the method is very simple. all the constraints imposed on the manipulator  including those implied by obstacles  are imbedded into a set of linear inequalities and treated uniformly by the dual method  neatly fitting the problem format. the amount of computation involved is fairly moderate. 
¡¡¡¡¡¡1. having encountered an obstacle in its way  the system does not attempt any precarious movements in space trying to get clear of it. instead  the trouble-maker is incorporated into the system for the time being  i.e. as long as it 
really matters. the moment the obstacle in question does not hinder the manipulator any more  it is dismissed for good. this device provides considerable flexibility for the system. 
¡¡¡¡¡¡1. the concept of inheritable basis employed throughout the planning process helps further to reduce the amount of computation. 
     the described method may be extended to 1dimensional tasks  and to curves and obstacles more sophisticated than those used in the actual work done. it could be integrated into a completely autonomous robot system as an intermediate level of planning manipulator motions. also  it could be used in a man-machine system for computing a path between points in space specified by a human operator. 
     as currently implemented  the avoid system has no facilities for computing velocities and accelerations. the task of modifying the system to enable it to compute dynamic characteristics will need further study. 




1 kobrinski  a.a.  kobrinski  a.e.  constructing optimal motions for manipulation systems  
 in russian . 	mashinovedenie  no.i  pp.1 1. 
1 loeff  l.a   soni  a.h. 	 an algorithm for 
computer guidance of a manipulator in 
between obstacles  transactions of the asme  journal of engineering for industry  ser.b  vol.1  no.1  pp.1  1. 
1 malyshev  v.a. 	 representing external 
environment  planning  and constructing 
programmed manipulator motions   in russian . izvestiya akademii nauk  tekhnicheskaya 
kibernetika  no.1  pp.1  1 
1 malyshev  v.a.  timofeev  a.v.  an algorithm for constructing programmed manipulator 
movements allowing for design constraints and 
obstacles  in russian . izvestiya akademii nauk  technicheskaya kibernetika  no.1  pp. 1  1. 
1 pavlov  v.a.  timofeev  a.v.  constructing and stablizing programmed motions for a 
movable robot-manipulator   in russian . izvestiya akademii nauk  tekhnicheskaya kibernetika  no.1  pp.1  1 . 
1 piper  d.l.  the kinematics of manipulators under computer control. stanford artificial intelligence project  memo ai-1  stanford university  stanford  1. 
