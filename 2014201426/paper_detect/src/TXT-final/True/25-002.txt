 
we present an abductive semantics for general propositional logic programs which defines the meaning of a logic program in terms of its extensions. this approach extends the stable model semantics for normal logic programs in a natural way. the new semantics is equivalent to stable semantics for a logic program p whenever p is normal and has a stable model. the abductive semantics can also be applied to generalize default logic and autoepistemic logic in a like manner. our approach is based on an idea recently proposed by konolige for causal reasoning. instead of maximizing the set of hypotheses alone we maximize the union of the hypotheses  along with possible hypotheses that are excused or refuted by the theory. 
1 	background and motivation 
in this paper we investigate the relationship between abduction  logic programming  and other nonmonotonic formalisms.1 this investigation is interesting for several reasons. firstly  abduction as a form of nonmonotonic reasoning has gained a lot of interest in recent years  and exploring the relationship between different forms of nonmonotonic reasoning is of interest in itself. secondly  as we will show in this paper  it is possible to define a simple and elegant extension of gelfond and lifschitz's stable model semantics  based on abduction. this new abductive semantics has the following properties: 
  the semantics is equivalent to stable model seman-tics for programs which possess at least one stable model. 
  a program p has a defined meaning unless p considered as a set of inference rules is inconsistent. in particular  normal logic programs without stable models are not meaningless. 
  the abductive semantics imitates the well-founded model in not assigning a truthvalue to propositions 
   *for simplicity we consider only finite propositional logic programs  that is programs with finite herbrand base  in this preliminary report. all definitions also apply to the genera  case. 
menlo park  ca 1 
whose assertion is self-contradictory. 
  the semantics is  without further modification  ap-plicable to logic programs that contain classical negation and so-called epistemic disjunction . 
  the semantics can be applied to other consistency-based nonmonotonic formalisms  including default logic and autoepistemic logic. 
we consider all of these properties as highly desirable. stable model semantics is currently the most widely accepted semantics for logic programs which have a stable model. we therefore believe that an extension of stable model semantics should preserve the meaning of those programs. on the other hand  many authors consider it a severe weakness of stable model semantics that not all normal logic programs have stable models; by contrast  the well-founded semantics always exists. our semantics overcomes this weakness  in the same manner as the well-founded semantics  by allowing a truthvalue gap for self-contradictory propositions. at the same time  it does not suffer from the weakness of well-founded semantics  the  floating conclusions  problem.1 finally  there has been a great amount of recent work trying to extend the expressiveness of normal logic programs by  among other things  adding classical negation and  epistemic  disjunction. it turns out to be a non-trivial task to adapt existing semantics to more general logic programs. it is therefore clearly an advantage if a simple semantics for normal programs can directly be applied to theses generalizations. 
　abduction  informally  is the generation of explanations for a given fact p. given a background theory t and a set of possible hypotheses or abducibles h  an explanation for p is a subset h' of h such that is consistent and p is provable from usually  there is a further acceptability criterion that distinguishes preferred explanations. in our approach we will consider negated atoms as hypotheses  a logic program  viewed as a set of inference rules  as the background theory. moreover  we introduce a simple criterion defining the acceptable explanations or  in our terminology  extension bases. we consider a proposition q derivable ' o m 
1
　　 floating conclusions are conclusions that are intuitively justified by case analysis yet underivable in well-founded semantics. the standard example is 
 well-founded semantics does not conclude c. 
brewka and konolige 


1 	automated reasoning 


brewka and konolige 
every positive conclusion should be 
demonstratable using the directed rules of the pro-
  minimal undefinedness: the number of undefined facts should be reduced as much as possible. 
as sacca and zaniolo show p-stable models do not guarantee minimal undefinedness: p-stable models can be proper subsets of other p-stable models. the authors therefore propose  that the minimal undefinedness principle should be enforced by restricting our attention to the class of p-stable models that are maximal.  unfortunately  maximality is insufficient to guarantee minimalundefinedness as can be demonstrated by the program p1 used earlier in the introduction: 
besides the uncontroversial maximal p-stable model we also obtain the p-stable model s = {~a b}. s1 clearly is maximal  as the addition of -c leads to inconsistency whereas the addition of c cannot be justified by any of the available rules. nev-

this program has no stable model  yet it has an extension generated by the extension base {~c} 
   extensions thus have the well-known property of the well-founded semantics  in allowing truthvalue gaps  that is  neither a nor ~a is in the extension of the above program. but like stable models  extensions do not suffer from the problem of  floating conclusions.  in the following example  the well-founded semantics does not conclude p  while p is part of every extension. 
a  - ~b 
b  -- ~a 	 1  
	p 	 - 	a 	 1 ; 
	p 	 -- b 
we discussed several related abductive approaches and their weaknesses in the introduction already. another approach which can  in a sense  be considered dual to ours is that of inoue . he distinguishes between a set of necessary rules t and a set of hypothetical rules h. a model in his system is a stable model of t u h '   where h' is a maximal subset o f / / such that a stable model exists. inoue thus dispenses with some of the hypothetical rules if necessary and sticks with stable semantics otherwise  whereas we leave the truth values of atomic propositions undecided if necessary. 
   a further - non-abductive - approach of interest here is that of sacca and zaniolo . it is based on the notion of p-stable models. such models are partial  i.e.  not all atomic propositions need to get a truth value. we cannot give the exact definition of this notion here  but want to stress that it is intended to capture  the three key properties considered highly desirable by researchers in this area . according to the authors these properties are 
  consistency: no proposition should be true and false at the same time in a model  
1 	automated reasoning 
ertheless  s1 does not minimize undefinedness: c has no truthvalue in s1 but is false in s1. in our framework the single extension corresponds to s1. there is no extension corresponding to s1 
1 	general logic programs 
in this section we will consider general logic programs  that is  programs where negations and disjunctions may appear in the head of a rule  and in addition there is a classical negation operator. it turns out that all we have to do is slightly generalize the notion of p-closure. 
as in   we use two negation operators  - and ~. 
-i is classical negation  while ~ is negation as failure to prove. by lit we mean the set of classical literals  and by lit +   the set of literals of the form / or ~/  where / is in lit. 
d e f i n i t i o n 1 a general logic program p is a set of rules of the form 

where all the literals ci and bj are in l i t + . 
note that this definition generalizes  slightly by allowing negation-as-failure literals in the head of a clause. as usual  by neg p  we mean the set of negative literals {-/ i either / or ~/ is a literal of p}. 
   we interpret disjunction in the head in the same way as gelfond and lifschitz  that is  it is epistemtc disjunction. the condition on the p-closure is that at least one of the literals in the head must appear in the closure. 
d e f i n i t i o n 1 let l be a set of literals from neg p . c is a p-closure of l if it is a smallest set such that 

note that there is not necessarily a unique p-closure of a program; however  if it has a consistent p-closure  then all its p-closures are consistent. the unique inconsistent p-closure is the set of all literals. we say l is p-consistent if it has a consistent p-closure. all other definitions from the last section can now be applied without further changes to general logic programs. here is an example involving disjunctions in the head of a rule: 
		 1  
we obtain two extensions  
 both have the cover neg p . note that is not an extension since its cover does not 
contain ~c. 
　the following slight modification of the last example involves a negation in the head: 
		 1  
now there is only one extension  namely { ~ a   ~ 1   ~ c } . 
   general programs can be used to implement many of the standard default reasoning examples. here is a bird example: 
we obtain one extension from the extension base 
 we omit the irrelevant literals 
p-cover of this extension is neg p . note that the set of abducibles is not an extension base as its p-cover does not contain as intended the more specific rule gets priority. 
　as with normal logic programs  extensions of general logic programs correspond to the answer sets of gelfond and lifschitz  when the latter exist. 
p r o p o s i t i o n 1 let p be a general logic program with no negation-as-failure literals in the head and suppose it has at least one consistent answer set. let cfacts l  denote the set of classical literals  without weak negation  tn l. cfacts is a bijective mapping from the set of extensions of p to the set of answer sets of p. 
   if there are multiple extensions  then they are always disjoint. 
p r o p o s i t i o n 1 if f and ff are two extensions  then f u f' is inconsistent. 
   it should be noted that the introduction of negation in the heads of rules  of either type  leads to a situation where the existence of extensions can no longer be guaranteed for all programs. the reason is that the programs themselves may become inconsistent. recall that a program p is inconsistent if the  single  p-closure of the empty set is inconsistent. it is not difficult to prove the following lemma: 1 
1
　　the proof is easy since  as mentioned in the beginning  we only consider propositional programs with finite herbrand base in this report. however  there are cases in which  for infinite neg p   there is an infinite ascending chain  and hence no extensions. 
l e m m a 1 let p be a logic program. p has an extension iff p is consistent. 
obviously  all programs where the negation sign  and  does not appear in the head of a rule are consistent and therefore have at least one extension. this includes normal logic programs. 
sometimes it is convenient and useful to restrict the set of abducibles to a proper subset of neg p . a logic program then consists of a set of rules p together with a set h y p of negated literals representing the atoms assumed to be false by default. the p-cover of a closure of a set of abducibles h hyp is  as before  the set of abducibles which are either assumed or refuted. 
   for instance  in the bird example we get the desired results if we restrict the abducibles to h y p = 
 again we get one extension containing -fly. the extension base is  note that the cover of this extension is h y p   whereas the cover of the closure of h1 =  does not contain  therefore is not an extension base. 
　there is also no reason why we should not sometimes let positive information  that is unnegated atoms  or even arbitrary formulas be contained in the set of abducibles. this gives us the possibility to generalize  negation as failure to derive  to  assertion as failure to refute . assume we represent the bird example in the following  equivalent way 
 1  
letting h y p = obviously yields results which are equivalent to those of our original representation using ab-predicates. 
   another interesting extension of this approach are prioritized logic programs. we may introduce explicit priorities among the hypotheses  e.g. in the style of preferred subtheories . the set of assumables h y p can be divided into preference levels h1 h1  . .. an extension base e  is preferred to an extension base e1 iff there is an i such that 

here is an example 
 1  
let h y p = and assume we want to give the quaker rule priority. this can be done by splitting 
h y p to hi =  there are two extension bases  h  and h1 it is easy to see that  according to our definition  the first one is preferred over the second one. 
remark: in this example this is the same as adding  to the program  that is we have a choice 
brewka and konolige 
whether we want to represent priorities explicitly using an ordering on hyp  or via additional rules using the available implicit prioritization. we suspect that explicit orderings make programs often more readable. note that in case of a conflict between explicit and implicit priorities the implicit ones win since only extension bases are compared in our definition of preferred extension bases  and these respect the implicit priorities. 
1 	default logic 
the same abductive method for general logic programs is applicable to default logic as well. in fact  default logic rules can be viewed as a generalization of logic program rules to the full sentences  rather than just literals. 
   we use the more general disjunctive default theories of gelfond et al.   since there is a direct correspondence to disjunctive logic programs. a disjunctive default has the form 

where all the arguments are arbitrary sentences 
　we begin by recalling the definition of an extension of a default theory  w  d . 
1 	automated reasoning 
the first condition is easily seen to be a consistency condition  as it is equivalent to saying the whenever a sentence appears in it does not appear in t s . the second condition is the familiar maximality filter. it is obvious that is maximal and consistent if 
precisely the requirement for standard exten-
sions. hence the following proposition. 
p r o p o s i t i o n 1 if the default logic theory has an extension and if w is consistent  then e is an abductive extension of  if and only if it is an extension 
of 
even in the cases where there is no default extension  there is an abductive extension. 
p r o p o s i t i o n 1 if a default theory  has a finite set of justifications  over all defaults  and if w is consistent  then it has an abductive extension. 
   finally  the relation between logic programs with classical negation and default theories pointed out by gelfond et al. holds for abductive extensions as well. 
p r o p o s i t i o n 1 let d be a set of defaults formed from the logic program p by the translation: 

d e f i n i t i o n 1 the closure of an ae theory is an abductive extension of a iff 

the main theorems about abductive extensions is that they always exist  if a has a finite set of modal literals  and that they are equal to ae moderately-grounded extensions  when the latter exist. 
p r o p o s i t i o n 1 if a ts k1-consistent and has a finite number of modal atoms that appear positively  then a has an abductive extension. 
p r o p o s i t i o n 1 if a is k1- consistent and has an ae moderately-grounded extension  then u is such an extension if and only if it is an abductive extension of a. 
the key feature of abductive extensions is that a proposition may be neither believed  lp  nor disbelieved  -lp  in the extension. this corresponds to the truthvalue gaps of logic programming extensions. morris  defines an alternative method for giving extensions to extensionless ae theories. however  he does so by adding propositions necessary to make the fixpoint consistent  rather than leaving the belief in the propositions undecided. 
1 	conclusion 
we have demonstrated an abductive approach to the major consistency-based nonmonotonic formalisms. our approach improves over previous attempts in having a straightforward relationship to the standard semantics for these formalisms  and generalizing to more complex languages. we have shown how the same idea  maximizing assumed and refuted hypotheses  can be used to establish extensions in logic programs  default logic  and autoepistemic logic. the common characteristic of these abductive extensions is that they always exist  for finite theories   they reduce to the standard extensions when the latter exist  and they allow a truthvalue gap in the cases where standard extensions do not exist. 
   given the abductive nature of the definition  it might be possible to use the abundant literature in abductive methods to find approximate proof-theory methods for these formalisms  see  for example   1  1  1  1  1  1  . 
