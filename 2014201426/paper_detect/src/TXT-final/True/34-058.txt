 
a computer-based i n s t r u c t i o n a l environment for students learning lisp is described. i t s design includes a lisp interpreter with an extended error-handling c a p a b i l i t y for evaluating functions w r i t t e n by students. students can ask questions in natural language about lisp in general and concerning specific lisp functions which they have defined. a fuzzy parser interprets the student requests and builds a lisp function which operates on a semantic network to determine i t s response. 
introduction 
　　　as an application area of a r t i f i c i a l i n t e l l i gence  computer-aided i n s t r u c t i o n  cai   has r e ceived considerable interest   1   . carbonell's scholar  1  is perhaps the best known example of a   m i x e d - i n i t i a t i v e   cai system. through scholar  students can ask questions about concepts relevant to the geography of south america. 
　　　koffman and blount  1  have developed a system to teach machine-language programming. this system can generate programming problems  and moni t o r and assist students in coding t h e i r solution programs. this system concatenates a small set of problem p r i m i t i v e s and associated solution routines in order to create and solve meaningful programming problems. 
　　　natural language understanding is becoming more important in cai system. many powerful parsers have been developed for very extensive subbets of english including wood's parser  a  and vlnograd's programmer  1 . these methods are beginning to be of use for question answering subsystems and for i n t e r p r e t i n g student responses. of p a r t i c u l a r interest is the work done by brown et al  1 . it is h i s semantlcally driven fuzzy grammar that has influenced t h i s research. 
　　　brown analyzed student scenarios involving electronic c i r c u i t trouble-shooting and discovered that the concepts and items discussed f e l l into small numbers of semantic groupings or categories. 
　　　these included: measurements  control sett i n g s   c i r c u i t elements  and c i r c u i t locations r e l a t i v e to the electronic c i r c u i t . the parse was then accomplished by a n t i c i p a t i n g and looking for phrases which matched these semantic categories where they might be appropriate. the parser's fuzzlness stems from the fact that words that are not understood can be skipped over. 
　　　teaching a programming language embraces two major tasks. 	one is presenting new material in an orderly controlled fashion. the other involves making available a f r i e n d l y   informative environment that allows experimentation  and that can r e cognize errors and misconceptions and point them out. with isle  interactive student lisp environment  we have concentrated on t h i s second item by developing a computer-based environment for lisp. the system knows about the structure and semantics of the lisp language and can answer questions about lisp data structures  concepts and functions; both those functions defined by the student and the primitives i n t e r n a l to the system. 
as an example consider the following dialogue: 

　　　notice that questions are answered with a complete statement to avoid any ambiguity  also note the use of the pronoun it by the student. some l i m i t e d anaphoric reference is permitted by the system to allow a more natural dialogue. 
1 
　　　the system is built around several subnodules as shown in figure 1. each stud ent command or request is received by the monitor where it is classified as input for either the editor  the evaluator  or the parser. any input which is not either a l i s t of edit commands or a function f o l lowed by an argument l i s t is assumed to be a request for information and so is passed to the parser. anything the parser cannot handle is rejected and the student is asked to rephrase or break up the question. 
　　　the parser and the semantic rountines work together to answer f a c t u a l questions about the lisp language  i t s data structures and functions  and about the functions the student has defined. the parse mechanism has a semantic basis in that s p e c i f i c words or phrases are looked for that r e fer to things the system knows about  i . e .   funct i o n s   d e f i n i t i o n s   or entries in the semantic 
network. these items are divided i n t o groups or categories that are semantically s i m i l a r . 
　　　semantically s i m i l a r items are those that might f i t in a given s l o t in a sentence or quest i o n   and that f a l l i n t o a superset c l a s s i f i c a t i o n such as data structures or function names. the result of the parse is an executable lisp function whose evaluation causes a response to be generated for the student. 
　　　the evaluator evaluates student functions when called upon  accepting nearly any lisp 1 constructions. when student errors are found  it reports the type of error and in what function it occured to the student. editor commands can be used to look around inside of function d e f i n i t i o n s and to i n s e r t   delete  and change parts of the d e f i n i t i o n . 
semantic categories 
　　　the islf- system uses four semantic categori e s . these categories allow the parser to be somewhat selective in choosing what to look for next while processing the student's input. the semantic categories are the f o l l o w i n g :  1  functions  1  function types  1  data structures  a  other general concepts. 
　　　each semantic category is represented in the implementation by a lisp function which w i l l check  beginning at the head of the current sentence  for a phrase that matches an element in that category. depending on the fuzziness set by the grammar at that moment  one or more of the i n i t i a l words in the current sentence may be skipped. 
　　　the f i r s t semantic category is that of funct i o n names. it is represented in the grammar by fnname. this category consists of a l l functions that are currently defined in the system; that i s   a l l subrs and fsubrs plus any functions that 
may have been defined as exprs or fexprs by the user. fnname and the other three semantic category matching routines a l l operate in the same manner. they operate l i k e any other grammar r u l e function in that they accept some t a i l of the i n put sentence. they can return nil if they f i n d no match at some point in that t a i l . if they do f i n d a match  they return the next t a l l  consisting of the o r i g i n a l t a l l minus the matched p o r t i o n   . 
　　　they also set the atom result with a global  cset  value that specifies what semantic elements were matched along with t h e i r semantic category. as an example  consider the t a l l fthf fukction 
fact call any subrs' passed as an argument to fnname.  perhaps as part of the question:  can the function fact c a l l any subrs    fnname would match the three words  the function fact. it would return the t a i l   'call any subrs' and set 
	the value of result to the l i s t  fn fact . 	fact 
1 
　　　

　　　the semantic category consisting of function types is represented in the grammar by fn/type. the operation of t h i s function is very similar to that of fnname. in this case  a word or phrase that somehow describes or c l a s s i f i e s a group of functions is looked f o r . this includes function types l i k e expr  subr  fsubr  and fexpr as w e l l as things l i k e arithmetic functions and conditional functions. table 1 shows the value of result that 
w i l l be produced for a few input phrases. 
　　　perhaps the largest semantic category is that consisting of lisp data structures. this is represented in the grammar by structures and in the implementation by a function of the same name. table 1 shows some of the phrases accepted in t h i s category by the function structures. 
　　　the fourth and last semantic category serves as a catch-all for anything not included in the other three. 	this category is represented by concepts in the grammar and the implementation. 	a few phrases recognized by the concepts function are shown in table 1. 

　　　the heart of the english understanding component of the system is a bnf grammar. after a l i n e has been read i n   an i n t e r p r e t a t i o n of it is attempted. in the sophie system   1     every nonterminal is considered a semantic e n t i t y to be searched for when necessary. in the isle system  however  only a few of the rules are actually concerned with semantic e n t i t l e s or categories. 
these semantic e n t i t i e s are defined as only those things which have entry in the semantic network. the rules which embody certain semantic groups have already been described. the rest of the grammer rules are used to i d e n t i f y requests for certain relationships or properties of the semant i c e n t i t l e s . 
　　　most programs which make use of a grammar use some kind of parser or grammar interpreter. this parser  a program  then uses a table or array in which the grammar rules are stored  data . special control structures must be set up to cont r o l backing up when an incorrect parse is begun. in isle  t h i s grammar is implemented d i r e c t l y in lisp. for each rule  nonterminal  in the grammar  there is a corresponding lisp function with the same name implementing that r u l e . the lisp cont r o l structures make t h i s implementation r e l a t i v e ly easy due to the recursive d e f i n i t i o n of lisp functions in general and the use of the special b u i l t - i n functions; cond  and  and or. backup is automatic as each r u l e - f u n c t i o n can l e t i t s c a l l i n g rule-functions know of i t s f a i l u r e on r e t u r n . a l l pointers and variable values w i l l again be those o r i g i n a l l y set in the c a l l i n g function. there is nothing to undo or redo as the lisp cont r o l structure handles t h i s automatically. 
the semantic routines 
       the parsing operation  if it is successful  w i l l produce another lisp function to be e v a l uated. some of these functions and the sentences that produced them are given in table 1. each is a c a l l to a predefined semantic routine. the functions fn  ftype  concept  and structure r e t r i e v e the desired semantic information for t h e i r arguments. in t h i s way words such aa atom are disambiguated. for example   fn atom  w i l l r e t r i e v e information relevant to the function atom  while  structure atom  w i l l retrieve the informat i o n for pronouns which it does by matching i t s arguments against the semantic categories of previously mentioned items. 

     isle's semantic routines are a l l s p e c i a l i s t s for answering t h e i r own type1 of questions. some take information d i r e c t l y from the network to be ftiven to the student or to be used in comparison or relationship t e s t s . describe  for example  gives the student a pre-defined d e f i n i t i o n or desc r i p t i o n if it e x i s t s . in the case of student defined functions  it t e l l s the student the type of function it i s . relate reports on ' s u p e r s e t '   'subset 1   and ' p a r t - o f relationships between i t s 
　　　
argument  or in the case of student defined functions-the actual function d e f i n i t i o n   to t e l l how 
many arguments a p a r t i c u l a r function has. 
　　　the permanent semantic information used by these functions is set up as association l i s t s of relationships and values for each semantic e n t i t y . table 1 shows t h i s information for the s t r u c t u r a l 
item atom. the value of the relationship test is the name of a predicate function which teste f o r the associated semantic e n t i t y . in t h i s case  the function atom tests for the structure which is an atom. type and type of indicate subset and superset relationships  and description indicates a l i t e r a l d e f i n i t i o n of the item. 

　　　other  temporary information that might be used by the semantic routines can be created and changed in various ways. when a student defines a function  the function is analyzed and l i s t s of the variables it binds or uses and the functions it c a l l s are created. this information is used by the routines which handle questions about the student's functions and is updated whenever a function is edited or redefined. the editor and the evaluator also store information that could be used by the question-answering system. this is done whenever errors occur and includes informat i o n about the current state of the evaluator or editor   e . g .   the association l i s t   and the cause of the error. this would allow the student to obt a i n more information about the source of the error and what the evaluator  or editor  was doing before the error occured. 
knowing about student defined functions 
　　　knowledge concerning functions defined by the student f a l l s into two d i s t i n c t categories. the f i r s t is the category that might be called semant i c s ; that is what the function does  or should do or perhaps what the student thinks it should do . this involves why the function does what it does  when it does i t   and how it does i t . the other category is that of syntax or function structure. the function structure consists of only the i n f o r mation contained in i t s d e f i n i t i o n - t h e functions it c a l l s   the variables it binds  sets  or uses  i t s arguments and any dlscernable relationships between these basic components. we have concentrated on this second category and ignored the f i r s t one. this system handles knowledge of user's or student's functions in two places. f i r s t the functions must each be scanned as they are defined. information concerning the use of variables and function c a l l s is recorded to be used by the semantic routines when needed. this is a sort of preprocessing to collect information for the semantic routines. 
during the scan  the following properties are 

once the c a l l to these semantic routines has been generated the answer to the question is easily determined through the use of the above property values for the desired functions. 
problems encountered 
　　　the problems encountered in dealing with natural language seem to f a l l into four separate areas. it is d i f f i c u l t to measure the extent of each of these problems at present. there are v i able approaches to the solution of each which should be examined. 
a  the use of adjective and modifying phrases. 
　　　students can be expected to t r y to describe various things concerning t h e i r programs in many d i f f e r e n t ways. at present  modifiers are looked for by the grammar at certain points and then ignored or  if necessary  used in w r i t i n g the se-
mantic i n t e r p r e t a t i o n functions. problems can occur when one of the basic semantic e n t i t i e s is used as a m o d i f i e r   for example in phrases l i k e list variables and variable lists. this problem would be solved by adding more information to the semantic network. the parser could then use t h i s information to decide how to handle the semantic e n t i t l e s when they are used as either modifiers or as nouns. certain other modifiers that are not c l a s s i f i e d as semantic e n t i t i e s should be included in the network to allow v a r i a t i o n s of meaning to be understood that are now ignored. 
b  cause and effect relationships. 
　　　often during the w r i t i n g and debugging of a program  students w i l l want to ask 'what happens if . . . ' or 'why' questions. to answer questions of t h i s type it is usually necessary to compare desired with actual r e s u l t s . it is also necessary to know about various side-effects that might occur such as setting global or free variables. the information necessary to handle such questions could be obtained by tracing the evaluation of 
　　　
the student's functions. this could then be checked for v a l i d i t y in some way   i . e .   compared against some desired r e s u l t   or reported back to the student. it would also be useful to allow the system to simulate the evaluation of certain forms or l i s p functions. this might take care of a 
large class of 'what happen if . . . ' type questions. others might be handled by adding more information to the network    i . e .   that an error w i l l occur when car is called with an atom as i t s argument . 
　　　at the present  none of these cause and e f fect type questions can be asked because of a lack of the necessary semantic information. if it were a v a i l a b l e   the addition of a few more rules to the grammar would allow many such question to be asked. 
c  verbs and action relationships. 
　　　the system now can only handle simple binary relationships between the semantic e n t i t i e s known to i t . these r e l a t i o n s can only describe s t a t i c situations such as subset-superset  an expr is a function   part-part of  a variable list is part of a lambda-expression  and function structure  function x can c a l l function y . when t a l k i n g about w r i t i n g and using lisp functions  students often need to use verbs specifying actions or r e lationships involving two or more things. these verbs include the following among others-do  make  edit  change  insert  stop  and remove. a taxonomy of the ways students use these verbs would be very h e l p f u l . the number of such verbs that might be needed may be small enough to keep the system r e l a t i v e l y e f f i c i e n t . the best place to t r y this would be to attempt some additions to the grammar that would allow the student to edit lisp functions using english sentences instead of edit commands. most e d i t i o n operations involve actions on various object and subject nouns. 
d  pronouns  anaphoric d e l e t i o n   and e l l i p s i s . 
　　　students often use pronouns or leave out words completely that might seem obvious. we have attempted to allow the use of pronouns  but in some cases the results are not the desired ones. for example  the following dialogue: 

　　　at this point the system would not have recognized the relationship between 'plus' and ' a r guments* due to i t s i n a b i l i t y at present to recognize the relationship between modifier and modif l e d e n t i t y . a very minimal history of the previous dialogue is kept so that  although the system remembers that plus was discussed previously  it does not remember that it was i t s arguments that were in question. therefore  the system thinks that 'them' refers to 'atoms' and not the arguments of plus  and describes an atom. this p a r t i c u l a r problem could be solved by handling modifiers in a better  more consistant manner and by keeping a more complete history of the previous dialogue. 
　　　the handling of anaphoric deletion and e l l i p s i s i s   however  even more d i f f i c u l t . the f o l l o w i n g   seemingly natural dialogue  would not be accepted: 

　　　the student has deleted most of the question  is y an atom ' assuming that y is to be substituted for x in the previous question. there are many similar deletions to be found in nearly any natural dialogue. verbs  subjects  object  modif i e r s   or any combination of these might be deleted. a study and c l a s s i f i c a t i o n of the various types of e l l i p s i s that might occur in a studentteacher dialogue would be very h e l p f u l here. 
　　　the most important lesson learned concerns the i n t e r a c t i o n of semantic and syntactic i n f o r -
mation in dealing with and understanding natural language. heavy use is made of semantic i n f o r -
mation during the parsing operation. a parse w i l l in fact f a i l if it does not make sense based on what the system knows  even though it may be synt a c t i c a l l y correct. 
　　　the shortcomings here involve the s t r u c t u r ing and use of the semantic information. there is a large l i t e r a t u r e describing how to form and use grammars and other syntactic structures; however  similar studies for semantic structures are not yet available. 
　　　there are many models under study such as semantic networks and conceptual models   1   . however  as y e t   there are no d e f i n i t i v e measures of the c a p a b i l i t i e s and l i m i t a t i o n s for these various techniques. also  there are no studies comparing various means of implementation and the storage requirements of these model**. hopefully  research along these lines would aid those a t tempting to use these models for cai in other app l i c a t i o n areas. 
conclusions 
　　　this system is undergoing continued development. the question-answerer is being expanded to allow the student to get more of the information he or she might want and to perform more edit functions in english. 
　　　isle is implemented in lisp which runs i n t e r a c t i v e l y on an ibm 1. this interactive lisp is an improved version of the waterloo lisp which uses a cathode-ray display as the active user terminal. the system runs in 1k bytes of memory. each question is processed in one second or less. 
　　　preliminary indications are that the system w i l l serve as a useful t o o l for f a m i l i a r i z i n g a student with lisp concepts. the question answering c a p a b i l i t y allows a student to inquire about the semantics of lisp; he can use the lisp s t u dent evaluator to test his knowledge of lisp syntax and to help him correct his e r r o r s . the ex-
　　　

panded d i a g n o s t i c i n f o r m a t i o n presented should h e l p hire c l e a r - u p i n i t i a l misconceptions and ease h i s t r a n s i t i o n from isle to the standard lisp e v a l u a t o r 
       this approach appears to be g e n e r a l 	in t h a t one could 	present 	any m a t e r i a l of a f a c t u a l n a t u r e in a s i m i l a r manner. 	sophie  1  	is an example of a 	s i m i l a r 	system f o r 	t e a c h i n g e l e c t r o n i c - c i r c u i t a n a l y s i s and t r o u b l e - s h o o t i n g . 	other programming languages  	l o g i c c i r c u i t d e s i g n   	and b a s i c a l g e b r a 
and c a l c u l u s might p o s s i b l y be taught u s i n g a s i m i l a r computer environment. 
       the i m p o r t a n t lesson learned concerns the i n t e r a c t i o n o f semantic and s y n t a c t i c i n f o r m a t i o n i n 
d e a l i n g 	w i t h 	and 	u n d e r s t a n d i n g 	natural 	language. heavy use is made of 	semantic 	i n f o r m a t i o n d u r i n g the p a r s i n g o p e r a t i o n . 	a parse w i l l 	i n f a c t 	f a i l if 	it does not make sense based on what 	the system 
knows  	even though it may be s y n t a c t i c a l l y c o r r e c t . 
       the shortcomings here i n v o l v e the s t r u c t u r i n g and use of the semantic i n f o r m a t i o n . there is a l a r g e l i t e r a t u r e d e s c r i b i n g how to form and use 
grammars and o t h e r s y n t a c t i c s t r u c t u r e s ; 	however  s i m i l a r 	s t u d i e s 	f o r 	semantic 	s t r u c t u r e s are not yet 	a v a i l a b l e . 
       there are many models under study such as s e mantic networks and conceptual models 	  1   . 	howe v e r   	as yet 	there are n o t d e f i n i t i v e measures of the c a p a b i l i t i e s and 	l i m i t a t i o n s of 	these v a r i o u s t e c h n i q u e s . 	a l s o   	t h e r e are no s t u d i e s comparing 
v a r i o u s means of implementation and the s t o r a g e r e q u i r e m e n t s of these models. h o p e f u l l y   r e s e a r c h along these l i n e s would a i d those a t t e m p t i n g to use these models f o r cai or o t h e r a p p l i c a t i o n a r e a s .  1  
 1  
 1  
 1  
 1  
 1  
 1  