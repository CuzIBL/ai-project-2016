 
　we are investigating constraint directed heuristic search as a means for performing design in the field of space planning. space planning is selecting  dimensioning  locating and shaping design units to create two dimensional layouts based on functional  topological and geometrical considerations. search is carried out using operators at different abstraction levels and design objects at different levels of detail. constraints are used to represent domain knowledge  to define the search space by specifying operators in means ends analysis manner  and to rate the partial candidate solutions using importances associated with each constraint 
　search is carried out opportunistically. the philosophy behind opportunism is that understanding the approximate topology of the search space will lead to efficient search. uncertainty associated with constraints is derived and used to identify islands of certainty in the search space  which are used as starting points and anchors for search. the knowledge that enables us to identify opportunistic decisions are interactions between constraints and the usefulness of a constraint in different situations. the resulting uncertainty measure will be tested by observing the problem solving behavior it causes in different search spaces. 
i introduction 
　this is an investigation of constraint directed heuristic search as a means of performing design. the philosophy behind the formulation of design as opportunistic search is the topological assumption that understanding a problem's search space will enable efficient search  fox 1 . constraints help in understanding the approximate topology of the search space by allowing us to identify islands of certainty through which the solutions must pass. 
　space planning covers the set of problems which humans solve using orthographic drawing. typical space planning problems are layout of floor plans  arrangement of equipment and furniture in rooms  and site planning. in these problems topological relations such as adjacency  and geometrical properties such as shape  dimension  distance  and other functions of spatial arrangement are a principal concern  eastman 1 . it is natural to express space planning problems in terms of constraints. 
　the domain of application we have selected is kitchen design. an appropriately designed kitchen should have welldefined centers for serving  cooking  mixing  and the sink. the centers should be arranged to reflect the natural sequence of use during food preparation. the three distances between the front mid-points of the sink  range  and refrigerator usually form a work-triangle. the sum of these distances should be greater than 1 feet and less than 1 feet. since most of the time spent in the kitchen is spent at the sink  placing the sink against the window provides light and view while working. 
this knowledge can be represented by constraints of the form: 
  mix center should be next to and to the left of refrigerator. 
  there should be a continuous counter of 1 inches for mixing and food preparation. 
  distance between the front mid-points of sink and range should be 1 to 1 feet. 
  there should be no traffic or furniture interfering with the work triangle. 
　different abstractions have been used in space planning: discrete locations in the form of a grid of cells  adjacency graphs and networks  rectangular dissections  and drawing based representations using closed polygons. search methods that have been used range from generate and test  backtracking  branch and bound  hill-climbing  means-ends analysis  to hierarchical planning. heuristics are applied to selection of design units  sequencing the operators and tests  and if more than one abstraction is used  to the selection of abstractions. 
　search architectures that have been used are classified as sequencing by design unit and priority solution method  eastman 1 . in sequencing by design unit  a design unit is selected to enter the design  locations are generated tor it and tested against all applicable constraints. heuristics for selecting the next design unit to enter the design are: select the design unit with the most restrictive set of constraints  select the largest remaining design unit  select the one most strongly connected to those already placed. the most efficient scheme for applying the constraints is in ascending order of cost of test execution divided by probability of failure. priority solution method involves creating macro-objects in unbounded space by considering a subset of the constraints. this is useful if groups exist in terms of severity or importance of constraints and strength of interaction between design units  or if a constraint proves hard to satisfy otherwise. experience with space planning programs indicate that time consumption is affected not so much by the number of rooms as by the strength of constraints and by sequencing. the generation process should utilize all constraints to limit combinatorial search. constraint-directed search attempts to formulate general models for the representation of constraints  fox 1 . the objectives are to identify and represent the variety of constraints  and interactions between constraints for effective utilization during search. interactions between constraints such as conflict  competition and cooperation  relaxation of constraints are some of the issues addressed. 
　wright is a knowledge based space planning system that uses multiple abstractions opportunistically. designs are represented at different levels of detail  and in qualitatively different ways using relation graphs and adjacency networks  and design objects at different levels. constraints are modeled by a goal tree. search operators are associated with 
	baykan and fox 	1 

constraints in means ends analysis manner. satisfying a constraint leads to posting and propagation of other constraints within and across levels. opportunism is making highly constrained decisions early  and least commitment is postponing those that are not. opportunism is a resource allocation problem where the constraints are scheduled in order to generate solutions efficiently  hayes-roth and lesser 1 . uncertainty measures associated with each constraint based on the search state is used to identify islands of certainty in the search space. 
ii architecture of wright 
a. components of wright 
　wright consists of a knowledge base  a problem solver and a user interface. the knowledge base contains knowledge about the application domain i.e. the vocabulary of design objects and desired attributes and relationships between them  and general knowledge about space planning abstractions and search states. problem solver focuses attention on different aspects of space planning such as locating  dimensioning and shaping the objects of design opportunistically  based on uncertainty measures associated with constraints. each constraint specifies search operators. the knowledge base can be modified to reflect different styles and preferences  and to design in other domains of space planning. 
b. design units 
　layouts are created by configurations of design units. it is possible to consider design units at different levels of detail. in the case of kitchen design  we deal with work centers of the kitchen and with elements such as sinks  refrigerators and counters. the work centers consist of some combination of applicances  counter area and storage space. the design units at both levels of abstraction form a hierarchy through which there is inheritance of variables  values and constraints. at the top of the hierarchy are conceptual categories such as spaces  solids  architectural elements  and boundary elements. at the lower level of abstraction  there are categories such as sink  refrigerator  and counter. these are refined by types of sinks such as single bowl sink  double bowl sink etc.  or different types of refrigerators. the leaves of the hierarchy may contain specific models selected from manufacturers catalogues. 
　the knowledge base  consisting of design units and constraints  design abstractions and search states are represented by schemata using knowledge craft.* a schema is the unit for representing objects  relations and concepts. the sink schema inherits all of the variables from architectural-du  which is above it in the hierarchy. it inherits length and width slots and constraints that may have been specified  i.e.  it may not overlap another solid. it has slots specific to itself  i.e. number-of-bowls and number-ofdrainboards. below sink are the types of sinks: single bowl  double bowl and triple bowl sinks  and single and double drainboard sinks. for refrigerators  the types are: conventional refrigerators and built in refrigerators which do not require ventilation space at the back and are the same width as standard counters. below different types of sinks are specific sinks from manufacturers catalogues. once a specific sink is selected  only its location needs to be specified. its length  width  shape  number of bowls  and number of drainboards are either inherited or specified for itself. but in accordance with least commitment principle  this selection is not made until constraints on the attributes of sink help to make this decision with high certainty. 
*knowledge craft is a trademark of carncgic group inc. 
1 	reasoning 
c. problem solving abstractions 
　design abstractions are useful for considering some aspects of designs and to defer dealing with other aspects  limiting combinatorial explosion. a design in a higher level abstraction represents an equivalence class of designs in a lower level abstraction. 
　for interactive design and the user interface  design units are represented by their shapes such as rectangle or l-shape  dimensions and x  y locations  and orientations. during search  adjacency networks and spatial relations are used. 
1. region line adjacency network 
　the elements used in region line adjacency network abstraction are horizontal and vertical lines and regions. each line is unique  and extends from -infinity to + infinity. incidence relations between a region and the lines which define it are: north-line  south-line  east-line and west-line. their inverses define relations from lines to regions. there are also relations between two lines of the same type. relations between vertical lines are: line-east-of and linewest-of. relations between horizontal lines are: line-north-of and line-south-of. these are transitive relations  in terms of relations between lines and regions and lines and lines. 

　figure 1 shows a configuration of regions and lines  and figure 1 shows how it can be represented in the region line adjacency network using the relations described above. 
　networks are also used for determining the dimensions of regions and locations of lines. these values are represented as intervals with minimum and maximum allowable values. initially an interval for the location of a line such as the x coordinate of a vertical line  extends from -infinity to +infinity  an interval for the x or y dimension of a region extends from 1 to + infinity. as design progresses minimums 
may only increase and maximums may only decrease  until the two are equal. 
　the operators for creating the topology and determining the dimensions of a network are: 
  create new region. 
  merge two lines. 
  put a line south or west of another line. 
  post minimum/maximum values for an interval. 
these operators propagate new bounds to related intervals. a new relation can be satisfied if it does not contradict existing relations and dimensions. an operation can be contradictory  redundant or constraining. when a contradiction is detected  propagation stops with failure. in case of a redundant value or relation  the operation succeeds and stops. a constraining operator leads to further propagation of effects. 
　one dimensional relations between regions in the horizontal or vertical direction are defined in terms of relations between lines and regions  and lines and lines. these are similar to allen's temporal relations  allen 1 . horizontal relations between regions are below  and their corresponding vertical relations are in parenthesis. the inverse of a relation is also defined if it is not symmetric  but not given below. 
  region-west-of  region-south-of  
  region-west-acjjacent  region-south-adjacent  
  horizontally-inside 	 vertically-inside  
  horizontally-overlapping 	 vertically-overlapping  
a horizontally-inside b is defined as west line of a being cast of west line of b  and east line of a being west of east line of b. a south-adjacent b is defined as region a sharing its south line with the north line of region b. 
　in this representation dimensions and topology are separate yet related. decisions can be made in any order. every state created using the operators defined above is an approximative abstraction that defines an equivalence class of solutions in terms of the decisions made up to that point. a constraint that has been satisfied will not be violated later using these operators. all spatial relations can be explicitly represented which makes it possible to design the layout of work centers in a kitchen at one level of detail and to design the layout of the applicances in the work center at another level. it is possible to generate packed layouts using the merge lines operation  or loosely packed layouts putting lines relative to each other. 
1. spatial relations 
　spatial relations are defined in terms of the one-dimensional relations between regions in the adjacency network. types of relations considered are: adjacency relations  spatial-overlap relations  location relations  position relations  orientation relations and distance relations. adjacency relations are: nextto  completely-next-to and covers. next-to is defined as the regions being region-west south -adjacent in one direction and vertically hori1ontally -overlapping in the other. spatialoverlap relations are inside  has-inside  overlap and nonoverlap. location relations are north-of  south-of  east-of and west-of. position relations are at-front  at-back  at-left and atright location relations are defined with respect to the global coordinates and position relations are defined with respect to object centered coordinates of the design units. most design units have fronts  backs and sides which have to be treated differently in a layout. there are orientation relations: parallel-to  perpendicular-to  opposite  and distance relations. 
　existing relations between design units are used in inferring new relations  and determining which new relations indicated by constraints arc already satisfied and which are contradicted. 
some relations are mutually exclusive i.e. north-of and southof. given a relation between two design units  relations that arc mutually exclusive arc contradicted i.e.  a north-of b contradicts a south-of b. some relations satisfy others  such as inside satisfies overlap  and next-to satisfies non-overlap. this type of reasoning uses the definitions of the relations. 
another way of reasoning uses the transitivities of the relations. some relations are transitive  so that: if a inside ♀  b inside c and c north-of d then a north-of d. transitivity of each relation is expressed by a path grammar and used in reasoning via relations. a third way of reasoning involves making inferences. two relations are used to infer a third: if a at-front b and orientation of a is 1 then a west-ofb. 
　relations level enables reasoning while more complete but combinatorialy expensive reasoning at the adjacency network level is deferred. domain constraints expressed in objectcentered coordinates are converted to design coordinates as successive design decisions enable inferences. some relations can be shown to be satisfied or contradicted due to interactions between relations. 
d. constraints 
constraints represent design goals and control knowledge. 
the categories of knowledge that need to be known in order to use constraints as a representation of knowledge and as a search technique are  fox 1 : 
  how to generate states satisfying a constraint.   how to test if a constraint is satisfied 
  possible relaxations of a constraint. 
  relative importance of a constraint. 
  uncertainty of a constraint. 
　constraints encoding knowledge of the design domain are posted to prototype design units. design unit instances inherit constraints from their prototypes and the prototypes above it in the hierarchy. the constraint values inherited from different prototypes for a constraint type can be added on  i.e. sinkl may inherit constraint values from solid  architccturaldu  and sink for the same variable and constraint type  or a value placed at sink may replace those specified above it 
　domain constraints which specify a relation between two prototypes such as: sink should be next to wall  is inherited at sinkl and refined into: sinkl should be next-to walll or wall1. how the instances walll and wall1 should be combined is specified at each constraint or inherited from the type of constraint  for example non-overlap constraints are combined with and. similar relations are posted between constraints to indicate that the actual instances selected should be the same  i.e.  if sink is placed next-to walll  it should also be parallel-to walll  and not to another wall instance. 
　constraints at the network level express an instantiated constraint in terms of one-dimensional relations between regions. for example  sinkl inside sink-center 1 is refined into: sinkl is horizontally inside sink-centerl and sinkl is vertically inside sink-centerl. the goal tree is an and/or tree of constraints starting with domain constraints between prototype design units and ending with one dimensional relations between instances. 
e. problem solver 
　a space which serves as the envelope and its adjacent spaces are the minimum givens that make up the initial state. any features that should be fixed in the design and some information about the design context such as house area  household population  and building type should also be given. first stage of problem solving is pre-search analysis. 
	baykan and fox 	1 

based on givens  additional constraints are posted by rules of the form: if kitchen area is greater than or equal to 1% of the house area  then the kitchen should be an eat-in kitchen with a table and adequate seating. design unit types are selected: there should be a sink  a refrigerator  a cooker etc. the goal tree is set up using the instances selected to be in the design and those present in the initial state. the interactions between constraints that can be determined are found. a geometric modeling program finds the existing relations between design units  and creates a region line adjacency network representation of the initial state. 
the second stage in problem solving is opportunistic search. 
search control operates by selecting a state and a constraint to generate new states. each search step consists of the following operations: 
  select a state 
  select a constraint 
  generate new states 
  update constraints 
  update states 
constraints 	are 	selected 	based on 	their uncertainties. 
identifying interactions between constraints is useful to identify opportunistic decisions. constraints are said to be independent if achieving one goal has no effect on the second  cooperating if achieving one goal makes it easier to achieve the second  competing if one goal can only be achieved at the expense of the other  and conflicting if achieving one goal must take the second into account due to an interaction  mostow 1 . 
　other information for determining the uncertainties of constraints are: importance of a constraint  severity of a constraint the type and state of the variable s  constrained  the size of design unit s  affected by the constraint. uncertainty is used as a measure for rating the opportunism of constraints  and determining where to focus attention during search. 
　opportunism is focusing the attention of the problem solver on the most constrained operation that can be performed at each step instead of taking a pre-determined strategy for control such as top down  goal driven  or data driven  stefik 1 . a top down approach locates work centers first and uses this to guide the location of applicances. in an opportunistic approach  if the location of an applicance is more constrained than the location of a work center  then the applicance is placed first and this guides decisions at higher levels regarding the location of work centers. islands of certainty through which the solutions must pass can be identified by understanding the approximate topology of the search space  search proceeds by using the islands as starting points and expands them. 
　since design involves relaxing and adding constraints as well as searching for a solution defined by a set of constraints  we find a representative sampling of significantly different solutions. significance of differences are based on which constraints are satisfied and the values used to satisfy them. 
ill test results 
　version 1 of wright uses reasoning at the spatial relations and user interface abstractions  but not at the adjacency network level. selection of levels is fixed. a variable is selected based on the uncertainties of its constraints. then all the constraints of that variable are applied in order of certainty to generate all valid ranges of values for that variable. each constraint is applied first at the relational level. if there is no conflict then the constraint is used to generate a range of 
1 	reasoning 
values. after all the constraints of the variable are applied  then a discrete set of values are selected from the range of the best state to continue the search with other variables. 
　version 1 of wright about to be completed uses reasoning at all the levels described. levels are searched opportunistically and all constraints of a variable do not have to be considered together. 
　wright has been tried on different test cases. this approach works better when the solutions are tightly constrained. research on the types of knowledge that enable us to identify opportunistic decisions is continuing. 
iv conclusions 
　wright version 1 results indicate that starting search with more strongly constrained design units efficiently eliminates many dead ends and leads search towards the better solutions. the ability to defer uncertain aspects of a decision while being able to reason at a higher abstraction level is needed to use islands of certainty as guidance for search. wright version 1 is formulated to achieve this capability. 
　one of the limitations of wright is the types of constraints that can be considered. the goal tree should start with general performance issues such as daylighting  spatial order and energy efficiency and derive specific constraints from these. this level of the goal tree is omitted in this research  to concentrate on using space planning constraints opportunistically. we attempt to generate a sampling of good solutions so that the designer can compare in the light of other constraints. 
