ion mechanisms and other structuring f a c i l i ties within a language that provides the special capabilities needed for ai research. telos i n cludes pascal as a subset and also is implemented in pascal. a f u l l description is available in  
and   
　　　like most other ai languages  telos includes f a c i l i t i e s needed for experimentation with large stores of general knowledge  tentatively modifiable and associatively referenceable  and with various planning and reasoning strategies. however  in contrast to other ai languages whose design has focused on building in certain powerful highlevel constructs  the design of telos has focused on building in powerful abstraction mechanisms with which these particular high-level constructs  as well as numerous others  can be defined and implemented with reasonable ease. 
　　　the usefulness of abstraction in a l l kinds of human intellectual activity has long been observed  and programming is certainly no exception. only recently  however  have programming languages begun to appear with features specifically designed to f a c i l i t a t e abstraction of the several d i f ferent kinds needed in the programming process  in particular  data abstraction and control abstraction as well as procedural abstraction. telos implements a set of data  control  and procedural abstraction mechanisms specifically tailored to ai requirements. 
　　　the data abstraction capabilities provided in telos add to the already powerful data type extension capabilities of pascal. the user defines a problem-specific data type by including details of representation and implementation within a 
　　　definitional scoping called a  capsule . the procedures and functions which realize possible primitive operations on objects of the type being defined are an integral part of the d e f i n i t i o n   and the objects are characterized and used in terms of these defining operations. features are provided for specifying and controlling how objects of a capsule-defined type are to be f i t t e d into the telos associative data base. 
　　　an ai programmer might use telos capsules to define data types ranging from low-level lists  of the kind built into most other ai languages  to theoretically significant data structures. such 
high-level abstract type definitions might implement  for example  case-slotted prototypes  frames   concept-dependency graphs  or production  conditionals . by emphasizing abstraction mechanisms rather than high-level constructs  e.g.  frames as a basic data type  as in krl   it has been possible to minimize theoretical bias in the language. consequently telos should be usable for investigation of numerous competing theories  for example  in the area of knowledge representation. 
　　　the control abstraction capabilities provided in telos enable convenient user definition of the novel kinds of control regimes which are investigated in ai research  that i s   those which realize alternative problem-solving strategies. just as telos capsules localize data representation det a i l s   telos  overseers  localize interprocess control-transfer and communication details needed to realize a desired control regime. 
　　　an at programmer might use telos overseers to define control regimes ranging from blind  depthf i r s t backtracking  of the kind built into many recent ai languages  to quasi-parallel processing to sophisticated planning strategies. features are provided which enable the procedures and processes controlled by an overseer to be identified and invoked descriptively as well as by name. 
　　　besides its abstraction mechanisms  telos contains other f a c i l i t i e s which can contribute to the building of well-structured programs  starting 
with the rich set of program structuring f a c i l i ties already available in pascal. if used correctly  these f a c i l i t i e s can result in modularized  hierarchical programs with reasonably comprehensible control and data flows. 
　　　many language capabilities very useful in ai programming directly conflict with principles of good program structuring. the telos design attempts to mediate the conflicts with compromises which give ai programmers some of the advantages of both worlds. examples:  1  telos allows the construction of a heterarchical control regime but centralizes into one location its communication and control-transfer a c t i v i t i e s .  1  telos allows specification of conditional interrupts   i . e .   demons  but subsumes them under a general  unified event handling scheme. the scheme enables signal  escape  error   and suspend events to be e x p l i c i t ly declared and activated  and  whether explicit 
or not  to be operative only within certain clearly circumscribed and easily determined scopes.  1  telos allows creation of alternative data base versions   i . e .   contexts  but requires that switching of the current execution context be accomplished with the structured form: 
incontext  context  do  statement  
　　　several benefits should accrue for ai from such a language design  
    1  ai programs are highly complex. a language like telos provides many aids to managing and containing program complexity. 
    1  improved al programmer productivity  as is possible with the features telos provides  w i l l mean improved at research productivity. 
    1  much of ai programming involves putting preliminary ideas and hypotheses into programs and then changing the programs as suggested by experience with them. the improved program comprehens i b i l i t y possible with telos can make this kind of evolutionary programming much easier and more eff i c i e n t . 
    1  one of the motivations of work on ai is development of a general theory of intelligence. such theory development w i l l be expedited if the program abstractions representing high-level theoretical constructs are as distinct and as well-defined as they can be in telos programs. 
