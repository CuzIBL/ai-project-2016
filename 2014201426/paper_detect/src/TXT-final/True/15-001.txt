 data types 
gerard guiho 
universite paris sud lri - bat. 1 orsay - france 

abstract 
　　　in this paper we f i r s t try to characterize one meaning of automatic programming. we consider it to be one part of the programming environment related to a r t i f i c i a l intelligence techniques. we then illustrate an automatic programning process  on a simple example  using an abstract data type theory to which we add the not ion of schemes which are particularly useful in program derivation from abstract type decomposition. we conclude that all the concepts treated in this paper must be contained in one way or another in any automatic programming system. however this necessitates further study in such theoretical fields as abstract data type theory  specification languages  theorem provers or proof cheekers and rule rewriting systems. 
i generalities 
i . i . in my opinion the concepts implied in the words  automatic programning  are not very precise and may even seem completly unrealistic. however many people  like myself may consider that even if they seem vague and sometimes unrealistic they ap-
pear worthwhile for studying. 
　　　in the f i r s t part of my paper  i w i l l try to specify the definition of these concepts  created by the juxtaposition of the two words  automatic  and  programming . 
　　　in webster's dictionary  we can see that  automatic  can be the obtention of something which can be produced without thinking  by habit or reflex. in this case  automatic progranming could be considered as a kind of programming methodology  which is sufficient to follow to obtain a good program. this can only be applied in areas where the programing process is repetitive enough that a method can grasp the mechanical aspect. in this way. in the business-oriented programming f i e l d   some program generators or methodologies can be considered as automatic programming. 
　　　a second meaning to the word automatic concerns one action which is done by i t s e l f . we could then look for a programming technique which is ent i r e l y produced by any kind of mechanism. this is a more a r t i f i c i a l intelligence approach. in this sense we could consider building a system which 
would receive the specification of a problem as input and which w i l l give a program as output. 
this field is often called program synthesis. the input specification can be formal specifications  as logic    ll  1    examples   1    1  f 1  or natural language. taking into account the research which has been done on this subject during the last five 
years and my own personal experience  i think that this approach is only possible for restricted fields of application and toy problems. in other cases the specification language is close to a programming language and it is more a compiling technique than automatic programming. i am therefore convinced that this approach can be useful locally but that programming  in the general sense  
w i l l never be completly automatic. 
　　　a third sense to the word automatic w i l l also help us. it characterizes one action which is done using automatic equipment. this dictionary definition is in fact recursive ! ! that leaves us now to consider that it is not the action of programming which has to be automatic but the equipment which could help do this action. lastly we can interpret  automatic programming  as the programming action using a computer  which allows us to write programs in the best way possible . that does not imply that the whole programming process has to be automatic. 
　　　unfortunately this definition is too general. if any system used during the programming process is relevant to automatic programming then most of the programmers are in fact using automatic pro-
gramming techniques without knowing i t . is a text editor  a compiler  a linker  ... relevant to automatic programming   and is there any difference 
between  automatic programming  and  programming environment    
　　　in fact i consider that automatic programming is a part of what is called programming environment. it consists of the tools which are the most advanced in the programming environment and which are directly related to the programmer. we are very close here to an a r t i f i c i a l intelligence paradigm because the action of programming can be considered as one of the most d i f f i c u l t and intelligent action a human can do. sofisticated tools which could help the programmer during this powerful action may be relevant to the a r t i f i c i a l intelligence f i e l d . 
　　　however  even if the line between a r t i f i c i a l intelligence and classical computer science is not really precise in automatic programming  i consider that it is a domain in which many different 

1 g. guiho 
a r t i f i c i a l intelligence techniques can be extremely useful. this must be a challenge for a r t i f i c i a l intelligence people. it is not a coincidence if the f i r s t and most powerful programming environments came from the a r t i f i c i a l intelligence community   lnterlisp  maclisp...  
1. i will summarize some fields of a r t i f i c i a l intelligence and just give some areas where they could be profitable in automatic programming. 
　　　- natural language understanding-this subfield could be very useful  not in the command to be given to a system but to help the programmer in the various commands and u t i l i t i e s of the program-
ming environment. for an experienced programmer  the the commands he knows have to be very short. they are generally keys. the problem is that when we want to explore some new possibilities  we do not know precisely the keys or the successions of keys to use for these new possibilities. looking through the documentation  even in line  is sometimes boring. the  a propos  command under emacs is 
useful but is only a key word search. the development of a natural language interface would allow a sophisticated help system which would then be very effective. 
　　　- expert systems-i do not think an expert system can be constructed at the present in the program-creating process because it is too d i f f i cult and may even be outside of classical expert systems approach. however  in many parts of the programming process an expert system viewed as an assistant can be used. these systems have to be separate tools : 
　　　. the organisation of large programs. how to find some information in a large base of programs or data types   what has been done until now and 
what would be the most suitable to do now etc...  
it is a knowledge-based oriented system   1   . 
. the process of transforming programs  1   . 
　　　. restricted areas. when the field is very small and the derivation of the program from the specification very easy  it would be f r u i t f u l to design some small expert systems. 
　　　. the validation of programs using test sets. the generation of the test set for programs is never completly satisfactory and is a d i f f i c u l t art. testing a program can be relevant to expert system techniques. 
　　　- theorem proving-testing programs are not sufficient and in the future most of the programs 
w i l l have to be proven  at least partially. many interactive systems w i l l have to be designed in or-
der to help the programmer prove the correctness of this work. this domain is highly related to theoretical computer science because most of the concepts in languages or programs have not yet been s u f f i ciently studied to be used in practive for real programs. some systems as gypsy    stp    formel   1  are milestones towards this approach. 
　　　the rest of this paper w i l l try to show that even for small examples  the proof can be long and the material involved very sophisticated. 
　　　- other techniques-many other aspects which only use heuristics can be very useful in the progranrning process. i w i l l just give some of them here but this is not exhaustive. 
　　　-help during the programming process-proposing program schemes  data decomposition  programs which are  close  to the one the programmer is actually doing etc... 
　　　- intelligent display of a l l the information needed during the programming process  a screen with a multiple-window oriented editor . 
　　　- organisation for work scheduling. 
ii program construction 
　　　we will.now describe one proposal for a program construction technique. it is not aimed to be entirely general but shows many concepts which  in one form or another  are necessary in every future auto-
matic programming system. 
     it is now beginning to be admitted that a l i brary which is useful in the programming process must contain both data and programs. all these objects have to be encapsulated in modules. some of these modules involve descriptions of powerful data types with basic operators ; some others involve sets of programs with one common functionality. 
　　　ail these modules contains two parts. one which shows that which is visible outside of the module  
which attempts to describe the specification of the manner in which to use i t . the second part des-
cribes how effectively the elements of the modules are implemented. this is one of the most important aspects of ada with the package and package body parts. generally the description part  which we will call the specification part  only contains the prof i l e of the operations which are visible outside the 
module and few other helpful things for type cheeking and documentation. however  even if this aspect constitutes a major improvement  it does not allows us to produce proofs. 
　　　the nature of the objects which have to be grasped in our system can be represented as : 


1. 	data type specification  ds  
     we use algebraic abstract data types in an extended manner which w i l l be described in sectionlll. 
according to the theory  an algebraic abstract data type specification denotes a class of algebra alg‘ and in our theory this class has one i n i t i a l algebra t‘.  ie for each algebra a in alg‘ there exists one unique morphism h : t‘+a. 
1. 	data implementation  di  
　　　generally the data implementation is not vi'. sible to the user  and it must not be visible . we 
w i l l consider that the data implementation represents one of the algebra in alg‘ denoted by the abstract type specification. the fact that there exists one morphism between t‘  which is a particular algebra of terms  and a helps us prove properties or theorems on the type using t‘.. these pro-
perties w i l l be properties of any implementation. of course the correctness of the implementation has to be provenin the same ways that many properties concerning abstract specification. that is done once for all and could be considered as the responsability of the data type designer. note that our class of algebra is the class of finitely generated algebras so that we can use term rewriting and structural induction for producing proof. 
1. 	procedure specification  ps  
　　　in a f i r s t approximation we w i l l consider specifications in an algebraic manner. this w i l l be easier for proofs but it may lead to specifications which are not really readable. i consider that there does not exist for the moment an effective  convenient specification language. if one such language would exist  its semantic would have to be expressed algebraically  but for our purposes here i have chosen to express it directly in its algebraic form. 
1. 	procedure implementation  pi  
　　　first we need a programming language with a well-defined semantic in order to produce proofs. section iv w i l l describe such a toy language. 
　　　given a program p written in such a language and proving its correctness may not be sufficient. these properties are proven in fact  in an extension of t   the i n i t i a l term algebra : t‘ + p and the program w i l l actually be used in an algebra a + p. the fact that there exists an horaomorphism h : t‘-+a does not prove that it can be naturally extended to an homomorphism n : t‘ + p --  a + p. this has to be proven again and it can be done either : 
- by proving it on each program !! 
- by restricting the form of programs or by directing the program construction such that any morphism can be extended. 
- by using monomorphic abstract types. 
1. 	program construction 
　　　two main methods can be used in building procedures concerning a problem we have in mind or 
	g. guiho 	1 
which is expressed in a natural language manner : 
	a. 	knowing a family of data types specifica-
tion  build a procedure specification using any intuitive method and then derive a program. 

　　　the problem whith this method is that even for short specifications  the risk of error is high   i t may be even higher than directly deriving the program if the specification language is obscure . subsequently the program w i l l be wrong and if the procedure specification represents in some sense a  contract   this could be dangerous. one other problem is that only when the program is effectively tested that some errors w i l l occur. it might not be 
easy to see where they correspond to a mistake in the specification. the risk is that the programmer 
w i l l directly change the program !! one could say that we have some executable specifications but the other risk is that the program might easily follow the specification and could be highly uneffective. 
	b. 	knowing a family of data type specifica-
tions  build a procedure specification  then build a program separately and prove the correctness of the program versus the specifications. 

     here we have more chance to make errors in the two constructions but the errors w i l l not be necessarily the same. the proof mechanism w i l l help us to correct the two parts. in my experience i always 
made aproximately the same number of mistakes in writing programs or specifications. trying to prove the correctness always leads me to reconsider both. the risk is that if the specification is too far from the implementation  highly non executable specification for instance  the proof could be very d i f f i c u l t . 
　　　one other way would be to extract automatically the test set from the specification in order to test the program.   
this is the type of program construction tech-

nique we wil use in further sections with a systematic methodology for building programs. it could help us reduce the amount of errors when we try to express our intui tion.wewill use one toy example a l l along  the gcd problem  because it is sufficiently complex  the concepts significant and sufficiently short to be shown in one paper. 
i l l algebraic abstract data types 
　　　we w i l l use the now classical theory of abstract types which is directly inspired from adj   1    goguen   1l    broy & wirsing   1    complemented by work from bidoit   1    kaplan   1    myself  boisson and pavot   1  . our addenda concern principally the presentation of type  the use of positive conditional axioms and the error mechanism. 
　　　the schemes are direct extensions of the decomposition schemes of c. gresse   1   same proceedings . 
an abstract type is given by : 
1. a signature represented by a set s of sorts and a set ‘. of symbols with an arity in  s  . this differs from the usual theory where the arity belongs to s  . we use  as goguen does  overloading 
and coercion extensively. the notation of operators is similar to obj    1  . 
1. a set of positive conditional axioms. 
　　　these axioms  as in goguen   1  contains the sort in which the equation has to be considered. the operators are raultioperators and can have more than one output. in fact  their interpretation is 
a function from the domaines of their input to the union of domaines of their output  which have to be disjointed . the operators have to be total on the ground terms but can be partial on terms with variables. using some kinds of presentation and with some properties  it can be shown that there can exist one i n i t i a l algebra of terms in the class of specified algebras. more details are available in boisson & all   1  . 
1. 	some induction schemes 
　　　these induction schemes w i l l be useful during the construction and the proof process. they w i l l 
be described more precisely in the appropriate section. they correspond in a sense to the induction schemata in affirm   1  . 
1. 	some theorems 
　　　this part contains properties or theorems which can be deduced from the axioms. these theorems may be useful in the proofs. 
　　　fig. 1 describes the specification of the positive integers type. we assume that the type bool 
which represents the booleans is known somewhere else with a l l i t ' s suitable operations and axioms. we can make the following remarks on this example : 
　　　- we define here three sorts. the zero sort is 
very convenient for constructing programs and for specifying this type. 
　　　- the notation int = int  +zero is just syntact i c . it is to avoid writing int   zero everywhere in the type. 
　　　- the underscore      shows the places of the operands with the disfix notation of operators. 
　　　- there are plenty of overloadings in this specification. for instance there are four + operators! 
　　　- when there is more than one sort in the left part of the arity of one operator  it means that it is a multioperator. for instance p has two outputs: int and zero. 
　　　- there exists also multiaxioms  a syntactic level  in the way that an axiom is repeated when there is some ambiguity in the type of operators or when there are more than one sort before the axiom. for instance : 
int : x + 1 = x 	means zero : x + 1 = x 
	int 	: x + 1 = x 
or 
bool : x   1 - false 	  	bool : x : zero   1 = false bool : x : int 	  1 = false 
　　　see figure 1 next page for presentation of the type. 
　　　- there are conditional axioms like : 
x egal y =* x oiv y = true in fact a correct definition would be : 
x egal y = true --  div y = true 
　　　we accepted this syntactic simplification  in order not to overload the axioms but they are all positive conditional. 
　　　- we can see with some examples how the initial term algebra is. 
. 1 is in sort zero 
. so is in sort int 	and  s n 1|for n   1  are in int because s is not a multioperator. these terms can be considered as representative of classes of 
terms in int 
. pso is in zero because of the f i r s t axiom 
. ppso does not exist because p does not apply to sort zero 
. so - sso = 1 - so by axiom 1 = erint by axiom 1 
then it is in inter 
. the term so +  so - ssso  does not exist ! it can be proven that there is no ambiguity for any ground term and then this term algebra is i n i t i a l . 
　　　- the axiom inter : x = erint collects a l l the error terms into one single class without avoiding a l l the classical problems with the errors in abstract data type. 
　　　- it is necessary for the evaluator to do type cheeking during the evaluation process in order to choose the correct axioms or to detect terms which do not exist. in fact these terms w i l l not be generated with correct programs. it might be possible here to add some operators which could be applied to inter to get error propagation and these terms 
would then exist  for instance : 
+ :   i n t   inter   int  inter  -  i n t   inter in spite of the existing one !  
　　　- an equation can be used i f f its two sides exist and have the same type. then  for instance  
the third theorem 

g. guiho 1 



g. guiho 1 




　　　this example shows that the proof is not very easy  even for such a simple example because of the theorems or lemmas which have to be used. in our opinion  this kind of proof cannot be done automatically by a present theorem prover  with the discovery of lemmas .a nice proof checher would be pre-
ferable. 
v conclusion 
　　　this method  this toy example and the simple proof do not intend to describe all the tools which have to be in such a system  
l.'e claim here that when we try to be very precise  and we have to when we build correct programs  all the concepts which belong to this paper have to be contained in one way or anotlier in the system  which leads to many d i f f i c u l t theoretical problems not completely solved at this time. 
what we can hope for in the near future is the effective implementation of such partial systems 
which w i l l become more and more powerful  coupled with meaningful research on abstract data type theory  specification languages  theorem provers or proof cheekers and rule rewriting systems. 
acknowledgments .'' 
the authors wishes to thank m. bidoit  m.c. 
m. c. gaudel  c. gresse  s. kaplan for many exciting discussions on this subject. 
