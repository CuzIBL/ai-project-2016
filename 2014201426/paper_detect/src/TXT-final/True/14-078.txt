 
the can system for automatic understanding of lisp programs is presented. uhen applied on a lisp program  can needs no assertion about what the program is intended to do. can's general task is to associate e meaning to a program  from which it is able to diagnose semantlc properties  unused portions of code  undefinitions  underused programs  classes of data for which evaluation of an expression never terminates   and to exhibit deep semantic properties. 
can's underlying theory is the conceptual calculus  based on the clausal form of predicate logic. it involves two main ideas : 
- an induction principle specially adapted to program understanding  as opposed to program v e r i f i c a t i o n   . 
- an extension of u n i f i c e t i o n to equation solving. 
keywords: program understanding  program meaning  concept  equation solving  unification  equilibration  induction  clausal form of predicate logic. 

1. 	introduction 
can is an implemented program understanding system. it is f u l l y automatic and detects semantic properties : 
- unused portions of code  or undefined function applicet ions 
- classes of data for which a program execution never terminates 
- programs which are underused in a given task 
this diagnosis 	a c t i v i t y 	is 	superimposed 	to 	can's 
normal a c t i v i t y x 	assigning a meaning to a program. 
can's underlying formal theory  the conceptual calculus  is baaed on clausal form of predicate logic. it admits new types of variables  segment variables  typed element variables  index notations  and constructors  sequences  bags  sets  within terms  with associated equation solvers. it uses an induction rule whose tesk is to induce properties of data from recursive equations   rather then to prove them. the application c r i t e r i a of this induction rule is a vicious circle detector. 
as opposed to program 	v e r i f i c a t i o n   	which 	lies 	on v e r i f i c a t i o n 	conditions 	generation 	 vcg  	 1  	and theorem 	proving  	program 	understanding 	lies 	on meta-evaluation 	 1  	and equation solving 	 1 1. 
meta-eveluetion as defined in  1 is e generalisation of symbolic evaluation  1 . 
1. 	from 	verification 	condition 	generation 	to meta-evaluation 
statements subsume implicit structures which they access and modify  tables of i d e n t i f i e r s   i/o buffers  stacks  arrays . symbolic evaluation pays a closer attention to these implicit structures than v e r i f i c a t i o n condition generetion. instead of being hidden in logicai expressions  they are 
individualized as data abstractions. as an example  where assignment is reduced  within vcg  to e mere operation of substitution on a logical expression   symbolic evaluation uses an abstract data structure uhich models a table of i d e n t i f i e r s . it permits to easily take in account different assignment modes  as they exist in programming languages. 
but symbolic evaluation  as it is defined in most works  leaves some problems unsolved. a c e l l to e lisp-defined symbolic evaluator of lisp expressions  as copied on existing ones    would appear as : 
	 eval-symb 	expression 	identifiers-table  
	identifiers-table 	would 	be 	a 	l i s t 	of 	tuples 	: 
	 identifier 	. 	value-of-1d  
actual symbolic evaluators only allow value~of-1d to be meta-described. meta-evaluation requires both identifier and expression to be eventually meta-described too  for instance  the set function w i l l introduce mete-described identifiers in the identifiers-table. eval and the p o s s i b i l i t y to make programs build and use other programs  w i l l both introduce meta-described expressions . 
1 

the 	extension 	from 	symbolic 	evaluation 	to meta-evaluation 	is 	not 	simply 	a 	theoretical 
improvement  but a practical need. 
on another hand  the combined uses of eval and fexprs allow the programmer to define his own control structures; new conditionals  iterations  repetitions and miscellaneous. 
we have adopted a formalism for representing program meanings which allows : 
- any level of abstraction in the description of the environment of an expression to be meta-evaluated  including the expression i t s e l f   . 
- incrementality : can's meta-evaluator is a s1t of conceptual representations of the basic lisp functions  statements  and control structures. it increases i t s e l f as it understands new user 
d e f i n i t i o n s . the meta-evaluator transforms each new lisp d e f i n i t i o n in a conceptual representation. this representation extends the understanding power of the meta-evaluator. 
our formalism is based on the clausal form of predicate logic . ue have adopted a new syntax. clauses are replaced by concepts and functional terms by conceptual representations  1 . one concept generally corresponds to several clauses  which share identical subterms. this new syntax is especially adapted to the induction rule of the conceptual calculus. 
ue have also extended the classical resolution rule  to an equilibration rule  where unification  la extended to equation solving. this extension has been f i r s t suggested by  1 . our equation solving system includes u n i f i c a t i o n under axioms of : 
- associativity and commutativity 	 1  
- associativity 	 1  
- associativity  commutativity  idempotence  - index notations  1  
index notations are obtained from the induction rule. 
meta-evaluation is a strategy which exclusively uses the equilibration rule. equilibration performs in a 
unified way the various tasks of : 
1- choosing which concept applies on the current syntactic u n i t   in the expression to be meta-evaluated. this confrontation process is an equation solving process  rather than a test  since the syntactic unit may be meta-described. 
1- evaluating the relevant parts of the current syntactic u n i t   as stated by the chosen concept. 
1- constraining the returned values and modified environments  as asked by the chosen concept  this is s t i l l done by equation solving  and may cause case analysis . 
1- constructing the resulting abstract environment and value returned by the syntactic unit. 
can is not simply a meta-evaluator. it uses one to perform  with the help of induction  a program analysis task. 
1. 	the conceptual  calculus 
syntax : 
the basic syntactic units of the conceptual 	calculus are the 	concepts. 	a concept is a couple : 
       concept =  logic   control  where control is either : 
ters + term 
or 
term -   bp term . cont  
the  bp term . 	cont  	form is a breakpoint  	tern 	is 
a procedure c a l l and cont is a set of subconcepts. subconcepts are concepts. the d i s t i n c t i o n w i l l however be helpful for the exposition of the equilibration rule. 
the logic component is a conjunction of l i t e r a l s   terms are simple pointers to the logic component. 

semantics 
ue have defined a semantics for concepts  which associates e set of horn clauses  to a concept. the results which hold for clausal form of predicate logic hold for the conceptual calculus. 
in particular  the following equilibration rule corresponds to the resolution rule . the induction rule and the vicious-circle detector  however  heve no known equivalent. 



1 



interesting feature. 
the following powerset program builds the list of subsets of a set represented as a list of its elements : 
 de pouerset  e  
 if  null e   cons nil nil  
 let  x  pouerset  cdr e    
 append x 
 dcons  car e  x      
 de dcons  a l  
 if  null l  nil 
 cons  cons a  car d  
 dcons a  cdr l      
though pouerset may not be conceptualized  or simplified  more than as a recursive program  quite identical to its lisp form  we may use can in a particular model  a simplified space of properties of lisp objects   where lisp lists are abstrected to the number of their elements. in 
this model  can conceptualizes pouerset in : 
	 pouerset 	n  -  1n 
which says that if pouerset is applied to a list of length n  its result has length 1 power n  which is 
the number of subsets of a set. 
understanding what ft program does. 
as a student-examination simulation  let us write a program which tests whether two lists have the same length or not  without using the lisp function length : 
 de samelength  l m   if  null l   null m  . . . 
ue now try a smell subtlety: instead of testing whether m is empty  we swap l and m at the recursive call  with only one of them reduced. thus  we obtain : 
 de samelength  l m  
 if  null l   null m  
 samelength m  cdr l     
ue can verify if this program fits our intentions by asking can to understand it. can's conceptuelization of samelength shows that the value is t  true  when l and m have equal lengths  but the conceptualization exhibits an undesired case : samelength's value is t also when l has exactly one single element more than m. in the other cases  .the value is correctly nil  false . 
1. 	conceptual representations 
conceptual representations are an attempt to : 
- maximally simplify the control component of a program  for the benefit of the logic component. 
- make the most of the literals in the logic component be of the form varieble=term or variable term. that is  properties of terms and relations among terms are maximally represented in the form of substitution lists  which detail their structure. 
a conceptual calculus program  concept  is 	a 	couple 
 logic   control . the maximum simplification of the control component is as a rule : term =  term. the simplification process consists in getting rid of breakpoints in the control component. breakpoints can be suppressed by : 
- equilibration. the logic component is augmented with the solutions of the solved equations. 
- induction. the logic component is augmented with indefinite sequences of associations  represented 
with index notations. 
in other words  the structure of terms  which is implicit in the control component  is explicited in the logic component. the latter may then be of invaluable help in further equation solving s i tuations. 
however  the only notations  variables and constructors  which may be allowed in the logic component are those for which equation solvers have been designed. for instance  equation solvers which deal with associative constructors and segment variables  prefixed here with a      allow to replace 
the classical recursive definition of append : 
 append    y  -  y 
 append  a . x  y  -  bp  append x y   1  v -   a . v   
 logic and control are intermixed for more readability  by the one can uses in the atoms-lists model of lisp : 
	 append 	  x  	  y   	-  	  x 	 y   1  
can automatically obtains  1  from  1 . 
by developping conceptual representations  we have been able to maximally simplify the control component of the conceptual definitions of many basic lisp functions : 
- typed element variables for functions car  cdr  cons  null  atom  numbp  equal. 
- segment variables and associative constructors for functions append  last. 
- index notations for member  	nth  	assoc  	reverse  length. 
~ associative-commutative constructors for arithmetic funct ions. 
- associative-commutative-idempotent constructors for internal functions such as the binding and unbinding of an identifier  setq  set  and identifier evaluation . 
1. 	equation solvers 
the equation solving methodology is an improvement on the classical procedural specification technics : how is an automatic program understanding system going to find a redundancy in : 
 progn  setq x     
 length x   
a typical ai solution  based on procedural specifications  would be to make length decide itself  during meta-evaluation  whether or not its 
abstract argument is too much restricted or not. this solution would need every lisp function  user defined or not  to do so. our solution is to commit this decision to a general equation solving system 
which is independant from lisp functions  user defined or not . 
in the present case  the decision is taken 	from 	the comparison of the two abstract sequences : 
 s1 . . . an  = 1 
where a1 . . . an and n are variables  which gives the constraint n=1. 
the equation solving methodology consists in grouping the procedural capacities which are redundantly 
scattered into independant reasoning systems. the implemented equation solvers that can uses  including the index notation cases  are developped in 
 
1. 	conclusion 
lie have presented the can system for automatic understanding of lisp programs. can is programmed in the conceptual calculus framework and shows capabilities widely beyond the scope of other existing program understanding systems. the reasons behind these achievements w i l l not be found in a special effort to devise ad-hoc solutions  but in the directions we focussed our attention to  which indivisibly concern the representation and deductive 
power of the conceptual calculus. 
while traditional logical expressions and theorem proving were adapted to program verifying  new variables  constructors and equation solving have raised the program understanding task to previously unreached summits. 
we have recently studied a promising new direction : the automatic choice of a level of representation. this possibility would allow can to conceptualize  using for instance set notations  programs which are not b u i l t from set operations  but whose operation may advantageously be abstracted to a set operation. 
in front of the multiplicity of new directions  and with regard to the promising achievements we expect from them  we can consider the program understanding problem as highly deserving entirely devoted works. 
can and the conceptual calculus are implemented on a pop kl-1 in the vlisp language . 
