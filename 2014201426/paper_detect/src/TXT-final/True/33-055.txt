 
　　　the use of ebstrect dete types as a basis for designing experimental knowledge representation systems is discussed. abstrect dete types ere shown to heve features in common with severel diverse representation formalisms  e.g. semantic networks  frames and klone . for example  ebstrect data types have notions analogous to concept  subconcept end inheritance. the relatively small conceptual distence between abstrect data types and knowledge representation formalisms make them en ideal vehicle for implementing such formalisms. 
	i 	introduction 
　　　representation of knowledge is of primary importance to programs dealing with real world s i t u ations. there have been several attempts to derive an appropriate formalism that would help to minimize the problems in this d i f f i c u l t area. there heve been just as many resulting methodologies  offering widely different solutions: frames  minsky  1   semantic networks  qulllian  
1   krl  bobrow and wlnograd  1   firstorder logic  hayes  1   and klone  brachman  1 . 	these different methodologies ere based on fundamentally different assumptions about the neture of knowledge  each with convincing claims for i t s precedence. 	in order to compare these assumptions it would be necessary to find a common basis of representation. 	ue contend that the d i f ferent formalisms can a l l be expressed in logic combined with abstract data types  and that this proves to be a useful and informative tool for designing knowledge representation systems. 
　　　logic with abstract data types  adts  offers a solid foundation that already includes many of the f a c i l i t i e s b u i l t into knowledge representation languages. it also allows a system to be b u i l t that combines features from different formalisms  providing an ideal testing ground for purposes of comparison. there are also inherent advantages in the choice of logic with adts. by writing programs in logic  especially clausal logic  kowalskl  1   we have both a mathematical semantics or specification and an operational semantics that allows us to execute thet specificetion  adt's have the same advantage  whether defined algrebralcally  zllles  1  goguen  thatcher and wegner  1  or model-theoretically  nourani  1  van emden and maibaum  1 . this allows the builder of the knowledge base to concentrate on defining concepts independently of how they might be implemented or executed  and thus allows the designer of the system to concentrate on issues of knowledge representetlon  rether thet programming. adts have the advantege of providing a powerful tool for structuring the masses of knowledge required in modelling even the most t r i v i a l situation. 
　　　the rest of this paper demonstretes the usefulness of this approach. examples are given using an extension of prolog  warren  1  that supports adts. this extension is based on the languages hope  burstall  macqueen and sannella  1  and obj  goguen and tardo  1  with most of the syntax taken from hope  a similar extension was proposed by van emden and maibaum  1 . ii semantic networks 
　　　we view semantic networks as a combination of logic and adts. this view differs slightly from e view held by many  notably hayes  1   which states that semantics networks are equivalent to e set of assertions in first-order logic and that the only velue they heve is as syntactic sugar for those essertions. in this view  the network in figure 1-la would be equivalent to the essertions in figure 1-lb and the network in figure 1-lc 
would be equivalent to the assertions in figure 1l d . 
　　　although this view sheds important light on the status of semantic networks as a formalism  it ignores their velue as an important structuring technique. that i s   one can also view semantic networks as both e structure and a set of rules 


1 

for interpreting that structure independent of the specific nodes or arcs an instance of a network contains. 
　　　in our view  a semantic network can most clearly be represented as an adt. the adt defines the structure of the network and defines operations 
which interpret that structure.* to understand how one sight go about defining a sematlc network using adts  consider the following: 

a semantic network is defined in  1  as consisting of a set of nodes  defined in  1   of soma type alpha and a set of arcs  defined in  1   of type alpha and beta  which are the type of the node and of the label respectively . alpha and beta are variables ranging over types. data definitions such as  1  are used to introduce a new data type along with the constructors which create elements of that type  mksn   make semantic network   is a function** which takee~ se ts ~of nodes and sets of arcs between these nodes and constructs a semantic network from them. a definition of a parameterized type  such as  1   is not really a type  but a 
type constructor. it constructs different sorts 
of semantic nets  depending on the type  or types  supplied as a parameter. por example  if we define mary. jam  judy. john and ilea as persons: 

which defines a type of semantic network whose nodes are of the type person  where judy  sam etc. are constants of that type  and whose arcs are labelled by family relationships  where mother and father are constants of that type . 
　　　now  since we defined a semantic net as really a constructor of semantic nets  we can use it to define a simple form of partitioned network ihendrix  1 . to do t h i s   we simply view a 
partitioned semantic net as a network whose nodes 
*glven this view  one could  in turn  argue that an adt is also just syntactic sugar for a set of assertions  but this becomes like arguing that one should not prograa in a high level language. since it is equivalent to a turing machine. **our extended prolog provides a functional interface. 
are themselves networks. 	for example  if we define: 

we have a network whose arcs are labelled by the neighbor relation  and whose nodes are networks of families. this could be used to answer a query like  who is the youngest person in john's neigh boring family.  
　　　to actually complete the definition we would have to define operations to interpret the network. these  of course  are lengthy and w i l l not be given here. 
　　　in the definition given above  we have tried to be consistent with the way semantic networks are traditionally defined. a slightly different formulation would be to distinguish different sorts of arcs  not by their labels  but by their type. to do t h i s   we need to introduce a correspondence between notions used to describe adts and notions used to describe semantic networks. corresponding to concept i s   of course type  to subconcept subtype  and to inheritance the notion of coercion: a function that takes an object of one type and returns an object of another type. using these notions  father arc and mother arc can be defined as subtypes of arc as follows: 
 1  
assuming mother arc and father arc were previously defined. 
　　　using this formulation  any operation on arcs w i l l apply to both father arcs and mother arcs  by having the system automatically coerce an object of type mother or father arc to type arc. 
　　　we can also get rid of arcs altogether by treating them as operations whose source type is the type of the node at the arc's t a i l   and whose tsrget type is the type of the node at the arc's 
head  we would also have to include some environment . thus  instead of incorporating knowledge about mother and father through the arcs and the rules which interpret them  we incorporate it through the semantics of the corresponding operation. for example  we could define general operations corresponding to mother and father as: 

along with a set of clauses which define how  given a person  his/her mother or father could be determined. 
　　　what we get by doing this is essentially a frame-like representation. in the next section we w i l l see how frames can also be represented by adts. 

1 

	i l l 	frames 
　　　in this section  we w i l l show how adts can be used to implement frames  by comparing a definition of a date frame  written in krl  a frame-based language  with a definition of a date adt written in our extended prolog. 
　　　first  consider the definition of date in krl  taken from  bobrow and winograd  1   
 date month name  when f i l l e d reset-day  day  bounded integer 1  
year integer  to f i l l assume 1  
  
a date consists of three slots  month  day  and year which are to be f i l l e d by a name  an integer between 1 and 1 and an integer respectively. attached to the month and year slots are procedures which are to be automatically activated when their associated conditions are satisfied. these procedures must contain a great deal of task specific information such as the number of months in a year  days in a month etc. the procedure attached to the month slot w i l l reset the day slot back to 1 whenever the month slot is f i l l e d   and the procedure attached to the year slot w i l l return the integer 1 whenever the slot is referenced 
before it is f i l l e d . 
　　　now consider the definition of a date adt. first  we need to define a year  a month-date and a day adt. 
 1  data month  name == january 1+ febuary ++ march ++ april ++ may ++ june ++ july 1+ august ++ september ++ october ++ november ++ december 
 1  data year - mkyear num  
 1  data day == mkday num  ++ out-of-bounds 
　　　the function mkday which takes a number and returns a day is a hidden function; it is not accessible to the user. instead  the user interfaces to the type day thru a function day declared as: 
day:num --  day 
and defined by the following clauses: 

which restrict the user to defining a day numbered between 1 and 1. more specifically  these clauses say that if the number passed to the function day is between 1 and 1 then a day corresponding to that number is returned  mkday n   otherwise outof-bounds is returned  which indicates the appropriate error. 
　　　using these definitions  we can define date as: 
　　　 1  data date - mkdate month name#day#year  to create a date  the user uses a function date declared as: 
date: month name --  date 
to take a month name and return a date. 	the other functions which update and access a date are: 

the semantics of date are given by the following rules or clauses: 

rule 1 creates a new date  rules 1  1 and 1 select from a date the day  month name and year respectively  and rules 1  1 and 1 update the day  month  name and year respectively and return a new date with those parts updated. 
　　　the work done by the attached procedures in the krl definition is done by rules 1 and 1  rule 1 w i l l cause the year 1 to be returned if the date is not updated before it is referenced. for example  get-year mkdate  july    w i l l return 
1 but get-year put-year mkyear 1   mkdate  july    w i l l return 1. rules 1 and 1 w i l l reset the day when the month name is f i l l e d . an advantage of the adt definition is that we can represent knowledge about defaults  such as that the default year is 1  and knowledge about what is implied by an action  such as that the day is to be reset to 1 when the month directly with the clauses without having to resort to an additional mechanism  as is the case in krl. 
　　　in this section we have shown how frames can be represented by adts. this should not be seen as detracting from the importance of frames or krl  since their importance is not as a system  but as a theory of knowledge representation which emphasizes ideas like prototypes and multiple descriptions. 
　　　in the next section we w i l l consider the need for a methodology for building up a knowledge base  and whether one developed for knowledge representation can be used for adts and vice versa. 

　　　regardless of the formalism used  a knowledge representation system must embody a methodology for adding to i t s knowledge base. if not  the system w i l l eventually be overcome with the com-

1 

plexlty of the knowledge needed to model the situation at hand. one system whose main contribution is such a methodology  which it calls an epistemology because of the broader context it is working i n   is klone. 
　　　the klone methodology is based on concepts and their interrelationships. concepts consist of roles  parts of the concept  and structural descriptions  relationships between the parts . the essence of the klone methodology is the a b i l i t y to build up knowledge by generalisation and specialization. for example  once we have defined course 
with roles instructor and students  we can specialise it to the subtype service course which results in specialising  in turn  student and teacher f i l l e r s of those roles. one could  of course  go in the other direction  and f i r s t define service course and then course. differentiation is another type of specialisation. first we define instructor and then differentiate it into two subroles: lab instructor and lecturer. 
　　　in this section we w i l l attempt to separate out the klone methodology from i t s implementation by showing how we can apply the methodology to the design of adts. in some ways  we can view klone as a user's interface to the design of adts where klone is the source language and adts are the target language of some translator. 
　　　the interrelationships we are concerned with here are 
1. subordination between concepts such that one concept is a subconcept  or superconcept  of another. 
1. individuation of a concept by another. for example  the concept babe ruth is an individual concept from the set represented by the generic concept baseball star. 
1. restriction on the type of object that can f i l l a role of another. 
1. differentiation of a role into subroles. 
1. satisfaction  or the relation between a role of a generic concept and one of i t s individual concepts such that the f i l l i n g of one is the same as f i l l i n g of the other. for example  a t o l l may require 1 cents  but this requirement may be satisfied  instead  by 1 quarts of chop suey. 
　　　the arcs have the following interpretation - arcs of the form a superc ♀ indicate that b is superconcept of a  arcs of~the form a ind * indicate that a is an individual concept of generic b  arcs of the for a v/r b indicate that the f i l l e r of role a must be ol type~b  arcs of the form a satisfies b indicate that role a satisfies role b  arcs of the form a d i f f b indicate that a is a eubrole of b  and  f i n a l l y   arcs of the form a role b indicate that b is a role of a. 

　　　now l e t ' s define some of the adts that correspond to the above klone description. starting 
with course  we see that it has roles instructor *nd students  and that instructor is differentiated into roles lab instructor and lecturer. now to define a corresponding adt for course  we need to know how to construct i t . that i s   what parts come together to form a course. these parts are  of course  the different roles. therefore  one way to define the adt course is as: 
data course - mkcourse teacher!teacher! l i s t student  
where one teacher is the lab instructor and the other is the lecturer. roles also indicate that we need corresponding operations which access and update them. 
　　　the differentiation links indicate that we need operations which allow you to select out only those teachers which are lecturers and those which are lab instructors. one way to differentiate between these objects is to type them  or in this case subtype them . we can define instructor as: 

which says that instructors are either lab instructors or lecturers. 
　　　the above definition may appear odd  since the fact that instructors consist of teachers is specified twice  once in the definition of lab instructors snd once in the definition of lecturer  rather than specifying it only once in the d e f i n i tion of instructor and l e t t i n g  inheritance  pass 
 note that this network would only l e t a single graduate student be s teaching aasistant. although clearly contrived  this allowed us to include a satifaction link without over complicating the network. 

1 

it down. the problem is that the data definition not only specifies knowledge at the conceptual level  but  at the implementation level  specifies how to construct i t . for which  like any function in any programming language  we need to know what i t s parameters are and their order. this information  although necessary at some level  is proba-
bly not necessary at the level in which the user interacts with the system; this gives another reason for needing some interface  whether or not it is klone. now we can change the definition of course appropriately. 
 1 data course mkcourse instructor#instructor//list student  
the klone description above actually implies a different definition  because courses  in our very limited description  consist only of service courses. therefore  the adt should be defined as: 
 1 data course == mkcourse service course  
 1 data service course == mkcourse teaching assistant# 
teachlng assistantant# freshman  
of course  the operations on course can s t i l l be applied to service course  because the system w i l l automatically coerce a service course into a course* for example  assume we have an operation to select out the lecturer from a course  declared as: 
	get lecturer: 	course --  instructor 
when it is applied to an object of type service course it w i l l return an instructor who is a lecturer who i s   in turn  a teaching assistant. 
　　　nothing has to be added to handle restriction links if the value of the restricted role is just a subtype of the value of the unrestricted role. if not  a l l that has to be done is for additional clauses to be added to the definition of the operations corresponding to the role. a similar situation occurs for satisfaction links. 
　　　the additional clauses to implement a satisfaction link define a mapping between objects of one role and objects of another. 	given operations that select the id  from a teacher and the student id from a graduate student  declared as: 
get-id: teacher --  employees get-student-id: graduate student --  
social security# 
we can then add the following clause to define the mapping from the role student id to id: 
 get-id grad   ＊ ss#toemp1 get-student-id grad   where grad is a graduate student which is coerced 
t1
 teacher before being applied to get-id and 
ssfltoempd* is a function which changes social security numbers to employee numbers. 
　　　adts also come with their own methodology for building up knowledge which allows existing types to be combined and enriched to produce new types 
  goguen  thatcher and wagner  1  and nouranl  1  . although this methodology is not as specific and directed as the klone methodology  it is important  because it guarantees that the new types are well-defined if the old ones were. 
　　　we have tried to show that the methodology provided by klone can be accommodated by using adts and therefore one can view klone simply as an interface to such an adt system. this has the advantage that we can decouple the concerns of the methodology from i t s implementation. 
v summary and conclusions 
　　　in this paper we have tried to demonstrate the usefulness of developing a system for knowledge representation that is based on a foundation of adts and logic. 	this foundation is strong enough to allow other systems supporting various formalisms for knowledge representation to be 
built upon i t . 
　　　the advantages of this approach are many  including: easing the problem of implementing a system by providing a base  allowing several formalisms to be supported by one system  and  f i n a l l y   providing a common language with which to compare representations in the different formalisms. 
　　　to demonstrate the usefulness of our approach  we have shown that two competing formalisms  frames and semantic networks  can be supported by a system such as we propose  and that our foundation is consistent with a methodology for adding to a knowledge base which is already in use. 
　　　several objects and situations have been modelled in a system designed along the proposed lines of this paper and run in our extended prolog. these include  a blocks world  a company world  and the largest one; an atn and a lexicon for that atn  following  woods  1  . 
acknowledgements 
　　　we are indebted to joe goguen for sharing his insights into the nature of abstract data types. we would also like to thank rod burstall and 
farshid nouranl for discussions about issues related to this paper  gabrial barta  eugene freuder and chris melllsh for comments on the structure of this paper  and barbara layne for preparation of this paper. 
