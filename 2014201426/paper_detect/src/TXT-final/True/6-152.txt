 
a promising technique used in some planning systems to improve their performance is the use of domain dependent search control knowledge. we present a procedure for compiling search control knowledge  expressed declaratively in a logic  into the preconditions of the plan actions  operators . we do this within the framework of the situation calculus by introducing a transformation of nonmarkovian action theories into classical markovian situation calculus theories. 
1 introduction 
one of the strategies used in planning to mitigate the complexity of the general problem is to employ some form of domain specific knowledge to assist the search for a plan. for instance  hierarchical task network  htn  planning systems  sacerdoti  1; wilkins  1; erol et al  1  use domain specific procedural knowledge in the form of task decomposition methods. the forward-chaining planners tlplan  bacchus and kabanza  1   talplanner  kvarnstrom and doherty  1  and the sat based planner satplan  kautz and selman  1  use domain knowledge in the form of declarative constraints expressed in a logical language. this strategy has been shown experimentally to yield remarkable improvements in performance. both tlplan and talplanner use control constraints expressed in the form of temporal logic formulas. these formulas are used to eliminate plan prefixes which will lead to a suboptimal plan or cannot be extended into a complete plan at all. 
　most practical planning systems use strips  adl or extensions of these to describe actions and their effects. however  the first formal specification of the classical planning problem  due to  green  1   was postulated in the language of the situation calculus  mccarthy  1 . the situation calculus has proven to be a very powerful formalism and has been employed in the formalization of many different aspects of dynamical systems  see e.g.  reiter  1  . in this paper  we use the situation calculus as our formal framework and consider how to incorporate search control into action theories. specifically  we show that control formulas with a certain syntactic form can be incorporated into nonmarkovian action theories in the situation calculus  as recently introduced in  gabaldon  1   in a similar way as  lin and reiter  1  treat qualification state constraints. in these nonmarkovian action theories  the effects and preconditions of actions are not assumed to depend solely on the current situation  but on any past situation. this nonmarkovian property of the theories allows an easier incorporation of dynamic constraints into database specifications  a more natural and concise axiomatization of nonmarkovian operations like rollback in transaction systems and other domains with nonmarkovian properties. in this paper  we are concerned with another problem where these theories are useful: incorporating search control knowledge by treating it as dynamic  qualification state constraints. dynamic in the sense that they may refer to the current and any past situation  as opposed to static state constraints which refer only to the current state. moreover  they are understood as qualification constraints because they pose further restrictions on the  executability  of actions.  we do not consider the use of these constraints for expressing ramifications  i.e. indirect effects of actions.  
　furthermore  we present a transformation from nonmarkovian action theories into markovian ones. this transformation takes an action theory with nonmarkovian axioms and by applying regression steps and introducing additional fluents and their corresponding successor state axioms  produces a classical markovian theory as introduced by  reiter  1 j. we then show how this transformation can be used for compiling search control knowledge into normal action preconditions. this nonmarkovian to markovian transformation procedure is of independent interest. toward the end we extend this approach for theories with explicit time and close with a discussion. 
1 formal preliminaries 
in this section we give an overview of the situation calculus and the main definitions necessary for action theories without the markov assumption. 
1 	the situation calculus 
reasoning about actions and change 	1 the situation calculus is a first order logic language with three basic components: actions  situations  and fluents. actions are responsible for all the changes in the world. situations are sequences of actions which represent possible histories of the world. fluents are properties of the world that change from situation to situation as a result of the execution of actions. formally  the language has three sorts: ac-
tiony situation and fluent. in addition to variables of these 
sorts  the language includes functions such as move to represent actions  a constant so and a function do  
for situations such as and predicates for representing fluents such as atloccition  . the initial situation  or empty history  is denoted by the constant so- non-empty histories are built by means of the function do. for a complete description see  pirri and reiter  1; reiter 1 . 
　a situation calculus axiomatization of a domain  includes the following set of axioms: 
1. axioms describing the initial situation of the world: a finite set of sentences whose only situation term is the constant so. 
　a set of these axioms  together with a set of domain independent foundational axioms  is called a  markovian  basic action theory. 
1 	a nonmarkovian situation calculus 
for a basic action theory without the markov assumption  we need some definitions. these are based on those in  gabaldon  1 . 
　wc will use the following abbreviations in the definitions to follow: 
where stands for either and variable .s appears in then we may write w and instead. 
definition 1  bounded formulas  for let be a term rooted at the formulas of bounded by o are the smallest set of formulas such that: 
1. if w is an atom whose situation terms are all rooted at then w is bounded by 
1. if w  w  are formulas bounded by situation terms rooted at s and   respectively  then 
	w and 	w are formulas bounded 
	by 	where 	is rooted at s and w 
1. if wi w1 are formulas bounded by situation terms rooted at then and where is of sort action or object  are formulas bounded by 
　the set of formulas strictly bounded by  is similarly defined by requiring in item  1  above that all situation terms of w be subterms of in item  1  that w be strictly bounded by a subterm of and w  by a subterm of rr; and in item  1  that w   w1 be strictly bounded by subterms of 
example 1 past temporal logic connectives can be expressed in the situation calculus with strictly bounded formulas as follows: 
1 	regression 
for basic action theories with the markov assumption   pirri and reiter  1  define a provenly correct regression mechanism that takes a situation calculus sentence and  under certain restrictions on the form of this sentence  transforms it into an equivalent sentence whose only situation term is 1  . this allows proving sentences without appealing to the foundational axioms which include a second order axiom. this regression operator was generalized for nonmarkovian theories in  gabaldon  1 . 
　in a nutshell  the regression operator  denoted by takes a sentence and recursively replaces each fluent atom by its definition according to its successor state axiom  i.e. by  atoms poss are similarly replaced by their definitions given by the action precondition axioms. regression recursively replaces these atoms until all the situation terms are reduced to so- for lack of space we refer the reader to  pirri and reiter  1; reiter  1; gabaldon  1  for the formal details. 
　in the transformation operator we introduce later  we will use a one-step version of the regression operator: tv stands for the regression of a sentence w bounded by  that results in a sentence bounded by o. 
1 	control knowledge and the qualification problem 
1 	reasoning about actions and change as mentioned earlier  the use of search control knowledge has proven to be a promising recourse for improving the performance of planning systems. both tlplan  bacchus and kabanza  1  and talplanner  kvarnstrom and doherty  1  use declarative control knowledge in the form of temporal logic and have shown substantial computational improvement. 
　since our goal is to compile search control into preconditions  we express control knowledge in terms of the past  not the future as it is done in tlplan and talplanner  this is further discussed in the last section . however  declarative search control knowledge is typically expressed in a future temporal logic and we believe that obtaining preconditions from knowledge in that form is an important problem. in the last section we comment on how we are approaching this. 
　from the point of view of logical theories of action  such as the situation calculus axiomatizations we discuss in this paper  taking control knowledge into account is closely related to the classical qualification problem  mccarthy  1 . this is the problem of determining all the conditions that need to be satisfied for an action to be executable and control knowledge is effectively a set of additional constraints on the cxecutability of actions  i.e. on what actions can be considered part of an executable plan. 
　lin & reiter  have considered the qualification problem for situation calculus basic action theories with state constraints  which are formulas of the form  uniform in cs. their solution is to add the qualifications to the precondition axiom of each action type: 
where after adding the qualifications to the precondition axioms  one can discard the constraints if two conditions are satisfied: all the state constraints hold initially  i.e. q so  holds for each q  and the domain closure assumption on actions is included in the theory. 
　control formulas are similar to state constraints in that they pose additional qualifications on actions  but they are more general since they may quantify over past situations. 
　in the nonmarkovian situation calculus  successor state axioms and action precondition axioms can refer to past situations in addition to the current situation. this permits control knowledge to be incorporated into action precondition axioms in the same way lin & reiter do. formally  if c s  is a formula bounded by .s representing some piece of control knowledge  we take this into account by adding it as an additional precondition for actions: 
		 1  
precondition axioms in nonmarkovian action theories allow situation terms rooted at s such as do to appear in their rhs  so we can add c do a directly without modification. by including the domain closure assumption on actions  we are then guaranteed that a situation is executable only if it satisfies the constraints. 
example 1  logistics domain constraint  consider a constraint from a logistics domain  which involves vehicles delivering packages to locations  saying that a truck must remain in a location if there is a package at that location and it's never been in the truck  so it hasn't just been delivered and needs to be moved : 

suppose that the action precondition axiom for driving a truck to a location loc 
is: 


in the next section  we introduce an operator which takes a basic action theory with such nonmarkovian axioms  and transforms it into one with markovian ones. 
1 	transforming a nonmarkovian theory into markovian 
in order simplify the presentation  let us first make some simplifying assumptions on the form and the nesting of formulas on which we define the transformation. 
　formally  in reference to item  1  of definition 1  we will assume that formulas are of the forms: 
 1  
 1  
where all  if any  free variables of w1 are among the free variables of the full formula. other combinations of quantifiers and logical connectives reduce to these two cases. the restriction on the free variables of w1 does make the transformation simpler. we treat the general case in the full version of this paper. next  we restrict the nesting of formulas in the following way. by definition  w1 must itself be of the form where w' is bounded by s  and  y  by s. we will restrict w-i by requiring it to be of the form  w'  i.e. without the conjunct w . 
　notice however that  even with this restrictions  arbitrary nesting of the past temporal logic abbreviations  example 1  is still expressible. 
　the transformation performs a combination of regression and of replacement of formulas by new fluents: 

ingforms: 

reasoning about actions and change 	1 

1 	reasoning about actions and change 

1 	constraints with explicit time 
in this section  we extend our approach to search control knowledge with explicit time. in the temporal situation calculus  reiter  1   actions have an additional temporal argument denoting the time of occurrence  e.g. drive truck loc 1  for driving a truck to a location loc at time 1. there are also some additional axioms: 

　the statement of the following theorem  which establishes the correctness of the transformation  requires adding the conjunct to formulas  1  and  1 : 
similarly for formula  1 . 

1 	discussion and conclusion 
we have shown that incorporating control knowledge as additional preconditions in nonmarkovian action theories is trivial when this knowledge is in the form of bounded formulas  which include encodings of past temporal logic modalities . we then introduced an operator for transforming nonmarkovian basic action theories into markovian ones. this 
　　　1thc variable t is a fresh new variable so there is no effect on the meaning of the formulas. 
operator introduces into a theory the additional fluents and axioms needed for keeping track of the relevant past information. we then showed how this operator can be used for compiling tlplan style search control knowledge into action preconditions in the situation calculus. 
　in the tlplan system  control knowledge is expressed in terms of linear  future  temporal logic  that is  temporal modalities next  always in the future  until  and sometime in the future are used. every time a new operator is added to 
the plan prefix being considered  a control formula is progressed through it. if the formula is progressed into false  the plan prefix is pruned since a plan with this prefix will violate the constraint. although it is easy to write situation calculus formulas corresponding to future temporal logic  regression cannot be used on them. however  we argue that if instead of progression  as in tlplan  we evaluate the control formulas against plan prefixes  it is reasonable to use a logic that refers to past situations instead of future situations. indeed  all the reasoning used by a planning system to decide if a partial plan should be discarded or not must be done relative to the properties of the partial plan itself. furthermore  some future temporal formulas are satisfied by all plan prefixes  e.g.  sometime in the future where is not unsatisfiable  and are not useful for search control. thus it seems to us that restricting control formulas to refer exclusively to the past is appropriate. 
　moreover  using past temporal logic is semantically cleaner for the following reason. the semantics of future temporal logic is defined in terms of infinite sequences of states. however  plans are finite sequences of actions and thus produce a finite sequence of states. in order to deal with this technical difficulty  tlplan makes the assumption that the world never changes after the plan is completely executed and therefore the last state infinitely repeats. this assumption is reasonable under another assumption typically made in classical planning: that the agent executing the plan is the only agent that changes the world  so when this agent terminates executing its plan  the world remains unchanged. this assumption is unnecessary if using past temporal logic or bounded situation calculus formulas. 
　nevertheless  it would be convenient to be able to handle control knowledge expressed in future temporal logic. we are currently working on developing a procedure that would allow us to take a future temporal logic control formula  such as this briefcase domain one: and produce a bounded situation calculus formula: 

that a plan prefix must satisfy. in turn  we can then apply the procedure introduced in this paper to compile these formulas into the preconditions of actions. 
reasoning about actions and change 	1 　bacchus & kabanza  have also extended their system for planning with temporally extended goals  which are conditions on sequences of states and not only on the final state as in classical planning. they use a first-order extension of the metric interval temporal logic  mitl   alur et ai  1  to specify the temporally extended goals. defining plan correctness with respect to m1tl formulas as goals again requires one to make the assumption that the world remains unchanged after the plan is executed. in the case of temporally extended goals this is a further complication since testing if the current state satisfies the goal means checking whether is true if the world were to indefinitely remain as it currently is.  past  mitl formulas can be encoded as formulas of the situation calculus with explicit time as discussed in the previous section. hence our approach also shows a way to reduce planning with temporally extended goals into planning with classical goals. 
　some preliminary experiments by bacchus & ady  have shown that compiling search control knowledge into action preconditions can result in better performance compared to systems such as tlplan which keep control knowledge as a separate set of formulas. a general method for compiling temporal formulas into preconditions in their framework has not yet been developed. 
　the work of  rintanen  1  is also concerned with the use of control knowledge as additional preconditions of plan operators. he uses  auxiliary facts  which is a similar to our introduction of new fluents in the transformation. like bacchus & kabanza  rintanen uses future linear temporal logic for representing control knowledge for planers with adl-like operators. with the help of these auxiliary facts  he then compiles the control knowledge into the operators. the main difference between his work and ours is that his framework is propositional  while ours is in the more expressive first order situation calculus. furthermore  he does not allow nesting of temporal operators-in our framework this would correspond to disallowing nesting of quantifiers on situations-which we do allow. also related but with a different approach  is the work of sierra . there  domain knowledge in the form of action selection rules is used for controlling a strips planner. analyzing the relationship of sierra's work with ours is among our future work. 
