 
　in this paper is presented a technique for transforming a class of recursive equations called linear equations into iterative equations. linear equations are characterized by involving at the most one recursive call for any invocation. in contrast to the conventional techniques  the scheme of program transformation presented here involves finding the solution of the given linear equation and transforming this solution. the solutions of linear equations can always be expressed using a construct called abstract sequence. two classes of abstract sequence programs are identified: right-associative and left-associative sequence programs. the former are obtained by solving linear equations and the latter correspond to iterative programs. the task of transforming linear recursive programs into iterative programs is thus reduced to the task of transforming right-associative sequence programs into left associative ones. various transformation rules are developed based on an algebra of functional programs. 
i introduction 
　since the pioneering work of  darlington 1  burstall 1  program transformation has come to be widely recognized as a program development tool. in this paper  we are interested in the application of program transformation to develop iterative programs from recursive programs. a generalized calculus for such transformations called unfold-fold method was given in i burstall 1. given a recursive equation to compute a 
　function f one finds another function /'  such that 
1. there exists a recursive equation for f that is in iterative form  and 
1. / can be defined in terms of/ ' without using recursion. 
once such a function f' is found  the unfold-fold method can be used to systematically develop the recursive equation for f from that for f the main problem with the use of this method is to find the target recursive function f. 
　we submit that the cause of the problem is that the unfoldfold method attempts to transform one recursive equation into another without regard to what the functions defined by these equations are. if we can find the solution of the given recursive equation  the function f  it may be possible to systematically develop the function f for which an iterative equation exists. but  unfortunately  it is not known how to express the solution of an arbitrary recursive equation. even though the solution of any recursive equation can be specified as the limit of a monotonically increasing sequence of functions |scott 1  manna 1   the limit itself is  in general  not  expressible   i.e.  cannot be specified using a closed form expression involving other functions. backus 1 initiated the development of notation and theory to formally derive and express the solutions of certain classes of recursive equations. further developments of this approach can be found in i backus 1  backus 1  williams 1 . 
　in this paper  we shall consider the class of linear equations as defined in ibackus 1. the solutions of these equations can always be expressed using a construct called abstract sequence  reddy 1a i. further  the solutions fall into a class of abstract sequence programs called right-associative sequence programs. we will identify another class called left-associative sequence programs which are equivalent to iterative programs we will then present examples of transformation rules to transform right-associative sequence programs into left associative ones  based on the  algebra of functional programs  introduced in  backus 1 . 
ii notation 
　we shall use the fp system given in  backus 1 as the language for presenting the transformations. an object in an fp system is either the undefined object   i    or an atom or a sequence of objects. the atoms include boolean values  t  f  and numbers. sequences are enclosed in angular brackets  ...  and the empty sequence is denoted by 1. a sequence containing i is equal to 1. all functions accept a single object as argument and yield a single object as result  either or both of which can be sequences. the application of a function on an object is denoted by the operator  : . all functions yield 1 when applied to i  i.e. they are strict . unlike other functional languages  in an fp system  only first-order functions are defined. using a small set of higher order functions called functional forms  functions can be defined without using x-abstraction. such definitions are called function-level definitions in contrast to the object level definitions of the λ-calculus style. 
　appendix i contains a list of backus's functions and functional forms which we shall use in this paper. some new functional forms that will be used are given below. 
a bstract sequence 
　　　　　　. 	1 	n seq r p:x -  x  r :x  ...   r :x  if p:r :x = t and p:r :x - f for all i n 
j if no such n exists 
　
u. reddy and b. jayaraman 1 
　
1 u. reddy and b. jayaraman 

　
u. reddy and b. jayaraman 1 

1 u. reddy and b. jayaraman 

u. reddy and b. jayaraman 1 

　
1 u. reddy and b. jayaraman 
of the functions involved. further development of fp algebra may alleviate this problem. 
　the right-associative-to-right-associative transformations are proved using an inductive proof similar to the unfold-fold method. the rules used in such proofs are 1 and 1 or 1 and 1 of the following. 
1. insertr h :     z   = z 
1. insertr h :  s apndr a  z  - insertr h :  s  a h z  
1. insertr h :  a apndl s  z  ~ ah  insertr h :  s z   
this suggests that it may be possible to apply these transformations directly on a recursive equation using unfoldfold  in effect mimicking the transformation of the sequence programs  because every right-associative sequence program is equivalent to a linear equation and vice versa . such a strategy would eliminate the need to restate the algebraic properties of functions in sequence form  and also integrate our technique with the unfold-fold method which is a much more general technique applicable to any recursive transformation. 
   if our techniques have to be used for equations other than linear equations  methods to express the solutions of those equations must be found.  williams 1 was a step in that direction. further investigation of recursive equation solutions would facilitate the development of transformation techniques for nonlinear equations. 
acknowledgements 
   we would like to thank don stanat  manton matthews and gyula mago for several discussions and suggestions. 

