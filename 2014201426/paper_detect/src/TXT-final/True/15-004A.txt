 
       we present a diagnostic model of software fault l o c a l i z a t i o n . a diagnoatic. approach to fault localization has proven effective in the domains of medicine and d i g i t a l hardware. applying this approach to the software domain requires two extensions: a heuristic abstraction mechanism which infers program function from structure using recognition and transformation t a c t i c s ; and a 
search mechanism which integrates both prototypic and causal reasoning about f a u l t s . 
	i. 	introduction 
       in this paper we present a model of fault l o c a l i z a t i o n for program debugging based on a 
       trouble-shooting paradigm   j     within a diagnostic framework we define the. software fault l o c a l i z a t i o n task as follows: a fault exists in a program whenever its output differs from that expected by the user. these descrepancies are called fault manifestations. the task is to identify the cause of 
each manifestation which is specific enough to effect program repair. 
　　　application of the trouble-shooting strategy has proven effective in constructing i n t e l l i g e n t systems for hardware  1 1  and medical  1 1  diagnosis. in contrast to ve rification-based approaches  cf.  1 1  this strategy concentrates computational resources on suspect components. applying the diagnostic approach to the software domain requires two extensions: a heuristic abstraction mechanism that infers function from structure using recognition and transformation t a c t i c s ; and a search mechanism that integrates both prototypic and causal reasoning to localize f a u l t s . 
       several program debugging systems evidence trouble-shooting tactics  1 1   but none are based on a comprehensive diagnostic theory. sussman  was primarily interested in developing a theory of s k i l l acquisition and examined the role of debugging in that context. while miller and goldstein  addressed the debugging task d i r e c t ly  the faults which mycroft analyzed were t i g h t l y constrained by the simplicity of the programs involved. shapiro  addresses more r e a l i s t i c debugging environments  but formulates a theory of 
*current address: department of computer tech.  purdue university at fort wayne  indiana 1 sedlmeyer* thompson johnson 
of 	minnesota 
	faults 	rather 	than 	of 	fault 	l o c a l i z a t i o n . 
　　　our model p a r t i t i o n s diagnostic knowledge for the software fault l o c a l i z a t i o n task into knowledge uspd to locate known and novel f a u l t s . for diagnosing known faults the knowledge base contains a hierarchy of faults which are known to occur in programs from a particular applications domain  and a set of empirical associations which relate fault manifestations to possible causes. for diagnosing novel faults the knowledge base contains models of implementation alternatives and execution behavior of functions indigenous to the domain. both knowledge sources are u t i l i z e d by a set of localization tactics to generate  select and test fault hypotheses. 
	ii. 	knowledge of program structure and function 
       knowledge of program structure and function is necessary for diagnosis of both known and novel f a u l t s . in the former case it is used to confirm expectations associated with a given fault hypothesis; in the latter case it is used to trace 
v i o l a t i o n s 	of 	expected 	behavior 	to 	their 	source. in our model 	this 	knowledge 	is 	captured 	in functional 	phototypes. 
　　　a functional. phototype  consists of four components: a set of recognition t r i g g e r s   a list of pre- and post-conditions describing the execution behavior  a description of prototype components and their topology  and a list of constraints among components that must hold for recognition. prototypes are defined at three levels of a b s t r a c t i o n : the language  programming  and applications levels; and are hierarchically organized. a portion of the functional prototype hierarchy describing the component topology of the  master f i l e priming read   mfpr  function is given in figure 1. 


1 r. sedlmeyer et al. 
the figure shows that the mfpr consists of a single component  the f i l e priming read. a f i l e   p r i m i n g read is only recognized as a mfpr if two cons t r a i n t s are met: the input record is used as a master record and the input f i l e is used as a master f i l e . recognition triggers include the f i l e priming read and f i l e input stmt prototypes as well as the language keyword   r e a d   . 
	iii. 	knowledge of faults 
       while functional prototypes describe expected program structure and f u n c t i o n ; fault modals describe expected defects in program structure and f u n c t i o n . a fault model embodies knowledge of a p a r t i c u l a r implementation error or class of errors. this knowledge consists of conditions under which the model is a p p l i c a b l e   a set of fault hypotheses  and a set of related fault models. a fault hypothesis is an expected defect in a functional prototype. defects are defined as missing prototype components or violated constraints. like f u n c t i o n al prototypes fault models are h i e r a r c h i c a l l y organized. figure 1 d e t a i l s a fault model for a 
       master f i l e input error. 

	iv. 	localization tactics 
       localization is performed using three t a c t i c s : fault-driven  function-driven and computationdntvan. vault-driven.n localization directs search at finding a p a r t i c u l a r kind of f a u l t   such as an unexpected end of file. function-driven localizata.on analyzes a p a r t i c u l a r functional prototype for an error. computation-driven localization concentrates search on the computation of a set of program v a r i a b l e s . each makes use of an abstraction mechanism  section 1  to generate and test fault hypotheses. 
       multiple l o c a l i z a t i o n tactics are desirable for three reasons. f i r s t   they enhance the prob a b i l i t y of finding f a u l t s since d i f f e r e n t tactics analyze the source code from different perspectives. secondly  tactics which best f i t the available i n formation can be chosen. thirdly  each tactic is optimal  in the sense of minimizing computational resources  for a p a r t i c u l a r l o c a l i z a t i o n task. 
       fault-driven l o c a l i z a t i o n uses the fault model hierarchy to generate fault hypotheses. output discrepancies serve as triggers for selecting a particular fault model. the more salient the trigger set the more specific the fault model and the associated fault hypotheses. given a fault model  l o c a l i z a t i o n continues by f i r s t choosing one of these fault hypotheses and then invoking 
the abstraction mechanism to test i t . if the hypothesis f a i l s then a related hypothesis can be proposed  a different fault model can be a p p l i e d   or the tactic can be abandoned. 
       function-driven l o c a l i z a t i o n uses output discrepancies to suggest that a particular functional prototype is improperly implemented. the abstraction mechanism is then invoked to identify the code which implements the prototype. tf the prototype cannot be found then the source code producing the most feasible match is considered as the intended implementation. the fault is i d e n t i fied by the statement causing f a i l u r e in the matching process. this tactic can also be directed to examine a p a r t i c u l a r abstraction level for a f a u l t . all prototypes defined at the chosen level are considered suspect. this application of the functiondriven tactic is less directed and usually less desirable. only when the output discrepancies offer no basis for prototype selection does this a l t e r n a t i v e become a t t r a c t i v e . 
       computation-driven l o c a l i z a t i o n traces the computation of a p a r t i c u l a r set of program v a r i ables. the computation is analyzed by extracting from the program those statements that d i r e c t l y 
affect the values of variables in the set. this extraction process is known as slicing . the computation can be followed in either a forward or reverse order of execution flow. faults are found by using the abstraction mechanism to interpret statements in the slice as members of more abstract functional prototypes and comparing the expected computational results to those derived. 
	v. 	program abstraction 
       program abstraction is performed by matching functional prototypes to the source code. abstraction may either be expectation-driven or data-driven depending upon the l o c a l i z a t i o n tactic selected. expectation-driven abstraction matches prototypes to code in a top-down manner  recursively matching components until a direct match can be 
made against the source code or previously recognized prototypes. data-driven abstraction employs language-level triggers to select prototypes for matching. prototypes matched at lower levels of abstraction serve as triggers for matching at higher levels. once a functional prototype is 
i d e n t i f i e d 	the 	corresponding 	code 	is 	bound 	to 	i t . 
       recognition-based abstraction is an e f f i c i e n t technique  but it has l i m i t a t i o n s . recognition of a functional prototype may f a i l for one of three reasons: a defect exists in the source code implementing the prototype  the wrong prototype is selected  or the source code represents an unf a m i l i a r but correct implementation. the effectiveness of the recognition mechanism depends on the exactness of the t r i g g e r i n g process and the richness of the a l t e r n a t i v e implementation set. purely s t r u c t u r a l matching is augmented by functional matching. the behavior of a program segment 
which is inferred from language semantics  can also be compared to the functional descriptions in the prototype hierarchy. 
	v i . 	an example 
　　　we have implemented an i n i t i a l version of the model in a program named falosy  fault localization system . falosy addresses faults in master f i l e update programs . in this section we i l l u s trate falosy1s reasoning for the master f i l e priming read error. 
       falosy is presented with a discrepancy l i s t and a list representation of the program's source code. the discrepancy list formally describes differences between expected and observed output. an abridged trace of falosy's reasoning is given in the appendix. numbers in parentheses refer to line numbers in the appendix. 
　　　a production system  whose antecedents are sets of discrepancies  is used to select the i n i t i a l l o c a l i z a t i o n t a c t i c . in this case l.hef a u l t - d r i v e n tactic is chosen and the master f i l e priming read fault model is triggered  1 . falosy hypothesizes that the priming  read for the master f i l e is missing  1 . the abstraction mechanism is invoked to identify the corresponding prototype  1 . a check is f i r s t made to determine if it has been previously i d e n t i f i e d . since it has not  the recognition mechanism is invoked recursively to find the components oi the master f i l e priming read prototype. 
       eventually search is carried out at the source l e v e l   and three read statements  1  1  are selected for further matching. constraints are now checked s t a r t i n g with those at the lowest level in the abstraction hierarchy. the f i r s t candidate is rejected since the f i l e i d e n t i f i e r is not used 
as the master f i l e  1 . the second and third candidates are rejectee1 because they do not precede the update loop  1 . no candidate s a t i s fies all constraints and recognition f a i l s . the o r i g i n a l hypothesis is thus v e r i f i e d . 

r. sedlmeyer et al. 1 
1. hole f i s  which is bound to g 1  does not precede role update loop  which is bound to g1 
1. match 	for 	f p 	r 	f a i l s 
1. matching m f pr to 	 s1 	read 	t r a n s f i l e 	transbuf  
1. 	checking 	constraint 	 before 	f i s 	update 	loop  
1. role f i s  which is bound to gooo1  does not precede role update loop which is bound to 
g  1 
1. match 	for 	f p r 	f a i l s 
1. recognition 	of m f pr 	fails 
1 . fault 	hypothesis 	v e r i f i e d 
1. 	fault 	is: 	 m f pr missing  bibliography 
 1 j. dekleer   local methods for l o c a l i z a t i o n of faults in electonic c i r c u i t s     m1t-a! memo 1  
1. 
 m.genesereth   diagnosis using hierarchic design models   proceeding* of the second aaa  
	conference-  	august  	1. 
 r. davis  h. shrobe  w. hamscher  k. wieckert  m. shirley  and s. pol it   diagnosis based on description of structure and f u n c t i o n     proceeding of the second aaa! coference  august  1. 
 r. hartlev   how expert should an expert system be    proceeding* ijcai-1  august 1. 
 r. p a t i l   p. szolovits  w. schwartz   causal understanding of patient illness in medical 
	diagnosis   	proceedings 	of 	1jca1  	august  
1. 
 e. short life  computer based medical consultations' mycin  american elsevier  new york  new york  1. 
 1 b. chandrasekaran and s. m i t t a l    deep versus compiled knowledge approaches to diagnostic problem-solving   proceeding* of the second 
	aaai 	conference  	august  	1. 
 1 h. wertz   understanding and improving lisp programs   1 tcai-1 proceeding*. 
 1 	r. 	ruth  	  i n t e l l i g e n t program a n a l y s i s     artifical intelligence  	vol. 	1  	no. 	l  	1 
 1 c. adam and m.  laura  a system to debug student 	programs   	artificial 	intelligence  
	november  	1. 
 f.  understanding and debugging computer programs   international journal of man-machine. 
	studies  	vol. 	1  	1  	pp. 	1. 
 g sussman  a computational model of skill 
	acquisition  	american 	elsevier  	new 	york  	1. 
  1   m i l l e r   	 a 	structured 	planning 	and 	debugging environment   	international 	journal 	of 	manmachine studies  vol. 	1. 	1. 
 d. shapiro    s n i f f e r : a system that understands bug   mit-ai memo 1  june  1 
 1m. 	weiser  	 program s l i c e s : 	formal  	psychologic a l   	and 	p r a c t i c a l 	investigations 	of an automatic 	program 	abstraction 	method   university 	of michigan 	ph.d. 	thesis  	1. 
b. dwyer   one more time - how to update a master f i l e     communications of the acm  vol. 1  no. 1  january 1. 
