
we introduce a general framework for specifying program correspondence under the answer-set semantics. the framework allows to define different kinds of equivalence notions  including previously defined notions like strong and uniform equivalence  in which programs are extended with rules from a given context  and correspondence is determined by means of a binary relation. in particular  refined equivalence notions based on projected answer sets can be defined within this framework  where not all parts of an answer set are of relevance. we study general characterizations of inclusion and equivalence problems  introducing novel semantical structures. furthermore  we deal with the issue of determining counterexamples for a given correspondence problem  and we analyze the computational complexity of correspondence checking.
1	introduction
with the availability of efficient implementations of the answer-set semantics  gelfond and lifschitz  1  for nonmonotonic logic programs  answer-set programming  asp  has been recognized as a fruitful paradigm for declarative problem solving. in this approach  a problem is encoded as a logic program such that its models  called answer sets  correspond to the solutions of the problem  which can be easily extracted from them. due to the availability of default negation  asp has become an important host for solving many ai problems  including planning  diagnosis  information integration  and inheritance reasoning  cf. gelfond and leone  for an overview on asp .
¡¡to support engineering of asp solutions  an important issue is determining equivalence of different encodings  given by two programs. to this end  various notions of equivalence between programs under the answer-set semantics have been studied in the recent past  viz. strong equivalence  lifschitz et al.  1   uniform equivalence  eiter and fink  1   and relativized notions thereof  woltran  1   as well as update equivalence  inoue and sakama  1 . informally  the former notions consider programs p and q to be equivalent  if
p ¡È r and q ¡È r have always the same answer sets  where r is a set of rules from a particular collection of rules. thus  if r is regarded as possible input  equivalent p and q are guaranteed to compute always the same answer sets. note that also open logic programs  bonatti  1   in which part of the rules are to be added at runtime  fit within this scheme.
¡¡however  none of these works have considered the practicably important setting of projected answer sets in asp. here  not a whole answer set of a program p is of interest  but only its intersection on a subset b   u of all letters; this includes  in particular  removal of auxiliary letters in computation. for a simple example  consider the programs
p = { sel x  ¡û s x  not out x   out x  ¡Å out y   ¡û s x  s y   x 1= y } and
q = { sel x  ¡û s x  not skip x   skip x  ¡û sel x  s y   x 1= y }.
they should select  by means of sel  one element satisfying s in their answer sets. here  an important issue is whether the programs are equivalent with respect to the  output  predicate sel  for all  inputs  s  where s may be defined by rules over predicates from a set a  say  or given by facts.
¡¡another aspect is that  apart from equivalence  other relationships between the sets of answer sets of p and q might be of interest. a natural example is inclusion  which means that each answer set of p is also an answer set of q. here q can be viewed as an approximation of p  which is sound with respect to cautious reasoning from p.
¡¡motivated by these observations  in this paper  we consider solution correspondences in asp at a generic level. our main contributions are briefly summarized as follows.
¡¡ 1  we introduce a general framework for correspondences between the answer sets of programs p and q  which are augmented by further rules from a context c of possible extensions  where the correspondence is determined by a binary relation ¦Ñ. previous notions of equivalence and projected answer sets amount to particular instances of this framework.
¡¡ 1  we provide characterizations of inclusion correspondence and equivalence between programs under projected answer sets  in terms of novel semantical structures  called spoilers  which refute this property  and certificates  which capture the essence of equivalence  similar as se-models and ue-models do for strong and uniform equivalence  respectively. based on these characterizations  we present interesting correspondence results on varying projection sets in asp.  1  we show how spoilers can be used to construct counterexamples to an inclusion resp. equivalence correspondence  consisting of a suitable interpretation m and a rule set r such that m is an answer set of exactly one of p ¡È r and q ¡È r.
¡¡ 1  finally  we determine the computational complexity of correspondence checking for propositional disjunctive programs under projected answer sets. our main result is that equivalence checking is -complete in general  and thus feasible in polynomial space as compared to a naive guessand-check procedure which requires exponential space. furthermore  we show that for restricted settings  the complexity gradually decreases from  to conp.
¡¡the results presented in this paper significantly advance the current state of equivalence testing in asp towards highly relevant settings for practical applications  and provide novel insight into the structure of equivalent programs. besides the papers quoted above  further related work mostly addresses semantic and complexity characterizations of equivalence  lin  1; turner  1   or describes implementation methods  eiter et al.  1; oikarinen and janhunen  1 . the recent work by pearce and valverde  addresses strong equivalence of programs over disjoint alphabets which are synonymous under structurally defined mappings.
¡¡the characterizations we present are non-trivial and  as shown by our complexity results  necessarily involved in the sense that no  simple  criteria exist. together with counterexamples  they provide a basis for powerful program optimization and debugging tools for asp  which are lacking to date.
1	preliminaries
we deal with propositional disjunctive logic programs  which are finite sets of rules of form
a1 ¡Å ¡¤¡¤¡¤ ¡Å al ¡û al+1 ... am not am+1 ... not an   1 
n¡Ým¡Ýl¡Ý1  where all ai are propositional atoms and not denotes default negation; for n = l = 1  we usually identify the rule with the atom a1. if all atoms occurring in a program p are from a given set a of atoms  we say that p is a program over a. the set of all programs over a is denoted by pa. we call a rule  resp.  program  normal iff it contains no disjunction ¡Å. a program is unary if it contains only rules of the form a ¡û b or a ¡û; paun denotes the set of all unary programs over
a. for a set of atoms a = {a1 ... am}  not a denotes the set {not a1 ... not am}. accordingly  rules of form  1  will also be written as a1 ¡Å ¡¤¡¤¡¤ ¡Å al ¡û b1 not b1  where b1 = {al+1 ... am} and b1 = {am+1 ... not an}.
¡¡following gelfond and lifschitz   an interpretation i  i.e.  a set of atoms  is an answer set of a program p iff it is a minimal model of the reduct pi  which results from p by  i  deleting all rules containing default negated atoms not a such that a ¡Ê i and  ii  deleting all default negated atoms in the remaining rules. the set of all answer sets of a program p is denoted by as p . the relation i |= p between an interpretation i and a program p is defined as usual.
¡¡under the answer-set semantics  two programs p and q are regarded as  ordinarily  equivalent iff as p  = as q . the more restrictive forms of strong equivalence  lifschitz et al.  1  and uniform equivalence  eiter and fink  1  have recently been generalized as follows  woltran  1 :
let p q be programs over u  and let a   u. then  p and q are strongly  resp.  uniformly  equivalent relative to a iff  for any r ¡Ê pa  resp.  r   a   as p ¡È r  = as q ¡È r .
¡¡if a=u  strong  resp.  uniform  equivalence relative to a reduces to strong  resp.  uniform  equivalence simpliciter; if a=   ordinary equivalence results in either case.
¡¡we use the following notation. for an interpretation i and a set s of  pairs of  interpretations  we write s|i = {y ¡É i | y ¡Ê s}  s|i = { x ¡Éi y ¡Éi  |  x y   ¡Ê s} . if s = {s}  we write s|i instead of s|i  if convenient.
¡¡for any a   u and any y   u  a pair  x y   of interpretations is an a-se-interpretation  over u  iff either x = y or x   y |a.  x y   is an a-se-model of a program p iff  i  y |= p;
  ii  for all y 1   y with y 1|a = y |a  y 1 |1= py ; and  iii  x   y implies the existence of an x1   y with x1|a = x such that x1 |= py holds.
a pair  x y   is total iff x = y   and non-total otherwise.
the set of all a-se-models of p is denoted by sea p .
¡¡for a = u  a-se-interpretations  resp.  a-se-models  are simply called se-interpretations  resp.  se-models   coinciding with the notions defined by turner   and we write se p  instead of seu p .
proposition 1   woltran  1   two programs p and q are strongly equivalent relative to a iff sea p  = sea q .
example 1 consider the following two programs  p1 and p1  which we shall use as a running example:
p1 = p1 ¡È {c ¡Å d ¡û a; c ¡Å d ¡û b} 
¡¡p1 = p1 ¡È {c ¡Å d ¡û a b; d ¡û b not c; c ¡û a not d}  for p1 = {a ¡û c; b ¡û c; a ¡û d; b ¡û d; ¡û not c not d}.
they have the following se-models:1
se p1 ={   abc     abd     abcd   abcd abcd  
 abc abcd   abd abcd   abc abc   abd abd } 
 se p1 =se p1 ¡È{ b abc   a abd   b abcd   a abcd }. hence  p1 and p1 are not strongly equivalent. on the other hand  as p1  = as p1  =    i.e.  p1 and p1 are  ordinarily  equivalent. moreover  p1 and p1 are strongly equivalent relative to a iff a ¡É {a b} =  . for a = {a b}  we get
sea p1  = {   abc      abd    abc abc    abd abd }  sea p1  = sea p1  ¡È { b abc    a abd }.
1	general framework
in order to deal with differing notions of program equivalence in a uniform manner  taking in particular the currently existing notions of equivalence  as presented above  as well as equivalence notions based on the projection of answer sets into account  we introduce a general framework for expressing solution correspondences between logic programs. in this framework  we parameterize  on the one hand  the set r of rules to be added to the programs p and q  and  on the other hand  the relation that has to hold between the collection of answer sets of p ¡È r and q ¡È r. concerning the latter parameter  besides equality  other comparison relations like setinclusion may be used. this leads to the following notion:
definition 1 by a correspondence frame  or simply frame  f  we understand a triple  u c ¦Ñ   where  i  u is a set of atoms  called the universe of f   ii  c   pu  called the context programs of f  or simply the context  and  iii  ¦Ñ   1u ¡Á1u.
¡¡for all programs p q ¡Ê pu  we say that p and q are f-corresponding  symbolically p 'f q  iff  for all r ¡Ê c   as p ¡È r  as q ¡È r   ¡Ê ¦Ñ.
¡¡intuitively  in a correspondence frame f =  u c ¦Ñ   u determines the general alphabet under consideration  c determines the kind of rules used for comparison  and ¦Ñ is the specific operation used for checking the correspondence of two programs.
¡¡it is quite obvious that the equivalence notions discussed above are special cases of f-correspondence. indeed  for any universe u and any a   u  we have that strong equivalence relative to a coincides with  u pa = -correspondence  and uniform equivalence relative to a coincides with  u 1a = correspondence. consequently  it holds that  i  strong equivalence coincides with  u pu = -correspondence   ii  uniform equivalence coincides -correspondence  and  iii  ordinary equivalence coincides with  u { } = correspondence.
¡¡in this paper  we are mainly concerned with correspondence frames of form  u pa  b  and  u pa =b   where a   u is some set of atoms  and  b and =b are projections of the standard subset and set-equality relation  respectively  to a set b   u  defined as follows: for sets s s1 of interpretations 
  s  b s1 iff s|b   s1|b  and
  s =b s1 iff s|b = s1|b.
¡¡in particular  =b amounts to answer-set existence if b =    and to correspondence between answer sets if b = u.
¡¡in what follows  if f is of the form  u c =b   we refer to f also as an equivalence frame  and  accordingly  to fcorrespondence also as f-equivalence. as well  a frame of the form  u c  b  is also referred to as an inclusion frame.
¡¡for later purposes  we also introduce the following notion: a correspondence problem  ¦°  over u  is a quadruple  p q c ¦Ñ   where p q ¡Ê pu and  u c ¦Ñ  is a frame. we say that ¦° holds iff p ' u c ¦Ñ  q holds. in accord with the above designations  we call ¦° an equivalence problem if  u c ¦Ñ  is an equivalence frame and an inclusion problem if  u c ¦Ñ  is an inclusion frame.
¡¡for a correspondence problem ¦° =  p q c ¦Ñ  over u  we usually leave u implicit  assuming that it consists of all atoms occurring in p  q  and c.
we next list some basic properties of f-equivalence.
proposition 1 let  u c =b  be an equivalence frame and p q ¡Ê pu. then  the following conditions hold:
1. if p ' u c =b  q  then p ' u c1 =b1  q  for all c1   c and all b1   b.
1. p ' u c =b  q iff p ' u c  b  q and q ' u c  b  p.
¡¡we recall an important result due to woltran   extending an analogous result by lifschitz et al. . proposition 1 consider a frame  u pa =   for a   u  and let p q ¡Ê pu. then  p ' u pa =  q iff p ' u paun =  q. example 1 we have already seen that for p1  p1 from example 1  p1 '1  u pa =  p1 holds  for a = {a b} and u = {a b c d}. hence  by proposition 1  p1 '1  u paun =  p1. this is witnessed by the fact that  e.g.  as p1¡È{a}  = {abc abd} while as p1 ¡È {a}  = {abc}.
¡¡the relevance of proposition 1 is that it allows to drastically reduce the number of required rules for equivalence checking. however  the proposition does not generalize to projections of answer sets.
theorem 1 for any equivalence frame  u pa =b  with
a b   u  and any p q ¡Ê pu  if p ' u pa =b  q  then
p ' u paun =b  q  but the converse does not hold in general.
proof. that p' u pa =b q implies p' u paun =b q is immediate from part 1 of proposition 1. our running example shows the failure of the converse: p1 ' u paun =b  p1 holds  where u ={a b c d} and a = b = {a b}  but p1  u pa =b p1. the latter holds in view of as p1 ¡È
{a¡Åb ¡û}  = {abc abd} but as p1 ¡È {a¡Åb ¡û}  =    as easily shown.	1
¡¡the above theorem also holds if the set paun is substituted by the class of all normal programs over a. indeed  programs p1 and p1 of our running example are corresponding with respect to a frame using normal programs over a = {a b} as context  because in each stable model of p1¡Èr resp. p1¡Èr  both a and b must be true. thus  rules in r    pa  with negative literals in the body are immaterial.
¡¡theorem 1 indicates that equivalence for projected answer sets is more involved. the same holds for inclusion  since as an easy corollary to theorem 1  p ' u pa  b  q implies p ' u paun  b  q  but not vice versa. in fact  the next result shows that  in general  a smallest extension r violating inclusion has exponential size.
theorem 1 there exists a family of problems ¦° =  p q 
pa  a  such that each r   pa witnessing as p ¡Èr |a 1  as q ¡È r |a is exponential in the size of p and q.
 proof  sketch . the idea is to encode a propositional cnf  over atoms v   for ci = ci 1 ¡Å ¡¤¡¤¡¤ ¡Å ci ki  into ¦° =  p q pa  a  such that  for any r ¡Ê pa  as p ¡È r |a  1 as q ¡È r |a and  r  must include a dnf for ¦Õ  where r  is the result of interpreting r as a classical formula.
¡¡let v¡¥ = {v¡¥ | v ¡Ê v }  v 1 = {v1 | v ¡Ê v }  v¡¥1 = {v¡¥1 | v ¡Ê v }  and g = {g1 ... gn} be sets of new atoms. we define
p =	{v ¡Å v¡¥ ¡û; ¡û not v; ¡û not v¡¥ | v ¡Ê v } ¡È {v ¡û u u¡¥; v¡¥ ¡û u u¡¥ | v u ¡Ê v } ¡È
{v ¡û ci ; v¡¥ ¡û ci  | v ¡Ê v ; 1 ¡Ü i ¡Ü n} 
where ci  = c i 1 ... c i ki  v  = v¡¥  and   v   = v  and
q =	{v ¡Å v¡¥ ¡û; v1¡ûv ¡¥ not v¡¥1; v¡¥1¡ûv not v1 | v ¡Ê v } ¡È
{¡û v1 v¡¥1; ¡û not v1 not v¡¥1 | v ¡Ê v } ¡È
{v ¡û u1; v¡¥ ¡û u1; v ¡û u¡¥1; v¡¥ ¡û u¡¥1 | v u ¡Ê v } ¡È
       {gi ¡û ci j | i = 1..n j = 1..ki} ¡È {¡û g1 ... gn}  with. informally  p ¡È r only admits answer sets containing a  and indeed it holds that  a a  ¡Ê se p ¡Èr |a se q¡Èr |a  for some r. for any such r  the se-models  x a  with x   a must be precisely those where x is a countermodel of ¦Õ. this means that r a is a cnf for  ¦Õ  and thus  r a amounts to a dnf for ¦Õ. this proves the claim. now  as well-known  the smallest dnf for a cnf ¦Õ can be exponential in ¦Õ  which proves the result. 1
¡¡we can similarly construct a family of problems showing that a smallest extension r violating equivalence has exponential size. hence  a naive guess and check algorithm to disprove inclusion or equivalence needs exponential space. for a better algorithm  we have to develop suitable semantical characterizations  which must take disjunctive extensions into account.
1	characterizations
in this section  we first present some characteristic structures associated with inclusion and equivalence problems under projections of answer sets  termed spoilers and certificates. based on them  we then discuss some interesting invariance results.
we start with some general properties.
definition 1 a set s of se-interpretations is complete iff  for each  x y   ¡Ê s  also  y y   ¡Ê s as well as  x z  ¡Ê s  for any y   z with  z z  ¡Ê s.
¡¡it can be shown that the set se p  of all se-models of a program p is always complete.
¡¡the following guarantees that a complete set s of seinterpretations can be represented by some program p.
proposition 1 let s be a complete set of se-interpretations  and let a be a set of atoms. then  there exists a program
ps a ¡Ê pa such that se ps a |a = s|a.
¡¡one possibility to obtain ps a from s is as follows: take rules ¡û y not  a   y    for each y   a such that  y y   ¡Ê/ s|a  and rules wp¡Ê y  x  p ¡û x not  a y    for each x   y such that  x y   ¡Ê/ s|a and  y y   ¡Ê s|a.
1	spoilers
the first class of characteristic structures associated with program correspondence we are dealing with are of such a nature that their existence prevents the equivalence of programs under projected answer sets.
¡¡we need the following auxiliary notation: let s be a set of se-interpretations and y   c sets of atoms. then 
{ x z  ¡Ê s | z|c = y |c}.
definition 1 let ¦° =  p q pa  b  be an inclusion problem over u  let y   u be an interpretation  and consider s   ¦Òya¡Èb sea q  . the pair  y s  is a spoiler for ¦° iff  i   y y   ¡Ê sea p  
 ii  for each  z z  ¡Ê s  some non-total  x z  ¡Ê s exists 
  and
 iv   x z  ¡Ê s implies  x y   ¡Ê/ sea p .
¡¡intuitively  in a spoiler  y s   the interpretation y is an answer set of p ¡È r but not of q ¡È r  for some r  which is semantically given by s.
example 1 for p1 and p1 from our running example and a = {a b}   y1 s  and  y1 s  are the only spoilers for
 p1 p1 pa  a   where y1 = {abc}  y1 = {abd}  and
s = { a abd   b abc   abc abc   abd abd }  with the latter being a subset of ¦Òya1 sea p1   = ¦Òya1 sea p1   = s ¡È {   abc     abd }  as required in definition 1.
the central property of spoilers is as follows:
theorem 1 let f =  u pa  b  be a frame. then  for any p q¡Êpu  p 'f q iff there is no spoiler for  p q pa  b .
¡¡an immediate consequence of this theorem  together with part 1 of proposition 1  is the following result:
corollary 1 let f =  u pa =b  be an equivalence frame and p q ¡Ê pu. then  p 'f q iff neither  p q pa  b  nor  q p pa  b  has a spoiler.
¡¡as discussed later on  spoilers provide a semantical basis for counterexample generation.
1	certificates
after having introduced structures which disprove program correspondence  we now discuss structures which prove program correspondence. roughly speaking  the structures introduced below express the essence of a program p  with respect to program equivalence  in terms of a semantic condition on p alone.
definition 1 let c be a set of atoms and s a set of seinterpretations. a pair  x y    where x is a set of interpretations and y   c  is a c-projection of s iff there exists some set z such  and
 iii  x = {x |  x z  s x z}. for a program p  we call an  a ¡È b -projection of sea p  an  a b -certificate of p.
¡¡the following lemma can be shown by means of spoilers  and expresses that programs are corresponding with respect to inclusion frames iff their certificates satisfy a certain containment relation.
lemma 1 correspondence of  p q pa  b  holds  iff for each  a b -certificate  x y   of p  an  a b -certificate  x1 y   of q exists with x1   x.
¡¡the next result expresses the central property of certificates. towards its formulation  we require a further concept: an  a b -certificate  x y   of a program p is minimal iff  for any  a b -certificate  z y   of p  z x implies z=x.
theorem 1 let f =  u pa =b  be an equivalence frame.
then  for any p q ¡Ê pu  p 'f q iff the minimal  a b certificates of p and q coincide.
¡¡note that this result is the pendant to proposition 1  which deals with a model-theoretic characterization of relativized strong equivalence. indeed  two programs p q ¡Ê pu are strongly equivalent relative to a iff their minimal  a u certificates coincide. some further relations between program correspondence and relativized and non-relativized strong equivalence  respectively  are given in the next subsection.
example 1 in our running example with a = b = {a b}  we get that p1 has a single  a a -certificate   { } {ab}   while p1 has two  a a -certificates   {  {a}} {ab}  and  {  {b}} {ab}   all of them minimal. since they do not coincide  we obtain that p1 and p1 are not  u pa =a equivalent  as expected.
1	invariance results
theorem 1 allows us to derive some interesting invariance results with respect to varying projection sets b.
theorem 1 let u be a set of atoms and a b   u. then  for
any p q ¡Ê pu  p ' u pa =b  q iff p ' u pa =a¡Èb  q. this result follows immediately from theorem 1 and definition 1  by observing that  a b -certificates of a program p and  a a¡Èb -certificates of p are actually identical objects  since  a ¡È b -projections of sea p  trivially coincide with  a ¡È  a ¡È b  -projections of sea p .
¡¡theorem 1 has several interesting consequences. corollary 1 for programs p q and any set a of atoms   p q pa =   holds iff  p q pa =a  holds.
¡¡that is  answer-set existence  which is relevant regarding boolean properties  relative to additions from pa is tantamount to relativized strong equivalence under projection to a.
corollary 1 let u be a set of atoms. then  for any programs p q ¡Ê pu and any set b   u of atoms  p ' u pu =b  q iff p and q are strongly equivalent.
this result is quite striking as it shows that strong equivalence corresponds to  u pu =b -equivalence  for any projection set b. it is derived from the fact that  for any b  the  u b certificates of a program p are in a one-to-one correspondence to the se-models of p as follows:  {x1 ... xm} y   is a  u b -certificate of p iff  x1 y    ...   xm y     y y   are all the se-models of p with fixed second component y .
¡¡in particular  consistency under answer-set semantics  i.e.  if b =    coincides with strong equivalence. more generally: corollary 1 let u be a set of atoms. then  for all programs p q ¡Ê pu and all sets a and b of atoms such that a ¡È b = u  p ' u pa =b  q iff p and q are strongly equivalent relative to a.
in fact  in this setting  a correspondence between a-semodels of a program and its  a b -certificates is analogously established as above.
1	counterexamples
given that a correspondence problem ¦° =  p q pa  b  does not hold  it is interesting to know why this is the case. we define a counterexample for ¦° as a pair  r m   where
  r ¡Ê pa such that as p ¡È r   1 bas q ¡È r   and   m ¡Ê as p ¡È r  and m|b ¡Ê/ as q ¡È r |b.
¡¡furthermore  a counterexample for an equivalence problem  p q pa =b  is any counterexample for either  p q  pa  b  or  q p pa  b .
¡¡our notion of a spoiler from definition 1 provides a basis for such counterexamples.
theorem 1 suppose  y s  is a spoiler for a correspondence problem ¦° =  p q pa  b . then   ps a y   is a counterexample for ¦°  where ps a is as in proposition 1.
¡¡this result follows from theorem 1 and proposition 1 by the fact that s|a is complete for any spoiler  y s .
example 1 for our example and the sketched construction after proposition 1  we derive counterexamples  r {abc}  and  r {abd}   where r = {a ¡Å b ¡û ; ¡û not a;¡û not b;
¡û not a not b}; obviously  the last rule is redundant. note that if an inclusion problem  p q pa  b  fails  some counterexample as in theorem 1 does exist.
¡¡we observe that the programs in the counterexamples of theorem 1 may contain redundant clauses  as succinctness is not a concern of spoilers. for instance  in our example 
r1 = {a ¡Å b ¡û} would yield a simpler counterexample. in fact  spoilers are not geared towards providing minimal counterexamples with respect to particular syntactic subclasses of contexts.
   towards facilitating special counterexamples  we may extend the notion of a spoiler to pairs  y s   where s 1   is admitted for complete s  by replacing in
definition 1 the set s in  ii  with s ¡É ¦Òyb sea q   and in
 iii  and  iv  with s ¡É ¦Òya¡Èb sea q    calling the result an extended spoiler.
example 1 in our running example  ¦°= p1 p1 pa  a  has spoilers  {abc} s  and  {abd} s   with s = { a abd    b abc    abc abc    abd abd }. since both  ab ab  1¡Ê sea p1  and  abcd abcd  1¡Ê sea p1   one can verify that any complete superset s1 of s not containing any    z   with z|a = {ab}  yields extended spoilers  {abc}  s1  and  {abd}  s1 . in particular  we may set s1 = s ¡È { a a  
 b b }. note that s1|a = { a a    a ab    b b    b ab    ab ab }. now  the simpler program r1 = {a ¡Å b ¡û} fulfills se r1 |a = s1|a; thus   r1 {abc}  and  r1 {abd}  are counterexamples for ¦°.
¡¡theorems 1 and 1 generalize to extended spoilers. more counterexamples can be constructed using such spoilers in general  which may include a counterexample of particular form. in our example  adding { a a   b b } to an ordinary spoiler allowed us to give a counterexample program which is positive. on the other hand  we can show that no counterexample program which is normal exists  as no    z  with z|a = {ab} can be added . an elaboration of this issue remains for further work. 1 computational complexity
our first result is concerned with recognizing whether an interpretation is a discriminating answer set for the extended programs p ¡È r and q ¡È r  i.e.  a  partial  spoiler.
lemma 1 given programs p and q  sets a and b of atoms  and an interpretation y   deciding whether  p q pa  b  has some spoiler whose first component is y is ¦°p1 -complete. proof  sketch . we show ¦²p1 -membership of deciding that no spoiler of form  y s  exists. by definition 1  it suffices to check whether  a   y y   ¡Ê/ sea p  or  b  whether there exists a  z z  ¡Ê ¦Òya¡Èb sea q   such that each non-total
 x z  ¡Ê sea q  implies  x y   ¡Ê sea p . part  a  is feasible in polynomial time with an np oracle. for part  b   note that given y and z  checking whether  for each nontotal .
therefore  part   and the entire test is in .
¡¡the -hardness is shown by a sophisticated reduction from suitable quantified boolean formulas  qbfs   using machinery from the exponential counterexample construction which was used for showing theorem 1. 1
¡¡from this result  we can easily derive the membership part of our main complexity result given below; its hardness part is again shown by an encoding of qbfs.
theorem 1 given programs p and q and sets a and b of atoms  deciding whether  p q pa  b  holds -complete. moreover   holds even for b =    i.e.  for answer-set existence.
¡¡for the particular case where b = a  which constitutes the setting where auxiliary letters are used in logic programs  we obtain in combination with theorem 1 the same complexity.
¡¡notice that the  partial  spoiler of lemma 1 avoids a naive guess of a  possibly exponentially large  full spoiler  y s  which proves the failure of  p q pa  b   at the expense of checking involved conditions on sea p  and sea q .
¡¡the above results for inclusion problems carry over to equivalence problems  since they are polynomially intertranslatable  as seen by part 1 of proposition 1 and the following fact:
proposition 1 p ' u pa  b  q iff q ' u pa =b  lp q  where lp q = {gp ¡Å gq ¡û; ¡û gp gq} ¡È {h ¡û gr b | r ¡Ê {p q} h ¡û b ¡Ê r} and gp gq are new atoms.
this holds by virtue of lemma 1 and theorem 1  and the fact that the  a b -certificates of lp q are those of p and q.
¡¡if the size of each program in the context c is polynomially bound by the size of the compared programs p and q  as is the case for ordinary and uniform equivalence   the complexity is lower. let us call such problems  p q c ¦Ñ  bound.
theorem 1 given programs p and q  a context c  a set b of atoms  such that ¦° =  p q c  b  is bound  deciding whether ¦° holds is -hardness holds even for c = { }  i.e.  for ordinary equivalence with projection.
¡¡for other instances of the framework  the complexity is even lower.
theorem 1 given programs p and q over u and sets a and b of atoms  deciding whether  p q pa =b  holds is  i  conp-complete if a = u  and  ii  ¦°p1 -complete if
 a ¡È b  = u.
¡¡this result follows from the invariance results in section 1 and complexity results due to woltran .
1	conclusion and further work
we have presented a general framework for expressing solution correspondences between nonmonotonic logic programs  and have then developed semantic characterizations of inclusion and equivalence problems under projected answer sets within a context of possible changes. as we have shown  they match the intrinsic complexity of the problem.
¡¡our results provide a semantical basis for developing optimization and debugging techniques  which are lacking at present but vital for further enhancements of asp as a programming paradigm.
¡¡several issues remain for future work. one is to extend our study to different classes of contexts and compared programs  and to provide suitable semantical and complexity characterizations. another issue concerns the construction of  good  counterexamples  according to their possible form. finally  exploring other notions of correspondences than =b and  b in the general framework is an intriguing issue.
