 
a novel technique  called hereditary partitions  is introduced. it permits the rigorous proof that  in a given axiomatization  certain states can never be reached. the technique is implemented in a computer program  disprover  and is applied to robot worlds. disprover cooperates with a path-finding program when the latter encounters difficulties. 
key words: robot planning; impossible tasks; theorem prover; statement disprover; disproof; hereditary properties; hereditary partitions; problem solving. 
1 ¡ö introduction. 
theorem proving and problem solving programs are sometimes successful in finding a proof to an actual theorem  or in solving a problem which does have a solution. on the other hand  presented with an expression which is not a theorem  or with an unsolvable problem  the programs are generally incapable of discovering  in a positive sense  that the expression is not a the-
orem  or that the problem is indeed unsolvable. the usual diagnostic would be:  i cannot solve the problem  because my resources are exhausted  or because i am stuck somewhere. however  the problem may be solvable. i just don't know.  
we are interested in developing programs which  given a problem  w i l l try to solve i t . if they cannot solve the problem  they w i l l try to show that it cannot be solved  a program which performs the last function w i l l be called a disproving program. to build such programs  we use a technique which we named hereditary partitions ¡ö this technique has some generality and forms our basis for a program  disprover  which has 
been applied to disprove goals in robot worlds  i.e. disprover proves rigorously that  for a given set of axioms  operators and an initial world  there is absolutely no way to attain some particular goal. 
disprover also cooperates with another program  lawaly  which tries to find paths to goal states. sometimes  when lawaly cannot solve a  solvable  problem  disprover -which clearly cannot disprove the solvable problem- gives lawaly additional information which per-
mits a solution to be found. 
we shall now describe some additional motivation for our work  discuss the related technique of hereditary properties -which is a degenerate case of hereditary partitions- and give several examples of disproofs  terminating with examples of cooperation between disprover and lawaly. 
1. why disproofs  
somehow  it is much more romantic and challenging to show that  in the whole wide world  there is absolutely no way that something can be proved  than to find 
one  of possibly many  proofs to some theorem. moreover  work on robots introduces a practical -and necessary- application of disproving programs. in robot problem solving systems  parts of the physical world  including some of the robot's capabilities  are simulated as a model. it is desirable that the model conform reasonably closely to the physical world  other-
wise the robot may  think  that it can do some things 
*work partially supported by grant gj-1 irom the national science foundation. 
-which are in fact impossible- or cannot do some other things -which are in fact possible-. for example  in   l     the robot can be in two different places at the same time.1 
1. some techniques for disproofs. 
many systems of interest  such as predicate calculus  are undecidable  l e. for a given statement in the system it is not possible to determine  in general  whether a given statement in the system can or cannot be proved. if  in a particular case  we wish to show that a statement is not a consequence of some axioms  the standard procedure is as follows: find a model in which the axioms are true  but the statement is known to be false. such model building is truly an art  and is acquired through much experience. the automatic building of dis-
proving models appears beyond the present state of the art. 
since predicate calculus has been of great interest to workers in a r t i f i c i a l intelligence  some additional comments ore in order. given a well-formed formula 
wff in predicate calculus  three exclusive cases are possible: 
a  wff is a theorem. 
b  iwff is a theorem. 
c  neither a  or b . 	in this case  -iwff is also in category c   	this last case is by far the most common  in the sense that  given a finite vocabulary of constants  variables  function and predicate names  the number of well-formed formulae of a given length in category c  far surpasses the number of formulae in categories a  and b   
given a wff in categories a  or b   a theorem prover based on resolution  for example  can determine after a finite time -which  in general  cannot be calculated in advance- in which of the two categories the wff belongs. to obtain this result  the theorem prover could time-share its efforts between trying to prove the in-
consistencies of both wff and -|wff. however  if the wff is in category c   then usually the theorem prover w i l l go on forever. in only very few cases will the theorem prover stop because no new clauses are generated: a disproof of the wff has then been obtained. 
a disproving program in predicate calculus would attempt to determine that a wff is not in category a . the above discussion shows that present theorem provers are at best very weak disproving programs. 
it should also be noticed that a proof of the attainab i l i t y of the negation of a statement does not imply that the statement itself can be disproved. for example  if a light can be turned on and off  at different times  then the statement status light on  and its negation -status light on  are both attainable  and hence neither can be disproved. 
1 while the theorem proving approach gives results in far too few cases  and model building is too often ad-hoc   a disproving technique with some generality has been called hereditary properties  see  for some examples . consider a checkerboard from which we remove two opposite squares. this mutilated checkerboard cannot be covered by dominoes. to obtain a disproof  we notice that whenever we add another domino on the checkerboard  the number of white and black squares that have been covered remains the same. this property -the equality between the number of black and white squares that have been covered- is hereditary  that is it does not change ae any allowable move -putting a domino on the checkerboard- is performed. the disproof is com-
plete when we notice that  in the mutilated checkerboard  the number of black squares does not equal the number of white squares   the difference is two.  
the technique of hereditary properties can be summarized as follows: 
-the original state s  of the model has  have  some property  
-whenever a state has this property  all states obtained from it by all allowable moves s t i l l have this property  
-the goal state which we are trying to attain does not have this property. 
hence the goal is unattainable. 	w.w.w.  what we wanted'.  
1. hereditary partitions. 
hereditary partitions generalize the basic idea of hereditary properties. the technique of hereditary partitions can be summarized as follows: 
-call the set of all states that can be achieved from the original state s  by all legal sequences of moves the attainable world. 
-the attainable world can be partitioned into disjoint partitions. hence each original state is in some part i t i o n   
-the goal state which we are trying to attain does not belong to any of the partitions. hence the goal is 
unattainable. 
obviously  hereditary properties correspond to the case where there is only one partition. 
we notice that if we apply a legal move to a state in some partition  we obtain a state in the same or some 
other partition. we can say that partitions are closed under legal moves. in fact  as long as this closure property is maintained  we might just as well add to the partitions some unattainable states   i . e . states which are  meaningless   if that makes l i f e simpler. even further  to the partitions containing some attainable stares we can add some partitions containing no attainable states. the disproof is s t i l l complete if this expanded set of partitions is closed under legal 
moves - i . e . from one partition in the set any legal move leads us to the same or some other partition in the set- and if the goal state that we are trying to disprove is not in any of the partitions. 
in practice  the problem is  of course  to build the appropriate partitions. we shall see an example in the next section. 
1. example of a disproof using hereditary partitions. 
we shall consider robot worlds axiomatized in a manner similar to that used in   l   . the world is described as a set of predicates  for example hextt1 r1bot b1    moves in the world are operators which must satisfy some preconditions  and their effect on the world is specified by a delete set and an add set. 
let us consider a subworld of the world in   l   : a robot and three boxes  b1  b1 and b1  in a room. the only relevant operators for our problem are  somewhat simplified from   l     . goto object   meaning: robot goes next to an object. 
preconditions: 	onfloor. 
delete set: 	atrob1t $  nextto robot $ *. 
add set: nextto robot object . push objectl object1   meaning: robot pushes objectl next to object1. 
preconditions: pushable objectl  a 1nfl1or * nextto  robot objectl . 
*$ means everything. at least that was the meaning before a series of devaluations'. 
delete set: atrobot $  at objectl $  nextto r1bot $  nextto objectl $  nextto $ objectl . add set; nextto objectl object1  nextt1 object1 objectl  nextt1 r1bot objectl . 
we assume that boxes are pushable  that the robot could climb on and off boxes  and possibly do a lot of other mischievous actions  none of which would help her get two boxes next to each other. we now wish to solve the problem: get the three boxes next to each other  i.e. find a path from an original world which includes: onfloor atrobot a  at b1 al  at b1 a1  at box1 a1  to a goal state which includes: 
nextt1 b1 b1  nextt1 b1 b1 . 
a solution is: goto boxl   push boxl b1   goto b1   push b1 b1 . 
however  a more symmetric description of the goal state answering the statement  the three boxes are next to each other  would be: 
nextto boxl b1  nextt1 b1 b1  nextto box1 boxl . we shall now give a disproof of this goal  i.e. show that it cannot be achieved. 
the partitions are described in terms of some anchor predicates and their negations. as a first choice  disprover chooses the three predicates from the goal as anchors. we shall abbreviate these predicates as p1  p1 and p1. the original state belongs to the partition; 
partitionl; 	 ip1    p1 a -p1. 
this partition contains a l l states  whether attainable or not  which satisfy -p1 a np1 and aip1  i.e. which do not contain any predicate of the form: nextto box.  b o x .   1   + 1     i - 1 1. 
if the robot could juggle she would move into a new state which would presumably s t i l l be in the partition. a l l goto operations do not  in turn  make her go out of the partition. 	but let us consider: 	push boxl b1 . this operator jl¡ê applicable to partitionl -although not to the original world  because the robot does not start 
next to b1-  since the state: nextt1 r1bot boxl  1 -t1 -p1 is a member of partitionl. hence by applying push boxl b1  we move out of partitionl  and must create a new partition1  specified by: partition1: p1 a 1 a 1. 
similarly  we create partition1 
partition1: 	tp1 ap1 a * 1   and 
partition : tp1 a ip1 a p1.  see figure 1.  from partition1  we can either go to partitionl by doing  for example  push b1 b1 ; or stay in parti-
tion1 by doing  among other possibilities  goto box1 ; 
or move to a new partition1: p1 a p1 a - p 1   by applying push b1 box1  to the state including: nextto r1bot b1  p1 p1 tp1 of partition1. similarly  we create: partition1: p1 tp1 p1  and partition : -p1 p1 p1. 
at that point  however  no new partitions can be created'. every legal move either leaves the robot in the same partition  or takes her to one of the other partitions. since the goal state is not in any of the partitions  the disproof is complete. w.w.w. 
disprover  programmed in lisp 1 and run interpreted on the university of texas cdc 1 found the above disproof  for the complete world of   l     in about 1 seconds. 
another disproof  in the world of   l     concerns the goal: 	at b1 a  status lightswitchl on   starting from the original state which includes: 	at b1xl a  
1 status lightswitch1 off . the robot needs to climb on boxl to turn on ligktswitch1  but she is then incapable of returning boxl to its original location. the disproof  by disprover  took about 1 seconds; three partitions were built using the anchor predicates from the goal state. 
1 classes of impossible states. 
given some axiomatization of a world  namely an i n i t i a l state and a set of legal moves -operators-  we can distinguish broadly between two main classes of impossible goal states: 
a  goals including a subgoal which is not satisfied in the i n i t i a l state and does not occur on the add set of any operator. for example  ii the robot cannot paint  and if color box1 blue  is true i n i t i a l l y   then a goal including col1r b1xl pink  cannot be achieved  and is disproved easily by disprover using only one partition. 
a variation of this class of impossible tasks occurs when a subgoal  subgoal.  of the goal is satisfied in the i n i t i a l world but must be destroyed  i.e. deleted  to achieve some other subgoaln . moreover  once deleted  subgoal cannot be added by any operator. the last example in section 1 above is a case in point. 
b  each subgoal. of the goal can be achieved independently  but the simultaneous realization of all subgoals is impossible  due to  side effects  caused by the delete sets. the main example in section 1 of the symmetric nextto box. box.  is a case in point. 
in practice  what is most fun to do is to take someone else's world and disprove goal states which   i n t u i tively  should be realizable! 
1 selection and testing of operators. 
given a set {u } of anchor predicates in an attempted disproof  disprover first discards all operators which do not add or delete some predicate in {u}   since these operators are clearly irrelevant. the i n i t i a l world is intersected with {v }   {p|p'e{u v ipe u}} to give the first partition. all remaining  relevant  operators are applied to this partition in an attempt to create new partitions. whenever a new partition is created  a test is made to see whether the goal state is in the partition. if it is  the disproof fails  and disprover w i l l try to bootstrap itself  section 1.  otherwise  the partition is kept  and all relevant operators w i l l be applied to it to try and obtain yet further new partitions. in a r t i f i c i a l intelligence jargon  disprover generates partitions breadth-first until the goal state is found -meaning the disproof 
failed for the given set of anchor predicates  see 
section 1 - or until no new partitions are found  which would then complete the disproof. 
it should be noticed that with the form of preconditions used  only a few simple set operations are needed to determine whether an operator is applicable to a partition. if preconditions are generalized to arbitrary predicate calculus expressions  or include procedures  then it may well be impossible to decide whether an operator is applicable to a partition  
1. bootstrapping in disprover. 
the anchor predicates -which determine the partitionsare crucial for disprover to be successful. in some cases  disprover can change its set of anchor predicates. we shall use a disproof as an example of this capability. we expand the world discussed previously via an operator gotoloc loc   meaning: robot goes to location loc tn room rm. 
preconditions: 	onfloor a 1rm  l1cinr1m loc rm   . 
delete set: 	atrobot $  nextto robot $ . 
add set: 	atrobot loc . 
we w i l l disprove the state atrobot al   where al was used in at b1 a l   . as in   l     there is no predicate locinroom a1 x  for any x  hence the task is obviously impossible in the axiomatization. 
the i n i t i a l anchor predicate is obtained from the goal: 
atrobot al . 
the i n i t i a l state is contained tn the partition: 
partition! : 	latrobot al  . 
the state: onfloor locinr1m al x   for x anything  is a member of this partitionl -even though it is unattainable-  and the operator gotoloc al  can be applied 
to this state  to obtain 
partition1: 	atrobot al . 
since the goal we are trying to disprove is a member of partitton1  the disproof fails. 
at this point  disprover tries to extend its set of anchor predicates by adding to those already used  all those that were preconditions of the operator s  that permitted a transition to the partition  here partition1  which we were hoping not to reach in the disproof. the new set of anchor predicates is: 
atrobot al  a onfloor a l1clnr1m a1 x  . disprover tries again  and w i l l succeed with the disproof  otherwise we would not have chosen this example'.  the original state is in: 
partitionl: 1atr1t a1  a onfloor a -l1cinr1m al x  . from this partition  if the robot climbs on something  we can go to: 
partition1: -atrobot al  ft 1nfl1r ft  il1cinr1m a1 x  . however  no further partitions can be generated  completing the disproof  w.w.w. 
disprover finally fails to find a disproof if -besides economic reasons of time limit or memory exceeded- no new sets of anchor predicates are generated during bootstrapping. 
1. lawaly helped by disprover. 
up to tlits point we have seen disprover working alone. now we will consider cooperation between lawaly and disprover. in some cases  lawaly  the path-finder we use to solve robot planning problems   does not find a path even though one exists. an example w i l l help to illustrate the difficulties she encounters. figure 1 shows the initial and final states of the robot world. 
the robot must achieve: closed door  a nextto robot box   from the i n i t i a l state: inr1m r1t a  a closed  door  a inroom box b .  see figure 1.  lawaly may decide to work first on the closed door  condition  or first on the nextto robot box  condition. consider the first case. lawaly finds the door already closed in the i n i t i a l state  so she wants to obtain the nextto condition. to do that  she must enter room b  and to do that go through the door  but that would mean opening the door  and hence undoing what she had already achieved  -closed door -  and so she decides to try the conditions in the reverse order. to be nextt1 r1bot box   she goes to door  opens i t   goes through i t   and then goes next to box. at that point  she realizes that she must s t i l l close the door  however  that would make her undo something she wanted  namely  nextto robot box   so she quits  having failed. 
the problem is now passed to disprover. the anchor predicates are taken from the goal  and the following partitions are built: 
partitionl: -inextt1 r1t box  closed door . 
pattttion1: 	1nextt1 r1t box  lclosed door  . 
partition1: nextto robot box  -closed door   partition1: nextto robot box  closed door . 
since partition1 includes our goal  the disproof fails. 
1 partition1 was obtained by applying the operator: gonext ob.ject   preconditions:  onfloor  a 1x inr1m  robot x  a inroom object x     to the state intermedtary-state: onfloor a inro1m r1t b  a inr1m b1x b . disprover suggests to lawaly that the original problem might be solved by splitting it up into two successive problems. the first problem ie to go from the i n i t i a l state to a state containing intermediary-state above; the second problem is to go from there to the final state. iawaly does in fact solve the original problem in this way  
1. a collaborative failure. 
we now describe a solvable task which is not solved by the collaboration between disprover and lawaly. 
the i n i t i a l and final states of the task are shown in figure 1. the final state i s : on robot box  a inroom  robot b . again  for essentially the same reasons as before  lawaly fails to solve the problem. disprover cannot find a disproof  of course  since none exists   but suggests the intermediary-state: 
inroom r1bot b  a nextt1 rob1t box . once more  lawaly fails  again due to her stubbornness in insisting on finishing a subtask completely before starting another 
one. disprover finds no disproof  rightly so  since none exists  with the anchor predicates: inro1m r1bot box  nextt1 r1bot box  on r1t box . moreover  disprover suggests the same intermediarystate as before  hence the system would begin to repeat itself  and failure is accepted. 
we are investigating the possibility of lawaly helping disprover by communicating information on why she failed to find a path  thereby helping disprover to build a more adequate set of anchor predicates. the results are s t i l l sketchy and w i l l not be discussed here. 
1. the importance of axiomatlzation. 
the problem of section   could have been solved immediately by lawaly  without disprover's help  if it had been further specified as: 
closed door  nextto robot box  inroom robot b . the problem of section 1 could have been solved immediately by lawaly if it had been further specified as: 
imoqm robot 1  1n robot box  inroom box s . if could also be solved immediately by lawaly if the climbon operator had specified as parts of its preconditions that the robot could climb on an object only if both she and the object were in the same room. thus  we can see that the difficulties encountered may be due to the axiomatization used. 
another way of resolving the difficulties is to  patch  the goal descriptions to include consequences such as: a robot is in the same room as the object she is on  etc. such a  patch  is a t r i v i a l program. 
1. conclusions. 
the technique of hereditary partitions permits the disproofs of statements that cannot be made true. we have applied this technique to a disproving program  perhaps the first such program in existence  which operates in simulated robot worlds. disprover can be used to ascertain that physically undesirable states cannot occur in e model. we give examples of collaboration between disprover and a powerful robot planning system  lawaly. the axiomatization chosen for the 
world greatly influences the performance of the described systems. 
1. 