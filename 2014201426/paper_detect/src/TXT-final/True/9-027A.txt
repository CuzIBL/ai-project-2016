: the paper considers the problem of converting axioms in predicate calculus to deterministic programs  which are to be used as   r u l e s   by a gps-type supervisor. it is shown that t h i s can be done  but that the   o b j e c t s   must then contain procedure closures or  funarg-expressions  which are later a p p l i e d . 
keywords: deduction  theorem-proving  r e t r i e v a l   non-det e r m i n i s t i c   closure  funarc-expression. 
background- retrieval of i m p l i c i t information in a semantic data base is a kind of deduction. one approach to doing such r e t r i e v a l has been r e s o l u t i o n - s t y l e theoremproving; a later approach has been high-level programming languages such as planner1 and qa1  where non-det e r m i n i s t i c programs and p a t t e r n - d i r e c t e d invocation of procedures are a v a i l a b l e . the use of uniform proof procedures for t h i s purpose has been repeatedly c r i t i c i z e d   e . g . in 1. users of the high-level languages have also been worried because t h e i r systems are very expensive to use1 and because the non-determinism is d i f f i c u l t to control1. 
there is another approach  which has roots in a . 1 . research back to the general problem solver1  where one has a supervisor which administrates a   r e l a t i v e l y   f i xed set of operators  and a working set of active obj e c t s . in each cycle  the supervisor picks an object and an operator  using any h e u r i s t i c information that it may have   applies the operator to the o b j e c t   and 
obtains back a number of new objects  none  one  or more  which are put into the working set. this process is continued u n t i l some goal is achieved   e . g .   an ob-
j e c t is a given target set appears in the working s e t   . 
this approach has certain advantages from an e f f i c i e n c y standpoint  the operators are fixed programs  which can be compiled or otherwise transformed a l l the way to machine code l e v e l . the non-determinism is concentrated to the supervisor. s t i l l   there is room for p a t t e r n - d i rected invocation  by l e t t i n g the supervisor c l a s s i f y 
objects into a number of classes  and associating a subset of the operators with each class. there is also the non-determinism implied by the search. 
the major disadvantage  of course  is that t h i s scheme is more r i g i d . for example  since everything happens on 
one l e v e l   there is l i t t l e room for recursion. if one operator c a l l s a procedure  which c a l l s another  which wants to be non-deterministic  then there is no t r i v i a l way to map that non-determinism back up to the  search l e v e l   of the supervisor  while retaining the environ-
ment of function c a l l s   variable bindings  etc. that must be kept a v a i l a b l e in a l l branches. 
an interesting question is therefore: how harmful is t h i s r i g i d i t y   is it very awkward to  program around  the l i m i t a t i o n s of such a system  or is it easy  
in t h i s paper  we t r y to answer that question by studying those operators which correspond to axioms in pre-
dicate calculus. we assume that we have a data base  which is l i k e a large number of ground unit clauses  plus a number of operators  which should correspond to the non-ground axioms. we show that there are c e r t a i n problems in phrasing the l a t t e r as operators  but that there is a systematic way to handle those problems. we conclude that the search supervisor approach should be considered as a serious candidate for the deductive system associated w i t h a data base. 
basic idea. for the reader who might not want to read the whole paper  we disclose that the idea is to permit the   o b j e c t s   to contain procedure closures1  also called funarg-expressions  i.e. lambda-expressions t o gether with an environment of bindings for i t s free var i a b l e s . the lambda-expression is as fixed as the set 
of operators  and can therefore be compiled  e t c   but the environment is new for each o b j e c t . 
after thus having sketched the background and the general idea  l e t us go into the d e t a i l s of the predicatecalculus environment. 
simplest case. let us take a common-place axiom and convert it into a program-like operator. we choose the t r a n s i t i v i t y axiom  
   r x y  a r y z    r x z  which goes into a rule of the form 
on a sub-question with the r e l a t i o n r  use lambda x z  begin local y; determine y from r x y ; 
	return 	sub-question 	r y z  
end 
here   determine y from r   y   z     c a l l s for a look-up in the data base  and usually acts as a non-deterministic assignment to y.  return sub-question  specifies the information which is given back to the supervisor  con-
s i s t i n g of a r e l a t i o n  r  and an argument l i s t . the l a t t e r is a l i s t of the current values of x and yj it 
does not need to contain the names x and y  or t h e i r bindings to t h e i r current values. the supervisor w i l l then look up a l l operators  lambda-expressions  which are associated with r  and apply them to the given argument l i s t   of course at whatever time it chooses. 
this rule describes what has to be done when any data base search routine continues search according to the t r a n s i t i v i t y property of the r e l a t i o n s . it does not 
matter if the search is executed by a uniform theoremprover  a planner-type system  or by a hand-tailored proaram such as the lisp functions in the sir system1. however  in a higher-level system  the system has to   i n t e r p r e t   the axioms or r u l e s   i.e. f i n d out at runtime what is to be done. a resolution theorem-prover is extreme in t h i s respect. our concern in t h i s paper is to f i n d out before execution  with information only about the axiom or r u l e   not about the actual sub-question  what operations w i l l be necessary  so that we can 
w r i t e out the code for doing exactly t h a t   tn programming systems terms  we want to compile the axioms  and do as many decisions as possible at complle-time. 
if a resolution theorem-prover contains the above t r a n s i t i v i t y axiom  and the axiom 
   r a b  and i f i t asked the   q u e s t i o n       b . c     i t w i l l generate the sub-question m l   a   c   . this step can be c l e a r l y i l l u s t r a t e d if the t r a n s i t i v i t y axiom is rewritten as 

1 

1 

{*   construct a new operator where the statements are 1 

multiple controlled statements. it is easily seen that the above rule in four steps can be generalized to the cases where there are several controlled statements  and top-level search is performed for each of them. for example  in axiom 1 we might wish to make extensive search both in order to determine y from p x y   and in order to prove q x y . we must then have two nested remainder procedures. the resulting operator should have the form: 
on a sub-question with r1  use lambda  x  begin return sub-question p1 x   with remain-
der procedure 
lambda  y  begin return sub-question q x y  /a closed sub-question/ with the remainder prodedure lambda    return answer y 
end 
end 
we realize that  every answer  to a closed sub-question must be affirmative  i.e. as soon as it has proved q x y   the above operator returns y. 
chains of sub-guestions. the operators as formulated above return sub-questions consisting of a relation symbol  an argument l i s t   and a remainder function  but they only accept the f i r s t two items. this means that the supervisor is responsible for administrating the remainder procedures. however  in a programming system 
where procedures are permitted as arguments  to other procedures   the responsibility can easily be taken by the operators and the programming system. we shall now describe how this can be done. 
 in closed and open questions  we add one more argument 1  which is the remainder procedure. the resulting argument lists  x y g  for r   x g  for r1  etc.  are the objects which our supervisor shall handle. 
we then modify the examples so that g is introduced as an argument and applied to the returned answer. thus 
the definite version of the rule for axiom 1 ia: 
on a sub-question with r1  use lambda  x g  begin local y; determine y from p x.y ; 
return sub-question q1 y  function lambda  z  g f x z   
   
end 
the other rules are modified similarly. we notice that the sub-questions that this rule returns  contain two transfer variables: x and g. the bindings of these must 
be saved in the closure  and retained until the remainder procedure is used. 
let g' be the second argument of 1 in one particular use of the above operator. clearly g1 contains a reference to g  which itself pfesumably is a procedure closure  which was set up by a previous sub-question. as 
one sub-question generates another  a chain of closures is generated  where each one refers to its predecessor. when finally an answer is found to the last subquestion  the last procedure closure is applied in a return-answer statement; it calls its predecessor by using a procedure variable  as seen in the example  the predecessor calls its predecessor  and so on up the chain. in the original  top-level  qjestion  q is given as  return aeswer . 
discussion of applicability of the method. this procedure works in all cases where the non-determinlstic mitted to attract attention  can be brought to the toplevel block of the  operators   and not be hidden deep-
er down in recursion  in principle  the trick is that the control stack  the stack of function calls  is only 
one element deep at the interrupt points  containing the call from the supervisor to the operator   and then the control stack information  plus the information of how far we have gotten  can be put in one additional transfer variable. with this method  we have no control stack environment  but merely a variable-binding environment at the interrupt points  and this is exactly 
what funarg  or procedure closures  can handle. 
we believe that this method is sufficiently powerful to handle e.g. all cases which may occur when pc axioms are mapped into rules  and probab 1y also a broader application. 
a questionable feature of this method is that one must in principle decide at  compile-time  which retrievals 
are to be done by  big  search  and which are to be done by  short  intermediate statement    non-controlled statement  search. in some applications this is ok  since some relations are only stored explicitly or almost exp l i c i t l y ; in others it may not be acceptable. 
requirements on the programming language. if the conversion from pc axiom to operator is to be done automatically  then the selected programming language must of course be able to generate and manipulate programs in the same language. lisp is then an obvious choice. however  during the execution of the search  our requirement is instead that we must be able to create a procedure closure  and send it around as data. some simulation languages  notably simula 1 have this f a c i l i t y   as well as pop-1 and ecl1. lisp1 systems  a-list systems  provide it through the funarg feature. later lisp systems  lisp 1  original bbn-lisp  do not provide i t 1 . a method for providing funarg in bbn-lisp'type systems without undue loss of efficiency has been proposed in 1 . 
it has been suggested that the notion of a  remainder procedure   as used in this paper  is rather closely connected with the notion of  continuation   which has recently proved helpful in discussing the denotational 
semantics of programming languages1. 
implementation. the author has participated in the development of a program  called pcdb  predicate calculus data base   which is organized according to the search supervisor principle. this program was described in reference 	1  and contains a compiler which accepts pc axioms and generates corresponding lisp programs. it a l so contains a simple supervisor  elaborate data base handling facilities  etc. which are needed. the present  1  version of pcdb lets the supervisor administrate the remainder procedures in an ad hoc and not completely general way. a new compiler is being written  which will administrate them with funarg expressions as indicated in this paper. we hope to have it working at the time of 
the conference. 
acknowledgements. the following people in uppsala have helped with the pcdb work: lennart drugge  anders haraldson  rene  reboh. 
sponsor: this research was supported by ibm svenska ab. 

interrupt points  where another  parallel branch is per-
1 
