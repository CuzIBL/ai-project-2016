 
	while 	implementing 	a 	diagnostic expert system  
faith  we have developed a new language  fcl  for controlling the f i r i n g of productions. fcl greatly simplifies the task of the user to direct this f i r i n g in a coherent and purposeful way without sacrificing some of the main advantages enjoyed by production systems. one of the interesting features of the language is the use of declarative forms to direct the f i r i n g of proper production sequences in a diagnostic expert system. declarative forms which represent circuit diagrams and problem families control goal-directed processes like tracing through circuits and searching for symptoms to confirm or deny closely related problems. because we have the fcl f a c i l i t y at our disposal  we have been able to incorporate a larger than usual number of diagnostic strategies in faith  with the assurance that they w i l l be employed under the right circumstances. 
introduction 
　ever since the advent of production systems  one of the key issues in using them has been the difficulty experienced in controlling the f i r i n g of sequences of productions  davis and king offer an extended discussion of the subject which is s t i l l relevant  davis 1   they mention many control methods  like ordering rules  tags  and meta-rules. with the growing popularity of expert systems organized around thousands of production rules  the issue of control has become even more pressing. recently both davis and genesereth have introduced diagnostic production systems that employ s t i l l other control strategies  davis 1  genesereth 1   genesereth has used the  linear input strategy   and the  unit preference strategy  for controlling a resolution-based diagnostician  terms defined in  nilsson 1   all of these methods have been more or less ad hoc  and the need for a more systematic and orderly way to specify firings has remained. 
　during the course of implementing an expert system diagnostician  faith  we have developed a more orderly method  a language we are calling the the faith control language or fcl  one element in the operation of fcl is the use of extended declarative forms which represent circuit diagrams and system block diagrams  to enable the reasoning engine to choose rules and direct the correct 
instantiation 	of 	variables 	embedded 	in 	rule statements ** 
　we shall call these extended declarative forms relational maps. in fcl  the use of declarative knowledge for control purposes is combined with a number of other devices to permit the design of coherent strategies that direct whole sequences of production firings. having this power  we are able to employ many diverse diagnostic strategies in a single system and are assured that they w i l l be used in controlled circumstances. 
other control elements of the fcl include: 
　the use of predicate keywords in literals to identify subsets of rules related to a given f i r i n g sequence. an example would be  outputfault   used to characterise rules pertaining to upstream tracing through a circuit  
	special 	forms  	 preferredfor s 	to 	assert 
constraints and direct rule choice. they are embedded in the rules themselves  a constraint 
might be that the subsystem under suspicion should be identified as an adder for the rule to apply  
　special forms   modes   which name f i r i n g sequences directed in an orderly fashion by a  tracing  is an example of a mode  
   the use of typed predicates called given predicates  which signify that a well formed formula  wff  in a rule is to be taken as true if it has a ground instance counterpart embedded somewhere in the relational maps. for design facts like  part a is connected to part b   connected would be a given predicate  rules which cannot be consistently instantiated when they contain such statements are rejected. 

   *the research described in this paper was performed by the jet propulsion laboratory  california institute of technology  under contract with the national aeronautics and space 
administration  
　**this form of control is the equivalent of the linear input strategy used by genesereth  he employs circuit diagrams  to avoid drawing unwarranted conclusions . circuit diagrams serve this purpose in fcl  but have another important control function explained below. 
1 	l friedman 
　the elements mentioned above can be put in one-to-one correspondence v i t h some of the elements of a procedural language. a mode maps into a function. a preferredfor v i t h constraints maps into a function c a l l . keywords identify the scope of a mode by indicating to the reasoning engine which rules are to be considered when in that mode. the relational maps provide a context in an execution sequence that spans across individual rule firings  thus controlling which production is to f i r e next. this is analogous to the way ordinary programming languages execute a sequence of statements. the process of composing a specific relational map and associated rules related to i t s use is the equivalent of coding a function in other languages. 
　due to the very nature of production systems  there is no explicit expression of a conditional. the effect is obtained by composing the right set of rules to f i r e in the given domain contingencies. although elements corresponding to a procedural language are present  we emphasize that we are not sacrificing the advantage that production systems provide  f l e x i b i l i t y and the avoidance of fixed sequences of executed statements. the production firings are s t i l l driven by the problem i t s e l f . 
　for a relational map to provide the context in a f i r i n g sequence  a certain style of rule composition must be adopted by the user. when this style is adopted  the system w i l l either f i r e rules in the desired order  or f i r e the same rule many times with correctly altered instantiations. one aspect of the user style is to embed in a rule one or more given predicate formulas whose syntax corresponds exactly to selected statements in the relational map. 
　during execution  the reasoning engine can use partially instantiated given predicate formulas within the rule to find the match with a specific statement in the relational map. the engine completes the remaining instantiations from the matched knowledge. for example  if the relational map has defined a set of predecessor-successor relationships between objects in a signal path  then a rule under consideration which has instantiated a particular predecessor w i l l find the correct successor. 
   in explaining the above rather abstract statements  we shall use examples from faith's operation. this w i l l serve to make clear why we have introduced the various devices  and their functions. the knowledge bases from several domains w i l l be introduced  and faith's application to the diagnosis of ailing spacecraft w i l l be included. to make these examples easier to follow  we give a brief overview of faith* the concepts underlying fcl are general and we w i l l discuss briefly their possible extension to the control of a planner. 
the basic faith operation cycle 
　faith employs predicate logic in i t s reasoning engine  and alternates between two phases of a basic diagnostic cycle. these phases are explanation  backward chaining   and confirmation or denial  forward chaining . during explanation we are searching for consequent matches of production rules with the l i t e r a l to be explained. rules whose consequents match are used to establish a subset of the antecedents as hypotheses. only literals whose predicates are untyped are chosen. examples of untyped predicates are  fault   
 outputfault   etc. the rule is chosen for further consideration if and only if the remaining l i t e r a l s in the antecedent which are not constraints can be matched with l i t e r a l s taken to be true. once a set of possible hypotheses has been determined  the confirmation phase is entered. 
　during confirmation/denial we examine each of the selected hypotheses in turn  seeking to confirm one. we now search among the rules for antecedent 
matches to the untyped predicates that are the hypotheses to be confirmed. any rule may be used which chains forward to specify one or more consequent predicates with the type  measurable . such predicates are linked to the antecedent hypothesis because they tend to confirm it if true or within defined bounds  and deny it if false or outside defined bounds. these consequents constitute predictions about what should be measured if the antecedent is true. their truth can only be established by comparing the prediction with an actual measurement  which has to be supplied by an outside agency.* 
   if a hypothesis is denied  the next one on the stack of hypotheses is examined until either a l l hypotheses are exhausted  or one is confirmed. if confirmation occurs  say at level-of-explanation 1  we reenter the cycle  seeking to explain the confirmed hypothesis. confirmation may occur for one of the hypotheses at level 1 while others on the stack remain unexamined. if this is the case  we may go through several more cycles of explanation and confirmation at levels 1   1   etc. s t i l l later we may encounter a contradiction between predicted and measured test variables  that fires an inference contradicting the hypothesis at level 1. faith then backtracks  and activates the next unexamined hypothesis on the level 1 stack. 
　this is an oversimplified description  omitting complications such as measurements not being available  the hypothesis to be confirmed is i t s e l f a measurable  terminating the cycle  etc. nevertheless  it does explain the main features of faith's operation. 
    during the development phase of faith  the outside agency has been the programmer. faith's i n i t i a l application is to the troubleshooting of spacecraft by monitoring the telemetry stream transmitted to earth. this telemetry stream contains the test measurements from a wide variety of subsystems. we have developed a module  the execution monitor  to read the telemetry data stream  detect errors or out-of-bounds measurements  and automatically supply requested measurements to faith. 
the faith control language  fcl  
　control of a simple firing sequence: traversing a tree structure 
　we shall consider a system requiring diagnosis whose top level organization can be represented as a tree of subsystems. a typical block diagram is shown in figure 1  this is a simplified representation of the organization of parts of the voyager spacecraft and ground system* suppose the 
 presenting symptom   say  no telemetry   causes the error detection mechanism of the execution monitor to trigger. this symptom has a multiplicity of possible causes scattered through the entire voyager system. a human troubleshooter 
would want to systematically traverse the tree  top down  eliminating the largest and most likely blocks or subsystems  until he has found one that  from test measurements  indicates evidence of possible malfunction. how do we instruct faith to accomplish the same thing  be found in a relational map. let us declare a predicate   contains   as a given predicate  where  contains a b c   means  a contains b and c . next we represent the tree structure of figure 1 with statements such as those of figure 1  forming one relational map. 
　the statements in figure 1 are not in the form of l i t e r a l s needed for unification with those literals contained in the production rules being processed by the reasoning engine. in the i n i t i a l version of faith we have written a translator which creates selected subsets of proper literals on demand from the statements in the relational map. for example  the f i r s t statement in figure 1 is translated into two l i t e r a l s    contains system groundsystem  and  contains system spacecraft . 
l. friedman 
 contains system groundsystem spacecraft  
 contains groundsystem dss1 gcs1 ttsl  
 contains dss1 antssi greceiverl sda1a1 tpa1 
　　　　　　　　　　　　　　　　　　　　　　cmf1 di1   contains spacecraft sreceiverl sreceiver1 stransmitter1 instruments scanplatform1 
　　　　　　　　　　　　　　　　　　　powersupplies   contains sreceiverl trackingloopl 
amplifierstages1 rpc1 limiter1 fuse1  
figure 1: 	a 	relational map of a tree structure: 
voyager system blocks 
　each of the predicates that requires expansion has been declared as an expansion type and the type is placed on its property l i s t . from this information  the translator can select the correct translation parse. later versions w i l l have a more sophisticated marker device in each expression so that expansion types need not be used. 
　suppose then  ve write a rule of the form shown in figure 1. note the correspondence of the contains l i t e r a l in the rule to the syntax of the 
by 
	figure 1: 	rule for traversing a tree 
　the controlled f i r i n g of this rule would continue to any depth  provided there were a fault confirmed at each level. ve shall shortly describe ways to terminate this sequence appropriately. thus we see that we have formed a plan for a complete production f i r i n g sequence employing only a single rule. this was accomplished by writing the relational map of contains statements. ve call this pattern of firings that traverses a tree structure of subsystems  focusing'* and refer to it as the focus mode. mote that we have taken pains to make the user represention a form equivalent to that ordinarily used by humans to describe system organization. thus it is particularly easy for 

1 	l. friedman 
humans to supply it. 
　we turn our attention now to how ve i n i t i a l l y steer the f i r i n g to the top of the tree. the mechanism used is the  preferredfor  with constraints*** the constraint applied here is l i s t 
membership  with the objects we know are going to be encountered in diagnosing the system declared in advance in the knowledge base as members of an appropriate mode l i s t   
　a preferredfor is present in figure 1  with the constraint that the instantiation of the variable 
  system  be a member of the focus l i s t . since groundsystem is on this l i s t   this rule w i l l f i r e if  fault groundsystem  is declared. an idiosyncratic rule to do this is easily supplied and relates the i n i t i a l l y presented symptom  no telemetry  with two hypotheses  fault groundsystem  and  fault spacecraft * note that the focus mode w i l l be invoked whenever an object at any level that is a member of the focus l i s t is asserted to be at fault. 
	the 	method 	of 	terminating a mode is to declare 
 fault  object  . a l l preferredfors start with this l i t e r a l or a similar keyword   the convention enables the user to select the next mode by determining the object's l i s t membership* this has the effect of throwing open the choice of mode  rather than the choice of a l l production rules* by sacrificing the complete freedom to choose any rule after each f i r i n g   we have gained a great deal of control and speed* 
transitions between firing patterns: mode calls 
　focusing is a diagnostic pattern particularly appropriate for top level subsystems that have relatively l i t t l e interaction with each other* eventually  we w i l l reach a system with internal signal flows and chains of dependency among i t s subsystems* faults may best be localized in such a system by tracing* in faith  tracing includes a number of modes in which the internal structure of subsystems is ignored  with only the input/output relations described by a transfer function* the path to be followed is that of causal dependency* normally this is defined by design signal paths  and those paths are i n i t i a l l y assumed by humans to s t i l l hold in a malfunction* ve make the same assumptions in faith* of course  we are not limited to such design paths  and are presently implementing thermal causal pathways involved in failures of a voyager instrument* 
that eventually one of them which is confirmed at fault is a member of a different mode l i s t * when this happens focus mode is terminated and the different mode entered* 
  =svitchtotrace inference 
  outputfault  subsystem  
 ports  system  outputport  port   
 connected  out   pin  subsystem   
 outputport  port    
  fault  system   
 preferredfor 
  fault  system  
 cond   member  system upstreamtracelist  
 setq mode 'uptrace       
	figure a: 	selecting a trace mode 
	here 	we 	have 	introduced 	a 	new 	predicate. 
outputfault* 	outputfault is a keyword that enables 
faith to restrict rules that are candidates for f i r i n g to those related to tracing in the upstream direction  against the signal flow. all rules related to upstream tracing contain the keyword predicate outputfault* 
control of simple tracing; a linear chain 
　if we add declarations in a new relational map defining the input and output ports  and the signal flow  we can control the f i r i n g of simple upstream or downsteam tracing which halts whenever a fault is found with input ok and bad output. inputor serves for scoping downstream tracing. ve introduce a given predicate.  connected a b . which is defined by the property that a signal value appearing at a w i l l be shared by b  this can represent either electrical wires or higher level signals passing between subsystems. 
　figure 1 shows the deep space station or dss  which receives transmissions from the spacecraft. the dss may be represented by a group of subsystems starting with the antenna subsystem  feeding into the ground receiver which feeds in turn into a subsystem designated the sda. signal flow may be considered good or bad depending on whether the synchronization of the telemetry stream is locked or unlocked. 

	ve 	call 	the 	upstreamtrace 	mode 	by 	using the 
preferredfor mechanism with the constraint that the suspected system be on the upstreamtrace l i s t . figure 1 shows the rule that accomplishes this* 
note that what has happened in our consideration of various systems during f i r i n g of the focus rule is 
　**preferredfor without constraints was used in the planner. deviser  to choose among several actions that might accomplish the same goal  vere 
1 . 

　　figure 1: the deep 1pace 1tation  dss  the station may be represented in a relational 

 ports dss1  inputport d1   outputport d1   
 ports ant1  inputport a1   outputport d1   
 ports greceiverl  inputport gl   outputport g1   
 ports sda1  inputport si  outputport s1   
 connected  inputport dl   in  al antssl    
 connected  out  a1 antss    in  gl greceiverl    
 connected  out  g1 greceiverl    in  s1 sda1    
 connected  out  s1 sdal    outputport d1   
　　　　　figure 1: relational map of dss map as in figure 1. 
　two 	of the rules that are used in the tracing of this linear chain are shown in figure 1 and 	figure 
1. 

  =up1treamterminatorl inference 
  inputok  subsystem  
 fault tsubsystem   

  outputfault  subsystem    
	figure 1: 	rule that detects a possible fault 
　four rules are required for backward chaining to trace through the dss in the upstream direction using the connection information of figure 1. 
the potential problem mode 
　the diagnostic goal of the f i r i n g sequences described to this point is to localize the malfunction to the smallest subsystem possible. once this has been accomplished  we may be able to characterize the problem within that unit more precisely than simply  fault . a great deal of diagnostic knowledge exists about various units such as receivers and transmitters  and this can be incorporated in the problem knowledge base as another tree structure. such knowledge is taught in medical school as disease families. figure 1 shows a simple representation of this kind of 
knowledge. 
    potentialproblem  is a given predicate  and  problem  an untyped predicate subject to confirmation. if we introduce the rule shown in figure 1  we insure making the proper transition when the appropriate systems are encountered. 
　 valueof  causes the function  classmember  to be eval'ed. classmember is an inverse indexing function that retrieves the class name such as  receiver  when given a specific instance such as  greceiverl . with an additional rule similar to 
l. friedman 
 potentialproblem receiver amplifierstageproblems 
oscillations trackingloopfailures shorts powersupplyfailures  
 potentialproblem 
transmitter amplifierstageproblems 
spacecraftmispointed shorts powersupplyfailures  
 potentialproblem 
shorts shortswithfuse shortswithlimiter/fuse  
figure 1: potential problems of typical units  and a problem family 
  =problemclassificationl 	inference 
  problem  class problem  
 valueof  class  classmember  system   
 potentialproblem  class  problem   
  
  fault  sy1tem   
 preferredfor 
  fault  syetem  
      member  system potentialproblemlist     figure 1: 	transition to problem characterization 
the one introduced in figure 1 we can now traverse the potential problem tree  and in many instances can pin down the nature of the problem. 
control of complex tracing 
　we present a non-voyager problem as a last example of the power of this method of controlling production system f i r i n g . the problem posed is a digital subsystem discussed in  davis  et al 1   which also uses design knowledge extensively  but applied to generate tests rather than to explicitly control production f i r i n g . it is easy to see that if a subsystem of this type were present in a voyager system  faith might declare it at fault by the methods of focussing or tracing. we now consider the control of production firings in the attempt to localize the problem to a component within the subsystem. 
　davis employed procedural methods to represent the design and simulate the workings of the complex circuit of multipliers and adders shown in figure 
1. 
　we represent this circuit diagram as shown in figure 1. a rule for representing the transfer function of an adder is given in figure 1. an assumption we make is that only the input ports and output ports are available for measurement  so that indirect inferencing is required to determine possible candidate faulty components. the assumptions that there is only a single fault  and no intermittent faults are also being made in this case. 
　to perform this diagnosis in faith  we introduced some seventeen rules and additional f i r i n g modes. one of these additional modes is simulation  introduced by a preferredfor. with rules that define transfer functions for the adders and 1 	l. friedman 

 contains digil 	multl mult1 mult1 add1 add1  
 multiplier multl mul1 mult1  
 adder addl add1  
 ports digil 
 inputport a b c d e   outputport f g   
 connected  inputport a   in  1 multl     connected  inputport b   in  1 mult1    
 connected  inputport c   in  1 multl   
 in  1 mult1    
 connected  inputport d   in  1 mult1    
 connected  inputport e   in  1 mult1     connected  out  1 multl   in  1 addl     connected  out  1 mult1   in  1 addl  
　　　　　　　　　　　　　　　 in  1 add1     connected  out  1 mult1   in  1 add1    
 connected  out  1 addl    outport f   
 connected  out  1 add1    outport g   
figure 1: faith representation of digil circuit diagram 
 addition=  event 
  ok  a  
 adder  a  
 measuredvalue  1  a   x   measuredvalue  1  a   y   valueof  z  plus  x  y    
  
  out  1  a   z    
	figure 1: 	rule representing 
adder transfer function 
multipliers  figure 1   using repeated forward chaining in the simulation mode  and guided by our wiring diagram  figure 1   we can generate predicted normal outputs from measured inputs. we are thus simulating the normal circuit operation  and can detect errors by measuring different output values than those predicted* 
　having accomplished this  s t i l l another f i r i n g mode is required. this mode propagates back from a detected error  guided by the wiring diagram  to find the possible sources of error among the adders and multipliers. each time such a source of error is located  an error is hypothesized in that source and propagated forward to a l l possible output ports. the pattern of errors produced by the error hypothesis is then compared with the actual pattern produced  and  if the patterns match  the hypothesized source is added to the l i s t of candidates for further analysis.  these methods w i l l not work for circuits containing feedback loops.  
　a l l of these complex production rule f i r i n g sequences and transitions are successfully controlled by the use of the methods described. the great advantage is that fcl's control mechanisms are quite general  and we can analyze other circuits by altering only the rules that represent the transfer functions of the subsystems. thus we have made available to the user a f i l e of rules that are always read into faith and sufficiently general purpose as to be useful for many different diagnoses. these include a l l of the modes discussed above. 
altering relational maps 
　until now we have been considering the relational maps as given and unchangeable fact. the diagnostic performance this produces is often quite inconvenient and clumsy compared with an experienced human troubleshooter. for example  a l i s t of potential problems is processed by the reasoning engine in a fixed order  whereas a humar  would alter the order of consideration based on measured evidence. changing the order of consideration of problems on the basis of newly confirmed evidence is an important feature of many medical diagnostic systems  such as pip  szolovits 
1 . 
　to understand how this control feature is implemented in faith  we have to describe another aspect of its operation. faith permits making forward-chaining inferences on the basis of confirmed test measurements. the rules that are employed for these inferences are segregated from other rules  so that these rules w i l l not f i r e in normal forward or backward chaining. this makes it possible to infer  from evidence gathered in a particular context  that the most likely cause of a problem is something other than the current line of inquiry. 
　using such an inference  we have included a rule in a voyager knowledge base whose effect is to change the order of items in a l i s t to make the 
most likely cause f i r s t   and to abandon the current line of inquiry. the l i s t is one pertaining to potential problems. this can be generalized so that declarative knowledge about symptoms can be consulted using  symptom  predicates rather than given predicates to instantiate variables in formulas about symptoms* 
	this 	suggests the possibility of implementing in 
faith the kind of declarative tree structures used in casnet  weiss 1  to relate symptoms to intermediate states  pathophysiological states . in turn  the intermediate states are grouped into a disease category as part of the diagnostic process for the various forms of glaucoma* this is the inverse of the reasoning process employed in 	faith of 	hypothesizing 	a disease cause and then looking for a set of symptoms to confirm i t . 	the 	inverse  using symptomatic patterns and groupings to suggest a diagnosis is employed as 	readily 	by 	physicians and troubleshooters as is the hypothetical method. 
　the fcl feature of being able to modify the relational maps greatly extends the power of this diagnostician. for example  we can hypothesize that a short has occurred and determine its location. if that is confirmed  we can alter the original circuit diagram to include a connection that represents the short  and even run a simulation of the changed circuit to determine the state changes it produces with expected inputs. the state changes resulting from the use of the altered circuit can then be simulated to determine its behavior. 
planning 
we have just begun to consider the application of 
fcl 	to 	the control of our planners  deviser  vere 
1  and switch  porta 1 . two examples that we have implemented are the planning of a t r i p   and a problem in avoiding inefficient backtracking in a voyager setting. the t r i p planner uses cartographic map information represented as a number of  connected  statements to define the routes  very much in the manner of the circuit diagrams employed in diagnosis. by contrast  the inefficient backtracking problem requires a somewhat different approach than those we have described  although we s t i l l employ additional declarative knowledge to render the backtracking efficient. more extensive investigation is needed to determine whether we shall have to incorporate many new features in fcl and make corresponding changes in the planner s reasoning engine to have the desired degree of control over the planning process. 
non-monotonic logic: 
changing axioms and removing rules 
　as in any expert system  diagnosis is limited by the assumptions underlying the causal models employed. these underlying assumptions often are not explicitly stated  but are used to support the 
validity of many of the rules. thus a particular line of inquiry may lead to a single logical conclusion based on the current axioms  and subsequent testing of the conclusion  for example  by actually replacing a suspected unit  may reveal that the conclusion was wrong. in this case we infer that at least one of the current axioms is 
wrong. 
　we are currently altering faith so that we can relate given rule sets to their underlying axioms  and make it possible to retract axioms and substitute others. concomitantly  we w i l l be able to withdraw rules from consideration that were linked to the retracted axioms and bring up for consideration new sets of rules linked to newly substituted axioms. the effect is to redefine the modes  which depend on the rules available for their execution. this permits us to consider l friedman 
successively less likely causes for the problems encountered which require new rule sets to pursue  while keeping the often contradictory rules segregated. note that the order of consideration of the less likely causes is susceptible to dynamic reordering on the basis of evidence  as explained earlier. 
　we are also using meta-rules that depend on some of our axioms. for example  we have a rule that says   when we assume that a fault is located in a subsystem  prefer rules that mention the subsystems e x p l i c i t l y .   these too w i l l become inactive as their supporting axioms are withdrawn. 
discussion 
　we have presented the presently implemented features of a new control language  fcl  which greatly simplifies the task of the user to direct the f i r i n g of productions in a coherent and purposeful way without sacrificing some of the main advantages enjoyed by production systems. several users  know led gable in ai  who were unacquainted with the internal coding of faith  have been able to code extensive voyager relational maps and many rules in a matter of weeks for an actual voyager instrument in much greater detail than the simplified examples used in this paper. faith has produced the desired diagnoses and duplicated satisfactorily the performance of the expert. the training the ai users required was minimal. there have even been users with minimal ai knowledge who have successfully used fcl. 
　because we have this f a c i l i t y at our disposal  we have been able to incorporate a larger than usual number of diagnostic strategies into faith  with the assurance that they w i l l be employed under the right circumstances  and we expect to continue to enlarge the scope of diagnostic techniques available in a quite general manner. because it possesses many diagnostic strategies  faith is approaching operational usefulness in a real engineering environment  and is undergoing testing in that environment. the philosophy underlying fcl is certainly not limited to diagnosis. it may be applied f r u i t f u l l y to other production systems and we are beginning to do so. 

1 	l friedman 
