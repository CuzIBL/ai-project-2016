 
     this paper describes new tracing and debugging facilities for logic prograramming  prolog in 
particular   based on a selective retrospective analysis of an exhaustive run-time trace. the 
tracer uses an enriched repertoire of program 
success/failure 'symptoms' to improve the clarity 
of the trace  and identifies characteristic 
'symptom clusters' in order to work out the true cause of a bug. 
in general  of course  the user may not want to observe program execution in such detail. the 
point of ptp's original 'symptomatic trace' 
facility was to develop a detailed analysis of prolog program behaviour so that it could then be subjected to semi-automated inspection. the following sections describe how the latest implementation of ptp hides these details from the 
introduction user while still capitalizing on the information contained therein. 

     in the course of debugging prolog programs  the user can easily be overwhelmed by a plethora of tracing information. an overview of the behaviour 
of the user's program is sorely needed before engaging in any kind of single-stepping activity  even when a 'skip/retry' facility is provided. in addition  users can benefit from some intelligent tracing and debugging assistance  as amply demonstrated by the work of shapiro  1 . the progression towards intelligent tracing facilities involves three main facets: 
     a  symptomatic behaviour: a more detailed 
analysis of the behaviour of prolog programs needs to be provided. this is because the four 
behaviours  'call'  'exit'  ' f a i l '   'redo'  provided by existing trace packages are insufficient to provide clear signposts indicating the most likely cause of program failure. 
     b  zooming: once the behaviours are 
elaborated  the user needs to be protected from gory details on the one hand  yet allowed easy and rapid access to the relevant details as needed. 
     c  suspicious symptom clusters: characteristic 'symptom clusters' in the program trace need to be identified  so that particular kinds of behaviour can be singled out as being highly suspect. 
symptomatic behaviour 
     the 'ptp' prolog trace package  eisenstadt  1  distinguishes among several different types of prolog program failure  e.g. subgoals failed  no more backtrack solutions  backtrack encountered cut  no definition  wrong arity  variable unification failed  system primitive failed . in addition  ptp displays resolving clause numbers along with variables instantiated when the clause is attempted  rather than just when it exits . 

     let's run the code through ptp. the symbol ' ' below means 'attempting subgoal'. failure due to inner subgoal failure is indicated by '-'  the symbol ' x ' is a concatenation of the symbol ' '  'entering the body of resolving clause whose head is shown'  and the symbol ' '  'this clause didn't 
work  looking for next resolvent' . the notation 's1/s1' refers to an invocation starting at trace step number s1 and finishing at trace step number s1. a number enclosed in braces  e.g. {1}  indicates which specific clause has been considered. user input to the 'ptp:' tracer prompt is shown underlined. output from ptp is as shown  with '%' comments added retrospectively. 

1 m. eisenstadt 


'split   1  1  1 ' should have succeeded. 
     b  the 'singleton suspect' subgoal failures  aside from the top level goal  differ only in terms of the list-lengths of their first arguments. therefore  it is assumed that the root cause of all these failures is identical. 
     c  a 'zoom' of steps 1 is performed 
internally. the displayed version would have looked like this: 

     d  at this point  a characteristic symptom 
cluster is detected. the kernel of this cluster is the following four element collection: 

this kernel matches a known cluster pattern named 'subgoal fails after all resolving clauses tried and failed'. 
     e  the detection of the cluster invokes a set 
of rules which try to see whether there is a shared pattern underlying the failure of each clause. intuitively  the analyser is looking for why a prolog rule  viewed abstractly as a 'cases statement'  has 'fallen off the end'. a further internally-performed zoom reveals the following kernel pattern: 

 line 1 of the above pattern corresponds to trace steps 1  which are analogous to steps 1 of the trace presented earlier in the zooming section.  this pattern provides sufficient grounds for the remainder of the messages displayed in the example. the declarative nature of this analysis enables it to work on more perverse definitions of 'split'  such as ones where the greaterthan and lessthan tests come after the recursive invocation! the analysis can be performed even in the latter case because the internal zoomer inspects behaviour in terms of the program's declarative reading  which looks very similar in both the normal and perverse cases  before delving into sequence details. 
     other cluster symptoms currently recognized are shown below: 
	m.eisenstadt 	1 
     * under-specified-unification  occurs for example when a variable accidentally can unify with either a list or an atom  
     * infinite-loop-caused-by-loop-in-db  asserting 'tallerthan joe joe ' will cause problems for naive transitivity code  
     * infinite-loop-caused-by-left-recursive-rule  
e.g. 	foo x y :-foo x z  foo z y . 
cosclusions 
     'retrospective zooming' enables a trace to remain faithful to the purely declarative reading of a logic program  yet allows appropriate probing of the procedural aspects as well. suspect code can be identified by an empirical investigation of both single-line symptoms and  more importantly  clusters of co-occurring symptoms. 
     our earlier work on automated program debugging  laubsch & eisenstadt  1  relied on the notion of a 'canonical effect description' which could be used to compare actual program behaviour with desired behaviour. in contrast to this  ptp   like the system of shapiro  1  leaves the notion of 'desirabilility' of program behaviour up to the programmer during debugging. ptp differs from shapiro's work in maintaining an a priori repertoire of 'suspect' program behaviour  which itself is based upon a 'bug taxonomy' developed in the course of pilot studies of experienced prolog programmers. the 'cluster suspects' detectable by ptp  while still in their earliest incarnation  have enabled the rapid development of a practical and empirically-motivated tracing and debugging facility for prolog. 
acknowledgements 
this work is supported by the uk science and 
engineering research council  grant number gr/c/1. 
