 
motivated by the matchmaking problem in electronic marketplaces  we study abduction in description logics. we devise suitable definitions of the problem  and show how they can model commonsense reasoning usually employed in analyzing classified announcements having a standardized terminology. we then describe a system partially implementing these ideas  and present a simple experiment  which shows the correspondence between the system behavior with human users judgement. 
1 motivation 
we describe several scenarios in which matchmaking  di 
noia et al.  1; sycara et a/.  1; di sciascio et al.  1; trastour et al.  1  is necessary  starting with a human situation and moving to more automated ones. 
　human matchmaking. imagine you are looking for an apartment in london  uk. on a local newspaper  you published a classified ad  which we call d  for demand   asking the following: 
apt. required: soho  1 rooms  smoker  dog  garden  max 1/month. phone xxx-yyyyy 
since no one phoned you  you open a copy of the same newspaper  and start filtering a long list of classified ads offering apartments to rent. you might encounter the following ad  that we call s1  for supply : 
apt. centre  piccadilly   car place  fireplace  
1 rooms. phone zzz-wwwww 
then you wonder if this offer fits your needs. the match between soho and piccadilly depends on some domain knowledge - actually  they are consistent  although piccadilly does not imply soho. then s  does not mention that dogs and smokers are allowed  but this does not necessarily mean that they are not  open-world assumption . it docs not mention a garden too  but there is a car place  which could be turned into a small garden if it is open air and private. should you phone to inquire s  first  or phone first the following s1: 
aaa apt. in london. phone sss-ttttt 
description logics 
here it is not just a problem of hypothetical reasoning  it is also a problem of giving some total order to offers that are compatible with yours  presumably trying to maximize the probability of finding a good offer in few phone calls - but wait: if these offers would match  why they didn't phone you'! 
　software agents matchmaking. a similar scenario  but for the fact that agents may actively look for a matching counteroffer  instead of simply posting their offer. so they may actually call you... 
　matchmaking in electronic marketplaces. the same scenario  but with some sort of standardized language to describe supplies and demands  and maybe some centralized facilitator for matchmaking  e.g.  containing the necessary domain knowledge. 
　service discovery. either for software agents or in emarketplaces  the offers may describe a general service in some standardized language  such as the simple 1-bit string of bluetooth  or the more structured daml-s. 
　the third and fourth scenarios are more amenable to automated matchmaking  since they imply a standardized language and ontology. however  observe that also in the first and second scenarios  when supplies and demands are expressed in heterogeneous forms  matchmaking is not a mere schema/data integration problem. in fact  integration techniques  madhavan et al.  1  may be employed to make heterogeneous supplies and demands comparable; but once they are reformulated in a comparable way  one is still left with true matchmaking problems: i  given a proposal  are there compatible counteroffers  ii  if there are many compatible counteroffers  which are the most promising ones  and why   
1 principles for matchmaking 
we now discuss in detail various technical options for performing matchmaking  first trying to highlight limitations of non-logical approaches  and then discussing the general knowledge representation principles that a logical approach may yield. 
　first of all  we note that if supplies and demands are simple names or strings  the only possible match would be identity  resulting in an all-or-nothing approach to matchmaking. this is the approach taken by bluetooth  whose service discovery protocol tries to match universally unique identifiers of services and requests. although effective for fixed technical domains  such an approach misses the fact that proposals usually have some sort of structure in them. such a structure could be exploited in order to evaluate  interesting  inexact matches. 
　vector-based techniques taken by classical information retrieval can be used  too  thus reverting matchmaking to similarity between weighted vectors of stemmed terms  as pro-
posed in the coins matchmaker  kuokka and harada  1  or in larks  sycara et al  1 . obviously lack of document structure in descriptions would make matching only probabilistic and strange situations may ensue  e.g.  the demand  apt. with two rooms in soho pets allowed no smokers  would match the supply  apt. with two rooms in soho  no pets  smokers allowed . 
　a further possibility is to use sets of words to describe the structure of supplies and demands. we consider these description as a particular case of logical description  and move on to description logics  dls . hence  from now on we suppose that supplies and demands are expressed in a dl c  equipped with a model-theoretic semantics. we suppose also that a common ontology for supplies and demands is established  as a tbox t in l. now a match between a supply s and a demand d could be evaluated according to t. this framework ensures the first property that we would like to hold for matchmaking  namely  an open-world assumption. 
property 1  open-world descriptions  the absence of a characteristic in the description of a proposal should not be interpreted as a constraint of absence. instead  it should be considered as a characteristic that could be either refined later  or left open if it is irrelevant for the issuer of the pro-
posal. 
　moreover  if all constraints of a demand d were fulfilled by a supply s  but not vice versa  then s should be among the top ranked supplies in the list of potential partners of the demander  while d should not appear at the top in the list of potential partners of the supplier. 
property 1  non-symmetric evaluation  a matchmaking system may give different evaluations to the match between a supply s and a demand d  depending on whether it is trying to match s with d  or d with s - i.e.  depending on who is 
going to use this evaluation. 
　there are three relations between concepts expressing supplies and demands  that we consider meaningful in matchmaking: implication  consistency  and inconsistency. 
　in the first case  i.e.  constraints imposed by d imply those of s  and vice versa if 
this relation extends the previous set-based inclusion to general concepts. if both 
then d and s should be considered equivalent in t. this relation extends exact matching  making syntax differences irrelevant. in case of consistency  is satisfiable in t. then  there is a potential match  in the sense that the constraints of neither proposal exclude the other. this relation has been highlighted also by other researchers  trastour et al.  1 . however  that proposal lacks a ranking between different potential matches. in the third case   is unsatisfiable in t. although also in this case a matching could be defined  di noia et al.  1   we do not treat this case here for lack of space. hence  from now on we concentrate on potential match only. we now highlight some principles that - we believe - every ranking function should have in logical matchmaking. 
　first of all  if a logic is used to give some meaning to descriptions of supplies and demands  then proposals with the same meaning should have the same ranking  independently of their syntactic descriptions. 
definition 1  syntax independence in ranking  a ranking of matches is syntax independent if for every pair of supplies s1 and s1  demand d  and ontology t  when s  is logically equivalent to s1 then s  and s1 have the same ranking for d  and the same holds also for every pair of logically equivalent demands d . d1 with respect to every supply s. 
　for example  an apartment s   described as available for the summer quarter  should have the same rank - with respect to a request - as another s1  identical but for the fact that it is described to be available for june-july-august. clearly  when the logic admits a normal form of expressions 
- as cnf or dnf for propositional logic  or the normal form of concepts for the dl of classic  borgida et al.  1  - using such a normal form ensures by itself syntax independence. 
　we now consider the relation between ranking and implications. we go back to the descriptions with sets of words  since they are easy to read through. let d be a demand and s1  s1 be two supplies defined as follows: 
d 	- 	{apartment  soho  two rooms  pets allowed  s  	- 	{apartment  soho  boiler  quiet} 
s1 = {apartment  soho  boiler  quiet  last floor} 
in this case  the characteristics that s1 adds to s1 are irrelevant for d. hence  whatever the rank for s   the one for s1 should be the same. if instead we let 
s1 = {apartment  soho  boiler  quiet  pets allowed} 
then s1 should be ranked better than s1 since it adds a characteristic required by d. we generalize this example to concepts  and state the following definition. 
definition 1  monotonicity of ranking over subsumption  a ranking of potential matches is monotonic over subsumption whenever for every demand d  for every pair of supplies s  and s1  and ontology t  if s1 and s1 are both potential matches for d  and   then s1 should be ranked either the same  or better than s1  and the same should hold for every pair of demands d1 d1 with respect to a supply s. 
1 	description logics intuitively  the above definition could be read of as a ranking is monotonic over subsumption if: the more specific  the better. observe that we use the word  better  instead of using any symbol     . this is because some rankings may assume that  better  means  increasing   towards either infinity  or 1  while others may assume  decreasing   towards 1 . observe also that the above definition refers only to potential matches  i.e.  consistent matches - otherwise   would be the best match  being the most specific concept   which is obviously not the case. 
　we remark that the properties and definitions we stated in this section are independent of the particular dl employed  or even the particular logic chosen. for instance  the same properties could be stated if propositional logic was used to describe supplies  demands and the ontology. in this respect  we believe that this section keeps its significance also if one chooses more expressive dls such as shoq  v   horrocks and sattler  1  or daml  paolucci et ai  1 . 
1 abduction in description logics 
we tend to follow the notation of  riter and gottlob  1  for propositional abduction whenever possible  and adapt it to our setting. 
definition 1 let c be a dl  c  d  be two concepts in c  and 
t be a set of axioms in c. a concept abduction problem  cap   denoted as  c  c  d  t   is finding a concept h c such that 
we use p as a symbol for a cap  and we denote with sol v  the set of all solutions to a cap p. observe that if is unsatisfiable in t  then trivially 
i.e..  there are no solution to p if c and d are not a potential match. hence from now on we concentrate on the case 

　as propositional abduction extends implication  a cap extends concept subsumption. but differently from propositional abduction  we do not make any distinction between manifestations and hypotheses  which is usual when abduction is used for diagnosis. however  diagnosis is not our domain of application for abduction  and when making hypotheses about properties of goods in e-marketplaces  there is no point in making such a distinction. this uniformity implies that if  is satisfiable in t  then d sol  c c  d t    i.e.  there is always the trivial solution 
d to a non-trivial cap  ♀  c  d t . interpreted in our e~ marketplace application domain  it means that if 1 hypothesize for the counteroffer exactly all my specifications  the counteroffer trivially meets my specifications. since one wants to model occam's razor  some minimality in the hypotheses must be defined. in the following definition  we denote with  the subsumption relation between concepts w.r.t. a tbox t. 
 be a cap. the set whose concepts are maxis the subset ofsol p  
whose concepts have minimum length. 
we note that being maximal under  is still a minimality criterion  since it means that no unnecessary hypothesis is assumed. it can be proved that the two measures are incomparable. 
proposition 1 there exists a cap p such that the two sets 

 and neither solution is in the 
other set. ＆ 
the proof highlights that  although -minimality could be preferable for conciseness  it is heavily dependent on t. for every concept h sol p   it is sufficient to add the axiom a - h to get a -minimal solution a. 
　a third minimality criterion is possible for dls that admit a normal form as a conjunction of concepts  that is  every concept c in c can be rewritten as an equivalent concept 
. this is the case for l= acm  and for the dl of the classic kr system. we call such a normal form cnf  in analogy with propositional logic. 
definition 1 let p= l  c  d  t  be a cap in which c admits a cnf. the set  is the subset of sol{p  whose concepts are minimal conjunctions  i.e.  /f c  then no sub-conjunction of c is in sol p . we 
call such concepts irreducible solutions of p. 
it turns out that -minimality subsumes both -minimality and -minimality. this is not a surprise  since -minimality is a form of -minimality  i.e.  maximality for subsumption w.r.t. an empty tbox. 
proposition 1 for every cap p in which c admits a cnf  
both are included in   
proof. 	if a concept c is not 	-minimal  then it is not 
	-minimal  and the same for - 	~ 
1 	computational complexity 
since concept abduction extends concept subsumption w.r.t. a tbox  complexity lower bounds of the latter problem carry over to decision problems related to a cap. 
proposition 1 let p= c c d t  be a cap if concept subsumption w.r.t. a tbox in c is a problem c-hard for a complexity1 class c  then deciding whether a concept belongs to sol p  is both c-hard and co-c-hard. 
proof. hardness for c comes from the fact that c is subsumed by d in t if t  sol{p . ＆ 
hence  if c contains the dl ac  then deciding whether a concept belongs to sol p  is exptime-hard  donini  1  for a general tbox t  but it is pspace-hard if t contains only acyclic concept axioms  calvanese  1 . 
　regarding upper bounds  a simple result can be derived from the fact that d is always a solution of the cap  c c d t  - although not always a minimal one. first of all  a total length-lexicographic order can be defined over concepts as follows: given two concepts c  d c  let c  d if either  or both and c is lexicographically before d. based on this total order  an algorithm for finding a -minimal solution of a cap  using polynomial space relatively to an oracle for subsumption in c  is the following: 
input: a 

description logics 

begin 
x : = t ; 


then return x; x := next concept following x in 
endwhile; return d 
end. 
the above algorithm uses polynomial space  considering the two calls to subsumption as an oracle  since it just tries all concepts with less symbols than d  and returns d if it does not find a shorter solution. therefore  it provides an upper bound on the complexity of cap  depending on the complexity class to which subsumption in c belongs to. although this result does not directly lead to a practical algorithm  it puts an upper bound on the complexity of the problem  hence on the complexity of every optimal algorithm. 
theorem 1 let p= c  c  d  t  be a cap. if subsumption in c belongs to a complexity class c that is included in pspace  then finding a concept in   is a problem in pspace. otherwise ifpspace is included in c  then finding a concept in  is a problem in c. 
given that the problem of finding a solution cannot be simpler than the corresponding decision problem  we can conclude with some general results about -minimal abduction. 
theorem 1 let v={c c d t  be a cap  with c a dl whose expressiveness is between ac and the dl containing 
concept constructors and role construc-
tors  role chain  transitive-reflexive roles  role identity  role inverse. then finding a concept in    is a problem exptlme-complete when t is a general tbox. 
proof. hardness results for ac are in  donini  1 . membership result for the most expressive logic comes from converse-propositional dynamic logic  vardi and wolper  1 . 
hence  for a general tbox the best known algorithms require exponential time and also exponential space  unless one proves pspace = exptime . 
　when the tbox is acyclic  complexity results for subsumption imply that finding a concept in  is a problem 
pspace-complete for dls whose expressiveness is between 
  calvanese  1  and acc  baader and hollunder  
1   even for the simplest logic  the problem is conp-hard  calvanese  1 . 
1 	irreducible solutions in acn 
in this section  we assume that t of a cap v=  ♀  c  z   t  is always acyclic. finding an irreducible solution is easier than finding a -minimal or a minimal solution  since a greedy approach can be used to minimize the set of conjuncts in the solution: starting from c  d  delete one redundant conjunct at a time from d. however  instead of starting from c  d  we adapt a structural subsumption algorithm  borgida and patel-schneider  1  that collects all concepts that should be conjoined to c to be subsumed by d. the algorithm operates on concepts in normal form; roughly speaking  this form is obtained by expanding concept names with their definition in t  and then applying the following rewriting rules as much as possible: 

　in the following algorithm  we denote the fact that a concept a appears as a conjunct of a concept c with a  c. 
algorithm 	findirred v ; i
 where h = t means that c is already subsumed by d  variables: concept h begin // := t; for every concept name y in d 

then delete h1 from h; return h; 
end. 
it can be proved that the concept h returned by find lrred    is indeed an irreducible solution of v. as for complexity  the expansion of the tbox in the construction of the normal form can lead to an exponential blow-up  as demonstrated by nebel in . and anyway  a polynomial algorithm cannot be expected since subsumption in ac with an acyclic t is co-np-hard  calvanese  1 . however  in the cited paper nebel argues that the expansion is exponential in the depth of the hierarchy t; if the depth of t is 1 log |t|   then the expansion is polynomial  and so is the above algorithm. 
theorem 1 let v=  ♀ c d t  be a cap  with c=ac  and t an acyclic tbox whose depth is always bounded by 
. then finding an irreducible solution to v is a problem solvable in polynomial time. 
1 	description logics 　in order to rank the proposals in a marketplace according to how  near  they are to a given proposal d  we take the number of concept names in the irreducible solution returned by the above algorithm. although this makes the rank depend on the algorithm  it can be easily proved that this definition is in accordance with the principles highlighted in section 1. moreover  the fact that a concept h is actually computed makes it easy to devise an explanation facility  in case a user wants to know why a given proposal has been ranked before another. this transparency is crucial for our electronic business scenario  where we must give the user reasons to trust the system. in the next section  we show the results of an experiment comparing the rank obtained by our deployed system and the rank provided by some users in the same scenario. 
1 experiments 
using the highlighted properties as a formal specification we designed and implemented a prototype facilitator. the system embeds an adapted neoclassic reasoner  the c++ implementation of the original classic. the rationale of the choice of the classic system  apart from the obviously useful availability of concrete datatypes and the possibility to extend its functionalities through test functions  is its polynomial time inference. the system receives a description of demand/supply. then  the reasoner checks the description for consistency; if it fails  based on the reasoner output  the system provides an error message stating the error occurred. otherwise the proper matchmaking process takes place  and the system returns a ranked set of matches. when no exact match is available  the user may investigate potential matches. in this process he/she is helped by the system ranking. we believe that degree of conformance of an automated matchmaking facilitator to users' perception is of extreme importance  especially in a setting as our own  which ranks and categorizes matches. to evaluate the ability of the system to meet users' expectations we set up a little experimental framework. 
　we selected all apartments-rental advertisements from the dedicated section of a local newspaper on oct. 1th of last year. we subdivided them in two sets  demands  1 advertisements  and supplies  1 advertisements . it is noteworthy that  at least for the single-day pick we made  we were not able to detect any exact match. we submitted to twenty volunteers of various sex and age  a questionnaire that included 1 items. each item was one demand and a set of up to eight supplies  or one supply and a set of up to eight demands. volunteers were asked to rank  according to their 
judgement  elements of each set with respect to the given advertisement  with the following question: order the following demands supply  with respect to the given supply  demands  as you would contact them had you issued the given supply  demand . volunteers were given unlimited time and in average it took approximately half hour to complete the questionnaire. then the same sets of items were submitted to the reasoner. as a general consideration  the response of the reasoner was quite close to the users' ones  and considering average volunteers orderings the system ranking was in agreement with the human judgement almost always. average percentage of deviation from the mean values determined by the users on the whole experiment was 1. 
　as an example  we show here in more detail results of the evaluation for a single demand/supplies matching process  extracted form the experimental setting. let us consider the example demand: student looking for a nice 1 bed flat  ch  
furnished  kitchen  washing machine. price: 1 
also consider the following advertisements submitted as 
description logics 
demand  and bedroom  all toletfor student  	 at-leabt 1 hasbed  
 at-most 1 hasbed   at-least 1 hasfacilities   all hasfacililies  and washingmachine noautonomousheating fullyfurmshed    all haaservices kitchen   all price  maximum 1    
supplyl  and bedroom  all price  minimum 1   	 all pricelncludes 
 and b i l l tvprice   	 all hasfacilitieb  and fullyfurnibhed 
spatious    
supply1  and  all price  minimum 1    at-least 1 hasroom   at-mosr 1 hasroom   all hasroom room   at-least 1 toletfor   at-tnobt 1 toletfor  all toletfor  and couple student   at-least 1 depoait required  all depooitrequired yes   
supply1  and  at-least 1 depoaitrequired  all deposit required yes  all price  minimum 1   bedroom  all toletfor  and student nosmoker worker  all sex female     
supply1  and singleroom  all toletfor  and nosmoker student   at-leaat 1 occupants  all price  minimum 1    
bupply1  and doubleroom  all toletfor single  all hasfacilities 
 and lounge garden   all hasservices kitchen  all price  minimum 
1   all pricelncludes counciltax   
supply1  and bedroom  at-least 1 occupants   all price  minimum 1    all toletfor female  ail hasfacilities  and washingmachine 
tv vcr    
supply1  and bedroom  all price  minimum 1   	 all occupants 
family   at-least 1 occupants   all toletfor  and student professional  all sex female     
supplyb  and flat  at-least 1 hasbed  	 at-most 1 hasbed  	 all 
toletfor student  	 all hasfacilities adsl  	 all price  minimum 1b     
figure 1: neoclassic descriptions of demand and supplies 
supplies: 
  supply 1: large  fully furnished room  price includes cable tv and bills. price: 1 
  supply1: double room  suit a couple or two girls  required deposit. price: 1 
  supply1: room to rent  suit a non smoking female student with worker  international preferred  deposit required. price: 1 
  supply1: single room in clean flat for nosmoker quiet student  sharing with 1 others. price: 1 
  supply1: dbl room in shared house  suit single person  use of lounge  kitchen   garden  rent includes council tax. price: 1 
  supply1: female to share a room in a residential areaflatshare  washing machine  tv  vcr. price: 1 
  supply 1: large room in family houseshare with 1 adults  suit prof / student female  viewing recommended. price: 1 
  supply1: 1 bed flat  perfect for student  dble bed adsl com-puter beneath. price: 1 
　the translation of these advertisements into classic  in accordance with our ontology is pictured in figure 1. table 1 shows results provided from the matchmaking algorithm comparing the system provided ranking and the average volunteers orderings for demands w.r.t. to a supply. figure 1 shows the same results in a graphical form. notice that  while volunteers gave strictly ranked orderings  the system could also provide equal ranking for various matches. polygons represent a range for the system total order of supplies  when there are equally ranked supplies. for example  supply 1 and 1 are given the same rank by the system  so they could be equally put in fourth or fifth position when supplies are given a total order. hence we consider correct system 

table 1: system results and user preferences 

figure 1: system and averaged users ranking 
ranks for supply 1 and 1  because users' rank fall inside the polygons  while we consider incorrect system placement of supply 1 and 1  dotted lines mark the difference . 
1 conclusion 
motivated by the matchmaking problem in electronic marketplaces  we have studied abduction in dls. we have presented suitable definitions of the problem  and have shown how they can model commonsense reasoning usually employed in analyzing typical commercial advertisements. although we used the simple dl acm  our definitions and logical framework can be used also when a more expressive dl is used. of course in this case more complex algorithms should be devised. to substantiate these ideas we have implemented a prototype based on the devised specifications adapting a neoclassic reasoner  and presented experiments that show the correspondence between the system behavior with human users judgement. 
acknowledgements 
we thank peter patel-schneider for valuable suggestions on classic  simona colucci and marco mottola for useful implementations. this work has been supported by murst project cluster1  by eu-pop project  negotiation agents for the electronic marketplace    by pon project  tecnologie innovative per la valorizzazione e la fruizione dei beni culturali   by cnr projects la1co  and  metodi di ragionamento automatico nella modellazione ed analisi di dominio  . 
