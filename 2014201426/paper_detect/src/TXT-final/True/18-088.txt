 
     robot plan generation is a field which engendered the development of ai languages and rulebased expert systems. utilization of these latter concepts permits a flexible formalism for robot planning research. we present a robot plan-generation architecture and its application to a real-
world mobile robot system. the system undergoes tests through its utilization in the iiilare robot project  ci ral t  e t jal   1 . though the article concentrates on planning  execution monitoring and error recovery are discussed. the system includes models of its synergistic environment as well sr of its sensors and effectors  i.e. operators . its rules embody both planning specific and domair specific knowledge. the system gains generality and adaptiveness through the use of planning variables which provide constraints to the plan generation system. it is implemented in an efficient compiled production system language  ps1 . 
introduction 
     in general  a problem is a situation for which an organism  or program  does not have a ready response. problem solving  involves 1  sensing and identification of a problem  1  formulation of the problem in workable terms  1  utilization of relevant information  and 1  generation and evaluation of hypotheses. a planner is a program that attempts to deal with points 1 through 1. in this paper we present a rule-based plan generation system called fps  for flexible planning system . this system undergoes tests in a real-world robotic environment  the hilare proiect  giralt  et al  1  . 
     in such an environment what is a plan  it has to be a flexible and extensible structure which permits quick adaptation to unexpected situations. it must permit goa1-directed as well as data-directed processing. goal simultaneity and interaction must be verified during planning and before attempted execution. in a real-world environment a multitude of error situations may arise. besides correction of planning errors a planner must try to determine when an error is recoverable or when replanning is necessary. planners must be able to 
¡¡the author is presently on visit from the university of california at berkeley. this research is supported in part by agence de i'informatique contract 1. 
select processing strategies appropriate to each situation encountered and be able to handle complex goal descriptions. 
     fps is rule-based principally for the following reasons. production system  ps  rules allow for a neat solution to the frame problem when we 
use the strips assumption  waldinger  1  in that all updates in tbe model are done explicitly through rules. since rules can react in one ps cycle pss can adapt to new situations very rapidly  the rules acting like deamons. in planning or execution monitoring this fact allows the system to deal with unexpected/serependi tious situations. in addition  rule interactions may permit parallel searchs for a best solution or may allow rapid responses to recognized problem situations  e.g. planning goal conflicts . in a ps the addition of knowledge is incremental. therefore  the evolution of our robotic environment will be easily characterizable to fps. also  in the future our use of a ps architecture will permit fps to organize and generalize the plans that it has created as new rules. 
     some may say that pss are inefficient. it has been shown that by the use of compilatior strategies significant gains in execution speed are attainable  gupta and forgy  1 . fps is implemented in the ps  production system language  sobek  1 . it does not have to sacrifice efficiency for flexibility in its representation since 
ps  is a compiled ps. rule patterns are compiled into a parallel-match tree similar to but more general than ops  forgy  1 . the advantages of pss have been adequately described in  davis and 
king  1 . some planners and expert systems have opted for a frame-based approach  minsky  1 . it should be noted that there is a similarity between pss and frame-based systems. 
planning structure 
     we present a robot planner  fps  which deals with the dynamics of a plan. fps has in its ancestry strips  fikes  et al   1   noah  sacerdoti  1   and especially jason  sobek  1 . it generalizes these planners in representation and flexibility. fps is used in a real-world mobilerobot 'blocks-world' paradigm: the hilare project. superficially  fps is similar to noah and its generalization jason in that they are goa 1-or i en ted. where plans for noah consist of a directed graph of procedures  procedural net   in fps plans may be 1 r. sobcck 
described pf a directed graph of pre cesses. each process cortairs its state in p structure called a 
 planning node  each with its associated goal  see table 1 . a process characterizes tbe dynamics of a plan step while the planning node representee tbe data aspects. a process pets its node's entries filled from three principal sources: 1  freir tbe parent node     when an operator is selected for a 
node  or 1  by tbe executive  critic  task communication  and scheduling rules. the processes are managed by a tasking executive wbicb arranges tbe processes on a priority agenda taking into account for eacb process tbe importance  success  cost 
expended  and estimated allocated cost. the interrrecess coordination and high-level conflict resolution knowledge are called planning specific and 
are represented in rules. for example: 
if all sibling cbildren of a process have achieved its preconditions then check if tbe process can be decomposed into subprocesses . 
1. cos  pattern 
 . coal instantiations 
1. freconditions/enablements 
c. continuation conditions 
1. post-conditions  including goal pattern  
	f. 	constraint conditions 
1. parent 
1. children associated by each decomposition 
1. importance 
1. allocated cost estimate 
1. cost expended 
1. success kate for eacb post-condition 
1. error recovery handles: reason  source  locally recoverable 1. operator list 
1. script 
	table 1. 	planning node entries 
     simple goals in fps may consist of a relational p r e d i c a t e     .  inroom bl1ck1 rm1   its negation  or tbe application of a specific operator to a goal. compound goals may be conjunctions or eeouences of goals. compound goals let fps search for possible  conflicts whereas sequences specify an 
explicit required ordering of the goals involved. 
     a relational predicate may also contain  planning variables  similar to tbose developed by the author in  sobek  1  and tbose reinvented in stpe  wilkins  1 . these variables do not actually contain values; they may specify restrictions upon the allowed values  bindings  that their positions in a predicate may take  e.g. in tbe predicate  inroom robot $rm  the variable $rm may specify a number of possible instantiations for the predicate. the planning variables serve three 
¡¡tbe sibling processes are all children of a process which are conjoined by the same goal instantiation ofthe parent. the parent process might have multiple instantiations for its goal description and then would have a disjunctive group of siblings for each instantiation. 
functions: 1  ar 	rltr.tnr.tive 	to disjunctive goals 
with similar disjuncts  1  a method for the postponement of decisions  and 1  constraint expressions. 
     constraints mav be attached to goals  planning nodes  and operators. constraints are similar to goals except that they must be satisfied for the preconditions of a possible operator as well as during and after tbe operator's execution. they are taken into account in the node expansion procedure p.rd can cause the insertion of additional plan steps before a n o d e. 
     plarrirg involves iteratier of voc*e expansion with plan criticism. criticism may start as soon as a node is expanded  which eases a shortcoming of noah. noah could only apply its critics at the end of each expansion cycle. the critics in fps are considered a major part of the planner's  planning executive.  they contain knowledge that is relevant to tbe entire planning process  i.e. both planning specific and domain specific. corcomitant and overlapping with critics are heuristic rules. for example: 
hi. if multiple choices are possible then select one which minimizes cost  effort  or distance 
h 1. if robot moves an object then it should not block a door 
hi is a general rule whereas h  is domain specific. 
     the planner  presents a model of the robot's possible actions within its environment: it currently does not node! the robot's interactions. there is no representation for other purposive 
 goal oriented  organisms or causality other than tbe robot's. the possible actions are modelled by 
operators. 
     operators are dynamically selected for each planning node; no a priori connection between operators and goals exists. associated with operators are preconditions  environmental context   continuation conditions  post-conditions  and constraints. the operators are ordered in a specialization/ generalization hierarchy. operators may have scripts which specifv how they should be reduced; the scripts may define conditionals  parallel paths  goals  constraints  and sub-operator applications. if they contain subgoals then a subprocess will be created for each subgoal. otherwise  the script will be checked by  critics  against tbe surrounding plan structure. 
an example operator is gotoroom  see fig. 1  . 
given a room  r as argument  if the robot is in an adjoining room then it will try to apply sequentially the two sub-scripts gotodoor and g1thrud1r. these latter two scripts are subordinate to gotoroom only in the current node's dynamic context: a different call sequence would create another hierarchy of goals and operators. fps would fan out from the goal s t a t e   e.g. 
 inroom robot rm    using the connexity graph provided by connects until it finds the current state. 

 gotoroom: argument: preconditions: script: post-conditions:  inroom robot  r1  
 connects  d  r  r1  + 
 seq  gotodoor  d  
 gothrudoor  d   
 inroom robot  r * 
not  inroom robot  r1  - primary result  goal condition  
1
- static data 
figure 1. gotoroom operator specification 
the search could be breadth-first  depth-first or depending on the situation it could even require heuristic rules which would remember efficient routes once found. after a route is found the two sub-ordinate scripts are tried in order to assure that the robot can get to and through the door. if there are multiple doors to a room  each would cause two parallel descendant nodes to be created. 
     an operator's goal is specified to the system as the primary post-condition. the above operator can also be invoked to get the robot out of a particular room. each time that an operator succeeds with respect to a goal its correspondent level of importance or competence is rewarded. 
execution monitor 
     what distinguishes planning from execution monitoring is that in the former a coherent planning structure is established  whereas in the latter the necessary verifications of coherence must come from the real-world environment. note that a 
     large part of the representation for both planning and execution monitoring must be the same in both in order to facilitate their communication and sharing of models. thus  execution monitoring uses the same planning structures to establish when error recovery should be initiated. an error situation is detected when there is a discrepancy between an operator's expected possible outcomes and the real-world responses  srinivas  1 . these discrepancies are analysed by execution-error critics which determine whether the error is 1  unimportant  1  has a fixed solution  or that 1  replanning will be necessary. 
conclusion 
     fps combines domain-independent plan structuring critics with domain specific constraints and critics. they watch over a general and flexible plan structure. since the system is rule-based  heuristics may be added at any level; for the moment few exist. their usefulness should become apparent when fps performs error recovery and replanning. current work includes making the system more robust and the addition of the execution monitor. 
r. sotaeck 1 
acknowledgements 
     the author would like to thank everyone involved with the hilare project for providing the necessary support for a real-world testbed for fps. 
