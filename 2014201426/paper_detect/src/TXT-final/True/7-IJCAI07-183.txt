
we describe an analogical method for constructing a structural model from an unlabelled 1d line drawing. the source case is represented as a schema that contains its 1d line drawing  the lines and intersections in the drawing  the shapes in drawing  and the structural model of the device depicted in the drawing. given a target drawing and a relevant source case  our method first constructs a graphical representation of the lines and the intersections in the target drawing  then uses the mappings at the level of line intersections to transfer the shape representations from the source case to the target  next uses the mappings at the level of shapes to transfer the structural model of the device from the source to the target. the archytas system implements and evaluates this method of compositional analogy.
1 motivation and goals
we view the task of interpreting drawings as one of constructing a model of what the drawing depicts; the model enables higher-level  i.e. non-visual  inferences regarding the depicted content of the drawing. for example  in the context of cad environments  the input to the task may be an unannotated 1-d vector graphics line drawing depicting a kinematics device  and the output may be a structural model of the device  i.e. a specification of the configuration of the components and connections in the device. current methods  ferguson and forbus  1; alvarado and davis  1  for extracting a model from a drawing rely on domain-specific rules. in this paper  we propose to derive a model by analogy to a similar drawing whose model is known. this requires  1  an analogical mapping from the source  known  to the target  input  drawing on the basis of shapes and spatial relations  and  1  transfer and adaptation of the model of the source drawing to the target.
　structure-mappingtheory falkenhaineret al.  1 views analogy-based comprehension as a process of mapping individual relations from the source to the target. candidate inferences about these mappings are guided by higher-order relations such as causal relations. while this works well in certain domains  there are no clear higher-order relations in the geometric and spatial information explicitly encoded in a

figure 1:  a  a sample source drawing of a piston and crankshaft assembly.  b  a target drawing of the same device with the piston now at the top of its range of motion.
drawing; at best there are only first-order spatial relations between geometric elements. further  in this context the mapping is no longer the principal product of the analogy; our goal is not to align two representations exactly and infer a single additional relation in the target  but to transfer an entire structural model of a device depicted in a drawing  which may involve many relations. what we need for this is  1  a method of analogically recognizing the shapes in the target drawing  and  1  a scheme for organizing the shape and structural models of a source drawing in such a way as to enable transfer of the structural model based on shape-level differences between the target and the source drawings.
　let us consider the task of mapping the source drawing illustrated in figure 1 a  to the similar target drawing illustrated in figure 1 b   figure 1 shows two more target drawings . if we have a low-level geometric reasoner to recognize the geometric elements and spatial relations among them  then we can treat this representation as a labelled graph: a contains b  c is adjacent to d  and so on. a graph-theoretic method for analogy-based recognition may then be used to find a consistent mapping between the graphs representing the source and target drawings. however  the method runs into difficulty

figure 1:  a  and  b  illustrate two additional target drawings. the u-shaped cylinder in  a  is made up of three rectangles  but is a single polygon in  b   and also is thinner in  b  than in  a .

figure 1:  a  a sample target drawing of a two piston and crankshaft assembly  and  b  a sample target drawing with two crankshafts and a single piston. in both cases  the source is from figure 1 a .
for the target drawings shown in figure 1 with figure 1 a  as the source drawing. in this problem  the number of components  and thus the number of shapes  is different  and either the graph-theoreticmethod would have to relax the constraint of one-to-one mapping  or else the analogy would have to be performed twice in order to transfer a model successfully from figure 1 a  to either figure 1 a  or  b .
　to address the above difficulties  our method of compositional analogy performs analogy at multiple levels of abstraction. figure 1 illustrates the organization of the knowledge in the source case. the structural model of the device in the source drawing specifies the components of the depicted device and their interconnections. this model is related to the drawing via the intermediate abstraction of a shape model. our method first gathers individual lines and circles and intersection points into shapes  and then finds mappings between the source and the target at this level of intersections. then  it groups these mappings and transfers shapes from the source to the target. next  it finds a mapping at the shape level  and finally transfers the structural model. mapping and transfer


figure 1: the multi-level hierarchy of drawing  basic shapes  and composite shapes  related to the structural model on the left with its components and connections between components. basic shapes depict components  and composite shapes  made up of basic shapes  depict connections between components.
thus happen iteratively in a loop  working up to each subsequent level of abstraction.
　the archytas system implements our method of compositional analogy. although analogical reasoning in general involves the tasks of retrieval  mapping  transfer  evaluation  and storage  archytas presently implements only the tasks of mapping and transfer. so  given a target drawing  archytas already knows of the source drawings relevant to the target.
1 structural and shape models
the structure  shape  and drawing in a source case form an abstraction hierarchy. the structural model is a specification of components and structural relations  along with properties  height  width  etc.  and variable parameters  e.g. position  angle  of each. this structural model is similar to the representation of structure in structure-behavior-function models  goel and chandrasekaran  1 . figure 1 illustrates the graph representing the connections among the components in the structural model of the piston and crankshaft device in figure 1 a . in addition  for each component  the user specifies the coordinates of a basic shape corresponding to that component  and for each structural relation  or connection   the user specifies a composite shape as a composition of basic shapes depicting the components involved in the connection. this produces the drawing/shape/structure abstraction hierarchy shown in figure 1.
1 lines  circles  arcs  and intersections
the first step of the process is to match each shape in the source to the target drawing. we thus need a robust and canonical representation of shapes  one that is robust in face of the visual binding problem: line segments should match regardless of whether they are drawn in the vector graphics file as a single vector or as ten. for instance  the rectangle corresponding to the upper half of the cylinder in figure 1 a  might be drawn as four perpendicular lines  or it might be six lines  if the edge touching the piston is three segments instead of


figure 1: an illustration of the structural model  where roundedboxesrepresent componentsand ovals representconnections between components. properties and variable parameters of components are specified in slot values for each component frame.
one ; the shape must match either way. this is achieved using the graph-theoretic notion of an intersection graph.
　archytas takes each line segment and circle and circular arc as a set of geometric points in the plane  s  i   and treats each one as the vertex of a line intersection graph g = v e l   v g =s  and adds an edge e （ e g  between twoj whenever. that is  each set  line segment  etc.  is a vertex  and there is an edge between two vertices whenever the two corresponding sets intersect. each edge e （ e g  is labelled by a point l e = p  p i j  so that the graph is a multigraph in general  with multiple edges distinguished by point labels  which is important since circles can intersect lines or other circles at two points . a shape is treated as a subgraph of this representation  so the mapping process looks for these shapes as subgraphs of the target.
　archytas thus represents the intersections between the basic elements of a 1d line drawing  line segments  circles and circular arcs  using this graph. it first reads in a drawing; fill patterns and layering are ignored  so after pre-processing  the input drawings to archytas look like 1 a . line segments are taken as maximally connected collinear segments  and likewise for cocircular connected arcs  while archytas calculates all the intersection points between them. these elements form the vertices v of the line intersection graph  and the intersection points the labelled edges. figure 1 b  shows an example of a line intersection graph.
　the line intersection graph represents the most basic topological information in the drawing. to reduce the search space for analogical mapping  archytas augments this graph with additional spatial information. firstly  since each intersection is a pair of line  or arc  sets  archytas adds a flag on each edge  intersection  indicating when those lines are perpendicular. this prevents archytas from matching  say  a rectangle to a rhombus. secondly  each topological face in the drawing bounded by a cycle of line and arc sets is represented as a special vertex linked to the points and lines on its boundary. this represents the planar dual of the input drawing  regarded as a plane graph .

figure 1: an example of  a  a line drawing of a piston and crankshaft with fill patterns and layering ignored  as they are in archytas   and  b  its correspondingline intersection graph representation: l stand for for line  c for circle  a for arc  edge labels have been omitted for clarity . in addition  each bounded region  or face  is represented as a separate node  not shown  linked to the vertices and edges on its boundary. the dotted lines indicate collinear but disconnected lines.
1 basic and composite shapes
depending on the perspective of the drawing  a particular component may be depicted by an actual shape  regarded as a set of connected lines or arcs  or not at all. when a component is depicted by a shape  which is a subgraph si of the intersection graph. each component in the model shown in figure 1 is linked to a subgraph of the intersection graph called a  basic shape . a connection between components in the model is a union of several entities  and so each connection is linked to a subgraph called a  composite shape.  a composite shape is a union of two or more  basic shapes   forming a larger subgraph of the intersection graph. this forms the multi-level hierarchy shown in figure 1.
1 analogical mapping and transfer
the goal of the mapping stage is to align shapes in the representations of the source and target drawings by finding correspondences between the basic and composite shapes in their augmented line intersection graphs. in particular  archytas attempts to find mappings from each basic and composite shape to some subgraph of the target drawing's line intersection graph. here the mapping must be exact: each element of the shape description must match  and so the algorithm is one of subgraph isomorphism.


figure 1: the multi-level hierarchy shown in figure 1 is transferred onto the target by first generating the line intersection graph of the input drawing  and then matching first composite shapes and then  when two composites overlap appropriately  basic shapes. each basic and composite shape implies a component and structural relation  respectively  thereby suggesting a　the source drawing is divided into basic and composite shapes. the drawing in figure 1 a   for instance  has the following depicted components  each of which has one basic shape associated with it:  i  piston   ii  connecting rod   iii  crankshaft  and  iv  cylinder. in addition  the following struchypothetical structural model of the target.
tural relations are shown in the drawing  each of which has a composite shape associated with it:  i  cylindrical joint between piston and cylinder   ii  revolute joint between piston and connecting rod  and  iii  revolute joint between connecting rod and crankshaft. thus there are three composite shapes that overlap with four basic shapes. the crankcase and it's structural relations  recall  are undepicted.
　in order to match these shapes to either figure 1 b  or figure 1 a   archytas first begins by trying to compute a subgraph isomorphism from each composite shape to the target intersection graph. upon finding these  archytas breaks the composite shape mappings into corresponding basic shape mappings  so that when two composites with a basic shape in common overlap in the mapping as well  that basic shape can be inferred of the target.
　stated more formally  let's say a composite source shape sx is made up of two basic shapes sa and sb  so that sx = sa “sb  and another source composite shape sy is made up of two others  sy = sb “sc.1 thus  the overlap between the two composites is just the basic shape they have in common: sx ” sy = sb. then  when we have two mappings m sx  and m sy   we can look for an overlap between them  m sx ”m sy   and when we do  we should expect it to be a valid mapping of the basic shape sb  that is m sx ”m sy  = m sb . this may not be true  but when it is  we can infer by analogy that the basic shapes sa  sb  and sc as well as the composites sx and sy are present in the target.
1 symmetric mappings
in figure 1 a   the composite shape corresponding to the piston-cylinder connection has four potential mappings onto the target 1 b . the piston/connecting-rod connection has two rectangles and some circles as its constituents  and there are again four mappings to the target  but not each of them overlaps properly with each mapping for the piston-cylinder shape. thus  if we chose the wrong pair  we might get two pistons instead of one  with one connected to the connecting rod  and the other connected to the cylinder. this is clearly an error of reasoning.
　note that the various mappings of a single shape in the target are symmetric. to see this  let m1 m1 : s ★ t be two mappings for a shape  where s = v e  is the source shape  and t = v e  is the target intersection graph  leaving aside the edge labels for a moment . in general  m1 and m1 may map the source shape onto different areas of the target  but if they do not  they still may be incompatible  for instance  with m1 a = x m1 a = y m1 b = y m1 b = x
if such a relationship generalizes across a pair of mappings then the mappings are symmetric in a certain sense. this is important from the perspective of transfer: the target shape will be identical with both mappings  so they are effectively equivalent. so  two mappings mi mj : s ★ t are symmetric  and  thus  equivalent from the perspective of transfer  when rng mi = rng mj   where rng m  is the range of m: rng m = {y :  x  m x = y}. another way of saying this is that the two mappings are permutations of each other.
　we can then group symmetric mappings into sets. if gx is a set of symmetric mappings for composite shape sx  and composite shape sx is composed of basic shapes sa and sb  then each mapping mi （ gx can be divided into two mappings for the basic shapes  mi a and mi b  and that for every such division  the mi a and mi b will be in the same symmetric mapping sets ga and gb. with this in mind  archytas can compute all mappings of each composite shape in the target  and divide them into these sets of symmetric mappings. for each such set  archytas can compute the sets of symmetric basic shape mappings that each composite mapping can be divided into  and then transfer one composite shape in the target for each composite shape mapping set  and one basic shape for each basic shape mapping set. the algorithms are presented in the next section.
1 shape mapping and transfer
the goal of the shape transfer algorithm is to structure the target drawing: that is  to use patterns to divide the lines and intersections into basic and composite shapes  which inform archytas of visual patterns depicting components and structural relations. it is important to compute all the mappings of a given shape so that all the relationships can be found. each mapping group informs a new shape in the target. the result is a shape-level mapping: a mapping at the level of whole shapes rather than individual lines and intersection points. from here  the transfer of structural elements-components and structural relations-can take place.
　the algorithm for shape matching is a basic backtracking constraint satisfaction algorithm with one modification: all assignments of values to variables are returned instead of just the first one found. the variables are the intersection points ep （ e s  of the source composite shape  treated as edge units together with the pair of line segments or arcs that the intersection connects  ep . for ep eq （ e s  and er es （ e t   where ep = ij  eq k  er z  and are distinct  two individual maps or assignments 
my mz
are consistent when 1  that is  when they have exactly one line or arc set in common  since the source intersections have exactly one such line/arc set in common  namely j . for instance  ifw  but the rest of the target vertices are distinct  the two maps are consistent. here  the mapping is actually a two-level mapping: there is the edge mapping with mes  and there is the implied vertex mapping mw and mz.
　in addition to this  for m a  = x  m b  = y  a b （ e s   x y （ e t   if a b are both on the boundary of a common face or region in the drawing  so must x y in the target. finally  there are two singulary constraints:  1  perpendicular intersections map to perpendicular intersections  but nonperpendicular intersections map to either perpendicular or non-perpendicular intersections  and  1  lines only map to lines  circles to circles  and arcs to arcs.
　with all this  we are all set to state the shape transfer algorithm. the outline of the algorithm is as follows:
1. apply each composite shape  matching it to the target drawing as many times as possible using backtracking constraint satisfaction with the composite shape elements as variables  target intersection graph elements as values  and matching graph structure as constraints.
  group symmetric composite shape mappings
1. for each composite shape mapping  break it into its basic shape mappings
  group symmetric basic shape mappings
1. for each set of symmetric basic and composite shapemappings  instantiate a new shape in the target drawing
1. return a mapping from the source shapes to the targetshapes that each one instantiated
shape-analogy  b c t 
input:source basic shapes b source composite shapes c target line intersection graph toutput:shape-level mapping m from source shapes to new target shapes1: let gb =  {basic shape mapping sets}
1: let gc =  {composite shape mapping sets}
1: let m =  {shape-level mapping}
1: for each c （ c do
1:	find all consistent mappings mc : c ★ t
1: for each composite shape mapping mc  c （ c do
1:	let bi bj （ b be the basic shapes of which c is composed
1:	let mbi = { x y  （ mc : x （ bi}
1:	let mbj = { x y  （ mc : x （ bj}
1: find the basic shape mapping set for each of mbi  mbj in gb  creating a new one if none is found  adding each mapping to its respective set
1:	find gc （ gc by the same procedure
1: for each gb （ gb do
1:	let mb be any mapping in gb
1:	let e = {e （ e t  :  x （ e s   mb x = e}
1:	let v = {v （ v t  :  y （ v s   mb y = v}
1:	let tb = e v  be a new target basic shape
1:	create a new shape-level map mtb
1: for each gc （ gc do
1:	let mc be any mapping in gc
1:	let e = {e （ e t  :  x （ e s   mc x = e} 1:	let v = {v （ v t  :  y （ v s   mc y = v}
1:	let tc = e v  be a new target composite shape
1: create a new shape-level map mtc 1: return mtable 1: algorithm: computes a shape analogy: a mapping and transfer first of individual shapes and  once transferred  a mapping of the source shapes to the newly instantiated target shapes.
note that  in general  this shape-level mapping will not be one-to-one  and this is part of the idea for mapping from figure 1 a  to figure 1 a  or  b  could be found. this algorithm is described in detail in table 1.
1 transfer of structural elements
once archytas has a mapping between the basic and composite shapes of the source drawing and newly instantiated shapes of the target drawing  it needs to transfer the structural model from the source to the target. from these shapelevel mappings we can hypothesize that if two shapes match then they should therefore depict the same component  and likewise for composite shapes and connections. the steps are to begin with the mapped shapes  and transfer the components and connections depicted by those mapped shapes  reconstructing the model iteratively.
as input to the structuretransfer process  archytashas a set
of shape-level maps  basic shape maps and composite shape maps  each one associating a source shape with a newly instantiated target shape. from each one we can hypothesize a structural element  along with all its properties and variable parameters. the only difficulty is that some components are undepicted. for instance  in figure 1  neither figure depicts the crankcase. archytas implements the following algorithm:
1. for each basic shape map  propose a new component inthe target  and map the source component to this new target component
1. for each composite shape map  propose a new structuralrelation in the target  and map the source structural relation onto this new target structural relation
1. transfer undepicted components: for each undepicted component in the source  propose one such component in the target  and again map the source to the target component
1. transfer undepicted structural relations: for each structural relation of a depicted and an undepicted component  propose one such structural relation in the target for every instance of that depicted component in the target. for instance  if component a is undepicted and connected to component b  and a maps to a1 and b maps to b1 and b1  connect a to both b1 and b1.
1. remove disconnected chains: for each component in the target  check that it is connected to all of the same components  through the mapping  that it's corresponding mapped source component is  otherwise remove it and all of its structural relations. for instance  if a is connected to b and c  and a maps to a1  b to b1 and c to c1  but a1 is connected to b1 but not c1 or any other mapped c  remove a1 and its structural relations.
1. return a component- and structural-relation-level mapping from the old  source structure to the newly instantiated target structure.
and so the output of this process will be a new structural model of the target and a mapping from the source to the target that  once again  may not be one-to-one.
　there are two important constraints at work. first  when transferring undepicted components  there is no guide as to how many times that component ought to be transferred  in the absence of a depicting shape to give an answer  and so the system has little choice but to transfer it just once. here it remains an open question as to when one would transfer a given component more than once to a target  and the answer must involve model-based reasoning about the model itself.
　the second issue has to do with disconnected chains. the shape mapping algorithm sometimes matches a shape more than once to overlapping patterns when it ought to only map once. the result of this process will be a component that is not properly connected to the rest of the model  hence a disconnected chain  which can be removed. for instance  in our piston and crankshaft example  in one drawing the connecting-rod/crankshaft composite shape matched a given drawing twice  with the two targets overlapping  when in fact the shape was only present once. the overlap was due to a line across the middle connecting rod that made it unclear
differencecan handle device stateyesdimensionyesorientationyesperspectivenocomponent shapesnonumber of componentsyestable 1: a brief summary of the differences between the source and target drawings that archytas can and cannot handle. the categories are differences in the state of the device  the dimensions of some of the components  the orientation of the drawing in 1 dimensions  the perspective of the drawing in 1 dimensions  differences in the shapes of components  and differences in the number of components.
whether the rod ended at one location or another. this results in a model with one piston  one crankshaft  and two rods  one that properly connects the piston to the crankshaft  one that does not. here  however  note again that the inference is a model-based inference based on the structural model: a component was transferred in a way that is inconsistent with its role  and so it must be removed. our heuristic is a simple one  and as the domain is explored further more complex constraints may need to be devised.
1 results
our common lisp implementation of archytas was run with the drawing in figure 1 a  along with its model as the source. this drawing was matched against a total of 1 different target drawings representing a range of kinds of differences between source and target. in particular  these drawings represent differences in  1  the state of the device  e.g. piston at top dead center versus the middle of its range of motion    1  differences of the dimensions of particular shapes  e.g. thinner versus thicker cylinder walls  longer versus shorter connecting rod  etc.    1  differences of orientation in 1-d of the whole drawing  e.g. a mirror image of the original    1  differences in the perspective in 1-d of the drawing   1  differences of shapes depicting components  e.g. the cylinder as one u-shaped polygon  as in figure 1 b   versus two parallel rectangles as in most of the others   and even  1  differences in the number of components  e.g. 1 a  or  b  . the results are summarized in table 1.
　the most interesting cases were the targets in figure 1 a  and  b . in the case of 1 a   archytas derived both the correct shape model and the correct structural model  with several shapes and components and connections in the source mapping to two targets each  the piston  the connecting rod  the cylinder  their connections  their shapes . in the case of figure 1 b   however  the shape model was derived correctly  and the structural model nearly  but our rule for removing disconnected chains had the unfortunate consequence of removing the connecting rod that connects the two crankshafts  and step 1  transfer undepicted components  only transferred the crankcase once  connecting both crankshafts up to the same crankcase. thus  more research is needed to determine what are reasonable constraints.
in 1 a   the addition of the  cylinder head   the rectangle at the top of the cylinder  did not interfere with the mapping and the reconstruction of the structural model  although no shape included those lines as a part of it. in figure 1 b   on the other hand  archytas fails to map and transfer the cylinder  since its shape does not exactly match the target.
1 related work
we have already discussed structure-mapping in ′1. georep  ferguson and forbus  1  is a diagrammatic reasoning system which takes an arbitrary 1d line drawing as input and gives as output a description of what is depicted in the drawing. georep is organized as a two-stage forwardchaining reasoner  in which a vector graphics line drawing passes through a domain-independentlow-level relational describer  llrd  that recognizes lines and polygons  and from there a high-level relational describer  hlrd  that applies a domain-specific rule set to produce a final relational description of the diagram. one application of georep  juxta  ferguson and forbus  1   uses sme to compare two nearly identical drawings of a physical process  such as two examples of heat transfer that differ only by the thickness of a metal bar conducting the heat. juxta first uses georep for deriving structure from shape and then sme to look for  alignable differences   and draw candidate inferences based on these differences. here both shape and structure are derived by forward chaining  and only a single candidate inference comes by analogy. in contrast  our work derives both structure and shape by analogy.
　the letterspirit program  mcgraw and hofstadter  1; hofstadter and mcgraw  1  takes a stylized seed letter as input and outputs an entire font that has the same style  or  spirit  . the system understands  roles   such as the crossbar of an f or a t. it makes new fonts by determining some attributes such as  role traits   e.g. crossbar suppressed   and transferring these attributes to the other letters to build an entire alphabet in a new style. it overlays a grid on the seed  target  letter and all the source letters to determine the right attributes to transfer. in general  however  such a grid is not available to facilitate analogical mapping  as  for example  in figures 1 a  and  b  versus 1 a  or  b . our work presents a method for determining shape-level differences between target and source drawings in the absence of a global coordinate system for assigning  roles . the method also uses shapelevel differences to guide the transfer of a structural model from a source to the target drawing.
1 conclusions
visual communication between humans and machines requires ai programs that can understand drawings of different kinds. in this paper  we considered the task of understanding a 1d line drawing of a kinematics device by deriving constructing its structural model. our method of compositional analogy derived first the shapes and spatial relations in the target drawing and then the structural model of the target drawing  both by analogy to a similar source drawing for which a structural and shape models are already known. our method first constructs a graphical representation of the lines and the intersections in the target drawing  then uses the mappings at the level of line intersections to transfer the shape representations from the source case to the target  next uses the mappings at the level of shapes to transfer the structural model of the device from the source to the target. we have shown that by relaxing the constraints of one-to-one mapping and by interleaving the mapping and transfer processes  a model can be derived of the device depicted in a drawing by analogy without any predefined vocabulary of shapes beyondthose that are actually present in a known drawing.
acknowledgments
this research has been supported in part by an nsf  iis  grant  award number 1  on multimodal case-based reasoning in modeling and design.
