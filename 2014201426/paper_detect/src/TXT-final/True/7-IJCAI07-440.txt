
we describe the formulation  construction  and evaluation of predictive models of human information seeking from a large dataset of web search activities. we first introduce an expressive language for describing searching and browsing behavior  and use this language to characterize several prior studies of search behavior. then  we focus on the construction of predictive models from the data. we review several analyses  including an exploration of the properties of users  queries  and search sessions that are most predictive of future behavior. we also investigate the influence of temporal delay on user actions  and representational tradeoffs with varying the number of steps of user activity considered. finally  we discuss applications of the predictive models  and focus on the example of performing principled prefetching of content.
1 introduction
user interaction with web search engines is a commonplace  yet complex  information-seeking process. in the course of a search session  users take various actions to accomplish their goals. they formulate and issue queries  browse results  navigate to result pages or other content  reformulate their queries  request additional results  and often mix these actions in an iterative and varying manner as they pursue information. each step in this process is informed by both the user's prior experiences and recent history with search and retrieval  the user's current goal  and the information the user gathers as the session progresses  bates  1; rose and levinson  1 . behavioral data capturing such rich interaction is becoming available via the collection of logs of web searching and browsing activity. this newly available data provides unprecedented opportunities for research on applications of machine learning and reasoning to better understand and support human information-seeking activities.
　as a concrete example  consider the log of search activity shown in table 1. here  a computer user starts with a general query   drivers    clicks on a result   www.windrivers.com    and then returns to the results page  presumably unsatisfied .
timeuser action
1:1 pmqueries for drivers1:1 pmclicks on result http://www.windrivers.com/1:1 pmreturns to results for drivers1:1 pmrequests second result page for drivers1:1 pmqueries for ati 1 drivers1:1 pmclicks on result http://support.ati.com/ics/...
end of session
table 1: example of web search activity
after spending some time browsing the second page of results for  drivers   the user reformulates the query to be more specific   ati 1 drivers  . the user then navigates to a desired result page  and the search session ends. activity logs such as this can be used to build predictive models of search behavior. a search engine capable of predicting users' future actions could streamline interaction sequences such as these  potentially offering dramatic improvements in search performance.
　we report on an investigation of a large dataset of web searching and browsing activity  collected with permission from hundreds of thousands of users. we focus on the use of machine learning to study the challenges and opportunities of building predictive models from this data. our contributions are as follows:
1. we introduce an expressive language for representingsearching and browsing behavior. this language provides a unifying framework for discussing and analyzing models of search activity  regardless of the applications for which the models may be intended. we employ the language to describe our study of search activity in the context of other studies.
1. we explore the construction of predictive models  andmeasure the value of different observational variables within these models. our experiments demonstrate that several variables have significant effects on predictive accuracy. we include an analysis of the influence of different temporal delays on the likelihood of future actions  and also consider the tradeoff between complexity and predictive power when assuming different degrees of locality of evidence.
1. we formulate and experimentally evaluate a sample application of the predictive models  aimed at the principled prefetching of content.
　section 1 describes our language for search activity models. section 1 gives the experimental results of our predictive models  including an analysis of the influence of different observational variables. section 1 discusses applications of the predictive models and presents experiments on applying the models to prefetch search engine results. we discuss related work in section 1 and conclude with a summary of the work.
1 a model of web search activity
we found it useful for reflection  comparative analysis  and communication with colleagues to compose an expressive graphical language for describing search activities.
1 state-machine representation
a model of search activity is cast in the form of a state machine representation displayed in figure 1. in this state model  nodes represent events that occur during a user's interaction with a search engine  and edges indicate the possible transitions between events. user actions  indicated by triangles in the diagram  are events that the user initiates. boxes within the state diagram represent states that are machine generated. lastly  the outer plates  marked by u and s  indicate that the structures they contain are repeated once for each user  u  and search session  s   respectively. define the set of search activity elements as e = {u s r p q cr c r b v z}; the individual elements of e are defined as follows:
  u - user
  s - session
  q - query input to search engine
  r - result page output by search engine
  p - non-result page output by website
  cr - click on search result hyperlink
  c r - click on non-result hyperlink
  b - browser-assisted navigation to previously viewed pages  e.g.  forward/back navigation  tabbed browsing 
etc. 
  v - visit to web page by means other than cr  c r  b  e.g. by opening a new browser  typing into the address bar  clicking a hyperlink from an external application  etc. 
  z - end of session
　doubled lines are used to indicate the session start action q  and a circle indicates the end state z.
　in figure 1  each user u executes one or more sessions s. here a session is defined as a sequence of search activity directed toward a single user intent; all sessions begin with a query q. query actions are always followed by r  the presentation of a search result page   and from the r state the user can execute any action. as a concrete example  the event sequence from the activity log in table 1 would be expressed as qrcrpbrqrqrcrpz. we will refer to the state machine in figure 1 as the search activity model  sam .

figure 1: search activity model
1 a language for search activity models
the set of event sequences generated by the full sam is infinite; a particular model will often consider only a subset of these possible sequences. to specify the activity sequences that a particular model considers  we adopt the following definition:
definition the event sequence space  ess  of a model m is a regular expression over the vocabulary ewhich matches exactly those event sequences considered by m.
the added construct    indicates events that occur  but that are not explicitly considered in the model. the added symbol τ indicates points in the sequence at which the model considers temporal duration. as an example  lau and horvitz  investigated the influence of temporal delay on the type of query reformulation users will next perform  e.g.  specialization  generalization  etc.   given prior reformulations. the event sequences that the lau & horvitz model considers are pairs of queries separated by some number of ignored non-query events. additionally  the model considers the duration between each pair of queries. thus  the lau & horvitz model has an ess of. we assume that wildcards in the regular expression execute a minimal match  so a .  term  which matches zero or more events of any type  is prohibited from including the event sequence following it  q in this case .
   
 lee et al.  1  cui et al.  1  rose and levinson  1 qr duame and brill  1   davison et al.  1  jones and fain  1   jones et al.  1  sun et al.  1  radlinski and joachims  1 　the ess language assists with comparing and contrasting the intent and results of previous work in search activity modeling. table 1 lists the event sequence spaces for several recent studies of search activity.1 note that the ess language can be used to characterize a model regardless of the particular application for which the model may have been designed. for example  the models in table 1 were developed for tasks  	 
table 1: previous search models. a summary of search activity models studied previously  and their respective event sequence spaces.
as wide ranging as query expansion  result ranking  and predicting different types of query reformulations  among others.
　importantly  all of the models in table 1 are server-side models  in that the user actions they consider - q and cr - can be detected from a search engine web server  although cr events must be redirected through the search engine to be logged . the full sam is a client-side model  including event types  e.g. browser actions b  that require instrumentation installed on the user's machine. similar client-side activity models have been investigated in recent work  e.g.  agichtein et al.  1; fox et al.  1  . with the exception of the scrolling events in  fox et al.  1   those models can be fully expressed in our language.
　a complete model of search activity is characterized by not only an ess  but also a parameterization  which maps events to a vector of features  e.g.  a query action can be parameterized by properties like its length or average frequency . because parameterizations can vary widely across models  we do not attempt to express them in our language. section 1 details the particular parameterizations we employ in our experiments.
1 samlight
the full sam considers all browsing activity following a search action. because our focus is on search activity in particular  we will ignore in our experiments the browsing activity that is unlikely to be related to a search query. for example  when the user types a new url into the browser's address bar  it is unlikely that this url is directly relevant to a previous search action. ignoring this browsing activity allows us to dramatically reduce the size of the data sets we analyze  while still retaining many of the events relevant to search actions. we will focus on a subset of the sam that we call samlight. samlight has the following form:
	samlight	=
  
　samlight considers a set of users executing one or more sessions  where each session consists of one or more queries followed by activity surrounding a result set   res   generated by a search engine. result set activity includes the presentation of a results page  followed by an optional result click. in the case of a result click  we explicitly distinguish the subsequent path   path   of pages traversed via hyperlink clicks or back actions 1 which tend to be particularly related to the search query  a similar approach was taken in  agichtein et al.  1  . we consider temporal duration at multiple points in the sequence  including the delay between all search actions  the duration of the path  and the time between the end of the path and the next action.
1 experiments
we now turn to experiments with building predictive models of search behavior. we start by describing in detail our data collection process and the parameterization of the events we consider  as well as the machine learning methodology we employ to construct models. we then present the results of the experiments on predicting a search user's next action  and analyze which aspects of the sam described in section 1 are most important for the task.
1 data collection and parameterization
our data set consists of three weeks of web activity collected via opt-in client-side instrumentation from a set of over 1 users. the data was collected from users who consented to share their searching activities with microsoft via the windows live toolbar download. the data consists of triples of the form  user id  time  url visted   representing user activity. we extracted each user's search actions  all search engine queries and result clicks  for three popular search engines as well as ten web page requests following each search action.1
　we partitioned the user actions into sessions  which  as described in section 1  are contiguous blocks of activity over which we assume the user's search goal remains relatively constant. detecting the boundaries of sessions is a challenging problem which could be informed by a variety of temporal and behavioral factors. for these experiments  we employed a simple heuristic that considers any search actions within 1 minutes of each other to be part of the same session  following previous work  radlinski and joachims  1 . we have explored the sensitivity of session numbers to this segmentation parameter. we found that the effect of using a shorter temporal gap of 1 minutes would have been relatively small  further dividing about 1% of the sessions.
　in the models  each action is parameterized by a set of features  which is detailed in table 1. the features express properties of different elements of the sam  including the user  the session  query and click actions  time  and a summary of information regarding non-search actions following search actions. features describing the user  u  include statistics such as how frequently the user searches  u qperday   or the average time the user takes to click a result page  u avgsectocr  . properties of the session  s  include features such as the number of queries issued in the current session s numq . features of query actions include attributes of the query text  e.g. the number of words q wordlen    the query words distributions in web text  e.g. the frequency of the query's least frequent word  q minwordfreq    and past search behavior for the query  e.g. the average click position for the query  q avgcrpos  . properties of click actions include attributes like position in the result list  cr position    and whether the click was on an advertisement  cr isad  .
　we used the first week of user data to estimate the  aggregate  properties of users and queries  which are averaged over multiple search sessions  e.g. u avgssec   q avgcrpos  . the following week was used as a training set  and the final week as a test set. features related to query word distributions on the web  e.g. q minwordfreq   were computed using a 1 million page sample of web text.
1 machine-learning methodology
the central challenge we address is that of predicting the user's next action  given a set of previous actions and information accumulated about the user and the session. formally  we model the conditional probability distribution
psearch action in the session. an|u s an 1 ... an k   where1 in this distribution  actionsai represents the ith an 1 ... an k and the u and s variables are parameterized as in table 1  and the target variable  the next action an  is parameterized in different ways for different experiments  as explained below.
　to model the conditional probability distribution  we employed a learning method that performs bayesian structure search to find predictive models that best explain the training data  chickering  1 . the resulting models are bayesian dependency networks in which the conditional distributions at each node take the form of probabilistic decision trees. parameters for restricting the density of the dependency networks were estimated via cross validation on the training set.
　bayesian structure search to learn dependency networks is one of several feasible learning procedures. we initially selected the method because it scaled nicely to training sets containing half a million instances with up to hundreds of features. also  the dependency models and trees output by the method allowed us to inspect graphical relationships among observations and predictions. a comparison of alternative machine learning algorithms  e.g.  logistic regression  support vector machines  etc.  for this task is an item of future work.
　we parameterized the target variable representing the next action at two different levels of granularity. at a coarse level of granularity the variable includes five output values representing the nature of the next action. we model whether the next action is a query  q   result click  cr   or end of session

1
　　properties of the session accumulate as the session progresses; for example  s durationsec   when used to predict an  expresses the duration the session up until action an 1.
user features  u u avgssec avg. session length  in seconds u avgsectocr avg. search to result click intervalu qpersecins avg. queries per second within sessionu qrepeatrate fraction of queries that are repeatsu qperday avg. queries per dayu avgcrpos avg. rank of clicked resultsu avgqwordlen avg. query lengthu crprob ratio of result clicks to queriesu prefengine engine queried most frequentlyu prefenginefreq fraction of queries on preferred engineu avgfirstresult avg. first result requested in queriessession features  s s numq number of queries issueds durationsec duration of the sessions qfrac ratio of queries to search actionss maxqwords maximum q wordlen   see below s minqwords minimum q wordlen   see below query features  q q wordlen length in wordsq charlen length in charactersq firstresult rank of first result requestedq freq number of times query is issuedq crprob prob. some result is clickedq avgcrpos avg. result position clickedq avgcrdelay avg. time to click after queryq avgpathsec avg. pathdwellsec  see below q avgpathpages avg. pathpagelen  see below q avgafterpathsec avg. afterpathsec  see below q distinctu number of distinct users issuing queryq hasdefinitive 1 iff query has  definitive  resultq hassuggestion 1 iff query has a spelling suggestionq adimpressions number of times ads shownq avgnumads average number of ads shownq adbid average bid for ads on this query.q isadvanced 1 iff query has advanced featuresq minwordfreq web frequency of least frequent wordq maxwordfreq web frequency of most frequent wordq geomeanfreq geo. mean of word web frequenciesq avgwordfreq average of word web frequenciesq maxcolloqquot maximum bigram collocation quotientq containsname 1 iff query contains a person nameq containsloc 1 iff query contains a location nameresult click features  cr cr position result rank for crcr dwellsec time in seconds on the target page.cr isad 1 iff the click is on an advertisementq|cr engine search engine for query or clicknon-search action features  v|c r|b pathpagelenlength in pages of path after result click traversed by links or  back  actions.pathdwellsectime duration for the pathafterpathsectime from end of path to next action.temporal/transition featuresτ searchact time between two search actionsdayofweekday of the weektimeofdayone of three 1-hour windowsqq worddelta word length change between queriestable 1: events and parameterizations considered in learning predictive models.

figure 1: predictive performance as event history varies. considering search actions beyond the previous one does not increase predictive performance for training sets of 1k and 1k search events.
 z . we distinguish three types of query actions  q-reform  q-same  q-nextpage   capturing the relationship between the next query and the most recently issued query. for the coarse parameterization  b actions that navigate back to the previous result page are treated as occurences of q-same. at the fine level of granularity  we consider a total of 1 output values. these values extend the coarse granularity in that q-reform actions are further parameterized by the type of textual modification  addition  deletion  or other  as well as whether or not the user switched search engines. also  the fine granularity distinguishes clicks on advertisements from other result clicks  and distinguishes back navigation to a previous query from a refresh of the same query. for both granularities  the remaining actions  v  c r  and b actions that are not q-same  are not predicted as output values  but are summarized as input variables as in table 1.
1 locality of evidence
the samlight model considers arbitrarily long event sequences; however  to model the conditional probability p an|u s an 1 ... an k   a machine learning algorithm requires a finite choice of k. we measured how prediction performance varied with k  the number of previous search actions considered. as can be seen in figure 1  the performance improves dramatically when considering the previous action  but after k = 1 the effect of increasing k is small. in fact  increasing the dimensionality of the parameter space hinders performance slightly  a fact that remains true even when we increase the size of training set five-fold  from 1 search events to 1. in the remaining experiments  we set k = 1 and use the larger training set.
1 prediction results
in this subsection  we present results of our experiments on predicting users next actions. we predict actions at both levels of granularity  coarse and fine  using a number of elements representing the user  query and session. we also examine the contribution of different elements and temporal dependencies.
the results of the prediction experiments are shown in
table 1.	we compare the accuracy of samlight with a
log likelihoodaccuracyfinecoarsefinecoarsemarginal-1-111samlight-1-111table 1: next action prediction. at both the coarse and fine granularities  samlight offers substantial improvements in likelihood and accuracy over a baseline marginal model.
marginal model  which simply predicts the distribution of next actions observed in the training data  the marginal model's ess is q|cr|b . table 1 shows the average log likelihood of each model measured on the test set. additionally  we list each model's accuracy  the fraction of test set actions for which the model's most likely prediction  that is  argmaxan pmodel an|u s an 1 ... an k   is correct. samlight substantially outperforms the marginal model at both action granularities and for both measures of performance.
predictive value of different sam elements
the sam contains several different events  each of which can be parameterized. here  we investigate which of these elements and parameters are most important for predictive accuracy.
　we first examine the relative importance of sam events  and then consider individual features. the fact that the end of session action z is a deterministic function of τ searchact   that is  end of session occurs iff τ searchact    1 minutes  has the potential to overstate the predictive value of temporal delay. to eliminate this trivial dependency  for these experiments we remove from the data all cases in which the next action is z.
　our comparison of different sam elements is summarized in table 1. the likelihood performance at both the coarse and fine granularities is shown. the coarse and fine accuracy differences tend to be small for these models  because the event space is dominated by a few highly probable events . thus  in table 1 we include accuracy on the specific problem of predicting whether or not the next action is a result click  cr   where differences between methods are more apparent. because the test set is large  all non-zero accuracy differences in table 1 are statistically significant  p   1  chi-squared test .
　the previous action  pa  model uses a single input feature  whether the previous action was q  or  treated equivalently  a back action to r  or cr  and ignores the other features and sam elements. pa has an ess of  q|cr|b  q|cr|b . pa  like samlight  is a client-side model. as mentioned in section 1  many recent search models are server-side models. to quantify the benefits of client-side instrumentation  we compare pa with a model that uses only the previous action observable by the search server  ess of  q|cr  q|cr  . the pa model offers substantially improved performance over both the marginal model and  in terms of likelihood  the serverside model.
　we now examine the combination of pa with additional sam elements. the action features {q cr b v c r} add the
finecoarsecr accuracymarginal-1-11previous server action-1-11previous action  pa -1-11pa + u-1-11pa + s-1-11pa + τ searchact -1-11pa + {q cr b v c r}-1-11samlight-1-11table 1: importance of different sam elements. the table shows the average log likelihood performance on the coarse and fine prediction tasks  as well as the accuracy of predicting cr events.
variableeffect on p cr τ searchact  q firstresult  q hassuggestion  s qfrac  q hasdefinitive +q crprob +stable 1: most predictive individual features. features are listed in order of discriminatory influence  along with an indication of whether each feature varies positively or negatively with the probability that the next action is a result click.
most predictive power in terms of likelihood  while the session features s offer the greatest accuracy improvements. further  the results show that the predictive power of the sam elements can be complementary. the sam elements harnessed in concert  in samlight  provide better predictions than models which use the elements in isolation. somewhat surprisingly  the user variables do not provide substantial improvements over pa. this is probably due to our focus on predicting high-level events  rather than more detailed information  such as individual urls  where user data has been valuable  sun et al.  1; chevalier et al.  1  . lastly  note that the relative likelihood differences between models are similar for both the coarse and finer-grained prediction tasks  suggesting that the two tasks require similar features for effective prediction.
　the most predictive individual features are listed in table 1  along with the direction of their influence on the probability of a result click. we found that the temporal feature τ searchact  is particularly important for improving predictive accuracy. figure 1 shows the temporal dynamics following a search query in more detail. many of the features' relationships with result click probability are intuitive-for example  result clicks are less likely for queries with spelling suggestions  but more likely for queries with  definitive  results  these are queries with a predictable destination such as  amazon  or  hotmail  . more interestingly  queries requesting deeper portions of the result set are less likely to result

figure 1: effects of delay since previous action. probability distribution over the action following a query based on τ searchact   the time since the previous action.
in clicks  i.e.  q firstresult  varies negatively with p cr   and result clicks become less likely as the number of queries s numq  executed previously in the session increases.
　an interesting finding highlighted in figure 1 is that click probability falls rapidly after a search. in fact  1% of result clicks occur within 1 seconds after a search. this quick action implies that the latency involved in retrieving a result page contributes substantially to the total duration of a search session. next  we show how we can decrease this latency by prefetching results the user is likely to access  using spare bandwidth available while the user examines search results.
1 applications
studies of user search activity have previously been applied to improve the search experience by aiding with query expansion  cui et al.  1   generating reformulation suggestions  duame and brill  1; beeferman and berger  1   and improving result ranking  agichtein et al.  1 . a rich activity model like samlight provides an opportunity for improving the search experience in many ways. below  we investigate applying the models to the principled prefetching of content.
1 sample application: result prefetching
prefetching uses idle bandwidth to proactively acquire content a user is likely to access  with the intent of reducing the amount of latency the user experiences. in a prior study of probabilistic policies for prefetching  it was postulated that richer user modeling could enable wiser choices of which content to prefetch  thus providing better bandwidth/latency tradeoffs  horvitz  1 . here  we test this hypothesis using the search activity models learned in section 1.
　formally  we assume that the user incurs a cost when consuming bandwidth or experiencing latency  and that the costs

figure 1: prefetching performance. samlight and pa offer a smooth tradeoff between bandwidth  plotted in terms of extra pages fetched per result click  and latency.
of both bandwidth and latency vary linearly with the amount of data accessed. let α denote the bandwidth cost of loading one page  and let β denote the latency cost of loading the same data. let pi be the probability that a particular result page i is requested by the user. the expected increase in bandwidth cost due to prefetching page i is then α 1   pi   and the expected reduction in latency cost due to prefetching i is βpi. to minimize expected cost  we prefetch a result page i iff doing so decreases expected cost  that is when β/α    1   pi /pi.
　our models are used to predict the click probability pi for each result page  and we measure performance as the ratio between α and β varies. we test each of the prefetching algorithms using search and click-through events from the test set  making the simplifying assumption that each page requires four seconds to retrieve  and that pages are prefetched in parallel.
　the tradeoff between bandwidth  in terms of extra pages downloaded  and latency is shown in figure 1. we compare samlight and the previous action  pa  model with a baseline algorithm  first result  indicated with a box in figure 1  which always fetches the top result  a feature currently available for google search results in firefox and mozilla browsers . the graph shows that substantial latency reductions are possible beyond fetching the first result for both the pa and samlight models. the models allow a smooth tradeoff between bandwidth and latency  and using samlight provides a somewhat better tradeoff. at a latency reduction of 1%  samlight uses 1% less extra bandwidth than the pa model.
　the probabilistic models estimate a prefetching policy that minimizes expected cost  given preferences in latency and bandwidth. for different preference values  the probabilistic models can offer cost reductions over algorithms that are not cost-sensitive  like the first result baseline from figure 1. in table 1  we show the cost performance of our models as β/α varies  setting α + β = 1 . we compare against the first result baseline as well as a second baseline  prefetch all  which prefetches all results  ignoring costs. the table
β/α = 11first result-1%1%1%1%prefetch all-1%-1%1%1%pa1%1%1%1%samlight1%1%1%1%table 1: cost reductions via prefetching. shown is the percentage cost reduction  versus the no-prefetch default  for each method  as latency/bandwidth preferences vary. negative reductions represent increased costs. pa and samlight do not increase cost for any preference values  and samlight offers the largest reductions overall.
lists the cost reduction due to prefetching using each method. as preference values vary  cost-sensitive prefetching with pa and samlight offers more consistent performance than the baseline algorithms. in particular  pa and samlight never increase cost. samlight offers the largest cost reductions overall.
1 related work
several models of user search behavior have been proposed in previous research efforts. we introduced a generalization and formalization of search activities  and focused on modeling the dynamics of search sessions. section 1 describes in detail the relationship between the general sam model and several previous models.
　recent work in query analysis  e.g.   silverstein et al.  1; broder  1; beitzel et al.  1   has focused on measuring and characterizing the global query distribution  to determine  for example  the average number of words per query  or the proportion of queries having a navigational rather than informational purpose . while we compute global statistics as well  our focus is on modeling the dynamics of search sessions  including sequences of multiple queries along with browsing actions.
　in search personalization  models of user interest are constructed by analyzing the content a user retrieves while searching and browsing  along with other data  shen et al.  1; teevan et al.  1 . these models are then utilized to provide search results tailored to the user's interests. this work is distinct from ours in that it focuses on modeling users  rather than search activity  and is aimed at a specific application. however  the content-focused user models employed in search personalization could be used to augment the behavioral user variables listed in table 1  potentially improving the predictive accuracy of our models. this is an item of future work.
　lau and horvitz  developed a dynamic model of search behavior but concentrated exclusively on query-toquery transitions. as in our work  they found that the temporal duration between queries was informative. our work builds on this by considering additional searching and browsing events  and by providing experiments characterizing predictive accuracy.
　recently  search user interaction data has been applied to improve search engine performance  as discussed in section
1. our work is complementary to this work. instead of focusing on a particular application  such as query expansion   we explore the space of search activity models and the general problem of predicting a user's next action.
1 summary and conclusions
we investigated the application of machine learning to logs of web search activity to build predictive models of users searching for information. we introduced an expressive language for search activity models  and used it to characterize several prior studies. using a large dataset of search activity  we experimented with building predictive models  and presented analyses showing how different attributes of users  queries  sessions  and temporal delay influence predictive performance. then  we reviewed several applications of search activity models  and presented an experimental investigation into the use of the predictive models to prefetch content.
　we foresee an acceleration of research that couples machine learning with large-scale behavioral data to better understand and support human information-seeking behavior. as part of efforts in this realm  we believe that developing expressive languages for representing  modeling  and communicating about searching and browsing behavior will be valuable for both constructing predictive models and for enhancing ongoing research and collaboration.
acknowledgments
the first author performed this research during an internship at microsoft research and was supported by a microsoft research fellowship sponsored by microsoft live labs. we thank eugene agichtein  andy edmonds  max chickering  and robert ragno for providing helpful components and advice for processing and analyzing user activity logs.
references
 agichtein et al.  1  e. agichtein  e. brill  s. dumais  and r. ragno. learning user interaction models for predicting web search result p