 
the weighted csp  wcsp  framework is a soft constraint framework with a wide range of applications. in this paper  we consider the problem of maintaining local consistency during search for solving wcsp. we first refine the notions of directional arc consistency  dac  and full directional arc consistency  fdac  introduced in  cooper  1  for binary wcsp  define algorithms that enforce these properties and study their complexities. we then consider algorithms that maintain either arc consistency  ac   dac or fdac during search. the efficiency of these algorithms is empirically studied. it appears that despite its high theoretical cost  the strongest fdac property is the best choice. 
1 	introduction 
it is well known that arc consistency  ac  plays a preeminent role in efficient constraint solving. in the last few years  the csp framework has been augmented with so-called soft constraints with which it is possible to express preferences among solutions  schiex et ai  1; bistarelli et ai  1 . soft constraint frameworks associate costs to tuples and the goal is to find a complete assignment with minimum combined cost. costs from different constraints are combined with a domain dependent operator  extending the notion of ac to soft constraint frameworks has been a challenge in the last few years.  from previous works we can conclude that the extension is direct as long as the operator  is idempotent. then   schiex  1  proposed an extension of ac which can deal with non-idempotent  this definition has three nice properties:  i  it can be enforced in polynomial time   ii  the process of enforcing ac reveals infeasible values that can be pruned and  iii  it reduces to existing definitions in the idempotent operator case.  cooper  1  further introduced directional arc consistency  dac  and full directional arc consistency for strictly monotonic 
　weighted constraint satisfaction problems  wcsp  is a well known soft-constraint framework with a non-idempotent operator  it provides a very general model with several applications in domains such as resource allocation  cabon et 
thomas schiex dept. de biometrie et intelligence artificielle institut national de recherche agronomique toulouse  france 
thomas.schiex toulouse.inra.fr 
ai  1   combinatorial auctions  sandholm  1   bioin-
formatics and probabilistic reasoning  pearl  1 .  larrosa  
1  introduced ac*  a refinement of the ac definition for wcsp. this definition provides a stronger yet simple and elegant property to be maintained during search. 
　in this paper  we take the definitions of dac and fdac  strengthen and extend them to binary wcsp  defining the dac* and fdac* properties. we then define corresponding enforcing algorithms. as in the classical csp case  we then consider the problem of maintaining ac*  dac* and fdac* during search and empirically compare these algorithms. these algorithms have a wide range of applications and allow a nice integration of hard and soft constraints in a common algorithmic framework. 
	1 	preliminaries 
1 csp 
a binary constraint satisfaction problem  csp  is a triple is a set of variables. each 
 variable has a finite d o m a i n o f values that can be assigned to it.  i a  denotes the assignment of value  to variable i. a tuple t is an assignment to a set of 
variables. actually  t is an ordered set of values assigned to the ordered set of variables   namely  the k-th element off is the value assigned to the k-th element of i for a subset  the projection of t over b is n o t e d i s a set of unary and binary constraints. a unary constraint is a subset of  containing the permitted assignments to variable i. a binary constraint  is a set of pairs from containing the permitted simultaneous assignments to i and j. the set of variables affected by a constraint is called its scope. a tuple t is consistent if it satisfies all constraints whose scope is included in  . a solution is a consistent complete assignment. finding a solution in a csp is an npcomplete problem. the task of searching for a solution can be simplified by enforcing arc consistency  which may prune values that cannot participate to a solution. 
	1 	weighted csps 
valued csp  as well as semi-ring csp  extend the csp framework by associating costs to tuples  schiex et al  1; bistarelli et ai  1 . in general  costs are specified by means of a so-called valuation structure defined as a triple 

constraints 	1 



constraints 	1 



priority queue  when a variable j is extracted from r  all the variables before j in r have already been processed. since findfullsupportac*   can only increase non zero unary costs of variables strictly lower than j  j will never be reintroduced in r and therefore each variable j is added to the queue r at most once. the queue is implemented as an array of booleans and a pointer to the highest true element. adding new elements to r means updating the pointer  the pop operation consists on returning the value of the pointer and searching 
proof: regarding space  there is no difference with dac*   and the same proof applies. regarding time  a variable j enters q only if a value has been deleted. therefore  each variable j is added to q at most d + 1 times  once at initialization and then upon value deletion at lines 1  1 or 1 . there-
constraints 
in this section we perform an empirical evaluation of the effect of maintaining various forms of arc consistency during search. we consider a depth-first search maintaining either nc*  ac*  dac* or fdac* which yields the algorithms 
mnc*  mac*  mdac* and mfdac*. for comparison  we include results obtained with pfc-rdac  larrosa et al.  1   which is normally considered as a reference algorithm. 
　for variable selection we use the dom/deg heuristic which for each variable computes the ratio of the domain-size divided by the future degree  i.e.  degree considering future variables only  and selects the variable with the smallest value. for value selection we consider values in increasing order of unary cost ci. the variable ordering used for directional arc consistencies is lexicographic. 
　we consider the max-csp problem  where the goal is to find a complete assignment with a maximum number of satisfied constraints in an overconstrained csr it can easily be formulated as a wcsr we experiment with binary random problems using the well-known four-parameters model  smith  1 . a random csp class is defined by  n d e  t  where n is the number of variables  d is the domain size  e is the number of binary constraints  i.e  graph connectivity   and t the number of forbidden tuples in each constraint  i.e  tightness . pairs of constrained variables and their forbidden tuples are randomly selected using a uniform distribution. samples have 1 instances and we report average values. the experiments were performed on a 1 mhz pentium iii computer. 
　for fixed values of n  d and c and increasing tightness t  most problems are solved almost instantly until the cross-over point is reached. then  problems become overconstrained and much harder to solve. we denote t＜ the lowest tightness where every instance in our sample is overconstrained. based on this  we define different categories of problems: 
combining the different types  we obtain 1 different classes  each being denoted by a pair of characters  sl st dl and dt . in each class  the domain size is set to 1 and the number of variables n is used as a varying parameter. figure 1 shows the average cpu time used with sl  st  dl and dt from left to right. in each plot  the five algorithms are listed in increasing order of efficiency  from top to bottom. in all cases  the search effort seems to grow exponentially with n. 
1 


figure 1: cpu-time in seconds for an increasing number of variable on our 1 classes of problems. in each case  the 1 algorithms 

arc listed in increasing order of efficiency from top to bottom. 
　for all classes except the dl class  mfdac* is the most efficient algorithm  with only minor differences with mdac*  sometimes they are so closed that the two lines can hardly be distinguished . the best performance of mfdac* is obtained in the st problems  where it is up to 1 times faster than pfc-rdac  1 times faster than mac* and 1 times faster than mnc*. for the dl class  however  mnc* is the most efficient algorithm  followed by pfc-rdac  mac*  mfdac* and mdac*. the differences between the algorithms are however more limited than in previous classes  mnc* is twice faster than mfdac* . 
　the ability of directional arc consistency to collect costs along the constraints in order to bring them together in the same variable allows to build stronger lower bounds. this is confirmed by the analysis of the number of nodes expanded by each algorithm  not reported here for lack of space  where 
mdac* and mfdac* always expand less nodes that pfc-
rdac  mnc* or mac*  with a ratio that can reach 1 between the extreme algorithms on eg. st problems. on the dl problems however  this ratio is much more limited  typically bounded by 1. with loose constraints  the upper bound reaches low values early in the search which allows pruning at high levels of the search tree and makes sophisticated lower bounds less significant. 
　it is worth to mention at this point that pfc-rdac heuristically assigns a direction to every constraint in each subproblem and this has a strong influence on the efficiency on random max-csp. similarly  the behavior of ac  dac and fdac based algorithms depends on the order in which variables are fetched from q and r  i.e.  on the variable ordering used to define dac  and on the order in which values are considered for projection. in our current implementation  q is implemented as a stack  values are considered in lexicographic ordering and the dac variable ordering is lexicographic. this leaves room for further improvement. 
1 	conclusion and future work 
in this paper we have refined two local consistency properties and adapted them to wcsp. we have developed enforcing algorithms and have studied their complexity. 
　as in classical csp  we observe that the choice of the right level of local consistency to maintain during search is important. despite its theoretical cost  the strongest local consistency we considered  fdac*  appears to be the best level for solving wcsp. in the future  we want to extend these algorithms to non binary constraints  apply them to other problems and take into account heuristics for the variable and value ordering used in ac  dac and fdac enforcing. 
