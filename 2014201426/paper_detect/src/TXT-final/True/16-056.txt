 
   this paper describes a distributed software control structure developed describe a distributed control system designed for the rover  and for the cmu rover  an advanced mobile robot equipped with a variety of present one control configuration  which is being developed for obstacle-
sensors. expert modules are used to control the operation of the sensors avoidance tasks. and actuators  interpret sensory and feedback data  build an internal model 
of the robot's environment  devise strategies to accomplish proposed tasks 1 hardware structure and execute these strategies. each expert module is composed of a master the cmu rover project is a continuation of research begun with the process and a slave process  where the master process controls the stanford cart  1   a minimal computer controlled mobile camera scheduling and working of the slave process. communication among platform. i hc rover  is intended to support a variety of al research in expert modules occurs asynchronously over a blackboard structure. the areas of perception  sensory data processing and understanding   information specific to the execution of a given task is provided through a control  real-world modelling  problem-solving  planning and related control plan. the system is distributed over a network of processors. real-issues. for this reason  the system is being designed along the following 
time operating system kernels local to each processor and an interprocess guidelines: message communication mechanism ensure transparency of the underlying 
network structure. the various parts of the system are presented in this   mechanical  sensor and controller flexibility; 

paper and future work to be performed is mentioned 
1 introduction 
this paper is a progress report on the cmu rover project. the 
cmu rover  1  is an advanced mobile robot  equipped with several different sensors  being developed at the cmu robotics institute. 
　research in the area of mobile robots can be divided into two broad categories. one major line of investigation studies the problems of balance and locomotion . another line  exemplified by projects such as the stanford cart   hilaire  vesa and others . as well as the cmu rover  concentrates on the problems of developing autonomous or semi-autonomous vehicles which use different kinds of sensors to obtain data about the real world. 
　from the point of view of application  the latter kind of research paves the way for the development of intelligent autonomous vehicles which could be used for space or sea exploration  or for work in hazardous environments  such as undersea mining and reactor maintenance  1 . additionally  research in mobile robot systems is an important challenge in artificial intelligence research . the need to cope with dynamically 
changing  unpredictable  real-world environments in which processing has to be done in real-time  can lead to the development of more robust and general ai tools. 
in this paper  we will give a brief overview of the robot's hardware. 
　this research is being supported by the office of naval research under contract noo1-k-o1 the first author is supponed in pan by the conselho nacional dc 
  enough onboard processing capabilities to enable it to function autonomously  but with connections to a remote mainframe system for heavy processing  such as is needed in vision or in long-term planning; 
  several different sensor systems which substitute and complement one another. 
　the rover is cylindrical  approximately 1 meter tall and 1 cm in diameter  and is equipped with three individually stecrablc wheel assemblies  each has two wheels  and is powered by two brushlcss samarium-cobalt motors. the whole system is powered by six scaled lead-acid batteries. hach motor is controlled by a motor processor  a dedicated mc1 . the conductor  an mc1  orchestrates the individual motor processors to follow a given path. the simulator  another mc1  uses feedback information from the motors to maintain a dead-reckoning estimate of the robot's position. 
　the sensors available include a tv camera  a set of sonar ranging devices and an array of proximity sensors. each is controlled by a dedicated mc1  respectively the camera. sonar and proximity processors . the utility processor  also an mc1  monitors interna conditions of the rover  such as motor temperature or battery voltage. additional processors  all mc1s  arc the controller  responsible for the sensor subsystem; the blackboard processor  where information relevant to several processes is shared; and the communications processor  which controls a remote link to a mainframe system  a vax 1 with a high-speed digitizer and an array processor . i hc processor network is shown in fig. 1. 

desenvolvimenio genlitico c tecnoldgico - cnpq. brazil  under grant 1-1: in part by the institulo tccnologico dc aeroniutica ＊ ita. brazil; and in pan by the robotics 	1 software structure 
institute. carnegie-meon university. 	to permit high-level control  ease of programming and use  and 
 the views and conclusions contained in this document are those of the authors and 	flexibility to perform different kinds of experiments with the rover  an should not be interpreted as representing the official policies  either expressed or implied  integrated planning and control system is being designed  composed of of the funding agencies. 	the following modules  fig. 1 : 

a. elfes and s. talukdar 1 


  a real-world modelling system  which interprets and integrates the qualitatively different  partial and sometimes cenflicting sensory information  and constructs an internal model of the real world environment in which thee rover is operating; 
  a high-level planning and simulation system  which uses general problem-solving techniques  as well as specific information obtained from the internal world model  to develop and monitor the execution of plans to solve a given task; 
  a distributed control system  which is responsible for the execution of a control plan  through parallel and coordinated control of the different sensors and actuators. 
　of the three modules  the distributed control system was developed first  and is described in the following material. 
1 the distributed control system 
1.1 design considerations 
　the design of the distributed control system was guided by the following goals: 
  effective use of the large parallel processing potential existing in the system; 
  flexibility of interaction with the different sensors and actuators; 
  distributed hierarchical decision-making capabilities; 
  flexibility and case of expansion and change of the system; 
  graceful integration of a task-specific control plan with the several processes which control and operate the rover  and with sensory and feedback information. 
1.1 overview 
　with the previously mentioned functions and design considerations in mind  the distributed control system was designed and a first version was implemented. the system consists of an expandable community of expert modules  which communicate asynchronously among themselves over a blackboard and perform a given task under the direction of a control plan. each expert module is dedicated to a particular type of subtask  such as the monitoring of sensors or actuators  problem-solving  or system management. the control plan breaks the overall task set to the rover into a set of subtasks and a set of constraints  the order in which these subtasks must be executed . one expert module  the supervisor  dynamically extracts scheduling information on the subtasks from the control plan. the blackboard is a data structure  where information relevant to the different expert modules is posted  this includes information on the robot's status  relevant sensory and feedback data  scheduling information abstracted from the control plan and the degree of progress made towards completing this plan. 
　the expert modules reside in the various processors that make up the network. local to each processor we have a small real-time operating system kernel that handles physical i/o  schedules processes and manages interprocess and interprocessor communication. a general message-based communication mechanism is used for local as well as remote interprocess communication. 
　a high level diagram of the distributed control system is shown is fig. 1. 
1.1 details 
　each expert module is composed of a pair of closely coupled processes: a  master  process and a  slave  process. the master process keeps track of relevant information on the blackboard  changing when necessary the status  run/stop/abort/continue  of its associated slave process. the master also retrieves needed data from the blackboard  hands it as input to the slave module  and posts relevant information generated by the slave process on the blackboard. the slave process is the one actually responsible for expert work  such as monitoring sensors  

handling events  controlling actuators  interpreting sensory information  doing problem-solving  etc. in the typical case  the master process resides in the blackboard processor  for access efficiency reasons   and the slave process actually resides in a different processor of the network. communication between them is maintained through the use of a symbolic message passing mechanism  similar to the system proposed in . a message is composed of a set of  namc    valuc   pairs  and has a priority associated to it. each of the expert modules  working asynchronously  maintains an input processing stream and an output processing stream. 
　the information posted on the blackboard has a structure in some aspects similar to the structure of messages  being also composed of   namc .  valuc   pairs. for efficiency and logical structuring reasons  the blackboard is subdivided into different areas  with several levels of abstraction possible within each. in each area related types of information are posted  e.g.. data relating to  movement    proximity 
sensors   etc. actual access to the blackboard is done only by the 
blackboard monitor  to insure the integrity of the posted data. a through the underlying support software residing in each processor. local to each processor we have a real-time operating system kernel   which handles interprocess and intcrprocessor communication  takes care of the internal scheduling of the resident processes  and handles low-level i/o. i/o handlers interface with the actuators and sensors in the system; other routines are responsible for the translation of specific low-level actuator and sensor commands to control signals  logical -  physical translation  and of feedback and sensory data to higher abstraction level descriptions  physical -  logical translation . the mailing routine 
constructs messages to be sent to other processors  and handles incoming messages. messages have headers with routing information  source and destination  and information contents. the specialized modules residing in each processor can either perform only local functions  in which case 
they don't interact with the blackboard   or can belong to the set of master-and-slave expert modules. the scheduling of local  in-processor  modules for execution/suspcnsion/abortion/continuation is done on the basis of: a thc inherent priority of the module; b the priority of internal events  generated either by software or by hardware; c thc priority of related incoming messages. the resident kernel also takes care of flow blackboard  according to their own priorities and the priorities of data and events being recorded there. 
　integrated into the overall control structure of the rover is the control plan. a simplified example is shown in fig.1. the syntax is partially based on . processes can be specified to execute in parallel  those within     brackets  or sequentially  those within     brackets . responses 
to events arc defined by the use of  on  cvcnt  ix   action   rules. from the plan  information about parallel and sequential execution of processes  as well as reactions to events  is abstracted  and posted dynamically on the blackboard as the plan is executed. 1 discussion 
　the system presented reflects the structure of a community of cooperating experts. these experts communicate asynchronously over the processor network  generating and absorbing streams of data. concomitantly  the system embodies a hierarchical model of distributed computation  where the arrangement of the processors can be seen as a tree. i the reflects the fact that the decision-making model is partially hierarchical: control decisions arc. whenever possible  made locally in the processor which is confronted with a problem. otherwise  the problem or data is broadcast recursively to the next higher level of decision  processors on the path up the tree . another result from this model is that commands and data can exist within the system at several levels of 
abstraction. at each level only the necessary degree of detail is present higher levels are able to deal with the same information in a more abstract form and do not become cluttered with unnecessary details. 1 a. elfes and s. talukdar 

transparency of the physical structure of the network itself is obtained 
blackboard scheduler schedules the master processes to interact with the control  buffering  message fragmentation  broadcasting etc. 

　the system described is loosely coupled   since the rate of communication between machines  spcciall  from the motor and sensor subsystem levels on upwards  is relatively small. iliis results from the use of asynchronous processes and the blackboard. this approach can lead 1 higher performance and better adaptability to dynamically changing conditions . 
　the blackboard mechanism has been used by several researchers  e.g. in speech understanding . image understanding   and tracking of objects . in our case  due to the multiprocessing network and the need to dynamically respond to the changing conditions of the real-world environment  the role of the  condition pan  of the hcarsay-ii knowledge sources  was expanded to a more general master/slave relation. in this way  unnecessary or even dangerous actions can be discontinued when necessary. furthermore  a separate control plan  integrated into the overall structure  and which hearsay-ii lacked  was considered essential in our case. other researchers have also fell the need to use separate focusing and goal-proposing mechanisms  1 . 
1 implementation status 
　the several physical subsystems of the rover have been tested and are operational. final assembly  integration and testing arc now being undertaken. concomitantly  one specific control configuration  
consisting of a set of expert modules and the underlying support software  is being developed. this set of modules includes tht controller  communication  sonar  proximity-sensor  camera  
simulation  blackboard and utility modules  which implement the corresponding functions mentioned in section 1; the movement module accomplishes a trajectory along a path provided by the path-planner  the vision-processing module extracts visual information about obstacles; the real-world-modeller uses information from the obstacle-detection module to construct an internal model of the environment; the supervisor dynamically extracts the necessary information from the control plan  while the defaulter fills in the details; the guardian watches over certain key parameters in the blackboard to prevent dangerous situations from happening  and the user interaction module permits communication with a human user. most of these modules have been implcmcnicd and tested in a simulated environment. the distributed control system has proven to be very flexible and adequate. it is now awaiting in; sito testing  running the rover. 
1 conclusion 
　although the development of such complex pieces of hardware and software is fraught with difficulty  there are considerable benefits. among them  many insights were gained into the problems of control  planning  interaction with the real-world environment and use of a processor network. 
　the distributed control structure described in this paper fulfills the initial design goals. future work includes the integration of the information coming from the sensors into a more sophisticated internal model  the development of a more elaborate planning system  and research into the problems of automatic knowledge acquisition and learning. 
1 acknowledgments 
the authors would like to thank hans moravcc  marc donner  zary 
segall  dave mckcown and peter hibbard for their suggestions and for interesting discussions. 
a. elfes and s. talukdar 1 
1 