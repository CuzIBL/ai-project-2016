 
　　in t h i s paper  we describe a plan generator for planning the sequence of machining cuts of mechanical parts. this system  named gari  makes use of weighted pieces of advice representing the expertise of human s p e c i a l i s t s . the complexity of the a p p l i c a t i o n domain guided us toward the implementation of a 
rather sophisticated control structure including hypothesis generation  fact deduction  and c o n f l i c t r e s o l u t i o n . experiments with gari suggest that more research e f f o r t should be devoted to abstract representation of control as opposed to the exhaustive representations defended by several authors during the last few years. 
key-words 
　　plan generation  expert systems  production rules  applications of a i   machining plans  c o n f l i c t reso-
l u t i o n . 
	i 	introduction 
　　in t h i s paper  we describe a plan generator named gari. this system makes use of an expert knowledge base for automating the planning of the machining sequence of mechanical p a r t s . 
　　planning the machining process is regarded in the context of cad/cam as an important  but d i f f i c u l t problem. the main obstacle comes from the fact that producing a machining plan requires the a p p l i c a t i o n of a large amount of rather subjective and s p e c i a l i zed knowledge. this knowledge is b e t t e r described as many d i f f e r e n t l y weighted pieces of advice than as a small set of constraints to be s a t i s f i e d . compromises are often necessary. 
　　gari makes use of such pieces of advice to generate plans for machining p a r t s . the complexity of the application domain guided us toward the imple-
mentation of a rather sophisticated control structure including hypothesis generation  fact deduction  and c o n f l i c t r e s o l u t i o n . 
　　during the l a s t few years  several authors have advocated e x p l i c i t representation of control for improving the behavior of problem-solvers   e . g . : / i /   / 1 /   / 1 /   / a /   / 1 /   . we f i r s t implemented and experimented with such a representation drawn from the one 
used in tropic /a/. however  it quickly turned out to be inadequate : an i n t r a c t a b l e quantity of i n f e rences and facts had to be remembered. then  we moved toward an abstract  but easier to handle  represent a t i o n of c o n t r o l   which experiments have proved to 
be more appropriate to the problem at hand. 
　　we believe that research on the abstract representation of control w i l l be an important topic in ai during the next few years  in order to solve r e a l l y complex problems requiring a large number of inferences. 
　　gari is w r i t t e n in the maclisp language and operates on the hb-1 computer. we have run it on indust r i a l mechanical parts of considerable complexity. ii process planning 
　　the purpose of process planning is to produce a plan for machining a p a r t   given i t s drawing. the plan should specify the machining cuts to be executed  t h e i r order  the machine tools to be used  the surfaces by which to body is clamped and located during each cut  e t c . 
　　such planning involves taking into account both technological rules and economic considerations  	for 
example : 
　　- if a hole h1 opens i n t o an other hole h i   then one is recommended to machine hi before h1 in order to avoid risks of damaging the d r i l l   
　　- it is advantageous to execute several cuts on the same machine with the same f i x i n g for reducing the time spent in s e t t i n g up the work on the machine  we then say that these cuts are grouped into the same  phase  . 
there is a great v a r i e t y of such technological rules and economic considerations. furthermore  they are not absolute. they are more preferences  between 
which compromises may be necessary. 	in addition they may d i f f e r somewhat from one company to another. 	in f a c t   they represent the experience and the know-how 
of engineers. 
　　an immediate consequence is that the planning of machining sequences d e f i n i t e l y does not have a u n i que s o l u t i o n . 
	i l l 	overview of gari 
　　gari is structured l i k e an expert system / 1 / . it consists of a specialized knowledge base and a more general purpose problem-solver. 

1 

　　knowledge is represented by production r u l e s . the left-hand side of a rule is a set  conjunction and/ 
or disjunction  of conditions about the mechanical p a r t   the available machines  and/or the machining plan. items in the right-hand side are called pieces of advice. they are sets of facts representing technological or economic preferences. each piece of advice is weighted according to the importance of i t s s a t i s f a c t i o n . 
　　gari generates a machining plan from a model of the p a r t . this model describes the part in terms of 
e n t i t i e s   such as holes  grooves  notches and faces  and it includes both geometrical and technological data. it a p r i o r i determines the set of potential cuts. indeed  each e n t i t y may require a maximum of two cuts : a roughing cut and a f i n i s h i n g cut. 
　　plan generation proceeds through successive r e f i nements. each i t e r a t i o n produces new assertions that apply to the set of potential cuts  for example : cut a is executed before cut b  cuts c and d are grouped in the same phase  cut e is performed on a grinding or a m i l l i n g machine. these assertions  each of which constraints the solution a l i t t l e more  are selected according to the pieces of advice that are provided by active instances of rules   i . e . rules the left-hand sides of which are currently true  . at any moment  the assertions that have been 
produced so far define a f i n i t e set of plans. indeed  they imply a p a r t i a l order on the set of potential cuts and they specify incompletely the characterist i c s of each cut. however it may happen that some assertions are contradictory and so determine an empty set of plans. 
　　a contradiction implies that some pieces of advice are c o n f l i c t i n g . to solve i t   gari selects and rejects a piece of advice. facts inferred from it are no longer assumed. then  the i t e r a t i v e planning process is resumed. if it later becomes u s e f u l   gari can reconsider the solution to a c o n f l i c t   in order to reapply a piece of advice that has been previously discarded. 
　　when the process of successive refinements is complete  the system has reached a state where each of the pieces of advice provided by a l l the active rules is e i t h e r s a t i s f i e d   or contradicted  due to c o n f l i c t s   by the current set of assertions. then  there may e x i s t rules the left-hand side conditions 
of which are neither s a t i s f i e d nor contradicted. for each p a r t i c u l a r plan p determined by the current assertions  one or several of these rules may become active and may provide pieces of advice that contrad i c t s p. therefore  gari generates hypothetical assertions in order to make these rules d e f i n i t e l y inapplicable. of course  these new assertions may in turn produce new c o n f l i c t s . 
　　assertions are selected and c o n f l i c t s are solved so as to minimize the maximum weight of those pieces of advice which are f i n a l l y contradicted. 
　　the f i n a l set of assertions produced by gari does not usually determine a unique plan. remaining c h o i ces can often be solved in a better way at execution time when the machine u t i l i z a t i o n s are known. 
	iv 	relations to other works 
　　other programs exist in the f i e l d of process planning for mechanical p a r t s / 1 / . most of them a t tempt to automate  low l e v e l   tasks such as p r o v i -
ding a detailed analysis of a p a r t i c u l a r operation  for example : machining a h o l e     computing machining times  e t c . these programs make no use of ai methods and may be regarded as complementary to gari. other programs operate only on parts belonging to a given technological family   t y p i c a l l y turned p a r t s   . at a more fundamental l e v e l   there exists an attempt to apply elements of fuzzy set theory / 1 / . however  
we do not believe that a mathematical formulation of the process planning problem is appropriate. on the other hand  we found no substantial ai work on this problem. 
　　gari has some evident analogies with plan generators such as strips / 1 / . however  both the problem to be solved and the methods used to solve it are d i f f e r e n t with some regards : 
 1  gari knows beforehand the set of p o t e n t i a l actions  cuts  to be executed : the problem is mainly to order them and to specify how they should be executed. 
 1  properly speaking  gari does not have an e x p l i -c i t model of these actions  with preconditions  delete and add l i s t s   l i k e most of the plan generators. in f a c t   some of these model e l e -
	ments e x i s t 	i m p l i c i t l y . 
 1  most of the e x i s t i n g plan generators are general purpose problem-solvers. gari is specialized in the f i e l d of process planning and makes use of an expert knowledge base. 
　　there exists a rather strong r e l a t i o n  at least at the conceptual level  between the pieces of advice applied by gari and the c r i t i c s applied by noah / 1 / . although noah c r i t i c s are general purpose ones  the use of domain specific ones was suggested by sacerdoti. on another hand  gari does not current l y perform h i e r a r c h i c a l planning l i k e noah  but we 
have t h i s type of planning in mind. 
　　there also e x i s t analogies between gari and t r a d i t i o n a l rule-based expert systems / 1 / . the main difference concerns control s t r u c t u r e   which is s u b s t a n t i a l l y more complex in gari than it is in typical diagnosis expert systems l i k e mycin / l l / . 
　　the c o n f l i c t resolution procedure derived i n i t i a l l y from the f a i l u r e processing procedure imple-
mented in tropic / a / . it is now very d i f f e r e n t   p a r t l y due to reasons presented in the introduction of t h i s paper. another major reason is that tropic  l i k e the tms of doyle / 1 /   faced only f a i l u r e s p r o duced by the contradiction of c o n s t r a i n t s   the s a t i s f a c t i o n of which was imperative. in contrast  gari faces c o n f l i c t s between pieces of advice  which may be regarded as weak c o n s t r a i n t s   so that 
it is v a l i d to make compromises between them. 
	v 	part description 
　　the shape of a part is described to gari as a basic volume   e . g . : a p a r a l l e l e p i p e d   a cylinder  
together w i t h a s p e c i f i c a t i o n of instances of 

  e n t i t i e s   of the type used by engineers in shape description : holes  grooves  notches  bores  faces  etc. dimensions and tolerances are input as they appear on the drawing  and thus require no computation in absolute coordinates. technological i n f o r -
mation e x i s t i n g on the drawing   e . g . surface qual i t y   is also given to gari. 
example : 
　　the countersunk hole h of figure 1 is described to gari as follows :  h  type countersunk-hole  
  s t a r t i n g - f r o m fl  
 opening-on f1  
 diameter 1  
 countersink-diameter 1   surface-quality 1   
 distance h f1   countersink-depth h fl 1 	+-1   perpendicularity h f1 	+-1  

figure 1 
　　the notion of e n t i t y is important because it r e f l e c t s a basic concept frequently used by process planning s p e c i a l i s t s . not only does it make part description easier but  	in a d d i t i o n   	the statement of rules is s i m p l i f i e d by the semantic value that is i m p l i c i t l y attached to each type of e n t i t y . 
　　in i t s current implementation  gari can make use of about 	twenty d i f f e r e n t 	types of e n t i t i e s . 
	vi 	machine description 
　　each available machine is described to gari by a name and by p r o p e r t i e s   which are regarded as important by the users. for instance  some properties may be the type of the machine   m i l l i n g machine  d r i l l i n g machine  e t c .     i t s p r e c i s i o n   dimension a t t r i b u t e s such as the distance between axes  e t c . 
example : 
	 cl1 	 type chuck-lathe  	 chuck-diameter 1 . 1     . 
	v i i 	rules 
　　the form of each rule used by gari is the p r o duction : 
conditions ＊＊  pieces of advice 
　　each piece of advice is weighted by an integer between 1 and 1 that represents the importance attached to i t s s a t i s f a c t i o n  1 - most important . it consists of a l i s t of assertions to be added to the current solution when it is applied. 
　　describing a l l the p r i m i t i v e s that are useful for w r i t i n g rules would be f a s t i d i o u s here. we believe it is more appropriate to i l l u s t r a t e them on some sample r u l e s . 
atoms prefixed by &  &&  $  $$  and :::: are variables representing e n t i t i e s   sets of e n t i t i e s   machining cuts  sets of machining cuts and sets of machines respectively. 
- 	  = 	 surface-quality ax  1  ==   1   roughing-cut ax   
if the surface q u a l i t y of an e n t i t y ax is higher  poorer  than 1  then one is advised  with a weight equal to 1  to avoid a roughing cut for ax. 
/note : gari i n t e r p r e t s such a piece of advice by grouping the roughing cut and the f i n i s h i n g cut of ax in the same  operation   set of cuts to be realized simultaneously . this simple t r i c k permits the system to work on a constant set of c u t s . / 
-  geometrical-eonstraint-between ax ay   =1 	  f i n i s h i n g - c u t ax  	  f i n i s h i n g - c u t ay   
==  
 a  roughing-cut ax   roughing-cut ay   if ax and ay are e n t i t i e s linked by an input geometrical constraint and if t h e i r f i n i s h i n g cuts are not executed in the same operation   i . e . simultaneously   then one is advised  1  to execute roughing cuts for both e n t i t i e s . /note : the left-hand side of t h i s rule depends on the plan to be generated./ 
-   =  surface-quality ax  	1  
	    -  extra-thickness ay  	1  
	 supported-by  roughing-cut ay  	ax  
	 1      f i n i s h i n g - c u t ax  	 roughing-cut ay    
if the surface q u a l i t y of an e n t i t y ax is lower  better  than 1  and if the extra-thickness of an e n t i t y &y is greater than 1  and if the part is supported by &x during the roughing cut of &y  then one is advised  1  to perform the f i n i s h i n g cut of ax a f t e r the roughing cut of &y. 
- 	  i s - a 	$x f i n i s h i n g - c u t   
 machine $x grinding-raachine  
  machine $y grinding-machine  
==  
 1    $x $y   
if f i n i s h i n g cut $x is executed on a grinding machine  and if cut $y is executed on another kind of machine t o o l   then one is advised  1  
to perform $x a f t e r $y. 
-   i s - a ax bore    i s - a ay bore  
 coaxial &x &y  
==  
 1  =1   f i n i s h i n g - c u t ax  	  f i n i s h i n g - c u t ay    machine 	  f i n i s h i n g - c u t ax  	lathe   

if &x and &y are two bores linked by a coaxia l i t y constraint  then one is advised  1  to execute their finishing cuts in the same phase   i . e . with the same fixing on the same machine  on a lathe. 
-  is-a &x hole  
 is-a &y hole  
 open-into &x &y  
  open-into &y &x  
==  
 1     roughing-cut &x   roughing-cut &y    if &x is a hole that opens into a hole &y  and if &y does not open into &x  then one is advised  1  to execute the roughing cut of &x after the roughing cut of &y. 
-  is-a &x bore  
    surface-quality &x  1  
  empty  ::::y cyl inder-grinding-machine   =  surface-quality ::-:y   surface-qua 1 i ty &x     
==  
	 1  machine  finishing-cut &x  	::::y   
if the surface quality of a bore &x is lower  better  than 1  and if a cylinder grinding machine able to provide this quality is available  then one is advised  1  to execute the finishing cut of &x on such a machine. 
   a rule instance  that is a rule in which constants have been substituted for variables  is said to be  active  when the conditions in its left-hand side are satisfied by the part model  the machine description and the current set of assertions generated by gari. it is said to be  inapplicable  when 
one of these conditions is contradicted. in a l l other cases  it is said to be  pending . 
   presently  gari runs with a knowledge base containing more than f i f t y rules  most of them providing several pieces of advice. for a part of moderate complexity  it is often the case that more than ten instances of the same rule become active. 
   in the following  the word  rule  w i l l also apply to a rule instance. 
	v i i i 	generating assertions 
   gari iteratively generates assertions by applying pieces of advice of decreasing weight. more precisely  it proceeds according to the two following steps : 
 1  while active rules provide pieces of advice  which were not discarded when solving previous conflicts  gari applies one of these pieces of advice drawn from those with the highest weight. 
 1  while pending rules provide pieces of advice that are not satisfied by the current solution  the system generates hypotheses with the goal of 
making these rules inapplicable. these hypotheses are regarded as implicit pieces of advice of weight 1. if one of them activates a rule 
     providing a piece of advice that is not currently satisfied  then step  i  is executed again. each time an explicit or implicit piece of advice is applied  gari checks that a l l assertions produced so far are consistent. if a contradiction is detected  the procedure for solving it is immediately executed. 
   detecting inconsistencies may require complex deductions that should not be repeated. therefore  after applying each piece of advice  gari performs a l l new deductions it can and records the concluded facts in the assertion data base. 
   suppose for instance that the following four assertions have been generated : 
-  -1  finishing-cut f1   finishing-cut fa   /the finishing cuts of f1 and fa are grouped into the same phase./ 
-  -1  finishing-cut fl  	 finishing-cut f1   
-     finishing-cut f1   finishing-cut fl   /the finishing cut of f1 is executed after the finishing cut of f l . / 
-  =1  finishing-cut f1   finishing-cut fl   /the finishing cuts of f1 and fl are not grouped into the same phase./ 
gari can deduce the following fact  among other conclusions  : 
-     finishing-cut fa   finishing-cut f1   this deduction is based on the meaning attached to the notion of phase  set of cuts to be executed with the same fixing on the same machine . 
then  if the assertion 
-     finishing-cut f1   finishing-cut f1   is generated  a contradiction can immediately be detected. 
   many deductions performed by gari are based on more complex reasoning than the above one. indeed  
there may exist disjunctive assertions such as : 
-  machine  finishing-cut bl  lathe boringmachine  
/the machine used to perform the finishing cut of bl is either a lathe  or a boring-machine./ 
thus  recording conclusions results in substantial time saving. of course  it requires more memory space  but we have implemented a representation imbedding assertions into a network structure. this representation subtantially reduces the necessary space. 
/note ; the meaning attached to such notions as operation  phase  machine  roughing cut  etc.  which is necessary for performing deductions  is procedu-
raly imbedded into the programs of gari. it could also have been represented by the means of inference rules. although the solution we choose is less general  it makes the system more efficient. the complexity of the deductions to be made is often such that we believe that a general purpose solution 
would have been unrealistic./ 
   i f   after applying a piece of advice  no contradiction is detected  a program for activating rules is called. this program determines a l l new active rules given the assertions that were just generated. it records its work into activation trees /1/  that make updating easier when a conflict is processed. the activation program makes use of the recorded deductions. 

	ix 	conflict resolution 
   when a contradiction among assertions is detected  it is immediately processed. basically  the system discards a previously applied piece of advice and updates the current solution accordingly. 
   the implemented procedure is based on a few simple concepts  which subsequent experiments proved to be rather efficient with respect to the problem at hand : 
a  gar i always rejects the piece of advice the 
most recently applied among those which have the minimum weight. 
for example  if the following pieces of advice 
	al 	a1 	a1 	aa 	a1 	a1 
with the following weights 
	1 	1 	1 	1 	1 	1 
were applied successively when a contradiction is detected  gari discards aa. 
if it is the f i r s t contradiction  this piece of advice is necessarily responsable of the contradictioa indeed  assertions are generated according to pieces of advice of decreasing weight. thus  assertions produced by the application of aa are necessary to the activation of those rules which provided a1 and a1. if this was not the case  those rules would have become active before the application of aa. so  a1 and a1 would have been used before aa. 
b  rejecting a piece of advice must be accompa-
nied by updating the current solution. thus  assertions generated when this piece of advice was ap-
plied must be removed. this usually leads to disactivate some rules. if these rules provide pieces of 
advice that were previously applied  the corresponding assertions must be removed in turn. and so on.. 
according to the reasoning of a   gari is led to remove a l l assertions produced after the application 
of the piece of advice which is discarded. in the previous example  this is equivalent to remove the assertions produced by the application of aa  a1 and a1  including the deduced facts . 
c  a contradiction is always due to a conflicting 
combination of pieces of advice. thus  if a new contradiction occurs later  it may become useful to reintroduce a previously rejected piece of advice. however  gari must also solve the f i r s t contradiction in a different manner in order to avoid an i n f i n i t e loop of successive failures. 
for this purpose  the system proceeds as follows : each time it discards a piece of advice x  it generates assertions corresponding to the application of the implicit piece of advice ~x  not x . ~x is then regarded as a real piece of advice. gari gives it a 
weight w equal to the minimum weight of those pieces of advice which were applied after x. this weight is j u s t i f i e d as follows : if we decided to maintain x in the same conditions than it was applied  that is 
without modifying the pieces of advice applied before x   then we would meet again a contradiction the solution of which would  cost  at least the discard of a piece of advice having weight w. in the example of a   this corresponds to replace aa by  a1 with weight 1. 
if the rejected piece of advice x is the most recently applied one  then  x is introduced with 
weight 1. indeed  applying x without modifying previously applied pieces of advice would lead to a definitive contradiction. 
if no new contradiction is detected immediately after having introduced ~x  the program for activating rules is executed. then  the normal process of generating assertions is resumed. 
   the actual procedure implemented in gari is somewhat more complex than it is shown above. however  the extra-complexity currently is based more on intricate tricks  which are evolving quickly  
than on clear principles. 
x a simple example 
   the following example illustrates the inputs and outputs of gari. the part to machine is defined by the drawing of figure 1. it is i n i t i a l l y given as a rough casting and only those surfaces represented by thick lines must be machined. 
   this part was input as a rectangular parallelepiped with holes and notches. we also described to gari a classical set of machines made of a parallel lathe  a milling machine  a d r i l l i n g machine  a 
boring machine  a surface planing machine  a surface grinding machine and a cylinder grinding machine. 
   the solution produced by gari consisted of a set of machining plans characterized by the following properties : 
- the f i r s t phase of each plan consists of executing the finishing cut of fzm on the milling machine  the part being supported by face fzp. 
- then  the part being supported by fzm  the f o l l o -wing three operations should be executed in 
sequence : 
- finishing cut of fzp on the milling machine  
  roughing cuts of notches n1 and n1 on the milling machine  
:: finishing cuts of n1  and n1 on the surface planing machine or on the milling machine. 
no information was provided on how to group these operations into one or several phases. 
- the last phase of each plan is executed on the d r i l l i n g machine  the part being supported by face fzm. it consists of two operations  which can be executed in any order : 
:: finishing cuts of holes h l l   h1  and h1  ;: finishing cuts of a l l other holes. 
   this example is very simple and only five pieces of advice were to be discarded. one recommended a roughing cut of face fzm  because it is the f i r s t entity to be machined. however  it contradicted a 
   more important piece of advice related to the poor surface quality required for fzm. other discarded 

1 

pieces of advice recommended the execution of the roughing and f i n i s h i n g cuts of the notches n1 and n1 with the part being supported by face fzp   i n order to get a better p r e c i s i o n   . but this was not compatible with the available tool orientations of 
the m i l l i n g and surface planing machines. 
	xi 	discussion and perspectives 
　　an implementation of gari w r i t t e n in the maclisp language operates on a hb-1 computer under the mult1cs system. we have run it on i n d u s t r i a l mechan i c a l parts of considerable complexity. the descript i o n of some of them included more than 1 e n t i t i e s  cf. section v .   . almost a l l generated machining plans were acceptable. the system is now being used experimentally by machining planning engineers. 
　　although it may not c l e a r l y appear in this paper  large e f f o r t s were expended for representing machi-
ning expert knowledge. it required a detailed anal y s i s of the machining planning problem  acquired 
by working with engineers. significant e f f o r t s were also devoted to fact deduction and to geometrical modeling. 
　　our own experimentation proved the global adequacy of the methods described here. however  current experimentation by experts is r e s u l t i n g in the rule data base being augmented. a rough evaluation showed 
that the number of rules should grow from the cur-
rent 1 to about 1 rules. this growth already pointed out new problems 
　　a larger number of rules usually results in more c o n f l i c t s among pieces of advice. current c o n f l i c t resolution is based on simple concepts which are l i k e l y to become i n s u f f i c i e n t soon. in f a c t   as we 
already s a i d   we f i r s t implemented a strongly dependency-directed backtracking method  which proved to be inadequate because of the large amount of dependencies to be recorded. this is due to the fact that many assertions may be derived by d i f f e rent inferences. 
	we 	turned to an abstract representation of con-
t r o l where each c o n f l i c t is remembered by applying  x  not the piece of advice that is discarded   to which an appropriate weight is associated. clearly  t h i s is too naive. there should exist a better compromise between this representation and the exhaustive recording of dependencies. we believe that this problem is representative of many complex applicat i o n s   so that it is l i k e l y to become an important topic in al during the next few years. 
　　augmenting the rule data base also showed that many rules have exceptions. at the present time  each exception is represented as another r u l e . for instance  
　　　　　c i   c1  . . . . cn  cn+1 ==  pa' may represent an exception to rule c i   c1  . . . . cn -  pa. 
this representation leads to uninteresting conflicts that may cause a s i g n i f i c a n t waste of time. it also 
makes d i f f i c u l t for the user to get a global view of the r u l e s . we have in mind new methods enabling 
the system to work d i r e c t l y on rules of the form : 
c i   c1  . . .   cn -  pa exception : cn+1 ==  pa1. 
　　another i n t e r e s t i n g perspective concerns h i e r a r chical planning / 1 / . to date  gari has no global view of the plans it generates. in contrast  when human engineers are confronted to a part above a certain level of complexity  they often attempt to 
work f i r s t on a s i m p l i f i e d representation of the p a r t   by eliminating  unimportant  e n t i t i e s . theref o r e   we think about introducing new rules d e s c r i -
bing how to simplify complex p a r t s   so that the system can perform reasoning at various levels of abstraction. 
acknowledgements 
　　this work has been done under contract and in collaboration with adepa  agence nationale pour le developpement de la production automatised . we thank messrs. fernet  merlin  mollon  of adepa  and mr bourdet  of enset  for t h e i r assistance in estab l i s h i n g the knowledge base of gari. 
