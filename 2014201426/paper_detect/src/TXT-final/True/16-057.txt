 	between pu's has to be supported. 

     real time intelligent robots usually consist of more than one processing unit  pu  to ensure parallel operation of several functions. each pu in a robot executes repetitive monitoring and 
controlling operations as well as information exchange to and from other pu's. since timing of each operation is independent of others if the robot operating software supports concurrent process facilities  it would be helpful in robot programming. 
     a self-contained robot  yamabico 1  has been constructed to be a tool for investigating how a mobile robot understands the outer world. 	in order to support software production on the robot  robot 	control system  rcs  has been implemented  including simple job commands and a supervisor 
call  svc  system. the concurrent process monitor is a part of rcs and some of svc's are for these facilities. the monitor adopts a  message sending  method to synchronize execution of two processes and to exchange information between processes and pu's. an example of a concurrent process program   walk along left walls   is given to demonstrate the describing power of our system. 
introduction 
     a human can walk  speak  think  look around  hear and handle things at the same time. like human beings  multifunctional intelligent robots consist of several independent processing units  pu  that work in parallel. 
     even for a robot with multiple pu's  the operation of each pu may be quite complex. an example of concurrent operations in a pu of a robot is shown in figure 1. processes 1 and 1 are semiautonomous ones which monitor outer environments and/or control the effectors. process 1 and 1 are  respectively  input and output processes of this pu. process 1 conditionally wakes up process 1. process 1 is a subprocess of process 1. the total of each process's occupation rate should be less than 1 % of the time of the processor. 
     the concept of concurrent process in multiprocessor systems is described in figure 1. concurrent process facilities are especially useful in multiprocessor systems because communication 
     it is very difficult to program such a robot in conventional sequential programming languages. hierarchical subroutining does not help us for the purpose  	because each subroutine occupies 1% of processor time for a period and what we want is interleaved execution of several tasks. 	several 
mechanisms have been proposed for process synchronization and mutual exclusion of shared resources. semaphore   l     monitor   csp  and rendezvous  are examples. we propose a simple mechanism  sending messages  because' robot programming has the following characteristics: 
 1  a robot system is not a multiuser one. therefore task switching at a definite time slice is not necessary and is even harmful. 
 1  processes need not be dynamically generated nor killed. each process is considered to be a portion of the robot's intelligence and just exists on the robot. some processes are usually in  sleep  state and waked up when needed. 
 1  the necessity for sharing memory or other resources is not high in robot programming. empirical facts tell us that a pu in a robot should be independent of every other as far as 
possible and should send a small amount of condensed information to others. a big amount of data  such as map data or scene data  can be supervised by only one process po. if another process p wants to use that  it just asks a question to po which returns the answer to p. human information processing subsystems do not seem to share any common memory  and each one serially exchanges a small number of signals with each of the others. 
	ii 	hardware and software of yamabico 1 
     we had already reported on the yamabico family of selfcontained mobile robots   
and the most recent member is yamabico 1 which has been constructed to be a tool for investigating how an autonomous machine can understand its two-dimensional environment  see figure 1 . this is an enhanced version of yamabico 1 in the sense that the cpu of the brain has been changed from 1 to 1 and a 1 processor system has been added to the supersonic range finding system 

to be an independent processing unit. 	 
     our ultimate objective with yamabico 1 is to implement a world-understanding intelligence with a map data base. we found that to implement a well organized operating system on the robot is inevitable for our future work  because if the efficiency of software production is low  it is almost impossible to complete software developing projects. the operating system is called robot control system  rcs. the pricipal functions of rcs are as follows  1  . 
 l  to support software production in 1 assembler language. 
    to support simple job control commands. 
 1  to support a rich set of supervisor calls  svc. 
 1  to support concurrent process control using 
svcs.. 
     the size of rcs is about 1k bytes. programs and data in rcs have the structure of a  memory module  in 1s-1 software system  l1   lll. each program produced by os-1 is relocatable and re-
entrant  so that the same text may be used by more than one process. 	rcs and some basic user's programs are implemented on the rom in the selfcontained robot. 	when a user constructs a program  it is loaded from os-1 on the base computersystem to the robot via a communication channel. 
     supervisor calls in rcs are in fact a combination of a software instruction  swi  of 1  a one parameter byte in instruction stream just after the swi instruction  and in some cases one or more input parameters that have been set on registers. 
	1ii 	concurrent process facilities 
     we adopted the  send message  function for process synchronization and mutual exclusion in common resource access. several message sending schemes embedded in high level languages have been proposed  l1  l1   but we propose another one in which the protocol of rcs is very simple and buffers are dynamically controlled by rcs itself. 
     rcs and user programs are composed of processes. each process has a distinct process identifier pid  whose length is one byte. each process takes one of the following three states  see figure 1 : 
: the cpu is executing this process. 
: this process is ready to run  but there is a running one which has a higher priority. 
: this process is waiting for a massage from another one. 
y. kanayama 1 
     each process has a unique working area which contains a process descriptor which is under supervision of the concurrent process monitor  a part of rcs. 
a process can go into the wait state by using 
 wait  svc to free the processor  but can't  wake up by itself from wait state. 	if 	there exists 
more than one active process  the highest priority one is selected to be in running state by the dispatcher routine in rcs. 
　　a process can send a message in a buffer to another process by using a  send  svc. the length of a message should be from 1 to 1. each message buffer is allocated by rcs if requested  and it is freed after the message is processed by the receiver. 
　　the functions stated above are controlled by using several svc's  and their parameters are set on registers a  b  x and y in the microprocessor mc1   for the details see . 
	iv 	concurrent programmi ng 
　　when we write robot software in the rcs environment  all segments of procedures are in the form of processes. when the robot is turned on  after the process descriptors are initialized all processes go into the active state  and almost all of them in turn into the wait state. 
　　tf a process has to be  called   we use a  wake up  job command  instead of using an  execute  command. rcs has no  execute  commands  because in a sense all processes are executed all the time. in sequential programming  subroutines are distributed in time  but in concurrent programming processes are distributed in space. 
　　in our programming  a task is divided into one main process and several subprocesses. for example  in figure 1  p is a main process and  p1  p-1 and p1 are subprocesses. when p is to direct p1 to perform a subtask  p just send a message m to p1. that message m is called an input message for p1  and an output message for p. pis called a parent of p1  and p1 a child of p. a parent always knows its chiliren's process id  pid   but a child does not know or need not know its parent's name beforehand. when a child is called  the parent's pid is given on register a  which can be kept for later use. 
     input messages are used to hand the 	parent's intention to the child. 	some of them are  start    stop  and  change parameter  messages. 	the first byte of each message is called the key of 	the 
message  which classifies its purpose. 
	v 	example 
to demonstrate how the concurrent process 

1 y. kanayama 
facilities work  we will show a simple user's 
process called  walk along left walls   abbreviated walw. this process makes yamabico 1 walk in a building as though it were following a wall with its  left hand   and is useful for going out of a maze  see figure    . 
 l  input messages: 
	  1   	start 
	  1   	stop 
	  1 t   	designate cycle time 
	    	finished from cd 

     this process is more sophisticated than it looks. we divide it into one main process walw  two child processes flw and mntf and one grandchild process cd. the whole structure is the same as figure 1. here we will describe the four processes. 
a. 	walk along left walls  walw  process 
this is the main process. 
 l  input messages: 
  1   start from rcs etc   1   stop from rcs etc 
	  1 wwl1 wwll ss 	section from flw 
 1  output messages: 
  1     1     1   
  l   start start 
stop stop to flw to mntf to flw to mntf   1 wl   change distance to flw  1  functions: 
a  at first  the robot looks around to find the nearest wall. if there are no walls  it stops. 
b  makes a turn so that it looks at the wall on the left side. 
c  begins to walk straight. 
d  wakes up flw and mntf. 
e  the following tasks el   e1 are selec-tively repeated. el  if this process receives a stop message  quits walking and go to wait state. 
e1  if this process accepts an abnormal message from flw or mntf  quits walking and go to wait state. e1  if the left wall disappears  continue to go another 1cm  turn left and again walk straight. 
ek  if there is a wall to the front and there is no wall to the right  turn right and walk straight again. 
e1  if there are walls to the front and to the right  make the robot stop  turn 1 and begin to walk straight. 
     the marks e1  e1 and e1 in figure 1 correspond to the tasks named above. 
b 	follow left walls  flw  process 
     this process can be called by any process and works under any parent  and is one of the  intrinsic  or  basic  processes of rcs. this has a child process cd. when flw is called by walw  it cooperates with the parent and monitors the left and front walls continuously. the robot tries to be on an imaginary reference line.  see figure t  
 1  output messages 
 1 wwl1 wwll ss  	tell the parent about the change of walls 
	 1 d  	to cd 
 1  function: 
a  at first if there is a flat wall  go straight and define the reference line  initialize wwl1 . 
b  the following tasks are selectively re-peated. 
bl  if the distance to the left wall suddenly changes  send a message to the parent and update wwl1. 
b1  if the left wall disappears  send a message to the parent. 
b1  if a  change parameter  message comes in  change the parameter. 
b1  otherwise  if the expected position ahead is- significantly away from the reference line  call cd to change the direction. 
c. 	monitor front  mf  process 
     this is a simple process to monitor any obstacle in front  and send a warning to the parent. 
 1  input messages: 
	  1   	start 
	  1   	stop 
  1 ssf   designate minimum distance  the default value=1cm  
 1  output messages 
	  1 ssf   	stationary obstacle found 
	  1 ssf   	moving obstacle found 
 1  function: 
     monitor the distance to the front all the time and determine if the object is stationary or not; if the distance is less than the given value  send a message to the parent. that discriminating facility is a part of the sonic range finding system of yamabico . 
d. 	change direction  cd  process 
     this process is called when yamabico 1 is walking and changes its direction by a given value. the function of the  turn  command of the yamabico locomotion system is fully utilized . 
 1  input messages: 
	 1 d  	start to change the direction by d. 
the value may be negative. 
	  1   	stop 
 1  output messages: 
	    	finished  to the parent  null mes-
sage  

 1  function: 
     terminate the currently executing command in the locomotion system and send two motion commands so that the heading direction is changed by d. ask the leg to send a message as soon as the locus becomes straight again; the process then sends a  finished  message to the parent. this process is running when yamabico is on a curve between a and c  see figure 1 . 
acknowledgement 
     the author thanks professors s. yuta of university of tsukuba and j. iijima of the university of electro-communications for their research and development effort in the basic yamabico 1 system. 
