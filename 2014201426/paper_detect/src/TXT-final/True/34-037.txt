inferring lisp procrams from examples 
david e shaw 
william r. swartout 
c. cordell green 
artificial intelligence laboratory 
department of computer science 
stanford university 
stanford  california 

a b s t r a c t 
a program is described which infers certain recursive lisp programs from single example input-output pairs synthesized programs may recur in more than one argument  and may involve the synthesis of auxiliary functions an actual user session with the program  called e x a m p l e   is presented  and the operation 
of the program and its important heuristics are outlined. 
acknowledgements 
t h e authors wish to thank richard waldinger and doug lenat for the fruits of several valuable discussions held early in the course of this work we are also grateful for the editorial assistance of avra cohn  which made possible the preparation of this draft this research was supported m part by the advanced research projects agency under contract d a h c 1-c-cm1 
and in part by the state of california through a california state 
graduate fellowship 
section i - introduction 
a common aspect of many definitions of automatic programming is the goal of facilitating program specification in this paper  we consider the specification of programs by examples. to describe a particular program by example  the user supplies only a sample 
input and output the computer then infers a plausible candidate program 
t h e inductive inference of programs from input-output examples has also been explored by licklider  and hardy   1  more generally  this inference task is related to the problems of program inference from traces  biermann. 1  and grammatical inference  feldman  crps. horning and reder  1  horning  1; biermann and feldman. 1  blum and blum  1  
this paper describes a program  called example  that infers recursive lisp functions from single input-output pairs. 	given 

e x a m p l e is able to infer a class of functions which perform certain list-to list transformations. in particular  each recursive function in this class steps through the input list from left to right  producing part of the output at each step consider  for example  the pair 

t h e output is produced in three steps a recursive subfunction produces the sublists i  1  and 1 in successive steps and the main function appends them together 
let us briefly outline the way this function is synthesized first. e x a m p l e determines which part of the output is produced in the first step of recursion in the above example  sublist i is produced in the the first step it is assumed that this subhst is 
produced 	by 	a 	subfunction 	e x a m p l e 	thus 	attempts 	to 
synthesize the subfunction  generating a new input-output specification which describes this subgoal the arguments a and  b c d  are chosen as input the subfunction specified by 

may 	now 	be synthesized 	by calling the e x a m p l e program 
recursively returning to the synthesis of the main function  we find three remaining steps 1  the recursive call of the mam function is foimrd  1  the resulting code is embedded in either a c o n s or a p p e n d expression so as to properly conjoin the 
output from each recursive step  and 1  terminating conditions are selected 
we will say that an output has been realized when a function has 
been synthesized which satisfies the given input-output specification unfoitunately  not all syntheses which simply realize the output will be found acceptable to the user to see why. we consider a trivial synthesis scheme which can realize any 
output 	by 	breaking 	the 	input 	arguments 	down 	into 	their 
constituent atoms and recombining these atoms mechanically to form the desired output using this scheme  the function specified by 

may be synthesized trivially as 

1 


1 


a number of other input-output pairs are included in the appendix  along with the corresponding programs synthesized by e x a m p l e it should be noted that e x a m p l e can not 
synthesize functions involving counting operations or numerical comparisons  a function that sorts a list of integers by value  for example  further  all termination checks are null tests which can return only the value nil. thus  for example  the function 
which returns the last element of a list  
        a b c d  -  d can not be synthesized  since an equality test and the ability to return a non-nil atom would be required. a function which 
finds the first ha!j of a list  which might be specified by 

also falls outside the class of functions synthesized by example. 
we have tried only to convey a feeling for some of the programs 
still 	beyond 	the 	reach 	of 	e x a m p l e 	a 	more 	precise 
characterization of the class of functions attacked by the current 
program is found in sections 1 and 1. 
s e c t i o n 1 - h o w it works: an overview 
t h e program first determines whether a simple nonrecursive realization of the target output is possible the programming 
constructs available for nonrecursive synthesis will be described in section 1. 
if the output can not be realized using available nonrecursive constructs  a synthesis involving recursive constructs is attempted. t h e recursive lisp functions synthesized by e x a m p l e produce some part of the output during the original top-level evaluation and the remainder during subsequent recursive calls. considering the specification 

for example  we see that the initial value segment 

is produced during the first recursive step  while the remainder of the output. 
b b b c c c   
is produced by subsequent recursive calls we will refer to the initially produced output segment as the head of the output. the remaining segment will be called the recurrate 
after the dividing point between head and recurrate is found  
e x a m p l e attempts to synthesize the code that produces the head in the same way it attempted the original  user-specified  goal. this subgoal is again specified with an input-output pair  with the head appearing as the output: 

 we ignore for now the question of specifying the input part of the head realization subgoal  
in order to distinguish the head from the recurrate  e x a m p l e divides the output into equal-length groups of adjacent elements by way of illustration  we consider a simple variant of comb1: 

e x a m p l e divides the output into groups of two elements  as indicated above 
successive groups are then compared using a template-matching procedure this procedure searches for the first major group 
which is substantially different in some way from its predecessors  conjecturing a head-recurrate separation just before this change comparing successive groups  e x a m p l e discovers a major change aftei the third group  and postulates the following 
separation 

in the case of some input-output pairs  the serial comparison procedure must in fact proceed backward through the output list structure. simple heuristics are used to select a scanning direction for the output this direction determination is used in several later stages of synthesis the procedures for grouping  matching  and detet mining scanning direction are discussed in section 1. 
e x a m p l e is now able to reduce the synthesis task to several simpler subgoals the head and recurrate must each be realized  and the resulting blocks of code combined in an appropriate way. along with code for terminating conditions in order to specify the head-trealization subgoal in input-output form  a new set of 
input 	arguments 	must 	be 	formulated 	arguments 	used 	in 
specifying the subtask must again be carefully chosen to avoid the possibility of implausible synthesis. still  some of the arguments which form the input of the parent goal may be broken down in specifying input for the subgoal. for example  the initial goal of 
realizing 
  a b a c a d b c b d c d   from  a b c d  
spawns the subgoal of realizing 

t h e heuristics used to break down parent input arguments are discussed in section 1 

1 

once new arguments have been generated  e x a m p l e attacks 
the head-realization subtask exactly as it did the original problem. if head realization itself requires a recursive synthesis  of course  a separate auxiliary junction must be synthesized in this case  a call to the auxiliary function  with appropriate arguments  appears as the head realization code 
t h e problems of recurrate realization are different e x a m p l e synthesizes only recursive calls whose arguments are the tails  cdr  c d d r   etc.  of the original lambda-varubles. the number of cdrs within which the original arguments are embedded is postulated using certain clues involving the propagation of argument elements to the recurrate. 
if the head and recurrate are successfully realized  they are conjoined using either cons or a ppend if the original output was interpreted in the forward direction  the head 
realization appears as the first argument of the joining function  while in the case of backward scanning  the recurrate realization 
appears first the resulting body of code is embedded in a c o n d i t i o n a l statement  following a set of termination checks. 
each terminaiiun form involves a null-check on some tail of a current argument  with the value n i l returned if the result is 
positive 
	s e c t i o n 1 	h o w it works: t h e w h o l e story 
1 	n o n r e c u r s 1 v e synthesis 
in the current version of e x a m p l e   nonrecursive synthesis is allowed only if the output can be realized simply from the current 
input arguments without decomposing those arguments no constructs which break down the arguments  such as car or c d r   for example  are considered at this stage the effect of this limitation is to prevent the synthesis of an implausible function  which might be generated by breaking down each argument into its primitive components and combining them mechanically to 
realize the output 
at present  e x a m p l e allows nonrecursive synthesis only if the output can be realized with a composition of the functions cons and l i s t over the input arguments. more precisely  the class of functions which may be synthesized without recursion is the union of 

because of these restrictions on nonrecursive synthesis  most userspecified functions of interest are not synthesized at this stage. as we wjll see  the importnt function of nonrecursive synthesis is the 

here  each  argrail  represents some composition of the function 
c d r over some input argument 	 join-function  may be either 
c o n s or a p p e n d 	the  head-realmng-code  is either some 
nonrecursively synthesized expression or a call to an auxiliary function  function-name a ux 1  with appropriate arguments. 
t h e form of the rectnsive argument list will be discussed later finally  we note that the order of the  head realizing-code  and the recursive call may be interchanged 
1 	s e g m e n t i n g i n t o h e a d a n d recurrate 
recursive realization requires correct identification of the head and recurrate of the output we recall that a template-matching procedure is used to locate the first major change in successive groups of elements. in the present version of e x a m p l e   each group initially consists of a single element if such a grouping does not allow head-recurrate separation in the template-matching stage  the size of the groups ts increased 
we 	now 	examine the 	template-matching procedure in detail. 
e x a m p l e loims a template by comparing the first two groups appearing in the output. consider c o m b 1 

in this case  the two-element groups  a b  and  a c  are compared to form a template  a x . where x stands for the 
differing elements which appear in the two instances.  the first head-recurrate segmentation postulated by e x a m p l e is in fact an inaccurate guess based on the use of single-element groups  the correct segmentation discussed here is found upon subsequent scanning with two-element groups.  
in general  all atoms appearing in corresponding positions are compared for equality if the two atoms are the same  that atom appears in the template otherwise  a unique variable x  representing the unequal atoms  appears a description of the relationship between the two differing atoms is associated with x thus  the c o m b 1 template indicates that c  the second instance of x in the output  is the immediate successor in the input list of b. the first instance a template for the function 

1 analyzed with a group size of one. is comprised of a single variable and the associated information that the second instance of this variable is the double-successor of the first 
t h e template is then used to predict the third group of elements  assuming the same relationship between the second and third groups as was observed between the first and second. to predict the third group appearing in comb1  for example  the successor of c is instantiated for the template variable x. the resulting instantiated template   a d   in fact agrees with the third group 
appearing in the output. this template  though  does not correctly predict the fourth group from the third e x a m p l e 
thus correctly divides the head from the recurrate after the third group for somp function specifications  no major change is detected using these heunstics. in this case  the first group of elements is taken to be the head  and the remaining groups the 
recurrate. 	the two initial  one element  groups of 
f.  a b c d  -   f axf bxf cxf d  . 
for example  yield the template  f x   which allows prediction of all groups separation after  f a  is thus assumed. while the head-recurrate separation methods employed by e x a m p l e work reasonably well  it must be emphasized that tney are not universally effective a larger class of functions might be 
synthesized using better heuristics for this critical decision 
it 	was noted 	in section 1 that the output must sometimes be 
scanned backward  from right to left  in order to effect the proper 
head-recurrate 	separation 	e x a m p l e 	chooses 	a 	scanning 
direction by noting whether elements from the front of the input list propagate toward the front or the back of the output if they tend to appear in the end of the output  e x a m p l e assumes that the head will be found at the end of the output list. in this case  a reverse scanning direction is used to distinguish the head and recurrate. in section 1  we will see other effects of the decision to 
scan backward 
1 	s u b g o a l 	realizing t h e head 
let us review the work e x a m p l e has done so far. a scanning direction has been chosen heuristically and noted for later reference. adjacent groups of elements have been scanned in the 
chosen 	direction 	and 	compared 	using 	a 	template-matching 
procedure. by locating the site of the first major change  that part of the output generated during the first step of recursion  the head  has been distinguished from the part produced during all successive recursive calls  the recurrate  if no major change was apparent  a default separation point has been assumed finally  those atoms appearing only in the head have been distinguished. 
e x a m p l e must 	now attempt to synthesize code which will 
generate the head when evaluated with the arguments of the toplevel function call we implicitly assume that evaluations of this same code during all subsequent recursive calls will produce the recurrate. as mentioned before  the head realization subgoal is specified with an input-output pan  just as the user specified the original task the target output  of couise  is the head itself selection of an appropriate input argument list for the head 
realization subgoal is less trivial 
in certain cases  the original input list is a reasonable choice of input for the subgoal for example  consider the following inputoutput pair 

here the head is exactly the same as the original input argument   a b c d  a trivial nonrecursive realization of the head thus results when 

is specified as the subgoal for a first attempt at head realization  e x a m p l e always tries this first method  in which the input for the subgoal is the same as the original input for some problems  though  the original arguments must be broken down in some manner in order to realize the head in this case  e x a m p l e fails to accomplish the first subgoal  and creates a new subgoal whose input arguments are subparts of the original arguments to illustrate  the first subgoal generated in trying to 
realize 	the 	head 	of 	c o m b 1 it to synthesize a subfunction 
satisfying the input-output relation 

this output  however  can not be realized from the input  a b c d   ex a m p l e thus generates the new subgoal 

which will eventually result in the successful synthesis of a twoargument auxiliary function 
ex a m p l e 	generates 	this 	new 	subgoal 	by 	decomposing 	the 
original input    a b c d   according to a simple heuristic  first  we note that certain atoms from the input list may appear in the 
head but not in the recurrate these atoms  called head diitinguishers  appear as arguments for the head lealization subgoal. here a is a head distinguishes since it appears in the head   a b a c a d   but not m the recurrate   b c b d c d   a is thus chosen as an argument second  the remainder of the original argument after removing the head distinguisher is included unless none of its atoms are found in the head we remark in passing that if e x a m p l e broke down the original argument completely into its constituent atoms  head realization would always succeed  nonrecursively  a complete decomposition of this sort  though  is in general dangerous  admitting the possibility of implausible synthesis this danger is the motivation for selective input decomposition 
before continuing our discussion of the synthesis of the main function c o m b1  let us summarize the synthesis of its subf unction the original goal of synthesizing a function 
specified by 

spawns the head realization subgoal 

template mauhnig with single-element groups separates the head of this subgcul output   a b   from the recurrate    a c a d   
e x a m p l e thrn decomposes the argument  b c d  into b and  c d   discarding  c d   whose atoms fail to appear in the head. 

1 
	e x a m p l e 	adjusts 	the 
the number of cdrs involved in 
thus comb1  which is synthesized using 

which each reursive argument should be embedded this number is assumed equal to the number of atoms from the 
beginning of that argument which fail to appear in the recurrate unfortunately  this method fails for many input-output pairs in which the atoms of the input do not all propagate to the output. certain weak heuristics are used to allow synthesis of some such functions  but the problem is not entirely solved 
once the recursive call has been synthesized  e x a m p l e can 
check its decision about head-recurrate segmentation by querying the user in the case of the above function foo  for example  
the user is asked if the proposed recursive call in fact realizes the 
recurrate 
        does foo f   b c d   -  f b  f c  f d      the user specifipd identifiers are substituted for the formal variables used in the actual recursive call  a negative response is taken as evidence of faulty segmentation of head and recurrate  often leading to a revised conjecture regarding scanning group 
size 
1 	c o n j o i n i n g t h e h e a d a n d recurrate 
now that the head and recurrate have been realized  e x a m p l e conjoins the two resulting pieces of code using either cons or a p p e n d . if the output was analyzed using a forward scanning 
direction  the head realizing code appears as the first argument of the joining funrtion  since the head must have been found at the beginning of the output if reverse scanning was used  the head must be at the end of the output  and the head realization appears as the second argument 
several factors are considered in deciding whether cons or a p p e n d should be used tor conjunction in the case of backward scanning  a p p e n d is always chosen the joining function will also be a p p e n d whenever the head contains more than one element in accoidance with usual human programming it must be acknowledged that this heuristic yields incorrect terminating conditions for some functions which are o:herwise within the target class of e x a m p l e 
t h e resulting block of code is embedded in a function definition call with the user specified name and list of lambda variables. t h e resulting function is then defined for system use and 
evaluated with the user-specified input list 	if this evaluation in fact yields the user-specified output  the function is presented to 
the user for verification and further user testing 
s e c t i o n b - conclusion 
t h e e x a m p l e program was written in interlisp by david 
shaw 	and 	was 	revised 	by 	william swat tout. 	a 	number of 
e x a m p l e sessions have been observed during the past year  
but no formal study has yet been conducted of the programs users actually specify or of the way in which such programs are 
specified. it seems to us that such further study of actual program specification would be valuable at this point 
t h e exact role input-output examples will play in facilitating program specification is not yet clear we believe  however  that the capacity for specification by examples may be a useful component of future automatic programming systems 
we conclude with several other lisp functions synthesized by the 
e x a m p l e program 	the shorthand notation 
        function name   input list  -   output  will represent the user specification of a function  function name  
which 	returns 	the 	value 	 output  	when evaluated 	with the 
arguments on * input list . 


1 

