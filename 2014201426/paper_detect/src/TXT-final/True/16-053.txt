 
　　unexpected events can cause the failure of apparently  correct  robot programs. the interaction with the real world and its unpredictability make the problem of error recovery in robot programming specially important. the goal of the paper is to present a general framework in which the activity of error recovery can be automated. this is accomplished by introducing a monitor program which identifies the appearance of any error and attempt to correct that error. the correction is done using a knowledge base where the knowledge that the user has about error identification and correction is expressed in symbolic form. an inference mechanism allows extension of this knowledge base for use in complex and unanticipated situations. 
i introduction 
　　robots are being used in a wide variety of applications. to operate successfully they should be able to handle unexpected events. a more intelligent perception of the robot environment is needed the capability of making decisions in answer to external conditions should be improved. this should also result in greater safety for the operating personnel and the equipment installed in the vicinity of the robot 
with current robot programming languages  bonner  
1   one can recover from failures caused by arm errors only by using ad hoc error recovery procedures. in writing and debugging manipulation programs  users must depend on their experience  intuition  and common sense to decide what errors to watch for. 
　　errors in robot programs are difficult to identify because of their unpredictability. the same program can work well hundred of times and then stop because of a minimal variation in size of one part or because of a little spot of oil on it. moreover since the programming is done on-line  gini  1  the robot must be used for large amounts of time to check new programs before they can be reasonably used in production. 
　　the problem of recovering after an error has not yet been fully addressed. to do this the system needs to have a knowledge of how the world in which the robot is operating is structured  gini  1 . 
　　the problem of dealing with errors has been approached in various ways and with different objectives in plan generation research. systems such as noah 
 sacerdoti  1   and hacker  sussman  1 . tried to 
partial support for this work is gratefully acknowledged to the microelectronic and information sciences center at the university of minnesota and to the italian national council of research. 
solve errors arising during the planning. the tropic system  latombc  1  has a similar mechanism for failure correction. these approaches have not been applied to real robot tasks. 
　　the system more close to our solution is presented in  srinivas  1 . he has designed a practical system for analysing failures and their causes  and for replanning the recovery activity. its main limitation derives from the extensive use of plan formation as the basis for constructing robot programs and on the choice of checking only the preconditions of the actions. in this way an error may be discovered later than when it appeared. 
　　the problem of error recovery plays an important role in industrial robotics the possibility of using robots unattended  such as during the night  requires at least a reasonable solution of the problem. strategies to fulfill safety requirements in the case of failures of the robot are important too. 
// a method for automatic error recovery 
　　this paper presents a general framework for automating the error recovery activity this is accomplished by an intelligent monitoring system running concurrently with the robot program every time an error arises the appropriate recovery procedure is detected using information extracted from a knowledge base  stefik  1   the knowledge base contains rules about correction activities and about interpretation of sensor data. 
　　to detect what happened and to identify the recovery action the system .should know the effect on the world of each of the instructions of the program. some form of dynamic model of the robot environment and the ability of interpreting information gathered by sensors are also needed  rosen  1  the general scheme is 
what happened   
 sensor 
	error 	interpretation 
	detected 	rules  
  
program execution 
	recovery 	what to do   
	actions 	 recovery 
rules  

1 m. gini and g. gini 
　　we examine in more detail the recovery method. we start by defining the dynamic model of the world  and the semantics of the robot programming language. then we present the organization of the knowledge base. 
a. dynamic model 
　　an initial model of the world is constructed from the declarations present in the program  and data from sensors. 
　　for each instruction let initialmodel be the model valid before the execution of the instruction. 
　　expectedmodel is the model expected to be valid after the execution of the same instruction it is obtained from the initialmodel and the postconditions of the instruction. 
　　expectedmodel can contain conditional expressions since postconditions can be expressed with conditional parts. for instance the instruction that  closes the hand can be used either to grab an object or to close the hand. the sensors in the finger can identify the situation at run time 
let currentmodel be the currently valid model. 
　　it should be obvious that if there are no errors before executing an instruction currentmodel is the same as initialmodel if there are no errors after executing the instruction currentmodel is the same as expectedmodel. 
1. example 
　　at the beginning of the program the initialmodel can be: 
arm = 	parkposition handopening 	= x if 	touchsensortriggered 
then objectheld  objectsize = handopening  
　　　objectpickedupat = arm else clearhand. 
b. semantics 
　　we describe the semantics of the language in a strips-like form  fikes  1 . 
　　each instruction has associated a list of preconditions and postconditions. the preconditions express what should be true before executing the instruction  the postconditions express how to modify the current model after the execution of the action. they are expressed in term of additions  add   deletions  del    and updating  upd  to the model. 
1. examples 
　　we consider a small subset of ai. instructions  binford  1 . 
move arm to frame prec : 
post: upd: arm=frame  
open hand to d prec : 
post: if objectheld then add: clearhand 
del: objectheld  
objectsize = x. 
objectpickedupat = y 
upd: opening = d 
close hand to d prec: clearhand post: upd: handopening = d 
if touchsensortriggered then add: objectheld. 
objectsize = d  
objectpickedupat = arm 
del: clearhand 
　　note that we consider rigid objects so that after open and before close the hand does not hold anything. 
using postconditions the expectedmodel and the 
currentmodel can be determined for instance  after a 
move instruction the expectedmodel is computed by updating the arm position in the initialmodel  while the currentmodel is computed by reading the actual arm position. 
c. knowledge base 
　　we use a knowledge base containing two types of rules  sensor rules  used to interpret  the sensor data   and recovery rules  used to produce the recovery  
sensor rules have the form 
if d  . then c 
where the d's express what we want to know from sensors and c is their  logical  interpretation this organization allows a certain independence between the raw 
data from sensors and their interpretation 
the recovery rules have the form to obtain g  .. when s  . do r  .. 
where the g's express what we want to achieve  the s's express what we know is true  and the r's are recovery actions. 
1. examples sensorrules: 
if 	fingertouchsensortriggered 
then objectheld 
if not fingertouchsensortriggered then clearhand 
recoveryrules: 
if the object is lost during the movement we can recover with 
to obtain objectheld 
when clearhand do compute nextpickup; 
grabobject nextpickup objectsize  
knowing that 
if objectpickedupat = x 
then nextpickup = x + d 
if the arm is not in the right place we can use the rules 
to obtain arm=frame1 
	when 	arm=framel  di st  arm  frame1   1 
	do 	move arm to frame1 directly 
to obtain arrn=frame1 
when arm=framel  di st   arm  frame1   . 1 do move arm to frame1 
if the hand is too closed 
to obtain handopening = objectsize when handopening   objectsize do open hand to objectsize 
1 recovery procedure 
　　the recovery procedure is activated by the identification of an error. as we said before  an error is identified every time currentmodel at the end of the execution of any instruction is different from expectedmodel knowing the situation in which we are and where we want to be the appropriate error recovery rules can be fired. 
　　we control both the preconditions before executing any instruction and the postconditions at the end. the first check should not be needed since we assume that the program does not have logic errors we consider it useful as a protective measure 
　　after the recovery we resume the execution of the original program at the point where it was suspended  the problem of deciding whether to restart it at a different point has not yet been approached 
1 concluding remakks 
　　although the examples shown are limited ve think to have supported our claim that we have presented a general framework for error recovery in robot programs research is under way to write more rules  to introduce strategies in recovery  and to extend our work to complete programming languages. a preliminary mplementation is under development 
in our opinion the strong points of our method are: 
* it is based on the use of a real robot programming language  not a planning system intended for purposes other than manipulator control; 
* the reasoning process used in error recovery is based on information provided by sensors. any sensor can be incorporated  provided that interpretation rules are available; 
* the knowledge base can be easily extended lo cover more errors and more recovery procedures; 
* the language used to program the robot could be changed  provided that its semantics is supplied in the same form; 
* it can be used to recover errors not only for robots but also for more complex automation systems  
