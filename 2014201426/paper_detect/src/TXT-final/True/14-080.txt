 
　　　many learning-by-example problems can be viewed as i n f e r i n g structured non recursive procedures from sets of t h e i r traces knowing the basic functions and predicates  used to write them. the on-line system pape does t h i s as follows  an example  data   trace  is given. pape f i r s t checks whether the already learned procedure gives the same trace w i t h the given input data. if not  the trace is t r a n s formed into a procedure body   i n 1   t p   time  where t it is the length of the trace  and  p an integer depending upon the procedure and the basic functions and predicates   and then merges t h i s body with the actual one to get the new procedure body. 
	1/ 	introduction 
　　　many problems of learning from examples   e . g . : drawing objects on a screen  v 1    complex actions of an i n d u s t r i a l robot  commands of a computer system  queries of a database...  can be viewed as i n f e r i n g non-recursive procedures from sets of t h e i r traces knowing the functions and the predicates used to w r i t e them. 
　　　these applications suggest that we can r e s t r i c t ourselves to non-recursive procedures w r i t t e n in pascal- l i k e language in which : 
　　　- there is no composition of functions in an assignment and  of a function and a predicate  of a loop  or  of a c o n d i t i o n a l   . 
　　　- a l l constants are introduced by an assignment  x := constant . 
　　　- the sets of i d e n t i f i e r s of v a r i a b l e s   and  of formal parameters of the procedures are d i s j o i n t . 
　　　- a l l procedures to synthesize are supposed s t r u c t u r e d . 
1/ the system pape 
　　　we describe here a program named pape   v 1    which  l i k e biermann and krishnaswamy's program autoprogrammer  bik    is an on-line system l e a r ning a non-recursive procedure  a structured one for pape  from a set of t h i s traces  while siklossy and sykes' program syn  sis  infers a recursive procedure from a single trace. but  unlike autoprogrammer which requires from i t s programmer symbolic traces  sequences of assignments  and  the predicates for loops and conditionals at the places they are used  pape  l i k e syn  works automatically once the set of traces and the basic functions and predicates have been given. 
　　　an example e for pape is a 1-tuples e =  n  d  r  t  where n is the name of the procedure to synthesize  d the input data  actual parameters   r the output data  and  t the trace  a set of pairs of a variable and i t s value  	free of e r r o r s . 
a l l examples are supposed c o r r e c t . 
　　　pape is mainly composed of two functions al and a1. 
	it works as follows 	: 
an example e is proposed. 
　　　- i f e is the f i r s t one  pape creates a procedure-head with i d e n t i f i e r n and al  e  as a body. 
　　　- i f n o t   pape s t a r t s with an execution of a c a l l of n with d as actual parameter. if the trace obtained matches t  then pape stops  awaiting for some other example if any . otherwise the p a r t i a l body a1  e  is compared and merged with the actual body of n by a1. 
　　　al has a worst-case time complexity in 1 t   where t is the length of the trace t  and  p is an integer depending upon the procedure to synthesize  and  the sets of functions  and  of predicates. 
　　　in the following the behaviour of pape w i l l be described on an example : 
　　　suppose we wish to learn the procedure multiply which performs the m u l t i p l i c a t i o n of two positive integers using f -        a d d i t i o n     pred 
 predecessor f u n c t i o n     /1   i n t e g r a l d i v i s i o n by 1   * 1   m u l t i p l i c a t i o n by 1  j and p = {= 1  even j respectively as sets of functions  and  of predicates . 

1 

1 

1/ 