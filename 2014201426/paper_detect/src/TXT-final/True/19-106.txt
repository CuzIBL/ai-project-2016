 
successful machine diagnosis consists not only of sound diagnostic reasoning  but also the selection of appropriate repairs  sequencing the repairs correctly  interactively validating the success of each repair  and performing follow-on diagnosis in case of repair failure. we discuss some of the issues involved in formulating a repair strategy for an expert system  review some aspects of expert human behavior with respect to repair strategy in a complex domain  and finally describe an implementation of a repair strategy in the test diagnostic shell. 
1. introduction 
　diagnostic applications remain the most heavily explored area of expert systems technology  but little attention has been given to the selection  sequencing and interactive verification of repairs. these aspects of diagnostic behavior  collectively referred to in this paper as repair strategy  are critical to the success of a realworld machine diagnosis expert system. 
　typically  repair strategy is seen as a straightforward selection keyed to a successful diagnostic conclusion 
  bennett 1 bylander 1  fink 1  ali 1  maletz 1  strandberg 1  and others . in a few cases  supplementary repair or treatment modules have been developed to provide customized or special case recommendations  clancey 1  kahn 1 . however  apart from possibly  hofmann 1   none of this work has attempted to formulate an approach which permits the degree of integration of diagnosis and repair tasks required to effectively troubleshoot faults in complex machines. 
　test  troubleshooting expert system tool   as reported in this paper  recognizes a larger class of integration issues than earlier work  and provides a representation more easily customized to differences in repair strategy  even within the same application domain. test is an application independent diagnostic problem-solver which operates on domain-specific knowledge bases. work on test began late in 1  and there are now several applications in progress  the largest being ford motor company's service bay diagnostic system  tedesco 1 . other applications include factory floor machine diagnosis  online monitoring of generator equipment  and computer performance tuning. test has been implemented in common lisp using knowledge craft tm   pepper 1a   and a c version is under development. 
　the next section describes ways in which human expert diagnosticians integrate diagnostic reasoning and repair strategy. the remaining two sections describe test's repair strategy  and how it models aspects of this behavior. 
1. what makes repair hard 
　while it is easy to imagine a prototypical diagnostic system that identifies a single cause for observed symptoms  and recommends the corresponding  inevitably successful repair  this is an ideal but unlikely case. more often  technicians make repairs during the diagnostic process itself  and are prepared to  1  select from among competing repair alternatives   1  delay making certain repairs until deeper causes are identified  and  1  continue with the diagnosis if the repair does not succeed. 
　selection and sequencing. the selection of a repair for a single failed component depends on several factors: the cost of the repair  its degree of  goodness   and the availability of required tools and parts. but sometimes a diagnosis results in several failed components requiring repair  and sequencing becomes an issue. for example  a car's failure to start may be caused by a dead battery  which requires either recharging or replacement of the battery. however the diagnosis must proceed further to find the cause of the dead battery  possibly discovering a fault in the charging system. this second fault also has repairs associated with it. in such a case  the technician must determine the proper sequencing of repairs  and handle situations where performing one repair makes another one unnecessary. further  repairs change the state of the uut  unit under test   invalidating some or all evidence gained prior to the repair and complicating the follow-up diagnosis that must be performed if any repairs fail. 
　handling failed repairs. repairs fail for three reasons. first  the selected repair may be performed incorrectly because of errors in technique  use of the wrong replacement part  or use of a correct part which turns out to be defective. second  the wrong repair may be selected because of an error in the technician's domain knowledge  or faulty evidence obtained during 
	pepper and kahn 	1 

diagnosis. and third  the diagnosis addressed by the repair may be incorrect. this last reason  misdiagnosis  can result from errors in domain knowledge or faulty evidence gained during diagnosis. or a diagnosis may be partially correct  but the effectiveness of the repair masked by co-occurring problems that have yet to be identified. until all causes for the failure are identified and repaired  the uut remains in a failed condition. 
　hypothesized diagnosis. sometimes repairs are made on the basis of a hypothesized diagnosis  because it is difficult or impossible to acquire direct confirming evidence. the hypothesized diagnosis is then confirmed by the repair itself  or discarded in favor of a new diagnosis. for example  one car diagnosis heuristic states that  to fix certain fuel pressure problems  replace the fuel pump. afterwards  do a fuel pressure test  and if the test fails  conclude a bad fuel pressure regulator. in this example  the conclusion is hypothesized  then either confirmed or replaced by another conclusion as a result of evidence obtained during the repair. 
　a hypothesized diagnosis can also result from a repair in cases where a previously confirmed diagnosis is proven to be correct but inadequate. as an example  another car repair heuristic states that  for a no-start  if you find that the battery posts are corroded but cleaning the posts does not solve the problem  it must be due to a fault in the charging system . in this case  the correct repair was made for a properly diagnosed condition  but performing the repair revealed that the condition was not severe enough to cause the problem. 
1. test's repair strategy 
　because the repair strategies discussed in the previous section are an integral part of human expert diagnostic behavior  it is desirable to include similar capabilities in expert systems. in this section we provide an overview of test  and discuss its repair stratgies in detail.  more complete discussions of the test architecture are given in  kahn 1a    kahn 1b   and  pepper 1b .  
1. overview of test 
　test provides a domain-independent problemsolver  together with a library of schematic prototypes which constitute the structure within which domainspecific knowledge bases must be built. a test knowledge base consists of a highly interconnected network of schemata  each of which is an instance of a schematic prototype. 
　failure-mode is the most important schematic prototype. each failure-mode represents a deviation of the uut from its standard of correct performance. the failure-modes in a knowledge base are linked in a 
　hierarchy ranging from top-level failure-modes called concerns through intermediate-level failure-modes down to leaf-level failure-modes  see figure 1 . typically intermediate-level failure-modes are functional or 
1 	knowledge representation 
subsystem faults  and leaf-level failure-modes are component faults. failure-modes are interconnected via due-to and always-leads-to relations. domain information which affects the behavior of the diagnostic interpreter or the repair strategy is attached as slot values to failure-modes  or other schemata as appropriate. 
　in addition to failure-modes  the knowledge base contains datum schemata which represent evidencecollection actions such as tests  questions and sensordata acquisition functions. failure-modes are linked to datums by has-tests relations  with meta-information attached to the relation indicating how evidence acquired from the datum s  is used to confirm/disconfirm the failure-mode. mechanisms exist to disjunctively and conjunctively combine datums. there are also schemata to represent repairs  documentation  exception conditions  and many other kinds of supporting information. 
　the test problem-solver begins by focusing on an observed or suspected failure-mode. if the failure-mode has occurred or if its status remains unknown  its possible causes are investigated to see if they have occurred. the search process is guided by an underlying representation of the order in which diagnostic experts explore possible causes for identified failure-modes. heuristic rules can be inserted in the knowledge base to modify search behavior as runtime information is acquired. diagnosis proceeds until a leaf failure-mode is confirmed  and control is passed to the 
repair strategy. 
1. test's repair strategy 
　test queues all confirmed failure-modes that require repair  and by default  repairs them in the reverse order that they are identified. thus  lower-level  component failures are generally repaired before the higher-level conditions they caused. 
　repairs are attached to failure-modes via a has-repairs relation. if a failure-mode has links to multiple repairs  they are ordered from most desireable to least according to a domain expert's prior judgement. this ordering incorporates possible tradeoffs between cost and goodness of repair. if the ordering is dependent on runtime information or uut configuration  this is represented by reorder rules which attach to the has-repairs relation and dynamically modify the ordering if their conditions are met. 
　once a repair is selected  the repair strategy module leads the technician through the steps of the repair and its subsequent validation. validation generally consists of checking two failure-modes - the failure which has the repair attached to it and the original concern that 
triggered the diagnosis - to see whether they still occur. 
　after performing a repair and validation  the repair strategy selects one of four different sub-strategies  according to an algorithm shown below. test follows the selected sub-strategy  modified as necessary to 

reflect domain-specific exception information provided in the knowledge base. 

　the first sub-strategy is for a known bad repair  one which fails to fix the failure-mode directly associated with it. the follow-on diagnostic issues are trivial in this case. test knows that regardless of the status of the original concern the leaf failure-mode is still broken. the technician is instructed to check that the replacement parts are good  that they are the proper parts called for by the repair schema  and that they are installed correctly. if the repair still fails  test tries to prescribe an alternate repair. if that fails  test presumes an error in the knowledge base  either the wrong repair associated with the leaf failure-mode or the wrong method for confirming the failure  and halts. 
　in the second sub-strategy  success  the repair has fixed the original concern. this is the desired outcome  and causes the repair strategy to halt. note that the repair strategy does not differentiate between situations where  1  both the leaf failure-mode and the original concern are known to be fixed  and  1  the status of the leaf failure-mode is unknown  eg.  not directly testable  but the concern is known to be fixed. this models a heuristic provided by human experts: if the uut is broken before performing the repair and works afterwards  one can reasonably conclude that the repair fixed all the causes of the original problem. 
　in the third sub-strategy  misdiagnosis  the repair fixed the leaf failure-mode  but did not fix the original concern. as discussed earlier  this can result from a 
　domain knowledge error  other co-occuring problems  or diagnostic reasoning based on faulty evidence. since test cannot tell if its own knowledge base is in error  it adopts a strategy to discover co-occurring problems if any  and also verify the evidence gained during the first diagnostic pass. 
the last sub-strategy  the unknown problem or 
 broken black box   is the most difficult. a repair has been made  but the original concern is not fixed and there is no direct test for the repaired component. thus it is impossible to tell if the repair was performed correctly  or to confirm the causal relation between the component repaired and the original concern. further  the repair may have succeeded but its success masked by additional co-occuring failures. for this case  test uses a heuristic from the automotive domain which states  if you do something to fix a black box and it doesn't work  repeat the repair before trying anything else.  this approach is not entirely satisfying  and clearly has the potential for incurring needless expense in certain cases. but human experts consistently preferred to simply repeat the repair before taking the 
trouble to go back and verify the diagnosis. 
at the completion of any of these four sub-strategies  
test moves on to repair the next known failure-mode in a similar manner. 


figure 1: a test knowledge base is a hierarchical network of failure-mode  fm  schemata  each of which may have datum  d  and repair  rp  schemata attached via has-tests and has-repairs relations. failure-modes are linked  downward  by due-to relations  and may also be linked  upward  by always-leads-to relations. rules which conditionally modify the knowledge base structure may be attached virtually anywhere  but are not shown here. diagnosis consists of traversing the failure-mode network  starting at a top-level concern and ending at a leaf node. the final path  shown here in boldface  is called the causal chain. 
	pepper and kahn 	1 

1. customizing test's repair strategy 
　the repair strategies as described above may be modified or overridden by specifying exception information in the knowledge base. exception information is used to modify how a repair's success is verified  how follow-on diagnosis is performed subsequent to repair failure  and the sequencing of multiple repairs. 
　verification. as noted earlier  test generally verifies repair by checking for the occurrence of two failure-modes: the leaf node directly associated with the repair  and the original concern. but there may be domain-specific reasons to check additional failuremodes  either on the causal chain connecting the two or outside it. certain repairs may have possible negative side-effects  or certain intermediate failure-modes may have cheap  accurate tests which are more desireable than rechecking the original concern. in other cases  repairs may be trivial and it may be unnecessary to verify them afterwards. test provides mechanisms for representing all these exceptions  and for modifying the repair strategy's behavior accordingly. 
　alternative diagnosis. if a repair fails  the default strategies described in section 1 can be modified to prune search in domain-specific ways. a domain expert can indicate certain conclusions that can be automatically drawn from specific tests performed as follow-up to a repair  eg   if there is no leak in the primary vacuum chamber  and if after replacing the vacuum pump the result of the vacuum test is fail  then conclude a leak in the secondary vacuum chamber' . a domain expert can also modify tests rather simplistic default behavior of clearing the knowledge base of all evidence after a repair  by specifying which kinds of evidence are likely to be unaffected by certain changes in the uut's state. 
　sequencing. as noted earlier  the default behavior is for test to repair failure-modes in the reverse order that they were confirmed. this can be overridden in cases where a repair is needed in order to continue with diagnosis  eg.  an empty radiator must be refilled to locate a leak . 
1. conclusions 
　we have shown that a diagnostic expert system can be made significantly more powerful by extending its capabilities into the process of repair selection  sequencing and verification. test's repair strategy is a step in that direction. it provides mechanisms in the diagnostic problem-solver for performing default repair strategies  and provides a schematic representation model which permits modification of the repair strategy in domain-specific ways. 
　test succeeds in capturing much of the repair behavior of expert technicians  but it is limited in several ways. since its knowledge is based on a troubleshooting model  it lacks understanding of the deep structure of the uut and cannot predict how a 
　repair will affect the reliability of evidence gained prior to 
1 	knowledge representation 
that repair  nor can it reason about likely side-effects of repairs. test does not currently support temporal representation of evidence  hence it cannot represent or reason about changes to test results or failure-modes over time. and we have not yet fully integrated the repair strategy with tests belief maintenance and explanation facilities. as test matures with field experience  we expect to correct these problems as required by the user community. 
　we have only begun to understand the issues of integrating repair strategy with diagnostic reasoning. we are continuing to refine our model of repair behavior  and look forward to the eventual emergence of a sound theory of repair strategy in troubleshooting expert systems. 
