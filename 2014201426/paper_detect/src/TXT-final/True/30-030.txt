 
this paper is concerned with providing a common framework for both the logical specification and execution of agents. while numerous high-level agent theories have been proposed in order to model agents  such as theories of intention  these often have little formal connection to practical agentbased systems. on the other hand  many of the agent-based programming languages used for implementing 'real* agents lack firm logical semantics. our approach is to define a logical framework in which agents can be specified  and then show how such specifications can be directly executed in 
order to implement the agent's behaviour. 
we here extend this approach to capture an important aspect of practical agents  namely their resource-bounded nature. we present a logic in which resource-boundedness can be specified  and then consider how specifications within this logic can be directly executed. the mechanism we use to capture finite resources is to replace the standard modal logic previously used to represent an agent's beliefs  with a multi-context representation of belief  thus providing tight control over the agent's reasoning capabilities where necessary. 
this logical framework provides the basis for the specification and execution of agents comprising dynamic  temporal  activity  deliberation concerning goals  and resource-bounded reasoning. 
1 introduction 
the m e t a t e m  barringer et al  1  and concurrent m e t a t e m  fisher  1  languages have been used as highlevel mechanisms for specifying and executing individual agents and multi-agent systems  respectively. both are based upon the principle of specifying an agent using temporal logic  and then directly executing this specification in order to provide the agent's behaviour. this approach provides a high-level programming notation  while maintaining a close link between the program and its specification. 
   * visiting research fellow from university of trento  italy  supported by the italian national research council  cnr  
automated reasoning 
¡¡while this approach has provided a useful basis for experimentation with both the logical representation and animation of agents  it has become clear that a more refined version of the specification language is required if this framework is to be used for 'real world' agents. in particular  the m e t a t e m family of programming languages originally contained no sophisticated mechanisms for representing deliberation within an agent  i.e. the process that an agent carries out in order to decide which goal/action/plan to attempt. 
   thus  inspired by the success of the bdi framework  rao and georgeff  1  in representing deliberation  the basic m e t a t e m system was extended  in  fisher  1b   with explicit mechanisms for ordering goals. goals  corresponding to both desires and intentions in the bdi model were  in turn  represented by temporal eventualities. this then allowed deliberation to be represented using user defined functions providing an ordering on the satisfaction of eventualities. 
¡¡while this provides a simple and concise mechanism for representing and implementing deliberative agents  it does not deal with a further important aspect of 'real' agents  namely their resource-bounded nature  bratman et al  1   in particular  the representation of belief was given by extending the temporal basis with a standard modal logic having kripke semantics  halpern and moses  1 . as is well known  this does not match the resource-bounded nature of 'real' reasoners  giunchiglia et al  1 . indeed modal logics generally model logically omniscent agents which are forced to believe  and compute  all the logical consequences of their own beliefs. 
thus  in this paper we modify the logic used in  fisher  
1b  by replacing the standard kd1 modal logic with a multi-context representation of belief  giunchiglia and serafini  1; benerecetti et al  1 . this logic is a modification of kd1 which permits a simple execution mechanism to be employed over belief contexts. consequently  it allows us to tightly control the use of belief contexts within deliberative agents and so to represent resource-bounded reasoning. in addition  we also investigate the resource-bounded aspects of temporal reasoning. thus  rather than allowing the agent to reason about the full underlying temporal logic  we examine how the agent can be restricted so that it reasons with an abstraction of the underlying temporal model. 
¡¡the paper is structured as follows. in ¡ì1  we define the syntax and semantics of the particular logic used to represent 

 agents. this will combine a simple temporal logic  emerson  1  with a multi-context logic of belief  benerecetti et al.  1   in order to provide the basis for the direct execution of this logic  we introduce  in  a particular normal form  that extends the separated normal form used in the metatem  fisher  1a . an algorithm which can be used to directly execute formulae in this normal form is defined in  while an example of such execution is given in the correctness of the execution algorithm is considered in . in  we consider the effects of restricting both the hypothet-
ical doxastic and temporal reasoning that can be carried out by an agent. finally  in  we provide conclusions from this research and consider future work. 
1 temporal logic of bounded belief 
in this section  we give the syntax and semantics of our base logic  called a temporal logic of bounded belief or tlbb for short  which combines propositional linear temporal logic  with a multi-context belief logic. while temporal reasoning is essentially infinite  reasoning about beliefs can be bounded. in this sense  the logic allows the representation of bounded reasoning. 
syntax we are considering a situation with an agent  a  observing and representing beliefs about a set of agents. formulae of tlbb are constructed using the following connectives and proposition symbols. 
  a set   of propositional symbols. 
  propositional connectives  true  false  	and = . 
  temporal connectives  	and 
  a set  	of belief operators. 
let be the set the set of  possibly empty  strings of the form w i t h w e call any a view. 
intuitively  each view in represents a possible nesting of the belief operators. the empty string represents the view of the external agent a. the views1 that a can build can be organized in a structure such as that presented in figure 1. 

figure 1: the structure of views 
we associate a logical language with each view. the set of well-formed formulae of denoted by is inductively defined as the smallest set satisfying: 
   'a more detailed description of the structure of views we are using can be found in  benerecetti et a/.  1 . 
	  	any element of  is in wff¦Á 
  
  
the set of well-formed formulae of tlbb comprises the sets of well-formed formulae contained in each 
semantics the semantics of the tlbb language is based on the semantics for contextual reasoning proposed in  giunchiglia and ghidini  1; benerecetti et al  1 . following this approach  the semantics of every formula is local to the view where we consider it. therefore  we associate to each view a discrete linear temporal model of time m¦Á with finite past and infinite future  e.g.   in order to interpret the temporal component of each language . each of these moments in time  represented by a temporal index  provides also a valuation  for the propositional part 
of the language and for  atomic  formulae of the form as usual  we define the semantics of each  via the satisfiability relation: 

satisfiability and validity are defined in the usual way. 
¡¡the second step in defining the semantics for tlbb is to formalize the relation existing among different views. indeed only a certain combinations of temporal models are compatible and provide a model for tlbb. a model m for tlbb is 

they are the tlbb versions of modal axioms k  1  and 1  respectively  and are obtained from conditions 1 in the definition of m. moreover m satisfies the formulae 
 and . these are a consequence of the fact that m associates a unique temporal model  to each 
	fisher and ghidini 	1 

view and ensures that  are equivalent. while the fact that each view has exactly one bi-accessible view enforces that each agent must either believe  or disbelieve  every atom  it does simplify the model structure  and hence the execution  required. as we will see in   typical examples of agent reasoning are not affected by this addition. 
1 normal form for tlbb 
formulae in tlbb can be transformed into a normal form snfbb  separated normal form for temporal logics of bounded belief . separated normal form  snf  is used as the basic normal form for linear-time temporal logics  fisher  1a  and has been extended  for example to temporal logics of knowledge in  dixon et al  1 . the translation to snfbb uses the renaming technique  plaisted and greenbaum  1  where complex subformulae are replaced by new propositions and then the truth value of these propositions are linked  in all states  to the formulae they replaced. in linear time temporal logic this is achieved by ensuring that such formulae are in the scope of a '  operator  i.e. they hold at all reachable states. for tlbb we introduce the operator  which allows arbitrary nesting of bi and operators to achieve the same effect. as in the case of temporal logics of knowledge  the  operator can be defined using fixpoints  dixon et al.  1 . 
formulae in s n f bb are of the general form 

where each ti known as a rule  must be in one of the varieties described in figure 1. note that ka  lb  and / are all literals  

figure 1: rules in snfbb 
and the outer  operator that surrounds the conjunction of rules is usually omitted. 
example 1 consider the tlbb formula 
	 . 	 1  
we can go through the following stages to transform this into 
snfbb: 
a  rename 
automated reasoning 
b  rename 	above by q and a
c  rename. 	in  1  by r and add 
d  r e n a m e . i n  1  by s and add 
e  rename 	in the above formula by t and add 
the original formula is now  which can be split giving the final set of rules in snfbb as: 

the key properties of the translation to snfbb  characterised by the function v are as in the temporal case  fisher  1a . 
theorem 1 // tlbb formula  is satisfiable  then  is satisfiable. 
theorem 1ifm is a model for  then m is also a model for 
consequently  as execution is essentially model building in our framework  then we can execute  in place of 
1 execution of snfbb 
in this section we give an algorithm for executing a set of snfbb rules. since lack of space precludes us from providing the algorithm in full detail  we will first present an outline of the execution mechanism for temporal logic  based on  barringer et al  1  and  fishcr  1b   and will follow this with a more detailed account of the execution of the belief element of the logic. 
1 	executing temporal logic 
the basic idea underlying metatem  barringer et al  1  is to directly execute a temporal formula  by attempting to build a model for the formula in a simple forward-chaining fashion. this is extended  in  fisher  1b   whereby the choice of which formulae to satisfy is provided by user defined deliberation functions  rather than by a fixed ordering heuristic. an outline of the basic approach  assuming that we are executing the set of rules  i    is given below. 
1. by examining the initial rules  constraints on the possible start states for the temporal model can be generated. 
we choose one of these possible start states  deriving its valuation from the initial rules. 
if all the possible start states have been explored  then we terminate stating that the set of rules  r  is unsatishable. 
1. generate constraints on next states  cn  and constraints on future states  c/  by checking applicability in current state of step and sometime rules  respectively. 
cn represents all the possible choices of valuations for the next state  while cf provides the set of eventualities that must be satisfied at some time in the future. 

1. make a choice from cn and check that the chosen valuation is consistent. if there are no unexplored choices  return to a choice point in a previous state. the choice mechanism takes into account a combination of cf  the outstanding eventualities  and the deliberation ordering functions  fisher  1b . 
1. generate a new state  s  from the choice made in  1 . note that  by default  if propositions are not constrained we choose to leave them unsatisfied. 
define s as being a successor to the current state and record the eventualities that are still outstanding  i.e. previously generated eventualities that were not satisfied in s ; call this set of eventualities evs. 
if any member of evs has been continuously outstanding for more than  states  then return to a previous choice point and select a different alternative. 
1. with current state  s  and the set of outstanding eventualities  evs  go to  1 . 
the key result here is that  under certain constraints on the choice mechanism within  1   this execution algorithm represents a decision procedure  previously presented in  barringer et al.  1  . 
theorem 1 if a set of snf rules  r  is executed using the above algorithm  with the proviso that the choice in  1  en-

figure 1: typical model exploration 
that exploration of everything within a belief context will be carried out within a finite amount of time. 
in order to incorporate the execution of belief operators into the algorithm described in ¡ì1  we add the following to the end of step  1 . 
for all belief operators    if expand  returns false  then return to a previous choice point and select a different alternative. 
sures that the oldest outstanding eventualities are attempted expand bi r  s  d  : boolean the function 'expand' explores belief contexts and attempts to build a model for the multi-context beliefs as follows. 

first at each step  then a model for r will be generated if and only if r is satisfiable. 
the above proviso ensures that  if an eventuality is outstanding for an infinite number of steps  then it will be attempted an infinite number of times. once the choice mechanism is extended to include arbitrary ordering functions  as in  fisher  1b   then a more general version of the above theorem can be given wherein we only require a form of fairness on the choice mechanism. while the above proviso effectively means that we can potentially explore every possibility  the incorporation in the algorithm of a bound on the number of states that eventualities can remain outstanding  together with the finite model property of the logic  ensures that all of the possible states in the model will be explored if necessary. 
1 	extending execution 
we now extend the above algorithm to handle the execution of snfbb- the two main elements of the algorithm affected by this are that the execution process now builds a labelled tree  rather than a sequence  and that once a new belief state is built it must be checked for equivalence with previously generated states. thus  rather than just generating a set of choices based upon temporal rules  we must now consider both temporal and belief rules. this will  often  lead to the construction of a number of belief contexts and  simulated  temporal sequences in order to derive these choices. for example  in figure 1 the basic temporal sequence  labelled by 'tl'  is being constructed. however  at certain points  belief contexts  e.g. bl and b1  must be explored in order to decide how to proceed. in addition  within these belief contexts  temporal execution itself can be simulated  e.g. b1 tl . note 
1 . let w	h	e	r	e	a	n	d 
if there are no such rules return true. let c'b be dnf version of cbi.  and remove all inconsistent disjuncts from c'b.. 
1. choose a disjunct  d  from cb. if no unexplored disjuncts are available then immediately return false. 
1. if d  then conjoin the formulae in d with d to give d' otherwise  let d' = d. note that d contains the belief constraints from the last state and this operation corresponds to the persistence of beliefs given by axioms 1 and 1  e.g. 
1. generate a new state  t  with valuation based on d!. if a state equivalent to t has occurred previously within this exploration from a basic temporal state  then make a bi edge from s to this previous state and return true. 
if no such equivalent state exists  then make a bi edge from s to t 
1. for all belief operators  bi  if any of expand returns false  then return to 
 1  and select a different alternative. 
1. if tl  expand  returns false  then return to choice point  1  and select a different alternative. 
1. return true. 
the function tlexpand rides  state  eventualities  effectively carries out temporal reasoning in a belief context. however  rather than continuing indefinitely  as the base-level algorithm does  it uses a tableau-like produce to ensure that a finite structure is constructed if the formula is satisfiable. 
	fisher and ghidini 	1 

¡¡rather than giving the detail of tlexpand  we note that it is very similar to the base-level temporal execution algorithm  although it does try to recognise repeated temporal states and so construct a finite graph rather than an infinite sequence. we will consider this temporal reasoning aspect further in 
1 example 
consider the following example of an agent acting as a travel information provider  note that  for reasons of space  the example is represented in predicate logic where variables range over finite domains . 
a  
i.e.   if you ask for information about destination x  then i believe that you will holiday in x in the future  
b  
i.e.  1ti believe that  if you will holiday in x in the future  then you will buy a holiday for x in the future  
c  
i.e.   if i believe that you will buy a holiday for x in the future  i will send you information about holidays at j : 
d  ask you x  
i.e.   you ask for information on destination :r : 
these translate to the following snfbb rules. 

execution begins by ensuring that ask you x  is true in the initial temporal state and then exploring other choices. thus  if we choose b to be false here  then we get a contradiction in the dme tl  simulation with  effectively  
 from rules b1-b1  and   from rule a1 . 
¡¡¡¡similarly  if we choose e to be false  we get a contradiction in the  tl  simulation with  effectively  ~  from rules c'1-cf1  and buy  you  holx   from rule b1 . 
¡¡thus  we eventually choose to satisfy ask you  x   b and c together in the initial state  which in turn leads to the execution of sendjnfo you  x  in the next state. 
the model eventually produced is given in figure 1. 
1 correctness 
as in the case with the basic metatem system  we can show that the extended system can be used as a decision procedure for tlbb if necessary. 
automated reasoning 

figure 1: example execution 
theorem 1 if a set of snfbb rules  r  is executed using the above algorithm  and the choices made by the temporal component ensure that the oldest outstanding eventualities are attempted first at each step  then a model for r will be generated if and only if  r is satisfiable. 
the proof follows by showing that the above execution mechanism will  eventually  explore all the tableau structure for tlbb  ghidini  1; wooldndge et al 1 . in particular  the execution within belief contexts explores potential linear sequences of such contexts until either a model is found  or until no unexplored possibilities remain and so the belief formula is unsatisfiable. 
¡¡in general  the mechanisation of such a logic is relatively easy since there are no axioms defining interactions between the different belief/temporal operators. thus  the sub-logics within tlbb can effectively be treated separately  and decidability of tlbb is retained  blackburn and de rijke  1 . 
1 resource-bounded reasoning 
in ¡ì1  we considered the execution of the temporal logic of bounded belief with  effectively  infinite bounds on belief reasoning capabilities. now we will examine how the effect that introducing resource bounds of various kinds will have on this execution mechanism. 
1 	bounded reasoning 
the most obvious thing to do  and indeed this was the main motivation for this work  is to set an explicit bound on the depth of belief reasoning allowed. in order to modify the execution mechanism  we just need to add an extra argument to the expand and tl expand functions. this argument will represent the depth of nesting of belief contexts. thus  in the first call to expand  from the basic temporal execution   the depth is 1. in the definition of the expand function itself  the depth is incremented when the function is invoked recursively. finally  we require an additional condition in expand stating that backtracking will occur if the depth bound reaches its limit  i.e. the maximum depth of nested beliefs allowed . 
¡¡given that we can bound the agent's ability to reason about belief  then can we do the same with temporal reasoning  in principle  yes. however  a bounded multi-context semantics for the type of temporal logic we use is quite complex  and we have not yet considered restricting the logic in this way. 

1 abstract temporal reasoning 
from a practical point of view  carrying out hypothetical reasoning within propositional linear-time temporal logic is quite expensive. while the logic is decidable  the decision problem is pspace-complete  emerson  1 . also  although the execution mechanism for metatem is complete  and thus could be used as a  naive  theorem-prover for the logic  the execution mechanism is not at all efficient in this respect. we propose a modified logical framework which consists of three elements:  full  propositional linear temporal logic for the agent's basic execution; bounded  multicontext  belief; and 'simulated' temporal logic  comprising only 1   hut no 'o' operator  this logic is only used within belief contexts and is equivalent to kdt1 modal logic . the tlexpand function described in ¡ì1 now executes the kdt1 logic  rather than temporal logic. 
¡¡while the restriction of the capability of an agent to reason only about 'abstract' elements of time in a belief context may seem too extreme  it does significantly reduce the complexity of the execution mechanism. in addition  it is debatable whether an agent should be able to reason about the exact detail of the time structure in which it is situated. further  if an agent wishes to reason about the temporal behaviour of another agent  then the asynchronous nature of agent execution means that a step in one agent will not necessarily match a step in the other. thus  perhaps an agent should only be able to reason about another agent reaching a certain state at some point in the future. hence the use  within hypothetical temporal reasoning  of just the  operator. 
1 conclusions and future work 
we have considered the extension of basic executable temporal logic  of the metatem style  with bounded reasoning about belief and time. in particular  we have proposed the version of the logic in as a practical basis for the high-level logic-based programming of resource-bounded agents. 
¡¡it is important to note that we are not interested in generating alternative mechanisms for undertaking temporal/modal proof. the main element we are concerned with is the execution of temporal formulae in order to generate an infinite sequence. however  at certain points hypothetical reasoning needs to be carried out and belief contexts must be explored. we could have used standard proof mechanisms for non-interacting temporal and doxastic logics  wooldridge et al  1  at this point  and  indeed  our intention is to provide this possibility within the full implementation . however   a  we would like to retain the common execution mechanism throughout   b  by representing belief exploration in terms of execution the whole process should be more amenable to meta-level control  and  c  while belief exploration is neither very common nor very complex  it makes sense to keep the execution mechanism simple. 
¡¡finally  the execution mechanism described in this paper provides a way to execute multi-context logics of this form  giunchiglia and serafini  1  using the imperative future  barringer et a/.  1  style of executable logics. 
¡¡future work includes testing a full implementation on larger examples  incorporating belief revision and persistence  and investigating the addition of real-time aspects. 
