 
the problem of finding a set of assumptions which explain a 
literal: let p be a proposition. then p and -p are liter-given proposition is in general np-hard  even when the background theory is an acyclic horn theory. in this paper it is shown that when the background theory is acyclic horn and its pseudo-completion is unit refutable  there is a polynomial time algorithm for finding minimal explanations. a test for unit-refutability of clausal theories is presented  based on the topology of the connection graph of the theory. als. clause: a clause is a disjunction of literals. 
horn clause: a horn clause is a clause in which there is at most one positive literal. 
definite clause: a definite clause is a hom clause in which there is exactly one positive literal. a definite 	clause such as 	can also be written 
1 	introduction 	as 	we call pi the head of the clause  and 
the abduction problem in which we are interested can be de-	the conjunction 	the body of the clause. 
fined as follows: 	denial: a denial is a horn clause in which there are no 
positive literals. a denial such as can also be written as 
unit clause: a unit clause is a clause which has one literal. 

ground theory  a the abducible set  and g the goal. a proposition is abducible if it belongs to a.  throughout the paper  we will use 1 to refer to the set of non-abducible propositions in 
 the purpose of condition 1 is to enable us to include clauses with abducibles at their head in the theory. it ensures that the set of assumptions adopted as the solution is closed under logical implication. 
　selman and levesque  show that even when only one solution is required  and the background theory n is restricted to be acyclic  finding abductive solutions is np-hard. this has led to pessimism regarding the practical utility of abduction as formulated above. 
　in this paper  we present a collection of definitions  results and algorithms  which together define a class of abduction 
　*this research was conducted while the author was at hewlett packard labs-stanford science center. problems for which finding a minimal solution is tractable. we also provide a polynomial time test for the membership of the abduction problem in this class. below is a summary of these definitions  results and algorithms. some of these are taken from the literature  the rest are new. 
1. the definition of the pseudo-completion of a horn theory with respect to a set of abducibles.  this is a variation on the standard definition of completion in logic programming  
1. the definition of the minimization of a set of proposition symbols with respect to a propositional theory  this is a variation on the minimization ideas used in circumscription and the notion of minimal diagnosis in model-based diagnosis  
1. a theorem stating that for abduction problems with acyclic background theories  minimal solutions of the abduction problem correspond to minimizations of the abducible set with respect to the pseudo-completion of the background theory. this result is new. 
1. an algorithm for finding a minimization of a set of propositions with respect to a clausal theory. this algorithm is known in the literature. 
1. a definition of unit-refutability for propositional clausal theories. unit refutability ensures that computing a minimi-
	eshghi 	1 

zation of a set of proposition with respect to the theory is tractable. this definition is new. 
1. a test for unit-refutability of clausal theories. this test relies on the topology of the connection graph of the theory  
and is polynomial time with respect to the size of the theory. passing this test is a sufficient  but not necessary condition for unit refutability. this test is new. 
as a result  we argue that the class of abduction problems which have a background theory with a unit-refutable pseu-
do-completion is tractable  and provide a sufficient  but not necessary  test for membership of this class. 
　notice that the background theory can have general denials  as opposed to denials restricted to only abducible propositions   and that we allow abducibles to occur at the head of clauses. 
　for the case that the test fails  or we do not perform it  we will not know whether or not the pseudo-completion is unit refutable. in this situation  we can still use the algorithm  but we need to augment it with a correctness test to make sure that the set of assumptions returned is a solution. sometimes this test will fail  i.e. we will not be able to generate a solution. the correctness test itself is of linear complexity  so when we do not know that the pseudo-completion is unit-refutable  we have a correct  but incomplete  tractable technique for finding solutions to abduction problems of the above form. 
	1 	finding a minimization of a 
the following algorithm  reported  for example  in   can be used for finding a minimization of a with respect to c. this algorithm assumes that c is consistent.  m holds a set of literals  n and s hold a set of propositions  a holds a proposition : 

	eshghi 	1 

theorem 1 every prepositional clausal theory whose connection graph has no tied chains is unit refutable.  proof in appendix 1  
notice that the reverse is not necessarily true  i.e. there are unit refutable sets of clauses which have tied chains. 
1 	the cost of checking for tied chains 
to estimate the cost of checking for tied chains  for the set of clauses c we define the binary relations chain between literals as follows: 

let chain* be the transitive closure of chain. then it is easy to show that there is a tied chain in c iff for some literal i  chain holds. thus the cost of checking for existence of tied chains is bounded by the cost of computing the relation chain*  which is polynomial. 
1 	what if we don't know if unit-refutable 
we might not want to do the test for tied chains in riuonlyif or we might test and find a tied chain. in both cases  we do not know whether or not is unit-refutable. so what happens  
　it is important to emphasize that while lack of tied chains in  is a sufficient condition for the correctness and completeness of the algorithm  it is not a necessary condition. in other words  even if has tied chains  in many instances the algorithm returns a correct solution. thus  when we do not know that is unit refut-
able  the best strategy to adopt is to use the algorithm to find a potential solution anyway. but  in order to make sure that we have a solution  we can test the conditions 1 to 1 in definition 1 in linear time . if the conditions are satisfied  then we have a solution. in other words  without tiny consideration as to the unit-refutability of the combination of the algorithm in section 1 and the further test of correctness can be considered a tractable algorithm for finding solutions to abduction problems which is correct  but incomplete. 
　in fact  practical experience has shown that  without any checking of   the algorithm rarely fails to return a correct answer. more substantial practical evidence supporting this claim will be presented when enough data is gathered. 
1 	comparison with related work and conclusion 
the atms  1 essentially computes all the minimal solutions for the abductive problems where g1  g1  ..are the propositions in but the performance of atms can be exponential with the number of propositions in n l1 . 
　the use of predicate completion to characterize abduction as deduction has been proposed by a number of researchers 
   . in this regard  the relationship established by theorem 1 is closest to the work of console et. al. in  . 
they  too  consider acyclic hom background theories  but they restrict them so that a  all definite clauses have non-abducibles at the head and b  all the denials only have abducibles atoms. also  they do not establish a relationship between minimal solutions and the minimization of the abducible set with respect to the completion. 
　as far as the test for unit-refutability is concerned  to our knowledge the work reported here is new. dekleer in  1j advocates the use of unit resolution  which he calls clausal binary constraint propagation  and gives some pragmatic techniques for making unit resolution complete for consistency checking. 
　a top-down algorithm for abduction using negation as failure type reasoning was reported in . there are a number of published algorithms for finding genendized stable models of logic programs    such as the algorithms reported in  . computing general stable models is a generalised version of the abduction problem  thus all the algorithms developed for that purpose can be used for computing solutions to the abductive problems of the type considered in this paper. no tractability results have been published concerning these algorithms. 
　the techniques presented here  without the test for unit-refutability  have recently been implemented in the context of a general purpose abduction/reason-maintenance system. so far  the system has given promising performance  though definitive judgement has to await further experiments. 
acknowledgment: i would like to thank bruno bertolino  chris preist  ajay gupta and alex loopik for many useful discussions on the subject of this paper. 
