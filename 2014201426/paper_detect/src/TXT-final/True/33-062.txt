 
     this paper deals with the combinatorial search problem of finding values for a set of variables subject to a set of constraints. this problem is referred to as a constraint satisfaction problem. 
     we present an algorithm for finding all the solutions of a constraint satisfaction problem with worst case time bound 1 m*kf+1  and space bound 1 n*k f + 1    where n is the number of variables in the problem  m the number of constraints  k the cardinality of the domain of the variables  and f n an integer depending only on a graph which is associated with the problem. it will be shown that for planar graphs and graphs of fixed genus this f is 1 /n . 
i. 	introduction 
     many problems in diverse fields of computer science can be formulated as constraint satisfaction problems: a number of variables 
  sometimes called units  are to be assigned values  labels   such that certain given constraints on subsets of these variables are satisfied. instances of constraint satisfaction problems range from graph theory and automata theory problems  like graph colouring and automata homomorphism  to problems in ax such as scene analysis and combinatorial puzzles. for representative examples see . problems involving more general constraints are treated in . 
     algorithms to solve these problems usually rely on backtracking and/or on some forms of relaxation methods or look-ahead operators                 . all these algorithms seem to work well most of the time. but they can behave badly in some cases and do not allow a tight worst case analysis. this is not surprising as montanari  showed that the general constraint satisfaction problem is 
np-complete. 
     one of the reasons why backtrack algorithms have a potentially bad behaviour is the fact that they use a minimal amount of space. observe for instance  that a simple exhaustive backtrack search has an exponential running time but uses only a linear amount of space. one can view the relaxation methods and look-ahead operators proposed in the literature as attempts to invest in 
seidel 
computer science 
british columbia 
space in order to save time. 
     in the following sections we develop an algorithm which invests in space heavily. using the terminology of backtrack search and search trees one can say that the saving in time is achieved by identifying initial segments of a search tree which are effectively identical  that is  they differ only on variables which do not 
constrain the remaining uninstantiated variables. however  we found it advantageous to formulate our algorithm not in terms of backtrack search but using the concept of dynamic programming. thus in contrast to other methods  our algorithm permits easy analysis of its time and space complexity. 
	ii. 	the 	problem 
     a constraint satisfaction problem  csp  can be defined as follows: given is a set of variables x 1  ... x n and associated with each variable xi a domain dt of values. furthermore  on some subsets of the variables constraints are given  limiting possible value tuples for those variables. a solution of a csp is an n-tuple of values   a i   . . .     e d x...   which simultaneously satisfies all given constraints. the conplete set of solutions of a csp is the subset otdixtt.xi1 comprising exactly a l l the solutions. a csp is called unsatisfiable if its conplete set of solutions is emptyl 
     for our purposes all domains are finite. we also assume that the domains of all n variables are of equal cardinality  |dt| k for i=l ... n. we shall see later on  that this assumption is just a convenience for the sake of analysis and by no means vital to the algorithm to be proposed. 
furthermore we will restrict our attention to 
csps involving only binary constraints. this restriction seems more critical. but it will be seen that the method to be presented can be applied to general csps without much modification. 
     montanari  pointed out that a csp only involving binary constraints can be represented by a graph. let us call it the constraint graph. each of its vertices corresponds to a variable. 
tuo vertices are adjacent iff there is a constraint between the corresponding two variables. in the following we will feel free to call a vertex a 
1 
variable or vice versa  or to identify edges with constraints. 
i i i . a simple exampub 
     let us look at the following exanple. let us assume we have a csp involving 1 variables and 1 binary constraints  and it can be represented by the constraint graph given in figure 1. let c¡À* be the constraint between variables xt and xj . 

figure 1 
we can find out whether such a csp is satisfiable in the following way: 
create a ternary constraint relation c1 for %i   
x1   and x1 which comprises all value triples for those variables allowed by c1 and c1. next  using c1 construct a ternary constraint relation c1 which conprises all value triples for x1 rx1   and x1 which permit a value for xi   such that c1 ' c1 ' c1a 'c1a # and c1a are satisfied. note 
that  as indicated in figure1 by the shaded lines  

figure 1 
x1  x1   and x1  cut  the constraint graph and thus all of the influence of x  on the csp is subsumed by c1a and therefore xi   c1 c1   c1   and c1 are of no importance any more.  ttiis is indicated by the dashed lines in figure 1.  also note that if c1a is empty the csp must be unsatisfiable. 
     in the same manner  we construct using c1a a ternary relation c1 for x1   x1   and x1   which conprises all value triples allowed by c1 and c1   and permits values for x  and x1. again  if 
c1 is empty the csp must be unsatisfiable and we can stop. otherwise we continue in the same way and construct ternary relations c1   c1   c1 ' c1 and c1   if  y of those relations is enpty  the csp is unsatisfiable. if cg1xo is nonenpty we can generate a general solution for the csp by using the created ternary constraints and instantiating the variables in the reverse order to the order in which they were discarded. 
     if each of the variables x¡À can assume k different values  then any of the ternary relations above can have at most k1 elements. therefore only k  combinations of value triples and values need to be considered for the construction of a new ternary relation. hence a csp representable by such a graph can be decided in 1 k*  steps. note that this worst case complexity is completely independent of the specific instances of the constraint relations cjj . 
iv. 	the invasion pmjckuube 
     in order to describe  how the method outlined above can be generalized so that it can be applied to an arbitrary constraint graph  we need a few 
definitions. 
given an n-vertex graph g  call a sequence 
 gt}  i l ... n  of induced subgraphs of g  where the number of vertices in gi is i and g  is a subgraph of gi+i  an invasion of g. we call the set fa of vertices of g  which are adjacent to vertices not in g  the front of gi. vertices in g1-fi are called conquered vertices. hie front length f  of g* is the number of vertices in fj. the front length  bf an invasion is the maximum front length of the subgraphs gi involved. an invasion of a graph g is called optimal if its front length is not greater than tlhe front length 
of any other invasion of g. 
     given an invasion {gj}  i=l ... n  of a 
     constraint graph g  we claim that satisfiability of a corresponding csp can be decided by the procedure outlined below: 
for i l to n inductively find all value tuples for the front vertices fi of gt which are consistent with one of the allowed value tuples of fi i. if there are no such tuples  stop and report the csp unsatisfiable. 
the correctness of this algorithm follows by induction using two observations: 

1 

1 

claim; 
t  the above procedure yields a circuit-free directed multigraph. 
1. the tuple  a 1 ...a n   is a solution of the csp if and only if there is a directed path from sn to 
s1 whose arc label sequence is a n . . .   a 1 . 
proof: 
1. the solution graph is circuit-free because for all i and j  i = j  si and sj are disjoint and there are only arcs from nodes in si to nodes in s j . j . it is possible to have more than one arc between a node in si and a node in si-1 in the case that xt is not a front vertex of gi. 
1. this statement follows from the inductive argument that the set of paths between a node  a   f ... f af 1   in si and s1 represents exactly all the solutions of the csp restricted to gj which have a l r ... a f i as instantiation of the front vertices of gi. 
q.e.d. 
     it is now natural to ask about the complexity of this procedure. the following theorem gives an answer to this question. it is assumed that it takes constant time to determine whether two variables satisfy a common constraint. 
theorem: 
given is a csp involving m binary constraints on n variables. each of the variables can take on k different values. for the constraint graph of the csp an invasion {g    i = l   . . .   n   with front length f is given. 
the above algorithms produces a solution graph of the csp in time at most 1 m*kf+1  and uses space at 
most 1 n*kf+l . 
proof: 
s: ! can not have more than kf*~     kf elements. tnus at most kf+1 combinations are possible between elements of s .j and values of x . therefore there can not be more than k* *1 arcs rroro nodes in si to nodes in s j . j . so the algorithm uses space 
1 n*k f + 1  . 
for each i at most f binary constraints need to be checked for each of the at most k f + 1 combinations between elements in si-i and values of xi. therefore there are not more than n*f*k f + 1 checks. 
but overall there exist only m constraints. thus only m*kf+1 checks are necessary  and the algorithm uses time 1 m*k f + 1  . 
q.e.d. 
     implementation of this procedure should be straightforward. but one should carefully select the data structure to represent the sets sj so that set insertion and set enumeration can be done quickly  but no excessive amount of space is used. the actual usefulness of this procedure will of course depend heavily on the front length of the invasion used  and on the actual sizes of the sets si to be constructed. 
vt. the general csp 
     so far we have looked only at csps involving binary constraints. can our procedure also handle general csps with constraints involving more than two variables  the changes and generalisations necessary to answer this question positively should be obvious: we only need to generalize the notion of a constraint graph; variables correspond again to vertices  and two vertices are adjacent if the corresponding two variables are involved in some common constraint. with this definition of a constraint graph only a few modifications in bookkeeping are required so that the invasion procedure can be applied to general csps. 
vii. finding a good invasion 
     in order to make efficient use of the algorithm of the last section  one needs  good  invasions  that is invasions with small front length. but good invasions do not exist for all graphs. consider a complete n-vertex graph: each of its invasions has front length n-1. furthermore there are nl invasions for an n-vertex graph  but no good algorithm is known to select an optimal or almost optimal invasion. but if we restrict our attention to the class of planar graphs  we can exhibit an algorithm which computes an invasion with front length 1 /n . similar algorithms exist for the classes of graphs of fixed genus. but we will concentrate on planar graphs. the importance of this class is illustrated by the fact that for instance most csps arising in a.i. vision involve planar constraint graphs. 
     in the construction of the invasion of a planar graph we will make use of a planar separator theorem by lipton and tar jan f1 : 
let g be an n-vertex planar graph. the vertices of g can be partitioned into three sets a  b  c  such that no edge joins a vertex in a with a 
vertex in b   neither a nor b contains more than 1n/1 vertices  and c contains no more than /¡ìn vertices. 
lipton and tarjan also exhibit an algorithm which finds such a partition in 1 n  time. in  they show how this theorem can be extended to graphs of arbitrary genus. 
     in the previous section we formally defined an invasion of a graph as a sequence of induced subgraphs. it should be clear that each invasion 
of a graph g induces a numbering on the vertices of g  and vice versa. thus if the vertices of g are numbered x j   . . .     then  gt  ga is the subgraph of g induced by the vertices xj  with j¡êi}  i   l f . . .   n   is clearly an invasion of g. so finding an invasion for a graph is equivalent to finding the corresponding numbering of its vertices. 
     in the following we specify a divide and conquer type procedure invme-planar-graph which numbers the vertices of a planar graph. we shall mean by  invade s starting with i   where s is a 


1 
