 
recent years have witnessed rapid progress in explanation generation. despite these advances  the quality of prose produced by explanation generators warrants significant improvement. revision-based explanation generation offers a promising means for improving explanations at runtime. in contrast to singledraft explanation generation architectures  a revision-based generator could dynamically create  evaluate  and refine multiple drafts of explanations. however  because of the inherent complexity of revision  previous multisentential revision-based approaches have not scaled up. we have developed a scalable revision-based model of explanation generation that dynamically improves multi-sentential explanations. by operating on abstract discourse plans encoded in a minimalist representation  it combats both the conceptual complexities and the efficiency problems posed by revision. this approach has been implemented in revisor  a unification-based revision system. evaluations of revisor's performance in generating a corpus of extended multi-sentential scientific explanations yielded encouraging results. 
1 introduction 
automatically generating natural language explanations of complex phenomena is a critical functionality for advisory systems and knowledge-based learning environments. in recent years  explanation generation capabilities have advanced steadily  cawsey  1; mittal  1; moore  1; lester and porter  1; suthers  1 . 
despite these advances  the quality of prose produced by current explanation systems calls for significant improvement. one approach to improving explanations is to expand the capabilities of discourse planners and realization systems. however  because discourse planners 
   * support for this work was provided by the intellimedia initiative of north carolina state university. 
james c. lester department of computer science north carolina state university raleigh  nc 1 usa lester eos.ncsu.edu 
and realization systems already consider a complex matrix of syntactic  semantic  and pragmatic constraints to make appropriate decisions about content selection  clause structure  phrase structure  and lexical choice  adding to their complexity is problematic. 
　revision offers a promising alternative for significantly increasing the quality of explanations without increasing the complexity of either the discourse planning or realization components. just as human writers employ revision to cope with the complexities of composition  hayes and flower  1   an explanation system can employ an iterative process of composing drafts  evaluating them  and revising them. in contrast to classical explanation systems that operate on a single draft  a revision-based system can operate on multiple drafts over time. because revision is a generate-arid-test method  a system that dynamically edits and revises explanations presents itself with a series of opportunities for considering the myriad constraints that bear on generation decisions. however  previous efforts to develop computational models of revision have not scaled up. many were never implemented  vaughan and mcdonald  1; yazdani  1   and of those that were  most were highly restricted and operated on only a few examples  gabriel  1; inui et a/.  1; mann and moore  1 . by far the most successful revision-based approach to date  robin  1  suffers from serious efficiency problems and operates only on single sentences. 
　to dynamically improve explanations while at the same time combatting the problems of complexity and efficiency  we have developed a revision-based model of explanation generation that operates on abstract discourse plans. encoded in a minimalist representation 
consisting of only those features that are most critical for making revision decisions  abstract discourse plans promote efficiency by reducing the complexity of drafts. this model of revision-based generation has been implemented in revisor  a revision system that employs a non-monotonic unification framework to compose and edit multiple drafts of explanations. r e visor focuses on clause-aggregation revisions  a problem that has been the subject of increasing attention from a variety of perspectives in the natural language generation community  dalianis and hovy  1; robin  1 . 
　given an initial ground level discourse plan produced by a discourse planner  revisor transforms the ground level plan to an abstract discourse plan  which contains only the most critical lexical  syntactic  and semantic features needed for revision. this abstract discourse plan represents the first draft. revisor then iteratively refines draft after draft by applying and revision operators and evaluating the resulting discourse plans with respect to discourse and style constraints. when a final draft has been constructed  it is transformed to a ground level discourse plan which is then realized in natural language. 
　to evaluate the quality of explanations produced by the revision-based model  revisor was introduced into a full-scale explanation system that includes a discourse planner  a functional sentence planner  and a systemic/functional surface generator. in a blind comparative study  a corpus of scientific explanations produced by two versions of the explanation system  one without 
revisor and one with revisor  was evaluated by a panel of judges. the results of the study are encouraging and suggest that revision-based generation is a promising paradigm for explanation systems. 
1 revision-based generation 
classically  explanation generation is decomposed into three subtasks: 
  discourse planning: constructing a discourse plan that specifies the propositions to be communicated and their organization. 
  sentence planning: mapping semantic specifications to syntactic roles. 
  surface generation: mapping syntactic roles to natural language. 
each module must in one pass take into account a multitude of complex constraints to interpret the specifications given to it and to factor in constraints at its own level. 
　to illustrate  consider the issue of clause aggregation  a central problem in multi-sentential explanation generation. suppose an explanation system for the domain of botanical anatomy and physiology is given the task of constructing an explanation of the structure of plant ovaries. expressed individually  the propositions extracted from a knowledge base on botanical anatomy and physiology might be realized in the text shown in figure 1. although this passage accurately communicates the selected propositions  the terseness of each sentence makes the overall effect disjointed. merely irritating in one example  explanations such as this would be intolerable for extensive user interactions with an explanation system. 
　to avoid producing a series of abrupt sentences  a discourse planner could be assigned the task of predicting how particular concepts will be realized in order to optimize clause aggregation decisions. however  this approach violates modularity considerations and does not the ovary is a kind of plant reproductive structure. it is below the style. it is the location of double fertilization. it is located in the flower. it is found in angiosperms. it is contained in the gynoecium. it is connected to the style. it contains several ovules. the subregions of the ovary include the ovarian locule  the ovarian wall and the funiculus. the ovary is the origin of the f r u i t . it is organized as a layer of cells. it is shaped like a sphere. 
figure 1: initial explanation of ovary 
the ovary is a plant reproductive structure that is the location of double fertilization and that is below the style. it is located in the flower in angiosperms. it is contained in the gynoecium and it is connected to the style. it contains several ovules  it includes the ovarian locule  the ovarian wall and the funiculus  and it is the origin of the f r u i t . it is organized as a spherical layer of cells. 
figure 1: revised explanation of ovary 
scale well: it significantly complicates the design of the discourse planner by forcing it to attend simultaneously to content selection  discourse organization  and complex syntactic issues. alternatively  the propositions could be grouped by a single-pass realization system. this approach is also ineffective. reorganizing  aggregating  and realizing the specifications in a single pass poses innumerable difficulties: the realizer would somehow have to anticipate the cumulative effects of all aggregation decisions with regard to grammaticality  subordination  and lexical choice. 
　in contrast to single-pass generation  revision-based generation temporally distributes opportunities for making decisions. it is hypothesized that human writers produce extended texts in multiple drafts to help them cope with the enormous complexities of writing  hayes and flower  1 . introducing a revision component1 into explanation architectures can accrue the same benefits. by interposing a revision system between an explanation system's sentence planner and its surface realizer  we can enable the explanation system to construct texts by iteratively considering individual decisions  building drafts that incorporate those decisions  evaluating the drafts  and making and retracting additional decisions until an acceptable text has been constructed. for example  an explanation system with a revision component could iteratively refine the choppy text shown in figure 1 to produce the more fluid prose in figure 1. 
　however  because of the enormous number of factors that contribute to each revision decision  previous ef-
     1  revision-based generation is similar to incremental generation  e.g.   smedt  1   but incremental generators are typically monotonic  i.e.  they do not retract decisions. 
	callaway & lester 	1 

forts to develop computational models of revision have not fared well in these respects. some never yielded implemented systems  vaughan and mcdonald  1; yazdani  1 . one   y h   operates in a toy domain with highly domain-specific revision operators  gabriel  1 . others produced restricted proof-of-concept systems that work on only a few examples and do not include facilities for performing multi-sentential revisions  
e.g.  weiver  inui et a/.  1   or a principled formalism for non-monotonically retracting revision decisions  e.g.  kds  mann and moore  1 . attacking the full complexities of revision  streak  robin  1  is by far the most successful revision-based project to date. it generates texts that are both clear and fluid  but it operates only on single  albeit very complex  sentences and suffers from serious efficiency problems  requiring  for example  more than 1 hours to produce one particular sentence. 
1 revising in abstraction spaces 
revising multi-sentential explanations can be cast as a search problem: alternative discourse plans are states; editing actions that manipulate discourse plans are operators. given an initial discourse plan  a revision system iteratively selects an operator to create a revised discourse plan which is then evaluated against the given stylistic criteria. discourse plans which are judged to produce superior texts are selected and further revised. revision-based generators that operate in interactive environments must provide efficient solutions to evaluating candidate operators and representing revision histories. to address these problems  we have developed re visor  a revision system that dynamically improves multisentential explanations by searching through an abstraction space of discourse plans. rather than enacting revisions by reasoning about all of the syntactic and semantic details of discourse plans  it abstracts away all but the most essential aspects of a discourse plan and performs all manipulations on drafts encoded in the abstracted representation. by conducting its search through this abstraction space  it efficiently evaluates candidate revision operators  applies selected operators to create new drafts  and retracts operators to return to previous drafts. revisor  figure 1  dynamically improves the explanation with the following three-phase process: 
1. discourse plan abstraction: it maps the initial ground level discourse plan to an abstract discourse plan by excising  and storing away for future use  all but the most essential syntactic and semantic features of each sentential specification. discourse constraints  which specify inter-sentential organizational requirements  as well as focus constraints  are passed directly to the revision system. 
1. abstract discourse revision: it iteratively applies revision operators to the abstract discourse plan to create a draft tree  where each node is a draft that was derived from its parent by applying a revision operator. 

figure 1: example sentential specification 
1. discourse plan grounding: it reconstitutes abstract discourse plans as ground level discourse plans by first locating the syntactic and semantic information that was stored away during the abstraction phase and then integrating it into the structures specified by the abstract discourse plan. 
the revised ground level discourse plan is then passed to a surface generator  which produces the final explanation. 
1 	a b s t r a c t i o n 
given a ground level discourse plan  the first task is to remove the syntactic and semantic features that are not essential for revision operations. because revision systems require knowledge about the syntax of elements in the discourse plan  discourse plans must include some features of the sentential specifications produced by a sentence planner. for example  figure 1 shows the sentential specification for the sentence   fascicular cambium is organized as a layer of cells.  discourse plans house a collection of such sentential specifications  one for each protosentence1 to be generated. the approach of revising with abstract discourse plans is based on the observation that it is possible to enact a broad range of text-improving revisions by considering only a small subset of features encoding protosentences. it is therefore possible to temporarily extract these details  manipulate abstracted versions of the representation  and then re-introduce the details prior to realization. 
     1  we refer to the typically simple sentence that would be generated from a single sentential specification in an unrevised discourse plan as a protosentence. 


figure 1: the revision-based explanation architecture 

　to illustrate  suppose a revision system is given the task of optimizing explanations with respect to clause aggregation. in enacting clause aggregation revisions  it need not consider the full collection of features such as those in figure 1. for example  to combine the clauses  fascicular cambium is connected to extraxylary fibers  and  fascicular cambium is generated from procambium  into the clause  fascicular cambium is connected to extraxyiary fibers and is generated from procambium   a revision operator need not consider adjectival modifiers such as  extraxyiary.  nor must it consider the semantic role played by fascicular cambium in each clause  the tense of the verbs  or specific lexical knowledge. this is not to say that this knowledge is not ultimately required to generate the final sentences  it is   nor that it could not in principle be used in some revision decisions  it could . rather  the decision to combine the clauses with a particular technique  in this case  conjunctivization  can be made without detailed knowledge of the constituents. 
　revision systems must retain all sentential knowledge that is critical for making revisions but can excise all features that are not essential. because revisor focuses on clause aggregation revisions  it requires knowledge of a discourse plan's clausal semantics  fundamental syntactic type  and the concepts holding the subject and object roles. hence  for the sentential specification shown in figure 1  it retains the features specifying that the clause is an organizational-clause  that it is currently expressed as an independent-sentence  and the identities of its subjects and objects. it abstracts away features representing: 
  semantic roles: agent  possessor  identifier  etc. 
  verb features: voice  tense  particles  etc. 
  modifiers: noun modifiers  adjectival modifiers  prepositional phrase modifiers  etc. 

  lexical features: number  lexemes  etc. 
　to ensure that it can later reconstitute a fully specified ground level discourse plan  it retains anchors for the excised semantic  syntactic  and lexical details. depending on the genre of the text to be revised  large fractions of discourse plans' sentential specifications can be excluded from consideration by revision operators. for example  revisor  which operates on scientific expository texts  typically abstracts away 1% of the features in sentential specifications. 
1 	a b s t r a c t discourse revision 
　the abstractor provides the abstract revisor with four sets of information. first  it supplies an initial draft 
	callaway & lester 	1 

do  which consists of an ordered sequence of clause elements  where each clause element represents a protosentence. second  it supplies a set of discourse constraints cd  which specify a partial order on the clause elements. these are passed directly from the discourse planner. for example  the discourse planner might pass a constraint stating that  for an object explanation  all clause elements that communicate detailed propositions about an object must follow all other clause elements. third  the abstract revisor is given a set of focus constraints cf  which restrict marked concepts to occupying subject or subject-modifying positions. fourth  the abstract revisor employs its own global revision constraints cgthese impose stylistic restrictions  e.g.  limiting sentence complexity by not permitting any sentence to express more than n propositions. 
　to dynamically improve an explanation  the revision system composes a tree of drafts. beginning with the initial draft  it conducts a depth-first exploration of the abstract discourse space. each iteration of the revision algorithm  figure 1  consists of selecting a candidate revision operator r and evaluating its pre-conditions against the current draft di. if r's pre-conditions are satisfied  the revision system determines whether a new draft d i +i would violate any discourse constraints  focus constraints  or global revision constraints. if so  it considers other operators or backtracks; if not  it performs r's actions to construct di+1. in the worst case  i.e.  when the system is unable to construct an acceptable revision  this process continues until all revision operators have been considered for all unrevised clause elements in the current draft. 
   revision operators  figure 1  consist of  1  preconditions  which are predicates on the syntactic and semantic types of the clause elements in a draft that must hold if the operator is to be applied  and  1  actions  which specify the changes to be enacted to create a  child  draft from a  parent  draft. the revision system employs two types of revision operators: 
  transformational operators: aggregate adjacent elements of abstract discourse plans. 
  migrational operators: permute adjacent elements of abstract discourse plans to enact reorganizations. 
given two-clause elements c1 and c1 in a draft  transformational operators aggregate them by modifying their features to create c'1 and c1  where either c'1 is subordinate to c'1 or vice versa. for example  suppose the aggregate-organizational-with-perceptual operator is applied to two clauses  where c1 =  the ovary is organized as a layer of cells  and c1 =  the ovary is shaped like a sphere.  because classifying adjectives that modify objects of clauses always immediately precede the objects  the operator will produce an aggregation consisting of a c'1 and a c'1 that  if no further revisions are applied  will be realized as  the ovary is organized as a spherical layer of cells.  by interleaving the application of transformational and migrational operators  the revision system can explore a large portion aggregate-organizational-with-perceptual operator type: transformational pre-conditions: 
 syntactic-type  c1 independent-sentence  
 semantic-type  c1 organizational-clause  
 syntactic-type  c1 independent-sentence  
 semantic-type  c1 perceptual-clause  
 subject-concept  c1  s1   subject-concept  c1  s1  
    =  s1  s1  actions: 
 remove 
 syntactic-type 
 c1 independent-sentence   
 add 
 syntactic-type 
 c1 object-adjectival-modifier   
 make-subordinate  c1  
figure 1: an abstract revision operator 
of the abstract discourse space. 
　the constraints passed to the revision system restrict the application of revision operators in two ways. first  by employing focus constraints and global revision constraints  the revision system avoids drafts that would be created by the inappropriate application of transformational operators. second  by employing discourse constraints  it avoids drafts that would be created by the inappropriate application of migrational operators. because discourse constraints induce  boundaries  in drafts across which clause elements cannot be transported  they prevent the revisor from degrading the organizational structure specified by the discourse planner. 
1 	g r o u n d i n g 
when the abstract revision phase is complete  the grounder reconstitutes the abstract discourse plan as a ground level discourse plan by  1  locating the syntactic and semantic information that was stored away during the abstraction phase and  1  integrating it into the structures specified by the abstract discourse plan. because it stored away anchors for the detailed information about the constituents of the clause elements during the abstraction phase  it can properly restructure the pieces according to the new organization specified in the final abstract discourse plan. 
　to reconstitute the corresponding ground level discourse plan  it iterates across the clause elements of the final draft of the abstract discourse plan. recall that clause elements are organized as a sequence of independent sentences  each of which may be accompanied by some number of modifiers. as the grounding algorithm iterates through each clause element c  it restores the sentential specification for c by following the anchor link stored in the revised abstract discourse plan for c. in addition  it retrieves the sentential specifications for each modifier of c through its anchor links  and restructures it based upon the new syntactic and semantic type tags 

in the revised abstract discourse plan. this is accomplished by applying a series of sentential specification rewriting operators  each of which is targeted toward restructuring a sentential specification of a particular syntactic type. the rewriting operators remove subsets of the subordinate sentential specifications and insert them into the appropriate locations in the superordinate specification. 
　the net result of the grounding phase is a sequence of modified sentential specifications whose organization corresponds to the revised abstract discourse plan. these specifications are then passed to the surface generator for realization. after applying a simple pronominalization strategy  i.e.  much less sophisticated than that presented in  dale  1    the surface generator constructs the final text. 
1 a unification-based implementation 
the revision-based approach to explanation generation has been implemented in revisor  a revision system that improves explanations by creating multiple drafts represented in abstract discourse plans. revisor operates in concert with a full-scale discourse planner   k n i g h t    lester and porter  1    a robust sentence planner  fare   callaway and lester  1    a surface generator with a large systemic/functional grammar  fuf   elhadad  1l    a large-scale knowledge base in the domain of botanical anatomy and physiology  porter et al.  1   and a rich lexicon with an average of approximately 1 systemic features per entry. it employs 1 revision operators to enact semanticspreserving clause aggregations. through both transformational and migrational revision actions  it creates a variety of aggregations with prepositional phrases  coordinations  contrastive conjunctions  adjectival modifications  nonrestrictive subject relative clauses  and restrictive relative clauses. 
　the greatest challenge in implementing a scalable revision-based explanation system  i.e.  a system that can generate a variety of explanations rather than one or two examples  is efficiently representing the draft tree. to address this problem  revisor is implemented in a unification formalism which permits it to efficiently represent multiple competing drafts: the state of unification at each point in the computation represents the draft tree implicitly. in particular  revisor is implemented in nonmon-fuf  a non-monotonic version of f u f  elhadad  1  devised by the authors to accelerate revision decisions. in contrast to classical  monotonic  unification  non-monotonic unification allows features to be removed from the cumulatively formed unification expressions  thereby permitting greater flexibility in dynamically modifying drafts during revision. 
　revisor dynamically improves explanations by rewriting choppy explanations consisting of many terse sentences to compose fluid explanations with fewer but more complex sentences. for example  when requested to explain the structure and function of plant ovaries  the explanation system without revisor generates the explanation shown in figure 1. however  with revisor  it considers approximately 1 drafts  finally producing the more fluid explanation shown in figure 1. 
1 evaluation 
to evaluate the revision-based approach to explanation generation  we conducted an empirical study of r e v i sor's performance on the task of generating scientific explanations. in this study  revisor generated a corpus of multi-sentential scientific explanations by operating with the discourse planner  sentence planner  and surface generator noted above. it produced 1 explanations about concepts in the domain of botanical anatomy and physiology  e.g.  endodermis  central mother cells  microspore   each spanning on average 1 sentences. 
efficiency. revisor's execution times were measured as it generated the 1 explanations. running on a dec alpha  it required on average less than 1 minute to generate each explanation. of this time  revision per se required 1 seconds. 
domain-specific scalability. we undertook an informal two-phase training-and-test experiment  analogous to studies conducted in machine learning research. first  we developed revisor's revision operators with a set of  training  concepts. in this training phase  we experimented with different versions of the operators to generate a variety of explanations about 1 concepts. we then froze the operators and observed their effects on the remaining 1 concepts. it was found that the revision operators were applicable to other concepts in the domain  as judged by their ability to perform their intended function of clause aggregation. revisor revised initial  choppy  explanations from the  test  set with an average of 1 sentences into improved smoother explanations with an average 1 sentences. 
prose quality. we conducted a formal blind prose study with a panel of judges. first  the revisor-iess explanation system generated explanations of the 1 concepts. second  the explanation system with revisor generated explanations of the same concepts. finally  the 1 pairs of explanations were presented to a panel of 1 judges  none of whom had specialized knowledge of the domain or were aware of the purpose of the study. the following conditions held throughout the study.  1  no modifications were made to the revision operators after their initial development on the first 1 concepts. hence  1 of the 1 revised explanations presented to the judges were produced with revision operators created by analyzing only the first 1 concepts.  1  none of the explanations were marked for the judges as being  unrevised  or  revised.   1  the order of explanations in each pair  i.e.  whether the unrevised explanation preceded the revised explanation or vice versa  was randomized. judges 
	callaway & lester 	1 
were asked to indicate the superior explanation for each pair  yielding the following results: 
  1 of the 1 judges preferred the revised explanations for most  1% or more  of the pairs. 
  1 of the 1 judges preferred the revised explanations for most  1% or more  of the 1  test   i.e.   nontraining   pairs. 
  1 of the 1 judges preferred the revised explanations for every one of the 1 pairs. 
1 conclusion 
revision-based explanation generation offers a promising means of dynamically improving explanations. with virtually no increase in runtime  introducing a welldesigned revision component into an explanation system can significantly increase the quality of its prose. to combat the complexity of revision  a revision system can search through an abstraction space of discourse plans to efficiently compose and evaluate a large number of drafts. this approach has been implemented in a nonmonotonic unification formalism and empirically evaluated in a scientific domain. results of this study suggest that revision-based explanation systems can  1  dynamically improve explanations  as demonstrated by a blind experiment by a panel of judges  and  1  they can do so in an efficient manner. this work represents a promising step toward the goal of interactive explanation systems that produce human-quality prose while operating under realtime constraints. one of the greatest challenges ahead lies in expanding realtime revision techniques to support more sophisticated lexical choice. we will be exploring these issues in our future research. 
acknowledgements 
the authors wish to thank: bruce porter for making available the botany knowledge base; michael elhadad for creating and generously assisting us with fuf: and stuart towns for insightful comments on an earlier draft of this paper. 
