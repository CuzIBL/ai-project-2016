 
　　　an approach to generalizing number in explanation-based learning is presented. generalizing number can involve generalizing such things as the number of entities involved in a concept or the number of times some action is performed. this issue has been largely ignored in previous explanation-based learning research. instead  other research has focused on changing constants into variables and determining the general constraints on those variables. in the approach presented  generalization to n is triggered by the detection of inference rules of a specified syntactic form. when one is found  it is extended into the rule that results from an arbitrary number of repeated applications of the original rule. if the preconditions of the extended rule are met  the results of multiple applications of the original rule are immediately determined. there is no need to apply the underlying rule successively  each time checking if the preconditions for the next application are satisfied. 
i introduction 
     this paper addresses the important issue in explanationbased learning of generalizing number. generalizing number can involve generalizing such things as the number of entities involved in a concept or the number of times some action is performed. this issue has been largely ignored in previous explanation-based learning research. instead  other research has focused on changing constants into variables and determining the general constraints on those variables. 
     consider the leap system  l . the system is shown an example of using nor gates to compute the boolean and of two or's. it discovers that the technique generalizes to computing the boolean and of any two inverted boolean functions. however  leap cannot generalize this technique to allow constructing the and of an arbitrary number of inverted boolean functions using a multi-input nor gate. this is the case even if leap's initial background knowledge were to include the general version of demorgan's law and the concept of multi-input nor gates. generalizing the number of functions requires alteration of the original examples explanation. this generalization cannot be performed using their goal regression algorithm alone. 
     ellmans system  also illustrates the need for generalizing number. from an example of a four-bit circular shift register  his system constructs a generalized design for an arbitrary four-bit permutation register. a design for an n-bit circular shift register cannot be produced. as ellman points out. such generalization  though desirable  cannot be done using the technique of changing constants to variables. 
many other explanation-based generalization algorithms 
 1  also cannot alter the structure of their explanations. no additional objects nor inference rules can be incorporated into the explanation. these algorithms work by changing constants in the observed example to variables with constraints. another algorithm  allows for the elimination of easily-reconstructed 
* this research was partially supported by the national science foundation under grant nsf 1st 1. 
1  university of illinois cognitive science/artificial intelligence fellow. 
1 	knowledge acquisition 
details. however  extensive augmentation of the explanation can be often required to produce the appropriate concept. 
     many important concepts require generalizing number. for example  physical laws such as momentum and energy conservation apply to arbitrary numbers of objects  building blocks-world towers requires an arbitrary number of repealed stacking actions  and setting a table involves an arbitrary number of guests. this paper presents an explanation-based approach to the problem of  generalizing to n.  
ii an approach 
     observations of repeated application of a rule or operator may indicate that generalizing the number of rules in the explanation may be appropriate. however  alone this is insufficient. to be conducive to number generalization there must be a certain recursive structural pattern. that is. each application must achieve preconditions for the next. for example  consider stacking blocks. the same sort of repositioning of blocks occurs repeatedly  each building on the last. we adopt the vocabulary of predicate calculus to investigate this notion of structural recursion. the desired form of structural recursion is manifested as repeated application of an inference rule in such a manner that a portion of each consequent is used to satisfy some of the antecedents of the next application. figure 1 illustrates the concept of repeated rule application. 

     
p   as illustrated in figure 1. the antecedents of this rule involve three qualitatively different types of variables.  the differences between the three types will become clear when the extended version of this rule is described.  predicate p involves all three types of variables  while predicate r specifies a necessary relationship between the  i-1 th and ith collection of x 's.* predicate s constrains the  i-l th collection of x's and predicate t constrains the uh collection. lastly  the uh collection of y s are partially defined by terms in the  i-1  th application. 
     chaining together several applications of rule 1 produces rule le. 
   
     in this extended inference rule all references to the yij for i  1 are eliminated and the z1 terms remain unchanged from one application of the original rule to the next. hence  besides the initial situation  all that needs to be specified for an arbitrary number of applications of rule 1 is a sequence of x  j terms. the predicates r. s. and t place constraints on possible sequences of x s. in particular  the predicates s and t constrain which terms can be members of the sequence  while predicate r specifies the relationship between successive members of the sequence. 
     the general form of a sequence is shown below. it consists of an ordered collection of p-ary vectors. 

iii some examples 
     two simple examples that concretely illustrate the above procedure are presented below. 
a. blocks world 
     imagine an explanation-based learning system that deals with the blocks world. assume that in the course of its operation this system has to determine the position of the top of block which is resting on a table. also assume that in the course of doing this it produces an explanation structure that can be transformed into rule 1 below.  figure 1 illustrates this rule.  this rule is in a form that matches rule 1. rule 1e is the extended form of rule 1.  in these rules  all terms beginning 
with a   are universally quantified variables.  
		 1  
     ' although not done here for reasons of clarity  the approach presented can be extended to situations where there are relations among the  i-k w through the ith collections. 
figure 1. determining the y-position of a block 
     in rule 1e the sequence is made explicit. for all consecutive pairs of sequence elements  the first must be on the second. in addition  the function +' is introduced. this recursive function has two arguments: a sequence of numbers and a  seed  number. it maps these into a single number - the sum of all the numbers. the function derived-sequence takes a sequence and a unary function and maps them into another sequence - the one which results from applying the function to each member of the original sequence. 

     the extended rule can be used to find the y -position of a block supported by several other blocks when the y -positions of the underlying blocks are not directly known. all that needs to be known is the heights of each block and the y-position of the table top  or the y-position of one intervening block . in this case the extended rule is obtained from an example that involved no repeated actions nor structures. 
     an important task for a system that generalizes number is to loosen the preconditions of a rule as far as possible while still maintaining the veracity of the rule. also  as much guidance as possible should be provided so that a problem solver can most 
easily determine when a rule is both applicable and appropriate. 
     imagine using rule 1e in a backward-chaining fashion. if a problem solver is to find the y -position of an object it needs to choose a sequence that satisfies the specified constraints. this task is simplied if the preconditions are specified in terms of sets or bags'. rather than sequences. in this case  there is no need to test each permutation of a given collection of elements. if a bag satisfies the rules preconditions  then any sequence derived from that bag suffices. other derivable properties  such as the cardinality of the bag or the length of the sequence  might also usefully constrain a problem solver. 
     one case where it is easy to specify the preconditions in bag terms occurs when there are no inter-element constraints  i.e.  predicate r in rule 1 is not used . if an inter-element predicate does appear in the preconditions  the properties of that predicate determine how loosely the preconditions can be expressed. for example  if r is an equivalence relation  that is. r is reflexive  symmetric  and transitive   then the elements must form an equivalence class  a property that is order independent. 
     in the above example  r is  the atransitive version of  on. in bag terms  rule 1e requires a collection of elements where.  i  except for one element {object1  . every element is on one and only one other element   ii  except for possibly one element   object   . every element has one and only one element on it  and  iii lhe sum of the heights of all elements other than object   plus the y -position of object 1 equals  yn . if a bag with these properties is obtained  the necessary sequence can easily be constructed. 
       a hag  or multi set  is an unordered collection of elements in which an element can occur more than once. 
	shavlik and dejong 	1 
     

　　several other approaches to generalizing number have been recently proposed. prieditis  has outlined plans for a system which learns macro-operators representing sequences of repeated strips-like operators. while we agree very much with the spirit of prieditis' work  we feel that strips-like operators impose unwarranted restrictions. for one thing  our use of predicate calculus allows generalization of repeated structure and repeated actions in a uniform manner. in the fermi system   cyclic patterns are recognized using empirical methods and the detected repeated pattern is generalized using explanationbased learning techniques. however  unlike the techniques presented in this paper  the rules acquired by fermi are not guaranteed to always work. after a significant amount of work  a learned problem-solving strategy may terminate unsuccessfully. a third system. physics 1  1. 1   differs from the above two approaches in that the need for augmenting explanation structures is motivated by an analytic justification of an example's solution and general domain knowledge. in a sample problem  information about number  localized in a single physics formula  leads to a global restructuring of a specific solution's explanation. however. physics 1 takes advantage of properties of mathematical calculations. to be a broad solution of the generalization to n problem. non mathematically-based domains must also be handled. 
v conclusion 
　　most research in explanation-based learning involves relaxing constraints on the entities in a situation  rather than generalizing the number of entities themselves. this paper presents an approach to generalizing to n in explanation-based learning. generalization is triggered by the detection of rules of a certain syntactic form  i.e.. rule 1   and a technique for extending these rules is presented. the extended versions are modified so that a problem solver can efficiently apply them. this involves attempting to expression the preconditions for these rules in terms of order-independent data structures such as sets and bags. if the preconditions of the extended rule are met. the results of multiple applications of the underlying rule are immediately determined. there is no need to apply the rule 
successively  each time checking if the preconditions for the next application are satisfied. 
　　a first computer implementation of the ideas presented here has been developed. the bagger system  analyzes explanation structures and attempts to construct inference rules of the form of rule 1. when one is found  it is extended into the rule that results from an arbitrary number of repeated applications of the original rule. this system is being tested on problems from various domains  including the blocks world  digital circuit design  and mathematical problem solving. 
