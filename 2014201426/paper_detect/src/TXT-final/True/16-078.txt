 
¡¡¡¡we are currently extending the rewrite system laboratory reve to handle associative-commutative operators. in particular  we are incorporating a set of rules for boolean algebra that provides a refutationally-complete theorem prover and a new programming paradigm. to that end  we describe methods for proving termination of associativecommutative systems. 
1. introduction 
¡¡¡¡term-rewriting systems have been widely used in formula-manipulation and theorem-proving systems. as programs  they have a very simple syntax and semantics based on equalities  and are declarative with no explicit control. in addition  canonical systems  i.e. systems that always rewrite a term to a unique normal form  are used as decision procedures for equational theories.  for a survey of the theory and application of rewrite systems  see huet and oppen .  

where u and v are variables of the rewrite system and match any term  x is the symbol with respect to which an expression is differentiated  and a is any atomic symbol other than z. 
¡¡¡¡unfortunately  associativity and commutativity of functions cannot be handled by including these axioms as rules. instead  special unification algorithms are used to take associativity and commutativity into account. let r be a rewrite system for a set of terms t fug   constructed from 
 this work was supported in part by nsf grant mcs 1. 
   on leave from university of illinois. 
jieh hsiang 
department of computer science 
state university of new york 
stony brook  ny 1 
david a. plaisted** 
computer science laboratory 
sri international 
menlo park  ca 1 
associative-commutative function symbols f and regular symbols g. the equat ional theory ac consists of the axioms 
	f u v  	= 	/ v.u  
	f u f v w   	- 	f f u v  w   
for each symbol fef. a rule l+r in r is applied to a term tet if / matches any subterm s of t  under the assumption of associativity and commutativity of symbols in f  i.e. if there is a term t' that is-equal to t in the theory ac  and there is a substitution a for the variables of /  such that  t 1 =  for some subterm s of /' . 
¡¡¡¡in the next section  we describe two applications of acrewriting in the context of the reve term rewriting environment  lescaune  : a refutat ionally complete theorem proving strategy based on a canonical rewrite system for boolean algebra  and a programming paradigm for computing with ac arithmetic operators. in section 1  we suggest methods for proving termination of rewrite systems containing a c operators. 
1. applications and implementations 
¡¡¡¡the kuuth-bcndix  completion procedure was introduced as a means of deriving canonical term-rewriting systems to serve as decision procedures for given equational theories. the procedure creates new rewrite rules to resolve ambiguities resulting from existing rules that overlap. the reve environment provides an interactive mechanism for generation of canonical rewriting systems  allowing the user to specify and construct  semi-automatically  any of several different orderings for completion of his system. using completion  reve is able to prove inductive theorems without explicitly invoking induction  see  for example  huet and hullot  i1  . an implementation of a c-rewriting has been incorporated into the reve term rewriting environment. to extend the system to our purposes  we have added an ac unification algorithm  stickel    and a mechanism for efficiently finding basis solutions to the linear diophantine equations which arise from it  huet  . in addition  the completion procedure has been modified to handle associative-commutative operators  see peterson and stickel  . we plan a series of experiments using this system. in particular  we are interested in using ac unification and a complete rewrite system for boolean algebra for refutational theorem proving and logic programming. 

n. dershowitz 1 

where ~ is 'not'  a is 'and'  v is 'inclusive-or   c  is vxclusive-or  and   is 'implies'. both a and  c  are implicitly ac operators. that means  for example  that the rule uau- u applied to  p/ q / p yields pf q. since these func-
tions are associative  there is no significance to the parent hesitation  and accordingly terms are  flattened  by removing embeddings of associative functions symbols  e.g.  p/ q l p is written p/  q/ p. 
¡¡¡¡that this system is sound follows from the fact that each rule is a proposit ional equivalence and a and  c  are in fact associative and commutative. any term that is not a sum of conjunctions is reducible  since it must either contain a symbol other than a  in which case one of the first three rules can reduce it  or else it must contain a conjunction of a sum  in which case it is reducible by the fourth rule. the methods of the following section can be used to prove termination of the rules. the system is confluent  since all its criti-
cal pairs reduce to the same term. when  as in this example  some of the functions on the left-hand sides of / or /' are associative and commutative  then an associativecommutative unification algorithm  livesey and siekmann rewrite systems may be used as  logic programs  
 kowliski    in addition to their straightforward use for computation by rewriting. the programming paradigm described below allows for the advantageous combination of both computing modes. the result is a prolog-like programming language the main differences being that rewrite rules are equivalences  rather than implications in horn-clause form  and that the completion procedure acts as the interpreter  rather than resolution. hogger  suggested the use of equivalences to specify prolog programs. 
¡¡¡¡for example  the following is a program to compute the quotient and remainder of two integers: 

  stickel   is used to find sigma such that / sigma  and /'  sigma  overlap. the definition of  overlap  must include cases in which two rules have overlapping subtcrms of the same associative-commutative symbol  lankford and ballantyne   peterson and stickel  . to do this  pseudo-rules / / u'  - / r  u'   are considered for each rule whose left-hand side / has an associative-commutative outermost symbol /. all such critical pairs must reduce to the same terra up to permutation of arguments of the associative-commutative symbols. 

1 n. dershowitz 


n. dershowitz 1 

1. associative path ordering 
¡¡¡¡in the recursive path ordering  to show s rpot  it is sometimes necessary to show that a given subterm of s is greater than more than one subterm of    but it is never necessary to show that a given subterm of t is less than more than one subterm of s. therefore  if we transform s and t and can make choices in the transformations  it is easy to show that for all choices for s there is a choice for t such that 

s t. however  it is much harder to show the reverse  for all choices for t there is a choice for s such that s t . with this motivation  we define the associative path ordering as follows: with term t we associate a set m t  of transforms of t. associative path ordering if 
thus  the sets m t  are 
ordered by their small elements. m t  is formed by successively applying three transforms to the  flattened  version of t.  note that during flattening  / u  is replaced by u when / is associative.  the role of m1 is to transform subterms  of m1 to transform terms at the top level  and of m1 to again transform subterms. composing the three operations  we get  the transforms are given by: 
¡¡¡¡note that the condition vuea/ *  ;lr€a/ 1 u   rpo v depends only on the minimal elements of m s  and m{t . hence we need only compute minimal elements of a/ /  at each step  including subterms of t . this can greatly speed up the computations. in fact  if the ordering on operators is total  only one minimum element need be kept. we have implemented the associative recursive path ordering and are making it interactive for ac completion in reve and are working on comparing terms with variables in  apo. 
