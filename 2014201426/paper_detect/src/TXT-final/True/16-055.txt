 
this paper presents a fast  uniform  parallel search algorithm for robot route planning and obstacle avoidance. the algorithm is equally applicable to real or synthetic data and overcomes many problems associated with other route finding methods. the time taken to generate a route through a an arbitrarily complex environment has been reduced to an insignificant fraction of the time taken for the robot to traverse the route. furthermore the time taken to create the route is independent of environment complexity and only linearly proportional to route length. actual results and timings from running the algorithm on the icl distributed array processor and executing the resultant path on a mobile robot are presented. approximated by a circle when the occasion demands. the vehicle is equipped with various sensors  notably an ultrasonic rangefinder and a standard video camera. 
   a program residing in the robot's 1 based microcomputer allows the robot to map its environment using the rangefinder. figure 1 shows such a map  of one of the offices attached to the laboratory  there is a table in the middle of the room. eight radial scans are made  each comprising 1 rotations of 1 degrees followed by a range reading. the figure represents an area of 1 by 1 inches. throughout this mapping process and route execution the precision and repeatability of the stepper motors is relied on to maintain navigational accuracy. 

1 route planning for mobile robots. 
   one of the most important components of the software for a mobile robot system is a route planner  to navigate the vehicle through a completely  or partially mapped environment. such programs split into two main sections  the representation of the environment and a method of searching possible route paths between the current robot position and some new location  avoiding known obstacles. 
¡¡¡¡it was primarily the poor quality of the sensor data obtained as a map that prompted this investigation. it was considered that it would be less effort and the results would be more reliable if a method could be developed that completely avoided the need for detailed analysis and line fitting to this type of data. in the event  and partly due to the availability of the icl distributed array processor  dap  a cellular representation of the problem  coupled to a parallel search that spreads through a lattice of free points was chosen. 

   well established methods of describing the environment include approximating all obstacles as polyhedra  nilsson   or calculating minimum enclosing circles or ellipses  moravec . in either case the standard approach to the actual planning is to expand the environment representation by a 'centre to edge' distance for the robot. thereafter the robot may be treated as a moving point  rather than a swept volume. brooks  describes a method in which free space is represented by overlapping 'generalised cones'  matsushiraa and oda  describe a method for robot motion in an unknown environment using a tactile sensor. 
ii the mobile robot. 
   we have a mobile robot with which various experiments may be performed. it is of a very conventional design. two stepper motors independently drive wheels equidistantly spaced from the midpoint along the lateral axis. the base  and hence the groundplan  is octagonal measuring 1 inches across the flats. it may therefore be reasonably 

   figures 1 and 1 show the results of the algorithm. the total robot environment is represented 


1 c. witkowski 
by a 1 lattice of points  some of which will be occupied by obstacles that will have to be avoided during robot motions. these points are shown as asterisks    . lattice points which become occupied during the expansion process  so that the robot may be treated as a point  are shown as  -   the current or 'start' position of the robot is shown by a  s  and the desired  'goal' position by  g . points indicated by  r  are  possibly many  paths from start to goal with equal path lengths  in terms of horizontal  vertical and diagonal movements. intermediate level robot software will interpolate from  s  to  g  via those route points labelled  x  during route execution  
i i i the icl distributed array processor. 
   the dap  reddaway   is a highly parallel architecture machine cast in the multiple data single instruction  mdsi  mould. it may be best viewed as a matrix of 1 by 1 single bit processors linked to a common control unit  each having l1kbits of memory with a cycle time of 1ns. this memory is shared by the host 1 processor  entry to the dap and all i/o is mediated via this host machine. the dap may either be programmed in machine code or dap-fortran. dap-fortran is augmented with a matrix data type  and others  with an implicit 1 dimensionality and all elements are processed simultaneously. these may be of type real  integer  character and logical. various data structures within the program are stored as logical matrices  1 bits   for instance: 
environment - the map as input to the program. 
robot shape - the robot ground plan. 
grown world - environment expanded by r1tjshape. from point - single bit set indicating star  node. 
to polnt - single bit indicating goal node. 
r1t path - potential path points. n1de mask - robot turn points. 
iv the algorithm. 
   the algorithm proceeds in a number of stages  the output from each being a logical mask  each bit then represents some state of its corresponding point in the lattice. 
   step 1 - environment expansion - the environment mask is shifted  using the dap's inbuilt planar shift functions  by an amount specified by the various bits set in r1tj1hape and the result logically ored with gr1wn w1rld. the effect of this routine is clearly seen in figure 1. 
	step 1 - endpoint 	checks - from point and 
t1 p1int are logically anded with grown w1rld  a truie result indicates that the robot either  is  or is being sent to somewhere it cannot be. 
   step 1 - lattice search - this is a two pass routine. before each pass an integer matrix  spread  is set up that will indicate the distance of each unoccupied lattice point from the start  it is initialised to some large value. 
	step 	1 	- 	first 	pass 	- beginning with only 
from point set  each of its eight directly connected neighbours are tested. the value for each point in spread is updated with a new path distance back to the start point if it is 1  free point  and 1  it is previously unvisited and 1  the new distance is smaller than its current estimate. each of the 


eight directions is tried in turn  though all lattice points are evaluated in parallel  diagonals are increased by square root two times the horizontal or vertical. the search then proceeds iteratively from the points newly reached as a spreading wavefront. termination occurs when there are either no new free points  in which case the start was enclosed   or the goal point is reached. 
   step 1 - second pass - rather than organise a system of backpointers  in the second pass start is set to t1int and the goal to from point and the process is repeated to produce a second spread matrix  whose values indicate shortest path distances to the goal. 
   step 1 - determining the path - the least cost path  or paths  within the constraints of the lattice representation  is indicated as all those lattice points whose value in the sum of the two spread matrices equals that in the to point point. these points on the lattice are indicated in figures 1 and 1 by alphabetic characters. each of these points  saved in robot path  represents a path through the lattice to the goal that be be reached from the start with an equal number horizontal  vertical or diagonal movements. 
   step 1 - generate actual robot path - the algorithm generates a list of lattice points on the route path that most closely corresponds to a route finder which traverses between object corners. to achieve this concavities in the robot path mask are detected  by recognising path points in a 1 by 1 neighbourhood  various patterns of the nine bits indicate these situations. these lattice points are indicated in the node mask mask. this parallel operation gives no indication as to route order  neither is any indication given of the presence of multiple iso-valued paths. 
	step 	1 	- one further pass is made through the 
robot path mask from start to goal. the order in which lattice points at which the robot will change direction is found and their coordinates recorded in the robot command buffer. multiple paths are detected by a blob counting method at each stage in this expansion. a split in the path is indicated by multiple blobs  one is selected arbitrarily  the others tagged as inactive  these tags are propagated along the redundant paths until they merge again with the selected path. only direction change points from node mask on the active path are transferred to the command buffer. a pretty-map routine is then used to generate the output seen in figures 1 and 1. 
v advantages of this algorithm. 
	it 	enables 	a 	uniform 	treatment 	of synthetic 
 figure 1  and real  figure 1  data. the real data has undergone only minor pre-processing  two passes of an algorithm that removes 'noise' points  those with less than two neighbours. 
   the expansion algorithm is independent of environment complexity  rather computational effort is proportional to the number of points set in the robot ground plan. 
	search time for the route points is linear 	with 
c. witkowski 1 
respect to the number of lattice points traversed from start to goal  this is in turn a good measure of the actual distance the robot will have to move. 
   in general robots with assymmetric ground plans need additional methods  although the algorithm is suitable for assymetric robots which move by pure translation  lozano-perez and wesley   this would be trivially achieved by offering a modified robot shape mask as input. 
   plans may be generated at different resolutions by a simple rescaling of the environment data. a rescaling has been made between figures 1 and 1. 
   very advantageous timings are achieved  which are in part offset by the fact that the dap may only be used in batch mode. 
vi program timings. 
for these 1 by 1 maps the program timings may be split into three parts. first system overheads  conversions between dap and 1 fortran storage modes etc.   about 1 milliseconds/run; second a fixed time component of 1 ms/run   1 for expansion  one extra for noise reduction on real data . the third component depends on the number of expansions between start and goal  observed timings are 
1ms/expansion 	to 	generate 	rob1t path 	and 
1ms/expansion 	for 	the 	final 	pass 	along 
robot path. 
   the synthetic data path  figure 1   with 1 expansions took 1 seconds of dap processor time  the robot makes 1 changes of direction and traversed the 1 inch path in 1 seconds. the real data  figure 1   with 1 expansions required 1 seconds of dap processor time  the robot makes five changes of direction and traversed the 1 inch path in 1 seconds. in both cases the lattice is on a three inch grid spacing. 
