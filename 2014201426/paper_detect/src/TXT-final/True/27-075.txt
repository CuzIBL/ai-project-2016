ion hierarchies can be 
e x p o n e n t i a l l y less efficient* 
christer backstrom and peter jonsson 
department of computer and information science 
lmkopmg umversity  s-1 linkoping  sweden email {cba petej} ida huse 

abstract 
it is well-known that state abstraction can speed up planning exponentially  under ideal condi tions we add to the knowledge-showing that state abstraction may likewise slow down planning exponentially  and even result in generat ing an exponentially longer solution than necessary this phenomenon can occur for abstraction hierarchies which are generated automatically by the alpine and highpoint algorithms we further show that there is little hope of any drastic improvement upon these algorithms-it is computationally difficult to generate abstraction hierarchies which allow finding good approximations of optimal plans 
1 	introduction 
one common approach to improving the efficiency of planning is to use a hierarchical planner based on state abstraction-ignoring certain literals  either in the op-
erator preconditions  sacerdoti  1  or in the whole language  knoblock  1  1  first an abstracted version of the problem instance is bolved  thus not taking all details into account and resulting in a plan which is correct at this abstraction level this plan is then used as a skeleton plan to be filled in with more detail at the next lower level-a process referred to as refinement repeated refinement results m a solution to the original  non abstract problem 
　although state abstraction cannot avoid exponential search bpaces in the general case  it is usually considered a powerful method for reducing the search effort the method has been demonstrated to speed up planning considerably for certain test examples  knoblock  1  bacchus and yang  1  this is augmented with theoretical results  knoblock  1  showing that state abstraction can reduce the size of the search space from exponential to linear under certain ideal conditions these conditions are very strong  however  and are not likely to be met in  m any real applications one of the conditions is that the hierarchy satisfies the downward refine-
　 this research wai iponsored by the swedish research covnal for engineering sciences  tfr  under grants 
dm- 1 and dnr 1 
ment property  drp   bacchus and yang  1   which guarantees that no backtracking occurs between abstraction levels bacchus and yang  analysed the expected search complexity when this particular condition does not hold-more precisely  as a function of the probability that a plan at some abstraction level can be refined mto a plan at the next lower level they found that the search complexity is linear both when this probability is close to 1 and when it is close to 1 however  there is a phase-transit ion effect increasing the search complexity considerably  when the probability is neither low nor high bacchus and yang even reported that the expected search effort may be somewhat higher with abstraction than without in this middle region  namely if most search has to be redone at the ground level however  the literature seems to tacitly assume that state abstraction will never do any big harm contrary to this  we show that just as state abstraction can speed up planning exponentially  it can also slow down planning exponentially  and even force the hierarchical planner to produce an exponentially longer solution than a non-hierarchical planner1 
knoblock  has further presented an algorithm  
alpine  for generating abstraction hierarchies that are ordered monotonic-a property guaranteeing that no re-
finement of an abstract plan can undo any effects of the abstract plan bacchus and yang  have presented a modification of this algorithm  highpoint  whose hierarchies are ordered monotonic and expected to satisfy the drp more closely while these algorithms produce good hierarchies in many cases  they are not guaranteed to be harmless in fact  we show that both algorithms may produce the type of abstraction hierarchy that leads to exponentially longer solutions furthermore  we show that using the bame underlying principle as in alpine and highpoint  n is computationally difficult to gen-
erate an abstraction hierarchy that allows a hierarchical planner to generate a solution with length within a constant factor of the optimal plan length  we actually prove an even stronger approximation bound-a logarithmic factor m the size of the instance  
1 	b a s i c f o r m a l i s m 
we first define some basic concepts 
	backstrom and jonsson 	1 


	1 	planning 


	backstrom and j1nss1n 	1 


	1 	planning 

	backstrom and jonsson 	1 

neither theorem depends on the assumption that p l a n generates an optimal plan 
1 	discussion 
it is well-known  knoblock  1  that state abstraction can speed up planning exponentially under certam ideal conditions  plans can be generated in linear tune in the length of the solution for some planning problems  eg the towera-of-hanoi problem however  the value of this demonstration is questionable since the problem is unrealistic in the sense that it has exponentially sized minimal solutions 1 one of these ideal conditions is the downward refinement property  drp   which guarantees that no backtracking occurs between abstraction levels we have added to previous analyses of state abstraction by showing that not only can state abstraction give 
exponential speed-up in some cases  it can also cause exponential slow-down in other cases-even for hierarchies satisfying the drp more precisely  there exist problem instances such that the ideal choice of abstraction hierarchy leads to the generation of a linear-size plan  while a more unfortunate choice forces the generation of an exponential-size plan  taking exponentially longer time to generate this may even happen m cases where a standard non-hierarchical planner equipped with a simple  domain-independent heuristic produces a shortest  te linear-size  solution m polynomial time instances of this kind seem no less realistic than  for instance  towersof-hanoi 
　we have further shown that the a l p i n e  knoblock  1  and hlghpolnt  bacchus and yang  1  algorithms for generating abstraction hierarchies are not able to distinguish between such good and bad hierarchies as mentioned above furthermore  we have also shown that it is even impossible to design an algorithm based on the same underlying principle as alpine and hlghpolnt that always produces hierarchies allowing a hierarchical planner to generate plans of length within a constant factor of the shortest length  actually  not even within a logarithmic factor in the size of the instance  we have choosen in this paper to concentrate on state abstraction as defined and used by knoblock   te using a totalorder hierarchical planner we are currently investigat-
ing the consequences of using a partial-order hierarchical planner like a b t w e a k  yang and tenenberg  1  in stead although a b t w e a k seems to handle correctly the particular example we have used to demonstrate the exponential slow-down effect  we do not believe there is any fundamental difference in general in fact  the approximation result mentioned above should be valid also for partial-order planners like a b t w e a k 
　the message of this paper is not that state abstraction and the use of algorithms like alpine and highpoint should be abandoned  in many cases  these can still be powerful tools for tackling the search complexity in planning however  the results tell us that we must be very careful  state abstraction is a powerful tool  but a tool that may occasionally turn its power against us  
　　　1see baekstrom and nebel  or  garey and johnson  1  pp 1  for a discussion of this topic 
1 	planning 
making things exponentially woree even if good abstraction hierarchies exist m many domains  the task of finding these is non-tnvial and seems to remain a highly domain-dependent heuristic endeavour we believe that more research is needed in order to understand when state abstraction works and how to exploit the inherent structure of problems for building good abstraction hierarchies 
a c k n o w l e d g e m e n t s 
we would like to thank craig knoblock  jalal maleki  
qiang yang and the anonymous referees for comments which helped improving this paper 
