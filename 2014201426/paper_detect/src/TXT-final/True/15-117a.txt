; prolog is presented in a rigourous way  through 1 easily understandable figures. i t s theoretical model is completly rewrought. after introducing i n f i n i t e trees and inequalities  t h i s paper puts forth the minimal set of concepts necessary to give prolog an autonomous existence  independent of lengthy considerations about f i r s t order logic and inference rules. mystery is sacrificed in favor of c l a r i t y . 

1 a. colmerauer 
a r t i f i c i a l i n t e l l i g e n c e i n t e r a c t s with m a n y f i e l d s including psychology  l i n g u i s t i c s   h i s t o r y   geology  biology  medical science . . . these sciences are complex  and special t o o l s are needed to represent and process the knowledge they deal w i t h . furthermore  these tools should not introduce new problems  inherent to computer science. t r a d i t i o n a l l y   the science of knowledge h a s b e e n mathematical l o g i c . therefore it w a s reasonable to turn to logic for help in developing a tool for a r t i f i c i a l i n t e l l i g e n c e : that w a s h o w prolog w a s b o r n . 
prolog  developed in 1 1 by a.colmerauer and 
p.roussel  w a s at f i r s t a theorem prover  based on a.robinson's r e s o l u t i o n p r i n c i p l e  1  with strong r e s t r i c t i o n s to narrow the search space. credit is given to r.kowalski and m.van e m d e n for having pointed out these r e s t r i c t i o n s as equivalent to the use of clauses having at least one p o s i t i v e l i t e r a l  horn clauses   and for having proposed the f i r s t t h e o r e t i c a l model of what is computed by prolog: a minimal herbrand i n t e r p r e t a t i o n . 
however  prolog's close links with logic proved sometimes to be i n h i b i t i n g v i s - a - v i s i t s implementation. it w a s necessary to reformulate the theory to take i n t o account implementation c o n s t r a i n t s : t h i s new theory is unencumbered by d i s t i n c t i o n s necessary only in l o g i c   and is enriched by concepts indispensable for programming purposes  such as i n e q u a l i t i e s   . we can say t h a t   after a careful implementation  a n e w t h e o r e t i c a l model of prolog emerged and it is t h i s n e w model that we present here in 1 c o m m e n t e d f i g u r e s . 
the reader interested in further readings on t h i s subject is r e f e r r e d to the f o l l o w i n g : 
on automatic theorem proving and l o g i c : 
r o b in s o n j.a.  1 .  logic: form and f u n c t i o n     edinburgh university press and elsevier north holland. 
on the l i n k s between logic and p r o l o g : 
k o w a l s k i r.a.  1 .  logic for problem s o l v i n g     a r t i f i c i a l i n t e l l i g e n c e s e r i e s    ed- n i l s s o n   n.j.   north holland. 
on the genesis of prolog: 
c o l m e r a u e r a.  kanoui h.  p a s e r o r. et r o u s s e l p h . 
 1    un systeme de communication homme-machine en f r a n g a i s     research report  groupe i n t e l l i g e n c e a r t i f i c i e l l e   faculte des sciences de luminy  m a r s e i l l e . 
r o u s s e l p h .  1 .  prolog  manuel de reference et d ' u t i l i s a t i o n   groupe i n t e l l i g e n c e 
a r t i f i c i e l l e   faculte des sciences de luminy  m a r s e i l l e . 
a prolog system  based on the ideas developed here  and implemented on several computers  apple i i   vax/vms  e t c .     is described in three internal reports of the groupe i n t e l l i g e n c e a r t i f i c i e l l e   faculte des sciences de luminy  marseilles 
c o l m e r a u e r a.  1 .  prolog i i   reference manual and theoretical model . 
v a n 	c a n e g h e m 	m. 	 1 . 	 prolog 	i i   	user's manual . 
k a n o u i h.  1 .  prolog i i   manual of examples. 
1. t r e e s 
from an abstract point of view  one m a y say that the knowledge of an i n t e l l i g e n t being on a given subject  is the set of facts that he or she can generate on the subject. therefore  knowledge can be viewed as a set of f a c t s   s p e c i f i e d by a set of r u l e s . e a c h of these facts can be represented by a declarative sentence. in our case we represent a fact by a t r e e   drawn upside down  as the one s h o w n in fig l a . e a c h leaf a n d each node is labeled with an  atom  of i n f o r m a t i o n : t h i s atom can be a word  a group of words  a number  or a special character. only the structure of the tree is r e l e v a n t . therefore  figs la a n d l a ' are equivalent. trees in figs l a   lb a n d lc are examples of facts in three d i f f e r e n t f i e l d s : a r i t h m e t i c     s t y l i s t i c   permutations  a n d m e a l 
planning. facts are always t r e e s   but not a l l trees are f a c t s : obviously the trees in figs id and le are not facts in a r i t h m e t i c   even if tree in fig id is a sub-tree of the fact in fig l a . 
trees were purposely chosen as data s t r u c t u r e s : they are capable of expressing complex information and  at the s a m e time  simple e n o u g h to be handled a l g e b r a i c a l l y   and by a computer. 
1. t e r m s 
formulas are used to represent tree p a t t e r n s . these formulas called  terms   consist of atoms of i n f o r m a t i o n   v a r i a b l e s   parentheses a n d c o m m a s . 
recall that an atom of information is either a group of words  a number  or a special character. in the l e f t column of fig 1a the syntactic s t r u c t u r e of a term is d e f i n e d ; t h i s is a 
recursive d e f i n i t i o n where complex terms are defined from simpler terms; the simplest terms are variables or atoms of i n f o r m a t i o n . examples of terms can be found in the l e f t part of figs 1b and 
1c. 
je remercie jacques c o h e n de m'avoir aide a rediger cet a r t i c l e e n a n g l a i s . 

a. colmerauer 1 


1 a. colmerauer 
variables occurring in terms represent unknown trees. therefore  the tree expressed by a term w i l l depend upon the trees assigned to the variables. such an assignment  x   called a 
 tree-assignment   	is 	just 	a 	set 	of 	pairs 
  x i : = a i     ''ai  being the tree assigned to the variable  x1 . the right column of fig 1a gives the tree  a  represented by the term   t   after the application of tree-assignment  x . it is assumed that if   t   contains no variable  an empty tree-assignment can be applied. 
figs 1b and 1c depict two examples of tree-assignments. example 1b shows that it is possible to find in the assignment  x   variables which do not occur in the term  but the contrary is not possible. in example 1c  the term contains no variable; t h i s means that the corresponding tree does not depend on the assignment. the last example shows a systematic way of coding a f i n i t e tree by a term without variables. 

1. constraints 
prolog 	is 	a 	language 	which  computes  on trees 
  a j   represented by variables ' ' x i   . this computation is done by accumulating constraints that f i n a l trees must s a t i s f y . these constraints l i m i t the values variables can take  that is the. tree-assignment of variables   x i   by trees   a i   . as shown in fig 1a  a constraint mc  consists of a set of elementary constraints  each of them to be s a t i s f i e d . an elementary constraint is either a pair of terms     s j   s j '     which w i l l represent equal trees  or a pair of terms    tk t| '   which w i l l represent unequal trees. fig 1a i l l u s t r a t e s the general condition under which a tree-assignment  x  s a t i s f i e s a constraint  c .  x  is also said to be a solution of  c . fig 1b shows an example of a constraint  ci  s a t i s f i a b l e by the tree-assignment   x i   . in fig 1c there are three constraints which cannot be s a t i s f i e d by any tree-assi gnment. 
during the execution of a prolog program  the basic operation consists of verifying whether a constraint is  satisfiable  or not  by at least one tree-assignment . this is done by  reducing  it  as seen in fig 1d: the purpose of  reducing  is to simplify the constraint in order to make all its solutions explicit. this involves exhibiting variables distinct from each other as left members of equalities. to do so  we use a specific property of trees: the unique decomposition of a tree into immediate subtrees. this property permits us to replace 

note that if this property would hold for numbers  we would wrongly conclude that the two constraints   {x+1+y   and   x+1+y   are equivalent! if we succeed in producing equalities where left members are distinct variables and where there are no inequalities  thpn the constraint is satisfiable. its solutions are directly obtained by assigning arbitrary trees to variables not appearing as left members. 
if inequalities are left  let  n  be their number. 
a. colmerauer 1 
another basic property allows us to split the initial problem into  n  independent and simpler sub-problems: a constraint of the form 
1
 	is satis-fiable if and only 
if each of the constraints 
 cu{tn*tn'   is also satisfiable. again  this is not true in the domain of natural integers because it would be possible to show 
that the constraint has at least one solution since the constraints 
  x+y=l i:*1}   	
have at least one' in order to verify that the constraint  is satisfiable  knowing that  c  already is  we must check that the constraints  are not equivalent. if the constraint  cutt tj'}  is not satisfiable  we can even remove the inequality 
1
as in example 1d. 
in the same way as we simplify equalities  i t is possible to simplify inequalities. this allows us to present any satisfiable constraint in a  reduced form : this reduced form shows that the constraint is satisfiable by making all its solutions explicit. the general form of a reduced constraint containing inequalities is beyond the scope of this paper  see colmerauer 1 . 

1 a. colmerauer 
1. infinite t r e e s 
as s u r p r i s i n g as it may be  it is also possible to handle in-finite trees. such a tree is shown in fig 1a: it represents an endless path along the cross-like -figure shown in fig 1b. it is possible to present t h i s tree by the diagram with a loop in 1c  obtained by merging a l l the nodes from which isomorphic subtrees arise  that i s   -from which equal subtrees a r i s e . if we omit to merge a -few nodes  we obtain the different diagrams in 1c  and 
1 c ' ' which s t i l l represent the same tree. that fig 1c is a f i n i t e diagram means that the i n i t i a l tree in 1a contains a f i n i t e set of configurations or  more precisely  that the set of i t s subtrees is f i n i t e : this is the definition of a  rational  tree. of course  a l l f i n i t e trees are r a t i o n a l . although f i n i t e trees can be defined by simple terms without variables  i n f i n i t e rational trees can only be defined by the constraints they must s a t i s f y . taking into account successively a l l sides   1   1   . . .   1   of the cross-like figure in 1b  we construct the constraint 1d which is s a t i s f i e d only in case of the assignment of  x  by the tree in fig 1a. from the diagram shown in fig 1c  we can construct a simpler constraint 1 d '   having the same property. 
for the curious reader we provide in fig 1e an example of a non-rational i n f i n i t e tree. after merging a l l possible nodes t h i s tree yields the i n f i n i t e diagram in fig 1e'. note that it would be necessary to have a c o n s t r a i n t   made from an i n f i n i t y of elementary constraints  to completely describe t h i s type of tree. 


	a. colmerauer 	1 


1 a. colmerauer 
1. formal meaning of pr1 p r o g r a m s 
fig 1 i n f o r m a l l y described a prolog program. we now f o r m a l i z e i t s meaning. for most languages  t h e meaning of a program is given by t h e succession of elementary o p e r a t i o n s which t h e computer is supposed to p e r f o r m . this is not t r u e of prolog w h i c h   as presented  is a formalism capable of r e p r e s e n t i n g knowledge and to express questions about i t   independently of any computer. the computer's s i m p l y computes t h e answers to these questions. 
in 	fig 	1 we derive in two steps the set of f a c t s 
 a c i r c l e   s p e c i f i e d by a prolog program from the o r i g i n a l program  a b l o c k   . this set represents the p o t e n t i a l knowledge contained in the program. each of the f a c t s is a t r e e   taken from a l l possible t r e e s . the f i r s t step is required since the r u l e s of a prolog program are  a c t u a l l y   pattern of r u l e s   and since it is f i r s t necessary to generate precise r u l e s dealing with t r e e s . the second step can be performed in two ways: e i t h e r by considering the r u l e s as r e w r i t i n g r u l e s   d e f i n i t i o n i     or by considering them as l o g i c a l 
implications   d e f i n i t i o n i i   . 
fig 1 also caracterizes the set of f a c t s which y i e l d t h e answer to a prolog q u e s t i o n . a q u e s t i o n is a single term   t   which s t a t i n g : 
what are the f a c t s of the form   t     
the set of v a l i d answers is the i n t e r s e c t i o n of the set of s p e c i f i e d f a c t s with the sub-set of t r e e s   obtained by assigning a l l conceivable trees to the variables of term   tm . 

a. colmerauer 1 


1 a. colmerauer 
common with already existing variables. the constraints  c1  which are satisfiable are those which can be reduced; in this case  we place their reduced forms just below them. the answers are subparts of the reduced constraints  c1's  appearing in nodes which cannot longer be expanded  since their  t1's  are empty. the four valid answers are found in fig  c. 

1. stylistic p e r m u t a t i o n s 
in moliere's play   le bourgeois gentilhomme   a bourgeois who wants to act as a lord  gentilhomme  compliments a noble w o m a n  marquise :  beautiful marquise  your beautiful eyes make me die of love.  
let us construct a l l of the compliment's possible variations  as the bourgeois t r i e s to do in the play. the sentence is f i r s t decomposed into f i v e p a r t s   which are given in fig 1a  each part made up from one  or a few unseparable words. starting from an i n i t i a l sequence with these f i v e components we produce a l l variants by generating a l l the permutations of the sequence. 
we f i r s t have to choose a way of coding a sequence by a tree- since it is necessary to have a notation for the empty sequence  the sequence  1/1  is represented by the tree in fig 1b. 
also  since each node is labeled with a single character  a dot  readablity is improved by using i n f i x notation:  u.v   instead of prefix notation: '' u v  . to further simplify  we omit parentheses whenever l e f t - r i g h t association is implied. 
to assert that sequence  y  is a permutation of sequence  x  we write  permutation x y  . the f i r s t rule of fig 1c states that the sequence of length zero  that is the empty sequence  has only one permutation  i t s e l f . the second rule specifies that  in order to permute a non-empty sequence  that is a sequence of length  n+1   we remove i t s f i r s t element  e  and obtain a sequence  x  of length   n   ; we then compute any permutation  y  of t h i s sequence  x  and insert the element  e  in any position of t h i s sequence and produce the desired sequence   z   . to insert an element  e  in a sequence  x  and obtain a sequence  y   we introduce the term   i n s e r t i o n   e   x   y     . we either 

we i n s e r t   e   in the sequence which has i t s 	- f i r s t element 	removed 	 -fourth 	r u l e 	of f i g 1 c   . 	these the 	program 	c o n s i s t s of t h e t h r e e p a r t s shown in four 	r u l e s 	of 	fig 	1c 	c o n s t i t u t e 	the 	e n t i r e figs 1b  	1c and lod. 	in fig lod  	the 	t a b l e 	of permutation program. sums up to 1 is programmed: 	any elementary school 
s t u d e n t 	knows t h i s t a b l e by h e a r t but t h e machine fig 	1d 	presents 	the 	computer's 	answers to two has t o compute i t over and 	over 	again 	s i n c e 	i t questions: only 	knows 	how 	to 	add 	  1   to a number. we use what are a l l p e r m u t a t i o n s   x   o-f t h e   p l u s   x   y   z     to 	mean 	  x + y = z   . 	each 	number  	is 	sequence 	  1   1   1     represented by two d i g i t s   	with a dot between them and  we use i n f i x n o t a t i o n as in fig 1   . fig 1c what are t h e v a l u e s of t h e v a r i a b l e s presents the 	d e f i n i t i o n 	of 	a 	sequence 	without   a       b       c   and   d   so that   1   1   c   d   r e p e t i t i o n 	 note 	that 	the 	l a s t r u l e of fig 1c 	is a permutation of 	  1   a   l   b     contains a non-empty c o n s t r a i n t   . 	in fig 	1b  	it f i n a l l y in fig 1e  	we ask the 	question 	producing is 	stated 	that 	to 	compute 	a 	s o l u t i o n 	it 	is the 	1 	s t y l i s t i c 	variants 	that the  bourgeois necessary to assign d i s t i n c t values to the l e t t e r s gentilhomme  might have s a i d '   s   e   n   d   m   1   r   y     and t h a t   in each column of t h e sum  a property c a l l e d   a d m i s s i b l e     has to be s a t i s f i e d between the c a r r y - o v e r   the three 1. send m o r e m o n e y l e t t e r s 	of 	the 	column 	and 	the 	preceding 
c a r r y - o v e r . 	of course  	t h i s property  admissible  the 	purpose 	of 	t h i s 	example 	is 	to 	solve 	a is defined 	using 	the 	property 	  p l u s   	and 	the classical 	cryptarithmetic 	puzzle: 	assign 	1 property 	  p l u s - o n e   . 	since 	the 	numbers  send   different 	d i g i t s 	to 	the 	1 	l e t t e r s  more   and  money  	should 	not 	begin 	with 	the  s e n d m 1 r y   	such 	t h a t 	the 	sum d i g i t 	1  	an i n e q u a l i t y c o n s t r a i n t is added to the  send+m1re=m1ney  becomes 	v a l i d . 	to 	do 	so  	we f i r s t r u l e of fig 1b. 	in fig 	1e  	we 	challenge introduce 	in 	fig 	1a  	the four carry-overs   r l     t h e 	computer t o p r o v i d e u s w i t h t h e t h r e e mystery   r 1     	  r 1   and   r 1   which can be 	n u l l 	and 	which numbers. 1 	a. colmerauer 
i n s e r t 	  e   	be-fore   x   	  t h i r d r u l e o f f i g 1 c     o r 

have to be added to each column of t h e sum. 

a. colmerauer 1 
