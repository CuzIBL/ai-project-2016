 
　　this paper describes research in understanding system specifications written in natural language. this research involves the implementation of a natural language interface  phranspan  for specifying the abstract behavior of digital systems in restricted english text. a neutral formal representation for the behavior is described using the usc design data structure. a small set of concepts that characterize digital system behavior are presented using this representation. an intermediate representation loosely based on conceptual dependency is presented. its use with a semantic-based parser to translate from english to the formal representation is illustrated by examples. 
1 	introduction 
this work describes research in understanding system specifications written in natural language. this research was implemented in the phran-span 1 natural language interface to a d a m   the usc advanced design automation system . phran-span is used to capture system specifications  with particular emphasis on the abstract behavior of the system being specified. 
1 	the system specification problem 
system behavior can be described by one or more processes 
 independently executing environments  that compete and/or communicate. for example  a serial interface might contain two processes  one to communicate asynchronously over a serial line  and one to communicate synchronously over a parallel bus. a process can: be started asynchronously  whenever specified conditions become true ; execute indefinitely; start  suspend and terminate other processes asynchronously; exclude other processes from executing; communicate with other processes; and be asynchronously terminated or suspended itself when some specified conditions become true. these processes may run at different  clock  rates. processes communicate via shared data  synchronize at critical points  or compete for shared resources. most existing techniques for describing or specifying these types of processes overly restrict the solution or they cannot be used for complex system specifications. 
1 	relationship to other research 
previous natural language specifications have been concerned primarily with software systems   programs  and data types 
　　in this research  we chose a limited domain  the behavior of digital systems. in addition  our system expects a structured input that has been checked for spelling errors and misty pings. 
　　one prior endeavor involved the application of natural language processing as an input to a design system for digital electronics    but this work focused on the construction of a circuit given predefined components rather than specification. furthermore  use of hyphenated reserved phrases made it more like an application-oriented programming language. 
　　other recent work  like the unix ' consultant  vc    and cleopatra   answer questions concerning a given body of knowledge. the phran interface incorporated in this interface was developed for uc. 
the research described here differs from uc and cleopa-
tra in that it is creating a design entity. to create this representation  semantic knowledge about system behavior has been encoded in the parser's knowledge base. 
	overview 	of 	the 	phran-span 
operation 
the phran-span interface operation is shown in figure 1. 
　　english sentences are input to phran. phran detects patterns in the sentences and produces concepts  based on its database of pattern-concept pairs. span analyzes these concepts and constructs an internal representation of design data for each sentence. span also informs the user in english how each sentence has been interpreted. 
1 	components 	of 	the 	natural language interface 
lb understand the specification of digital systems in restricted english text requires a corpus  a collection of writings  in this case examples  for the domain of these specifications  a representation for the knowledge expressed in the corpus  a formal 

	l	1
	phrasal analyser-speciflcation analy 	undx is a trademark of bell labs. 
1 	natural language 


design data structure fragments 
figure 1: overall operation of the phran-span interface 
representation for the behavior of a digital system  and a parsing technique to map the natural language into the formal behavioral representation. each of these will now be described. 
1 	t h e c o r p u s 
the corpus for this natural language interface was developed by acquiring actual specifications  having students write specifications and constructing additional examples. these examples were based on a taxonomy of high-level system behavior and a 1- word lexicon which were developed as part of this research. 
　　examples of the sentences taken from the actual specifications are provided in the following list: 
1. a block of data bytes is transferred by a sequence of data cycles. 
1. the peripheral equipment shall sample the ef code word which is on the od lines. 
1. each requestor communicates with the arbiter via two lines  a request line and a grant line. 
1. select shall be dropped 1 ns after the write is begun. 
1 	t h e c o r p u s ' k n o w l e d g e r e p r e s e n t a t i o n a n d t h e p a r s i n g technique 
the representation of the knowledge expressed in this corpus was constrained by the choice of a pre-existing semantic-based parsing technique which was implemented by arens in phran  a phrasal analysis program  . phran is a knowledgebased approach to natural language processing. the knowledge is stored in the form of pattern-concept pairs. a pattern is a phrasal construct which can be a word  a literal string  e.g. digital equipment corporation   a general phrase such as 
 component  sends  data to component  
and 	can 	be 	based 	on 	parts 	of speech  	for 	example  
  noun-phrase     verb  . 
　　associated with each phrasal pattern is a concept. the pattern-concept pair  pcp  encodes the semantic knowledge of the language. for example  associated with the pattern: 

is a conceptual template called unidirectional value transfer that denotes a transfer of data from one component to another physical component. 
　　the concepts in phran are expressed in a specification representation language  srl  loosely based on conceptual dependency diagrams  cd  as developed by schank . our srl is based on concepts of system behavior such as temporal constraints and value transfers and the information required to specify a digital system. 
1 	t h e 	d e s i g n 	d a t a 	s t r u c t u r e : 	a 	m o d e l l i n g 
t o o l 
the design data structure  dds    is the underlying representation used both to develop the srl for understanding specifications and also to represent the behavior of digital systems. the dds is a unified representation of design data. it has been designed to support and facilitate the synthesis of digital hardware systems. it is composed of four subspaces: 
1. data flow  dfss   which covers data dependencies and functional definitions. 
1. t i m i n g and sequencing  tsss   which covers timing  sequence of events and conditional branching. it is represented by a directed acyclic graph  which consists of nodes corresponding to events  and arcs which represent intervals and connect these nodes. 
1. structural  sss   which covers the logical decomposition of a circuit. this subspace is similar to a schematic or block diagram. 
1. physical  pss   which covers the physical hierarchy of components and the physical properties of these components. 
tsss arc types there are four types of timing arcs. a sigma arc represents an interval of time  or range   in the tsss. a theta arc represents a temporal constraint. a chi arc represents a casual relationship. a delta arc represents inertial delay. 

table 1: the dds bindings for the uvt. 
tsss node types there are seven types of nodes in the tsss. for example  a w  node is a simple node that may join two arcs. a beta node represents an and fork point or a cobegin. a mu node represents an and join point. 
　　the relationships between these various spaces are made explicit by means of bindings. these bindings and the information in the four subspaces are believed to fully characterize the design. 
1 	the knowledge of the specification domain 
the desired result of processing the natural language text is to form a representation of the behavior in the dds. since phran processes each sentence independently  it is only necessary to consider the fragments of dds graphs or sub-graphs which may 
	granacki  jr.  parker  and arens 	1 

be created as a result of reading each sentence. then the fragments can be related as a post-processing step. 
   a small set of concepts that characterize system-level behavior  constraints and other ancillary data were developed. these concepts can be grouped into classes as follows: information transfer consisting of unidirectional value transfer  uvt   
bidirectional value transfer  bvt   and nondirectional value 
transfer  nvt ; temporal activities consisting of asynchronous temporal activity  ata   causal temporal initiation  cti   causal temporal termination  ctt   and single temporal event  ste ; temporal constraints consisting of 
single temporal relation  str   and dual temporal relation 
 dtr ; control consisting of if-then-else  while  repeat  and looping; declarations consisting of assignment or inheritance statements  and structural or physical interconnection; and 
abstractions of dds bindings consisting of value-carriernet-range  vcnr   and operation-module-block-range  ombr . 
   formal semantic definitions of all these concepts have been developed and represented using dds templates . 
1 	the unidirectional value transfer 
an example of these models is the dds template for a uvt shown in figure 1 and table 1. this template spans two of the dds subspaces  the dfss and the tsss. the template for the uvt in the dfss is composed of three values and three operations and their data link arcs. the control operation may be associated with the source operation  where the data flow value  info originates or the sink operation  the destination for the data flow value  info or the control may be associated with a third independent operation. 
an example of a sentence which maps into a uvt is 
   the cpu transfers the block of data bytes from the disk to the control store. 
   if no timing information or constraints are specified in the same sentence then the tsss template shown in figure 1 is used as the default. the default tsss template shows the timing for the three operations and the necessary constraints for a valid uvt. for example  the constraints labelled 1 and 1 represent the fact that the time interval for the operation control must begin before the end of the intervals associated with the source operation and the sink operation  respectively. if these constraints were not present it would be meaningless to associate the src.cntl value or the snk.ctl value with this particular transfer of the value info. 
   the fact that these constraint arcs emanate from a node labelled 1 indicates that the two constraints  1 and 1 and the interval labelled o1 all begin concurrently. 
1 	p h r a n - s p a n operation 
phran reads the sentence from left to right one word at a time. as each word is examined  existing patterns and concepts are checked for a match and retained  modified or discarded. the match may be based on lexical criteria  semantic criteria and/or syntactic criteria. phran also provides look-ahead in the sentence to the next word and the ability to look back at previously matched terms with limited ability to modify those previously matched terms. 
1 	natural language 
   the patterns and concepts for phran are stored in a 
   knowledge-base of pattern-concept pairs  pcp . an example of the pattern for the uvt concept expressed by the verb transfer 
is 

the subject of the sentence must belong to the semantic category of an a.component  abstract component  or a df.opn  data flow operation  for this pattern to match. the next part of the pattern indicates that some verb form with the root of transfer must be present. the verb may be in a different tense  e.g.  transferred or it may be combined with a modal verb like shall. the object transferred belongs to the semantic category df.val 
 data flow value . the abstract component is introduced to handle ambiguity. for example  a cpu may be a logical module or a physical block. an additional declaration or phrase like an appositive is required to resolve this type of ambiguity. if a cpu process had been specified this would be interpreted more precisely as a df.opn and the pattern would also match. 
1 

figure 1: the dds template for a uvt. 
   associated with each pattern is a concept that describes the meaning of the word phrase or sentence that matches the pattern. the concept is represented as a frame  using the specification representation language srl  based on the set of concepts we introduced. 
   for example  the concept part of the pattern-concept pair for the uvt in srl is 


the facet slots in the frame are represented by variable names that are prefixed with a question mark. fillers for these slots are obtained when the sentence matches the pattern. for example  consider the sentence  

note the facet values for the source and sink have defaulted to  unspecified* since they were not included in this sentence. 
　　the source and sink are specified by adding two adverbial phrases to the sentence. these phrases must match the patterns associated with the desired concepts. the pattern for source is 
 from  or  a component   df opn    
when these patterns are matched the concept associated with each of them modifies the uvt pattern by replacing the default value of * unspecified* with the value of source and sink found in the sentence. 
the following sentence results in a completely specified uvt: 
　　the cpu transfers the code word from the controller to the peripheral device. 
　　an option in the prototype system is for span to display the resulting concept in english instead of the frame-like data structure. in this case  span's output for the above sentence is 
this sentence resulted in a data flow subgraph for a unidirectional value transfer. 
the source of the information is the controllerl. 
the sink for the information is the peripheral-device 1. 
the information transferred is the code-wordl. 
the transfer is controlled by the cpul. 
1 	current status 
the system currently recognizes simple sentences associated with all the primitive concepts of our specification language  e.g.  uvt  bvt  cti and dtr which are required to describe 
behavior in the domain of digital systems. actual pattern concept pairs have been built for 1 basic verb patterns common to specifications and 1+ nouns. in addition  we have added the ability to handle multi-noun sequences which occur frequently in specifications. also the system has been extended to detect ambiguity that can arise from the use of nouns and verbs that have the same lexical stem  e.g.  transfer  interrupt  and signal. 
　　the system is coded in franz lisp and is running in interpreted mode on a sun/1 workstation under sun's operating system  version 1  unix bsd 1 . typical sentences take approximately 1 to 1 cpu seconds to process. no attempt has been made to optimize the code. 
1 	acknowledgements 
this research was supported by the national science foundation under computer engineering grant #dmc-1 and john granacki was partially funded by the hughes aircraft co. 
