
this paper proposes the design of a recommender system that uses knowledge stored in the form of ontologies. the interactions amongst the peer agents for generating recommendations are based on the trust network that exists between them. recommendations about a product given by peer agents are in the form of intuitionistic fuzzy sets specified using degree of membership  non membership and uncertainty. in literature  the recommender systems use databases to generate recommendations. the presented design uses ontologies  a knowledge representation technique for creating annotated content for semantic web. seeing the potential and popularity of ontologies among researchers  we believe that ontologies will be build and maintained in numerous knowledge domains for the semantic web and future applications. the presented recommender system uses temporal ontologies that absorb the effect of changes in the ontologies due to the dynamic nature of domains  in addition to the benefits of ontologies. a case study of tourism recommender system is chosen to generate the recommendations for the selection of destination  travel agents and the flight schedule. a comparison of the generated recommendations with the manual recommendations by peers establishes the validity of the presented recommender system.
1	introduction
in our daily life  even to decide upon simple things like which place to visit  which movie to watch  which book to read  which restaurant to eat at  we depend upon our acquaintances  reviews in the newspapers  magazines  and general surveys  etc to help find interesting products or services. this support from the society provides a shortcut to select a good alternative as otherwise the cost and effort required is usually not deemed to be worth the trouble.
　in this age of technology  the recommender systems  rs  have come to the rescue of the users and create a technological proxy for this. recommender systems use the opinion of members of a community to help individuals identify the information most likely to be interesting to them or relevant to their needs. this is done by drawing on user preferences and filtering the set of possible options to a more manageable subset. collaborative filtering is the most common technique used by the recommender systems  in which the products are suggested to the user on the basis of users or items similarity  herlocker et al.  1; karypis  1 . however  such recommender systems ignore the social elements of decision-making and advice seeking  and hence the system model does not match the mental model of the user  bonhard et al.  1 . the user does not know about the taste of the people that form the basis to suggest products. this acts as a hindrance to trust the recommendations of the system.
　 sinha et al.  1  have shown that given a choice between recommendations from friends and recommender systems  in terms of quality and usefulness  friends' recommendations are preferred even though the recommendations given by the recommender systems have high novelty factor. friends are seen as more qualified to make good and useful recommendations as compared to recommender systems. also  the empirical studies by  ziegler et al.  1  have shown that the correlation exists between trust and user similarity when the community's trust network is bound to some specific application. in light of these studies  it can be said that the computational trust models can act as appropriate means to supplement  donovan et al.  1  or replace  ziegler et al.  1  current collaborative filtering approaches used by the recommender systems.
　to overcome the limitations of existing recommender systems  we have proposed a trust based recommender system for the semantic web. the proposed recommender system runs on the server with the knowledge distributed over the network in the form of ontologies. an individual interacts with the recommender system through an agent. the agents of the application domain form a  web of trust   guha et al.  1  and use this web of trust to generate the recommendations. in the proposed model  the recommendations are taken from the trustworthy agents only and the data as well as the methods used to generate the recommendations are with agents  making the recommendation process transparent to the user.
　 massa et al.  1; ziegler et al.  1  have proposed recommender systems that use trust to recommend products. in their work  trust values are computed in addition to similarity measures between the agents. in our work  similarity between the agents gets absorbed into trust through the process of trust update.
　the presented design uses ontologies  a knowledge representation technique for creating annotated content for semantic web. seeing the potential and popularity of ontologies among researchers  we believe that ontologies will be built and maintained in numerous knowledge domains for semantic web and future applications. the proposed architecture also enables the same agent to give recommendations on more than one subject domain. the knowledge being put as ontology on a separate tier  allows the flexibility of using more than one ontology to give recommendations on different domains or to use more than one domain to generate recommendations on a single complex problem. the presented recommender system uses temporal ontologies that absorb the effect of changes in the ontologies due to the dynamic nature of the domains.
　in the literature not much work has been done regarding the utilization of fuzziness and uncertainty in the recommendation process  even though these are inherent in it. in the proposed model we have used intuitionistic fuzzy sets  ifs   atanassov  1  that have degree of membership  non-membership and uncertainty to capture the fuzziness and uncertainty.
　the organization of the paper is as follows. in section 1  knowledge representation using temporal ontologies is discussed. section 1 presents our trust based recommender system for the semantic web. in section 1  formation of  web of trust  is described. a case study of tourism recommender system is presented in section 1 and finally section 1 concludes the paper.
1	knowledge representation in temporal ontologies
ontology is a conceptualization of a domain into a human understandable  but machine readable format consisting of entities  attributes  relationships and axioms  middleton et al.  1 . the degree of specification of the conceptualization  which underlies the language used by a particular knowledge base  varies in dependence of the purposes. an ontological commitment is thus a partial semantic account of the intended conceptualization.
　the owl  web ontology language is a language for defining and instantiating web ontologies. in owl ontology  concepts are arranged in hierarchical format with each concept represented by a node in the hierarchy. an owl class having various properties and relationships with the other classes represents each node. the temporal ontologies are implemented in owl ontologies with the introduction of new attributes to classes and properties for marking timestamp and their validity.
　relating it with the frames and slots  a class in ontology is based on the frame and its properties are slots of the frames. the relationships among different classes or frames are established by referencing related classes or instances of classes in slots or properties. the temporal ontologies are obtained through frame and slot versioning  bedi et al.  1; noy et al.  1 . when the value of a property of a class has changed or name of the property has changed between two versions  we use the slot versioning to capture the change. in slot versioning  only the version of changed property is created and inserted above the existing latest version in the same owl file. when the class name or the intrinsic attribute of the class has changed then we use the frame versioning and the whole is inserted above the existing version in the same owl file.
1	trust based recommender system for semantic web
the framework of the recommender system shown in fig. 1 uses temporal ontologies. it depicts the relationships between the agents and the ontologies. there can be m agents in the application domain that interact with each other forming a social network of agents based on trust  referred to as  web of trust . every agent has its personal temporal ontology which is populated using one or more of the n domain temporal ontologies. it is not necessary that every agent

fig.1. trust based recommender system for semantic web interact with every agent or domain temporal ontology available in the application domain.
　the domain specific temporal ontology provides the part of a specific version of the ontology or requisite version of ontology or a full temporal ontology as per the need of the requesting agent. extraction of the sub or full ontology from the temporal ontology is taken care by the web service that is also used as an intermediate layer for handling the interactions between the agent community over the web and domain temporal ontology. in this paper  we are limiting our self to the owl temporal ontology but the framework poses no restriction for the use of temporal ontologies written in other languages. the web service layer also provides an abstraction layer that isolates the domain temporal ontologies from the agent community. this abstraction allows the ontology engineers to create  develop  and update the ontology separately and then seamlessly integrate them with the agent applications  bedi et al.  1 . the use of temporal ontologies in this respect is very useful as it allows the agents in recommender system to extract knowledge from different versions of the same ontology dynamically  taking care of the changes occurring in them. the agents can continue to work intelligently by using older compatible version and yet use new version for the concepts that are added afterwards but compatible with the existing ones. this architecture also provides a great scalability to scale up recommender system developed for one domain to many domains.
　using the personal ontology  a recommender agent generates personalized recommendations for the user agent. in the personal ontology  an agent maintains the profile of the acquaintances  requisite part retrieved from the domain temporal ontology and degree of trust on the acquaintances which is computed and updated as shown in section 1.
　two types of interactions / encounters are possible between the agents: intentional and unintentional  bedi et al.  1 . when an agent intends to find interesting products for itself and explicitly seeks recommendations  the interactions are termed as intentional encounters. the agents in the application domain through  web of trust  exchange information about the products known to them during their idle time. such interactions are referred to as the unintentional encounters. the unintentional encounters help to spread information similar to  word of mouth .
　an agent can act both as a recommender as well as user agent. during the intentional encounters  one agent acts as a user agent and those known to it act as recommenders. the following sections describe how the recommendations are generated as recommender and how the user agent aggregates the recommendations to generate the list of interesting products for itself.
1	generating recommendations
the recommender agents accumulate the information during the unintentional encounters that after personalization  is passed as a recommendation to the user agent during the intentional encounters. every recommendation corresponds to a product and is in the form of ifs. the ifs recommendation of a product has a degree of membership  satisfaction   degree of non-membership  dissatisfaction  and degree of uncertainty  hesitation  signifying the relevance of the product for the user. to personalize the recommendations according to the taste of the user agent a  the recommender agent maintains the following lists in its profile:
± preference list: the preference list  pa consists of the information in terms of the attributes of the products liked by the human user connected to a. for example  in case of movie recommender system  the attributes can be directors  actors  actresses  etc. there are separate sub-lists in pa corresponding to every attribute of the product. the order of the values in the respective attribute list  signify their priority in the respective sublists.
± uncertain list: this list ua consists of the same type of information as that of the preference list  but the data about the taste of a is acquired via the feedback process mentioned below. however  there is no prioritization among the values of an attribute as recommender agent has no idea about the user preference of one value over the other.
　in this paper  we are trying to have a system similar to the social recommendation process and hence we are not restricting to the preference list or uncertain list for the user taste. as in real life  to recommend a product to someone known to us  we do take into consideration the taste of the person. but if we feel that a particular product may be of interest to the other person as the product has a general appeal or if the reviews for a product in the newspaper  magazines  etc. are good  then we do recommend that product. in such cases  if the user likes the product that actually does not conform to his/her explicitly mentioned taste  then the user agent gives a feedback as a binary value  yes or no  to the recommender agent s  who recommended that particular product. the recommender agent on getting a positive feedback from the user agent adds the attribute values of the product to the uncertain list for that user. the user agent does not rate the product in the feedback; as a result it is not possible for the recommender agent to adjust it in the preference list. this also helps to overcome the cold start problem generally faced by the recommender systems.
generating ifs for the products
　a recommender can recommend products known to it. the recommender agent comes to know about the product either through usage or through unintentional encounters. during the unintentional encounters  an agent exchanges the information about only those products that it has used and is satisfied with.
　an agent stores only the names of the products known to it in the personal domain ontology. when an agent has to generate recommendations for other agent  it retrieves knowledge about known products from the appropriate version of the domain temporal ontology.
　let the products be represented by n attributes  a1  a1  ...  an . a product p is suggested to the user agent a  along with the ifs generated for it as shown below:
1. the degree of membership of product p  μp is computed using the preference list pa  as:
1 for every attribute ai  i = 1  ...  n  do the following:
1.1 let avi1  avi1  ...  avi mi  be the attribute values of p for the attribute ai. search for these values in the sublist of attribute ai of
pa.
1.1 if avij  j = 1  1  ...  mi  figures in the list then compute the rank ravij as the position of avij in the ai sublist  else ravij is 1.
1.1 finally 
  da1     rav1 + rav1 + ... + rav1 m1   + da1     rav1 + rav1 + ... + rav1 m1   + ... +
	μ =	dan     ravn1 + ravn1 + ... + ravn mn   	 1 

	p	tt + t1 + ... + tn
where dai  i = 1  1  ...  n  represents the degree of significance that the user associates
with the ith attribute  ti  i = 1  1  ...  n  represents the total number of values that are present in the ith attribute's sublists of pa.
1. the degree of uncertainty of product p  πp is computed using the uncertainty list ua  as:
1 let there be ui  i = 1  1  ...  n  entries in the ith attribute's sublists in ua.
1 let ki be the attribute values of p for attribute ai that are present among ui entries.
1 compute the degree of uncertainty of the product p as:
	πp =  da1 k1 + da1  k1 +...+ dan   kn  	 1 
u1 + u1 + ... + un
	where 	dai  i = 1  1  ...  n  is same as in step 1.1.
1. the degree of non-membership of product p  p is compute as follows:
	νp = 1 - μp - πp	 1 
final recommendation list generation
　after matching the products with the preference list and uncertain list  the degree of membership  non-membership and uncertainty is available with the recommender agent for all the products that it knows. if a product  p has both μp and πp as zero  then the product is not considered further unless and until the recommender feels that the product has general appeal or the reviews for it are good. the recommender provides the degree of uncertainty for the ifs of such products that signify the extent to which the recommender is not sure about his/her decision to suggest that product to the user. the degree of membership is zero for such products and the third parameter is computed using eq.  1 . the following method is used to generate the final list of the products that are to be recommended to the user agent along with ifs that is computed for them:
doii = dot   r1  {μi    r1  νi        r1  π r1 } ranki    r1 ”
dot r1  {μi    r1  νi    r1  πi  r1 } ranki  r1 ”....”  1 
dot    {    rk   μi rk  νi    rk  πi    }rk  ranki    rk
where 
doii a  is degree of importance of pi as computed by
a 
” is the fuzzy intersection operator  rj is the jth recommender  μi x  is the degree of membership of pi according to x  i x  is the degree of non-membership of pi according to x  πi x  is degree of uncertainty or hesitation of pi according to x 
x （ {rj | j = 1  ...  k} 
dot rj  is the degree of trust of the a on rj  ranki rj  is the normalized position of pi in the recommendation list of rj  k is the total number of recommenders who have recommended pi.
1. compute the threshold  tdoi for degree of importance as
	tdoi = μ -  * π	 1 
where 
μ   and π are degree of membership  non membership and uncertainty  respectively that the user agent expects from the interesting products.
1. for all the distinct products  pi of step 1 if doii   1 or tdoi   doii then
 pi is recommended to the human user corresponding to the user agent
the doii is negative for those products that do not conform to the user taste exactly. they have been recommended as they have mass appeal or it has matched only the uncertain list and not the preference list.
1.	initializing and updating degree of trust on the recommenders
1	trust initialization
when a new agent comes up in the system or the system starts from the scratch  then the agents have to initialize the trust values for some of the other agents in the application domain to form its acquaintance set. if an agent is known to the other agent  i.e.  the corresponding humans know each other   then the human associated with the agent can initialize the degree of trust according to the personal dealings with the person. however  the system also allows an agent to initialize degree of trust on an agent x  on the basis of the experiences of the other agents with x  i.e.  to what extent the other agents in the application domain have received good recommendations from x. the degree of trust is then regularly updated on the basis of the personal experience of the agent with x.
　the new agent y  asks for the experience of other agents' w.r.t. x. let q agents return their experience values as the number of good recommendations received to the total number of the recommendations received from x. let jth agent gives the experience as ej. then the degree of trust on x is as following:
q
‘
ej
	dot x  = j=1	 1 
q
where  dot x  is degree of trust as computed by y on x.
　if q is large  then basically we are interested in finding what is experience of the majority of the agents for which experiences can be clustered and then degree of trust be computed  kaur et al.  1 .
1	updating trust
the degree of trust on a recommender is updated on the basis of the distance between degree of importance of the product as it is there in the aggregated list of the user agent  a  and the recommendation list of the recommender  r . the difference of opinion between the user and the recommender is computed as follows:
	d =   d1 + d1 + ... + dp  	 1 
p
where 
di = {μi r  - i r  * πi r } - {μ -  * π}  μ    π; and μi r   i r   πi r  are as defined in the section 1 
p is the total number of products in the recommendation list of r.
depending upon whether the difference between its aggregated list and the recommendations is below its acceptable threshold dt or not  the user agent updates the degree of trust  dot r  on recommender as follows:
	dot r  = dot r  +  dt - d 	 1 
in our model  hence trust increases for those who give good recommendations and vice-versa.
1.	case study
a case study of tourism recommender system is chosen to generate the recommendations for the selection of destination  travel agents and the flight schedule. the generated recommendations are compared with the manual recommendations provided by peers. the experiment is conducted to recommend cities of united states of america to the persons living in india  who want to visit usa for tourism purpose.
1	setup
in this experiment  the dataset for developing the destination temporal ontology is taken from the places rated almanac  by richard boyer and david savageau  copyrighted and published by rand mcnally. the data set rates 1 cities of usa on the nine criteria viz. climate & terrain  housing  health care & environment  crime  transportation  education  the arts  recreation  and economics. except for housing and crime criteria  higher score is better. the destination ontology is developed using prot└g└ 1 with continent  country  state and city classes in the hierarchy and then extended to temporal ontology using frame and slot versioning. the ontology contains 1 cities of usa as individuals of class city but it can be populated with the individuals of the countries  states and cities of the world.
　the travel agents use flight schedule temporal ontology to recommend flight information to the user agent. the flight class has five properties: airline rating  fare  time taken to reach destination  ticket class and availability of tickets according to traveling plan  on the basis of which the tour plan is recommended. presently  we have populated individuals of classes in the ontology manually but it can be integrated with the flight reservation systems for creating individuals dynamically.
1	experiment
the system starts with five agents  each of which can act as user or recommender agent  and five travel agents that can recommend flights for the specified destinations. the recommenders suggest destinations and the travel agents to the user agent. the destinations are suggested using destination temporal ontology. the recommenders suggest travel agents on the basis of trust on travel agents. the architecture of the system enables the recommenders to compute the trust on the travel agents for the first time and then update it with the growing experience about them. the stored trust is then used to generate the recommendations about travel agents. after selection of the destination and the travel agents  the user agent seeks recommendations about the flight schedule for the selected destination s  from the selected travel agent s . the selected travel agent s  uses the flight schedule temporal ontology to recommend flight schedule to the user agent.
　for manual recommendations  two forms are designed: one for selecting a destination and the other for flight schedule to be filled by known travel agents. twenty five known persons staying in usa were selected as recommenders. five trusted travel agents were selected to provide traveling schedule on the basis of five attributes considered in designing flight ontology. the travel agents then suggested flights for the selected destination.
　the recommendations for destination were taken against ten preference lists corresponding to ten different users. the persons who require these recommendations are of different age groups and different income groups  so their preferences are different. in case of manual recommendations  for every preference list  five recommenders suggest five destinations and every recommender suggest destinations for two preference lists. in system generated recommendations  all five agents suggest five destinations each for ten preferences. the results of the comparison of the system generated recommendations against the manual recommendations are shown in fig. 1.

fig. 1: manual recommendations vs system generated recommendations
　the graph of fig. 1 shows that the number of recommendations received from friends and system  which are above threshold of the user  follow similar pattern. similarly  the flight schedules recommended by the system travel agents and human travel agents matches w.r.t. the cost  choice of airlines and other parameters.
　the temporal effect of ontologies is under study as the ontologies have not evolved much.
1	conclusions
use of temporal ontologies make recommender systems independent of the knowledge base creation and this allows them to work seamlessly across different versions of ontologies. the system developer has more resources to concentrate on recommendation models without worrying about the knowledge base maintenance and evolution. the presented system based on temporal ontologies and trust network  generates the recommendations across multiple domains. the similarity measures are taken care in the form of trust update process. intuitionistic fuzzy sets  ifs  have been used to capture uncertainty  inherent in the recommendation process. the tourism domain being dependent on a number of domains like air travel  geography  food  entertainment  sports etc. is taken as a landmark study. at present the case study uses two domains viz. destination and travel and can be enhanced easily for other domains.
