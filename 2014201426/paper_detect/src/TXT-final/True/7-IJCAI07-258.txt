
we describe an approach to the use of case-based techniques for natural language understanding and for action planning in a system for dialogue between a human and a robot  which in our case is a uav  unmanned aerial vehicle . a single case base and case-based reasoning engine is used both for understanding and for planning actions by the uav. this approach has been developed through the work on an experimental dialogue system  called cederic. dialogue experiments where a number of users have solved tasks by dialogue with this system showed very adequate success rates  while at the same time they indicated a few weak points in the system that could then easily be corrected.
1 introduction
artificial intelligence has always been associated with natural language understanding  generation  and dialogue. however  traditional dialogue systems do not incorporate any learning abilities and very few memory abilities. the memories used are often dedicated only to discourse modeling. instead of learning  most systems rely on a repertoire of manually written phrases that are used to mimic intelligence and react correctly on the user's input. there are two major disadvantages with this design:
  it is very difficult to anticipate all the different phrases the user may use to communicate with the system. this approach requires substantial knowledge of dialogue system development and domain knowledge and it is tedious and time consuming.
  the dialogue system can not adapt to a new situation nor function well together with a learning artificial intelligence back end system that evolves over time.
the first item can partly be solved by using wizard-of-oz techniques. on the other hand  wizard-of-oz tests are time consuming and it is difficult to know if the entire spectrum of phrases is covered. further more  even if the system is well written and covers the current aspects of use  it is still static and can not adapt to a new situation.
　in this article  an approach to use machine learning techniques for natural language understanding and for action planning in a human-robot dialogue system is presented. this approach has been developed through the work on an experimental dialogue system called cederic  which is an abbreviation for case-base enabled dialogue extension for robotic interaction control.
　the machine learning algorithm selected is case-based reasoning  cbr   aamodt and plaza  1 . cbr is chosen partly because it mimics human learning  schank  1  and partly because it learns through its entire lifetime  unlike many other machine learning algorithms that only learn during an initial learning phase. cbr is used in our approach to interpret utterances from the operator and messages from the robot  and to find suitable responses to them  hence the dialogue system learns from experience and adapts to its current operator's use of language and the domain at hand. further more  cederic uses case-based planning  cbp   spalazzi  1  to make effective use of the experiences gained and combine it in different ways and in various contexts to solve new  unseen problems.
1 an overview of cederic
cederic is developed within the witas project whose goal is to develop an autonomous unmanned aerial vehicle  uav  system that is able to make rational decisions about the continued operation of the aircraft  based on various sources of knowledge including pre-stored geographical knowledge  knowledge obtained from vision sensors  and knowledge communicated to it by data link  doherty et al.  1 . the uav used in the project is a yamaha rmax helicopter which can be controlled by high level voice commands or by written commands.
　in a dialogue with such a robot  the dialogue manager must be able both to interpret the utterance from the operator  receive additional information to be able to react correctly to the utterance  compute data internally  and send commands to the agent and results to the operator. to do this  it has to distinguish between dialogue acts  physical acts  and internal acts. a dialogue act can be to ask a clarifying question to the operator  a physical act can be to ask the agent to perform a high-level command such as land  and an internal act can be to look up information in a database. these acts must be executed in a correct order to solve the problem at hand. if the information is not sufficient for the dialogue manager to complete the task then it has to ask for complementary inforoperator:	show me the front facade of the main building.
cederic: i am taking off.
cederic: is this view ok 
	operator:	climb five meters.
cederic: ok i have ascended five meters.
	operator:	fly to the red car.
cederic: ok i am starting to fly now.
cederic: i am at the car now.
	operator:	now please go to the school.
cederic: i have several schools to choose between.
which one do you mean 
	operator:	the red one.
cederic: ok i am starting to fly now. cederic: i am at the red school now.

figure 1: an example dialog performed by cederic.
mation from the operator. in such a case a discourse model is needed to  e.g.  resolve anaphoric references and to manage sub-dialogue.
　the various kinds of acts that are needed to perform a dialogue are stored as plans in cederic. for example  for the user utterance fly to the hospital  a plan can be to look up the position of the hospital  make sure that the helicopter is in the air  create a command to be sent to the robot that commands it to fly to the position of the hospital  wait for the robot to announce that it has reached the position and finally report to the operator that the robot has reached its destination.
1	a dialogue example
because of cbr  the operator is free to use synonyms in the utterances and words can be added or deleted without reducing the performance of the system  hence the operator does not have to learn and remember exact formulations.
　planning adds the functionality to combine cases to solve new  unseen problems  hence the information already known to the system can be used in new  creative ways. planning also makes cederic understand implicit commands and solve problems on its own. for example it is very useful when the system realizes some of the preconditions for performing a command from the operator  are missing. using planning  cederic can automatically perform some actions to be in a state that satisfies the preconditions.
　figure 1 gives an implemented and working example dialogue between an operator and cederic. it is nontrivial in several aspects and illustrates the benefits of the cbr/cbp approach. the first command from the operator activates a case in the case base that moves the on-board camera in the right direction to be able to view the front facade of the mentioned building. as the helicopter is still on the ground at the start of the dialogue  this command can not be directly performed  hence the system has to search all its knowledge and experiences to solve the problem and fulfill the preconditions of being in a position where the front facade of the main building can be viewed in the camera. the solution of taking off before executing the command is found automatically by the system using cbp.
　the command fly to the red car is not previously stored in the case base  but the rather similar command fly to the hospital is stored. however  the solution to the latter command does not solve the problem of the former command because a vehicle and a building are not dealt with uniformly. by using information from the command what is the position of the red car  which is stored in the case base  a plan for solving the original command can be found using cbp.
　the fourth operator command in the dialogue is an example where cbr is used but cbp is not. the command now please go to the school is not previously stored in the case base but the similar command fly to the hospital is. by using similarity measures and adaptation techniques the solution of the latter command can be transformed to solve the former command. this command also exemplifies the use of sub-dialogue and anaphoric references.
1	system architecture
the cederic architecture is shown in figure 1. the dia-

figure 1: architecture of cederic.
logue manager is connected to a speech and graphics user interface  sgui . sgui contains a map of the area where the uav is situated and functionality for the operator to choose to use either speech or text for the input to the dialogue system. the system nuance1 is used as the speech recognizer  and the systems festival1 and brightspeech1 are used for speech generation. nuance and brightspeech are commercial products. cederic is also connected to the robotic control system of the actual helicopter or to a simulator that simulates the robot and the environment.
　cederic consists of a lexicon  a case base  domain knowledge  a discourse module and a case-base manager.
　the lexicon is used to classify the words in the user utterance according to some predetermined word classes. the classified utterance is matched against cases in the case base by the case-base manager. the discourse module is responsible for maintaining a discourse model of the dialogue in order to be able to interpret the operator's sentences. the discourse model helps the system to interpret references that may refer to sentences earlier in the dialogue  to keep track of different ongoing dialogues  and to decide if it is a good moment to send a phrase to the operator or not. the domain knowledge contains an ontology of the world as the robot knows it and a categorization of the world items. the purpose is twofold. it serves as a world representation which gives cederic knowledge about which buildings there are in the known world  what kinds of buildings they are  where they are located  and their attributes such as color and facade material. it also gives cederic fundamental knowledge about categorization  e.g.  which items can be called buildings in the dialogue and which can not.
　regardless of whether a speech recognizer is used or not  a sentence from the operator arrives to cederic in plain text format. it is classified and processed in the cbr engine. cederic returns either a new phrase in text format to be sent to the speech generator  or a request to the robotic control system.
1 the case base
the actual dialogues are saved in the case base. the initial functionality is hand crafted  but more functionality is added automatically when the system is used. there are two basic case structures in the case base: dialogue cases and act cases. figure 1 shows an example of a dialogue case for the utterance fly to the hospital and an example of the first act case in the plan.

figure 1: an example of a dialogue case and a close up on the first act case in the plan.
1	dialogue case
a dialogue case contains the plan for solving a particular kind of problem. it consists of three parts:
  a problem part that describes what problem the case is solving. the problem is usually described by the words in the input phrase used by the operator.
  a discourse part that describes how the discourse model should be updated according to the problem.
  a plan part containing a plan that solves the problem. the plan consists of references to act cases that themselves are cases in the case base.
1	act case
an act case is either a dialogue act  a speech act or an internal act. arranged in plans  they build up the functionality of the dialogue manager.
act cases consist of the following parts:
  a problem part that describes which preconditions that have to be met to be able to execute the act case  and the effects of the act case.
  a solution part containing a solution to the problem as a higher order function and the parameter values used when the solution was executed.
the preconditions and the effects of an act case are used for planning and validation purposes. to be able to construct a plan in advance that probably will hold when executed  some knowledge of each act is necessary. the precondition part holds information of what has to be known before the act can be executed  and the effect part holds information of what result the act can produce. the effects may then serve as preconditions for other acts further on in the plan. each act may produce several different types of results depending on circumstances that are only known at execution time  therefore the effects part must contain information about each possible result type so that the planner can take different possible outcomes into account.
　the solution function constructs the actual result  such as a message to be sent to the helicopter control system  or performs some internal computations.
1 case-base manager
the case-base manager is the engine of cederic. it manages different ongoing dialogues and executes the best fitting act case. if there are open and ongoing dialogues  the new input is first seen as a continuation of one of the open dialogues. if it does not fit as a continuation  it is seen as the start of a new dialogue  and a suitable  similar dialogue case is searched for  and the plan is executed. the dialogue handling allows dialogue topic switches  where the operator may start a new dialogue before ending an old one  or return to an old dialogue  without confusing the system.
1	syntactic categorization of words
the utterance from the operator enters the system as a sentence in text format. each word in the utterance are categorized using a lexicon. an entry may for example look as follows  in the km1 notation  clark and porter  1 :
 school has
 instance-of  building  
 plural  schools  
 weight  1   
where school is modeled to be an instance of the category building. it also has the attribute plural which is set to schools  and a weight which is set to 1. the weight is used in the similarity function and is an indication of how important the word is for the comprehension of an utterance. a word may be ambiguous and belong to several different categories depending on the semantics of the utterance. in that case  the word is categorized with all the matching categories  and the similarity function decides which meaning to use. a word that is not present in the lexicon obtains the category nocategory.
1	case retrieval
in the retrieval phase  the utterance is compared with the problem part of each dialogue case  and a similarity value is computed. the cases are then priority-ordered using the similarity value. the similarity value is based on how well each word in the utterance matches the words in the problem formulation and the weight of each word according to the lexicon. the case retrieval phase is only executed if the input utterance is a start of a new dialogue  i.e.  there are no old or ongoing dialogues where the utterance fits as a continuation.
　to be more specific  the similarity value for each dialogue case is computed using the following formula  where wc means the sequence of words in the problem part of the case and wi means the sequence of words in the input from the operator:
similarity = points wc wi   uncovering wc wi 
where points wc wi  =

if the words are equal if the words are
classification similar otherwise
　two words  w1 and w1  are classification similar if either w1 is equal to the classification of w1  the classification of w1 is equal to w1  or the classification of w1 is equal to the classification of w1.
　when two cases have the same similarity-value they are subprioritized using the uncovering function which indicates how much the sequences differ in length. a low value on the uncovering function is prioritized.
　when the cases are ranked in order of priority  the case with the highest priority is chosen unless it does not have lower similarity value than a threshold. in that case  no similar case was found.
　if a similar case is found  the plan is validated before execution. in the validation phase  the preconditions of each act case are checked. they can be fulfilled by words from the input phrase or by effects from previously checked acts in the plan.
1 planning
planning is used in two different phases in cederic:   when there is a plan fault in the plan validation process of the most similar dialogue case  i.e.  when the preconditions of the act cases in the plan are not met.
  when there is a plan fault in the execution of a plan.
the same replanning routine  based on case-based planning  cbp  methods  is used in both cases. in cbp  different plans are combined to form a new plan that can serve as a solution to a new problem. in cederic  two plans can be combined to form a new plan  where one of the original plans works as the foundation on which the new plan is constructed. the preconditions and effects in the act cases are used in the replanning process to make sure the newly constructed plan is valid. figure 1 shows a schematic illustration of a planning problem and its solution. when a plan fault is encountered 

figure 1: a schematic view of replanning in cederic.
the effects of the previous act cases in the plan  or the results if it was an execution plan fault  are sent to the replanning routine together with the rest of the plan  i.e.  the plan where the act case that caused the fault is the first item. other plans in the case base are searched to find a plan or part of a plan that is valid to execute given the preconditions and results already obtained. all such repair candidate plans are examined to find a plan sequence that can be merged with the original
plan to create a new valid plan  that is  to find a plan sequence to execute that can produce the information needed to be able to execute the item that caused the plan fault. if several such plans are found  the shortest one is chosen.
　if no valid plan is found  the first act in the original plan is removed and the algorithm tries again to find new  partly matching plans to be used to repair the original plan  but this time the goal it to be able to satisfy the preconditions of the next act case in turn in the original plan. in this manner  parts of the original plan are replaced by parts of another plan. the newly found plan sequence is then linked back to the original plan. together with the already checked or executed act cases  the newly created plan consists of a sequence from the foundation plan  a sequence from a repair candidate plan  and then again a sequence from the foundation plan. if it was impossible to link back to the original plan  the planning routine halts with a failure message. in this way  the goal of the planning routine is exchanged during the planning attempts and the routine explores more ways of solving the problem.
　the revised plan may again obtain a plan fault when executed  and it is then repaired using the same replanning routine  but the system has to make sure it does not repair the plan with a solution that has been tested and failed previously. to avoid such cycles  the new plan is compared with the execution history  and the new plan has to be unique in some sense to be a promising repair plan.
1 case retention
when a new problem is not identical to the problem part of the plan case that was used for solving it  or the plan was not identical with the plan of the similar case  and the execution of the problem was successful  the problem and solution are saved as a new case in the case base. the new cases increase the case base and the new experiences can be used to solve other problems in the future. a new problem and solution can differ from the cases used to solve it if one or more of the following has happened:
  one or more of the words in the input are not identical to the words in the problem part of the dialogue case. they are only classification similar.
  one or more of the words in the input are added or deleted from the words in the dialogue case  but the plans are identical to each other.
  the plan has been replanned in the plan check phase.
  the plan has been replanned in the plan execution phase.
in those cases  a new plan case with corresponding act cases are created and stored in the case base.
1 tests and results
using cbr  it is possible to solve similar problems as the ones described in the case base  by adapting the solution to the most similar problem stored in the case base. this approach is mainly used in cederic to understand and react correctly to utterances where some of the words in the utterance are missing  where additional words are added  or where some of the words are exchanged to synonyms that may be unfamiliar to the system. in those cases where cbr methods alone fail  cbp is used to combine experiences from several different cases to find a solution to a new problem.
　in a test performed manually  the performance of the system has been tested with a case base that initially contained 1 different problems. using only cbr  the system could solve at least another 1 similar but not identical problems. using cbp  the system could solve 1 additional problems that could not be solved with cbr techniques only.
1	user tests
cederic has been tested in user tests  together with the sgui user interface and simulator. in one test  five persons without previous experience of cederic were used. a simple scenario including five missions and a model of the world where the helicopter is situated was given to each test person before the test began. the missions were described in such a manner that they did not reveal the actual phrases that should be used to solve them. the goals of the missions were for example to move the helicopter to a given position indicated by a building or to move it to a certain altitude.
　a reference test was also performed where five persons  different from the ones that tested the original system  were testing a stripped baseline version of cederic. the test procedure  including the order in which the missions was performed  was identical to the test procedure used in the test of cederic. in the baseline version  the similarity function only accepted utterances where the word categories  the order of the words in the utterance  and the length of the utterance were identical to the matching case. the new experience was not saved in the case base and the planning algorithm was removed. to be able to use the same test scenario  some additional cases that in the original version demanded planning  e.g. sub-dialogue due to the need of clarifying questions  had to be added to the case base.
　every test person that tested cederic completed the missions successfully. no one out of the five test persons that tested the baseline system succeeded with mission 1. the results of the tests are shown in figure 1. the large difference

baseline systemcedericfigure 1: the result of the user test where the y-axis is the average number of turns used to complete each mission.
between the number of turns needed to complete each of the five missions using cederic compared to the number of turns needed to complete  or fail due to the test person giving up trying  the missions using the baseline system indicates that cbr and cbp significantly improves the usability of a dialogue system.
　the suggested formulations  that was not understood by cederic at the time of testing  was easily implemented after the entire test for all test persons were performed. hence  the system could be improved using the dialogue collected from the tests.
1	related work
systems for dialogue with a uav have been implemented earlier  e.g.  in the witas project  doherty et al.  1 . several dialogue systems have been developed within the project. the first witas dialogue system  lemon et al.  1  was a system for multi-threaded robot dialogue using spoken i/o. the dosar-1 system  sandewall et al.  1  was a new implementation using another architecture and a logic base. our work takes a rather different approach than their systems due to the use of machine learning and planning.
　machine learning techniques in combination with dialogue systems has mostly been used to learn dialogue strategies  that is  to formalize a dialogue as an optimization problem  levin et al.  1    singh et al.  1 . the method is useful in a dialogue system where the information needed can be asked for in several different ways and in different order. learning dialogue strategies differs from the approach in cederic both in the performance and in the achieved goal  as cederic attempts to learn entirely new problems and their solutions.
　murao et al. present a dialogue system that uses cbr to learn new dialogues from an example corpus  murao et al.  1 . the cases are made up by an input from the user in natural language and the solution to the input is a reply  also in natural language. longer dialogues are not captured in the case base in the same manner as cederic does  and no planning is performed to solve new unseen problems. in combination with the lack of discourse information  this makes the dialogue rather strict and simple  compared to the dialogues in cederic.
　cederic has much in common with the interactive planning system trips  ferguson and allen  1 . the goal in both projects is to give an approach to integrated ai systems  where several ai components are integrated so solve end-to-end problems. however  trips makes a more precise distinction between dialogue and action planning than cederic. our approach integrates planning with dialogue understanding and generation more tightly. in addition it also integrates machine learning.
1	conclusion
we present a combined cbr and cbp approach to natural language understanding. both the cbr/cbp application to dialogue management  and features related to cbr/cbp techniques  such as the similarity function  the construction of the case base  and the planning algorithm  are novel contributions. the approach has turned out to be fruitful. the user of cederic can be more relaxed in the dialogue with the system  and she does not have to learn the exact phrases to be used since the system can make a qualified guess out of the information at hand. cederic also makes effective use of the knowledge gained from previous experiences  and is able to solve problems that it has not encountered before  without any help from a human operator. this functionality gives a flexible dialogue manager that is able to understand a larger number of phrases than are initially given  without the need of a human developer adding the phrases by hand. user tests shows that cederic has a good success rate and that the machine learning approach actually facilitates the use of the system.
acknowledgments
this research work was funded by the wallenberg foundation and the swedish national graduate school of computer science  cugs .
