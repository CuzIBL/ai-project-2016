on the implementation of ambit/g: 	a graphical programming language* 
p. d. rovner 
¡¡m . i . t . lincoln laboratory lexington  massachusetts 
d. a. henderson  jr. 
project mac 
massachusetts institute of technology 
cambridge  massachusetts 

summary 
         this paper deals with the implementation of an interactive graphical programming language for the manipulation of directed graphs. 	interesting aspects of the design and a user's view of the facilities are presented. 	the language is a modified version of ambit/g;1 a brief description of ambit/g is contained in the introduction. 
introduction 
         ambit/g is a graphical programming language  developed by christensen  	for the manipulation of directed graphs. 	the data upon which an ambit/g program operates is a twodimensional network of nodes and directed links between nodes. 	each node in this data graph has an associated shape  and each shape has a number of special points from which links are allowed to emanate. 	each of these link departure points  ldp's  may have at most one departing link. an arbitrary number of links may terminate at any node. 	each node in the data graph may have a 
         name; no two nodes may have the same name. each  upstream  node in the data graph  a node at which no links terminate  must have a name. 
         like snobol1 and ambit/s 1 ambit/g is a pattern matching language. while snobol and ambit/s deal with id patterns  strings   ambit/g deals with 1d patterns  graphs . 
         an ambit/g program consists of a number of statements in a 1-d graphical form  each specifying 
 1  a subgraph to be found in the data graph  
 1  changes to make to the linkages in the data graph if the subgraph is found  
 1  the statement to execute next if the subgraph is found  and 
 1  the statement to execute next if the subgraph is not found. 
         the algorithm for  finding  a subgraph in the data graph is simplified by a requirement that each upstream node in the subgraph have a name. 
* this work was sponsored by the u.s. advanced research projects agency. 
since named nodes are unique in the data graph  all upstream nodes in the subgraph can be directly associated with the corresponding nodes in the data graph  and then a node by node match test may be done for downstream nodes. this f a c i l itates very efficient  but restricted  graph matching. 
         as an example  fig. 1 shows a typical data graph  and fig. 1 shows a typical ambit/g statement. in fig. 1  the name of the statement is 
at the top of the picture  and the names of the statements to execute next in case of match success or match failure are at the bottom. the double link indicates a linkage change to make in the data graph if the subgraph matches successfully. 
         the ambit/g language affords an easy and natural way to express algorithms for building and pruning tree structures  garbage collecting a liststructure  maintaining a free-storage allocation facility  etc. typically  a user's natural view of such data structures and structure manipulation algorithms corresponds with the graphical representations of these in the ambit/g language. 
         several straight-forward modifications to the original definition of the language  see 
reference 1  were made in the course of this work. 
 1  node-shape classes were introduced. this facility allows the user to define a symbol to represent a class of node shapes. he may use such a symbol in a subgraph as a bound variable. only certain  values  may be assumed by this variable: nodes from the specified class of node shapes. in the subgraph matching procedure  when a class symbol is encountered in the subgraph  the corresponding node in the data graph is examined. if its shape is a member of the indicated class of node shapes  then the node is  assigned  to the indicated variable  and the matching procedure continues. otherwise  the matching procedure fails. this feature introduces a significant convenience when many near duplicate statements would normally be required. figures 1  1  and 1 show an example of the use of node shape classes. 
 1  several special node shapes were introduced. 
for example  the reserved shape 

-1-

may be used to predicate on the absence of a link from an indicated ldp  or to disconnect a link from an indicated ldp. fig.1 shows a statement which w i l l succeed only if the indicated ldp does not link to any node; fig. 1 shows a statement which w i l l disconnect the indicated ldp if it links to a box. 
 1  a way to combine ambit/g statements into subroutines was introduced. this led to a facility for graphical specification of control flow linkages between program subparts. one result of this was a careful reformulation of program structure. 
         a program in the language consists of a control entry point  and a number of calls on a library of subroutines. each subroutine has a 
         unique name. a program is represented graphically as a 1-d network of  subroutine-call symbols  and control flow lines. a  subroutinecall symbol  is a box which contains the name of the subroutine and several  control-flow exit points . fig. 1 shows the graphical representa-
tion of a typical program. each control-flow exit point may have at most one flow line leaving it. also  control may leave a subroutine call through only one of its exit points   i . e .   parallelism is not allowed . a subroutine call may have an arbitrary number of flow lines entering it  at most one of these may ever be active . 
a subroutine may have one of two forms: 
	 1  	a statement 
a statement in the language is represented in a 1-d graphical form  specifying  a  the name of the statement  
 b  a subgraph to be found in the data graph  and 
 c  changes to make to the linkages in the data graph if the subgraph is found. the subroutine-call symbol for a statement has two control-flow exit points: one to be taken if the subgraph is found  lower left   and one to be taken if the subgraph is not found  lower right . fig. 1 shows a typical statement and its subroutine call symbol. 
 1  	a subprogram 
a subprogram has a name and a control entry point  and is represented graphically as a two-dimensional network of subroutine call symbols  control flow lines  and  subprogram 
exit points . these points correspond to the control flow exit points on the subroutine call symbol for the subprogram. fig. 1 shows a typical subprogram and its sub-
routine call symbol. a subprogram may call other subprograms and may call itself recursively. 
         a preliminary version of the ambit/g language with the extensions outlined above has been implemented on the tx-1 computer. the available facilities on the tx-1 for interactive graphics1 are well suited for such an implementation. 
         the overall goal in the work reported here is the creation of an experimental facility for both 
the development and implementation of ambit/g language constructs. flexibility is of primary importance; modifications and extensions to the implementation should be easy to make. for this reason   the leap system1 was used to create the ambit/g facility. leap has high-level tools for doing interactive input  display output  and data-structure manipulations. 
         the remainder of this report w i l l present a user's view of the ambit/g implementation on tx-1 and a description of the leap data structure used as the internal representation for ambit/g programs. the design of the input analyzer for ambit/g programs and data graphs is discussed  and some of the problems of using such an interactive facility in time-sharing on tx-1 are analyzed. 
a user's view 
         the equipment available to a user at a tx-1 console includes a keyboard and typewriter  a computer-driven display  and a sylvania tablet. a user of extended ambit/g employs these tools to input and edit his 1-d program and data  to control the execution of his program and to examine output data. 
input 
         the sylvania tablet is the primary input device; it is used to draw in the working area  and point to light targets at the sides of the working area  see photos 1 and 1 . drawn characters are analyzed by a character-recognition program  which then dispatches to corresponding action routines. some drawn characters cause the picture in the working area to be modified; others are interpreted as control commands. for example  a drawn straight line w i l l cause a link segment to be added to a statement in the working area; a drawn 
  1   w i l l cause a return to the time-sharing monitor. 
         light targets appear at the sides of the working area  and are used either as control commands  targets at the right   or as prototype selection indicators  targets at the left . for 
example  targets at the right include explicit action commands  e.g. run  and definition mode selectors  e.g. shape  data  class  statement  subprogram . targets at the left include small pictures of the defined node shapes. 
         while a user is working in a definition mode  he deals with pictures. a picture contains 

-1-

either a prototype node shape  a data page  a node shape class definition  a statement  or a subprogram. a picture may be defined  edited  or deleted. a two-dimensional syntax check may be performed on a picture; if there are errors  indicators are displayed at the appropriate places in the working area. for example  a statement picture is checked for dangling links  illegal link sequences  and unreachable nodes. 
       after a new picture is defined  or after an old picture is edited  the user must point to the file light target if he wishes to finalize his work. if he instead attempts a command that would cause the working area to be cleaned  he w i l l be notified  and his command w i l l be ignored. any subsequent command w i l l be obeyed. this allows 
the user to easily change his mind and it helps to protect him against inadvertent blunders. if a new prototype node shape is filed  a small picture of it w i l l be appended to the list of light targets at 
the left of the working area. the user may then type in the name of a new node of that shape. the new prototype node name w i l l appear as a light target below the indicated node shape. if the list of light targets gets too long to fit in the working area  a circular buffer of light targets w i l l be created  and the turnpage light target  at the right  w i l l appear. pointing to turnpage w i l l cause the  next  portion of the list of prototype node shapes to be shown at the left. when a 
picture is filed  only graphical information is saved; connectivity information is generated from 
the graphical information in a separate step 
 called  acceptance   prior to program execution. 
       while working on a picture  a user deals with graphical entities. 	in shape mode  the entities are lines  line endpoints  and ldp indicators. 	in class  data  and statement modes  the entities are node shapes  link segments   and link segment endpoints. 	in subprogram mode  the entities are subroutine call symbols  subprogram exit points  link segments  
and link segment endpoints. 
         while working on a picture  a user may erase or move any entity. 	the erase command is simply a drawn scrub mark ww  over the entity. an entity may be moved in the working area either by pointing to it and then pointing to where it should move  or by entering move mode  another light target at the right   and then dragging the entity to its new position with the tablet stylus. once in move mode  the user may move other entities as w e l l . 	the user may return from move mode by pointing to the normal light target  also on the right. 	whenever an entity is moved  the relevant linkage lines stretch and contract. 
         while working on a picture  a user may create certain new entities. 	in shape mode  a drawn line w i l l result in a new line for the shape. 
drawing a small  x  w i l l produce an ldp indicator. in the other definition modes  a drawn line w i l l produce a link segment  complete with arrowhead. in statement mode  a line drawn with a loop  a  w i l l produce a double link segment  with arrowhead. in class  data  and statement modes  the user may point to a node-shape target on the left  then draw a number of  x's  in the working area. each drawn  x  w i l l cause an instance of the indicated node shape to appear in the picture at the indicated position. in subprogram mode  the targets on the left are the names of existing statements and subprograms rather than prototype node shapes. each drawn  x  w i l l cause the indicated subroutine call symbol to appear at the indicated position. a drawn downward arrow w i l l cause a subprogram exit point to appear near the head of the arrow. 
         the user may save his work between sessions on the computer; he may give it a name 
and write it out on his storage area by pointing to the write light target and then typing in the name; he may read in a named program by pointing to the read light target and then typing in the.name. 
acceptance 
         when a user finishes defining and editing his program and data graph  he may point to the accept light target. this w i l l cause a final syntax check to be made on all of his input  and all graphical information  positions of link segments and node shape instances  for example  to be 
processed to yield connection information  a list of nodes  ldp's  and links from ldp's to nodes . if errors are encountered during this process  they are indicated and acceptance is aborted. if the program is fully accepted  it may then be executed by pointing to the run light target. 
execution 
         when an ambit/g program is  run   the ambit/g system interprets the connection information which was generated when the program was  accepted . this information includes control connection information  which is used to regulate control flow. statements are executed by first attempting to match the specified subgraph to the current data graph. a successful match w i l l cause indicated linkage changes to be made in the data graph  and then the left  success  control flow path to be taken. an unsuccessful match w i l l simply cause the right  failure  control flow path to be taken. an error is indicated and execution is terminated if a control flow path is a dead end. if the special statement named stop is encountered  then execution is terminated. 
         there are several execution control options available as debugging aids. a user may interrupt the execution of his program by pointing to the help light target. he may cause his program to be interrupted when a specified statement is executed  

-1-

or after a specified number of statements are executed. 	he may cause the name of a specified statement to be printed whenever that statement is executed  or he may request the names of all executed statements to be either printed or displayed in order of execution. 
output 
         after a program has terminated  or after it has been interrupted  a user may examine the state of the data graph. he does this by pointing 
to the output light target  which causes him to enter output mode. the problem of automatically laying out and displaying an entire data graph has been carefully avoided; the user is required to specify small parts of the data graph that he 
wishes to see  and he is encouraged to aid in the layout of these. 
         upon entering output mode  the node shape and node name prototypes appear again as light targets on the left. 	the user may point to a node name prototype  then draw an  x  in the working area. 	an instance of the indicated named node w i l l appear. 	the user may then point to an ldp on the new instance. 	if a link departs from the corresponding ldp in the data graph  both the link and an instance of the node of the end of the link w i l l be displayed. 	the program w i l l decide where to display the new instance. 	the user may override this decision when he points to an ldp by immediately drawing a line to a position for the new instance. 	if a link does not depart from the corresponding ldp in the data graph  a star  *  is displayed on the indicated ldp. 
         the user may continue to point to other ldp's in the working area  or create instances of other named nodes. he may use special drawn characters to shrink or expand his picture  and translate it up or down  left or right. he may erase  by using a drawn scrub mark  any link or instance in his picture. any links or instances which are downstream w i l l also be erased. 
         when the user finishes examining his datagraph  he may return from output mode by pointing to the done light target. 	he may resume execution of an interrupted program by pointing to resume. 
internal representation 
         an ambit/g program and data graph is represented internally by a leap data structure. a brief introduction to leap follows. 
         a leap program deals with items  triples  and sets. an item is used to represent either an element in the data structure or an attribute which relates two items. an item may have an associated algebraic datum. a triple is an ordered collection of three items and is usually used to represent a fact of the general form: 
 1  attribute   object = value 
¡¡¡¡¡¡¡¡¡¡¡¡ attribute of object is value.  a set is an unordered collection of items. 
examples taken from the implementation follow: 
 a  an instance of a node shape in a statement is represented internally by an item having a matrix as its datum. this matrix contains the display coordinates of the instance. 
 b  every instance of a node shape is associated with the node shape prototype by a triple of the form: 
 1  shapeof.instance# =- shape# 
in  1   shape of is a declared item  and instance* and shape* are item type designators; i.e. a triple beginning with sh apeof associates a node shape instance with a node shape prototype. 
 c  the declared set shapes is the set of all node shape prototypes. 
         the item type designators and prototype triples for selected parts of the internal representation of a program and data graph are tabulated below. certain item type designators need further explanation. 
	 a  	line* 
links in data pages and in statements are composed of lines. a line in a statement may be double  have the double property . 
	 b  	dtapg* 
at accept time  all data pages are merged to generate the initial data graph. 	overconstraints are noted and reported. 
	 c  	ildp* 
at accept time  each ldp of each instance in the structure is examined to determine if it is the start point of a link. if so  an ildp  instance link departure point  is generated and associated  via triples  with the instance and with the indicated ldp on the node shape prototype. 
aspects of the design 
         several design decisions were made after implementing and experimenting with various alternative designs; convenience for the user was the primary consideration in these decisions. 
         no push-buttons or toggle switches are used; we felt that these are confusing and distracting. use of a simple drawn character or a light target is easier. 
         the user does not draw node shape instances  but rather points to the desired shape and then draws an  x  at the desired position. the special symbols that the user may draw are simple enough to recognize easily  and are quite 

-1-

convenient to use. 
         there are two ways to move an entity in the working area: by drawing a  move character  or by entering  move mode  and dragging the entity with the tablet stylus. experience has indicated the necessity for both. the move character is useful for a single move command if the destination is clear.  move mode  is useful if many moves are to be performed or if the user wants response as the entity moves. 
         when the user draws in the working area  he is drawing on a square grid. that i s   the endpoints of all lines and the centers of all node instances w i l l be automatically put on the nearest grid point. this feature makes neat drawings and does not restrict the user appreciably. he may be reasonably sloppy in drawing a link  for example  and the startpoint w i l l be made to coincide with a nearby ldp. there are two grid sizes: one for shape mode  and one for the other modes. when drawing a shape declaration  it is convenient to work on a fairly gross grid  the working area has 1 grid points on a side in shape mode; in the other modes  it has 1 grid points on a side . 
         no automatic graphical syntax check is made while the user is defining his program and data graph. the syntax of his data graph and program pictures is checked only upon explicit request from him or at accept time. this allows him to file away a partially completed picture. the system is considerably simplified by this feature because it needs only to remember a list of picture parts and their positions until accept time. also  a change made to a node shape declaration has no subtle effect on the connectivity of a program statement in which there is an instance since no connectivity information is kept. 
         the program for displaying the modified data graph was made as simple as possible  primarily because any automatic layout facility is 
very difficult to implement and would not be significantly better than the simple scheme. 
         light targets are displayed only when they are relevant; this helps to minimize confusion and provides an indication of the state of the system. 
conclusion 
         the preliminary system has been used to implement two examples. 
 1  the list-structure garbage collection program used as the example in reference 1-
 1  a reductions-ana lysis program for parsing an input string from a simple grammar and building the computation tree. 
         the experience of using the system in timesharing on tx-1 has pointed out some major inade-
quacies in the environment. the programs are fairly large and typically require fast response and a small time slice. when the time-sharing system has a medium to heavy load  response lag-time increases to 1 to 1 seconds. typically  a user must wait about 1 seconds after drawing a symbol  or pointing to a light target  before he can draw the next symbol. for this kind of application on tx-1 either the environment in time-sharing must be reorganized or the machine must be used in dedicated mode. 
         the poor response in time-sharing is caused primarily by the need to swap users in and out of core. 	the response lag-time increases dramatically as soon as the total active user core requirement exceeds available core. 	this problem is aggravated by two things. 
 1  the swapping mechanism being used is very slow  it is a fastrand ii drum which is meant to be used for file storage . 
 1  people tend to write very large programs  the lincoln reckoner is a notable exception  because there is no convenient way to segment programs. for example  the leap compiler does not compile relocatable code nor w i l l it compile subroutines separately from a main program. there is no relocatable loader facility; even the assembler assembles nonrelocatable code. 
         other factors which contribute to system overhead are: 
 1  the main frame is used to process interrupts and track the two tablets. if both tablets are active  this overhead is very large. 
 1  the display structures for all active displays reside in core; the display generator steals memory cycles to refresh the displays. 
         in the course of this work  several ideas for further extensions to the language have arisen. for example  a way to manipulate algebraic values is needed. 	also  a facility for linking to programs 
written in other languages is desirable. 	other suggestions include the following: 
 1  display a selected portion of the data graph dynamically as the program is executed. 
 1  display the main control flow diagram and blink the subroutine call symbols which are active as the program runs. 
 1  improve the character recognition program to the point where it is easier to use than the keyboard  and eliminate the keyboard. 
 1  take advantage of the two-dimensional control flow specification to allow concurrent control flow paths  parallelism . 
         the programming work was done entirely in time-sharing using the leap language. 	both of these tools were found to be crucial to the development. 	machine availability for editing  debugging  

-1-

and experimenting was very important; a timesharing console was perfectly adequate and readily 
available. 	the facilities in leap for expressing interactive input and display output were found to be very powerful and very easy to use. 	the ability to make changes easily to the implementation made much of the experimentation feasible; a program written in leap is relatively easy to read and understand. 
         the language forms for building and manipulating a data structure in leap were used extensively to create and process the internal representation of an ambit/g program and data graph. it was unnecessary to design and implement an elaborate list structure to house the internal representation; we were free to concentrate on the design of interactive features because we were insulated from many of the intricate details of the data structure implementation. inefficiencies have been introduced into the ambit/g system by the use of leap; these are noticeable only when a large computation has to be made  when checking  accepting or running . the programs could be made considerably smaller and faster if they were recoded in machine language  but this would require much work and would remove much flexibility. acceptance time could be decreased by maintaining partial connectivity information as pictures are i n put. this would complicate the input programs  but might improve overall response. 
