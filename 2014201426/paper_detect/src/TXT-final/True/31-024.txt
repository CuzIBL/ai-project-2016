 
this paper addresses a model of analogy-driven theorem proving that is more general and cognitively more adequate than previous approaches. the model works at the level of proof-plans. more precisely  we consider analogy as a control strategy in proof planning that employs a source proof-plan to guide the construction of a proof-plan for the target problem. our approach includes a reformulation of the source proof-plan. this is in accordance with the well known fact that constructing an analogy in maths often amounts to first finding the appropriate representation which brings out the similarity of two problems  i.e.  finding the right concepts and the right level of abstraction. several well known theorems were processed by our analogy-driven proof-plan construction that could not be proven analogically by previous approaches. 
1 	introduction 
theorem proving by analogy finds a proof/proof-plan for a target problem guided by a given proof/proof-plan of a source problem which is similar to the target problem. the main use of analogy consists in reducing the search  or user interactions  by suggesting target proof steps that correspond to the source case. at the same time it can propose lemmas to be used in the target case that are similar to the source lemmas. mathematicians have clearly recognized the power of analogical reasoning in mathematical problem solving  hadamard  1; polya  1 . hence  integrating analogy into theorem provers was pointed out as one of the challenging problems in automated theorem proving in  bledsoe  1; wos  1 . 
　in this paper a new approach to theorem proving by analogy is presented that works at the proof-plan level rather than at the actual proof level. first the need for a new model is substantiated by contrasting the way mathematicians use analogy to previous techniques for analogy in automated theorem proving. then the model 
*on leave from university saarbrucken  germany 
1 	automated reasoning 
is presented  and finally a small example illustrates how the analogy-driven proof-plan construction works. 
1 	the need for a new model 
kling's work  kling  1  was one of the first attempts in theorem proving by analogy. his system essentially produces mappings between predicate symbols. these mappings are applied to the assumptions of the source proof to find the assumptions for the target proof. 
　 munyer  1  focusses on the formulas derived in each proof step. munyer applies a symbol mapping  constructed from the source and target theorem  to these formulas in order to obtain the derived formulas in the target proof. 
　 owen  1  thoroughly analyzed kling's and munyer's approaches to theorem proving by analogy and showed them inadequate even for many simple analogies. owen's account emphasizes the matcher that recursively constructs symbol mappings and argument pairings. he transfers single calculus steps  i.e. binary resolution and paramodulation  from the source proof to provide steps in a target proof. 
　in  brook et a/.  1  an initial symbol mapping and a pairing of definitions and lemmas of the source with those of the target is to be provided by the user. focussing on failed constructions of analogous proofs some heuristics are used for patching target proofs. in the same intellectual tradition bledsoe continued dealing with the debugging of analogies by his precondition prover  bledsoe  1 . 
　in summary  computational accounts of theorem proving by analogy have been dominated by the idea of mapping symbols of the source theorem to symbols of the target theorem and employing an extended symbol map for transferring single proof steps of the source to the target1. 
　empirical investigations  however  provided evidence that this idea does not appropriately cover many analogies drawn by mathematicians  not even all the analogies of a standard textbook  deussen  1  we used for an empirical study  melis  1a . i empirically analyzed mathematical theorem proving  melis  1a  and found that: 
　though bledsoe transfers larger steps calling an automated prover but again uses symbol mapping. 

  theorem proving by analogy is embedded into proof planning: methods  rather than just single calculus steps  are transferred analogically in mathematical theorem proving by analogy-
  for many of these analogies just symbol map-ping is insufficient. a change of a problem representation by  e.g.  unfolding a definition  can be necessary to reveal the commonality of theorems or assumptions  upon which the analogical transfer is based. other mappings of problems and proofs that go beyond symbol mapping are necessary as well. for some analogies  first the right level of abstraction has to be found before transferring a proof. 
  many proofs by analogy result from transfer-ring parts of the source proof to parts of the target proof  and some proofs by analogy transfer only the proof idea  while others transfer a detailed proof. 
1 	the model 
our approach takes into account the above mentioned empirical findings and incorporates 
  the analogical transfer of proof-plans  
  a reformulation of proof-plans that includes abstraction1 and other reformulations that go beyond symbol mapping. 
  the restructuring of proof-plans. proof-plans  defined below  were introduced in 
 bundy  1 . to motivate the analogical transfer of proof-plans rather than of proofs: proof-plans are high level representations of proofs that consist of methods. we postulate that the transfer of plans by using and transforming their methods is the right level of abstraction at which to draw analogies: if methods are named  like  e.g.  the diagonalization method  melis  1b   then mathematicians claim to prove the theorem by the same method. if no name is established for the way a theorem is proved  then they just say that the proof is done analogously. proof-plans are better suited for analogical transfer than formal proofs which are often too brittle to apply a transformation in general1. but still proof-plans contain enough information to construct a concrete proof for a given problem. proof-plans encode the structure of a proof because they consist of general methods encoding a proof idea and of more specific  detailed methods. hence  analogies at different levels of details can be realized by analogically transferring to the target the transferable methods of a source proof-plan. in maths  as in all complicated domains  control knowledge  as part of mathematician's expertise  plays an important role by drastically restricting the search and by guiding problem solving. as opposed to actual proofs  proof-plans may record justifications for the proof planning decisions  e.g. the relevant control knowledge  and this information can be reused for constructing a target proof-plan. in our derivational analogy  see below  a decision in the target is made correspondingly to the decision in the source only if the justifications of the decision hold in the target as well. thereby the requirement of a semantic justification of analogical reasoning  russell  1  can be met. proof-plans may record user interactions and thus avoid the tedious user-supplied guidance in theorem proving  that is usually necessary to produce a complicated proof 1 by reusing a great deal of the previous user decisions. we integrate the call of an automated theorem prover  atp  into our plan operators and thus obtain another advantage of transferring proof-plans  namely the suggestion of proof steps likely to be feasible for an atp within a given time limit. 
　the description of the top level procedure will be general enough to cover analogy for different proof planners. of course  the concrete implementation depends on the respective planner and its operators. for instance  for employing the full range of reformulations  the operator representation has to be mainly declarative. therefore we refer to the operators designed for -mkrp  huang et a/.  1a . we briefly review how these operators and plans are defined  introduce reformulation and decomposition  and discuss the analogy procedure. 
operators 
sequents p =  a f- f   are pairs of a set a of formulas and a formula f in an object language that is extended by meta-variables for functions  relations  formulas  sets of formulas  and terms. 
　our planning operators  called methods  are framelike structures defined in  huang et a/.  1b  with preand postconditions just as the common planning operators. more specifically  methods m have the following slots: parameter  preconditions  pre m    postcondition  post m    constraints  proof schema and procedure. pre m  is a set of sequents from which the application of the method derives post m  which is a sequent as well. pre m  and post m  both are needed for planning. the constraints are formulated in a meta-language and serve to restrict the search during planning  e.g.  restrictions of pre m   post m   or of the parameters. the proof schema is a declarative schematic representation of proofs in the object logic  relying on the natural deduction  nd  calculus and on invoking automated theorem provers such as otter  mccune  1 . the standard program in the slot procedure executes the application of the proof schema. 
　our methods mainly differ from those in  bundy  1  in that the tactic slot is replaced by a declarative proof schema and a procedure interpreting this schema1. the intention behind this difference is to enable reformulations of methods. 
　a method is verifiable if  given pre m   then the method yields a correct proof of post m  for every in-

　1including abstraction into analogy has also been proposed in  plaisted  1; villafiorita and sebastiani  1 . 
　1personal communication with bob harper concerning transformational tactics in nuprl. 
　1 for instance  1 lemmas had to be user supplied in shankar's proof/verification of godel's first incompleteness theorem boyer and moore  1  . 
　1besides  the slots are renamed  e.g.  our preconditions are named input there. 


1 	automated reasoning 

table 1: outline of the analogy-driven proof-plan construction 
　the first goal of the linearized source plan  usually the source problem p1  is chosen in 1. if ps can be reformu-

　1add-arguments is applicable to a proof-plan if a function / with n arguments is to be mapped to an /' with n + m arguments  where the m arguments to be duplicated are specified out of the n arguments of / as parameters of the meta-method. the meta-method replaces the / by /' in goals  assumptions  and methods and yields additional related changes in methods. 
　1for example   initial-segment concatenation  and  finalsegment concatenation  in transformational analogy correspond to some normalizing reformulations. 
lated by a p such that it matches the target problem pt  then p will be applied to the  current  source plan and the method m with post m  =  is a candidate for the transfer to the target. if p1 cannot be reformulated by a p to pt  then decomposition is applied in order 
　1for missing m  := set of preconditions of m that do not match a current target assumption. the sequents of missing p'm  become new open goals if p' is an acceptable reformulation. 

to find a submethod m1 of m that can be transferred. if in 1 or 1 a decomposition is not possible  then the plan stays unchanged. after the decomposition a new reformulation p and match of post m1  is tried and 1. suggests pm1 as a candidate a target method. 1. checks whether the justifications of the source method hold in the target for pm1 and if so  its verifiability is checked. the latter test is necessary because reformulation does not necessarily preserve verifiability. if pm1 is not verifiable  then a promising modification is applied  either decomposing the method in order to obtain a verifiable submethod or calculating additional preconditions of the method yielding verifiability. . in table 1 verify/modify m abbreviates: 
  test verifiability of m 
  if m is not verified  then modify m to a verifi-able  sub method1 
  update open target goals and assumptions 
  link the verifiable method to source plan. 
　the analogy procedure is repeated  first testing termination conditions  l. 1. . base-level planning is activated when the guidance by the source proof-plan is exhausted in order to prove the remaining open goals. superfluous steps in the target plan are skipped in 1. this procedure yields a target plan with verified methods. the target plan may have open goals. 
　phrased in the terminology of case-based reasoning  adaptation takes place via reformulation of proof-plans  through modifying not verifiable methods  skipping superfluous methods  and through closing gaps in the target plan by base-level planning. 
　the possible objection that every new example would need a new set of meta-method did not turn out to be true. reformulation focussed on alteration and  unexpectedly  restricted term-mapping and add-argument were used quite often. 
controlling the search for reformulations 
so far we have only few meta-methods available and thus search is restricted. as the set of meta-methods expands  however  the following control features become more important: 
  the application of meta-methods is controlled by their application-conditions. 
  the reformulation of source plans is guided by the target goals and assumptions to be matched. 
  the following fixed sequence of reformulations proved most useful: normalization  abstraction  alteration  reversion and should thus be superimposed upon search. 
  user-supplied correspondence tables for rela-tions and functions in specific maths areas carry semantic information and provide additional guidance for reformulations. a correspondence table helps to relate source to target assumptions and may prescribe the mapping of function or relation symbols. 
　with a growing variety of reformulations it will be necessary to meta-plan the application of meta-methods no result if no verifiable  sub method exists. 
1 	automated reasoning 


1 	conclusion and future work 
analogy in theorem proving does not work as a stand alone problem solver but works very much in connection with ordinary theorem proving  for instance  to validate details which are left as open goals. besides  a source proof-plan has to be provided using proof planning. there are neither guaranteed success nor completeness claims in this context because analogy is a heuristic strategy that is tentative. 
　our approach combines ideas of previous systems for theorem proving by analogy with derivational and transformational analogy. it works in a planning framework and incorporates reformulation  and thus  it is more widely applicable than previous approaches which did not attempt to re-represent the source problem and  hence  their results were highly dependent on the actual representation of theorems and proof assumptions. wider applicability is documented by several experiments with the analogy-driven proof-plan construction on real mathematical theorems which succeeded in providing analogous proofs where other approaches did not. the experiments dealt with theorems from a standard text  melis  1b   the pumping lemma for context free languages  melis and veloso  1   and a heineborel theorem  melis  1 . these theorems provide a small but quite a representative sample. furthermore as discussed above  the approach is cognitively more adequat: among others   melis  1  has shown that the interpretation of parameters  that might be necessary for completing an analogous proof  corresponds to situations observable for a mathematician's use of analogy. 
　in general there will be a tradeoff between the higher flexibility and the search needed for reformulation in automatic analogy-driven proof-plan construction. since usually only few reformulations are needed  however  the search for appropriate reformulations is much less than the search usually needed for a proof. 
　currently some reformulations are implemented but chosen by the user. the retrieval of source proof-plans has not yet been approached. hence  up to now we model common situations in which the source is given only. besides further implementation future work is necessary to retrieve the source proof-plan automatically  to automatically control the application of reformulations  and to discover more  frequently used maths reformulations. 
acknowledgements 
many thanks to woody bledsoe for help and encouragement. i would like to thank manuela veloso  manfred kerber  xiaorong huang  dieter hutter  and alan smaill. 
this work was supported by a research grant of the deutsche forschungsgemeinschaft and hc&m contract chbict1. 
