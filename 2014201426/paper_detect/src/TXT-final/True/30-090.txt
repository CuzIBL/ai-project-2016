 
this paper argues that the reuse of domain knowledge must be complemented by the reuse of problem-solving methods. problem-solving methods  psms  provide a means to structure search  and can provide tractable solutions to reasoning with a very large knowledge base. we show that psms can be used in a way which complements large-scale representation techniques  and optimisations such as those for taxonornie reasoning found in cyc. our approach illustrates the advantages of task-oriented knowledge modelling and we demonstrate that the resulting ontologies have both task-dependent and task-independent elements. further  we show how the task ontology can be organised into conceptual levels to reflect knowledge typing principles. 
1 	introduction 
developing reusable ontologies which specify the structure and content of domain knowledge has become a central problem in the construction of large and scalable knowledge based systems. for example  a key step in kbs construction using the cyc system  lenat and guha  1  is to extend the existing upper-level ontology by creating new classes and representations. methodologies for ontology development  have been proposed  lenat and guha  1; usehold and gruninger  1; blazquez ct a/.  1 . however  many unsolved problems remain. other important issues concern the relationship between the domain representation and its intended use  wielinga ct a/.  1; van heijst ct a/.  1 . we shall concentrate on the representational and performance issues focusing initially on the reasoning processes  and reflect on the implications for domain representation in the light of these findings. 
　versions of cyc are currently being used as an integration platform by the darpa-funded high performance 
knowledge bases  hpkb  program. key issues on the hpkb program are the scalability  robustness  and reusability of knowledge-based system solutions. cyc is unique in that it  has potential solutions to each of these problems. 
　cyc uses a resolution-based inference procedure that has a number of optimisations that improve the scalability of the architectures for example  a specialised taxonornic reasoning module replaces the application of the logical rule for transitivity of class membership. where specialised modules are not implemented  cyc makes use of weak search methods to perform inference. cyc lacks any principles for structuring inference at a conceptual level. problem-solving methods provide precisely this structure  hence the importance of integrating structuring principles into a scalable kbs architecture. 
   robustness and reusability are related properties of the knowledge representation scheme and the inference rules: predicates such as borderson and between  defined in the upper-level ontology  can be reused in many different contexts. the combination of predicate properties  such as symmetry  and existing inference rules means that the use of these predicates is robust. reconciling units of measure is a similar problem. in this case  cyc has sufficient  knowledge to prove  greaterthan  meter i   centimeter 1   using its existing definitions and rules about units of measure. reusability is also an important motivation for defining a upper-level ontology as the basis of knowledge representation. the upper-level ontology can be shared among more specialised reasoning contexts or applications. extensions to the upperlevel can themselves be shared  and can be regarded as ontologies in their own right. 
　we describe the implementation of a psm for fault diagnosis in cyc. the diagnostic method was applied to two different domains to investigate whether the potential for method reuse was actually achievable. as implementation was preceded by a significant amount of domain and task analysis  this work allows us to review the value of the methodological approach and to investigate issues such as the task-dependence of the ontologies constructed. this paper begins with an introduction to the component  technologies used-commonkads and cyc- and then describes the implementation of the psm and the associated knowledge modelling. 
	aitken and sklavakis 	1 

1 	component technologies 
1 	psms: the commonkads view 
in commonkads  problem-solving methods are the product of expertise analysis - one of several analysis steps which are specified by the methodology. psms are also used in protege  puerta et al.  1   and in expect  gil and melz  1   although in different forms . psms define distinct methods for performing a task  for example  diagnosis can be modelled as involving a heuristic association between observations and solutions  or as a process of decomposing a system and testing its subcomponents for correct operation. in addition to specifying an inference procedure  psms require that domain knowledge be modelled in particular ways  i.e. a method ontology is associated with a psm. 
   commonkads is a methodology for kbs development which addresses not only the desired problemsolving performance of the end system  but the context in which it will operate. a number of models are constructed in the analysis phase: an organisational model represents the processes  structure  and resources of the organisation which is to use the kbs  a task model describes the activities of the process of interest  an agent model represents the agents involved in the process and their capabilities  a communication model describes agent  human and machine  communication  an expertise model defines domain and problem-solving knowledge  and  finally  a design model describes the structure and function of the system that will implement the knowledge-based task. more details of the various models  and appropriate modelling techniques can be found in  kingston et a/.  1 . 
　commonkads is relatively neutral on questions of implementation. however  expertise modelling does make a number of assumptions about knowledge representation constructs and their interaction. the expertise model has three layers: the domain layer represents knowledge about the domain  the inference layer defines the procedures applied during problem solving  and the task layer specifies the ordering of inference steps. as the expertise model is the only commonkads model that captures expert problem-solving behaviour  we shall limit our attention to representing this model in cyc. 
1 	cyc 
cyc is a very large  multi-contextual knowiedge-based system which is currently being used commercially by cycorp. cyc is also used for research purposes  and  in the hp kb program  cyc is being used as a platform for technology integration. 
the arguments for cyc proposed in lenat and guha 
 remain the cornerstones of the cyc project; namely  the need to overcome the brittleness of traditional expert systems  and the means of achieving this through the development of a shared ontology representing 'consensus reality'. the upper-level ontology  which constitutes the basis of knowledge representation in cyc  has been made publicly available. however  this repre-
1 	knowledge-based applications 
sents only a fraction of the knowledge which has been entered into cyc. 
　the upper-level ontology is represented in a variant of first-order logic known as cycl. the ontology includes: classes used for constructing representations  for example set orcollection and predicate; classes for high-level concepts such as event and agent; and more specific classes representing commonly occurring objects and events such as book and birthevent. 
　assertions in cycl are always associated with a microtheory context. the basekb contains the upper-level ontology and new contexts can be defined which specialise this theory. multiple inheritance of microtheory contexts is allowed. alternative specialisations of a microtheory need not be consistent with each other: a microtheory can contain ontology extensions and assertions which are inconsistent with those defined in a different theory - providing neither context is defined as subsuming the other. the microtheory mechanism plays an important role in structuring inference. 
　cyc performs inferencing in response to a query by the user  by backward chaining  or in response to an assertion  by forward chaining with rules which are explicitly specified to be forward rules . queries are made in a specific microtheory which forms the local search context. typically  a microtheory will be a specialisation of one or more theories and in this case search will progress out to wider contexts should a solution not be found locally. queries are treated in a purely logical manner: the order of conjuncts is not considered to be significant and may be changed by optimisations operating at the clause-form level. the preconditions of rules are also treated in this way - prohibiting the user from influencing the search process in a predictable way. the dependencies between derived facts  rules and assertions are recorded and maintained by a truth maintenance mechanism. 
　cyc's purely declarative treatment of rules differs from other approaches to logic-based knowledge representation  such as prolog  where the ordering of clauses  and of literals within clauses  is used to determine the order of search. 
　the cyc system includes a number of tools for viewing and browsing the ontology. in common with other browsers  including that for loom  macgregor  1   terms in the ontology are hyperlinked in a web-based interface. this allows the user to explore the concepts which define  or are subsidiary to  the concepts currently being displayed. 
　the cyc system also gives the kbs developer access to a lisp-like environment where new procedures can be defined in the subl language. the cyc knowledge base and inference engine can be accessed via the subl functions ask and assert. due to the treatment of rules described above  imposing structure on the search process necessarily requires subl coding. 

1 	systematic diagnosis in cyc 
this section describes the expertise modelling process and presents its products. the implementation of these models in cyc is then outlined. we begin with a brief introduction to the domain and the diagnostic task. 
　the task of diagnosis was selected because a set of well understood methods for solving such tasks already exists  wielinga et al  1 . an important part of expertise modelling is the selection between alternative methods - with their accompanying behaviours and assumptions. the choice of a specific diagnostic method was not made prior to domain analysis. it is readily apparent that we have chosen a problem type that falls within the scope of the methodology we intend to apply. however  it is not at all obvious that diagnosis-which is inherently an incremental procedure requiring information gathering can be adequately implemented by backward chaining driven by a query-based interaction  i.e. by the default environment provided by cyc . we shall return to this point below. 
　fault finding in personal computers  pcs  was chosen as the primary task domain. this task can be modelled accurately  i.e. the actual behaviour of human experts is known and has been documented  kozierok  1   yet the amount of electronics knowledge required is low as fault finding never progresses to a level where sophisticated test equipment is required. the second domain chosen was fault finding in an automobile ignition system. this task ought to be soluble by the method developed for pc diagnosis  despite differences in the characteristics of the domain and in the method ontology. 
1 	modelling expertise 
the selection of a problem-solving method is one of the central modelling decisions in commoiikads. this will typically have an impact on domain representation. following this approach  the pc-diagnosis problem was addressed by investigating candidate psms. as psms may be refined in several different  ways  alternative instantiations were also investigated. this is a notable contrast with a domain-oriented approach which would focus on developing an ontology of the domain being reasoned about  pc systems and their components in this case. 
　the systematic diagnosis psm was found to match the expert reasoning process most closely. the generic model had to be adapted to reflect expert reasoning more faithfully. the central steps in systematic diagnosis are the decomposition of the system being diagnosed into subsystems  and the testing of the subsystems for correct operation by making tests and comparing the observed with the predicted outcomes. the subsystem currently being tested is said to play the role of the current hypothesis. testing may rule out this hypothesis  in which case another subsystem becomes the hypothesis. testing may yield an inconclusive result  in which case more tests are required  or testing may indicate a fault  in which case the diagnosis is concluded if the current hypothesis cannot be further decomposed  i.e. it is a component   or diagnosis continues at a lower level of 

figure 1: psm for systematic diagnosis 
system decomposition - if the current hypothesis can be decomposed  i.e. it is a system . the system model may describe how the system is decomposed into  physical  parts  or may describe the functional relationships between systems. 
　it was discovered that the the part-of model  which lies at the heart of systematic diagnosis  had to be instantiated to functional-part-of in the pc diagnosis domain. that is  problem solving requires a functional view of the system  rather than a component/subcomponent view. the functional-part-of predicate is clearly a representational construct at the domain level  and is one of several part-of views that might be taken of a system. in fact  there was no need to represent the physical-part-of relation in order to solve this problem. 
　another important refinement of the generic model was the addition of theories of test ordering. where there are several decompositions of a system  the model permits any subsystem to play the role of hypothesis. however  in pc diagnosis it is important to establish first  for example  that the power system is operational  then that the video system is operational. once the video system is known to work we can be sure that the results of bios system tests are being displayed correctly. similar ordering constraints were found for all subsystems  and at all levels of decomposition. consequently  there is a need to impose an order on hypothesis selection  or  equivalently  system decomposition  and we chose to represent this knowledge in a heuristic fashion via a testafter predicate. figure 1 shows the specialised psm in a diagrammatic form. 
　determining the overall view of the desired problemsolving behaviour aided knowledge acquisition  much of 
	aitken and sklavakis 	1 


figure 1: upper-level ontology extensions - distinguished by level 
which concerned the extraction and structuring of information from an on-line source  kozierok  1 . our experience confirmed the claimed advantages of the modelling approach. in addition to specifying an inferencelevel procedure  knowledge acquisition also requires the content and scope of domain knowledge to be determined. the task of representing domain knowledge in cyc followed the standard procedure of extending the ontology by defining new collections and predicates  and linking these to existing constants. we now describe the cyc implementation in more detail. 
1 	cyc implementation 
diagnosis requires interactive data gathering  and the subsequent evaluation of test results and updating of the current hypothesis. such a procedure cannot be implemented by logical inference alone  and so it is clearly necessary to use cyc's lisp-like language  subl  to implement a control regime. in commonkads  control knowledge is divided between the inference layer  where knowledge roles and inference steps are defined  and the task layer  where the order of application of inference steps is specified. our aim was to represent the levels of the expertise model in cyc in as faithful a manner as possible. we begin by considering domain knowledge. 
　domain knowledge was represented by extending existing collections where possible. figure 1 shows a small illustrative set of the extensions made. the collection pcsubsystem was added as a subcollection of composite-
tangibleandlntangiblething  and pccomponent was defined as a specialisation of it. both types of object have a tangible component  and may carry information hence have an intangible component also. test act ion was defined as a new collection of purposeful action  and the in-
1 	knowledge-based applications 
stances of remove  replace  and confirmsensorially  i.e. confirm by observation  were added  sklavakis  1 . functionalpartof was introduced to represent the functional decomposition of a system  and stated to generalise to parts  being the most general existing part-of predicate in the upper ontology1. other specialisations of parts include physicaldecompositions and timeslices. 
　the predicates testfirst and testafter were introduced as predicates to represent the test ordering theory. a test is defined by three components: a test act ion  a pcsubsystem and a possibleobservable. the collections possibleobservable  possibleobservablevalue  and resulttype were defined as subcollections of attributevalue. the representation of testing knowledge can be made more robust by grounding it extensively in the upper ontology. in contrast  part-of facts are not likely to be derivable by appeal to background knowledge. 
　at the inference level  knowledge roles are represented by predicates  and inference steps are rules which have knowledge roles as preconditions and conclusions. figure 1 shows the introduction of the knowledgerole collection  a specialisation of the predicate class of the upper ontology. instances of knowledgerole predicates take domain-level formulae or collections as arguments. examples include; the unary predicate hypothesis - applicable to pcsubsystem - denotes the current hypothesis  possibletest holds of applicable tests  and the relation predictedtestoutcome holds of a test  possibleobservablevalue and a resulttype. more complex mappings to the inference level  and the definition of additional collections and terms  are also possible within this approach. the cycl language is sufficiently expressive to allow complex mappings of the type described in  wielinga et a/.  1  where the inference-level ontology  in our ter-
minology  might define relations holding of domain-level ontology  e.g. we could express the fact that physicalpartof is a relation: relation physicalpartoj . 
in a similar way  the currently invoked inference step 
 e.g. decompose  select  is also explicitly asserted in the kb by predicates which belong to the inference level. 
　inference steps are invoked by querying or asserting knowledge roles. for example  the role hypothesis holds of the subsystem currently playing the role of the hypothesised fault. the rules for selecting the test ordering theory depend on the current hypothesis  for example: 
f:  implies  and  hypothesis pcsystem  
 plausiblelnference decompose   
 and  testfirst powersystem   testafter powersystem videosystem   . 
　this is a forward rule which fires when hypothesis and plausiblelnference are asserted. the current hypothesis assertion must be deleted and replaced as diagnosis proceeds. these operations are implemented in subl by 
   'note that terms defined in the ontology  or its extension  are written in sans-serif  following the cyc convention  names of collections begin with a capital letter and predicates begin with a lower case letter. 


figure 1: microtheory structure 
functional-interface functions  within the larger structure of the systematic diagnosis task function. the user could make this series of deductions themselves  and in the implemented system  the user is able to inspect the state of the reasoning process as it progresses. as an example  the following subl code is called at the start of diagnosis and simply asserts that the entire system is the hypothesis  and then calls another subl function  sd-select1  which performs system decomposition. 
 define sd-selectl 	 system  
	 fi-assert 	 #$hypothesis system  	*defaultmt*  
 sd-select1   
　we have achieved an explicit representation of knowledge roles and of inference steps in cyc that reflects the knowledge typing principles advocated in  van heijst et a/.  1 . control over the search process is achieved by 
making a series of simple queries  structured to implement the pattern of inference of the psm. we found no need to extend the functionality of cyc  or the expressivity of its representation language s  in order to implement the psm. the central problem was to combine the available features into structured architecture  in order to to take advantage of the model-based approach to problem solving. 
　we tested the reusability of the domain and inference level definitions  and of the subl code  by considering diagnosis in the domain of automobile ignition systems. this experience is discussed in the wider context of the reusability  scalability  and robustness of our approach. 
1 	representation and reasoning 
1 	domain ontologies 
the view of domain ontology construction which results from the prior selection and adaption of an explicit problem solving method is more focussed on concepts relevant to problem solving than a task-neutral view would be. the resulting domain ontology is not task-specific in its formalisation  e.g. the definition of the functional-part-of relation has no intrinsic task-related properties. but  the coverage of the resulting ontology may only be partial we did not need to elicit physical-part-of knowledge. 
　had we taken a view that focussed on the domain alone  we would have had no explicit guidance as to which concepts were or were not relevant to the ontology definition effort. we have gained experience of constructing ontologies where the primary aim was to represent the domain  with ontology definition only informally guided by considering the task. under these conditions it is difficult to determine the relevance of a potential domain concept  and the distinction between concepts that are intrinsic to the representation of the domain  and those that are related to the task to be performed was difficult to make. 
　reusability of domain knowledge is an important issue  and our approach has been to use the microtheory mechanism of cyc to encapsulate the generic components of the extended ontology. the resulting mircotheory structure  shown in figure 1  places the generic system models for pcs and automobile systems in distinct microtheories  that are extensions of the basekb  and are included in the specific diagnosis microtheories. strictly speaking  these microtheories are not extensions of the ontology as they make no new specifications. instead  the basekb is extended by adding the definitions of the functionalpartof predicate and the collections subsystem and component as these concepts are sufficiently general to be reusable across domains. the methodspecific ontology  comprising domain and inference level components  is also a specialisation of the basekb  and this theory is shared by both pc and automobile diagnosis theories. the microtheory structure shows that the generic system models can be used in any context which includes the  now extended  basekb  and that these theories can be thought of as parameters of the diagnosis microtheories. 
1 	inference knowledge 
the application of systematic diagnosis to the automobile domain required a change in system theory from functionalpartof to physicaldecornposition. while this is a significant change in the modelling of the diagnostic process  physical parts play the role of hypotheses  there were few implications for formalisation of the inference level as no new knowledge roles were found. similarly  the subl code was only modified to take the specific diagnosis microtheory as a parameter. in future  we aim implement other psms and this may permit us to generalise inference-level theories across psms. 
1 	scalability 
the domain and inference level knowledge representations that we have used are extensions of the basic representation  and can make use of the existing optimisations for indexing large kbs  performing taxonomic reasoning and theory structuring. our approach to psm implementation is based on structuring a series of queries 
	aitken and sklavakis 	1 

and assertions to implement a problem-solving method. as the individual queries are simple  the space searched is small  we can specify the depth of search to be 1 levels . this contrasts with the basic query mechanism where the only means of getting an answer to query which requires many rules to be combined is to increase the depth of search - with the resulting exponential increase in search space. 
1 	robustness 
at present we are unable to reason about inference structures or about the mappings from the domain to the inference level within cyc. there are no rules which allow psms to be modified or to be configured. consequently  the system lacks robustness as it cannot fall back to first principles when an existing method is not immediately applicable. the problems of psm modification and configuration are significant  even for human experts  but we believe that automatically specialising psms is a feasible proposition. we also plan to explore the idea of falling back to more general methods  when more specific methods are inapplicable  to regain robustness. 
　inference steps  implemented by rules  require proving domain-level predicates  and robustness at the level of reasoning about domain knowledge occurs exactly as in cyc. 
1 	discussion 
we have described an approach to implementing problem-solving methods in cyc which makes use of the existing optimisations developed for large-scale knowledge bases  and adds additional structure to the inference process. extensions to the existing ontology distinguished generic extensions to the upper-level ontology  extensions to the knowledge base  and task-related extensions. knowledge typing principles were used within the task-related ontology to further structure problemsolving knowledge. 
　our investigation of diagnostic problem solving has not only raised issues of knowledge reuse and scalability  but also of system-environment interaction. intelligent systems cannot rely on large amounts of background knowledge alone as many classes of problems require information gathering or user interaction. if such interaction is to happen in an intelligent fashion then there is a requirement to represent and reason about the inferences which require interaction. 
acknowledgments 
this work is sponsored by the defense advanced research projects agency  darpa  under grant number f1-1. the u.s. government is authorised to reproduce and distribute reprints for governmental purposes notwithstanding any copyright annotation hereon. the views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing official policies or endorsements  
1 	knowledge-based applications 
either express or implied  of darpa  rome laboratory or the m.s. government. 
