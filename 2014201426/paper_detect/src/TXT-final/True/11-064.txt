 
　　　mathematical proofs constitute a mixture of formulas with a subset of natural language. they can be represented as a sequence of lines expressible in the symbolism of predicate calculus. the transition from step to step may depend on a series of logical manipulations and/or on i n t r i cate mathematical knowledge associated with the domain of the proof. the organization of the proof may depend on different conventions adopted by mathematicians in communication with each other. this paper deals with problems involved in following the mathematical argument along those lines. some of the ideas were implemented as a part of a 
　　　system for teaching axiomatic set theory to college students. the most powerful and frequently 
used rules of inference u t i l i z e a resolution theorem prover. to the best of our knowledge this is the only resolution theorem prover  perhaps the only general purpose theorem prover used in actual production. 
key words 
       proof understanding  automatic proof checking  automatic theorem proving  computer assisted instruction. 
introduction 
       a mathematician writes down a proof of a theorem on a piece of paper and hands it to a colleague. the l a t t e r reads through i t   usually understands i t   and a l l too frequently finds an error  which means that at least in i t s present form it is not a proof at a l l . sometimes it takes several readers u n t i l an existing error is detected and on occasion it has taken many years to discover errors in some d i f f i c u l t proofs. it would be very useful if our mathematician could type in the computer whatever he wrote and receive some for of the response he received from the hu-
man reader. 	the paper examines problems encountered during i n i t i a l efforts toward such a goal. 
       furthermore  if one attempts to teach higherlevel mathematics by computer  as it is currently being done for set theory at stanford  it is es-
	present address: 	department of computer 
	science  	oregon state university 
sential that the machine understands the proofs of the students to the extent that it accepts only the correct ones. the paper w i l l discuss some of the problems and experiences with the 
proof checker which is the most important part of the system for teaching axiomatic set theory  named quip  developed at the institute for mathematical studies in the social sciences  imsss  
. 
　　　the cai system has been used since the f a l l quarter of 1 to teach philosophy 1   introduction to set theory   at stanford university. the program was written in lisp and sail and runs on the tenex operating system for the dec pdp-1 computer. the course is for upper-level undergraduate students and presents axiomatic set theory as developed in   1   . the examples here are from proofs of theorems from the curriculum of the course. a l l illustrations of the ideas embodied in the mechanism for handling the proofs are as of the time the author l e f t imsss. there have been some improvements since. 
　　　this paper w i l l focus on the issues involved in understanding mathematical proofs. 	to improve his understanding of the examples a reader unfamiliar with proof checking should consult suppes  where the logical system underlining the proof checker of quip is explained. 	furthermore  due to lack of space an explanation of the organization  features and performance of the entire cai system cannot be included. 	it is available in   1   . 
natural language part 
　　　there are two major problems facing computer understanding of mathematical proofs. first  the language of mathematics is not that of predicate calculus. it usually is a mixture of formulas with natural language. thus  one of the problems theoretically approximates that of understanding natural language. in fact  this is not so  as some preliminary results on the language of sets  indicate that the language of mathematics  being a very restricted subset of natural language  w i l l probably be handled much more easily. 
　　　a mathematical argument can be represented as a sequence of separate steps. our opinion is that the best internal representation of the formulas describing a step in a proof is predicate calculus. in this view the main effort of the natural lan-

speclalized systems-1: marinov 1 

guage processing will be spent in correct translation of the steps in the argument  although it 
will also affect the structure of the proof and the choice of how to go about making a step in the proof. the remaining problem  to which this paper is devoted  is how to follow the logical steps in the proof. 
formal and informal proofs 
　　　in communications among mathematicians or between a teacher of mathematics and his students the steps in the proofs are as large as it is optimal for understanding. they are large enough to avoid obvious but tedious details which would usually make the proof less clear. on the other hand  they are small enough to make it possible for the reader to follow the proof without having to discover it himself. the size of the steps varies widely with different proofs and in some cases only a very general outline is given  thus requiring a greater effort on the part of the reader. in any event  that is what we call an informal proof. in addition  the concepts of being essential  unfamiliar  or trivial in a proof are not precise at all. this very vagueness of the criteria governing informal proofs is a primary justification for a precise definition of a formal proof . 
　　　formal proofs require precise rules for justifying each step. in that respect they are somewhat algorithmic in character. it is no wonder that automatic proof checking is almost as old as artificial intelligence itself . one of the first computer proof checkers was that of abrahams   which implemented an extension of the logical system of suppes . imsss at stanford has offered a cai course in symbolic logic using a proof checker based on suppes' system since 1. a later implementation is described in . 
size of the steps 
　　　the problem with such formal proofs is that their steps are quite small. 	a proof of somewhat greater difficulty in set theory  or other mathematical theory  could easily go up into several hundred steps. 	such proofs cannot be used for teaching axiomatic mathematics and hardly for any other purpose. 	this problem has been resolved to a large degree in the proof checker of quip. 
　　　before discussing the techniques used in accepting larger steps we shall illustrate some of the points made above with a comparative example. first is the proof of theorem 1 on page 1 in   then follows the proof of the same theorem as it was accepted by quip. k a  is the cardinal number of a set a  while 「 means equipollent. axioms  definitions  and theorems referenced in example proofs are given in the appendix. the command to the proof checker precedes each line. some of the commands may seem long but are not entirely typed by the user  since the system has a recognition feature  see  . the quip proof below is presented as listed by the command ''review . in doing the first three steps a bit of additional typing is required where the user indicates that he wants to specify variables upon which the system asks him what values to assign. in the last two steps the lines have to be typed after the command. 
     a proof from  axiomatic set theory  by p. suppes: 
     theorem 1. there are sets a and b such that  i   = 1    i i   k a  = m    i i i   k b  = n. 
　　　proof. in view of definition 1  cardinal number   there are sets al and bl such that k a1 = m and k   b 1   = n  and by virtue of theorem 1 there are sets a and b such that a”b = 1  a 「 a l   and b「b1. by the axiom for cardinals  then  k a  = m and k b  = n. q.e.d. 
　　　proof of the same theorem as accepted by the proof checker: 
theorem 1.1 

     notice that the steps of the quip proof follow exactly the informal proof from the book. in the first three steps a definition and a theorem are invoked as the appropriate instantiations are made. the system has sorted variables and the letters m and n are among those used for cardinals. this enables us for example to get line 1 directly from the definition of cardinal number. the quip 
proof requires line 1 to obtain a formula which is a variant in terms of bound variables  in this case identical  to the statement of the theorem. the informal proof quits at step 1. this is one of the many shortcuts used in informal proofs  some of which will be discussed below. they will eventually present the greatest problem in accepting informal text proofs and will require a large amount of additional information to be stored with the internal representation of a line. 
     step 1 is the most interesting in this proof. it is achieved by a call to a resolution theorem prover giving it the lines 1  1  and 1 plus the axiom for cardinals as references. below is the continuation of the proof in the formal system of suppes  as implemented in . preceding each line to the left are the rules of inference as typed by the user. in the brackets to the right their names are expanded. 
axiom for cardinals 
s p e c i a l i z e systems-1: marlnov 
1 	 1  	k a1  = k a   -  a1「a 


     as shown above  step 1 requires 1 elementary steps. yet the informal proof only says it follows  by the axiom for cardinals . for the mathe-
matician this is an  obvious  step. 	in  one frequently finds lines in proofs that follow by sentential logic  p. 1  p. 1  or by quantifier logic  p. 1  p.1 . 	when a step is justified by sentential logic it is decidable and one can safely lean on a tautology checker. 	it is our belief that the most efficient mechanical way to confirm a tautology is to check the truth table and thus 
quip has a tautology rule based on that principle. steps justified by logical manipulations involving quantifiers are undecidable in general and consequently represent a much harder problem to be verified mechanically. for this purpose we employ a resolution theorem prover with equality replacement. 
resolution theorem prover in action 
     the experience with quip shows that a wellorganized resolution theorem prover gets most of the inferences seen intuitively by the user while working on a proof. 	this is not quite true for proofs involving equality  where some improvements to the prover are needed. 	the user has no interaction with the theorem prover except for asking a formula to be verified and supplying the references  from which he thinks the formula follows. an idea about the power of the theorem prover can be gained from the following theorems from the chapter on finite and infinite sets in quip's curriculum  which were proved in one step. 


     this proof should be transparent even to those unfamiliar with suppes' logical system . the theorem can be proved in one step  yet the user usually sees the exact references on which this step depends only after developing the proof in the latter form. furthermore  this form is 
more like the way mathematicians prove theorems. still notice that the resolution prover was called upon for steps 1  1  and 1. 
     the prover is used primarily for the rules verify and contradiction. while using verify the user has to type the line  whose negation together with the references is passed to the prover. if the prover is able to confirm the inference it signals the proof checker to accept the line. for the contradiction rule the user merely points to the references which he believes form an inconsistency. if such is detected by the prover  the proof checker returns the negation of the last assumption on which the references depend.  presumably there must be an incorrect assumption in order to reach a contradiction . 

specialized systems-1: marlnov 
1 

implementation and strategy 
     the main reason for selecting a resolution theorem prover was our belief that for the same generality and the same power it can be designed in a much more compact way than a heuristic theorem prover. for the purposes we are using i t   simply a mechanical tool is needed and resolution seems to be exactly that. later we shall discuss the possibility of a heuristic coupler to the proof checker  which would make the prover serve better the needs of understanding informal proofs. the prover was written in uci-lisp. together with the converter of the formulas into clausal form it is about 1 pages of pretty-printed code. 
     the prover employs the mu strategy. it consists mainly of keeping only resolvents containing 
merge literals or having a unit parent. 	it is shown in  that if in a refutation there are resolvents not satisfying the above restriction  there always exists another refutation from the same input set where such resolvents are obtained first. 	with this in view the strategy occasionally allows for a round of general resolution after which the restriction is imposed. 
     one thing that has plagued work on resolution in the past has been preoccupation with completeness. recognizing that a prover is working in an undecidable domain it is obvious that completeness is going to be restricted by the real factors of time and space. the main objective in choosing a strategy and tuning a prover's parameters is optimizing the number of inferences it gets. it is the author's conviction that in this context incompleteness is a feature  rather than a drawback. thus  completeness in our prover is restricted severely in many different ways. 
     experiments with different strategies for resolution  carried out earlier by the author at the university of texas have shown the mu strategy to be quite efficient in the set-theoretical domain. one property of the mu strategy  coupled with a limit on the depth of functional nesting in the resolvents  is that it usually runs quickly out of possibilities to resolve when given a satisfiable set of clauses  i.e.  insufficient references . this is very important because one very frequent error of the student users has been to supply insufficient or incorrect references. in such a case it is very desirable that the prover detects this fact as soon as possible  rather than grind until the time limit is reached. this property has strongly influenced the selection of the mu strategy. 
deficiencies 
     probably the most frustrating property of the prover from a cai point of view has been the fact that thus far it has been impossible to characterize the class of theorems accepted by the prover despite substantial effort on the part of members of the imsss staff. this is most likely a consequence of the unnatural way in which resolution works. sometimes the prover is able to verify steps much larger than the user can see  while other times it fails at steps which the user expects to be accepted. it would have been nice if one could give the users some more accurate idea what to expect from the prover. 
     inferences which are missed by the prover  while being obvious to the user  are largely due to the fact that resolution breaks down the formulas to the atomic level before it can find a proof. for example  the inference 

from 

cannot be verified by the prover. the human user  though  with his well-developed abstraction capabilities quickly sees that the left side of the implication can be looked at as   m n p a b  . hence the inference becomes: 

from 

     of course  seen this way  the inference is immediate for the prover  too. there is a provision in the program for the user to pass to the prover the abstracted form of the formulas. what would be desirable here is to have a heuristic coupler between the prover and the proof checker which looks at the possibilities of abstraction in the set of formulas. 
implication rule 
     proofs in axiomatic systems frequently include transformations of formulas justified by the application of definitions  axioms  or theorems. almost always these inferences include quantifiers and would fall within the domain of the theorem prover. however  such inferences are deterministic and one potentially loses power in taking a chance with the prover. many definitions are by equivalence  which is a simple connective for the human  but the worst one for resolution. furthermore  for the rules verify and tautology the formula must be typed in  which the users are not 
very enthusiastic about. 
     all these considerations led to the development of the implies rule. variables bound by an universal quantifier containing the main connective of the justifying formula within its scope are matched to any terms in the formula to be transformed. for example  let 
　　　 1  f c  f'd be a line in a proof  f c means the image of the set c under the function f . from it we can infer the line 

in a case like this  which happens most fre-

specialized systems-1: marlnov 
1 

quently  the rule is equivalent to universal specification and modus ponens. the rule also allows for  1  to be inferred from  1  by the definition of subset. in some cases the matching is much more intricate than in the example above. the matching algorithm utilizes a subset of unification. the same algorithm is used in matching terms for replacements by equality in the proof. more details can be found in . 
matching of schemas 
     a more sophisticated application of the matching algorithm is the matching of theorem schemas. sometimes axioms and theorems contain formula schemas which can be matched to any form-
ula satisfying some variable constraints. for example  the theorem 

     occasionally it is not straightforward to determine which variable to match with the designated variable of the schema. then one has to look at which quantifier matched the innermost 
quantifier over the designated variable. since the latter is always quantified  the algorithm would succeed if there is a possible match. then  when the rule is returning  the current designated variable is substituted for the value of the variable of the same schema when the match was first made.  of course  any subsequent conflict would have failed the match . thus at the point of recovering the value of fm y  from  1   y is substituted for z in   the match to fm  and  is returned as seen in  1 . recall that x was associated with z when was matched to fm x  and now y corresponds to x. 
embodiment of mathematical knowledge 
     some lines in proofs are produced by mathematicians without references to the justifying definitions or theorems. they usually express well-understood and well-organized domains of knowledge shared by the workers in a particular field. exact references in such cases would obstruct rather than facilitate communication. a very simple example from set theory is the line 
　　　 1  asc a b♀c -  avbsc. to justify this line one should really refer to the definitions of subset and union  although no student of set theory does so once he has grasped the boolean operations and relations between sets. more complicated examples could easily be found in proofs on set theory  for example  in treating functions  cartesian products  etc. 
     it would be desirable if  bags  of such knowledge were embodied in decision methods. a good example is the boole rule  which is a part of quip   this rule uses a decision method by quine and converts the boolean operations and relations between sets into propositional connectives  after which a tautology check is applied. 
     this rule could possibly be extended to cover more of the set-theoretical knowledge  and other similar rules could be developed. however  it is not clear how much of set theory could be embodied in decision methods. there certainly will be need for some heuristic knowledge  organized as well as 
possible. in fact  such embodiments would be a very important part of any completed system handling some domain of mathematics. 
goal hierarchy 
     informal proofs employ many conventions  assumptions  and shortcuts not explicitly mentioned in the proof. 	they largely depend on the domain of the theory in which the theorem is being proven  although there are many conventions which apply generally to mathematics. 	for example  it is customary when one wants to show 
 1  
to assume 
      1  x ε a and eventually derive 
      1  x ε b. 
thus the proof  or part of proof  is terminated  but the implicit assumptions are 
　　 1    x e a -  x ε b   and that  1  follows from  1  and the definition of subset. 
     we propose that this be dealt with in the following way. if the user wants to prove something in the form of  1   while making the assumption  1  he also states the goal  1 . when the goal is legitimately achieved  the proof monitor generates formula  1  and associates it with the line  1 .  at the present time a lot of additional information is being associated with each line  i.e.  free variables  dependencies  etc. . then if a reference to that line is made there will be no ambiguity  since the form  1  depended on  1  and is no longer available.  the working premise  1  was discarded -- see  -- and all lines depending on it are not available . 
     in more complicated proofs the user will have to state goals on different levels in the proof. thus the monitor will deal with a hierarchy of embodied goals. it would be better if the goals were declared automatically  but at the present time we do not foresee any reasonable way of implementing the goal hierarchy handling without the user stating the goals. top-level goals would not need to be explicitly mentioned. 
an informal proof 
     we try to illustrate some of the above discussion with the informal proof of a simple theorem. the definition of image in the proof below is: 

s p e c i a l i z e 	systems-1 marinov 
1 

　　the proof checker handles the steps as they are given here. of course  accepting this proof would require stronger natural language processing capabilities than there currently are available in the program. the semantic analysis of the text should show that steps  1  and  1  are applications of the implies rule  while step  1  requires a call to the prover via verify. 
future directions 
     the problems facing future work on understanding informal proofs may be best illustrated by considering another comparative example. a proof of theorem 1 on page 1 in  is presented below as it is accepted by quip.  to fully benefit from the comparison the reader should look at the proof in the book . 

     the proof in the book is given in a very compact form and requires a lot of thinking from the reader in order to follow it in detail. many readers would probably agree with it after glancing through  but when asked for the justification of a certain step they might have difficulties in explaining i t . even a simple thing as defining the set k by abstraction really appeals to the axiom of separation to make sure that the set exists. 
     yet in view of the applications we have in mind the proof checker of quip is more like the kind of system one needs. first  it is an important part of the task of a proof reader to make sure that all steps in a proof were properly justified. second  in teaching axiomatic mathematics it is important to insure that the student understands the exact justification of a proof he might read in a book. 
     the knowledge necessary for understanding a proof as the one above will be distributed over the machinery for making large steps  the goal monitor  and the semantics of the mathematical language processor. 	procedural knowledge about 
different ways of organizing proofs will be needed. 
     most notably the quip proof in the last example seems to be organized in reverse order of the book proof. the latter first states that induction is needed to show f a ε k  whence b is finite  since f a = b  and then proceeds to develop the induction conditions. the quip proof works out the induction by theorem 1.1  step 1  and then shows the finiteness of b. in fact  the proof includes several occurrences of the same phenomenon on a smaller scale. 
     processing the wide variety of ways of expression seen in the mathematical literature is a formidable problem. it will require continuous 
work for time to come. but by putting some restraints on the form of presenting proofs one might soon be able to make good use of a computer system for the purposes outlined in the beginning of this paper. 

s p e c i a l i z e d 	systems-1: 	marinov 
1 

acknowledgements 
     many of the presented ideas were formed in conversations with p. suppes  l. blaine  h. graves  and r. smith. also  w. bledsoe has made many helpful suggestions. the research has been supported by the u.s. national science foundation under grant ec1 to stanford university. 
references 
1. abrahams  p.   machine verification of mathematical proof   1  doctoral dissertation  mit. 
1. goldberg  a.   a generalized instructional system for teaching elementary mathematical logic   tech.rep.no.1  1  imsss  stanford university. 
1. marinov  v.   maximal clause length resolut i o n     1  doctoral dissertation  university of texas at austin. 
1. marinov  v.   replace formula   1  imsss internal memo  stanford university. 
1. mccarthy  j .    computer programs for checking mathematical proofs   1  proc.amer.math. 
soc. on recursive function theory  new york. 
1. smith  r.  graves  h.  blaine  l. and marinov  v. 1.  computer assisted axiomatic mathematics: informal rigor.  in: computers in education  1. lecarne and r. lewis  eds. ifip second world conference on computer education. north holland  amsterdam  pp.1. 
1. smith  r.   b1le--a decision method   1  imsss internal memo  stanford university. 
1. suppes  p.  introduction to logic  1  van nostrand  princeton  n.j. 
1. suppes  p.  axiomatic set theory  1  dover  new york. 
appendix 
axioms  definitions  and theorems 