 
searching for parallel solutions in state space planners is a challenging problem  because it would require the planners to branch on all possible subsets of parallel actions  exponentially increasing their branching factor. we introduce a variant of our heuristic state search planner altalt  which generates parallel plans by using greedy online parallelization of partial plans. empirical results show that our online approach outperforms postprocessing  offline  techniques in terms of the quality of the solutions returned. 
1 	altalt background 
the altalt planning system is based on a combination of graphplan  blum and furst  1  and heuristic state space search  haslum and geffner  1  technology. the problem specification and the action template description arc first fed to a graphplan-style planner  which constructs a planning graph for that problem in polynomial time. this planning graph structure is then fed to a heuristic extractor module that is capable of extracting a variety of effective heuristics  nguyen et al.  1 . these heuristics  along with the problem specification  and the set of ground actions in the final action level of the planning graph are then fed to a regression state-search planner. 

1 introduction 
parallel plans allow concurrent execution of multiple actions at each time step. while disjunctive planners such as graphplan  blum and furst  1   satplan  kautz and selman  1  and gp-csp  do and kambhampati  1  seem to have no trouble generating such parallel plans  planners that search in the space of states are overwhelmed by this task  haslum and geffner  1 . the problem for state space planners is the exponential branching factor of the search space. one approach to solve this problem is to postprocess the sequential plans generated by the state space planners. this could easily be done-using approaches such as those explored by backstrom  backstrom  1   but they are limited to transforming the sequential plan given as input. an alternative that we introduce in this article  involves incremental online parallelization. specifically  our planner altalf  sanchez and kambhampati  1   which is a variant of the altalt planner  sanchez et al.  1; nguyen et al.  1   attempts to parallelize a heuristically selected search branch with other independent actions  and then tries to rearrange the evolving parallel plan using a plancompression algorithm. 
¡¡we will provide a brief background on altalt planning system on section 1. section 1 describes the generation of parallel plans in altalf. section 1 presents some empirical evaluation of altalf. finally  section 1 summarizes our contributions. 
1 plan compression algorithm 
a/ta/tpconsiders at each step during search only those  pairwise parallel  actions that individually regress to states with lower heuristic estimates than their parent node to parallelize  fatten  a search branch. this greedy nature of the fattening procedure while useful in avoiding the addition of irrelevant actions to the plan  may also sometimes preclude actions that are ultimately relevant. when this happens  the parallel length of the solution plan is likely to be worsened  as more steps may be needed to support the preconditions of such actions. in order to offset this negative effect of greediness  altalf re-arranges the partial plan to promote such actions higher up the search branch using a plan-compression algorithm  see figure 1 . specifically  before expanding a given node s  altalf checks to see if any of the actions in as leading to s from its parent node  can be pushed up to higher levels in the search branch. the push-up procedure is called each time before a node gets expanded  and it will try to compress the current partial plan. for each of the actions a e as we find the highest ancestor node sx of s in the search branch to which the action can be applied  i.e.  it gives some literal in sx without deleting any other literals in sxi and it is pairwise independent of all the actions currently leading out of sx . once sx is found  a is then removed from the set of actions leading to s and introduced into the set of actions leading out of sx  to its child in the current search branch . next  the states in the search branch below sx are adjusted to reflect this change. the adjustment involves recomputing the regressions of all the search nodes below sx. at first glance  

1 	poster papers 


figure 1: push up procedure 
this might seem like a transformation of questionable utility since the preconditions of a  and their regressions  just become part of the descendants of sx  and this does not necessarily reduce the length of the plan. we however expect a length reduction because actions supporting the preconditions of a will get  pushed up  eventually during later expansions. 
1 	empirical evaluation 
we compare our online parallelization approach to postprocessing  we have implemented backstrom's ' minimal deordering algorithm  from  backstrom  1   and used it to post-process the sequential plans produced by altah. we can see on figure 1 some empirical results on the zeno domain  long and fox  1 . 
¡¡as expected  the original altah has the longest plans since it allows only one action per time step. the plot shows that post-processing techniques do help in reducing the makespan of the plans generated by alt alt however  we also notice that altalf outputs plans with better makespan than either altalt or altalt followed by post-processing. this shows that online parallelization is a better approach than post-processing sequential plans. altaltp also does not result in any additional run-time overhead with respect to altalt. further experiments reported in  sanchez and kambhampati  1  show that our approach is competitive or outperforms other state of the art approaches in generating parallel plans. 
1 	conclusions 
we have introduced an approach to generate parallel plans in the context of state space search. our approach tries to avoid the branching factor blow up by greedy and online parallelization of the evolving partial plans. a plan compression procedure is used to offset the ill effects of the greedy search. our empirical results show that our approach seems to return better quality plans than post-processing the sequential plans. 

figure 1: altah and post-processing vs altaltv 
¡¡in future  we plan to adapt the altaltv approach to metric temporal domains  where the need of concurrency is more pressing. it is in these scenarios where more powerful heuristics based on resource usage can be further investigated to improve the parallelism of state space planners. 
