
how can an intelligent agent update her knowledge base about an action domain  relative to some conditions  possibly obtained from earlier observations   we study this question in a formal framework for reasoning about actions and change  in which the meaning of an action domain description can be represented by a directed graph whose nodes correspond to states and whose edges correspond to action occurrences. we define the update of an action domain description in this framework  and show among other results that a solution to this problem can be obtained by a divide-and-conquer approach in some cases. we also introduce methods to compute a solution and an approximate solution to this problem  and analyze the computational complexity of these problems. finally  we discuss techniques to improve the quality of solutions.
1 introduction
this paper discusses how an intelligent agent can modify her knowledge of the world  subject to some given conditions  in particular  when some new knowledge about the world is added. the given conditions can be domain-dependent  e.g.  assertions obtained from earlier observations   or domainindependent  e.g.  general properties of a knowledge base . the goal is to obtain a consistent knowledge base with minimal changes only to a variable part of the existing knowledge base such that the given conditions are satisfied.
¡¡we study the problem of knowledge base updates  briefly described above  in the context of reasoning about actions and change  so the agent's knowledge base is about domains of actions. for instance  consider an agent having the following knowledge  d  about a tv with remote control:
1. if the power is off  pushing the power button on the tv turns the power on.
1. if the power is on  pushing the power button on the tv turns the power off.
1. the tv is on whenever the power is on.
1. the tv is off whenever the power is off.
note that she does not know how a remote control works  e.g.  she does not know the effect of pushing the power button on the remote control . suppose that later she obtains the following information  q  about remote controls:
1. if the power is on and the tv is off  pushing the power button on the remote control turns the tv on.
1. if the tv is on  pushing the power button on the remote control turns the tv off.
a desired condition  c  for the effective use of this tv system is the following:
pushing the power button on the remote control is always possible.
if q is added to d  then condition c is not satisfied: when the power and the tv are on  pushing the power button on the remote control is not possible  since item 1 of q and item 1 of d above contradict. the question is then how the agent can update d by q relative to c.
¡¡we describe domains of actions  like d above  in a fragment of the action language c  giunchiglia and lifschitz  1   by  causal laws.  for instance  the direct effect of the action pushpbtv stated in item 1 of d in the example above is described by the causal law
caused poweron after pushpbtv ¡Ä  poweron 
which expresses that the action pushpbtv causes the value of the fluent poweron to change from false to true; the indirect effect of this action stated in item 1 of d is described by the causal law
             caused tvon if poweron   1  which expresses that if the fluent poweron is caused to be true  then the fluent tvon is caused to be true as well. an action  domain  description is partitioned into two: du  invariable  and dm  variable . the meaning of an action description can be represented by a  transition diagram -a directed graph whose nodes correspond to states and whose edges correspond to action occurrences.
¡¡we describe given conditions  like c above  in an action query language  similar to r  gelfond and lifschitz  1   by  queries . for instance  condition c above can be described by the query
	executable {pushpbrc}.	 1 
the main contributions of this paper briefly are as follows:
  given an action description d =  du dm   a set q of causal laws  and a set c of conditions  what is an update of d by q relative to c  we answer this question in section 1.

figure 1: a transition diagram.
  given an action description d =  du dm   a set q of causal laws  and a set c of conditions  consider the problem of computing an update of d by q relative to c. we show that this problem is difficult in general  both 
-hard   and that already checking a given solution is complete. we also show that  under some conditions  these two problems are easier  section 1 .
  we provide conditions under which computing a solution to the problem above can be structurally decomposed. for instance  if the inputs of the problem satisfy the disjointness property  a divide-and-conquer approach is feasible  section 1 . we introduce methods to compute solutions and to compute  near-solutions  approximating them  section 1 .
¡¡variations of the problem of updating knowledge bases have been studied in the ai literature  e.g.   winslett  1; katsuno and mendelzon  1; pereira et al.  1; li and pereira  1; liberatore  1; eiter et al.  1; sakama and inoue  1 . the problem addressed in this paper is more general  see section 1 for a more detailed comparison .
1 preliminaries
transition diagrams. we start with a  propositional  action signature that consists of a set f of fluent names  and a set a of action names. an action is a truth-valued function on a  denoted by the set of action names that are mapped to t.
¡¡a  propositional  transition diagram of an action signature l = hf ai consists of a set s of states  a function v : f¡Ás ¡ú {f t}  and a subset r   s¡Á1a¡Ás of transitions. we say that v  p s  is the value of p in s. the states s1 such that hs a s1i ¡Ê r are the possible results of the execution of the action a in the state s. we say that a is executable in s  if at least one such state s1 exists.
¡¡a transition diagram can be thought of as a labeled directed graph. every state s is represented by a vertex labeled with the function p 1¡ú v  p s  from fluent names to truth values. every triple hs a s1i ¡Ê r is represented by an edge leading from s to s1 and labeled a. an example of a transition diagram is shown in figure 1.
action description languages. we consider a subset of the action description language c  giunchiglia and lifschitz  1  that consists of two kinds of expressions  called causal laws : static laws of the form
	caused l if g 	 1 
where l is a literal  an expression of the form p or  p  where p is a fluent name  and g is a propositional combination of fluent names  and dynamic laws of the form
	caused l if g after u 	 1 
caused poweron after pushpbtv ¡Ä  poweron caused  poweron after pushpbtv ¡Ä poweron caused tvon if poweron caused  tvon if  poweron inertial poweron  poweron inertial tvon  tvon
figure 1: an action description.
where l and g are as above  and u is a propositional combination of fluent names and action names. in  1  and  1  the part if g can be dropped if g is true.
¡¡an action description is a set of causal laws. for instance  the knowledge base about a tv system  d  of the agent in the previous section  can be described by causal laws in figure 1.
thereby  an expression of the form:
inertial p  p 
where p is a fluent name stands for the dynamic laws
caused p if p after p  caused  p if  p after  p 
describing that the value of the fluent p stays the same unless some action changes it.
¡¡the meaning of an action description can be represented by a transition diagram. let d be an action description with a signature l = hf ai. then the transition diagram hs v ri described by d is defined as follows:
 i  s is the set of all interpretations s of f such that  for every static law  1  in d  s satisfies g   l 
 ii  v  p s  = s p  
 iii  r is the set of all triples hs a s1i such that s1 is the only interpretation of f which satisfies the heads l of all
- static laws  1  in d for which s1 satisfies g  and
- dynamic laws  1  in d for which s1 satisfies g and s ¡È a satisfies u.
the laws included in  iii  above are those that are applicable to the transition from s to s1 caused by executing a. for instance  the transition diagram described by the action description of figure 1 is presented in figure 1. we say that an action description is consistent if it can be represented by a transition diagram with nonempty state set.
¡¡in the following we suppose that an action description d consists of two parts: du  unmodifiable causal laws  and dm  modifiable causal laws . therefore  we sometimes denote an action description d by the pair  du dm .
action query languages. to talk about observations of the world  or assertions about the effects of the execution of actions  we use an action query language similar to r  gelfond and lifschitz  1 . we consider a language with static queries of one of the two forms:
holds f 	 1  always f 	 1 
where f is a propositional combination of fluent names  and dynamic queries of the form:
	necessarily f after a1;...;an 	 1 
where f is a propositional combination of fluent names  and each ai  1 ¡Ü i ¡Ü n  is an action. a query is a propositional combination of both kinds of expressions.
¡¡as for the semantics  let t = hs v ri be the transition diagram representing an action description d. a history of t of length n is a sequence
             s1 a1 s1 ... sn 1 an sn	 1  where each hsi ai+1 si+ii  1 ¡Ü i   n  is a transition in r. the satisfaction relation between a state s in s and a query q relative to d  denoted d s |= q  is defined as follows:
 i  if q is a static query  1   it is satisfied at s if the interpretation p 1¡ú v  p s  satisfies f;
 ii  if q is a static query  1   it is satisfied at s if  for each state s1 ¡Ê s  the interpretation p 1¡ú v  p s1  satisfies f;
 iii  if q is a dynamic query  1   it is satisfied at s if  for every history s = s1 a1 s1 ... sn 1 an sn of t of length n + 1  the interpretation p ¡ú1 v  p sn  satisfies f;
 iv  for any other q  satisfaction is defined by the truth tables of propositional logic.
we remark that holds f ¡Ô holds  f  but not so for a static query of form  1   i.e.  always f 1¡Ô always  f.
¡¡for a set c of queries  we denote by the set of all states s¡Ês such that d s |= q for every
. we say that d entails c  denoted.
for instance  a set of queries containing the query necessarily  tvon after {pushpbrc}
is not entailed by the action description in figure 1  because the query above is not satisfied at the state where both fluents tvon and poweron are mapped to t. on the other hand  this action description entails the queries:
         always poweron ¡Ô tvon   1  holds poweron ¡Ä tvon  
	 necessarily  tvon after {pushpbtv}.	 1 
queries allow us to express various pieces of knowledge about the domain  possibly acquired from earlier observations   like the following.
  existence of certain states: there exists a state of the world where a formula f holds  assuming consistency of d :  always  f.
  executability of actions: an action sequence a1 ... an is executable at every state:
 necessarily false after a1;...;an.
as in  1   this query can be abbreviated as executable a1;...;an.
  mandatory effects of actions: a sequence a1 ... an of actions will always have certain effects in a given context: holds g   necessarily f after a1;...;an
here f describes the effects and g the context. for instance  the query
holds tvon   necessarily  tvon after {pushpbrc}
expresses that the result of executing {pushpbrc} at any state where tvon is mapped to t is a state where tvon is mapped to f. note that queries of this form allow us to express all possible executions of a conformant plan ha1 ... ani to reach a goal specified by f from an initial state described by g.
  possible effects of actions: a sequence a1 ... an of actions may have certain effects in a given context: holds g    necessarily  f after a1;...;an 
like in  1 . here f describes the effects and g the context. queries of this form allow us to express  e.g.  the observation that executing ha1 ... ani in some initial state described by g leads to a state where f holds  e.g.  as for  1   that the tv is on . formula g may describe a collection of states.
1 problem description
we define an action description update  adu  problem by an action description d =  du dm   a set q of causal laws  and a set c of queries  all with the same signature. we say that an action description d1 accomplishes an  action description  update of d by q relative to c  if
 i  d1 is consistent 
 ii  q ¡È du   d1   d ¡È q 
 iii  d1 |= c 
 iv  there is no consistent action description d1 such that
d1   d1   d ¡È q  and d1 |= c.
such a d1 is called a solution to the adu problem  d q c .
¡¡condition  i  expresses that an action description update modeling a dynamic domain  such as the tv system in section 1  must have a state. according to condition  ii   new knowledge about the world and the invariable part of the existing action description are kept  and causal laws in the variable part are considered to be either  correct  or  wrong   and in the latter case simply disposed.
¡¡condition  iii  imposes semantical constraints c on d1  which comprise further knowledge about the action domain gained  e.g.  from experience. it is important to note that c can be modified later for another action description update. if q is a revision  containing more precise knowledge about the domain   then reasonably c should contain all conditions corresponding to observations made about the domain  while other conditions may be kept or dropped; on the other hand  if q is a change of the world per se  then conditions corresponding to observations might be dropped.
¡¡finally  condition  iv  applies occam's razor to select solutions as simple as possible. simplicity is measured by a smallest set  in terms of inclusion  of causal laws which need to be dropped.
¡¡we call any d1 which satisfies  i - iii  a near-solution of the adu problem  d q c .
example 1 for instance  take d the action description in figure 1  with dm containing the first four causal laws; consider q to be the set containing the following two causal laws: caused tvon after pushpbrc ¡Ä poweron ¡Ä  tvon  caused  tvon after pushpbrc ¡Ä tvon 
and let c be the set containing queries  1    1   and executable {pushpbtv}.
the transition diagram described by d ¡È q is shown in figure 1. here we can see that at the state where both poweron and tvon are mapped to t  the action pushpbrc is not executable. therefore  d¡Èq is not a solution. in fact  a solution to the adu problem  d q c  is obtained by dropping the static law  1  from d ¡È q.	1

figure 1: transition diagram described by d ¡Èq of ex. 1.
1 properties of updates
we first consider some basic properties of solutions to an adu problem. to this end  we define the subsumption relation between an action description d and a causal law  both with the same signature l = hf ai  as follows:
  a static law  1  is subsumed by d if  for every state s in the transition diagram described by d  the interpretation of f describing the state s satisfies g   l;
  a dynamic law  1  is subsumed by d if  for every transition hs a s1i in the transition diagram described by d  the following holds: if the interpretation of f¡Èa describing the state s and the action a satisfies u  then the interpretation of f describing s1 satisfies g   l.
¡¡a set q of causal laws is subsumed by an action description d  if every law in q is subsumed by d. a causal law is tautological  if it is subsumed by every action description d.
proposition 1  subsumption  let  d q c  be an adu problem  such that d is consistent and d |= c. if d subsumes q then d ¡È q is a solution to  d q c .
from this result  we obtain the following corollaries.
corollary 1  void update  let  d   c  be an adu problem. if d is consistent and d |= c  then d is the unique solution to  d   c .
corollary 1  idempotence  let  d d c  be an adu problem  such that d is consistent and d |= c  then d is a solution to  d d c .
corollary 1  addition of tautologies  let  d q c  be an adu problem  such that d is consistent and d |= c. if q is tautological  i.e.  every causal law of q is a tautology  then d ¡È q is a solution to  d q c .
notice that a similar property fails for logic programming updates as in  alferes et al.  1; eiter et al.  1 .
¡¡we next consider a structural property of solutions and near-solutions  which can be exploited for a syntactical decomposition of an adu problem  in a divide-and-conquer manner. because of the involved semantics of transitions and causation  in general some prerequisites are needed. for any action signature l=hf ai  we denote by lx the part of it which appears in x. we say that an action description d permits nop  if there is some transition hs   s1i in the transition diagram described by d. a query f occurs positively  resp. negatively  in a set c of queries if f occurs in the scope of an even  resp. odd  number of negations     in a query in c.
theorem 1  disjointness  let  d q c  be an adu problem with signature l=hf ai. let {d1 d1}  {q1 q1}  and {c1 c1} be partitionings of d  q  and c  respectively  such that  i  ld1 ¡Éld1 =    ii  lq1  ld1 ¡Ä lq1  ld1  and  iii  lc1  ld1 ¡Ä lc1  ld1.
 i  let xi be a near-solution to  di qi ci   for i = 1. suppose that  for i = 1  xi permits nop if some dynamic query occurs negatively in c1 i. then x1 ¡È x1 is a near-solution to  d q c .
 ii  let x be a near-solution to  d q c   and let {x1 x1} be a partitioning of x such that x1   d1 and x1   d1. suppose that  for i = 1  xi permits nop if some dynamic query occurs positively in c1 i. then  for i = 1  xi is a near-solution to  di qi ci .
¡¡informally  the permission of nop in theorem 1 is needed to ensure that the transition diagrams of near-solutions to the sub-problems can be  combined . here are two useful consequences of proposition 1:
corollary 1 let  d q c  be an adu problem  and let {d1 d1}  {q1 q1}  {c1 c1} be partitionings of d  q  c  respectively  satisfying conditions  i - iii  of theorem 1.
 i  suppose that no dynamic query occurs in c. if  for i = 1  xi is a solution to  di qi ci   then x1 ¡Èx1 is. furthermore  every solution to  d q c  can be represented in this form.
 ii  if no dynamic query occurs in c1  and x1 is a solution to  d1 q1 c1  permitting nop  then  for every solution x1 to  d1 q1 c1   x1¡Èx1 is a solution to  d q c .
example 1 consider the adu problem  d ¡Èd1 q c   with d  q  and c as in example 1  and d1 consisting of the causal laws:
inertial lighton  lighton   1  caused lighton after switchlight ¡Ä  lighton   1  caused  lighton after switchlight ¡Ä lighton.  1 
since x1 = d ¡È q   { 1 } is a solution to  d q c   example 1   x1 = d1 is a solution to  permits nop  by corollary 1  ii  x1 ¡È x1 =  d ¡Èd1 ¡Èq    { 1 } is a solution to  d ¡Èd1 q c . 1
1 computational complexity
an important subtask in solving adu problems is checking whether a set of queries is entailed by an action description.
theorem 1 given an action description d and a set c of queries  deciding-complete in general  and
 ii  pnpk	-complete if c does not involve dynamic queries.
here pnpk means polynomial-time with a single parallel evaluation of calls to an np oracle.
proof.  sketch  w.l.o.g.  c contains a single query c. as for the membership part of  ii   deciding whether d |= a for a static query a of form  1  is polynomial and of form  1  is in conp. hence  for a boolean combination c of such queries a1 ... an  deciding whether d s |= c is feasible in polynomial time with a single parallel evaluation of np oracles. for  i   deciding whether d s 1|= d for a given state s and a dynamic query d of form  1  is in np. thus d s 1|= d for a general query d is decidable in polynomial time with an np oracle  which means deciding d 1|= d is in npnp .
hence  deciding d |= d is in . the hardness results follow from transformations from deciding whether  i  a boolean combination of quantified boolean formulas  qbfs  of the form  xej  1¡Üj ¡Üm  is true and  ii  a qbf of the form  x y e is true  respectively.
¡¡as for finding solutions  we note that deciding whether q is a solution to an adu problem  d q c  has the same complexity as deciding d |= c in general. deciding the existence of an arbitrary solution is harder.
theorem 1 deciding if a given adu problem  d q c  has a solution  or a near-solution  is -complete in general 
-complete if c does not involve dynamic queries  and  iii  np-complete if c =  .
proof.  sketch  let d = du ¡È dm. we can guess a nearsolution d1 such that du ¡È q   d1   du ¡È q  along with a state s for d1  to witness consistency   and check d |= c for  i  and  ii  in polynomial time with the help of -oracle and  ii  an np-oracle respectively. this proves membership in   and  iii  np  respectively. the hardness results follow from transformations from deciding whether  i  a qbf of the form  xf is true   ii  a qbf of form  z xf is true  and  iii  a qbf of the form  z x y f is true. 1
¡¡similarly  testing arbitrary solution candidates has higher complexity than testing d ¡È q.
theorem 1 given an adu problem  d q c  and an action description d1  deciding whether d1 is a solution for it is
-complete in general  -complete if c does not involve dynamic queries  and  iii  conp-complete if c =  .
¡¡hence  even recognizing solutions is quite hard. however  recognizing near-solutions is easier -complete in general  pnp-complete if c has no dynamic queries  and polynomial if c =   . this follows easily from theorem 1.
1 computing solutions
with an oracle for near-solutions  we can incrementally compute a solution to an adu problem  d q c  where d =  du dm   in polynomial time as follows:
1. if   du dm  q c  has a near-solution then d1 :=   else halt;
1. for each qi ¡Ê dm = {q1 ... qm} do
;
if   dui  dmi   q c  has a near-solution then d1 := d1 ¡È {qi};
1. output du ¡È d1.	1
¡¡by virtue of theorems 1 and 1  no substantially better algorithm of this type is likely to exist  since computing a solution is both - and -hard  and thus needs the power of a  oracle. if a near-solution dn for  d q c  is known  we may compute  starting from it  a solution in the manner above  assuming dn = {q1 ... qk}  set d1 = dn and i = k + 1 .
¡¡near-solutions to a given adu problem may be nondeterministically computed as in the membership part of theorem 1  or obtained from a qbf encoding using a qbf solver. we present here a different computation method  using  update descriptions  and  update fluent sets. 
¡¡let d =  du dm  be an action description with signature hf ai. the update description of d is the action description obtained from d as follows:
1. extend hf ai by a set h of k = |dm| new fluents
 called update fluents  h1 ... hk;
1. label each static law  1  in dm with a fluent hi ¡Êh:
	caused l if g ¡Ä hi 	 1 
¡¡and each dynamic law  1  in dm with a fluent hi ¡Êh: caused l if g after u ¡Ä hi 	 1  such that no two laws are labeled by the same fluent hi; 1. for each hi labeling a law  add the dynamic law:
	inertial hi  hi.	 1 
¡¡let d = du dm  be an action description and c be a set of queries with the same signature. let e be the update description of d  with a set h of update fluents.   rei be the transition diagram described by e. an update  fluent  set for e relative to c is a subset m of h such that
 i  m is a hitting set for  i.e.  it contains for each state  some fluent which is true at s ;
 ii  h   m is contained in some state in.
¡¡with the notions above  we can find a near-solution to an adu problem  d q c   where d =  du dm   as follows: 1. if d ¡È q is consistent and d ¡È q |= c  output d ¡È q.
1. otherwise  construct the update description e of d ¡È q =  du ¡È q dm .
1. take a minimal update set m for e relative to c  if one exists; otherwise  take m = h.
1. identify the set w of causal laws in dm labeled by the elements of m.
1. output du ¡È  dm   w  ¡È q.
proposition 1 let  d q c  be an adu problem  with d =  du dm . if there is a nonempty update set for the update description of d¡Èq =  du¡Èq dm  relative to c  then the method above generates a near-solution to  d q c .
example 1 consider the adu problem  d q c  presented in example 1. note that d ¡È q 1|= c  as explained in example 1 . we obtain the following update description e of  du ¡È q dm   which contains du ¡È q and the laws:
caused poweron after pushpbtv ¡Ä  poweron h1  caused  poweron after pushpbtv ¡Ä poweron h1  caused tvon if poweron h1  caused  tvon if  poweron h1  inertial hi  hi  1 ¡Ü i ¡Ü 1 .
according to the transition diagram described by e 
 {poweron tvon h1} ¡Á 1h  sce = {{h1 h1 h1} ...}.
the only minimal update set for e relative to c is {h1}. we thus remove from d¡Èq the law labeled by h1  i.e.   1 . the result is a near-solution and also a solution to the problem. 1
example 1 take d to be the action description of example 1  with the following causal laws added to dm:
caused tvon after pushpbtv ¡Ä  poweron  caused  tvon after pushpbtv ¡Ä poweron.
take q and c as in example 1. the transition diagram described by d ¡È q is shown in figure 1. due to the same reasons mentioned in example 1  d ¡È q 1|= c. the update description e of  du ¡È q dm  consists of the update description presented in example 1 and the causal laws:
caused tvon after pushpbtv ¡Ä  poweron h1  caused  tvon after pushpbtv ¡Ä poweron h1  inertial hi  hi  1 ¡Ü i ¡Ü 1 .
according to the transition diagram described by e 
		{poweron tvon h1} ¡Á 1h¡È
¡¡¡¡¡¡¡¡{h1 h1} ¡Á 1h {h1}  sce =	{{h1 h1 h1 h1 h1} ...}.
the minimal update sets for e relative to c are {h1 h1} and {h1 h1}. we may choose either one and  by removing from d ¡È q the corresponding two causal laws  we get a near-solution to the problem. none of the near-solutions is however a solution  as removing  1  is sufficient. 1
1 discussion
related work. despite conceptional similarities to model based diagnosis  for space reasons  we focus our discussion on more closely related approaches. updating knowledge bases has been studied extensively in the context of both databases and ai  with different approaches  and in various representation frameworks  e.g.   winslett  1; katsuno and mendelzon  1; pereira et al.  1; eiter et al.  1; sakama and inoue  1; li and pereira  1; liberatore  1 . the last three are related more closely.
¡¡ sakama and inoue  1  is similar to our work in that it also studies update problems in a nonmonotonic framework  yet in logic programming  and considers the same criterion of minimal change. it deals with three kinds of updates to a knowledge base d: theory update of d by some new information q  inconsistency removal from d  and view update of d = du dm  by some new information q. in the context of reasoning about actions and change  these kinds of updates are expressible as adu problems  d q      d       and   du  dm ¡Èq      . sakama and inoue show that checking for solution existence is np-hard for each problem; this complies with theorem 1  iii . an important difference to  sakama and inoue  1  is that in an adu problem  d  q  c   conditions c may not be directly expressed in d. moreover  the semantics of an action description d in c is a transition diagram  and only captured by all answer sets of a logic program corresponding to d by known transformations.
¡¡ li and pereira  1  and  liberatore  1  study  like we do  theory update problems in the context of reasoning about actions and change  based on an action language  but language a instead of c . new information  q  contains facts describing observations over time  e.g.  the action pushpbrc occurs at time stamp 1 . the action language c we use is more expressive than a in that it accommodates nondeterminism and concurrency  and the changes in the world are not only due to direct effects of actions. to formulate temporal observations  we can extend our query language by queries of the forms
	e occurs at ti 	 1 
	p holds at ti 	 1 
where e is an action name  p is a fluent name  and ti is a time stamp; a state s satisfies a query  1  resp.  1  if  for some history  1  such that s=s1  e is in ai+1 resp. si satisfies p.
¡¡our notion of consistency of an action description d  in essence  the existence of a state  is different from that of zhang et al. . they describe action domains in propositional dynamic logic  and require for consistency the existence of some model of an action description. different from the setting here  conflicting action effects may prevent any model. with the extension of our query language discussed above  other forms of consistency studied in  zhang et al.  1  can be achieved in our framework  by describing possible scenarios or formulas as queries.
repair of action descriptions. we can sometimes improve solutions  and near-solutions  to an adu problem  d q c  by considering a slightly different version of the problem. we may take the view that a causal law is not completely wrong  and for instance holds in certain contexts. suppose that q is a dynamic law of the form:
caused l1 after a1 ¡Ä g1 
where l1 is a literal  g1 is a propositional combination of fluents  and a1 is an action. we can obtain an action description d  from d  which describes the same transition diagram as d  by replacing each dynamic law  1  in dm with: caused l if f after u ¡Ä g1  caused l if f after u ¡Ä  g1.
here  we can observe that for each solution d1 to  d q c  some solution d 1 to  d  q c  exists which contains d1. therefore  such a method can be useful to prevent  complete removal  of some laws from the given action description. similar methods are also useful for repairing an action description  e.g.  if some dynamic laws  1  in the action description have missing formulas in u. the study of such techniques is a part of future work.
