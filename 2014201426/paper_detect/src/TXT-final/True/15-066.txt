 	1. multiple 	shape 	descriptions 	provide 	precise 
information when needed and quickly usable 
information when sufficient. a long thin object 
the mercator program constructs a cognitive map can be described as a one-dimensional line for 
from a sequence of scene descriptions. a new representation coarse computations  and as a two-dimensional 
of two-dimensional geography was developed for this area for more precision. 
program. objects are represented by sets of polygons; their 
                                                                               1. operations on the map are justified by a boundaries  by sets of directed edges. the relative positions 
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　formal semantics. of objects are determined by connecting edges. a truthconditional semantics for this representation is presented  1. objects which are only partially known can be its strengths and weaknesses are evaluated  and it is described. 
compared to other ai representations of shape and position. 	1. time required for information retrieval grows 
only slowly  and in some cases stays constant  as the map grows very large. this depends on 
1 introduction 	two properties of the map: objects are arranged 
   a creature that interacts intelligently with the physical hierarchically  and computation rely only on world beyond the immediate range of its senses must know local data. the geography of its environment; that is  what objects are around it  and where they are. it must acquire this knowledge from repeated sensings of its immediate environment as it moves through space. it must make do with knowledge that is both incomplete and inexact. 
   i have developed a theory of how a two-dimensional cognitive map can be learned from a sequence of scene descriptions and then used. this theory has been implemented in a program called mercator. in this paper  i discuss meroator's representation of geographic knowledge  called a mercator map.  davis 1  describes the theory and program in full. 
   the 	mercator 	representation 	has 	the 	following strengths: 
1. virtually 	any 	1-dimensional 	shape 	can 	be described. 
1. any layout of objects can be described  including layouts where objects overlap. 
1. local information can be precise  despite vagueness of global information. specifically  it is easy to state precisely the distance between the closest faces of two objects even if the overall sizes and shapes of the objects are vaguely known or unknown. 
this research has been supported by the nsf under contract 
mcs1  an nsf graduate fellowship  and an ibm graduate 
fellowship. 
   
1 	e. davis 
maintains a world model  reflecting the true state of the world. the mercator program proper maintains a data base  representing the robot's knowledge of geography. when the user issues an instruction for the robot to move  its motion is reflected in the world model by a motion simulator  and in the data base by a motion assimilator. after moving  the vision simulator produces a scene description. this  like the data base  is expressed as a mercator map. 
   the scene description is assimilated into the data base in a two part process. the matcher finds correspondences between the data base and the scene description. the merger adds the information in the scene description into the data base using these correspondences. 
   finally  retrieval programs answer user queries using information from the data -base. functions have been written to determine the distance and direction between two objects  and to list the objects within a given distance of a given point. 
1 mercator maps 
   figure 1 shows a simple pastoral scene. how can we represent its two-dimensional geography  

   the basis elements of our representation are straight line segments. other representations used pixels  generalized cones  reference frames  etc. however  note that figure 1 apparently captures all necessary geographic information  yet shows only the boundaries. since the boundaries are one-dimensional  straight lines seem a natural choice. 
further reasons for this choice will develop later. 
   redrawing figure 1 with straight lines gives figure 1. the boundary of each object is represented by a set of edges connecting vertices. thus  the boundary of the street is represented by the edges { edge  a b   edge  b c   edge  d e   edge  e f  }; the boundary of the sidewalk is { edge  d e   edge  e f  ; etc. 
   this is acceptable for a drawing  but not for a representation: it does not show the interior of the objects. without the pond and the rock  the field would have the same boundary as the sidewalk; how could the program distinguish them! this problem is fixed in two ways in figure 1. firstly  boundary edges are labelled with directions specifying the direction counter-clockwise around the object. such a directed edge is called a bound.  the diagram shows the labelling only for the edges around the street but it applies to the other boundaries as well.  thus bound  e-d  is on the boundary of the street  while bound  d-e  is on the boundary of the field. the sidewalk has boundaries in both directions on each of its edges. 

   secondly  we represent the interior of the object by polygons. the interior of the rock is covered by the polygon { polygon  n-o-p-q  }; the interior of the field by the polygons { polygon  y-x-l-k   polygon  x-d-h-m-1   polygon  h-d-e-i   polygon  e-f-i   polygon  f-y-k-j-i  }; the interior of the sidewalk by the degenerate polygons { polygon  d-e   polygon  e-f  }; the interior of the tree by the single degenerate polygon { polygon  g }. a complete shape description  consisting of a set of bounds and a set of polygons  is called a region. 
   there are  in general  many ways to break an area up into polygons. in figure 1 we could have added an additional edge  e-i  in the field  and broken polygon  h-d-ef-i  into two polygons  h-d-e-i  and  e-f-i ; but we are not 
   
obliged to. the system works better if the polygons are convex  but this is not necessary. it is not even strictly necessary that the polygons be discrete. note that the field  being multiply connected  cannot be described by a single polygon. the road could  in principle  be covered with a single polygon  but it is split into two convex polygons  for ease of computation. 
   these polygons may require edges and vertices not on the object boundary. these edges fall into two classes. internal edges lie inside a known object  like edge  e-i  and edge  d-
h . knowledge edges delimit the known extent of the object  like edge  a-d  and edge  x-y . it is unknown whether or not the road extends past a-d. the same distinction applies to vertices. vertices like vertex  f  are called knowledge bounds  since it is unknown whether the sidewalk extends past it. a single edge may serve different functions for different objects; it may be a boundary edge of one and a knowledge edge of another. 
   the next question is how to express dimensions and relative positions of objects. the easiest method would be to assign coordinates to each of the vertices. however  such precise information is usually unavailable. allowing 
coordinates to be accurate only within tolerances does not help. generally  local information is much more precise than long distance information. if all coordinates are accurate to within five feet  one cannot express the knowledge that two rocks are two feet apart  and the ten mile distance from the pond to the next village must be known accurately to within ten feet. 
   the diagram itself suggests the solution: local dimensions are recorded in terms of the lengths and orientations of edges connecting the vertices. lengths and orientations are not specified precisely. rather  we specify ranges in which they lie: the length of a-b is between 1 and 1; its orientation is between -1 and 1 degrees. we use a fixed scale and a fixed direction for measuring orientation.  see section 1 . 
   there is no alternative to using ranges; even if we represent these quantities as real numbers  we have to interpret them as ranges  if our system is to tolerate inaccuracy. this is particularly clear in a system which performs recognition. if i record the length of a given wall as 1 feet  and i see a wall which i judge to be 1 feet  can i say they are the same  and the discrepancy is simply the inaccuracy of the measurement! probably. if i judge that the wall i see is 1 feet long  almost certainly they are the same; if i judge that it is 1 feet long  almost certainly they are different. kventually  i must make a biliary judgement as to whether they are the same  and  when i do  this will define an implicit range of seen values which are accepted. it is simpler to use ranges from the beginning; to record in memory that the wall is 1 + /- 1 and to have vision report that it is 1 + / - 1. ranges are better than point values interpreted as ranges because true ranges allow specification of both value and tolerance. an upper and lower bound are equivalent to a value and a tolerance. since the former is easier to compute with  we will use it henceforth. such a range is called a fuzz range; a quantity bounded by a fuzz range is a fuzzy quantity.  fuzziness is not an attribute of the quantity  which is presumably real-valued; it is an attribute of our knowledge . 
   all vertices must be directly or indirectly connected by edges. in figure 1  the rock and the tree are still disconnected from the other objects  so more edges must be drawn. the rock is naturally connected to the pond by edges from vertex h to vertices o and p. generally  edges should connect nearby vertices because their relative position is more fixed and because it simplifies search procedures. 
   the tree is more problematical. assume that the distance from the tree to the road is known fairly precisely -- between 1 and 1 feet -- but the position of the tree along the road is unknown. one cannot express this state of knowledge with edges which connect vertex g to the vertices of figure 1. the indeterminacy of g's parallel coordinate means that both the angle and the distance of the edge from d to g or from e to g are very fuzzy; but that would leave g's distance from the line d-e also indeterminate. 
   the solution is to use two edges  connected at an imaginary vertex x. the edge d-x coincides with the edge d-c and has a fuzzy length; the edge x-g is perpendicular to d-x  and has a more precise length. this arrangement of two edges is common and important enough to be defined as a separate data structure. it is called a joint from g to d along d-e  and has three fuzzy quantities: perpendicular length  from g to x; parallel length  from x to d; and parallel orientation  from x to d. the parallel orientation is always either parallel or anti-parallel to the orientation of the associated edge.  see figures 1 and 1  

   
1 e. davis 
   edge lengths and orientations are less convenient than coordinates for calculations  but tolerable. the distance and direction from point a to point i in figure 1 is calculated from the lengths and orientations of the connecting edges a-d  d-h  h-i. other quantities can likewise be calculated from the measures of connecting edges. 
   many objects do not have straight line borders. therefore  these representations are only approximations. it is important to define how they are approximations  and to be able to state how inaccurate a given approximation is. the measure of the inaccuracy of a region is its grain-size  which is an upper bound on the distance from any point in the region to a point in the object. the smaller the grainsize  the better the approximation. also  every bound in a region has a grain-size which  roughly speaking  is an upper bound on the distance from the bound to the corresponding part of the boundary.  see figure 1 . a more precise definition is given in section 1. 

whether 	two 	clumps 	cau 	refer 	to 	the 	same 	object. 
therefore  we describe objects in terms of slot-filler pairs. 
for 	example 	a 	clump 	described 	as 	  is-a 	bridge  
 material wood   can match with one described   is-a bridge   state decrepit   but not with   is-a road   material asphalt  . 

   
   sometimes it is useful to have several regions for a given object. for instance  it might be useful to have a region which showed the sidewalk as an object with thickness  or a region with more detail on the pond  in addition to the simpler regions of figure 1  which are better for quick  inaccurate calculations. we therefore separate the representation of the object as a whole from individual regions. the overall representation of the object is called a 
   clump; it contains all the regions of the object  plus descriptions of the properties of the object  and the relations between the regions. 
   the description of non-geographic properties of objects is not part of our theory  and is presumably domaindependent. its only function in mergator is determining different regions for a clump can be related to one another in three ways. firstly  different regions may share one or more edges; in figure 1  the two regions share edge  a  b . secondly  vertices of different edges may be connected by edges or joints. in figure 1  there is edge  k d    edge 1   a joint from i to c along c-d  etc. 
   thirdly  the order of the external vertices around the boundary is recorded in partial circular ordering  pco . this is a data structure which expresses  for any three elements  whether they are in clockwise order  counterclockwise order  or unordered. it is analogous to a dag which expresses  for any two elements  whether they are in increasing order  decreasing order  or unordered. a clump with a complete outer boundary and no inner boundaries will have one pco; otherwise  it will have a pco for each separate section of boundary. the pco for figure 1 is 
   

   a consequence of allowing multiple regions is that the adjacency relationship becomes relative to grain-size  rather than primitive  as in many ai representations of position. at the grain-size of figure 1  for example  the road and the field share edges d-e and e-f  and are thus adjacent. finer regions would show that they are separated by the sidewalk. this seems plausible in our domain. for planning a walk home  my house is on lawrence street; for walking the last ten feet  the sidewalk is next to the street; for fixing the sidewalk  there is a stone curb between the sidewalk and the street. in other domains  such as the naive physics of building towers out of blocks  adjacency is more absolute. 
   finally  a map is hierarchically arranged by containment   'lumps point to their immediate containers and contents. in our example  the rock and the tree are contained in the field. in a small map  this makes little difference. however  a map of realistic size may show furniture inside rooms inside buildings inside blocks inside ...  see figure 1.  we shall see in section 1 that such organization makes calculations much more efficient. the hierarchy is a dag  and it is assumed that its upward branching factor is small; i.e. it is almost a tree. 

1 formal semantics 
   we now formally define the meaning of a mercator map in terms of a truth conditional semantics  which gives necessary and sufficient conditions that the map be a valid description of the world. both hayes  hayes 1  and mcdermott  mcdermott 1  have argued the need for such interpretations in any system of representation. it is especially appropriate in spatial domains  where semantics are easy to define  and concepts relate in confusing ways. one might think that the informal description of the 
mercator representation will suffice until one must answer specific questions. then it is incomplete and ambiguous. can the same edge represent a circular arc of coarse grain-size in one object and a very straight boundary in another  if so  how  can we leave small objects out of a map  how small must they be  since all our descriptions have grain-size inaccuracies  why do we need fuzz ranges  
   a formal semantics is particularly necessary in the matching problem  determining whether two clumps can represent the same object. there is no canonical representation of all two dimensional objects. in any representation scheme which can represent nearly all two dimensional shapes  there are shapes which can be represented more than one way. typically  these are shapes which have no elegant representation in the scheme  like circles in the mercator representation. identifying two such shape descriptions involves more than matching identical structures; it requires consideration of how each description maps onto the object represented. the relation between description and object must therefore be defined. two mercator descriptions of a circular ring can look entirely different. one cannot write code which compares the two without a rigorous specification of what each has to do with the ring. 
   the semantics of mercator maps are rigorously defined in  davis 1 ; we will briefly sketch them here. first we define the microworld that mercator maps represent. an object o is a closed  connected subset of r1  the real plane  with a boundary consisting of a finite number of disjoint simple closed curves; equivalently  it is a subset of r1 homeomorphic to a disk with finitely many holes.  for example  an object cannot be a figure eight.  a property is a function from objects to arbitrary sets. typical properties are  color  with image set { red  blue  white ... };  style  with image set { gothic  georgian  bauhaus ...  ;  is-a  with image set { robot  pond  road  
...}. a mercator map describes a set of objects with properties. 
   three functions relate the mercator map to the real world: real  coor  and cover. real maps clumps onto objects. thus real  cl1  = the empire state building; real  cl1  = my coffee table  etc. real preserves containment -- i.e. if cl1 contains cl1  then real  cll  must contain real  cl1   but the converse need not be true -- and it takes clumps with stated properties onto objects with those properties ~ i.e. if cl1 is marked as   is-a building   height very-high   then it is ok for real  cl1  to be the empire state building  and not ok for it to be the atlantic ocean. 
coor takes vertices of the map into points in the plane. 
even if the point represents an object with some extent  like vertex g in figure 1  coor  g  is a single point in the plane. coor is extended in the natural way to take edges into line segments  joints into pairs of line segments  polygons of the map into planar polygons  and regions into unions of polygons. coor has to satisfy the following conditions: 
   
1 e. davis 
1. for each edge e  coor  e  has to have length and orientation within the fuzz ranges which the map specifies for e. likewise for joints. 
1. for each polygon p in the map  coor  p  must be a legitimate  non-self-intersecting polygon in the plane. 
1. for each region reg  every point in coor  reg  must be no further than the grain-size of the interior of reg from the object represented by reg. 
that is  the measurements given for edges and joints are correct  and regions lie on top of the objects they represent. 
   cover is a family of functions. coor  as stated  maps directed edges onto line segments in the plane. however  we must nlate boundary edges to the part of the object boundary that they represent. therefore  for each directed edge b in the boundary of a region  we define a continuous function coverb from coor  1  into the object boundary. oover  must satisfy the following conditions: 
1. for all x in coor  1   the distance from x to cover b  x  must be less than the grain-size of 
1. 
1. if b and c are directed edges from the shell of region reg which meet at a vertex v  and v is a real bound of reg  then coverb  coor  v   = cover c  coor  v  . this rules out situations like figure 1  which is allowed if v is a knowledge bound of reg. 
1. the real vertices of a clump map into the boundary of the corresponding object so as to 
satisfy the pcos of the clump. 

the mercator map is valid if it is possible to define 
real  coor  and cover so as to satisfy all these conditions. 
   this semantics was used substantially in constructing the program. almost all steps of the various algorithms can be justified in terms of the semantics  usually as a deduction from the map s   sometimes as a plausible inference. 
1 fuzz and grain-size 
   having stated the semantics  we can clarify the distinction between fuzz and grain-size. fuzz ranges are purely constraints on the coor function. their significance is unrelated to the real world. they would mean the same in a map without any clumps  and with only edges  joints  and vertices. they restrict the possible relative positions of the vertices. grain-size describes the fit of the geometry to the object. 
   in practice  fuzz measures uncertainty of dimensions; grain-size measures uncertainty or complexity of shape.  see figure 1 . if everything was a simple polygon  but dimensions were hard to determine  there would be fuzz but no grain-size. if all dimensions were precisely known  but shapes were complex and had to be simplified  there would be grain-size but no fuzz. grain-size is more fundamental than fuzz  since it becomes necessary by the mere fact of approximating shapes with polygons. grain-size ran be used to express uncertainty in dimension or position  though at great loss of information. fuzzy polygons cannot represent a circle without some grain-size inaccuracy. 

   computationally  fuzz is easier to deal with than grainsize. in comparing two regions for possible identity  for example  two regions with fuzzy edges but very fine grainsize are identical only if corresponding sets of edges have overlapping fuzzes. two shapes whose grain-size is not much smaller than the length of sides can be wildly different  yet represent the same object.  see figure 1 . 

two regions for the same object. 
the grain-size can be as small a s t h i s : 
figure 1 
   
1 inadequacies of the representation 
   the most important gap in mercator maps is that they only express the presence of an object; they cannot assert  explicitly or implicitly  an object's absence. the absence of an object from a map proves nothing; maps are not obliged to show everything  or anything  in a particular area. no map is inconsistent with the presence of any object anywhere  except that objects represented at one place in the map can't also be somewhere else in the map. looking at a mercator representation of your office  you can't say there are no rhinoceroses in the office  or even that there is reason to believe there aren't.  this answers the question posed previously how we can leave small objects out of a map. we can leave anything out of a map.  
one way to fix this gap is with completeness statements. 
these have the form  all objects with property p larger than grain-size g inside region r have a corresponding clump in the map.  for example   all buildings larger than 1 in the block are shown    all solid objects with diameter greater than one foot in the room are shown    all wild animals in the house are shown   etc. statements of this kind allow us to deduce that if there is no rhinoceros shown in the office  there cannot be a rhinoceros in the office. such statements can be explicit in the data base  or implicit using default inference rules. it might  for example  be part of the semantics of a region that all objects inside it larger than twice the grain-size are represented. we have not implemented this feature in any form. 
secondly  some natural combinations of precise shape and 
imprecise dimensions cannot be expressed in a mercator map. for example  there is no way to specify that a shape is a rectangle rather than a bizarre quadrilateral  if the lengths and orientations of all the edges are fuzzy. 
   the correct solution is to express lengths and orientations in relative terms. that is  length measures should be in terms like ''a-b is between 1 and 1 times as long as c-d  rather than  a-b is between 1 and 1 units  or  the direction from a to b is between 1 to 1 counterclockwise of the direction from c to d  rather than  the direction from a to b is between 1 and 1 in the absolute scale.  using such facts  it is easy to state that abcd is a rectangle. it suffices to say: 
 a-b is equal to c-d in length and orientation.   d-a is equal to b-c in length and orientation.  
 a-b is perpendicular to b-c.  
in  davis 1  and  mcdermott 1  we discuss data bases for such facts   there called  size trees  and  orientation trees    and we show that they can be maintained effectively. 
   mercator assumes that the robot always knows his absolute orientation  which is a very strong assumption. in fact  this problem is part of the previous one. ideally  we would express the orientation of seen edges with respect to the current orientation of the robot  the orientation of known edges with respect to previous orientations of the robot  and the various orientations of the robot over time would be related to one another more or less fuzzily. the solution alluded to above will apply here too. there are also a less drastic solution by which the robot keeps track of his absolute orientation within fuzz bounds  which he tightens each time he matches the scene description against the known map. 
   finally  the range of worlds which can be represented in a mercator map is limited. it is limited to twodimensions  and to to situations where things come in well defined chunks  with perceptible boundaries. it is useless for describing a hill  a monet  or chinatown. these simplifications are not as restrictive as it might seem. the question is not  in what kinds of environments are these 
assumptions true!  - obviously very few - but  how much information is lost in describing a scene in these terms    which  for many scenes  and many purposes  may not be very great. 
acknowledgements 
   1 thank drew mcdermott for advising this research. i also thank him  together with bianca iano  stan letovsky  and david miller  for helpful criticisms of this paper. 
