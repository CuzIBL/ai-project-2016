 
one of the main disadvantages of computer generated proofs of mathematical theorems is their complexity and incomprehensibility. proof transformation procedures have been designed in order to state these proofs in a formalism that is more familiar to a human mathematician. but usually the essential idea of a proof is still not easily visible. we describe a procedure to transform proofs represented as abstract refutation graphs into natural deduction proofs. during this process topological properties of the refutation graphs can be exploited in order to obtain structured proofs. 
1 introduction 
a problem for the acceptance of automated deduction systems has been the difficulty to understand proofs that are automatically generated. if this has been an obstacle for mathematicians to accept automatic help  when proving technical lemmata  or trying to find proofs interactively  it has even more hindered the explanation of results in other knowledge based systems. the transformation of these proofs into a natural deduction formulation has solved some of the problems  see  andrews  1  miller  1  lingenfelder  1  pfenning  1   but by and large the increasing length and complexity of the transformed proofs adds to their incomprehensibility rather than to reduce it. it is therefore paramount to be able to state the proofs in a hierarchically structured way  as mathematicians do  formulating subgoals and lemmata. it should also be avoided to overload the proofs with trivial steps  thus hiding its main interesting ideas. 
모we aim to simplify and transform proofs that are found automatically into that subset of natural language a mathematician might use. this shall be done in several steps. in a first step the automatically constructed proof is transformed into a natural deduction proof  which is still formal but more human-oriented than most other formats. during this process the proof is already structured by the introduction of lemmata and subgoals. then the proof lines are arranged in a graph representing their dependencies  which allows grouping of lines and a gradual linearization of the natural deduction proof in accordance with its logical structure. finally a simplified version of this natural deduction proof is to be transformed into an intermediate representation  upon which structural  and stylistic procedures operate 
automated deduction 
in order to find a  human like  proof style and to transform it into mathematical natural language. 
1 definitions 
this chapter explains the proof representation formalisms needed in this paper. exact definitions can be found in shostak   lingenfelder   or eisinger . 
1 	clause graphs 
모definition: a clause graph consists of a set of literal nodes  that are partitioned into clause nodes. each literal node is labelled with a literal  the distinction between the literal nodes and the literals themselves is needed because the same literal may be attached to several literal nodes. finally the links of the clause graph connect sets of literal nodes  such that for all links the following conditions hold: 
 뷇i  all the literal nodes in a link are labelled with literals with unifiable atoms. 
 뷇1  a link must connect at least one positive and one negative literal. 
each link a has two opposite shores  a positive shore 
s+ a   and a negative shore s  a   constituted by the literal nodes with positive and negative literals  respectively. literal nodes belonging to no link at all are called pure. 
모a clause graph f is called a subgraph of a clause graph r  if it can be obtained from t by any number of the following actions: 
 s1 remove literal nodes from a link. if the resulting set of literal nodes no longer fulfils condition 뷇1  the complete link is removed from the graph. 
 s1  remove clause nodes from the graph. at the same time all its literal nodes must be removed from their respective links according to  s1. 
모below you find an example of a clause graph. literal nodes are drawn as boxes with the appropriate literals inside. it can be seen that the same literal may belong to several literal nodes. therefore literal nodes cannot be identified by their literals and the labelling outside of the boxes is for their identification. the example contains six clause nodes  built up by bordering literal nodes  and four links: {l1 l1   
{l1  l1  l1  l1   {l1  l1   and  l1  l1 l1 . they are drawn as lines with a little dot  which branch on each side to connect the different literal nodes of the opposite shores. the literal nodes l1 and l1 are pure. 
f is the conclusion of the last line of s  the set of assumptions of this last line is empty  every line in s is justified by one of the rules of natural deduction. a complete set of such rules is described by andrews . 
모the construction of natural deduction proofs  by humans and computers alike  is conducted in single steps. to prove 모definition: a walk in a clause graph t is an alternating sequence coii1.. .cnilincn  n 1  of clause nodes and links such that for every pair of clause nodes ci-1 cione of them contains a literal node of the positive shore of the connecting link iii and the other contains a literal node of its negative shore. 
모a link is separating t  if there exist two clause nodes c and d connected by a walk in t  that are no longer connected when the link is removed. in the example all links except  l 1   l1  are separating. a trail in a clause graph t is a walk  where all the links used are distinct. a cycle is a trail  whose start and end clause nodes coincide. a deduction graph is an acyclic clause graph. a refutation graph is a deduction graph without pure literal nodes. the example graph a is a deduction graph; it could be extended to a refutation graph by inserting an additional link {l1  l1 . 
모a refutation graph represents a proof for the unsatisfiability of the set of its clauses  while a deduction graph represents a derivation for the disjunction of its pure literals. as an example we give a refutation graph for a theorem known as  part of  the subgroup criterion: 
모main example: let g be a group  and let scg. if for all elements x  y in s the element x뫢y'  is also in s  then 
for every x in s its inverse x1 is also in s. 
모this theorem must be formulated in first order logic for the automatic theorem prover. here pxyz means x1y=z in a group  sx means x e s  a subset of the group  and the function i calculates the inverse of the group elements: 

모the refutation graph t1 was generated automatically by our theorem prover mkrp   eisinger and ohlbach  1 . for the purpose of this paper  we assume that it is given. any valid formula f one always starts with a line 1- f. such a line is obviously no proof  because it is not correctly justified. now the proof is constructed by deriving subgoals until the proof is completed. in the intermediate states  called proof outlines by andrews   one may find completed subproofs  but also others that are not yet done. to formalize the procedure of the search for such a natural deduction proof  we use generalized natural deduction proofs  gndps . they differ from natural deduction proofs only in point . this allows lines not correctly justified within the calculus  but it is assumed that these lines are  correct   in the sense that a proof exists for  apremises =  conclusion  in an arbitrary formalism  for instance as a refutation graph. such lines are called external lines  lines justified within the calculus are called internal when no external lines are present in a gndp  it is an ordinary ndp. 
모a gndp consisting of just one line  which is an external line without premises and with conclusion f  is called the trivial gndp for f. in order to find a natural deduction proof for a formula f  for which a proof 뷇 is known  a finite sequence of gndps can be constructed  whose first element is the trivial gndp  and whose last element is an ndp for f. the transition between consecutive gndps is governed by the set of rules described in  lingenfelder  1 . as an example  here are two of the rules: 
example: in the description of the transformation rules  
a is a list of assumption formulae  capital letters indicate single formulae  small greek letters are used as labels for the lines  the justification r stands for an arbitrary rule of the natural deduction calculus  and the justifications 붫  뷇1  and 붫1 represent proofs of the respective lines. in any case one must make sure that the proofs 뷇1 and 뷇1 can be constructed from 뷇 or are otherwise known. 
lingenfelder 

1 	trivial subproofs 
모in the following subsections  subgraphs of the orginal refutation graph will be viewed as deduction graphs representing lemmata in a larger proof. this only makes sense  when the deduction graph in question is complex enough to warrant the introduction of a lemma. otherwise it may be better to repeat a trivial argument instead of using a lemma. it is of course not straightforward to decide whether a deduction graph is trivial. to make a decision we use a heuristic approach taking into account several properties of the graphs involved. 
모it is indeed not easy to find objective criteria to decide when a proof is trivial. davis  proposes that  an inference is obvious  precisely when a herbrand proof of its correctness can be given involving no more than one substitution instance of each clause . pelletier and rudnicki  argue along the same lines  but point out that in general it may be difficult to decide if any proof of a given fact is non-obvious because this requires to check a property of all possible proofs. this doesn't pertain to our case  however  since we are only concerned with the question if a given proof is trivial as opposed to the question whether an obvious proof can be found for a given theorem. 
모so davis' approach seems to be a good starting point  however there is an additional complication. we have to figure out whether a given proof  deduction graph  is a substantial part of a larger proof. when this is the case  it is normally desirable to use the subgraph as a lemma or as an intermediate step in the overall proof. therefore we must check  if the rest of the proof - after removing the proof for the lemma - has become  easier . according to davis this will be the case when the subgraph contains an instance of a clause  of which a different instance appears somewhere else in the rest of the proof. it may even be the case that both resulting proofs are obvious although the total proof wasn't. 
automated deduction 
but that's what dividing large proofs into steps is all about. 
모finally  when it comes to make someone understand a proof  other non-logical properties must also be considered. for example its absolute length and the length in relation to the total proof must be taken into account. when the subproof is relatively long  it will always pay to prove it separately as a lemma. if this lemma is already known to the reader one may later dispense with its proof altogether. doing this intelligently requires a database of known lemmata and a model of the reader's knowledge about the field of mathematics in case. when a freshman uses the system as an explanation for a proof one should not omit arguments which a graduate student might consider trivial. conversely  it may obscure the idea of a complex proof to mention all the applications of lemmata that have been thoroughly understood long before. as one never knows  however  who will read the proof later  it is useful to postpone this decision as long as possible. at this stage it is not yet necessary to take a user model into account  this will only be done when the natural deduction proof is finally brought into a well-structured linear form. 
1 	shared subgraphs as lemmata 
모now we assume that a proof for a formula 뷋 has already been found by an automated deduction system. we will further assume that this proof is represented as a refutation graph t  a form that can easily be constructed from a resolution proof  see  posegga  1  lehr  1 . this means  however  that the equivalent problem of proving the unsatisfiability of the negated formula in a special normal form has been solved. in addition to the refutation graph  we therefore need a correspondence between the literal nodes of t and the atom occurrences in 뷋. full details of the material presented in this chapter can be found in  lingcnfelder  1 . 
모an initial  trivial  generalized natural deduction proof can now be constructed to start a transformation process as described in  lingcnfelder  1 . after each application of a transformation rule a number of tasks need to be performed in order to guarantee a smooth transformation process. 
1. the relation between literal nodes of the refutation graph and atom occurrences of the conclusion formula of every proof line must be established. 
1. the refutation graph is changed or divided according to the rule applied. 
1. additional parts of the refutation graph may become positively polarized; a clause node is positively polarized  when each of its literal nodes corresponds to an atom occurrence of an axiom or a current assumption. this neatly reflects the general idea of natural deduction proofs  where new assumptions are introduced during the proof process. 
모some of the transformation rules  ea for instance  lead to new external lines  and as a consequence to a division of the refutation graph. in the simplest case the refutation graph proving f1 f1 is  cut  through the clause  -f1 -f1   such that the two resulting components arc refutation graphs for f and for f1. in general these graphs may have a non-empty intersection  and this is similarly the case for other rules leading to a division of the refutation graph. 
모if this intersection is comparatively small  it may easily be duplicated and then used twice in the two subproofs. if it is relatively large  however  it may be sensible to prove a lemma first and then use it in both proofs. in order to formalize such a procedure  a new transformation rule e-lemma is introduced. 

모this rule must of course be used with discretion  i.e. only when an appropriate formula g could be found  which simplifies the proof of the formulae fi in particular it may only be used  when all the literal nodes in the refutation graph 뷇1 are positively polarized  so that it is possible to prove g from axioms and current assumptions only. it goes without saying  that 붫1 must be a common subgraph of all the graphs 뷇i. in constructing the graphs 뷇' one is entitled to use the formula g as an additional axiom. the case n=l may also be meaningful  when a lemma is introduced as a subgoal  see section 1. 
모let us consider for a moment what these shared subgraphs may look like. we always assume that a cut is being made in order to apply ea. in the simplest case the lemma consists of just one atom g. then the graph has the form 

모when g is a disjunction g1vg1  however  things are no longer as easy. one might think that it suffices to introduce a link between the two subgraphs of the previous case. it is true that we could now prove the disjunction  but a cycle is introduced into the graph  which therefore ceases to be a refutation graph. in fact  a shared subgraph representing a dis-
junction can only occur  when the theorem f 1 f 1 appears more than once in the graph  as in the next example. 

subgraph1. in both cases the proof can be done by cases after the lemma g1vg1 has been introduced. 
   already shostak  mentioned  that unsatisfiable ground clause sets exist  for which every refutation graph contains at least one of its clauses twice. but in this case one can inhibit the duplication of any specific clause. 
모lemma: for every unsatisfiable ground clause set s containing a clause c  one can construct a refutation graph  which contains c only once. 
모if one chooses the theorem clause  -f1 -f1  to appear only once  the graph of the last example takes the form shown below. now the subgraph proving g1vg1 is no longer shared  but two copies of it exist in the refutation graph. 

모so in general one has to search for isomorphic subgraphs that are complex enough to warrant the introduction of a lemma. in addition to an isomorphic graph structure corresponding literal nodes must represent identical literals and must be related to the same atom occurrences in the original formula. this condition may  however  be relaxed for term arguments of the free  lemma  literals  if they correspond to variables  that need not be instantiated in the subgraph. in this case the lemma becomes a quantified formula used more than once in different instantiations. 
모such a lemma corresponds to a resolvent used more than once during the resolution proof. thus  if the refutation graph was originally constructed from a resolution proof  one should keep this information in order to obviate the search for that kind of lemma. an example can easily be constructed by slightly altering the above graph. 

1 	separating links that define subgoals 
모in the previous chapter  the main incentive for the introduction of a lemma was to avoid unnecessary duplication in the proof. but this is not the only reason  why mathematicians use lemmata. often they are used purely to structure the proof  so that its main ideas become better visible. 
모in an automatic proof transformation it is obviously difficult to find meaningful lemmata. and it is here again that the topological structure of the refutation graph may successfully be exploited. the task is to find parts of the refutation graph that are sufficiently complex in order to justify the introduction of a lemma  while they should at the same time be easily separable from the rest of the graph. besides  
lingenfelder 
모

automated deduction 
모
a  if only one of the resulting components contains ne-gatively polarized literal nodes  then an extra and unnecessary proof by contradiction must be performed. 
b  if the two resulting parts overlap widely  including negatively polarized literal nodes  then large parts of the proof will be duplicated in both cases. 
모a good case for the application of m-cases appears  when both of the resulting components contain parts of the theorem  and their overlap is either small or restricted to positively polarized parts  in which case a lemma can be defined to avoid the duplication  cf. cases 1b and 1c above. 
모the most important case for the rule m-cases comes up  when an existentially quantified formula cannot be proven constructively. in the refutation graph  this fact is reflected by the existence of several copies of the theorem clauses. m-cases can now be applied  if all the resulting components contain just one of these copies. 
1 final remarks 
after the transformation process from a refutation graph into a natural deduction formalism the proof must now be ordered in accordance with its logical structure. a first algorithm to structure natural dedcution proofs has been proposed by chester . he starts his transformation process from a given  completely unstructured natural deduction proof  having no information of how it was constructed. however  if an ndp was constructed by the method described above  one already knows about lemmata from the topological structure of the refutation graph as described before in section 1. 
모when the natural deduction graph has been ordered  some further steps are required to make the proof really understandable. the main drawback of natural deduction proofs is their length and the difficulty in seeing the important steps. one has to distinguish therefore between trivial proof steps and more important steps  which is not straightforward  as the answer depends on the context of the proof as well as on the intended reader. after all  a mathematician will consider a lot of proof steps trivial  that inexperienced readers might not find easy at all. this raises the question how this distinction can be made automatically. 
모a first approach will group several steps  especially when only propositional reasoning is involved. but it may also be indicated to combine propositional steps with an instantiation. if it is known  however  that the proof will appear in a text book immediately after the proof of some lemma  or that an expert will read the proof  a complete subproof may be omitted. in order to achieve this sort of reader dependent simplification of the proof it will be necessary to have a model. the development of user models is a well known research problem in ai  especially in the field of natural language processing and computer interfaces. 
모summary: in this paper we have seen  that we can exploit the topological structure of computer generated proofs  in order to break them up into smaller lemmata. in particular this may avoid the need to prove a subformula more than once  when it is shared by different branches of the proof. in addition the information implicit in the topological properties of refutation graphs is used to structure the proof. this is done by dividing the graph into disjoint parts to be proved separately  either sequentially  as a lemma cited later in the proof  or as a proof by case analysis. in order to do this  the algorithm for the transformation of refutation graphs into natural deduction proofs had to be extended. 
모the same information also facilitates the process of ordering the natural deduction proof. the parts to be brought into a meaningful order are much smaller  thus reducing the number of arbitrary decisions that have to be made to choose an actual sequence of proof lines. in fact one has to solve several smaller linearization problems instead of a single large one; of course one also has to find a sequence of the lemmata in the end. 
모the final ordered version of the natural deduction proof is then used as a starting point for removing trivial steps from the proof. in general this can only be done with the help of a user model. when all of this has been done one can tackle the problem to state this formal proof in mathematical natural language  which is the topic of our current research interest  see  huang  1 . 
