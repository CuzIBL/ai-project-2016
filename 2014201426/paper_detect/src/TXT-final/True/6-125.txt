 
we investigate the combination of answer set programming and qualitative optimization techniques. answer set optimization programs  aso programs  have two parts. the generating program  produces answer sets representing possible solutions. the preference program  expresses user preferences. it induces a preference relation on the answer sets of  based on the degree to which rules are satisfied. 
we discuss possible applications of aso programming  give complexity results and propose implementation techniques. we also analyze the relationship between a so programs and cp-networks. 
1 	introduction 
answer set semantics  gelfond and lifschitz  1  describes the meaning of a logic program p in terms of sets of literals. the exact definition of answer sets depends on the kind of rules used in p  yet two properties are always required. answer sets are closed under the rules of p  and they are grounded in p: each literal has a derivation using  applicable  rules from p. answer set programming has become a popular knowledge representation tool. there are several reasons for this: 
1. logic programs are expressive enough to model many typical knowledge representation problems in ai. in particular  the availability of default negation in the body of rules makes it possible to represent defeasible information. 
1. many problems in reasoning about actions  planning  diagnosis  belief revision and product configuration have elegant formulations as logic programs so that models of programs  rather than proofs of queries  describe problem solutions  lifschitz  1; soininen  1; baral  1. 
1. the semantics of answer sets is intuitive and avoids the pitfalls of resolution-based systems like prolog. for instance  it is independent of the order in which rules are written and correctly handles loops. 
    the authors acknowledge the support of dfg grant computational dialektik br 1-1  academy of finland grant 1 and nsf grant iis-1  respectively. 
nonmonotonic reasoning 
1. in the same time  the syntax of logic programs is restrictive enough to allow for fast implementations and several highly efficient answer-set provers have been developed. most advanced among them are smodels  niemela and simons  1 and dlv  eiter et al  1. 
to increase the ease of use of logic programs in knowledge representation researchers have suggested and investigated several extensions to the basic formalism. well-known examples of such extensions include disjunctive logic programs and programs with cardinality and weight constraints  simons et ai  1 . 
¡¡an important issue for many applications is the representation of preferences and reasoning about them. researchers have investigated preferences among program rules  schaub and wang  1   among program literals  sakama and inoue  1   and context-dependent preferences among literals through the use of ordered disjunction  brewka  1. 
¡¡representing and handling preferences in the formalism of logic programs is also the main topic of this paper. however  our approach differs from existing ones in an important aspect. rather than specifying a preference relation among the rules or literals in a single logic program  we use two different programs. the first program  is used to generate answer sets  that is  define the space of acceptable solutions. context-dependent preferences are described in a second program  the preference program these preferences are used to compare answer sets of   that is  to form a preference ordering of acceptable solutions. intuitively  the rules of  are hard constraints which specify conditions an answer set must satisfy; the rules of are soft constraints describing conditions under which one answer set is to be considered better than another. 
¡¡the decoupling of answer-set generation and answer-set comparison has at least two advantages: 
1. the method for comparing answer sets is independent of the type of the generating program  it may be any type of a logic program  for instance  normal  extended  disjunctive  involving cardinality or weight atoms   as long as it has a well-defined semantics given by a collection of sets of literals. 
1. preferences in  soft constraints  can be specified independently of    hard constraints . this makes preference elicitation easier since the task is broken into sepa-

rate and smaller subtasks. moreover  it makes the overall setting better aligned with practical applications. indeed  often what is possible is determined by external factors  available resources  constraints of the environment  design and engineering constraints for products  while what is preferred is described independently and by different agents  users  customers  groups of customers . 
¡¡the rest of the paper is organized as follows. the next section introduces a new formalism  answer-set optimization programs  and defines their syntax and semantics. the subsequent section provides examples and additional observations on the basic formalism. in section 1  we show how metapreferences  that is  preferences on the preference rules  can be introduced and dealt with. next  we discuss complexity of computational problems arising in the context of our formalism and propose implementation techniques. our work is related to the approach proposed in tboutilier et al  1 . we investigate this relationship in section 1. we conclude with additional discussion of other related work and possible extensions to the formalism presented here. 
1 optimization programs 
we use two separate programs to describe the space of answer sets and preferences among them. 
definition 1 let a be set of atoms. a preference program over a is a finite set of rules of the form 
		 1  
where the a s and bjs are literals  expressions x and x  where x is an atom in a   and the  are boolean combinations over a  to be defined below . 
the rule intuitively reads: 	if an answer set s contains 
¡¡ ...  n and does not contain any of the literals b i   . . .   bm then c1 is preferred over  etc.  we will give a precise semantics later in this section . 
¡¡a boolean combination over a is a formula built of atoms in a by means of disjunction  conjunction  strong and default  not  negation  with the restriction that strong negation is allowed to appear only in front of atoms  and default negation only in front of literals. for example  
is a boolean combination  whereas is not. using boolean combinations rather than  say  literals in the heads of preference rules gives us additional expressiveness. using conjunction we can express that certain combinations of properties are preferred over other combinations. disjunction allows us to express that certain options are equally preferred. 
for instance  the rule a says that in case of / the best option is a; b and c are equally preferred second best options  and d is the least preferred option. finally  we 
can use expressions like a  not if we prefer to have one of properties over not having any of them. 
definition 1 t of literals. satisfaction of boolean combination c in s  denoted s c  is defined as: 

we next define the notion of an optimization program. 
definition 1 an answer-set optimization  aso  program is a pair where is logic program called the generating program  and ppr€j is preference program. 
as we already mentioned earlier  the program  used for generating answer-sets can be of any type. we only require that the semantics be given in terms of sets of literals  or answer sets  that are associated with programs. 
   the key question is: how does the preference program  determine a preference ordering on the answer sets de-
scribed by the generating program   let us consider an answer set s and a rule of the form  1 . given a set s of literals  three different situations are possible: 
. the body of is not satisfied in 1  that is  at i s for some 
1. the body of is satisfied in s and none of the 	s is satisfied in s 
1. the body of is satisfied in s and at least one c  is satisfied in 1. 
in the case  1   the rule  is irrelevant to s because the rule does not apply. the case  1  is more subtle: the rule lists preferences among several options  yet none of the options holds. we consider this as another kind of irrelevance. let us assume that a rule states that red is better than green  and s contains blue and no other color. in this case the preference of red over green appears irrelevant to s since s does not mention these two colors at all. in the case  1   the preference expressed in the rule is satisfied to some degree  as at least one d holds in s . thus  we define the satisfaction degree 
is irrelevant to 1  
and 	otherwise. 
¡¡concerning the relationship between / and the other satisfaction degrees  two viable options seem to exist. we can consider / as incomparable to other values  based on the view that  irrelevance  cannot be compared to proper satisfaction degrees. according to this view  selecting blue in the example above is neither better nor worse than selecting green or red. but one can also argue that green violates preferences whereas blue does not  and that blue is thus preferable to green. we will adopt this latter view here and use the following preorder to compare satisfaction degrees  fig. 1 : 

fig. 1: the preorder on satisfaction degrees 
the values / and 1 are regarded equally good and and better than all others. in addition  for each we have we write if is strictly better than . 
definition 1 let be a preference program and let s be an answer set. we say that s induces a satisfaction vector 
nonmonotonic reasoning 
and 1 are equally good and are maximally preferred in the we refer to this ordering as the preference satisfaction ordering  or ps-ordcring  for short . 

1 	examples 
the prototypical application for aso programs are configuration problems where  describes possible configurations and preferences among them. we use a dinner example similar to the one discussed in  brewka  1 . it is convenient to use programs with cardinality constraints to generate answer sets. such programs allow for the use of special atoms 
of the form  where the 	are literals  to rep-
resent: at least n and at most m of the are true. although rules built from cardinality constraints can  in principle  be replaced by sets of rules without such constraints  they make problem specifications much more concise and readable. for the precise definitions we refer the reader to  simons et a/.  1 . 
let us assume that pgen consists of the rules: 

each of these constraints enforces the selection of exactly one of the items it lists into an answer set. thus  generates 
answer sets. let us assume 
that 
this preference program designates as non-preferred all answer sets containing fish but not white  all answer sets containing beef but not red or beer  and all answer sets containing beer and not pie. we note that the objective is not to have these answer sets eliminated  which could be accomplished simply by adding the three constraints 

to the original program. the role of the preference program is to define soft constraints and  moreover  to do so independently of the generating program. for instance  if we later learn that constraints  need to be included in pgen* the additional constraints would lead to inconsistency. this does not happen in our approach. the answer sets generated by the extended program are: 
nonmonotonic reasoning 
presence of f to 1 and s1  the latter two answer sets being also equally good. 
1 	meta-preferences 
the notion of optimality underlying our approach is somewhat weak. in general  many optimal answer sets may exist  and one often wants additional means to express that one preference  that is  one rule in the program  is more important than another. here is a generalization of aso programs where it is possible to express such meta-preferences: definition 1 a ranked aso program p is a sequence 
and a sequence of denoted rank 
¡¡intuitively  preference rules with lower rank are preferred over preference rules with higher rank. we can now modify the definition of preference among answer sets by taking preferences among rules into account: 
definition 1 be a ranked 
aso program. let s  and s1 be answer sets of pgen- we define   if far every preference rule r' such that 
does not hold  there is a rule r  such that 
rank 	rank 	and 
clearly  the preorder rank extends  is stronger than  the preorder it is also easy to see that optimal answer sets can be obtained in the following way: select all answer sets optimal wrt p   among those pick the ones optimal wrt p1 and so on. 
a further generalization of ranked to partially ordered 
aso programs is straightforward and not presented here for lack of space.1 
¡¡in some cases a natural ordering of the preference rules can be derived from the structure of the preference program. for each preference program p we define its dependency graph g p  as follows. the atoms appearing in p form the vertex set of g p . there is a directed edge from a vertex b to a vertex a in g p  if there is a rule in p such that appears in the head of and appears in the body of 
¡¡if the graph g{p  is acyclic  there is a natural ranking of its atoms. namely  we define the rank of an atom 
recursively as follows:  = 1 for every atom that has no predecessors in g{p   otherwise  we define 
   'another possible extension concerns the setting of weighted preference rules. to compare answer sets one could use weighted sums of the violation degrees of preference rules. 

as the maximum of the ranks of all predecessors of in g p  incremented by 1. 
¡¡the ranking of atoms implies the ranking of rules. namely  we define the rank of a preference rule as the maximum rank of an atom appearing in the head of 
¡¡we call preference programs with acyclic dependency graphs acyclic preference programs. they are important for two reasons: 
1. they commonly appear in practice as preferences are often described according to some partial order on features defining answer sets  with some features being more important than others. for instance  in the dinner example  most users will start with the preferences concerning the main course. they could then condition their preferences concerning the appetizer and the beverage on the choice of the main course. and  finally  they may describe their preferences concerning the dessert based on earlier choices of the main course  appetizer and beverage. 
1. as we just demonstrated  in the case when g p  is acyclic  there exists a natural ranking on the rules. this ranking is implied by the program itself and allows us to strengthen our ordering relation on answer sets  as described above in definition 1. we call the resulting ordering determined by an acyclic preference program - the canonical ps-ordering. 
1 complexity and implementation 
the complexity of aso programs depends on the class of generating programs. to simplify the treatment we consider here only generating programs where deciding existence of an answer set is np-complete. this class of programs includes ground normal programs  possibly extended with strong negation or weight and cardinality constraints  lsimons et/a/. 1 . 
¡¡the following two results indicate that allowing preferences adds an extra layer of complexity. 
theorem 1 be an aso program and s an answer set of p then deciding whether s is optimal is conp-complete. 
theorem 1 given an aso program p and a literal i deciding whether there is an optimal answer set s such that i  s -complete. 
¡¡the complexity results imply that  unless the polynomial hierarchy collapses  preference rules cannot be translated to generating rules in polynomial time  i.e.  the problem of finding an optimal answer set for an aso program cannot be mapped in polynomial time to a problem of finding an answer set of a program obtained by translating the aso program to a set of generating rules only. 
¡¡however  in  brewka et al  1  an implementation technique for computing optimal answer sets for logic programs with ordered disjunction on top of a standard answer set prover has been developed. a similar technique has earlier been used in  janhunen et ai  1  to compute stable models of disjunctive logic programs using smodels. the computation is based on a tester program that takes as input an answer set and generates a strictly better one if such an answer set exists. the computation starts with an arbitrary answer set generated by the generator. this answer set is given to the tester program. if the tester fails to generate a strictly better one  we have found an optimal answer set and we are done. if a strictly better answer set is discovered  the tester is run with the new answer set as input. this continues until an optimal answer set is reached. 
¡¡this technique can be adapted for computing optimal answer sets of an aso program by choosing a suitable tester program for a given answer set the tester program is constructed by adding the following rules to the generator program 
1. for each preference include a fact where is the satisfaction degree of in 1. include rules 
1. add facts geq 	giving the preorder 	on the set 
1. for each boolean combination  and its nonatomic subexpressions  introduce a new atom and add rules capturing the conditions under which the expression 

if pt has an answer set 1  then s restricted to the original language of is an answer set for that is strictly preferred to so  and if has no answer set  no such answer set exists. 
1 relationship to cp-networks 
an important approach to the problem of eliciting and approximating preferences is that of cp-networks proposed and developed in  boutilier et al.  1 . we will now review this approach and show how it relates to our work. 
¡¡the approach of ctp-networks is concerned with comparing vectors of feature values that we call configurations. let be a set of features  attributes . for each feature be its domain  that is  a finite and nonempty set of values or selections for we assume that all domains are pairwise disjoint. a configuration is a tuple such that 
¡¡1 we follow the prolog convention that terms starting with capital letters arc variables and write rather than to avoid confusion. 
nonmonotonic reasoning 
¡¡the user prefers some configurations to others. since the number of configurations is  in general  exponential in it may be impractical to directly elicit and store the user's preference ordering on the set of all configurations. thus  the task is to identify partial  and  in some sense  basic  information about the user's preferences  and develop ways to approximate the preference ordering implied by this partial information. the formalism of cp-networks  boutilier et al.  1  is an approach to accomplish that. 
¡¡a cp-network over a set of features a is a pair  g p   where g is a directed graph whose vertices are features from a the edges of the graph g determine dependencies among features: preferences for a value for a feature a depend only on values selected for the parents of a in the network. thus  for each feature a and for each selection of values for the parent features for .1  a cp-network specifies a total ordering relation on the domain of a. all these total orderings form the component  of a cp-network1. 
¡¡the information contained in a cp-network implies preferences among configurations. a configuration v is one-step preferred to a configuration w if for some feature a  given a configuration 1  by u a  we denote the value from the domain of a selected to u : 
1. v b  = w b  for every feature b   that is  for every feature other than a   and 
1. v a  is strictly preferred to w a  in the ordering of the domain d of a specified by the network for the selection for the parents of a as given by v  or  equivalently  by w . 
the configuration v is cp-preferred to w if v can be obtained from w by a sequence of one-step improvements. it is easy to see that for acyclic cp-networks  acyclic networks seem to arise in most situations occurring in practice  this ordering is indeed a partial ordering; we call it a cp-ordering1. 
we will now show that the information represented by a 
cp-network n  with features  can be represented by means of aso programs. first  we specify the space of all configurations as answer sets to the program 
 n  that  for each feature 	contains 
the following rule  we assume here that 
as already discussed in section 1  such rule enforces the selection of exactly one of the listed values to an answer set. thus  answer sets of the program  n  are precisely the configurations of n. 
to specify preferences  we proceed as follows. let a be 
a feature and let be the set of its parents in the cp-network. for every selection of values of features respectively  the network specifies an ordering  say on the domain  of a. we represent that fact by including 
a rule 
in the preference program 
¡¡thus  at the level of syntax  our approach extends that of cp-nets. in particular   boutilier et a/.  1  is concerned only with one fixed space of all configurations that contain for every feature exactly one value from its domain. in contrast  in our approach we have a substantial flexibility in defining answer sets by varying the generator program. 
¡¡in addition  our approach is more robust when user preferences are inconsistent  the situation that often occurs in practice. for instance  the user may specify a preference rule unaware of situations 
where both and body1 are satisfied. such inconsistencies cannot be modeled by cp-networks. in our approach they can with the effect that one of the preference rules will be violated whenever both bodies are true. 
¡¡the key question is that of the relationship between the semantics of the two approaches. first  we observe that they are different. let us consider the following example from  boutilier et al  1 . there are two features .1 and b with values and respectively. feature b depends on feature a and the preferences are specified as follows  we give them in the notation of aso programs : 
is preferred over 
as there is a one-step improvement leading from 
to s1. on the other hand  none of s  and s1 is strictly preferred over the other in the ps-ordering  the corresponding satisfaction-degree vectors are:  1 1  and respectively . the reason is that the meaning of the rules in the two approaches is slightly different. in the cp-nct approach   body means and form the domain of a fea-
ture x   among all answer sets satisfying body  answer set s  is better than s1 if both agree on all features except a  and s1 makes x true and s1 makes  true. in our approach 
is more like a soft constraint expressing: 
whenever body is true there is a reason to prefer over here  among the answer sets satisfying body  an answer set 
s1 is preferred over and the other rules of the program are satisfied at least as well in s  as in s1. in a sense  what is different is the interpretation of the ceteris paribus - other things being equal - phrase  more precisely  the interpretation of what is meant by the  other things  that have to be equal. in the cp-network approach the  other things  are the selections of values for other features which have to be the same. in our approach it is the degree of satisfaction of the other rules in the program. 
¡¡in general  our basic approach yields a weaker ordering. namely  we have the following theorem. 
theorem 1 let n be an acyclic cp-network and let and w be two configurations. if v is strictly preferred to it is easy to see that the representation of an acyclic cpnetwork in our syntax results in an acyclic preference program. in this case  we have the following result. 
theorem 1 let n be an acyclic cp-network and let v and w be two configurations. if v is strictly preferred to w under the cp-ordering determined by the cp-net n  then v is strictly preferred to w under the canonical ps-ordering determined by the aso program 
¡¡these two theorems show that we can approximate the cp-ordering by means of orderings implied by our approach. it is important as the relationship between two answer sets with respect to  ranked  ps-ordering can be verified in polynomial time  while it is not known whether polynomial time algorithms exist in the case of the cp-ordering  in fact  there are examples of configurations that require an exponentially long chain of one-step improvements to demonstrate that one is preferred to the other . 
1 further related work and conclusions 
in this paper we have introduced aso programs which combine a generating program with a preference program. the combination allows us to specify possible solutions of a problem  answer sets  together with preferences among specific aspects of solutions. the preference program orders the answer sets according to the satisfaction degrees of its preference rules. 
¡¡numerous papers which introduce preferences to logic programming exist in the literature. for an overview of some of them see for instance  schaub and wang  1 . closest to ours is the proposal in  brewka  1; brewka et al  1 . here  preferences are expressed through ordered disjunction. ordered disjunction is a non-commutative kind of disjunction which gives preference to the first disjunct over the second. the approach presented here differs from ordered disjunction in the following respects: 
1. generation and comparison of answer sets are separated  
1. preference handling works independently of the type of program used for answer set generation  
1. more general preferences can be stated due to our use of boolean combinations. 
in fact  it is not difficult to show that logic programs with ordered disjunction  lpods  are a special case of our approach. let p be an lpod   a logic program possessing the same answer sets as p  and let 

the preferred answer sets of p under the pareto criterion  cf. ibrewka et al  1   and those of the corresponding aso program coincide. we can also capture the inclusion based preference criterion from  brewka et al  1  using appropriate ranked aso programs. for each rule and for each  we have to 
include 	in the preference program 
     this gives us exactly the inclusion-preferred answer sets of p. 
¡¡in future work we plan to investigate further generalizations of our approach where rule heads may contain arbitrary partial orders on boolean combinations. we intend also to study in depth the distinction between options being  equally good  and  incomparable . finally  we will study extensions of the one-step improvement concept from cp-networks to the setting of general aso programs. 
