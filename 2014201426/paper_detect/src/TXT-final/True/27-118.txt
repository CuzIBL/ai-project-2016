 
we apply dijkstra's semantics for programming languages to formalization of reasoning about action and change. the basic idea is to view actions as formula transformers  i.e. functions from formulae into formulae. 
the major advantage of our proposal is that it is very simple and more effective than most of other approaches. yet  it deals with a broad class of actions  including those with random and indirect effects. also  both temporal prediction and postdiction reasoning tasks can be solved without restricting initial nor final states to completely specified. 
1 	introduction 
we apply dijkstra's semantics for programming languages  dijkstra  1; dijkstra and scholten  1  to formalization of reasoning about action and change. the basic idea is to specify effects of actions in terms of formula transformers  i.e. functions from formulae into for-
mulae. more specifically  with each action a we associate two formula transformers  called the strongest postcondition for a and the weakest liberal precondition for a. the 
former  when applied to a formula a  returns a formula representing the set of all states that can be achieved by starting execution of a in some state satisfying a. the latter  when applied to a formula a  returns a formula providing a description of all states such that whenever execution of a starts in any one of them and terminates  the output state satisfies a. 1 
   the idea of employing formula transformers to specify effects of actions is not new in the ai literature. waldinger   in the context of strips system  fikes and nilsson  1   introduces a notion of a repression operator which corresponds closely to the weakest precondition transformer. pednault  1; 1; 
   *this research was supported in part by the esprit basic research action no. 1 - drums ii and by kbn grant 1 p1 1. 
1
　　 we do not use the weakest precondition transformer  wp  which plays a prominent role in reasoning about programs. the reason is that  in general  the wp transformer is slightly too strong for our purposes. 
1 	temporal reasoning 
1  employes regression operators for plan synthesis. in  pednault  1  a notion of progression operator  corresponding to dijkstra's strongest postcondition  is introduced and analysed. 
　formula transformers approach to reasoning about action and change has one major advantage and one major weakness when compared to purely logical formalisms such as situation calculus  hayes and mccarthy  1; lifschitz  1; lifschitz and rabinov  1; gelfond et a/.  1; baker  1  or features and fluents  sande-
wall  1 . on the positive side  describing effects of actions in terms of formula transformers decreases computational complexity. the price to pay for it is the loss of expressibility. 
　our proposal combines computational effectiveness with expressibility. although not so expressible as situation calculus or feature and fluents  the formalism specified here allows to deal with a broad class of actions  including those with random and indirect effects. also  both temporal prediction and postdiction reasoning tasks can be solved without restricting initial nor final states to completely specified.1 
   the paper is organized as follows. section 1 is a brief introduction to dijkstra's semantics for a simple programming language. in section 1  we outline a general procedure to define action languages using dijkstra's methodology  illustrate this procedure by specifying a simple  shooting  language  and introduce a notion of an action scenario. section 1 defines the kind of reasoning we shall be interested in  and provides a simple method of realizing this type of inference. in section 1  we illustrate this method by considering a number of examples  well-known from the ai literature. section 1 is devoted to actions with indirect effects. finally  section 1 contains discussion and ideas for future work. 
   for lack of space  we omit proofs of the results provided here. the full version of the paper is available in pub/papers/crit/dijkstra/ijcai1.ps by anonymous ftp to ftp.mimuw.edu.pl. 
1
　　 this paper is part of a general programme of applying dijkstra's approach to reasoning about action and change. in  lukaszewicz and madalinska-bugaj  1   we used this methodology to formalize deterministic actions without indirect effects. in  lukaszewicz and madaliriska-bugaj  1   we combined dijkstra's semantics with reiter's default logic to deal with actions where abnormal effects are allowed. 

1 	introduction to dijkstra's semantics 
in  dijkstra and scholten  1  we are provided with a simple programming language whose semantics is specified in terms of formula trasformers. more specifically  with each command 1 there are associated three such transformers  called the weakest precondition  the weakest liberal precondition and the strongest postcondition  denoted by wp.s  wlp.s and sp.s  respectively. before providing the meaning of these transformers  we have to make some remarks and introduce some terminology. 
　we assume here that the programming language under consideration contains one type of variables only  namely boolean variables. this assumption may seem overly restrictive  but no other variables will be needed for our purpose. 

1
　　the original dijkstra's language contains abort command and iterative commands as well  but they are not needed for our purpose. 
1
　　 in what follows  we do not specify the wp formula tranformers for the considered language  because they will not be needed in the sequel. 
1
　　 note that when more than one of b  is true  the selection of a command to execute is nondeterministic. 
	lukaszewicz and madalinska-bugaj 	1 


1 	temporal reasoning 


	lukaszewicz and madalinska-bugaj 	1 


1 	temporal reasoning 


1 	conclusions 
we have applied dijkstra's semantics for programming languages to formalization of reasoning about action and change. we believe that the results reported here are interesting and worth of further investigation. the presented approach can be employed to represent a broad class of action scenarios  including those where actions with random and indirect effects are permitted. in addition  both temporal prediction and postdiction tasks can be properly dealt with  without requiring initial or final situations to be completely specified. the major advantage of our proposal is that it is very simple and more effective than many other approaches directed at formalizing reasoning about action and change. 
   as we remarked earlier  recent work of sandewall  provides a very general framework to study logics of action and change. obviously  the question of how our proposal fits in this framework should be investigated and will be pursued in the future. it is also interesting to compare our approch with aro language introduced recently by kartha and lifschitz . 
　the task of. implementation is another point of interest. calculating dsk sc   for a given scenario sc  amounts to simple syntactic manipulations on formulae and can be performed very efficiently. the only computational problem is to determine whether a given formula can be derived from the description of the state under consideration. this task can be realized by a theorem prover appropriate for the logic in which the effects of actions are described. 
acknowledgements 
we would like to thank wladysiaw m. turski  wiodek drabent and andrzej szalas for their comments on the previous draft of this paper. 
