 
　　ded is a display-oriented editor that was designed to add the power and convenience of display terminals to interlisps teletype-oriented structure editor. ded divides the display screen into a prettypnnt region and an interaction region. the prettypnnt region gives a prettyprinted view of the structure being edited; the interaction region contains the interaction between the user and interlisps standard editor. deds prettyprinter allows ellision  and the user may zoom in or out to see the expression being edited with more or less detail. there arc several arrow keys which allow the user to change quite easily the locus of attention in certain structural ways  as well as a menu-like facility for common command sequences. together  these features provide a display-facility that considerably augments interlisps otherwise quite sophisticated user interface. 
 note: an extended version of this paper  a user's manual  and source files are available from the author.  
i introduction 
　　although programs are written in a programming language  the human process of programming often occurs within a programming environment -- a set of software tools that assist in different aspects of the programming process . a major feature of the interlisp  environment is a structure-oriented editor whose commands operate on structural objects  e.g.  atoms  s-expressions  rather than on textual objects  e.g.  characters  lines . these commands deal with and modify in-core s-expressions rather than external textual representations interlisp's editor has evolved into a highly sophisticated tool. it's sophistication  however  is marred by one major drawback: it is built around a teletype-style interaction. if you wish a visual presentation of the expression being edited  you must explicitly request that it be typed out on the terminal. while this made sense when interlisp was originally developed  the late 1's when display terminals were rare   it is now a hindrance  since display technologies can add considerable power and comfort to a human interface. a display-oriented editor  called dei   has been built to bring some of this power and comfort to the interlisp environment. 
ded includes the following features: 
  the display screen is divided into two regions: one is for the standard style of interaction with interlisp's editor; the other gives a prettyprinted version of the expression being edited. 
  the prettyprinter allows ellision: the most detailed parts of the prettyprinted expression are shown in abbreviated form. 
  the user may zoom in or out to see the expression with more or less detail. 
  there are several  arrow  keys which can be used to move the  cursor  on the prettyprinted expression  in addition to interlisp's usual attentionchanging commands . 
  a menu-like facility allows common command sequences to be entered quickly. 
together  these features provide a display facility which considerably augments interllsp's editor. users have found it quite easy to learn and have not felt that it disrupts those aspects of interlisp that they already use. thus  the original goal of ded has been achieved: much of the power of display terminals has been added to interlisp without losing the structural orientation of the editor and without forcing radically new patterns of behavior onto users. interlisp with ded thus represents one solution to the problem of combining a program's visual representation with structural editing. 
 maclisp/emacs    and the cornell program synthesizer  represent alternative solutions to this problem.  
ii the user's view 
   the user interface to ded is a character-oriented display terminal with 1 lines of 1 characters each. the 1 lines are broken into two main regions  the 
prettyprint region and the interaction region. 	the 
1 prettyprint region contains a prettyprinted version of the expression being edited. interlisp s current focus of attention is indicated within the prettyprint 

	fig 	i 	starting 	to edit testen 
screen when the user is editing the definition of the function tfstfn. note that the definition is not printed in full detail; omitted subexrpessions are shown as  &  in the prettyprint region. 
   ded allows the user to zoom in to see specific subexpressions in more detail. in order to indicate the location of the displayed expression within the entire expression  the cars of the nested expressions surrounding the displayed expression are shown in the line  called the  zoom line   separating the preltyprint region and interaction region. the zoom out command causes ded to redisplay the expression which was displayed prior to the most recent zoom in command. that is  ded maintains a stack of displayed expressions; zooming in corresponds to a push operation  zooming out corresponds to a pop operation. 
   ded always ensures that the user's focus of attention is a subexpression of the expression displayed in the preltyprint region. thus  for example  if a search command shifts the focus of attention to an expression not contained in the current expression  ded zooms out until the displayed expression contains the new focus  and then  if necessary  zooms in to an expression such that the new focus is visible despite the ellision of the pretlyprinter. 
   in order to facilitate moving about within an expression ded includes several single-key commands to change the locus of attention. these include keys to move up and down levels  and right and left within a 
   level. none of these keys ever causes the focus of attention to move outside of the currently displayed expression. an unusual feature of these keys is that some other action is performed if the normal one does not fit the context  for example  if the current focus of attention is on the last element of a list  the right arrow moves up a level before moving lo the next element. 
   editing with ded is carried out either by issuing standard inter lisp commands  or by using a menulike facility  the upper right corner of fig. 1  for special structure modification commands  e.g.  moving an expression from one place lo another . 
ill notes on the implementation 
a. the display chain 
   interllsps editor was originally based on the concept of a  current expression   that part of the structure which is the user's current focus of atlention. to this  ded adds a  display expression   the part of the structure which is displayed at a given time. ded is built so that the current expression is always within  that is  a substructure of  the display expression. in order to keep track of the location of the current expression within the top expression  interlisp's editor uses a structure called an  edit chain   which is a list of expressions. the first expression is the current expression  the last expression is the top expression  and each expression on the list is either a member or a tail of the expression following it on the list. thus  the edit chain provides a stack of nested expressions  leading from the top expression to the current expression. in a similar manner  ded maintains a 
    display chain   a stack of nested expressions lo be displayed. expressions are added lo and removed from the display chain as the user zooms in and out. the display chain is always a subsequence of the edit chain. 
b. extending ded to other display devices 
ded was built to use a dec vt1 terminal. 
there are three features of the vt1 that are crucial to 
ded's success: arbitrarily many portions of the screen may be highlighted  using reverse video ; the current cursor location may be requested from the terminal; and the scrolling region may be restricted. in an attempt to gain device independence  all of ded's interactions with the display are controlled by a table describing the appropriate protocols for different features this technique permitted ded to be extended to a zenith  heathkit  terminal quite easily. 
   after ded was finished  a small experiment was performed to test the feasibility of extending it to run on a bitmap display  a xerox dolphin . this turned out lo be simpler than expected  involving essentially a mapping between character positions and bit positions. more interesting was the attempt to use a mouse  rather than arrow keys  to indicate changes in the focus of attention. although the experiment has not yet been completed  it has become clear that a pointing device  especially when combined with a sophisticated menu system  was a significant improvement over the vt1 interface. 

1 
iv 	lessons and surprises 	