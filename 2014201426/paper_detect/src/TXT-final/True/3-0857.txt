
this paper describes a new approach to computation in a semiring-based system  which includes semiring-based csps  in particular weighted csps  fuzzy csps and standard csps  as well as bayesian networks. the approach to computation is based on what we call semiring-labelled decision diagrams  sldds . these can be generated in a similar way to a standard search tree  decision tree  for solving a csp  but some nodes are merged  creating a more compact representation; for certain classes of csps  the number of nodes in the resulting network will be a tiny fraction of the number of nodes in the corresponding search tree. a method is given for generating an sldd that represents e.g.  a particular instance of a semiring-based csp; it is shown how this can be used to perform various computations of interest  such as solving a semiring-based csp  finding optimal solutions  determining the possible values of each variable and counting solutions of a csp.
1 introduction
suppose we are performing a depth-first search for solutions of a  not necessarily binary  csp  where we record the nodes of the search  decision  tree that we've visited so far. solutions correspond to complete paths in the tree  i.e.  directed paths from the root node to a node corresponding to a complete assignment. we are at a node with associated partial assignment u of set of variables u  which we have checked is consistent  in the csp sense of it satisfying all constraints involving only variables in u . suppose we manage somehow to find another assignment u1 of u  corresponding to a node previously visited  which is also consistent  and which is fully interchangeable  that is  extending  freuder  1   for all assignments w of the remaining variables w  uw is a
solution of the csp if and only if u1w is a solution.
¡¡there is then no need to expand the subtree below u  as it is equivalent to the one below u1 which we have already expanded. instead we can merge the nodes corresponding to u and u1. the resulting structure will no longer be a tree-so can be described as a decision diagram  as opposed to a decision tree -but it will still represent all solutions  as solutions still correspond to complete directed paths; one can also prune the representation to allow backtrack-free generation of any solution. if we can find many such equivalences through interchangeability then the number of nodes in the decision diagram will be a tiny fraction of the number of nodes in the corresponding decision tree. indeed  the number of solutions can even sometimes be exponential in the size of such a decision diagram  as the merging of nodes 'factorises' the solution set  so the size of the decision tree will be exponential in the size of the decision diagram . this kind of representation  in the form of binary decision diagrams  bryant  1; 1   has proved very effective in certain domains  such as cad applications.
¡¡testing full interchangeability is often expensive  but one can instead use the sufficient condition  neighbourhood interchangeability  that is  for all the constraints c whose scope intersects with both u and v   u  cu = cu1  where e.g.  cu  which involves no variables in u  is the 'slice' of c given by instantiating variables u to u. this condition can be tested quickly  in time proportional to the size of the  sliced  constraints. furthermore  if one constructs these slices for each node visited  and indexes them appropriately  then checking whether we have previously generated neighbourhoodinterchangeable u1  can be achieved efficiently.
¡¡this computational approach can be generalised to semiring-based systems  section 1   including semiringbased csps  in particular weighted csps  fuzzy csps and standard csps  as well as bayesian networks. each edge in the decision diagram is labelled with a value in the semiring  generating  section 1  what we call semiring-labelled decision diagrams  sldds . we show how this can be done in such a way that the sldd represents the semiring-based system  i.e.  the product of semiring values of edges in a complete path is equal to the semiring value of the complete assignment associated with the path. the efficiency of this approach to computation is very much dependent on how compact the sldd is  especially compared to the corresponding search tree. if the sldd is compact  then it can be efficiently constructed and the operations are efficient. we give examples of situations where the sldd is compact  even linear size  despite the number of solutions being exponential in the number of variables.
¡¡sections 1 and 1 show how the semiring-labelled decision diagram can be used to perform various computations of interest  including solving  optimising and generating inferred constraints  and projections needed in inference in bayesian networks and solving semiring-based csps.
¡¡the formalism sldds defined in this paper is a development of the finite-state automata representations for weighted constraints in  amilhastre et al.  1   where the soft constraints are unary . the latter  which can be considered as implementing a kind of dynamic programming  bellman  1   has been shown to be applicable as a compilation technique on a substantial real-world problem.
¡¡the main contributions of the paper are extending this computational technique of  amilhastre et al.  1  in a number of significant ways: our technique  sldds  can be applied to computation in many formalisms for preferences and uncertainty: in particular  to a very general class of soft csps  semiring-based csps; we allow soft constraints to be of arbitrary arity  as well as both extensional and intensional representations of constraints; it applies also to computation in bayesian networks  and for counting the solutions of a
¡¡csp. our construction of the representation is also new  and is based on backtracking search  where certain nodes in the search tree are merged  implicity performing a kind of formalised caching ; this enables constraint programming techniques to be used  making sldds a combination of a form of dynamic programming and search-based approaches used in constraint programming.
1 semiring valuations
semirings consist of a set with two operations   and ¨’  which are both associative and commutative and such that   distributes over ¨’. here we also assume a unit element and a null element. tuple a = ha 1 ¨’  i is said to be a semiring if a is a set containing different elements 1 and 1 and ¨’ and   are operations on a satisfying the following properties:   is associative and commutative with identity 1  ¨’ is associative and commutative with identity 1  which is also a null element  i.e.  for all ¦Á ¡Ê a  ¦Á 1 = 1   and   distributes over ¨’ i.e.  and for all ¦Á ¦Â ¦Ã ¡Ê a  ¦Á  ¦Â¨’¦Ã  =  ¦Á ¦Â ¨’ ¦Á ¦Ã . semiring valuations. let v be a finite set of variables. for each x ¡Ê v let d x  be the domain  i.e.  the set of possible assignments  ofq x. for u   v let the set of partial tuples d u  = x¡Êu d x  be the set of possible assignments to set of variables u. a complete assignment is an element of d v  . for u ¡Ê d u  and w   u  u¡ýw is the projection of u onto variables w  so that for all x ¡Ê w  u¡ýw x  = u x .
¡¡let a = ha 1 ¨’  i be a semiring. an a-valuation c associates a semiring value with each of a particular set of partial tuples: c is a function from d vc  to a  where set of variables vc   v is called the scope of c. if u ¡Ê d u  is an assignment to set of variables u containing vc  we may write c u  as an abbreviation for c u¡ývc . the semiring operations allow one to define a combination and a projection operation on semiring valuations. the combination c   c1 of a-valuations c and c1 is defined to have scope vc ¡È vc1  and by   c   c1  u  = c u    c1 u   i.e.  c u¡ývc    c1 u¡ývc1   for each assignment u of vc ¡È vc1.   is a commutative and associative operation on a-valuations  on v  . if c is a multiset of n	n
a-valuations  we may write c to mean c¡Êc c. let c be an a-valuation  and let u be a subset of vc. the projection c¡ýu of c onto u is defined by  for u ¡Ê d u   c¡ýu u  is equal to the semiring summation of c w  over all w ¡Ê d vc  such that w¡ýu = u.
¡¡many computational problems can be expressed as com-n puting a projection of a combination c = c of a multiset c of semiring valuations  and a straightforward approach to such a computation is exponential . in particular  computations in semiring-based csps  bistarelli et al.  1; 1; 1  are of this form. this is a general formalism for soft constraints  which includes weighted csps  fuzzy csps  probabilistic csps  lexicographic csps and set-based csps. these use a special type of semiring  where ¨’ is idempotent and 1 is an absorbing element of ¨’.
¡¡finite csps can be expressed as a set c of a-valuations  using a = h{1} 1 max ¡Ái  so that   = ¡Á  i.e.  min  and ¨’ is max. a constraint on set of variables u is represented as a semiring valuation c : d u  ¡ú {1}  where for assignmentstraint. the csp has a solution if and only ifu of u  c u  = 1 if and only if u satisfies the con- nc ¡ý  = 1.
¡¡to perform computations in bayesian networks  we use the semiring a =  where ir+ is the set of nonnegative real numbers. as is well known  computation in bayesian networks  pearl  1; shenoy and shafer  1  can be performed by computing projections of combinations of such a-valuations  where each a-valuation represents a conditional probability table of a variable given its parents in the bayesian network. in particular  the marginal probability that variable x is assigned to x is given by c¡ý{x} x . this semiring can also be used to count the solutions in a csp as c¡ý   by restricting the input semiring values to being 1 or 1.
1 constructing an sldd representing a combined semiring valuation
we will show how to construct a structure 1 called a semiringlabelled decision diagram  sldd   that represents  in a par-n ticular sense  the combination c = c¡Êc c of a multiset c of a-valuations  where a = ha 1 ¨’  i is a given semiring. the sldd is a directed acyclic graph  where the edges are labelled with elements in a. as we'll show in sections 1 and 1  this representation can then be used to perform certain important computations.
¡¡the construction of the sldd is very similar to that of a search tree generated by chronological backtracking; the difference is that when we generate an edge we use a certain condition forward neighbourhood interchangeability  defined below  extending the definition of neighbourhood interchangeability in the introduction  to test if we can avoid creating a new node  but instead connect the edge to an already existing node.
¡¡let u   v be a set of variables. define a valuation c ¡Ê c to be active  with respect to u  if its scope intersects both u and v   u. for active valuation c  define  for u ¡Ê d u  
a-valuation cu to be the 'slice' of c given by assigning u to u; that is  the scope vcu of cu is vc   u  and for all assignments of t to vcu  cu t  is defined to be c ut   where ut is the concatenation of tuples u and t . assignments u and u1 to set of variables u are said to be forward neighbourhood interchangeable  with respect to c  if for all active a-valuations c  the slices cu and cu1 are equal. roughly  what this implies is that the subproblems corresponding to u and u1 are the same  so there is no need to solve them more than once.
¡¡a semiring-labelled decision diagram  over set of variables v   is defined to be an a-decision diagram  over v   for some semiring a = ha 1 ¨’  i. an a-decision diagram consists of a directed acyclic graph with a unique earliest  parent-less  node source and a unique latest  childless  node sink. each edge ¦Ë is labelled with a value ¦Á ¦Ë  in the semiring  defined below . a complete path is defined to be a maximal  directed  path  that is  a path from source to sink.
¡¡nodes and edges are both labelled with various pieces of information  as described below. associated with each node r  other than sink  is a variable xr  which is the variable that is about to be instantiated. also ur is the set of variables associated with nodes on any  directed  path from source to r.
¡¡we start off by creating the node source  and define usource =    and usource to be the trivial assignment to the empty set of variables. we also choose some variable y ¡Ê v   and set xsource = y . the construction process works by choosing a node already constructed  and constructing the  directed  edges coming from the node  and the nodes at the end of the edges. at each point we choose a node r 1= sink which has currently no children  i.e.  no edges emanating from it . if there is no such node  the construction is complete.
¡¡for each assignment x to xr we create a  directed  edge ¦Ë from r with associated assignment xr = x   and define x¦Ë = xr  and set of variables u¦Ë = ur ¡È {xr}  and assignment u¦Ë to u¦Ë which is ur extended with assigningn x to xr. the semiring value ¦Á ¦Ë  is defined to be c c u¦Ë  where the semiring product is over all c ¡Ê c which are 'just instantiated'  i.e.  such that x¦Ë ¡Ê vc   u¦Ë.
¡¡if u¦Ë = v   so that all the variables have been instantiated  we connect the end of ¦Ë to sink. if ¦Á ¦Ë  = 1 we also set the end of ¦Ë to be sink. if ¦Á ¦Ë  1= 1  and we can find previously created node r1 such that u¦Ë and ur1 are forward neighbourhood interchangeable  this requires also u¦Ë = ur1   we set the end of ¦Ë to be r1. we call this 'merging'  since it corresponds to merging nodes in a decision tree. otherwise we create a new node r1  set ur1 = u¦Ë  ur1 = u¦Ë and choose some xr1 ¡Ê v   ur1. to aid future 'merging'  we also store with the node r1 the slices cur1  for active valuations c.
¡¡following a  directed  path thus corresponds to an assignment to a set of variables; also a complete assignment v ¡Ê d v   determines a complete path  i.e.  a  directed  path from source to sink  ¦Ðv  by following  from each node r  the edge associated with value v xr .
¡¡the semiring value ¦Á ¦Ð  associated with a path is the semiring product of the semiring values associated with eachn edge in the path  i.e.  ¦Ë¡Ê¦Ð ¦Á ¦Ë . this might be thought of as the cost of following path ¦Ð. for a-decision diagram s define the a-valuation cs by  for v ¡Ê d v    cs v  = ¦Á ¦Ðv . the sldd is said to represent a-valuation cs.
theorem 1 let a be a semiring and let c be a multiset c of a-valuations over variables v . let s be an a-decision dian gram s¡ý constructed as above. then= p¦Ð ¦Á ¦Ð   where the sum is over all completes represents c = c and c
paths in s.
¡¡in the next section it is shown how to compute such sums efficiently.
¡¡note that 'dynamic variable ordering' can be used  i.e.  the order of variables can differ between paths. we can also adapt constraint programming techniques to improve the efficiency. we can use propagation e.g.  maintaining arc consistency for the zeros  wilson  1 . furthermore  the sldd can  like a search tree  be generated in a depth-first fashion: this is natural when we're attempting to solve a csp; the construction can be terminated when a solution is found.
¡¡to facilitate merging  for partial tuple u we can represent the collection of slices {cu : c active} as a string ¦Ò u  of elements in the semiring. then  for u u1 ¡Ê d u   tuples u and u1 are forward neighbourhood interchangeable if and only if ¦Ò u  = ¦Ò u1 . for set of variables u  we can incrementally construct a trie  a tree of strings  storing each ¦Ò ur  for all nodes r with ur ¡Ê d u ; this enables efficient generation of each edge of the sldd. for valuations represented exten-p sionally  define size c  to be c¡Êc size c   where size c  is the cardinality of the scope of c multiplied by the number of non-zero tuples in c. an upper bound for the time needed to construct the sldd is then proportional to size c ¡Ásize s   where size s  is the number of edges of the sldd. in particular  if the size of the sldd is polynomial in n  for some parametrised family of problems depending on the number of variables n  then constructing the sldd is polynomial.
when is the sldd compact 
the crucial factor in the determining the efficiency of our approach is the size of the sldd; if the sldd is compact  then it can be efficiently constructed and the operations are efficient. the sldd will tend to be compact  compared to the associated search tree  in situations where many different partial instantiations lead to equivalent subproblems  and so a standard search-based technique would solve the same subproblem many times . there are many kinds of situations where the problem structure causes this to happen. 1
¡¡we give a class of examples to illustrate that the constructed semiring-labelled decision diagram can be compact  even if it represents an exponential number of non-zero complete assignments  e.g.  solutions of a csp . in these cases the size of the sldd is linear in the number of variables  whereas the size of the corresponding search tree is exponential.
example. let v = {x1 ... xn}  where the size of each domain is at most d. let c be a multiset of a-valuations  for some semiring a  such that the scope of each valuation involves variables which are at most p apart  where p is constant and fairly small : for all c ¡Ê c  max{i : xi ¡Ê vc}   min{i : xi ¡Ê vc} ¡Ü p. this might arise  for example  in a problem where there is a temporal component  with the index i related to time. we can generate an a-decision diagram using the fixed variable ordering x1 ... xn  i.e.  the variables appear in that order in all paths . let j be such that p ¡Ü j   n  and consider any assignments u and u1 to set of variables u = {x1 ... xj}. if u and u1 agree on their last p variables  i.e.  u xi  = u1 xi  for all i such that j   p   i ¡Ü j  then they are forward neighbourhood interchangeable  since for any active a-valuation c  u and u1 agree on the scope of c  so cu = cu1. this implies that the construction of the sldd will produce at most dp nodes at 'level' j  and an upper bound for the size of the sldd is hence ndp+1; this is linear in n  since d and p are constants. for the csp case  the number of solutions will often be exponential in n  and hence exponential in the size of the sldd. many operations  such as counting the number of solutions  or finding an optimal solution for more general semirings  see section 1  can be achieved in time linear in n  even though an exponential number of assignments are being reasoned about.
¡¡a similar argument leads to an upper bound on the size of the sldd of the same form  but in terms of pathwidth  bodlaender  1   for arbitrary multisets of semiring valuations.  a fixed variable ordering used to generate an sldd gives rise to a corresponding path decomposition. 
other examples. certain problems involving permutations can also lead to relatively compact sldds; for example  counting the number of linear orders which extend a given partial order  van dongen  1 . the structure of the problem ensures that the sldd decomposes the problem  similarly to a dynamic programming approach   reducing a factorial problem to an exponential one-which can be a huge reduction in time complexity  but at the cost of large space requirements. similar remarks apply to solving a rehearsal problem  csplib http://www.csplib.org/ problem number 1 . compact structures with a form similar to an sldd can also be used for enforcing generalised arc consistency for many forms of global constraints e.g.   pesant  1 .
1 propagation of semiring values in sldd
the purpose of this section is to show how to efficiently perform various technical computations in an sldd  in particular  the sum of the semiring values over  i  all complete paths   ii  all complete paths which pass through a particular node   iii  all complete paths which pass through a particular edge. the algorithms are immediate generalisations of a classic shortest path algorithm  and the application to the weighted csp semiring hin ¡È{1 ¡Þ} ¡Þ 1 min +i reduces to this shortest path algorithm .
¡¡suppose we have an a-decision diagram  with semiring a = ha 1 ¨’  i. we associate with each node r two semiring values f r  and g r   which are defined inductively. define f source  = 1  and  working forwards from source  for each r 1= source  define
m
	f r  =	 f r1    ¦Á r1 ¡ú r  .
r1¡úr
where the semiring summation is over all edges r1 which point to r. because the sldd is a directed acyclic graph with source being the unique parent-less node  this defines f r  for each r unambiguously. symmetrically  define gfor sinkr =1   =sink1  and  working backwards from  g r  = lr¡úr1 ¦Á r ¡ú r1   sinkg r1    define   where the semiring summation is over all edges r ¡ú r1 emanating from r. furthermore  for each node r and edge r ¡ú r1  de-
  and h r ¡ú r1  = f r    ¦Á r ¡ú
r     g r  .
proposition 1 let r be a node and let l¦Ë be an edge in the sldd. if r 1= source then f r  = ¦Ð ¦Á ¦Ð  where the semiring summation is over all paths ¦Ð from source to r. in particular  f sink  is the semiring sum of ¦Á ¦Ð  over all paths froml source to sink. similarly  if r 1= sink  g r  = ¦Ð ¦Á ¦Ð   where the semiring summation is over all paths froml r to sink. also  if r /¡Ê {source sink}  h r  = ¦Ð ¦Á ¦Ð  where the semiring sum of ¦Á ¦Ð  is over all complete paths passing through node r. furthermore  h ¦Ë  is equal to the semiring sum of ¦Á ¦Ð  over all complete paths which include the edge ¦Ë.
¡¡this proposition generalises proposition 1 of  amilhastre et al.  1   and the definitions of f and g are generalised forms of functions in definition 1 of  amilhastre et al.  1 .
¡¡note that the number of semiring operations needed to compute functions f  g and h is linear in the size of the sldd.
1 computations using an sldd
in this section we show how the sldd representation can be used to perform important computations: projections and finding optimal solutions. in  wilson  1  we also showed how the sldd can be used for randomly picking a solution of a csp with uniform probability  by using an algorithm with a very similar structure to that described below for finding an optimal solution . it is assumed that we have an sldd representation of a function c : d v   ¡ú a  based on a semiring a = ha 1 ¨’  i; we also assume that we have computed the associated functions f  g and h  as described in the last section.
1 performing projections
as mentioned above  computing the projection of the combination of a multiset of semiring valuations is important for many different applications. it gives what is called in  bistarelli et al.  1  the 'solution' of a semiring-based constraint problem  and can be used for generating implied soft constraints in an idempotent semiring-based csp  bistarelli et al.  1 . projecting to the empty set of variables can be used  for example  for computing the weight of the best solution in a weighted csp  or for counting solutions of a csp. projection to a singleton set determines the possible values of a variable for csps  and analogously for other semiringbased csps; for the bayesian network semiring it computes a marginal of the bayesian network.
¡¡the lemma below shows how the projection of c onto the empty set and to singleton sets can be computed efficiently. it follows easily from proposition 1.
lemma 1 suppose an a-decision diagram on set of variables v  with associated functions f  g and h  represents avaluation c. let x ¡Ê v be a variable  and x ¡Ê d x  be a value of x. then  i l c¡ý  = f sink  = g source ; and
 ii  c¡ý{x} x  = ¦Ë¡Ê¦«x h ¦Ë   where ¦«x is the set of edges associated with assignment x = x.
¡¡so to compute c¡ý{x} x  requires |¦«x|   1 semiring summations. to compute the projections onto every single variable  i.e.  computing c¡ý{x} x  for all variables x and all its values x  requires a semiring summation for each edge in the sldd  so can be computed in time linear in the size of the sldd.
adding unary semiring valuations. suppose we receive a
new set of semiring valuations  all of which are unary  i.e.  the scope of each is a single variable  which we want to combine with the previous combination c. it can be seen that the same graphical structure can be used  but where we just change the semiring values on the edges. this can be used for computing more general projections; it also has applications in in dynamic soft csps  amilhastre et al.  1   and for conditioning  and hence inference  in a bayesian network  and computing most probable explanations  pearl  1 .
1 finding optimal solutions
in this subsection we only consider semirings a = ha 1 ¨’  i with a special property: that for all ¦Á ¦Â ¡Ê a  either ¦Á ¨’ ¦Â = ¦Á or ¦Á ¨’ ¦Â = ¦Â. semirings a satisfying this property are said to satisfy the addition-is-max property.
we can then define a total order ¡Ý on a given by ¦Á ¡Ý ¦Â if and only if ¦Á ¨’ ¦Â = ¦Á. any valuation structure  as defined in definition 1 of  bistarelli et al.  1   gives rise to a semiring satisfying addition-is-max  by using the order relation to define ¨’  note that we are writing the order the opposite way round . hence the approach in this section applies to any valued csps  bistarelli et al.  1   including weighted csps  fuzzy csps and lexicographic csps  as valued csps can be represented as multisets of a-valuations where a satisfies addition-is-max.
¡¡complete assignment v ¡Ê d v   is defined to be optimal if c v  ¡Ý c v1  for all v1 ¡Ê d v  . this happens if and only if c v  = c¡ý . to generate any optimal complete assignment v ¡Ê d v   is very fast: linear in n  the number of variables: we start with node source as the current node  and iteratively pick a child of the current node  satisfying the following condition  until we reach sink: we pick any child r1 of current node r with maximum value of ¦Á ¦Ð  ¦Á r ¡ú r1  g r1   among children of r   where ¦Ð is the path chosen so far  from source to r. the associated complete assignment will be optimal  and conversely  any optimal complete assignment can be generated in this way.
¡¡if we are only interested in optimal solutions  we could eliminate each edge ¦Ë with h ¦Ë    c¡ý   by connecting such ¦Ë to sink and resetting ¦Á ¦Ë  to 1   since such an edge is not part of any optimal complete path. for certain additionis-max semirings  in particular  a fuzzy semiring with   equalling min  or alternatively  if   is strictly monotonic   the resulting network has the property that every complete path is optimal  ignoring edges ¦Ë with ¦Á ¦Ë  = 1 . this then gives considerable flexibility in generating optimal solutions in an interactive setting  such as guiding a user in solving a configuration problem.
1 discussion
as well as the representation of  amilhastre et al.  1   which they directly generalise  see section 1   sldds are related to several other computational approaches  including search-based approaches for solving csps  and join tree/hypertree-based decomposition methods  and and/or search graphs. we very briefly discuss these relationships below.
¡¡our construction of the sldd in section 1 is different from the way that the representation in  amilhastre et al.  1  is generated or similar representations such as binary decision diagrams  bryant  1  and that of  vempaty  1 . the latter involve building up the representation by adding the constraints incrementally  giving representations of subsets of the constraints. sldds could also be generated in a similar way; however  the construction in section 1 takes all the constraints  semiring valuations  into account at once. this can sometimes be advantageous; in particular  when searching for a single solution of a csp  the sldd need have time complexity at most polynomially worse than a standard csp search approach  such as chronological backtracking whilst maintaining arc consistency   whereas the experimental results of  pan and vardi  1  seem to suggest that a bdd approach can be exponentially worse than a search approach. sldds often have large storage requirements  but they can involve very much fewer nodes  and need never involve more nodes  than a search tree approach. as illustrated by the example in section 1  and by the application in  amilhastre et al.  1    certain problems with a very large number of solutions  i.e.  non-zero complete assignments  can have an sldd of manageable size  leading to efficient computation; a search-based method will often then not be feasible if one wants to compile the set of solutions  or count the number of solutions.
¡¡perhaps the most-studied general approach for this kind of problem is the join tree  or hypertree decomposition  approach  e.g.  the general framework of shenoy and shafer  shenoy and shafer  1  bucket elimination  dechter  1   and non-serial dynamic programming  bertele and brioschi  1 . whether a join tree approach or a decision diagram approach is more efficient depends very much on the form of the problem; a join tree approach may be more efficient if there is appropriate topological structure  but little structure which is more value-specific; a decision diagram approach looks liable to be more efficient if there is a good deal of value-specific structure  e.g.  of the form of 'contextspecific independence'  boutilier et al.  1   defined in a bayesian network context   leading to a compact decision diagram. see also discussion in  wilson  1 .
¡¡an sldd is similar in form to an or search graph  a special case of and/or search graphs in  dechter and mateescu  1 ; the latter are also closely related to the ddnnf formalism-see e.g.   darwiche  1   and casefactor diagrams  mcallester et al.  1 . sldds can be extended to also include and nodes; these can be used when the sliced constraints associated with a node can be partitioned into  e.g.  two  sets with non-overlapping scopes; there is no longer a unique final node sink  and the computation generalises that of function g  starting from the sink nodes and working backwards  with semiring product   being used to combine the semiring values of the branches of an and node. this sometimes leads to a still more compact representation  but with reduced functionality  as not all the techniques in section 1 extend .
summary
this paper introduces and develops semiring-labelled decision diagrams  sldds ; this computational tool  combining a form of dynamic programming with a constraint programming approach  can be used to solve a variety of important computational problems for  soft or ordinary  constraints and uncertainty. for problem instances with appropriate structure  the sldd will be compact  and hence be an efficient approach  for example  for solving constraints problems  optimisation  and knowledge compilation.
acknowledgements
i am grateful for valuable comments from the reviewers  in particular for the pathwidth bound  and barry o'sullivan  stefano bistarelli  greg provan  marc van dongen  gene freuder  barbara smith  peter stuckey  peter machale and  especially  alex ferguson. this material is based upon works supported by the science foundation ireland under grant no. 1/pi.1/c1.
references
 amilhastre et al.  1  j. amilhastre  h. fargier  and p. marquis. consistency restoration and explanations in dynamic csps-application to configuration. artificial intelligence  1  1.
 bellman  1  r. bellman.	dynamic programming.
princeton university press  1.
 bertele and brioschi  1  u. bertele and f. brioschi. nonserial dynamic programming. academic press  1.
 bistarelli et al.  1  s. bistarelli  u. montanari  and f. rossi. semiring-based constraint solving and optimization. journal of the acm  jacm   1 :1  1.
 bistarelli et al.  1  s. bistarelli  u. montanari  f. rossi  t. schiex  g. verfaillie  and h. fargier. semiring-based csps and valued csps: frameworks  properties and comparison. constraints  1   1.
 bistarelli et al.  1  s.	bistarelli 	u.	montanari 	and
f. rossi. soft concurrent constraint programming. in proc. 1th european symposium on programming  esop   lecture notes in computer science  lncs   pages 1. springer  1.
 bodlaender  1  hans l. bodlaender. a tourist guide through treewidth. acta cybernetica  1-1  1.
 boutilier et al.  1  c. boutilier  n. friedman  m. goldszmidt  and d. koller. context-specific independence in bayesian networks. in proc. uai1  pages 1  1.
 bryant  1  r. e. bryant. graph-based algorithms for boolean function manipulation. ieee transactions on computers  1 :1  1.
 bryant  1  r. e. bryant. binary decision diagrams and beyond: enabling technologies for formal verification. in proceedings of the 1 ieee/acm international conference on computer-aided design  pages 1  1.
 darwiche  1  a. darwiche. a logical approach to factoring belief networks. in proc. kr1  pages 1  1.
 dechter and mateescu  1  r. dechter and r. mateescu. mixtures of deterministic-probabilistic networks and their and/or search space. in proceedings of uai1  1.
 dechter  1  r. dechter. bucket elimination: a unifying framework for reasoning. artificial intelligence  1  1.
 freuder  1  e. c. freuder. eliminating interchangeable values in constraint satisfaction problems. in proc. aaai1  pages 1  1.
 mcallester et al.  1  d. mcallester  m. collins  and f. pereira. case-factor diagrams for structured probabilistic modeling. in proceedings of uai1  1.
 pan and vardi  1  g. pan and m. vardi. search vs. symbolic techniques in satisfiability solving. in proc. sat 1  1.
 pearl  1  j. pearl. probabilistic reasoning in intelligent systems: networks of plausible inference. morgan kaufmann publishers inc.  1.
 pesant  1  g. pesant. a regular language membership constraint for finite sequence of variables. in principles and practice of constraint programming - cp 1  pages 1  1.
 shenoy and shafer  1  p. p. shenoy and g. shafer. axioms for probability and belief function propagation. in uncertainty in artificial intelligence 1  pages 1  1.
 van dongen  1  m. van dongen. computing the frequency of partial orders. in principles and practice of constraint programming - cp 1  pages 1  1.
 vempaty  1  n. r. vempaty. solving constraint satisfaction problems using finite state automata. in proc. aaai1  pages 1  1.
 wilson  1  n. wilson. decision diagrams for the computation of semiring valuations. in proc. 1th international workshop on p