 
in constraint satisfaction problems  csps  values belonging to variable domains should be completely known before the constraint propagation process starts. in many applications  however  the acquisition of domain values is a computational expensive process or some domain values could not be available at the beginning of the computation. for this purpose  we introduce an interactive constraint satisfaction problem  icsp  model as extension of the widely used csp model. the variable domain values can be acquired when needed during the resolution process by means of interactive constraints  which retrieve  possibly consistent  information. experimental results on randomly generated csps and for 1d object recognition show the effectiveness of the proposed approach. 
1 	introduction 
the constraint satisfaction problem  csp  formalization has been widely used within artificial intelligence and related areas. a csp is defined on a finite set of variables each ranging on a finite domain of objects of arbitrary type and a set of constraints. a solution to a csp is an assignment of values to variables which satisfies all the constraints. propagation algorithms   e.g.  forward checking  look ahead  have been proposed in order to reduce the search space. 
　a basic hypothesis for a csp model is that variable domain values are completely specified at the beginning of the constraint propagation process. we can consider the problem solving activity as the result of the cooperation of two software components  depicted in figure 1 : a generator of domain values gen and a constraint solver cs. the classical csp formalization leads to a sequential use of this architecture  where gen produces all domain values and the cs module processes constrained data. the generation or the acquisition of variable domain values should be completed before the constraints on variables are imposed and propagated. 
1 	constraint satisfaction 　however  in many applications the acquisition of domain values is a computational expensive process. thus  it is not convenient to acquire all domain values  but a pipelined behaviour is preferable. take  for example  a visual system as gen module. the acquisition of visual features  such as segments and surfaces  as domain values for the cs is a computational expensive task. in other applications  not all values are available at the beginning of the computation. thus  it is not possible to acquire all the domain values at the beginning of the* computation. suppose we are processing an image representing a box of possibly overlapped pieces that a 
　robot should handle one by one. we have no information on occluded pieces  and thus on the corresponding visual features  until the robot has picked up the emerging pieces occluding the underlying ones. 
　we argue that interleaving the generation/acquisition of domain values and their processing could greatly increase the performances of the problem solving strategy in some cases  and can be the only way of processing in presence of unknown information. domain values acquisition can be performed on demand only when values are effectively needed or available  as previously suggested by sergot in  ll  in the logic programming setting. 
　furthermore  in many applications the gen module is able to focus its attention on significant domain values  i.e.  domain values satisfying some properties  or even provide consistent values when guided by means of constraints which we call interactive constraints. 
　for tins purpose  the classical csp model should be extended in order to  i  cope with partially or fully unknown variable domains;  ii  dynamically acquire domain values on demand while the constraint propagation process is in progress;  iii  drive the domain value acquisition by means of interactive constraints;  iv  incrementally process new information without restarting a constraint propagation process from scratch each time new information is available. the resulting framework has been called interactive constraint satisfaction problem  icsp  model. 
　in this paper  we present the icsp model and corresponding propagation algorithms based on the forward checking  fc   and minimal forward checking  mfc   which we call respectively interactive for-


figure 1: two modules architecture 
ward checking  1fc  and interactive minimal forward checking  imfc . if the gen module is able to focus on significant domain values or even to provide consistent values when guided by constraints  on average the number of acquisition greatly decreases with respect; to the standard case. otherwise  we have the same number of data acquisition of the standard case. 
1 	the icsp model 
in this section  we first recall some csp-related concepts. 
then  we present the interactive constraint satisfaction framework. we focus on binary csps. a binary csp is a tuple  v d c  where v is a finite set of variables ranging on domains of objects of arbitrary 
we call  the domain 
is a finite set of constraints on pairs of vari-
ables in v. a constraint c on variables  and  i.e.   defines a subset of the cartesian product of variable domains  representing sets of possible assignments of values to variables. a solution to a csp is an assignment of values to variables which satisfies all the constraints. a constraint c on variables is 
satisfied by a pair of values  
　we now extend the csp definition in order to allow constrained variables to range on partially or completely unknown domains. 
definition 1 an interactive domain of a variable  
is a set  of possible values which 
can be assigned to that variable. we refer to knoum.j as the list of values representing the known domain part  and to vnknown  as a variable 
representing a list of not yet available values for variable declaratwely  the association of a domain to a variable 	holds iff 
both known  and un known  can be possibly empty lists1. also  for each i  the intersection of known  and unknmvn  is empty: this follows from the fact that the interactive domain is a set. 
　　the interactive domain of variable  can be either completely known  e.g  =  1 1   or only partially known  e.g.   =   where  i s a variable 
1 when both are empty an inconsistency arises. representing a list of values which will be eventually retrieved in the future if needed  or completely unknown  

　the notion of interactive domains has some similarities with the concept of streams  widely used for communication purposes in concurrent prolog. a stream is a communication channel which can be assigned to a term that contains a message and an additional variable. from this perspective  interactive domains represent communication channels between the gen module and the cs module. the unknown part of the domain contains a message  one retrieved value  and an additional variable for future acquisitions. 
　the strength of the interactive approach concerns the fact that the cs module can guide knowledge acquisition  i.e.  the gen module  by means of constraints  called interactive constraints  and incrementally process new 
information without restarting a constraint propagation process from scratch each time new values are available. with no loss of generality  we define binary interactive constraints. 
definition 1 an interactive binary constraint c on variables  and  i.e.   defines a possi-
bly partially known subset of the cartesian product of variable interactive domains  representing sets of possible assignments of values to variables. declaratively  given the domains of 
the constraint 
definition 1 a binary interactive csp  icsp  is a tuple  v d c  where v is a finite set of variables 
 d is set of interactive domains and c is a set of interactive  binary  constraints. a solution to the icsp is an assignment of values to variables which is consistent with constraints. 
1 	search strategies 
in this section  we define the interactive forward checking and the interactive minimal forward checking pro-
cedures. with no loss of generality  both the algorithms start  by considering an icsp where all variables range on a completely unknown domain  i.e.  no value is available1 for any variable. thus  all variables initially range on a completely unknown domain  and are chosen in the following instantiation order:  the current variable  is the variable to be instantiated and  is its current interactive domain. we refer to future connected variables to  as the ordered subset of 
　　1 with an abuse of notation  we impose the constraint c on variables representing a list. for the sake of readability  we have omitted the definition of a new variable on which constraints should be imposed. 
	lamma et al. 	1 

procedure ifc var  	domain   
begin for all 
begin l-label i ; 
　　i-propagation-acquisition i future connected-vars ; end; 
end; 
figure 1: the ifc algorithm 
procedure i-label i ; begin known i  := known dornain i  ; % known part of var i  
unknown i  := unknown domain i  ; % unknown part of var i  if unknown var i  domain is fully unknown then begin 
collect all unary constraints c on var i ; impose c on unknown i ; acquire one val i c ; 
end; 
if known i  =  then fail; 
else begin % now known i  is surely defined 
select a value vi from known i   
assign end; 
end; 
figure 1: the labeling procedure 
 containing those variables linked to by 
means of a constraint. 
1 	interactive forward checking 
in standard csps  the forward checking strategy  interleaves a labeling step which instantiates variable to a value in its domain with a constraint propagation process. this second step removes from the domains of future connected variables values which are not consistent with  
　the interactive version of the fc  figure 1  is divided in two steps as well. a labeling move is used to find an instantiation for the current variable  and a propagation/acquisition step is used to remove  already acquired  values inconsistent with the current labeling  or to acquire new consistent values. 
　　the labeling step  called i-label  figure 1   takes as input the index of the variable to be instantiated and either selects a value in its known domain part if it exists  or retrieves one value for consistent with the unary constraints on i-label then assigns  
　the propagation/acquisition step  figure 1  takes as input the index of the current variable and the set of future connected variables. for each future connected variable  a classical fc propagation step is performed in order to remove inconsistent values if the domain of  is known. otherwise  an acquisition is performed in 
order to retrieve all the values consistent with v. after the acquisition  the domain of  is completely known. 
　the main difference with the classical fc algorithm is achieved if the gen module is able to be guided by means of constraints in order to retrieve consistent values. for instance  in a visual recognition system  l   constraints exploiting some form of locality  such as touches  x1 x 1  where x1 and x1 are segments  could 
1 	constraint satisfaction 
procedure l-propagation-acquisition i futurejconnected.vars ; begin for each  in futurexonnected-vars do begin 
known j  := known domain j  ; unknownp  :=: unknown domain j  ; 
if known j  = 
then begin for each  in known j  do 

else begin 
impose constraints on unknown  j  acquire all values  unknown  j   
end; 
end ; 
and  
figure 1: the propagation algorithm 
guide the knowledge acquisition in order to let the gen module to focus only on semantically significant image parts. if this capability could be exploited  the number of data acquisition performed by ifc is significantly smaller than those performed by fc. 
1 	interactive minimal forward checking 
in the previous section  we have described the ifc algorithm which performs  when needed  the acquisition of all domain values consistent with a given assignment. 
　as argued in   a more efficient algorithm finds and maintains only one consistent value in the domain of each future variable  suspending forward checks until other values are required by the search. in the interactive version of the mfc we retrieve only one value for each future connected variable  consistent with a given assignment. in addition  we impose new constraints on the unknown part of the domain for eventual future acquisitions. the algorithm is the same as the one described in figure 1. the i-propagation-acquisition step reported in figure 1 is different from the ifc since we acquire only one value by the gen module and produce constraints on the unknown domain parts which will be used in backtracking for acquiring further values. posing new constraints on the variables representing the unknown domain parts is a crucial point in our framework that allows newly acquired data to be processed without starting the constraint propagation process from scratch each time new values are available. 
　　as an example  consider the constraint where variable 	is instantiated to 1 and the domain of variable 	completely unknown  i.e.   when 
the constraint is checked  a knowledge acquisition is performed for x1. suppose that value 1 is retrieved. the domain of x1 becomes  and on a set of constraints is imposed  stating that and 
 these constraints are taken into account if value 1 is removed from the domain of during constraint propagation. in this case  another consistent value for  is retrieved satisfying the imposed constraints on x''1. 

procedure i-propagation-acquisition i futurexonnected.var1 ; begin for each var j in future coiinected.vars do begin 
known j  := known domain j  ; % contains at most one value unknown j  := unknown don ain j  ; if known  j  = vj 
then begin if not consistent  vi vj  then begin remove vj from known j ; irnpo1e constraints on unknownfj ; acquire one..value  unknown  j  ; 
end; 
else impose-c.onstraints on unknown j  
else begin % the domain of varj is fully unknown 
impose constraints on unknown j  acquire one value  unknown  j   end; 
end ; 
end; 
figure 1: the imfc propagation 
1 	heuristics 
one important issue is the ordering in which variables are labelled and the ordering in which values are assigned to each variable. decisions in these orderings significantly affect the efficiency of the search strategy. 
　as concerns variable selection  a widely used csp heuristics  called first fail principle  selects first the variable with the smallest domain. when coping with partially or fully unknowrn domains  we cannot know in advance how many values will be contained in the domain. thus  we partially disable variable selection heuristics which depend on domain size. a general criterion which can be followed in the interactive framework tends to minimize knowledge acquisitions. thus  we first select variables with a completely known domain and among those  then partially known variables  and finally  completely unknown variables. 
　as concerns the domain value choice  the only heuristic used concerns the selection of a value belonging to the known part of a domain before the selection of the unknown part that results in an unguided knowledge acquisition. 
1 experimental results 
in order to test icsp algorithms  we performed a series of experiments based on randomly generated csps. each csp is defined by a 1-tuple  where n is the number of variables  m is the size of every domain  p is the probability that a binary constraint is imposed on a pair of variables  constraint density   and q is the conditional probability that two values in a constraint are consistent. 
　we consider both the number of constraint checks performed by the high-level system and the number of constraint checks performed by the low-level system during interaction. each time a single value is requested for one variable domain  function acquire one.value   first we check if an already acquired value is consistent w.r.t. the interactive constraints  and we count the number of 

figure 1: constraint check ratio fc/1fc 

figure 1: constraint check ratio mfc/imfc 
constraint checks needed ; if the element is not found we perform acquisition. 
　figure 1 shows the ratio of the number of constraint checks performed by fc and by ifc  the higher the bars  the better is the interactive1 approach . the test was performed generating a number of problems with n - 1  d = 1  and varying ;  and q. each bar is calculated on the average of 1 problems. 
　we can see that the number of constraint checks performed by ifc is always less than plain fc and is considerably lower when the constraint tightness is high  i.e.  low values of q . this depends on the fact that  when binding a variable  the ifc algorithm acquires only the values consistent with constraints  so  if the constraint is tight  only few acquisitions will be performed. 
analogous considerations can be done for minimal 
forward checking algorithm: as the constraint tightness grows  the interactive approach outperforms the non interactive one. 
　since in most applications the value extraction is usually the most expensive task  the comparison based on the number of extracted values is more significant than a comparison based on constraint checks. in figure 1 we show the percentage of extracted elements for the imfc algorithm in problems generated with n = 1  d - 1  varying p and q from 1% to 1%. we can see that in more than half of the cases the number of extracted elements is less than 1% of the number of elements extracted by csp methods. the number of acquired values is very low if the constraints are tight  as every interactive constraint will acquire only few values and this will 
	lamma et al. 	1 


figure 1: ifc percentage of extracted elements. 

figure 1: imfc percentage of extracted elements. 
be enough to demonstrate that the whole problem is inconsistent. 
　the number of acquisitions is higher in ifc  because it extracts all values consistent with an interactive constraint  figure 1 . the displayed graph is quite similar to that in figure 1  but shows a higher number of acquisitions when q grows. if almost every value in a domain is consistent w.r.t. the interactive constraints  then it is likely that every acquisition will lead to a full extraction  i.e. every acquisition will extract nearly all the d values which can be assigned to a given variable. 
1 	1d visual object recognition 
in this section  we show some results obtained in 1d object recognition by using the icsp framework  . we model 1d objects by means of constraint graphs: nodes represent object parts  say surfaces  and constraints geometric and topological relations among them. a graph representation of object models has been used in many different contexts of 1d shapes   and extended to the 1d scene recognition  . solving the 1d object recognition problem as a standard csp involves the extraction from the image of all surfaces which are put in variable domains then  we have to find an assignment of surfaces to variables satisfying all 
1 	constraint satisfaction 
constraints. 
　the csp-based approach for object recognition suffers of a severe limitation in term of efficiency when applied to real vision applications: surface extraction is a time consuming step working on range images. thus  useless acquisitions should be avoided and the adoption of icsp leads to a significant performance improvement  the icsp-based recognition executes the following steps:  i  the constraint solver queries the low-level image processing system for retrieving an unconstrained surface  si ;  ii  the interacting constraint propagation starts  and whenever a variable domain is not known  new variable values satisfying constraints are requested. in this case  the gen module is able to acquire visual features being guided by spatial constraints such as get..surface touching xi  so that only adjacent surfaces to xi are directly computed. this improves the icsp performances since variable domains turn to be smaller and  more important  the visual system focusses only on significant image parts. thus  the guided interaction prevents the low-level system from acquiring many useless surfaces. 
　several tests are performed on a specific data-base of range images: we have1 created a modified version of the washington state university database  by assembling several images in order to obtain new ones containing many different possibly overlapped objects. 
image icsp csp speedup b l  1  * 1 1 1 b.1  1  * 1 1 1 b 1  1  1 1 1 b.1  1  1 1 1 b 1  1  * 1 1 1 b 1  1  1 1 1 b 1  1  1 1 1 b 1  1 * 1 1 1 b 1  1  1 1 1 table 1: computational results 
　results in table 1 refer to a database of 1 images and describe the time  in seconds  spent for extracting the first 1d object with an l-shape: the csp and the icsp approaches are compared. some images  marked with *  do not contain the object. in those cases the whole image has been explored and all surfaces computed for both approaches. when all the surfaces are extracted in the image  the performance gain using an interactive approach is not particularly high  in one case the icsp is even slower since it uses more check points : nevertheless  in images containing the modelled 1d object  a speedup ranging between 1 to 1 has been obtained. 
1 	related work 
the general idea that in many applications it is both unreasonable and unrealistic to force the user to provide in advance all information required to solve the problem was argued by sergot  ll  who proposed an extension of prolog allowing interaction with the user. from an algorithmic perspective  our starting points are the fc  

and the mfc  algorithms. they have been extended with the notion of interaction between a constraint solver and a low level module producing constrained data to be processed. 
　dynamic constraint satisfaction  dcs   is a field of ai taking into account dynamic changes of the constraint store such as the addition  deletion of values and constraints. the difference between dcs and our approach concerns the way of handling these changes. dcs approaches propagate constraints as if they work in a closed world. dcs solvers record the dependencies between constraints and the corresponding propagation in proper data structures so as to tackle modifications of the constraint store. in this perspective  we also cope with changes in the sense that the acquisition of new variable values can be seen as a modification of the constraint store. however  we work in an open world where domains are left opened thanks to their unknown part. unknown domain parts intensionally represent future acquisition  i.e.  future changes. thus  the propagation we perform is less powerful than that performed by dynamic approaches  but we do not need to store additional information for restoring the constraint store consistency as done by dcs approaches. 
　other related approaches concern constraint-based reactive systems . reactive programs are programs that react with their environment  are usually stateful  and have to make decisions before their consequences are known. they interleave information accumulation and decision making activities. also in our approach data acquisition and its processing are interleaved. however  in reactive programs the constraint solver computes a solution for a given set of  incrementally added  variables starting from an already committed system state. thus  the computation of a single query is performed with no interaction with the  gen  system. in our approach  instead  interactions between the system  the* gen module  and the constraint solver take place during the execution of a single query. 
　as a final remark  in the field of programming languages  concurrent constraint programming  represents a framework which is based on the notions of consistency and entailment for computing with partial information. computation emerges from the interaction of concurrently executing agents communicating by means of constraints on shared variables. in a sense  the work on concurrent constraint programming concentrates on the algorithms without paying attention to the semantics of the external world. with our approach we add this semantics. concurrent constraint programming can be used as an effective language for implementing the interactive constraint solver. 
1 	conclusion and future work 
we have presented a model for interactive csp which can be used when data on the domain is not completely known at the beginning of the computation  but can be dynamically acquired on demand by a low level system. 
more important  it is used in order to guide the search by generating new constraints at each  step. we have implemented the framework by extending the ecltsc clp fd  library. we have shown results on randomly generated csps and in the field of 1d object recognition. 
　future work concerns the extension of other constraint propagation algorithms  like arc-consistency  to the interactive case. in addition  we are investigating other fields such as planning and user interfaces which could benefit from the proposed approach. 
acknowledgements 
this work has been partially supported by murst project  on  intelligent agents: interaction and knowledge1 acquisition . 
