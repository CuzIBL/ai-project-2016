 
we present a new knowledge representation and reasoning framework for modeling nonlinear dynamical systems. the goals of this framework are to smoothly incorporate varying levels of domain knowledge and to tailor the reasoning methods - and hence the search space - accordingly. our solution exploits generalized physical networks  gpn   a rneta-level representation of idealized two-terminal elements  together with a hierarchy of qualitative and quantitative analysis tools  to produce a dynamic modeling domain whose complexity naturally adapts to the amount of available information about the target system. 
1 	introduction 
system identification  sid  is the process of identifying a dynamic model of an unknown system. the topic of this paper is a new knowledge representation and reasoning  krr  framework that makes it possible to automate this kind of analysis. the challenges involved are significant. applications in different fields of science and engineering demand different kinds of models and modeling techniques. large aerospace structures  for example  usually have a variety of inputs  wind speed  engine thrust  and turbulence  and outputs  velocity  stress and strain indicators from wing sensors  etc.  and are described by partial differential equations; a simple electrical circuit  on the other hand  may have a single current source as an input and a voltmeter as an output  and can be described by an ordinary differential equation  ode . any representation designed for reasoning about models of such systems has to be both flexible enough to handle various degrees of uncertainty and complexity  and yet powerful enough to deal with situations in which the input signal may or may not be controllable. 
system identification entails two steps  as shown in 
fig. 1: structural identification  wherein one ascer-
   * supported by nsf nyi ccr-1  onr n1-1  and a packard fellowship in science and engineering from the david and lucile packard foundation. 

 tains the general form of the model  e.g.  the ode  for a simple pendulum   and then 
parameter estimation  in which one finds specific parameter values for the unknown coefficients that fit that model to the observed data 
both steps depend upon input-output analysis casdagli  1   wherein the relationship between drive and response is used to infer useful information about internal system dynamics. for nonlinear systems  parameter estimation is difficult and structural identification is even harder; ai techniques can be used to automate the former  bradley et a/.  1   but the latter has  until now  remained the purview of human experts. 
　a central problem in any automated modeling task is that model complexity - and hence the size of the search space - is exponential in the number of model fragments unless severe restrictions are placed on the modelbuilding process. ideally  one would like to build blackbox models using general reasoning techniques that applied to any system and did not require any domain knowledge about the system under examination. the combinatorics of the generate phase make this an unrealistic paradigm. a useful alternative is gray-box modeling  where the  box  is not completely opaque and information about its internals can used to prune the search space down to a reasonable size. some automated modeling tools  for example  maintain a library of typical components for a particular domain and build models by trying out various combinations of those primitives capelo 
easley and bradley 	1 
et al  1 . this approach is useful in relatively simple 
domains where the relationship between idealized modeling components and actual physical components is well known. most ai modeling work has taken a clear-box modeling approach  in which one knows almost everything about what one is trying to model. the goal of the work described in this paper is to develop a krr framework that supports automated modeling in a range of gray shades that is useful to practicing engineers. 
　the key to making gray-box modeling of nonlinear dynamical systems practical is a flexible knowledge representation scheme that adapts to the domain generality. domain-dependent knowledge can reduce search-space size  but its applicability is fundamentally limited; the challenge in balancing these influences is to be able to determine  at every point in the reasoning procedure  what knowledge is  1  applicable and  1  useful. knowledge that a particular input voltage controls an output frequency  for instance  allows one to reason more effectively about manipulating that voltage to learn more about the system. 
　the solution proposed here combines a representation that allows for different levels of domain knowledge  a set of reasoning techniques appropriate to each level  and a control strategy that invokes the right technique at the right time. in particular  we combine ideas from generalized physical nefcworjcs sanford  1   a meta-level representation of idealized two-terminal elements  with traditional compositional model building falkenhainer and forbus  1  and qualitative reasoning  weld and de kleer  1 . the intent is to bridge the gap between highly specific krr frameworks that work well in a single  limited domain  e.g.  a spring/dashpot vocabulary for modeling simple mechanical systems  and abstract frameworks that rely heavily upon general mathematical formalisms at the expense of having huge search spaces  bradley and stolle  1 . the generalized physical network  gpn  representation is an effective way to construct a description that is appropriate to a wide range of points on this spectrum  and thus it provides a useful bridge between general and specific modeling approaches. 
1 	generalized physical networks 
in the late 1s and early 1s  inspired by the realization that the principles underlying newton's third law and kirchhoff's current law were identical1  researchers began combining multi-port methods from a number of engineering fields into a generalized engineering domain with prototypical components  pay nter  1 . the basis of this generalized physical networks  gpn  paradigm is that the behavior of an ideal two-terminal element the  component  - may be described by a mathematical relationship between two dependent variables: generalized flow and generalized effort  where flow  t  * effort t  -
　　1  summation of {forces  currents} at a point is zero  respectively; both are manifestations of the conservation of energy. 
1 	qualitative reasoning and diagnosis 
power t . this pair of variables manifests differently in each domain: {flow  effort  is {current  voltage  in an electrical domain and {force  velocity  in a mechanical domain1. one of the strengths of the gpn representation is that it brings out similarities between components and properties in different domains. electrical resistors {v = ir  and mechanical dampers {v = fb  are analogous  as both dissipate energy. similar relationships exist for generalized inertia  capacitance  flow  and effort source components  as shown in table 1; see  karnopp et al  1  or  sanford  1  for mechanical rotational  
hydraulic  and thermal domains. relationships also exist for pairs of mutually coupled two-terminal elements  such as electrical transformers or differential gears  in which a flow or effort in one element induces a flow or effort in the other. components may be connected in the standard network-theoretic ways - parallel  serial  star  delta  etc. - and the network topology need not be planar. 

table 1: example component representations. 
utilizing a small number of these primitive elements  
gpns can effectively model systems in a wide variety of domains; moreover  they make it very easy to incorporate varying amounts of information about those domains. a gpn-based modeling domain consists of a set of components and a set of connection primitives   connectors  ; a gpn model is a specific instance of connected components - e.g.  a series connection of an inertia  a resistor  and a capacitor - represented by an incidence matrix. the same gpn model can be abstract and general or highly specific  depending on how much one knows about the domain. both of the networks in fig. 1  for example  can be modeled by a series inertia/resistor/capacitor gpn; knowledge that the system is electronic or mechanical would let one refine the model accordingly. the available domain knowledge  then  can be viewed as a lens that expands upon the internals of some gpn components  selectively sharpening the model in appropriate and useful ways. 
　there are a variety of ways to use generalized physical networks to help automate the structural identification phase of the sid process. one could  for example  create a library of all known components  enumerate all possible component combinations/configurations  and test each member of this succession until a valid model is 
　　1 in bond graphs karnopp et a/.  1   another generalized representation paradigm  velocity is a flow variable and force is an effort variable. the difference between gpns and bond graphs is only a frame-of-reference shift. 


figure 1: two systems that are described by the same gpn model:  a  a series rlc circuit  b  a mass-springdamper system. v is a voltage source in  a  and is a velocity source in  b . 
found. this method is obviously impractical  as simple enumeration creates an exponential search space - a severe problem if the component library is large  as must be the case if one is attempting to model nonlinear systems1. a more-intelligent idea is to use a hierarchy of domain-dependent and -independent knowledge to direct the search  as described in the following section. 
1 	reasoning with gpns 
the gpn representation  as described in the previous section  is an effective basis for a dynamic modeling domain whose complexity naturally rises and falls according to the available information about the target system. a general domain - e.g.  {all dynamical systems  - has a complex search space; a specific domain like {conservative mechanical systems  has a much smaller one. the challenge in reasoning about gpn models is to tailor the reasoning to the knowledge level in such a way as to prune the search space to the minimum. organizing domains into a hierarchy of generality - e.g.  { dynamical systems  electromechanical systems  mechanical systems  conservative mechanical systems  ...} - is not enough; what is needed is a hierarchical set of analysis tools  as well as a means for assessing the situation and choosing the appropriate tool. 
　naively speaking  the goal is to start with a  plausible  model and then move through the space in a  reasonable  fashion. the key to doing so is to classify model and system behavior at an appropriate qualitative level. the order of an ode  for instance  contains some useful high-level information about its behavior  and that kind of simple symbolic information can be used to remove huge branches from the search space. sometimes  however  pruning a single leaf off the search tree requires expensive operations like point-by-point comparisons of ode solutions to sensor data sets. orchestrating this process efficiently is a difficult problem; its solution requires powerful machinery like theorem-provers and declarative meta-level control stolle and bradley  1 . the generality of any behavior classification tool is also 
　　1 noniinear terms are somewhat idiosyncratic  and each must be supplied as a separate library entry. this issue has not arisen in previous work on gpns because their use has been generally confined to linear systems. 
affected by the domain of the target system; phaseportrait and time-series analysis apply to all odes  for instance  but transient analysis designed to detect  irrecoverable viscous deformation  is only meaningful for viscoelastic systems. 
　the krr framework described in this paper is designed to exploit domain knowledge in order to navigate effectively through the search space of ode models. the basic idea is that different reasoning techniques are appropriate to different domains  and the key to the solution is that the gpn component type and domain knowledge dictate which one to use. table 1 shows part of the hierarchy of analysis tools that we have implemented. the top category is the broadest and most general. lin-

table 1: component type and domain knowledge dictate what analysis tools apply. tools higher in this table are more general but their results are less detailed. 
ear systems are a subset of nonlinear systems; restricted linear systems - which use distributed parameters to model systems in very specific physical domains1 -- are  in turn  subsets of linear systems. analysis tools that apply to any of these groups obviously apply to its subsets as well. all of the nonlinear systems tools listed in table 1 work with the phase-space representation. cell-to-cell mappinglhsu  1  is a geometric reasoning technique that classifies a phase portrait qualitatively using simple discretized heuristics. delay-coordinate embedding sauer et al  1  lets one infer the dimension and topology of the internal system dynamics from a time series measured by a single output sensor. nonlinear time-series analysis is a blanket term for classification that follows the {attractors  bifurcations  
. . .} ontology of nonlinear dynamic s strogatz  1 . linear systems analysis refers to the techniques taught to undergraduate engineers  step/frequency response  etc. . analysis tools for restricted linear systems e.g.  creep testing - are highly domain-specific. 
　reasoning about models proceeds in the obvious manner  given this hierarchy: if no domain knowledge about the target system is available  i.e.  the true  black-box  situation   then models are constructed  analyzed  and compared to the target system using general reasoning techniques that apply to al odes. constructing models in this highly general manner is difficult  as there is no domain knowledge to limit the search  but it is also uni-
1
e.g. modeling electrical transmission-line loss through se-
ries connections of multiple rc circuits; see section 1 for an example in the viscoelastic domain. 
	easley and bradley 	1 

versally applicable. if the system is known to be linear  the extensive and powerful repertoire of linear analysis tools developed over the last several decades makes the task far less imposing. among other things  system inputs  drive terms  in linear systems appear verbatim in the resulting system ode  which makes input/output analysis much easier. in restricted linear domains  analysis tools are even more specific and powerful. in viscoelastics  for example  three qualitative properties of a  strain test  reduce the search space of possible models to linear. 
　given all of this machinery  we build models as follows. first  a candidate gpn model is constructed using a basic subset of the components and connectors of a particular domain. this process is guided by the analysis tools in table 1. the cohort of nonlinear tools  for example  is first applied to the sensor data to determine the dimension d of the dynamics; this fact allows the modeling tool to automatically disregard all models of order  d. we have currently implemented roughly a dozen other nonlinear analysis techniques that yield similar search-space reductions; if the system is linear  several dozen more tools apply as well. knowledge that the target system is oscillating  for example  not only constrains the model to be of least second order  but also implies some constraints on its coefficients. if this reduced search space does not contain a model that matches the observed system behavior  the gpn modeling domain is dynamically expanded to include more esoteric components. for example  if all models in the {linear-inductor  linear-resistor} domain are rejected  then the domain might be expanded to include linear-capacitors. once a successful gpn network is found  the final step in the model-building process is to convert it into ode format  as described in the following section. 
1 	converting gpns to odes 
the last stage in the system identification process is to convert the domain-independent gpn model into ode form. this conversion step is fairly easy to automate. the powerful network-theoretic principles involved have been in the engineering vernacular for many decades  but we use them in a very different manner. traditionally  one applies a tool like modified nodal analysis1 to a known network with known component values in order to analyze or simulate its behavior. we use loop and node equations to convert a gpn network with unspecified component values into an ode  also with unspecified component values . finally  we use a nonlinear parameter estimator  bradley et a/.  1  to find component values that match that ode model to the observed system behavior. in this section  we describe how this procedure works for the electronics domain; the process is effectively identical in other domains. 
　the gpn- ode algorithm is similar to standard system analysis: create a set of loop or node equations  substitute physical component models into those equations  
1
which is based on node equations 
1 	qualitative reasoning and diagnosis 
and then simplify/change variables as necessary. this algorithm is significantly simpler than a comparable bond graph- ode conversion algorithm  since a bond graph algorithm creates implicit causal orderings as it creates the set of odes. 
algorithm: 
1. use generalized kirchhofts current law - {flows into a node} = 1 - to identify / independent branch currents  / = b -  n - 1   where b is the number of branches and n is the number of nodes in the network. branch independence is guaranteed by choosing each successive loop such that it traverses one and only one branch that is not part of an existing loop. the branches of a depth-first search tree of the network form one such set. 
1. use generalized kirchhofts voltage law - around a loop} = 1 - around each of the / closed 
loops identified in step 1  yielding i system equations. 
1. apply the correct effort/flow relationships  from table 1  to every element in the / loops from step 1  creating a set of odes. 
1. use variable substitution and/or symbolic differentiation to remove integrating elements as necessary. 
　as an example  consider a gpn modeling domain that allows parallel and serial connections of linear resistors  r   inductors  l   and nonlinear active resistors  nr  that obey the constitutive relation 
midway through the procedure  after the modeler has tried and rejected a variety of too-simple models  we might see the candidate model shown in fig. 1. since 

figure 1: an electronics example. 
b - 1 and n - 1  two loops are required. these are chosen automatically from the branches of a depth-first spanning tree. and    as shown  are one possibility; 
and a loop through 	are another. using gen-
eralized kvl around these two loops and substituting the given component models yields: 

the last step is to pass this set of independent system equations in the two state variables  to the parameter estimator for comparison with observed behavior and determination of the unknown coefficients l1 r  

etc. if the model fails this check  the modeling tool first tries to reconfigure it  e.g. moving l1 to be in series with nr instead of r   and eventually gives up and expands the modeling domain  e.g. including linear capacitors . this generate-and-test process continues until a valid model is found. 
　this technique may initially appear to be a simulation/diagnostic tool for a system whose structure is completely known  but it is really much more abstract and adaptable. the krr framework lets the modeling tool work with general gpn components as long as possible: up until the point when it converts the network into a set of odes. the relationships between component models and actual components of a physical system are a wholly separate data structure. 
　this approach has several important limitations and restrictions. among other things  these models do not explicitly represent causality relationships information that is very important for diagnostic tasks or automated explanation tools  but less so for system identification. the algorithm described above can also create extra system equations and variables; it may  for instance  construct a large resistive network when a single thevenin equivalent would do. one can solve this problem using resistive network reduction mauss and neumann  1 ; we avoid it from the outset by building models in a sequential fashion and not adding like components in serial or parallel. other meta-level representational schemes  such as bond graphs  solve these problems automatically  but gpns are more expressive and more widely applicable  as well as easier to implement and use. 
　as is true of automated modeling in general  evaluating the results of this approach can be difficult because the question  how is this model better   is hard to formalize. from an engineering standpoint  a successful model is one that matches observed behavior to within predefined specifications. fret  the automated modeling tool in which these ideas are instantiated  is designed to be an engineer's tool  so its judgement of what constitutes success or failure is exactly that. parsimony is another desireable attribute in a model: one wishes to account for the observed behavior using as few and as simple - odes terms as possible. defining good metrics for model fragment simplicity is deceptively difficult  and it remains an open problem in automated modeling community. finally  the speed with which pret produces such a model is another important metric  particularly as we work with more-complex systems and search spaces. ultimately  the best form of evaluation will consist of whether or not fret's models are useful for control system design - that is  whether the ode that pret constructs of a radio-controlled car can actually be used as the heart of a controller designed to direct that car to perform some prescribed action. we are in the process of evaluating models of real-world systems in several domains - ranging from robotics to hydrology - in this manner. 
1 	related work 
much of the pioneering work in the qualitative reasoning  qr  modeling community focuses on reasoning about pre-existing models: simulating them kuipers  1   simplifying and refining them weld  1   or keeping track of which model is appropriate in which regime addanki et a/.  1   qr model construction research has focused on building models from fragments falkenhainer and forbus  1; bobrow et a/.  1; williams and nayak  1; capelo et a/.  1 . the work described in this paper uses some of the same techniques  but it has different goals and a different overall approach: it works with noisy  incomplete sensor data from real-world systems and attempts not to  discover  the underlying physics  but rather to find the simplest ode that can account for the given observations. 
　of all the qr modeling work cited in the previous paragraph   capelo et al.  1  is the most closely related to this paper. capelo et al. build ode models of linear viscoelastic systems by evaluating time series using qualitative reasoning techniques  and then use a parameter estimator to match the resulting model with a given system. this domain is limited - a  restricted linear system   in our terminology - and fairly simple; it involves only two component types  linear springs and dashpots   connected in series and/or parallel. the specific nature of the domain naturally limits the search space  so a simple qualitative pre-processing step can be used to identify the system as one of only four different model types. the system described in this paper is much more general; it works on all linear and nonlinear lumped-parameter continuous-time odes and uses dynamic model generation to handle arbitrary devices and connection topologies in multiple domains.  indeed  one of the domains that we have implemented is {viscoelastic systems}.  
　the representation most closely related to gpns is the bond graph karnopp et a/.  1 . in the qr. literature  bond graphs have been used primarily for reasoning about causality  top and akkerrnans  1  and modeling hybrid systems  mosterman and biswas  1 . an important exception to this is amsterdam's work on automated model construction in multiple physical domains amsterdam  1   which uses bond graphs to model linear systems of order two or less. while bond graphs are a good alternative to generalized physical networks especially if causality issues are a concern - converting them into ode models is difficult  which makes them less useful for the kinds of complex nonlinear modeling tasks that we address in this paper. 
1 	conclusions and future work 
generalized physical networks  coupled with a hierarchy of qualitative and quantitative reasoning tools that relate observed physical behavior and model form  provide the flexibility required for gray-box modeling of nonlinear dynamical systems. this type of reasoning  wherein the modeling tool has only partial knowledge of the in-
	easley and bradley 	1 

ternals of the target system  accurately reflects the abstraction levels and reasoning processes used effectively by human engineers during the modeling procedure. the krr framework described in this paper allows automated modeling tools to reason effectively with varying levels of domain knowledge - about different domains and at different levels of abstraction in an individual domain. the gpn component representation adapts naturally to the information available about the target system  allowing for the creation of dynamic modeling domains. detailed knowledge automatically reduces the search space of models and triggers powerful  specialized reasoning techniques that are appropriate for that situation; in the absence of such knowledge  the system falls back on broadly applicable domain-independent principles to navigate through an exponential search space. 
　besides speeding model generation  this krr framework streamlines reasoning about the relationship between input sources and output responses. we are currently working on automating this kind of reasoning  using gpns to represent sensors and actuators explicitly with the goal of automatically performing experiments on unknown systems. we are also investigating model fragments and model complexity. our domain libraries currently include linear components and some simple nonlinear ones; if the modeling task calls for a morecomplicated device  we first query the user and then resort to power-series expansions. once we have experimented with more nonlinear svstems in more domains  we may augment our libraries  and it may be useful to organize them in hierarchies  e.g. one linear spring as a starting point  with a simple nonlinear spring as an alternative  and more-complicated devices further down the hierarchy . 
acknowledgments: reinhard stolle  joe iwanski  
apollo hogan  and brian lamacchia also contributed code and/or ideas to this project  and the i.jcai reviewers1 comments helped focus the content of this paper. 
