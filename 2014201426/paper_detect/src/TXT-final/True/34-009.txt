 
we describe a theorem-prove r  called t k p 1   which is based on a gentzen-type formal system  1 . t k p 1 can directly deal with functionals and the composition of functionals  it comprises the fixed point operator and a kind of facility for induction. let us attempt to prove p f x  y   for 
f x y  such that f x  y  	provided 
that p f x y   can be obtained from p f f n  x y   n = 1  1   1   . . .   tkp 1 automatically gives the induction hypothesis p   fn  x  y    and then prove p fn-1'  x y  . it. can efficiently make proving procedure for properties of recursive programs. we can supply assumptions and definitions at w i l l . t k p 1 displays an easily read proof-figure. 
key words 
lisp  automatic theorem proving  inductions  proving programs correct  fixed point operation  gent/en-type formal system  composition of functional  infinitely long expression. 
in order to prove these sequents we may use the mathematical induction. 
f i r s t   we prove f¡ã x  -  g. next f n-1  x  - g is tried to prove under the induction hypothesis f n  x  -  g. 
because tkp 1 can directly deal with the c o m position of functionals and provides a kind of facility of fixed point operator and induction  t k p 1 can efficiently process the proofs for properties of recursive programs. as t k p 1 is developed as the cut-less system  it can easily decompose a theorem to be proved into some subtheorems. and it accomplished the proofs of most problems described in  1   and moreover  acceding to u s e r ' s demands  assumptions and definitions are acceptable by t k p 1  and it displays the proof-figure in a plain form after problems are proved. in section 1  we shall explain the outline of the formal system and in 1 describe the formal system  the way to prove the problem shall be explained in 1. the outline of implementation is given in 1. in 1 we discuss some improvements and its future applications of t k p 1. 

	1. 	introduction 
many methods for proving theorems about programs have been studied.   1      etc.  some of them are works on the fixed point operator  1   . we have tried an implementation of an automatic theorem proving system  called t k p 1  tsukuba-keio prover no. 1   which is based on a gentzen-type formal system representing the properties of functions  1 . the plausibility and the completeness of this system are certified by the monotonic functional interpretation   1. moreover  the cut-elimination theorem  1  holds in this system. the basic expressions of this system are functionals and composition of functionals  wherein the usual logical formula is a kind of functional. connectives between functionals are decomposed in a way s i m i lar to logical connectives. besides  the system includes the operator for infinitary sum  from which we can apply the fixed point operator in this system. let us consider to prove in this case the following sequents must oe proved. 

	1. 	outline of formal system 
now we shall briefly explain our system  which is mainly based on 1 valued logic. the underlying formal system is given in   and it can be interpreted by monotonic functionals. the plausibility and the completeness can be certified in a way similar to . 
let f and g be functions of the type ¦Á- ¦Â and ¦Â-  y respectively. we denote the composition of f and 
g by 
           f- g  f- g x =g f x    if f and g are compatible and of the same type  the join of f and g is denoted by 
fvg 
a formula p may have the value true  i  or false 
 let the function  always have the value and the function i the value i. then a formula p can be considered as functions and i according that they have values  and i respectively. and the expression pg has the value g if p is true and  if p is false. 
let us consider the following expression if p  x  then y else f x  the value of this expression is y if p x  is true. 

1 

and is f x  if p x  is false. 	we can represent this by the following composition. 

where 	p x  denotes the negation of p x . 
next  we consider the program 

this can be represented by 
where 
and 
when a and b are formulas  we can consider that the composition a 	b means 'a and b'   because 
the similar 
method concerning i and 	is shown in  1 . 
similarly the join avb beans *a or b '   because 

the program 
will show the same result 
this represented by the expression of the form 

which is called a sequent. ' f - g' means that g is an extension of f. in the 1-valued case  for formulas a and b  *a   b' means that a implies b  and so is identical with a-* b in gentzen's original form  1j. 
now  we shall consider the following recursive definition of the function f  of type a . 
	f x y  = if 	p x  t h e n 	y 	else h f k x  y   

it is well known that f can be defined as the least fixed point j/o f  'o    denoted by dl   if we introduce the following function f of the type a - a 1 . 

on the other hand the function g of the same type as f is defined by 

in order to prove that f is the same function as g  it is sufficient to show the following two sequents: 

we shall use the first of these to illustrate the proving procedure of our theorem prover discussed in 1. as is shown in the following section  rules of inference will be given symmetrically for the left hand side and the right hand side of -* . 
	1. 	the formal system 
here  we describe simply the axioms and rules of inference. the meanings of most symbols employed here have been briefly explained in the previous section . herein we use greek capital letters  r   a etc.   to represent a finite set of functionals such as f    f tm  . in miner's l c f system uoj      m in both sides denotes the conjunction. in our system     in the left hand side of ¡ö+ represents the conjunction and      in the right side denotes the disjunction. a proof-figure is a tree constructed by sequents  in which every uppermost sequent is an axiom and upper sequents and a lower sequent are connected by a rule of inference. 
1. 1 	axioms 
in general  various assumptions are acceptable by t k p 1 as axioms  however  we establish our system using only logical axioms as the most basic ones. 
logical axioms are sequents of the following f o r m . 

1. 1 	rules of inference 
1. 1. 1 	rules of replacement 
 1  i f   fl  and can be replaced by f  the converse also hold. 
 1  f and f can be replaced by  the con verse also holds. 
 1  a n d c a n be replaced by $ and i respectively  the converse also holds. 
 1  
also holds. 
 1  if 1  occurs in the left hand side of a sequent  then the left side can be replaced by * and $ in the right can be omitted. 
1. 1. 1 	rules of inference with respect to logical connectives 


1 

f r o m the compatibility of these rules of inference are reasonable. 

where g is an arbitrary functional of the same type as h  and p  g/h  denotes the result obtained by replacing h for g. 
1. 	proving procedure of tkp 1 and its e x a m p l e 
in this section  we illustrate the theorem prover based on the formal system which is described in the previous section. 
1 	illustrative example 
we shall illustrate the proving procedure of t k p 1 by giving the proof of the following example : 

as described in the previous section  f and g 
can be defined by the series of formulas : 

moreover  we shall use the symbols 
1. 1. 1 
and verified. 
1 


 1-1  and the result obtained by the replacement of fn with g n in  1. 1   where this r e placement is possible according to the hypothesis  1. 1   have no logical connectives and do not match to definitions and assumptions  1. 1  ~  1. 1  and  1. 1 . therefore tkp 1 fails to prove  1-1   and it must backtrack to  1. 1 . now it attempts to prove 

1. 1 	application of rules of inference 
f i r s t   t k p 1 examines whether the same expres sion exists in both sides of a sequent or not and whether an undefined element exists in the left hand side of a sequent or not. if there exists a same expression in both sides or w in the left hand side in a sequent  the sequent is provable. if a 
sequent is not provable and includes some logical connectives  t k p 1 transforms it according to the top level logical connectives in the left and right hand side of the sequent. we shall show the transformation rules. in these 

1 

of inference and is not provable  t k p 1 attempts to apply assumptions and definitions which are given by the user to the sequent. in applications of assumptions and definitions  a pattern-matching facility is required. in matching processes for assumptions and definitions  t k p 1 first tries to make assumptions match and then definitions afterwards. when an assumption matches two or more subexpressions of a sequent  it first applies to the innermost expression contained in the leftmost t e r m . if an assumption  or a definition  matches a subexpression  then the right part of the assumption  or the definition  is substituted for the subexpression. the prover tries to prove each new sequent. when t k p 1 can not prove any new sequent  it will try to apply the next assumption  or definition  to the old sequent. if a sequent transformed by an assumption  or a defprover and viaualizer. these are successively executed. problems in input form are read by the translator of t k p 1 and are translated into internal forms which can be easily manipulated by the prover. when the prover succeeds in proving the given problems  the prover puts proof trees in s - expression form into an auxiliary memory. finally the visualizer receives these proof trees and displays the proof figures in printed form. 
1. 1 	input f o r m of tkp 1 
inition  is the same form as a sequent which already of the example of 1. 1  inputs for t k p 1 are as appeared in the proving process  it is considered follows. 
1 
 1  
 1  
 1  
	1. 	i m p l e m e n t a t i o n using the example of 1. 1  let us explain the input form of t k p 1. 	inputs for t k p 1 are assumptions  definitions and a sequent to be proved. 	each of assumption  definition and a sequent is called a statement  and any set of statements which contains a sequent is called a problem. 	in the case 

1. 1 	t k p 1 and klisp 
our program  called t k p 1  is written in klisp  keio llst processor  language which is a subset of lisp 1    1   . klisp interpreter on tosbac 1  1 bits/word  1k words  has about 1k cells of free list. as it has glisp system which translates programs in m - expression into s - expression  so we have written t k p 1 in m - expression. 
t k p 1 consists of three phases ; 	translator  
if the prover cannot prove a problem  no proof trees are generated. when it fails to prove the problem  the t r i a l process to prove this is always displayed. 
when a proof tree is generated  the prover constructs a proof tree and puts it into an auxiliary memory. 
visualizer translates this tree to a proof figure using the structure of stairs corresponding to the level of sequent in the proof tree. an example of the proof figure will be shown in the appendix. the detailed g r a m m e r of the input form and trans-

1 

	lation rules are described in   	 	gentzen  g.  untersuchungen uber das 
logische schliesenl  i i     math  zeitschr 1  1  pp. 1 - 1  pp. 1 - 1. 
	1. 	conclusions 
                                                                1  hewitt  c. description and theoretical many computer programs to prove theorems about analysis  using schemata  of planner : programs have been implemented{ l    1  etc. . a language for proving theorems and one of the main features of our theorem prover is manipulating models in a robot   ph. d. based on a gentzen - type formal system. most thesis  m i t   cambridge  massachusetts  significant features of tkp 1 are the following ; 1. 
 1  since cut operation is not required in our formal system  t k p 1 can be implemented as a  1  iwamaru  y .   nagata  m.   nakanishi  m. fully automatic theorem prover.  1  the fixed and nishimura  t.  implementation of point operator can be decomposed as it is a gentzen - type formal system representlogical operator.  1  an induction hypothesis ing properties of functions    comment. is automatically generated.  1  t k p 1 performs math. univ. st. pauli  1 - 1  1  
	a part 	of course-of-values induction  1 . 	a 	pp. 1 - 1  
gentzen - type theorem prover which has the facility to display proof figures is very useful to  king  j. c.  a program verifier   p h . d . show readable and understundable proof proce- thesis  carnegie - mellon university  dures. if we make an interactive theorem prover  pittsburgh   pennsylvania  1. 
this feature is very powerful. the other feature involves using an inductive method and fixed point  1  kleene  s.c.  introduction to metamathemattheorem. some programs using induction meth- ics   d. van nostrand company  inc.  ods have been already studied  1  .1   in our princeton  new jersey  1. 
prover  propositions to be proved are not r e stricted by a particular programming language.  manna  z.   ness  s. and vuilliemin  j. providing assumptions and definitions to this  inductive methods for proving properties prover  results in a large generality and flexi- of p r o g r a m s     proceedings of an acm bility with our program. in spite of the ability conference on proving assertions about 
	to prove all examples described in  1   our formal 	programs  	new mexico state university  
system and our theorem prover are quite concise  new mexico  january 1 - 1   1  pp. 1 - 1. namely  1k cells are available for the prover and 
	data. 	 1  	mccarthy  j .   et al.    lisp 1. 1 p r o g r a m -
considering the facts described above  we sum- m e r ' s manual   mit press  cambridge  marize here some future aspects of the study of massachusetts  1. 
our program and formal system. 
 milner  r.  implementation and applications 
 1  the program can be extended to accept a of scott's logic for computable functions   
kind of dynamic assumptions  e.g.   procedu-
proceedings of an acm conferences on' 
r a l assumptions  1 . 
proving assertions about programs  
 1  it may be anticipated that this prover should 	new mexico state univ.   new mexico  contain useful algebraic theorems  and theo-	january 1 - 1   1  pp. 1 - 1. 
rems which are unuseful should be automat-
ically deleted from the system.  1  m o r r i s   j . h .  another recursion induction theorems prepared should be selected ac- principle    cacm  vol. 1  no. 1  cording to user 1 s requirements. 1  pp. 1 - 1. 
 1  we concider that our theorem prover will 
	 1  nakanishi  m. 	 klisp reference manual 
have more extensive applications when pro-
 revised version    keio institute of 
vided with an interactive facilities. 
information science  keio univ.   yokohama  1  in japanese . 
