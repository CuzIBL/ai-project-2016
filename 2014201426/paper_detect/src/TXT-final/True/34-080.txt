 
　　　the problem base structure for purposeful systems is considered. it cones out that predicate calculus is rather unwieldy for this purpose; semantic nets should be preferred. the main attention is paid to the convenience in representation of descriptive and operational information in the form of universal item  concept  in order to obtain natural and straightforward means for simulation of discrete and continuous processes  to provide proper interaction between them. the wide use of concept hierarchy is proposed. a single universal operator is introduced: the instantiation of concepts. the material is presented in informal way. 
key words 
　　　problem solving  purposeful systems  data base  representation of knowledge  models of the world  semantic net  concept formation. 
introduction 
　　　the notion of purposeful system seems to be a fundamental one in the f i eld of machine intelligence. consider a certain integrated model structure r e f l e cting some pertinent properties of the physical world. one or more substructures are singled out representing active subjects. some fixed configuration of the integrated structure is called a state. the structure can change along with time  so we must deal with a set of states. an i n i t i a l state is fixed. in some or other way the goal state is characterized. certain states are prohibited. the problem is to plan the behaviour of the active subjects  and then to execute the plan bringing the whole system in one of the goal states avoiding the prohibited ones and satisfying the given restrictions on time and resourses. the situation is really more complicated: we postulate the incomplete knowledge about the system. it results in so to say spontaneous changes of its state which cannot be predicted by the planning system. then  not a l l active subjects axe liable to our control  some of them may represent natural processes  seasonal changes during the year  eruption of volcanoes  snow-slips  etc.  or represent subjects being under control of some other system  or systems . at last  it is pragmatically more useful to investigate the behaviour of the large system. in this case we must abandon the hopes to obtain the true optimal solut i o n . 
       we are going to study an a r t i f i c i al system represented in the form of computer software which is able to act purposefully in the foregoing sense  and external operational mode of which resembles the behaviour patterns of natural intelligence. the a r t i f i c i a l system w i l l not copy its neurophysiologies! processes; though some undoubted facts or emp i r i c a l l y useful hypotheses obtained by the students of the living brain can be profitably taken into account during s i mulation. the creator of computer model has a possibility to organize its data base and operational sections in accordance with peculiarities of hard- and software at his disposal. it seems more appropriate to use the term  machine i n telligence  instead of   a r t i f i c i a l i n t e l ligence  in this case. 
       apparently  the everyday reasoning problems w i l l suit us a l l right at the beginning stage of the investigation. 
       there is no doubt that success in development of purposeful systems rather generally defined above w i l l strongly stimulate the growth of effectiveness in many applications: natural language i n teraction with computer  cai  control systems for integrated autonomous robots  models of large enterprises  etc. 
known approaches 
       the development of purposeful systems  ps  attracts attention of researchers for a long time. the term  general problem solver  was coined by newell  shaw  and simon in 1    and since then ideas layed in its foundation were refind  improved during the decade and used in many implementations. j.mccarthy  1  proposed developing of universal programs with common sense having the flexible strategy which can be e f f e c t i vely improved during the interaction with human creator  advice tajeer . a number of important considerations cun be found in  1j. a unique approach to the droblem under discussion was evolved and deployed during efforts headed by u.klykov  d.pospelov and their colleagues; the results obtained can be found m  m 
       starting from 1 the progress in the art of purposeful systems design had been tied with the development of special programming languages for ai research 

1 

  c.hewitt   1j  . the power of t h i s approach had been convincingly demonstrated by t.winograd  1j   the use of pure mechanical theorem proving technique in psarea is handicapped with serious p r a c t i cal l i m i t a t i o n s . the successful combinat i o n of theorem proving with the philosophy of gps f1  along with many important mechanisms such as generalization of plans was evolved in sri  1j . among the most interesting recently issued papers is that of e.sacerdoti  1l. a series of important results was obtained by the r e search group under r.f.simmons in the u n i v e r s i t y of texas. it includes the invest i g a t i o n carried out by g.hendrix which resulted in recommendations concerning the modelling of simultaneous interactive processes including the processes with continuous changes of model parameters. 
       the works mentioned above appreciably influenced the shaping of our approach. 
the problem description language 
　　　it seems reasonable to express a l l useful findings in ps-area in the form of special ps-oriented language. apparently it is the most effective way to generalit y . next follows the discussion of the main premises f o r problem base construct i o n of such a language. 
　　　information about the physical world n a t u r a l l y f a l l s i n t o two categoriest desc r i p t i v e and operational. the former declares names  properties and relations between objects specifying the model with names of properties and relations being predicates and that of objects-constants and variables. operational part of the system changes a model. it results in del e t i o n of some clauses and addition of some others. s i t u a t i o n can become even more complicated: the system can be acted upon by several operators concurrently; some can e f f e c t in gradual changes of values f o r various numeric objects. a s e r i es of operators can be under the control of planning system  others can be provoked 
by uncontrollable factors or be i n i t i a t e d by systems-competitors. besides operators can have complex causative bonds. 
　　　a l l t h i s aroses serious doubts in the p r a c t i c a b i l i t y of the f i r s t order p r e d i cate calculus f o r description of such systems. moreover  when the t r a n s i t i o n is 
performed from the semantic net represent a t i o n to the uniform set of clauses being the problem base f o r resolution-type theorem provers  one can notice that some important information fades away. it is the non-homogeneous structure of semantic net which is associated w i t h i t s objects. this organisation of data naturally provides straightforward acquisition of r e levant sentences t i e d in contexts  discovering links between various contexts and the goal directed transformation of t h e i r content. the greater p r a c t i c a b i l i t y of semantic nets was also emphasized e a r l i e r by r.f.simmons  1j. 
　　　it seems reasonable to abandon the uniformity and formal elegance of logic in behalf of f l e x i b l e universal programming language. this language must allow the manipulation of complex data s t r u c t u res and provide the convenient f a c i l i t i e s f o r procedural embedding of semantics i n herent in the processes being simulated. trying to draw the expressive means of the language to those  hypothetically  used by humans one ought to work out u n i form  or at least s i m i l a r   format f o r des c r i p t i v e and operational information. at last the fundamental r e l a t i o n s   such as sub-  superconcepts  cause-effect and time must simply and naturally be i n t e r preted by the system* 
　　　experimental heuristics oriented l a nguage f o r purposeful systems simulation  heops  was decided to embed in lisp 1 paying the t r i b u t e to i t s u n i v e r s a l i t y   laconism and complex data structures a l lowed. the concept classes hierarchy and time synchronization f o r processes in 
heops is borrowed substantially from simula . 
the systems problem base 
　　　the problem base of the heops i n c l u des two basic parts: declarative section and operational space. declarative sect i o n includes the d e f i n i t i o n s of a l l concepts and relations currently e x i s t i n g in the system. in the operational space is  builded  the i n i t i a l s i t u a t i o n f o r a g i ven problem. i t s solution coprises sever a l transformations through the applicat i o n of the sole operation:   i n s t a n t i a t e   one or other d e f i n i t i o n from the declarat i v e section. the boundary between the two sections is rather conventional: it is allowed to transfer non-instantiated d e f i n i t i o n s from declarative to o p e r a t i onal p a r t i one can imagine the inverse too: synthesis of some new d e f i n i t i o n in the operational space which is followed by i t s transfer to the declarative s e c t i on f o r f u r t h e r use. 
　　　two types of objects are l i a b l e to declaration: relations and concepts. 
declaration of relations 
　　　i t i s i n s t r u c t i v e t o think about r e lations as arcs of semantic net. however the number of t h e i r arguments not necessary equals to two. extra arguments play the role of r e l a t i o n modifiers. thus  l e t a and b be two nodes. the r e l a t i o n  dis-
tance a b i  means:  the distance is def i n e d between objects designated by the names a and b  and t h i s distance equals to x . it is convenient in computer to gather a l l r e l a t i o n s of the semantic net having i d e n t i c a l f i r s t arguments and p l a ce them on the property l i s t of the corresponding node  deleting i t s name from the e x p l i c i t forms of the r e l a t i o n s . 
1 　　　when the declaration of some r e l a t i on is interpreted the relevant i n f o r m a t i on defining the semantics of the given 
relation is put on the property l i s t of the choosen relation name in the form of traditional property-value pairs: 
　　　- the number and also the necessary properties for arguments of the relation are specified. in the foregoing example a and b should be physical bodies  and x-a number. 
　　　- the pointer to the  superrelation  is inserted. thus  the predicate sat can have as i t s superrelation the predicate communicate. 
　　　- the pointer may be inserted to the l i s t of  subrelations  currently existing in the system. the predicate communicate thus can contain in i t s subrelations1 l i s t : say  write  suggest  hint  etc. 
declaration of concepts 
　　　concepts are the main object type in the heops. declared are classes of concepts. each class gets i t s name  for example  room  monkey  get  approach  etc. 
　　　in class declaration generally are included: 
1. semantic net of applicability  application pattern   probably  with pointers to super- and subconcepta. 
1. activation pattern. 
1. operational section. 1 delete-list. 
1 add-list. 
1 recomputetion formulae. 
1 notice-list. 
1. passivation pattern. 1. suppression pattern. 
　　　such classes usually represent a process. the class with sections 1 absent is called assertional and represents simple or compound entity-the part of semantic net with some set of nodes and relations between them. 
　　　the nodes used in declarations f a l l into one of the following categories: 
　　　p: - free node of simple type: during instantiation can be replaced with own  terminal  or classified node. 
　　　g: - free node of generic type; not disappear when instantiated  but produces moreover the f i n i t e set of nodes  f:-type  each of which can be further instantiated. 
　　　t: - terminal node; i t s semantics comprises solely i t s name  it cannot have any other properties and cannot be further instantiated. 
　　　c: - classified node  i.e. the node having i t s class declaration in the system  when instantiated requires pattern matching upon existing net. 
instantiation of concepts 
　　　the f i r s t argument of the aforementioned operation of instantiation is the name of concept declared  dynamically  earlier. the second argument is the l i s t of instantiation parameters. thus  the concept monkey can obtain after instantiation the fixed name  specific location in some room; it can have some object in i t s hands. it can even start moving at once if in its class declaration the appropriate operational section is present. 
　　　during instantiation the application pattern of the given concept is matched upon the current configuration of the operational space: explicitly-through instantiation parameters and implicitly- upon the nodes and arcs of the currently existing semantic net. the relevant i n formation is choosen in this case by the concept body i t s e l f . instantiation resul t s in the new state of the operational space with new concept  implanted  there. 
otherwise inapplicability is indicated. the more interesting mode of operation results in the sequence of recursive cal l s for instantiation of some other concepts in order to eliminate the discrepancies found. this process is guided mainly by special pointers extant in declarations and relating some relations with concepts responsible for their o r i g i n a t i on  support  or removal. 
　　　operational information is reflected in the proposed problem base in two ways: in ready to use procedural form as operational section  1  of concept class declaration  and as a so called possibility hint. in the later case in the applicabil i t y pattern  1   add-list  1  of class declaration  or somewhere in the semantic net of the operational space are inserted nodes-reflections of certain conceptsprocesses. thus the node monkey can be linked with possibility node move  probably with some restrictions on the extent of mobility  say  remaining on some solid surface . this means that the monkey c a n move. in order for it really to move the concept corresponding to this node of the net must be instantiated using the declaration of move. 
instantiation can be done p a r t i a l l y : 
i.e. implanted concept can retain some of i t s free nodes. as for example  during the process of getting bananas in the well known ai problem  it may turn out that the distance between the monkey and bananas can be diminished if the monkey w i l l be standing on s o m e t h i n g rising 
above the floor. the node designating this  something  remains free u n t i l it eventually becomes instantiated t o   say  a box if the later is available. 
time dependency 
1 　　　time and cause-effect bonds deserve special discussion. in heops it is planned to use the sequence l i s t akin to that introduced in simula  1. recomputation formulae  1  are used in class declarations in order to f i x the crucial moments of time. the notice-list  1  contains the pointers to the instantiated concepts 
in the o p e r a t i o n a l space which must be a c t i v a t e d a f t e r f u l f i l m e n t o f c e r t a i n cond i t i o n s . the p r o v i s i o n of s p e c i a l machinery f o r process i n t e r c e p t i o n a t a r b i t r a r y moment w i t h r e t u r n t o the a r b i t r a r y c o n t i n u a t i o n p o i n t i s not planned. i n s t e ad the processing of concepts   a l s o quas i p a r a l l e l processes'  is arranged so t h a t e x i t and reentrance are done in p r e c p e c i f i e d p o i n t s ; s p e c i a l p r o v i s i o n s must b e used t o r e t a i n the c o n t e x t s ' v a l u e . 
super- and subconcept r e l a t i o n s 
　　　during t h e i n s t a n t i a t i o n process the need in c e r t a i n more general r e l a t i o n s can a r i s e . each i n s t a n t i a t e d node in the semantic net has a p o i n t e r to i t s class name. for example  the s p e c i f i c monkey named cheetah remains to be a monkey h a v i n g a l l i t s p r o p e r t i e s . a monkey is a subconcept of animal  and the f a c t t h a t any animal needs f o o d need not be repeat e d f o r a l l subconcepts o f the concept animal. an appeal to more general concep t s proved u s e f u l in some s i t u a t i o n can be f i x e d in i n s t a n t i a t e d subconcept as 
e x p l i c i t 	a d d i t i o n t o the semantic n e t . 
conclusion 
　　　o r g a n i z a t i o n a l p r i n c i p l e s o f the heofs language problem base f o r s i m u l a t i on of p u r p o s e f u l systems  i n f o r m a l l y d i s cussed i n t h i s paper  w i l l b e s p e c i f i e d more a c c u r a t e l y in f u t u r e . under c u r r e n t c o n s i d e r a t i o n are a l s o the p r i n c i p l e s of i t s computer implementation. i n p a r t i c u l a r   we are faced w i t h working out the e f f i c i e n t methods f o r c o n t e x t s 1 bookkeep i n g t o h o l d the nodes' values a f t e r i n s t a n t i a t i o n and p r e s e r v i n g the convenient access to the h i e r a r c h y of concepts. one o f the c r u c i a l p o i n t s i n f u t u r e i n v e s t i g a t i o n s w i l l b e the r e a l i z a t i o n o f e f f e c t i v e b o o t s t r a p p i n g procedure f o r the s y s tem b o t h i n d e s c r i p t i v e and o p e r a t i o n a l aspects. this process can be regarded as system's l e a r n i n g in one of the most i m -
p o r t a n t mode: 	a l g o r i t h m i c e v o l u t i o n . 
　　　the s i m u l a t i o n of the system is b e i n g done on hesm-1 computer w i t h diapack os. the host language is lisp 1  1  which is r u n under telelisp monitor s y s tem implemented in the i n s t i t u t e of mathem a t i c s   s i b e r i a n br. acad. s c i . ussr  p r o v i d e d w i t h archives and t e x t e d i t o r which make it p o s s i b l e to i n t e r a c t w i t h the machine from d i s t a n t t e r m i n a l . 
