
adding symmetry breaking constraints is one of the oldest ways of breaking variable symmetries for csps. for instance  it is well known that all the symmetries for the pigeon hole problem can be removed by ordering the variables. we have generalized this result to all csps where the variables are subject to an all different constraint. in such case it is possible to remove all variable symmetries with a partial ordering of the variables. we show how this partial ordering can be automatically computed using computational group theory  cgt . we further show that partial orders can be safely used together with the ge-tree method of  roney-dougal et al.  1 . experiments show the efficiency of our method.
1 introduction
a symmetry for a constraint satisfaction problem  csp  is a mapping of the csp onto itself that preserves its structure as well as its solutions. if a csp has some symmetries  it may be the case that all symmetrical variants of every dead end encountered during the search must be explored before a solution can be found. even if the problem is easy to solve  all symmetrical variants of a solution are also solutions  and listing all of them may just be impossible in practice. those observations have triggered a lot of interest for the detection and removal of symmetries in the constraint programming community. adding symmetry breaking constraints is one of the oldest ways of breaking variable symmetries for  csps . for instance  it is shown in  crawford et al.  1  that all variable symmetries could be broken by adding one lexicographical ordering constraint per symmetry. unfortunately  this method is not tractable in general  as there may be an exponential number of symmetries. it has been shown that in general there is no way to break all symmetries of a problem with a polynomial number of constraints roy and luks  1 . in  flener et al.  1   a linear number of constraints are used to break symmetries for matrix problems. as expected  since there are a polynomial number of constraints  not all symmetries are broken. however  a polynomial number of constraints may be sufficient for breaking all symmetries in some special cases. for instance  in  puget  1   it is shown that a linear number of constraints can break all symmetries for the pigeon hole problem: one simply needs to order the variables. in this paper we consider a more general class of problems: all different problems. these are csps such that the variables are subject to an all different constraint among other constraints. we show in section 1 that for such csps  all variable symmetries can be broken with at most n   1 binary constraints  where n is the number of variables.
﹛in  roney-dougal et al.  1  a general purpose method for breaking all value symmetries is given: the ge-tree method. we show in section 1 that this method can be safely combined with symmetry breaking constraints  under some conditions on the order in which the search tree is traversed.
﹛in section 1  we apply our method to some complex csps. we summarize our findings and discuss some possible generalizations in section 1.
1 symmetries  graphs and csps
the symmetries we consider are permutations  i.e. one to one mappings  bijections  from a finite set onto itself. without loss of generality  we can consider permutations of in  where in is the set of integers ranging from 1 to n   1. for instance  we can label the variables of a graph with integers  such that any variable symmetry is completely described by a permutation of the labels of its variables. this is formalized as follows.
1 computational group theory
let sn be the set of all permutations of the set in. the image of i by the permutation 考 is denoted i考. a permutation 考 ﹋ sn is fully described by the vector  1考 1考 ...  n 1 考 . the product of two permutations 考 and 牟 is defined by i 考牟  =
 i考 牟.
﹛given i ﹋ in and a permutation group g   sn  the orbit of i in g  denoted ig  is the set of elements to which i can be mapped to by an element of g:
ig = {i考|考 ﹋ g}
﹛given i ﹋ in and a permutation group g   sn  the stabilizer of i in g  denoted ig  is the set of permutations of g that leave i unchanged:
ig = {考 ﹋ g|i考 = i}
1 csp and symmetries
a constraint satisfaction problem p  csp  with n variables is a triple p =  v d c  where v is a finite set of variables  vi i﹋in  d a finite set of finite sets  di i﹋inn  and every constraint in c is a subset of the cross product i﹋in di. without loss of generality  we can assume that di   ik for some
k.
﹛an assignment is a member of s  i.e. a vector of values  ai i﹋in such that ai ﹋ di for all i ﹋ in  and is denoted  vi = ai i﹋in. a partial assignment is sub vector of an assignment.
﹛a solution to  v d c  is an assignment that is consistent with every member of c.
﹛given a permutation 考 of in  we define a variable permutation on  partial  assignments as follows:
  vi = ai i﹋in 考 =   vi考 = ai i﹋in 
﹛such permutation is called a variable symmetry if it maps solutions to solutions.
﹛given a permutation 牟 of ik  we define a value permutation on  partial  assignments as follow:
  vi = ai i﹋in 牟 =   vi = ai牟 1 i﹋in 
﹛such permutation is called a value symmetry if it maps solutions to solutions.
1 a graph coloring example
let us introduce an example that will be used throughout the paper. we say that a graph with m edges is graceful if there exists a labeling f of its vertices such that:   1 ≒ f i  ≒ m for each vertex i 
  the set of values f i  are all different    the set of values abs f i  f j   for every edge  i j  are all different.
a straightforward translation into a csp exists where there is a variable vi for each vertex vi  see  lustig and puget  1 . the variable symmetries of the problem are induced by the automorphism of the graph. there is one value symmetry  which maps v to m   v. more information on symmetries in graceful graphs is available in  petrie and smith  1    petrie  1 .
let us consider the following graph k1 ℅ p1:
1

	ㄓ  	ㄓ  
	ㄓ	 	ㄓ	 
	ㄓㄓㄓ	  c  c  1	ㄓㄓㄓ	  c   1
	ㄓ c ㄓㄓ	 c  c 	ㄓ  c  c  c  c 
	 c 	ㄓ c ㄓ
1
﹛the group of variable symmetries of the corresponding csp is equivalent to the group of symmetries of the graph. such group can be computed by packages such as nauty mc kay  1 . this group g is:
{ 1 1 1   1 1 1   1 1 1    1 1 1   1 1 1   1 1 1    1 1 1   1 1 1   1 1 1  
 1 1 1   1 1 1   1 1 1 }
1 breaking variable symmetries
without loss of generality  we can assume that domains are subsets of ik for some k  with the usual ordering on integers.
1 lex leader constraints
adding constraints is one of the oldest methods for reducing the number of variable symmetries of a csp puget  1 . in  crawford et al.  1   it is shown that all the variable symmetries of any csp can be broken by the following constraints.
	 考 ﹋ g  v 1 v考	 1 
﹛for a given 考  the constraint  v 1 v考  is semantically equivalent to the disjunction of the constraints:
v1   v1考
v1 = v1考 ＿ v1   v1考
...
v1 = v1考 ＿ ... ＿ vi 1 = v i 1 考 ＿ vi   vi考
...
v1 = v1考 ＿ ... ＿ vn 1 = v n 1 考 ＿ vn 1   v n 1 考 v1 = v1考 ＿ ... ＿ vn 1 = v n 1 考 ＿ vn 1 = v n 1 考
﹛if the last constraint is omitted  the set of constraints is denoted v   v考.
in our example  the constraints given by  crawford et al. 
1  are
 v1 v1 v1 v1 v1 v1 1 v1 v1 v1 v1 v1 v1  v1 v1 v1 v1 v1 v1 1 v1 v1 v1 v1 v1 v1  v1 v1 v1 v1 v1 v1 1 v1 v1 v1 v1 v1 v1  v1 v1 v1 v1 v1 v1 1 v1 v1 v1 v1 v1 v1  v1 v1 v1 v1 v1 v1 1 v1 v1 v1 v1 v1 v1  v1 v1 v1 v1 v1 v1 1 v1 v1 v1 v1 v1 v1  v1 v1 v1 v1 v1 v1 1 v1 v1 v1 v1 v1 v1  v1 v1 v1 v1 v1 v1 1 v1 v1 v1 v1 v1 v1  v1 v1 v1 v1 v1 v1 1 v1 v1 v1 v1 v1 v1  v1 v1 v1 v1 v1 v1 1 v1 v1 v1 v1 v1 v1  v1 v1 v1 v1 v1 v1 1 v1 v1 v1 v1 v1 v1  v1 v1 v1 v1 v1 v1 1 v1 v1 v1 v1 v1 v1 1 a polynomial number of constraints
the number of constraints  1  can grow exponentially with the number of variables v. using the fact that the variable are subject to an all different constraint  we can significantly reduce the number of symmetry breaking constraints. let us consider one of the symmetries of our example  namely:
考 =  1 1 1 
the constraint breaking this symmetry is
 v1 v1 v1 v1 v1 v1  1  v1 v1 v1 v1 v1 v1 
﹛since v1 = v1 is trivially true  and since v1 = v1 cannot be true because of the all different constraint  this constraint can be simplified into:
v1   v1
﹛this simplification is true in general and can be formalized as follows. given a permutation 考  let s 考  be the smallest i such that i考 1= i  and let t 考  be equal to  s 考  考.
﹛lemma 1. given a csp where the variables v are subject to an all different constraint  and a variable symmetry group g for this csp  then all variable symmetries can be broken by adding the following constraints:
	 考 ﹋ g vs 考    vt 考 	 1 
﹛proof. by definition k考 = k for all k   s 考   and s 考 考 1= s 考 . let us look at the constraint v 1 v考. there is an all different constraint on the variables v  which means that vi = vi考 if and only if i考 = i. in particular  vk = vk考 for all k   s 考   and vs 考  =1 v s 考  考. therefore  only one disjunct for the constraint can be true  namely: v1 = v1考 ＿ ... ＿ vs 考  1 = v s 考  1 考 ＿ vs 考    v s 考  考 since k考 = k for k   s 考  and s 考 考 = t 考   this can be simplified into vs 考    vt 考 . 1
﹛note that if two permutations 考 and 牟 are such that s 考  = s 牟  and t 考  = t 牟   then the corresponding symmetry breaking constraints are identical. therefore  it is sufficient to state only one symmetry breaking constraints for each pair i j such that there exists a permutation 考 with i = s 考  and j = t 考 .
﹛the set of these pairs can be computed using what is known as the schreier sims algorithm  seress  1 . this algorithm constructs a stabilizers chain g1 g1 ... gn as follows:
	g1	=	g
	 i ﹋ in  gi	=	 i   1 gi 1
by definition 
gi = {考 ﹋ g : 1考 = 1 ＿ ... ＿  i   1 考 = i   1} gn   gn 1   ...g1   g1
﹛the schreier sims algorithm also computes set of coset representatives ui. those are orbits of i in gi:
ui = igi
﹛by definition  ui is the set of values which i is mapped to by all symmetries in g that leave at least 1 ...  i   1 
﹛unchanged.
﹛from now on  we will assume that all the groups we use are described by a stabilizers chain and coset representatives. in our example  the stabilizer chain is :
g1=gg1=1 = { 1 1 1   1 1 1 }g1=1 = { 1 1 1 }all remaining stabilizers g1 g1 g1 are equal to g1. coset representatives are:
u1=1 = {1 1 1}u1=1 = {1}u1=1 = {1}u1=1 = {1}u1=1 = {1}﹛theorem 1. given a csp with n variables v such that there exists an all different constraint on these variables  and given coset representatives sets ui for the variable symmetry group of the csp  then all the variable symmetries can be broken by at most n n   1 /1 binary constraints. these constraints are given by :
	 i ﹋ in  j ﹋ ui  i 1= j ↙ vi   vj	 1 
﹛proof. by definition  for each element j ﹋ ui  there exists at least one permutation 考 ﹋ gi such that i考 = j and j = t 考 . the converse is also true. if there exists a permutation 考 such that i = s 考  and that j = t 考   then j ﹋ ui. therefore  the constraints  1  can be rewritten into:
 i ﹋ in  j ﹋ ui  i 1= j   vi   vj
﹛there are such constraints. all the permutations of gi leave the numbers 1 ... i   1 unchanged. therefore ui is a subset of {i ... n   1}. then |ui|   1 ≒ n   i   1. therefore  the number of constraints is bounded from above by
in our example  these constraints are :
v1   v1  v1   v1  v1   v1  v1   v1  v1   v1  v1   v1
﹛note that some of these constraints are redundant. for instance  the constraint v1   v1 is entailed by the first and the last constraints. this remark can be used to reduce the number of constraints as explained in the following section.
1 a linear number of constraints
the previous result can be improved by taking into account the transitivity of the   constraints. given j ﹋ in  it may be the case that j belongs to several of the sets ui. in such case  let us define r j  as the largest i different from j such that j belongs to ui. if j belongs to no ui other than uj  then let r j  = j.
before stating our main result  let us prove the following.
﹛lemma 1. with the above notations  if j ﹋ ui and i 1= j then r j  ﹋ ui and r j    j
﹛proof. let us assume that j ﹋ ui and i 1= j. by definition of ui there exists a permutation 考 ﹋ gi such that i考 = j. let k = r j . by definition of r j   i ≒ k and j ﹋ uk. therefore  there exists a permutation 牟 ﹋ gk such that k牟 = j. let 糸 = 考牟 1. then  i糸 = i考牟 1 = j牟 1 = k. moreover  糸 ﹋ gi because 考 ﹋ gi and 牟 ﹋ gk   gi. therefore  k ﹋ ui. the fact that r j    j is an immediate consequence of the definition of r j .1
we can now state our main result.
﹛theorem 1. with the above notations  given a csp with n variables v  such that there exists an all different constraint on these variables  then all variable symmetries can be broken by at most n   1 binary constraints. these constraints are given by :
	 j ﹋ in  r j  1= j ↙ vr j    vj	 1 
﹛proof. the number of constraints  1  is at most n by definition. note that r 1  = 1 by definition of r  therefore  the number of constraints is at most n 1. let us consider one of the constraints of  1 . we are given i and j such that j ﹋ ui and i 1= j. we want to prove that the constraint c =  vi   vj  is implied by the constraints  1 . let us consider the sequence  j r j  r r j   r r r j    ... . let us assume that the sequence never meets i. we have that j ﹋ ui and i 1= j. by application of lemma 1  we get r j  ﹋ ui and r j    j. since r j  1= i by hypothesis  lemma 1 can be applied again. by repeated applications of lemma 1 we construct an infinite decreasing sequence of integers all included in ui. this is not possible as ui is finite. therefore  there exists k such that i = rk j . moreover  we have established rk j  1= rk 1 j  ... r r j   1= r j  r j  =1 j. therefore  the constraints vrk j    vrk 1 j  ...vr r j     vr j  vr j    vj are constraints of  1 . together they imply vrk j    vj which is the constraint c. we have proved that the constraints  1  are implied by the constraints  1 . since the set of constraints  1  is a subset of the constraints  1   both sets of constraints are equivalent. then  by theorem 1  the constraints  1  break all variable symmetries. 1
in our example  we get from coset representatives:
r 1  = 1  r 1  = 1  r 1  = 1  r 1  = 1  r 1  = 1  r 1  = 1
therefore  the constraints  1  given by theorem 1 are: v1   v1  v1   v1  v1   v1  v1   v1  v1   v1
note that the constraint v1   v1 is no longer appearing.
1 breaking both variable symmetries and value symmetries
in  roney-dougal et al.  1   a general method for breaking all value symmetries is described. this method uses the group of value symmetries of the csp. we will show that this method can be combined with symmetry breaking constraints when there are both variable symmetries and value symmetries.
1 ge-tree and symmetry breaking constraints
we are given a csp p with n variables vi subject to an all different constraint among other constraints. without loss of generality  we can assume that the domains of the variables are subsets of ik for some k. it is shown in  flener et al.  1  how to transform p into a new csp p1 such that all value symmetries of p become variable symmetries of p1. the idea is to add n℅k additional binary variables xij  variables with domains equal to {1} . we also add the following channeling constraints:
 i ﹋ in j ﹋ ik   xij = 1  √  vi = j 
﹛these constraints state that the variable xij equals 1 if and only if the variable vj equals j. adding these new variables do not change the solutions of the csp. moreover  variable symmetries of p are equivalent to permutations of the rows of the xij matrix  whereas value symmetries of p are equivalent to permutations of the columns of the same matrix.
﹛let us construct the vector x by concatenating the rows of the matrix xij. therefore  the variables xij are ranked in increasing values of i then increasing values of j in the vector x.
﹛let us consider a value symmetry 牟 for p. then 牟 is a permutation of the matrix columns. this symmetry is broken by the constraint:
	x 1 x牟	 1 
﹛let xi be the variables in the i-th row of the matrix. the value symmetry 牟 maps variables in a given row to variables in the same row. this is formalized as follows.
   xi	=	 xi1 xi1 ... xi k 1    x牟 i	=	 xi1牟 1 xi1牟 1 ... xi k 1 牟 1 
﹛from the definition of 1  we have that  1  is equivalent to the disjunction of the following constraints:
﹛﹛﹛x1    x牟 1 x1 =  x牟 1 ＿ x1    x牟 1
...
x1 =  x牟 1 ＿ ... ＿ xi 1 =  x牟 i 1 ＿ xi    x牟 i
...
x1 =  x牟 1 ＿...＿xn 1 =  x牟 n 1 ＿xn 1    x牟 n 1
x1 =  x牟 1 ＿...＿xn 1 =  x牟 n 1 ＿xn 1 =  x牟 n 1
﹛let us compare lexicographically xi with  x牟 i. let ai be the value assigned to vi. then xi ai  = 1 and xij = 1 for j 1= ai. similarly  xi j 牟 1 = 1 if and only if j牟 1 = ai  i.e. a牟i = j. therefore  xi =  x牟 i if and only if ai =  ai 牟  and xi    x牟 i if and only if ai    ai 牟.
﹛we then have that  1  is equivalent to the disjunction of the constraints:
a1    a1 牟
a1 =  a1 牟 ＿ a1    a1 牟
...
a1 =  a1 牟 ＿ ... ＿ ai 1 =  ai 1 牟 ＿ ai    ai 牟
...
a1 =  a1 牟 ＿ ... ＿ an 1 =  an 1 牟 ＿ an 1    an 1 牟 a1 =  a1 牟 ＿ ... ＿ an 1 =  an 1 牟 ＿ an 1 =  an 1 牟 let us now consider one of the disjunct  namely: a1 =  a1 牟 ＿ ... ＿ ai 1 =  ai 1 牟 ＿ ai    ai 牟
﹛this means that 牟 leaves invariant a1 a1 ... ai 1. in such case ai must be minimal among the values that any such 牟 can map it to. we have therefore proved the following result. lemma 1. with the above notations  ai is the minimum of its orbit in the group of symmetries that leave a1 a1 ...ai 1 unchanged.
﹛this is equivalent to the ge-tree method for breaking all value symmetries  roney-dougal et al.  1   when the variables and the values are tried in an increasing order during search.
﹛from  crawford et al.  1   it is safe to add all possible symmetry breaking constraints  1  on p1. in particular  it is safe to state all the constraints  1  for the variable symmetries of p together with all the constraints  1 . by lemma 1  the set of constraints  1  is equivalent to the ge-tree method for breaking value symmetries. we have just proved the following result.
﹛theorem 1. given a csp  its group of variable symmetries g1  and its group of value symmetries g1  then the combination of the ge-tree method for breaking value symmetries with the symmetry breaking constraints  1  computes a set of solutions s such that:
 s ﹋ sol p   考 ﹋ g1  牟 ﹋ g1  s1 ﹋ s  s考牟 = s1
﹛theorem 1 in section 1 says that the set of all those constraints  1  is equivalent to the constraints  1  when there is an all different constraints on all the variables v. this yields the following result.
﹛corollary 1. given a csp where the variable are subject to an all different constraint  its group of variable symmetries g1  and its group of value symmetries g1  then the combination of the ge-tree method for breaking value symmetries with the symmetry breaking constraints  1  computes a set of solutions s such that:
 s ﹋ sol p   考 ﹋ g1  牟 ﹋ g1  s1 ﹋ s  s考牟 = s1
1 experimental results
we have implemented an algorithm similar to nauty mc kay  1  for computing graph automorphisms  as well as a schreier sims algorithm seress  1 . these have been used in the following examples. in our implementation  we did not fully implement the ge-tree method  because it requires more computational group algorithms than what we have implemented so far. we simply compute the orbits for the group g of value symmetries. then  only the minimum element of each orbit is left in the domain of the variable v1. we will refer to this method as sbc  for symmetry breaking constraints  in order to differentiate it from other methods.
1 graceful graphs
we have tested our approach on the graceful graphs of  petrie and smith  1 . variable symmetries are broken by the constraints  1 . there is one non trivial value symmetry  which maps a to e   a; where e is the number of edges of the graph. therefore  the orbits for this symmetry are the sets {a e   a}  for 1 ≒ a ≒ e/1. therefore  one can restrict the domain of v1 by keeping one the smallest value in each of these orbits.
for each graph we report the number of solutions of the
csp  sol   the size of the search tree  node  and the time  time  needed to compute all these solutions the running time without symmetry breaking technique  no sym . we also report these figures when the sbc method is used. in this case the running time includes the time needed to perform all the group computations. running times are measured on a 1 ghz dell latitude d1 laptop running windows xp. the implementation is done with ilog solver 1 ilog  1 .
graphno symsbcsolnodetimesolnodetimek1℅p11.11.1k1℅p11.11.1k1℅p1111k1℅p111table 1. computing all solutions for graceful graphs.
﹛the running times are up to 1 times smaller than the ones reported in  petrie  1  for the gap-sbdd and the gapsbds methods  using a computer about half the speed of ours. this shows that in this example our symmetry breaking constraints are much more efficient than modified search methods. however  we find twice as many more solutions. let see why on the graph k1 ℅ p1. this graph has 1 vertices and 1 edges. we list the values for the variables v1 v1 ... v1 for the two solutions:
 1 1 1 1 1 
 1 1 1 1 1 
﹛let us apply the non trivial value symmetry to the second one. we get:
 1 1 1 1 1 
let us apply the following variable symmetry to it:
 1 1 1 1 1 
this yields the first solution!
﹛this example shows that we did not break all symmetries that are a product of a variable symmetry by a value symmetry. this is so despite the fact that all variable symmetries and all value symmetries are broken.
1 most perfect magic squares
most perfect magic squares  studied in  ollerenshaw  1   are given as an example of a csp with convoluted variables symmetries in  roney-dougal et al.  1 . the authors decided to use an inverse representation in order to transform variable symmetries into value symmetries. these were in turn broken with the ge-tree method. in  ollerenshaw  1   it is proven that most perfect magic squares are in a one to one relationship with reversible squares. a reversible square of size n℅n  where n √ 1 mod 1  has entries 1...n1 such that  i  the sum or the two entries at diagonally opposite corners of any rectangle or sub-square equals the sum of the other pair of diagonally opposite corners  ii  in each row or column  the sum of the first and last entries equals the sum of the next and the next to last number  etc  iii  diametrically opposed numbers sum to n1 + 1.
﹛any solution is one of 1n+1  n/1 ! 1 symmetric equivalent ollerenshaw  1 . for n = 1  this is about 1e+1.
﹛the natural model for this problem has one variable per cell in the square with entries as values. in addition to the above constraints on entries  there is an all different constraint. therefore  our variable symmetry breaking constraints can be used. we report for various sizes the time used to compute the symmetry breaking constraints as well as the time for finding all non symmetrical solutions with our sbc method. we also report the results of  roney-dougal et al.  1   obtained with gap-sbdd and with ge-tree on a computer about half the speed of ours. a direct comparison is difficult because they directly search for most perfect magic squares whereas we search for reversible squares. it is worth comparing the time spent in the symmetry computations though  because these deal with the same symmetry group. our method spends much less time in symmetry computations because this needs to be done only once  before the search starts.
methodnsolssymsearchsbc111111111111gap-sbdd11111111ge-tree1111111111 discussion
we have established two major results  i  all variable symmetries can be broken by a linear number of binary constraints if there is an all different constraints on all the variables of the csp  ii  symmetry breaking constraints of  crawford et al.  1  can be safely used in conjunction with the ge-tree method of  roney-dougal et al.  1 .
﹛furthermore  these methods can be fully automated using automorphism packages such as nauty mc kay  1  and computational group theory seress  1 . we have implemented such algorithms. experiments on complex problems show that these algorithms are quite efficient.
﹛the results described in this paper can be generalized. first of all  theorem 1 is valid for all csps where the variables are subject to an all different constraint. it would be interesting to see if similar results can be obtained for other forms of csps.
﹛it is worth mentioning that we presented a method for breaking all variable symmetries  and all value symmetries. however  our method does not break products of both kinds of symmetries. it remains to be seen if a simple combination of variable and value symmetry breaking techniques can break all such symmetries.
acknowledgements
the author would like to thank marie puget and the anonymous referees for their remarks. it greatly helped improving the readability of this paper.
