 we investigate the computational complexity of testing dominance and consistency in cp-nets. up until now  the complexity of dominance has been determined only for restricted classes in which the dependency graph of the cp-net is acyclic. however  there are preferences of interest that define cyclic dependency graphs; these are modeled with general cp-nets. we show here that both dominance and consistency testing for general cp-nets are pspace-complete. the reductions used in the proofs are from strips planning  and thus establish strong connections between both areas.
1	introduction
the problems of eliciting  representing and reasoning with preferences over a multivariable  or  multiattribute  domain arise in many fields such as planning  design  and group decision making. an explicit representation of a preference ordering of elements  we refer to them as outcomes  of such multivariable domains is exponentially large in the number of attributes. therefore  ai researchers have developed languages for representing preference orderings succinctly. the formalism of cp-nets  boutilier et al.  1  is among the most popular ones. a cp-net provides a succinct representation of preference ordering on outcomes in terms of local preference statements of the form p : xi   xj  where xi xj are values of a variable x and p is a logical condition. informally  a preference statement p : xi   xj means that given p  xi is  strictly  preferred to xj ceteris paribus  that is  all other things being equal. the meaning of a cp-net is given by a certain ordering relation  dominance  on the set of outcomes  derived from such reading of preference statements. if one outcome dominates another  we say that the dominant one is preferred.
¡¡reasoning about the preference ordering  dominance relation  expressed by a cp-net is far from easy. the key prob-
lems include dominance testing and consistency testing. in the first problem  given a cp-net and two outcomes ¦Á and ¦Â  we want to decide whether ¦Â dominates ¦Á. the second problem asks whether there is a dominancecycle in the dominance ordering defined by an input cp-net  that is  whether there is an outcome that dominates  is preferred to  itself.
¡¡we study the computational complexity of these two problems. the results obtained so far concerned only restricted classes of cp-nets  all requiring that the graph of variable dependencies implied by preference statements in the cp-net be acyclic. under certain assumptions  the dominance-testing problem is in np and  under some additional assumptions  even in p  domshlak and brafman  1; boutilier et al.  1a . its complexity in the general case has remained until now an open problem. we show that it is in fact pspacecomplete  even for the propositional case  by exhibiting in
section 1 a pspace-hardness proof for dominance testing.
¡¡we then turn to consistency testing. while acyclic cpnets are guaranteed to be consistent  this is not the case with general cp-nets  see  domshlak and brafman  1; brafman and dimopoulos  1  for detailed examples and discussions . in section 1  we show that consistency testing is as hard as dominance testing.
¡¡to prove the hardness part of the results  we first establish the pspace-hardness of some problems related to propositional strips planning. we then show that these problems can be reduced to cp-net dominance and consistency testing by exploiting connections between actions in strips planning and preference statements in cp-nets.
¡¡we assume some familiarity with the complexity class pspace  we refer to  papadimitriou  1  for details . in particular  we rely later on the equivalences npspace =
pspace = copspace.
¡¡the complexity results in this paper address cyclic cpnets. most earlier work has concentrated on the acyclic model. however  we argue that acyclic cp-nets are not sufficiently expressive to capture human preferences on even some simple domains. consider  for instance  a diner who has to choose either red or white wine  and either fish or meat. given red wine  they prefer meat  and conversely  given meat they prefer red wine. on the other hand  given white wine  they prefer fish  and conversely  given fish they prefer white wine. this gives a consistent cyclic cp-net  and there is no acyclic cp-net giving rise to the same preferences on outcomes. so  such cyclicity of preference variables does not necessarily lead to a cyclic order on outcomes.
1 generalized propositional cp-nets let v = {x1 ... xn} be a finite set of variables. for each variable x ¡Ê v   we assume a finite domain dx of values. an outcome is an n-tuple  d1 ... dn  of dx1 ¡Á ¡¤¡¤¡¤ ¡Á dxn.
¡¡in this paper  we focus on propositional variables: variables with binary domains. let v be a finite set of propositional variables. for every x ¡Ê v   we set dx = {x  x}  thus  we overload the notation and write x both for the variable and for one of its values . we refer to x and  x as literals. given a literal l we write  l to denote the dual literal to l. the focus on binary variables makes the presentation clearer and has no impact on our complexity results.
¡¡a conditional preference rule  or  for short  a  preference  rule  over v is an expression p : l    l  where l is a literal of some atom x ¡Ê v and p is a propositional formula over v that does not involve variable x.
definition 1  generalized cp-net  a generalized cp-net c  for short  a gcp-net  over v is a set of conditional preference rules. for x ¡Ê v we define p+c x  and p c x   usually written just: p+ x  and p  x   as follows: is equal to the disjunction of all p such that there exists a rule p : x    x in c; p c x  is the disjunction of all p such that there exists a rule p :  x   x in c. we define the associated directed graph gc  the dependency graph  over v to consist of all pairs  y x  of variables such that y appears in either p+ x  or p  x .
¡¡in our complexity results we will also need the following representation of gcp-nets: a gcp-net c is said to be in conjunctive form if c only contains rules p : l    l such that p is a  possibly empty  conjunction of literals. in this case all formulas p  x   p+ x  are in disjunctive normal form  that is  a disjunction of conjunctions of literals  including   - the empty conjunction of literals .
¡¡gcp-nets determine a transitive relation on outcomes  interpreted in terms of preference. a preference rule p : l    l represents the statement  given that p holds  l is preferred to  l ceteris paribus . its intended meaning is as follows. if outcome ¦Â satisfies p and l  then ¦Â is preferred to the outcome ¦Á which differs from ¦Â only in that it assigns  l for variable x. in this situation we say that there is an improving flip from ¦Á to ¦Â sanctioned by the rule p : l    l. if ¦Á1 ... ¦Ám is a sequence of outcomes with m ¡Ý 1 and each next outcome in the sequence is obtained from the previous one by an improving flip  then we say that ¦Á1 ... ¦Ám is an improving sequence  from ¦Á1 to ¦Ám  for the gcp-net  and that ¦Ám dominates ¦Á1  written ¦Á1   ¦Ám.
¡¡finally  a gcp-net is consistent if there is no outcome ¦Á which is strictly preferred to itself  i.e.  such that ¦Á   ¦Á.
¡¡the main objective of the paper is to establish the complexity of the following two problems concerning the notion of dominanceassociated with gcp-nets  sometimes under restrictions on the class of input gcp-nets .
definition 1
gcp-dominance: given a gcp-net c and two outcomes ¦Á and ¦Â  decide whether ¦Á   ¦Â in c.
gcp-consistency: given a gcp-net c  decide whether c is consistent.
¡¡there are two properties of gcp-nets that are essential in linking them to the original notion of cp-nets  boutilier et al.  1; 1a .
definition 1
a gcp-net c over v is locally consistent if for every x ¡Ê
v   the formula p c x  ¡Ä p+c x  is unsatisfiable. it is locally complete if for every x ¡Ê v   the formula p c x  ¡Å p+c x  is a tautology.
definition 1  propositional cp-net  a cp-net over the set v of  propositional  variables is a locally consistent and locally complete gcp-net over v .
¡¡problems cp-dominance and cp-consistency are defined analogously to definition 1.
this definition of a cp-net differs from the one given in
 boutilier et al.  1a   which uses explicit conditional preference tables. our representation is often more compact  but it is easy to verify that it is equivalent in that it gives rise to the same definition of dominance.
¡¡when defining a decision problem  it is critical to specify the way to represent its input instances  as the representation may affect the complexity of the problem. unless stated otherwise  we assume that gcp-nets  and so  also cp-nets  are represented as a set of preference rules  as described in definition 1. therefore  the size of a gcp-net is given by the total size of the formulas p  x   p+ x   x ¡Ê v . 1 propositional strips planning
in this section we derive some technical results on propositional strips planning which form the basis of our complexity results in sections 1 and 1. we establish the complexity of plan existence problems for propositional strips planning  under restrictions on input instances that make the problem useful in the studies of dominance and consistency in gcpnets.
¡¡let v be a finite set of variables. a state over v is a complete and consistent set of literals over v  which we often view as the conjunction of its members . a state is therefore equivalent to an outcome  defined in a cp-nets context.
definition 1  propositional strips planning  a propositional strips instance is a tuple hv ¦Á1 ¦Ã acti  where
1. v is a finite set of propositional variables;
1. ¦Á1 is a state  over v    called the initial state;
1. ¦Ã is a state called the goal;
1. act is a finite set of actions  where each action a ¡Ê act is described by a consistent conjunction of literals pre a   a precondition  and a consistent conjunction of literals post a   a postcondition  or effect .
an action a is executable in a state ¦Á if ¦Á |= pre a . the effect of a in state ¦Á is the state ¦Á1 containing the same literals as ¦Á for all variables not mentioned in post a   and the literals of post a  otherwise. we assume that an action can be applied to any state  but that it has no effect if its preconditions do not hold  this assumption has no effect on complexity . the propositional strips plan existence problem  or
strips plan for short  is to decide whether for a given propositional strips instance hv ¦Á1 ¦Ã acti there is a successful plan  that is  sequence of actions leading from the initial state ¦Á1 to a state satisfying the goal ¦Ã.
a plan is irreducible if its every action changes the state.
we assume  without loss of generality  that for any action a  no literal in post a  also appears in pre a ; otherwise we can omit the literal from post a  without changing the effect of the action;  if post a  then becomes an empty conjunction  the action a can be omitted from act as it has no effect .
we have the following result  proved in  bylander  1  :
proposition 1   bylander  1   strips plan is pspace-complete.
¡¡typically  propositional strips instances do not require that goals be complete. we restrict consideration to complete goals. this restriction has no effect on the complexity: the plan existence problem remains pspace-complete under the goal-completeness restriction  lang  1 .
1	acyclic strips
definition 1  acyclic sets of actions  a set of actions act is acyclic if there is no state ¦Á such that hv ¦Á ¦Á acti has a non-empty irreducible plan  informally  if there are no nontrivial directed cycles in the space of states induced by act . we will now consider the following two problems: 1. acyclic strips plan: given a propositional strips instance hv ¦Á1 ¦Ã acti such that act is acyclic and ¦Á1= ¦Ã  decide whether there is a plan for
hv ¦Á1 ¦Ã acti.
1. action-set acyclicity: given a set act of actions  decide whether act is acyclic.
we will show that both problems are pspace-complete.
proposition 1
acyclic strips plan is pspace-complete.
proof: membershipin pspace is evident as the problemis a restriction of strips plan. to prove pspace-hardness  we exhibit a polynomial-time reduction from strips plan. let pe = hv ¦Á1 ¦Ã acti be an instance of strips plan. the idea behind the reduction is to introduce a counter  so that each time an action is executed  the counter is incremented. the counter may count up to 1n  where n = |v |  making use of n additional variables. the counter is initialized to 1. once it reaches 1n   1 it can no longer be incremented and no action can be executed. hence  the set of actions in the resulting instance of strips plan is acyclic.
¡¡to describe the reduction  we write v as {x1 ... xn}. we define pe as follows:
  v 1 = {x1 ... xn z1 ... zn}  where zi are new variables we will use to implement the counter;
;
  ¦Ã1 = ¦Ã ¡Ä z1 ¡Ä ¡¤¡¤¡¤ ¡Ä zn;
  for each action a ¡Ê act  we include in act1 n actions ai  1 ¡Ü i ¡Ü n  such that pre ai  = pre a  ¡Ä  zi ¡Ä zi+1 ¡Ä ¡¤¡¤¡¤ ¡Ä zn post ai  = post a  ¡Ä zi ¡Ä  zi+1 ¡Ä ¡¤¡¤¡¤ ¡Ä  zn   furthermore  we include in act1 n actions bi  1 ¡Ü i ¡Ü n  such that
pre bi  =  zi ¡Ä zi+1 ¡Ä ¡¤¡¤¡¤ ¡Ä zn post bi  = zi ¡Ä  zi+1 ¡Ä ¡¤¡¤¡¤ ¡Ä  zn we will denote states over v 1 by pairs  ¦Á k   where ¦Á is a state over v and k is an integer  1 ¡Ü k ¡Ü 1n   1. we view k as a compact representation of a state over variables z1 ... zn: assuming that the binary representation of k is d1 ...dn  with dn being the least significant digit   k represents the state which contains zi if di = 1 and  zi  otherwise.
¡¡pe1 is acyclic  since executing any action in act1 increments the counter k and no action can be executed once the counter has reached the value 1n   1.
¡¡we claim that there is a plan for pe if and only if there is a plan for pe1. first  assume that there is a plan in pe. let ¦Ð be a shortest plan in pe and let m be its length. we have m ¡Ü 1n 1  since no state along ¦Ð repeats  otherwise  shorter plans than ¦Ð for pe would exist . let ¦Á1 ¦Á1 ... ¦Ám = ¦Ã be the sequence of states obtained by executing ¦Ð. let a be the action used in the transition from ¦Ák to ¦Ák+1. since k   1n   1  there is exactly one i  1 ¡Ü i ¡Ü n  such that the action ai applies at the state  ¦Á k  over v 1. replacing a with ai in ¦Ð yields a plan that when started at  ¦Á1  leads to  ¦Ám m  =  ¦Ã m . appending that plan with appropriate actions bi to increment the counter to 1n  1 yields a plan for pe1. conversely  if ¦Ó is a plan for pe1  the plan obtained from ¦Ó by removing all actions of the form bj and replacing each action ai with a is a plan for pe.
	thus  the claim and the assertion follow.	
proposition 1
action-set acyclicity is pspace-complete. proof: the argument for the membership in pspace is standard. to prove pspace-hardness  we proceed as follows. let pe = hv ¦Á1 ¦Ã acti be a strips instance such that act is acyclic and ¦Á1= ¦Ã. let a be a new action defined by pre a  = ¦Ã and post a  = ¦Á1. it is easy to see that act ¡È {a} is not acyclic if and only if there exists a plan for pe. thus  the pspace-hardness of the complement of the action-set acyclicity problem follows from proposition 1. since pspace = copspace  this suffices to prove the hardness part of the assertion. 
1 mapping strips plans to single-effect strips plans
versions of the strips plan and acyclic strips plan problems that are importantfor us allow only single-effect actions  actions with exactly one literal in their postconditions  in input propositional strips instances. we refer to these restrictions as se strips plan and acyclic se strips plan. to prove pspace-hardness of both problems  we describe a mapping from strips instances to single-effect strips instances.
consider an instance pe = hv ¦Á1 ¦Ã acti of the strips
plan problem  where act is not necessarily acyclic . for each action a ¡Ê act we introduce a new variable xa. we set x = va¡Êact  xa. that is  x is the conjunction of negative literals of all the additional variables. in addition 
for each a ¡Ê act we set xa = xa ¡Ävb¡Êact {a}  xb. we now define an instance pe act i of the
se strips plan problem as follows:
  set of variables: v 1 = v ¡È {xa : a ¡Ê act};
  initial state:;
  goal state: ¦Ã1 = ¦Ã ¡Ä x;
  set of actions: s act  = {ai : a ¡Ê act  i =
1 ... 1|post a | + 1}.
let a ¡Ê act and post a  = l1 ¡Ä ¡¤¡¤¡¤ ¡Ä lq. for i = 1 ... q  we define:
pre ai  = pre a  ¡Ä x ¡Ä  li; post ai  = xa; pre aq+i  = xa; post aq+i  = li. we also define:
pre a1q+1  = xa ¡Ä l1 ¡Ä ¡¤¡¤¡¤ ¡Ä lq; post a1q+1  =  xa.
¡¡let ¦Ð be a sequence of actions in act. we define s ¦Ð  to be the sequence of actions in s act  obtained by replacing each action a in ¦Ð by a1 ... a1q+1  where q = |post a | . now consider a sequence ¦Ó of actions from s act . remove from ¦Ó any action ai such that i 1= 1|post a | + 1  and replace actions of the form a1|post a |+1 by a. we denote the resulting sequence of actions from act by s1 ¦Ó . the following properties are easy to check  details are omitted :
lemma 1 with the above definitions 
 i  if ¦Ð is a plan for pe then s ¦Ð  is a plan for pe1;
 ii  if ¦Ó is an irreducible plan for pe1 then s1 ¦Ó  is a plan for pe;
 iii  act is acyclic if and only if s act  is acyclic.
proposition 1
se strips plan and acyclic se strips plan are
pspace-complete.
proof: se strips plan and acyclic se strips plan problems are restrictions of strips plan  from which membership in pspace follows. pspace-hardness of acyclic se strips plan  and so  also of the other problem  is shown by reduction from acyclic strips plan.
consider an instance pe = hv ¦Á1 ¦Ã acti of acyclic
strips plan. define pe act i  which by lemma 1 iii  is an instance of the acyclic se strips plan problem. by lemma 1 i  and  ii  there exists a plan for pe if and only if there exists a plan for pe1. 
1	dominance
the goal of this section is to prove that the gcp-dominance problem is pspace-complete  and that the complexity does not go down even when we restrict the class of inputs to cpnets. we use the results on propositional strips planning from section 1 to prove that the general gcp-dominance problem is pspace-complete. we then show that the complexity does not change if we impose the requirements of local consistency and local completeness on input gcp-nets.
¡¡the similarities between dominance testing in cp-nets and propositional strips planning were first noted in  boutilier et al.  1   where a reduction  presented in more detail in  boutilier et al.  1a   was given from the dominance problem to the plan existence problem for a class of propositional strips planning specifications consisting of unary actions  actions with single effects . we prove our results for the gcp-dominance and gcp-consistency problems by constructing a reduction in the other direction.
this reduction is much more complex than the one used in
 boutilier et al.  1   due to the fact that cp-nets impose more restrictions than strips planning. firstly  strips planning allows multiple effects  but gcp-nets only allow flips x    x or  x   x that change the value of one variable; this is why we constructed the reduction from strips planning to single-effect strips planning in the last section. secondly  cp-nets impose two more restrictions  local consistency and local completeness  which do not have natural counterparts in the context of strips planning.
¡¡for all dominance and consistency problems considered in the paper  the membership in pspace can be demonstrated by considering nondeterministic algorithms consisting of repeatedly guessing appropriate improving flips. such algorithms work in polynomial space and show the membership of problems they solve in npspace and consequently in pspace  since npspace = pspace. therefore  due to space restrictions  from now on we only provide arguments for the pspace-hardness of problems we consider.
1 dominance for generalized cp-nets we will prove that the gcp-dominance problem is
pspace-complete by a reduction from the problem se strips plan  which we nowknow to be pspace-complete.
mapping single-effect strips problems to gcp-nets dominance problems
let hv ¦Á1 ¦Ã acti be an instance of the se strips plan problem. for every action a ¡Ê act we denote by la the unique literal in the postcondition of a  that is  post a  = la. we denote by pre1 a  the conjunction of all literals in pre a  different from  la  we recall that by a conventionwe adopted earlier  pre1 a  does not contain la either . we then define ca to be the conditional preference rule pre1 a  : la    la and define m act  to be the gcp-net c = {ca:a ¡Ê act}.
¡¡a sequence of states in a plan corresponds to an improving sequence from ¦Á1 to ¦Ã  which leads to the following result.
lemma 1 with the above notation 
 i  there is a non-empty irreducible plan for hv ¦Á1 ¦Ã acti if and only if ¦Ã dominates ¦Á1 in c;
 ii  act is acyclic if and only if m act  is consistent.
theorem 1 the gcp-dominance problem is pspacecomplete. moreover  this remains so under the restrictions that the gcp-net is consistent and is in conjunctive form.
proof: pspace-hardness is shown by reduction from acyclic se strips plan  proposition 1 . let hv ¦Á1 ¦Ã acti be an instance of the acyclic se strips plan problem. by lemma 1 ii   m act  is a consistent gcp-net in conjunctive form. since ¦Á1= ¦Ã  there is a plan for hv ¦Á1 ¦Ã acti if and only if there is a non-empty irreducible plan for hv ¦Á1 ¦Ã acti  which  by lemma 1 i   is if and only if ¦Ã dominates ¦Á1 in c. 
1	dominance in cp-nets
in this section we show that gcp-dominance remains
pspace-complete under the restriction to locally-consistent and locally-complete gcp-nets  i.e.  cp-nets. we refer to this restriction of gcp-dominance as cp-dominance.
¡¡we will show pspace-hardness for cp-dominance by a reduction from gcp-dominance for consistent gcp-nets.
mapping locally-consistent gcp-nets to cp-nets let c be a locally-consistent gcp-net. let v = {x1 ... xn} be the set of variables of c. we define v 1 = v ¡È {y1 ... yn}  where {y1 ... yn}¡É v =  . we define a gcp-net c1 over v 1  which we will show is a cp-net. to this end  for every z ¡Ê v 1 we will define conditional preference rules q+ z  : z    z and q  z  :  z   z to be included in c1 by specifying formulas q+ z  and q  z . first  for each variable xi ¡Ê v   we set
q+ xi  = yi and q  xi  =  yi.
thus  xi depends only on yi. we also note that the formulas q+ xi  and q  xi  satisfy local-consistency and localcompleteness requirements.
next  for each variable yi  1 ¡Ü i ¡Ü n  we define
	ei	=	 x1   y1  ¡Ä ¡¤¡¤¡¤ ¡Ä  xi 1   yi 1 
¡Ä xi+1   yi+1  ¡Ä ¡¤¡¤¡¤ ¡Ä  xn   yn  
fi+ = ei ¡Ä p+ xi  and fi  = ei ¡Ä p  xi .
finally  we define
q+ yi  = fi+ ¡Å   fi  ¡Ä xi 
and
q  yi  = fi  ¡Å   fi+ ¡Ä  xi 
thus  yi depends on every variable in v 1 but itself.
¡¡we note that by the local consistency of c  formulas fi+ ¡Ä fi   1 ¡Ü i ¡Ü n  are unsatisfiable. consequently  formulas q+ yi  ¡Ä q  yi   1 ¡Ü i ¡Ü n  are unsatisfiable. thus  c1 is locally consistent. finally  q+ yi  ¡Å q  yi  is equivalent to fi+ ¡Å  xi ¡Å fi  ¡Å xi  so is a tautology. thus  c1 is locally complete and hence a cp-net over v 1. let ¦Á and ¦Â be outcomes over {x1 ... xn} and
{y1 ... yn}  respectively. by ¦Á¦Â we denote the outcome over v 1 obtained by concatenating n-tuples ¦Á and ¦Â. conversely  every outcome for c1 can be written in this way.
¡¡let ¦Á be an outcome over v . we define ¦Á¡¥ to be the outcome over {y1 ... yn} obtained by replacing in ¦Á every component of the form xi with yi and every component  xi with  yi. then for every i  1 ¡Ü i ¡Ü n  ¦Á¦Á¡¥ |= ei.
¡¡let s be a sequence ¦Á1 ... ¦Ám of outcomes over v . define l s  to be the sequence of v 1-outcomes:
. further  let t be a sequence-outcomes with and  to be the sequence obtained from t
by projecting each element in t to v and iteratively removing elements in the sequence which are the same as their predecessor  until any two consecutive outcomes are different .
lemma 1 with the above definitions 
 i  if s is an improving sequence for c from ¦Á to ¦Â then l s  is an improving sequence for c1 from ¦Á¦Á¡¥ to ¦Â¦Â¡¥;
 ii  if t is an improving sequence from ¦Á¦Á¡¥ to ¦Â¦Â¡¥ then l1 t  is an improving sequence from ¦Á to ¦Â;
 iii  c is consistent if and only if c1 is consistent
sketch of proof: let. the definitions have been arranged to ensure the following for cp-net c1 :
 a  suppose e holds in an outcome  so the outcome can be written as ¦Á¦Á¡¥ for some ¦Á; then no improving flip changes any variable xi; furthermore  there is an improving flip changing variable yi if and only if there is an improving flip for the gcp-net c from outcome ¦Á changing variable xi. after applying this flip changing variable yi  there is exactly one improving flip possible  changing xi  after which e holds again  this follows using  b   as yi cannot be immediately flipped back again  because c1 is locally consistent .
 b  if e does not hold in an outcome then the only improving flips possible change the value of some variable  xi or yi  to make xi   yi hold for some i.
¡¡ a  implies  i  and  ii . also   i  implies half of  iii   that if c is inconsistent then c1 is inconsistent. conversely  suppose that c1 is inconsistent  so there exists an improving sequence t for c1 from some outcome to itself. by  b   any improving flip applied to an outcome in which e does not hold increases  by one  the number of i such that xi   yi holds. this implies that e must hold in some outcome in t  because t is cyclic. write this outcome as ¦Á¦Á¡¥. we can cyclically permute t to form an improving sequence from ¦Á¦Á¡¥ to itself. part  ii  then implies that there exists an improving flipping sequence for c from ¦Á to itself  showing that c is inconsistent.	
theorem 1 cp-dominance is pspace-complete. this holds even if we restrict the cp-nets to being consistent.
proof: we use a reduction from pspace-hardness of the
gcp-dominance problem when the gcp-nets are restricted to being consistent  theorem 1 . let c be a consistent  and hence locally consistent  gcp-net over v   and let ¦Á and ¦Â be outcomes over v . consider the cp-net c1 over variables v 1 constructed above. lemma 1 i  and  ii  imply that ¦Â dominates ¦Á in c if and only if ¦Â¦Â¡¥ dominates ¦Á¦Á¡¥ in c1. moreover  c1 is consistent by lemma 1 iii . thus  the hardness part of the assertion follows. 
1	consistency of gcp-nets
in this section we show that the gcp-consistency problem is pspace-complete  using results from sections 1 and 1.
theorem 1
gcp-consistency is pspace-complete. this holds even under the restriction to gcp-nets in conjunctive form.
proof: pspace-hardness is shown by reduction from
action-set acyclicity. we apply function s from section 1 followed by m from section 1. this maps instances of action-set acyclicity to instances of gcp-consistency in conjunctive form. by lemma 1 iii  and lemma 1  ii   an instance of action-set acyclicity is acyclic if and only if the corresponding instance of gcp-consistency is consistent  proving the result. 
we now show that consistency testing remains pspace-
complete for cp-nets.
theorem 1 cp-consistency is pspace-complete.
proof: let c be a gcp-net in conjunctive form. we define a cp-net c1 as follows. if c is locally inconsistent  the property can be decided in polynomial time   we set c1 to be any fixed  independent of c  inconsistent but locally consistent cp-net.  such cp-nets exist.  otherwise  c is locally-consistent and for c1 we take the cp-net we constructed in section 1. the mapping from locally consistent gcp-nets to cp-nets  described in section 1  preserves consistency  lemma 1  iii  . since local inconsistency implies inconsistency  we have that the gcp-net c is consistent if and only if the cp-net c1 is consistent. thus  pspace-hardness of the cp-consistency problem follows from theorem 1.	
¡¡notice the huge complexity gap with the problem of deciding whether there exists a nondominated outcome  which is  only  np-complete  domshlak et al.  1 .
1	concluding remarks
we have shown that dominance and consistency testing in
cp-nets is pspace-complete. the repeated use of reductions from planning problems confirms the importance of the structural similarity between strips planning and reasoning with cp-nets. this suggests that the well-developed field of planning algorithms for strips representations  especially for unary operators  brafman and domshlak  1   could be useful for implementing algorithms for dominance and consistency in cp-nets.
¡¡our theorems extend to cp-nets with non-binary domains  and to extensions and variations of cp-nets  such as tcpnets  brafman and domshlak  1  that allows for explicit priority of some variables over others  and the more general preference language described in  wilson  1b; 1a .
¡¡the complexity result for dominance is also relevant for constrained optimisation  where a complete algorithm  boutilier et al.  1b  involves many dominance checks. our results reinforce the need for work on finding special classes of problems where dominance and consistency can be tested efficiently  domshlak and brafman  1; boutilier et al.  1a   and for incomplete methods for checking consistency and constrained optimisation  wilson  1a .
¡¡several open problems remain. we do not know whether dominance and consistency testing remain pspacecomplete when the number of parents in the dependency graph is boundedby a constant. we also do not know whether these two problems remain pspace-complete for cp-nets in conjunctive form  the reduction used to prove theorems
1 and 1 yields cp-nets that are not in conjunctive form . finally  we do not know the complexity of deciding whether the preference relation induced by a cp-net is complete.
acknowledgements
we are grateful for a reviewer's simple example of a cyclic cp-net. this material is supported in part by the nsf under grants no. iis-1 and iis-1  by science foundation ireland under grant no. 1/pi.1/c1  and by the cnrs program rtp 1:  raisonner et de¡äcider .
references
 boutilier et al.  1  c. boutilier  r. i. brafman  h. h. hoos  and d. poole. reasoning with conditional ceteris paribus preference statements. in proceedings of uai1  pages 1  1.
 boutilier et al.  1a  c. boutilier  r. brafman  c. domshlak  h. hoos  and d. poole. cp-nets: a tool for representing and reasoning with conditional ceteris paribus statements. jair  1-1  1.
 boutilier et al.  1b  c. boutilier  r. i. brafman  c. domshlak  h. hoos  and d. poole. preference-based constrained optimization with cp-nets. computational intelligence  1 :1  1.
 brafman and dimopoulos  1  r. brafman and y. dimopoulos. extended semantics and optimization algo-
rithms for cp-networks. computational intelligence  1 :1  1.
 brafman and domshlak  1  r. brafman and c. domshlak. introducing variable importance trade-offs into cpnets. in proceedings of uai-1  pages 1  1.
 brafman and domshlak  1  r. brafman and c. domshlak. structure and complexity of planning with unary operators. jair  1-1  1.
 bylander  1  t. bylander. the computational complexity of propositional strips planning. artificial intelligence journal  1-1 :1 1.
 domshlak and brafman  1  c. domshlak and r. i. brafman. cp-nets-reasoning and consistency testing. in proceedings of kr1  pages 1  1.
 domshlak et al.  1  c. domshlak  f. rossi  k. b. venable  and t. walsh. reasoning about soft constraints and conditional preferences: complexity results and approx-
imation techniques. in proceedings of ijcai-1  pages 1  1.
 lang  1  j. lang. logical preference representation and combinatorial vote. annals of mathematics and artificial intelligence  1 :1  1.
 papadimitriou  1  ch. papadimitriou. computational complexity. addison-wesley  1.
 wilson  1a  n. wilson. consistency and constrained optimisation for conditional p