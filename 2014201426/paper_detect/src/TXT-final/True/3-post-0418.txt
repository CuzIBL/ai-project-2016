
we present a fault-tolerant formula interpreter that aims at finding plausibly intended  formally correct and contextually meaningful specifications from user statements containing formal inaccuracies.
1 motivation
strong efforts are invested in supporting scientific publication environments in formal areas such as mathematics  with powerful tools  including semantically-informed editors and proof-checkers. similarly  several research activities aim at teaching reasoning and problem-solving skills in tutorial systems. in both settings  effective communication is frequently hindered by sloppiness and low-level errors in specifying formulas on behalf of the user  resp. student. hence  not only diagnosing errors in formulas  but also building hypotheses for correcting errors is an important issue  a difficult subproblem in mathematical knowledge management according to .
1 our working context
our interest in fault-tolerant formula interpretation originates from work on a tutorial system which teaches proving mathematical theorems . in this context  a corpus of written interactions with a simulated computer-based tutor in the domain of naive set theory has been collected . in this corpus  lengthy clarification subdialogs are often carried out to resolve low-level issues  which one wants to avoid since they distract the student from the higher-level tutorial goal.
모in table 1  we present examples of flawed formulas from the corpus. in  1   a segmentation error is shown: not only a space between the operator symbol p and identifier c  but also parentheses are missing.  1  is an example of a typing error  where an operator symbol p has been used in place of the identifier b. in  1   the types of arguments of the main operator are invalid.  1  shows a well-formed formula but it is not relevant in the context of the task: a stronger assertion about an intersection rather than union of the sets on the righthand side of the equation is required1. in  1   similarly to  1   a weaker operator of set inclusion     rather than equality is correct. finally   1  and  1  are examples of commonly confused relations of subset and membership.
table 1: examples of flawed formulas from the corpus
	example formula	error category 1 p  a뫋c 뫌 b뫋c   = pc뫋 a뫌b 1 1  p뫌a  뫍p a뫌b 1 1  x뫍b  1뫍a	x k a 1 1 p  a뫋c 뫌 b뫋c   = p a뫋c 뫋p b뫋c 1 1 p  a뫌b 뫋c  = p a뫌b 뫋p c 1 1  a뫌b   p a뫌b 1 1 if a k b  then a1뫍b1모in the context of the tutorial system mentioned above  the proof development environment  mega  is used to check validity of  possibly ambiguous  proof-step interpretations and consistency with the proof context. communication with  mega is mediated by a proof manager whose task is to build and maintain a representation of the constructed proof. the proof manager also maintains a discourse memory of identifiers  operators  and their properties  e.g.  type  arity .
1 error categories and correction attempts
finding purposeful changes in a formula that aim at building a corrected and possibly intended version of that formula is substantially guided by its correctness state. we distinguish three categoriesof errors: 1  logical  1  type  and 1  structural errors. a formula analyzer may find it impossible to build a formula analysis tree on the basis of the defined constructors  category 1   or to resolve a type mismatch in an analysis tree built successfully  category 1 . only for correctly analyzed formulas  consulting the proof manager yields a distinction between a formula expressing a wrong  category 1  or a correct statement. in case of an error  attempts are undertaken to remedy the error by applying local and contextually justified modifications to the formula. in order to obtain meaningful changes  we associate a set of replacement rules with each error category  aiming to achieve an improvement of at least one category level. each of these rules is justified by evidence about the plausibility of the given error occurring in the domain  the nature of the task  and user capabilities. some rules developed on the basis of errors observed in the corpus  their associated error categories  and examples are illustrated in table 1. testing applications of these rules is distributed between formula analysis and formula modifying algorithms.
table 1: replacement rules attempting to remedy errors

	replacement rules error categories	examples
dual operator1뫌 뫋          stronger/weaker operator1       =    =confused operator1  뫍  k  pconfused identifier1a b  p b  p adelete character1pc  p  pc  cinsert blank or brackets1pc  p c  pc  p c 1 the enhanced formula analysis
formula analysis is part of an input interpretation component whose task is to produce a representation that can be further analysed by the proof manager. the formula modification procedure presented here extends the method of parsing mathematical expressions embedded within natural language text . extendedformula analysis consists of:  1  identification of mathematical expressions within the word-tokenized text;  1  verification of the identified sequence as to syntactic validity and correction  in case of a parentheses mismatch or further tokenization needed; 1  1  parsing of the expression.
1. the mathematical expression tagger uses a list of operation and identifier symbols. identification of mathematical expressions is based on: single character tokens  including parenthesis   multiple-character tokens consisting only of known relevant characters  mathematical symbol unicodes  and new-line characters. multiplecharacter candidate tokens are further segmented into operators and identifiers by inserting the missing spaces.
1. once a candidate string is identified   chains  of formulas are separated into individual segments  and parentheses match is verified. missing parentheses are inserted while obeying to the following preferences:  i  provide parentheses for operators that require bracketed arguments   ii  avoid redundant parentheses  i.e. double parentheses around the same substring .
1. syntactically correct candidate strings are parsed by a tree-building algorithm accessing standard requisite information  e.g. list of operators and their precedence .
모the output is a set of formula trees with nodes marked as to type compatibility and bracketing where applicable.
1 the formula modifying algorithm
the algorithm incrementally generates formula modifications in a best-first fashion and tests their impact on resolving the original error  within specified resource limitations  that is  a maximum number of modified formulas and a time limit:
1. if the formula analyzer has produced a set of interpretations by applying rules addressing syntactic errors  these modifications are taken as successors of the original formula. otherwise  successors are generated for the formula considered best by applying replacement rules in the category associated with the error reported for the original formula  unless the error is already resolved.
1. if resources are not exceeded  the most promising successor of a formula generated so far is promoted into the new best one  and its correctness state is assessed by the proof manager  continuing at step 1. otherwise  an ordered list of modified formulas examined is returned.
모preferred orderings among created formulas are established by the error-related category and a similarity-assessing function  the former dominating the latter. the assessment function combines the number of replacement rules applied and the differences to the structurally most similar formula in the context  which comprises the set of formulas consisting of the goal expression  the previous proof step and possible follow-up steps. this function is approximated by simply adding the number of rule applications to the number of operators and variables appearing in both formulas compared  multiple occurrences counted according to their frequency.
1 preliminary results
finally  we give analyses of some examples from table 1. for utterance  1   we get two interpretations  depending on whether the formulaanalyzerseparates pc and inserts parentheses  1 alternatives   or whether it reports a type error  flagging pc. in the latter case  replacing pc by any type compatible identifier yields an error of category 1. the same holds for the parenthesis insertion with narrower scope  p c   but the other alternative  p c 뫋  a뫌b   yields no error and wins. example  1  is relatively simple  since only replacing the occurrence of p  flagged as a type clash  is to be changed. only replacements by a and b yield no error  b winning over a since it gets a better context agreement score. in utterance  1   many rules are applicable. changing variables gives lower agreement scores than changing an operator to its dual counterpart  but all these choices remain within error category 1. only replacing  =  by     resolves the error.
모in the future  we intend to look into other subdomains of mathematics and to incorporate results of formula modifications in tutorial strategies  e.g.  asking for clarification  offering a small set of modified formulas. similar interactions could be also tailored for scientific publication environments.
