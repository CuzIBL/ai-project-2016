
we investigate how inverse features can be added to a boolean complete description logic with pathfunctional dependencies in ways that avoid undecidability of the associated logical implication problem. in particular  we present two conditions that ensure the problem remains exptimecomplete. the first is syntactic in nature and limits the form that dependencies may have in argument terminologies. the second is a coherence condition on terminologies that is sufficiently weak to allow the transfer of relational and emerging objectoriented normalization techniques.
1	introduction
for many applications  there is considerable incentive to enhance the modeling utility of feature based description logics  dls  with an ability to capture richer varieties of uniqueness constraints such as keys and functional dependencies  dehaan et al.  1; khizder et al.  1; stanchev and weddell  1; toman and weddell  1b . unfortunately  in combination with feature or role inversion  the associated logical implication problem quickly becomes undecidable  calvanese et al.  1 . we investigate conditions under which inverse features can be added to a boolean complete dl with path-functional dependencies  pfds   weddell  1  without any consequent impact on the complexity of the associated logical implication problem.
　two conditions are presented that ensure this problem remains exptime-complete. the first is syntactic in nature and imposes a prefix condition on pfds that occur in argument terminologies. the condition complements and extends the results in  calvanese et al.  1  which considered the problem of adding keys and functional dependencies to a dl with predicates in place of roles. the second is a coherence condition on terminologies that allows unrestricted use of pfds  and is sufficiently weak to allow the formal specification of arbitrary relational or object-oriented schema  including those that fail to satisfy normalization conditions.

　　the support of nortel ltd. and of the canadian governments through nserc and cito is gratefully acknowledged.　this latter observation is important since it enables an incremental development of terminologies that encode schema. one can begin  for example  with a  relational  terminology that fails to satisfy the conditions of boyce-codd normal form.  the approach used in  calvanese et al.  1  is not generally capable of handling such anomalous cases.  standard normalizationalgorithms and methodology can then employreasoning services based on our results. thus  our dl together with coherence is better equipped to enable the transfer of results in normalization and emerging object design theory for relational and object-oriented data models  biskup et al.  1; biskup and polle  1 .
1	related work
our coherence conditionderives from a similar conditionproposed in  biskup and polle  1  to enable the development of a sound and complete axiomatization for an objectoriented data model  which essentially adds inclusion dependencies to a data model defined earlier in  weddell  1 . the dl we consider in this paper is a further generalization; thus  our exptime-completeness result settles an open problem on the decidability of the implication problem for their model.
　in  calvanese et al.  1   the authors consider a dl with  relational  functional dependencies together with a general form of keys called identification constraints. they show that their dialect is undecidable in the general case  but becomes decidable when unary functional dependencies are disallowed. we show undecidability in a simpler setting  in particular without the use of number restrictions. our prefix condition on pfds complements and extends their decidability result to more general pfds  and our coherency condition serves as an alternative method for regaining decidability.
　a form of key dependency with left-hand-side feature paths is considered for a dl coupled with various concrete domains  lutz et al.  1; lutz and milicic  1 . the authors explore how the complexity of satisfaction is influenced by the selection of a concrete domain together with various syntactic restrictions on the key dependencies themselves. in contrast  we consider a dl that admits more general kinds
of key constraints  and functional dependencies  for which identifying values can be defined on arbitrary domains.
the remainder of the paper is organized as follows. we begin by introducing the dl dialect that will be the focus of the remainder of the paper. the dialect is feature based and therefore more functional in style as opposed to the more common role based derivatives of . as a consequence  it becomes straightforwardto incorporate dependencies into the logic for capturing pfds. in section 1  we show that the combination of inverse features and arbitrary pfds in leads to the undecidability of its associated logical implication problem. our main results then follow in section 1 in which we consider two ways to recover decidability based on a prefix restriction condition for pfds in argument terminologies and on a coherency condition for terminologies. our summary comments follow in section 1.
1	preliminaries
definition 1  description logic   let and be setsoffeaturenamesandprimitiveconceptnames  respectively.apath expression isdefinedbythegrammar 
        for	.wedefinederivedconcept descriptions byasecondgrammarontheleft-hand-sideoffigure1. a conceptdescriptionobtainedbyusingthefinalproductionof thisgrammariscalledapath-functional dependency  pfd .
an inclusion dependency	is an expression of the form
       . a terminology consistsofafinitesetofinclusiondependencies.

	syntax	semantics:  	 

	figure 1: syntax and semantics of	.
the semantics of expressions is defined withrespect to a structure	  where	is a domain of  objects  and aninterpretationfunctionthatfixestheinterpretations ofprimitiveconcepts	to be subsetsof	and primitive features	tobetotalfunctions	. theinterpretationisextendedtopathexpressions 	  andderivedconceptdescriptions
and asdefinedontheright-hand-sideoffigure1.
aninterpretationsatisfies an inclusion dependency	if
           .thelogical implication problem asksif holds;thatis if	forallinterpretations thatsatisfyallconstraintsin .
for the remainder of the paper  we use the following abbreviated notation: is shorthand for  
and	for	for
             . we also identify single feature names with path descriptions and allow concatenation of path descriptions  to denote their composition .
　in addition  we classify constraints by the description on their right-hand side as pfds  when the right-hand side is of the form   and as simple constraints otherwise.
1	undecidability of	implication
we show a reduction of the unrestricted tiling problem to the implication problem using a construction similar to that presented in  calvanese et al.  1 . an unrestricted tiling problem is a triple where is a finite set of tile types and two binary relations. a solution to is a mapping n n such
that	and
for all n. this problem is -complete  berger  1; van emde boas  1 .
	1:  = ;o	1:  = ;	/1:  = ;o	1:  = ;	/1:  = ;
	o	o	o
		
	o	o
			
	1:  = ;o	/1:  = ;
figure 1: defining a grid.
　the first step in the reduction is to establish an integer grid. this can be achieved  for example  as follows.
1. introduce four disjoint concepts        and   denoting cell edges.
1. grid cells are mapped to concepts and that have four incoming and features  respectively.
1. to ensure that squares are formed  add the following.
1. and force squares to extend to the right and up by including the following.
the accumulated effect of these inclusion dependencies on an interpretation is illustrated in figure 1.
　the adjacency rules for the instance of the tilingproblem can now be captured  e.g.  as follows:
where	corresponds to a tile type	; we assume for all	. the above constraints form a terminology	associated with an unrestricted tiling problem	.
theorem 1 atilingproblem	admitsasolutioniff
.
thus  the implication problem is undecidable for unrestricted terminologies.
1	on recovering decidability
in this section  we present two ways to recover decidability for the logical implication problem based on a syntactic prefix condition for pfds occurring in argument terminologies and on a coherency condition for terminologies. decidability in both cases is shown by exhibiting a reduction of logical implication problems in to decidability problems of monadic sentences in the ackermann prefix class.
definition 1  monadic ackerman formulae  let	be monadic predicate symbols and	variables.	a monadic first-order formula in the ackermann class is a formulaoftheform	where isa quantifier-freeformulaoverthesymbols .
every formula with the ackermann prefix can be converted to skolem normal form: by replacing variables by skolem constants and by unary skolem functions not appearing in the original formula. this  together with standard boolean equivalences  yields a finite set of universally-quantified clauses containing at most one variable    .
　it is known that an ackerman sentence has a model if and only if it has a herbrand model; this allows us to use syntactic techniques for model construction. to establish the complexity bounds we use the following result for the satisfiability of ackermann formulae:
proposition 1   fu：rer  1   thecomplexityofthesatisfiabilityproblemforackermanformulaeisexptime-complete.
1	prefix-restricted pfds
recall that the first of our conditions is syntactic and applies to the argument pfds occurring in a terminology. this condition complements and extends the results in  calvanese et al.  1 . however  because of  accidental common prefixes   it is not sufficient to follow the approach in  calvanese et al.  1 of simply requiringunary pfds to resemble keys. nonunary pfds can also cause trouble  as the following example illustrates.
example 1 consider the	-ary pfd
this pfd has a logical consequence and thus we can construct tiling similar to the one presented in the previous section.
the problem with the above -ary pfd is that all the paths in the precondition have the same prefix  . to avoid this problem  it suffices to impose the following prefix condition. definition 1  prefix-restricted pfds  let
beanarbitrarypfdwhere isthemaximalcommonprefix ofthepathexpressions . thepfdis prefix-restricted ifeither isaprefixof or isaprefix of .
the above restriction allows us to recover an almost treemodel property for the logic. by using this restriction  we are able to construct special interpretations that satisfies all constraints in a given terminology but falsify a pfd constraint whenever an interpretation exists at all-essentially  the interpretation has the shape of two trees rooted by the two elements of the domain that provide an counterexample to the given pfd. to capture the effect of equalities implied by pfds  the two trees are allowed to share nodes that are in the range of the same path function applied to the respective roots. in addition  we are able to bound the indegree branching in such an interpretation.
definition 1  rank of implication problem  let	be a terminology  aconstraint.wedefine
tobethenumberofoccurrencesofthe conceptconstructorsin and .
the limits the maximal number of different predecessors needed to satisfy all constraints in the terminology. the above observations provide the necessary tools for describing a single herbrand interpretation with a fixed branching outdegree using monadic sentences that simulate the  special  interpretation showing that .
　in the herbrand interpretation  each term represents two elements  a left element and a right element of the original interpretation  unless these two elements are made equal by the effect of a pfd. we use the following unary predicates and function symbols:
unary function symbols	 representing a feature	  and
                representing the possible inverses of   for each feature . these function symbols are used  together with the constant denoting the two roots in the original interpretation  to form terms. we overload the notation for path descriptions and use to denote terms as well.
predicates and true for representing elements that exist in the left and right parts of the original interpretation; these emulate partiality of the inverses.
predicates and that are true for that represent elements belongingto the description in the respective parts of the original interpretation.
predicates true for whenever the two elements denoted by agree on in the original interpretation.
to ensure a finite number of assertions  we assume in the following that concept descriptions and features are subconcepts of concepts or are features appearing in and . we call the followingcollection of assertions  assertions with a superscript stand for a pair of assertions  one with substituted by and one by  :
1. totality of features: each object must have one outgoing feature .
for
1. functionality of features: each element has at most one outgoing feature .
1. rules of equality: equalities propagate through function application  equal nodes have the same predecessors  must exist  and must belong to the same descriptions.
1. concept formation-boolean constructors: enforce the excluded-middle law and the correct behavior of conjunction.
1. concept formation-value restrictions: assert value restrictions for pairs of neighboring nodes.
1. concept formation-existential restrictions: satisfy existential restrictions for inverses. note that in the case of the left and right sides of the interpretations agreeing  the appropriate predecessor can be on either side of the interpretation  first two assertions .
1. satisfaction of simple constraints in the terminology  gcds : enforce simple subsumption constraints present in .
for
1. satisfaction of prefix-restricted pfds by inverses: disallow violations of prefix-restricted pfds due to existence of multiple inverse features agreeing on a node.
for all	such that is the common prefix of .
1. path agreements: extend the simple equality to assertions of two nodes agreeing on a path; this is necessary to avoid exponential blowup in the length of the path descriptions in the pfds.
where ranges over all prefixes of path descriptions in 's pfds.
1. prefix-restricted pfds: enforce pfds between the left and right parts of the interpretation.
	for all	.
the above assertions simulate the constraints implied by
.	to capture the violation of the constraint	we
set
ordinary andfor
	for	a pfd.theorem 1 letbea	terminologyand acon-straint.thenifandonlyif	isnotsatisfiable.proof  sketch :	consider a model	of	. we con-

struct an interpretation as follows: let     and be distinct values for each term .
	for	 
it is easy to verify that this interpretation satisfies all constraints in and violates . thus .
conversely  given an interpretation such that and   we construct a model of as follows.
for	a pfd  there must
be elements	such that	and
	such that	for	but
.
we first define a part of the interpretation that consists of successors of and :
this part of violates and satisfies all constraints in with the exception of the . we extend to satisfy the existential restrictions as follows:
for such that and . we chose predecessors of that satisfy all implied existential restrictions. and identify these with the terms and set
	for all the chosen	predecessors of	for
　　. for all the terms we extract a tree interpretation from . similarly  we extend on the right side.
for such that we follow the same steps as above for the left part only.
note that since satisfies all  translations of  ordinary constraints are satisfied and no pair of nodes on the left/rightsides can violate a prefix-restricted pfd thus satisfying constraints generated from pfds  1 above .
for a simple constraint  there must be an element such that and . we define using the same process as above noting that the two roots and are already equal in .
as a side-effect of the above construction  we can now transform an arbitrary interpretation that satisfies and violates to an almost-tree interpretation informally referred to above in order to motivate the monadic assertions in and .
　the translation  in itself polynomial  therefore provides an exptime decision procedure by appealing to proposition 1. completeness follows from exptime-hardness of the implication problem for the fragment
 toman and weddell  1; 1b .
corollary 1 the implication problem for	with prefix-restrictedpfdsisexptime-complete.
using similar techniques  the concept constructor can be generalized to more general number restrictions requiringlower and upper bounds  coded in binary  on the number of predecessors while still maintaining the complexity bound.
1	coherent terminologies
the second of our conditions for recovering decidability is to impose a coherency condition on terminologies themselves. the main advantage of this approach is that we thereby regain the ability for unrestricted use of pfds in terminologies. the disadvantage is roughly that there is a  single use  restriction on using feature inversions in terminologies.
definition 1  coherent terminology  aterminology is coherent if
foralldescriptions thatappearassubconceptsofconceptsthatappearin  ortheirnegations.
note that we can syntactically guarantee that is coherent by adding the	assertions to for all descriptions that appear in . this restriction allows us to construct interpretations of non-pfd descriptions that have the following property:
definition 1 aninterpretationis coherent if forany	 description	and and	. 	iflemma 1 let beacoherentterminology  asimpleconstraint and aninterpretationsuchthat and .
thenthereisacoherentinterpretation suchthat and	.
proof  sketch : consider distinct	such that  i 

	   ii 	  and  iii 	. then 
since	is coherent 	. for 
leads to	  a contradiction. thus  as models of have the tree model property  we can remove the farther of or and all its descendants  where the distance is measured from the node falsifying in . the resulting interpretation still satisfies and falsifies . repeating this process yields a coherent interpretation.
by restricting logical implication problems for to cases in which terminologies are coherent  it becomes possible to apply reductions to satisfiability problems for ackerman formulae.
theorem 1 let	be a coherent	terminology.
then the implication problem	is decidable and exptime-complete.
proof  sketch :	we use a reduction similar to the one for

prefix-restricted terminologies. however  as the terminology is coherent  in the left and right parts of the interpretation objects can never have more then one incoming feature with the same name and thus a single inverse for is always sufficient to model this situation using the monadic formulas. also  the left and right sides of the interpretation vacuously satisfy all pfds  and thus the assertions in item 1 can be dropped . the interaction between pfds and inverses is now completely captured by the auxiliary predicates. for details see  toman and weddell  1a .
note that we cannot consider coherent interpretations only as then all pfds would be vacuously satisfied-no two nodes could possibly agree on a common path. this would make all pfds trivial coherent consequences  i.e.  when only coherent interpretations are considered . our coherency restriction on terminologies is weaker: it only postulates that we can avoid multiple predecessors if we wish to do so.
1	summary and future work
we have presented a pair of conditions  one syntactic and one semantic  under which it becomes possible to combine feature inversion with path-functional dependencies in a boolean complete descriptionlogic while still ensuring that the associated logical implication problem is exptime-complete; the problem is shown to be undecidable otherwise. the second of these conditions resolves an open issue on decidability of an analogous implication problem in  biskup and polle  1 .
　a natural extension of the description logic presented here allows regular languages     to replace path expressions  yielding the       and constructors  and developing a decision procedure using the approach in  toman and weddell  1b . one of the main applications of such an extension we envision is describing data structures for purposes of query optimization  extending  liu et al.  1  to inductive data types.
　another direction of research considers weaker restrictions on terminologies that still guarantee decidability  e.g.  relaxing our coherence condition with respect to the unary pfds actually present in a terminology.
