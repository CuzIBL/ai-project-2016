 
　　　in this paper we present a symbolic evaluator of lisp functions. it can handle data-altering functions of the rplaca type  i.e. functions that change one datastructure by replacing parts of it by other structures that w i l l themselves not be changed further  at least not permanently. the state description language uses first-order predicate calculus. it is argued that symbolic evaluation in terms of this language  although theoretically adequate  is not feasible in general  since it may require extremely complicated specifications for r e a l - l i f e functions with side effects. examples are given of the specifications needed to verify several versions of substad  a non-copying subst. 
keywords; lisp  symbolic evaluation  verification of data-altering functions  predicate calculus  frame problem. 
1  introduction 
　　　in 1 we published substad  a non-copying version of subst   1   . comparison of these two functions in the context of a unification algorithm showed some very favorable results. two years later we found out that the results were biased by a bug in our machine implementation of subst. 
　　　this experience increased our interest in verification  in particular of functions with side effects  such as substad. these functions pose a challenge to verifiers. one simple rplaca can have consequences for every datastructure around. 
　　　very few practical  ready-to-use techniques are available at present. the theoreticians of program verification  for an overview  see   are developing languages  dynamic logic e.g.  that abstract away from real application  concern toy-like programming languages and tend to be considered as interesting objects by themselves. 
　　　more promising seem concrete efforts like that of topor   1     who verified the correctness of the schorr-waite marking algorithm  an algorithm somewhat similar to substad. his proof by hand is reasonable to follow  but we are interested in actually automating the verification process as much as possible. 
economics  university of amsterdam 
　　　we developed a program that can keep track of the many details involved when checking a l l possible branches of computation trees. we have chosen the method of symbolic evaluation  1   because it guarantees that every branch is visited and that a l l preconditions to operations are considered. 
　　　symbolic evaluation requires the addition of input/output specifications to the program code and of invariants to each loop in that code. the code is evaluated with symbolic input values that conform to the input specification  producing a symbolic output value for each branch through the code. the symbolic evaluator should embody the semantics of the operators used in the code  in our case  at least  the subset of lisp primitives used in substad. for each of those operators it should be able to transform the description of the state in which this operator is called into a description of the state it creates. 
　　　it has to be verified that a l l of the output values produced are in accordance with the output condition. this  as well as checking entry and loop conditions  can be done  manually  or by a theorem prover. although we have been experimenting with cogito  our theorem prover  for results see   1       our conoern here is the automatic updating concerning funotions with side effects  like rplaca. for details on the actual proofs  by hand  see   1   . 
1. the state description language 
　　　in order to f a c i l i t a t e deduction  the state description language uses first-order predicate calculus. we start off with a countable domain of cells c and a countable domain of atoms a  where c and a are disjunct. let d be their union: 
d = c u a. we w i l l have the partial functions: 
- car and cdr  with domain c and range d; and 
- addr  	with 	domain 	d 	and range n  the natural numbers. 
we w i l l have the partial predicate: 
- atom with domain d  and which  where defined  coincides with the characteristic predicate of 
a. 


1 

a code pointer  corresponding to a program counter  to that part of the code which has to be executed  it contains modules which correspond to b u i l t - i n lisp funotions and it knows what to do with user defined functions. 
　　　a non-numerical atomic form is evaluated by retrieving the most recent   i . e . leftmost  binding from the current a l i s t . 
　　　for b u i l t - i n functions  the recipe consists of checking whether preconditions  parametrized for the current arguments  are f u l f i l l e d and  if the check succeeds  updating the state configuration. an exception is made for cond. the cond-module generates one or more bifurcations of the current state configuration. the correctness of a bifurcation   s a t i s f i a b i l i t y of a test expression and i t s negation  is not proven by means of the deduction machinery but by constructing or having available two models that possess opposite truth values with respect to the test expression but are both consistent with the current state configuration. to construct these models one could ask the user to provide several examples  which are processed concurrently with the symbolic input specification for the code  not implemented . 
testing by running examples and formal verification should not be seen as mutually exclusive  but should go hand in hand. 
　　　modules are implemented for the following subset of standard lisp functions: atom  car  cdr  cond  cons  eq  equal  go  not  null  prog  progn  
quote  return  rplaca  rplacd and setq. the functions cond  go  prog  progn  quote and setq are of type fsubr  i.e. evaluation of their arguments is to their own discretion. the other functions have automatic - l e f t to right - argument evaluation before module-specific actions are taken. 
　　　an essential requirement for the modules is that the compatability property of state configurations is preserved. our only worry is rplaca  rplacd and setq beoause only those functions affect the a l i s t . we w i l l describe some of the modules. 
atom 
let the argument of atom evaluate to x. a new symbolic value w i l l be generated  say g1  which w i l l be returned as the value  while the fact l i s t w i l l be expanded with: 
{ g1=t & atom x  } + { g1=nil & ~atom x  }. 
　　　the implemented version deals immediately with the atomicity of x. it returns t or n i l when atomicity or non atomicity of x can easily be derived from the given fact l i s t   otherwise the user is asked to indicate whether t  n i l or both possibilities are to be pursued. in this last case  it generates a bifurcation of the current computation branch with t in one and n i l in the other branch  adding either atom x  or ~atom x  to the respective f a c t l i s t . 
car  and analogously cdr  
let the argument of car evaluate to x. in contrast with atom there is a precondition check for car: ~atom x  should be derivable from the current fact l i s t . if that derivation succeeds a new symbolic value  say g1  is generated and returned and g1 car x  is added to the faot l i s t . 
cond 
this function leads to bifurcation s  of the current computation branch  as described for the implemented version of atom. 
cons 
let the arguments of cons evaluate to x and y. a new symbolic value  say g1  is generated and w i l l be returned  while the fact l i s t w i l l be extended with: ~atom g1   car g1 =x and edr g1 *y. 
go 
we assume only backward jumps. the loop invariant associated with the label to which go refers  provided by the user and parametrized for the current bindings by the evaluator  should be derivable from the current fact l i s t . a non-looping check  based on a well founded relation should also be performed. because jumps are always backwards  we do not have to consider the current computation branch any further. 
rplaca  and analogously rplacd  
let 	the 	arguments 	of rplaca evaluate to x and y. 
the precondition for rplaca is ~atom x . a new symbolic value  say g1  is generated and returned  while the fact l i s t is extended with: eqa x g1   car g1 *y and cdr g1 =cdr x . 
any non-atomic binding z1 on the a l i s t   identical to x or  above* x  w i l l be affected indirectly by the rplaca operation and has to be replaced by a new binding z1 for which minimally holds: eqa z1 z1 . in general: when a rplacx operation causes x1 to be replaced by x1 then each binding on the a l i s t   y 1   w i l l be replaced by a fresh binding  y1  while the fact l i s t w i l l grow with: eqaupto y1 y1 x1 x1   which says: y1 is identical with y1 unless there is a substructure of y1 that is identical with x 1 . the predicate eqaupto is defined as: 


1 

　　　these lemmas oan be used to curb updating a c t i v i t i e s . for proofs of these and other lemma's and theorems  see   1   . 
theorem 1 let y1 and z1 be old bindings which are respectively replaced by y1 and z1 due to an rplacx-operation that caused x1 to be changed into x1  thus with eqa x1 x1   then compatible y1 z1   eqaupto y1 y1 x1 x1  and eqaupto z1 z1 x1fx1  implies compatible y1yz1 . 
setq 
let the second argument evaluate to x. the precondition for setq is that the non-evaluated f i r s t argument is atomic  say a. the binding of the leftmost occurrence of a on the a l l s t w i l l be replaced by x. if a does not occur on the a l i s t -
i.e. when a is a global variable - then  a.x  w i l l be added at the righthand side of the a l l s t . preservation of alist-compatability is ensured when the evaluation of the second argument yields a value compatible with the current bindings. 
　　　the modules not described trigger obvious updatings.  for the equal predicate needed by the equal module  see .  
1  user functions 
　　　most lisp functions to be verified w i l l contain functions other than the above mentioned primitive ones. these are provided either by the user or are b u i l t - i n . they can be handled by the evaluator if they are accompanied by an input and an output condition. 
　　　the symbolic evaluator f i r s t asks for  and tries to assist with  a check that the input condition is f u l f i l l e d and then looks whether the user wishes this function to be verified. if so  she w i l l have to provide i t s body. recursive user functions w i l l be opened at most once  for obvious reasons. a well-founded relation  user provided  should be used when verifying that arguments of a recursive call score s t r i c t l y less with respect to that well-founded relation than the arguments at the top level c a l l . this was not implemented. 
　　　an output condition should describe the resulting state in terms of the values used in the input condition to enable the symbolic evaluetor to update the state configuration in which the function was called. this updating is straigthforward when the function does not have side effects and just returns a value  but b u i l t - i n and user functions of rplacx-type need even more complicated a l i s t updating schemes than the one given above for rplacx. 
　　　suppose we execute  nconc lis s1   where the bindings of lis and s1 are respectively l i s and s 1 . the rightmost leaf of s i   which must be nil  w i l l be replaced by a pointer to i t s second argument s1. any datastruoture containing a pointer to l i s or to a cell lying on i t s 'spine'   i . e . the cdr chain starting at l i s   w i l l be changed as a consequence of this nconc operation. 
　　　we w i l l describe an a l i s t update scheme for a class of side effect generating functions  including nconc  efface and our substad support functions substad1 and substad1. it applies to those functions which cause replacement of a c e l l   say x1  by a c e l l   say x1   thus we have eqa x1 x1  . 
1 　　　every binding  z1  on the a l i s t is replaced by a fresh binding  z1  and the fact l i s t is expanded with: transf z1 z1 x1 x1 . the predicate transf and i t s supporting predicate tr1 and tr1 works by double recursion. first  it is checked whether z1 is identical with x1 or - using tr1 - with a cell reachable from x l . if the tr1-case applies the predioate tr1 is invoked to relate z1 and z1. second  when z1 is not identical with x1 or a subcell of x1 then transf is called recursively to test whether subcells of z1 are affected by the x1-x1 replacement. 


　　　theorem 1 let y1 and z1 be old bindings which are respectively replaced by y1 and z1 due to an side-effect operation causing x1 to be changed into x1  thus with eqa x1 x1   then eoapatible y1 z1   transf y1 y1 x1 x1  and transf z1 *1 x1 x1  implies compatible y1 z1 . 
　　　the limitations of this updating scheme can be seen from the function 
nc1nc1  defined as: 
 nc1nc1 lambda lis1 lis1 s1  
　　　 nconc lisknconc lis1 s1     a binding referring to the * spine' of the input binding of lis1 cannot be recognized and therefore w i l l not be updated  although it is not up-to-date anymore. 
　　　we conclude that the user must be given the option to specify a specific  idiosyncratic a l i s t update mechanism for any funotion having side effects. this w i l l considerably increase the verification burden  since it w i l l have to be shown that the compatibility requirement for the updated alist i s f u l f i l l e d . 
1. 	evaluting 	svbstap 
　　　to give an impression of the feasibility of the method of symbolic evaluation as introduced above  we w i l l discuss our effort to verify substad. this function is called with three arguments: s1  lat and s1. it replaces al occurrences of lat in s1 by s1. the value of lat should be a non-numeric atom. this is checked by substad  which also handles the case that s1 is atomic. otherwise it calls a support function with one argument  s1. 
　　　the support function published in  uses pointer reversal to avoid the use of a stack  as is done in garbage collectors. before discussing this function  we w i l l make some remarks on the verification of two simpler versions  to show how the method works and to illustrate how a slight modification in a program can lead to substantial differences in i t s verification. 

the preconditions are: 
- the binding of s1  say vs1  is not atomic; - the binding of lat  say lat  is atomic; and - lat is not a leaf of the binding of s1  say vs1. this last precondition is meant to prevent the introduction of cycles. 
　　　to simplify the proofs  we w i l l assume that vs1 does not share substructure with vs1. consequently  lemma 1 w i l l apply and therefore updating of the s1 binding w i l l never happen.  when vs1 does share structure we can s t i l l invoke lemma 1  since lat is not a leaf of vs1.  
　　　since we assume the preconditions to hold  the faot l i s t w i l l  implicitely  contain: atom lat  & ~atom vs1  * ~partof lat vs1 . 
the input a l l s t i s :   s1.vs1   lat.lat   s1.vs1  . assume 	the output a l l s t to be:   s1.vs1   lat.lat   s1.nvs1  . 
the output assertion to be verified w i l l be: 
replacedd vs1 lat vs1 nvs1   with replaoedd  replacement with potential destruction of vs1  defined as: 

there are 1 different paths through the code. we w i l l work our way along one of the paths. 
　　　i n i t i a l l y the fact l i s t contains: atom lat  &   atom vs1  1 -partof lat vs1 . assuming that  atom car s1   yields t we get in addition: xarcar vs1  & atom xa . 
assuming that  eq lat car s1   	yields 	t 	we 	get: latexa. 
rplaca generates a new value  say nv1  adding: eqa nv1 vs1  & car nv1  vs1 cdr nv1 scdr vs1 . the a l l s t update scheme for rplaca generates a new binding for s1  say ivs1  so the a l l s t becomes: 
  sl.vsd  lat.lat   s1.ivs1    while the fact l i s t grows with: eqaupto vs1 ivs1.vs1 nv1 . 
assuming that  atom cdr s1   yields nil we get: xdscdr ivs1  * ~atom xd . 
the next action concerns the recursive call on the cdr. its parametrized and simplified input condition: 
1  atom xd  & atom lat  &  partof lat vsd   is t r i v i a l l y satisfied. the function w i l l not be opened  but instead the faot l i s t grows with: replaoedd vs1 lat xd nxd  & transf ivs1 jvs1 xd nxd   
while 	the 	a l l s t changes into:   s1.vs1   lat.lat   s1.jvs1  . 
the output assertion to be proven for this particular path i s : replacedd vs 1 lat vs1 jvs1   
　　　we w i l l not give proofs. the general strategy in this and following oases is a combination of subproblem recognition  case reasoning  expansion of recursive definitions and application of oar/cdr induction. 
1. substap1 
　　　the treatment of substad1 as given above was slightly incorrect  although this did not affect the result. upon entry of substad1 the a l i s t is in faot: 
  s1.vs1   s1.vs1   lat.lat   s1.vs1    where the f i r s t occurrence of s1 cones from substad1 and the second one from sub1tad. the output assertion of substad1 did refer to the second occurrence of vs1- this more subtle treatment of the a l i s t is essential for the half recursive half iterative support function substad1. 
 substad1 lambda s1  prog hh  
again 
 cond  atom sbtq hh car s1    
 condueq lat hhhrplaca s1 s1     
 t substad1 hh    
 cond  atom setq hh cdr s1    
 cond  eq lat hh  rplacd s1 si     
 t sbto s1 hh  
 go again    
    
　　　because of the assignment of the local s1 to i t s cdr just before the loop  we no longer have a handle on the datastructure as a whole  to which we must be able to refer in order to specify the loop invariant and to enable a correct update of the calling environment after exiting substad1. the problem is solved by refering to the global s1  the argument with which substad1 is called.  in general a pre-prooessor should take care that a l l arguments given to user defined functions are expllcltely assigned on the a l i s t .   
　　　verifying substad1 requires deducing the loop invariant when oontrol reaches the label again upon entering the function  deducing the output assertion for six paths through the oode and deducing the loop invariant for three paths. 
　　　the input a l i s t is as given above. the output a l i s t   after exiting from substad1 w i l l be: us1.vs1   lat.lat   s1.nvs1  . 
the input and output assertion are the same as for substad1. we have to provide a loop invariant with the label again. this loop assertion w i l l refer to the current bindings of the variables  so we also have to specify an a l i s t at the label: 
  hh.vhh   s1s1   sl.vsl   lat.lat   s1.gs1   the value ls1 is the local value of s1  and gs1 is the global value of s1. the loop assertion w i l l be: atom lat  & ~atom ls1  & ~atom vs1  & 
~partof lat vs1  & spine vs1 lat vs1 gs1 ls1 . 
　　　we w i l l not give the definitions of spine and other support predicates. giving a general description of the situation at the label is rather complicated  since it is not enough to say that every tree hanging off the spine above the local s1 has been checked and replaced if necessary. structure sharing may have led to changes in the part of the tree that is s t i l l to be investigated. it may even have caused the replacement of the right most leaf of vs1 by a pointer to vs1  so s1 may eventually point to a cell for which there is no corresponding cell in the original vs1. 
　　　we w i l l just give one definition as an example  for the others we again refer to   1   . the predicate sidefct is used to describe that xp and xq  which are parts of the not yet visited subtrees x1 and xl of the original  xo  and current  xn  incarnation  are the same unless structure sharing has led to side effects. 
 xo  xn  x1  xso  xsn  xp  xq  
{ sidefct xo xn x1 xso xsn xp xq   --  
 eqa xp xq  & 
{xsosx1 -  
 {atom car xp   -  car xp scar xq } & 
{~atom car xp   -  sidefct xo xn x1 xo xn car xp  car xq  } & 
{atom cdr xp   -  cdr xp scdr xq } & 
{~atom cdr xp   -  sidefct xo xn x1 xo xn cdr xp  cdr xq  } } & 
{~ xso=x1  -  
  car xso sxp -  car xsn sxq  & 
 ~ car xso rxp  -  
  {tr1 xp car xso  car xsn   -  tr1 xp xq oar xso  car xsn  } & 
 ~tr1 xp car xao  car xsn   -  sidefct xo xn x1 cdr xso  cdr xsn  xp xq }  
　　　symbolic evaluation of substad1 generates fact l i s t s that are much longer than those generated for substad1  since the a l i s t in this case contains three arguments  hh  local s1 and global s1  that have to be updated after an rplacx or a recursive call to substad1. this  and the greater amount of predicates needed to specify the loop invariant  made verification of this function just barely feasible. the great difference in verification effort caused by a slight change in the code  challenges the claim that once a program is verified  modifications w i l l require very l i t t l e additional effort. 
1. substadp 
　　　the 	disparity 	between 	amount 	of 	oode 	and amount 	of 	ad 	hoc 	definitions 	is even worse for substadp: 
1 

　　　in this version  the use of a stack is avoided by reversing pointers  i.e. when the car or cdr part of a cell is non-atomic  this part is saved  while the car or cdr is replaced by a pointer back to the parent cell immediately above i t . marking is used to indicate whether the car or the cdr part of the cell contains the reversed pointer. the tree is searched in a depth f i r s t manner. 
　　　the code contains three labels  so in addition to the input and output assertion we have to set up three loop invariants. describing the situation at the various loops is extremely complicated because of the much greater number of  temporary  replacements. 
　　　we defined the predicates that are necessary to describe the situation at one label  l1  assuming that vs1 is atomic. even with this drastic simplification  we needed a staggering amount of definitions: eleven predicates  several of them with seven arguments and totalling nearly 1 lines of text  see   1     . to get an impression of what is involved  glance at the definitions of two predicates  ib1at1 and its support ib1at1. they describe the subtrees hanging off the spine above the inverted pointer chain. 
1 

　　　when nwsex  we can describe it with replaoedd  keeping in mind whether i t s car  markb  or i t s cdr   markb  contains the back pointer. 
　　　if nw lies somewhere else on the inverted pointer chain and the non-reversed pointer points to an atomic structure  describing this part is straigthforward. however  if it is non-atomic  we have to recursively invoke ib1at1  because structure sharing between that part of nw and the reversed pointer chain is again possible. 
　　　to describe the part originally pointed to by the now reversed pointer  we have to use existential quantification. we do not have a direct pointer to i t   but we know were to start  at ex  and we know i t s unique identification: eqa icel car ol  . this identification is part of ib1at1. 
　　　possible structure sharing similarly complicates the description of subtrees on the inverted pointer chain  under 1 or to the right of the inverted pointer chain. 
1. 	discussion 
　　　although we were able to write a symbolic evaluator that can handle the functions we were interested in  and no doubt a host of others   it was not possible to give a completely general update algorithm to handle a l l rplacx-type functions. we defined one for a common class  in which one datastrueture is changed by replacing certain subparts by other dataatructures that w i l l not themselves be mutated before the function is exited  at least not permanently . to make the verifier a general one  it should allow the user to specify her own update procedures in other cases. since compatibility w i l l have to be proven by the user in those cases  this places a rather heavy burden on her. 
　　　the algorithm given is extremely oareful  replacing a l l bindings on the aliat after every call to an rplacx-type function. this has i t s price. updated bindings need potentially complicated proofs to show their invariance  even though it may be very obvious  to us  that in fact they could not have been changed at a l l . of course one could keep the number of updated bindings down by incorporating the lemma's given above and other specific knowledge into the evaluator  but this would amount to pushing the problem around. 
　　　the attempt to give correctness proofs for several versions of substad revealed that the method of symbolic evaluation - although theoretically adequate - flounders in some cases on a practical problem: formal description of input/output statements as well as loop invariants leads to a proliferation of ad hoc definitions. we expect this to hold for a l l currently available verification techniques. if so  verification specialists may be advlced to give more attention to the practical implications of their theories  instead of devoting a l l their energies to esoteric refinements  or even to the design of logics that become an end in themselves. 
　　　the bottle-neck lies in the necessity to specify in state-description terms what a function is supposed to do. whether a funotion is recursive or not is not even explicitly expressible in such a specification. somehow people feel more akin to a definition in procedural terms  such as  the terminals equal to lat w i l l be replaced by vs1  and 
w the tree w i l l be visited from l e f t to right . proving correctness of a function would then 
'reduce' to showing that the function behaves according to expectations rather than that input/output description pairs conform to a certain relation. 
　　　the technique we have developed for describing evolving states using an a l i a t   a fact l i s t and predictates like equaupto and transf that capture specific side effects  may be of interest to other areas of a . i . . the a l i s t oan be considered a collection of individual concepts  where the bindings are the actual extensions. a new situation differs primarily in that some concepts have different extensions  which are described by fresh facts. outdated facts do not have to be deleted but merely become invisible since they contain arguments not residing on the alist any longer. 
　　　this more procedural approach to the frame problem seems to have advantages over the s t r i c t l y declarative method given in   1   . there is no need for wieldy axioms to express that when p x ... z s1  holds in situation s1 and some conditions are f u l f i l l e d   the fact p x ... v z v s1  can be inferred in s1. instead we have a different problem. a fact may seem to be obsolete  since an argument has been removed from the a l i s t   while an analogous fact can be inferred for a newly introduced extension. we have encountered this in lemma 1  where particular circumstances allow one 
to equate the old and new binding. 
　　　since updatings and the recognition of identities are object centered and therefore may affect many facts simultaneously  this problem seems less obstructive than the original one  but more thinking and/or experimenting is needed to validate this suggestion. 
　　　although we agree with de millo e.a.  that the present verification tools do not lend themselves to practical use  we do not share their conclusion that the whole effort should be abandoned. verifiers w i l l probably always run into resource limitations  but to assume that they w i l l never be able to use meohanisms similar to those that enable humans to circumvent some of these limitationa for certain tasks  without sacrificing preciseness  seems premature. 
finally  it pays to 	have 	a 	second 	look 	at one's 	program 	from 	a 	verification 	perspective. 
1 

writing this paper forced us to reconsider the conditions under which the function substad is applicable. the specification that we published five years ago turned out to be too l i b e r a l ! 
