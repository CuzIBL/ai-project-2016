   
a theorem prover for part of arithmetic in described which proves theorems by representing them in the form of a diagram or network. the nodes of this network represent 'ideal integers'  i.e. objects which have a l l the properties of integers  without being any parti-
cular intoger. the links in the network represent relationships between 'ideal integers'. the procedures which draw these diagrams make elementary deductions based on their built-in knowledge of the functions and predicates of arithmetic. this theorem prover is intended as a model of some kinds of human problemsolving behaviour. 
descriptive terms. 
theorem proving  heuristic method  representation  psychological modelling  semantic network  arithmetic  ideal integer  logic  semantic: tableaux. 
1. motivation. 
the objective of this work is to investigate human problem-solving behaviour by trying to simulate it on a machine. the main source of information about human behaviour is s t i l l self-observation and so the author 
has deliberately chosen a domain in which he has some experience  arithmetic  see 1 . arithmetic hus the additional advantage that as one of the oldest branches of mathematics it is rich in proof techniques and easily stated but d i f f i c u l t theorems  e.g. format's last theorem . also an efficient arithmetic theorem prover is likely to find applications in program correctness proof1. 
1. introduction. 
this is a report of work in progress. it describes what i s   to the best of the author's knowledge  a new kind of automatic theorem prover  called sums  a system which understands mathematical symbols . sums does not explicitly use axioms or rules of inference to prove theorems. instead it represents the candidate theorem as a network  or diagram  in which the nodes are the property lists of arithmetic terms and the links describe relationships  e.g. =    |  between them. statements are asserted by adding new links and proved by accessing the diagram. knowledge about arithmetic is b u i l t into the procedures that draw the diagram so that when links are added to i t   elementary deductions are made  and more links added  automatically. 
the domain of sums is the elementary theory of natural numbers   i . e . the arithmetic of the non-negative integers . at present it can only handle the classes of terms and formulae defined below; 
　　　 a  an arbitrary skolem constant or natural number is a term. 
　　　 b  if a and b are terms then suc a  ; pre a ; a + b; a - b and a x. b are terms. 
1 

fig. 1. 
　　　 c  replace: 	a slot used in the copying of diagrams. 



each node is a record with 1 slots called and containing: 
      a  smaller: a l i s t of pairs of entries. the front of each pair represents a term smaller than the 
present one; the back represents the distance between them. 
      b  bigger: similar to  a  except that the front of each pair is the entry of a term bigger than the 
present one. 
     {c  unequal: a list of entries representing terms known to be unequal to the present one. 
      d  factor: similar to  a  except thnt the front of each pair is the entry of a term which exactly divides the present one  and the back is the entry representing the quotient produced. 
      e  multiple: similar to  d  except that the front of each pair is the entry of a term which the present term exactly divides. 
      f  mark; 	a slot used for markers when measurements are being made in the diagram. 
1. the program. 
in order to distinguish functions in sums from functions in arithmetic  we w i l l call the former procedures. 
there arc four classes of top level procedures arranged roughly in a hierarchy. they are: 
      a  logical procedures: which analyse the original formula and decide which atomic formulae to assert and which to prove. 
      b  drawing procedures: which analyse the terms in the formulae  draw them in the diagram and assert relationships between them. 
      c  asserting procedures: 	which make relationships between terms hold in the diagram by adding links. 
      d  interrogating procedures: which discover whether relationships between terms hold by accessing the diagram. 
 i  the logical procedures. 
after the i n i t i a l diagram has been created all negations are eliminated from the candidate tliooreni by passing them down to  and absorbing them .into  the atomic formulae. i.e. each negated atomic formula 
-s x1 ...xn  is replaced by # x1 xn  . the candidate  p  is then passed to the procedure 'prove' whose description follows. 
to prove p: 
      a  if p is a conjunction of atomic formulae  i t s terms are drawn in the diagram  which is then interro-
gated to see if p is true. 
      b  if p is of the form q & r then a copy of the diagram is made. 	q is proved in the f i r s t diagram and r in the second. 
      c  if p is of the form q v r  or q - e  then we assert -q  q  in the diagram and prove r. 
      d  if p is of the form qr then a copy of the diagram is made. in the f i r s t diagram  q is asserted and r is proved; in the second r is asserted and ft proved. 
to assert a formula in the diagram the following procedure is called. 
to assert p: 
　　　 a  if p is already true in the diagram then the procedure is exited. 
　　　 b  if p is already false the diagram is closed  by making it contradictory  and the procedure exited. 
　　　 c  if f is atomic  its subterms are drawn  and it i-. made true in the diagram by calling an appropriate asserting procedure. 
　　　 d  if p is of the form q & r then both q and r are asserted. 
　　　 e  if p is of the form 	q v r   q - r  then: 
if q is false  q is true   r is asserted; 
if r is false  q is asserted  -q is asserted ; 
otherwise a copy of the diagram is made and q is asserted  - q is averted  in the f i r s t diagram and r in the second  
　　　 f  if p is of the form q  --  r then: 
if q is true  r is asserted; 
if r is true  q is asserted; 
 f q is false  - r is asserted; 
if r is false  - q is asserted; 
otherwise a copy of the diagram is made and q and r are asserted in the first diagram and -q and -r am asserted in the second. 
the referee has pointed out the similarity of these procedures to beth's semantic tab eaux  see ' . the main difference;; are that: 
　　　 a  sums cannot yet handle arbitrary quantification. semantic tableaux provides some valuable clues as to how to correct this defect. 
　　　 b  in sums the left  valid  and right  invalid  columns of beth's tableaux have been combined in u single diagram  making a neater and more powerful procedure. 
　　　 c  at present sums does not assert the negation of the theorem to be proved  a practice which would certainly lead to an increase in power. 
　　　 d  before dividing into 1 cases sums checks the present diagram to see if either of the new diagrams would be contradictory  see the checks in  e  and  f  above  and in the drawing procedure for - below . this limits the number of cases to be considered  but is not perfect  and unnecessary cases are sometimes considered. 
　　　 e  most importantly  the assertion of an atomic formula  in sums  is not just the passive addition of the formula to a l i s t   but an act which may have wide repercussions within the diagram. 
 ii  the drawing proceduren. 
between them the drawing and asserting procedures are mainly responsible for drawing the diagram. their general philosophy is to limit the number of nodes in the diagram to those representing terms mentioned in the candidate theorem  but to draw as many links 



between these nodes as possible. thus the diagram is prevented from exploding  since only a finite number of links is possible between a f i n i t e number of nodes  but quite sophisticated relationships are deduced between the nodes that are represented. this kind of heuristic is quite common in mathematics for instance as advice to students proving theorems in euclidean geometry  to deduce as much as possible about a diagram without constructing any further points  ef. 1   the 
only exceptions to this rule are; 
      a  the creation of nodes for 1 and 1  often needed because they are the identity elements for addition and multiplication. 
      b  the limited creation of nodes needed to label links between existing nodes  e.g. if a  b is one of the premises of the candidate theorem and b - a is not already represented  then we represent i t . 
      c  the creation of new nodes as part of a proof strategy  sec section 1 . 
      d  the suppression of those clauses of links which do not appear to be necessary to prove the theorem  e.g. multiplicative links in a theorem only involving addition. this has not yet been implemented. 
 a  and  b  only produce a strictly limited number of extra nodes. 
we now turn to a description of the procedures themselves. a formula is drawn in the diagram by creating entries for each of its subterms which do not already have them  from the bottom up  and then passing these entries to procedures which extract information from the term's function symbols. there is one of 
these drawing procedures for each arithmetic function symbol  and the procedure receives every term beginning with this symbol. it assumes that the term's arguments have already been represented. if necessary it can use the interrogation procedures to discover the state of the diagram before using its knowledge of arithmetic to assert relationships with the asserting procedures. 
as an example we describe the procedure for terms of the form a - b: 

these drawing procedures are sufficiently close to the original function definitions to make one feel optimistic about having the machine 'learn' a new function by constructing its drawing procedure from its definition. the creation of an entry for a term involves constructing a new entry  inserting the term in i t s 'label' slot and a new node in its 'proplist' slot and adding this entry to the diagram's 'network' slot. the property l i s t is then f i l l e d with as much information as possible. for instance  a l l terms are made bigger than 1 and divisible by 1. in addition if the term is a natural number we compute and record  subject to the normal limitations  its relationships to a l l previously created natural numbers. e.g. 1 is made bigger than 1 by an amount 1 and unequal to 1 and 1 etc. this is s t i l l non-explosive if the number of nodes is strictly controlled  and ensures that a l l nodes relevant in a particular situation can be conveniently recovered. 
  i i i   the assorting procedures. 
there is an asserting procedure for each predicate symbol. these procedures update the property lists of the entries in the diagram thus creating new links in the network. before and after these links are created various 'antecedent' procedures  cf. 1  are called  which examine the local state of the diagram to see whether any further facts can be deduced. in particular a contradiction may be detected in some diagram and then registered by assigning 1 to the diagram's 'contra' slot. 
these antecedent procedures contain a pood deal of the arithmetic knowledge which is built into the theorem prover. they are constantly evolving as new information is included or neater ways. of achieving the same effect are discovered  und so it. would be misleading to over-emphasise their present state by describing one in detail. however  wo can give some examples of their action. 
suppose that an asserting procedure is making a divide c with quotient b   i . e . a x b = c . let a  b and c be represented in the diagram by the entries ae  be and ce respectively  and in general if x is a term  let xe be the entry representing i t . before adding any new links between ae  be and cc  sums compares for instance  ce and be with each of the pairs   ee.i e    in the 'multiple' slot of ae. we illustrate this situation in the following diagram  in which the double arrows indicate that the links are multiplicative. 

the redundancy of this method of link storage ia justified by the convenience of having a l l the information about a particular node stored in that node. 
after the links have been added  for instance  ce and be are again compared with each of the pairs  ee.de  in the 'multiple' slot of ae. i f   say  a is known to be unequal to 1 and c exactly divides e with quotient p.. then b is made to divide d exactly with quotient f. 
because: 
there is an interrogating procedure for each predicate symbol. they are used to settle a l l questions about the relationships between terms and they do thi1 by accessing the diagram. because they are used so frequently the present procedures are designed  for efficiency  to do very l i t t l e searching. for instance  the procedure which asks whether a is equal to b returns true if and only if a and b have the same node stored in their 'proplists'. the procedure which asks whether a is less than b starts at a and climbs up through the 'bigger' slots  marking its passage  until either it comes to b and returns true or it exhausts a l l possibilities and returns false. it would be possible to design procedures which tried a lot harder than this  but their use would have to be selective. 
there is a subclass of the interrogating procedures  called the measuring procedures  and there are measuring procedures corresponding to most of the function symbols. for instance  the measuring procedure for + takes as arguments two entries  ae and be   say  representing the terms  a and b  and returns true if and only if it finds an entry for a term equal to a + b  in which case it also returns this entry. it does this by looking in the 'bigger' slot of ae for a pair whose 
back is equal to be and returns the corresponding front 
if successful. this procedure may well succeed even if a + b is not represented. e.g. b + a may be represented or in a diagram where a b  a is a and b is b - a we may return the entry for b. if the procedure does not succeed the term a + b is stored in the diagram's ' f i l e ' slot where it may be used at a later date as grounds for constructing a node for a + b. 
1. results. 
1 of the 1 theorems which have been attempted so far were drawn from   which contains about 1 formal theorems. the remaining 1 were invented to test sums' ability to deal with particular numbers  see numbers 1 and 1 below . sums can now prove 1 of them with times ranging from 1 sees  of c.p.u. time  number 1  to 1 secs. of c.p.u. time  number 1 . 
there follows a selection of 1 of these 1 successfully 
most of these theorems are quite d i f f i c u l t to prove from the peano axioms of a r i t h m e t i c . for instance  the normal proof of number 1 involves two induction steps. although normalization algorithms might be used to prove some of them  it is extremely d i f f i c u l t to see how such a method would deal with number 1  
number 1 or number 1. 
	1. 	goals. 
in order to prove the remaining 1 theorems in 	  sums requires a b i l i t i e s outside i t s present scope. 	plans f o r adding some of these a b i l i t i e s are w e l l advanced and only await implementation; 	others are 	f u r t h e r 	in the f u t u r e . 	a d e s c r i p t i o n of these plans f o l l o w s . 
  i   	further a r i t h m e t i c . 
in order to t a c k l e more sophisticated arithmetic formulae  sums needs to be able to deal w i t h the q u o t i e n t ; remainder; exponential; n t h odd prime; greatest common d i v i s o r ; is-a-prime and other functions and predicates. a l l these a b i l i t i e s require a drawing procedure f o r each new f u n c t i o n   an asserting and an i n t e r r o g a t i n g procedure f o r each new predicate and i t s negation  and new slots in the property l i s t s . these w i l l be added soon. 
  i i   	q u a n t i f i c a t i o n . 
at present sums is not capable of dealing w i t h any formula that would contain e x i s t e n t i a l q u a n t i f i e r s i f it were w r i t t e n in prenex normal form. beth's semantic tableaux1 and robinson's resolution1 both provide valuable clues as to how to correct t h i s d e f i c i e n c y . there follows a proposed s o l u t i o n . 
1 f i r s t l y   replace any c a l l of the procedure 'to prove p1  described in s e c t i o n 1  by a c a l l of 'to assert -p' and 
then the theorem is proved when a l l the diagrams become contradictory. non-contradictory diagrams w i l l be used to suggest counter-examples or will be candidates for more strenuous proof strategies  see next sub-section . 
secondly  update the ' t o assert p' procedure by adding: 
　　　 g  if p is of the form v x q x  then an entry of type 'variable' is created for x. x is added to a local variable l i s t 'vars' and q. x  is asserted. 
　　　 h  if p is of the form 1x q x  then an entry of type 'skolem function 1 is created for x. 	x is made dependent on a l l the variables :in the current value of 'vars' and q x  is asserted. 
thirdly  during the course of the proof we may 'substitute 1 for a variable x  any term a  which is not dependent on x. this involves making a copy of any entry containing x  replacing each occurrence of x in each copy by the term a and making equal any terms with the same label. the ability to substitute needs to be handled with the same circumspection as the other proof strategies mentioned in the next subsection. 
  i i i   proof strategies. 
with the additions mentioned above  sums should be able to prove a wide class of straightforward theorems. however  it performs no search and always terminates wit!  or without a solution after it has represented the candidate theorem. to prove more sophisticated theorems sums needs to have and to know how to use  a store of proof strategies  planner consequent theorems1 . 
for instance  it may decide to try mathematical induction  to construct some new terms  to make a substitution  to divide into cases  to use some previously proved theorem or to set up some inter-
mediate sub-goals. 	a l l these abilities are 
relatively straightforward to apply once a decision about how to use them has been made  but deciding on what to use and how is d i f f i c u l t . our intention  therefore  is to implement this stage in two parts. the f i r s t task w i l l be to make sums interactive. procedures w i l l be written to correspond to the mathematical use of such instructions as: try induction o n . . . ; consider the term...; substitute... f o r . . . ; consider the cases...; use...; first prove...: etc. then sums w i l l be led through the proofs of some moderate y d i f f i c u l t theorems in number theory. the second task is to use this experience to evolve a language for classifying candidate theorems and selecting and applying suitable proof strategies. 
some progress has now been made on the f i r s t task. if sums fails to prove a theorem it asks for help in constructing new terms and offers the contents of the diagram's ' f i l e ' slot as evidence. the user may then t e l l sums to construct some terms before continuing with the proof. for instance  after representing 
a   b & c   d -  a + c   b + d  number 1 in section 1  in the diagram  and f a i l i n g to prove i t   sums asks for help and suggests the constructions: a + d; c + b;  d - c  + b and  b - a  + d. if the user orders a + d or c + b to be constructed a proof is immediate. if instead he chooses 
 d - c  + b or  b - a  + d  help is requested again. on the i n i t i a l t r i a l run through the 1 previous failures  see section 1   1 were proved using this method - 1 on the basis of the proffered evidence alone. of the remaining 1 theorems 1 were abandoned and 1 produced stack overflow because the length of deductions got too deep. 
1. conclusion. 
this theorem prover uses an analogical representation of arithmetic and lets this representation do a l l the work. in the traditional representations of mathematical theories  e.g. a set of axioms in a resolution theorem prover  it is quite easy to assert a contradictory set of formulae without this situation being readily detected. in the present representation assertions once made are readily accessible and any new assertion causes all sorts of conclusions to be drawn and asserted so that contradictions are usually spotted quickly. 
in 1 gelernter achieved a similar effect by usi.ng two representations: a syntactic one for proving theorems with rules and axioms  and a diagram to guide this proof. his 'syntax computer' discovered groups of sub-goals which would imply the present goal  and his 'diagram computer' vetted those sub-goals  rejecting those that were false in the diagram. the diagram was also used to prove certain very basic sub-goals {see 1 p. 1 no. 1  but this is a risky process  because although precautions were taken to prevent spurious coincidences entering into the diagram  there were s t i l l statements  true in the diagram  hut not provable from the hypothesis of the candidate theorem. the analogue of celernter's diagrams in arithmetic would be to substitute particular numbers for the variables in some subgoal  and then compute the truth or falsity of the resulting formula. 
sums arose from an attempt to represent in the machine the concept  f a i r l y common among mathematicians  see for instance 1    of an 'ideal  or typical  integer'  
i.e. an object with a l l the properties of an integer  e.g. being equal to  less than  not equal to or a divisor of some other interer  but which is not any particular integer  e.g. 1  1 or 1 . in a 'diagram' composed of 'ideal integers' no spurious coincidences arise  so that anything true in the diagram is provable from the hypothesis of the theorem and anything false is not provable. so this diagram can be legitimately used for rejecting and proving sub-goals. of course something may be neither true nor false in the diagram. 
does sums prove theorems or does it check their validity  	it certainly does not produce proofs in a formal logical system  but neither does it exhaustively test the candidate theorem in some model. 	nor  of course  does the practising mathematician confine himself to cither of these techniques. 	rather he is 
prepared to use a variety of methods to achieve his ends  sec 1 . to convince himself  and others  of the soundness of his f i n a l proof  he produces a protocol. formal logical systems were introduced to analyse and justify this procedure  and not to replace it as a 
method of discovery. sums is designed to simulate the behaviour of mathematicians. during the course of a proof it 'proves' many facts   i . e . convinces i t s e l f of their truth  and records these as true; it also produces a protocol which is intended to convince others of their truth   i . e . a proof . 
it is the author's hope that the method of theorem proving outlined in this paper w i l l prove applicable not just to arithmetic  but to a l l mathematical theories  especially classical systems with a single standard model  like analysis  geometry and set theory. in fact similar systems for geometry and set theory are now being built by aaron sloman and mike liardet respectively. 
the author also hopes that this representation may make 

1 
some c o n t r i b u t i o n to the study of psychological m o d e l l i n g . 	in p a r t i c u l a r   maybe it sheds some l i g h t on the curious blackboard diaerams which mathematicians use to help them 	'understand' 	problems. 
acknowledgements. 
1 
my debt to the m.i.t. progress report w i l l be obvious. not q u i t e as obvious  but equally important  are the conversations w i t h my colleagues - aaron sloman  bo'b boyer  j moore  mike l i a r d e t and numerous others. 
