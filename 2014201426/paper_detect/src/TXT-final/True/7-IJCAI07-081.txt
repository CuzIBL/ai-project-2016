
the task of model-based diagnosis is np-complete  but it is not known whether it is computationally difficult for the  average  real-world system. there has been no systematic study of the complexity of diagnosing real-world problems  and few good benchmarks exist to test this. real-world-graphs  a mathematical framework that has been proposed as a model for complex systems  have empirically been shown to capture several topological properties of real-world systems. we describe the adequacy with which a real-world-graph can characterise the complexity of model-based diagnostic inference on real-world systems. we empirically compare the inference complexity of diagnosing models automatically generated using the realworld-graph framework with comparable models from well-known iscas circuit benchmarks. we identify parameters necessary for the real-worldgraph framework to generate benchmark diagnosis circuit models with realistic properties.
1 diagnostic inference for complex systems
model-based diagnosis  mbd  focuses on determining whether an assignment of failure status to a set of modevariables is consistent with a system description and an observation  e.g.  of sensor values . this problem is known to be np-complete  bylander et al.  1; friedrich et al.  1 . however  this is a worst-case result  and some np-complete problems  such as graph colouring  cheeseman et al.  1   are known to be tractable for particular problem classes.
﹛we focus on the average-case complexity of mbd algorithms on real-world problem instances. at present  it is not known whether mbd is computationally difficult for the  average  system. there has been no systematic study of the complexity of diagnosing real-world problems  and few good benchmarks exist to test such a conjecture.
﹛this article makes two main contributions. first  it describes an algorithm for automatically generating diagnostic benchmark models that can be used to analyse the performance of diagnostic inference algorithms. this model generator can be applied to any domain  and can generate models that accurately capture the properties of complex systems  given as input a library of domain-dependent component models. in particular  we propose a real-world graph model  that  given a model with n components  uses a small set of domain-dependent parameters to specify the complexity of diagnostic inference for a device. we compare the predictions made by our model to results obtained from iscas circuit benchmark models  harlow  1 . by empirically comparing generated models with benchmark models we show the model-generation parameters best suited for iscas circuits. this approach circumvents the difficulty of assembling a large suite of test problems  benchmark models   given that most large diagnosis models tend to be proprietary. it also enables us to control model parameters  and hence analyse specific parameters .
﹛second  we use this framework to show empirically that diagnosing a suite of benchmark circuit models is computationally hard. this provides the first clear experimental demonstration of this computational intractability for a well-known benchmark suite.
﹛we organize the remainder of the document as follows. section 1 examines the topological structure that all realworld complex systems possess. section 1 summarises the model-based diagnosis task that we solve. section 1 describes the process we adopt for generating diagnostic models using domain parameters  and section 1 describes the optimisation technique for auto-generation. section 1 presents the experimental results  and section 1 summarises our contributions.
1 topological models for complex systems
several recent theoretical studies and extensive data analyses have shown that a variety of complex systems  including biological  newman  1   social  newman  1   and technological  braha and bar-yam  1; i cancho et al.  1  systems  share a common underlying structure  which is characterised by a real-world graph. a real-world graph  rwg  is a complex network in which  a  the nodes form several loosely connected clusters   b  every node can be reached from every other by a small number of hops or steps  and  c  the degree distribution p k   which is the probability of finding a node with k links  follows a power-law  newman  1 .
﹛several random-graph models have been proposed to capture the real-world graph properties  such as the wattsstrogatz  or small-world graph  and the barabasi-albert models  newman  1 . in this article we adopt the smallworld graph  swg  framework  whose key properties are summarised below. we assume that we have a graph g v e  with a set v of vertices and set e of edges. we assume that g is connected  i.e.  there is a sequence of distinct edges  a path p  joining any two nodes in g. a graph is directed  i.e.  called a digraph  if all its edges are directed. the degree of a vertex is the number of edges incident on that vertex.
﹛the swg framework addresses two graph parameters: mean distance l and clustering coefficient 成. the mean distance l is the average of all distances  i.e.  shortest paths connecting two vertices  in g. graph clustering characterises the degree of cliquishness of a typical neighbourhood  a node's immediately connected neighbours . the clustering coefficient 成i for a vertex vi is the proportion of links between the vertices within its neighbourhood divided by the number of links that could possibly exist between them. the graph clustering coefficient is the average of the clustering coefficients for each vertex  newman  1 .
﹛several empirical studies  summarised in  e.g.   newman  1   have shown that the swg framework  with particular parameter settings  provides a good model for complex systems. these parameter settings are described in terms of random graph parameters as follows.
definition 1  swg . a small-world-graph  swg  is a graph g v e  that has small-world properties measurable in terms of its mean distance l and clustering coefficient 成. given a random graph g n p 1 with mean distance lr  clustering coefficient 成r  and the same number of nodes and edges as
g v e   a swg has the properties.
﹛i cancho et al.  have applied real-world graphs to electronic circuits  i cancho et al.  1   mapping the vertices of the graph g to electronic components  gates  resistors  capacitors  diodes  etc.   and the edges of g to the wires between the components. the circuits studied comprise both analog and iscas1/itc1 benchmark circuits  and all display 成 and l parameters that are typical of swg topologies. in an electronic circuit  a cluster of components corresponds to components that together serve a particular task  e.g.  a sub-system; the relatively small number of connections between clusters corresponds to the fact that sub-systems are typically loosely-coupled. in addition  the short paths between any pair of components  nodes  in a circuit are the natural result of wire-length minimisation typical of circuits.
1 model-based diagnosis
we can characterise a mbd problem using the triple
  reiter  1   where:
  comps = {c1 ... cm} describes the operating modes of the set of m components into which the system is decomposed.
  sd  or system description  describes the function of the system. this model specifies two types of knowledge  denoted sd =  s b   where s denotes the system structure  connections between the components   and b denotes the behaviour of the collection of components.1
  obs  the set of observations  denotes possible sensor measurements  which may be control inputs  outputs or intermediate variable-values.
we adopt a propositional logic framework for our system behaviour models b. component i has associated modevariable ci; ci can be functioning normally   ci = ok    or can take on a finite set of abnormal behaviours.
﹛mbd inference assumes initially that all components are functioning normally:  ci = ok   i = 1 ... m. diagnosis is necessary when sd ﹍ obs ﹍ { ci = ok |ci ﹋ comps} is proved to be inconsistent. hypothesizing that component i is faulty means switching from  ci = ok  to
. given some minimality criterion 肋  a  minimal  diagnosis is a  肋-minimal  subset
is consistent.
﹛in this article  we adopt a multi-valued propositional logic using standard connectives    ˍ ＿   . we denote variable a taking on value 汐 using  a = 汐 . an example equation for a buffer x is  in = t  ＿  x = ok     out = t .
1 benchmark diagnostic model generation
this section describes our algorithm for generating benchmark diagnostic models. figure 1 depicts the process of automatically generating diagnostic models and using them for evaluating diagnosis inference algorithms. our approach is applicable to any domain  since  a  the underlying topological models can be tailored to virtually any complex system  newman  1   and  b  functionality is incorporated into the system model using a component-library  where components can be developed for any domain in which the system models are decomposable.
﹛the topology-generation method we adopt was originally developed based on the theory of random graphs-see  newman  1  for background in this area. however  this method focuses solely on the system structure  as captured by the graph   and ignores the system functionality. we extend this approach by adopting the system structure based on the random-graph generators  and then encoding system functionality using a component library.
﹛model generation algorithm: we generate diagnostic  benchmark  models in a three-step process.
1. generate the  topology  graph g underlying each model;
1. assign components to each node in g for system sd  to create an mbd-graph g;
1. generate the system description  and fault probabilities .
﹛every domain requires domain-specific parameters for generating realistic models. all real-world graph models require specific parameters to be able to match particular properties of a given domain  costa et al.  1 . for example  the swg model requires specific parameters for initial graph

figure 1: automated model generation and analysis.
connectivity k and random connectivity probability p; similarly  extended versions of the barabasi-albert model  costa et al.  1  need various parameters to capture properties such as inter-node distance and the cost of adding links. analogous to these approaches  circuit auto-generation methods use domain-specific parameters like the rent parameter 缶  e.g.   verplaetse et al.  1 .
﹛as an alternative to empirically-derived domain parameters that are known a priori  we can frame the generation task in terms of an optimisation task where we compute the domain parameters. the remainder of this section describes this auto-generation process based on domain-dependent parameters. we use an example  and then describe each step of the process. section 1 describes the optimisation approach.
example 1. to demonstrate this approach  we study a suite of auto-generated electronic combinational circuits  which are constructed from simple gates. the inputs to the generation process consist of:  a  a component library;  b  parameters defining the system properties  such as the number n of components; and  c  domain-dependent parameters  such as the well-known engineering parameter for determining input/output variables for a circuit  the rent parameter 缶  verplaetse et al.  1 . as an example  figure 1 shows several of the gates that we use in our component library  together with the gates' functionality  in terms of truth-tables .
﹛diagnosis models differ from generic circuit models in that they explicitly encode failure modes and the functional effect of failure modes. as a consequence  the structure of a diagnostic model is slightly different than the structure of the corresponding electronic circuit  since a diagnostic model explicitly encodes failure modes of components.
example 1. figure 1 a  shows the schematic of a simple circuit with arbitrary components a  b  c  d and e. the circuit has two inputs  i1 and i1  with the output of component i denoted by oi. figure 1 b  shows the circuit with instantiated components. figure 1 shows the process of transforming this schematic into a mbd-graph  which is the basis for constructing a diagnostic model. we first translate the schematic into a topology graph  which makes the graphical topology of the circuit explicit by denoting each component as a node  the inputs as nodes  and the input-component and componentcomponent wires as directed edges.1 next we replace each




figure 1: partial component library for combinatorial digital circuit domain. each gate also has an associated truth-table defining the gate's functionality.
component x in the topology graph with a pair  cx ox   which denotes the mode and output of component x  respectively. we introduce the mode-variables for each component  and define component behavioural equations in order to diagnose the fault status of each component.

figure 1: schematic of simple electronic circuit.
the topology graph g and mbd-graph g are as follows.
definition 1  topology graph . a topology graph g v e  for a system  is a directed graph
g v e  corresponding to the system structure s. hence in g v e :  a  the nodes v consist of a collection of nodes corresponding to system components  聿   and system inputs  灰   i.e.  v = 聿 ﹍ 灰; and  b  the edges correspond to connections between two component-nodes  or between an inputnode and a component-node  i.e.  e =  聿i 聿j  ﹍  灰i 聿k   for 聿i 聿j 聿k ﹋ 聿  and 灰i ﹋ 灰.
definition 1  mbd-graph . an mbd-graph topology graph g v e  in which each component node 聿i ﹋

world analyses of electronic systems in  i cancho et al.  1 .
v is replaced with a subgraph consisting of the node for the corresponding component-output oi  the node corresponding to component-mode ci  and the directed edge  ci oi -see figure 1. hence in :  a  the nodes v  consist of a collection of nodes corresponding to system componentoutputs  o   mode-variables  comps   and system inputs  灰   i.e.  v = o ﹍ comps ﹍ 灰; and  b  the edges correspond to connections between two component-output-nodes  or between an input-node and a component-node  i.e.  e =  oi oj ﹍ 灰i ok ﹍ ci oi    for oi oj ok ﹋ o  灰i ﹋ 灰  and ci ﹋ comps.

figure 1: transforming the topology graph of a simple electronic circuit into a model-based diagnosis graph.
1 generate graph structure for g
we generate a small-world-graph  swg  using a revised version of the approach of watts and strogatz  newman  1 . the swg approach generates a graph g with a degree of randomness that is controlled by a probability corresponds to a regular graph  and corresponds to an erdos-renyi random graph; graphs with real-world structure  swgs  occur in between these extremes  as has been determined by empirically comparing the 成 and l parameters of generated graphs and actual networks  newman  1 .
﹛figure 1 depicts the graph generation process  where we control the proportion of random edges using a rewiring probability p. standard swg generation takes a regular graph  a ring lattice of n nodes   where each node is connected to its k nearest neighbors  and randomly  rewires  an edge by moving one of its ends to a new position chosen at random  with probability p  from the rest of the lattice  newman  1 .
﹛we have modified the swg framework to enable us to match the mean degree of the graph for the iscas circuit with that of the generated graph  since the mean degree is a critical parameter in this framework. the original swg model requires the mean degree k to be an even number; however  the mean degree in real circuits is typically not an integer. our enhanced swg generator first creates a ring lattice with degree k  where k is any positive real number  by setting   and connecting every node to its nearest neighbors on both sides  just as in the classic swg model. next it connects every node to its two nearest nodes on both sides  with probability .
1 assign components to graph g
given a topology graph g  we associate to each componentnode in g a component  based on the number of incoming arcs for the node. given a swg component-node with

figure 1: generating a small-world graph from a regular ring lattice with rewiring probability p.
i inputs and o outputs  we assign a component  denoted sd i o 而 b w  where 而 denotes the type  e.g.  and-gate  or-gate   b defines the behavioural equations  and w the weights assigned to the failure modes.
example 1. for our experiments  we use a set of digital comparator components  such as shown in figure 1. given a node that has q possible components that are suitable  we randomly select one with probability 1q. for example  the single-input nodes correspond to single-input gates  not  buffer   and the dual-input nodes correspond to dual-input gates  and  or  nand  nor  xor   etc.
1 generate the system description
given a selected component  we then generate its normalmode equations  and potentially failure-mode equations . we randomly select the mode type  of the s possible failure modes  for any component-model with probability 1s. we assign weights to failure-mode values by assuming that normal behaviour is highly-likely  i.e.    and faulty behaviour is unlikely  i.e. .
example 1. figure 1 b  shows a randomly-generated circuit based on the schematic of figure 1 a . here  we instantiate components a  d and e to not gates  component c to an and gate  and component b to a buffer. this figure also depicts the instantiated failure-mode for the components in shaded boxes: components b  c and e have sa1 faultmodes  component a has a sa1 fault-mode  and component d has a invert fault-mode. given this information  we can generate a system description with equations corresponding to the component-types and fault-mode types as just described. for example  the equations for gates a and c are:
	a :  i1 = t  ＿  ma = ok 	   oa = f 
	 i1 = f  ＿  ma = ok 	   oa = t 
	 ma = sa1 	   oa = f 
	c :  i1 = t  ＿  oa = t  ＿  mc = ok 	   oc = t 
	   i1 = t  ＿  oa = t   ＿  mc = ok 	   oc = f 
	 mc = sa1 	   oc = t 
1 optimisation model-generation approach
this section reviews the optimisation approach we have adopted for generating the topology graph underlying realistic diagnosis models. the standard swg generation process has a wide range of parameter choices  e.g.  parameters  n k p   that produce models with very different properties. hence  one must generate a model using a parameter-setting that best captures a desired property. this approach is general  and can be used to create models for testing a variety of objectives  such as diagnostic inference complexity  model size  etc. since we are generating models that can be used to test the relative efficiency of mbd inference algorithms  we pose the auto-generation problem as an optimisation problem whose objective function is defined in terms of the computational complexity of mbd inference.
﹛mbd auto-generation task: the objective of mbd auto-generation is to create a model sd that minimises |污a sd obs    污a sd obs |  where sd is an mbd model   and a is an mbd inference algorithm that has complexity 污a sd obs  when computing a 肋-minimal diagnosis given model sd and observations obs.1
﹛we have adopted the causal network approach  darwiche  1  for our experiments. we used as our measure of inference complexity the largest clique-table in the compiled causal network model  which is a typical complexity measure for this type of model. the diagnosis minimality criterion 肋 is a order-of-magnitude probability function  darwiche  1 .
﹛from a theoretical perspective  the complexity of causal network inference is expressed in terms of the graph topology: it is exponential in the largest clique of the graph  or the graph width   darwiche  1 . this indicates that the influence of behaviour b and observations obs are outweighed by the graph structure.
﹛we have shown experimentally that system structure is the primary determinant of diagnostic inference complexity for causal network diagnostic inference  i.e.  污a s . in particular  we showed that the diagnostic inference complexity was invariant to variation in the behaviour equations b and the observation set obs. using the structure of the iscas1 benchmark circuit c1  we examined 1 different combinations of component type and 1 sets of different observations. a two-way analysis of variance  anova  of data averaged over 1 runs indicated that neither varying component types nor altering the number of observations had a statistically significant effect on the inference complexity. hence we concluded that structure is the primary determinant of diagnostic inference complexity.
1 experimental comparison of generated and iscas-benchmark models
this section summarises results of experiments comparing the structure and diagnostic inference complexity properties of auto-generated models with iscas benchmark models.
﹛the iscas circuits are an established benchmark for circuit optimisation  harlow  1 . the benchmark suites consist of multiple sets of circuits  of which we focus on the iscas1 combinational circuits. our experiments were conducted on 1ghz pentium-iv with 1gb of ram. all data presented is based on an average of 1 runs. given an is-
cas circuit sd with n components  we generated a diagnostic swg model sd with n nodes  by varying the graphgeneration parameters  k p  in order to choose the best pa-

rameter setting such that sd and sd had the same diagnostic performance.

figure 1: the inference complexity and maximal degree distributions of a swg corresponding to benchmark c1.
1 average-case diagnosis complexity
our first set of experiments explored the complexity of autogenerated models corresponding to all iscas1 circuits over the entire range of the rewiring parameter p. figure 1 shows the maximal degree of the generated graph g  corresponding to c1  compared with the log1 of the inference complexity of g. the figure shows that both curves have the same trend  rising from the relatively efficient regular graph  p = 1  to the range of small-world graphs  1   p   1 . this increase occurs because  given a graph with n nodes  a swg will have more and larger clique-tables than a regular graph and hence will be computationally harder than a regular graph.
﹛given that all circuits demonstrated properties similar to those shown in figure 1  i.e.  complexity exponential in the largest clique  or intractability for non-trivial circuits   our experiments have shown that the iscas1 circuits are computationally difficult to diagnose  on average.
1 parameter optimisation
we then studied two approaches to choosing parameters that minimise the diagnosis-complexity difference between iscas and generated circuits: matching topological parameters governing  1  degree distribution  k  an easily-computed topological parameter; and  1  diagnostic complexity  污a  a computationally intensive measure.
﹛degree distribution: we first tried to match the diagnostic complexity of corresponding models sd and sd by matching the degree distributions of sd and sd. figure 1 shows the degree distributions of iscas1 circuits. for each real circuit most nodes have low degree; however  each graph in figure 1 also has a long tail containing some high-degree nodes that significantly affect the inference complexity  since the complexity is proportional to the node of highest degree. a generated swg has a unimodal degree distribution that matches the most-likely degrees very well  but not the tail of the curve. for example  consider the swg for c1  with  n = 1 k = 1 p = 1   whose degree distribution is shown in figure 1; this swg contains fewer edges than c1  and our experiments indicate that its inference complexity is also much lower than that of c1. obviously  just matching the most-likely degree does not lead to generated models that match the complexity of iscas1 circuits due to the absence of long tails.

degree
figure 1: degree distributions of iscas1 benchmarks
﹛inference-complexity optimisation: next  we set the mean degree of sd to be that of the real circuit sd  and experimentally selected the rewiring probability p that minimised |污a sd obs  污a sd obs | over a broad range of observations. as shown in figure 1  increasing p  for fixed k  modifies the swg degree distribution by flattening the distribution  lowering the magnitude of the peak value but increasing the length of the tail  and hence increasing the inference complexity of sd . for example  empirical comparisons showed that the swg with  n = 1 k = 1 p =
1  produced a model with inference complexity closest to that of c1-see figure 1. in our experiments we found that the iscas1 circuits all had corresponding swg models with p   1.1 note that p   1 corresponds to swg models of relatively low complexity  i.e.  we can generate models of significantly higher complexity than the iscas1 circuits  thus providing a range of difficulty of auto-generated models.
1 conclusion
this article has described a method for generating diagnostic models that have real-world topology and can be tailored to different domains. we have generated models of systems composed of digital circuits  but can generalise this approach to any domain where systems can be composed from a library of components. this method circumvents the problems with using random-graphs for experiments  and provides an alternative to developing suites of hand-built benchmark models. this article has also empirically shown that mbd problems with a real-world topology  i.e.  with a swg structure  are computationally hard.

figure 1: comparison of circuit degree distributions of c1 and auto-generated circuits at various values of p.
