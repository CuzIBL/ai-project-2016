 
   the intention of this paper is to help bridging the gap between logic programming and theorem proving. it presents the design of a gentzen type proof search procedure  based on classical tableau calculus  for knowledge bases consisting of arbitrary first order formulas. at each proof search step  when a new formula is to be chosen from the knowledge base  the procedure chooses in such a way that the search space is small. when applied to a horn clause knowledge base and an atomic goal  it performs the same proof search steps as any prolog interpreter would do. hence  prolog can be viewed as a special gentzen type procedure just as it is a special  namely  linear input  resolution procedure. 
1. introduction 
   problem description. expert systems are able to draw conclusions from data they contain. this deductive process can adopt different forms. there is the tradition of automated theorem proving  there are the many expert systems working with a production rule formalism  and there is prolog  a programming language which  at the same time  is a logical language. 
   prolog has proven very successful though it has some limitations. one of them is that it only accepts horn clauses as rules and atomic formulas as goals. this restriction makes proof search simple and effective. but some properties cannot be expressed by horn clauses  e.g. the linearity of an order relation. there are application domains where this handicap is not severe. in the lex  linguistics and logic based legal expert system  project at heidelberg science center where the paper in hand was worked out  we consider the expressiveness of prolog to be too low. only about 1 % of the knowledge in legal applications can be formulated. for the rest  we need negation  disjunction etc. 
   existing solutions. resolution calculus   robinson1   is able to accept arbitrary first order formulas  even in nonclausal form if the extensions described in  murray1  are used. some of its defects when applied in its pure form to proving mathematical theorems are discussed in  bledsoc1 . bledsoe points out that heuristics should play an important role. another defect is  |clocksin1   p.1 : 'resolution tells us how to derive a consequence from two clauses  it does not tell us either how to decide which clauses to look at next or which literals to match.' 
   as compared with resolution based systems  gentzen type systems did not yet attract much attention. an important theoretical article is  beth1  where the notion of a tableau is introduced to present a gentzen type system in a more natural way. this tableau method has been mainly used to prove completeness of various logic calculi such as modal logic  rautcnberg1 . it has been used to test equivalence of relational expressions  sagivsl . and it has drawn some attention in the legal domain where it is regarded as a natural formalization of legal reasoning  hcrbcrgcr1 . 
   to implement tableau calculus as described in  beth1  is impossible since it is not invertible  richter1 . this is because any herbrand term can be substituted for the universal variables. it is the idea of bowen  bowen1  and  probably independently  of wrightson  wrightson1  to use unification in order to find the necessary substitutions.  tablog  malachi1  is not based on tableau calculus though its name might suggest. it uses non-clausal resolution as in  murray1|.  
   solution proposed in this paper. regardless which calculus we use  one problem still remains: in which way should possible applications of rules be ordered   this is important in case of a very large knowledge base. in each state of proof search  the inference engine can choose among a huge set of formulas. prolog uses a rather simple and efficient strategy to make this choice: it tries to unify the current predicate with the head of some rule. the purpose of the paper in hand is to extend the prolog idea to non-horn formulas. more precisely  it presents a strategy with the following properties: 
  it accepts arbitrary formulas of first order predicate logic. 
  when given a horn clause knowledge base and a provable atomic goal  it finds the same proof in the same way as any prolog interpreter would do. 
   the paper starts with a  slightly non-traditional  description of tableau calculus for single formulas. the next chapter contains the description of a goal oriented  depth-first strategy with backtracking  as mentioned above  for propositional formulas. how this extends to predicate logic and some further extensions are described in the final chapter. 
   an implementation of this procedure is under work. instead of mere first order formulas  it will accept so called discourse representation structures  a modification of predicate logic to cope with linguistic phenomena. 
1. tableaux for propositional formulas 
   tableau calculus as developed in  beth1  is a formalization of the search for counterexamples or  equivalently  for models. assume e.g. that the formula y = 
  -r&-s |s &  r&-s | -r&s  &-r 
is satisfiable.  '&'  'i'  ' - ' mean 'and'  'or'  'not' resp.  satisfiability can be visualized by drawing a logic diagram. 

y is satisfiablc if and only if there is a non-contradictory path through its diagram  i.e. a path containing no complementary pair of literals. 
this method to represent formulas is used in  bibcl1 . 
it should be compared with the usual and-or-graphs. bibel describes a procedure which directly checks for the existence of non-contradictory paths. a better way to get an overview of all paths is to arrange them into a tree. 
w. schonfeld 1 
subpath a branch of the tableau for  t is called a tableau for t if each non-contradictory branch crosses each  at least once. if t is no proof  then it contains at least one non-contradictory branch. the interpretation determined by such a branch satisfies each .  since it crosses it . if t is a proof  then no interpretation can satisfy t. hence  t is unsatisfiable if and only if there is a tableau for t which is a proof. 
   choosing the next formula. to make search effective  it is necessary to keep the tableau as small as possible. first  no path should cross a formula twice. second  branches should be cut off by a complementary pair as soon as possible. for example  a better tableau than figure 1 on page 
1 is 



more precisely  we call the smallest tree containing the same paths as the diagram of y the tree of y. a tableau for y is a tree for y where any contradictory branch is cut off as soon as a complementary pair occurs.  in  beth1   a tableau docs not only contain literals but also the initial formula as well as all intermediate steps. since these steps are 'straightforward'  it suffices to represent only the final result.  a 
proof for the unsatisfiability of y is a tableau for it in which all branches are contradictory  y is satisfiablc if and only if its tree is no proof. hence  any procedure which  given a formula  generates a tableau and checks whether it is a proof is correct and complete. 

   two literals are linked if they form a complementary pair. furthermore  a literal is linked to a formula if it is complementary to some literal in . suppose that a set t of formulas contains an element a singled out for some reason  a is called the goal. furthermore  suppose that a tableau for t is being generated  starting with a  and suppose that this process is now in a state where the tableau of another  has to be appended to a certain non-contradictory branch b. 
   the idea is to choose a  so that at least one of the resulting branches contains a complementary pair. to this end  let 1 be the last formula crossed by b  and let  be the restriction of b to   i.e. that subpath of b which is part of the tableau for  . furthermore  let c  for 'choices'  be the set of all with the following properties. 
1 . i s linked to some literal on 
1. 	is not crossed by b. 
c is ordered in a certain way  e.g. by respecting a given order of r. this is used to organize backtracking. if backtracking occurs  the subtableau starting with the actually chosen is removed  and a new subtableau is generated starting with the next  we say that the choice at  is altered. backtracking means that we go upwards on b up to the next where such an altering of a choice is possible. 
the following gives the whole algorithm  called search. 
1. start with the.tableau for 
1. mark contradictory paths. 
1. if all paths are contradictory  stop with 'succeed'. 
1. otherwise  let b be the leftmost non-contradictory path. 
1. let c be as above. 
1. if c is empty  then check whether any choice can be altered along b. 
a. if yes  then backtrack. 
b. otherwise  choose a  which is not yet crossed by b and go to 1. if there is none  then stop with 
'fail'. 
1. otherwise  choose a 

1 w. schonfeld 
1. append its tableau to b. 
1. goto 1. 
   this strategy is again correct and complete. correctness follows from the fact that any tableau  found by a strategy whatsoever  with all branches closed by contradictions is a correct proof. to see completeness  note that 1.b. guarantees that all formulas in t are crossed exactly once by each non-contradictory branch. if it is applied to the above t with ¦Ã1 as a goal  then figure 1 on page 1 results. 
   comparison with prolog. it is claimed that algorithm search  when applied to propositional horn clauses  is very close to prolog's search strategy. some remarks will help to understand the claim. 
   the 1 as considered above corresponds to the current predicate. c is the set of rules with which this predicate matches  with the above mentioned exception that matches leading to loops are avoided . step 1 means that the first predicate on the right hand side of a rule is chosen. 
   one important difference is that search does never get into a loop. this comes from the fact that c as defmed above does not contain any formula crossed previously by branch b. such loop checking is essential when definitions of the form p x  s a x  are evaluated. note what prolog interpreters do when given the data base a - b b +~ a. 
   the main difference comes in with 1.b. prolog stops at this point with 'fail'. search will in general go on and eventually generate a satisfying interpretation. this is necessary since it may e.g. happen that t contains a contradiction which cannot be reached from the goal by chaining through linked formulas. note that no prolog knowledge base can be inconsistent. furthermore  note that resolution calculus captures this situation by working breadth-first. 
   predicate logic suppose t consists of arbitrary predicate logic formulas. a naive implementation of the tableau calculus would be to substitute all herbrand terms for all universal variables in a fixed order and then to generate a tableau from the resulting set of variable-free formulas  level saturation . it is one of the key observations in  bowen1  and in  wrightson1  that only those substitutions need to be performed which produce complementary pairs. the combination of their idea  they do not worry about the propositional case  e.g. backtracking  with those of this paper is not difficult and yields a strategy for full first order logic extending prolog. 
1. extensions 
our strategy may be refined in many ways. e.g. we could extend the definition of the choice set c in such a way that more than one link is taken into account. this would lead far beyond prolog. 
   another point to be mentioned is the following. search composes tableaux starting with the root. but we might equally well try to compose them starting from the leaves. this is nothing else than resolution calculus. using this unified view of different proof procedures  the following can be said. 
  resolution calculus generates a theory  i.e. a deductively closed set of formulas  and stops when it derives the empty clause. 
  tableau calculus generates models and stops when all cases lead to contradiction. 
  in the prolog case  both calculi coincide since the theory to be generated consists of atomic formulas only  describing the 'minimal' model. 
  resolution may make multiple use of the same inference  of lemmas  and so reduce proof length. 
  tableau calculus may be extended to recognize loops in the generation of models and so reduce proof search length  schonfeld1 . 
both proof search approaches formalize different reasoning principles  and it seems useful to combine them. mathematicians work this way: when given an open problem  they start by deriving some relevant facts from known theorems  resolution! . but then  they disbelieve their hypothesis and try to construct counterexamples  tableau! . they may switch back to the theorems and so on. i do not claim that their reasoning principles arc the ultima ratio. but this shows that a combination of different principles can be useful.  in addition  we should not forget bledsoe's claim for heuristics.  
to draw a final conclusion from all these considerations 
- i believe that tableau calculus is not a substitute for other calculi  but a useful complement. 
