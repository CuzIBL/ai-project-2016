 
symmetry often appears in real-world constraint satisfaction problems  but strategies for exploiting it are only beginning to be developed. here  a rationale for exploiting symmetry within depth-first search is proposed  leading to an heuristic for variable selection and a domain pruning procedure. these strategies are then applied to a highly symmetric combinatorial problem  namely the generation of balanced incomplete block designs. experimental results show that these strategies achieve a reduction of up to two orders of magnitude in computational effort. interestingly  two previously developed strategies are shown to be particular instances of this approach. 
1 	introduction 
symmetry is present in many natural and artificial settings. a symmetry is a transformation of an entity such that the transformed entity is equivalent to and indistinguishable from the original one. we can see symmetries in nature  a specular reflection of a daisy flower   in human artifacts  a central rotation of 1 degrees of a chessboard   and in mathematical theories  inertial changes in classical mechanics . the existence of symmetries in these systems allows us to generalize the properties detected in one state to all its symmetric states. 
　regarding constraint satisfaction problems  csps   many real problems exhibit some kind of symmetry  embedded in the structure of variables  domains and constraints. during search  if two or more states of a problem are related by a symmetry  it means that all of them represent the same state  so it is enough to visit only one of them. this causes a drastic decrease in the size of the search space  which has a very positive impact on the efficiency of the constraint solver. 
　in this paper  we propose two strategies for symmetry exploitation  which can speed-up significantly the solving process of csps with many symmetries. we have 
   *this research is supported by the spanish cicyt proyect tic1-c1. 
used these strategies to solve the problem of generating balanced incomplete block designs  bibd from now on   a combinatorial problem of interest in statistics  coding theory and computer science. with them  we are able to solve the bibd generation problem with a simple algorithm  fc-cbj  for a wide set of designs. 
　this paper is organized as follows. in section 1  we introduce some basic concepts. in section 1  we explain two strategies for symmetry exploitation during search. in section 1  we present the problem of bibd generation. 
in section 1  we formulate the bibd generation as a 
csp and give empirical results. in section 1  we revise previous approaches to this topic. section 1 contains conclusions and future work. 
1 	basic definitions 
constraint satisfaction. a finite csp is defined by a triple  x' d c   where  v = is a set of n variables  v = is a collec-
tion of current domains where is the finite set of possible values for variable   and c is a set. of constraints among variables  a constraint ci on the ordered set of variables 	specifies the relation of the allowed combinations of values for the variables in var an element of is a tuple 	  where represents the initial domain of . an element of is called a valid tuple on var a solution of the csp is an assignment of values to variables which satisfies every constraint. a value a is good for a variable  if a solution includes the assignment 
 typically  csps are solved by depth-first search algorithms with backtracking. at a point in search  p is the set of assigned or past variables  and f is the set of unassigned or future variables. the variable to be assigned next is called the current variable. 
symmetries. a symmetry on a csp is a collection of bijective mappings 



s y m m e t r i e s a n d depth-first search. a search state s is characterized by an assignment of past variables  plus the current domains of future variables. it defines a subproblem of the original problem  where the domain of each past variable is reduced to its assigned value and the relation rel ci  of each constraint c  is reduced to its valid tuples with respect to current domains. a symmetry holds at state s if it is a symmetry of the subproblem occurring at s. a symmetry holding at s is said to be local to s if it does not change neither past variables nor their assigned values. a symmetry local to the initial state is a global symmetry of the problem. 
   the notion of local symmetry is important because of the use of symmetries during search. if a state reports failure  all the states symmetric to it can be removed. 
1
　　 through an abuse of notation  we denote a symmetry  by its variable mapping 
since constraint satisfaction algorithms are based on depth-first search with backtracking  they may only remove states that are in the subtree below the current node  but never above it. therefore  we are only interested in symmetries connecting states below the current node  that is  leaving the set of past variables unchanged. these symmetries are local to the current node. in the rest of the paper  we will consider local symmetries only. 
1 	solving strategies 
in the following subsections  we describe two practical strategies for highly symmetrical csps  which can be embedded in any constraint satisfaction algorithm. both are based on the detection of local symmetries at each search state. automatic discovery of symmetries is a too complex task to be carried out at run time. instead  we take a simpler approach. from an initial analysis of the considered problem  we identify a set of symmetries which may appear along the search. when a new state is generated  we check which of these previously identified symmetries are local to this state. 
1 	b r e a k i n g s y m m e t r i e s w h i l e s e a r c h i n g 
let s be a search state where the symmetry 1 local to *s involves a future variable xt in the following form  

if x{ is assigned in the next step  symmetry  no longer holds in the current subproblem after assignment. to see this  it is enough to realize that is now a past variable  which cannot be changed  and . will change it. in this case  we say that the assignment of z  breaks symmetry . if at state s several symmetries  ... are local to s  all involving variable xi  assigning xi will break all these symmetries: no state in the current subproblem will be  repeated  by the action of these symmetries. this positive effect is only due to the assignment of xi  taken as the current variable. this is the rationale for our variable selection heuristic. 
s y m m e t r y - b r e a k i n g heuristic: select for assignment the variable involved in the greatest number of symmetries local to the current state. 
   this greedy heuristic tries to break as many symmetries as possible in the next assignment. when it is applied consistently throughout the search tree  its positive effects accumulate. if  is the variable selected at the first tree level  no matter which value is assigned to it  all symmetries involving  are broken below level 1. if  is the variable selected at the second tree level  no 
matter which value is assigned to it  all symmetries involving  and  are broken below level 1  and so on.  this heuristic tries to maximize the total number of broken symmetries at each level of the search tree. it causes the following benefits. 
1
      it could be argued that the assignment of may restore a symmetry  broken by the assignment of   if exchanges both variables and their values. but now is no longer a local symmetry  given that it acts on past variables. 
	meseguer and torras 	1 


figure 1: search tree to solve the equation xy - z = 1 with different variable orderings. symmetric states are connected by shadowed lines. 
1. lookahead of better quality. a lookahead algorithm prunes future domains taking into account past assignments. when symmetries on future variables are present  some of the lookahead effort is unproductive. if there is a symmetry  such that   after lookahead on obviously redundant 
because it will produce results equivalent  through 1  to lookahead on  if no symmetries are present  no lookahead effort will be unproductive. therefore  the more symmetries are broken  the less unproductive effort lookahead performs. when the number of symmetries is high  savings in unproductive lookahead effort could be substantial. 
1. better value selection. let us suppose a problem with solution. at state s  there is a symmetry 

two variables. because of the symmetry  there is another solution with  - a. 
therefore  if xj is selected as current variable  both values a  b are good to bring search to a solution. in a more general setting  this argument supports the fact that a variable involved in many symmetries will have many good values in its domain. 
　　some of these facts are illustrated in the following example. let us consider the equation  xy - z = 1  where all variables take values in {1 1}. there is a symmetry  1 x  = y  and two solutions  x = 1  y = 1  z - 1  and  x = 1  y = 1  z = 1 . figure 1 displays two search trees for this equation  one following the variable ordering z  x  y and the other x  y  z. in the first tree  symmetry  is not broken after assigning z  so symmetric states appear inside subtrees at the first level. in the second tree  symmetry  is broken after assigning x  and symmetric states only appear between subtrees at the first level but not inside them. in addition  has two good values  1 and 1   but 
1 	value removal after failure 
let s be a search state  where is selected as the current variable and value a is tried without success. at this point  a backtracking-based algorithm will try another value for  . i f  is a symmetry local to s  we can remove 
  the value symmetric to a  from   because it cannot belong to any solution including the current assignment of past variables. if all values of x  are tried without success and the algorithm backtracks  all values removed in this way should be restored. if xi  is involved in several symmetries  this argument holds for each of them separately. 
　this method of value removal after failure provides further support to the symmetry-breaking heuristic of section 1. the more local symmetries a variable is involved in  the more opportunities it offers for symmetric value removal in other domains if a failure occurs. this extra pruning is more effective if it is done at early levels of the search tree  since each pruned value represents removing a subtree on the level corresponding to the variable symmetric to the current one. 
　an example of this value removal arises in the pigeonhole problem: locating n pigeons in n - 1 holes such that each pigeon is in a different hole. this problem is formulated as a csp by associating a variable x  to each pigeon  all sharing the domain { l   . . .   n - 1}  under the constraints  among others  this problem has a collection of symmetries in domains  

 i is the identity mapping . if search is performed by forward checking and variables and values are assigned lexicographically  the first dead-end occurs when 
there  it finds that the only remain-
ing value  n - 1  is symmetric to n - 1 which failed  so n - 1 can be pruned and no more values remain in 
. backtracking goes back to  where  by the same argument  the two remaining values are pruned. this process goes on up to reach   where all its remaining values are pruned and search terminates with failure. only the leftmost branch of the search tree is generated  and the rest of the tree is pruned. 
1 	bibds 
block designs are combinatorial objects satisfying a set of integer constraints  hall  1; colbourn and dinitz  1 . introduced in the thirties by statisticians working on experiment planning  nowadays they are used in many other fields  such as coding theory  network reliability  and cryptography. the most widely used designs are the balanced incomplete block designs  bibds . 
formally  a -bibd is a family of 1 sets 
 called blocks  of size k  whose elements are from a set of cardinality  such that every element belongs exactly to r blocks and every pair of elements occurs 


figure 1: an instance of  1 1 1 -bibd. 
exactly in  blocks. t; b r  k  and  are called the parameters of the design. computationally  designs can be represented by a v x 1 binary matrix  with exactly r ones per row  k ones per column  and the scalar product of every pair of rows is equal to  an example of bibd appears in figure 1. 
　there are three well-known necessary conditions for the existence of a bibd: 

　however  these are not sufficient conditions. the situation is summarized in  mathon and rosa  1   that 
lists all parameter sets obeying these conditions  with 
  cases with  are triv-
ial  while cases with k   v/1 are represented by their corresponding complementaries  which are also block designs . for some parameter sets satisfying the above conditions  it has been established that the corresponding design does not exist; for others  the currently known bound on the number of non-xsomorphic solutions is provided; and finally  some listed cases remain unsettled. the smallest such case is that with parameters  1 1 1   to whose solution many efforts have been devoted  wallis  1  chapter l l   . 
　some  infinite  families of block designs  designs whose parameters satisfy particular properties  can be constructed analytically  by direct or recursive methods  hall  1  chapter 1   and the state of the art in computational methods for design generation is described in  colbourn and dinitz  1; wallis  1 . the aforementioned unsettled case  with vb = 1 binary entries  shows that exhaustive search is still intractable for designs of this size. in the general case  the algorithmic generation of block designs is an np problem  corneil and mathon  1 . 
　computational methods for bibd generation  either based on systematic or randomized search procedures  suffer from combinatorial explosion which is partially due to the large number of isomorphic configurations present in the search space. the use of group actions goes precisely in the direction of reducing this isomorphism. although up to our knowledge  bibd generation has not been tackled from the csp viewpoint  it appears to be a wonderful instance of highly symmetric csp  thus offering the possibility to assess the benefits of different search strategies on such problems. 
1 	experimental results 
the problem of generating a -bibd can be formulated as a csp as follows. two rows i and j of the bibd should have exactly ones in the same columns. 
we represent this by  variables   where  contains the column of the pth one common to rows i and j. there are v v - l /1 row pairs  so there are  variables  all sharing the domain { 1   . . .  b}. from these variables  the bibd tablet     binary matrix  is computed as follows  

constraints are expressed in the following terms  
where 	. this 
problem presents many local symmetries. we consider the following ones relating future variables  
1. variable mapping exchanges xijp and x i j p   domain mappings are the identity; this symmetry occurs among variables of the same row pair. 
1. variable mapping is the identity  one domain mapping exchanges values and ; this symmetry occurs when 
1. variable mapping exchanges domain mappings are the identity; this symmetry oc-
1. variable mapping exchanges domain mappings corresponding to these variables exchange values and ; this symmetry occurs when  
1. variable mapping exchanges the domain mappings corresponding to these variables exchange values and this symmetry occurs when  

these symmetries have a clear graphical interpretation. symmetry  1  is inherent to the formulation. symmetry  1  relates values of the same variable corresponding to equal columns. symmetry  1  relates variables corresponding to equal rows. symmetry  1  relates variables sharing row i  and rows and  that are equal but for two columns and these columns are also equal but for rows and ' . exchanging rows  and   and 
	meseguer and torras 	1 


table 1: performance results of the proposed algorithms. 
columns  and   matrix t remains invariant. symmetry  1  follows the same idea although it is more complex. it occurs when exchanging rows  and   rows    and j-1  and columns  and   matrix t remains invariant. it is worth noting that these symmetries keep invariant matrix t because they are local to the current state  that is  they do not change past variables. 
　symmetries are detected dynamically at each visited node. the specific implementation of the symmetrybreaking heuristic performs a weighted sum of the number of symmetries involving each future variable  where symmetries  1  and  1  are considered of less importance than the others. 
　bibd generation is a non-binary csp. we use a forward checking algorithm with conflict-directed back-
jumping  fc-cbj {prosser  1   adapted to deal with non-binary constraints  with brelaz heuristic  brelaz  1  for variable selection and random value selection  as reference algorithm. this algorithm is modified to include the symmetry-breaking heuristic for variable selection  with brelaz as tie-breaker  producing fc-cbj-sb. adding to this algorithm the strategy of value removal after failure  we obtain fc-cbj-sb-vr. we compare the performance of these algorithms generating all bibds with vb   1 and k = 1  all having solution. since the performance of the proposed algorithms depends on random choices  we have repeated the generation of each bibd 1 times  each with a different random seed. execution of a single instance was aborted if the algorithm visited more than 1 nodes. 
   empirical results appear in table 1  where for each algorithm and bibd  we give the number of solved problems within the node limit and the average cpu time in seconds for the 1 instances. comparing fc-cbj and fc-cbj-sb-vr  we see that fc-cbj solves 1 instances while fc-cbj-sb-vr solves 1 out of the 1 instances executed. fc-cbj does not solve any instance for 1 specific bibds  while fc-cbj-sb-vr provides solution for all bibds tested. regarding cpu time  fc-
cbj-sb-vr dominates fc-cbj in 1 out of the 1 bibds considered  and this dominance is of one or two orders of magnitude in 1 cases. these results show clearly that the proposed strategies improve greatly the efficiency of the fc-cbj algorithm for bibd generation. 
   fc-cbj-sb results show that this algorithm almost achieves fc-cbj-sb-vr performance. fc-cbj-sb solves 1 instances  1 less than fc-cbj-sb-vr  requiring slightly more time on the average. so  for bibd generation  the symmetry-breaking heuristic is the main responsible for the savings in search effort  while value removal plays a very secondary role. 
we also reimplemented fc-cbj adding constraints 
  to break type  1  symmetries. the 
resulting algorithm  which included the extra pruning capacities caused by these new constraints  runned significantly slower than the original fc-cbj in all bibds with  . 
1 	related work 
previous work on symmetries and csps can be classified in two general approaches. an approach  where our work fits in  consists in modifying the constraint solver to take advantadge of symmetries. a modified backtracking algorithm appears in  brown et a/.  1   testing each node to see whether it is the appropriate representative of those states symmetric to it. considering specific symmetries   freuder  1  discusses the pruning of neighborhood interchangeable values of a variable. another 
strategy  roy and pachet  1  considers value pruning between permutable variables. interestingly  these two strategies are particular cases of the more general strategy presented in section 1. it is easy to show that  


independently  our strategy of value removal after failure can be seen as a particular case of the symmetry exclusion method introduced by  backofen and will  1  for concurrent constraint programming  and applied to the csp context by  gent and smith  1 . 
　another approach consists in modifying the symmetric problem to obtain a new problem without symmetries  but keeping the non-symmetric solutions of the original one. to do this  new constraints are added to the original problem in order to break the symmetries. detecting symmetries and computing the new constraints is performed by hand in  puget  1 . alternatively  existing symmetries and the corresponding symmetry-breaking predicates  in the context of propositional logic  are computed automatically in  crawford et al.  1   
1 	conclusions 
in this paper we have analysed how to take symmetry into account to reduce search effort. we have presented two strategies to exploit symmetries inside a depth-first search scheme. these strategies have been tested on a highly symmetric combinatorial problem  namely the generation of bibds  an np problem which has triggered a considerable amount of research on analytic and computational procedures. its wide variability in size and difficulty makes it a very appropriate benchmark for algorithms aimed at exploiting symmetries in csps. 
　we believe that systematic procedures are more likely to shed light on the solution of difficult instances of the problem  whereas randomized algorithms may be quicker at finding solutions in easier cases. the present work has not been aimed at solving a particular such instance  but instead at proposing and evaluating tools to deal with symmetries. in this respect  the proposed strategies have been shown to be effective in reducing search effort.. 
　it is worth mentioning that there is always a trade-off between the effort spent in looking for and exploiting symmetries  and the savings attained. thus  instead of considering all possible symmetries  it is advisable to establish a hierarchy of them and try to detect the simplest first  as we have done. 
　concerning future work  we plan to compare our strategies with the alternative approach of reformulating the original problem by adding new constraints to break problem symmetries. we also want to assess to what extent our approach depends on the type and number of symmetries occurring in a particular problem. we would like to identify criteria for value selection which complement our symmetry-breaking heuristic for variable selection. moreover  the experimentation should be extended to other bibd families  and the benefits obtained validated by applying these strategies to other domains. 
acknowledgements 
we thank javier larrosa and the anonymous reviewers for their constructive criticisms. 
