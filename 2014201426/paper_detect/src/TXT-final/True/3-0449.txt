
several researchers have attempted extract the principles behind hormone gradients found in biological system  and apply them to control physically manifesteddistributedsystems. this paperpresents an efficient implementation of a graph-based version of hormone gradient mechanisms. the algorithm is based on hop-counting of the topological distance between any given vertex and the hormone emitting vertex  and can deal with dynamic changes to the topology of the system. performance of the described algorithm is documented through a number of experiments. the algorithm was developed for use in self-reconfigurable robotics  but might very well be useful for many other applications. the use of the algorithm to provide a
common coordinate system for a collection of selfreconfigurablerobot modules is described  that provides pose relative to the emitting module for all modules affected by the hormone.
1 introduction
hormone gradients have a central role in the coordination of growth and self-repair in biological multicellular systems. several researchers have attempted to use these same mechanisms to control physically manifested distributed systems  by using some abstraction over the perceived functioning of biologicalhormonegradients. this paper presents an efficient implementation of a graph-based version of hormone gradient mechanisms  based on hop-counting and spanning a tree over the topology  that can deal with dynamic changes to the topology of the system. the paper will also describe how the algorithm can be used to relay a common coordinate system for modules in a self-reconfigurable robot. even though the focus was on self-reconfigurable robots during development  the algorithm is believed to have much wider applicability.
1 graph-based hormone gradients
as a first approximation  simple gradients are fairly easy to implement. figure 1 illustration a  shows a graph representing a system of 1 vertices  with 1 edges. in b  a simple

figure 1: a few simple graph gradients
width first graph traversal algorithm  starting at the gray vertex  has been applied to assign a value to each vertex  where the value corresponds to the recursion depth. the result is that each vertex holds its distance to the gray vertex. in c  a similar algorithm is run  where a limit has been imposed on the recursion depth. the value assigned to vertices is the limit minus the recursiondepth  resulting in the held value decreasing the further we get away from the gray module. this can be regarded as an abstract implementation of a hormone gradient emitted from the gray vertex. the hormone gradient is emitted with a given strength that defines the depth of the recursion  the maximum topological distance  and thus the number of affected vertices. the c  approach also allows us to have several emitting vertices  as shown in d  where two vertices are emitting a gradient  one with strength 1  and one with strength 1. in d  the graph algorithm is designed such that once a vertex has been assigned a value  only higher values can be assigned to that vertex.
　to illustrate how this can be used as a gradient  in e  arrows point to the edge leading to the vertex with highest value. we see that if we start at any vertex in the graph and follow the arrows  we end up at one of the emitting vertices. also we see that the vertex with a higher emission strength has a larger basin of attraction than the vertex with lower emission strength.
1 agent-based hormone gradients
the previous section briefly described how traditional graph traversal algorithms can produce a loose analogy to biological hormone gradients. however  in a physically distributed system we cannot directly use graph traversal algorithms.
　this paper presents a distributed algorithm  providing information on topological distance in communication networks with dynamic changing topologies. consider an agent for each vertex in the graph  where agents asynchronously and without any global knowledge  efficiently realizes such graph hormone gradient information.
1 related work
hormone gradients have been studied by biologists and have been found to be a key player in coordinating and controlling growth in plants and animals. mainhardt and gierers'  meinhardt  1   meinhardt and gierer  1  work on how hormone gradients control the forming of the tentacles of the hydra animal describes how hormones are responsible for almost all aspects of shaping the animals body. other relevant work includes nishimura's  nishimura and sasai  1 work on chemo-taxis on cells in solutions with chemical gradients.
　several researchers have extracted and abstracted these mechanisms for use in the multi-robot domain. amorphous computing  abelson et al.  1  nagpal  1  nagpal et al.  1  is one example of research relying heavily on simulated hormone gradients  and many more examples exist  including work on cell division in artificial evolution  hotz  1   and in self-reconfigurable robotics  such as bojinov 
casal and hogg's scents  bojinov et al.  1 .
　all the implementations of digital hormone gradients in the distributed robotics literature rely on continuous broadcasting of a hop-count number. when an agent receives a message with a hop count number  it remembers this number and starts emitting a message with an incremented or decremented hop count number  at regular intervals. a timer keeps track on when the last message matching the stored hop count number was received. if too long time has expired  the stored hop count number is erased  and the agents stop sending messages.
　as a first approximation  this continuous broadcasting approach works fine. however  there are two main problems with this approach:
  frequent emission of messages  even if there is no change to the topology of the agents.
  continuous broadcast style approaches can fail to deal adequately with dramatic changes to the topology.
　the first point has to do with efficiency in terms of power consumption and processing power. the second point  illustrated in figure 1  is more serious.
　for these two reasons  it is desirable to develop a better algorithm.
1 features of the algorithm
the algorithm described in this paper is an extension of e. gafni and d. bertsekas' work described in the paper  distributed algorithms for generating loopfree routes in networks with frequently changing topology   gafni and bertsekas  1 . their algorithm has a number of properties that makes it interesting for the purpose of this paper:
1. the algorithm is distributed and works on unknown communication topologies.
1. their algorithm spans a directed acyclic graph  dag  over the network topology  where all directed paths lead to the destination.

figure 1: illustration of a case where continuous broadcaststyle graph gradients is problematic. assume a gradient source in the upper part of the illustrated graph  emitting a decrementing gradient  type c  from figure 1  with high enough intensity to cover the graph. when the edge is removed  we would like gradient information to disappear from the amputated part of the graph. however  depending on the exact implementation of the broadcast-style approach  the gradient hop-count number might instead drift  slowly  towards infinity or zero. the problem is  that when one vertex has timed out  it might receive an new gradient message from one of its neighbors  keeping the gradient  alive .
1. in the event of changes to the topology of the network  the algorithm creates a new dag using an iterative method.
　from a functional point of view  the algorithm presented in this paper is an improved version of the algorithm presented by gafni and bersekas  with two additional features;
1. from a given vertex  the length of any directed path to the destination is equal to the shortest undirected path to the destination.
1. each vertex knows its topological distance from the destination.
1 definitions
the algorithm described below works on a graph  to create a loose analogy to chemical/hormone gradients. the algorithm is completely distributed  and is able to deal with frequently changing topology  while at the same time using very little communication. consider an agent for each vertex v in the graph g =  v e . agents have a number of ports  through which they can communicate to other agents. the algorithm uses two features per agent. agents can emit a hormone with strength s and sense the intensity i of the hormone. both s and i are in   the set of natural numbers. we require agents to know which of their ports are connected to other agents  and which are not. given this  a digital hormone gradient can be defined as a four-tuple  {g i s p}  where:
  g =  v e  is a graph  where vertices are elements of the configuration  and edges are physical connections between the elements.
  i : v ★ is the hormone intensity  concentration  mapping  so that i = i v  is the hormone intensity for vertex v.
  s : v ★ is the hormone emission strength mapping  where s = s v  is the strength s with which vertex v （ v emits the hormone.
 is the port function. the
port function holds information for the state of each of the agent's ports  so that p v n  is the state of the agent for vertex v's n'th port. the symbol  is used to specify a port that is not connected  such that  n （ :  v （ v :  v1 （ p v n  {v v1}（ e   p v n  （ v .
　the four-tuple {g i s p} describes the global state of the hormone gradient  but we are aiming at a distributed algorithm with only local information. for any given vertex v （ v   the local gradient state information available is i = i v  s = s v  and for each of the j ports  pn = p v n  where 1 ＋ n   j. besides this information  the algorithm requires agents to remember their parent in the spanning tree  1 ＋ f   j  using  1 for no parent   a timer/counter t （ and an array for storing information on which ports to send messages to  m n  （ {none propagate}.
　the algorithm basically works by maintaining local information on the spanning tree  such that the variable f always points to the port from which the gradient is flowing. the timer/counter is used to adjust the relative speeds of propagating gradient and deleting the gradient. without this adjustment continuous propagation and deletion of the gradient in local cyclic areas of the graph might arise  causing much communication and slow hormone deletion. however  this adjustment introduces a parameter that is the number of time steps to delay propagate messages when spreading the gradient. lower values cause the algorithm to be faster but more unstable.
　the algorithm for each agent  implementing the desired graph-basedhormone gradient behavior  is given below. note that neither global communication nor synchronization between agents is assumed.
　the -initialize- function resets the variables of the agent. -emitgradeint- is used to set the hormone emission strength of the agent. setting to zero clears the gradient.
-updategradient- holds the central functionality such as sending messages  and should be called at regular time intervals. the frequency at which it is called determines the hormone propagation speed in the system. the four event functions -connectevent-  -disconnectevent-  -propagatemessagerecievedevent- and -deletemessagerecievedevent- are very light-weight and can be called in some interrupt routine whenever the corresponding event is detected.
-initialize  -
i := 1;s := 1;f := 1;t := 1;
foreach n （{1..j   1} do m n  := none;
end-emitgradient s 1 - s := s1;-connectevent n -
m n  := propagate;-disconnectevent n - if n = f then f :=  1;
end-updategradient  - if s   i then i := s;f :=  1; foreach n （{1..j   1} do m n  := propagate; end
else if s   i … f =  1 then foreach n （{1..j   1} do
if
senddeletemessage n i-1 ;
end
m n  := none;
;
else if t   1 then t := t   1; if t = 1 then foreach n （{1..j   1} do if n 1= f then m n  := propagate;
end
end
end
else
foreach n （{1..j   1} do
if	then sendpropagatemessage n i-1 ; t := 1;
;
   end end-propagatemessagerecievedevent n 1 i1 - if i1   i then i := i1;f := n1;t := 1;// this constant  1  defines the delay before propagating the gradient  to allow delete messages to  catch up .
else if i1   i   1 then m n1  := propagate;
end-deletemessagerecievedevent n 1 i1 - if i1 − i then f :=  1;
else
m n1  := propagate;
end1 tests of the algorithm
the algorithm was implemented and tested on graphs with varying sizes and numbers of loops  shown in figure 1. to test the robustness of the algorithm  the different activation schemes described in  butler et al.  1   d1 d1 and d±  were used for the agents. in d1  agents are activated in a fixed order each time step  in d1 the agents activation order is permuted for each time step  and in d± a random agent is picked and activated n times each time step  where n is the number of agents. figure 1 shows the number of messages passed as a function of the number of modules for three different graph types  using the d± activation scheme. the
	string graph	single cycle graph fully connected grid

figure 1: the three graph types used to test performance of the distributed hormone algorithm. the gray vertex is the source of the gradient.
data shows that the algorithm has good performance  in that the number of messages passed is linearly proportional to the number of edges in the graphs  and that the number of time steps used to propagate the hormone is proportional to the diameter of the graph.
　a different set of experiments were performedfor counting the number of messages used to remove the gradient again  by setting the emission strength of the emitting agent to zero. these results are shown in figure 1. the results show that the number of messages generated for removing a hormone is linearly proportional to the number of involved graph edges. notice that removing the hormone is faster than covering the graph  due to the delay on propagating the gradient.
1 pose hormone gradients
the previous section described the basic graph hormone gradient algorithm. this section describes how the algorithm has been used for controlling two self-reconfigurable robot systems  shown in figure 1. self-reconfigurable robot control is a good application test bed for this kind of hormone gradient algorithms  because of the constantly changing topology in such a robot  and because of similarities between selfreconfigurable robots and multi-cellular organisms.
1 common pose for self-reconfigurable robot modules
the distributed hormone gradient algorithm described above can be expanded slightly to be used for propagating pose  position and orientation  relative to the emitting vertex in a self-reconfigurable robot. basically  the expanded algorithm uses feed-forward kinematics in the generated directed acyclic graph to compute the relative pose to the emitting vertex. to realize this  it is a requirement that the relative pose between two connected vertices in the configuration can be found. we let the space be the space of relative poses in a 1d vector space.
then  a relative pose hormone is a four-tuple  {g i s p}
where:
  g =  v e  is a graph  where vertices are elements of the configuration  and edges are physical connections between the elements.
  i : v ★   〜   is the hormone intensity  concentration  mapping  so that i = i v  i = hin ipi  where in （  ip （ is the hormone intensity in and relative pose ip for vertex v.
scalability of the hormone gradient algorithm for 1 runs

figure 1: top: message count for covering a graph with the hormone gradient  for varying number of vertices. results for the string graph type is not shown  since they turned out to be the same as the results for the single-cycle graph. the variance is caused by using the d± activation scheme. bottom: the number of time steps it takes to fully cover the graph for each of the three graph types and for varying graph sizes.
  s : v ★   〜   is the hormone emission mapping  where s = s v  s = hsi spi is the emission strength  si  and the emitted pose  sp  for vertex v.
 is the port function. the port function holds information for the state of each of agent's ports  so that p v n  is the state of vertex v's n'th port. the symbol used to specify a port that is not connected  such that  n （ :  v （ v :  hv1 p1i （
p v n  : {v v1} （ e   p v n  （ v . here  p1 is the relative orientation between the two connectedelements  such that if pv1 is the pose of v1 and pv is the pose of v  then pv1 〜 p1 = pv.
　for any given module v （ v   the local gradient state information available is i = hin ipi = i v  s = hsi spi = s v  and for each of the modules j connectors  pn = p v n  is either.
　the principle is to do feed-forward kinematics in the directed acyclic graph generated by the graph hormone algorithm. as a consequence  each module affected by the hormone knows its relative position and orientation to the hormone source. it turns out that by exploiting that each module knows its relative position to the source  it is possible to re-

figure 1: tests on removing the hormone from the graph by setting the emission strength of the emitting vertex to zero  after the hormone has fully propagated. the two graphs show the number of messages generated and the time used for the three graph families and for varying graph sizes. in the top graph the string graph results were omitted since they are identical to the single cycle results. notice that removing the hormone is faster than propagating the hormone  but produces more communication and has higher variance. this relationship can be adjusted by changing the propagation delay.
move the delay for propagate messages by adding an extra condition for the case of receiving a propagate message. the implementation details of the pose hormone gradient algorithm has been omitted due to space constraints.
1 implementation and experiments
the pose hormone algorithm has been implemented and tested on simulations of the atron system  figure 1  left  and on the m-tran system  figure 1  right.
　both the atron and the m-tran modules are composed of two parts  where the parts are connected by an actuated joint. the algorithm is implemented  such that each part of the modules corresponds to a vertex in the graph. the following will describe some experiments done on the pose hormone algorithm on the simulated m-tran robots.
1 m-tran  message count
three test configuration designs are shown in figure 1. each configuration comes in a form with 1  1  1  1  1 and

figure 1: module for two self-reconfigurable robot systems. left: the atron system. right: the m-tran system.
c 
figure 1: the three test configurations used in the synthetic tests. here composed of 1 modules each.
1 modules. the three designs differ in the number of loops in the topology  where a  has no loops  b  a single loop and c  has many loops.
an experiment proceeds as follows:
1. a module in one end/corner is set to emit a hormone gradient with an emission strength of 1.
1. data is collected on the number of messages used to fully propagate the gradient  and on how many time steps it took.
1. then the emission strength of the emitting module is set to zero.
1. similarly to step two  data is collected. the algorithm was tested using the d1  d1 and d± activation schemes. ten experimentswere performedfor each combination of configuration and activation scheme  and mean and variance were computed. the correctness of the pose information is easily verified by placing the emitting module such that the emitted pose is identical to the pose in the simulator. in this case  the relative pose hormone for any module should be identical with its pose in the simulator  provided appropriate scaling . figure 1 shows the average number of messages  and figure 1 the communication load per connector  using the d1 activationscheme. for deleting the hormone gradient  the number of messages passed by any connected connector was constant two.
　besides these simple tests  the algorithm was used a lot during work on control of the two self-reconfigurable robot systems  to produce a common coordinate frame of reference for locally cooperating groups of modules.
1 discussion & conclusion
this paper describes an efficient algorithm for realizing an abstract implementationof hormonegradients. hormonegra-

test configuration
# connections11111# messages for propagating11111# message for deleting11111	# modules	1	1	1	1	1
figure 1: the average number of messages  rounded to nearest integer  used to propagate and delete a digital hormone gradient for nine different configurations using the d1 activation scheme. the messages passed between  agents  within the same module are included in the data  so since each module has two  agents . the number of messages to propagate the gradient in configuration a  is exactly the number of modules plus the number of connections between modules. the data also shows that the number of messages for deleting a gradient is approximately double that of propagating the gradient.figure 1: average message count per connector for propagating the hormone gradient for each of the configurations  using the d1 activation scheme. the graph shows that configuration design c  with many topology graph cycles causes more messages per connector than a  and b . however  the message count per connector is still lower than two.
dients are widely used in biology to coordinate and differentiate cellular behavior.
　the described algorithm is based on topological distance  and is capable of dealing with changing topology in the connectivity graph using only local information and without requiring global synchronization.
　the algorithm has properties similar to that of gafni and bertsekas  with the added benefit that the spanning dag is  in a sense  optimal  in that any directed path tho the source has the same length as the shortest undirected path. additionally  in contrast to the commonly used continuous broadcast method  the presented algorithm only generates communication when the topology of the graph changes  or when the gradient information changes. furthermore  only a constant  and small  number of messages is generate per graph edge  in the event of any change to the hormone gradient. less communication results in reduced hardware requirements  that again can reduce requirements to power  processing  price and size.
　performance of the described algorithm is documented through a number of experiments. an expansion of the hormone gradient algorithm is given which can be used to provide all self-reconfigurablerobot modulesaffected by the hormone their pose relative to the emitting module. the algorithm was developed for use in self-reconfigurable robotics  but might very well be useful for many other applications. future work will include further analysis of performance and analytical proofs.
