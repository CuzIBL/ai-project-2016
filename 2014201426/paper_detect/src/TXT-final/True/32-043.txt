 
shop  simple hierarchical ordered planner  is a domain-independent htn planning system with the following characteristics. 
  shop plans for tasks in the same order that they will later be executed. this avoids some goalinteraction issues that arise in other htn planners  so that the planning algorithm is relatively simple. 
  since shop knows the complete world-state at each step of the planning process  it can use highly expressive domain representations. for example  it can do planning problems that require complex numeric computations. 
  in our tests  shop was several orders of magnitude faster man blackbox and several times faster than tlpian  even though shop is coded in lisp and the other planners are coded in c. 
1 	introduction 
 conventional wisdom'' in al planning holds that totalorder forward search is a bad idea because it causes excessive backtracking. however  several groups of researchers have begun to argue that the opposite is true: that total-order forward-search allows planners to use a more expressive domain representations  which can be used to encode domain knowledge to make the planners highly efficient. more specifically: 
  prodigy  veloso and blythe  1; fink and veloso  1  does a forward state-space search that is guided by a means-end analysis male by backward chaining on the goals. veloso and blythe  showed that causal link commitments can affect the performance of partial-order planners when the goals have a property called linkability. in their experiments  prodigy ran many times faster than snlp  mcallester et a/.  1 . 
  tlpian  bacchus and kabanza  1  1  does a forward state-space search  using modal-logic axioms to prune unpromising search paths. in bacchus and kabanza1 s tests  tlpian ran several orders of magnitude faster than blackbox  kautz and selman  1   ipp  koehler et a/.  1   satplan  kautz and 
1 	planning and scheduling 
selman  1   prodigy  veloso and blythe  1   and ucpop  penberthy and weld  1 . 
  smith et al  1  1  developed an approach that combines htn-style problem reduction with left-toright backtracking to produce a search strategy similar to prolog's. they used this approach successfully in domain-specific planners for several practical applications  including manufacturing planning  smith et a/.  1  and the game of bridge  smith et a/.  1 . they argued for the advantages of their approach by analyzing the reasons for its success in real-world applications  nau et al 1 . however  they could not compare their approach head-to-head against domain-independent planning algorithms  because their implementations were domain-specific. 
in order to test the performance of smith et a/.'s approach in a domain-independent setting  we have created a domain-independent formalization of the approach  and have implemented it in a planner called shop  simple hierarchical ordered planner . shop is available at  http://www.cs.umd.edu/projects/shop   under the terms of the gnu general public license. shop has the following characteristics: 
1. shop plans for tasks in the same order that they will be executed. by avoiding some task-interaction issues  this makes shop simpler than htn planners such as such as nonlin  tate  1   sipe-1  wilkins  1   o-plan  currie and tate  1   and umcp  erol et a/.  1 . it also makes it easier to prove soundness and completeness results. 
1. since shop always knows the complete world-state at each step of the planning process  it can use considerably more expressivity in its domain representations than most al planners. for example  shop has the ability to do horn-clause inferencing  numeric computations  and interactions with external agents and external information sources. 
1. shop's expressive power can be used to create highly efficient domain representations. in our tests on blocks-world and logistics problems  shop was several orders of magnitude faster than blackbox and several times faster than tlpian  even though shop 

is coded in lisp and the other planners are in c. 
1 	formal definitions 
this section defines the syntax and semantics used in shop  as well as the shop planning algorithm. for brevity  the definitions below are for a somewhat simplified version of shop's syntax and semantics. section 1 gives an informal overview of the additional features that appear in the full syntax and semantics. for a formal description of those features  see the first method says that if y is already clear we should do nothing; the second says that if another block x is on y  we should make x clear and then move x to the table. 
1 	semantics 
 www.cs.umd.edu/projccts/shop/documentation.html . ground  then o is applicable to t   and the list is a 　the intent of an operator o =  operator ft d a c  is to specify that ft can be accomplished by modifying the current state of the world to remove every atom in d and add every atom in a. more specifically  if t is a primitive task and there is an mgu u for t and ft such that ft* is 

1 	syntax 
we use the usual first-ordcr-logic definitions of variable and constant symbols  function and predicate symbols  terms  atoms  conjuncts  most-general unifiers  mgu's   and horn clauses; with the notation adapted for lisp. for example  here are two horn clauses  first in prolog notation and then in our notation: 

　a state is a set of ground atoms  and an axiom set is a set of horn clauses. if s and is a state and x is an axiom set  then  satisfies a conjunct c if there is a substitution u  called a satisfier  such that  entails c. u is a most general satisfier  or mgs  if there is no other satisfier v more general than u. in contrast to mgu's  which are unique modulo lexical renaming   there may be several distinct mgs's for c from s and x. 
　a task is a list of the form   where s  the task's name  is a task symbol  and  the task's arguments  are tarms. the task is primitive if s is a 
primitive task symbol  a symbol whose first character is an exclamation point  and it is compound if s is a 
compound task symbol  a symbol whose first character is not a special character . a task list is a list of tasks. 
　an operator is a expression  .operator h da   where h  the head  is a primitive task  and d and a  the deletions and additions  are sets of atoms containing no variable symbols other than those in h. for example  here is an operator to put a block on the table: 

　a method is an expression that has the form  .method h c t   where h  the method's head  is a compound task  c  the method's precondition  is a conjunct  and t  the method's tail  is a task list. for example  here is a pair of methods for clearing the top of a block: 

simple plan for t. if we execute this plan in some state s  it produces the state 
　the intent of a method m = {: method ft c t  is to specify that if die current state of the world satisfies c  thai ft can be accomplished by performing the tasks in t in the order given. more specifically  let s be a state  x be an axiom set  and t be a task atom. suppose there is an mgu u that unifies t with ft  and suppose satisfies c . than m is applicable to t in and the result of applying m to t is the set of task lists : v is an mgs for . each task list r in r is a simple reduction of t by m in 
a plan is a list of heads of ground operator instances. 
if p is a plan and 1 is a state  then p s  is the state produced by starting with s and executing the operator instances in the order that their heads appear in p. 
　a planning problem is a tuple p =  s t d   where s is a state  t is a task list  and d is a set of axioms  operators  and methods. if  s t d  is a planning problem  then ii s t d   the set of all plans for t from s in d  is defined recursively as follows. 
　if t is empty  then ii s tjd  contains exactly one plan  namely the empty plan. otherwise  let t be the first task atom in t  and r be the remaining task atoms. there are three cases.  1  if t is primitive and there is a simple plan 
p for t then 	= 
 1  if t is primitive and there is no simple plan for t  then = .  1  if t is compound  then = 
: r is a simple reduction of t . 
1 	soundness and completeness 
the shop planning procedure is as follows: 
procedure find-plan s t d  
return seek-plan s t d m   
end find-plan procedure seek-plan s  t d  p  if t = nil then return the list  p  t as the first task in t; r = the remaining tasks if / is primitive then 
if there is a simple plan q for t then 
return seek'plan q{s  r d zppexid p q   
else return fail 
else 
for every simple reduction r for t in s 
ans = seek-plan s  append r  r  d p   it ans fail then return ans 
	nau  cao  lotem  and munoz-avila 	1 

cud for return fail 
end if 
end seek-plan 
since find-plan is a straightforward implementation of the definition of tl s t d   it is easy to show it is sound. for finite search spaces  find-plan is also complete. for infinite search spaces  it is incomplete for the same reason prolog is incomplete: if the leftmost unexplored path is infinite  it will never return from that path. it is straightforward to make find-plan complete for infinite search spaces  by doing an iterative-deepening search of find-plan' s search space. our implementation can do iterative deepening  at the user's option   but in practice we have found it more efficient not to use it 
1 	example planning domain 
　to illustrate how shop works  we now describe a simple transportation-planning domain. table 1 defines the domain  table 1 shows a specific problem in that domain  and table 1 shows plans found by shop on several problems in that domain. 
　the scenario for the domain is that we want to travel from one location to another in a city. there are three possible modes of transportation: taxi  bus  and foot. taxi travel involves hailing the taxi  riding to the destination  and paying the driver $1 plus $1 for each mile traveled. bus travel involves hailing the bus  paying the driver $1  and riding to the destination. foot travel just involves walking  but the maximum feasible walking distance depends on the weather. thus  different plans are possible depending on what the layout of the city is  where we start  where we want to go  how much money we have  and what the weather is like. 
　as mentioned earlier  shop incorporates several extensions to the syntax and semantics described in this paper. to illustrate those extensions  the transportationplanning domain uses most of them. in particular: 
1. axioms* tails and methods' preconditions can include negations  which are evaluated using the closed-world assumption  and calls to the lisp evaluator. for example  axiom al of table 1 says that the taxi fare is $1 plus $1 for each mile traveled; and method mi's precondition says that to pay the driver  we need sufficient money for the fare. 
1. if a method's precondition is satisfied  then its entire tail is passed to the lisp evaluator. lisp's quote  backquote  and comma constructs can be used to prevent evaluation  see method m1  or to do conditional evaluation  see method ml  which does subtraction to create set-cash's second argument . 
1. axioms can have multiple tails  to be used in an  ifthen-else  fashion. for example  the axiom   :head taill tail1 tail1   says head is true if taill is true  or if taill is false but taill is true  or if taill and taill are false but tail1 is true. this gives 
1 	planning and scheduling 

expressivity similar to a restricted version of prolog's  cut   but in a way that is easier to understand. for example  axiom a1 says that walking distance is   1 miles in good weather  and   1 mile otherwise. 


1. if the first element of a method's precondition or an axiom's tail is : first  shop's theorem prover returns after finding the first satisfier  just as prolog would do   rather than looking for all satisfiers. as an example  in method m1 this is used to tell shop that it should only consider hailing the first taxi at the taxi stand  rather than hailing all of them. 
1. a method can have multiple pairs of preconditions and tails  to be used in an  if-then-else  fashion. for example    .method head prel taill prel tail1   says that the reduction of head is taill if prel is true  or tail! if prel is false and pre! is true. method m1 uses this to specify that we won't consider bus travel unless we don't have enough money for taxi travel. 
1. operators have numeric costs  the default cost is 1   and the cost of a plan is the sum of its operator costs. the transportation domain does not illustrate this. 
although the transportation-planning domain is easy to represent in shop  we believe that most other ai planners would not have sufficient expressive power to represent it fully  because of the numeric computations that need to be done as part of the planning process. 
1 experiments 
we have tested shop against two other planners: blackbox  kautz and selman  1   which was one of 

the two fastest planners in the a1ps-1 planning competition  mcdermott  1 ; and tlplan  bacchus and kabanza  1   which outperformed blackbox by several orders of magnitude in bacchus and kabanza's tests. 
1 	blocks-world planning 
to run shop in the blocks world  we encoded the blocks-world planning algorithm of  gupta and nau  1  as a set of axioms  operators  and methods. we tested shop  tlplan and blackbox on the blocks-world problems in the blackbox software distribution. we ran shop and tlplan on a 1-mhz sun ultra  and 
blackbox on a 1-mhz sun ultra. both machines had 1 mb of ram. the results are shown in table 1. 
　blackbox did worst: its time requirements increased far more quickly with problem size than shop's and tlplan's. this was to be expected  because shop and 
tlplan are guaranteed to run in low-order polynomial time on blocks-world problems  whereas blackbox does an exponential-time search. blackbox could not solve the two largest problems at all  because it ran out of memory. 
on the larger problems  tlplan took more time than 
shop  and found longer plans. we should run more tests to establish statistical significance  but the results clearly are algorithmically significant: tlplan found some non-optimal plans that the blocks-world algorithm that encoded into shop's methods and operators  gupta and nau  1  had been designed to avoid. 
1 	logistics problems 
to run shop in the logistics domain  we encoded the following procedure into methods  operators  and axioms. 
  first remove from the current world-state all  useless objects  that will not contribute to the plan. these include packages not mentioned in the goal  and empty trucks and airplanes in the same city with other trucks and airplanes. then do the following steps repeatedly until every package is at its final destination: 
1. if there is a truck or airplane at the same location as some packages that need to be picked up or dropped off  then pick them up or drop them off. 
	nau  cao  lotem  and munqz-avila 	1 


1. else if there is a package p in some city c  and p's destination is a city other than c  then choose any airplane  and let d be the city that it is in. use the truck in city d to collect all packages in city d that need to be moved. bring to the airport all packages 
1 	planning and scheduling 
that need to go to the airport  and load them onto the airplane. then fly the airplane to city c. 
1. else if there is an airplane with at least one package on board  then fly it to the destination of one of the packages on board. 
1. else if there are one or more packages that need to be picked up  then drive a truck to the location of any one of them. 
1. else if there is a truck that is carrying one or more packages  then drive it to the final destination of one of the packages in the truck. 
we ran shop and tlplan on logistics problems in the 
blackbox and tlplan distributions  on a 1-mhz sun 
ultra with 1 mb of ram. because of blackbox's memory requirements  we did not run it ourselves. instead  we used published data for blackbox on a machine that is faster than ours and has 1 gb of ram.1 tables 1 and 1 show the results. 
　again blackbox did worst and shop did best. blackbox was several orders of magnitude slower than both shop and tlplan  and it found significantly larger plans. shop and tlplan found plans of comparable size  but on most of the problems shop ran several times faster than tlplan  more than an order of magnitude faster on the more difficult problems . 
1 	discussion and conclusions 
it did not surprise us that shop did so much better than 
blackbox  for shop's methods and axioms contained sophisticated domain knowledge that could not be represented in blaekbox's operators. however  it did surprise that shop did so much better than tlplan. here  we think  are the primary reasons why it did so: 
1. although tlplan's modal-logic representation capabilities are quite sophisticated  their use  at least in the examples we have seen  has been limited to writing pruning heuristics rather than actual planning algorithms. shop's use of htn methods makes it easy to write efficient planning algorithms  as we did for both the blocks world and the logistics domain. 
1. tlplan's planning algorithm is basically a statespace search  whereas shop uses htn-style problem reduction. problem reduction can be much more efficient than state-space search  even by an exponential amount in some cases  korf  1; yang et al 1  . 
　our results support the contention that total-order forward search  combined with htn-style problem reduction  can  scale up  to complex planning problems better than partial-order action-based planning. our 
1  we got the blackbox performance data from table 1 of 
 bacchus and kabanza 1 . according to fahiem bacchus  the data came originally from the blackbox distribution  and the machine was a silicon graphics with 1 gb of ram  running at around 1 mhz. 

results also illustrate the impact that planning applications can have on planning theory: shop is a domain-independent formalization and implementation that evolved from our previous domain-specific work on manufacturing planning and computer bridge. our ongoing and future work is as follows: 
  we are doing additional experiments and analyses in order to get a better understanding of the efficiency issues discussed above. 
  shop appears to be powerful enough to be of use in complex applications such as noncombatant evacuation operation planning  mufioz-avila et al  1 . to make it easier to embed shop in such applications  we are creating an implementation of shop in java. 
  it is straightforward to prove soundness and completeness using the definitions in section 1  but it is more difficult to prove soundness and completeness in the presence of some of the extensions discussed in section 1  such as the calls to the lisp evaluator . we have begun working with others who have experience in these issues  to put this aspect of shop on a more solid formal footing. 
  we are developing a general way to handle some partial-order-planning operations while preserving shop's expressivity and left-to-right control strategy. we intend to describe this in a forthcoming paper. 
acknowledgements 
this work was supported in part by the following grants and contracts: army research laboratory daal1k1  naval research laboratory n1  air force research laboratory f1  and nsf dmi-1. 
