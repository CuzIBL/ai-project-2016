 
dali  display algorithm language interpreter  is a special-purpose programming language extension for the creation and control of changing pictures. dali pictures are composed of elements called picture modules. these are analogous to procedural activations or processes  and contain arbitrary event-driven procedures called daemons. 
introduction 
	dali 	 display 	algorithm 	language 
interpreter  is a high-level language extension for the creation and control of changing pictures   particularly pictures exhibiting complex static and dynamic interactions among their elements. prior work on this subject has been performed in the development of computer graphics programming systems  e.g. |jl  1  1  . dali differs strongly from such systems in that a dali picture is not a passive data structure. instead  a dali picture is a structure of active elements akin to  processes   containing user-written procedures called daemons which are executed in changing the picture. the selection of daemons to run and the choice1 of their order of execution is defined by a set of scheduling rules  b u i l t into the language  which are based on low-level functional relationships among daemons. a primary advantage of the dali approach is modularity: each picture element l o cally describes i t s own behavior  i . e .   manner of change. 
objects defined by dali 
　　　  n e base language extended by dali wil1 be assumed here to be lisp. dali adds to the base language four primary types of objects: outputs  daemons  picture modules  or just modules   and picture functions. 
　　　outputs are locations where data can be stored  and are primarily used for communication. outputs d i f f e r from  normal  storage locations in that a change in value of an output can be detected as an event by one or more active objects   i . e .   daemons . 
　　　daemons are parameterless procedures executed in response to some event. a typical event is a change in the value of one or more outputs. since a daemon can alter the value of outputs in response to a change in other outputs   computed changes can be propagated through the entire picture. a daemon which can change a given output's value is said to specify that output; and a daemon which runs when a given output changes value is said to watch that output. 
　　　picture modules are organizational units which contain daemons  outputs  and other picture modules in a hierarchical fashion. the objects contained in a picture module are said to be owned by that module. picture modules also contain a local environment  a mapping from identif i e r s to values used only by the daemons owned by a module. 
　　　picture functions are valued procedures written by the user. application of a picture function creates  in lieu of a normal procedural activation  a picture module which remains in existence u n t i l e x p l i c i t l y deleted. the created picture module is the value of an application of a picture function. a picture module created by a daemon is owned by the daemon's owner; this creates a hierarchical structure analogous to the tree of procedure activations created in languages such as connivfr  and oregano  1j . 
　　　picture functions are defined by an application of the function defpic  as in 
 dkfpic name  argument l i s t   body    
where name is the i d e n t i f i e r naming the picture function. the argument l i s t defines the local environment of the module created by the picture function. the body is a l i s t of function applications which are evaluated as part of applying the picture function. 
　　　the structure created by applying picture functions  creating daemons  etc.   is called the picture structure. picture structures can be diagrammed as shown in figures 1 and 1. the convent ions used are: picture modules are cross-hatched c i r c l e s   outputs are small open c i r c l e s   and daemons are larger open c i r c l e s ; modules are connected to the modules they own by solid lines and to the daemons they own by dotted 
1 

outputs are connected to daemons which change their values by short solid lines; and dashed arrows lead from each output to all daemons which run when that output changes value. 
examples 

     several examples of simple picture functions will now be presented. 
     the picture function relp  which appears below  captures the notion of  relative position  in the following sense: it causes an output's value to be maintained as the sum of two other outputs' values. 
 defpic relp  p1 p1  out  sum  
 contin  ouch sum  +  p1  p1      
the picture structure created by applying relp is shown in figure 1. 

figure 1 
     the above defpic  declares  relp to be a picture function which takes two arguments: p1 and p1; these must be outputs  due to the way in which relp uses them. applying relp creates a module whose local environment holds p1  p1  and sum; this is indicated by their presence in the argument list . the designator 
 out  indicates that at the time of relp's application  sum is to be initially bound to a newly created output with a value of nil. 
     relp's application of contin creates a daemon which watches pi and p1  running when either or both change value. when this daemon runs  i t will apply ouch  output value change  to change the value of the sum output to the sum of the values of the outputs assigned to pi and p1.  vector arithmetic is assumed.  the commas     appearing in the contin daemon are syntactic sugar for an application of the function oval  which  applied to an output  returns the value of that output. in addition to creating the daemon  contin also runs the body of the daemon once before returning  thus initializing sum. 
     the designator  out   in addition to indicating an initialization of sum  also indicates that the value of sum can be obtained from the created picture module after relp has returned. this access of relp's local environment is performed by the function out  abbreviated by a prefixed exclamation point  ! . thus  for example  
 relp disp1 ! relp disp1 pt   
creates a  chain  of relative positions two elements long. 
     now a picture function will be defined which manages a hardware display file entry causing a visible line to be drawn. this picture function  defined below as line  takes two arguments  both of which are outputs containing positions  and draws a line connecting its arguments' values. 
 defpic line  pi p1  aux  lineid  
 sftq lineid  make-entry  p1  p1   
 as-needed 
 change-entry lineid  pi  p1    
 onc deletf 
 destroy-entry lineid     
the picture structure created by an application of line is shown in figure 1. 

figure 1 
      aux   in linf's argument list  indicates that lineid is an auxiliary identifier which is to be retained in the local environment for use by daemons. lineid holds a display-file-entry identifier returned by make-entry  which creates the display file entry. the application of as-needed creates a daemon like contin but does not initially run that daemon. the created daemon watches pi and p1 and will apply the function 
1 
change-entry to alter the display file entry whenever necessary. the application of onc  for on condition  creates a daemon which is run as part of the process of deleting a line module; this daemon applies the function destrcy-entry to deallocate the display file entry. 
　　　a relative line can now be defined as follows ; 
 defpic reline  base delta  
 line base ! relp base delta     
　　　reline creates no daemons; it effectively delegates the authority to handle the creation of the relative line to the modules it created. such delegation need not be total. as an example  consider the picture function watchp1 below: 
 defpic watchp1  p1 p1 p1 
 auxo  filter  
 contin 
 cond   safe   p1  
 ouch filter  p1   
 t  drastic-action      
 line pi p1  
 line p1 filter  
 line filter p1    
　　　the  auxo  argument list designator makes filter an auxiliary identifier  like  aux   but initializes filter to contain an output of value nil. 
watchp1 draws a triangle connecting 
its three argument outputs pi  p1  and p1  provided that p1 has some range of 
 safe  values as checked by the predicate safe . if p1's value is not  safe   the daemon performs some  drastic act ion . it should be noted that the contin daemon of watchp1 runs only when the value of p1 changes; changes to the values of p1 and p1 do not cause this daemon to run  but instead are responded to directly by dae-
mons in the line modules created by watchp1. 
　　　the previous examples illustrate no mechanism by which outputs can be passed back through multiple levels of picture function invocation. for example  the output created by help in reline -- the computed endpoint of the line -- may be of interest to reline1s caller. this output passing is achieved via another argument 1ist designator;  outu   for output uninitialized.  outu  operates like  out   in that the values of the identifier s  it designates are receiva-
ble by using the function out  ! ; but  outu  does not initialize its designated identifiers  instead allowing then to be 
assigned values by the picture function body. a reline passing its computed endpoint back using  outu  can be coded as follows: 
 defpic reline1  base delta  outu  ep  
 setq ep ! relp base delta   
 line basf ep   
thus the fragment 
 reline d1 ! relinf1 d1 pt   
creates a 1-element chain of relative lines in which the embedded help daemons are directly connected. this is shown in figure 1  which shows the picture structure created by the above fragment. 

figure 1 
the acyclic daemon scheduling rules 

the dali daemon scheduling rules 

define which daemons are to be run and the order in which they are to be run. here we will deal only with scheduling rules for a special case: the situation when inter-daemon relationships are acyclic  i.e.  no daemon can change an output value and in so doing cause itself to be run again at some future time. unrestricted - in particular  cyclic - relationships can be handled in dali in a manner that leads to iteration  or  relaxation ; this more general situation is discussed in   1     the acyclic rules described here form the basis of the treatment of the cyclic case  and occur in very many situations of interest . 
　　　some definitions are needed prior to the presentation of the acyclic daemon scheduling rules: 
a daemon a is the father of a 

daemon b if and only if a specifies an output watched by b. 
a daemon a is an ancestor of a 

daemon b if and only if there exists a sequence of daemons d 1   
d l  . . .  d n  such that d 1 =a  
d n =b  and for every i in the range 1 i n+l  d i-l  is a son of d i . 
a picture is said to be acyclic 

if and only if it contains no daemon which is its own ancestor. 
the acyclic daemon scheduling rules 
1 

are: 
rule 1  selection  a daemon will be run 

if and only if one or more of the outputs i t watches i s ouched; once run  it does not run again until such an ouch occurs after i t s execution has terminated  
rule 1  noninterruption  once a daemon d 

begins execution  no daemon ancestrally related to d may run u n t i l d terminates of i t s own accord. 
rule 1  ancestors f i r s t   	i f daemons a 

and b are t o be run   and a i s a ancestor of b  then a is run hefore b. 
rule 1  closure  if two daemons are to be run and they are not related in ancestry  they may run in any order. 
　　　there is a simple method for implementing the acyclic daemon scheduling rules on a single-processor system. each daemon is assigned an unchanging integer p r i o r i t y at i t s creation according to the following rules:  x  the p r i o r i t y of the application program  considered as the  root daemon  ancestral to a l l other daemons  i s 1;  1  the priority of a daemon is one greater than the largest of i t s fathers' priorities. whenever an output i s ouched  each daemon watching that output is immediately placed on a global daemon queue in order of increasing daemon priority. the running of daemons then consists of removing the daemon at the head of the queue from the queue and running i t   repeating this u n t i l the queue is empty. 
　　　the scheduling 	rules above 	achieve two very important goals: 
　　　 1  daemons can be considered as defining invariant relationships between their watched and specified outputs. this i s critical to making dali programs operate in a comprehensible manner. it means  for example  that wherever and whenever a relp module is used  the sum output can reliably be used in place of a computation of the sum of the module's inputs. this goal is primarily guaranteed by the ancestors f i r s t rule. 
　　　 1  daemons operate in a stable environment. this is taken here to mean that the only data value changes which occur during that daemon's execution are performed by the daemon itself. this ensures that despite the fact that dali i s a multiple-environment  
 multiple-process  system  each individua l daemon can be written as i f i t were running on the simplest possible single program counter machine lacking any form of multiple processing or interrupts. races  hazards  and other synchronization worries are defined out of existence from the start. 
the  stable environment  	and 
 'relationship  goals are as much a virtue as a necessity: a system l i k e dali  whe-

environment structure 

　　　　the structure of the environment in which a dali daemon operates is composed of four parts: the p r i m i t i v e environment  the global environment. the local environment and the temporary environment these are considered to be arranged in a stack  as shown in figure 1. 

figure 1 
　　　the primitive environment consists of those identifier-to-value mappings which are fixed for a l l time in the base language; it would t y p i c a l l y include the i d e n t i f i e r  +  i n interpreted lisp  this environment is null. 
　　　the 	global 	environment 	contains identi fier-to-value mappings which are 
defined by the user  and are generally s t a t i c for the duration of an execution of a program. the names of procedures generally l i e here. in lisp  this environment is unstructured; in a language 
with s t a t i c block structure  such as algol  the global environment would be structured in accordance with the s t a t i c block structure. 
　　　a separate temporary environment is associated with each module  and retains i t s contents across daemon executions. the temporary environment contains purely temporary storage for use by daemons; it is empty when a daemon begins execution  and is emptied when the daemon finishes execution. here we assume a stack-struc-

tured temporary environment; some modi f i -
cation of this organization would be necessary i f fortran  which is not stack-structured  were the base language. 
　　　the total environment structure existing when no daemon is executing  i l lustrated in figure 1a  on a later page   is a broad but shallow tree with one temporary environment for each existing module. during any execution sequence that does not include picture function application   the total onvironment appears as shown in figure 1b: one temporary envirnoment exists  that of the currently running daemon. when picture functions are being applied  several temporary envirnoments can exist simultaneously in a nested fashion as shown in figure 1c. this occurs because each picture function body executes as if it were a daemon. 
　　　from the viewpoint of physical storage allocation  the situation with the dali envi ronment structure is simpler than the above discussion makes it appear . while the local envi ronments must be allocated out of a heap  they are 
created and destroyed realtively seldom and do not vary in size during execution. on the other hand  the much more rapidly varying temporary environments can be allocated in a single stack  since the only occurrence of multiple temporary environments is nested. 
the sharp distinction dali makes 
between local and temporary environments thus makes the environmental aspects of 
the language -- allocation of storage 
space and identifier lookup -- quite efficient . 
current implementat ion 

like any other programming language  
dali cannot be considered truly  tested  until a body of users have applied i t to their problems. unfortunately  no usable implementation of dali exists at this writing. an experimental version of dali has been programmed using the language muddle  1j on a digital equipment corporation pdp-1 in the programming technology group of m.i.t. project mac. this implementation was primarily intended to find out if the various pieces of dali f i t together in a reasonable manner  and to get an estimate of the size of the run-time system needed; the latter was gratifyingly small  amounting to approximately 1 words of fairly  loose  pdp1 program. however  this implementation is an interpreter written in an interpreter  and compares favorably in speed only with continental drift. recent attempts at compiling the dali interpreter have  however  produced sufficient gains in speed to justify the claims to efficiency made earlier in this paper. 
acknowledgements 

　　　the author would 1 ike to thank professor michael dertouzos of mit lor his aid in the course of the work reported here  especially in untangling into a presentable dissertation the snarl of ideas that were dali. pro fessor j.c. r. licklider of mit provided the computer resources needed for the experimental implementation of dali. the work of christopher reeve and other members of the mac programming technology group on muddle and its compiler made the dali interpreter possible. the research reported here was supported in part by project mac  an m.i.t. research program sponsored by the advanced research projects agency of the department of defense under office of naval research contract n1-a-1. 
