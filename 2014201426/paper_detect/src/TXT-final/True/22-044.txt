 
a constraint satisfaction problem involves finding values for variables subject to constraints on which combinations of values are allowed. in some cases it may be impossible or impractical to solve these problems completely. we may seek to partially solve the problem in an  optimal  or  sufficient  sense. a formal model is presented for defining and studying such partial constraint satisfaction problems. the basic components of this model are a constraint satisfaction problem  a problem space  and a metric on that space. algorithms for solving partial constraint satisfaction problems are discussed. a specific branch and bound algorithm is described. some initial experimental experience with this algorithm is presented. 
1 	introduction 
a constraint satisfaction problem  csp  involves finding values for variables subject to constraints on which combinations of values are allowed. these problems are widely studied in artificial intelligence  winston  1  mackworth  1  haralick and shapiro  1 . the nqueens problem  place n queens on an n by n chessboard such that no two attack one another  is often used as an example and for experimental comparison of algorithms  gaschnig  1  haralick and elliott  1  nadel  1 . 
　if a csp is impossible or impractical to solve  we may be willing to settle for a solution to a  weaker  version of the problem. 1 call this the partial constraint satisfaction problem  pcsp . it may be characterized loosely as  do the best you can  or at least as well as...   or  find me the closest problem that you can solve  or one at least as close as...  . this paper presents a formal model for pcsps  discusses algorithms for solving them and presents some initial experimental results with one specific algorithm. 
　we will use the 1-queens problem in this paper as one source of simple illustrations. the 1-queens problem is unsolvable. however  suppose we only require placing two queens  or allow one pair of queens to attack each other  or allow queens to attack along diagonals  or expand the board 
　*this paper is based upon work supported by the national science foundation under grant dcr-1. 
to a 1 by 1 grid. in each case the problem becomes solvable. notice also that the latter two partial problems are non-optimal in a set of similar problems: it would be enough to allow one pair of queens to attack diagonally or add a single additional square to the 1 by 1 board 
　as ai increasingly confronts real world problems  in expert systems and robotics  for example  we are increasingly likely to encounter situations where  rather than searching for a solution to a problem  we must  in a sense  search for a problem we can solve. partial constraint satisfaction problems have arisen in several contexts. boming uses  constraint hierarchies  to deal with situations in which a set of requirements and preferences for the graphical display of a physical simulation can not all be satisfied.  borning  et al  1 . descotte and latombe make compromises among antagonist constraints in a planner for machining problems  descotte and latombe  
1 . fox introduces  relaxations   alternative values  and  importance  to constraint representations to cope with conflicting constraints in job-shop scheduling  fox  1 . a related problem is the expression of preferences in database queries  lacroix and lavency  1 . 
this paper introduces an abstract model for the study of 
pcsps and their algorithms. section 1 of the paper presents a model of pcsps. section 1 discusses algorithms for solving problems which fit this model. 
1 model 
this section formalizes the notion of  partial constraint satisfaction problem.  a partial constraint satisfaction problem  pcsp  consists of three components 
　　　　　  p u    ps      m  n s    where: 
p is a constraint satisfaction problem 
u is a set of  universes   potential values for each variable in p 
 ps    is a problem space; ps a set of problems    a partial order 
m is a metric on the problem space 
 n s  are necessary and sufficient bounds on the metric distance between a solvable problem in the space ps and the given problem p. 
　each of these components will be discussed in turn. a solution to a pcsp is a problem p' from the problem space ps along with a solution to that problem where the metric 
distance of f from p is less than n. an optimal solution is one where the metric distance of f from p is minimal over the problem space. the optimal solution is maximal if there is no optimal solution which involves a problem q such that f   q. 
1 	the constraint satisfaction problem 
a constraint satisfaction problem can in turn be specified as a paii where: 
v is a set of variables 
c is a set of constraints  i.e. relations on the variables. 
　often attention is restricted to problems with discrete finite domains and binary constraints  involving only pairs of variables . we shall take these restrictions here for simplicity  though the approach should generalize to non binary constraints  and to a degree at least  to infinite domains. a specific pair of variables  a b  permitted by a constraint cij; will be called an element of the constraint cij. 
　domains of variable values can be specified as unary constraints  but to avoid handling variable domains as special cases in the exposition below we will treat them as binary constraints also  between a variable and itself. the value  a  is in the domain of variable v if the constraint c between v and v holds for the pair  a a . 
the 1-queens problem could be represented as follows: 

　these constraints specify the variable domains. they indicate that for each row i  a queen can be placed in any of the three columns  if permitted by the constraints imposed by the placement of the other queens . for example  means the second queen can be placed in the second row  third column. note that we have taken the customary initial step of reducing the variable domains to single rows  rather than the entire chessboard. 
i 
　these constraints specify combinations of values for the variables which are permitted by the constraint. for example    1   1   says that it is all right to put the first queen in the upper left hand corner and the third in the middle of the bottom row. 
　solving a csp means finding a set of values one from the domain of each variable which simultaneously satisfy all the constraints  i.e. the various combinations of values are contained in the domains of the corresponding relations. 
u is a set of universes uj one for each variable. for the 1-queens problem each ui might be { i l   i 1   i 1   i.1 | allowing the possibility of weakening the problem by adding additional squares in a fourth column. 
　as noted  the 1-queens problems has no solution. as a practical matter  even when a csp is solvable the effort required to obtain a solution may be unacceptable. this brings us to consider a space of alternative problems  some of which may be both solvable  and  close enough  to the original problem for our purpose. 
1 the problem space 
a problem space is a partially ordered set   ps     where: 
ps is a set of csps 
  is a partial order on ps defined as follows: 
　　　　p1   p1 i f f the set of solutions to p1 the set of solutions to p1 we will say that p1 is equivalent to p1 and write p| = p1 if the set of solutions to p1 is the same as the set of solutions to p1.   we will write p1 
  p1 and say that p1 is weaker than p1. the problem space for a pcsp must contain p  the original problem. 
   one natural problem space for a pcsp with problem p coasists of all problems q such that q   p. this set can be obtained by considering all the ways of weakening the constraints  i.e. all combinations of added values. 
　for example  in the 1-queens problem  the addition of another square at the end of row 1 corresponds to enlarging the c 1 constraint to include   1   1    and presumably adding elements to the c 1 and c 1 constraints  e.g.   1  
 1  .  we could  alternatively  have included  for example    1   1   in the original problem p  so that adding the square in row 1 would not  perhaps  involve moving as far from p.  the relaxation of the restriction that the first two queens cannot attack each other vertically corresponds to adding to c 1 the elements   1   1      1   1   and 
  1   1  . 
　it may be natural to consider a space which does not include all q   p. we may wish to specify how the problem can be weakened. some weaker problems may make more  semantic sense . 
　for example  in the 1-queen problem  we might allow removal of the restriction that the first two queens be nonattacking vertically  by adding three elements to c1 as just described  and we might allow a similar weakening of c1 and c 1 ; however  we might not allow into the problem space the following possibilities: we might prohibit on the one hand the problems that removed the vertical attacking restrictions on more than one pair of queens at a time. we might on the other hand prohibit the problems that only allowed a partial weakening of the vertical attacking restriction between pairs  e.g. by adding   1   1   and   1   1   but not   1   1  . 
　the specification of the problem space ps can clearly affect the efficiency of the pcsp search process. one way to specify the problem space is to specify generators  or operators  that take us from one problem p to a permitted set of problems  there may be  global  restrictions on these generators  e.g. choose one constraint from column a  one from column b. 
　the process of weakening csp's can be naturally viewed as involving four options: enlarging a variable domain  enlarging a constraint domain  removing a variable  removing a constraint. however  all of these can in turn be expressed in terms of the basic process of enlarging constraint domains. we have already viewed variable domains as constraints. enlarging a constraint cj  until it contains all pairs in u i xu j   all pairs allowed by the specified universes for the two variables  is tantamount to removing the coastraint. indeed for constraints cjj  inot=j  enlarging cij; to contain all pairs  a b  such that cii a a  and cjj bb  effectively removes cjj at least until such a time as cjj or cjj may be enlarged. removing cij for all j has the effect of removing the variable vi. 
　in general  ps could contain problems  q  which are stronger than p  p q  or problems  q  such that neither q p nor p q;   is only a partial order. however  if we collect all the constraints in all the problems in ps into a single problem m  then all the problems in ps can be regarded as weakenings of m 
1 	the metric 
an obvious metric derives from the partial order. m p p'  = the number of solutions not shared by p and p' when p'   p  this metric measures the number of solutions we have added by weakening p. this is a natural measure of how  good  our partial solution is likely to be. 
　computing such a metric  however  is not likely to be easy. however  after finding a set of optimal solutions with another metric we might wish to distinguish among these by computing their solutions and determining maximal  optimal solutions. we also may wish to consider how well an alternative metric does tend to reflect this natural metric. 
　another natural metric is a count of the number of constraint elements not shared by p and p' to some extent  this metric does reflect the metric based on the partial order. if p' is obtained from p by adding elements to the constraints then p'   p  because of the monotonic nature of constraint satisfaction problems. i.e. if for each constraint cjj associated with p and constraint cjj associated with p'. 
cij 	1 cij  then p'   p. 
　the metric may do more than measure differences in constraint size by counting added constraint elements. preferences can be expressed by ordering constraints 
 descotte and latombe  1  or by representing their importance  fox  1 . preferences could be associated with individual constraint elements or sets of elements. the metric can combine constraint deviations in a local or global manner  bottling et al.  1 . given the set of constraints 
cij associated with p' we might base the difference between ij 
p and p' on the maximum difference between cjj and cij for any i  j  rather than the sum of differences. we might consider some kind of average difference or least squares measurement. the initial constraints may be viewed as ideal points which we seek to approximate by some measure. 
for the 1-queens problem  we might decide that allowing diagonal attacks was preferable to allowing vertical attacks  and thus count the addition of   1   1   as moving 1 units away from the original problem while adding   1   1   only moves i unit away. if a problem p' differed from p only in  he constraint: 
c 1 = {  1   1     1   1     1   1     1  
 1    
m p p'  might be measured as: 1=1  or max l 1 =1 or ave  1 =1. 
　n and s provide bounds which can facilitate the search process. an acceptable solution must be closer to p than n. a search path can terminate when it is clear that it will not lead to such a solution. any solution as close as s to p will suffice; all search can terminate when such a solution is found. 
　if we have no initial guidance of this nature to provide  n can be infinity and s can be o. we may know one  obvious  partial solution that provides an initial n. the larger we set s the  easier  we make the pcsp. 
   for the 1-queens problem we may know that no exact solution is possible and thus be willing to set s = 1. we may know that the 1-queens problem is solvable  thus one obvious partial solution of 1-queens would involve adding squares to make a 1 by 1 board. 
　there may be some  hidden agenda  embodied in the metric. for example  we may wish to drive a problem toward a weaker version that is easily solvable  e.g. by removing constraints to yield a problem with a treestructured constraint graph  mackworth and freuder 1  dechter and pearl  1 . 
1 	algorithms 
the first part of this section discusses some general criteria for designing pcsp algorithms. the second part presents some initial experimental experience with a specific algorithm. 
1 	design criteria 
a search paradigm must be chosen for seeking a pcsp solution. the one we will focus on here is branch and bound. this is a natural choice in seeking an optimal solution where partial solutions may be recognized as suboptimal. it is a natural extension of backtracking  which is the standard approach to csps. a further extension  which merits study  would be the a* paradigm. a* may be viewed as incorporating branch and bound  while allowing more heuristic flexibility in directing the search. 
　branch and bound basically keeps track of the best solution found so far and abandons a line of search when it becomes clear that it cannot lead to a better solution. the n and s bounds provide further opportunity for discontinuing search. 
　the necessary bound n can be based on a priori knowledge of a possible solution  as suggested earlier. as branch and bound proceeds  if a solution is found at a distance d closer to p than n  n is  in effect  replaced by d. though in general we would expect that changing a csp problem to a pcsp problem by allowing partial solutions increases the complexity  if the sufficient bound s is large enough  the pcsp problem may be easier. in the 1-queens problem a sufficient bound of just 1 can permit a solution to the 1queens problem with less backtracking than would be required to discover that no exact solution exists. 
     branch and bound may be integrated with csp backtracking to produce a pcsp algorithm. the natural points at which to perform this integration are the failure points in a standard csp backtracking algorithm. 
　the simplest choice is to add to backtracking upon top level failure  when no solution is found. a branch and bound loop can be added on the outside of the backtracking algorithm. this loop will run through the problems in the problem space  keeping track of the closest problem p' to p solved so far. problems no closer to p' than p will be rejected immediately. 
　at the other extreme  branch and bound can be integrated at the lowest level of backtrack failure. as soon as a choice of a value  c  for a variable fails alternative problems p can be considered. for problems which allow c and which are still closer to the original problem p than the best solution problem so far  backtrack search can continue to the next variable  with a partial solution that includes the value c. a version of this approach has been implemented as algorithm pcsp1 and is described in more detail below. 
　branch and bound can be integrated at failure points in between these extremes. the natural compromise would occur at the points where all the values for a given variable have been exhausted in standard backtrack search. at these times options for alternative problems may be explored. 
　there is a tradeoff involved in the choice of how to integrate csp backtrack and pcsp branch and bound. by integrating at a lower level we take greater advantage of backtrack pruning to avoid unnecessary effort. on the other hand by integrating at a higher level we allow greater flexibility in heuristically guiding the search through the space of alternative problems. 
　as usual in branch and bound it is advantageous to order the search to heuristically increase the likelihood that a good  or ideally optimal  solution will be found early. the choice of values for a variable could be ordered  for example  so that those that requiring no further weakening of the problem were tried first  with the others tried in an order which reflected the amount by which the problem would have to be changed to accommodate these choices  how far the altered problem would be from the original p . for example  after placing the first queen in  1   the second queen can be placed in  1  or  1  by removing a constraint element  or  1  without changing the problem at all. it may prove desirable to take into consideration how many opportunities are opened up by altering a problem in a given way. for example  if a queen has been placed in  1   eliminating the requirement that queens not attack vertically adds one new possibility for row 1  while eliminating the requirement that queens not attack diagonally adds two new possibilities. if our metric treated both changes equally  the latter might prove preferable. 
　whenever alternative problems are generated in an order which reflects their distance from the original problem  closest to furthest  generation can stop at that point when the necessary bound n is reached. if we have a top level integration of branch and bound  this point marks the termination of the pcsp algorithm. 
   in searching through the problem space for a solvable problem  it would be desirable to avoid changing the problem in ways that do not facilitate progress. for example  if two problems are equivalent  they both do not need to be considered. a nice feature of the pcsp1 algorithm is that for the type of pcsp for which it is designed it is able to use only the minimally different problem p required to proceed at each problem choice point. 
　we might naturally expect that the pcsp problem would be considerably harder than the csp problem  and that its worst case complexity would be bounded by the size of the problem space ps. an analysis of the top level integration of branch and bound with backtracking seems to confirm that intuition. the top level loop could consider each problem in the problem space p. if we consider a problem space that allows all possible subsets of the constraint elements in the original problem p the size of this space 
　　　　　　　　　　　　　　n 1 could be roughly 1  d   where we assume d is the size of the universes of variable values. the bound on backtracking for a solution to each problem is exponential in n  where n 1 n 1 n is the number of variables. the resulting bound of 1 d 1 for the pcsp suggests that the pcsp problem is indeed potentially much worse than the csp problem. 
　however  this is one of those interesting situations where our initial view of the problem could lead to false expectations that we might be too ready to see verified. the pcsp1 algorithm below clearly has worst case behavior no worse than csp backtracking.  if the weakening of cij; constraints leads pcsp1 to consider more variable values than a csp algorithm would  pcsp1 can have a higher bound; however  it will still be only exponential in the number of variables  as is the case for csp backtracking.  how can this be  the answer lies in viewing the pcsp problem not as a search through a space of problems for a solvable one that is closest to the original problem  but as a search through the space of potential solutions for one that is closest to an exact solution. 
　while the former view can be useful  the latter clearly demonstrates that even a straightforward generate and test algorithm can solve the pcsp problem with no increase in the exponent in the worst case complexity bound over csp backtracking. 
　on the other hand  the exponential csp worst case bound is bad enough! clearly we need to consider  as we have begun to in this section  how techniques like branch and bound and heuristic search may avoid achieving that bound. 
1 a branch and bound algorithm 
the pcsp1i algorithm assumes that any weaker version of p that it wishes to use is in the problem space ps. it amends normal backtracking in a simple manner. whenever a value c for a variable v would be rejected by normal backtracking  pcsp determines which constraints were violated  and weakens the problem by adding precisely those constraint elements needed to permit c. the metric used simply counts the number of constraint elements added. the distance of the weakened problem p' from the original problem p is calculated and used for branch and bound purposes. if the distance of p from p warrants  search continues to the next 
level of the backtrack tree. otherwise  c is rejected. search continues even when a full solution is found unless the sufficient bound s has been reached or no further choices remain. pcsp1 does not permit adding new values to the variable domains  adding elements to the cij   though this could easily be included. the algorithm could be generalized to work with different metrics or problem spaces. 
algorithm pcsp1 
free variables: initial-problem  n s  best-solution  best-distance 
pcsp1  variables  values  solution  distance  current-problem  
if variables = nil then best-solution  - solution n  - distance 
if n   s then exit at top level else return 
else if values 	nil then solution'  - solution plus the first value  c 
current-problem'  - current problem with constraint elements added as needed to permit c 
distance'  - the distance between the 
initial-problem and the currentproblem 
if distance'  n then variables  - rest of the variables minus the first 
values  - domain of values for the first of the rest of the variables 
pcsp1  variables  values  
　　　　solution'  distance'  currentproblem  else 
values  - rest of the values minus the first 
pcsp1  variables  values  solution  distance  currentproblem  
else return 
　a version of this algorithm was implemented in lisp and some tests performed to obtain some initial sense of the practical cost incurred by allowing partial solutions. the results were encouraging. 
   the implementation was tested on the n-queens problem and another variation of the n-queens problem devised to have no complete solution. the  n+l n -queens problem is defined here to be the problem of placing n+1 non-attacking queens on an n by n board. 
　in figure 1  for the n-queens problem  n=1 and 1  the effort expended by pcsp1 is shown for different values of 
s. n is set to infinity to provide no assistance. pcsp1 requires more effort than backtracking for small s  but the work decreases as s increases  eventually becoming less than that required by backtracking for a complete solution. the work done is measured by counting the number of  pairtests   i.e. checks to see if a pair  x y  is an element of a constraint.  cii constraints were not used.  the solutions and the number of constraint elements added to permit the solutions  the distance from the original problem  are also shown. solution a b c d stands for queens on squares  l a    1 b   1 c and 1 d . 

figure 1. pcsp1 on n-queens  n=infmity  varying s. 
　figure 1 shows pcspi data for different values of n  the necessary bound  with s=1  on the  n+l n -queens problem  
for n=1 and n=1. an initial value of n=1 can easily be arrived at for these problems  by considering the four  lines of attack  bearing upon the n+1 st queen. solutions are available which add only two elements; if we knew that in advance we could benefit from setting n to 1. solution a b c d &  e f  stands for queens in squares  l a    1 b    1 c    1 d and e f . 
references 
 borning  et al.  1  borning  a  duisberg  r.  freeman-benson  b.  kramer  a.  and woolf  m.  
constraint 	hierarchies  proceedings of oopsla '1  1. 
 dechter and pearl  1  dechter  r. and pearl j.  the 
　
anatomy of easy problems: a constraint-satisfaction formulation  proceedings ofijcal-1  1. 
 descotte and latombe  1  descorte  y. and latombe  j.c.  making compromises among antagonistic constraints in a planner  artificial intelligence 1  1  1. 
 fox  1  fox  m  observation on the role of constraints in 	problem 	solving  	proceedings 	sixth 	canadian 
conference on artificial intelligence  1. 
 gaschnig  1  gaschnig  j.  experimental case studies of backtrack vs. waltz-type vs. new algorithms for satisficing assignment problems  proceedings of the 
second national conference of the canadian society for computational studies of intelligence  1. 
 haralick and elliott  1  haralick r. and elliott  g.  increasing tree search efficiency for constraint satisfaction problems  artificial intelligence 1  1  1. 
 haralick and shapiro  1  haralick  r. and shapiro  l.  the consistent labeling problem: part i  ieee trans. pattern anal. machine intel!. 1  1  1. 
 lacroix and lavency  1  lacroix  m. and lavency  p.  p