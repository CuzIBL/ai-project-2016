 
previous studies considered quality optimization of anytime algorithms by taking into account the quality of the final result. the problem we are interested in is the maximization of the average quality of a contract algorithm over a time interval. we first informally illustrate and 
motivate this problem with few concrete situations. then we prove that the problem is nphard  but quadratic if the time interval is large enough. eventually we give empirical results. 
1 introduction 
hard problems like planning or decision making cannot be reasonably treated by complete methods. that is the reason why  dean and boddy  1  first considered anytime algorithms  also called flexible algorithms in  horvitz  1 . these algorithms offer a trade-off between time and performance. they are characterized by a performance profile  grass  1  that enables a prediction about the quality of the results given by the algorithm depending on the execution time duration. this method has been used to solve several problems in various domains like robot control  zilberstein and russel  1   knowledge-based computation  mouaddib and zilberstein  1  and reactive agents  adelantado and de givry  1 . 
　quality is not the essential characteristic of a computation result: what really matters is its utility. the intuitive idea is that  in many situations  the utili' of a result decreases over time  and a result of medium quality rapidly obtained is more useful than a result of high quality obtained after a long time  zilberstein and russel  1 . but  when the algorithm operates on an uncertain environment  utility can be of another nature. this is the case in the following examples  which are all associated to a  crisis situation : 
  a person  p  has to give his boss  b  a report in the morning. p only knows that b will ask for the report at some time between 1 a.m. and 1 a.m. the problem for p is that trying to achieve the best quality would be a good 
　* this author is supported by the delegation gene rale pour i'armement  dga   french ministry of defense 
1 	automated reasoning strategy only if the report were claimed at 1. if it is not the case  no report at all is available! hence it seems better to ensure a medium quality draft for 1 a.m. and  once the draft is ready  to start to write a better quality report  expecting that the claim will occur late in the morning. 
  every time the enemy is going to launch a satellite  only the temporal window on which the event will occur is known in advance. tb perturb the launching  some electromagnetic jamming action must be set up  planes have to take-off  lures must be activated... . all these actions take time and the best jamming is useless if achieved after the launch. what could be considered is to set up the jamming in order to ensure the best average quality on the time interval  then to maximize the utility  in the long term . 
  when a tornado is announced  very little time is available to prepare oneself  and one's house  for any possible destruction. hence it is important to achieve the best  utility  of the protections set in place  e.g. to ensure that minimal actions have been taken first  securing the kids   before improving the quality of the protections  nailing down the shutters . 
　in the previously described situations  an interruptible algorithm would be the best solution: at the time of the event  the best possible quality would be achieved. unfortunately  interruptible algorithms are not always available since:   none of the available algorithms might be interruptible  
  anytime algorithms might result from the composition of elementary interruptible algorithms. in that case  the result is of the contract kind  zilberstein and russel  1   
  contract algorithms can be transformed into interruptible ones  zilberstein and russel  1  but  notwithstanding the fact that the execution time is 1 times longer  this method only applies if the contract durations can be chosen freely  exponential series  which is generally not the case. 
　finally  even with a genuine interruptible algorithm  situations exist in which the contract case re-occurs: if applying the results of the algorithm causes a change in the environment  it is no longer possible to let the algorithm continue in order to improve the solution from the previously 

obtained one; it must be restarted from scratch. for instance  this might occur in counter-measure applications  if the result of the interruptible algorithm is a jamming action which itself provokes a counter-jamming decision from the enemy. 
　in  delhay et al  1   we proposed partial solutions to solve these kinds of problems consisting of maximizing the average quality over a time interval. but the results achieved are limited to convex quality functions  whose second derivative is positive  which are the less probable ones in real applications. 
　in this paper  after restating the problem of maximizing the average quality of an anytime contract algorithm over a time interval  section 1   we present general results about any kind of quality function approximated by a stepwise function. we prove that the problem is np-hard  but becomes quadratic if the time interval is large enough  section 1 . wc then present empirical results which augurs well for the practical applicability of the approach  section 1 . 
1 maximizing the average quality over a time interval 
we use the notion of contract algorithms which was first coined by zilberstein  zilberstein  1   even though they appeared before  like rta*  korf  1 . contract algorithms can also result from the composition of anytime modules. in this paper  we assume that the performance profiles are deterministic functions of time. it is sometimes difficult to construct them with such a confidence  but they are good approximations of the performance profiles used in real situations. 
1 informal presentation 
a typical example is the following: an attack might happen with a uniform probability over a given time interval  and a contract algorithm  whose performance profile is increasing over time  figure 1  is available to counter-attack. the problem then consists in determining how to best prepare the counter-attack in order to get the best chance of survival over the time interval. 

　an answer to the attack must be given between t1 and tc and it is possible to begin the computation at time t = 1. to answer to this problem  several solutions can be considered. 
　first  figure 1  we activate the algorithm for a short contract  t1 ; in that case  the result has a relatively poor quality but this quality is available on a relatively long time interval 

figure 1: short but bad preparation 
　to get a better quality  we have to start the algorithm with a longer contract  t1 : the quality of the result is better  but most of the time  on  t    t1   no  quality   that is  no protection from the attack  is available  figure 1 . 

　these two cases lead to a simple observation: if the algorithm starts with a  sufficiently  short contract  ti   then the remaining time can be used to restart the algorithm with a contract t1 to get a better result. 

　hence an effective method is to start the contract algorithm several times to get a good cover of the time interval and a minimal quality early. we only have to respect two conditions: 
  the sum of all contracts must be strictly lower than the length of the interval where it is possible to compute 
  every new contract must be longer than the previous one to improve the quality of the result 
remark: 
　note that to maximize the average quality  we never execute more than one contract before t1. should we do that  all contracts before t    except the last  would be useless. 
1 formalization 
now let us give the definition of the average quality over an interval where  denotes the duration of successive runs of the algorithm  contracts . 
definition 1 : integral quality 
let f be the performance profile of a contract algorithm a. the integral quality of a over a time interval relative to a choice of n contracts with performance profile f is defined as follows: 

delhay  dauchet  taillibert  and vanheeghe 	1 

1 average quality for stepwise constant performance profiles 
     because of the difficulties involved in solving this problem in the continuous and derivable case  we chose to solve the problem by approximating the performance profile in order to get a discrete problem. we first tried using a stepwise linear function. even with this approximation  we did not manage 	to 	exhibit 	interesting 	properties. 	then 	we the above definition is only usable if the contracts respect approximated 	the 	performance 	profiles 	with 	stepwise 

the sum constraint  that is: 
the average quality is equal to the integral quality divided by the length of the interval   q f  is the supremum of the integral quality  and q f  the sup re mum of the average quality. 

1 the analytic case 
in  delhay et al.  1   we studied the maximization of the average quality for continuous and derivable performance profiles  leading to preliminary analytic results that partially cover functions with constant curvature  that is the convex case and the concave case for one contract. these results are shown below. 
　a first theorem gives the value of a single contract. the linear performance profile is a limit and the single contract equals . for convex perfor ance profiles  the single contract is greater than  in the concave case  it is lower than  a second theorem states that  for convex performance profiles  there is no need to start several contracts over  as a single contract always gives the best average quality. the value of this contract  is analytically defined by a simple equation. 

　the point we can add is that there is at least two contracts in the concave case because of the first theorem. as a matter of fact  as the single contract is lower than   it is possible to add a contract greater than the first one  but respecting the sum constraint  that improves the average quality. 
1 	automated reasoning 
constant functions. this approach not only enables us to avoid difficulties due to the continuous and derivable performance profiles  but also makes sense in the common representation of performance profiles  that is the discrete tabular representation. moreover  lemma 1 states that the average quality is approximated with the same error as the error on performance profile itself. in particular  this is true when approximating the continuous performance profile f with a stepwise function. lemma 1 : approximation lemma 

proof: this is a property of integrals applied to definition 1. 
   so  hereafter the performance profiles are stepwise constant functions  either originally  or by approximation. a stepwise constant function is a function such as  for a finite set of thresholds   f is constant on every interval 
. the following lemma allows us to treat the maximization problem as a discrete problem  by only examining the steps of the performance profile instead of all values in the interval 
lemma 1 :  stepwise function lemma  
to maximize average quality  it is sufficient to choose all contracts  in the set of thresholds of the stepwise function. 
proof: 
   if a contract g is in the interval   replacing increases the average quality. it can be checked by calculating the difference between the two average qualities  with and without 
　thanks to lemma 1  we call this  discrete  problem maxqsf  maximization of the average quality for a 
stepwise function .  denotes the maximum of the integral quality of an increasing stepwise function f over the time interval . in the next subsections  the tractability of maxqsf is considered. 
1 	maxqsf is np-hard 
the following theorem states that the maxqsf problem is intractable in general. 
theorem 1 : 
   the proof consists in reducing polynomially the knapsack problem to maxqsf. the knapsack  problem is to find a part of   a set of naturals  whose sum of its elements is maximal and lower than a natural b. we 

assume that the aj are sorted and distinct. this restriction is still np-complete. the reduction consists in building a stepwise constant function steps that gives an instance any instance of 
knapsack 
　　to do so  we use the fact that the increase of average quality obtained by adding a contract between two consecutive contracts  only depends onand and 
 the last contract . 
　the variation of the average quality induced by the choice of introducing a threshold as a contract depends on the other choices and is not easy to evaluate. that is why  is constructed by alternating the thresholds  odd numbers  that corresponds to the elements of  and thresholds  even numbers  that are chosen to necessary belong to the optimal choice of the best average quality. the even thresholds  isolate  the effects of a choice in the set of odd thresholds; hence  the improvement of the average quality obtained by adding an odd threshold  element of   only depends on the two even thresholds surrounding it1. that is the reason why we chose them so that if the corresponding element  is in the solution  the improvement of the average quality is  as a consequence  maximizing the average quality will maximize the load of the knapsack. 
　the reduction also requires that optimizing the average quality satisfies the sum constraint of the knapsack problem. this is obtained by choosing tc  the end of the time interval  such that: 

　since the sum of all contracts in maxqsf must be less than te and that all the even thresholds belong to the solution by construction  we therefore have: 

which is the sum constraint of the knapsack problem. 
   we do not have enough space to include all the steps necessary to perform the reduction we have presented. let's just say that the choice of the f function is done such that  with k great enough  but polynomially linked to the size of  a   and that the  are chosen such that   
 this construction is polynomial in the size of  a  which proves that maxqsf is np-hard. for a detailed proof  see  delhay and dauchet  1 . 
　theorem 1 looks like an instance of theorem 1 presented by  zilberstein and russel  1  in the framework of composition of anytime algorithms. however  it is not the case: we look for the best average quality  whereas they look for the best final quality after a fixed contract  the most important difference being that we do not know the number of contracts necessary to get the best average quality. 
　j .also on the last contract   but  since it's an even one  it belongs to the optimal choice. 
1 maxqsf with no sum constraint is quadratic 
our problem is intractable in general. the main difficulty comes from the search over the set of thresholds assuming that the sum constraint does not allow to take any subset of thresholds. as in knapsack  it is necessary to judiciously choose the candidate contracts. so we could suppose that:  where si is a threshold of the performance profile f. 
　hence it is possible to add any contract because the time interval is large enough to contain all contracts. that restricts maxqsf and leads to a lower complexity algorithm. 
　the idea of this dynamic programming algorithm is founded on lemma 1 which allows the division of the set of combinations of thresholds into distinct subsets composed of the combinations finishing by a fixed threshold si. the lemma allows to iteratively compute   noted 
maxq s   for subset of combinations finishing by si with si from si to sp  to finally give  is 
the ordered set  finishing by si lemma 1 : 
let si and sj be two thresholds of s   the set of thresholds off  with 
for any si  let maxq sj  be the maximum of integral quality with .si  as the last contract and the remaining time for the optimal choice of contracts with sj as the last contract. 

and especially: maxq s   = q f   where sp is the last threshold of  s . 
proof: 

maximum for both members  the result of the lemma comes as tr s:  only depends on s;. indeed   is the remaining time for the optimal choice of contracts with sj  as the last contract. 
  for the second part of the lemma  note that sp is necessary in the optimal choice of contracts. it could always be added to the choice of contracts  as there is no sum constraint  and improves the quality. by definition  maxq sp  gives the maximal integral quality at the last step of iteration. 
　the complexity of the algorithm is  with n the number of thresholds. 
algorithm: 

choice sj  denotes the optimal choice of contracts with si as the last contract. 

delhay  dauchet  taillibert  and vanheeghe 	1 


1 empirical results 
the results obtained so far do not take into account the duration of the deliberation itself. it might be a serious impediment to the practical application of our approach since we proved that the general problem is np-hard! fortunately  achieving the optimal solution is not a necessary condition for applying our method: a set of contracts approaching the optimal value of the average quality on the time interval is sufficient. that is the reason why we conducted a set of experiments designed to estimate the practical complexity of our problem. and the result was far better than expected: for all the cases we studied  the average quality achieved by the best choice oi a set of 1 contracts was always at a distance lower than 1% from the quality of the optimal choice. 
　these results concern a family of monotonic functions which approximate the quality functions most often encountered in practical cases. that is the reason why we think that these results can be of some general interest. 
　the experiment was twofold. first  we studied the contribution of the shape of the quality function to the value of the average quality. for that  we considered the family of functions defined by the following equation where the parameter  a  permits the control of the curvature of the function as shown in the associated graphics. 

every function   a  varying from 1 to 1 incremented by 
1  was approximated by a stepwise function of 1 steps for 
1 	automated reasoning 
which we computed the optimal average quality; we also computed the error w.r.t. this optimal value when considering smaller sets of contracts. we relied upon integer programming in order to avoid the classic problems of floating point numbers and took advantage of the sum constraint to limit the computation time. the results are summarized in the following table where a is the curvature  n is the number of contracts and * is the optimal solution: 

　for  the optimal quality is obtained with only one contract which was the expected result because of theorem 1. in the other cases  it is clear that the optimal quality obtained with 1 contracts is very close to the best result obtained notwithstanding the number of contracts. 
　　we also investigated the influence of the temporal location of the time interval which was set to 1 in the first experiment  while remained equal to 1. this might be of importance for many applications when time is available before the  attack  might occur. here again  as shown on the following figure  restricting the deliberation to the computation of only 1 contracts gives very accurate results  even if only one contract rapidly gives very good results : 


　in that experiment  the curvature was set to 1 and  since te was increased  the  sum constraint heuristic  became less efficient; hence we operated with a stepwise function of only 1 steps to keep the computation of optima tractable. 
1 conclusion 
the aim of this paper was to present an off-line optimization of the time allocation for a contract algorithm so as to get the best chance of survival over a time interval. so far  no analytical method for solving the problem of maximizing the average quality over a time interval is known in the general case. that is the reason why we proposed solutions for discrete performance profiles. this restriction is not a real impediment since: 
  a discrete tabular representation for the performance profiles is not a rare occurrence  
  the average quality resulting from a discrete performance profile can be as close as necessary to a given continuous performance profile  lemma 1 . 
　we showed that the so-called maxqsf problem is nphard in general  and quadratic if the time interval is large enough. this  unfortunately  is not frequently encountered in practical applications. nonetheless  the experiments we carried out lead us to think that the  practical  complexity of that problem is quite low  which makes it possible to use the approach in real-lime applications. further studies to find a theoretical explanation of this behavior could prove very interesting. 
　the average quality of a contract algorithm a can be defined by: 

where f is the quality of an intcrruptiblc algorithm a associated to a by the relation:  where  is the last contract executed at t. 
　 zilberstein and russel  1  gives a simple construction to transform a contract algorithm a of quality f into an interruptible algorithm a of quality f such as the first difference with our study is that we consider the case of a given time interval to optimize the average quality. in our case  this leads to a construction of a which optimizes the average quality. the second difference is that our problem permits cases where the length of each contract is imposed by a method  when zilberstein and russel assume that the length of each contract can be arbitrarily chosen. 
　note that a uniform probability of appearance of the attack over the interval has been considered. there arc situations where this probability is not constant  such as with a gaussian. a future study could concentrate on this point. 
　another extension could concentrate on our evaluation criteria  that is the average quality. even if this criteria gives the best statistical results  there could exist others  for example that could take the number of contracts into account  a good solution therefore is a choice of few contracts . 
acknowledgments 
i am especially appreciative of the discussions i had with dominique lohez at different stages of this work. his remarks and suggestions were very valuable. 
