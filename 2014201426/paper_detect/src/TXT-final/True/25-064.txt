 
an important component of an intelligent tutoring system  its  for teaching geometry is its capacity to transform a figure into as many different figures as possible  yet all of which respect the same underlying logical specification. given a logical specification for a figure   i  a figure can be constructed automatically from the objects and properties in the spepification; and  ii  once constructed  one can transform a figure through displacement of any of its objects and still obtain a figure that respects the specification. for a student user  this feature provides an invaluable tool for graphical exploration and discovery of properties induced by the logical specification. our problem domain is automatic construction of figures; and we address this issue in restricted cases using constraint logic programming we present solutions to cases in which figures can be constructed automatically and in which there is also a 
natural notion of completeness for our system. for this automatic figure construction system  we describe an implementation  written in prolog iii  which makes use of both constraints and coroutines provided in the language. results of experimentation are also included  as well as ways in which the system can be extended to handle non restricted cases. 
1 	introduction 
microworlds and intelligent tutors designed to help teach secondary students how to solve problems in geometry make tools available  1  to aid in the construction of geometric figures that conform to a specification provided beforehand by a teacher   1  to stimulate discovery of important geometric properties represented in such figures  and  1  to guide the organization of proofs. in previous work four main components of such systems have been identified  allen et al  1 : 
　　- figure acquisition: the student first constructs a figure which conforms to a specification provided by the teacher. the level of the geometric theory made available to students for carrying out their constructions can be adjusted by the teacher. the construction of a correct figure is considered as confirmation of the comprehension by the student of the hypotheses of the problem. 
　　- figure appropriation: the student can graphically transform the figure while its logical properties are preserved. on the one hand  the student can thus detect interesting invariants and  on the other hand  can observe graphically the impact of suppressing a hypothesis. 
　　- property exploration: the student reacts to systemproposed interesting properties by using theorems furnished by the teacher. 
　　- proof organization: the student  utilizing facts discovered during the previous steps and theorems furnished by the teacher  constructs a proof which is verified by the system. 
　　in this paper we are primarily interested in the figure appropriation component which can be approached from two different perspectives  one  imperative geometric programming  and the second  declarative geometric programming.  the imperative geometric programming approach asks the student to exhibit a  procedural  construction of a figure which conforms to a previously given specification. subsequent transformations of the figure can then be obtained by moving objects found in the construction. however  in some cases the same object can or cannot be moved  depending on the order in which the object was created during the construction. for example  consider the construction: construct line d l   then line d1  and thirdly the point p as the intersection of dl and d1. d1 and d1 can be moved but not p since it is fixed by dl and d1; on the other hand  if p had been constructed before either d1 or d1  then it could have been moved. as is not surprising  imperative geometric programming is sensitive to the order in which geometric objects are drawn. cabrigeometre  baulac et al.  1  is an important example of a system using the imperative approach. 
　　declarative geometric programming differs naturally from imperative programming in that a user is asked to provide only the logical specification of the figure  not the order in which objects are to be constructed. the system automatically constructs the figure  if possible  from whatever geometric objects are given. the figure can then be transformed by fixing all of the objects except the one that is used for doing the figure displacement. transformed figures still respect the specification. using the declarative mode for the example in the preceding paragraph  any of the three objects could be chosen  independently of order constructed  to be moved in order to provide a transformation of the figure. this capability has significant implications 
	allen  idt  and trilling 	1 
　　
for the design of teaching  didactic  situations which stimulate learning. being able to animate a figure in all possible ways gives a student the possibility of guessing more properties than if she were restricted to the animation induced by a particular order of construction found in an imperative geometric programming approach. furthermore  it becomes easier for a teacher to reinforce or to weaken a hypothesis: one has only to modify the specification  not the order  in order to obtain a new construction and subsequent animation. 
　　the first of the two goals of this paper concerns the automatic construction of geometric figures from  logical  specifications. even for a relatively simple specification language  one expressing merely the distance between two points  long  unsolved  and difficult problems have remained: for example  the construction of a regular pentagon. for our purposes  we adopt here a pragmatic point of view. it consists in believing that augmenting significantly the power of imperative geometric programming by making possible more animation  than is possible in an imperative approach  is an interesting achievement. it also resides in not being so ambitious as to want to provide a construction  even if one exists  for every specification. we adopt a declarative approach and the issue  from a computer science standpoint  is to define an adequate completeness for our system. this means that its limits must be precisely and clearly defined. to this end  we express this completeness in terms of the classical geometric tools  ruler  square  compass . 
the second of our goals is to show that constraint 
logic programming  clp  is an adequate ai tool for supporting declarative geometric programming. we use the following advantages of the clp language prolog iii  colmerauer  1 :  i  modularity expressed through rules permits easy extension or restriction of the system functionalities;  ii  calculus of constraints as exact solutions of linear constraints is provided by the language itself and resolution of the non-linear constraints that we propose can be expressed using this calculus;  iii  non determinism and suspended execution of goals  the freeze feature  permit a straightforward implementation of the claimed completeness. we will also discuss performance  which appears to be at least acceptable and able to be improved. 
1 	linear case 
computer implemented student construction languages 
 scls   allen el al. 1  provide the basis for imperative geometric programming. such languages provide an interface with which the user  typically a school student   1  indicates on a menu what object  point  line  ray  segment  circle  she wants to draw on the given graphics medium;  1  draws the object; and  1  expresses the logical properties  name  belonging to another object  parallel to  perpendicular to  is the midpoint between  is the distance from ...  of the drawn object with respect to already-drawn objects. the most important characteristic of the interface is that each operation must be realizable using drafting table instruments  ruler with translation  square  compass . consequently  a user is limited in the constructions she can carry out. for example  she cannot construct a line passing 
1 	intelligent tutoring systems 
through three points although she could create a line and afterwards three points belonging to it. such an interface has been directly implemented in the system mentoniezh  nicolas 1  and similar interfaces are implemented with the use of a mouse in the system cabrigeometre. 
　　in the problem of constructing the intersection h of the heights of a triangle abc  a possible construction by a student might be encoded using the following sequence of steps: 
create point a  create point b  create point c create segment s1 with endpoints a and b create segment s1 with endpoints a and c create segment s1 with endpoints b and c 
construct line d1 passing through a and perpendicular to the support of s1 
construct line d1 passing through b and perpendicular to the support of s1 
construct line d1 passing through c and perpendicular to the support of s1 
   construct point h as intersection of lines d1 and d1 it is clear that this sequence gives a procedure for constructing a geometric figure which often is displayed as two-dimensional graphical output  see figure 1 . cabrigeometre menus provide a language for carrying out such a procedure. the user of cabri-geometre can relocate  drag  any one of the vertices and the system will redraw the figure while respecting the construction. however  any attempt to move h  the intersection of the heights  will be refused since the construction of h depends on the vertices which  according to the procedure  have to be created before the intersection. then a new construction has to be proposed to move h. in a declarative programming mode  this need not be so and we will discuss such a system below. 

　　our approach to declarative geometric programming is motivated in part by languages called classroom description languages  cdls   allen et al.  1 . such languages are inspired from those found in geometry textbooks. as an example of such a language  consider the following simple one composed of the predicates: point m   line l   segment s  a  b   where a  
b  m are points  l and l' are lines  and s is a segment. a specification for constructing a figure then becomes a 
conjunction of atomic formulas composed from these predicates. the specific ordering of the atomic formulas has no effect on the figure constructed. in the case of the intersection of the heights of the triangle problem  using our declarative geometric programming system  the figure can be 
　　

　　a notable difference between this solution and the imperative one is that the point h can be relocated. one has to indicate what are base elements  for example a  b  and and h  and which among the base elements is to be used for dragging  say h . our system then will automatically redraw the figure as we drag on h  all the while respecting the specification. it is clear that such a system can readily be implemented in prolog iii since all equations derived from the above property specifications  with any three of the points a  b  c  or h fixed  are linear  e.g.  for a e d1  the equation is y-ax-b=1  where x y are the coordinates of a and a b are slope  and intercept of d1 . moreover  in prolog iii  any calculations carried out on the equations are exact. this means-and this is extremely important -that  linear  overconstrained specifications can be accepted. overconstraints are those which are not necessary for the construction of the figure  but which must nevertheless be verified. such specifications arise very naturally. for example  the preceding specification  where a  b and c arc fixed  belongs to this category; the fact that h is the intersection of three lines has to be verified 
   curiously  it is not easy to characterize the possible constructions in terms of geometrical instruments. for example  one might be tempted to conjecture that all  ruler only*' constructions can be solved by linear algebra this is not true  a simple counter-example being the following: given any three points and any three lines that intersect in a common point  construct a triangle with vertices on the lines and sides passing through the points. this construction is known to be feasible using a ruler alone  carrcga  1 ; however the equations that underlie the properties in the construction are not linear. 
1 non-linear case 
problems become a fortiori non-linear if we add language formulas of the type iabi - d to our specification. the resolution of systems of such equations  namely equations of lines  y=ax+b  and equations of circles d1=    is described below. their satisfiability is known to be decidable  and it is known in that a construction using ruler and compass can be found if it exists  whereas  in the general case  construction has to be carried out numerically  although these important theoretical results are difficult to exploit practically  our approach provides solutions in some important and interesting cases. 
　　our objective is essentially to try to achieve significantly better result than that given by imperative geometric programming. the crucial issue is giving a clear semantics to the tools we provide rather than attempting to construct from every specification  regardless of the price. from this point of view  a very simple idea comes to mind  namely  giving a  closed world compass and ruler  completeness to our system. in other words  if a construction with ruler and compass exists using only the elements occurring in the specification  then a construction is provided; otherwise  nothing is guaranteed. 
　　in order to provide such power of construction  the system must have the capability of compuung intersections of circles and lines and intersections of circles and circles  intersections between lines are computed by solving linear equations . in fact  compuung intersections of two circles can be reduced to computing intersections of a line  the common chord of the intersecting circles  and of either of the circles. the requirements for attaining our desired power of construction can therefore be stated in the following terms: 
  1  for all intersections of circles  add their common chords. that is  if the specification contains the two formulas  and if m is not a base point  then the common chord of circle of center m1 with radius r1 and of circle of center m1 with radius r1 is added to the specification. this means that a constraint implying that m belongs to the common chord of the two circles is added. 
  1  the system of equations derived from two formulas such as = r a   where o  r and d are known  must be solvable. in fact  we adopt the more general approach in which we check to sec whether every variable x  xo  y  yo  r in an equation of a circle is known or is a linear function of the same variable u. in such cases the second degree equation in u is solved very simply. this approach permits the solution of problems not solvable in a strict  closed world  compass and ruler perspective note also that no more objects are introduced than those present in the specification or those introduced implicitly by adding the common chord of two possible circles. 
	allen  idt  and trilling 	1 
　　
　　this last example suggests a simple way of overcoming the lack of geometric information available to our system: ask the user's help in providing it. since the user is supposedly working with the system to obtain more flexibility in animating her figures  this suggests that she would be willing to help the system achieve the better results. more exactly  we are asking the user to provide the system with ovcrspccifications. in our last example  if we add the overspecifications i=midpoint 1 p  and ioii = iimi  men m can be constructed as the intersection of two circles such overspecifications are of course translated into overconstraints  which leads us to the issue of solving overconstraints in non-linear cases. 
1 overconstrained case 
overconstraints arise naturally and for important reasons; they present obstacles which cannot be avoided. not only do they provide means whereby users can interact intelligently to help the system  but they also can be very naturally and unconsciously introduced into a specification  as in the case of the intersection h of the heights of a triangle. thirdly  they might be introduced automatically by our system as it creates new lines  common chords of intersecting circles  when needed. to provide an example of the third point 
1 	intelligent tutoring systems 
given 
creating the 
	to address 	the 
all overconstraints associated with a 
possible construction arc assumed always to be satisfied. in other words  a construction is provided even if some properties found among those in the specification and those introduced automatically as overconstraints are not verified. our decision to satisfy all overconstraints is based on the simple fact that  whereas the calculations in the linear case are exact  prolog iii   our calculations on the extension of rationals are not exact. for example  if the solutions to two quadratic equations are known to be the same  we cannot be assured of always computing them equal numerically of course  this way to deal with overconstraints is correct if the only ones to consider are those introduced automatically by the system  none would be introduced by the user  since it is a theorem that a point belonging to two circles belongs to their common chord. 
　　technically  the problem resides in recognizing those equations which form overconstraints for a computed construction and in communicating them to the user. in the preceding example  if m is computed as the intersection of d and c1  the overconstraint to be communicated is then the equation derived from im1 ml = r1 this problem can be solved easily by determining those equations which do not contain any unknown variable such equations only represent properties to be satisfied and arc not used to compute any unknowns; thus  they are overconstraints. 
　　the state of the art provides us with direction and hope for resolving the problem of solving overconstraints in general: such problems require symbolic computation. the method for proving geometric properties proposed by wu  is the most promising to date. however  even with this approach  there is a significant restriction  namely  that the hypotheses be written in a constructive manner ten rules arc used to ensure that the hypotheses arc written in a constructive maimer. the resulting equations must represent properties of the type: an arbitrary point  an arbitrary line  a line passing through a point  a point on a line  the intersection of two lines  or the intersection of two circles. it is clear that the individual using this method must intervene to make sure that the hypotheses are in the correct format. in the case where they are not  the answer is not guaranteed. in wu's method  a construction of the figure representing the hypotheses must be exhibited and the equations describing this figure derived from such a construction. this is exactly what our approach does  since the overconstraints are checked once the user has found a 
　　construction of all the geometric elements in the specification. so  wu's algorithm could be applied in our case. from a practical standpoint  wu's method seems to be the more effective and the least costly  chou  1 . in any 
　　

	allen  idt  and trilling 	1 
　　
1 equations to be resolved to compute each reconstruction of the figure after having relocated h; the time required to compute each new figure by moving h is 1s on a 
macllci. in fact  the rapidity of the whole construction is just 1s. similar encouraging results are obtained on constructions of other figures in the linear case and better performances will be obtained on faster computers and with the use of newer versions of prolog iii. 
　　　　for non-linear cases  performances decline. for example  for the specification  a trisector : given a and o fixed with ab= bc=cd= d and oa=ob=oc=od =d' there are seven second degree equations  eight common chords  and moving b takes 1s on a mac iici  1s for the whole construction . for a quadrisector  1 equations and 1 common chords   we get 1s and 1s. these results come from a first  not optimized program  and they can be improved. the main idea is to extract from the first construction an optimized and  compiled  construction which would be used for the animation. the search for the right ordering for solving equations would be no longer necessary. the search for linearity of variables in a second degree equation in terms of a common variable could be improved if prolog iii would provide a predicate giving the linear relation between two unknowns if it exists. the way we compute it now by using failure and backtrack is costly. 
1 	related work and perspectives 
a pioneering work in the field is thinglab  borning  1j which introduced a way to define constraints for geometric figures. its aim was to provide a language to implement  hand-made  constraints rather than to offer declarative geometric programming by using a logical specification language like cdl. among the numerous recent works on geometry  we distinguish among those devoted to proofs and those to constructions. for proofs  apart from the work of wu fchou  1   the most successful approach uses 
grobner bases  kutzler  1 . this approach is very close to the one of solving nonlinear algebraic constraints  a very active domain  hollman  1   as well  very encouraging results using partial cylindrical algebraic decomposition in conjunction with grobner bases are also reported in  hong  1 . as for construction  symbolic methods for tackling our problem are exemplified by the locus method used in  schreck  1   however  they do not provide a precise notion of completeness. the cad approach of dimensional constraints  in which figures arc defined by given distances and angles  is practically very: important there is abundant literature on this approach  roller et al  1  
　　　　perspectives of future research and development will focus  1  on improving performance of solving nonlinear equations  a first attempt shows a speedup of 1 ;  1  on solving overconstraints in order to accept overspecifications and help from the user;  1  on extending of cdl to handle other geometric elements  such as halflines and angles; and  1  on augmenting the power of automatic construction by introducing automatically extra elements other than just the common chord  such as perpendicular bisectors and arcs. as well  other developments in constraint logic programming interest us; in particular  the approach developed in  older and vellino  
1 	intelligent tutoring systems 
1  may be useful to verify rapidly the falsity of overconstraints and could provide good performances for our purposes if coupled with a linear resolver. finally  we think that taking a specification from an initial construction carried out using cabri-geometre could be a good way to proceed for two reasons:  1  it might be easier for the user to do a simple construction first rather than directly provide a specification for a given geometric figure;  1  such an extracted specification would be both constructive and not overspccified 
