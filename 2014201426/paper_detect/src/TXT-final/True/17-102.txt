 
hybrid inference systems are an important way to address the fact that intelligent systems have muiltifaceted representational and reasoning competence. krypton is an experimental prototype that competently handles both terminological and assertional knowledge; these two kinds of information are tightly linked by having sentences in an assertional component be formed using structured complex predicates denned in a complementary terminological component. krypton is unique in that it combines in a completely integrated fashion a frame-based description language and a first-order resolution theorem-prover. we give here both a formal knowledge level view of the user interface to krypton and the technical symbol level details of the integration of the two disparate components  thus providing an essential picture of the abstract function that krypton computes and the implementation technology needed to make it work. we also illustrate the kind of complex question the system can answer. 
	i 	introduction 
   many of today's knowledge representation  kr  systems offer their users a choice of more than one language for expression of domain knowledge. while the idea has been important to the field for many years  e.g.  see  brown and burton  1   moses  1   sloman  1     multiple representations  seems to have recently become a popular catch phrase. many of the modern expert system development environments wave the polyglot banner  and except perhaps for some stalwart first-order logicians  most everyone would probably agree that one uniform language will not serve all representational needs. 
   it is sometimes difficult to discern the true value of multiple languages; some of the commercial development tools seem simply to appeal to  the more the merrier   without any clear idea of how merrier is better. however  on the research front  there have fortunately been some coherent views expressed on the merits of bringing disparate dialects together. the arguments have mainly to do with the naturalness of expressing certain kinds of facts in certain forms  see  e.g.   rich  1    or with the efficiency of computing some inferences once some datum is massaged into a certain representational form  genesereth  1 .1 
   the arguments in favor of naturalness and computational superiority are important ones. however  as we have argued elsewhere  brachman and levesque  1   there may be a simpler  more basic reason to diversify: an intelligent system has more than one kind of representational need. for example  it is interesting to observe that so far  most kr systems only allow the expression of what we would call assertional knowledge- statements of facts or beliefs. if the system uses logic or pro-
1  fellow of the canadian institute for advanced research 
1 for an interesting recent paper on this general subject  see  sloman  1 . 
canada m1s 1 
duction rules  the sentential nature of its content is self-evident  e.g.   if the infection is primary bacteremia and ...  then there is suggestive evidence that the organism is bacteroides  . even if the system uses frames or semantic nets  it is most likely encoding sentences of the form   elephants are gray   or  clyde is an armadillo   see  brachman  1  for more on this . 
   but what accounts for the meanings of the terms used in these sentences  in addition to representing the beliefs  or  popularly   knowledge''  of a cognitive system  we need to account at least for the complex terms  like bacteremia and armadillo  above  used in forming those beliefs. in other words  unless we intend to give up the lexical ghost and take all terms as inscrutable atomic primitives  some substantive representational explanation must be given for the noun phrases out of which the sentences expressing beliefs are constructed. 
   we have designed and implemented a complete hybrid reasoning system  called krypton  that is significantly different from other  multiple representation  systems1 in that it tries to provide exactly such an explanation. instead of concentrating on multiple ways to perform the same inference  krypton tries to span two fundamentally different types of representation and reasoning. not only does it provide a language for composing sentences expressing beliefs  using sentential operators of the usual sort  for conjunction  quantification  negation  etc.   it supports the definition of complex predicates to be used in those sentences  with a set of special term-forming operators  for conceptual conjunction  role composition  role value restriction  etc. . further  krypton supports an appropriate set of inferences over sentences and over complex terms. thus  krypton is at least minimally competent in both the assertional and terminological domains. 
   in this paper  we will describe krypton in some detail mainly by addressing two questions  both of which are crucial for designers of any representation system to answer : 
   1. exactly what service is being provided to the user  the user should know  at some level not dependent on implementation details  what questions the system is capable of answering  and what operations are permitted that allow new information to be provided to it. he needs to know how questions put to a knowledge base will be answered strictly as a function of the information it contains  and not dependent on how the information is represented. in other words  the user requires what newell  newell  1  calls a knowledge level account  see also  brachman and levesque  1b   brachman  et al.  1b   levesque  1c  . 
   1. how does the implementation realize the service promised  in other words  how  at the symbol level  is the knowledge level account realised  in the case of a hybrid system  the interface between the disparate parts of the hybrid is particularly important. 
'except for kl-two  vilain  1   whose history is significantly intertwined with that of krypton. 

   this paper provides detailed knowledge and symbol level accounts of krypton  previous accounts  brachman  et a/.  1a   brachman  et al.  1b  gave only sketchy and informal details of what a real krypton might be like . we first provide a formal semantics that brings together meanings of terms and the subsumption relation with meanings of sentences and truth valuations. this leads to a knowledge level account of krypton in terms of a set of operations on knowledge bases. subsequently  we explain how  at the symbol level  our implementation achieves this functionality in terms of an alteration to the meaning of unification in a resolution theorem-prover. in this section  we concentrate on the assertional component and how term definitions affect it  since details of our terminological component have been provided elsewhere  brachman  et al.  1a . we conclude the paper with some sample inferences drawn by krypton  to illustrate how the two components are indeed tightly integrated  and that the system provides the kind of hybrid reasoning service promised by our knowledge level description. 
   before we begin  it should be noted that krypton's answers to the two questions posed above are more complicated and also more interesting than they would be for less ambitious systems. in the case of a  non-essential  hybrid that uses multiple representations of the same facts  question 1 can be finessed with a simple explication of the semantics of the language into which all of the multiple representations can be translated  hopefully a standard one  as with first-order logic in mrs  genesereth  1    and an account of the translation rules used among the languages. in such systems  the multiple representations are usually not integrated in any important way  so question 1 has an easy answer. 
   however  for an essential hybrid like krypton  which attempts to integrate two fundamentally different kinds of representation and reasoning facilities  the picture is more complex. at the knowledge level  krypton provides extra functionality over systems based on standard first-order logic; thus  we cannot ask the user to rely on intuitive knowledge of standard formal semantics  but rather must provide a detailed explanation of how the meanings of sentences in the assertional component can be affected by the structure of descriptions in the terminological component. at the symbol level  the user needs to know that  in the implementation he is using  complex term definitions really will have the impact on the meaning of the believed sentences advertised in the knowledge level account. it is not enough to say that krypton has a frame-style description language for forming terms and a first-order predicate language for forming sentences-we must explain how the interpretations of the sentences by the theorem-prover depend on the definitions of the terms. as the reader will soon see  both the knowledge level and symbol level accounts must take seriously krypton's hybrid structure. 
	ii 	representational roots 
   as hinted above  krypton is a hybrid system with two main components  one that specialises in assertional reasoning  the a box   the other in terminological reasoning  the tbox . each component has its own language  and its own inference mechanism. 
   krypton developed mainly out of work on kl-one  a fairly complex representation system based on both semantic networks and frames  brachman and schmolse  1 . as kl-one evolved  it became evident that its strength lay in its ability to form complex descriptions. to the extent that you could say anything at all with kl-one  it was with clearly impoverished assertional facilities. in fact  if frame-based systems in general have any advantage  it comes from their ability to form descriptions  rather than sentences. as pointed out in  brachman and levesque  1  and  brachman  et al.  1b   logical languages like that of first-order predicate calculus are far superior at meeting the needs for belief representations  since they can provide for a kind of noncommittal expression not possible with frame languages. 
   given the strength of kl-one's terminological facilities and the weakness of its assertional ones  it seemed best to abandon the latter completely  and adopt a language better suited to sentence representation. while we would no doubt have used a more computationally tractable inference framework than full first-order logic if an appropriate one were available 1 we chose to build our initial krypton abox on stickel's connection graph theorem-prover  stickel  1 . while the full first-order resolution mechanism is  in a sense  too powerful for our needs  levesque  1a   levesque  1b   as a first abox it turned out to be a remarkably good fit  as will be detailed in section iv . 
   the heart of krypton is the connection between the two components: predicates used in the abox are actually defined in the tbox.1 thus  all of the analytic inferences computed by the frame-based tbox must be available for consumption in the logicbased abox. this paper illustrates at both the knowledge and symbol levels how the abox benefits from the special-purpose definitional facilities available in the tbox. 
   finally  as the reader of earlier papers on krypton will note  there are potentially several versions of the tbox language that could be discussed here. while our implemented tbox includes virtually all of the operators mentioned in  brachman  et a/.  
1b  1 not all of those operators are tightly integrated with the abox. therefore  we have limited our discussion in this paper to those parts of the tbox that currently can affect the meaning of sentences in the abox. for example  while subsumption for concepts with number restrictions works in the tbox  it is not treated here  since it awaits full integration with the theoremprover.1 
	i l l 	knowledge level operations 
   although our basic abox is a standard first-order predicate logic  its proper integration in krypton demands that complex terms defined in the tbox be available for use as predicates in assertions. thus  if the resulting assertional capability is considered as a predicate logic  then it is a non-standard one  in that it has both the normal sentential operators and special operators used for constructing complex predicates. in this section we will demonstrate the hybrid semantics necessary to explain the integration. first we present the syntax of krypton's languages and their semantics; we then rigorously specify the interface that a krypton system presents to an outside user. in particular  we 
1 we are currently working on a relevance-style  anderson and belnap  1  limited inference mechanism  patel-sehneider  1 ; see also  levesque  1b  for properties appropriate to a belief representation. 
1the mapping between symbols and their definitions is maintained by a symbol table  shared by the tbox and abox. please consult  brachman  et al.  1b  and  brachman  et al.  1a  for more on the structure of the 
system. 
*more precisely  we have implemented the language exactly as described in  brachman  et al.  1b   except for the vrdiff operator  which was ammitted for computational reasons as discussed in |brachxuan and levesque  1a   and the decomprole operator. 
1also  a note about kl-two seems in order here. the terminological language in that system is much more extensive than the one discussed here  it is almost a superset of our tbox . given that  its computational properties are lets understood  and the completeness of its subsumption mechanism is somewhat in doubt  it is not clear exactly what is currently implemented and working . on the other hand  kl-two uses a much more tractable  propositional  abox. also  as reported in  vilain  1   the method of integrating terminology and assertion is quite different in kl-two. 

1 	r. brachman et al. 



1 	r. brachman et al. 
list of pairs  c  p  where p is a primitive concept and c is a list of primitive roles  and where the gterm constrains the fillers of the chain of c to be in the extension of p. these operations are defined in the following way: 

note that a gsymbol is a primitive exactly when it is not defined  that is  when it is not in vocab. 
   given the details of this knowledge level account  there are a number of important properties of krypton that we can prove. for example  it is easy to show that ask and tell have the right relationship  i.e.  that askja  tell a  kb   = true  for any kb  as well as any subsequent kb  tell works monotonically- anything that is believed continues to be believed as new facts or new definitions are added . similarly  it can be shown that define and subsumes have a proper relationship  i.e.  
subsumes *  e  define s  s  kb   = yes and 
	subsumes e  s  define s  e  kb   = yes 	 for any kb . 
we can show that all of the logical truths hold in an empty 
kb  e.g.  ask p v -p  kb 1   = yes  where kb 1 is the value of newkb   . we can show that all of the appropriate subsumption relationships  brachman and levesque  1a  hold in the tbox  as in  e.g.  
subsumes  p1   congenerlc pl p    kb   for any kb . 
it can also be shown that the expanded form of a definition into only primitives  using the results of prims and rolepairs  is equivalent to the original definition. finally  and most cogent to the focus of this paper  it can be shown that the abox and the tbox have the desired relationship. for example  universal assertions that should follow directly from definitions can be shown to do so: 

in genera   because we can prove such things about krypton  this kind of knowledge level account plays a vital part in providing a predictable  reliable interface for consumers of the kr service. 
	iv 	the krypton implementation 
   having defined the existing krypton interface  we now turn our attention to the way the service is implemented. in general  it is possible to build a hybrid kr system wherein term definitions are expressed in a special language  and then simply translated into sentences in another. this loose kind of integration at least allows a system to take some of the implications of definitions into account. however  integration of this type has two potentially serious problems: first  contingent assertional sentences  even universally quantified biconditional!  simply do not have the same import as definitions and loose integration forces their conflation  contrast  every animal is either not in my field or is a cow  with  every triangle is a three-sided polygon  ; second  adding more sentences to a belief-reasoner  i.e.  a theorem-prover  will invariably slow it down  see  stickel  1  . 
   in krypton  we have embodied a tightly integrated hybrid architecture. we have extended the basic inference rule of the assertional reasoning mechanism to take directly into account the structure of definitions by altering the meaning of unification. thus  definitions of terms have a direct  complete  and correct effect on the reasoning process without slowing it down. further  the term definition language is kept completely distinct from the assertion-making language  and is a more natural one for forming structured definitions and for drawing definitional  analytic  inferences  e.g.  subsumption . as implied above  definitions are first-class citiiens in krypton  and are distinct from simple contingent sentences even of similar logical form. 
   in this section  we describe our alteration to unification in the context of our abox-stickel's nonclausal connection graph resolution theorem-prover  stickel  1   stickel  1   stickel  1 . this should give the reader a solid idea of how krypton has been made to work  but owing to the brevity of the presentation  it is not intended to be a complete account of the abox-tbox interface. 
a . 	c o n n e c t i o n g r a p h t h e o r e m - p r o v i n g 
   a connection graph  kowalski  1  is a set of wffs and a set of links between the literals1 of the wffs. for every literal that occurs in a clause input by the user or as the resolvent in a resolution step  there is a corresponding node in the graph. at the time a clause is entered each of its literals is examined and a 
link is created between each literal and any other literal for which there exists a unifier that causes them to be complementary. note that there is a crucial distinction between forming a link and resolving upon a link. a link should be thought of as a marker for identifying two wffs that can be used in a resolution step. the link makes it easier to find the wffs at resolution time  but does not actually perform the resolution. it appears that in general the pre-computation of possible resolution steps allows connectiongraph theorem-proving to proceed faster than ordinary resolution  kowalski  1   stickel  1 . 
   b . 	residues 
   an important piece of information that is stored on a link is the residue between the two literals. a residue can be viewed as a statement that the literals connected by a link are contradictory  provided that some additional information  specifically the negation of the residue  is known. when a resolution step is performed  the residue is added as a disjunct to the resolvent in the place of the resolved-away literals. in a conventional unification step  the residue is  false   indicating that the literals are directly contradictory; thus a conventional step adds no additional information to the resolvent. however  in krypton we make extensive use of complex non-empty residues for the tbox links. 
   for example  if we define in the tbox the concept of a person as something that is both a mammal and a thinker  and we know that rover is not a person and that he is a mammal  then by definition rover must not be a thinker. therefore  the literals - person  rover  and mammalf'rover  will be linked together with a residue of -thinker rover . this link can be pictured as below  where the literals being linked occur on either side of the horisontal line  and the residue is attached below them: 
 a literal it an atomic sentence or the negation of one. 

   the residue wff is attached only as information associated with the link  but is not actually added to the graph until the link has been resolved upon in a resolution step. so  in this case  none of the links that would connect -thinker  rover  to other literals are computed until the parent link is resolved upon. the most important consequence of this is that the residue will not be visible for use by the set of support strategy that the abox employs to direct the progress of a proof  bee below . 
c. 	proof procedure and resolution strategy 
   the proof procedure used with a connection graph is quite simple. the kernel of the procedure is as follows: 
1. stop if the graph contains the empty clause. 
1. select any link from the graph. 
1. generate the resolvent. 
1. construct the new graph: 
 a  delete the link resolved upon.  b  add links for the resolvent. 
1. return to 1. 
once a given pair of literals in a pair of wffs has been resolved upon  literals that are derived in later resolution steps from the resolved-on literals cannot themselves be resolved upon. this follows from the fact that the original link is deleted before links are added between literals in the resolvent and other literals in the graph. as a result of this  connection graph resolution does not allow all the resolution steps that other methods might. 
   an important point to notice about the proof procedure is that it is nondeterministic. that is  the procedure places no restrictions on how the next link to be resolved upon is chosen. a given implementation must be very careful to embody a strategy that guarantees to preserve completeness of the procedure. one obvious constraint on a suitable strategy should be that the choice of link tend to simplify the resultant graph. another is that only links that are relevant to the query should be resolved upon. 
   in stickers theorem prover  these goals are achieved by the use of a complex evaluation function for determining the next link to schedule and by having the evaluation function use set of support as the basic resolution strategy.1 the evaluation function also takes into account such things as how deep the search in a given direction has been and how complicated the residue on the link will be. the hope is that it will choose to ignore links that will result in a more complicated graph and that it will abandon paths that seem to be fruitless. while the evaluation function depends on heuristics and is not guaranteed to find the fastest proof in all cases  our experience shows it to work very well. 
d . 	t e r m i n o l o g i c a l l i n k t y p e s 
   the abox is made to understand the tbox by the addition of links to the connection graph that are derived from the terminological definitions in the tbox. just as in the case of normal connection graph theorem-proving  deduction time is saved by pre-computation of possible unification steps. further  since our definitions are structured and include a subsumption hierarchy  links constructed from them allow multiple deduction steps 
1 set of support is a general strategy designed to ensure that only links that point into a  support set  are eligible for selection for the next resolution step. at the beginning of a proof the support set contains only the links between the negation of the query and other wffs. when a link is resohred upon  the old link is removed from the set  and all of the links of the resolvent are added. 
 e.g.  multiple applications of modus ponena  to be accomplished at once. although we cannot provide evidence of it in the small space we have here  but see  stickel  1    directly changing the connection graph turns out to be potentially far superior to the mere addition of  meaning postulates  in a loosely integrated system. 
   our modification involves the addition of four new connection graph link types. the first three are for concept definitions  and the fourth for role definitions. to a first approximation  the links for a concept correspond to  1  links to concepts that subsume the concept   1  links to concepts that occur  either explicitly or implicitly  as value restrictions in vrgenerics for the concept  and  1  links to roles that occur in vrgenerics for the concept. links for the definition of a role are for subchains of that definition that are themselves defined roles. at the very least  this will involve the primitive roles included in the definition. 
   there are two cases for each of the four basic link types  arising from the necessity and sufficiency of our tbox definitions.1 these are the cases corresponding to positive and negative occurrences of a term. for example  if we know that fred is a person   then we know that his not being a thinker is immediately contradictory  so given the appropriate facts  this link would be necessary: 

   the rover link of section iv.b shows a link required by the addition of a negative occurrence of a term. 
   in the next two sections  we will cover in some detail two of the necessary link types arising from concept definitions. the first of these is between a concept and all concepts that subsume it. the second is between a concept and roles that occur in a vrgenerlc in the concept's definition. 
in what follows  we shall use these definitions: 
  grandchild:  role chain child child   that is  the child of a child. 
  woman-student:  congeneric woman student   that is  somebody that is both a woman and a student. 
  successful-grandma: 	 vrgeneric 	woman 	grandchild 
doctor   that is  a woman all of whose grandchildren are doctors. 
1. 	concept-superconcept linking 
   a concept p must be linked to concepts that subsume it. for this concept linking  the tbox must supply the names of all concepts that subsume p and also all concepts that it subsumes  information that can be gotten from the tbox using the knowledge level operations defined above . the reason for the latter is that we have no way of controlling the order of entry of terms. finding a concept q that p subsumes will allow q to be appropriately linked up when p is encountered. 
   positive links: each positive instance of a concept must be linked to all negative instances of concepts that subsume it when the arguments unify in the conventional fashion. no residue is associated with these links. the fred link of the last section is an example of this link type. 
1it should be emphasised that while these link connections may appear complicated  they are not calculated repeatedly. the appropriate links are computed exactly once for each definition  at the time the definition is entered. therefore the apparent complexity here does not adversely affect the process of deduction. 

1 	r. brachman et al. 
   negative links: each negative instance of a concept  p  must be linked to all positive instances of concepts  q  that are subsumed by primitive concepts occurring as conjuncts in the definition of p when the arguments unify in the conventional fashion. the residue is formed by taking the definition of p  removing those pieces of it that are shared with the definition of q  and then negating the result. for example  consider 
if sue is not a woman-student  but she is a successful- grandma  then some part of the definition of woman-student that does not apply to successful-grandma must not be true for sue. the only piece of woman-student not included in the other definition is student  so sue must not be a student. 
1. 	concept-rolechaln linking 
   a concept p must be linked to each rolechaln that occurs in a v r g e n e r k for it. in order to do this linkage correctly  the tbox must provide the a box  for each concept  the names of all defined rolechalns that occur in that concept  and for each defined rolechaln  the names of all concepts in which it occurs. 
   positive links: for every role  r  whose definition occurs as a rolechaln or a subchain of a rolechaln in some v r g e n e r k in the definition of p  link p with the rest of the v r g e n e r k in which r occurs. so  for example  since grandchild is defined as  rolechaln child child   child is a defined subchain of grandchild. therefore  if marge is a successful-grandma and has a child  then if that child in turn has any children  they must all be doctors. 
   negative links: for every role  r  whose definition occurs as a subchain of a rolechaln in some v r g e n e r k in the definition of p  link -*p a  and -r skfn a  skfm a    where skfn and skfm are both skolem functions associated with the definition of p . this link has as its residue the negation of the rest of the definition of p  after removing the v r g e n e r k in which r appears. 
   if charlie has no children  then the v r g e n e r k for successfulgrandma holds vacuously  so for charlie to not be a successfulgrandma  he must fail in the only other requirement  and not be a woman. 
1. 	other links 
   in the preceding sections we have outlined two of the major link types in our extension of unification. there are several choices for other links to use to complete the extension. currently we have implemented one set that  while complete 1 is probably not the best choice  as it yields some unintuitive links to assure that completeness. we have been exploring other link choices that do not of themselves ensure completeness but can be shown to be sufficient when coupled with the set of support strategy. another 
1because of space limitation*  we are not saying here what it means to be complete and consistent with respect to our knowledge level specification. 

-person x  in 1 are directly contradictory  with mary being substituted for z in the resolvent. 
1. -child mary y  
if mary is a noson  as stated in 1   any children she might have must be women. therefore  if there are no women at all  as stated in 1   then mary must have no children. in this case  the residue  -child mary y   was already part of the resolvent of 1 and 1  so it does not need to be added again. 
1. false 
normal resolution on 1 and 1. 
	vi 	conclusions 
   as we have shown  krypton is a tightly integrated hybrid reasoning system that provides both terminological and assertional facilities. at the knowledge level  it can be seen that assertional reasoning takes into account the definitions of terms expressed in a special-purpose frame-based description language. at the symbol level  it can be seen that this interface is implemented by augmenting a theorem-prover's notion of unification to accommodate definitional relationships between predicates. our krypton implementation currently runs on a symbolics 1. 
   in some respects  this resembles what stickel has called  theory resolution   stickel  1   stickel  1   wherein non-equational theories can be built directly into the theorem-prover. one could-at the symbol level-accurately call krypton an implementation of partial theory resolution  in that we have used the tbox to implement specialized reasoning procedures for certain tasks. however  as discussed in section iii  we have a full formal semantics at the knowledge level that supports the firstclass citisenship of descriptive terms in krypton. theory resolution allows us a convenient implementation of this idea  but does not itself provide us with the suitable semantics. 
   krypton is different  in fact  from most other hybrid approaches in that it directly  and soundly  integrates two fundamentally different kinds of representation and reasoning. 
