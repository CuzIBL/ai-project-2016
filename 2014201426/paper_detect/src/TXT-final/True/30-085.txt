 
singapore has one of the busiest ports in the world. ship berthing is one of the problems 
faced by the planners at the port. in this paper  we study the ship berthing problem. we first provide the problem formulation and study the complexity of the problem with different restrictions. in general  the ship berthing problem is np-complete  although  some of its variants may be solved quickly. while a geometrical model is intuitive  the model cannot be easily extended to handle clearance constraints and berth restriction. rather than solving the problem geometrically  we transform the problem tnto the problem of fixing directionsof edges  n graph to form directed acyclic graph with minimal lonqest path. since the problem is npcomplete  solving the problem exactly in polynomial time is highly unlikely. as a result  we devise a fast and effective greedy algorithm to can generate good solutions. the greedy method together with a tabu search like post optimization algorithm is able to return optimal or near optimal solutions. 
1 	introduction 
situated at the crossroads of the world  the port of singapore is one of the world's busiest port. every few minutes a ship arrives or departs the port. every month the port handles more than one million transhipment containers. 
　when a ship arrives at the port  the planners must first decide where to berth the ship for the unloading and loading of containers. for the containers that are to be unloaded  the planners must decide where to place these containers in the yard. the wharf line of the port is divided into sections  and no ship can be berthed across any two sections. which section to assign a ship to and exactly where to berth a ship within a section depend on factors like the locations of containers to be loaded and unloaded  the physical  i.e. depth of the berth  and resource limitations  i.e. suitably of quay crane  of each berth. a sketch of a port 
1 	knowledge-based applications 
is given in figure 1. the allocation of ships to sections and placement of containers in the yard is studied by lim  lim  1 . the approach used is a variant of graph partitioning problem. allocation of vessels to sections were also studied by brown  brown et al.  1; 1 . 
　one of the subproblems in  lim  1  is the ship berthing problem. the ship berthing problem was studied by henglheng  khoong  and lim  1j using a mixed integer linear programming model. their model assumed constant inter-ship clearance distance and constant end-berth clearance distance. while their model worked reasonably well on historical test data  it did quite badly on fully packed test cases. their approach is also computationally intensive. as the ship berthing problem is only a subproblem which is called many times in the berth yard planning system  it needs to be computationally efficient. heng's version of the problem is also very closely related to the offline version of the dynamic storage allocation problem  wilson et al  1 . because the dynamic storage allocation problem is a special case of the ship berthing problem  the ship berthing problem is np-complete  garey and johnson  1  
1 	problem formulation 
ships come in different lengths and they arrive at the port at different times to be berthed. every ship has an expected duration of stay which may be different from another ship. to berth a ship is to place the ship along the wharf line of a section. once a ship is berthed  it will not be moved until its departure time. when two ships are berthed side by side  a certain minimum intershipdearance distance must be observed. each ship has an inter-ship clearance distance which is dependent on the ship's length. the minimum inter-ship clearance distance of two ships berthed side by side is the larger of the two ships' inter-ship clearance distances. if a ship is berthed at the end of a section  a certain end-berth clearance distance must be observed. this end-berth clearance distance is not fixed and is dependent on the ship. a ship can also be given a fixed berthing location within a section. a ship may also be prohibited from 


figure 1: sketch of a port 
berthing at certain parts of a section. a berth plan for a set of ships in a section is the exact locations of ships within the section. 
　we can represent a ship geometrically by a rectangle such that the height of the rectangle is the length of the ship and the length of the rectangle is the duration of its stay. the left edge of the rectangle represents the arrival time of the ship. the right edge represents the departure time of the ship. a section can be represented geometrically by an infinitely long rectangle where its height represents the length of the section and the length represents the time axis. we can associate a coordinate with the left bottom corner of the geometric representation of each ship. the x-coordinate is fixed as it represents time of arrival  but the y-coordinate is not known unless the ship has a preassigned berth location. the ship berthing problem is to decide the y-coordinates of the set of boxes in the long rectangle of the section such that all rectangles representing ships are non-overlapping and are within the rectangle of the section with all clearance distances are satisfied. figure 1 clarifies the transformation. 
let us define the problem formally. let s be the set 
of ships  and 
be the start wharf mark of the berthing location  length  arrival time  duration of stay  inter-ship clearance distance  end-berth clearance distance  and the set of forbidden berth positions respectively of ship 1 . when is berthed at will occupy wharf mark from to  from time to time  is a set of intervals in the section in which ship i cannot be berthed. if is berthed at 1   the interval should not intersect with any interval in for a clearer picture of the above definitions  please refer to figure 1. the optimization version of the ship berthing problem  sbp  is defined figure 1  where l is the wharf length: 
the decision version of the ship berthing problem is similar to the sbp problem. all we need to do is to remove the objective function to minimize l and assume that l is given. 
1 	complexity 
lemma 1  where 
c1 c1 and c1 are constants  the ship berthing problem can be solved in o nlogn  time. 
proof: the above problem can be transformed to the problem of coloring of interval graphs by first partitioning the section into fixed berths and sorting the ships  in non-decreasing order based on the arrival times  followed by assigning the ships in the sorted order to the fixed berths using the criteria of most recently used available berth. this algorithm takes o nlogn  time.  
　biro biro et al.  1  showed that 1-precoloring of interval graph is polynomial time solvable and 1precoloring is np-complete. using his results  if  
 and c1 are 
constants  and if some of the ships are preassigned to a single berth  then the problem remains polynomial time solvable. if some of the ships are preassigned to 1 berths  then the problem becomes np-complete even if the ships have the same length and clearance distances. 
　in the next section  we will show the that berth planning problem is np-complete. our reduction uses the partition problem which is known to be npcomplete. the definition of the partition problem is given below: 

lemma 1 the berth planning problem is np-complete. 
proof: if we set all inter-ship clearances and end-berth clearances to be zero the berth planning problem is exactly the same as the dynamic storage allocation problem  garey and johnson  1 . the dynamic storage allocation problem has been shown to be np-complete by stockmeyer using the 1-partition problem. however  this result is not published  garey and johnson  1 . in this section  we shall sketch a simple reduction using the partition problem. let  
we use the triple  to represent the ship 1    where  are the length  arrival time and the duration of stay of the ship repectively. let  
	lim 	1 


	1 	knowledge-based applications 


for the set  there are only 1 berth plans  in fact one is a reflection of the other . in both of these plans  there are two unoccupied regions of equal size. one is from wharf mark 1 to  from time unit 1 to time unit 1. the other is from wharf mark to t -f 1 from time unit 1 to unit 1. let 
sb = where 
clearly  if there is a berth plan where the set sb must be partitioned into two disjoint subsets such that the sum of lengths of ships in the two subsets are the same. it is clear that the transformation will only take polynomial time. it is also clear that the problem is in np. hence  the berth planning problem is np-complete.  
　since the berth planning problem is np-complete  it is highly unlikely that a fast algorithm can be devised to solve the problem optimally. 
1 	graph model 
while the geometrical model is visually attractive  it cannot be extended to handle clearance constraints and berth restriction constraints easily. in this section  we shall transform our geometrical representation of the 
ship berthing problem to a graph  for each ship we have a vertex in the weight of vertex is set to which is the length of the ship  if two ships have time overlap  then there is an edge linking the 1 vertices and the weight of the edge is the larger of the two ships inter-ship clearance distances  i.e. for each ship  there are 1 additional vertices and these vertices have weights 1. there is a directed edge and another directed edge the weight of these 
directed edges is the end-berth clearance  
　　if a ship is required to be fixed at a particular berth location k  i.e. = k and  will occupy wharf mark from within the section  we will add two ver-
tices u  and u*i and two edges and  will have vertex weight of 1. and will have edge weight of k and  . similarly  a ship  may not be permitted to berth from wharf mark p to wharf mark q. we can handle this situation by creating a fictitious ship which is fixed at location p with length which has a hypothetical time overlap with only ship using such a transformation  berth restrictions for ships can be handled consistently. 
　at the end of the transformation  we have a graph consisting of directed and undirected edges. let us pick an undirected edge  exists because ship  
and ship have a time overlap. this implies that both ship and ship  cannot share any part of the section. if ship is berthed at a lower wharf mark   a wharf mark is a particular position in a section  than ship 
we will set the edge  to become similarly  if ship  is berthed at a lower wharf mark than ship   we will set the edge  to go from vertex  to vertex i.e.  the ship berthing problem has been transformed to a problem of setting the directions of undirected edges in the graph such that the graph becomes directed acyclic and the longest path in the graph is minimized. the length of a path in our graph is the sum of all vertex weights and edge weights of all vertices and edges in the path. 
　the directed acyclic condition of the graph is important as the directions of the edges represent relative berth locations  therefore it is impossible to have a situation such that ship is berthed at a lower location than ship and ship is berthed at a lower location than ship and ship is berthed at a lower location than ship therefore  when we set the direction of the undirected edges we must not create any cycle. the length of the longest path in the directed acyclic graph created is the minimum length required in the section to berth the set of ships s. 
lemma 1 the ship berthing problem can be trans-
formed to a problem of fixing the directions of some edges in a graph such that the graph becomes directed acyclic and the longest path in the graph is no more than the section length. 
proof: obvious from the above discussion.  
it is clear that the optimization version of the ship 
berthing problem can be transformed to a problem of fixing the directions of edges in a graph such that the graph becomes directed acyclic and the longest path in the graph is minimized. in the worst case  only 1 n  of the decision versions of the problem need to be solved through the use of binary search on l. 
1 	an effective greedy algorithm 
in this section  we shall discuss our heuristic for fixing the edge directions in our graph representation to create a dag with the minimum longest path. before describing the algorithm  let us define the following. let be the edge between vertices  and if is undirected  it can be set in two directions  namely from to or 
from 	to 	 
is the longest incoming path of vertex  is the longest outgoing path from vertex  
	and 	are the weights of v e r t e x a n d edge 
 i j  	respectively. 
　　for every undirected edge  the potential of edge   is given by the algorithm of our 
heuristic is given in figure 1. the algorithm first computes the potential of every undirected edge. next the algorithm selects the undirected edge with the highest potential. in the event of a tie  a second criterion is used. this criterion is  the larger the better. 
once the edge is selected  the direction of the edge is set 
	lim 	1 
