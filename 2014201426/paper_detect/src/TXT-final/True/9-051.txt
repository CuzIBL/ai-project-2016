 
       the issue is whether human v i s u a l imagery can be represented by symbolic structures and processes. protocols of the task of imagining a path in space were analyzed using a production system i n t e r p r e t e r . a d e t a i l e d simulation of the subject's behavior w i t h i n the confines of a symbolic short-term memory  stm  demonstrates that symbol structures are s u f f i c i e n t to explain imaging behavior. the experience of programming w i t h productions and a homogeneous stm has brought out the importance of a control language when using an unstructured r u l e system. 
　　　descriptors: 	cognitive psychology  	c o g n i t i v e representation  visual imagery  v i s u a l encoding  protocol a n a l y s i s   	s i m u l a t i o n   production systems. 
the issue 
       the nature of the human c o g n i t i v e representation of the s p a t i a l world is a topic of current i n t e r e s t to both the cognitive psychology and the a r t i f i c i a l 
i n t e l l i g e n c e communities. but in general the two communities seem to have d i f f e r e n t conventional views of the mode of c o g n i t i v e operation. 
       the psychologist tends to work from the sensory channels inward and hence thinks of cognitive structures in terms of m o d a l i t y - s p e c i f i c representat i o n a l systems--plus an abstract  conceptual  system. for example  the bulk of neisser's book  is s p l i t between visual and auditory c o g n i t i o n   plus a chapter at the end on  the higher mental processes . brook's experiments  seem to lend support to t h i s m u l t i p l e system view. he showed that a v i s u a l task  scanning 
an imagined f i g u r e   w i l l be hindered much more by a v i s u a l response  pointing  than by a verbal response  but that a verbal task  scanning an imagined sentence  w i l l be hindered much more by a verbal than by a 
v i s u a l response. that i s   there seems to be i n t e r ference only w i t h i n each modal system. 
　　　some psychologists claim that the conceptual system is r e a l l y a verbal mode  but probably most believe that the v i s u a l system is d i s t i n c t . this is reinforced by sperling's demonstration  of the existence of a remarkably iconic short-term memory  although the exact nature of the representation in t h i s memory is not understood . 
       in a series of elegant experiments on the mental r o t a t i o n of f i g u r e s   roger shepard is t r y i n g to establish whether i n t e r n a l v i s u a l representation is  analog  in nature. his notion of an analog mental process involves a mapping between the intermediate mental states and the intermediate states of the corresponding process in the r e a l w o r l d . in one experiment  it was shown that the time to mentally r o t a t e a complex three-dimensional f i g u r e is a l i n e a r f u n c t i o n of the angle of r o t a t i o n and that t h i s r o t a t i o n r a t e is the same whether or not the r o t a t i o n is in the plane of the drawing presenting the f i g u r e . this suggests that mental r o t a t i o n may be a continuous process.  shepard s p e c i f i c a l l y does not require his analog process to be continuous  but it is hard f o r me to understand how his mapping can be c a r r i e d out if it is n o t .   
       the a. i. researcher  on the other hand  works on programming a spectrum of i n t e l l e c t u a l functions using abstract symbol manipulation  which he considers to be the mode of thought processes. this is true of both those concerned p r i m a r i l y w i t h a r t i f i c i a l  and with human  i n t e l l i g e n c e . thus in a. i. even v i s i o n is cast as a problem of  scene a n a l y s i s   - the encoding of v i s u a l input i n t o a symbolic d e s c r i p t i o n which is able to i n t e r a c t w i t h other encoded modes of i n f o r m a t i o n . 
　　　this d i v i s i o n between a. i. and psychology is not so sharp  of course. clark & chase  have n i c e l y 
demonstrated the necessity of an abstract l e v e l of representation in several experiments using the simple task of comparing sentences and p i c t u r e s . the most thorough information processing i n v e s t i g a t i o n of a v i s u a l i z a t i o n task  which involves the p a i n t i n g   c u t t i n g   and counting of imagined blocks  was done by baylor   1   1   . his a n a l y s i s   however  postulated two separate  problem spaces  for his subject  an  image space  and a  symbol space . information is divided between these two spaces roughly along the generic/ s p e c i f i c dimension; and each space has i t s own 
operators. 
　　　my i n t e r e s t is the nature of the c o g n i t i v e representation of synthetic visual imagery. what i 
mean by ' s y n t h e t i c   imagery is the mental construction of new s p a t i a l patterns not previously v i s u a l l y perceived  that i s   not simply the r e c a l l of stored v i s u a l perceptions. the r e l a t i o n between synthetic images and perceptual images is moot  but see  1j for a t h e o r e t i c a l stab at the perceptual encoding process . in t h i s paper a l l remarks about imagery should be read to mean synthetic imagery. 
　　　by concentrating on i n t e r n a l l y generated visual images and not using v i s u a l input we can focus on the c o g n i t i v e  deep s t r u c t u r e s     which lend themselves to i n t e r n a l manipulation  rather than on the sensory 
b u f f e r images.  but whether the sperling memory  is involved in imagery is not r e a l l y known.  i am not interested in subjective issues  l i k e the   v i v i d n e s s   of imagery  which are hard to operationalize and which do not seem to have any substantive e f f e c t s   1   . 
　　　the most parsimonious hypothesis  it seems to me  is that synthetic imagery is simply a symbolic process-there is no need f o r a d i s t i n c t  image space  w i t h i t s 
own special  non-symbolic  data structures and operators and  perhaps  i t s own working memory. if we 
are to take t h i s as a serious psychological hypothesis  
then we must show that symbol structures and processes 
do adequately characterize images by using symbol manipulation to explain behavior in v i s u a l i z a t i o n tasks   e . g .   brooks'  shepard's  b a y l o r ' s   . the constructive way to do t h i s is to discover the coding techniques by which complex v i s u a l / s p a t i a l r e l a t i o n s are represented s y m b o l i c a l l y . we would l i k e to be able to p r e c i s e l y specify the information content of v i s u a l images   i . e .   
what information is e x p l i c i t and what 	is 	i m p l i c i t   and 
the allowable operations on these image s t r u c t u r e s . 
the task 
1 　　　as a f i r s t step i ran some exploratory experiments using a simple s p a t i a l memory task. a b l i n d f o l d e d subject was asked to imagine a blank  two-dimensional 
plane in front of himself and to locate himself at some point in the plane. then the experimenter verbally gave him a series of directions  north  south  east  west . for each direction the subject imagined a line of unit length being drawn in that direction on the plane from his current location. the subject tried to understand  visualize  the path thus far drawn by organizing it in some way. he then described the path and repeated the direction sequence of the path to the experimenter. the subject was allowed as much time as he wanted at each move  and he was free to determine his own cognitive organization of the path. the 
following are the direction sequences for two of the 
experiments; 

 to encourage you to try the task yoursulf  i have not included drawings of the paths in this paper. however  
you w i l l find it helpful for the following discussion to have made the path drawings.  
　　　verbal protocols were taken of these experimental sessions. 	the subject's  verbal  behavior was analyzed 
by creating a simulation program. the program takes the directions as input and produces a stylized verbal output. figure 1 presents a short segment of the subject's protocol lor problem 1 along with the corresponding program output. 
     more important than the verbalizations themselves is what we can infer from them about the subject's internal representations and processes. the program 
was designed to satisfy not only the external constraints of matching the protocol  but also some of the known internal memory limitations of the human information processor; and so the program is written in a system based on some specific hypotheses about the structure of the human information processor. 
the system 
     my programming system  called vis  is a production system interpreter of the type advocated by newell & 
simon . its focus is a small short-term memory  stm  of symbolic expressions which represent the system's  currently  immediately accessible knowledge. the system is driven by a potentially unlimited longterm memory  ltm  of production  condition-action  rules  whose conditions are patterns of expressions in sim. 
　　　vis's stm is an ordered l i s t of about 1 expressions. stm is constantly changing  both in 
order and content. the stm expressions which are matched by the condition patterns of a rule are brought to the front of stm  attention  rehearsal . newly created expressions are pushed into the front of stm  forcing out old expressions at the back 
 forgetting   thus keeping the length of stm constant. 
　　　but the expressions in stm may be arbitrarily complex. an expression represents an aggregated  chunk  1  of information which is accessed in an all-or-none fashion. formally  it is just a linear l i s t of symbols. an expression can be implicitly embedded in another expression by including the name symbol of the former in the latter. this facilitates the creation of hierarchic structures  the chunking of information . embedded expressions are stored in an intermediate-term memory  itm   where they may be retrieved by name in case they should be forced out of stm. 
　　　the ltm holds the system's permanent and unchanging knowledge  vis has no operations for adding new information to ltm . 	the only form of knowledge in ltm is the production rule. 	the collection of rules completely 
determines the system's behavior  that i s   they 
constitute the system's program of action. 	any rule 
w i l l fire its action component whenever its condition component matches some current expressions in stm. rule actions are simple symbolic transformations  e.g.  adding or deleting symbols in an expression  creating a new symbol or expression  etc.  which change the 
state of stm  thus causing other rules to fire. 
     vis is a serial system. only one rule fires at a time. vis has an ad hoc mechanism for efficiently selecting which rule to fire next. the rules are 
bunched into groups  called procedures   within which the rules are totally ordered. 	only one procedure is active at a time; and this is controlled by a stack of procedure names  which is considered to be part of sim . 
the program 
     a set of rules was designed to model the subject's behavior in the path tasks. figure 1 shows the 
procedures into which the rules were partitioned and their interactions. procedure play controls the basic task cycle of  a  getting a direction from the 
experimenter and  b  thinking about it. the latter  b  consists of  1  creating new knowledge structures about the path   1  consolidating the newly created structures with the existing knowledge of the path  and  1  describing the path to the experimenter. 
     new structures are created by recognize by interpreting each input direction as a line segment. new expressions are combined with existing expressions to form other new figures. for example  given the two expressions 
 li 1 linf. vekt south pi north p1 move north  and  new l1 line horiz west p1 east p1 move east  
in stm  the corner recognition rule would create a new expression something like 
 new c1 corner p1 west l1 north l1 ...  
in stml.  note that c1 has  in effect  chunked l1 
and l1  which are copied into itm. since expression c1 holds the names of the lines of which it is composed  it may be used to retrieve these line expressions from itm.  c1 might then be used to recognize a box or a step pattern  etc. the other figural concepts used by the subject and the program include s-shapes  t-shapes  partial boxes  long lines  and crenelations. the hierarchic structure of some of the figures recognized in problem 1 is shown in figure 1. 
     often  when a partial or extensible figure is recognized  it is expected to be completed or continued. to take a case in point  each step of a step pattern  see  e.g.  steps in figure 1} is expected to be completed. when a line is interpreted as part 
of a step  e.g.  line 1   the program builds a structure representing the complete step   i . e .   corner  and marks it incomplete. it is the job of assimilate to check 
1 a l l new input directions against any expectations. if an expectation is f u l f i l l e d   the new direction is quickly processed.  the timings in the subject's 
this diagram sketches the simulation program. the boxes represent procedures  which are sub-production systems. the arrows indicate transfers of control 
between the procedures. the downward pointing arrows are subroutine-type calls  and the horizontal arrows are coroutine-type transfers. 
protocol support this analysis.  but if an expectation f a i l s   then the program has to reorganize; and  depending on how much commitment there was to the expectation  the program remembers this event as part of the path's structure. for example  ss 1 in figure 1 shows where the subject recalls a previously thwarted expectation; the  line missing  in figure 1 
was the expected line  but line 1 came instead. 
     a l l the recognized figures must be organized into a consistent description of the entire path  and this is done by incorporate. it meshes each new figure into the path expression and eliminates redundant and conflicting expressions. a l l newly incorporated figures are then described. 
     generally  adjacent figures in the path spatially intersect in rather complex ways  but  surprisingly  these intersections do not have to be explicitly 
described by the program. instead  each routine which operates on the path description sorts out the figural interactions for itself  by keeping track of common bub-expressions   nor does the subject have a complete understanding of a l l the figural interactions in the path; e.g.  the overlap of the steps and the boxes of the s-fig in problem 1  see figure 1 . 
　　　after incorporating new figures into the path description  the subject sometimes reviews this description  either forward or backwards. review operates at two different levels of detail. the sample protocol in figure 1 shows one of the program's more detailed review sessions  slightly more verbose than the subject's review  yet quite consistent with the subject . review simply controls the successive descriptions of the parts of the path. describe takes the internal representation of a figure and outputs a stylized  verbal  description. this involves selecting 
which features to mention and which to ignore in the context of each description. 
　　　the internal representation of the path is also used for spatial processing. relate tries to find a simple spatial relation  that is  horizontal or vertical alignment  between the current last part of the path and some earlier part of the path. it does this by  spatially  scanning backwards over the path keeping track of where it is relative to the last point. 
     symmetry is used only in problem 1 where the subject discovered bilateral symmetry over a large 
part of that path configuration. it is the most complex routine in the model. it begins with a small mapping between a couple of line segments in the path and then keeps trying to expand this mapping to cover more and more of the path until it exhausts the symmetry. symmetry maps not only line segments of the path  but also its higher level figures. it climbs up and down the hierarchic structure of the path description in its quest to generalize the symmetry. it also drives recognize to look for other figures it would like to have. 
　　　many other routines also make heavy use of the hierarchic structure of the internal path description. this can be seen by noting in figure 1 a l l the procedures which use articulate. the hierarchy is a result of the chunking strategy  which is the way the program  and the subject  copes with the limited size of stm. chunking is a coding operation  and articulate is the complementary decoding operation. it takes a figure expression and retrieves its sub-figure expressions from i1m and puts them in stm; and it continues recursively with these sub-figures u n t i l it reaches unit line segments of the path. articulate usually recalls figures in their temporal sequence  but it can be used selectively to recall only certain sub-figures. the program spends a great deal of its time in articulate. 
the representation 
　　　the expressions in stm represent what's  on the subject's mind  at any moment in time. the most striking feature about stm is that it contains a mixed 
bag of information in a homogeneous representation. there are not only figure expressions  the data for this task   but also expressions for verbal input/ 
output and expressions for control  e.g.  goal and context expressions and expressions for place-keeping . most of the expressions in stm ere obsolete and are just waiting to be pushed out  forgotten . 
1      we began with the issue of the nature of imagery. does this system have visual imagery  the intermixture of information makes it hard to separate out  visual images   but one interpretation is that an image is represented by the collection of figure expressions in sim at any one time. given the dynamic character of stm  the system's  images  are fleeting  changing structures which exist in stm in various degrees of completeness and detail. while  images  are only small pieces of the path description  they may range anywhere over the structure of the path description; and hence they may be either  vague   high-level  or  vivid   low-level . at least intuitively  this interpretation has the right flavor. 
　　　the internal representation of  the subject's cognitive structure of  the path is an abstract symbolic structure. it is neither  visual  nor  verbal   but both  visual  and  verbal  processes operate on i t . the representation is not  visual  in the sense that not a l l the information that would be immediately available with a visually present drawing of the path is in the representation. it is not  verbal  because a process is needed to transform it into a verbalizable output form. 
     the path description contains more *:han just spatial information. the description is predominantly 
hierarchic  as is emphasized in figure 1. 	almost as 
impoitant as the hierarchic relations are the temporal relations among the parts of the path  which are carefully encoded into a l l the figure expressions. this extensive involvement with temporal relations is a result  of course  of the nature and demands of the path task. explicit spatial relations are hardly used at a l l in the program  and extensive use of the semantics of the figure symbols  e.g.  corner  box  steps  is confined to the recognize and describe routines. articulate uses only the hierarchic and temporal relatione. 
　　　even the  visualization  routines  relate and symmetry  use only the hierarchic and temporal relations to traverse the path. visual imagery obviously depends on more than just spatial data.  the subject's behavior in reviewing the path backwards  for example  clearly reveals his dependence on a hierarchical representation.  what is interesting is how much  imaging  behavior can be exhibited without the explicit use of spatial data. the subject does not 
exhibit  in the protocol  any kind of knowledge about the path that cannot be explained by this kind of symbolic encoding and the rules to act on i t . 
　　　this view of the nature and place of imagery in cognitive functioning is a consequence of the  melting pot  view of stm. this should be seen in contrast to baylor's analysis using an  image space . from my point of view  such a separate  image space  is 
redundant. 	there are no pure  image operators ; but 
rather imagery depends strongly on structural  mostly hierarchic  information. this seems quite natural when one simulates a l l aspects of the subject's behavior in a task situation.  baylor only programmed his image operators.  but brooks' results s t i l l present a problem for which i don't yet have an answer. my program does not show any intramodel interference  suggesting that my representation is not yet correct. 
　　　to be honest  i must admit that the current program does miss some subtleties of the subject's behavior. 	in problem 1 the subject often complains that the path  keeps dragging out  to the east; and 
by the end of problem 1 he knows that he is near the beginning of the path  but not exactly where. however  
it appears  from an analysis by hand  that these can 
be explained by simply expanding the internal 
representation to include some crude spatial relations between the sub-figures of the path description.  this is a job for incorporate.  in any case  a l l of the subject's knowledge of the path seems to f i t comfortably into a symbolic representation. 
the analysis 
　　　there are some features of this task and its analysis which distinguish it from previous protocol analyses. the task was rather loose; the subject did not have any specific goals to reach. hence  the task cannot be characterized as searching in a problem space.  as a result  the subject's high-level goals 
are not understood or covered by this analysis.  	the 
subject's behavior was not simulated by hand  but rather the analysis was carried out using the production system interpreter. the task was analyzed at a very fine level of detail  using only simple 
symbolic operations as primitives; no high-level operators are assumed. the simulation operates within the framework of a model of the human memory structure. 
　　　the decision to analyze these protocols was opportunistic. it meant confronting the issues on 
which the protocols yielded good data and putting a ide issues which they did not help with. for example  a very interesting issue is whether the articulation operation is a reconstruction based on an encoding plus generic knowledge about figures or 
whether it is a recall operation from itm  as in my present program . 	but the subject makes no regeneration/recall errors and gives no clues as to the exact nature of this process. 	either technique  in effect  comes out looking the same. 	a specific case is the nature of the encoding for an iterative configuration such as a step pattern. 	is each step of the pattern encoded individually or is a  typical step  encoded  cf     	the subject's use of the steps concept does not give a way to decide this question. 
　　　deferring to the data in this case was worthwhile because these protocols did have a lot to t e l l us. our understanding of human cognitive representation is so scanty that this kind of exploratory experiment is s t i l l productive. the program is merely a demonstration that symbolic representation can explain some imaging behavior. but now that an operating context for representations has been set up  we are ready to design and use experiments which address some of the specific issues raised. for example  tasks requiring 
more specific kinds of spatial manipulation  such as shepard's mental rotation tasks  would help to focus on some of the image mechanisms. 	this poses some experimental issues on how to collect data rich enough and appropriate for this kind of detailed operational analysis. 
the productions 
     my simulation program is rather long  more than 1 rules  for a production system. although the computations it performs are somewhat t r i v i a l by a. i. standards  it was a lot of work to create and debug. since production programming is a new and l i t t l e understood style of programming  a few words on my experience are in order. 
a production system is the most unstructured 
 anarchic  type of programming language. any rule can  potentially  fire at any time  and often doesl . hence  the programmer cannot predict the system's behavior as well as with a structured language. for me this was a problem because i was trying to simulate a known behavior. thus several ad hoc rules are in the program just to keep the simulation  on the track . 
 however  when the program went off and did its own 

1 



thing  it usually behaved quite plausibly.  	acknowledgment 

but i now think that my system is too structured. 
the grouping of rules into procedures  though a simple way to get an efficient implementation  violates the spirit of the production iden  and the spirit is what is important here because rules cannot fire anytime. for example  recognize and incorporate should be intermingled in some places in the simulation; but they were each programmed independently  and it would 
be quite tedious to bring them together now. 
　　　production rules are supposed to he independent  but only sytnactically; semantically they are interrelated. rules can communicate with each other only through stm by using some sort of control language. thus the condition part of a rule is what expresses its semantic ties to other rules in the system. this is desirable  but there are factors which tend to dilute this explicit semantic expression. 
　　　any structure which is added to the system diminishes the explicitness of rule conditions. this is true not only of the grouping of rules  but also of the ordering of rules. each rule in an ordered system implicitly assumes that the rules preceding it must f a i l before it can f i r e . thus rules acquire implicit conditions. this makes them  superficially  more concise  but at the price of clarity and precision. some other method  such as a sorting network  is needed to select rules for firing.  a natural criterion for breaking ties when more than one rule can fire at a time is to use the ordering of expressions in stm to decide which rules have priority.  
     another questionable device in most present production systems  including mine  is the use of tags  markers  and other cute conventions for communicating between rules. again  this makes for conciseness  but it obscures the meaning of what is intended. the consequence of this in my program is that it is very delicate: one l i t t l e slip with a tag and it goes off the track. also it is very difficult to alter the program; it takes a lot of time to readjust a l l the signals. 
　　　the lesson 1 learned from this programming effort is the importance of a clear  explicit language of control in this kind of programming system. 	the study of a control language is what is needed. 	the goal of this study would be to develop precise statements  but as general as possible  of the relations between rules so that any rule can fire sensibly in a variety of contexts. 	hopefully  this control language would be 
based on some new insights about procedural interactions and would not be merely a re-expression of the usual control regimes of structured programs. another way of stating this is in terms of form and function. whereas a structured programming language expresses the relations between its primitive actions formally  via the syntax of the language   a production system expresses them functionally  via the conditions for the actions . 
　　　this report is based on my thesis research at carnegie-mellon university. 1 would like to acknowledge the help and encouragement of my thesis advisor  dr. allen newell. this research is supported by the advanced projects research agency of the office of the secretary of defense  contract f1-c1  and is monitored by the air force office of scientific research. 
