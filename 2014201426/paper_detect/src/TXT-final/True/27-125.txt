how to progress a database i i : the strips connection 
fangzhen lin and ray reiter* 
department of computer science 
university of toronto 
   toronto  canada m1s 1 email: {fl  reiter} ai.toronto.edu 

1 


1 	temporal reasoning 


1 

   the consistency condition  1  deserves a brief explanation. following pednault  and schubert   reiter   l l   provides a solution to the frame problem in the absence of state constraints which syntactically transforms a pair of effect axioms for a given fluent f into a successor state axiom for f. the effect axioms are assumed to have the syntactic forms: 

and 

reiter applies the explanation closure idea of schubert  to obtain the following frame axioms for f: 

the successor state axiom  1  is logically equivalent to the conjunction of the above four sentences  whenever the consistency condition  1  holds. notice that the consistency condition makes good sense: if it were violated  so that for some x a s we have pos$ a s   
  and   then we could derive an 
immediate inconsistency from the above two effect axioms. 
　it is easy  but tedious  to verify that each fluent of example 1 satisfies the consistency condition. 
   in keeping with our intuition that strips systems are mechanisms for progressing situation calculus databases  we want now to characterize the result of progressing ds1 under the effects of the ground action a in the case of action theories of the above kind. this turns out to be easy  since the necessary work has already been done  lin and reiter  1   section 1 . 
let s be the following set of sentences: 
1. initialize s to  is state independent}. 
1. for each fluent f do  with reference to the instance 
 1  of f's successor state axiom : 
 a  add to s the sentence l   . . .   m . 
 b  for each ground instance j add to s the sentence 
c is a tuple of constants different from each 
 ..   n .  here  we invoke the unique names axioms for constants of sort object . 
 c  add to s the sentence l   . . .   n . 
 d  for each ground instance add to s the sentence ever c is a tuple of constants different from each x i  = l   . . .   m .  we again invoke the unique names axioms for constants of sort object  . 
　the resulting set s enjoys the property that s u vuna is a progression of ds1 under action  lin and reiter 
1 	temporal reasoning 
  theorem 1 .1 moreover  the state dependent sentences of s are all ground literals  and the results of lin and reiter  guarantee that s contains no pair of complementary literals. it follows that s can serve as a new initial database for the purposes of iterating the above progression mechanism. 
   now we interpret the above construction of the set s as a strips operator. imagine suppressing the state argument so of all the ground literals of ds1   now ask what sequence of deletions and additions of ground literals must be performed on the state-suppressed version of ds1 in order to obtain the state-suppressed version of s  i.e. 1 with the state argument do a  so  suppressed in its sentences . the deletions and additions necessary to achieve this state-suppressed transformation of ds1 to s will define the delete and add lists for the strips operator a. 
　it is easy to see that the following deletions and additions  when applied to d1  the state-suppressed version of ds1  yields the state-suppressed version of $: 
for each fluent f do  with reference to the instance  1  of f's successor state axiom : 
1. delete from do the sentences  = l   . . .   m . 
1. delete from dq the sentences 
1. add to d1 the sentences 
1. add to do the sentences 
it is now clear how to define a strips system and its associated operator for a:1 
1. the language l strips is the state-suppressed version of 
1. the initial world description is d1. 
1.  is ordinary logical entailment; for a world description w and sentence  iff 
1. a's precondition is the state-suppressed version of the right hand side of the equivalence in a's situation calculus action precondition axiom. 
1. for each fluent f  include in a's add and delete lists those literals specified above for obtaining the state suppressed version of s. 
　to our knowledge  ocf-strips is the only variant of strips which specifically provides for an incomplete database of ground literals  and which is provably correct with respect to a logical specification. 
e x a m p l e 1 continuing with our blocks world example  we can  read off  the ocf-strips operator schema for move from the instances of the successor state axioms given in example 1: 
1
　　the consistency condition  1  was inadvertently omitted from the assumptions underlying theorem 1 of lin and reiter 
. 
1
see section 1 for the relevant definitions. 
1
　　we take it as self evident what is meant formally by the language obtained by suppressing objects of sort state from the language l1. 


1 

our interpretation of such a database  namely as a statesuppressed situation calculus theory  distinguishes our approach from pednault's  in which these databases are 
first order structures. so for pednault  strips is a mapping from first order structures to first order structures  where this mapping is defined by the addition and deletion of tuples applied to the relations of the structure. adl  pednault's generalization of strips  is just such a mapping between structures. for us  as for lifschitz   strips is a mapping from first order theories to  possibly second order  theories  where this mapping is effected by add and delete lists of sentences applied to the theory. the problem with the adl view on strips is that it does not provide a feasible mechanism for applying a strips operator in the case that the database is a logically incomplete theory  e.g. ocf-strips of section 1 . for in such a case  every model of this theory must be mapped by an adl operator into its 
transformed structure  and it is the set of all such transformed structures which represents the effect of the adl operator. when there are infinitely many such models  or even when they are finite in number but numerous  adl becomes an unattractive strips mechanism. in contrast  our focus is on strips mechanisms that operate on logical theories  and hence operate on the single sentential representations of these many models. 
	1 	c o n c l u s i o n s 
1. on our view strips is a mechanism for progressing a situation calculus theory  and its semantics can best be understood with reference to a suitable sit-
uation calculus axiomatization of actions and their effects. 
1. with this notion of progression in hand  it becomes possible to formulate various strips-like systems  and prove their correctness with respect to our pro-
gression semantics. in this paper we have done just that for two different strips systems  ocf and rcf-strips . in this connection ocf-strips is of particular interest because it provides for a  limited  form of logical incompleteness of the database. 
1. notice that it is a completely mechanical process to obtain the ocf-strips operators from a situation calculus axiomatization of some domain. similarly for rcf-strips. in other words  these purely declarative situation calculus specifications can be compiled into appropriate strips systems. 
1. the connection of rcf-strips to relational databases  section 1  suggests a natural generalization of strips operators to allow for arbitrary relational algebra operators  not just adds and deletes  in defining the operator's effects. this can indeed be done  and an appropriate semantics defined in terms of a situation calculus axiomatization that relaxes the context free restriction on successor state axioms of section 1  lin and reiter : the 
full version of this paper . 
1. we have considered only strips systems that compute the full result of progression. sometimes  for 
1 	temporal reasoning 

instance for computational purposes  it may be better to compute only that part of the progression that is relevant to the goals of interest. for example  if our blocks world includes a fluent for the colors of blocks  then there are no need to progress this fluent if our goals have nothing to do with colors. 
formally  we say that a given strips system is sound with respect to a consistent action theory 
p = e u d s s u p a p u vuna u vso iff: for any finite  including empty  sequence 1 of operators in the strips system  there is a corresponding finite sequence t of action in the situation calculus such that if the world description ws after performing 1 on wo is admissible  then t is executable in s1 and dt |= th ws   where dt is the result of suppressing states in the progression of dso to st  and 
	th ws  	= 	{Φ . 
generally  if a strips system is sound with respect to an action theory  then any goal that is achievable in the strips system is also achievable in the action theory. however  the converse is not  true in general. we say a strips system is adequate for a given goal if the converse is true  i.e. whenever the goal is achievable in the situation calculus theory by a sequence of actions  it is also achievable by a sequence of operators in the strips system. 
with these definitions in hand  we can show  lin and reiter : the full version of this paper  that  with respect to a suitable action theory  the main example strips system considered in  fikes and nilsson   is both sound  and adequate for the class of goals considered there. this is of interest because it shows that our semantics is sophisticated enough to handle the concepts of non-literal and/or non-essential formulas considered in lifschitz's  1  analysis of this same example. 
a c k n o w l e d g e m e n t s : 
thanks 	to 	the 	other 	members 	of the 	university 	of 
toronto cognitive robotics group  yves lesperance  hector levesque  richard mann  daniel marcu and richard scherl  for their comments and suggestions. this research was supported by grants from the natural sciences and engineering research council of canada  the institute for robotics and 
intelligent systems of the government of canada  and the 
information technology research centre of the government of ontario. 
