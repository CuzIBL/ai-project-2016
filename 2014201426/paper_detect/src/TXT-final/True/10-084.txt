can domain specific knowledge be generalized  
alan bundy 
department of a r t i f i c i a l intelligence 
university of edinburgh 
scotland 

　　　the mecho project  see cl   consists of w r i t ing a computer program which can colve a wide variety of simple mechanics problems stated in english. this program is being used as a vehicle for studying methods for guiding search in a semantically rich domain. our methodology is to find general  j u s t i f i a b l e   inference rules which can be combined to carry out the reasoning necessary to solve the mechanics problems. as is well known  when rules like these are run on a general inference machine the result is often a combinatorial explosion. rules are combined in unexpected ways and the search for a solution is developed along unreasonable paths. these failures are used to debug the rules by adding to them local  domain specific control information. finally these techniques are generalized and incorporated in the inference mechanism. we hope that this methodology w i l l lead us to the design of a computational logic for natural reasoning. 
　　　in this paper one such transition from domain specific to general inference technique w i l l be described. we w i l l use this example to emphasize the importance of this generalization stage. without it one might be led to superficial and false conclusions about the nature of natural reasoning. 
　　　suppose we have available the following relations: vel object  v  time  -  v is the veloci t y of object during time ; 
at object  place  moment  -  object is at place at moment ; final period  moment  -  moment is the f i n a l moment of time interval period . we may have discovered the following domain specific i n formation enabling us to guide the search for 
problem solutions along successful lines  
 i  if the program is desperate to satisfy vel object  v  time   object and time being known  but a l l inferences have ground to a halt  then a new intermediate unknown v can be created and asserted to be the velocity of object at time  
 ii  if the program is asked to confirm that at object  placel  moment   but it already knows that object is at some different place  place1  at moment  then the attempt to prove at object  placel  moment  can be abandoned  because objects can only be in one place at a time  
  i i i   if the final moment of period is found to be momentl  but later processing f a i l s   it is no use backing up to recalculate final period   x   since the same answer is bound to be given. 
　　　at f i r s t glance it might seem as if these examples argued for the intervention of rich domain specific information at a l l control points and that a programming language which facilitated such intervention was required. but these conclusions are not j u s t i f i e d from the examples   i   -   i i i   above. in fact   i   -   i i i   represent different facets of a general phenomenon. to see this notice that vel  at and final are a l l really functions: vel is a 
　　　function from objects and times to velocities; at 
is a function from objects and moments to places and final is a function from periods to moments. what separates functions from other relations is that they are single valued  that is their value is guaranteed to exist and to be unique   i  is an example of this existence property being used and  ii  and   i i i   different uses of the uniqueness property. the generalizations of   i      ii  
and   i i i   are 
   i   ' if the program is desperate to find a function value given i t s arguments  and a l l inferences have failed then a new entity can be created and asserted to be that value.  note that we do not want the program to create a new entity whenever it is legal to do so as this contributes to the combinatorial explosion. the notion of being desperate for the answer can be generalized  see  1 .  ii  * if the program is trying to confirm a function value  but it already has a contradictory value stored then the confirmation attempt is to be abandoned. 
  i i i   ' if the program has calculated a function value then it should not recalculate this on back up. 
　　　note that   i   ' -   i i i   ' improve on the predicate calculus representation of the existence and uniqueness of function values  by giving procedural i n formation about when this information is to be used. they also improve on the local domain specific embodiment of   i   -   i i i   by representing a large amount of such information in concise form  e.g. the existence property can now be used on at and final and the uniqueness property can be used on vel. a l l that is necessary to share the benefits of the control information embodied in   i   ' -   i i i   ' is to specify which relations have function values. for functions of one argument the implementation of   i   ' -   i i i   ' can be assisted by maintaining a single slot on the property l i s t of the argu-
ment. however  something more complicated is needed for functions of more than one argument. 
　　　some relations may be functions in more than one way  e.g. if timesys period  initmom  finmom  means that initmom is the i n i t i a l moment and finmom is the final moment of period then timesys is a function in 1 ways: 
 a  from period to initmom 
 b  from period to finmom 
 c  from initmom and finmom to period 
