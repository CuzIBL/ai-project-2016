 representation and match that representation against either stored plan templates from a library  john1; solo1   or a model program  adam1 . bugs appear as unaccountable differences between stored correct plans and the parsed program. plan transforms increase the range of programs that can be accepted by statically representing common implementation variants. however  some correct student implementations will require inductive proofs or unanticipated transforms to establish their equivalence to stored plans. these implementations are rejected as buggy or unanalyzable. 
　　a formal approach to automatic program debugging  by katz and manna  katz1   extends the logical analysis of programs to include program incorrectness and a means of correcting incorrect programs. program statements are related to synthesized inductive invariants. when these invariants are insufficient to establish a proof of correctness  program statements are altered so the necessary inductive invariants are derived. synthesizing these inductive invariants and determining what program statements to alter is difficult; no implementation of their design exists to date. 
　　shapiro  shap1  traces the execution of pure prolog programs to isolate the presence of bugs in procedures whose traces are incorrect. the user supplies information about examples to try  the correctness of program traces and violations of well founded relationships. bugs are corrected by synthesizing correct clauses or by searching among perturbations of buggy clauses. this method can be applied to other functional programming languages  but 
　　
1 	w. murray 
requires user query and only debugs the program with respect to the examples provided. 
	other 	approaches 	include 	analysis 	by 	synthesis 
 mill1   analysis of program execution  shap1l   plan parsing  mill1; ruth1   and analysis of program output  gold1 . 
h i . a u t o m a t i c debugging in t a l u s 
　　the debugging approach of talus  described in this section  attempts to increase the acceptable variability in student solutions and the robustness of the debugging process  while not relying on the student to assist in the debugging or to understand formal verification techniques. debugging occurs in three stages: algorithm recognition  bug detection  and bug correction. 
a. a l g o r i t h m recognition 
all functions  stored or student  are parsed into 
e-frames. algorithms and solutions are collections of functions. e-frame slots represent abstract properties of recursive functions that  partially  enumerate the elements of a recursively defined data structure. a function's e-frame has slots representing its recursion type  tree  list  or number   recursive calls  terminations  variable updates  and task role  main  constructor  or predicate . the e-frame representation facilitates a robust algorithm recognition process by allowing partial matching to occur on the semantic features of abstract enumerations and the role of functions in solving tasks  rather than on code structure. 
	figure 	1 	talus 
	figure 1: 	algorithm recognition in talus 
　　talus performs a best first search to cho between competing algorithms and to map stud functions to stored functions. nodes are part mappings of student and stored functions for one of competing algorithms. 
　　function mappings allow for missing or superflu  student functions while using constraints to reduce search space. student functions map to sto functions or to extra; stored functions map student functions or to missing. two functions   be paired only if their parents have already been pai and the functions have the same task role. 
　　a measure of dissimilarity is computed for ea partial mapping. each function pair contributes penalty that is a weighted sum of the differen between the slots of the corresponding e-fram additional penalties are added for functions mapped missing or extra. 
　　alternative functional decompositions of algorith are represented either extensionally as additional t; solutions or intensionally through the use of solut transforms  discussed in section iv . 
b. bug detection 
   figure 1 illustrates how talus debugs a stud function matched to a stored function. a binary t represents each function  with nonterminal not representing conditional tests and terminal not representing function terminations or recursions   recursive calls . the terms that must be true or false reach a terminal node are the terms governing tl node. each set of terms governing a terminal node i case. 
　　for each case  talus symbolically evaluates b the student and the stored function. for each functi symbolic evaluation involves reducing its conditional! a symbolic value  i.e. a termination or recursk formal methods determine if a case implies tha 
　　
conditional test is true or false. case splitting can occur resulting in more than one symbolic value being returned. 
　　talus compares the symbolic values returned by the student and stored functions to determine if they are equal under the assumed case. a theorem prover is used to check that a case implies the computational equivalence of two symbolic values. if they are not equal  a bug is present. 
c. bug correction 
　　talus debugs a student's code fragment by comparing it to the corresponding stored code fragment. considering only top level expressions  talus tentatively replaces one expression in the student's code with the corresponding expression in the stored code. if the two code fragments are now functionally equivalent then the altered code fragment has no remaining bugs. talus applies its debugging procedure recursively to the expression replaced whenever possible. 
　　if bugs remain after the replacement then another replacement is tried. if no further replacements are possible then the stored code fragment replaces the entire student code fragment. 
i v . annotated scenario 
　　the scenario below is edited for brevity. the scenario starts in the middle of a tutorial session  after the student has had some instruction in lisp programming. 
task 	memtree 
w r i t e a f u n c t i o n t h a t determines 	whether an atom 	is 	one of the leaves of a t r e e . 
 defun memtr  at cons  
	 in at 	 flat nil cons    
 defun flat  ans tr  
 if  atom tr  ans 
 flat  flat ans  cdr tr   
 car t r         
 defun in 	 x l  
	 if 	 listp l  
	 if 	 equal l 	 list x   
l 
 if  not  equal  car l  x    in x  car d   
d  
n i l     
figure 1: a buggy solution to the memtree task 
	w.murray 	1 
a. a l g o r i t h m recognition 
　　talus must now recognize the algorithm the student has used. first  the functions memtr  flat  and in are parsed into e-frames. the three e-frames together represent the student's solution. 
talus knows of two different algorithms for the 
memtree task. the tree-walk algorithm explores the car and the cdr of a tree separately to see if an atom is in the tree. the memtreeflatten algorithm first flattens the tree and then determines if the atom is a member of the resulting bag. the result of the algorithm recognition process is: 
a l g o r i t h m used: memtree-flatten. 
student fns matched to stored fns: 
	flat 	to flatten 
in 	to member memtr to memtree 
s o l u t i o n transform a p p l i e d : transforming flatten to mcflatten to b e t t e r match the s t u d e n t f u n c t i o n flat. 
　　talus selects the memtree-flatten algorithm as being more similar to the student's solution than the tree-walk algorithm. the stored functions flatten  member  and memtree  whose e-frames comprise the memtree algorithm  are mapped to the student functions flat  in  and memtr. 
　　talus has stored global solution transforms that allow it to transform one solution to an equivalent solution  more closely matching the student's solution. thus  when appropriate  mcflatten replaces 
flatten  and calls to mcflatten replace calls to 
flatten. a similar transform allows predicates and predicate calls to be simultaneously logically inverted. 
　　talus now maps the formal variables of matched functions by using heuristics that take into account variable data type: 
flat 	to mcflatten: 	 tr/tree  ans/answer . 
in 	to member: 	 l/bag  x/item . 
memtr to memtree: 	 cons/tree  at/item . 
b. bug detection 
　　talus now debugs the student functions by comparing them to the stored functions they have been matched with. talus matched flat to flatten and then transformed flatten to mcflatten to match flat better. the stored definition of mcflatten is: 
　　
1 	w.murray 
 defun mcflatten  tree answer  
 if  atom tree  
 cons tree answer  
 mcflatten  car tree  
 mcflatten  cdr tree  answer     
　　in order to facilitate bug detection and allow talus to replace buggy student code with stored code to correct bugs  the code above is normalized by replacing the stored function and formal variable names with the student's  and then permuting the formal variable order to match the student's. the result is: 
 defun flat  ans tr  
 if  atom tr  
 cons tr ans  
 flat  flat ans  cdr tr   
 car tr     
　　by examining the stored function  talus determines that there are two cases to consider: either  atom tr  is true or  not  atom tr   is true. by comparing the student's function  see figure 1  and stored functions for these two cases  we can determine if they compute the same values under the same conditions. if they do not then a bug is present. the case analysis follows: 
 bug f o u n d : 
 implies  atom tr  	;case 
 equal 	 cons 	tr ans  from stored fn ans    	;and student fn 
is 	i n v a l i d .   
hint: looks l i k e you used the variable ans instead of the function c a l l  cons tr ans  in flat. 
 check: 
 implies  not  atom tr   
 equal  flat  flat ans  cdr tr    car tr   
 flat  flat ans  cdr tr    car tr     
is a theorem.  
　　conjectures are first checked by a conjecture disp rover that runs counterexamples. counterexamples are stored sets of bindings of formal variables for each function in a stored task algorithm. if the conjecture evaluates true for all counterexamples then it is believed  otherwise it is definitely false. 
conjectures that are believed are then passed to the boyer moore theorem prover  boye1  for formal verification. functions involved in the conjectures are previously defined using the normalized stored function definitions. 
　　if a conjecture is formally proved then no bug is present in the student's code for that case. if the proof of a believed conjecture fails  then either the conjecture is false or necessary lemmas for the proof to succeed are missing. in the example presented in this paper all conjectures that are believed are proven to be theorems by the boyer moore theorem prover. 
　　for more complex examples  proofs may fail due to the absence of necessary lemmas. when this happens correct implementations are considered buggy and replaced by stored code fragments. with this approach  buggy implementations are always detected. 
　　a more practical but less elegant approach is to accept as true the conjectures believed by the conjecture disprover. the claim that talus relies on formal methods is weakened while its practical performance improves markedly. more complex programs can be debugged since the conjecture disprover needs no lemmas  but some bugs may be missed if no counterexample is found to an invalid conjecture. on the other hand  correct implementations are never considered buggy  and true conjectures that are difficult to prove formally are easily checked by the conjecture disprover. 
c. bug correction 
　　when a conjecture is invalid  talus debugs the student's code by minimally altering the student's code so that the conjecture becomes a theorem. essentially  talus attempts to verify the student's program using the stored function both as its specification and as a source of corrections. debugging consists of enforcing the verification conditions when necessary. since the student and stored functions are not always equal when  atom tr  is true  a bug is present. talus fixes the student's code by replacing only the student's code fragment for this case with the corresponding stored code fragment. the debugged code is shown below: 
 defun flat  ans tr  
 if  atom tr  
 cons tr ans  
 flat  flat ans  cdr tr   
 car tr     
　　the function in  see figure 1  is debugged similarly by comparing it to the stored function member  which is normalized to: 
　　
 defun in 	 x l  
	 if 	 nlistp l  
nil 
	 if 	 equal x  car l     
t 
 in x  cdr l           
　　talus generates the following conjectures to check whether the student and stored functions are logically equivalent predicates: 
 implies  nlistp l  	 iff nil nil    implies  and  not  nlistp l   
 equal x  car l     
	 equal l 	 list x       
 iff t l      implies  and  not  nlistp l     
 equal x  car l     
	 not  equal l 	 list x         
 iff t l      implies  and  not  nlistp l     
        not  equal x  car l          iff  in x  cdr d   
 in x  car l         　　the first three conjectures are theorems while the last is not  indicating a bug which talus corrects: 
 defun in  x l  
	 if 	 listp l  
	 if 	 equal l 	 list x   
l 
 if  not  equal  car l  x    in x  cdr l     
　　　　d  nil   
　　the remaining function  memtr  has no bugs and its analysis is omitted. 
v   summary 
　　this paper has illustrated a new approach to program debugging that combines both heuristic and formal methods to achieve greater power than either approach alone. heuristic methods are not used merely to enhance efficiency but in a fundamentally different way: to represent inexact notions that are difficult to express formally  to allow robust algorithm recognition in the presence of bugs  and to generate conjectures to be formally tested. 
　　formal methods are equally important to the performance of talus. rather than relying on a fixed set of rewrite rules to establish that one implementation is computationally equivalent to another  the full power 
	w.murray 	1 
of a theorem prover capable of inductive proofs can be brought to bear. implementation equivalences that are only valid under certain conditions can be established. logical implications  necessary for symbolic evaluation  can be determined. 
by using heuristic and formal methods together  
talus allows significant variability in student input  fully automatic and robust program debugging  and provides debugging skills necessary to a complete intelligent tutoring system that teaches programming. 
acknowledgements 
     elaine rich  bruce porter  mark miller  and jim miller have provided invaluable assistance in this research and its presentation here. 
