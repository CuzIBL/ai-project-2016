 
this paper describes the implementation of a distributed case-based reasoning application that supports engineering sales staff. the application operates on the world wide web and uses the xml standard as a communications protocol between client and server side java applets. the paper describes the distributed architecture of the application  the two case retrieval techniques used  its implementation  trial  roll-out and subsequent improvements to its architecture and retrieval techniques using introspective reasoning to improve retrieval efficiency. the benefits it has provided to the company are detailed. 
1 introduction 
western air is a distributor of hvac  heating  ventilation and air conditioning systems in australia with a turnover in 1 of $1 million  us dollars . based in fremantle the company operates mainly in western australia  a geographic area of nearly two million square miles. the systems supported range from simple residential hvac systems to complex installations in new build and existing factories and office buildings. 
　western air has a distributed sales force numbering about 1. the majority of staff do not operate from head office but are independent  working from home or a mobile base  typically their car . until recently  sales staff in the field would gather the prospective customer's requirements using standard forms and proprietary software  take measurements of the property and fax the information to western air in fremantle. a qualified engineer would then specify the hvac system. typically the engineer would have to phone the sales staff and ask for additional information and the sales staff would have to make several visits to the customer's building and pass additional information back to the head office engineer. 
　western air felt that basing a quote on the price of a previous similar installation gave a more accurate estimation than using prices based on proprietary software  catalogue equipment prices and standard labour to try to help engineers make use of all the past installations a 
1 	knowledge-based applications 
dan gardingen 
western air ltd. 
mccabe street  north fremantle 
fremantle 
western australia 
database was created to let engineers search for past installations. the database contained approximately 1 records  each with 1 fields describing the key features of each installation and then a list of file names for the full specification. initially the engineers liked the database and it increased the number of past installations they used as references. however  after the honeymoon ended  they started to complain that it was too hard to query across more than two or three fields at once. and that querying across ten or more fields was virtually impossible. in fact most of them admitted to using the database to laboriously browse through past installations until they found one that looked similar to their requirements. 
1 	implementation 
western air decided that merely improving the efficiency of the engineers in fremantle would not solve the whole problem. ideally they would like the sales staff to be able to give fast accurate estimates to prospective customers on the spot. however  they were aware that there was a danger that the less knowledgeable sales staff might give technically incorrect quotes. 
1 the team 
the development team comprised: 
  a senior engineer from western air  one of the firms owners  as project champion  
  an engineer from western air to act as project manager and domain expert  
  a consultant java/html programmer  
  a consultant from ai-cbr to advise on cbr issues 
 resident in the uk   and 
  a part-time data entry clerk. 
1 implementation plan 
the project had the direct involvement of one of the firms owners so management commitment was not a problem. it was also decided that creating a partially functional prototype was not sensible since the system would either work or 

not. however  a carefully controlled and monitored trial was considered essential for two reasons: 
1. it was still not certain that sales staff could create technically sound first estimates and therefore a small carefully monitored trial was essential to avoid losing the firm money. 
1. there were resource implications since although all sales staff had portable pcs  some were old 1 windows 1 machines and few had modems or internet accounts. 
　a fixed  non-negotiable  budget was given to the project of $1 and it was decided that six months would be given for development and trial of the system. the project started in october of 1 and the trial was planned for march of 1. 
　it was decided initially to deal with moderately complex residential hvac systems because it was felt that this would provide a reasonable test of the system without undue risk. western air felt that it was commercially unwise to risk experimentation on high value commercial contracts. western air realised they wanted a system that could find similar installations without making the query too complex for the engineers. web based cbr applications have been demonstrated for a few years now such as the faqfinder and findme systems  hammond et al.  1  and those at broderbund and lucas arts  watson  1 . 
　the solution they envisaged was to set up a web site that sales staff could access from anywhere in the country. through a forms interface the prospect's requirements could be input and would be passed to a cbr system that would search the library of past installations and retrieve similar installations. details of the similar installations along with the ftp addresses of associated files would then be available to the sales staff by ftp. the sales staff could then download the files and use these to prepare an initial quote. all this information would then be automatically passed back to an engineer to authorise or change if necessary. once an installation was completed its details would be added to the library and its associated files placed on the ftp server. 
　since a simple nearest neighbour retrieval algorithm would suffice implementing our own system was a viable option. java  visual cafe  was chosen as the implementation language for both the client and server side elements of the 
cbr system. xml   www 
consortium  1  was used as the communication language between client and server-side applets. the world-wide web consortium  w1c  finalised xml 1 in december 
1 as a potential successor to html  www consortium . 
1 	system architecture 
on the sales staff  client  side a java applet is used to gather the customer's requirements and send them as xml to the server. on the server side another java applet  a servlet  uses this information to query the database to retrieve a set of relevant records. the java servlet then converts these into xml and sends them to the client side applet that uses a nearest neighbour algorithm to rank the set of cases. a schematic of the architecture is shown in figure 1. 

figure 1. system architecture 
1 	case representation 
cases are stored within a database. each record  case  comprises 1 fields used for retrieval and many more used to describe the hvac installations. in addition  links to other files on the ftp server are included to provide more detailed descriptions. once retrieved from the database the records are ranked by a nearest neighbour algorithm and dynamically converted into xml for presentation to the client browser. an xml case representation is used by our system  shimazu  1 . xml pages can contain any number of user defined tags defined in a document type definition  dtd  file. tags are nested hierarchically from a single root tag that can contain any number of child tags. any child tag in turn can contain any number of child tags. each tag contains a begin statement  e.g.  case   and an end statement  e.g.  /case  . this is illustrated in figure 1. 
1 	case retrieval 
case retrieval is a two stage process. in stage one the customer's requirements are relaxed through a process of query relaxation. this process takes the original query and relaxes terms in it to ensure that a useful number of records are retrieved from the database. this is similar to the technique used by kitano & shimazu  in the squad system at nec  although as is discussed in section 1  we have improved it efficiency using an introspective learning heuristic. 
	watson and gardingen 	1 


figure 1. a portion of a symbol hierarchy for mechanical heating & cooling systems 
for example  assume we are trying to retrieve details of installations using athol b1 equipment. an sql query that just used 1tatholjb1  as a search term might be too restrictive. using an ordered symbol hierarchy  as in figure 1  our system knows that  athol b1  is a type of  fan coil  system so the query is relaxed to  where    equipmentreference  =  this query will include equipment from athol  sperry and tfr. an ordering of each set of symbols in the hierarchy is obtained through the reference number suffixes to each symbol  e.g. t1  t i l   t1  t1  t1 as shown in figure 1 . the symbol hierarchies are stored in a table in the database. 
　other specific criteria  elevations or temperatures that are numbers  integers or reals  can be relaxed by using simple ranges  e.g. a temperature of 1＜ f. could be relaxed to  between 1 and 1  . knowledge engineering was required to determine by what amounts numeric features should be relaxed. the relaxation is expressed as a term a percentage these relaxation terms are stored in a table in the database. an example of a 
　relaxed sql query is shown in figure 1. 
　in the second stage of retrieval the small set of retrieved records are compared by the client-side applet with the original query and similarity is calculated using the simple nearest neighbour algorithm shown in figure 1. the resulting similarity measure is normalised to give a percentage range of 1%  i.e. completely dissimilar  to 1%  i.e. completely similar . the weighting on the features by default is set to 1  i.e.  all features are by default considered of equal importance  however  the sales engineers can change the feature weightings to reflect client priorities or their own preferences. 
1 	knowledge-based applications 

where: 
t is the target case s is the source case n is the number of features in each case i is an individual feature from 1 to n 
f is a similarity function for feature i in cases t and s 
and 
w is the importance weighting of feature / 
figure 1 the nearest neighbour algorithm 
　once an hvac installation is completed its details are added to the database and its associated files placed on the ftp server. having a database management system for the case repository has proved essential since it makes it easier to generate management reports and ensure data integrity. it would be almost impossible to maintain a collection of 1 cases without a dbms. 
1 	interface design 
the interface to the system is a standard java enabled web browser  netscape or internet explorer . the forms within the java applet were designed to look as similar to the original forms  hvac specification tools and reports that the sales staff were already familiar with. microsoft frontpage 1 and macromedia's dreamweaver were the primary tools used to create the web site. a sample screen from the client side java applet can be seen in figure 1. 
1 	testing  roll out & benefits 
two weeks before trial five test scenarios were created that were representative of the range of more complex residential installations the system would be expected to handle in use. these were given to the five sales staff who would initially use the system and they were asked to test the system. out of the 1 tests  1  1 were correct. although the remaining three were not specified as expected they were felt to be technically acceptable solutions. 
the system was rolled out for trial to the five sales staff in 
march of 1. acceptance of the system from the five sales staff was very good once they understood what it was doing. during the month's trial the system dealt with 1 installations all of which were felt to be technically sound. the sales staff had not had to use the expertise of the hvac engineers at all for this work although the engineers checked the final specifications. 


	query.xml 	query.dtd 
figure 1. a sample of the xml case description 
select location.referenceregion  location.dailytemprange  location.lattitude  location.elevation  location.elevationfactors  location.elevationfactort  location.drybulbtempwin  location.drybulbtempsum  location. wetbulbtemp  
from location 
where    location.referenceregion = sw''  and   location.elevation  between 1 and 1  and   location.drybulbtempwin  between 1 and 1  and   location.drybulbtempsum  between 1 and 1   
figure 1. example of an sql query that has been relaxed 

　during the trial month the five sales staff were able to handle 1 installation projects without having an hvac engineer create the specification. this resulted in a considerable saving in engineers time allowing them more time to deal with complex high value commercial hvac contracts. 
　it was estimated that margins had been increased by nearly 1% while still remaining competitive. based on this western air has invested $1 in purchasing pentium notebook pcs for its sales staff. the system was rolled out to the entire sales staff in may of 1. in the first ten months since the system has been fully operational sales compared with the same period last year are up 1% and margins have increased by 1%. western air expect the system to make $1 in its first year. a return of $1 on an investment of $1  all amounts are in us dollars . 
one of the firm's senior engineers commented that: 
 since this system went live i've had much more time to spend on my own contracts. i used to hate going into the office because i always had a string of problems to handle from the mob out in the field. now i feel i have the time to 
really help when i do get a problem to deal with.  
a member of the sales engineering staff said that:  this is just great. it used to be really frustrating waiting for them back in fremantle to deal with our problems. i always had to give 'em aggro and when we did finally get an answer the bloody customer changed his mind. then they whinge because we can't give them an answer on the spot. now i can even use their phone and get good answers real quick. it really impresses them!  
1 	system enhancements 
since its roll-out the original implementation of the system has experienced increasing load performance problems. the java servlet approach suffered from poor performance because the web server loads  executes and terminates a new servlet program for each user access. large data sets and complex queries especially burden the system because data querying takes place via the java servlet program rather than directly via the database. this coupled with the fact that ms access is not a particularly fast database caused time out problems as the server load increased. to rectify this problem the database was ported to mysql  http://www.tcx.se  a freeware database with much better performance. 
	watson and gardingen 	1 


figure 1. client side java applet showing retrieved hvac case 

in addition netscape's livewire database integration tool was used. this product has excellent database query functions  and importantly  because the livewire engine runs within the netscape web server process it can share database connections across all web accesses. 
1 introspective learning 
the initial query relaxation method of first performing a precise query and then relaxing the query through successive iterations until a sufficiently large set of cases was retrieved also compounded the performance problems. a suggestion was made to turn this process around - namely  why not relax the initial query far enough to ensure that a large set of cases would be retrieved  e.g.  several hundred cases  and then refine the query to reduce the sub-set to around twenty cases . the obvious speed advantage in this approach is that an increasingly small sub-set of cases is searched in any subsequent iterations as opposed to the entire database in the original query relaxation approach. 
　however  deciding how much to relax the query was not straightforward so an introspective learning approach was taken. this is an approach in cbr where the reasoning system itself learns over time to modify its internal representation to improve its performance  markovitch & scott  1 . for example  cbr systems may learn to modify feature weights  adaptation rules  leake  et al.  1; hanney & 
1 	knowledge-based applications 
keane  1   or even learn to forget redundant cases 
 smyth & cunningham  1 . in our implementation the system logs each time it needs to relax a query. when the same query term is encountered again the query is automatically relaxed by the previous amount. whilst not a guaranteed improvement this heuristic  combined with the improvements in server side architecture  has reduced the server side retrieval time on average by almost 1%. moreover  since the amount of query relaxation is controlled dynamically by the introspective learning heuristic it can reflect changes in the case-base due to the addition  or removal  of cases. 
1 	conclusions 
this implementation has shown how a distributed cbr system can be created on the web in a relatively short space of time  six months . implementing the system for web delivery made the system much more viable. just a few years ago we would have had to install the entire system  including the database of 1 records  on each of the sales staffs pcs. we would then have had to regularly send them updates to the database. this would have significantly increased the operational costs of the system. thus the web is an ideal medium for delivering intelligent support of all types. 

　the project was most certainly helped by having a ready made case library. although knowledge engineering work was still required in determining valid ways of relaxing the sql queries and creating similarity metrics. this was not surprising as the similarity measure is one of the most important knowledge containers of any cbr system  richter  1 . 
　xml is a useful communications protocol enabling large packets of formatted information to be exchanged thereby reducing network traffic. as a possible replacement to html it should help the web support intelligent applications  hayes  et al.  1; doyle  et al.  1 . however  we have demonstrated that implementing a simple cbr system is not difficult and is a viable alternative to purchasing a commercial tool. we will see cbr systems playing an increasingly important role in product selection and specification on-line  since similarity-based retrieval is very useful for internet e-commerce systems  wilke  etal.  1 . 
　on another level this implementation confirms the growing realisation that cbr is a methodology for problem solving that can use a wide variety of approaches i'kamp et al.  1; watson  1 . our system first uses sql retrieval to obtain a set of broadly similar cases and then uses nearest neighbour retrieval to rank those cases. further work is planned to investigate the possibility of providing support or possibly automating some aspects of case adaptation. 
