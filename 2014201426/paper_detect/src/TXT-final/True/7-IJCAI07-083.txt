
in the past years a lot of research effort has been put into finding tractable subsets of spatial and temporal calculi. it has been shown empirically that large tractable subsets of these calculi not only provide efficient algorithms for reasoning problems that can be expressedwith relations containedin the tractable subsets  but also surprisingly efficient solutions to the general  np-hard reasoning problems of the full calculi. an important step in this direction was the refinement algorithm which provides a heuristic for proving tractability of given subsets of relations. in this paper we extend the refinement algorithm and present a procedure which identifies large tractable subsets of spatial and temporal calculi automatically without any manual intervention and without the need for additional np-hardness proofs. while we can only guarantee tractability of the resulting sets  our experiments show that for rcc1 and the interval algebra  our procedure automatically identifies all maximal tractable subsets. using our procedure  other researchers and practitioners can automatically develop efficient reasoning algorithms for their spatial or temporal calculi without any theoretical knowledge about how to formally analyse these calculi.
1 introduction
dealing with spatial and temporal information is an essential part of any intelligent system and of our everyday lives. in the area of qualitative spatial and temporal representation and reasoning  information is represented in terms of qualitative relationships between spatial or temporal entities  such as  a is left of b  or  c occurs during d . it is distinguished between different aspects of space and time  such as direction  topology  distance  size/duration  or shape. for all these aspects  qualitative relationships can then be defined on a level of granularity that suits a given application.
﹛when developing a qualitative spatial or temporal calculus  one has to select the domain of entities that are being described. this could be points in a d-dimensional space  intervals or line segments  or extended spatial regions. the set of spatial or temporal entities is usually infinite. the next step is to define a pairwise disjoint and jointly exhaustive set of base relations b  we assume in the following binary relations   i.e.  between any two entities of our domain  exactly one of the base relations holds. the best known calculi are the rcc1 calculus  randell et al.  1  which consists of eight topological base relations for extended spatial regions and the interval algebra  allen  1  which consists of 1 base relations for intervals. many other calculi are defined in the literature for different entities  aspects and granularities.
﹛knowledge about the relationships between given entities can be represented in the form of constraints xry where x and y are variables over the domain of entities and r is a relation of the full set of relations 1b. the powerset of the base relations is used in order to be able to express indefinite information in cases where the exact relationship is unknown. given a set of such constraints we can then formulate different reasoning problems such as deriving unknown relations  eliminating impossible base relations from indefinite relations  computing the minimal representation  or checking the consistency of the given set of constraints. since most reasoning problems can be polynomially reduced to the consistency problem  this is considered to be the most important reasoning problem. the theoretical properties of the consistency problem depend on the chosen set of relations and the chosen domain. while the consistency problem is usually np-hard if all relations of 1b are permitted  for many calculi it is tractable when only the base relations b are used. these two extremes in the complexity of deciding consistency have led to a considerable research effort in the past 1 years to identify larger tractable subsets of a given set of relations 1b or even maximal tractable subsets which mark the boundary between tractable and np-hard subsets of 1b.
﹛the significance of having large tractable subsets is enourmous as it not only allows tractable reasoning in cases where the given information is restricted to relations of a tractable subset  but mainly because it considerably speeds up the time for deciding np-hard instances of the consistency problem. in emprirical studies  renz and nebel  1  it has been shown that almost all instances of the np-hard consistency problem for rcc1  even those instances in the phase transition  which are commonly considered to be the hardest instances  could be solved surprisingly fast by combining different heuristics based on the maximal tractable subsets of rcc1. similar results were found for the interval algebra  nebel  1 . the reasoning algorithms of these studies can be used for any spatial or temporal calculus provided that tractable subsets are known which contain all base relations. therefore  tractable subsets are essential for efficient solutions to the spatial and temporal reasoning problems  which in turn is a requirement for applications of these calculi.
﹛identifying tractable subsets is a very hard problem  in particular when spatial entities like extended spatial regions are involved which cannot be easily represented. however  due to the similar structure of the consistency problem over spatial and temporal relations-they are all based on a set of base relations and the same set of operators-it was possible to develop a general method that can be applied to all sets of relations and which allows to prove tractability of a given subset simply by running an algorithm  renz  1 . the so-called refinement method requires as input two sets of relations s and t   s is the set that is being tested for tractability and t is a set for which it is known that a-closure decides consistency. the refinement method further needs a refinement strategy  which is a mapping of relations s ﹋ s to relations t ﹋ t for which t is a refinement of s  i.e  t   s. since there are 1|b| different subsets for a given set of base relations b  we cannot apply the refinement method to all subsets  but can only run it for a small number of candidate sets. one way of identifying these candidate sets is to make a number of nphardness proofs in order to identify relations that make the consistency problem np-hard. these relations can be used to restrict the number of candidate sets for tractable subsets. further  we have to find a refinement strategy for each candidate set to a corresponding set t . due to the large amount of existing theoretical analysis on rcc1 and the interval algebra  e.g.  a large number of np-hard relations was known  it was possible to apply the refinement method to these two calculi and to identify large tractable subsets. but what if we have a calculus where no theoretical results are yet available 
﹛in this paper  we extend the refinement method and present a general procedure by which large tractable subsets of arbitrary spatial and temporal calculi can be identified fully automatically without the need for any manual interaction. this procedure will return one or more tractable subsets of a given spatial or temporalcalculus. while we cannot guaranteemaximality of the resulting tractable subsets  the procedure identifies all maximal tractable subsets of rcc1 and the interval algebra. but even if the resulting tractable subsets are not maximal  they can still give us efficient solutions to the nphard consistency problem if they are used as split sets in renz and nebel's  reasoning algorithms.
﹛the paper is structured as follows. in section 1 we give an introduction to spatial and temporal reasoning and to the refinement method. in section 1 we describe our procedure  in section 1 we apply it to rcc1 and the interval algebra and compare the output of the procedure to the known results. finally  in section 1 we discuss our results.
1 background
1 qualitative spatial and temporal reasoning
a qualitative spatial or temporal calculus  ligozat and renz  1  consists of a domain d of spatial or temporal entities which is usually infinite and a set of base relations b which partitions d ℅d into jointly exhaustive and pairwise disjoint relations  i.e.  between any two entities of d exactly one base relation holds. since the domains are infinite  we do not work on the tuples contained in the relations but only manipulate the relation symbols. we have different operators for doing so  union  ﹍   intersection  ﹎   converse    composition     and weak composition    of relations. composition is defined as r s = { a c | b. a b  ﹋ r and  b c  ﹋ s}. since we cannot deal with the tuples contained in the relations  we can in many cases only use weak composition which is defined as. the relations used by a spatial and temporal calculus are those contained in the powerset 1b of the base relations. the consistency problem cspsat s  for spatial and temporal calculi  where s is a subset of 1b is defined as follows:
instance: a set v of n variables over a domain d and a set 成 of constraints xry where r ﹋ s   1b and x y ﹋ v.
question: is there an instantiation of all n variables in 成 with values from d which satisfies all constraints in 成 
the consistency problem is in general an np-hard problem  but if a subset t of 1b is known for which the consistency problem can be solved in polynomial time  a so-called tractable subset  then the consistency problem can be solved by splitting 成 into sets of constraints 成 such that for every constraint xry ﹋ 成 there is a constraintwhere r is a refinement of r  i.e.   and by backtracking over all possible sets 成  nebel  1 .
   a local consistency algorithm for approximating the consistency problem is the algebraic closure algorithm  or aclosure algorithm  renz and ligozat  1 . it successively makes every tripleof variables in 成 a-closed by applying the following operation until a fixpoint occurs:  where xsz and zty ﹋ 成.
if a fixpoint occurs  成 is called algebraically closed or aclosed. if the empty relation occurs during this process  成 is inconsistent. in many cases a-closure decides consistency of cspsat b . this will be a requirement for applying our methods. in the following we say that a set of relations s is tractable/np-hard if cspsat s  is tractable/nphard. similar  a relation r is said to be tractable/np-hard  if cspsat b ﹍ {r}  is tractable/np-hard.
1 the refinement method
the refinement method  renz  1  is a general method for proving tractability of cspsat s  for given sets s   1b. it requires a subset t of 1b for which a-closure is already known to decide cspsat t  . then the method checks whether it is possible to refine every constraint involving a relation in s according to a given refinement strategy to a constraint involving a relation in t without changing consistency. it is based on the following definition.
definition 1  reduction by refinement  let s t   1b. s can be reduced by refinement to t   if the two conditions are satisfied:
1. for every s ﹋ s there is a ts ﹋ t with ts   s  algorithm: check-refinements input: a set s and a refinement matrix m of s. output: fail if refinements in m can make a-closed triples of constraints over s inconsistent; succeed otherwise.
1. changes ↘ true
1. while changes do
1. oldm	m
1.algebraically closed triple
1. t =  r1 r1 r1  of relations over s do
1. for every refinement
1. with	  1   1  =	  1   1  =
1. do
1. lgebraic-closure
1. if contains the empty
1. relation then return fail
1. else do
1.   1   1  ↘	 	  1   1  ↘
1. if m = oldm then changes ↘ false
1. return succeed
figure 1: algorithm check-refinements  renz  1 
1. every a-closed set 成 of constraints over s can be refined to a set 成 of constraints over t by replacing xisxj ﹋
成 with  such that enforcing aclosure to 成 does not result in the empty relation.
it is clear that if a-closure decides cspsat t   for a set t   1b  and s can be reduced by refinement to t   then a-closure decides cspsat s . therefore  it is sufficient for proving tractability of cspsat s  to show that s can be reduced by refinement to a set t for which a-closure decides cspsat t  . this can be shown by the refinement algorithm  renz  1 which uses a refinementmatrix that manages the different refinements and which initially contains the refinement strategy for every relation s ﹋ s to a relation t ﹋ t .
definition 1  refinement matrix 
a refinement matrix m of s has |s| ℅ 1|b| boolean entries such that for s ﹋ s  r ﹋ 1b  m s  r  = true only if r   s.
﹛the algorithm check-refinements  see figure 1  takes as input a set of relations s and a refinement matrix m of s. this algorithm computes all possible a-closed triples of relations r1 r1 r1 of s  line 1  and enforces a-closure to every refinement  for which 
= true for all i j ﹋ {1 1} i   j  lines 1 .	if one of these refinements results in the empty relation  the algorithm returns fail.	otherwise  the resulting relations  are added to m by setting 
true for all i j ﹋ {1 1} i   j  lines 1 . this is repeated until m has reached a fixpoint  i.e.  enforcing aclosure on any possible refinement does not result in new relations anymore. if no inconsistency is detected in this process  the algorithm returns succeed. a similar algorithm  get-refinements  returns the revised refinement matrix
m if check-refinements returns succeed. if check-
refinements returns succeed  we have pre-computed all possible refinements of every a-closed triple of variables as given in the refinement matrix m. thus  applying these refinements to an a-closed set of constraints can never result in an inconsistency when enforcing a-closure.
so if a suitable refinement strategy can be found  then
check-refinements can be used to immediately verify that reasoning over a given set of relations is tractable.
corollary 1   renz  1   let s t   1b be two sets such that a-closure decides cspsat t    and let m be a refinement matrix of s. suppose get-refinements s  m  re-
.	if for every s ﹋ s there is a ts ﹋ t with
  then a-closure decides cspsat s .
1 a general procedure for identifying tractable subsets
in this section we present a procedure for automatically identifying large tractable subsets of a spatial or temporal calculus. we assume that  1  we are given a set of base relations b  that  1  the weak compositions and the converses of the base relations are known  and also that  1  a-closure decides consistency for cspsat b . a consequence of condition  1  is that the closure s of a set s   1b under intersection  converse and weak composition has the same complexity as  renz and ligozat  1 . in particular  it follows that b is tractable. we further need the following lemma:
lemma 1 let s   1b. if a-closure decides cspsat s   then a-closure also decides cspsat
proof sketch. each constraint xry of 成 over s is replaced with an equivalent set of constraints 成xy over over s is the union of all 成xy and is equivalent to 成. applying aclosure to 成xy leads to xry  hence applying a-closure to 成 leads to the same result as applying it to 成. 
note that condition  1  is not actually a strict condition. our procedure can also be applied if this is not yet known. however  the results of our procedure  i.e.  tractability of the resulting sets  is only guaranteed if condition  1  is satisfied.
1 identifying tractable relations
our procedure consists of three different steps which we will describe separately. the first step is to identify single tractable relations  i.e.  relations which give a tractable subset of 1b when combined with the base relations. during this step we will also obtain relations which are potentially nphard  i.e.  single relations that might lead to an np-hard set of relations when combined with the base relations.
﹛for this we will test every single relation which is not contained in b and see whether it can be refined to relations of b. for every relation  we first compute the closure of b ﹍ {r} and apply the refinement algorithm to every possible refinement of r which is contained in b. the algorithm is given in figure 1 and consists of two parts  check-singlerefinement  c-s-r  which checks all refinements for a single relation r that is added to an existing set of relations
t   and find-tractable-singles  f-t-s  which calls c-
s-r for all relations not contained in b. even though the closure ofwill likely contain more relations  we only initialise the refinement matrix in c-s-r with a refinement for r. this refinement will propagate to the other relations as they can all be decomposed into relations of.
﹛algorithm c-s-r has three different outcomes for a relation r and a set t   succeed  fail  and unknown.
succeed means that there is an initial refinement of r to such that check-refinements computes an updated refinement matrix by which all relations of the closure of t ﹍ {r} can be refined to a relation of t without changing consistency. if this is the case  and a-closure decides cspsat t    then a-closure also decides consistency for the closure of t ﹍ {r}. this is an immediate consequence of corollary 1. if all possible refinements of r to relations of t fail  c-s-r returns fail. in this case the closure of t ﹍ {r} cannot be refined to t and all attempts to refine r lead to an inconsistency. this does not say anything about whether adding r to t leads to an np-hard set or not. but it means that tractability for this set cannot be proven using the refinement method and that there is some likelihood that the resulting set is np-hard. a third possible outcome of c-s-r is unknown  which means that there is a refinement ofwhich does not result in an inconsistency  but which also does not lead to the refinement of all relations of the closure of t ﹍ {r} to relations of t . increasing t by some relations might lead to a successful refinement of r  so we cannot yet conclude if r leads to a tractable set or not.
﹛f-t-s calls c-s-r for the different relations not contained in b while keeping track of their outcome. if a relation r returns succeed and therefore leads to a tractable subset  then all relations in the closure of b ﹍ {r} also lead to a tractable subset and don't have to be tested using c-s-r. we conclude this step with the following lemma.
lemma 1 let t	and h be the	result	of	f-t-s b .
if a-closure decides cspsat b   then it also decides cspsat b ﹍ {t}  for all t ﹋ t .
1 identifying candidates for tractable subsets
using the algorithm specified in the previous section  we can identify tractable relations  but we don't know yet how they can be combined to form large tractable subsets. it could be that the whole set t forms a tractable subset  but it could also be that some of the relations in t lead to np-hardness when combined with each other. one possibility to find large tractable subsets would be to test all subsets of t using the refinement method  but there are obviously too many such sets and we do not know which refinement strategy might work. our next step will therefore be to find out which relations might lead to intractability when combined with each other. for this purpose we assume that any of the relations of the set h returned by f-t-s b  leads to intractability when combined with b. under this assumption  it is clear that any pair of relations of t that contains a relation of h in its closure cannot be contained in the same tractable subset and is therefore incompatible. this is done in lines 1 of find-
tractability-candidates  f-t-c  in figure 1.
﹛f-t-c computes all candidates for tractable subsets starting from the closure of the base relations and successively adding new tractable relations. each new relation is first tested if it is incompatible with any of the relations already contained in the candidate  line 1 . if it is not incompatible  then the closure with the current candidate is computed and algorithm: check-single-refinement  c-s-r  input: a single relation r ﹋ 1b  a tractable set t   1b for which t √ closure {t}  and a refinement matrix m.
output: succeed if the closure of {r} ﹍ t can be refined to t   fail if any refinement ofleads to an inconsistency  and unknown otherwise.
1. s ↘ closure {r} ﹍ t  ; good ↘ false
1. for every refinementdo
1.	
1. if check-refinements newm s  = succeed
1. thenget-refinements newm s 
1. if  i ﹋ s there is a
1. then return succeed
1. else good ↘ true
1. if good = true return unknown else return fail
algorithm: find-tractable-singles  f-t-s  input: a set of base relations b
output: a set t   1b of tractable relations and a set h   1b of potentially np-hard relations.
1. t ↘ closure b ; h =  
1.  i j ﹋ 1b: m i  j  ↘ true if i = j and false if
1. for every relationdo
1. result ↘ c-s-r r b m 
1. if result = succeed then t ↘ t ﹍ closure {r}﹍ b 
1. if result = fail then h ↘  h ﹍ {r} 
1. return t and h
figure 1: algorithms check-single-refinement and find-tractable-singles
tested whether the resulting set can be refined to the current candidate using the c-s-r algorithm  line 1 . if it doesn't return fail  then the new relation is added to the current candidate. the algorithm keeps track of all relations that cannot be added to the current candidate  lines 1 1 . if any of these relations is not yet contained in one of the candidates  then a new candidate must be generated which does contain this relation  line 1 . the new candidate will be tested in the next while loop of the algorithm. if all tractable relations are contained in at least one candidate  then it is still possible that there are more candidates  namely  if there is a pair of tractable relations which is not incompatible and which is not yet contained together in any of the candidates. the algorithm tests each pair of relations which is not yet contained in a candidate set  line 1  and tests whether the closure of both these relations with the base relations can be refined to the closure of one of the relations with the base relations  line 1 . if this is not possible and c-s-r returns fail  then this pair is added to the list of incompatible pairs  line 1 . if a pair is found which can be refined  then a new candidate is formed which contains the pair  line 1  and tested in the next loop of the algorithm. if all pairs are tested  then the algorithm returns all candidates for tractable subsets. all these candidates have in common that they do not contain any incompatible pair  they do not contain a potentially np-hard relation  and single refinements can be made without resulting in an inconsistency. what we do not know yet  is whether the whole candidate can be refined to a known tractable set.
algorithm: find-tractability-candidates  f-t-c 
input: a set of tractable relations t and a set of supposedly
np-hard relations h.	 note: cl = closure 
output: candidates for tractable subsets csi   1b
1. l ↘    set of incompatible pairs ; n ↘ 1; max ↘ 1
1. for all ta tb ﹋ t do
1. if	 
1. and false if
1. cand ↘b; newcand ↘b
1. while  true  do
1. nextrels ↘  ; newrel ↘  ; n++
1. for allcand do
1. if there is an r ﹋ cand such that
1. then nextrels ↘ nextrels ﹍{tj}; continue;
1. newcand ↘ cl cand ﹍{tj} 
1. if newcand
1. nextrels ↘ nextrels ﹍{tj}; continue;
1. if c-s-r tj  cand fail then
1. cand ↘ newcand
1. else nextrels ↘ nextrels ﹍{tj};
1. csn ↘ cand
1. newrel is any relation in  nextrels
1. if newrel 
1. cand ↘ cl b﹍ newrel ; newcand ↘ cand; max++
1. while max = n do 1. tk tj ﹋ t is a pair s.t.
1. and {tk tj} is not contained in any csi
1. if there is no such pair then return all csi
1. cand ↘ cl b ﹍ {tj} ; newcand ↘ cl cand ﹍{tk} 
1. if c-s-r tk  cand  m  = fail then
1. ; continue
1. cand ↘ newcand; max++
figure 1: algorithm find-tractability-candidates
1 testing the candidates
in this step we will prove tractability of the candidates we found in the previous section or identify tractable subsets of the candidates in case they are not tractable. we know that cspsat  is tractable and that a candidate set is tractable if it can be reduced by refinement to cspsat . but which refinement strategy can we use  we can extend tractability of cspsat  to a larger set by adding one of the tractable relations and computing its closure. for the next relation to be added  it is sufficient to refine it to the larger tractable subset we obtained in the step before. if a new relation cannot be refined  i.e.  if c-s-r returns fail we know that we cannot add it to the current tractable subset. if c-s-r returns unknown  we will try to add a different relation instead and test this relation again at a later stage.
this is very similar to what has been done in the algorithm
f-t-c except for the special treatment of the relations for which the interleaved c-s-r calls return unknown. if none of these calls  lines 1 and 1 in f-t-c  returned unknown for any of the relations that have been added to a candidate  then this candidate must be tractable and no further processing is required. if unknown occured while computing a candidate set  we have to use algorithm test-candidates of figure 1 which takes a candidate and successively tests for algorithm: test-candidates
input: candidates for tractable subsets csi of 1b
output: tractable subsets t si of 1b
1. for all csi do
1. queue
1. r s ﹋ 1 :	 r  s  ↘ true if r = s and false if r = s
1. for eachdo queue ↘ queue;
1. tractable ↘b;
1. loop ↘ 1; changes ↘ false;
1. while queuedo
1. take and delete the first pairfrom queue;
1. if  num   loop and changes = false  then break;
1. if  num   loop  then loop ↘ num; changes ↘ false;
1. if c-s-r r  tractable  m  = succeed then
1. tractable ↘ closure tractable ﹍{r} ;
1. delete all from queue where s ﹋ tractable;
1. changes ↘ true;
num+1 to the end of the queue;
1. t si ↘ tractable;
1. return t si for all i;
﹛﹛﹛﹛figure 1: algorithm test-candidates each relation contained in the candidate whether a refinement to the already known tractable subset is possible. if this is not possible for a relation  the same relation will be tested again at a later stage. in order to prove that this recursive computation indeed proves tractability  we introduce a new notion.
definition 1 given a set s   1b. the closure sequence c s;r1 ... rn  is a recursively defined subset of 1b:
1. c s;r  = closure s ﹍ {r} 
1. c s;r1 .. rn  = closure c s;r1 .. rn 1  ﹍ {rn} 
lemma 1 let t   1b. suppose t √ c b;r1 ... rn  and m is a refinement matrix where only the diagonal is true. if c-s-r ri c b;r1 ... ri 1  m  returns succeed for all 1 ≒ i ≒ n  then cspsat t   is tractable.
proof. if c-s-r ri c b;r1 ... ri 1  m  returns succeed  then si = c b;r1 ... ri  can be reduced by refinement to si 1 = c b;r1 ... ri 1  and  hence  cspsat si  is tractable if  is tractable.
since we know that cspsat b  can be decided by a-closure  tractability of cspsat t   follows by successively applying c-s-r to the corresponding closure sequence. 
the whole procedure is then a sequence of the three steps
 1  f-t-s   1  f-t-c  and  1  test-candidates. the input is a set of base relations together with its weak compositions  and the output is one or more tractable subsets. as a consequence of the previous lemmata  we obtain the main results.
theorem 1 given a set of base relations b such that aclosure decides cspsat b . for each t si   1b returned by our procedure  cspsat t si  is tractable.
﹛instead of using b as an input to our procedure  we can use any other set for which a-closure decides consistency.
theorem 1 if a-closure decides cspsat s   then any set obtained by applying our procedure to s can be reduced by refinement to s and is therefore tractable.
1 applying the new procedure
we implemented the procedure in c and used several optimisations such as identifying relations that have the same closure  or more space efficient data structures such as refinement arrays instead of refinement matrices  renz  1 . as a general heuristic for determining the order in which relations are processed we used the size of the closure. we applied the procedure to different spatial and temporal calculi with known maximal tractable subsets in order to test how close the outcome of our procedure is to the actual result.
﹛for rcc1  randell et al.  1   the known maximal tractable subset was found instantly. for rcc1  f-t-s resulted in 1 relations for h and 1 relations for t . remarkably  the relations of h correspond exactly to those relations that are known to be np-hard  renz  1 . for some relations c-s-r returned unknown  but all these relations were added to t as part of computing the closure of other relations for which c-s-r returned succeed. the second step  f-t-c returned three candidates for tractable subsets which actually correspond to the three maximal tractable subsets of rcc1 identified in  renz  1 . tractability of all three candidates could be shown using test-candidates. the whole procedure ran in less than ten minutes on a pentiumduo 1 ghz cpu with 1mb ram.
﹛for the interval algebra  f-t-s b  resulted in only 1 relations for t and a few relations for which c-s-r returned unknown. if we add any one of the unknown relations to b and use it as input to our procedure  then we obtain the known maximal tractable subset ord-horn  nebel and bu“rckert  1   but this does not prove tractability of ordhorn. however  we also obtain ord-horn if we use the pointisable subset p as input to our procedure. tractability of p follows immediately from tractability of the point algebra and a-closure decides cspsat p   ladkin and maddux  1   so this does give us a proof of tractability of ordhorn. this shows us that ord-horn cannot be reduced by refinement to the base relations but only to a subset of p. in all cases  our procedure terminated in less than one hour  which is quite remarkable given the size of the interval algebra. this could be because the interval algebra seems to have a fairly simple structure: 1 relations give 1b when closed with the base relations  1 relations give ord-horn  and for all 1 relations there are only 1 different closures.
1 discussion & conclusions
we developed a general procedure which automatically identifies large tractable subsets of a spatial or temporal calculus given only the base relations b and their weak compositions. the only requirementis that a-closuredecides consistencyfor b. we tested our procedure on rcc1 and the interval algebra and obtained all the known maximal tractable subsets in less than one hour. while the resulting sets are tractable  we cannot guarantee maximality in the general case as only sets are found which can be reduced by refinementto the input set. as seen in the case of the interval algebra  it can be better to identify tractable subsets of smaller calculi first and then use the results for determining input sets for larger calculi. in any case  the resulting tractable subsets should be enough to give a considerable speed up when solving instances of the nphard consistency problem. if it is unknown whether a-closure decides consistency for b  our procedure can still be applied and the resulting sets can still be used for obtaining considerably more efficient reasoning algorithms. if it turns out that the reasoning algorithms give a wrong result for at least one instance  then a-closure does not decide consistency for b.
﹛an interesting consequence of our results is that for all calculi which have the same weak compositions we obtain the same resulting sets  independent of their domain. further analysis of our procedure is necessary in order to get a clear understanding of the effect of the relations for which c-s-r returns unknown. by applying our procedureto other calculi we hope to be able to identify general criteria or heuristics of when relations can be reduced by refinement and when this is not possible. this might give us a measure of how close the resulting sets are to the actual maximal tractable subsets.
﹛one point worth discussing are the consequences of having such a procedure which automatically makes a theoretical analysis of a problem and automatically identifies efficient algorithms. it is certainly very desirable for people working in applications of spatial and temporal information. they only have to run our procedure and don't have to wait for years for some experts to make an analysis. on the other hand what happens to all the experts for doing a theoretical analysis  are they not needed anymore  will it not be worth a publication anymore to identify tractable subsets analytically if they can just as well be identified using our procedure  even with our procedure  it is still necessary to show that a-closure decides consistency for the base relations. showing this is a very hard problem as it is necessary to relate the relations to their semantics and to their domains. a heuristic for how to show this is given in  renz and ligozat  1 . also  our procedure does not guarantee maximality. so an accompanying theoretical analysis is still very useful and can give insight into why a problem is hard.
