 
the situation recognition system  to which this paper is devoted  receives as input a stream of time-stamped events; it performs recognition of instances of occurring situations  as they are developing  and it generates as output deduced events and actions to trigger. it is mainly a temporal reasoning system. it is predictive in the sense that it predicts forthcoming events relevant to its task  it focuses its attention on them and it maintains their temporal windows of relevance. its main functionality is to recognize efficiently complex temporal patterns on the fly  while they are taking place. this system has been tested for the surveillance of an environment by a multisensory perception machine; it is being applied to monitoring a complex dynamic system. 
1 	introduction 
we are interested in situations that arc not static states  but do correspond to evolutions of a changing environment. we understand a situation assessment system as one which has to maintain  through perception  a coherent interpretation of what is going on in a dynamic world. such a task arises in applications like environment surveillance or process monitoring. 
　our work was initially motivated by the former class of applications. more specifically  we developed it along with the design of an active multi-sensory perception machine  called skids  that has mobile and fixed cameras  laser range finders  optical barriers  and sonic detectors distributed over and surveying an indoor environment  grandjean1  
ghallab1 . a sensory stimulus  such as an optical barrier crossing  or a track detection  once interpreted  becomes an event. a set of events  occurring in some temporal pattern  may develop into a situation  complete or partial   which in turn can generate new events  can permit the focus of attention enabling the detection of forthcoming events  or can trigger alarms  messages  data logging or also other actions. 
   the proposed situation recognition system has been tested recently for monitoring dynamic systems. observed events are generated from raw data through simple signal processing. sucessfull results obtained on a reduced example  a regulated 
1 	automated reasoning 
tank  lead us to start a more ambitious application for the 
surveillance of a gas turbine. 
   initially  the programmer provides the system with a set of situation models  or scenarii  of normal and abnormal evolutions to be surveyed. each situation model is a set of event patterns and temporal constraints between them and with respect to the context. if some observed events match the event patterns  and if their times of occurrence meet the specified constraints  then an instance of this situation occurs. a situation model may also specify events to be generated and actions to be triggered as a result of the situation occurrence. deduced events can in turn be taken as input by other situations  hence enabling a recursive chaining. 
   the situation recognition system receives as input a stream of time-stamped events  not necessarily sorted according to their occurrence dates  there may be variable delays for the interpretation of sensory stimulus . it performs recognition of instances of occurring situations  as they arc developing and it generates as output deduced events and triggered actions. it is mainly a temporal reasoning system. it is predictive in the sense that it predicts forthcoming events that are relevant to partial instances of situations currently taking place; it focuses on them and it maintains their temporal windows of relevance. however  as it is today  it does not perform neither temporal projection  mcdermott1  dean1   nor persistence maintenance  dean1  materne1    through domain axioms and models of change. its main functionality is to be able to recognize efficiently complex temporal patterns on the fly  while they are taking place. 
　the ai literature reports on several works with concerns similar to ours. there is the plan recognition problem 
  w i l e n s k y 1. k a u t z 1     where one is interested in recognizing that a sequence of actions makes some complex plan. however in such a problem temporal reasoning docs not arise as the main issue. there is also the event calculus   k o w a l s k i 1   borillo1   or some variant of it  borchardt1   which is relevant to our work. but this calculus is mainly interested in describing relations between events to enable a question-answering system to relate them; it does not address the recognition issue. 
more akin to our approach is the work of  kumar1 . 
there  a state-based model of time is taken. an extension of the interval calculus is proposed to relate intervals for which only initial points are known. events are intervals; they are linked in this extended calculus to form situations which are recognized by some evaluation process; no algorithm is given. the main differences with the approach proposed here are: 
     - at the knowledge representation level: ours is richer and more realistic  it takes into account the context and distinguishes between occurrence and reception dates of events  it also permits numerical temporal constraints; 
     - and mainly at the recognition level and at the algorithms involved in it  since we are proposing efficient online processes suitable for demanding applications. 
   section ii describes the proposed knowledge and temporal representation and defines situations as models of temporally constrained events and accompanying actions. then we will develop in section iii the recognition method and main algorithms. we will conclude with a presentation of the experiments ran on the actual implementation and an experimental model of the average complexity that exhibits good performances. 
1 	representation 
1 	time 
for algorithmic complexity reasons our time-map manager  called i x t e t  ghallab1   relies on time-points as elementary primitives. we consider time as a linearly ordered discrete set of instants  whose resolution is sufficient for the dynamics of the environment  i.e.  any change can be adequately represented as taking place at some instant of the set . intervals and relations of the restricted interval algebra  vilain1  allen1  can also be representated at the user level in i x t e t   but they are translated internally into timepoint constraints  we'll not develop that issue here . we can handle the usual symbolic constraints of the time-point algebra  i.e. before  simultaneous  after and their disjunctions   as well as numerical constraints. the later are expressed as pairs of real numbers corresponding to lower and upper bounds on the temporal distance between two points el and e1. 
we use the following notations: 
 propagation  
 conjunction  
　　 translation  for complexity reasons  we do not allow disjunctions of numerical constraints  since the constraint satisfaction problem becomes np-complete  dechter1 j. 
1 	assertions and events 
we rely on a propositional reified logic formalism 
 shoham1   where a set d of propositions is temporally qualified by predicates such as true  false  on and off at each time point t and for each proposition p of d  we have either 
true  we consider assertions on the truth of a proposition p over some period of time: 

we define an event pattern e as a change in the truth value of a proposition. an event e is a time stamped instance of pattern e  it has no duration  it is expressed by the predicates on or off 

we suppose that the event stream is consistent  i.e.  for each proposition  there is necessarily an off event between two successive on events  and respectively for on . this assumption is solely with respect to the occurrence dates of events  it does not concern the stream as received by the system. 
1 	processing delays of events 
an event e of pattern  comes with a variable delay  due to sensor processing and data transmission. we suppose that this delay is bounded by an interval  given by the user. if d e  is the occurrence date of event e and r e  its reception date  we always have: 
   to simplify the notation in following sections  we may refer to e both  as the name of the event  and as its occurrence date d e . 
1 	situations 
a situation model  is a set of event patterns and a set of constraints. it may involve also the description of some context that is required to hold independently of when it became true. for example  we want to survey the work of a robot which must enter a room  load a machine and then exit. as soon as the machine is loaded  it can start its work. the machine must be stopped before loading it and a safety condition is necessary for all actions of the robot in the room. 
this situation model is described as follows: 

a network representing this situation is the following: 

	dousson  gaborit  and ghallab 	1 

　the system receives and processes only events. since we assume a consistent stream of events  assertions are managed quite naturally through occurrences and non-occurrences of events. to process the assertion the system checks that there has been an event on p t  with and such that no event occurs with t' i n t o t o initialize the system  a set of events corresponding to the state of the world must be given with an occurrence date equal of so  the previous network becomes the following. 
in their respecting windows  left figure . reception of event e1 is propagated to the windows constraining the remaining events  right figure . recognition of this instance proceeds accordingly. 
if  on some alternate scenario  after receiving does not occur at time 1'  or if safetycondition becomes false before occurrence time of  the corresponding instance will not meet the specified constraints and will be killed. 
1 	preprocessing 


   the user can also specify some actions to be performed while a situation instance is being recognized. we may generate a new event with an occurrence date defined relatively to those of the instance events. we may display messages  or run a specified user procedure  external action like in our example . this is a very useful for a focus of attention functionnality of the surveillance system. the generation of a new event allows to relate different situations  enabling modular programming. 
1 	processing 
a compilation stage is useful for testing the consistency of constraints in a situation model and for coding it into efficient data structures for the recognition process. this mainly consists in propagating constraints in the event network. at this time  propagations are local to each situation model. 
for each situation model  we propagate constraints with a 
 path consistency  algorithm derived from  mackworth  1 . the result of this algorithm is  for each situation model  the least constrained complete graph equivalent to the user constraints. to provide a useful feedback for situation debugging  we use an incremental algorithm which can detect inconsistent constraints. 
1 	recognition delay and ending events. 
ending events are the latest possible events of a situation according to their occurrence dates  i.e. leaf nodes in the corresponding network . terminating events of a situation model are events which can be received the latest by an instance s of before its recognition is completed. to determine these events  the compiler takes into account reception dates and possible delays. 

1 	automated reasoning 

instance s  we define an interval called window of relevance w ei  which contains all the possible occurrence dates of the possibly forthcoming event ei. 
     time lines: for each situation instance  we process two time lines. 
- the shifiline of an instance s is the latest date for the nearest non-occurred event 
 according to delay 
- the non-occurrence line of an instance is the latest date for ensuring that the nearest assertion holds. 
     recognition forecast we can compute the recognition interval for each situation instance. the user can know when a recognition is expected and which events are required to achieve it. 
     tree of instances: for each situation model  our system manages a tree of current instances. when a situation is recognized or killed  after a constraint violation   the instance is removed from this tree  wc say that the instance dies . 
1 	evolution of a situation instance 
there is basically two ways of modifying a situation instance: a new event can arrive  and can be integrated into an instance or violate a constraint for a protected assertion  or time goes 
without anything happening and  perhaps  makes some event deadlines to be violated or some assertion constraints obsolete. the system manages the external real time by receiving clock updates. let now be the value of this clock. so when an event is received  we always have the reception date r e  = now. 
1.1 matching an event occurrence 
when event e matching pattern ek occurs  either : does not meet temporal constraints on 
the expected event ck of s  or  e meets the constraints   is reduced 
to  c  e . 
more generally  if the window of relevance of some forthcoming event ek in s has been further constrained  that is w e k   reduced   we are sure that this constraint remains consistent with what is already known. we need however to propagate it to other expected events  that in turn are further constrained. 
　this produces a new set of non-empty and consistent w ei . it is important to notice that we never need to verify the consistency of events that fall into their windows of relevance. 
   in fact  before this propagation  the original situation instance must be duplicated and only the copy is updated by matching e and ek and by processing propagate ek s . 
duplication is needed to guaranty the recognition of a 
	dousson  gaborit  and ghallab 	1 


1 	restricting duplication of instances 
we saw that a situation instance can be duplicated several times during its recognition. this is the main source of complexity and we must limit it. duration bounds on a situation is the first way to reduce duplication. while compiling  we can verify that every situation has a maximal duration limit. however  even with this limitation  situation instances could be duplicated in large number.s. 
   furthermore  there may be situations that cannot have two successful instances overlapping in time or sharing a common event instance; the user can also be interested in recognizing just one instance at a time. both cases  when a situation instance is recognized  all its pending instances must be removed. 
　a third way for restricting duplication is to postpone the propagation of some events. there would be two event classes: the completely forecast ones  for which all constraints are propagated  and the partially forecast events. if an event is completely forecast and if d e  is in w e   we are sure of the time consistency of e. but a partially forecast event needs more than this simple verification: one has to check through constraint propagation that this event meets the pending constraints. therefore event matching will be more expensive. 
   furthermore  postponing constraint propagation can be expensive: if one does not duplicate a situation when a new event is instantiated  one must keep a history of each possible matching event in order to be able to backtrack when this situation is ended  killed or recognized . we know that backtracking can be very expensive and unacceptable for an on-line system. this is why all events are completely forecast in our current system and there is no constraint postponing. 
1 	variables in event patterns and situation models 
the representation allowed by our system is actually more general than what has been described up to now. it is possible to specify event patterns with variables. event instances are ground terms. the matching procedure is very simple since the duplication of situation instances enables a direct checking of the consistency of variable bindings. 
   however our representation is not a full first order formalism  since we do not allow free variables in protected assertions. indeed constraints on such assertions cannot be processed by simple propagation and forecasting; they require a costly search  not compatible with the complexity we aimed at. 
1 	complexity 
each elementary event propagation or clock propagation runs in 1   m    where m is the number of pending events in a situation instance; m   n the total number of distinct events in the situation model. 
   for k instances of situation models with n events each  the proposed algorithms process a new event  or a clock updating  with a complexity in 1 kn 1  . k is larger than m  the number of situation models. if k is kept of the same order than m  the overall complexity is quite manageable. 
1 	results and conclusion 
the first scenario on which this recognition process was tested describes the surveillance of a mobile robot  bringing and taking objects that are loaded and unloaded by a human operator. the scene takes place into a laboratory environment with 1 rooms separated by 1 optical barriers and surveyed by four cameras. generated events are optical barriers signals  1 event types  and motion detected by the cameras  1 event types for the robot and 1 for the operator . this scenario was described by 1 situation models  hierarchically organised. the normal cycle is surveyed: if an incidence occurs  the system detects when and where it happens. live demonstrations of this scenario and others similar were run. compared to the others reasoning system needed in the 
skids perception machine  the situation recognition system is fast enough and is not a limiting factor for reactivity: the average response time for an event is of the order of 1ms. 
   since these demonstrations  a large number of other experiments were run on different sets of situations  up to one hundred situation models . our goal was to characterize the practical  bandwidth  of the proposed algorithms and implementation: up to which frequency of events the system is able to follow-up without accumulating delays. 
significant overlapping in terms of common event patterns  a 
1 	automated reasoning 　the following figure summarizes the system performances for a set of 1 situation models  each involving about 1 event patterns and as many constraints  1 or 1 of which referring to the context. those were abstract but fairly complex situation models  programmed for the purpose of testing different schemes of temporal constraint lattices  and having a total of 1 event patterns were used . we generated 1 scenarios  each corresponding to a sequence of 1 events meaningfull with respect to temporal constraints of situation models. for each scenario  we ran the recognition system and recorded the processing time for each event. from that  we computed the corresponding response time to an event  as a function of a variable frequency of events  taking into account cumulated delays from one event to the next and the time lost in waiting for an event. 

dynamic environment. we arc working toward a confirmation of these results on more complex industrial applications for alarm filtering in an oil plant and for process monitoring of a 
gas turbine. 
in conclusion  this paper describes an innovative situation recognition system  based on temporal constraint propagation. the proposed representation has been chosen such as to keep the complexity reasonable for on-line processing  while maintaining a sufficient expressiveness for practical applications. the algorithms rely on extended preprocessing and carefully designed data structures  they exhibit good performances  compatible with demanding applications. overall  the proposed system provides interesting functionalities such as deduction of events on the basis of temporal evolutions recognized on the fly  forecast of expected events and focus of attention. 
our system has been tested in live experiments of the 
skids perception machine. to our knowledge it is the first time that a perception system integrates explicitly temporal reasonning. 
　our next goal is to extend the proposed situation recognition system into a situation assessment system. for that several additional functionalities are required: 
     persistence maintenance of database through domain axioms and models of change to allow a complete deduction of non-observable events; notice that this is partially handled by our system through the possible generation of an event when a situation is recognized; 
     sensory data interpretation is necessarily hypothetical  events and situations should be as well. a situation assessment system must be able to backtrack and manage uncertainty  as well as hypothetical reasoning. 
	dousson  gaborit  and ghallab 	1 
   furthermore we plan to fully investigate the terms of the trade-off beteen event forecasting and propagation postponing  and solve it dynamically and opportunistically. 
acknowledgments 
this work benefited from the support of the eec under esprit projects skids and tiger. 
   christophe dousson is being supported by a scholarship from shell research. 
   the authors are gratefull to their co-workers who helped this work  specially a. mounir-alaoui who implemented i x t e t kernel  mounir1  and the first version of the situation recognition system. 
