gstp: a temporal reasoning system 
supporting multi-granularity temporal constraints* 
claudio bettini  sergio mascetti  vincenzo pupiilo universita di milano  italy 

1 introduction 
the gstp system has been developed at the university of milan with the objective of providing universal access to the implementation of a set of algorithms for multi-granularity temporal constraint satisfaction. the many formalisms and algorithms proposed in the literature for temporal constraint satisfaction problems  tcsp  have essentially ignored the subtleties involved in the presence of multiple time granularities in the temporal constraints. examples of simple constraints specified in terms of a time granularity are the following:  package shipment must occur the next business day after check clearance  and  package delivery should occur during working hours . more technically  the gstp system allows the user to specify binary constraints of the form y - x €  m n g  where m and n are the minimum and maximum values of the distance between x and y in terms of granularity g. variables take values in the positive integers  and unary constraints can be applied on their domains. this can be considered the extension of stp  dechter et al. 1  to multiple and arbitrary granularities. 
¡¡a first issue in the representation and processing of these constraints is the need for a clear semantics for time granularities. business days  for example  may really have different meanings in different countries or even in different companies. in this respect gstp adopts a formalism  first introduced in  wang et al. 1; bettini et al. 1   which can model arbitrary user-defined time granularities and has a clear set-theoretic semantics. in order to guarantee a finite representation  granularities in gstp are limited to those that can be defined in terms of periodic sets. hours  days  weeks  business days  business weeks  fiscal years  and academic semesters are common examples. 
¡¡a second issue is related to the difficulty to reduce a network of constraints given in terms of different granularities into an equivalent one with all constraints in terms of the same granularity  so that some of the standard algorithms for csp  like consistency checking through arc- or path-consistency  bessiere 1; dechter et al. 1   could be successfully applied. indeed  any conversion necessarily introduces an approximation; for example  the above constraint imposing delivery to start the next business day may be translated in 
   *this work has been partially supported by italian miur  firb  web-minds  project . 
terms of hours with a minimum of 1 hour and a maximum of 1 hours.  the number 1 takes into account a check clearance at the beginning of a friday and a shipment at the end of next monday according to the constraint.  however  if the check is cleared on monday  the new constraint would allow a shipment on thursday which is clearly a violation of the original constraint. approximate conversion algorithms are extensively discussed in  bettini et al. 1 . we have shown that any consistency algorithm adopting these conversions as the only tool to reduce the problem to a standard csp is inevitably incomplete  and have proposed a different algorithm  called acg  which has been proved to be complete  bettini et al.1 . 
¡¡gstp  in addition to implementing the reasoning algorithms  assists the user in the definition of constraint networks  in their submission to a remote processing service and in the analysis of the output. 
1 the algorithms 
the most interesting part of the system is perhaps the implementation of the acg algorithm which has been recently proposed in  bettini et a/.1 . it is based on arc-consistency  and it is essentially an extension of the ac-1 algorithm  mackworth et al. 1  to deal with possibly infinite  but periodic  domains and with constraints in terms of multiple periodic granularities. this extension is not trivial since it involves the algebraic manipulation of the mathematical characterization of granularities. acg also derives the minimal solution for the constraint network. 
repeat 
1. conversion+pc 
1. acg 
1. rcfincedgcsfromnodes   
until no change is observed return inconsistent or newnetwork+solution 
figure 1: the main loop of the constraint solver 
¡¡despite several optimizations have been introduced in the implementation  acg greatly benefits from any preprocessing phase that can refine some of the original constraints. this is the main reason why gstp integrates with acg an approximate algorithm  proposed in  bettini et al. 1   and based 

intelligent systems demonstrations 	1 

on the conversion of constraints in different granularities followed by path consistency. the interaction of the two algorithms is also used to further refine the original constraints. 
   fig. 1 shows the three main steps behind the gstp constraint solver. in step 1  the original network is decomposed in as many networks as are the granularities appearing in the constraints; each network has the explicit constraints given in terms of one granularity as well as constraints in the same granularity obtained by conversion from others on the same edge  but in terms of different granularities. then  standard path consistency is applied to each network. the resulting network most likely has refined constraints with respect to the original one. any inconsistency captured by this processing has the effect of terminating the constraint solver reporting the inconsistency status. however  if this is not the case  the network may still be inconsistent and it will go through acg  the complete consistency algorithm  step 1 . from the node domains returned by acg  it is possible to further refine some of the constraints  the function doing this job in step 1 is called refineedgesfromnodeso - the steps are repeated  since path consistency applied to the refined constraints may lead to some changes. our experiments show that after few iterations of the main loop a fixpoint is always reached. 
1 the gstp architecture 
fig. 1 shows the general architecture of the gstp system. 
there are three main modules: the constraint solver  the web service  which enables external access to the solver  and a user interface that can be used locally or remotely to design and analyze constraint networks. 

figure 1: the gstp architecture 
   the constraint solver is the c implementation of the algorithms described above  and it runs on a server machine. the web service defines  through a wsdl specification  the parameters that can be passed to the constraint solver  including the xml schema for the constraint network specification; it accepts connections through soap/http from client applications or other web services which require constraint processing  it invokes the solver after validating the parameters  and it passes back the results. the third module is a remote java-based user interface  which is extensively described in the system demo. it allows the user to easily edit constraint networks  to submit them to the constraint solver  and to analyze results. in particular  it is possible to have views in terms of specific granularities  to visualize implicit constraints  to browse descriptions of domains  and to obtain a network solution. fig. 1 shows a screenshot from the interface. 

figure 1: the user interface 
credits 
many people contributed to the implementation of the gstp system. r. de sibi  g. gabrielli  m. colombo  s. ruffini  and v. pupillo worked at the implementation of the temporal reasoning algorithms; s. gotta and s. mascetti worked at the graphical interface; c. cestana worked at the web service architecture. the theory underlying gstp is due to the authors of  bettini et a/.1 . s. wang gave valuable suggestions on implementation issues. c. bettini coordinated the system implementation and worked closely with all of the above. 
