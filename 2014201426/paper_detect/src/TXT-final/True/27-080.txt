 
we introduce a new approach to planning in 
strips-like domains based on constructing and analysing a compact structure we call a planning graph we describe a new planner  graphplan  that uses this paradigm graphplan always returns a shortest-possible partial-order plan  or states that no valid plan exists 
we provide empirical evidence in favor of this approach  showing that graphplan outperforms the total-order planner  prodigy  and the partial-order planner  ucpop  on a variety of interesting natural and artificial planning problems we also give empirical evidence that the plans produced by graphplan are quite sensible since searches made by this approach are fundamentally different from the searches of other common planning methods  they provide a new perspective on the planning problem 
1 	introduction 
in this paper we introduce a new planner  graphplan  which plans in strips-like domains the algorithm is based on a paradigm we call planning-graph analysis  pga  in this approach  a compact structure we call a planntng graph is explicitly created that is then explored in a search a planning graph is not a graph of 
 world-states   which of course could be huge  rather  planning graphs are closer in spirit to the psgs of  etzion  1  planning graphs are structures based on domain information  the goals and initial conditions of a problem  and an explicit notion of time planning 
    this research is sponsored in put by the wright laboratory  aeronantical systems center  air force materiel command  usaf  and the advanced research projects agency  arpa  under grant number f1-m1 the first author is also supported in part by nsf national young investigator grant ccr-1 and a sloan foundation research fellowship the second author is supported in part by nsf grant ccr-1 views and conclusions contained in this document are those of the authors and should not be interpreted as necessarily representing official policies or endorsements  either expressed or implied  of wright laboratory or the united states government 
1 	planning 
planning graph analysis* 
	merrick l 	furst 
school of computer science 
carnegie mellon university 
pittsburgh pa 1 mxfocs cmu edu 
graphs offer a convenient  efficient means of organizing and maintaining search information they do so in a way that is reminiscent of the efficient solutions to single-source shortest-paths and dynamic programming problems planning graph analysis appears to have significant practical value in solving planning problems even though the inherent complexity of stripslike planning  which is at least pspace-hard  is much greater than the complexity of shortest-paths or standard dynamic programming problems 
　graphplan combines aspects of both total-order and partial-order planners on the one hand  graphplan makes more commitments than traditional total-order planners on the other hand  the plans it generates are partially-ordered plans 
　the way in which graphplan  over-commits  is that when it considers an action  it considers it at a specific point in time for instance  it might consider placing the action 'move rocket 1 from london to paris' in a plan at exactly time-step 1 it may seem puzzling that an extra level of commitment would lead to a fast planner  especially given the success enjoved by least-commitment planners  mcallester and rosenblitt  1l  barrett and weld  1  weld  1  however  the extra level of commitment allows graphplan to store and manipulate valuable search information this enables it to rapidly determine when backtracking is needed 
　even though graphplan makes strong commitments  the plans it generates are partially-ordered plans for instance  in the rocket problem  figure 1   the plan that graphplan finds is of the form  in time-step 1  appropriately load all the objects into the rockets  in time-step 1 
move the rockets  and in time-step 1  unload the rockets   the semantics of such a plan is that the actions in a given time step may be performed in any desired order conceptually this is a kind of  parallel  plan  knoblock  
1  since one could imagine executing the actions in three time steps jf one had as many workers as needed to load and unload and fly the rockets 
　one valuable feature of our algorithmic that it guarantees it will find the shortest plan among those in which independent actions may take place at the same time empirically and subjectively these sorts of plans seem particularly sensible for example  in stuart russell's  flat-tire world   russell  1   the plan produced by 


	figure 1 	the rdcket domain 
graphplan opens the boot  trunk  in step 1  fetches all the tools and the spare tire in step 1  inflates the spare and loosens the nuts in step 1  and so forth until it finally closes the boot in step 1  see figure 1   
　another significant feature of our algorithm is that it is not particularly sensitive to the order of the goals in a planning task  unhke traditional approaches more discussion of this issue is given in section 1 
　in section 1 of this paper we present empirical results that demonstrate the effectiveness of graphplan on a va-
riety of interesting  natural  and artificial domains 
1 	definitions a n d n o t a t i o n 
planning graph analysis applies to strips-hke planning domains in these domains  operators do not create or destroy objects and time may be represented discretely because the operators all act as atomic actions specifically  by a planning problem  we mean 
  a strips domain  a set of operators   
  a set of objects  
  a set of propositions  literals  called the initial con-ditions  
  a set of problem goals which are propositions that are required to be true at the end of a plan 
　by an action  we mean a fully-instontiated operator for instance  the operator 'put  x into *y' may instantiate to the specific action r pnt object 1 i n t o container1' an action taken at time t adds to the world all the propositions which are among its addeffects and deletes all the propositions which are among its delete-effects it will be convenient to think of  doing nothing  to a proposition in a time step as a special kind of action we call a no-op or frame action 
1 valid plans and planning graphs 
we now define what we mean when we say a set of actions forms a valid plan in the pga framework  a valid plan for a planning problem consists of a set of actions and specified times in which each is to be carried out in a valid plan several actions may be specified to occur at a single time step as long as none of them deletes a precondition or add-effect of another 1 in a linear plan these independent parallel actions could be arranged in any order with exactly the same outcome it is legal to perform an action at time 1 if its preconditions are all in the initial conditions it is legal to perform an action at time t   1 if the plan makes all its preconditions true at time t because we have no-op actions that carry truth forward in time we may define a proposition to be true at time/ only if it is an add-effeet of some action taken at time t - 1 finally  a valid plan must make all the problem goals true at the final time step 
1 	p l a n n i n g g r a p h s 
a planning graph is similar to a valid plan  but without the requirement that the actions at a given time step be independent 
　more precisely  a planning graph is a directed  leveled graph1 with two kinds of nodes and three kinds of edges the levels alternate between proposition levels containing proposition nodes  each labeled with some proposition  and action levels containing action nodes  each labeled with some action  the first level of a planning graph is a proposition level and consists of one node for each proposition in the initial conditions the levels in a planning graph  from earliest to latest are propositions true at time 1  possible actions at time 1  propositions possibly true at time 1  possible actions at time 1  propositions possibly true at time 1  etc 
　edges in a planning graph explicitly represent relations between actions and propositions the action nodes in action-level are connected by  preconditionedges  to their preconditions in proposition level t  by  add-edges  to their add-effects in proposition-level i + 1  and by  delete-edges  to their delete-effects in proposition-level i + 1 
   knoblock  describes an interesting less restrictive notion in which several actions may occur at the same time even if one deletes an add-eflect of another  bo long as those add-effects are not important for reaching the goals 
　　1 a graph is called leveled if its nodes can be partitioned into disjoint tela l1  l1    l  inch that the edges only connect nodes in adjacent levels 
　　1  a length-two path from an action a at one level  through a proposition q at the next level  to an action b at the following level  is similar to a causal link a -  b in a partial-order planner 


figure 1 a planning graph for the rocket problem with one rociet a  two pieces of cargo a and b  a start location l and one destination p for simplicity  the  rocket  parameter has been removed from the actions delete edges are represented by dashed lines and no-ops are represented by dots 
　the conditions imposed on a planning graph are much weaker than those imposed on valid plans actions may exist at action-level i if all their preconditions exist at proposition-level i but there is no requirement of  independence   in particular  action-level i may legally contain all the possible actions whose preconditions all exist in proposition-level i a proposition may exist at proposition-level i + 1 if it is an add-effect of some action in action-level 1  even if it is also a delete-effect of some other action in action-level i  because we allow  no-op actions   every proposition that appears in proposition-level i may also appear in proposition-level : +1 an example of a planning graph is given in figure 
1 
　since the requirements on planning graphs are so weak  it is easy to create them la section 1 we describe how graphplan constructs planning graphs from domains and problems in particular  any planning graph with t action-levels that graphplan creates will have the following property 
if a valid plan exists using t or fewer time steps  then that plan exists as a subgraph of the planning graph 
　it is worth noting here that planning graphs are not overly large see theorem 1 
1 exclusion relations a m o n g p l a n n i n g g r a p h nodes 
an integral part of planning-graph analysis is noticing and propagating certain mutual exclusion relations among nodes two actions at a given action level in a planning graph are mutually exclusive if no valid plan could possibly contain both similarly  two propositions at a given proposition level are mutually exclusive if no valid plan could possibly make both true identifying mutual exclusion relationships can be of enormous help in reducing the search for a subgraph of a planning 
graph that might correspond to a valid plan 
　graphplan notices and records mutual exclusion relationships by propagating them through the planning graph using a few simple rules these rules do not guarantee to find all mutual exclusion relationships  but usu-
1 	planning 
ally find a large number of them 1 specifically  there are two ways in which actions a and 1 at a given action-level are marked by graphplan to be exclusive of each other 
 interference  if either of the actions deletes a precondition or add-effeet of the other  this is just the standard notion of  non independence  and depends only on the operator definitions   
 competing needs  if there is a precondition of action a and a precondition of action 1 that axe marked as mutually exclusive of each other in the previous 
proposition level 
　two propositions p and q in a proposition-level are marked as exclusive if all ways of creating proposition p are exclusive of all ways of creating proposition q specifically  they are marked as exclusive if each action a having an add-edge to proposition p is marked as exclusive of each action b having an add-edge to proposition q 
　for instance  in the rocket domain with 'rocketl at london' in the initial conditions  the actions 
 'move rocket 1 i r o n london to paris' and 'load alex into rocketl in london' at time 1 are exclusive because the first deletes the proposition 'rocketl at london' which is a precondition of the second the proposition 'rocxetl at london' and the proposition 'rocketl at paris' are exclusive at time 1 because all ways of generating the first  there is only one a no-op  are exclusive of all ways of generating the second  there is only one by moving  the actions 'load alex into rocketl in london' and 'load jason into rocketl in paris'  assuming we defined the initial conditions to have jason in paris  at time 1 are exclusive because they have competing needs  namely the propositions 
'rocketl at london' and  rocketl at paris' 
　note that the competing needs notion and the exclusivity between propositions are not just logical properties of the operators they depend on the interplay between operators and the initial conditions for instance  the exclusivity of 'rocketl at london' and 'rocketl at paris' cannot be logically concluded from the structure of the 'move' operator alone it is derived both from the structure of the operator and the fact that the rocket 
starts in only one place at the initial time 
　a pair of propositions may be exclusive of each other at every level in a planning graph or they may start out being exclusive of each other in early levels and then become non-exclusive at later levels for instance  if we begin with alex and rocketl at london  and they are nowhere else at time 1   then 'alex in rocketl' and 'rocketl at paris' are exclusive at time 1  but not at time 1 
1 	d e s c r i p t i o n o f t h e a l g o r i t h m 
the high-level description of our basic algorithm is the following starting with a planning graph that only has 
   *in fact  determining all mutual exclusion relationships can be as hard as finding a legal plan for instance  consider creating two new artificals goals g1 and g1 such that satisfying g1 require! satisfying half of the original goals and satisfying g1 requires satisfying the other half 

a single proposition level containing nodes corresponding to initial conditions  graphplan runs in stages in stage i graphplan takes the length i - 1 planning graph from stage i - 1   extends it one time step  the next action level and the following proposition level   and then searches the extended planning graph for a valid plan of length i graphplan's search either finds a valid plan  in which case it halts  or else determines that the goals are not all achievable by time i  m which case it goes on to the next stage  
　this basic algorithm could be termed  weakly complete  in each iteration through the extend/search loop described above  the algorithm either discovers a plan or else proves that no plan having that many time steps or fewer is possible in section 1 we describe how this algorithm may be augmented to be complete in the usual sense  so that if the problem goals are not satisfiable by any valid plan then the planner does eventually halt with failure we wish to point out  however  that weak completeness can be useful for instance  a user may know that if the problem is solvable at all  then it will be solvable in  say  1 time steps in that case  by repeating the extend/search loop until it has failed on a graph with 1 action levels  graphplan is able to report failure in what may be significantly less time than would be needed to prove full unsolvability 
1 	e x t e n d i n g p l a n n i n g g r a p h s 
all the initial conditions are placed in the first proposition level of the graph to create a generic action level  we do the following for each operator and each way of instantiating preconditions of that operator to propositions in the previous level  insert an action node if no two of the preconditions are labeled as mutually exclusive 1 aibo insert all the no-op actions and insert the precondition edges then check the action nodes for exclusivity 
as described in section 1 above and create an  actionsthat-i-am-exclusive-or list for each action 
　to create a generic proposition level  simply look at all the add-effects of the actions in the previous level and place them in the next level as propositions at this point insert the add-edges and delete-edges  note do not create a proposition if its only reason for existence is to be deleted by some action   mark two propositions as exclusive if all ways of generating the first are exclusive of all ways of generating the second 
　as we demonstrate in the following theorem  the time taken by our algorithm to create this graph structure is polynomial in the length of the problem's description and the number of time steps for problems with stripsstyle operators 
theorem 1 consider a planning problem with n ob jects  p propositions in the initial conditions  and m strips operators each having a constant number of formal parameters let t be the length of the longest add-list 
1
　　checking for exclusions keep* graphplan  for instance  from inserting the action 'unload ilex from rocket 1 in pari** in time 1 of the rocket-domain graph when the initial condition! specify that both alex and the rocket begin in london 
of any of the operators then  the size of a t-level planning graph created by graphplan  and the time needed to create the graph  are polynomial n  m  pr i  and t 
proof let k be the largest number of formal parameters is any operator since operators cannot create new objects  the number of different propositions that can be created by instantiating an operator is 1 ♀nk  so  the maximum number of nodes in any proposition-level of the planning graph is 1 p + mln'  since any operator can be instantiated in at most 1 nk  distinct ways  the maximum number of nodes in any action-level of the planning graph is 1 mn 1   thus the total size of the planning graph is polynomial in n  m  p  /  and t  since k is constant 
　the time needed to create a new action and proposition level of the graph can be broken down into  a  the time to instantiate the operators in all possible ways to preconditions in the previous proposition-level   b  the time to determine mutual exclusion relations between actions  and  c  the time to determine the mutual exclusion relations in the next level of propositions it is clear that this time is polynomial in the number of nodes in the current level of the graph b 
　empirically  the part of graph creation that takes the most time is determining exclusion relations however  empirically  graph creation only takes up a significant portion of graphplan's running time in the simpler problems  where the total running time is not very large anyway 
　an obvious improvement to the basic algorithm described above  which is implemented in graphplan  is to avoid searching until a proposition-level has been created in which  a  all the problem goals appear  and  b  no pair of problem goals has been determined to be mutually exclusive 
1 	searching for a p l a n 
given a planning graph  graphplan searches for a valid plan using a backward-chaining strategy unlike most other planners  however  it uses a level-by-level approach  in order to best make use of the mutual exclusion constraints in particular  given a set of goals at time t  it attempts to find a set of actions mapping these goals to some other set of goals at time t - 1 having the property that if only these goals could be achieved in   - 1 steps  then the original goals could be achieved in t steps if the goals at time t - 1 turn out to not be mutually solvable  graphplan tries to find a different set of actions  yielding a different set of subgoals at time t - 1 and so forth  until it either succeeds or has proven that the original set of goals is not solvable at time t 
　in order to implement this strategy  graphplan uses the following method  easily implemented recursively  to generate the subgoal sets at time 1 from a given set of goals at time t for each goal at time t  for each action generating that goal  starting with the no-op  select that action if it is not exclusive of some action already selected continue in this fashion with the next goal at time t and so forth if there are no actions available for 

achieving the current goal that are not exclusive of previous selections  then back up to the previous goal once finished with all the goals at time t  the preconditions to the selected actions make up the new goal set at time t - 1 graphplan then continues this procedure at time step t - 1 
　an improvement to this approach  which is implemented in graphplan and helps modestly on the tasks we have tried  is that after each action is considered a check is made to make sure that no goal ahead in the list has been  cut-off  in other words  graphplan checks to 
see if for some goal still ahead in the list  all the actions creating it are exclusive of actions we have currently selected if there is some such goal  then graphplan knows it needs to back up right away 
   one final aspect of graphplan'b search is that when a set of  sub goals at some time i is determined to be not solvable  then before popping back in the recursion it memoizes what it has learned  storing the goal set and the time i in a hash table similarly  when it creates a set of subgoals at some time 1  before searching it first probes the hash table to see if the set has already been proved unsolvable if so  it then backs up right away without searching further 
　the strategy of working on the subgoals in a somewhat breadth-first-like manner makes graphplan fairly insensitive to goal-orderings in particular  the number of sets examined did not depend much on the order of the goals in any of the domains we tried within a planning graph level  the amount of time needed to construct a goal set at the previous time step from the current goal set might vary based on the ordering nonetheless  empirically  graphplan's dependence on goal orderings seems to be much less than that of other planners such as prodigy and ucpop 
1 	experimental results and discussion 
1 natural domains 
we compared graphplan with two popular planners  prodigy and ucpop  on two  natural  planning problems for both problems we ran prodigy with heuristics suggested in stone et al  stone tt al  1  and by carbonell  carbonell  personal communication  note that graphplan is written in c while the other planners are in compiled lisp on the other hand  we ran graphplan on a  slow  decstation 1 and the other planners on a 
 faster  sparc1 
　in addition to running time  we also report for graphplan the number of  goal-set creation steps   the number of times it creates a goal set at time i - 1 from a 
　goal set at time t  and the total number of recursive calls made  the number of times it selects an action  these are somewhat analogous to the back ward-chaining steps taken by total-order planners 
rocket 
we ran the planners on the rocket domain described in 
figure 1 with the following setup the initial conditions 
    graphplan currently makes no attempt to order the goals at a tune step in an advantageous way we are currently experimenting with various standard heuristics 
1 	punning 
have 1 locations  london  paris  jfk   two rockets  and n items of cargo all the objects  rockets and cargo  begin at london and the rockets have fuel the goal is to get  n/1  of the objects to paris and  n/1j of the ob-
jects to jfk the goals are ordered alternating between destinations 
　results of the experiment are in figure 1 notice that graphplan significantly outperforms the other two planners on this domain graphplan does well in this domain for two main reasons  1  the planning graph only grows to 1 time steps  and  1  the mutual exclusion relations allow a small number of commitments  unloading something from rocketl in paris and something else from rocket1 in jfk  to completely force the remainder of the decisions in particular  graphplan performs only two goal-set creation steps regardless of the number of goals  and the number of recursive calls is linear in the number of goals 
　the running time of graphplan is completely unaffected by goal ordering for this problem 
flat tire 
a  natural  problem of a different sort is stuart russell's  fixing a flat tire  domain  russell  1  unlike the rocket domain  a valid plan for solving this problem requires at least 1 time steps  and 1 actions  while for the rocket domain  graphplan would do pretty well even without the mutual exclusion propagation  here the mutual exclusions are critical and ensure that not too many goal sets will be examined graphplan solves this problem in 1 to 1 seconds depending on the goal ordering the number of goal-set creation steps ranges bom a minimum of 1 to a maximum of 1  and the number of recursive calls from 1 to 1 neither ucpop nor prodigy found a solution within 1 minutes for this problem in the standard goal ordering  though it is possible to find goal orderings where they succeed much more quickly graphplan is not only fast on this domain  but it also produces a  sensible  plan figure 1 shows the plan produced by graphplan for this problem 
1 	a r t i f i c i a l d o m a i n s 
the papers by  barrett and weld  1  and  veloso and blythe  1  define a collection of artificial domains intended to distinguish the performance characteristics of 



the algorithm sees if there is a valid parallel plan of length less than or equal to i as described so far  if no valid plan exists there is nothing that prevents the algorithm from mindlessly running forever through an 
infinite number of stages 
　we now describe a simple and efficient test that can be added after every unsuccessful stage that makes griphplan a complete planner that is  by augmenting 
graphplan with the test we will describe  if the input problem has do solution then graphplan will eventually halt and say  no plan exists n 
1 	p l a n n i n g g r a p h s  level o f f   
assume a problem has no valid plan first observe that in the sequence of planning graphs created there will 
eventually be a proposition level p such that all future proposition levels are exactly the same as p  i e  they contain the same set of propositions and have the same 
exclusivity relations 
　the reason for this is as follows because of the noop actions  if a proposition appears in some proposition level then it also appears in all future proposition levels since only a finite set of propositions can be created by strips-style operators  when applied to a finite set of initial conditions  there must be some proposition level q such that all future levels have exactly the same set of propositions as q also  again because of the no-op's  if propositions p and q appear together in some level and are not marked as mutually exclusive  then they will not be marked as mutually exclusive in any future level thus there must be some proposition level p after q such that all future proposition levels also have exactly the same bet of mutual exclusion relations as p 
　in fact  it is not hard to see that once two adjacent levels pn pn+i are identical  then all future levels will be identical to pn as well at this point  we say the graph has leveled off 
1 	t h e test t h a t m a k e s graphplan 
c o m p l e t e 
let pn be the first proposition level at which the graph has leveled off if some problem goal does not appear in this level  or if two problem goals are marked as mutually exclusive in this level  then graphplan can immediately say that no plan exists however  it may be the case that no plan exists but this simple test does not detect it  so we need to do something slightly more sophisticated 
　as mentioned earlier  graphplan memoizes  or records  goal sets that it has considered at some level and determined to be unsolvable let s1 be the collection of all such sets stored for level t after an unsuccessful stage t in other words  after an unsuccessful stage t  graphplan has determined two things  1  any plan of / or fewer steps must make one of the goal sets in s1 true at time i  and  1  none of the goal sets in s1 are achievable m i steps the modification to graphplan to make it complete is now just the following 
if the graph has leveled off at some  evel n and a stage 1 has passed in which  stn~1  = |sj|  then output  no plan exists   
1 	planning 






	blum and furst 	1 

	blum and furst 	1 

	blum and furst 	1 







	blum and furst 	1 

	blum and furst 	1 

	blum and furst 	1 







	blum and furst 	1 

	blum and furst 	1 

	blum and furst 	1 







