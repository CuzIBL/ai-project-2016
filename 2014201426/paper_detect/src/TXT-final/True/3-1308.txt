
we study a monotone np decision problem  the dominating clique problem  whose phase transition occurs at a very dense stage of the random graph evolution process. we establish the exact threshold of the phase transition and propose an efficient search algorithm that runs in super-polynomial time with high probability. our empirical studies reveal two even more intriguing phenomena in its typical-case complexity:  1  the problem is  uniformly hard  with a tiny runtime variance on negative instances.  1  our algorithm and its cnftailored implementation  outperform several sat solvers by a hugemarginon dominatingcliques and some other sat problems with similar structures.
1 introduction
in this paper  we study the phase transition behavior of the dominating clique problem  domc   an np-complete decision problem which for a given graph  asks if there is a subset of vertices that induces a clique and is a dominating set. our interest in domc stems from an initial observation that its phase transition should occur when the random graph has a constant edge probability  i.e.  has on average edges . this distinguishes domc from many other np-complete problems previously studied from a phase transition perspective; well-studied problems such as random sat  random graph coloring  and hamiltonian cycle all have a phase transition when the underlying random graphs are sparse. for random sat and graph coloring  it is known that randomly-generated instances become typically easy when the density parameter increases as a cer-
tain function of the problem size  franco and gelder  1; krivelevich  1 . for hamiltonian cycle  whose edgesvertices ratio thresholdis   instances randomlygenerated at the phase transition are already typically easy  vandegriend and culberson  1 .
　another unique feature is that domc is a monotone decision problemwithout anyextra parameterother than the problem size and edge density. this is in contrast to other similar partitioning and covering problems studied in the phase
transition literature  such as the vertex cover  hartmann and weigt  1   in which an additional size parameter has to be used as an input.
　there has also been recent interest in the study of the typical-case behavior of random problems with some deterministic structures  hoping that these problems might be able to capture more characteristics in real-world applications. among others  the quasigroup completion problem  gomes and shmoys  1   problems defined on the small-world graphs  walsh  1   and problems obtained by  morphing  different problems  gent et al.  1  have been proposed as alternatives to random problems with a uniform distribution. the dominating clique problem on random graphs and its cnf-encoding provide another type of distribution with  in some sense  extreme characteristics.
　in section 1  we establish the exact threshold of the phase transition of the dominating clique problem in random graphs. in section 1  we present a backtracking algorithm for domc which will be used in our empirical investigation. in section 1  we report two sets of interesting observations from our empirical investigation. we conclude in section 1.
1 dominating clique problem and its phase transitions
consider a graph . a subset of vertices is called a dominating clique of if induces a clique and for any   there is a vertex such that
         . the dominating clique problem is the one that asks the question whether a given graph has a dominating clique.
　the property of having a dominating clique is monotone and has a phase transition when the random graph is at the dense stage of the graph evolution process. the following theorem shows the phase transition has an exact threshold

 for a random graph where each of the potential edges appears in the graph with proba-
bility .
theorem 1.
	pr	has a dominating clique

	if	
		 1 
	if	
to simplify the notations  we will write . let be the number of dominating cliques of size . the
expectation of	is
 1 
by stirling's formula  we have

 1 
lemma 1. if the edge probability	is such that
  then
                                              1  proof. let
and
　based on the bound    can be estimated as follows:




since 	if	is sufficiently large  we have
.
	for	  we have




therefore  we have	if	.


	solving the inequality about   we get	  that is 

　　 . to prove the case of   i.e.    we have to consider the variance of the number of dominating cliques in . details will be given in the appendix. here  we only mention that the first crucial observation is that in this case  we have  a   and  b  the expected number of dominat-
ing cliques of size tends to infinity for any constant such that  .
lemma 1. let be a constant such that and let . then 
proof. by  1   we have


the lemma follows since by assumption we have and		.	
1 an algorithm for the dominating clique problem
we present a brief over view of the elementary algorithm we
developed for this problem.
we assume we are given a simple undirected graph
     . the algorithm is a basic depth first backtrack algorithm that recursively constructs a potential dominating clique . we call the set of vertices not adjacent to any vertex in the uncovered set . for a vertex to be a candidate for addition to it must be adjacent to all vertices in . we call this the selection set	.
　at each node in the backtrack tree  we select a pivot set such that if the current can be extended to cover the graph at least one of the vertices must be in . to this end  we first find a vertex which has a minimum number of neighbors in . clearly either or one of its neighbors in the current must be in the final . the effect of this is to greatly reduce the branching factor and the amount of redundant search.
　for we define the closed neighborhood of a vertex in a subset as or   and the open neighborhood
	. initially 	and	.
　at first glance it appears we have eliminated the vertex of minimum degree    as a possible member of . suppose
is the only vertex in   then since is of minimum degree is a clique and any vertex will do. otherwise  on the initial step will be in and so is available for inclusion later in the recursion. correctness then follows by induction on the domclq 	  :: boolean
	if	then
　　　　　　　. return yes.
endif
	find	such that	.
           . if	return no.
.
while
	select	.
.
.
.
	if domclq 	  return yes.
.
.
               . endwhile return no;
end domclq.
observations given above. our assumption is that usually the vertex of minimum degree is not in and so we may reduce the search cost by leaving it out of the initial . note that after the initial step and are disjoint.
　in our program we made no effort to reorder the vertices of for selection  first statement in the while loop . one obvious candidate is to select to maximize .
we would guess that in positive instances this would tend to find solutions quicker. however  the results for the negative instances in table 1 indicate this is unlikely to help in those cases  these are the most expensive and there would be a fair bit of overhead cost to this heuristic. we leave further investigation of selection heuristics as future work.
1 empirical studies
in this section  we discuss our empirical investigation on the dominatingclique problemat phase transitions. in the first set of experiments  we study the threshold behavior and typicalcase hardness of the dominating clique problem itself. in the second set of experiments  we compare the performance of our algorithm and some state-of-the-art sat solvers.
1 threshold and uniformity of hardness at phase transitions
table 1 shows the preliminary result on empirical value of the threshold. table 1 summarizes the typical case hardness at for . the data indicate that the typical-case hardness at phase transitions increases at a superpolynomial rate. more interesting is the fact that for negative instances the variance in the number of the backtracks is tiny as compared to the total number. in other words  randomlygenerated dominating clique instances just beyond the phase transition seem to be  uniformly  hard. this suggests that randomizing the selection within the pivot set is unlikely
	average	std.	min	max	1.1.1.1.1
 1.1.1.1.1 1 1 1 1
1.1.1.1.1
1.1.1.1.1
1.1.1.1.1
1.1.1.1.1
1.1.1.1.1
1.1.1.1.1
1.1.1.1.1
1.1.1.1.1
1.1.1.1.1
1.1.1.1.1	1	1	1	11.1.1.1.1table 1: the average threshold of dominating clique  expressed as a fraction of possible edges  for various . fifty instances at each   except n=1 where only 1 instances completed. std is the standard deviation  min  max  is the minimum  maximum  fraction encountered in the sample.
to produce the heavy-tailed running time behavior frequently observed in many other problems  gomes et al.  1 .
1 significance of using the right heuristics: how sat solvers fail 
the dominating clique problem has a very natural and simple cnf encoding. to make the presentation easier  we adopt the convention that a clause can be viewed as a set of literals. given a graph with   the dominating clique problem can be encoded as follows.
1. there are boolean variables where signifies that the corresponding vertex is in
the dominating clique.
1. for each variable	  there is a clause
       where means the variables representing the vertices adjacent to . this indicates that each vertex has to be in the dominating clique or have a neighbor in a dominating clique. these clauses will be called the long-positive clauses.
1. for each pair of variables not in   there is a clause    indicating that at most one of the two non-adjacent vertices can be in a dominating clique. we will call these clauses the short-negative clauses.
　other encodings are also possible such as the support encoding gent  1 that maps maintainingarc-consistencyof csp algorithms to unit-propagation in sat algorithms. but similar cnf encoding of the csp representation for the dominating clique problem at the phase transitions will result in clauses of length .
backtrack nodes for yes instances	n	mean	std.	min.	max1.1.1.1.1 1 1 1 1 1.1.1.1.1 1 1 1 1
1.1.1.1.1backtrack nodes for no instances	n	mean	std.	min.	max1.1.1.1.1 1 1 1 1
1.1.1.1.1
 1.1.1.1.1 1 1 1 1table 1: the number of backtrack nodes split on instances with and without a dominating clique. 1 instances at each n  . note the remarkable consistency in the no instances.
a sat algorithm for the cnf-encoding of domc
we noticed that satz and zchaff cannot solve any of the domc instances of size more than 1 in reasonable time. therefore we translated our dominating clique algorithm to a sat solver  called dcs  that solves the cnf-encoding of the dominatingclique problemalmost as efficiently as the orginal algorithm.
　the solver does not use any of the current efficient data structures such as the technique of watched literals  nor does it use any advanced learning mechanism and heuristics  other than those directly translated from our dominating clique search algorithm. in the context of cnf formulas our algorithm reads as follows:  1  always pick an unassigned variable in the shortest remaining long-positive clause;  1  conduct a one-step unit propagation based on the information in short-negative clauses; and  1  stop as soon as all the long positive clauses are satisfied  or backtrack if a long-positive clause becomes empty. as has been discussed at the end of section 1  our solver's performance may be further improved on satisfiable instances if we add the heuristic to select an unassignedvariable that satisfies a maximumnumberof longpositive clauses.
n	dcs	bm	mq	sz	solution prob.1.1.1.1.1.1
1.1.1	1	1table 1: median running time  in seconds  of sat solvers on random instances of the dominating clique problem. 1 instances for each n. the last column is the percentage of the satisfiable instances. cutoff time is 1 seconds.
results on the cnf encodings of domc and subgraph isomorphism
we have performed a series of experiments comparing the performance of our solver dcs and some state-of-the-art sat solvers  including berkmin bm 1  marcheq mq 1 and satz sz .
　first  we compared the performance of our solver dcs and other solvers on the cnf encoding of domc at phase transitions. we generated 1 random instances of the dominating clique problem at the edge probability for and . according to our experiment on the threshold  is roughly the edge probability where percent of the instances are satisfiable. the median running time  in seconds  of these solvers is summarized in table 1.
　inspired by the efficiency of dcs on domc we investigated its performance on subgraph isomorphism  sgi  instances. given two graphs and   the subgraph isomorphism problem asks if there exists a subgraph of such that is isomorphic to . a sgi instance can be naturally converted to sat using an encoding similar to the one used for domc  direct encoding ; the resulting sat instance has variables  long positive clauses and short-negativeclauses.
sat encodings of random sgi  sersgi  are difficult for  deterministic  sat solvers.1
　we generated 1 sets of sersgi instances with 1 variables. each set consisted of 1 instances generated around the cross over point of sgi. dcs consistently outperformed all the other solvers on each set  table 1 . dcs is one or two orders of magnitude faster than marcheq and satz. this is remarkable especially considering the simplicity of dcs. to further investigate the speed up factor we compared the performances of dcs and berkmin on the sersgi instances used in the 1 sat competition  table 1 . with a single exception  dcs performance was comparable or better than that of berkmin. thus we conclude that dcs outperforms state of the art solvers on sersgi instances.
　it may be possible to extendthis conclusion to other classes of sat instances which have only long-positive and short negative clauses  but more work needs to be done to see what are the structural properties that dcs can exploit. however  we do not expect that dcs will work efficiently on any type of cnf formulas with a long-short clause structure. we noticed that on random k-sat instances  it is at least one order of magnitude slower than satz. we consider this behavior an evidence against the idea of an efficient universal sat solver that does not consider any problem structure.
1 conclusions
most of the well-investigated np-complete problems in the literature have a phase transitionwhen the underlyinggraph is very sparse. there is also evidence that randomly-generated instances at the phase transition are typically not hard if the
	set 1	set 1	set 1	set 1	set 1% solveddcs 1 1 1 bm 1 1 1 mq 1 1 1 sz 1 1 1median solution time  sec dcs 1 1 1 1 1 bm 1 1 1 1 1 mq 1 1 1 1 sz 1 1 1mean solution time  sec dcs	1	1	1	1	1
bm	1	1	1	-	-
mq	1	-	-	-	-
sz	-	-	-	-	-table 1: performances of dcs  berkmin  marcheq and satz on 1 sets of sersgi instances with 1 variables. 1 instances in each set. cutoff time 1 seconds.
inst#	1	1	1	1dcs 1 1 1 1 1 1 1 bm 1 1 1 1 1 1 1table 1: running time  minutes  of dcs and berkmin on sersgi instances used in 1 sat competition.
threshold can be accurately established such as the hamiltonian cycle problem. domc studied in this paper is distinguished from a phase transition and typical-case complexity perspective. on the one hand  it has an exact thresh-
old at a very dense stage of the random graph evolution process. our empirical results  on the other hand  indicate that randomly-generatedinstances are still typically  and uniformly for negative instances  hard. as has been demonstrated by our sat solver's outstanding performance advantage on the cnf-encodingof domc and otherproblemswith similar structures  domc might serve as a prototypical problem to further investigate the relationship among the problem structure  the encoding efficiency  and the use of relevant heuristics in satisfiability search.
appendix: proof of theorem 1
to estimate the second moment of the number of dominating cliques of size   we need the following lemma on the probability that two vertex subsets both dominate the rest of the vertices in a random graph.
lemma 1. let and be two vertex subsets of size such that and let be the probability that and both dominate all the vertices outside of .
then  1.
 1 
1. let	. we have
	 a 		; and
	 b  there exists a constant	andsuch that if	  	for all.proof.  1 . let	be a vertex outside of. the probabil-ity that	is not connected to any vertices inis.the probability that
is
thus 	isis dominated by bothand 1 . since  we have
for	  we have




since


and	  conclusion 1 a  follows.	
proof of theorem 1. the fact that
has a dominating clique

for	 follows from lemma 1 and markov's inequality.
	to prove that	has a dominating clique

for	  we will show that
where	and 	. from lemma
1  we have
by chebyshev's inequality  we have

the expectation of is where is the total number of pairs of vertex subsets of size that have vertices in common  and is the probability that such a pair of vertex sub-
sets are both dominating cliques. recall that
we write  as

where


and

we will prove that	and	.	since
	and 	  by lemma 1 1.a and 1.b 
we have
from lemma 1  1.b   we have for


since	with	  we have

this completes the proof.	
