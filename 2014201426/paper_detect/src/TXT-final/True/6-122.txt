 
disjunctive logic programming  dlp  is a very expressive formalism: it allows to express every property of finite structures that is decidable in the complexity class e   npnh . despite the high expressiveness of dlp  there are some simple properties  often arising in real-world applications  which cannot be encoded in a simple and natural manner. among these  properties requiring to apply some arithmetic operators  like sum  times  count  on a set of elements satisfying some conditions  cannot be naturally expressed in dlp. to overcome this deficiency  in this paper we extend dlp by aggregate functions. we formally define the semantics of the new language  named dlp-1. we show the usefulness of the new constructs on relevant knowledge-based problems. we analyze the computational complexity of dlp 1  showing that the addition of aggregates does not bring a higher cost in that respect. we provide an implementation of the dlp-1 language in dlv- the state-of-theart dlp system - and report on experiments which confirm the usefulness of the proposed extension also for the efficiency of the computation. 
1 	introduction 
expressiveness of dlp. disjunctive logic programs  dlp  are logic programs where  nonmonotonic  negation may occur in the bodies  and disjunction may occur in the heads of rules. this language is very expressive in a precise mathematical sense: it allows to express every property of finite structures that is decidable in the complexity class ep1  npnp . therefore  under widely believed assumptions  
   *this work was supported by the european commission under projects ist-1 infomix  ist-1 icons  and fet-1wasp. 
 dlp is strictly more expressive than normal  disjunctionfree  logic programming  whose expressiveness is limited to properties decidable in np. dlp can thus express problems which cannot be translated to satisfiability of cnf formulas in polynomial time. importantly  besides enlarging the class of applications which can be encoded in the language  disjunction often allows for representing problems of lower complexity in a simpler and more natural fashion  see  eiter et al.  1  . 
the problem. despite this high expressiveness  there are some simple properties  often arising in real-world applications  which cannot be encoded in dlp in a simple and natural manner. among these are properties requiring to apply some arithmetic operator  e.g.  sum  times  count  on a set of elements satisfying some conditions. suppose  for instance  that you want to know if the sum of the salaries of the employees working in a team exceeds a given budget  see team building  in section 1 . to this end  you should first order the employees defining a successor relation. you should then define a sum predicate  in a recursive way  which computes the sum of all salaries  and compare its result with the given budget. this approach has two drawbacks:  1  it is bad from the kr perspective  as the encoding is not natural at all;  1  it is inefficient  as the  instantiation of the  program is quadratic  in the cardinality of the input set of employees . thus  there is a clear need to enrich dlp with suitable constructs for the natural representation and to provide means for an efficient evaluation of such properties. 
contribution. 	we overcome the above deficiency of dlp. 
instead of inventing new constructs from scratch  we extend the language with a sort of aggregate functions  first studied in the context of deductive databases  and implement them in dlv  eiter el al.f 1  - the state-of-the-art disjunctive logic programming system. the main contributions of this paper are the following. 
  we extend disjunctive logic programming by aggregate functions and formally define the semantics of the resulting 

nonmonotonic reasoning 	1 

language  named dlp*1. 
  we address knowledge representation issues  showing the impact of the new constructs on relevant problems. 
  we analyze the computational complexity of dlp*1. importantly  it turns out that the addition of aggregates does not increase the computational complexity  which remains the same as for reasoning on dlp programs. 
  we provide an implementation of dlp*1 in the dlv system  deriving new algorithms and optimization techniques for the efficient evaluation. 
  we report on experimentation  evaluating the impact of the proposed language extension on efficiency. the experiments confirm that  besides providing relevant advantages from the knowledge representation point of view  aggregate functions can bring significant computational gains. 
  we compare dlp*1 with related work. 
we present the most relevant aspects of dlp*1 and of its implementation here  referring the interested reader to a technical report with all details  dellarmi et al  1 . 
1 	the dlpa language 
 in this section  we provide a formal definition of the syntax and semantics of the dlp*1 language - an extension of dlp by set-oriented functions  also called aggregate functions . we assume that the reader is familiar with standard dlp; we refer to atoms  literals  rules  and programs of dlp  as standard atoms  standard literals  standard rules  and standard programs  respectively. for further background  see  gelfond 
and lifschitz  1; eiter etal  1 . 
1 	syntax 
a  dlp*1  set is either a symbolic set or a ground set. a symbolic set is a pair   where vars is a list of variables and coiij is a conjunction of standard literals.1 a ground set is a set of pairs of the form   where l is a list of constants and conj is a ground  variable free  conjunction of standard literals. an aggregate function is of the form 	  where 1 is a set  and / is a function name among an aggregate atom is ~ 	~ 	where f s  is an aggregate function  	  and lg and rg  called left guard  and right guard  respectively  are terms. one of  can be omitted. an atom is cither a 
standard  dlp  atom or an aggregate atom. a literal l is an atom a or an atom a preceded by the default negation symbol not; if a is an aggregate atom  l is an aggregate literal  rule r is a construct 
where a           an are standard atoms  b1         bm are atoms  
and 	the disjunction a.   
           is the head of r  while the conjunction bu... bk  not is the body of r. a  dlp*1; program is a set of dlp*1 rules. 
syntactic restrictions and notation 
　'intuitively  a symbolic set stands for the set of a'-values making true  i.e.  
. note that also negative liter-
als may occur in the conjunction conj of a symbolic set. 
1 
　for simplicity  and without loss of generality  we assume that the body of each rule contains at most one aggregate atom. a global variable of a rule r is a variable appearing in some standard atom of r; a local variable of r is a variable appearing solely in an aggregate function in r. 
　safety. a rule r is safe if the following conditions hold:  i  each global variable of r appears in a positive standard literal in the body of r;  ii  each local variable of r' appearing in a symbolic set   also appears in a positive literal in conj   iii  each guard of an aggregate atom of r* is either a constant or a global variable. a program is safe if all of its rules are safe. 
example 1 consider the following rules: 

 the first rule is safe  while the second is not  since both local variables z and s violate condition  ii . the third rule is not safe cither  since the guard t is not a global variable  violating condition  iii . 
　stratification. a dlp*1 program v is aggregate-stratified if there exists a function   called level mapping  from the set of  standard  predicates of v to ordinals  such that for each pair a and b of  standard  predicates of   and for each rule appears in the head of r  and 1 appears in an aggregate atom in the body of r  then   and  ii  if a appears in the head of r  and b occurs in a standard atom in the body of r  then  
example 1 consider the program consisting of a set of facts for predicates a and b  plus the following two rules: 

 the program is aggregate-stratified  as the level mapping  satisfies the required 
conditions. if we add the rule b x :-p x   then no legal level-mapping exists and the program becomes aggregateunstratificd. 
　intuitively  aggregate-stratification forbids recursion through aggregates  which could cause an unclear semantics in some cases. consider  for instance  the 
 aggregate-unstratified  program consisting only of rule 
. 	neither p a  nor  is 
an intuitive meaning for the program. we should probably assert that the above program does not have any answer set  defining a notion of  stability  for aggregates   but then positive programs would not always have an answer set if there is no integrity constraint. in the following we assume that dlp*1 programs are safe and aggregate-stratified. 
1 	semantics 
given a dlp* program denote the set of constants appearing in the set of the natural numbers occurring in up and b-p the set of standard atoms constructive from the  standard  predicates of v with constants in up. 
furthermore  given a set  denotes the set of all multisets over elements from x. let us now describe the domains and the meanings of the aggregate functions we consider: count: defined over   the number of elements in the set. 

sum: defined over   the sum of the numbers in the set. times: over the product of the numbers in the set.1 
　min  max: defined over  the minimum/maximum element in the set; if the set contains also strings  the lexicographic ordering is considered.1 if the argument of an aggregate function does not belong to its domain  the aggregate evaluates to false  denoted as j   and our implementation issues a warning in this case . 
　a substitution is a mapping from a set of variables to the set up of the constants appearing in the program v. a substitution from the set of global variables of a rule r  to u-p  is a global substitution for r; a substitution from the set of local variables of a symbolic set 1  to up  is a local substitution/or 1. given a symbolic set without global variables 1 = { vars : conj}  the instantiation of set 1 is the following ground set of pairs inst s : 

a ground instance of a rule r is obtained in two steps:  1  a global substitution a for r is first applied over r;  1  every symbolic set s in o r  is replaced by its instantiation inst s . the instantiation ground v  of a program v is the set of all possible instances of the rules of v. 

　an interpretation for a dlp*1 program v is a set of standard ground atoms . the truth valuation i {a   where a is a standard ground literal or a standard ground conjunction  is defined in the usual way. besides assigning truth values to the standard ground literals  an interpretation provides the meaning also to  ground  sets  aggregate functions and aggregate literals; the meaning of a set  an aggregate function  and an aggregate atom under an interpretation  is a multiset  a value  and a truth-value  respectively. let f s  be a an aggregate function. the valuation i s  of set 1 w.r.t. / is the multiset of the first constant of the first components of the elements in s whose conjunction is true w.r.t. j. more precisely  let 	conj is true 
w.r.t. i }   then i s  is the multiset 
the valuation i f s   of an aggregate function f s  w.r.t. / is the result of the application of the function / on 1 .  if the multiset 1  is not in the domain of/   
　an aggregate atom . 	is true w.r.t. i if: and   ii  the relationships 
hold whenever they 
are present; otherwise  a is false. 
　using the above notion of truth valuation for aggregate atoms  the truth valuations of aggregate literals and rules  as sum and times applied over an empty set return 1 and 1  
respectively. 1 the latter is not yet supported in our f  rst implementation. 
	1
   given a substitution a and a dlp* object obj  rule  conjunction  set  etc.   with a little abuse of notation  we denote by a  obj  the object obtained by replacing each variable x in obj by   x . well as the notion of model  minimal model  and answer set for dlp*1 are an immediate extension of the corresponding notions in dlp  gelfond and lifschitz  1   
example 1 consider the aggregate atom a - #sum{ l : p 1 l    1 : p 1  }   1 from example 1. let 1 be the ground set appearing in a. for interpretation i = {r/ 1  /; 1  t 1 j  i s  =   the application of #sum over  yields 1  and a is therefore true w.r.t. 1  since 1   1. i is an answer set of the program of example 1. 
1 	knowledge representation in dlp*1 
in this section  we show how aggregate functions can be used to encode relevant problems. 
team building. a project team has to be built from a set of employees according to the following specifications: 
 pi  the team consists of a certain number of employees.  p1  at least a given number of different skills must be present in the team. 
 p1  the sum of the salaries of the employees working in the team must not exceed the given budget. 
 p/i  the salary of each individual employee is within a specified limit. 
 pr}  the number of women working in the team has to reach at least a given number. 
suppose that our employees are provided by a number of facts of the form emp empid sex skill salary ; the size of the team  the minimum number of different skills  the budget  the maximum salary  and the minimum number of women are specified by the facts nemp n   nskill n   budget b   maxsal m   and women w . we then encode each property pj above by an aggregate atom a  and enforce it by an integrity constraint containing not at. 

　intuitively  the disjunctive rule  guesses  whether an employee is included in the team or not  while the five constraints correspond one-to-one to the five requirements pip1. thanks to the aggregates the translation of the specifications is surprisingly straightforward. the example highlights the usefulness of representing both sets and multisets in our language  a multiset can be obtained by specifying more than one variable in vans of a symbolic set {vars : conj} . for instance  the encoding of p1 requires a set  as we want to count different skills; two employees in the team having the same skill  should count once w.r.t. p-1- on the contrary  p1 requires to sum the elements of a multiset; if two employees have the same salary  both salaries should be summed up for p1. this is obtained by adding the variable i to vars. the valuation of {1a  1 : c 1 p 1x 1fc  1a  in 1 } yields the set 1 = { 1a  1  : sa is the salary of employee i in the team}. then  the sum function is applied on the multiset of the first components sa of the tuples  1a  1  in 1  see section 1 . 
seating. 	we have to generate a sitting arrangement for a number of guests  with ra tables and n chairs per table. 

nonmonotonic reasoning 	1 

guests who like each other should sit at the same table; guests who dislike each other should not sit at the same table. 
　suppose that the number of chairs per table is specified by nchairs x  and that person p  and table t  represent the guests and the available tables  respectively. then  we can generate a seating arrangement by the following program: 
% guess whether person p sits at tabic t or not. at p  t  v not.at p  t .-person p   table t . 
% the persons sitting at a table cannot exceed the chairs. 
	:-table{t rnchairs c  not 	count{p : at p t } c. 
% a person is seated at precisely one table; equivalent 
% to :-person p  at p1t  at{p  	u  t  u. 
:-peraon p  not count{t : at p t } = 1. 
% people who like each other should sit at the same table... 
:-like pl p1  at pl1t inotat p1 t . 
% ...while people who dislike each other should not. :-dislikc ph 	p1  at pl t  at p1 t . 
1 	computational complexity of dlp*1 
as for the classical nonmonotonic formalisms  marek and truszczyhski  1   two important decision problems  corresponding to two different reasoning tasks  arise in dlp-1: 
　 brave reasoning  given a dlp 1 program v and a ground literal l  is l true in some answer set of p  
　 cautious reasoning  given a dlp*1 program v and a 
　ground literal l  is l true in all answer sets of v  
　the following theorems report on the complexity of the above reasoning tasks for propositional  i.e.  variable-free  dlp*1 programs that respect the syntactic restrictions imposed in section 1  safety and aggregate-stratification . importantly  it turns out that reasoning in dlp-1 does not bring an increase in computational complexity  which remains exactly the same as for standard dlp.  see  dell'armi et al.  
1  for the proofs.  
theorem 1 brave reasoning on ground dlp*1 programs is -complete. 
theorem 1 cautious reasoning on ground dlp-1 programs is -complete. 
1 	implementation issues 
the implementation of dlp*1 required changes to all modules of dlv. apart from a preliminary standardization phase  most of the effort concentrated on the intelligent grounding and model generator modules. 
　standardization. after parsing  each aggregate a is transformed such that both guards are present and both  and  are set to . the conjunction conj of the symbolic set of a is replaced by a single  new atom aux and a rule aux:-conj is added to the program  the arguments of aux being the distinct variables of conj . 
　instantiation. the goal of the instantiator is to generate a ground program which has precisely the same answer sets as the theoretical instantiation ground v f but is sensibly smaller. the instantiation proceeds bottom-up following the dependencies induced by the rules  and  in particular  respecting the ordering imposed by the aggregate-stratification. let 
 h:-b aggr  be a rule  where h is the head of the rule  b is the conjunction of the standard body literals  and aggr 
1 
is an aggregate literal over a symbolic set first we compute an instantiation for the literals in b; this binds the global variables appearing in aux. the  partially bound  atom is then matched against its extension  since the bottom-up instantiation respects the stratification  the extension of is already available   all matching facts are computed  and a set of pairs  
is generated  where 
   is a substitution for the local variables in such that is an admissible instance of  recall that 
dlv's instantiator produces only those instances of a predicate which can potentially become true  faber et al  1a; leone et al.  . also  we only store those elements of the symbolic set whose truth value cannot be determined yet and process the others dynamically   partially  evaluating the aggregate already during instantiation. the same process is then repeated for all further instantiations of the literals in b. example 1 consider the following rule r: 


 suppose that the instantiation of the rule for aux generates 1 potentially true facts for aux: aux l a   aux l b   and aux 1 c . if the potentially true facts for q are  / l  and q 1   the following ground instances are generated:1 
　duplicate sets recognition. to optimize the evaluation  we have designed a hashing technique which recognizes multiple occurrences of the same set in the program  even in different rules  and stores them only once. this saves memory  sets may be very large   and also implies a significant performance gain  especially in the model generation where sets are frequently manipulated during the backtracking process. example 1 consider the following two constraints: 

 our technique recognizes that the two sets are equal  and generates only one instance which is shared by c1 and c1-
　now assume that both constraints additionally contain a standard literal p x . in this case  c  and c-1 have n instances each  where n is the number of facts for p x . by means of our technique  each pair of instances of c1 and c1 shares a common set  reducing the number of instantiated sets by half. 
　model generation. we have designed an extension of the deterministic consequences operator of the dlv system  faber et al.  1b  for dlp*1 programs. the new operator makes both forward and backward inferences on aggregate atoms  resulting in an effective pruning of the search space. we have then extended the dowling and gallier algorithm  dowling and gallier  1  to compute a fixpoint of 
   1  a ground atom a can potentially become true only if we have generated a ground instance with a in the head. 
   1 note that a ground set contains only those aux atoms which are potentially true. 

this operator in linear time using a multi-linked data structure of pointers. given a ground set t1 say   
  this structure allows us to 
access t in o 1  whenever some aux1 changes its truth value  supporting fast forward propagation ; on the other hand  it provides direct access from t to each aux1 atom  supporting fast backward propagation . 
1 	experiments and benchmarks 
to assess the usefulness of the proposed dlp extension and evaluate its implementation  we compare the following two methods for solving a given problem: 
  dlv-1. encode the problem in dlp-1 and solve it by using our extension of dlv with aggregates. 
  dlv. encode the problem in standard dlp and solve it by using standard dlv. 
　to generate dlp encodings from dlp-1 encodings  suitable logic definitions of the aggregate functions are employed  which are recursive for  count  sum  and times . 
we compare these methods on two benchmark problems: 
　time tabling is a classical planning problem. in particular  we consider the problem of planning the timetable of lectures which some groups of students have to take. we consider a number of real-world instances at our university  where instance k deals with k groups. 
　seating is the problem described in section 1. we consider 1  for small instances  or 1  for larger instances  seats per table  with increasing numbers of tables and persons  with numpersons - numseats * numtables . for each problem size  i.e.  seats/tables configuration   we consider classes with different numbers of like resp. dislike constraints  where the percentages are relative to the maximum number of like resp. dislike constraints such that the problem is not overconstrained1. in particular  we consider the following classes: -  no like/dislike constraints at all; -  1% like constraints; -  1% like and 1% dislike constraints; -  1% like constraints; -  1% like and 1% dislike constraints. for each problem size  we have randomly generated 1 instances for each class above. 
　for seating we use the dlp-1 encoding reported in section 1; all encodings and benchmark data are also available on the web at http://www.dlvsystem.com/ e x a m p l e s / i j c a i 1 . z i p . 

figure 1: experimental results for timetabling 
1 beyond these maxima there is trivially no solution. 

figure 1: experimental results for seating 
we ran the benchmarks on amd athlon 1 machines with 
1mb of memory  using freebsd 1 and gcc 1. we have allowed a maximum running time of 1 seconds per instance and a maximum memory usage of 1mb. cumulated results are provided in figures 1 and 1. in particular  for timetabling we report the execution time and the size of the residual ground instantiation  the total number of atoms occurring in the instantiation  where multiple occurrences of the same atom are counted .1 for seating  the execution time is the average running time over the instances of the same size. a  -  symbol in the tables indicates that the corresponding instance  some of the instances of that size  for seating  was not solved within the allowed time and memory limits. 
　on both problems  dlv-1 clearly outperforms dlv. on timetabling  the execution time of dlv-1 is one order of magnitude lower than that of dlv on all problem instances  and dlv could not solve the last instances within the allowed memory and time limits. on seating  the difference becomes even more significant. dlv could solve only the instances of small size  up to 1 persons - 1 tables  1 seats ; while dlv-1 could solve significantly larger instances in a reasonable time. the information about the instantiation sizes provides an explanation for such a big difference between the execution times of dlv and dlv*1. thanks to the aggregates  the dl a encodings of timetabling and seating are more succinct than the corresponding encodings in standard dlp; this succinctness is also reflected in the ground instantiations of the programs. since the evaluation algorithms are then exponential  in the worst case  in the size of the instantiation  the execution times of dlv-1 turn out to be much shorter than the execution times of dlv. 
1 	related works 
aggregate functions in logic programming languages appeared already in the 1s  when their need emerged in deductive databases like ldl  chimenti et al  1  and were studied in detail  cf.  ross and sagiv  1; kemp and ramamohanarao  1 . however  the first implementation in answer set programming  based on the smodels system  is recent  simons et ai  1 . 
　comparing dlp-1 to the language of smodels  we observe a strong similarity between cardinality constraints there and 
count. also sum and weight constraints in smodels are 
     1  note that also atoms occurring in the sets of the aggregates are counted for the instantiation size. 

nonmonotonic reasoning 	1 

similar in spirit. indeed  the dlpa encodings of both team building and seating can be easily translated to smodels' language. however  there are some relevant differences. for instance  in dlp*1 aggregate atoms can be negated  while cardinality and weight constraint literals in smodels cannot. smodels  on the other hand  allows for weight constraints in the heads of rules  while dlp 1 aggregates cannot occur in heads.  the presence of weight constraints in heads is a powerful kr feature; however  it causes the loss of some semantic property of nonmonotonic languages  marek and remmel  1 .  observe also that dlp*1 aggregates like min  max  and times do not have a counterpart in smodels. moreover  dlp-1 provides a general framework where further aggregates can be easily accommodated  e.g.  any and avg are already under development . furthermore  note 
that symbolic sets of dlp*1 directly represent pure  mathematical  sets  and can also represent multisets rather naturally  see the discussion on team building in section 1 . smodels weight constraints  instead  work on multisets  and additional rules are needed to encode pure sets; for instance. condition p 1 of team building cannot be encoded directly in a constraint  but needs the definition of an extra predicate. a positive aspect of smodels is that  thanks to stricter safety conditions  all variables are to be restricted by domain predicates   it is able to deal with recursion through aggregates  which is forbidden in dlp . finally  note that dlp-1 deals with sets of terms  while smodels deals with sets of atoms. as far as the implementation is concerned  also smodels is endowed with advanced pruning operators for weight constraints  which are efficiently implemented; we are not aware  though  of techniques for the automatic recognition of duplicate sets in smodels. 
　dlp-1 also seems to be very similar to a special case of the semantics for aggregates discussed in  gelfond  1   which we are currently investigating. 
　another interesting research line uses 1-valued logics and approximating operators to define the semantics of aggregate functions in logic-based languages  denecker et al  1; 1; pelov  1 . these approaches are founded on very solid theoretical grounds  and appear very promising  as they could provide a clean formalization of a very general framework for arbitrary aggregates in logic programming and nonmonotonic reasoning  where aggregate atoms can also  produce  new values  currently  in both dlp-1 and smodels the guards of the aggregates need to be bound to some value . however  these approaches sometimes amount to a higher computational complexity  pelov  1   and there is no implementation available so far. 
1 	conclusion 
we have proposed dlp-1  an extension of dlp by aggregate functions  and have implemented dlp*1 in the dlv system. on the one hand  we have demonstrated that the aggregate functions increase the knowledge modeling power of dlp  supporting a more natural and concise knowledge representation. on the other hand  we have shown that aggregate functions do not increase the complexity of the main reasoning tasks. moreover  the experiments have confirmed that 
1 
the succinctness of the encodings employing aggregates has a strong positive impact on the efficiency of the computation. 
　future work will concern the introduction of further aggregate operators  the relaxation of the syntactic restrictions of dlp a   and the design of further optimization techniques and heuristics to improve the efficiency of the computation. 
　we thank the anonymous reviewers for their thoughtful comments and suggestions for improvements of this paper. 
