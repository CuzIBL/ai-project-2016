prow: 	a step toward automatic program writing 
         richard j. waldinger carnegie-mellon univ.  pittsburgh  pa. 
richard c. t  lee 
national institutes of health bethesda  md. 

summary 
     this paper aescrides a program  called  pruw   which writes programs. prow accepts the specification of the program in the language of predicate calculus  decides the algorithm for the program and then produces a lisp program which is an implementation of the algorithm. since the construction of the algorithm is obtained by formal theorem-proving techniques  the programs that prow writes are free from logical errors and do not have to be debugged. the user of prow can make prow write programs in languages other than lisp by modifying the part of prow that translates an algorithm to a lisp program. thus prow can be modified to write programs in any language. in the end of this paper  it is shown that prow can also be used as a quest ion-answering program. 
section 1: 	introduction 
     a programmer can easily make two kinds of mistakes. first  the grammar of the programming language that he uses is so complex that he easily makes syntactical errors. second  it is not easy to always think logically  so he is liable to make mistakes in constructing algorithms  thus producing logical errors. 
     much effort has been made in simplifying the programming languages so that programmers w i l l make fewer syntactical errors. although one can s t i l l complain that the advanced languages available today are s t i l l not simple and natural enough  he should find comfort in noting that they are much easier than machine language. 
     as yet  not much has been done to overcome the second d i f f i c u l t y mentioned above. in this paper  the authors w i l l describe a program called  prow   program writing   which is designed for this purpose. prow resembles the  state description  portion of the heuristic compiler  1  by simon and is much in the s p i r i t of slagle  1   raphael and green  l  in fully using the power of formal logic. 
   in prow  the instructions of lisp are axiomatized and stored as axioms. 	the user expresses the relationship between the input and output variables as a well-formed formula in the f i r s t order predisuppose the input and output and 
between them is 	 prcw then constructs the theorem: 


prow f i r s t calls a theorem prover to prove the theorem  thus establishing the existence of the program. the output of the theorem prover is a  proof  of the theorem. prow then calls another program to process the proof and gives the desired program. 
     since prow uses theorem prover to write programs  the programs that it writes are free from logical errors. as shown in section 1  prow can also be used to aid robots  to design circuits as well as to write programs in languages other than lisp. 
     the authors have tried hard to make this paper self-contained. 	however  the readers who want to thoroughly understand  prow  should be familiar with lisp  1  and automatic theorem proving 
 1 1 . 
     it should be noted that the function of prow is quite different from that of a compiler because the user of a compiler  such as a fortran programmer  has to construct the algorithm himself  while the user of prow has only to supply the specifications of his program and prow is able to decide the algorithm for him. 
     the proof of the correctness of the algorithm used in prcw is omitted in this paper because of the limitation of space. 	it w i l l be included in r. waldinger's ph.d. thesis later. 
section 1: the resolution principle and program 
     the theorem prover of prow uses robinson's resolution principle  1 1  as its inference rule. it w i l l be shown later that the ordinary resolution principle is not appropriate and adequate for program writing. this leads to the notion of  primitive resolution  which w i l l be discussed in detail in section 1. 
example 1: the characteristic function of the predicate  atom  in lisp. 
     suppose we want to write a program whose output is 1 if the input is an atom and 1 otherwise. 

-1-



the program represented ty the tree in fig.1 will necessarily involve the testing of x € l  which is not defined or primitive in lisp. 	therefore  the program is meaningless. 	proofs such as 
the one described above which yield non-executable programs must be forbidden. this is achieved as follows: the user of prow may declare which sym-
bols are primitive. only primitive symbols will appear in the program.this is made possible tpy using a special inference rule  called  primitive resolution.  the proof that is obtained by  primitive resolution  is called a  primitive proof.  the program that is obtained by processing a primitive proof contains only primitive symbols. this will be discussed in the next section. 
	section 1: 	the primitive proof and the post-proof 
prpttebspr 
¡¡¡¡in this section  we are going to define a new inference rule  called the  primitive resolution.  the proof that is obtained  by the application of the primitive resolution is called the  primitive proof.  for readers who are interested only in the performance of prow  this section can be skipped. 
¡¡¡¡first of a l l   the user of prow has to declare the following: 
¡¡¡¡ a  primitive symbols: the symbols which are allowed to appear in the program. 
¡¡¡¡ b  insipid clauses: the clauses that the user claims to be always true. 	 all the axioms are 
necessarily insipid  but whether a special hypothesis is insipid or not depends on the user.  
¡¡¡¡ c  output variables: suppose the theorem concerning the program has the following quantifier: 
negation of the theorem will make all the variable 
x 's appear in the clauses as constants  1 . they are called the input constants. all the appear as variables in the clauses and the user has to declare some of the   's as output variables. 
we also need the following definitions: 
def.: halt clause: the set of halt clauses is the set of a l l the clauses that the user provides as input. 
def.: vital clause: the definition of a vital clause is inductive. 
 a  a halt clause that is not declared insipid is a vital clause. 
 b  in a proof  a clause b that is a resolvent of clauses c and d is vital iff one or both of c and d is vital. 
def.: hot variables: the hot variables are also defined inductively. 
-1-













-1-




