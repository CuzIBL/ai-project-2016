 
　　　this paper describes a series of attempts at the solution of a conceptually tough problem  the f i r i n g squad syn-
chronization problem. these attempts demonstrate an increasing reliance on manmachine symbiosis and decreasing reliance on powerful heuristics and preplanning. 
　　　these attempts consist of a c l e r i c a l checking program  and four attempts u t i l i z i n g a basic backtracking program for searching the solution space. the f i r s t two attempts  serial d e f i n i t i o n of productions and symbolic d e f i n i t i o n of productions were non-interactive e n t i r e l y computer directed attempts at s o l u t i o n . the second two  functional planning and constraint satisfaction were man-machine symbiotic attempts designed to allow the human to control and direct the computer search of the solution space. the benef i t s of these symbiotic attempts and the problems encountered with them are discussed. 
introduction 
　　　this is the second of two papers d e t a i l i n g my personal experiences w i t h the f i r i n g squad synchronization problem over the last four years. during this period  i have t r i e d many d i f f e r e n t approaches toward solving the problem. the f i r s t sequence led to the o r i g i n a l best  smallest number of states  minimal time solution yet found; the remaining attempts have been unsuccessful at either improving the solution  reducing the number of states  or proving it is the best possible s o l u t i o n   although they have generated several other minimal time solutions w i t h this same number of states  and from other than an i n t e l l e c t u a l and i l l u s t r a t i v e 
this research is supported by the 
advanced research projects agency under contract no. dahc1 c 1. views or conclusions contained in t h i s study should not be interpreted as representing the o f f i c i a l opinion or policy of arpa. standpoint  were rather unproductive. the f i r s t of these papers dealt with the succession of representations and the key insights they allowed that culminated in the minimal time solution. this paper discusses the unsuccessful attempts from the standpoint of man-machine symbiosis. reviewed chronologically  these attempts demonstrate a continuing e f f o r t to subs t i t u t e problem-oriented heuristics and interaction for brute force and preplanning. 
problem statement 
　　　the problem with which this paper is concerned was f i r s t publicly presented by dr. e. f. moore in 1: 
　　　 the problem known as the firing squad synchronization problem was devised about the year 1 by john m y h i l l   but so far as i know the statement of the problem has not yet appeared in p r i n t . it has been widely circulated by word of mouth  and has attracted s u f f i c i e n t i n terest that it ought to be available in p r i n t . the problem f i r s t arose in connect i o n with causing a l l parts of a selfproducing machine to be turned on simultaneously. the problem was f i r s t solved 
by john mccarthy and marvin minsky  and now that it is known to have a s o l u t i o n   even persons with no background in l o g i c a l design or computer programming can usually find a solution in a time of two to four 
hours. the problem has an unusual elegance in that it is d i r e c t l y analogous to problems of l o g i c a l design  systems design  or programming  but it does not depend on the properties of any particular set of l o g i c a l elements or the instructions of any particular computer. i would 
urge those who know a solution to this problem to avoid divulging it to those 
who are f i g u r i n g it out for themselves  since this w i l l s p o i l the fun of this i n t r i g u i n g problem. 
　　　 consider a f i n i t e  but a r b i t r a r i l y long  one dimensional array of f i n i t e state machines  a l l of which are alike except the ones at each end. the machines 

are called soldiers  and one of the end machines is called a general. the machines are synchronous  and the state of each machine at time t + 1 depends on the states of i t s e l f and of i t s two neighbors at time t. the problem is to specify the states and transitions of the soldiers in such a way that the general can cause them to go into one p a r t i c u l a r terminal state   i . e .   they f i r e t h e i r guns  a l l at exactly the same time. at the beginning   i . e .   t = 1  a l l the soldiers are assumed to be in a single s t a t e   the quiescent state. when the general undergoes the t r a n s i t i o n into the state labeled   f i r e when ready   he does not take any i n i t i a t i v e a f t e r -
wards  and the rest is up to the soldiers. the signal can propagate down the line no faster than one soldier per u n i t of time  
and t h e i r problem is how to get a l l coordinated and in rhythm. the t r i c k y part of the problem is that the same kind of soldier w i t h a fixed number  k  of states  is required to be able to do t h i s   regardless of the length  n  of the f i r i n g squad. in p a r t i c u l a r   the soldier w i t h k states should work c o r r e c t l y   even when n is much larger than k. roughly speaking  none of the soldiers is permitted to count as high as n. 
　　　 two of the soldiers  the general and the soldier farthest from the general  are allowed to be s l i g h t l y d i f f e r e n t from the other soldiers in being able to act w i t h out having soldiers on both sides of them  but their structure must also be independent of n. 
　　　 a convenient way of indicating a solution of this problem is to use a piece of graph paper  w i t h the horizontal coordinate representing the s p a t i a l p o s i t i o n   and the v e r t i c a l coordinate representing time. within the   i   j   square of the graph paper a symbol may be w r i t t e n   indicating the state of the i t h soldier 
a t time j . 	visual examination o f the pattern of propagation of these symbols can indicate what kinds of signaling must take place between the soldiers. 
　　　 any solution to the f i r i n g squad synchronization problem can easily be shown to require that the time from the general's order u n t i l the guns go o f f must be at least 1n - 1  where n is the number of soldiers. most persons solve this problem in a way which requires between 1n and 1n units of time  although occa-
s i o n a l l y other solutions are found. some such other solutions require 1n and of the order of n-squared units of time. for instance  u n t i l recently  it was not known 
what the smallest possible time for a solution was. 	however  this was solved 
at m.i.t. by professor e. goto1 of the university of tokyo. the solution obtained by goto used a very ingenious cons t r u c t i o n   with each soldier having many thousands of states  and the solution required exactly 1n - 1 units of time. in view of the d i f f i c u l t y of obtaining this s o l u t i o n   a much more interesting problem for beginners is to t r y to obtain some solution between 1n and 1n units of time  
which as remarked above  is r e l a t i v e l y easy to do. 
l e i i c h i goto   a minimal time solution 
of the firing squad problem   dittoed course notes for applied mathematics 1  harvard university  may 1   pp. 1  w i t h an i l l u s t r a t i o n in color. also a d i f f e r e n t version of goto's solution is to be published  without the colored i l l u s t r a t i o n .   * 
　　　goto's solution apparently has not been published. however  independently of the present e f f o r t   abraham waksman1 has found a 1-state minimal time solution 
using essentially the same ideas as presented in the following section. fischer1 has also used these ideas in discussing other properties of one-dimensional i t e r a t i v e arrays of f i n i t e - s t a t e machines. 
general outline of a minimal time solution 
　　　the firing squad synchronization problem can be solved by successively subdividing the line into halves  quarters  eighths  e t c .   u n t i l a l l members of the l i n e are d i v i s i o n points. at this time  they a l l can f i r e simultaneously. by 
always d i v i d i n g the l i n e into two equal p a r t s   and then subdividing each of those parts i n t o two equal parts  and so on  the synchronization of the f i r i n g can be 
assured. 
　　　to divide the line i n t o two equal parts  the general simultaneously sends out two signals  si and s1  see fig. 1 . 
　　　*moore  e. f.  1    sequential machines  selected papers   pp. 1. addison wesley  reading  mass. 



for the sake of definiteness  we w i l l assume the general is the rightmost man in the l i n e . si and s1  then  both travel to the l e f t   s1 at a speed of one machine every three time u n i t s . when s1 reaches the far end of the l i n e   the end 
machine sends back a s i g n a l   s1  which travels at a speed of one machine per time u n i t to the r i g h t . signals s1 and s1 w i l l meet at the center of the l i n e   f o r   if p is the length of the l i n e   then s1 and s1 combined have traveled a d i s tance of 1p/1 while s1 has traveled a distance of p/1  a r a t i o of three to one  
which is the same as the r a t i o of t h e i r respective speeds. since s1 moves to the l e f t only once every three u n i t s   the 
machine containing this signal must count to three   i . e .   s1 - 1  s1 - 1  s1 - 1 . by the state of the machine containing s1 and s1 encountered  it can be determined whether the line is of even or odd length  and hence  whether both machines should become middle men or only the one containing s1. these middle men  or man  then act l i k e the o r i g i n a l general  sending out both s1 and s1 signals to the l e f t and also to the r i g h t . this process is repeated over and over u n t i l a l l the 
men in the l i n e are middle men  at which time f i r i n g occurs. 
　　　notice that the above process i n sures the synchronization of the line and 
also permits the determination of the 
f i r i n g condition on a local basis  i . e .   
a machine f i r e s if it is a middle man and the machines on either side of it are 
also middle men. the outside machines f i r e if they are middle men and the 
machine next to it is also a middle man. 
　　　the above process w i l l lead to a three n solution  where n is the length of the l i n e   . the f i r s t middle point is found in 1n/1  the quarter points are found in 1 n/1 /1 additional units of time  and so on. this summation leads to 
a 1n s o l u t i o n . 
　　　the above method can be modified to y i e l d a 1n solution  see fig. 1 . assuming again that the general is the r i g h t -
most machine  we change the process as follows: when s1 reaches the l e f t end of the l i n e   the leftmost machine acts as if it were also a general; i . e .   it sends out two signals to the r i g h t   one s i g n a l   s1  has been discussed a'oove. the second s i g n a l   s1  is l i k e s1  except that it travels to the r i g h t instead of the l e f t . the middle of the l i n e is s t i l l found when s1 and s1 meet. now when the middle man  or men  created sends out signals s1 and s1 to the l e f t  as described above   s1 w i l l meet s1 at the quarter point of the o r i g i n a l l i n e . from the state of the 
machine containing the slower moving s i g n a l   it can be determined  as above  whether the length of the l e f t half of the o r i g i n a l l i n e is even or odd; and hence  whether there should be two or one middle man. notice that the mechanism used to f i n d this quarter point is the same as that used in the 1n s o l u t i o n . however  the process was started e a r l i e r   when the end of the line was reached  and originated at the opposite end of the l e f t half of the l i n e . this process can 
be continued to find the r i g h t quarter point of the l e f t half of the l i n e . 	the length of time necessary to f i n d the quarter point a f t e r the middle point has been found is j u s t the distance between these points  n/1. 	the length of time 
necessary to find the eighth point a f t e r the quarter point has been found is n/1  
and so on. if this rate of finding successive middle points could be maintained  the t o t a l time for a solution would be 1n/1 -i- n/1 + n/1 + n/1 . . .   which equals 1n. however  since the general is counted as one member of the l i n e the remaining line is of length n - 1. hence this solution w i l l take 1 n - 1 . therefore  if the above rate of finding successive 
middle points could be maintained  a minimal time solution would be attained. 
　　　the above process does not produce a solution because  in any i n t e r v a l   it w i l l find only one of the two quarter points in the required length of time. again assuming the general is the r i g h t most man in the l i n e   the above w i l l f i n d only the l e f t quarter point  but not the r i g h t . thus the line w i l l not be synchronized and a solution w i l l not be found. this can be r e c t i f i e d by having the general also send out a s i g n a l   s1  along with s i   and s1  which travels to the l e f t at a rate of one machine every 1 
units of time. this signal and s1 sent from the middle of the l i n e w i l l meet at the quarter point. each middle man now sends out three signals enabling every i n t e r v a l to be divided into quarters in synchronization. however  the rightmost 




eighth point cannot be found as fast as the other eighth points  this is the same problem as above w i t h the rightmost quarter p o i n t   . as above  we can find this point by having the general also send out another signal t r a v e l i n g at a rate of one machine every 1 units of time. in a similar way  the rightmost l /   1 i   t h point in an i n t e r v a l can be found by having the general send out a signal traveling at a rate of one machine every 1t k + 1  - 1 units of time. 
　　　sending out enough of these signals would produce a minimal time solution for any given length of the f i r i n g squad. however  the number of signals required is dependent on the length of the l i n e . since the number of states required for a 
　　　machine is dependent on the number of s i g nals that machine must handle  the number of states required is dependent on the length of the l i n e ; hence  the above does 
not constitute a solution to the f i r i n g squad synchronization problem. 
　　　the above process f a i l s because it cannot f i n d the rightmost  or leftmost if the general starts on the l e f t   l /   1 t k   t h points in an i n t e r v a l   w i t h a given number of states for a l l lengths. if one could have a marker that reached the r i g h t quarter point and then stopped there  and a marker which reached the r i g h t eighth point and then stopped there  
and so on  the problem would be resolved. as the r i g h t traveling signal encountered these markers it would create middle men  
and then the process would begin to subdivide the next i n t e r v a l in the same manner. the t o t a l distance traveled by each of these markers would be h a l f the distance traveled by the marker to i t s l e f t . 
　　　consider the following: a signal travels to the l e f t at a rate of one 
machine every u n i t of time. every second time it moves  it sends out a signal to the r i g h t that travels at a rate of one 
machine every u n i t of time. when this signal reaches a marker  a machine in a given s t a t e   the marker moves one machine to the l e f t . every second time this 
marker has moved  it sends a similar s i g nal to the r i g h t that causes the next marker to move. each marker behaves in t h i s manner  moving to the l e f t when it receives a signal from i t s l e f t ; and every second time it moves  sending a signal to i t s r i g h t for the next marker. f i n a l l y   the general acts as a source of these markers  producing one on i t s l e f t every time a signal is received. 
　　　we now have a system in which each marker travels half as far as the marker in front of i t   and no matter how long the l i n e i s   enough of these markers are produced to properly subdivide the l i n e . 
　　　when the o r i g i n a l signal reaches the end of the l i n e   the same process described above is repeated except that a l l directions are now reversed. when the o r i g i n a l signal reaches the far end of the l i n e   the f i r s t marker has not yet reached the middle of the l i n e because a l l the signals causing it to move have not 
been received. no new signals causing movement of the markers w i l l be produced  and so the markers w i l l u l t i m a t e l y stop at the correct positions in the l i n e . since the movement causing signals t r a v e l at the same rate as the o r i g i n a l s i g n a l   none of these signals can be overtaken by the o r i g i n a l signal from the far end of the l i n e . hence  when this signal reaches the marker  a l l the signals causing that 
marker to move w i l l already have been received; therefore  the marker w i l l be in the correct p o s i t i o n . in any i n t e r v a l   two separate processes are used to find the quarter points. the quarter point farthest from the middle man who i n i t i a t e d the subdivision of the i n t e r v a l is found by the process f i r s t described in the 1n s o l u t i o n . the quarter point nearest this middle man is found by the process j u s t described. the length of time required to find these quarter points a f t e r the 
middle of the i n t e r v a l has been found is equal to the number of machines between the quarter points and the middle point for both processes. hence  the quarter points w i l l be found simultaneously  the solution w i l l remain synchronized  and this process w i l l produce a minimal time solution  since there is an unlimited source of markers  the problem can be solved with a fixed number of states no matter how long the l i n e   . 
solution attempts 
　　　the use of the computer as an aid in solving the f i r i n g squad problem occurred quite e a r l y   but only a f t e r the conceptual framework described above had been establ i s h e d . the f i r s t use of the computer 

was s t r i c t l y clerical in accepting a definition of the soldiers as a set of productions  and producing a simulation of their behavior for a number of different length lines  noting any errors in this behavior. the interaction consisted of scanning the output  deciding on changes  
making them and restarting the process  response time  1 hours . using this mechanism alone  i was able to obtain a minimal time twenty-eight state solution and reduce it to an eight state minimal time solution. at this point i began  
with my trusty computer  searching for a 
better solution or a proof that no better solution existed. while i did not succeed in this search  the attempts provide an interesting collage of some ways a manmachine partnership can be used to attack a conceptually tough problem. 
serial definition of productions 
　　　it was obvious from the f i r s t that brute force could not be used to search the solution space exhaustively  there 
are 1t1 possible seven-state solutions ; so the simplest heuristic above 
brute force was employed  i.e.  don't make any decisions until you must! in the present context this means: 
1  start simulation with a l l productions undefined. 
1  if an undefined production is encountered  define it to the f i r s t state and continue the simulation. 
1  if an error is found  back the simulation up to the definition point of the most recent production  change its definition to the next state  and continue the simulation. 
1  if there are no more states to try in #1 above  move back to the previous production. if there are no more productions quit. 
this process w i l l exhaust the possible search space  finding any solutions which exist or proving that none exist. this is the familiar technique of backtrack programming.1 a second heuristic u t i l i z ing isomorphism among unused states further reduced the search space by approximately two orders of magnitude. there was no interaction with this attempt; the 
computer carried the ball by i t s e l f   fumbling because the search space was s t i l l too large for seven-state solutions. it did  however  prove that no four-state minimal time solution exists. 
symbolic definition of productions 
　　　having failed via backtrack programming to find that a better solution existed or to prove that it didn't  and noting from more than adequate computer output that this technique spent most  would you believe all   of its time looking down implausible t r a i l s   i decided to escalate one more level. instead of holding decisions off until needed  hold them off even longer  making pseudo  symbolic  decisions and continuing. ultimately  each pseudo  symbolic  decision in turn is converted to a real decision in a backtrack programming algorithm and the results of such decision can be observed. we thus have provided a means of lookahead. the results of a decision can be observed at the time of that decision  and so  i thought  large portions of the search space could be pruned earlier. 
　　　this method started a simulation of the firing squad; but  as an undefined production is encountered  rather than decide what state should be produced  a new symbolic state is created  and the simulation continues until a suitably large structure has been built up. then  
via a backtrack programming algorithm symbolic states are converted to actual states. with each such assignment  we f i r s t check to see if a contradiction has 
occurred. the only kind of contradiction that can occur in this approach is two productions that have equal left-hand sides but unequal right-hand sides. such contradictions cause backtracking to occur. second  finding no contradiction  the implications of the assignment are 
handled. these implications occur when two productions exist with equal lefthand sides but with at least one righthand side s t i l l symbolic. to avoid a later contradiction  the right-hand sides 
are equated. these new assignments and any new assignments they produce are processed in the above manner until either a contradiction is found  or no more implications are generated. it is these generated implications that provide the lookahead capability. 

-1-

　　　the amount of look-ahead depends only on the amount of structure  simulation  generated before making actual assignments. the number of symbolic productions generated is proportional to the amount of simulation. unfortunately  the search required to look for contradictions and implications is proportional to the square of the number of productions. when enough structure was generated to get an adequate 
amount of look-ahead  the number of productions generated was large enough to slow the processing down to the point 
where it more than offset any advantage gained from look-ahead  and nothing new was gained from this approach. 
　　　like the exhaustive search method  this approach was handled e n t i r e l y by the 
computer and there was no i n t e r a c t i o n . 
the transition to cooperation 
　　　by now  my f a i l u r e s had me w e l l convinced that i would be unable to exhaust i v e l y search the e n t i r e search space  even as constricted by a suitable set of h e u r i s t i c s   . since i believed  and s t i l l believe  that a seven-state minimal time solution e x i s t s   it made sense to t r y to f i n d one. i t r i e d two approaches  both of 
which consisted of a basic backtrack programming algorithm in the machine  and a man-machine i n t e r f a c e   by which i could make suggestions on where and for what to search. my e n t i r e outlook changed at this point. rather than t r y i n g to b u i l d bigger  more powerful h e u r i s t i c t o o l s   i t r i e d to design simple algorithms that could effect i v e l y be directed by me through the man-
machine i n t e r f a c e . 	i wanted to be able to specify the outline of a s o l u t i o n   in 
my terms  and have the machine f i l l in the details and produce an actual solution of the form specified. in retrospect  this 
may seem l i k e an obvious course to follow; but at the time  although i was f a m i l i a r w i t h on-line environments  i had to undergo a rather traumatic rethinking of the problem  not from an implementation standpoint  which was f a i r l y straightforward   but on the conceptual l e v e l . i had to switch my thinking from  how can i  embodied either as myself or as a noni n t e r a c t i v e program  f i n d a solution   to how can we f i n d a solution  i think the two approaches discussed below show t h i s s h i f t in viewpoint; and  as they are presented chronologically  also an increased emphasis on i n t e r a c t i o n   feedback  and control of the search process. 
functional planning 
　　　from my attempts to f i n d solutions  it was apparent that i started w i t h a plan  or o u t l i n e   that stated what job or group of jobs each state in the attempted solution would perform. that i s   each state was given a function  such as being a middle man  that it was expected to perform. i therefore called this a c t i v i t y functional planning. a f t e r deciding on such a functional plan  i t r i e d to define a set of productions that caused each state to perform as specified in the plan. notice that in this approach  as contrasted w i t h the constraint satisfaction presented next  the d e f i n i t i o n of a funct i o n is specified on a l o c a l  through productions  rather than global basis. 
　　　viewed as a cooperative venture  i would propose a plan in terms of the functions desired for each state and the computer would search the necessary solution space to determine whether or not a set of productions existed that s a t i s f i e d the given plan. 
　　　the functions i used in my attempts-and that i envisioned using on further attempts--could a l l   w i t h one exception  be defined by t h e i r i n t e r a c t i o n with other states on a local basis. these functions could therefore be defined by a set of productions or by a set of r e s t r i c t i o n s on the resultant of certain productions. the basic backtracking program could s t i l l be used to do the searching by a l t e r i n g i t s behavior so that through an input language i could define some productions that would remain unalterable  and r e s t r i c t the set of allowed states for the resultants of some other productions. 
　　　the one function that could not be defined in this manner was the middle man. the reason being that this concept is not local--the determination of the middle of the l i n e involves the e n t i r e l i n e . the other functions considered are those described in the section - general descript i o n of the minimal time solution. basic a l l y   a l l the plans proposed were merely attempts to realize t h i s general type of solution w i t h the given number of states. 

-1-

     this approach was the most successful from two standpoints. first  because it 
was fairly easy to crank out several different eight-state minimal time solutions including the one presented in my thesis1 
and the one for which an induction proof was obtained.  the plan was specifically designed to make this proof easier.  second  and more important  this approach produced a conceptual addition to my thinking about the problem. in an effort to specify a plan through production restrictions  i discovered the idea of what i call image solutions which are a formal way of saying that the processes going on 
in one part of the line ought to be also occurring in an  image form  with the directions reversed and using different states in some other part of the line at some other time. that i s   a l l interactions within the line ought to have a counterpart occurring in the opposite direction. this viewpoint also led to the idea of image states that specify the correspondence between states within image processes. note that this conceptual breakthrough  which i now consider basic to any heuristic search for a solution  
arose not through any actual man-machine interaction but through a man-machine symbiotic relationship in which the need to communicate a complex feature of a plan occurred; i.e.  the machine acted only as a catalyst  not taking any active role in the discovery. 
     the interaction for this approach involved observing on-line the simulation 
behavior as it was periodically printed  and deciding whether or not to let the program proceed. if the decision were made to stop the simulation  a new input specification of the plan had to be prepared before restarting the program. it usually took between 1 to 1 minutes to decide what modifications to make to the plan specification  and about one minute to actually make them and restart the program. the environment under which this 
was performed was a non-multiprogrammed batch machine for which i was the sole user during my signup periods. thus  although i was running in a standard batch off-line environment  i was really on-line with the program with an effective response time of one minute. 
we frequently talk about the response time of a computer system but almost never about the human response time  except for such trivia as the time to hit a key. in the above man-machine system  my response time was over an order of magnitude longer than the machine's; thus i did not feel  during my work  that the machine was not adequately handling its portion of our partnership. furthermore  it is hard to see how the machine  for this approach  could have further aided 
me to cut down my response time. i was s t i l l performing too much work in our partnership; work for which my processing capabilities were not well suited. 
constraint satisfaction 
　　　the last attempt at finding a solution resulted from the problems encountered in functional planning; mainly that i was s t i l l supporting too much of the load in terms of real effort expended per iteration. i tried to find a way of specifying a plan that was more natural to the way i was conceptualizing the problem. 
　　　my basic representation was the two dimensional one suggested by moore1 and ray plan followed the kinds of ideas expressed in the section   general outline of a minimal time solution1. i wanted an easy way of communicating this to the machine. because i was used to looking at a simulation and  by observing its behavior at various points  seeing if it f o l lowed my plan  i decided to specify its behavior in the same way--the medium is the message. that i s   i could specify 
what state should occur at various points and along various lines in the two dimensional representation  and then let the computer--using the trusty backtracking simulation program--see if it could satisfy these constraints. 
     a graphical interactive program1 was constructed that utilized an ibm 1 
with a rand tablet as the interface device. with this program  i could quickly and easily specify  in graphical form  the constraints i desired along any straight line or at any point. in addition  to help further restrict the search space  i could define frozen  unalterable by the computer  productions. i was able to specify on-line: what length line to 
work on; what the names of the states should be; whether image solutions were 

-1-

desired or not  and if so what the mapping between image states would be; whether the computer should display the simulation as it did it or whether it should run autono-
mously; when it should stop  after each time u n i t in the simulation  or only on 
asynchronous i n t e r r u p t s   ; which productions to freeze or thaw; and whether the f i r s t occurrence of each production should 
be brightened or not. 
　　　a l l of this was designed to provide me with a f a s t   f l e x i b l e   and f a c i l e cont r o l of the search. this it d i d ; i was 
able to very quickly specify a set of constraints and some frozen productions  turn the system loose and get a solution for the given length. this  i think  is 
a noteworthy advancement over the other approaches. 
　　　however  t h i s approach suffered from two problems. f i r s t were operational ones such as a t e r r i b l e f l i c k e r on the screen that made it very annoying to use the system  and not enough core to include routines to save the current status so that at some l a t e r time the system could 
be restarted at that point. second  the use of the system pointed up some lack of foresight in the design of the interac-
t i v e 	simulator. 
　　　f i r s t   the constraints were specif i e d for only one length; and when a successful solution was found for that length  they had to be re-entered  s l i g h t ly modified  before t r y i n g the next length. this became a very tiresome 
chore  one that should be automated in the next pass on such a system. second  i did not include the c a p a b i l i t y in funct i o n a l planning to t a l k about classes of states in the constraints. this proved to be a grave mistake  forcing me to overspecify my plans. f i n a l l y   i had no i n k l i n g beforehand that i constantly 
would want to constrain a l l states w i t h i n a polygon to be members of a class of states. but t h i s turned out to be a rather basic part of the plans; and w i t h out t h i s c a p a b i l i t y   again  i was forced to overspecify the plan t desired. 
summary 
　　　from t h i s series of attempts  and my other experiences w i t h man-machine i n t e r a c t i o n   allow me a few observations. f i r s t   often one can get much further 
-1-
w i t h a rather simple  slow interactive system than he can alone--a l i t t l e symbiosis goes a long way. second  the need to communicate an idea  an aspect of a problem  a plan  or whatever  often produces a much better understanding or even a new way of viewing the thing to be communicated--independent of any l a t e r gain from the party to which the informat i o n was communicated  be it man or machine. t h i r d   the human response time should be a c r i t i c a l design factor  espec i a l l y if the task area includes real problem-solving c a p a b i l i t i e s from the human; and this human response time should in large part determine the  tightness  or  binding  of the i n t e r a c t i v e r e l a t i o n s h i p . f i n a l l y   no matter how much experience one has had w i t h designing and building i n t e r active systems  and no matter how well he knows the task area  he cannot foresee a l l of the factors that w i l l turn out to be relevant in this system; hence  a good i n t e r a c t i v e system w i l l require several passes to produce. let us not be so shortsighted to realize that the product we are touting so highly for eliminating much preplanning--man-machine s y m b i o s i s is also required by us in the b u i l d i n g of such systems. 
acknowledgement 
　　　　i am indebted to dr. a l l e n newell who introduced me to the f i r i n g squad problem and guided me through the solut i o n attempts described in this paper. i also wish to express my thanks to 
robert shirey who designed and b u i l t the firing squad constraint s a t i s f i e r program used in my most recent solution attempt. 
