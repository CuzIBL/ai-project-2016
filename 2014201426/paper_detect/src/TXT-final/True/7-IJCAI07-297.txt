
the use of mutual exclusion  mutex  has led to significant advances in propositional planning. however  previous mutex can only detect pairs of actions or facts that cannot be arranged at the same time step. in this paper  we introduce a new class of constraints that significantly generalizes mutex and can be efficiently computed. the proposed long-distance mutual exclusion  londex  can capture constraints over actions and facts not only at the same time step but also across multiple steps. londex provides a powerful and general approach for improving planning efficiency. as an application  we have integrated londex into satplan1  a leading optimal planner. experimental results show that londex can effectively prune the search space and reduce the planning time. the resulting planner  maxplan  has won the first place award in the optimal track of the 1th international planning competition.
1 introduction
propositional planning entails arranging a course of actions in order to achieve certain goals subject to logical conditions and effects of actions. propositional planning has traditionally been formalized as deduction  green  1 and is known to be pspace-complete  bylander  1 . previous work on this deduction paradigm has achieved limited success and can only handle small cases.
　emerging as one of the most efficient techniques for propositional planning  mutualexclusion  mutex was introducedin graphplan blum and furst  1 to construct constraints for actions and facts. in graphplan  two actions at the same level are persistent mutex actions if one action deletes a precondition or an add-effect of the other  or the two actions have mutual exclusive preconditions. during the search  mutex constraints are enforced to prune the search space.
　since its invention  mutex has been extensively studied and led to the development of many efficient planners. for example  gerevini and schubert proposed new state constraints from forward propagation of mutex  gerevini and schubert  1   smith and weld  penberthy and weld  1  and gerevini  et al.  gerevini et al.  1  extended mutex to temporal planning  and kautz and selman encoded mutex constraints in the blackbox  kautz and selman  1  and satplan1  kautz  1  planners. note that almost all existing fast planners for different applications are based on mutex. for example  the lpg temporal planner by gerevini  et al.  gerevini et al.  1  won the first prize of the suboptimal track of the 1rd international planning competition  ipc   and satplan1 won the first prize of the optimal track of the 1th and 1th ipcs.
　despite its success  mutex has a major limitation that it can only detect conflicts between a pair of actions or facts in the same time step  but it is unable to capture constraints relating actions and facts in different steps. on the other hand  long distance constraints are ubiquitous in almost all planning domains. for example  in a transportation problem  two actions requiring to use the same truck but at different locations cannot be arranged too close to each other in time since the truck has to be relocated after the first action.
　in this research  we have developed long-distance mutual exclusion  londex   a novel class of constraints for propositional planning. unlike mutex that is based on a boolean fact representation  londex is derived from domain transition graphs  dtgs  on a multi-valued domain formulation  mdf   jonsson and backstrom  1  of a planning problem. table 1 compares the key features of londex and mutex. as a superset of mutex  londex can capture constraints relating actions and facts not only in the same time step  but also across multiple steps. an important utility of londex is for measuring the minimum distance between a pair of actions to prune a search space and improve the planning efficiency. for example  for the truck1 problem from ipc1  ipc  1   satplan1 generates 1 mutex constraints  whereas our method using londex produces 1 1 londex constraints which result in a 1 speedup in time when incorporated in satplan1.
　the paper is organized as follows. in section 1  we define the basic concepts and review the conventional mutex. we then discuss the mdf representation and introduce londex in section 1. we incorporatelondex in the satplan1 planner to develop our new planner  and evaluate its performance on ipc1 benchmark problems in section 1. we discuss related work in section 1 and conclude in section 1.
propertymutexlondexrepresentationboolean factsmdfgeneration timepolynomialpolynomialrelevant level s same levelmultiple levelsfact constraintsfrom actionsfrom dtg analysisaction constraintsfrom add/del/pre factsfrom fact distancesquantitymoderatelargepruningmoderatestrongrelationshippersistent mutex   londextable 1: comparison of persistent mutex and londex.
1 propositional planning and mutex
propositional planning requires to generate a sequence of actions in order to accomplish a set of goals. propositional planning can be described in the strips formalism  which is represented by a set of boolean facts. given a set of facts f = {f1 f1 ，，，  fn}  a state s is a subset of f where every fact in s is true.
example 1. a simple cargo planning problem concerns moving a piece of cargo c among three locations l1 l1 and l1 using a truck t. the fact set f includes all the facts about possible locations of the truck and the cargo  such as at t l1   at c l1   and in c t . a state specifies the current status. for example  s = {at t l1  at c l1 }.
definition 1 an	action	o	is	a	triplet	o	=
 pre o  add o  del o    where pre o    f is the set of preconditions of action o  and add o    f and del o    f are the sets of add facts and delete facts  respectively.
the result of applying an action o to a state s is defined as:
;
consequently  applying a sequence of actions results in result s p  =
	 s o1  o1  ，，，on .	alter-
natively  a set of actions can be performed in a parallel plan with a number of time steps  where multiple actions can be executed in a time step.
definition 1 a planning task is a triplet t =  o i g   where o is a set of actions  i   f is the initial state  and g   f is the goal specification.
definition 1 persistent mutex of actions. actions o1 and o1 are mutex when any of the following sets is not empty: pre o1 ”del o1  pre o1 ”del o1  del o1 ”add o1   and del o1 ”add o1   or when there exist two facts f1 （ pre o1  and f1 （ pre o1  that are mutex.
definition 1 persistent mutex of facts. two facts f1 and f1 are mutex if there do not exist two non-mutex actions o1 and o1 such that f1 （ add o1  and f1 （ add o1 .
　the mutex constraints defined above  blum and furst  1; gerevini et al.  1  are persistent in the sense that they are always effective  regardless of the initial state or the level of a planning graph. blum and furst  blum and furst  1  also suggested to derive non-persistent mutex dependent of initial states and levels. however  deriving non-persistent mutex usually requires to construct a planning graph  which is expensive and impractical for large problems.
as a result  many fast planners only use persistent mutex constraints. in the rest of the paper  when we mention mutex  we refer to persistent mutex.
1 long-distance mutual exclusion  londex 
to develop londex  we first consider the multi-valued formulation of propositional planning.
1 domain transition graph
the multi-valued domain formulation  mdf   jonsson and backstrom  1  translates boolean facts into a more compact representation using multi-valued variables  where each variable represents a group of boolean facts in which only one of them can be true in any state.
　the mdf representation of a propositional planning domain is defined over a set of multi-valued variables: x =  x1 x1 ，，，  xm   where xi has a finite discrete domain di.
　for a planning problem  the value assignment of a multivalued variable in mdf corresponds to a boolean fact. given an mdf variable assignment x = v and a boolean fact f  we can denote this correspondence as f = mdf x v .
　an mdf state s is encoded as a complete assignment of all the variables in x: s =  x1 = v1 x1 = v1 ，，，  xm = vm   where xi is assigned a value vi （ di  for i = 1 ... m. example 1. to formulate example 1 in mdf  we use two mdf variables  locationt and locationc to denote the locations of the truck and the cargo  respectively. locationt can take values from dt = {l1 l1 l1} and locationc from dc = {l1 l1 l1 t}. an example state is s =  locationt = l1 locationc = t .
　for every multi-valued variable in mdf  there is a corresponding domain transition graph defined as follows.
definition 1  domain transition graph  dtg  . given an mdf variable x （ x with domain dx  its dtg gx is a digraph with vertex set dx and arc set ax. there is an arc  iff there is an action o with del o  = v and
  in which case the arc  is labeled by o and we say there is a transition from by action o.
definition 1  fact distance in a dtg . given a dtg gx  the distance from a fact f1 = mdf x v1  to another factor f1 = mdf x v1   written as Δgx f1 f1   is defined as the minimum distance from vertex v1 to vertex v1 in gx.
example 1. in the cargo example  the cargo can be loaded into the truck or unloaded at a location  and the truck can move among different locations. the dtgs of the cargo and truck are shown in figure 1. in the figure  Δglocationc  mdf c l1  mdf c l1   = 1  and
Δglocationt  mdf t l1  mdf t l1   = ±.
　following a method used in the fast downward planner  helmert  1   we have implemented our own preprocessing engine to generate dtgs. the main steps of the preprocessing include detecting invariant fact groups  finding mdf variables  and generating the value transitions for each mdf variable. details of the algorithm can be found in helmert's paper  helmert  1 .

figure 1: dtgs for mdf variables locationc and locationt in example 1.
1 generation of londex constraints
we now define londex based on the mdf representation. we define t f  as the time step at which the fact f is valid  and t o  as the time step at which an action o is chosen. londex constraints for facts. given two boolean facts f1 and f1  if f1 and f1 correspond to two nodes in a dtg gx
  then there is no valid plan in which
.
example 1. continuing from example 1  if at c l1  is true at time step 1  then at c l1  cannot be true before step 1. londex constraints for actions. for simplicity  we say that an action o is associated with a fact f if f appears in pre o  add o   or del o . given two actions a and b  we consider two classes of londex constraints between them. class a. if a and b are associated with a fact f  a and b are mutually exclusive if one of the following holds.
1  f （ add a   f （ del b   and t a  = t b ;
1  f （ del a   f （ pre b   and 1 ＋ t b    t a  ＋ 1;
　note that a 1  and a 1  are stronger than the original mutex due to the inequalities in a 1 . if we replace the inequalities in a 1  by t a  = t b   a 1  - a 1  are equivalent to the original mutex.
class b. if a is associated with fact f1  b is associated with fact f1  and it is invalid to have 1 ＋ t f1    t f1    r according to fact londex  then a and b are mutually exclusive if one of the following holds.
1  f1 （ add a   f1 （ add b   and 1 ＋ t b    t a  ＋ r   1; 1  f1 （ add a   f1 （ pre b   and 1 ＋ t b    t a  ＋ r;
1  f1 （ pre a   f1 （ add b   and 1 ＋ t b    t a  ＋ r   1; 1  f1 （ pre a   f1 （ pre b   and 1 ＋ t b    t a  ＋ r   1.
　intuitively  since two facts f1 and f1 in the same dtg cannot appear too closely due to the structure of the dtg  two actions associated with these facts should also keep a minimum distance. for example  in case b 1   if a is executed at time t a   then f1 is valid at time t a  + 1. since the fact distance from f1 to f1 is larger than r  f1  the precondition of b  cannot be true until time t a  + 1 + r  which means b cannot be true until time t a  + 1 + r. other cases can be proved similarly.
　the procedure to generate the londex constraints is in table 1  in which ea1 f  represents all class-a action londex related to a fact f  and ea1 f1 f1  denotes all class-b action londex related to a pair of facts f1 and f1 in a dtg. example 1. in the cargo example  mutex can only detect the constraints that the truck cannot arrive at and leave the same location at the same time. for example  move t l1 l1  and move t l1 l1  are mutually exclusive because move t l1 l1  deletes at t l1  while
1. procedure generatelondex  p 
 input: a strips planning problem p 
 output: londex constraints for facts and actions 
1. generate the dtgs for p;
1. generate fact londex based on the dtgs;
1. for each fact f do
1. generate action londex in ea1 f ;
1. for each dtg graph gx do
1. for each pair of facts  f1 f1   f1 f1 （ gx do
1. generate action londex in ea1 f1 f1 ; 1. end proceduretable 1: generation of londex constraints.
move t l1 l1  adds at t l1 . in contrast  londex is stronger as it specifies that two actions using the same truck  even if they happen at different time  may lead to a conflict. for example  if l1 and l1 are 1 steps apart in a dtg  then the conflict of arranging move t l1 l1  at step 1 and move t l1 l1  at step 1 is a londex but not a mutex.
1 analysis of londex constraints
in this section  we study the completeness  computation complexity  and pruning power of londex constraints.
proposition 1 for any planning problem p  the set of persistent mutex is a subset of londex.
　this is true by the definitions of mutex and londex. the class a action londex include all persistent action mutex.
proposition 1 londex constraints can be generated in time polynomial in the number of facts.
proof. due to space limits  we only sketch the time results here. we denote the numberof facts as |f| and the plan length as t. we use s to denote the upper bound of the number of preconditions  add effects  or delete effects that any action may have in a planning domain. usually s is a small constant for most planning domains. the time to generate the dtgs is o s|f|1 . the time to generate class a londex is o ts1|f|   and the time to generate class b londex is o ts1|f|1 . therefore  the total time complexity for the algorithm is o ts1|f|1   which is polynomial in |f|.
　proposition 1 gives the worst case complexity guarantee to generate all londex constraints. this is comparable to the polynomial time complexity to generate mutex constraints  blum and furst  1 . empirically  our preprocessor takes less than 1 seconds to generate all londex constraints for each of the problems in ipc1  which is negligible comparing to the planning time that londex can help reduce  often in thousands of seconds for large problems.
　table 1 illustrates the use of londex in reducing planning time. we can compare the size of mutex constraints derived by blackbox and satplan1  two sat-based planners using mutex  and the londex constraints. the amount of londex constraints is 1 to 1 times larger than that of mutex  depending on planning domains. it is evident from table 1 that incorporating londex in a sat planner  although largely increases the size of the sat instance  can significantly reduce the speed of sat solving because of the much stronger constraint propagation and pruning.
methodsizeu. p.decisionstimesatplan1.11e11blackbox1e1.11.1satplan1+londex1e1.11.1table 1: comparison of the number of constraints  unit propagations  up   decisions  and solution time of satplan1  blackbox  and satplan1 with londex  for solving the truck1 problem from ipc1 at time step 1.
1. procedure satplan1+londex
 input: a propositional planning problem p 
1. generate the dtgs and londex constraints for p;
1. set k to be an lower bound of the optimal plan length;
1. repeat
1. convert p to a planning graph with k time steps;
1. translate the planning graph into a sat instance;
1. add the londex constraints to the sat;
1. solve the sat instance by a generic sat solver;
1. if  the sat instance is satisfiable 
1. convert the sat solution to a propositional plan; 1.	else increase plan length by one  k ○  k + 1; 1.	until a solution is found.
1. end proceduretable 1: the framework of satplan1+londex.
1 experimental results
as an application of londex  we incorporated londex constraints in satplan1  kautz  1   a leading sat-based optimal propositional planner which attempts to minimize the number of time steps. satplan1 converts a planning problem to a boolean satisfiability  sat  problem and solves it using a sat solver. satplan1 uses an action-based encoding that converts all fact variables to action variables. besides some goal constraints and action-precondition constraints  most of the constraints in the sat are binary constraints modeling the mutex between actions.
　we replaced the mutex constraints with londex constraints  and kept other components of satplan1 unchanged. following the action-based encoding of satplan1  we used a boolean variable vi j to represent the execution of an action oi in time step j. if an action oi1 in time step j1 and an action oi1 in time step j1 were mutually exclusive due to a londex constraint  the clause  vi1 j1 ‥  vi1 j1 was generated.
　the resulting algorithm satplan1+londex is shown in table 1. starting from a lower bound k of the optimal plan length  satplan1+londex iteratively solves  for each targeted plan length k  a converted sat problem augmented by londex constraints. the method increases k until the optimal plan length is reached. we only need to generate all londex constraints once and save them for use by all steps.
　the current default sat solver in satplan1 is siege  ryan  1 . in our experiments  we found that running siege in satplan1+londex caused memory-related errors.since the source code of siege is not available  it is impossible for us to modify its parameters to accommodate a large memory requirement. we thus chose to use a different sat solver minisat  ee＞n and biere  1  in satplan1+londex. we ran all our experiments on a pc work-
domainsnlondex+minisatminisatsiegeopenstacks1 
1
 1tpp
truck storage pathways1
1
1
1
 
1
  1
 
1
 1
1
1
1
1
1
1pipeworld rovers1
1
 
1
1
1 
table 1: the number of instances each method can solve for the ipc1 domains. n is the total number of problem instances in each domain. we highlight in box the better one between londex+minisat and minisat if there is a difference.
station with intel xeon 1 ghz cpu and 1 gb memory.
　to evaluate the effect of londex constraints  we compared satplan1 with minisat  denoted as minisat in tables 1 and 1  and satplan1+londex with minisat  denoted as londex+minisat in the tables . as a reference  we also ran the original satplan1 with siege  denoted as siege in the tables . all these algorithms have the same solution quality  in terms of number of time steps  since they are optimal  so we focused on comparing their running time.
　table 1 shows the performance of the three algorithms on the seven planning domains used in the 1th ipc  ipc1   ipc  1 . these domains were selected from a variety of real-world application domains  such as transportation scheduling  truck  tpp   production management  openstacks   crate storage  storage   molecular biology  pathways   petroleum transportation  pipeworld   and rover motion planning  rover . each domain contains a number of problems  and the table includes the number of problems in each domain which each algorithm can solve under a thirtyminute time limit.
　as shown table 1  minisat with londex can solve more problem instances in all the domains than minisat with mutex. for example  satplan1 with minisat can only solve 1 problems in rovers  whereas satplan1+londex with minisat can solve 1 problems. furthermore  although not directly comparable due to the use of different solvers  satplan1+londex with minisat outperforms satplan1 with siege in 1 out of the 1 domains. the problems only solvable by satplan1+londex but not others are typically very large  with tens of millions of variables and clauses.
　since most methods can easily solve small problem instances in ipc1 and the problem difficulty in each domain grows exponentially with problem size  we are particularly interested in the performance of the three methods on large  difficult instances. table 1 shows the solution times for the three largest problems that at least one of the three methods can solve in each domain. the result shows that except for the tpp and pipesworld domains  using londex constraints with minisat can help satplan1 solve more large  difficult instances in substantially less time. we note that most of dtgs generated from the tpp and pipesworld domains contain only few fact nodes. as londex reasoning can only generate constraints between facts  or associated actions  within the same dtg  fewer fact nodes in the same dtg usually means fewer
problemlondex+minisatminisatsiegeopenstacks1 openstacks1 openstacks1	 1
	 1
	 1
		-
-
--
-
-tpp1
tpp1	 1
		
1
	 1
	1
1tpp1--1truck1 truck1 truck1	 1
	 1
	 1
		-
-
--
-
-storage1 storage1 storage1	 1
	 1
	 1
		1
1
-1 pathways1 pathways1 pathways1	 1
	 1
	 1
		1
	 1
	
-1
1
-pipesworld1	 1
	1pipesworld1--1pipesworld1--1rovers1 rovers1 rovers1	 1
	 1
		
1-
-
--
-
-		
table 1: the solution time in seconds for some largest problem instances from ipc1. for each domain  we show the three largest problems that at least one method can solve.  -  means timeout after 1 seconds. we highlight in box the better one between londex+minisat and minisat if there is a difference.
 and thus weaker  londex constraints. therefore  the relatively unsatisfactory performance of satplan1+londex in the two domains is likely due to this special propertyof dtgs on these two domains.
　we also notice that satplan1+londex with minisat is extremely efficient on the openstacks  trucks  and rovers domains. we are studying the underlying structures of these three domains to further understand the reasons for the superior performance.
1 related work and discussion
the notions of multi-value formulations and domain transition graph can be traced back to the work of jonsson and backstrom on planning complexity  jonsson and backstrom  1   and even to some earlier work of backstrom and nebel on sas+ system  backstrom and nebel  1 . the use of such representations can result in more compact encodings than boolean-fact representations. example planners employing these representations include fast downward  helmert  1  and the ipp planner  briel et al.  1 . fast downward is a best-first search planner that utilizes the information from domain transition graph as the heuristic to guide the search. ipp is a planner based on integer programming.
　several previous works have exploited various kinds of mutex reasoning or constraint inference among state variables. for example  forward and backward reachability analysis has been studied in order to generate more mutex than graphplan  do et al.  1; brafman  1 . fox and long used a finite state machine graph to enhance the mutex reasoning in the stan planner  fox and long  1 . bonet and geffner in hsp proposed another definition of persistent mutex pairs by recursively finding the conflicts between one action and the precondition of the other action  bonet and geffner  1 . however  all these previous mutexes relate actions and facts at the same level  and do not provide constraints for actions and facts across multiple leves like londex does. kautz and selman  kautz and selman  1  as well as mccluskey and porteous  mccluskey and porteous  1  studied hand-coded domain-dependent constraints. other earlier works that explore constraint inference include  kelleher and cohn  1  and  morris and feldman  1 .
　our londex constraints are derived from the fact  or action  distances. an earlier attempt along this line of research  i.e.  to derive constraints from distance  was made by chen and van beek  van beek and chen  1  who have used hand-coded distance constraints in their csp formulation for planning. vidal and geffner also used distance constraints in their cpt planner  vidal and geffner  1 . however  these distance constraints require either domain knowledge or an expensive reachability analysis that depends on the initial states. comparing to them  londex constraints based on dtgs are not only domain-independent but also much richer and stronger to capture constraints across different time steps  as it providesa systematic representationof state-independent distance constraints.
　a sat-based planner falls into the broad category of transformation-based planning  selman and kautz  1; kautz et al.  1; kautz and walser  1; wolfman and weld  1; wah and chen  1; chen et al.  1   which transforms a planning problem into a different formulation before solving it. however  no consensus has yet been reached regarding which formulation is the best among all that have been considered. furthermore  all transformationbased planners used generic constraint solvers to solve encoded problems. however  by treating constraint solving in a black-box manner  intrinsic structural properties of planning problems are largely ignored.
1 conclusions and future work
we have proposed a new class of mutual exclusionconstraints that are capable of capturing long distance mutual exclusions across multiple steps of a planning problem. we abbreviated such long distance mutual exclusions as londex. londex constraints are constructed by the mdf and dtg representations of a propositional planning problem. londex contains as a subset the persistent mutex which includes only constraints within a same time step  and provides a much stronger pruning power. we have incorporated londex in satplan1 and experimentally evaluated the impact of londex to planning efficiency on a large number of planning domains. our experimental results show that londex significantly reduces the planning time in most domains.
　even though we have studied londex under the context of optimal planning  it can be directly applied to other planning paradigms  such as stochastic search in lpg  mathematical programming in sgplan  wah and chen  1; chen et al.  1   and integer programming in the ip planner  briel et al.  1 . we are also studying how to extend londex to temporal planning.
1 acknowledgments
the research was supported in part by nsf grants itr/eia1 and iis-1  and an early career principal investigator grant from the department of energy. we thank the anonymous referees for their very helpful comments. 