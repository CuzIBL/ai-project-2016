 
this paper investigates the evaluation method of decision procedures for multi-modal logic proposed by giunchiglia and sebastiani as an adaptation from the evaluation method of mitchell et al of decision procedures for propositional logic. we compare three different theorem proving approaches  namely the davis-putnam-based procedure ksat  the tableaux-based system ktus and a translation approach combined with first-order resolution. our results do not support the claims of giunchiglia and sebastiani concerning the computational superiority of ksat over kris  and an easy-hard-easy pattern for randomly generated modal formulae. 
1 	introduction 
there are a variety of automated reasoning approaches for the basic propositional multi-modal logic k m  and its syntactical variant  the knowledge representation formalism alc. some approaches utilize standard firstorder theorem proving techniques in combination with translations from propositional modal logic to first-order logic  ohlbach and schmidt  1 . others use gentzen systems  goble  1 . still others use tableaux proof methods  baader and hollunder  1 . 
모usually  the literature on theorem provers for modal logic confines  itself to a description of the underlying calculus and methodology accompanied with a consideration of the worst-case complexity of the resulting algorithm. sometimes a small collection of benchmarks is given as in  catach  1 . however  there have not been any exhaustive empirical evaluations or comparisons of the computational behavior of theorem provers based on different methodologies. 
모giunchiglia and sebastiani  1a; 1b  changed that. they report on an exhaustive empirical analysis of a new theorem prover  called ksat  and the 
1 	automated reasoning 
tableaux system ktus. ksat is an adaptation for the multi-modal logic k m  of a sat-procedure for checking satisfiability in propositional logic. the evaluation of giunchiglia and sebastiani has some shortcomings which we address. the random generator used to set up a benchmark suite produces formulae containing a substantial amount of tautologous and contradictory subformulae. it favours the sat-procedure ksat which utilizes a preprocessing routine that eliminates trivial tautologies and contradictions from the formulae. this property of the random formulae mislead giunchiglia and sebastiani in their analysis and comparison of ksat and ktus. we show the random generator does not produce challenging unsatisfiable modal formulae. 
모the paper is structured as follows. in sections 1  1 and 1 we briefly describe the inference mechanisms of ksat  ktus and the translation approach. section 1 describes the evaluation method of giunchiglia and sebastiani. the main part is section 1 which evaluates the test method. 



	hustadt & schmidt 	1 


1 	the test method 
the evaluation method adopted by giunchiglia and sebastiani follows the approach of mitchell et al . to set up a benchmark suite for davis-putnam-based theorem provers mitchell et al generate propositional formulae using the fixed clause-length model. giunchiglia and sebastiani modify this approach for k m . 
모there are five parameters: the number of propositional variables n  the number of modalities m  the number of modal subformulae per disjunction k  the number of modal subformulae per conjunction l  the modal degree 1  and the probability p. based on a given choice of parameters random modal -rtcnf formulae are defined inductively as follows. a random  modal  atom of degree 1 is a variable randomly chosen from the set of n propositional variables. a random modal atom of degree d  d 1  is with probability p a random modal atom of degree 1 or an expression of the form 뫳붯  otherwise  where 뫳  is a modality randomly chosen form the set of m modalities and 붯 is a random modal if cnf clause of modal degree d-l  defined below . a random modal literal  of degree d  is with probability 1 a 
random modal atom  of degree d  or its negation  otherwise. a random modal kcnf clause  of degree d  is a disjunction of k random modal literals  of degree d . now  a random modal kcnf formula  of degree 
d  is a conjunction of l random modal kcnf clauses  of degree d . 
모for the comparison of the performance of ksat and kris  giunchiglia and sebastiani proceed as follows. they fix all parameters except l  the number of clauses. 
for example  they choose n=1  m = l   k=1  d=1  and 
p=1. the parameter l ranges from n to 1n. for each value of the ratio l/n a set of 1 random modal kcnf formulae of degree d is generated. we will see that for small l the generated formulae are most likely to be satisfiable and for larger l the generated formulae are most likely to be unsatisfiable. for each generated formula  p they measure the time needed by one of the decision procedures to determine the satisfiability of 붯. since checking a single formula can take arbitrarily long in the worst case  there is an upper limit for the cpu time consumed. as soon as the upper limit is reached  
1 	automated reasoning 

the computation for 붯 is stopped. if the computation for more than 1% of the formulae of a set associated with a value of l has been abandoned  then the computation for the set is discontinued. now  the median cpu time over the ratio l/n is presented. for example  the graphs of figure 1 show the performance of kris and ksat on the parameter settings pso  n=1  m = l   k=1  d=1  and ps1  n=1  m = l   k=1  d=1 . our tests have been run on a sun ultra 1e with 1mb main memory using a time-limit of 1 cpu seconds. altogether giunchiglia and sebastiani  1b  present graphs for ten different parameter settings. based on their graphs including figure 1 they come to the following conclusions: 
 1  ksat outperforms by orders of magnitude the pre-vious state-of-the art decision procedures. 
 1  all sat-based modal decision procedures are intrin-sically bound to be more efficient than tableauxbased decision procedures. 
 1  there is partial evidence of an easy-hard-easy pat-tern on randomly generated modal logic formulae independent of all the parameters of evaluation considered. 
we show that the situation is more complex and does not justify such strong claims. for our analysis it suffices to 
focus on the settings pso and ps1 of figure 1. 
1 	analysis of the test method 
selecting good test instances is crucial when evaluating and comparing the performance of algorithms empirically. we address the question whether the random generator and the parameter settings chosen by giunchiglia and sebastiani  1b; 1a  are appropriate for this purpose and actually support claims  1  to  1 . 
모it is important to note that the claim of giunchiglia and sebastiani  1b  p. 1  that for d=1 random modal 1cnf formulae coincide with random 1sat 


	hustadt & schmidt 	1 

in computational behavior of the two algorithms is actually the absence of the preprocessing step in kris. to explain the remaining difference we study the quality of the random modal 1cnf formulae. suppose that we want to test a random modal 1cnf formula 붯 generated using n propositional variables for satisfiability in a kripke model with only one world. we have to test at most 1n truth assignments to the propositional variables. since n 1 for the modal formulae under consideration  this is a trivial task  even if we use the truth table method. we say a random modal 1cnf formula 붯 is trivially satisfiable if 붯 is satisfiable in a kripke model with only one world. we also say a random modal 1cnf formula 붯 is trivially unsatisfiable if the conjunction of the purely propositional clauses of 붯 is unsatisfiable. again  testing whether 붯 is trivially unsatisfiable requires the consideration of 1n truth assignments only. 
모the graphs of figure 1 show the percentage of satisfiable  trivially satisfiable  unsatisfiable  trivially unsatisfiable  and unsatisfiable samples detected by ictus* for the parameter setting ps1. we see that almost all unsatisfiable formulae are trivially unsatisfiable. we have verified that this also holds for all the other parameter settings used by giunchiglia and sebastiani. this indicates  none of these parameter settings is suited to generate challenging unsatisfiable modal formulae. 
모if we consider figure 1 and 1 together  for ratios l/n between 1 and 1 we observe the graph of kris* deviates a lot  by a factor of more than 1  from the graph of ksat. this is the area near the crossover point 
1 	automated reasoning 
where the percentage of trivially unsatisfiable formulae rises above 1%  however  the percentage of unsatisfiable formulae detected by kris* is still below 1% in this area. ictus* does not detect all trivially unsatisfiable formulae within the time-limit which explains the deviation in performance from ksat. the reason for ictus* not detecting all trivially unsatisfiable formulae within the time limit  can be illustrated by the following example. let 붯 be a simplified modal 1cnf formula 
모finally  we consider claim  1  conjecturing an easyhard-easy pattern  independent of all the parameters of evaluation  in randomly generated modal logic formulae. we have seen in figure 1 that the mean cpu time consumption of ksat decreases drastically at the ratio l/n-1 for the second sample. this is almost the point  where 1% of the sample formulae are satisfiable. this decline resembles the behavior of propositional sat decision procedures on randomly generated 1sat problems. figure 1 compares the performance of ksat with the performance of the translation approach on two parameter settings  where the easy-hard-easy pattern is most visible for ksat. the translation approach does not show the peaking behavior of ksat. the median cpu time grows monotonically with the size of 

resolvent yields r t o b   this means -r is false in any model. an additional inference step computes the unit clause q t o y . no further inference is possible on this subset. 
	1 	conclusion 
we have pointed out a number of problems with evaluating the performance of different algorithms for modal reasoning. our investigations show benchmarking needs to be done with great care. a crucial factor is the quality of the randomly generated problems  which we think are too easy. further investigations are required concerning the parameter settings and fundamental properties of modal kcnf formulae before we can come to safe conclusions about different theorem proving approaches for modal logic. 
모a longer version of this paper is available as research report mpi-i-1-1. 
