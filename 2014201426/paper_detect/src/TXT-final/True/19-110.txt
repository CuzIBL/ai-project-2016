 
       an analysis of the design plans in the pride expert system shows that they integrate knowledge about structure and functionality of artifacts as well as problem-solving heuristics a method is presented by which such plans can be automatically generated by compiling knowledge about artifacts  problem solving heuristics  and characteristics of specific problems. knowledge compilation allows the creation of plans tailored to particular problems and offers potential benefits in maintaining a knowledge base  in reusing the same knowledge for different purposes  and in providing a framework for more systematic knowledge acquisition 
i introduction 
       the process of designing many kinds of complex systems  in particular mechanical systems  can be viewed as a knowledge-guided constraint-satisfaction problem. in this view  the process of designing an artifact that can achieve a desired functionality is mapped into a problem of assigning values to variables which are constrained by the desired structural and functional relationships of the artifact typically  such problems are under-constrained and require much domain-dependent knowledge for guiding the constraint-satisfaction process in a previous paper  mittal and araya 1   we have argued that a 
       useful way to structure design knowledge is in the form of design plans. expert systems such as air-cyl  brown and chandrasekaran 1  and pride  mittal et al 1  have beer successfully built using this approach. 
       a design plan serves two important purposes in the pride system. first  a plan implicitly describes the space of possible artifacts by representing parameters of the artifact as the dimensions of a search space second  a plan embeds knowledge  including heuristics derived from the experience of human designers  for guiding the search for solutions given requirements for specific artifacts. an analysis of these plans shows that they integrate knowledge of different kinds into a knowledge structure which can be used by a problem solver to produce multiple solutions to the original design problem. we have identified at least three kinds of knowledge embedded in design 
1 	knowledge representation 
plans. first  a plan implicitly uses knowledge about the structure of artifacts that art known to satisfy the desired functionality the structure consists of the recursive composition of the parts that make the artifact and their properties. second  plans implicitly contain knowledge about the functional relations that must exist between the properties of the components so that their stipulated behavior is achieved finally  plans contain problem-solving heuristics whose purpose is to make the constraint-satisfaction process more efficient it is the kind of knowledge that expert designers acquire through a long practice of designing similar kinds of artifacts 
       the plans that have been used in the pride system to support the design of paper transport systems have been hand-coded from an analysis of design processes carried out by expert engineers. in this paper we examine the problem of automating the generation of such plans from more explicitly represented knowledge we will show that it is possible to generate design plans using the following kinds of knowledge: i  knowledge about structure and functionality of classes of artifacts  ii  problem-solving heuristics  and iii  characteristics of the given design problem we view the process of generating such plans as a form of knowledge compilation in direct analogy with the standard notions of language compilation in computer science as we shall show later on in the paper  the analogy with compilation is justified because domain-dependent knowledge expressed in one form is transformed into a different form  which is executable by a problem solver furthermore  the 
transformation also takes into account efficiency considerations 
       the ability to compile plans is desirable for several reasons such as maintainability  tailorability  and reusability of the same basic knowledge. it can be argued that for certain problem domains a large number of plans may be necessary to adequately cover the range of problems in those domains. it is likely that there will be a high degree of redundancy among plans  so that a more economical representation would be desirable  especially from the point of view of maintaining the knowledge base. also  the possibility of creating plans taking into account the specific characteristics of a given design problem makes it possible to generate plans that are better suited to the problem at hand. finally  an explicit representation of the different kinds of knowledge opens up other possibilities that are important for 
reusability of knowledge. for example  the same basic knowledge can be used for other purposes such as diagnosis. another possibility is compilation into a different problem solving target architecture  i.e.  other than plans  which might be more suitable for some problems. 
　　　being able to take knowledge of different kinds expressed in some form and compiling into a representation that is optimized for a particular problem solving model  has the potential of resolving a major dilemma in the development of large knowledge-based systems  which can be stated as follows. on the one hand  there is clearly a need to represent domain knowledge at some  deep  level without regard to how it is eventually used for any of different purposes. this is crucial in developing large knowledge bases that can be shared across many different applications  otherwise one would continue to pay the large cost of acquiring such knowledge on an application by application basis. on the other hand  experience with expert systems shows that methods that operate on  deep  representations tend to be inefficient and the power of current systems derives from structuring knowledge in a form that is most suitable for a particular task. knowledge compilation seems to offer an attractive bridge between these two competing requirements. 
　　　the ideas we present here should be taken as a small step towards the larger view presented above in the same vein  our work connects to a scattering of other work that is confronting similar issues. in an earlier paper  chandrasekaran and mittal 1   it was shown that it is possible and desirable to compile diagnostic knowledge structures from the underlying body of domain knowledge. the work on the automatic derivation of explanations  swartout 1  can also be viewed as a kind of compilation. our work begins to connect to work on qualitative reasoning  dekleer and brown 1  forbus 1   in so far as they provide ideas for representing deeper models. finally  there is some overlap in concerns with the work on partial evaluation  kahn 1  and meta-interpreters  sterling and beer 1 . in particular  the processing inside a knowledge compiler can be viewed as a partial evaluation of the original knowledge structure. furthermore  the knowledge compiler can be viewed as a meta-interpreter that operates on the original knowledge base to produce a new interpreter  i.e.  a plan in our case. this plan operates on artifact descriptions 
　　　the ideas reported in this paper are being tested in two domains: paper transport systems of copier machines and transducers. we have developed a representation for describing different kinds of transducers in terms of their structural composition and functional relations. a relatively simple compiler has also been implemented and tested for certain kinds of force transducers. this paper is organized as follows. in the second section we makt an analysis of the notion of plans in the pride system. the third section describes by way of examples from the transducer domain how such plans can be automatically generated. the last section closes with a general discussion of the implications of being able to compile design plans. 
ii plans for guiding constraint satisfaction 
　　　for many kinds of design problems  we find that the following 1-stage approach can be gainfully used. in the first stage  the specifications of a particular design problem are used to define the parameters of a search space along with constraints derived from the structural  functional  and performance requirements. the first stage thus defines a constraint satisfaction problem that can be solved in the second stage by some suitable problem solver. this division of labor is motivated by the different kinds of reasoning that must be performed in each of the two stages of problem definition and problem solution. in this section  we briefly describe the notion of design plans in the pride system as a representation for a stage two constraint-satisfaction problem solver. a more detailed account can be found in  mittal and araya 1 . 
       design plans define a search space as well as ways of efficiently searching in that space. the dimensions of the search space are represented by variables that correspond to the parameters of the artifact to be designed. for example  in the domain of transducers variables are used to represent different properties of components such as the length and material of the beam  and the strain on the strain gauge  see fig. 1 for a diagram of a transducer whose characteristics will be presented in detail in the next section . pieces of knowledge that are used to assign values to variables are represented by methods. some of the methods calculate the values of a variable in terms of values of other variables. other methods  generators  assign values from a set of possible choices  e.g.  the material can take values matl to matn . methods may also include heuristics for making plausible choices or taking optimality considerations into account. for example  the method for deciding the material might specify that matl is a good initial choice based on experience. plans also contain constraint expressions that express relations between variables that must be maintained during the design process  e.g.  the expression  strain maxstrain  indicates that the strain in the strain gauge should be maintained below certain threshold. finally  advice expressions are used to represent possible ways of repairing a partial design when there is a constraint failure. 
　　　the different elements of a plan as described above are structured around goals  which serve several purposes in the plan representation. first  goals are used to index all the knowledge relevant to making a decision about a design variable. this is made possible by creating a goal for each design variable  ideally as a one-one mapping  i.e.  a unique goal for each variable and only one variable per goal. attached to a goal are all the methods for making a decision about that variable  as well as constraints which are applicable. this indexing allows the plan interpreter to select the most suitable method for making the decision. it also 
	araya and mittal 	1 

allows the applicable constraints to be checked as early as possible. the same indexing feature also allows advice for revising a variable to be sent to the unique goal responsible for making a decision about that variable. 
　　　the goals are also used to represent the ordering heuristics which are helpful in selecting the order in which the variables are decided. a partial order might be directly represented at a goal in terms of dependencies on other design variables or computed from the particular method which is run. order information helps improve the efficiency of the constraint satisfaction process by allowing more constrained variables to be decided before less constrained ones. ordering knowledge may come both from experience as well as from an analysis of the constrained-ness of the variables. 
　　　finally  goals can be used to remove an important cause of inefficieny in constraint satisfaction this is the case of n tightly-coupled variables in which the variables art so constrained that an attempt to find consistent solutions  which starts with a subset of these variables and then propagates the partial solution over the rest  will lead to much backtracking we allow a single goal to be used to represent a tightly-coupled set of variables. this allows the constraints to be simultaneously resolved if suitable methods exist it also creates a single decision point where all revision advice is posted 
operational  etc. optionally  the top level configuration of the transducer might be given  i.e.  the higher level components of the transducer. for instance  one could specify that a transducer should consist of a cantilever bending beam  a strain gauge and a wheatstone bridge  which corresponds to the case of figure 1a. specifications for an example transducer are given in figure 1. 


iii generating a plan: an example 
       we will examine in detail  using examples from the domain of transducers  how a design plan can be generated a force transducer is a mechanical device that is used to measure forces. figure 1 shows two kinds of transducers consisting of a cantilever bending beam  column   a strain gauge and a wheatstone bridge the first kind of transducer behaves as follows: when the force to be measured is applied to the beam it produces a strain on it  a local deformation . this strain generates a strain on the gauge attached to it  which alters its electrical resistance. the change of electrical resistance  in turn  generates a change of voltage in the wheatstone bridge  which can then be translated into numbers on a display  representing the magnitude of the force the transducer has to be designed in such a way that for forces with magnitude on a certain range the relations between the magnitude of the force  strain  change of electrical resistance  and so on  are linear  so that the change of voltage in the wheatstone bridge is linear with the magnitude of the force. this allows us to measure the magnitude of the force in terms of a change of voltage. 
　　　the specifications for a transducer to be designed indicate the range of the magnitude of the forces to be measured. other specifications vary with the problem. there might be specifications about the desired precision of the transducer  desired sensitivity  restrictions on the weight  restrictions on the size  range of temperatures for which the transducer must be 
1 	knowledge representation 
f : maximum force to be measured  in pounds 
mwt : max weight  in pounds  wt   mwt  
mid : max lateral displacement of the beam  in inches   ld   mld  
ml : max length  in inches 
osc : output of supporting circuit  in volts/lb p : precision  in pounds 
fig. 1 : some of the variables that are specified in a typical force-transducer problem 
　　　the process of generating a design plan can be decomposed into three stages  as shown in figure 1. the first stage takes into consideration the problem specifications and descriptions of classes of artifacts  and determines the parameters and functional relations that are relevant for a particular problem the second stage performs an analysis of the functional relations and uses domain-dependent heuristics to determine an ordering on the assignment of values to parameters  selects methods for assigning the values  and detects certain kinds of tight coupling between variables. the last stage maps the different elements produced by the previous stages into a design plan. 

a. stage i: determining relevant parameters and functional relations 
       in designing an artifact it is necessary to determine the paramtttrs and functional relations relevant to the problem  i.e.  tht parameters that must be designed and the relations that must be taken into account during design this can be accomplished in two steps first all the parameters and functional relations that need to be considered in a design situation are obtained second  tht problem specifications are utilized to determine whether they affect tht rtltvanct of some of the parameters and relations obtained in the first step. 
identifying always-relevant parameters and relations 
　　　ltt us assume that we have available descriptions of artifacts consisting of the structural decomposition of the artifact and a set of functional relations. further  assume that the top level configuration of the desired transducer is given  e.g.  the configuration depicted in figure 1a . either this configuration is included in tht specifications or has been generated by an earlier stagt of tht design process  during conceptual design. the given configuration is used to determine the structural decomposition for that kind of transducer  set figure 1 . the structure of the artifact can than be used to dtrive an initial set of parameters and access a set of functional rtlations associated to them  see figure 1 . this is accomplished by having tht functional rtlations indtxed by all tht parameters  proptrties of the components of the artifact  occurring in the relations. 
stress ＊ f*sga/s  stress on the beam at the position where the gauge is attached  
strain ＊ stress/e  the strain of the beam is a function of the stress and the elasticity of the material  
sgstrain ＊ strain  the strain on the gauge is equal to the strain on the beam  
minstrain   sgstrain   maxstrain  the strain on the gauge must be within certain range  
e ＊ f1 m  	 elasticity of a material  d ＊ f1 m  	 density of a material  
s ＊ f1 w h   expression for the modulus of cross-section  
wt - l*a*d  weight of beam  
fig. 1: some of the functional relations for beam transducers. refer to fig.1 for relating the variables to the structure of the transducer 
　　　the parameters and relations obtained in this way art of two types. the  always-relevant  parameters and rtlations art those that capture important aspects of tht functionality of tht transducer and are always relevant to problems of these kind. examples of these are the relations between tht applitd forct and the stress on the beam  and between tht strain in tht gaugt and its changt of tlectrical resistance. thtst art tht rtlations that determine that the transducer can be used to measure forcts in terms of changts of electrical rtsistanct. tht  possibly-relevant  paramtters and rtlations art thost whose relevancy depends on tht given specifications  which vary from problem to probltm. 
araya and mittal 1 

determining how the specifications affect the relevance of possibly-relevant parameters 
       the second step of this stagt consists of determining which of the possibly-relevant parameters and relations are made relevant by the given specifications. the basic criterion is that if the specifications contain restrictions on a possibly-relevant parameter  then the parameter becomes relevant. for instance  in the specifications given in figure 1 there are restrictions on the weight of the transducer  wt   mwt   and on the displacement of the beam caused by the application of the force  ld   mld  the weight and lateral displacement initially are not relevant parameters as they do not contribute to the functionality of the transducer. but the restrictions on these parameters given in the specifications  which presumably are restrictions imposed by other components of the larger system in which the transducer is embedded  make them relevant in the current problem 
　　　once a parameter becomes relevant it is necessary to determine how it is related to the other relevant parameters  and how these relations affect the relevance of the rest of the parameters. the new parameter must be connected with the previously found relevant parameters through a chain of functional relations. these connections may involve other parameters  which in turn may participate in other relations with additional parameters  and so on in the examples we have analyzed we have found that new parameters are related to existing parameters by means of equalities  functional relations ara of two kinds: equality relations  e.g.  z ＊ f x y   and inequality relations  e.g.  t   f x y  . for example  suppose that p1 ... pn are relevant parameters  and z is added as a new relevant parameter. then  either z = f pi pj  .pm   or z may be derived from other intermediate parameters which ara in turn derived through equality relations from relevant parameters. in this case  all the intermediate parameters as well as the equality relations between them become relevant. in our work reported here we have considered only this special but common case  and have not addressed the most general situation where several paths can be found between the new parameter and the relevant parameters  in which also inequality relations ara present that may alter the relevance of other parameters. 
b. stage ii: analysis of relevant relations and application of heuristics 
　　　the purpose of this stage is to analyze the set of parameters and relations previously obtained and to create the  skeleton  of an efficient design plan  which in the next stage will be mapped into a full-fledged design plan interpretable by the problem solver.  figure 1 represents the skeleton of a plan for designing the example problem . domain-dependent and domain-independent heuristics are applied to datarmine grouping of variables  an order of assignment of values to parameters  and methods for assigning those values 


1 	knowledge representation 

decomposing the set of relevant parameters into tightly-coupled sets 
　　　the first step is the identification of sets of tightly-coupled parameters  i.e.  parameters that are highly interdependent and should be designed together  see section ii . this step decomposes the set of relevant parameters into appropriate subsets. often domain-dependent heuristics are available for this purpose. it is also possible to use domain-independent heuristics. for example  if several parameters are related to the same parameter p by equality relations  then the set of all these parameters  including p  is considered to be tightly-coupled. furthermore  inequality relations between parameters in a tightly-coupled set are also associated with the set. in particular  any inequality relation relating one or more of the parameters in the set to parameters that appear first in the order of assignment of values  is associated to the set. this ensures that if any of these relations is violated all the parameters in the set will be recomputed  rather than only p and the ones involved in the violated relation s . this reduces significantly the amount of backtracking necessary to satisfy all the relations. 
determining order of assignment of values and methods 
　　　the next step determines the order in which variables are assigned values first  from the specifications we can determine the parameters whose values are initially known  e.g.  force f in figure 1  utilizing equality relations it is possible to determine other parameters that can be derived from them. second  domain-dependent heuristics that contain order information and information about methods for assigning values can also be used. for example  a heuristic could indicate that the design of a beam transducer should start by proposing a length for the beam taking into account restrictions imposed by the specifications. another heuristic could indicate that the material of the beam should also be selected at the beginning of the process  choosing first a standard material  from the list of possible materials  see figure 1 . 
　　　once a method for assigning value to a parameter is determined  the equality relations can again be used to see whether additional parameters can be derived. this process is repeated for every new parameter. after these heuristics are utilized we are left with a partial order for a subset of the parameters  and with methods for assigning values to some of them. 
　　　when no more equalities are available and still there are parameters whose values have not been assigned  the inequality relations can be used. for example  consider the  f*l/s max-stress  relation. if f  l  and max-stress are known  this relation can be used to generate values for s:  s  
f*l/max-stress   see figure 1 . 
attaching inequality relations to parameters 
　　　after this step is performed  it is possible that some of the relevant inequality relations may not have been used. for each of these relations  the parameter that participates in the relation that is assigned value last in the order determined in the previous step  is identified. the relation is then added to the plan by attaching it to the node that contains that parameter. if the relation contains parameters that are in parallel branches of the partial order between parameters  then the functional relation is attached to a new node  and is connected to the nodes for those parameters. this ensures  first that when the constraint is tested by the problem solver all the parameters that participate in the relation have already been assigned values  and second that the constraint is checked as soon as possible. 
　　　notice that a different plan would have been created for a different set of specifications which is an indication that the plan is sensitive to the characteristics of the particular problem. for instance  if the specifications for a problem impose tight restrictions on the size of the transducer  i.e.  its length  width and height  a domain-dependent heuristic would have determined that the parameters of the cross-section of the beam should be designed first. then  the maximum allowable stress  max-stress  would be determined using the relation on the modulus  under a different form  max-stress  f*l/s  finally  the material would be selected taking this max-stress into account. thus  the order in which variables are assigned values and the methods used for that purpose in the new plan  are different from those of the original plan. 
c stage iii: generating a plan 
　　　the skeleton plan that was developed in the previous stages is now mapped into a design plan. the relevant parameters are mapped into variables of a plan. the methods for assigning values to variables are mapped into appropriate kinds of plan methods  such as generators and calculations  e.g. the methods for assigning values to material  m  and to stress  respectively  in figure 1  then the goals of the plan are created  and variables  methods and constraints are attached to them  taking into account the semantics of plans. typically  a goal will have only one variable attached to it  as well as one method for assigning values to that variable if in the previous stage a constraint was attached to a parameter  then it will be attached to the goal corresponding to that parameter. sets of variables corresponding to sets of tightly coupled parameters are attached to a single goal  together with the corresponding constraint. at the end of this process all the elements of the design plan have been tied together in a network of goals 
　　　it should be noted here that a plan doesn't specify a single solution to a design problem  but rather a set of solutions. this is because generators  that are used to assign values to some of the variables  can produce a different value from their specified sets of values each time that they are activated. also  an important 
araya and mittal 1 

property of a plan is that the problem solver can back up to a goal if it needs to revise a decision made at that goal  e.g.. when a constraint has been violated. these two characteristics allow plans to guide the constraint-satisfaction process 
1. current implementation of the compilation process 
　　　we have developed a preliminary implementation of the process for generating plans for certain kinds of the domain of force transducers  including the beam and column configurations in this implementation  a class of artifacts is described in terms of descriptions of classes of components  which in turn specify the classes of their subcomponents and their properties we assume that the top-level configuration of the desired artifact is available the description of the configuration is used to index into the description of the structure of known classes of artifacts to obtain an initial set of properties from these properties their associated functional relations are accessed and collected the process then continues as exemplified in section ill a for the second stage of the process we have concentrated on making use of domain-dependent heuristics  leaving for a later version the implementation of some of the domain-independent kinds of analysis. the last stage of the current implementation creates design plans that can be processed by the constraint satisfaction engine of the pride system 
iv discussion and conclusions 
　　　in this paper we have identified a two-stage process for representing domain knowledge and using it to design suitable artifacts  and have described a method for compiling different kinds of knowledge from a stage i representation into a stage ii plan for constraint satisfaction. two distinct arguments have been made for knowledge compilation  in this section  we examine these arguments in more detail and try to relate them to different characteristics of problem domains 
　　　the first argument for compiling from stage i to stage ii can be made on the grounds of maintainability of knowledge a 
　　　stage i representation allows different kinds of knowledge such as the structure of artifacts  functional constraints  and problem solving heuristics to be separately represented thus  appropriate representational schemes can be devised which would allow suitable knowledge editing and browsing tools to be developed under maintainability criterion alone  stage i representations are viewed as an easier-to-maintain representation  while stage ii is viewed as optimized for execution. however  no problem solving goes on during compilation 
　　　the second argument for compilation is based on the need to tailor a stage ii plan to the requirements of specific design problems. under this criterion  the compiler is not merely transforming one representation into another one but also carrying out some of the reasoning required by the design task in particular  the compiler has to select the relevant design variables and decide which constraints are relevant to the problem at hand this creates a closer bond between the compiler and the problem solver used in stage ii. for example  consider a situation where the problem requirements can be satisfied by more than one top-level configuration of transducer components. in such a case  the compiler would select one of the configurations and build a plan. however  detailed execution of the plan may show the configuration to be unsuitable this requires an ability to back up to the compiler and select a different configuration. notice  however  that this kind of reasoning is already performed by the stage ii problem solver. this would seem to indicate a more iterative relationship between the plan compiler and plan problem solver 
　　　another important point in relation with the applicability of the compilation process is that in many domains it might be possible to develop a single plan or a small number of such plans that cover a large number of problem instances  n the domain. in this situation the compiler is used purely for maintainability reasons  leaving all reasoning with the plan interpreter in other words  the compiler is only used to help in maintaining the knowledge base and not in compiling out certain kinds of reasoning this observation is based on a comparison of the pinch-roll paper transport  prpt  and force transducer  ft  domains knowledge about the former domain can be largely captured by a single plan with local variations the latter domain  however  requires different plans for different problems a comparison of the two domains seems to indicate that the problem-independent knowledge is more stable for prpt problems than it is for ft problems. in other words  the relevant constraint expressions are more or less the same for all prpt problems  much more so than they are for ft problems 
acknowledgments 
       we would like to give special thanks to walter wang for many discussions on design issues and for having familiarized us with the transducer domain we would also like to thank felix frayman for many discussions on the notion of compilation 
