 
since the introduction of metamorphosis grammars 
 mgs  'colmerauer. 1 . with their associated type 1-like grammar rules  there has been a desire to allow more general rule formats in logic grammars gaps  which refer to strings of unspecified symbols  were added to the mg rule  resulting in extraposition grammars  xgs   pereira  1  and gapping grammars  ggs   dahl and abramson  1 . unrestricted gapping grammars  which provide an even more general rule format  possess rules of the form  a -   b  where a and /1 many contain any number of terminal nonterminal or gap symbols in any order. figg. a flexible implementation of gapping grammars  is an implementation of a large subset of unrestricted ggs which allows either bottom-up or top-down parsing of 
sentences. this system provides more built in control facilities than previous logic grammar implementations  which allows the user to restrict the applicability of the rules  and to create grammar rules that will be executed more efficiently 
1. introduction 
¡¡¡¡gaps have been introduced into logic grammars  resulting in extraposition grammars  pereira. 1  and gapping grammars  dahl and abramson. 1 . to express a more general grammar rule that can be interpreted with  reasonable  efficiency by a computer. the rules of these grammars are of the form  n/. a   b . where ni is a nonterminal symbol called the head  and a and b may contain terminal symbols  nonterminal symbols  procedure calls  and gap symbols. fxtraposition grammars are able to provide concise descriptions for left extraposition as found in sentences like the mouse that the cat chased squeaked. however  extraposition grammar rules are more restrictive than those of gapping grammars  since the gaps referenced on the left hand side of the rule must be 
this work was supported by the natural sciences and 
engineering research council of canada under operating 
grant no. a1  installation grant no. smi-1 and postgraduate scholarship #1. 
¡¡ gap symbols are used to reference sequences of unspecified symbols. 
repositioned in the same order at the end of the right hand side also  the contents of multiple gaps must be nested  one gap totally contained within another   or nonmtersecting. with gapping grammars  concise descriptions of coordination  free word order  and right extraposition can be obtained  dahl. 1 . 
   unrestricted gapping grammars extend gapping grammars by the removal of the restriction that the left hand side ol all rules must start with a nonterminal symbol. consequently  the unrestricted gapping grammar rules resemble  a -   1 . where a and b may contain terminals  nonterminals  gaps and procedure calls in any order. this type of rule facilitates easier description of unrestricted left movement of symbols 
¡¡¡¡unfortunately  the use of gaps can result in less efficient computer processing of the rules. consequently  many applications of gapping grammars have not been explored except from a theoretical point of view. one method to circumvent this  efficiency problem  is to add procedural control to the otherwise declarative grammar rules.  the cut facility of prolog  clocksin and mellish. 1  is an example of this procedural intervention . figg. a flexible implementation of gapping grammars  is a programming language that incorporates procedural control to process many unrestricted gapping grammars with tolerable response time in an interactive environment. using figg  the different forms of procedural control can be examined for their uses with unrestricted gapping grammars. 
1- unrestricted gapping grammars 
¡¡¡¡unrestricted gapping grammars. like other logic grammars  use logic terms as grammar symbols. a logic term consists of a functor  which may possess zero or more arguments. each functor possesses an order  which corresponds to the number of arguments  and is an element of some finite set f. the arguments  which are enclosed in parenthesis and separated by commas  may be logic terms  or variables  h  f  is used to refer to the set of logic terms that can be constructed from f. in this paper  elements of f will be represented by words starting with a lower case letter  or enclosed in single quotes. words which start with an upper case letter or an underscore ''  . will represent variables. a list  which is 

1 f. popowich 

f. popowich 1 


1 f. popowich 
bottom up parser is slower by a constant multiple of three however  its slowness is offset by the fact that it can process many more grammars than its top-down counterpart. an unrestricted gapping grammar can be used by the bottom-up parser as long as it does not result in bottom-up cycles. for example  any grammar containing the rule  nt --  €*. can not be used by this parser. further development on this prolog parser may improve its efficiency. 

¡¡¡¡thus  the results illustrate that the introduction of some limited procedural control can be done simply with very beneficial results. without its introduction  the processing time may be intolerable in some cases  it will not always be possible though  to introduce simple restrictions on gaps and parsing. the effect of a control mechanism is also very dependent on the grammar itself. as illustrated in the examples  the same operator - the cut - can result in more efficient parsing  or can restrict the language described by the grammar. the determination of which control to use. and how to use it. is the responsibility of the person who contructs the grammar. obviously  more study of procedural control is required. 
1. summary 
