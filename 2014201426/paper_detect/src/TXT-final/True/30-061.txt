 
the symmetric alldiff constraint is a particular case of the alldiff constraint  a case in which variables and values are defined from the same set 1. that is  every variable represents an element c of s and its values represent the elements of s that are compatible with c. this constraint requires that all the values taken by the variables are different  similar to the classical alldiff constraint  and that if the variable representing the element / is assigned to the value representing the element j  then the variable representing the element j is assigned to the value representing the element  '. this constraint is present in many real-world problems  such sports scheduling where it expresses matches between teams. in this paper  we show how to compute the arc consistency of this constraint in 	  where n is the number of involved variables and the domain of the variable i. we also propose a filtering algorithm of less complexity  o rn  . 
1 	introduction 
constraint satisfaction problems  csps  involve finding values for problem variables subject to constraints on which combinations are acceptable. they are more and more used in real-life applications  such as frequency allocation  crew scheduling  time tabling  car sequencing  etc.  simonis  1 . 
　the general task of finding a solution in a constraint network being np-hard  many researchers have concentrated on improving the efficiency of solving a csp. 
　currently  it seems that a look-ahead approach is the most promising way. the purpose of this technique is to look at the values of the variables that are not yet instantiated and to remove values that cannot lead to a solution w.r.t. the current partial instantiation. thus  it anticipates the detection of some failures by using a particular treatment after each modification of domain variables. a filtering algorithm is one such particular treatment. with respect to a partial instantiation  it re-
1 	constraint satisfaction 
moves once and for all certain inconsistencies that would have been discovered several times otherwise. 
　techniques ba sed on filtering algorithms are thus quite important. particularly  arc consistency caught the attention of many researchers  who then discovered a large number of algorithms. 
　furthermore  it is necessary to deal directly with the arity of the constraints because nonbiliary constraints lose much of their semantics when encoded into a set of binary constraints.  see  regin  1 .  this encoding leads  for example  to behavior that prunes much less for filtering algorithms handling it. 
　when the semantics of a nonbiliary constraint is not known a priori  gac-sehema  bessiere and regin  1  can be used to achieve arc consistency of the constraint. however  this algorithm does not perform as well with known semantics. in such a situation  it is particularly interesting to develop a specific filtering algorithm  as it was done for the well known alldiff constraint  regin  1 . this approach leads to an important gain in time and in space for solving a csp  even if the filtering algorithm does not  achieve arc consistency. for instance  the diff-n or cumulative constraints are really useful in practice to solve real-world problems  as if has been shown by simonis  although arc consistency is not achieved for t h ese constrants. 
　in this paper  we study a new constraint and propose some filtering algorithms for it. some of those algorithms ensure arc consistency; others are weaker. 
the symmetric alldiff constraint 
　　consider a set of people to be grouped by pairs according to predefined compatibilities such that each person is paired exactly once. this problem can be modeled as a constraint satisfaction problem in which each person is associated with one variable and one value. the domain of a variable associated with a person p is defined by the values which are associated with a person compatible with p. for instance  consider the simple problem defined on a set of three people that are all compatible. the csp will then involve three variables where is associated with and three values where is associated with 


　since we want to pair all the variables with different values  we add an alldiff constraint involving all the variables. constraints stating that  if any variable x is associated with a variable y  then y must be associated with xn can be defined by means of the  function. this function is defined as follows:  is the value v that is associated with the same person as the variable x  and is the variable x that is associated with the same person as the value v. of course  we have 
then  for each variable x and for each value  ;  we define the constraint: 
　the csp we have just defined can be viewed as only one constraint that we will call symmetric alldiff constraint. this constraint requires that all the values taken by the variables are different  similar to the classical alldiff constraint  and that if the variable representing the element i is assigned to the value representing the element j  then the variable representing the element j is assigned to the value representing the element i. 
the example problem we consider has no solution. 
however  the csp that has just been built is arc consistent1. thus it is important to be able to efficiently handle symmetric alldiff constraints. 
　these constraints arise in some problems such crew scheduling  two pilots must  be in a cockpit at the same time   nurse rostering  two nurses are required for certain operations  or sports scheduling. in the latter problems  one of the main tasks is to compute a set of matches between teams such that each team plays against an-
other team  and each team plavs exa.ct.lv once for each period of time under consideration. there exist compatibility constraints between teams. for instance  during the winter period  travel has to be limited. therefore  for a given period  the problem we have to solve for each period is exactly a symmetric alldiff constraint. 
   a symmetric alldiff constraint can be expressed by a graph  in which nodes represent variables and there is an edge between two nodes x  and x1 if and only  and 
　initially this graph corresponds to the compatibility graph. during the search for a solution  it is built from the current domain of the variables. 
　since this new constraint corresponds to the definition of a particular csp involving several constraints  then* is an equivalence between the consistency of this new constraint and the existence of a solution for the csp. this equivalence means that an algorithm checking the consistency of a symmetric alldiff constraint is more efficient for the resolution of the problem than is the conjunction of all the algorithms checking the consistency  or achieving arc consistency  of the other constraints involved in the first model. 
　it is quite important  to emphasize this point  in order to understand that there is great interest in defin-
l
　　for instance  satisfies the alldiff constraint. 

figure 1: an example of a symmetric alldiff constraint. nodes represent teams  and edges compatibilities between teams. the left graph is the initial graph  the right graph is the graph obtained after achieving arc consistency. 
ing specific global constraints for which efficient algorithms computing the consistency of these constraints are known. for instance  consider the problem given by the left graph in figure 1 and two models of this problem. first  this problem is represented by a classical alldiff constraint and constraints ensuring the symmetries. second  the problem is represented by only one symmetric alldiff constraint . the subproblems part 1 and part  ii of this graph are odd size cliques. thus  clearly  if e is not instantiated to neither a nor 1 then there is no 
solution . unfortunately  the csp defined by the first model is arc consistent  and so no value is removed. the right graph of the figure shows the achievement of arc consistency for the symmetric alldiff constraint. 
　the consistency of an alldiff constraint can be computed by searching for a maximum matching in a bipartite graph. we will show that  the consistency of a symmetric alldiff constraint can also be achieved by searching for a maximum matching in a graph which is not necessarily bipartite. this problem can be easily solved by using  for instance  edmonds's algorithm  edmonds  1 . we will also present  an original algorithm for achieving arc consistency for a symmetric alldiff constraint. ijnfortunatly  this algorithm is not incremental. hence  we will propose a filtering algorithm  which does not necessarily achieve arc consistency  but which has a remarkable complexity. 
　the paper is organized as follows. first  we give some preliminaries about constraint  network and matching theory. then  we formally present the symmetric alldiff constraint  and we explain how to compute the consistency of this constraint. in the next section  an algorithm achieving arc consistency for this constraint is fully detailed. after it  we propose a filtering algorithm which has lower complexity. then we conclude. 
1
　　 when there is no ambiguity we will say that node x is instantiated to y instead of saying node x is instantiated to  and node y is instantiated to 
	begin 	1 

	1 	preliminaries 
	1 	constraint network 
a 	finite 	constraint network af is defined as a set of 
finite set of possible values for variable   and a set c of constraints between variables. we introduce the parfies the allowed combinations of values for the variables 

　ind c  x  is the position of variable x in x c ; # i   r  is the number of occurences of the value v in the tuple r; and d x  denotes the union of the domain of the variables of a'. 
a tuple r on x c  is valid if 
　　　　　　　　　i is consistent with c   or   such that a = r ind c x   and r is valid. 
c is arc consistent 	iff 
d x   a is consistent with c. we achieve arc consistency of c by removing all values not consistent with c. 
　the value graph of a constraint c is the bipartite graph gv c  =  x' c   d x c    e  where iff 
1 	matching theory 
most of these definitions are due to  tarjan  
   if {u v} is an edge of a graph  then we say that u and v are the ends or the extremities of the edge  n are the number of nodes and m the number of edges of a graph. g - {u v} denotes the graph g in which the nodes u and v have been removed. g - {{u  v}} denotes the graph g in which the edge {u v} has been removed. a matching m on a graph is a set of edges no two of which have a common vertex. the size  m  of m is the number of edges it contains. the maximum matching problem is that of finding a matching of maximum size. m covers x when every vertex of x is an endpoint of some edge in a/. 
　let m be a matching. an edge in m is a matching edge; every edge not in m is free. a vertex is matched if it is incident to a matching edge and free otherwise. for any matched vertex vy mate v  denotes the vertex w such that {v w} is a matching edge. 

an alternating path or cycle is a simple path or cycle whose edges are alternately matching and free. the 
1
　　 indeed  we consider that any constraint network af can be associated with an initial domain d1  containing v   on which constraint definitions were stated. 
1 	constraint satisfaction 
length of an alternating path or cycle is the number of 
edges it contains. 

　the consistency of the classical alldiff constraint is computed by searching for the existence of a matching in the value graph that covers all the variables  and arc consistency is achieved by identifying all the edges that can never belong to a matching that covers all the variables. our problem is really close to that one with one major difference: the graph under consideration can be non bipartite. 
   the problem we have to solve is called symmetric matching. symmetric matching in a 1n-node bipartite graph is  indeed  really no different from matching in an n-node nonbipartite graph. consider the value graph gv c  of a symmetric alldiff constraint. this graph is bipartite. now  we can modify this graph by contracting any variable x with value  into a single vertex. the edge between x and a is deleted  and the other edges that have x or a as an endpoint are replaced by edges having the contracting vertex as endpoint and their other extremity unchanged. the graph we get in that way  denoted by cgv c   is no longer bipartite and is called the contracted value graph of a symmetric alldiff con-
where 
i-
　there is a correspondance between a matching which covers x c  in cgv c  and a tuple of t c . 
proposition 1 given   every tuple oft c  corresponds to a set a of edges in cgv c  such that for each vertex x  x c   x is an end of exactly one edge. and a matching m in cgv c  ivhich covers x c  corresponds to an element oft c  
proof: an element of t c  corresponds to a matching that covers x c  in cgv c   by construction of cgv c . and from a matching in cgv c  covering x c   we can build a tuple that satisfies the constraint  by definition of the symmetric alldiff constraint. therefore  we have: 
corollary 1 a constraint  is consistent iff there exists a matching that covers x c  in cgv g . 
　since ggv c  can be nonbipartite  an algorithm searching for maximum matching in a nonbipartite graph has to be used  like the blossom-shrinking algorithm 

of edmonds. an implementation of this algorithm in 1 mn  is fully detailed in  tarjan  1 . the advantage of this algorithm is its incrementality. suppose that we start with a matching of size k  and there exists a matching of size n/1; then this matching can be computed in 1  n/1 - k 1n . this point is important if we systematically check the consistency of the constraint during the search for solution. 
　on the other hand   micali and vazirani  1  proposed a complex algorithm in 
　for computing the consistency of a symmetric alldiff constraint  it is also necessary to update the contracted value graph. precisely  when a value is removed from the domain of a variable  the corresponding edge must be deleted. all these modifications need at most o ni  operations. therefore  we can consider that the consistency of a symmetric alldiff constraint can be computed in 
1 	arc consistency 
for the sake of clarity  we will consider that c = svmalldiff  is a symmetric alldiff constraint. we will also consider that the consistency of c lifts been checked; thus m a matching which covers x c  in cgv c  is known. 
　first  for every variables x and y of x g   we have to ensure that if  is removed from d x  then is also removed from d y . this can be easily done in o  1  for each deletion. 
　from proposition 1 and by definition of arc consistency  we have: 
c o r o l l a r y 1 a value a of a variable x is consistent  with c if and only if the edge  belongs to a matching that covers x c  in cgv c . 
　thus  the arc consistency of   ' is achieved by removing all the values  x a  such that the edge does not belong to any matching that covers a     .'  

　we can improve this complexity by using the following proposition which has been used for efficiently computing arc consistency in the classical alldiff constraint. this proposition  indeed  does not depend on whether the graph is bipartite or not. 
p r o p o s i t i o n 1   berge  1   an edge belongs to some but not all maximum matchings  iff  for an arbitrary maximum matching  it belongs to either an even alternating path which begins at a free vertex  or an even alternating cycle. 

algorithm 1: an arc consistency algorithm for a symmetric alldiff constraint. 
　　m is a matching which covers x c   thus no vertex of ar cf  is free. therefore  a value a of a variable x is consistent with c iff the edge belongs to an even alternating cycle. if the edge belongs to a/  then the value a of x is consistent with c. thus  the value a of x is not consistent with c if and only if the 
e
dge is free and if it does not belong to an alter-
nating cycle. such an alternating cycle is formed by an alternating path  and the matched 
edge {mate x  x}. therefore the problem of the search for an alternating cycle is equivalent to the problem of the search for an alternating path from x to rnatr x  in cvg- 
　we can give the algorithm achieving arc consistency. for each matching edge {u  v} in cgv c   we search for an alternating path from v. to v in ggv g  - {{v;  u}}  but we do not stop if we reach an edge with v as its extremity. if such an edge is reached  it is marked as  valid  and the algorithm continues as if the edge does not exist. when there are no more edges to study  the algorithm stops. all edges {v y} different  from  v u  that are not marked valid cannot belong to an even alternating cycle. afterwards  we apply the same reasoning by 
starting from v in order to identify the valid edges {x  u}.  see algorithm 1.  
   the problem which remains is the computation of alternating paths. 
　an alternating path from x to rnatc x  in cgv c  - {{mate x   x}} can be found by applying the following procedure due to edmonds  x is marked even; then we mark even a vertex reached from a matching edge  and odd a vertex reached from a free edge. thus  from any 
even vertex u.  we traverse the free edge having an extremity in u. and from any odd vertex v  we traverse the matching edge linked to v. note that a vertex is even if it is an even distance from the starting vertex and odd otherwise. this method works fine for a bipartite graph because there is no odd-length cycle  so a vertex marked even can never be reached from a vertex also marked even. 
　on nonbipartite graphs  there is a subtle difficulty: a vertex can appear on an alternating patli in either parity.  see figure 1.  such an anomaly can occur only if g contains an alternating path p from a vertex s to an even vertex u and an edge from u to another even vertex w on p. the odd-length cycle formed by {u  w  and the part of p from w to u is called a blossom. in figure 1  {c  d  e  f  g} form a blossom. 
	regin 	1 


figure 1: the problem with nonbipartite graphs. suppose that we search whether {a  1} belongs to an alternating cycle.  a  1  c  c/  e  marks e even  whereas  a  1  e  g  /  e  marks e odd and h cannot be reached. 
   edmonds proposed an algorithm that is able to deal with this difficulty. since any vertex in a blossom can be reached from an alternating path from the base in either parity  it should be possible to traverse any free edge that has a vertex in the blossom if we do not want to miss an alternating path. as rioted by edmonds  this can be easily obtained by marking all the vertices of a blossom as even. 
   algorithm 1 proposes an adaptation to our purpose of edmonds's algorithm. since edmonds's algorithm cannot miss any alternating paths the arc consistency algorithm that we have proposed is exact. 
   algorithm 1 traverses each edge at most twice  because the arc  u w  is introduced in the list of arcs to study when u is marked even and a node is marked even only once. moreover  when an arc is traversed it is removed from arcstostudy. thus  the complexity of this algorithm depends on the functions belongtoi. ifferent.blossom w  v  and computenewblossom  /  v . 
   the function belongtodifferentblossom u  v  determine whether u and v belongs to different blossoms. if this function is true  then a new blossom is detected. the function computenewblossom u  v  determines the nodes involved in the new blossom and updates internal data structures needed by the first function. tarjan has proposed an efficient and beautiful implementation of them based on a union-find structure. we will not present it here because it is fully detailed in  tarjan  1  p 1. this particular implementation leads to an algorithm in 1 m . thus  we will consider that the complexity of algorithm 1 is o rn . 
   therefore  the complexity of the arc consistency algorithm is 1{nm  because there are 1n calls to algorithm 1. however  this algorithm is not incremental. in fact  each time arc consistency is achieved  it will be necessary to call a procedure 1n times in o rn . for certain problems  this complexity can prevent this algorithm from being systematically used during the search for solutions. thus  in the next section  we propose a filtering algorithm that does not necessarily ensure arc consistency  but it has a complexity that allows its systematic use during the search for solutions. 
1 	constraint satisfaction 

1 	another filtering algorithm 
p r o p e r t y 1 	le.t { /  rnate u } 	be a matching edge. 	if 
{a mate u } is traversed by algorithm 1  then all edges that belong to an even alternating cycle containing {ii mate u } are also traversed by the algorithm. 
   this property holds because edmonds's algorithm cannot miss any alternating paths. 
p r o p o s i t i o n 1 let m be matching that covers x c  in cgv c . then any free edge {u  v} such that at least one of its ends is reached by algorithm 1 and {u  v  is not traversed by algorithm 1 cannot belong to a maximum matching. 
proof: the ends of {u  v} cannot be even; otherwise  this edge would have been traversed by algorithm 1. consider that v has been reached  then v is marked odd. the matching covers all the vertices and v is odd  thus the matching edge {mate v   v} has been traversed. v; belongs to only one matching edge  so every alternating cycle containing {u  v} contains also {mate v   v}. furthermore  by property 1  all the edges that belong to an even alternating cycle containing {v matc v } are traversed by the algorithm. hence  if {u  v  is not traversed by the algorithm then {u t;} does not belong to any maximum matching. 
   from this proposition  we propose a filtering algorithm. we choose any vertex x  then we apply algorithm 1 to it. each free edge {x  u  which is not marked valid is removed. then  each edge which satisfies proposition 1 is also removed. if at least one edge is removed 


figure 1: an example of the filtering algorithm for a symmetric alldiff constraint. the bold edges represent the matching edges. the edge {/ /*} is not traversed  so  i.s removed from d h   and   is removed from d f . 
by the previous procedures  then we choose any other vertex that has not already been chosen  and we repeat the previous operation. if no edge is removed  we stop the algorithm.  see figure 1.  if no deletion occurs  the complexity of the algorithm is o m   and for each deletion  the complexity of this algorithm is also o rn . the advantage of this approach is that  he complexity can be amortized for each deletion. 

   however  we can obtain a better amortization. suppose that during one pass of the previous algorithm 1 edges are removed. then  if the next 1 passes delete no edges  the amortized complexity will remain o rn  per deletion. algorithm 1 is a possible implementation of this idea. 
　this algorithm does not ensure arc consistency because algorithm 1 traverses some edges that do not belong to an even alternating path. 
　in practice  this algorithm can also be improved by using some heuristics. it is important to take care about the possible creation of new connected components when some edges are removed. the previous algorithm can be independently applied to each connected component of the graph. on other hand  note that if cgv c  contains a connected component with an odd number of nodes  then there is no solution. this observation means that if there is a 1-connected component with an odd number of nodes and containing exactly one cutpoint of the graph1  then this cutpoint cannot be matched with another node of the component. similarly  if there is a 1-connected component with an even number of nodes and containing exactly one cutpoint of the graph  then this cutpoint cannot be matched with a node that does not belong to the 1-connected component. such components can be identified easily in o rn . moreover  if a node in c jv c  has only two neighbors  then these two neighbors cannot be matched together. furthermore  it is also interesting to use the classical alldiff constraint and arc consistency for this constraint. 
1 	conclusion 
in this paper we have presented the symmetric alldiff constraint. this constraint is present in many real-life applications. we have shown how arc consistency for this constraint can be achieved in o nm . we have also proposed a filtering algorithm that does not ensure arc cousistencv but has a complexity that can be used in practice because it can be amortized for each deletion {   rn  per deletion . 
