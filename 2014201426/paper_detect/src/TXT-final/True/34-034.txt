 
a system  called gap  which automatically produces lisp functions from example computations is described. gap uses a knowledge of lisp programming to inductively infer the lisp function 'obviously' intended by a given 'iopair'  i.e. a single input to be presented to the function and the output which must result . the system is written in popcorn  a conniver-like extension of pop1  and represents i t s knowledge of lisp procedurally. 
acknowledgements 
　　　the research reported herein was carried out with the support of the science research council. 
　　　i would like to thank pat hayes  richard bornat and  especially  mike brady for their constant advice and guidance. 

　　　gap can be distinguished from those automatic programmers which deduce the wanted program from the given description. these reflect a popular approach to automatic programming and have  theoretically  a number of advantages over gap. a deductive system can  in principle  produce a correct program - one guaranteed to meet i t s specification. furthermore  such a system can  if it contains a complete proof system  produce any program which can be described to i t . if the description language uaed is general say  f i r s t order predicate calculus - then the automatic programmer w i l l be general. unfortunately  most theorem provers are not very powerful and this limits the size o f program which can be written. this disadvantage can be overcome  to an extent  by allowing the proof system to employ knowledge in the form of 'control' statements which embody an understanding of how to achieve proofs in the domain of program writing. a more important criticism of deductive automatic programming is that the wanted program must be completely specified. this can be as d i f f i c u l t   and as error prone  as actually writing the wanted program- for example  the function intended by iopair  1  is described in the f i r s t order predicate calculus as: 

and this is barely simpler than the corresponding lisp function. 
gap is written in popcorn  1  an extension of 
p1  1  that provides some of the features of conniver  1 . the program contains a number of heuristic routines embodying knowledge about various program achemas for lisp expressions. when gap is presented with an iopair these routines examine it for 'cues' which suggest hypotheses about the form of the wanted expression. if an hypothesis seems particularly promising it is examined in great detail by a deductive lisp system which attempts to verify and complete i t . 
　　　the cue seeking routines are stored in the popcorn data base  making the addition of new heuristics extremely easy as the remainder of the program need not be altered. it can be seen that the detailed flow of control w i l l depend on minor vagaries of the data base controlling routines. 
　　　the complete program occupies less than 1k words of core on a pdp-1. it takes two or three seconds of cpu time to code the example given earlier. 
　　　in section two i explain how gap works  illustrated by a few simple examples; in section three there is a brief discussion of the lisp system and in conclusion i point out some shortcomings of the program and describe ways it could be improved. 


1 
once gap has decided that an i o p a i r is of type 
build the expression is found by exhaustive search 
- though ordered to favour expressions using append. 
1 

 partof x  is replaced by  cdr i   . such a*listfn  is called a cdr-loop. one of the hypotheses suggested by the cue seeking routine i s : 
 append list  form x     self cdr x   list   
other heuristic routines  described later  concur with this hypothesis and it is selected for detailed examination. the expression is optimised to; 
 cons   form x   self cdr x    and gap tries to make : 
  lambda  x   cons   form x    self  cdr x    x  evaluate to   a  b   c  d  . for this to be so  form x must evaluate to  a . gap solves this subsidiary problem by a call on the popcorn data 
base - and hence a possible recursive call of gap i t s e l f . if the wanted expression is not already known the iopair:  a b c d  =  =  a  is examined and one routine decides it is of type build. it does this by counting the atoms in the output  getting the l i s t  1 1   meaning 'a' occurred once and ' b '   'c' and 'd' not at a l l   . the routine expects that if the expression being coded calls a recursive function then there should be some pattern in this l i s t . it can't find any and so the expression is coded by the routine responsible for producing expressions of type build  which produces  list car x  . 
　　　gap deduces that the hypothesised recursion line would 'explain' the output if  self nil  evaluated to nil - this suggests that   tests x  evaluates to 't' when x is nil. however  gap 'knows' that the terminating condition of many iterative loops - listfn s embody an essentially iterative process  1  - is such that one more iteration would have caused an error. 
　　　to apply tills knowledge gap finds the 'minimumrvalue of x if the recursion line is not to cause an error. in this case x must be a pair since both car and cdr are applied to it - and so an appropriate test is  atom x . gap inserts this into the  listfn  schema and checks that  self nil  does actually evaluate to nil. this type of redundancy provides a useful consistency check. 

then one of the cues noted would have been that the length of the output is proportional to n# n+1 /1  
where n is the length of an input. this can happen when a cdr-loop function calls another as a subroutine. for this iopair  therefore  one of the hypotheses generated is that the f i r s t four elements of the output should be split off and an expression evaluating to that segment be found to replace the f i r s t  form x   in the   iistfto schema. once this has been done the expression is completed in a similar way to the last example. 
     a common method of problem solving is find some hoinomorphicmapping of the problem  with a smaller search space  which can be easily solved to provide a plan for the solution of the main problem. this technique has been used by a number of researchers  notable  1 1 . gap applies this method of problem solution when {resented with an iopair with more than one input. many functions of multiple inputs produce their output by interleaving their inputs in some way. i f   therefore  gap finds for each element of the out-
put from which inputs they have drawn atoms  it may be able to recognise some pattern in the resul t i n g 'origin l i s t ' . consider the iopair: 

　　　the cues described so far have to generate a number of hypotheses as they cannot distinguish whether atoms from the 'front' of the inputs occur at the front or back  or both  of the output. if we give gap an iopair with one input  of length four  and an output of length eight then three 

1 

recursion l i n e hypotheses w i l l be generated by the cue f i r s t described in t h i s s e c t i o n . these hypotheses can be represented: 

 however  these hypotheses are not generated simultaneously; not u n t i l the most l i k e l y a l t e r n ative  the f i r s t   is rejected are the other possi b i l i t i e s suggested.  
　　　gap needs a cheap way oi  r e j e c t i n g the i n c o r rect hypotheses. one way of doing t h i s is to replace the atoms in the output by numbers representing which element of an input they came from. the 'number l i s t ' f o r the i o p a i r : 

is  1   1 1 . as the 'average ' atom in the inputs to the recursive c a l l of the function is higher than the average atom in the o r i g i n a l inputs the average f o r that segment of the output allegedly due to the recursive c a l l of the function should be higher than that for the whole output if t h i s is not so the hypothesis is rejected. this heuristic w i l l reject the two incorrect hypotheses above. 
　　　additional information can be found by supposing that the wanted f u n c t i o n recurs on the cdr of some input and otherwise refers only to the car of that i n p u t . if t h i s is so it might be possible to s p l i t the output into three segments the outer ones containing no atoms from the cdr of the relevant i n p u t   and the inner segment  hopefully due to the recursive c a l l of the f u n c t i o n   containing none from the car. of course  there w i l l usually be several possible s p l i t t i n g s . for the i o p a i r :  a b c d  &&  ql  -  =   d q c q b q a q   the routine embodying t h i s h e u r i s t i c w i l l suggest: 
nil   d q c q b q    a q  	and 	n1l  d q c q b     
 q a q     
　　　when used in conjunction with other routines  t h i s h e u r i s t i c   despite 	i t s simple-mindedness  
makes a valuable c o n t r i b u t i o n to the selection of the correct hypothesis. 
　　　the reader w i l l have noticed that many of the cue-seeking routines appear redundant; several can  and do  suggest the same hypothesis. this redundancy provides the basis of the approach taken to hypothesis generation. part of gap  called the 'research d i r e c t o r '   monitors the hypothesis generation process. if t h i s sees that a hypothesis is p a r t i c u l a r l y popular it i n t e r r u p t s   and tests the promising candidate. should t h i s be unsuccessful it allows hypothesis generation to continue. some cue-seeking routines notice f a i l u r e of t h e i r hypotheses and produce fresh a l t e r n a t i v e s . should there be no especially popular hypothesis  the research director exhorts the cue-seeking routines to ' t r y harder'; on receipt of t h i s message the routines release hypotheses previously considered to have too l i t t l e supporting evidence. this same message causes the recursion l i n e s : 

to be hypothesized so t h a t   if desperate  gap can search b l i n d l y for a solution j 
　　　for a system l i k e gap  which attempts to w r i t e functions by associating an iopair w i t h a p a r t i c u l a r programming construct  it is n a t u r a l to ask what must be done to include a new construct. the h e u r i s t i c routines described so f a r are a l l concerned with functions of type listfn    and i have d e l i b e r a t e l y omitted 