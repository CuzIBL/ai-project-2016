 
the paper describes a transition logic  tl  and a deductive formalism for it. it shows how various important aspects  such as ramification  qualification  specificity  simultaneity  indeterminism etc.  involved in planning can be modelled in tl in a rather natural way.  the deductive formalism for  tl extends the linear connection method proposed earlier by the author by embedding the latter into classical logic  so that classical and resource-sensitiv reasoning coexist within tl. the attraction of a logical and deductive approach to planning is emphasised and the state of automated deduction briefly described. 
1 introduction 
artificial intelligence  ai  or intellectics  bibel  1a   aims at creating artificial intelligence. were there no natural intelligence  the sentence would be meaningless to us. hence understanding natural intelligence by necessity has always been among the goals of intellectics  and is also the goal of cognitive science . 
　different points of view for approaching the goal of creating artificial intelligence have been distinguished  kushmerick  1 . logicism  nilsson  1l   cognitivism  laird et a/.  1   and situated action  agre  1  are three out of several such points of view. in a nutshell  the logicistic point of view argues that man can describe his creations  including an artificial intelligence  only by natural linguistic  hence logical means; thus any way towards artificial intelligence must in some sense be a logical one. this author is strongly committed to the logicistic approach. as a consequence he believes that any other approach is in fact a logicistic one in disguise. 
　intelligence has many features. clearly one of them is the ability to plan ahead in time. intuitively  planning is logical reasoning of some kind. all the more one might expect that planning is the domain where logic and its deductive machinery excel. the fact is that it does not. there are many software systems in everyday use solving planning tasks  but to the author's best knowledge none of them is based on logic and has a deductive component. does this imply that logic is irrelevant for planning and for artificial intelligence for that matter  
　while intelligence implies the ability for planning  the converse has not necessarily to be true. it very much depends on what kind of planning is meant. in a fixed and relatively restricted domain  such as text layout  planning may well be realized in a purely functional way and with standard programming techniques. but functional  or procedural  programming has its limits as we enter more complex and unpredictable domains; in particular it will never be able to produce a behavior which rightly deserves to be named  intelligent   surely as a user of computers you noticed the stupidity of text layout systems . section 1  as well as numerous texts in the literature  give arguments for this statement. it also gives reasons which explain the resistance of the software industry to a bolder move into a logic technology for planning and for other applications. in other words  logic is essential for intelligent planning in the true sense of the term  but industry is not ready to build intelligent systems. 
　it is not the task of intellecticians to lament about this state of affairs but rather to prepare for the coming day when the market will be ripe for a broader use of a truly intelligent technology and to develop the best possible technological basis for it. in fact  if we are frank there is yet a lot to be developed before we can comfortably go out to industry and offer a coherent set of methods for dealing with the many facets of intelligence including planning. 
　in the present paper i review the state of the art in deductive planning with an emphasis on the contributions from research groups influenced by my own work. while much of the work in deductive planning has focused on representational issues we have always approached the problem with the necessary and available deductive techniques in mind. since the methods and systems growing out of our work have finally achieved a leading position in the deduction community by winning the cade-1 competition in automated theorem proving with the setheo system  lets et a/.  1; moser et a/.  1   we are perhaps also well placed to import the best possible techniques into the planning 
	bibel 	1 
community. in other words  the paper will focus on deductive planning as well as on the underlying deduction techniques. since the author sees planning as just one among a number of aspects for achieving artificial intelligence  the case for deductive planning is presented in this paper in form of a paradigm case for achieving the grander goal of artificial intelligence. the paper will therefore not only point the way to intelligent planning but to some extent also the author's proposed way to artificial intelligence  the  it  in the title . 
　in the next section we introduce the logical language used in our approach and discuss the deductive aspects thereafter. the resulting computational logic is called transition logic  tl  which has classical as well as resource-sensitive features. section 1 shows what tl has to do with planning and computation  or with temporal prediction or postdiction for that matter . section 1 compares the logic with other known logics. section 1 shows how the various aspects involved in reasoning about actions and causality can be taken into account within tl. specifically  we discuss ramification  qualification  specificity  simultaneity  in determinism  continuity  hierarchies etc. finally  we briefly describe the tensions between the specialistic and logistic approaches in ai and explain it by outlining the underlying pattern. 
given the impressive recent achievements in automated deduction we conclude with making a case for a logical path towards an artificial intelligence. 
1 a logical language 
any textbook on ai also contains some introduction to first-order logic so that we may assume the reader to be familiar with it. only to communicate our notational conventions we mention that there are objects named by constants  a b c    n-ary  functions named by function symbols  f g h  and  n-ary  relations named by predicate symbols  p  q  r . terms  r  s t   built from variables  x y  z  ranging over objects   constants and function symbols  again denote objects. literals  k  l  are relations among objects or the negation  thereof. they correspond to simple factual sentences in natural language  such as  john is married to the mother of but . 
　for building more complicated sentences represented as formulas  f  g  h  we use the well-known classical  logical  operators  as well as the resource-sensitive operators &  non-idempotent conjunction   |  non-idempotent exclusive disjunction   and  transition . the latter need explanation which follows. 
　the language of predicate logic has been designed to express natural language sentences formally and unambiguously. this was done in a biased way since many of those involved in the design  such as frege  frege  1   had mainly sentences of a mathematical nature in mind. sentences involving actions were not taken into serious consideration until the publication of the situation calculus in 1  mccarthy and hayes  1  in which any n-ary relation p is extended to an  n + 1 -ary one by 
1 	invited speakers 
an argument for determining the situation in which the relation is meant to hold  see section 1 . 
　natural language apparently does not need such an extra vehicle. a  static  mathematical sentence  such as  if a number is greater than zero then it is positive   looks exactly like a  dynamic  one about actions  such as  if i take the book then it is mine  . in  bibel  1a  the main idea for a logic has been outlined which resembles natural language more closely in this aspect of treating actions than does the situation calculus. the approach then was called linear connection method or shortly lcm; for the logic we introduce here on the basis of lcm we propose the name transition logic or tl. the idea underlying lcm spawned a great number of studies based on this idea such as  fronhofer  1; bibel et a/.  1; holldobler and schneeberger  1; grofie et a/.  1; bruning et a/.  1; 1; holldobler and thielscher  1; 1; grofie et a/.  1; fronhofer  
1; herrmann and thielscher  1; thielscher  1; eder et a/.  1; thielscher  1b; bornscheuer and thielscher  1; thielscher  1a  to mention several of them. here facts may be treated as resources which may be consumed by actions. two different formalisms are used to achieve this. one  tl  employs the additional set of resource-sensitive operators &  |   just introduced  the other achieves their effects on the term level of classical logic as we will see in section 1 . 
　a rule k  l  called an action  or transition  rule  or effect axiom   models an action which consumes k and produces l. for instance  

can be seen as the equivalent in tl of the situation calculus rule 

in classical logic  is equivalent with l according to the rule of idempotence. in real-world scenarios it does matter  however  whether you have the same thing  say a dollar  once or twice. similarly  it does matter whether you take your dollar or mine. that is why we need the two extra operators &  | which behave just like their classical counterparts  except for the rule of idempotence  which does not hold for them  and for | modelling an exclusive  rather than an inclusive  alternative. in consequence  we will not have the law of distributivity which allows | to be distributed over &. 
　formulas built from literals by means of the quantifiers and the resource-sensitive operators only are called r-formulas  r-formulas without | are also called conjunctive r-formulas. general formulas of tl are r-formulas  and any expression built from those by means of the classical operators. for instance  is an r-formula  hence a formula  is a formula but not an r-formula  and is not a formula  nor an r-formula  
since the definition does not allow classical operators  other than quantifiers  below a resource-sensitive one in the formula tree. an r-subformula which is not a proper subformula of an r-subformula is also called an r-part in the given formula. 
s 	basic deductive machinery 
we will deal in this paper with a restricted class of r-formulas only which have the form 
	h whereby 	does not oc-
             semantic entailmentfor the resulting class of formulas will be introduced only informally. holds if f is classically endepending of the state 
reached by not performing or performing the transition  in the r-part which  if executed  consumes k 
and produces l. 
　as we see two different states  say  are to be distinguished in this example  the one before and the other after the transition. semantic entailment is dependent on these states. for instance  we might write 
 as more tran-
sitions get involved we obtain more such states to be distinguished.1 validity   is then defined as usual. section 1 will resume the discussion of the semantics of tl while in the present section we focus on its deductive aspects. 
　as the original name of our approach  linear connection method  lcm   suggests  the basic deductive ma-
chinery is based on the connection method  bibel  1; 1 . this deductive method is characterized by the fundamental theorem which in turn characterizes validity of a formula by the so-called spanning property explained shortly. many different logical calculi can be based on this method. 
　in order to explain the spanning property we need the concepts of a path through a formula and of a connection. a path through a formula f is the set of literals of any conjunct of the conjunctive normal form of f. paths can best be illustrated if formulas are displayed as matrices. matrices  positively  represent disjunctions of clauses which in turn represent conjunctions of literals  or  in general  matrices . consider the formula 
  expressing the well-known logical 
rule of modus ponens . 	in negation normal form the 
same formula reads  which is a disjunction of three clauses. hence as a matrix it looks as follows. 

as an aside we mention that a rotation of this matrix by 1＜  counterclockwise  basically yields the corresponding prolog program except for the differences due to the negative representation used in prolog. 
     1  thielscher  1a  gives a precise semantics which  however  needs adaption to tl and the view just outlined. 

a path through such a matrix  or the formula it represents  or the corresponding prolog program  is now the set of literals obtained by selecting exactly one literal from each clause  or  in other words  traversing the matrix say from left to right . in the present example there are exactly two such paths  namely and  the disjunction of the literals of these two paths are obviously the disjuncts of the conjunctive normal form of 
　a connection is a subset of a path of the form {r  - r } . there are two connections in our present example illustrated as arcs in the following display. 

a set of connections  or mating  is called spanning if each path through the matrix contains at least one connection. this is the case for the two connections of our example  hence the formula is  of course  valid according to the fundamental theorem mentioned at the outset of the section. recall that the matrix form is used just for illustration and is thus not essential for the connection method. the connections  and the spanning property  could as well have been identified in the original formula as follows. 

a chain of two  or more  connections like the two displayed in the matrix may thus be regarded as an encoding of one  or more  applications of modus ponens. this illustration also demonstrates that it is connections which lie at the heart of deductive reasoning  more so than rules like the  in the example . in some sense a connection may also be seen as an encoding of an application of the well-known resolution rule. so far connections have been illustrated for propositional examples. they apply to first-order formulas in the obvious way  connecting literals with opposite signs and unifiable terms. an example is the following matrix. 

here validity is established by the two spanning connections along with the substitution x a  which makes the connected hterals complementary. 
　up to this point we have restricted our discussion to deduction for purely classical formulas. the characterising spanning property carries over to the case of general 
	bibel 	1 

formulas in our logical language with one minor modification to be explained shortly. in fact  if we take the r-formula  as our first example then we may use exactly the same matrix as the one before to represent the formula in a two-dimensional way. in fact  in spite of the modification in the formula exactly the same proof for validity is obtained. 

in order to distinguish it from the classical matrix we use a box rather than brackets. one should note  however  that the semantics of the operations represented by the structural arrangement this time is quite a different one. as in the classical case the matrix representation is more of an illustrative relevance  since the connections also here could as well have been placed in the original formula. 
　let us now consider a general formula like  which in its classical part 
expresses that p' is just another name for p and which is represented by the following matrix. 
clear if we add another p to the present r-formula  ie. 
p& p& which intuitively is valid as just illustrated and compare its proof 

with the previous one. in the latter matrix each literal is contained in at most one connection while in the former this linearity restriction in its original form  bibel  1a   is not satisfied because the literal  is contained in more than one  namely in two connections. to cover the general case considered in the present paper this linearity restriction needs a more general definition. 
　for that purpose we inductively introduce the concept of the directionality1  for consumption  and 1  for resource  of the nodes in the formula tree of an r-formula. the root has directionality 1. if a node with directionality d is labelled by & or by | then its successor nodes have the same directionality d; if it is labelled  then the directionality of the left successor node is  d + 1  mod 1 while that of the right successor node is d. the directionality partitions the occurrences of literals in an r-formula  or r-matrix  into resource literals if their directionality in the formula is 1  and consumption literals if it is 1. we attach this directionality to a literal if needed as an upper index. in all our matrix examples the directionality is 1 for a negated literal and 1 for an unnegated one. 
　these definitions go a bit beyond what is intended with this paper simply because they are novel and have not been published before. in fact it could well be that 

they need further adjustment once the structure of formulas and their semantics are finally settled. we just mention here that the definitions aim at yielding the 
1 for simplicity we do not box the literals  which formally 
are r-parts  in the classical part. 	1note that directionality is not the same as polarity. 
1 	invited speakers 
