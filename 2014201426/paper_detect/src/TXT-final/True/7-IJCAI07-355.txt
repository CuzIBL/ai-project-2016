
in many sensing applications  including environmental monitoring  measurement systems must cover a large space with only limited sensing resources. one approach to achieve required sensing coverage is to use robots to convey sensors within this space.planning the motion of these robots - coordinating their paths in order to maximize the amount of information collected while placing bounds on their resources  e.g.  path length or energy capacity  - is a np-hard problem. in this paper  we present an efficient path planning algorithm that coordinates multiple robots  each having a resource constraint  to maximize the  informativeness  of their visited locations. in particular  we use a gaussian process to model the underlying phenomenon  and use the mutual information between the visited locations and remainder of the space to characterize the amount of information collected. we provide strong theoretical approximation guarantees for our algorithm by exploiting the submodularity property of mutual information. in addition  we improve the efficiency of our approach by extending the algorithm using branch and bound and a region-based decomposition of the space. we provide an extensive empirical analysis of our algorithm  comparing with existing heuristics on datasets from several real world sensing applications.
1 introduction
mobile robots carrying sensors can enable a large number of real-world  large-scale sensing applications. consider  for example  the monitoring of algae biomass in a lake. high levels of pollutants  such as nitrates  can lead to the development of algal blooms. these nuisance algal blooms impair the beneficial use of aquatic systems  by blocking sunlight to underwater vegetation  consuming oxygen in the water  and producing surface scum and odors. precise sensing of quantities  such as pollutants  nutrients  and oxygen levels  can provide biologists with a fundamental characterization of the state of such a lake. unfortunately  such sensors are a high cost resource  and it is thus impractical to sufficiently cover the lake with these devices.in this setting  a set of robotic boats have been used to move such sensors to various locations in the lake  dhariwal et al.  1 .
¡¡when monitoring algae biomass  or in many other realworld sensing tasks  planning the motion of such robots - coordinating their paths in order to maximize the amount of information collected - is a fundamental task. often however  such robots have resource constraints  such as storage battery energy  that limit the distance they can travel  or the number of measurements they can acquire.we thus seek to find informative paths for a collection of robots  placing a bound on the cost incurred by each robot  e.g.  on the battery capacity.
¡¡to optimize the path of these robots  we must first characterize the notion of informativeness. since we are addressing a spatial phenomena  a common approach in spatial statistics is to use a rich class of probabilistic models called gaussian processes  gps   c.f.  rasmussen and williams 1 . using such models  informativeness can be viewed in terms of the uncertainty about our prediction of the phenomena  given the measurements made by the mobile robots. in particular  we use the mutual information  mi  criterion of guestrin et al.  to quantify the reduction in uncertainty provided by the measurements made along the selected robot paths. like many other notions of informativeness  mutual information is a submodular function  guestrin et al.  1   i.e.  it satisfies an important diminishing returns property: more the locations that are already sensed  lesser will be the information gained by sensing a new location.
¡¡in this paper  we present the first efficient path planning algorithm  emip  that coordinates multiple robots  each having a resource constraint  in order to obtain highly informative paths  i.e.  paths that maximize some given submodular function  such as mutual information. by exploiting the submodularity  we provide strong theoretical approximation guarantees for our algorithm.
¡¡the problem of optimizing the path of a single robot to maximize a submodular function of the visited locations has been studied by chekuri and pal   who provide an algorithm with strong guarantees. we first provide an approach  sequential-allocation  for extending any single robot algorithm  such as that of chekuri et al.  to the multi-robot setting  with minimal effect on the approximation guarantee.
¡¡unfortunately  the running time of the approach of chekuri et al. is quasi-polynomial  i.e.  exponential in log1 m  for m possible sensing locations  and is thus impractical. using a spatial decomposition and branch and bound techniques  we develop a practical approach for the single robot case  with theoretical guarantees. using sequential-allocation  we then extend our approach to the multi-robot case. furthermore  we provide extensive experimental analysis of our algorithm on several real world sensor network data sets  including data collected by the robotic boats in a lake.
1 problem statement
let us now define the multi-robot informative path planning  mipp  problem: we assume that the domain of the phenomenon is discretized into finitely many sensing locations v. cwe associate with each location v    1.	when traveling between twov ¡Ê v a sensing cost
locations  u and v  a robot incurs a  not necessarily symmetric  traveling cost c u v    1. a robot will traverse a path in this space: an s-t-path p is a sequence oft. the costl locations starting at node s  and ending at
c p  of path p =  s = v1 v1 ... vl = t  is the sum of sensing costs and traveling costs along the path  i.e. 
. for a collection
ofi tifies the amount of information collected by thepk  =pathsi p1p¡È ¡¤¡¤¡¤ ¡È p= {pk1  ... be thepksensing quality}  one for each robot  let  which quan-k paths. the
mipp problem desires to find a collectionspecified starting and ending nodes si andptiof  such that eachk paths  with
path has bounded cost c pi most informative¡Ü b for some specified budget  i.e.  i p  is as
b  and that the paths are the large as possible. formally  the problem can be defined as:
	 ;	subject to c pi  ¡Ü b   i ¡Ü k.	 1 
in our lake monitoring example  the single-robot problem instance is depicted in fig. 1a  top. we try to find the most informative path p1  in terms of predicting the algal content . the experiment cost c vi  would correspond to the energy required for making a biomass measurement  whereas the travel cost c vi 1 vi  would correspond to the energy consumption when traveling from location vi 1 to vi.
quantifying informativeness. how can we quantify the sensing quality i  to model spatial phenomena  a common approach in spatial statistics is to use a rich class of probabilistic models called gaussian processes  gps  c.f.  rasmussen and williams 1 . such models associate a random variabletribution p xx vcan then be used to quantify uncertainty inwith each location v ¡Ê v. the joint dis-
¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡v the prediction of unobserved locations  after acquiring some measurements. to quantify this uncertainty  we use the mutual information  mi  criterion of guestrin et al. . for a set of locationsmi p p¡Ô  theh xmiv pcriterion is defined as:    h xv p | xp    1 
where  andh xhv p x v pis the entropy of the unobserved locations| xp  is the conditional entropy of lo-
v   p
cations v   p after sensing at locations p. hence mutual information measures the reduction in uncertainty at the unobserved locations. hence  in our lake monitoring example  we would like to select the locations that most reduce the uncertainty in the algal content prediction for the entire lake.
¡¡even if we do not consider the constraints in the length of the paths of the robots  the problem of selecting locations that maximize mutual information is np-hard  guestrin et al.  1 . fortunately  mutual information satisfies the following diminishing returns property of guestrin et al. : the more locations that are already sensed  lesser will be the information gained by sensing a new location. this intuition is formalized by the concept of submodularity: a function f isf submodulara  ¡Ý f b ¡Èifs  a   b   v  f b . another intuitive requirement isand s ¡Ê v   b f a ¡È s    fthat the function b  for all a   b   vf is monotonic. hence  more the sensing locations  which means that f a  ¡Ü that are selected  higher will be the collected information.
¡¡thus  we define our mipp problem as one of optimizing paths of length at most b for k robots  such that the selected sensing locations maximize a monotonic submodular function i ¡¤ . note that this definition of the mipp problem allows our approach to be applied to any monotonic submodular objective function  not just mutual information. guestrin et al.  address the sensor placement problem  where a subset a   v of locations are selected in order to maximize the mutual information  without considering path costs. by exploiting the submodularity property of mi  they show that if the discretization v is fine enough and the gp satisfies mild regularity conditions  greedily selecting locations based on this criterion is near optimal. more specifically  the greedy algorithm  which we call greedysubset in the following   after selecting the first k locations ak  picks the location vk+1 = argmaxv i ak ¡È{v}  i ak  and sets ak+1 = ak ¡È {vk+1}. greedysubset hence iteratively adds locations which increment mutual information the most. guestrin et al.  showed that greedysubset selects sets which achieve mutual information of at least  1/e opt ¦Å  where opt is the optimal mutual information among all sets of the same size  and ¦Å is a small error incurred due to the discretization. this result however only holds true in the unconstrained setting  where k arbitrary locations can be picked  and does not generalize to the mipp problem. in this paper  we provide an efficient algorithm with strong approximation guarantees for the more difficult mipp problem.
1 approximation algorithm for mipp
the problem of optimizing the path of a single robot  i.e.  k = 1  to maximize a submodular function of the visited locations has been studied by chekuri and pal . they proposed a recursive-greedy algorithm  which provides a o log|p |  approximation guarantee  where |p | is the number of nodes visited in the optimal path p   which is no larger than the number of possible locations |v|. that is  their algorithm will provide a path of length no more than b that visits locations yielding a submodular value of at least o opt/log|p |   where opt is the submodular value collected by the optimal path. their algorithm provides the best approximation guarantee known for the single robot mipp problem.
¡¡the recursive-greedy algorithm works by iterating over the possible middle nodes of the path  splitting the path into a left subpath and a right subpath. for each possible middle point  the algorithm is applied recursively on the left subpath. then  their approach commits to the selected locations on the left side  and recurses on the right subpath  given these selected locations. this algorithm is  greedy  in that it commits to the nodes selected in the first subpath when optimizing the second subpath.
¡¡in the case of multiple robots  to our knowledge  no sub-exponential approximation algorithm has been proposed previously. in this paper  we first present an algorithm for the multiple robot setting that exploits any approximation algorithm for the single robot case  such as the recursive-greedy algorithm  and  almost  preserves the approximation guarantee. our algorithm  sequential-allocation  works by successively applying the single robot path planning algorithm k times to get the paths for k robots. at stage i  in order not to double-count information from locations already visited in

figure 1: illustration of emip. the sensing domain   a   top  is decomposed into a grid of cells   a   bottom . emip jointly optimizes over cell-paths   b   top  and allocations of experiments in the cells   b   bottom . within the cells  nodes are connected to cell center. emip concatenates the between-cell and within cell paths   c   top  and finally applies heuristics to smooth the path   c   bottom .earlier stages  we supply a modified sensing quality function to the single robot procedure: let ai 1 be the nodes already visited by pathsiai 1 is defined asp1 ... i 1ppi   =1. then thei ai 1 ¡Èpresidual information  i ai 1 . this 
                   ia     residual information effectively commits to the nodes already visited by the algorithm until stage i   1  before deciding the nodes to visit at that stage. the sequential allocation procedure is implemented in line a1 of algorithm 1.
¡¡surprisingly  this straight-forward sequential application of the single robot path planning algorithm results in the following approximation guarantee:
theorem 1. let ¦Ç be the approximation guarantee for the single path instance of the informative path planning problem. then our sequential-allocation algorithm achieves an approximation guarantee of  1 + ¦Ç  for the mipp problem. in the special case  where all robots have the same starting locations  si = sj  i j  and finishing locations  ti = tj  i j   the approximation guarantee improves to 1/ 1   exp  1/¦Ç   ¡Ü 1 + ¦Ç.
all proofs can be found in the longer version of this paper  singh et al.  1 . when using the recursive greedy algorithm from chekuri and pal   the approximation guarantee ¦Ç is o log|p |  as discussed above. this result extends the analysis of blum et al.   who considered additive functions  to our submodular setting.
1 efficient algorithm for mipp
unfortunately  the running time of the recursive-greedy algorithm is quasi-polynomial. more specifically  the running time of the algorithm is o  mb o logm    where b is the budget constraint and m = |v| is the total number of nodes in the graph. so  even for a small problem with m = 1 nodes  the exponent will be 1  resulting in a very large computation time  making the algorithm impractical for real world sensing applications. in this section  we propose an efficient algorithm for mipp  emip  which is based on and has similar approximation guarantees as the recursive-greedy algorithm  but is practical for real-world sensing tasks. exploiting submodularity and using several branch and bound heuristics  we reduce the computation effort to within tractable limits. our emip algorithm assumes that the traveling cost between arbitrary locations is given by their euclidean distance. we discuss the algorithm only for the single robot instance of the problem  since it can be easily extended for multiple robots using theorem 1.
1 spatial decomposition
krause et al.  empirically show  that in addition to submodularity  the mutual information criterion exhibits the following locality property: two sets a and b of sensing locations which are sufficiently far apart are roughly independent. hence  in order to obtain a large amount of information  a robot will have to visit several locations that are far from each other  rather than staying in one small area. we can thus think about planning informative paths as deciding which regions to explore  and then deciding which locations to sense in these regions. this motivates the decomposition of the sensing domain into cells  representing clusters of the sensing locations  and then run the recursive greedy algorithm on these cells instead of actual sensing locations. fig. 1 presents an illustration of our approach. overview. informally  our strategy will be the following:
1. we decompose the sensing region  c.f.  fig. 1a  top  into a collection of non-overlapping cells {c1 c1 ... cn}  c.f.  fig. 1a  bottom . the distance between two cells is defined as the distance between the centroids of these cells. all nodes v ¡Ê v  representing sensing locations  are assigned to the cell ci in which they are contained.
1. we define a new optimization problem  the spatially decomposed mipp problem  or sd-mipp problem on v. in sd-mipp  we jointly optimize over cell-paths in v
 c.f.  fig. 1b  top   and over the allocation of measurements to the cells visited by the paths. when allocating measurements to a cell  we ignore the traveling cost within the cell  c.f.  fig. 1b  bottom . since the cells are not excessively large  this simplification only leads to a small additional cost when the sd-mipp solution is transformed back to original mipp problem.
1. we transfer the  approximate  sd-mipp solution  consisting of a cell-path and an allocation of measurements to cells  c.f.  fig. 1c  top   back to the original mipp problem. we then smooth the path using tour-opt heuristics  c.f.  fig. 1c  bottom . the resulting solution will have an approximation guarantee which depends on the diameter of the chosen cells.
¡¡more formally  the sd-mipp problem is the following: suppose  the budget b is split into a budget bt for traveling between the cells  and a budget be for making experiments at sensing locations within the visited cells. we want to find a path p  =  cs = ci1 ... cil = ct  with a travel cost of at most bt. this travel budget is measured in terms of distances between centers of visited cells  and the cost of traveling within cells is defined as 1. in addition  for each visited cell cij in p   we want to select a set of sensing locations aj  such that the total cost c a1 ¡È ¡¤¡¤¡¤ ¡È al  ¡Ü be  and that the information i a1 ¡È ¡¤¡¤¡¤ ¡È al  is as large as possible. the optimal sd-mipp solution p  uses the optimal split of the budget. to simplify the presentation  we rescale the costs such that the cells form a uniform grid of quadratic cells with width l  and assume that the sensing cost cexp is constant over all locations. these assumptions can easily be relaxed  but they allow us to relate the path costs to the number of cells traversed  to simplify the discussion.
algorithm for sd-mipp. we now present our algorithm for solving the optimization problem on v. in section 1  we will discuss several details of efficient implementation. the complete algorithm works as follows: an outer loop  c.f.  line b1 in algorithm 1  iterates through   where b is the budget given to
the sd-mipp problem  allocating budget bt out of the total budget b for traveling between the cells  and for making experiments within the visited cells. stepping through the travel budget in powers of 1 results in faster performance  log1 b instead of b iterations   and increases the required budget bby at most a factor of 1. the inner loop is formed by a recursive procedure  shown in algorithm 1  which selects cells to visit  and allocates experiments to cells.
¡¡more specifically  this recursive-emip procedure takes as input a starting cell cs  a finishing cell ct  an experimental budget be  a residual x indicating the locations visited thus far  initially empty   and a maximum recursion depth  iter  which is initialized to log1 bt. we then:
1. iterate through all possible choices of middle cells cm  and budget splits to spend for making experiments on the path from cs to cm  c.f.  fig. 1b . the budget splits can either be linearly  more accurate  or exponentially  faster  spaced  as described below.
1. recursively find a path p1 from cs to cm  subtracting 1 from the maximum recursion depth  iter. this maximum recursion depth controls the maximum number of cells visited by p1. at the top level of the recursion  p1 will visit a maximum of bt/1 cells  in the next level  the limit will be bt/1 cells  and so on. when reaching a maximum recursion depth of 1  we use the greedysubset algorithm  c.f.  section 1  to select the sensing locations ai based on the residual information function ix constrained by budget b. hereby  the residual x is a parameter of the recursion  and contains all nodes visited before considering the current cell. as an illustration  consider the black nodes selected in the middle cell cm in fig. 1b  bottom. these have been selected by the greedysubset algorithm with budget  since they provide the maximum improvement in mutual information measured against the path p1 of fig. 1b  top.
1. commit to the nodes visited in p1  and recursively
algorithm: emip
input: b  k  starting / finishing nodes s1 ... sk  t1 ... tk output: a collection of informative paths p1 ... pk.
begin
perform spatial decomposition into cells; find starting and ending cells csi and cti;
     x ¡û ; a1 for i = 1 to k do
b1do
emip csi cti be x iter ; smooth	using tour-opt heuristics;
	pi ¡û argmax	;
x ¡û x ¡Èpi;
   return p1 ... pk; end 1: emip algorithm for informative multiple path planning  realizing the sequential allocation described in section 1  c.f.  line a1 . the path for the i-th robot is found using the spatial decomposition approach described in section 1  which calls the recursive procedure  c.f.  algorithm 1 .
find a path p1 from cm to ct  with experimental budget. this path will also visit at most bt/1 cells. we again greedily select the sensing locations at maximum recursion depth of 1  but now based on the residual information ix¡Èp1  since we have committed to p1.
1. concatenate the nodes obtained in p1 and p1 to output the best path from the algorithm  c.f.  fig. 1c  top .
the recursive-emip procedure is based on the recursive greedy algorithm of chekuri and pal   but exploits our spatial decomposition.
linear vs. exponential budget splits. step 1 considers different budget splitsto the left and right subpaths. similar to the recursive greedy algorithm  one can choose be = {1 1 ... be 1 be} to be linearly spaced. since the branching factor is proportional to the number of considered splits  linear budget splits lead to a large amount of computation. an alternative is to consider only exponential splits:
.
here the branching factor is only logarithmic in the experimental budget. even though we are not guaranteed to find the same solutions as with linear budget splits  we can both theoretically and empirically show that the performance only gets slightly worse in this case  compared to a dramatic improvement in running time. in addition to these two ways of splitting the budget  we also considered one-sided exponential budget splits  i.e.    which halves the branching factor compared to the exponential splits defined above. although we do not provide theoretical guarantees for this third possibility  we experimentally found it to perform very well  c.f.  section 1 .
solving the mipp problem. now we need to transfer the approximately optimal solution obtained for sd-mipp back to mipp. this is done by connecting all nodes selected in cell ci to the cell's center   as indicated in fig. 1b bottom   then connecting all selected centers to a path  fig. 1c top   and finally expanding the resulting tree into a tour by traversing
algorithm: recursive-emip
input: cs ct be x iter
output: an informative path p from cs to ct.
begin if  d cs ct    1iterl  then return infeasible;
a1	p ¡û greedysubsetbe vi : vi ¡Êcs ¡Èct ;
if  iter = 1  then return p;
reward ¡û ix p ;
b1	foreach cm ¡Êcf do c1	for	do
	p1 ¡û recursive-emip	 ;
p1 ¡û recursive-
	emip	 ;
if  ix p1.p1    reward  then p ¡ûp1.p1; reward ¡û ix p ;
   return p; end
figure 1: illustration of our branch & bound approach.  a  shows the sum-max tree representing the search space. each max node selects a middle cell and a budget allocation  and each sum node combines two subpaths.  b  shows how upper bounds at sum nodes are used to prune branches.  c  shows how lower bounds at max nodes are tightened to allow even more pruning.1: recursive-emip procedure for path planning.
the tree twice. this traversal results in a tour which is at most twice as long as the shortest tour connecting the selected vertices.  of course  an even better solution can be obtained by applying an improved approximation algorithm for tsp  such as christofide's algorithm .  the following theorem completes the analysis of our algorithm:
theorem 1. let p  be the optimal solution for the mipp problem with a budget of b. then  our emip algorithm will find a solution achieving an information value of at least i   whose cost is no more than
 in the case of linear budget splits
  and no more than in the case of exponential budget splits  for be .
¡¡running time analysis of emip is straightforward. the algorithm calls the routine recursive-emip log1 b times. if ti is the time to evaluate the mutual information i  then time for computing greedy subset tgs  line a1  is o nc1 ti   where nc is the maximum number of nodes per cell. at each recursion step we try all the cells that can be reached with the available traveling budget  line b1 . for the possible experimental budget split  we try all  linearly or exponentially spaced  splits of among the two paths p1 and p1  line c1 . the recursion depth would be.
the following proposition states the running time for emip.
proposition 1. the worst case running time of emip for linearly spaced splits of the experimental budget is   while for the exponentially spaced splits of the experimental budget it is
	gs	1	1
¡¡comparing this running time to that of the original chekuri et al. algorithm  o  mb o log1 m     we note a reduction of b to log1 b in the base  and log of the number of nodes  log1 m  to log of the number of cells  log1 n  in the exponent. these two improvements turned the impractical recursive-greedy approach into a much more viable algorithm.
1 branch and bound
the spatial decomposition technique effectively enables a trade-off between running time complexity and achieved approximation guarantee. however  the emip algorithm still has to solve a super-polynomial  albeit sub-exponential  search problem.
¡¡the problem structure can be represented by a sum-max tree as shown in fig. 1a. the sum nodes correspond to combining the two paths p1 and p1 on either side of the middle cell cmi. the max nodes correspond to selecting the best possible path for all possible experimental budget split inand all possible middle cells cmi. thus  each sum node will have two children  each one a max node  representing the best possible solution from paths p1 and p1 respectively. the root of the tree will be a max node selecting the best possible solution at the highest level. the depth of the tree  iter  depends on the traveling budget. as an initial pruning step  we note that since the middle cells have to lie on a path  we only need to consider those which are at most distance bt/1 ¡¤ l from the starting and finishing cell.
¡¡in order to avoid exploring the entire sum-max tree and waste computation considering possibly bad solutions  we follow a branch and bound approach. at each max node we derive upper bounds for all the child sum nodes. we can then prune all the sum node children with upper bounds lower than the current best solution. if any of the child sum nodes provides a solution better than the current best solution  then the current best solution for the parent max node is updated with the improved solution. fig. 1b presents an illustration of this concept: after completely exploring branch sum1  the current best solution  1  is thus a lower bound for max1. the upper bound for branch sum1 is 1  which is lower than the current best solution of 1  and hence we can prune this branch and need not explore it further. nodes such as sum1 however  which have higher upper bounds  1  than the current best solution  1   need to be explored further. in order to improve the current best solution faster  at each max node we explore the sum nodes in the decreasing order of their upper bounds.  an additional heuristic that is very effective in practice is to explore only the top k sum nodes. 
upper bound on the sum nodes. one approach for acquiring upper bounds on the sum nodes is to relax the path constraints  and then find the optimal set of reachable nodes for each path  p1 and p1 . in order to compute upper bounds for p1  p1  and their corresponding max nodes  we hence need to compute the best set of observations within all reachable nodes. since this problem itself is np-hard  we approximate it using the greedysubset algorithm: for an allocation of k experiments to p1  p1   we run the greedysubset algorithm to select k nodes reachable  w.r.t. the remaining traveling budget  within this path. since this algorithm guarantees a constant factor  1   1/e  approximation  nemhauser et al.  1   multiplying the resulting information value by  1   1/e  1 provides an upper bound on the information achievable by the path  and hence the corresponding max node . in fig. 1c for example  we use the greedy algorithm to get upper bounds 1 for max1 and 1 for max1  resulting in an upper bound of 1 = 1 for sum1. we can even compute tighter online bounds for maximizing monotonic submodular functions  as discussed by nemhauser et al. .
lower bound on the max nodes. in order to perform pruning on lower levels of the sum-max tree  we need lower bounds for the max nodes. instead of having to explore one branch completely as described above  we have two ways for acquiring such lower bounds: based on a heuristic algorithm  and based on the current best solution of the grandparent max node. we use the larger of two different lower bounds.
¡¡the first lower bound is based on a heuristic proposed for the  modular  orienteering problem in  chao et al.  1 . the solution obtained by the heuristic immediately provides a lower bound at each max node. the heuristic is applied to the actual sensing locations v  instead of the cells. starting node and finishing node for the heuristic are selected greedily from the starting cell and the finishing cell respectively. the current traveling budget is added to the available experimental budget to calculate the budget constraint for the heuristic.
¡¡a second pruning bound for the max nodes is given by the difference between the lower bound  the current best solution  of the grandparent max node  and the upper bound on the other path originating from the parent sum node. this is illustrated in fig. 1c: for the node max1 and max1  a lower bound of 1 and 1 respectively is calculated using the heuristic. the current lower bound at the grandparent max node  max1  is 1. the parent sum node is explored further since the sum  1  of the upper bounds from each of the child max nodes  1 and 1 for p1  max1  and p1  max1  respectively  is greater than the current best solution  1  of the parent max node. a potentially tighter pruning bound is calculated by subtracting the upper bound of p1  max1 ¡Ü 1  from the current best solution of the grandparent max node  max1 ¡Ý 1 . this bound potentially allows to prune branches since  given the upper bound on the second path  improving on the current solution of the grandparent requires exceeding this pruning bound. in our example  this pruning bound  1  is tighter than the lower bound provided by the heuristic  1   and hence enabled pruning of branch sum1  with upper bound 1 . this pruning would not have been possible when only using the lower bound calculated using the heuristic  1 .
¡¡before exploring the second path p1  the exact reward collected by the first path p1 can be used for calculating this additional lower bound. when exploring p1 however  the exact reward for p1 is not known  hence only the upper bound calculated using the greedy algorithm as described above can be used. in order to ensure that this lower bound is as tight as possible  we first explore the child of the sum node having more budget in the current budget split instead of always exploring p1  the path from starting cell to middle cell first.
sub-approximation. lower and upper bounds can be quite loose. we can address this issue  and further trade off collected information with improved execution time  by introducing a sub-approximation heuristic: instead of comparing the lower bound of a max node directly with the upper bound from the children's sum nodes when deciding which subproblems to prune  we scale up the lower bound by a factor of ¦Á   1. this scaling often allows us to prune many branches that would not be pruned otherwise. unfortunately  this optimistic pruning can also cause use to prune branches that should not be pruned  and decrease the information collected by the algorithm. fortunately  we can prove that this approach will not decrease the quality of the solution by more than 1/¦Á. furthermore  in practice  for sufficiently small ¦Á values  this procedure can speed up the algorithm significantly  without much effect on the quality of the solution.
1 experiments and results
1 data sets
in order to evaluate the performance of our algorithm  we tested it on three real world datasets. our main set of experiments are on measurements of the biomass content in lake fulmor  james reserve  dhariwal et al.  1 . we used data collected by a boat carrying a temperature sensor around the lake  of width around 1 meters and length around 1 meters. temperature was previously found to be strongly correlated with the algal bloom in the lake. the average speed of the boat was approximately 1 m/s. half of the total measurements  1 different sensing locations  were used to learn a nonstationary gaussian process model by maximizing the marginal likelihood  rasmussen and williams  1   and the rest of the measurements were used for experimentation. we divided the lake into 1 cells  with distance between adjacent cell approximately 1 meters. based on the average speed  and motivated by a typical measurement duration of roughly
1 seconds  we set the experiment cost to be 1 meters.


        e  cell density  lake   f  branch & bound  lake   g  branch & bound  temp.   h  branch & bound  precipit.  figure 1: single robot experiments on three real-world data sets. note the logarithmic scale on the running time plots  figures 1b and 1d .¡¡as our second dataset  we used the existing deployment of 1 wireless sensor motes to learn the amount of temperature variability at intel research berkeley. we divided the complete region into a uniform grid containing 1 equal sized cells  and determined the experimental cost to be 1m  distance to travel between adjacent cells . we learned a gp model as discussed by krause et al. .
¡¡thirdly  we explored the performance of our algorithm on a precipitation dataset collected from 1 regions during the years 1. we followed the preprocessing and model learning described by guestrin et al. .
1 single robot experiments
we first analyze the performance improvement of our emip algorithm compared to the recursive-greedy procedure  chekuri and pal  1 . fig. 1a presents trade-off curves comparing path costs and collected reward  for different budget values b on a subset of temperature data set containing only 1 nodes as recursive-greedy was intractable on larger datasets. fig. 1b presents the corresponding running times. we can see that the emip algorithm achieves  almost  the same amount of mutual information as recursive-greedy  but at several orders of magnitude lower running time. since the recursive greedy algorithm is essentially a search procedure with greedily restricted search space  this result also indicates that an exhaustive search over all paths is intractable.
¡¡we then compare the impact of restricting ourselves to the exponentially spaced experimental budget allocation. figures 1c and 1d present the results on the lake data set. as expected  linear variation achieves very slightly larger collected mutual information than the exponential variation. however  the computation times for exponential variation are several orders of magnitude smaller than for linear variation.
¡¡our next experiment considers the effect of varying the coarseness of spatial decomposition. fig. 1e shows the results of this experiment on the lake data  indicating that the mutual information is largely insensitive to the coarseness of the cells. on the other hand  the computational complexity decreases drastically as fewer cells are used  c.f.  proposition 1 . we performed the same experiments on both the temperature and precipitation data. detailed results are omitted here due to space limitations  but they confirm the above insights. in order to analyze the impact of several branch and bound heuristics  we plotted trade-off curves for varying budgets  for the lake  fig. 1f   temperature  fig. 1g  and precipitation data  fig. 1h . we find that the mutual information collected is rather insensitive to sub-approximation  up to 1%   as well as to the restriction to 1 best sub-problems  exploring only the 1 best sum nodes per branch . we also compared emip to a heuristic search algorithm  chao et al.  1 . this heuristic had been empirically found to be one of the best heuristics for the similar problem with fixed reward on each node  liang et al.  1   so we would expect it to also perform well in the submodular case. we can see that  while for the smaller temperature data set  the heuristic achieves comparable performance  for both larger data sets  lake and precipitation   emip strongly outperforms the heuristic.
1 multiple robot experiments
fig. 1a shows the comparison of collected reward when multiple robots are available to move the sensors around. as the number of robots are increased  the collected reward exhibits the expected diminishing return  due to the submodularity of mutual information. fig. 1b presents the same analysis when the robots can start at different locations. here  four locations  at four corners of the lake  were pre-selected as possible starting locations. the three robots greedily selected the starting location leading to the largest increase in mutual information.

figure 1: paths on the lake for different starting cells.
cost of output path per robot meters 
 a  multi-robot: reward  same startaverage cost of output path per robot  meters 
 b  multi-robot: reward  different start 1 1 1 average cost of output path per robot meters 
 c  multi-robot: rms  same start¡¡¡¡¡¡1 1 1 average cost of output path per robot meters 
 d  multi-robot: rms  different startfigure 1: experiments using multiple robots on the lake dataset.¡¡as expected  the first two robots choose starting locations on opposite ends of the lake and collect roughly independent information. with addition of the third robot  the diminishing returns in collected reward can again be observed. figures 1c and 1d show the predictive rms error for this experiment. analogously to the information value  the rms error decreases more quickly if the three robots start at different locations  and the biggest improvement as as expected is in the step from one to two robots. fig. 1 shows the chosen paths for the case of three robots  each starting from different locations.
1 related work
a related problem to mipp is one where each node has a fixed reward  and the goal is to find a path that maximizes the sum of these rewards  traveling salesman problem with profits  tspp   feillet et al.  1  . such sum is a modular function  rather than the submodular function addressed in this paper. a subcategory of tspp  the orienteering problem  op  is defined to maximize the collected reward while keeping the associated cost is defined less than given budget b  laporte and martello  1 . multi-robot version of op is studied in literature as the team orienteering problem  iming et al.  1 . for the case of unrooted version of op  when no starting location is specified   the approximation guarantees known for prize collecting tsp and k-tsp can be easily extended  johnson et al.  1 . blum et al.  gave the first constant factor approximation for the rooted op in general undirected graphs. they also extended their algorithm for multi-path op. for op with submodular reward fuction  the approach of chekuri and pal   discussed in section 1  provides the best approximation guarantee  but has a quasi-polynomial running time. in the robotics community  similar work has been developed in the context of simultaneous localization and mapping  slam . stachniss et al.  develop a greedy algorithm  without approximation guarantees  for selecting the next location to visit to maximize information gain about the map. in contrast  sim and roy  attempt to optimize the entire trajectory  not just the next step  but their algorithm introduces some approximation steps without theoretical bounds. we also expect our approach to be useful in the slam setting.
1 conclusions
in this paper  we presented the first efficient path planning algorithm that coordinates multiple robots  each having a resource constraint  in order to obtain highly informative paths  i.e.  paths that maximize some given submodular function  such as mutual information. we first described sequential-allocation  an approach for extending any single robot algorithm to the multi-robot setting  with minimal effect on the approximation guarantee. then  building on the  impractical  single robot approach of chekuri and pal   we developed emip  a practical algorithm for obtaining an informative path for a single robot with theoretical guarantees  that exploits spatial decomposition and branch and bound techniques. using sequential-allocation  we then extended our approach to the multi-robot case. furthermore  we provided extensive experimental analysis of our algorithm on several real world sensor network data sets  including data collected by robotic boats in a lake  demonstrating the effectiveness and practicality of our methods.
acknowledgements this work was supported by nsf grant nos. cns-1  cns-1  ani-1 and a gift from intel corporation. carlos guestrin was partly supported by an alfred p. sloan fellowship and an ibm faculty fellowship. we would like to thank bin zhang for providing the lake data set. 