	t h e 	i n c o m p l e t e 	d a t a b a s e 
k a r e n l . k w a s t 
university of a m s t e r d a m 
departments of mathematics and computer science  
plantage muidergracht 1  1 t v   a m s t e r d a m 

a b s t r a c t 
the introduction of nulls  unknown values  in the relational database calls for an extension of the theoretical foundation of the database model. nulls are alien to classical logic  in which the relational database model is rooted. this has led to all sorts of counterintuitive ad hoc solutions  reasonable in one place  but awk-
ward in others. 
a sound model-theoretical foundation of nulls in a relational database based on modal logic is presented here. the modal interpretation of queries is easy to comprehend and intuitively correct. partial interpretations  which are to be preferred from a computational point of view  are inadequate for arbitrary queries. formulas that have an identical partial and modal interpretation are called safe. safety guarantees on the one hand that the partial answer is meaningful and on the other hand that the modal interpretation is finitely computable. the suitability of modal logic to model nulls is illustrated by a short discussion of the effect of nulls on database integrity. 
1 i n t r o d u c t i o n 
the relational database model has in recent years been extended to cope with missing data   codd  1  . a relation may contain incomplete tuples  because for some objects an attribute is inapplicable  name-of-spouse  or because it is unknown  blood-group . absent data are unproblematic from a theoretical point of view  see  lien  1    and will not be discussed here. the mathematical properties of unknown data  however  are insufficiently known. as a consequence  the treatment of unknown values in relational databases tends to be illogical or unnatural  see  date  1   codd  1  . this paper deals with the theoretical foundation of nulls in a relational database. 
1 u n k n o w n values 
let nulls  represent the unknown values in a relational database. indices are used to distinguish between different unknown values and multiple occurrences of the same unknown value. these indices will be hidden from the user  but they are essential to preserve basic algebraic laws such as 

　the main problem with nulls is that they lack identity criteria: there is no way to decide whether or rather except by revealing w's identity. this means that is neither true nor false  and thus contradicts the law of the excluded middle. unfortunately  the relational database model is firmly rooted in classical logic  so the introduction of nulls calls for major changes. the following sequence of equivalent terms  for instance  must be relinquished  since in the presence of nulls the first term is but a part of the last one: 

the precise point at which this sequence breaks down will depend on the type of logic that is adopted. 
1 choice of logic 
since the relational database model is set in classical logic  attempts have been made to incorporate nulls into classical logic. the simplest solution is to use defaults  reserved values like xxx or 1  providing no system support of nulls at all   date  1  . the relational tuples have been extended with additional attributes to encode the level of uncertainty   biskup  1    ola  1  . this does not suffice to preserve classical tautologies  
such as  so equations have  been interpreted through uniform null substitution   grant  1   or normal form transformation   lipski  1    vassiliou  1  . there is no formal justification for the restriction of these variants of supervaluation to equational expressions. moreover  supervaluation leads to an interpretation that is not compositional  so: 

in recognition of w = 1's being neither true nor false  there have been proposals that use many-valued logic   codd  1   codd  1    zaniola  1   or partial logic   demolombe et a/.  1  . the missing data create a gap in the truth value assignment  not only for equations but for relational literals as well. unfortunately  this implies that classical tautologies are no longer valid  in that they have no truth value for tuples 
kwast 
with nulls. since query optimization heavily depends on term rewriting  this will have all sorts of unexpected side-effects: 

　the third approach  the one i advocate for nulls in a relational database  is to change to modal logic   lipski  1   lipski  1    lipski  1    imielinski and lipski  1b    levesque  1  . modal logic is a conservative extension of classical logic  so all classical laws are preserved  and the correct inequivalence emerges: 

a drawback of modal logic is its computational complexity. nevertheless  it is the only approach that is consistently intuitive and easy to comprehend. 
1 	choice of paradigm 
under the database-as-theory paradigm  see  reiter  1    demolombe et a/.  1   nulls are skolem constants and part of the language. this leads to 'extended relational theories' for which the unique names axioms  which specify the identity criteria for constants and nulls  are no longer complete. as a consequence  the query evaluation algorithm is only sometimes complete   reiter  1    vardi  1    demolombe et a/.  1  . this paper adheres to the database-as-model paradigm  but all results can be translated to the database-astheory paradigm  see  vardi  1  . the choice bet ween the two paradigms is irrelevant  as is illustrated by de molornbe & farinas del cerro in   where they discuss the  extended herbrand model'. one advantage of the database-as-model approach is that nulls need not be added to the query language  but may remain in the realm of the database implementation. 
1 	outline of this paper 
it is well-known that the meaning of an incomplete relation is the set of its completions   biskup  1    vardi  1  . the main innovation of the present proposal is to use a set of revelations to represent those completions  and to incorporate them explicitly into the interpretation of relational queries  query evaluation will be hard to compute inductively  and is therefore linked to -by way of example- a partial interpretation  working with a modal interpretation ensures that the limitations of using nulls can be established with greater c:ase and precision  the intuitive correctness of employing modal logic to represent unknown values is illustrated in a discussion of database integrity  
1 	a r e l a t i o n a l m o d e l f o r n u l l s 
after all is said and done  a complete relational database 
db is just a set of tables  an instance of a database scheme  acceptable if it satisfies some set of constraints 
x. as such it is a model with d the domain of relevant objects and the interpretation of relation names as relations over v. 
　each constant c con will denote a unique object  and each object d d must have a name. these 
1 	logic programming 
assumptions are reasonable in a database context; if in addition all objects have different names  as required by the unique names axioms  then the identity = is interpreted as  
1 	extend the model  not the language 
suppose the database is provided with a finite set of nulls 
then the model contains relations 
over the extended domain but the interpretation of = can not be 	since that would make false instead of unknown. especially when ranges over a finite domain  such as days in the week  we cannot pretend that w is different to them all. 
　there is no need to extend the query language with names for nulls. queries that refer to nulls should be reformulated by means of existential quantification  addressing the null through its context  a partial tuple in an incomplete relation. 
　the identifying index is not relevant to external users. indices are analogous to the surrogates used for tuple identification; they are there for the sake of the system  but the external user cannot address them. in other words  nulls are part of the incomplete relational model  not part of any relational query language. 
1 	revelations 
the ultimate meaning of the null is modeled by a set g of revelations. the term 'revelation' is chosen to indicate that the unknown identity of the nulls is revealed eventually  but we want to reason over the incomplete database without waiting for revelations  cf symbolic constraint solving  see  denneheuvel et al.  1  . alternative terms would be 'null-assignment'' or even 'substitution'  though the latter term sounds more innocent than is justified by its elusive denotation. 
　a revelation  is a function that assigns a proper value to each null  thus resolving the nulls in the relations  and completing the database: for each and in is a complete relation over v. 
　the revelations g represent all possible completions of the database. partial knowledge of the identity of the nulls can be encoded in g's structure. the database integrity constraints  for instance  may resolve some nulls  and rule others unequal  see 1 below . 
1 	t r u t h definition 
queries to the database will be formulated in a coddcomplete query language  such as the relational algebra. any query can be translated into first order predicate logic  however  so the truth definition is here recursive over logical connectives and quantifiers  extended -for the sake of the nulls- with the modal operators k for 'it is known that' and m for 'it is conceivable that'. 
　in the clauses below the assignment h is a standard assignment  to resolve free variables. 
existential quantification is interpreted by means of xcylindrification : 

the symbol  denotes the equality of two assignments on all variables  with the possible exception of x. 


kwast 


figure 1: restricted interpretations 
1 	comparison on h 
to compare the modal and the partial interpretations we need to restrict the latter to h  see figure 1. this can be done without loss of expressihility  since any reference to nulls can be avoided by additional quantification. 

both the modal and the partial interpretation cannot be computed on h directly. the intersection of with h interferes with quantification  but otherwise can itself be computed by induction over the structure of the query. for modal logic  answers are lost in case of 

　the partial instance as defined here does not make use of the set of revelations g  so any query that depends indirectly on the structure of this g cannot be correctly evaluated. to avoid this unfairness it will be assumed that g is the full set the next example shows that  unless some sort of fairness condition is laid on g  even a relational atom may be unsafe. 

1 	classes of safe queries 
positive selections in combination with union  join and projection can be evaluated over incomplete relations  see  imielinski and lipski  1b  . these relational terms correspond roughly with positive queries as defined by reiter  see below   and with formulas without negation. the translation of positive selections is of the format with e an equational expression. 
definition 1 positive 

disjunction and existential quantification. 
theorem 1 comparison 	of 
1 	logic programming 


　the change is significant. apparently we need a little modal information even for a simple literal. it is not much  just the set of all possible revelations  but it is a clear indication that modal logic will become indispensable when queries get more complex. 
　once the partial interpretation is adapted in this manner  we can prove that all given sets of queries are safe: theorem 1 if  p is a positive or conjunctive query  then 

　the set of semantically safe queries can easily be extended using modal equivalences  leading to larger syntactic sets of queries  see  kwast  1  . 

1 interpretation versus computation 
there are two ways to appreciate safety. on tin* one hand  safe queries are queries for which the modal interpretation gives the intuitive meaning of the partial interpretation. this feeling is strengthened by the factthat the partial interpretation of an unsafe query equals the modal interpretation of a modalized version of the query  as in the following example. 

as is suggested by the second query  there is  unfortunately  no uniform translation from the one logic to the other. every partial answer can be expressed by a modalized formula  of course  but it cannot be predicted by which particular formula. it must be concluded that there remains a class of queries for which the partial interpretation is inappropriate. some answer is computed  but there is no intuitive idea about what it might be. 
1 	finite domains 
obviously  the definition of a partial model can be changed  for instance by the addition of g into the interpretation of  and/or . to be sure  in  demolombe et a/.  1  the partial induction has access to g to determine the basic clauses. 
　in this manner the partial interpretation is set on a modal base. this does not suffice to make it modal logic  of course. for one thing  partial logic cannot cope with finite domains: 

in a database context many nulls will refer to a finite domain  such as day-in-the~week or blood-group. a partial interpretation  even when set on a modal base  is not adequate for queries in which finite domains are involved. 
1 	reasonable queries 
if there is no uniform translation from partial logic into modal logic  we may turn in the opposite direction and use partial logic to compute the modal interpretation. obviously  this only works for safe and 'reasonable' queries  queries which can be finitely computed if the database is complete. if there is no other simple way to compute the modal interpretation  then that is a good reason to forbid the query. it might be cheaper to try and find out what the missing data should have been by using the telephone or a nationwide poll. 
1 	supervaluation 
a good example of a computation method for a distinct class of queries is normal form transformation used to evaluate projection-selection queries. imielinski &: lipski prove in   1b    that 
is a representation system. this means that projectionselection queries can be correctly represented by functions on  -tables  relations with unindexed nulls. in our terminology: ps-queries are safe  on the assumption that all nulls occur uniquely in the tables  to guarantee that two nulls need never be identified. as was shown before  see example 1   ps-queries are not safe with respect to the partial interpretation  but they are safe with respect to supervaluation of the normalized form. 
1 nulls and integrity 
the effect of nulls on integrity has not drawn as much attention as the problems of query evaluation. the traditional definition of a database satisfying its constraints is not adequate  see  reiter  1  . codd's suggestion      that nulls should just be ignored  suspending judgement to the time of their revelation  is no solution either. not every incomplete tuple may be added to the database. 
　the model for nulls presented here is well suited to describe database integrity. 
definition 1 an incomplete database is acceptable iff there exists an acceptable revelation  that is  one that yields a database that satisfies all its constraints. 
this simple definition can be compared to the definitions proposed in literature  see  reiter  1  : it is not enough if the atomic facts plus constraints are satisfiable; they must be satisfied by a completion deriving from a revelation. still  the atomic facts could never imply the constraints. so definition 1 is a suitable adaptation of the closed world assumption. 
1 	w h a t should hold 
the set of constraints will divide the set of revelations in two: acceptable and unacceptable revelations. relative to the former set we define a modal operator x with the intended meaning what should hold  that is  what holds in all acceptable completions. 

this definition  being based on kripke semantics  captures the interaction of integrity constraints with unknown values in an intuitive manner  see  kwast  1  . 
kwast 

queries are practically never formulated with the help of x  or any analogous operator. evaluated over total relations x is vacuous  of course  but in the presence of nulls the interpretation of a query which does not involve x will contain answers that contradict the relational dependencies  and it will miss others that should have been there. unfortunately  it cannot be hoped that integrity considerations are actually employed in answering queries  on account of the ensuing complexity. 
1 conclusion 
the overall conclusion of this paper is that any sound model-theoretic foundation of nulls in a relational database must be based on modal logic. that modal logic is appropriate is obvious  but it is necessary as well  as there is no other way to assess the intuitive correctness of an evaluation method for wide classes of queries. 
