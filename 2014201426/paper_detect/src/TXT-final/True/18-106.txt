 
the main problem  when automatically proving theorems by induction is the problem of strategy  or  how to automatically direct deductions. this is not trivial  and  at present  only a mixture of complicated strategies have been investigated. the essential contribution of this paper is therefore the proposing of a new strategy for inductive theorem proving  inspired by a new mecanism called constructive matching  cm   and used for automatic programming  f1 . 
we also propose a new method for the recognition of predicates and functions  necessary to prove a theorem by our approach  that are not defined in the knowledge-base   invention  of new operators . finally  we illustrate the obtaincment of a suitable generalized lemma necessary for the proof 
introduction 
one of the earliest techniques for program synthesis  the automated construction of computer programs  has been the deductive approach  m1   in which the program is dcvelopped by proving -a theorem corresponding to the given specification. 
the special techniques needed for the fulfilment of this deductive approach nave inspired us to develop a constructive methodology for inductive proofs. for this  we determined  step by step  all the tools we needed for inductive automatic theorem proving  i.e.  
 i  we determined in which  data-types   proofs by induc-tion can be performed automatically  requirements on axioms  definitions of functions and predicates  ...    but we do not treat the problem of how to transform  bad  data into  good  data   
 ii  we determined by what the choice of  a scheme of  the induction principle is influenced  and  because we find it possible   we formulated an induction principle which helps us to automatically  generate  induction hypotheses  in the form  that are necessary for the proof of a given theorem; 
 iii  we determined how to proceed from given data  axioms + induction hypotheses  to the given theorem  i.e the strategy  
in the present paper only  ii  and  iii  are treated 
the novelty of our approach  and a comparaison with already existing inductive theorem proving systems is exemplified in  f1   and therefore not explained here. but  let us point out an essential difference: we construct directly  without transformations  the desired formula. this difference appears to be very important  as soon as one realbxs. that in our approach 
- the application of induction hypotheses is not one of  most difficult points   as it is  for instance in  bl1   pg. 1; 
- special heuristics for transforming a given formula into an other  to which an induction hypothesis can be applied  are not needed as in  m1 . 
due to a lack of space we are forced to present our system from a methodological  nevertheless correct  point of view rather than to give its complete algorithmic description. such a description requires the introduction of notions that are not published elsewhere  but with which our system works  and therefore an algorithmic description without specifying these notions would be confusing  
the organization of the paper is as follows we start with a motivation  i.e. a presentation of our methodology in an intuitive way. we also answer the question: why can proofs be directed by cm-strategy  section 1 presents our formulation of the induction principle  and indicates the links between information included explicitly  or implicitly  in given  to be proved  theorems and information one can express explicitly when one has a  good  formulation of the structural induction principle. section 1  the most important from the methodological point of view  gives the formal definition of constructive matching. in this section  we also describe how one can recognize subproblems with regard to a given theorem and our knowledge base. in the conclusion we explain why we were motived by beth's method of semantic tableaux and why we did not use them in their original form. appendix i contains a list of axioms used in the paper. appendix ii shows our methodology working in automatic programming. when we refere to appendices  we write  ~i   and ¡ö 'ii respectively. 

consider the family of constructors  here  null  unit  append  . it decomposes the induction proof into cases  each possible valuation of the induction variable x producing a case. since this valuation is a kind of equality  wc shall 

m. frahova 1 


1 m.frahova 

m. frahova 1 


1 m.frahova 

	m.frahova 	1 

1 m.franova 

