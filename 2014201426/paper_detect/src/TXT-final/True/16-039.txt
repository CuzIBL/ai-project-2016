 
　this paper discusses some methods for guiding the search of conventional chess programs to variable depth. the motivation for investigating such methods comes from the fact that searching to a fixed depth causes difficult problems  e.g. the horizon effect . the first sec-
tion deals with certain improvements of the quiescence search and a demonstration of their beneficial effects. the method of not counting moves as a ply of depth is investigated then and the results of extending it somewhat are reported. as this method seems to be too simple nevertheless  a more general model tor extending the horizon of the full-width search to variable depth is proposed. 
i introduction 
　although most of today's better chess programs perform a simple quiescence search and do not count replies to check as a ply of depth there is a fundamental philosophy to search every branch to the same depth. the main reason for this lies in the tact that in chess it is very difficult to discriminate good moves from bad ones statically without error. moreover it has been shown consistantly  that programs which perform forward pruning are inferior. they often prune moves at a lower level which seem to be bad  but would prove good  deeper in the tree  e.g. sacrifices . on the contrary  brute-force programs can discover everything within their horizon as their search is full-width. a thorough discussion of advantages and disadvantages of this mernethod was given by berliner in 1 . 
　a principal problem when searching to a fixed depth is the horizon effect  i 1j   as it is extremely difficult to overcome it by pure static analysis. actually in deep searches this effect does not influence the played move very often  but nevertheless it should be worth trying to avoid it further by investigating important variations more thoroughly    1    . 
　in despite of the enormous speed of the special chess automaton belle  the combinatorial explosion of fullwidth searches should not be forgotten completely. it seems to be very difficult to build a machine which will be significantly faster than belle. thus it also seems to be very difficult to further strengthen chess automata this way. therefore it should not be disadvantageous to make the search more efficient guiding it to variable depth. 
ii quiescence search 
a usual method for searching to variable depth is the so-called quiescence search: a selective search is performed sprouting from certain positions  mostly at the horizon of a full-width search  to reach quiescent  dead  positions which can be evaluated more accurately. its main purpose is to avoid the horizon effect and sometimes it also can find deeper combinations. indeed most of today's successful performance programs employ a quiescence search  but a severely limited one. mostly only captures and replies to check are considered and sometimes promoting and checking moves. 
　a model for a more informed  than usual  quiescence search is given elsewhere    1 . on the implementation of this model into our brute-force chess program merlin and the control of this search together with results it is reported in   | 1 . the exceptional features of this quiescence search are: 
- the consideration of hung pieces which are subject to capture by the side not on move  moves by such pieces and protective moves ; 
- the killer quiescence search which tries killer moves from the full-width search beyond its horizon; 
- the check quiescence search which only tries very forcing checks. 
　unfortunately it is not always possible to achieve a dynamic value using this model. e.g.  let us assume a position with a hung piece which can neither be moved nor protected. assuming further that the quiescence search cannot select any move  no value or a pessimisti-
cally estimated claim value  |1   |j1j  would result. to estimate such a situation realistically by a static analysis is also risky. therefore merlin tries a null move there letting the opponent capture immediately. this way quiescent positions may result which can be evaluated more accurately. nevertheless the resulting value for the position in question can itself be clearly wrong  but experiments have shown that this occurs seldom. 


　of course there are also other threats to be worried about. merlin considers threats of pawn promotion or mate in the following way: a simple static analysis decides  if there could be such a threat  and eventually a null move analysis is activated to investigate it further. 
　the position of figure l    figure 1  seems to be easy  at least for human chess players . but e.g. after l.ra1-h1 ra1-al + 1.kgl-f1 ral*a1 the correct move 1.rh1-h1 + winning the rook is not easy to discover within the quiescence search of a brute-force chess program  if not trying all the checking moves there . by further checks with the black rook this effect can last tor several ply. merlin avoids it using the killer quiescence search in the following way  when searching to a full depth of 1 ply: after l.ra1-h1 ra1*a1.rh1-h1 the black rook is won. thus rh1-h1 is stored as a killer move and tried again after e.g. l.ra1-h1 ra1-al 1.kg 1-f 1 ral*a1  winning the black rook. 
　let us assume now  that alter e.g. l.ra1-h1 ra1-a1 + 1.kgl-f1 ral-a1  1. kf1-c1 the quiescence search is reached. there black to move can  according to the usual scheme  decide to accept the static value  or try to better it by certain moves. let us assume further  that the moves result in correct values  e.g. 1...ra1*a1.rh1-h1t killer quiescence search . but the usual static evaluation functions do not account for the threat of pawn promotion. thus the value of the whole variation would be accidental. 
　merlin recognizes in this position the opponent's  white's  opportunity to promote the pawn from a1. it asks the search  if this promotion is really a threat by trying a null move. essentially this means  that the side to move is changed and then only tried to promote the pawn from a1. as there the threat is recognized to be real  merlin refuses to evaluate the position in question statically. instead it tries to find counter moves  e. 
g. to add control to the promoting square or to block it  but cannot find one there. so merlin plays i.ra1-h1 alter a 1 ply search  announcing the main variation l...ra1*a1.rh1-h1+ kf1-e1.rh1*ra1. 
 ii moves not counting as a fly of depth 
　the best chess programs now do not count responses to check as a ply of depth. this method actually makes the horizon of the full-width search variable. it also entails only a small risk of explosion  as there are few lelegal moves in positions with the king checked. merlin improves this method somewhat applying it only to those moves whose optimistically estimated value is better than the actual best value reached so tar. the reason is that the extension of the search should be also worth its costs. in situations after a sacrifice this criterion also expresses a principle of compensation: those moves should be investigated further where the side owning more material is forced by a check. additionally merlin does not count certain very forcing checks. 
　in the position of figure 1    figure  1  mate in 1 ply is possible. not counting replies to check a search to  only  1 ply is sufficient. additionally not counting certain checks merlin reaches the position after 
l.qh1*h1 + kg1*qh1.rg1-h1+ kh1-g1.nh1-g1 within 
a full-width 1 ply search. there it recognizes statically by use of simple criteria that the black king might be in danger. as mentioned before merlin activates a null 
h. kaindl 1 
move analysis in such situations. here the result is that the rook actually threatens to mate the black king. thus no static value is assigned and certain counter moves are tried  e.g. moves by the black rook from f1 to vacate an escape square tor the king . as these cannot prevent mate either  merlin claimed mate in 1 ply after 1 sees  of cpu time on a cdc cyber 1 and searching 1 nodes  1% within the quiescence search . strictly speaking this was not absolutely correct  as black can delay mate for further 1 ply sacrificing his queen on g1 or h1 giving check. normally merlin does not try such checks within its quiescence search as they jose material. 
it is not clear if this would be an important flaw  e.g. paradise  does not even consider these moves . nevertheless merlin was told then to try every check within its quiescence search if mate actually threatens. this helped to find the correct depth of mate  searching some few nodes more . as it also helps to make sure that there is no complicated side effect by a check  this method seems to be worth its costs. 
　to compare merlin's performance on this position with that of other programs  see wilkins  1   it should be noted  that there exist computers which are 1 times or more faster than the one used by merlin. . 
　despite of good results it seems that the method of not counting moves as a ply of depth is too simple for further extension. the main disadvantages are: - a move can be counted or not only as a whole; 
- this decision is made within the tree by use of little information; 
- mostly this decision is only based on an estimate  how forced or forcing a move is. 
　but the idea in itsell to extend the horizon of the fullwidth search to variable depth seems to be very promising. this way it is possible to explore variations deeper without reducing the chance of discovery  compared to the quiescence search . this aspect seems to be important  as it often occurs in chess  that forced moves should be followed by one or more moves which cannot easily be detected statically by conventional programs. thus a more general model for extending the horizon of the full-width search to variable depth seems to be necessary. 
iv a model for extending the horizon 
　knuth and moore report on an interesting approach by floyd in 1  see   1   loc cit.  to search to variable depth: 
each move is assigned a  likelihood  which is related to its forcedness and plausibility. when the product of all  likelihoods  leading to a position becomes less than a given threshold  this position is considered to be terminal and evaluated statically. 
　such an approach seems up to now not have been tried in large-scale experiments. the reason is  that today's chess programs have not enough knowledge available to assign such values accurately enough to every move. the only exception may be paradise  for the subproblem of tactics  but when having much knowledge available  a best-first search seems to be more adequate than a depth-first search to variable depth  see also    . 
　consequently current performance programs should  only when there is a reason they know  search a branch 

1 h. kaindl 
deeper  but in a subtler way than not counting certain moves. this should be possible as follows: iterative deepening of full-width searches is retained  but at the horizon of the full-width search  before beginning with the quiescence search  the decision is made  if the horizon is to be extended or not. this decision 
could be conferred to the following routine: 
function extend-horizon 
 forcedness  actual variation   
interest  actual position   
extension  : boolean; 
　the forcedness of the actual variation could be measured according to floyd's scheme. but then again the question arises  how to assign an appropriate  likelihood  to every move. the following scoring system seems to be more manageable in this respect: a move which does not  count  is assigned a value of 1  regarding to a  likelihood  of 1   moves which  count only half  are scored by 1 etc. the remaining moves which are not forcing or forced  or at least the program does not have knowledge about  get a score of 1. the sum of these values is subtracted from the number of ply in this variation resulting in a measure of its 
forcedness. 
　the inclusion of the interest of the actual position as a parameter to extend-horizon shall provide for the inclusion of the level of aspiration into the decision to extend the horizon or not. it is useless and expensive to search a forced variation deeper and deeper whose final value cannot influence the rest of the search. the level of aspiration is mostly represented by alpha and beta in conventional programs . so it seems appropriate to compare an estimate of the value of the actual position to these bounds. unfortunately such values cannot be estimated very accurately sometimes  especially in situations after a sacrifice . thus the interest of the actual position should also include a notion of  compensation   in the chess sense . 
　the parameter extension is to avoid that the horizon is extended over and over again in the same branch. thus the actual extension  difference of the actual depth and the given search depth  should be included into this decision. 
　although this model is not complete either it seems to remove the main disadvantages of simply not counting certain moves as a ply of depth: 
- moves can be assigned also non-integer values  so that a smoother variability is possible; 
- the decision is made at the latest possible moment  at the horizon itself  and therefore the whole variation 
can be analysed; 
- the decision is based additionally on an estimate of the resulting position's value and consequently the search should become more effective and controllable. 
v concluding remarks 
　the method of selecting a null move is not new  e.g. see  . but the use of it to achieve a dynamic value and to investigate a threat seems to be exceptional for brute-force programs. for a further discussion of this method see . 
extending the horizon of the full-width search aims at having the longest branches of the tree coincide with the variations most likely to be important. it can help against the horizon effect  too. the more knowledge the program has available the more variability of the search seems to be admissible. 
　for building better chess programs an enlargement of their positional chess knowledge seems to be even more important than an improvement of their search. so my colleague h.horacek has built a general positional evaluation function which probably is one of the biggest and most detailed of today's programs for the whole game of chess. i myself have proposed a model for giving knowledge about positional long-range plans to chess programs which was also implemented for the example of the socalled  minority attack      . 
　however a program of course is also slowed down by such supplements. anyway an improvement of the search can result in the deeper exploration of interesting variations as well as in having more time available for each node to evaluate it more thoroughly. 
