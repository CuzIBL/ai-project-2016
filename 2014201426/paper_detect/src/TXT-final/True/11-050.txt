 
　　　the spade theory uses linguistic formalisms to model the program planning and debugging processes. the theory begins with a taxonomy of basic planning concepts covering strategies for identification  decomposition and reformulation. a handle is provided for recognizing interactions between goals and deriving a lincnr solution. a complementary taxonomy of rational bugs and associated repair techniques is also provided. spa ok. introduces a new data structure to facilitate debugging -- the derivation tree of the program. 
spade generalizes recent work in artificial intelligence by 
suasman and sacerdoti on automatic programming  and extends the theory of program design developed by the structured programming movement. it provides a more structured information processing model of human problem solving than the production systems of newell and simon  and articulates the type of problem solving curriculum advocated by papert's logo project. 
1. a multi-faceted approach 
the spade theory is being developed in three contexts: 
　　　1. education: an editor called spadee-1 has bern implemented that encourages students to define and debug programs in terms of 
explicit spade design choices  thereby providing a highly structured programming environment. 
　　　1. ai: an automatic programmer called patn has been designed using an augmented transition network embodiment of the spade theory. this results in a framework which unifies recent work on planning and debugging by sacerdoti  and sussrnan . 
　　　1. psychology: a parser called pazatn has been designed that applies the spade theory to the analysis of programming protocols. pazatn produces a parse of the protocol that delineates the planning and debugging strategics employed by the problem solver. pazatn extends the series of automatic protocol analysers developed at carnegie-mellon university  waterman & newell 1  1; bhaskar & simon 1 . 
　　　hand-simulations of patn and pazatn on elementary programming problems and informal experiments with the spadee-1 editor attest to the theory's cogency in accounting for a wide range of planning and debugging techniques  goldstein & miller 1a b; miller & goldstein 1b c d . 
1. a linguistic analogy 
　　　in developing a representation for problem solving techniques  we have been guided by an analogy to computational linguistics  for three reasons. 
　　　1. thc concepts and algorithms of computational linguistics  though originally intended to explain the nature of language per .se  supply perspicuous yet powerful descriptions of complex compulations in general. 
　　　1. computational linguistics decomposes computations into syntactic  semantic  and pragmatic components. this decomposition clarifies the explanation of complex processes when viewed in the following manner: syntax formalizes the range of possible decisions; semantics the problem description  and pragmatics the. procedural relationship between the two. 
　　　1. computational linguistics has undergone an evolution of procedural formalisms  beginning with finite state automata  later 
employing recursive transition networks  context free grammars   next moving on to augmented transition networks  and culminating in the current set of theories involving frames  minsky 1  winograd 1  schank 1 . each phase captured some properties of language  but was incomplete and required generalisation to more powerful and elaborate formalism*. following this evolutionary sequence illuminates the complexity of language theory. we have pursued a similar evolutionary approach to clarify the complexity of prohlrm solving processes. 
       to date  our theory of program design has evolved as follows: we first explored context free grammars for planning and debugging  and subsequently their generalisation to atn's; we then examined the metaphor of protocol analysis as parsing  initially using the planning and debugging grammars to reveal the constituent structure of protocols and later using the derivations produced by the atn formalism; and  most recently  we have studied the use of a chart-based parser to discover these analyses. 

introspection  by examining problem solving protocols  miller & goldstein 1b   by studying the literature on problem solving 
 pglya 1  1  1; newell & simon 1; sussman 1; saecrdoli 1   and by enumerating techniques for finding procedural solutions to problems expressed at predicate calculus formulae  emden & kowalski 1  this last criterion demonstrates that the taxonomy is currently incomplete -- for example  techniques for handling disjunctions have not yet been analysed thoroughly enough to warrant inclusion. however  the taxonomy is adequate for a wide range of elementary programming problems. 
　　　there are three major classes of plans in the taxonomy: identification  decomposition  and reformulation. identification means recognizing a problem at previously solved. decomposition refers to strategics for dividing a problem into simpler sub-problems. reformulation plans alter the problem description  seeking a representation which is more amenable to identification or decomposition. the figure indicates how these classes of plans are further subdivided in the spade theory. 
　　　planning  according to the theory  is a process in which the problem solver sclccis the appropriate plan type  and then carries nut the subgoals defined by that plan applied to the current problem. from this viewpoint  the planning taxonomy represents a decision tree of alternative plans. the decision process can be modeled by the context free grammar given below. the grammar explicitly stairs which planning rules involve recursive application of solution techniques to subgoals: setup  interface  mainstep  cleanup  and 

specialized systems-1: m i l l e r 

parallel. 
the gremmer is written using the following syntex  i  is disjunction  v is ordered conjunction   &  is unordered conjunction    .. '  is iterstton      is optionality  end a lower csse phrese in quotation msrks  eg   repest step / describes $ lexicel item which is not further expended in the grsmmsr. 
plan -  ioentify | decompose | reformulate identify -  primitive | defined 
defined -   call user subprocedure  & plan 
decompose -  conjunction | repetition 
conjunction -  sequential | parallel 
sequential -   setup  +  mainste-p +  interface  * +  cleanup  
parallel -   plan * setup -  plan 
mainstep -  plan 
interface -  plan 
cleanup -  plan 
repetition -  round | recursion 
round -  iter-plan | tail-recur 
iter-plan -  	repeat 	step  + sequential 
tail-recur -   itop step  + sequential +  recur step  
　　　the spade theory is not restricted to any particular domain however  to provide concrete examples  we have concentrated on problems from elementary logo graphic* programming  papert 1 . this domain was chosen because of the availability of extensive student performance data. the grammar rules for primitives in this domain arc: 
primitive -  vector | rotation | penstate 
vector -   forwaro | back  +  number  
rotation -   left | right  +  numbtr  penstate -  penup | pendown 
a typical task undertaken by beginners in the logo environment is to draw a wishingwell picture using the computer  fig. 1 . fig. 1 illustrates a solution to the wishingwell problem with its hierarchical annotation according to our 
planning grammar. 
　　　the grammar characterizes the decision process involved in selecting plans from the taxonomy. we illustrate its utility in the next two sections by constructing an editor that embodies the grammar and analyzing debugging in terms of the grammar. then we show how the grammar can be augmented to include not only the syntax of plans  but their semantics and pragmatic* a* well. 
1. spadee-1. a planning assistant 
　　　one reason for calling our theory of planning and debugging structured is to emphasise the link between our research and the structured programming movement. dahl  dijkstra  and hoare  call for a style of programming which reflects coherently structured problem solving; but a detailed formalization of what this style entails is lacking. our efforts in this direction  therefore  supplement the work of dijkstra and others. how can we judge  though  whether a particular gremmer of plans captures the planning dceisions involved in solving problems for some domain  one methodology is to incorporate the grammar into an editor  spadee-1  whose purpose is to augment and direct the capabilities of a human user. the critical question then becomes the extent to which the editing system aids or hinders the user. 
　　　suppose a problem solver is defining a logo program for drawing the wishingwell shown earlier. in spadee-1  th is is accomplished by applying the planning.grammar in generative mode: 
l a . what 1s the name of your procedural l b .  ww 
1a. tht rule is: pwk -  identify | decompose l reformulate what now  
1b.  decompose 

1a. the rule is: conjunction -  sequential ... 
-   setup  +  mainstep+ interface  * +  cleanup . 
oo you want to defint the optional setup  
1b.  latar 
　　　spadee-1 thus encourages users to articulate their design decisions in top-down order. at the same time  the system allows the user to escape from this strict discipline if an alternative solution order seems preferable. this was illustrated by the user's  later  instruction  which suspends the current goal for subsequent solution. 
　　　spadee-1 was implemented by assigning an interpretive procedure to each grammatical operator. in essence  the editor is a bookkeeper for the user's goal tree. though simple  the editor serves three useful purposes. 
　　　1. from an educational standpoint  the editor encourages students to articulate their problem solving strategies. the fundamental hypothesis of the logo project  as presented by paperl   is that such articulate problem solving is beneficial to the learner. spadee-1  with its extreme form of articulation  provides an experimental vehicle for evaluating papert's claim. our experiment will he to test whether students exposed to spadee-1 learn logo faster than controls whose problem solving is more tacit. 
　　　1. from an ai standpoint  its use will indicate whether the planning grammar is adequate  or whether certain plans are not present that competent problem solvers feel arc necessary  
　　　1. from a psychological standpoint  we will collect transcripts of individuals using the editor and formulate pernonal grnmmars based on the particular rules usually employed by each user. the personal grammar will model the problem solving skills of that individual. in the past we have manually analysed protocols from standard logo. spadee-1 protocols  with their explicit planning choices  should be 

specialized sy stems-1: miller 
1k 

far more revealing. 
1. raid  a debugging assistant 
　　　spade ineludcs a theory of debugging. sueh a theory is essential  since problem solvers must often formulate plans in the fare of imperfect knowledge and limited resources. under such circumstances  even carefully reasoned judgments may be mistaken. 
　　　given a grammatical theory of planning  debugging can be analyzed as the localixation and repair of errors in applying grammar rules during planning. since our planning rules were constructed from operators for conjunction  disjunction  and oplionality  three basic classes of errors arise: 
　　　1. syntactic bugs  in which the basic grammar is violated  such as when a required conjunct is missing; 
　　　1. semantic bugs  in which a romantic constraint arising from the particular problem is violated  such as when a syntactically optional constituent  needed because of the semantics of the particular problem  is missing; 
　　　1. pragmatic bugs  in which an inappropriate selection from a set of mutually exclusive disjuncts is made. 
	fig. 1 exemplifies these bug types. 	although additional 
	figure ;1a - syntactic. i ia 	incokpia'1 
a necessary ron.iur.rv ir mtr.- !v  

categories  including execution and efficiency hup*  must he defined to make this taxonomy of bugs complete  these classes are adequate lo 
characterize many examples which arise in elementary programming. 
　　　raid is a debugging assistant for spadkk-1 implemented on the basis of this taxonomy of errors. as spadkk-1 prompts the user through the planning process  those choices which might lead to syntactic  semantic  or pragmatic bugs arc recorded by the system. in subsequent debugging episodes  raid alerts the user to the relevant bug warnings  thereby aiding in diagnosis. moreover  the spadkk-1 planning editor can then be reinvoked to guide repair of the bug by resuming planning in the context of the culpable decision. an interaction with raid that would arise from premature execution of a program is illustrated below: 
the user has continued defining the wishingwell program begun earlier  with iti current definition as shown in fig. 1b. although an initial setup and an interface have not yet been supplied  the user requests execution of the program. lb.  run wishingwell 
1a. ok.  fig. 1b shows the result.  what now  
1b.  diagnose 
1a. the rule 1s: diagnose -   parse|code|ho1eli process *. 
which typt of diagnosis do you want to use  
1b. 	 parsa 
1a. the rule 1 i : parse -  syntax|semantics!pragmatics. 
which bug type do you want to consider  
1a. 	 semant1ci 
1a. 	the following optional steps are missing: 
the setup and the well-pole interface. 
1b. 	 repa1r 
1a. the rule 1s: repair -  complete   replac♀. 1b.  complete intarface between well and pole. 
1a. the rule is: complete -  plan -  identify | ... 
　　　in this example  the interaction with spadkk-1 was again guided by a grammar; this debugging grammar is given below. 
diagnose -   parse i code | mooel | process * 
process -   ask | trace * 
code -   print definition  
model -  run 
parse -  syntax | semantics | pragmatics 
syntax -   review conjunctive choices 1n plan  
semantics -   review optionel choices 1n plen  
pragmatics -   review disjunctive choices in plen  
repair ＊  complete | correct 
complete -   solve for missing conjunct  
correct -  	 choose alternative disjunct  
run -   run code line  +   error msg   +  debug  
ask -   print d e f i n i t i o n   |  print value  
trace -   self-doc*  + run* 
self-doc -   add break  |  add print  i  add trace  
the grammar is intended to include the traditional debugging strategics employed by programmers as well as the parsk-bascd strategies made possible by the derivation tree. 
　　　for more complex programs  there will be too many potential bug locations for raid's undirected advice to be helpful. hence  following spadkk-o's structured bookkeeping philosophy  we allow the user to set caveats during planning regarding those decisions which appear to be potential trouble spots. in this fashion  spadkk-1 permits an exploratory style of problem solving  as illustrated below. 
suppose the wishingwell program is part of n large project. then the number of optional constituents that have not been defined will he large. the user will probably have some insight into which of these is actually needed. to facilitate debugging  the user is encouraged to place caveats at those decisions he suspects may require later debugging. 
1a. do you want to define the optlonel setup  1b.  no. 
1a. do you wish to record a caveat here  
1b.  yes. 
1a. ok. roof  pole  and well are pending... 
　　　another mechanism to make spadee's and raid's advice more directed it to supply the semantics for problems. this it the topic of 

snecia1  h systems-1: m i l l e r 

the topology of the network embodies the planning grammar. registers contain descriptions of the problem  the solution  and various temporary constructs built during planning. arc predicates supply pragmatic guidance by examining the registers and appropriately directing the planning process. for example  an identification plan cannot proceed if the problem description cannot be found in the answer library. patn has been successfully hand-simulated on elementary logo and blocks world problems. 
　　　patn allows us to elaborate our notion of a completed plan by defining an annotated derivation tree.. associated with each node of the plan derivation is a snapshot of the values of the atn registers at the point in the planning process when that node was created. a derivation tree reveals the constituent structure of the plan; these semantic variables reveal the semantic intent. a set of pragmatic assertions at each node  derived as instances of patn's arc predicates  reveal the reasons for preferring a given plan over its competitors. fig. 1 shows the annotated derivation tree for the wishingwell program given earlier. 
1b.  roof 
1a. in tht model roof 1s deierlbed as a triangle. 
triangle 1s a procedure 1n the answer library. 
would you uka to use 1t  
1b.  yes 
1e. ok. 	the roof 1s complete. 	pending goals are: 
pole  well  and the preparatory steps... 
　　　patn's linearisation loop provides a superstruclure for handling dependent  interacting subgoals. the approach is to view a non-linearity as a property of the problem description. that is  even though one description of the problem leads to an unsuccessful refinement process because of interactions between subgoals  another description can succeed by making the dependent constraints explicit. 
for example  consider the square-insidk-triancle of fig. 1c if the problem description is: 

specialized systems-1: m i l l e r 

square x; 
triangle y; 
                   inside x y; then a decomposition that draws the square and triangle independently 
and then attempts to fit them together lo achieve the inside relation will fail. however  a problem description of the following form allow* a successful decomposition: 
square x  with side * 1; 
triangle y  with sioe - 1; center of x ＊ center of y. 
       the 1ntkractions predicate is a conjunction of tests on the model register. kach test is responsible for detecting a given non-linearity. a corresponding action modifies the model  adding new statements lo make the interaction explicit. the refinkmknt loop is the repository for what sussman  calls the critics gallery. t h r theoretical progress of patn is lo integrate the critics gallery 
concept into a theory of planning. in sussman's hacker  the critics gallery and library of programming techniques were separate modules: there was no integrated theory. 
       of course  at any point in time the system may be unaware of a given type of non-linearity. in such cases  the absence of an interaction test will lead to a sequential decomposition that ultimately fails. the design of a program for debugging such failures is the 
subject of the next section. 
1. dapr - an atn for debugging 
       p a t n can make mistakes. that is  p a t n will sometimes introduce what we term rational hug* into its plans  due to making arc transitions with imperfect knowledge of subtleties or interactions in the task domain. hence  p a t n must be equipped w i t h a complementary debugging module  dapr  fig. 1 . 

       dapr's task it easier than that of raid: dapr must analyze the closed set of bug types to which patn is subject  whereas r a i d is intended to assist human programmers in finding and correcting a wide assortment of buys. dapr employs three diagnostic techniques: model  process  and plan diagnosis. model diagnosis is the basic technique. it amounts to comparing the effects of executing a plan to a formal description of its goals  to determine if  and in what fashion  the plan has failed. another dapr technique  based on susctnan's hackkr   is examining the state of the process at the time of the error manifestation. plan diagnosis  a dapr first  involves examining the caveat* left by the planner as various nodes were constructed. 
dapr will also be used to provide additional guidance to raid. 
this illustrates the synergism possible when educational  psychological and ai facets of a cognitive theory are studied in an integrated fashion. this integration is further exemplified in the next section when we apply the spadk theory to protocol analysis. 
1. pazatn  a protocol analyser 
       as soon as one has an heurislically adequate theory of program design  it is natural to ask   can the theory provide an account of how people design programs  . an experimental technique we employ for answering this question is the analysis of protocols collected during problem solving sessions. by adopting this methodology we follow the precedent established in seminal studies conducted at carnegie mellon university  newell & simon 1; w a t e r m a n & newell 1  1; rhaskar & simon 1 . our work extends their approach along three dimensions. 
       1. with the exception of the recent rhaskar & simon effort  the cmu studies have been restricted lo very limited domains such as cryplarithmelic rather than limiting the task domain  we limit thr range of responses. t y p i c a l l y protocols are t r a n s c r i p t i o n s of t h i n k - a l o u d verbalisations; we focus on the more r e s t r i c t e d interactions arising from a problem solving session at a computer 
console. the analysis task in this setting is lo interpret user actions - editing  executing  tracing  etc. - in terms of the spadk theory of planning and debugging. 
       1. the cmu theory centers on the production systemn model. although productions arc turing universal  they encourage a less hierarchical  less local program organization than the linguistic formalisms of the spadk theory. in p a t n   each arc transition  consisting of a predicate and an action  can be thought of as a production. however  patn organizes these productions into local contexts  each of which consists of the arcs exiting from a given node. not all of the arc productions arc present at any moment in time; an arc is present only when the problem solver is at the relevant node. in the production systems discussed in human problem solving  newell & simon 1   all of the productions are always present and are tested in serial order. 
       1. cmu analyses are based on the problem behavior graph. pursuing an analogy to computational linguistics  we define an interpretation of a protocol to be a parte tree supplemented by semantic and pragmatic annotation. the parse tree characterizes the constituent structure of the protocol. semantic and pragmatic annotation - variables and assertions attached to nodes of the parse tree -- formalize the problem description and the rationale for particular planning choices. annotated parse trees closely reflect the local s t r u c t u r e of patn's linguistic problem solving machinery  leading more directly to inferences regarding individual differences than is evident from problem behavior graphs. 
       ruvcn brooks  applied the c m u approach lo the programming domain  developing a model of coding -- the translation of high level plans into the statements of a particular programming language - and testing the model by analyzing protocols. his model is a set of production rules whose conditions match the patterns of plan elements and whose actions generate code statements. protocols are analyzed manually  with the experimenter attempting to infer the plan which is then expanded by the production system into code paralleling that of the protocol. the processes of understanding the problem  generating the plan  and debugging arc not formalized. spade goes beyond this in that it can be used to parse protocols and that the parse constitutes a formal hypothesis regarding not only the coding knowledge but also the planning and debugging strategies employed by the problem solver. 
        miller & goldstein 1b  provides an example of such analysis being performed by hand. the example is a segment from a protocol several hundred lines long in which a high school student uses logo 

s p e c i a i l z e d s y s t e n s - 1 : m i l l a r 
to draw the letters of his name. 	by examining the grammar rules 

analysis of a simplified protocol in which a wishingwell program is defined  executed and debugged. 
　　　pazatn is a chart-based parser  kay 1; kaplan 1  being implemented to interpret protocols in terms of patn's annotated plan derivations  milter & coldstein 1d . it will operate by causing patn to deviate from its preferred approach in response to bottom-up evidence  fig. 1 . by taking advantage of parsing strategies developed in research on speech understanding  lesser ct al. 1; paxton a robinson 1   as well as the economical chart representation of ambiguities  pazatn has been successfully band-simulated on ten i/ogo protocols. 
　　　pazatn will operate by matching patn-generated plans with protocol data. two charts.will be used to represent alternative interpretations. the planchart keeps track of the set of plausible subgoals which have been proposed by patn. kig. 1 shows a planchart for a wishingwell in which patn has proposed two alternative decompositions. the structure is a chart because it shares substructures  as exemplified by the common solution to the well subgoal pointed to by both wishingwell decompositions'. the datachart records the state of partially completed interpretations. 
	fig. 1 	partial planchart of alternatives for ww 
fig. 1 shows how the datachart links events into the planrhart for a 
pazatn interpretation of the wishingwell protocol given earlier. 
　　　these charts are grown as follows. first pazatn requests patn to generate its most plausible plan. this plan is inserted into the planchart. then protocol events are analyzed one hy one  and matched with subgoals in the patn plan. the match is recorded in the datachart. if no plausible matches are found  patn is asked to generate the next most plausible plan. the planchart is thereby extended. common subgoals share the same structure in the chart. 
　　　at first  pazatn will be implemented interactively  with the user -- a psychologist analyzing a protocol - directing pazatn to select different patn plans. this follows the incremental implementation strategy used in two of the cm i  protocol analyzers  waterman & newell 1; rhaskar & simon 1 . pazatn  even in its early interactive stages  should provide strong evidence regarding patn's adequacy as a cognitive theory. 
pazatn will also be tested in the spadee. contest. below is 
1 m i l l e r 
	figure 1 	datachart linking protocol events to planchart leaves 
a hypothetical dialogue with spadee-1  representing the original 'spadee-o augmented by both patn and pazatn. 
l a . solving for wishingveil. pending subgoais ara: 
	roof  pole. well  	interfaces. 	what now  
l b .  square 
1a. ok. 	well has baen solvad by a call to square. square has already btan solved. 	what now  	  
       p a z a t n will increase the editor's flexibility in handling ambiguous events  and in alleviating what might seem to some users to be an executive allocation of time and effort to the planning phase 
1. conclusions 
       the use of tools from computational linguistics - grammars  atn's  derivation trees  parsing algorithms  charts -- has led to a perspicuous representation for a theory of planning and debugging. computational linguistics is also responsible for suggesting the propitious decomposition of problem solving processes into components involving syntactic  semantic and pragmatic knowledge. 
       our multi-faceted approach - studying problem solving in the three distinct contexts of ai  education  and psychology -- holds out the possibility of a synergistic effect. rut proof of this must await further experimentation. although all of the programs have been designed and hand-simulated  as of this writing only the spadkk-1 editor has been implemented. furthermore  the theory has not yet been exercised in enough contexts to prove its generality. however  at least for the three domains in which the theory has been explored - logo  the blocks world  and elementary calculus - it has provided a unified treatment of plans and bugs  a significant stride for a theory of program design. 
　　　the automatic problem solving aspect was supported by the advanced research protects agency of the department of defense under office of neval research contract nooo1-c-o1  the educational aspect by the national science foundation under grant c1x  and the protocol analysis aspect by the bolt 
beranek a newman intelligent instructional systems croup under contract 
mda 1-c-1 jointly sponsored by advanced research projects agency  air force human resources laboratory  army research institute  and naval personnel research a development center. 
