 
endowing a computer with an ability to reason with diagrams could be of great benefit in terms of both human-computer interaction and computational efficiency through explicit representation. to date  research in diagrammatic reasoning has dealt with intra-diagrammatic reasoning  reasoning with a single diagram  almost to the exclusion of inter-diagrammatic reasoning  reasoning with related groups of diagrams . we postulate a number of general inter-diagrammatic operators and show how such operators can be useful in various diagrammatic domains. we develop a heuristic in the domain of game notation  derive fingering information in the domain of musical notation  and infer new information from related cartograms. 
1 	introduction 
humans possess a highly developed ability to reason with visual information such as diagrams. it has been shown that endowing a computer with such an ability could be of great benefit in terms of both human-computer interaction and computational efficiency through explicit representation  larkin and simon  1 . to date  research in diagrammatic reasoning has dealt with intra-diagrammatic reasoning 
 chandrasekaran et al  1; narayanan  1; narayanan  1  almost to the exclusion of inter-diagrammatic reasoning. 
　intra-diagrammatic reasoning can be defined as a process of inference realized by the application of various operators to a given single diagram  for example  see  furnas  1  . inter-diagrammatic reasoning  on the other hand  can be defined as a process of inference realized by the application of operators to groups of related diagrams  for example  see  anderson  1; anderson and mccartney  1  . diagrams are related if they can be combined in ways that produce useful information. two types of related diagram groups can be defined  sequences and suites. these differ in *previously at sacred heart university  fairfield  ct  u.s.a. 
1 	knowledge representation 
robert mccartney 
computer science and engineering 
university of connecticut 
1 glenbrook road 
storrs  connecticut 1 u. s. a. 
the way in which a single diagram within a group is related to other diagrams in the same group. 
　a diagram sequence  anderson  1; anderson and mccartney  1  will be defined as a meta-diagram composed of a number of diagrams arranged in an order that incorporates some manner of forward moving time. often  each of the diagrams in the sequence can be considered a discrete snapshot of some continuous phenomenon described by the sequence as a whole. examples of such diagram sequences include game notation  chordal musical notation  weather maps  assembly instructions  and instructions for a product's use. 
　a diagram suite will be defined as a meta-diagram composed of a number of diagrams that present different facets of a given entity at the same moment in time. each of the diagrams of the suite can be considered as a view of the entity from some single  unique perspective. when combined  the suite can present the entity as a whole. examples of such diagram suites include architectural renderings  anatomical drawings  and cartograms. 
　we present a syntax and semantics of inter-diagrammatic reasoning and then introduce a number of interdiagrammatic operators and functions. next  example uses of these operators and functions are provided in various domains. a brief discussion of related work follows and  finally  we offer our conclusions. 
1 	diagram syntax and semantics 
most generally  we will syntactically define a diagram to be a tessellation of a planar area such that it is completely covered by atomic two dimensional regions or elements. the semantic domain will be defined as {v1 .... v1} denoting an /' valued  additive gray scale incrementally increasing from a minimum value v1 white  to a maximum value v1  black. intuitively  the gray scale values correspond to a discrete set of transparent gray filters that  when overlaid  combine to create a darker filter to a maximum of black. 
1 	diagrammatic operators and functions 
the following primitive unary operators  binary operators  and functions provide a set of basic tools to facilitate the process of inter-diagrammatic reasoning. we have striven 
for simplicity and generality in the hope that these tools might be applicable in a wide variety of diagrammatic domains. 
1 	unary operators 
not  denoted ~d  is a unary operator taking a single diagram that returns a new diagram where each element is black if the corresponding element in d is white  and white otherwise. 
1 	binary operators 
binary operators take two diagrams  d  and d1  of equal dimension and tessellation and return a new diagram where each element has a new value that is some function of the two corresponding elements in the operands. 
　or  denoted dy v d1  returns the maximum of each pair of elements. the maximum of two corresponding elements is defined as the element whose value is closest to black. 
　and  denoted dy a d1  returns the minimum of each pair of elements. the minimum of two corresponding elements is defined as the element whose value is closest to white. 
　overlay  denoted d1  + d1  returns the sum of each pair of elements. the sum of values of corresponding elements is defined as the sum of their respective values' subscripts. 
　peel  denoted d  - d1  returns the difference of each pair of elements. the difference of values of corresponding elements is defined as the difference of their respective values' subscripts. 
　assignment  denoted d1  = d1  modifies of  such that each element has the value of the corresponding element in d1.  note that non-diagrammatic assignment will be symbolized as := and the equality relation as =.  
1 	functions over diagrams 
nonnull  denoted nonnull d   is a one place boolean function taking a single diagram that returns false if all elements of d are white else it returns true. 
1 	functions over sets of diagrams 
accumulate  denoted accumulate  d  ds  o   is a three place function taking an initial diagram  d  a set of diagrams of equal dimension and tessellation  ds  and the name of a binary diagrammatic operator  o  that returns a new diagram which is the accumulation of the results of successively applying o to d and each diagram in ds . 
　map  denoted map f  ds   is a two place function taking a 
　function f and a set of diagrams of equal dimension and tessellation  ds  that returns a new set of diagrams comprised of all diagrams resulting from application of f to each diagram in ds. 
　filter  denoted filters ds   is a two place function taking a boolean function  f and a set of diagrams of equal dimension and tessellation  ds  that returns a new set of diagrams comprised of all diagrams in ds for which f returns 
true. 
　cardinality  denoted cardinality s   is a one place function taking a finite set that returns the number of elements in 1. 
1 	example domains 
as example uses of the previously postulated interdiagrammatic operators and functions  we 1  develop a heuristic for a game  1  infer the correct fingering of a sequence of instrumental chord diagrams  and  1  infer the quality of precipitation in a suite of cartograms. 
1 	battleship 
we have chosen the simple game of battleship as one domain in which to test the diagrammatic operators and functions. the domain and its constraints are described first followed by a description of the inference goal and a de-
tailed account of a working system based on this domain. 
　battleship  figure 1  is a game for two in which both players place ships  groups of two  three  or five contiguous blocks- a block being the atomic element of this domain  diagonally  horizontally  or vertically on a indexed  ten by ten grid. each player then tries to sink the other player's ships by shooting them  marking all of the blocks comprising the ship  without ever seeing the grid on which they are placed. this feat is accomplished by the currently attacking player sending a salvo of shots  announcing the coordinates of seven blocks  and the other player providing a damage report that details the number of hits sustained by each of his/her ships but not the indices of each hit. the winner is the player who sinks the other player's ships first. 
　we are interested in applying the proposed diagrammatic operators and functions to the end of predicting the best shots a player might take given the progress of the game so far. to clarify this process  we will discuss it in terms of a subset of battleship. the subset will consist of the game as described limited to only a single ship  namely the battleship  a five block group . further  we will consider the placement of the battleship as being completely random. within these constraints  it is possible to construct a diagram via the proposed diagrammatic operators that displays the entire set of possible battleship positions and  by simple inspection  discover the blocks that are most likely to be included in the battleship being sought. the intuition is that we would like to combine information from each possible configuration of a battleship onto a single diagram. the  darkness  of a given block in this diagram indicates the number of possible battleships it could be a part of and  hence  its likelihood of being a good candidate for a next shot. this is equivalent to numerically calculating the probabilities for each cell. 

　in the next section  we describe the process of displaying all possible positions of a ship on a single diagram. an example is then provided that details the diagrammatic reasoning required to develop a heuristic from a sequence of battleship shot boards. 
displaying a set 
figure 1 details the process by which an entire set of ships can be displayed on a single diagram. a diagram with only white blocks  denoted d1  is overlayed with another diagram  denoted d1 . d1 has one possible position of a battleship on it  represented as a contiguous five block region containing the first level of gray above white  gray  . overlaying produces another diagram that  after this single step  happens to be identical to d1. this newly created diagram becomes the new d1 which  in turn  is overlayed with another diagram that has a different possible position of the battleship on it. yet another diagram is produced that contains a representation of both of the ship positions so far included. this is due to the additive nature of the domain values previously defined combined with the semantics of the overlay operator. the effect on the diagram is that ships that overlap each other make blocks they have in common darker than the blocks they don't have in common. in the example  the common blocks will now have the value of gray1  gray  + gray   whereas the other blocks will have the value gray   white + gray  . this process is repeated until all possible positions of a ship have been overlayed onto a single diagram. 
in more formal terminology  the function accumui ate  
1  suppositions  +  is applied where 1  null diagram  is the diagram initialized to white and shippositions is a domain specific set of all diagrams of possible single battleship positions. in each of these diagrams  the blocks that are part of the battleship take the value v1 while all other blocks take the value v1. the final result of this application of accumulate is a diagrammatic representation of all possible ship positions with those blocks most likely to be included in a 

ship being the darkest and those that are least likely  the lightest. 
developing the heuristic 
figures 1 and 1 detail an example of the process by which the set of possible ships is constrained as the game progresses and a diagrammatic representation of the heuristically best shots is developed. first  a new salvo of shots is placed on the previous game board as black blocks. at the start of the game  the board will contain only white blocks but  as each turn is taken  this board will fill with shots from each turn. to differentiate between previous and new shots  the previous board  denoted previousboard  is negated and anded with the current board  denoted currentboard  giving the current salvo  denoted cutrentsalvo  of shots. formally: currentsalvo  = - previousboard a currentboard 
　next  the number of hits  denoted hits  scored by the salvo is determined. this is accomplished diagrammatically by anding the diagram containing the current salvo of shots with the diagram that contains the battleship in its actual position represented as gray1 blocks  denoted actualbattleship . since anding is defined as taking the minimum of each block of a diagram  the resulting diagram will contain gray1 blocks for each hit in the current salvo and white blocks everywhere else. hits can then be counted  diagrammatically  by anding the resulting diagram with each member of a predefined set of inspection diagrams - diagrams used to isolate elements . in the current domain  the set of inspection diagrams is comprised of all possible diagrams containing a single black block  denoted singleblocks . as each of these are anded with the diagram containing gray1 blocks for each hit in the current salvo  only those that have their single black block in the element corresponding with the gray1 block will yield a new non-null diagram. the result of each operation is tested with the boolean nonnull function and its successes are counted thus producing the number of hits. the entire process can be formally  and more compactly  stated using the diagrammatic operators and functions  x is used in the standard way to denote function abstraction : hits := 

the first salvo 
in the example  the first salvo  figure 1  results in no shot hitting the battleship as placed in figure 1. this information is then reflected on a diagram by a process of overlaying similar to that previously described. every possible instance of the battleship is overlayed as a contiguous five block region of gray1 onto a diagram initialized to white. now  however  a possible instance of a battleship must also conform to the number of hits specified. that is  in order to be considered possible  each five block region must overlap the number of hits  black blocks on the current salvo diagram  


exactly. in the current example  since there were no hits  a five block region that overlaps any black block is not considered possible and  therefore  will not become part of the new set when displayed. 
　this effect is achieved by anding a given instance of a battleship  represented with gray1 blocks  with the diagram representing the current salvo. the resulting diagram will contain gray1 blocks for each hit that the given instance of a battleship overlaps and white blocks everywhere else. these gray1 blocks are counted via the inspection diagrams as previously detailed and this count compared with the number of hits needed. if these numbers are equal  the given battleship instance is overlayed on the accumulated result otherwise it is discarded. when all such battleship instances have been so overlayed  the resulting diagram represents the current set of possible battleships newly constrained by the information in the damage report conveyed by the defending player. this process can be more formally stated using the diagrammatic operators and functions as: 
accumulate  

the resulting diagram is a collection of blocks with values ranging from white to black. if the placement of the battleship is random  black blocks are most likely to be contained in the battleship given the hit information so far with lighter shades of gray becoming decreasingly less likely. further  given the damage report information  white blocks are guaranteed not to be included as part of the battleship a player is seeking. this result  denoted heuristicdiagram   then  can be considered a diagrammatic heuristic that indicates the probabilistically best shots for the next salvo. 
the second salvo 
the second salvo  figure 1  uses the information previously derived by including within it the seven darkest blocks on the heuristic diagram. first  the previous board is negated and anded with the current board giving the current salvo of shots. the number of hits is determined as described 

previously and results in a count of one. the set of possible ships  suppositions  is updated so as not to include any ship instances that were deemed impossible by the previous salvo and the remaining possible ship instances are then overlayed as before. 
　lastly  since blocks of the salvo itself will be included in the heuristic diagrams generated from damage reports of one or more hits  these blocks need to be removed from the final diagrammatic heuristic as they are not available for future salvos. this is accomplished by anding the negation of the current board with the heuristic diagram developed so far. thus the entire process of developing a heuristic diagram for the constrained game of battleship can be formalized as: 

   in summary  this heuristic diagram is computed from information about where ships cannot be from previous salvos  in the previous heuristic diagram  and the hit information from the current salvo. it provides guidance for the aggressor's next shots and provides information for the next heuristic diagram in the sequence. 
1 	guitar chord notation 
guitar chord notation attempts to denote positions of fingers for a given chord by diagrammatically representing strings and frets of a fingerboard along with dots to represent finger positions. syntactically  vertical lines represent the strings of a guitar whereas horizontal lines represent its frets. a dot on a string represents where some finger is placed to produce a desired pitch. semantically  a fingering is a 
	anderson and mccartney 	1 

specification of exactly which of four fingers to use to realize the dots of the diagram. for example  given that numbers 1 through 1 represent the index finger to the little finger  the following is a chord diagram complete with a fingering: 
　chord diagrams are superior to standard musical notation for inferring fingering information since the fingerboard positioning of the chord is explicitly shown on the diagram but must be inferred from standard musical notation. even so  semantic ambiguity arises in guitar chord diagrams because 1  fingerings are often not specified and 1  there exists a one-to-many mapping between the dots and possible fingerings. a given chord can sometimes be fingered many ways with the preferred way often being context dependent. that is  the preferred fingering of a chord will often depend on one or both of the chords preceding and following it in the diagram sequence. for example  when 

there is no dot in common between them and  therefore  the fingering for the second chord defaults to its least demanding state as shown. if  however  

there is a dot in common and the fingering for the second chord attempts to conserve finger movement by leaving the fourth finger in place as shown. 
the atomic element in this domain is represented as dots. 
each dot can either be black or white; no intermediate gray values are necessary for this domain. applications of simple diagrammatic operators to sequences of chord diagrams  c  and c1  produce useful information. 
　anding two such diagrams will yield a new diagram that is comprised of all black dots these diagrams have in common  more formally c1 a c1 =  commonfingers. for example  

　anding the sequentially first diagram with the negation of the second will yield a new diagram that is comprised of only those black dots that were removed over time  more formally  ct  c1 =  removedfingers. for example  

　anding the negation of the sequentially first diagram with the second will yield a new diagram that is comprised of only those black dots that were introduced over time  more formally  - c1 a c1 =  introducedfingers. for example  

 note that a background grid of strings and frets must also be merged to the above in order to produce the indicated results.  
inferring a chord fingering 
the reasoning goal in this domain is to infer a fingering for a chord in a sequence of chord diagrams given a fingering for the chord immediately preceding it. for example  given 

be inferred via diagrams generated by the postulated operations in concert with two simple  domain specific rules: 1  whenever possible keep fingers in the same position  and 1  when a new finger is needed  use next numerically available finger. 
　since there can only be one significant finger on any given string  we can represent a fingering for a given chord by a fingering vector   s1  s1  s1  s1  s1* s1  where each s  is a finger number 1 through 1 signifying which  if any  finger is to be placed on the string i.  the strings on a guitar are numbered from lowest pitch to highest pitch as 1 through 1.  the fingering that will be used for the first chord in this example will be represented as  1 1 1 . a list of available fingers can be represented by an available finger set that contains the numbers of all fingers not currently in use by a chord. this can be generated for any given chord by inspecting its fingering vector. thus  the fingers not in use by the first chord in the example is represented as {1}. 
　the first step to inferring a fingering for the second chord is to update the available finger set with newly available fingers. these can be found by inspecting removedfingers. any finger that was used to realize a dot that was removed from the first chord is now available. to accomplish this inspection  six inspectiondiagrams   id   are defined  each associated with one string in the diagram: 

when each of these are individually anded with a given diagram  a background grid devoid of dots  nullchord  will result whenever there is no dot on the string associated with the inspection diagram in the diagram under inspection. further  whenever there does exist a dot on the currently inspected string  such anding will infer a diagram comprised of the background grid with that dot in place. formally stated: filter  nonnull  map  l x  {removedfingers a x   
inspectiondiagrams   in the example  


1 	knowledge representation 

since the only inference that produces anything other than the background grid is the one involving the fifth string's 
1 	cartograms 
another application of the postulated diagrammatic operators is in the domain of cartograms  in particular  chloropleths - maps that present data as areas of different colors or gray-level intensities. when such maps depict different data for the same geographic location  they are related in precisely the manner needed to perform diagrammatic inference. 
　the temperaturemap and precipitationmap chloropleths depicted in figure 1 comprise a diagram suite in that they are two different aspects of a geographic location that occur simultaneously. temperaturemap is a map in which temperatures are denoted by different gray scale intensities- darker signifying higher temperatures and lighter signifying lower temperatures. precipitationmap is a map that denotes by some gray value where it is currently precipitating. 
inferring a new chloropleth 
figure 1 details how the proposed diagrammatic operators can be used to infer a new chloropleth that represents where it is likely to be snowing within the given geographic location by finding the intersection of the area where it is thirty degrees or below and the area where it is precipitating. a cartogram covered with the gray value that represents the thirty degree range  denoted 1degreelntensitymap  is peeled from temperaturemap  forcing all gray values representing the thirty degree range and below to white while only lightening other grays. the result of this operation is then negated forcing all non-whlte areas to white and the thirty degree and below area to black. finally  this is anded with precipitationmap producing a new chloropleth that represents the area within the given geographic location in which it is in the thirties or below and is precipitating- by definition the most likely area for snow. formally  this process can be represented as: 
-i temperaturemap - 1degreelntensitymap  a precipitationmap. 
　there are many similar inferences that can be made with such maps. further  other questions could be asked of a system that dealt with this type of data. for instance  given a set of inspection diagrams representing the states  questions such as  in which states is it precipitating      how many states currently have temperatures below thirty degrees    or  is it likely to be snowing in connecticut   can be easily answered diagrammatically. we envision a geographic database of diagrammatic data with queries presented 


diagrammatically and resolved by diagrammatic inferencing as a reasonable goal of our research. 
1 related work 
as previously stated  little work has been done with diagram sequences and suites per se. one notable exception is the work done by bieger and glock  1; 1 . beside attempting a taxonomy of categories of information presented in what they term  picture-text instructions   they performed rigorous experimentation with actual subjects and monitored their use of such instructions to the end of identifying the most critical categories. the direction of 
their work is not towards automating diagrammatic reasoning but towards understanding human use of such information as is work by willows and houghton . 
　furnas  postulates a logic that deals with diagrams via bitpict rule mappings that can be used to transform one diagram into another and  therefore  allows reasoning from diagrams to diagrams. interesting as this reasoning is  these explicit rule mappings can be subsumed by the operators and functions currently proposed. further  furnas' work does not attempt to reason about diagrams in sequences but  rather  its crux is the generation of sequences of diagrams to accomplish some reasoning goal pertaining to a single diagram. 
　lastly  chapman  posits a number of primitive visual operators that are used as building blocks of various task-specific visual routines. these operators process information about single frames of a video game; no reasoning about sequences of frames takes place. interestingly  though  two main operations of his work have analogs in the inter-diagrammatic operators we have postulated. visual attention  focusing on a subset of a scene  can be seen as analogous to the peeling and negating of a cloropleth to concentrate on one particular gray-level intensity. visual search  finding particular elements in a scene  is analogous to our use of inspection diagrams. 
1 conclusion 
we have postulated a number of diagrammatic operators and functions and have shown how they can be useful in reasoning with sequences and suites of related diagrams. in particular  we have used them in the domains of game playing  musical notation  and cartograms. these operators and functions provide a clear and concise means of describing diagrammatic manipulations in an important subset of diagram groupings  namely  those in which objects are identifiable by their positions within diagrams. this is a first step in an attempt to endow a system with full diagrammatic reasoning capabilities that we believe will prove extensible to other  less constrained groupings of diagrams. 
　in general  we believe that a diagrammatic reasoning approach that deals with diagrammatic representations directly will often prove beneficial because it will avoid the difficult problems of 1  generating exhaustive textual or other 
1 	knowledge representation 
representations that specify all objects and their relationships and 1  focussing attention on only pertinent objects and relationships. further  when viewed at the pixel level  the postulated diagrammatic reasoning operators are closely related to raster graphics operators and  therefore  it is possible that hardware optimized for such graphics operators could efficiently perform diagrammatic operations. 
