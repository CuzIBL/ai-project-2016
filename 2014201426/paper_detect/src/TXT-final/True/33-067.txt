 
　　　this paper discusses an approach to the modelling of the explanation process within the framework of a graphics-based cad system currently under development  which can describe i t s own use  including the common ways to make and recover from errors. with a coordinated textual and pictorial display  the system  cadhelp  simulates an expert demonstrating the operation of the graphical features of the cad tool. it consults a knowledge base of feature scripts  built up using situational script and commonsense algorithmic methods  to explain a feature  generate prompts as the feature is being operated  and to give certain types of  help  when a feature is misused. cadhelp provides these services by summarizing the feature script in different ways depending upon what it has told the user previously. the summarization process is based upon a series of  sketchificat i o n   strategies  which prescribe which parts bf a knowledge structure  a causal chain  or a single concept can be thrown away  since the listener should be able to infer them. 
	i. 	introduction 
　　　the a b i l i t y to explain things is an important  but poorly understood  component of i n t e l l i -
gent behavior. this paper discusses an approach to the modelling of the explanation process within the framework of a graphics-based cad system  called cadhelp  which can explain i t s own operation to i t s user  including the common ways to 
make and recover from errors. functionally  the cad system is a familiar sort of graphical tool for the design domain of d i g i t a l logic circuits. it provides a standard set of graphical features  such as drawing  dragging and rubber-band line techniques  and accepts user input during  design from such standard devices as terminal  light pen and data tablet. 
	cadhelp 	contains 	detailed 	knowledge 
structures  	which 	simulate 	an 	expert 	user's 
the research summarized here was sponsored by the advanced research projects agency of the department of defense  and monitored by the office of naval research under contract n1-c-1. the support of these agencies is gratefully acknowledged. 
knowledge of how the basic graphical features work  or may f a i l to work. cadhelp explains itself by demonstration  i. e.  by mimicking an expert operating the device while explaining i t . the explanation mechanism contains a set of natural-language generation heuristics which allow it to create explanatory text or prompts from the underlying knowledge structure in a contextsensitive manner. cadhelp is primed to t e l l a user only what he  as a result of an explicit command or by dialog history  does not already know. therefore  subsequent explanations reflect the knowledge the user gained from earlier ones by omi t t i n g detailed restatement of concepts he should now understand. 
i i . an example 
　　　in this section  we present a sample explanation which cadhelp has produced. the user selects the graphical feature to be explained  and the level of the explanation   v i z .   summary  normal operation  or errors  with simple typed input. cadhelp cannot  understand  natural language i n put  and thus cannot engage in mixed-initiative dialogue  carb1  with i t s user. our desire was not to produce an intelligent computer-aided i n structional  cai  system  but rather to focus on the rather poorly understood generative component that any such system w i l l require: 
　　　cadhelp produces explanations by expressing  concepts   encoded in a conceptual dependency format  scha1   selected from the knowledge structure describing the selected feature. the text generated is not canned  but varies in significant ways according to the context it is being produced i n .  in the current implementation  however  the display oomponent of the explanation is prestored.  suppose the user asks to have explained the graphical feature of  dragging  objects  in this domain  logic devices  into position in the design area using the l i g h t pen. in a  summary  explanation  the normal operation of the feature is described in the highest-level terms available: 
to move an object to a location  use the drag feature. 
select the drag feature. 
select the object. 
drag the object into the design area. 
position the object. 
1 exit from the drag feature. 
　　　in the  normal  mode of explanation  the operation is expanded in a greater level of det a i l : 
to move an object to a location  use the drag feature. 
 light pen and parts flash as they are named  the l i g h t pen hangs on the hook on the graphics device. 
the hook is to the right of the screen. 
the l i g h t pen has a sensor. the l i g h t pen has a handle. 
the l i g h t pen has a connection to the system. 
select the drag feature by pointing the l i g h t pen. 
grasp the l i g h t pen. 
move the l i g h t pen to the screen. 
touch the l i g h t sensor to the drag symbol. 
the symbol flashes. 
select the object by pointing. 
drag the object into the design area. 
move the l i g h t pen into the design area. 
the object follows. 
remove the light pen when the object is at the location. 
exit from the drag feature by pointing. 
　　　an explanation of  errors  describes how common mistakes involving the feature can be made  and how to recover: 
when you move the object into the design area  the system receives an input from the light pen when the l i g h t pen touches the object. the system predicts where you are moving the light pen to. 
the system redraws the object at the place. the system waits to receive an input from the light pen. 
if you move the l i g h t pen too fast  the system does not get an input. 
the system cannot redraw the object. 
to continue dragging  point to the object . 
i i i . representing expert knowledge 
　　　in designing a mechanism which simulates the explanations generated by an expert  we have assumed that what is to be communicated is a knowledge structure  ks   a large body of interconnected declarations  propositions or assertions  describing a knowledge domain. explanation  then  can be conveniently modelled as a process by which a more or less complete copy of a declarative ks is moved from the memory of the explainer to that of the listener. 
　　　several claims oan be made about the characteristics of a ks suitable for cadhelp-style explanations. first  it should be language free  since we wish to be able to generate a number of paraphrases of the same underlying event. we would also like to be able to drive both the text generator and the display device from the same representation. 
　　　the units of the descriptions of graphical features are called conceptualizations. the conceptualizations are connected together at the lowest level of the ks into causal chains. the type of causal connection between the events is expressed in terms of the primitive causals of the commonsense algorithmic representation  rieg1  for meohaniams. ks's for explanation  as bundles of causal chains including well-understood actors and objects  conform well to the notion of a s i tuational script  scha1 . the ks describing the operation of a graphical feature is called a feature script  and the objects appearing in them which differ from use to use of the script are called script variables. feature scripts are built according to the  standard  methods descibed  for example  in  cull1   and so w i l l not be pursued further here. more details of cadhelp script structure can be found in  cullbo . 
iv. explanation strategies 
　　　the key observation concerning explanations of feature scripts is that they contain dozens of conceptualizations and causal relations which could be selected for expression. thus  the process of explaining appears to be one of deciding what not to say rather than what to say. for example  the feature script $lppoint  which describes  pointing to a graphical object with the light pen   contains fourteen conceptualizations  interconnected by ten causal relations. each assertion and relation is potentially expressible  but an explainer seems to focus on only certain 
elements of the ks during the explanation. 
　　　note that the speaker has the dual problem to the inferenoe problem the understander has. the understander is expected to f i l l in what the speaker l e f t out  by various types of inferences   e . g .   char1  rieg1  cull1  wile1 . the speaker seeks as economical an expression of the thought to be communicated as possible. he leaves  sketchy  the parts of the utterance the hearer should be able to infer. we c a l l this process conceptual sketchification. in examining what sounds natural in cadhelp-style explanations  i t ' s clear that speakers sketchify what they say at every level. selection and suppression occur in the use of the top-level pointer to the ks  causal chains to express an operation  unit events from a causal chain  and  f i n a l l y   conceptual cases in a conceptualization. 
　　　examples of sketch i f i c a t i o n are easy to find in the example explanations of section i i . consider the use of the term  point   for example. in the  normal  mode of explanation  cadhelp i n i t i a l l y assumes that the user knows so l i t t l e about pointing that the instrument used  the l i g h t pan  must be located and described. then the mainpath sequence of actions comprising a pointing episode is expanded. in the second use of  point   the instrument is named  but the action sequence is not given again. in the final use of  point   the description is reduced to the minimum. the i n strument and the actor  which can be inferred  are not named. but the object pointed to  which is variable from use to use of $lppoint  must be named. 
	the role of sketchifying can be 	seen 	within 
1 
single concepts  aa well. consider the syntactic phenomenon oalled the  imperative . conceptually  this involves the suppression in the surface form of the conceptual actor. but from the point of view of explanation  i t ' s known to both parties who the actor l a : the user  beoause of thia  the explanation need not e x p l i c i t l y name the actor  since this can be inferred. similarly  oertaln uses of the i n f i n i t i v e construction are sketchy expressions of an inferrable fact about the underlying concept. if i say  i decided to go home   my hearer is expected to infer that the unnamed person who w i l l go is the same as the one who decided. it appears that many syntactic constructions are the surface manifestations of underlying redundancies of these sorts  
　　　cadhelp'a explanation strategies are organized into a hierarchy containing three levels of sketchification. the ks-summarization level uses intent/summary conceptualizations associated with feature scripts for descriptions of ks's which have already been explained. the explainer keeps a small working memory of the featurea which have been the subject of an  explain  command  or which 
were imbedded in a feature which was explained. 
　　　the user phenoaenolofgoai level explains a ks in terms of the user's actions and the system responses he can see directly. this type of explanation is implemented by a small set of demonlike rules  on the order of a dozen  which examine the causal chains associated with the feature  paring these down to concepts in which the user is e x p l i c i t l y named as actor  or which are mentalinformation transfer events by the user in 
response to system actions. thus  during the explanation of  dragging   various objects are made to flash at various points as the feature is 
operated. the system also redraws the selected object to give the i l l u s i o n of the object's moving. the system aa actor is suppressed by a sketchif 1catlon rule  however  which eventually forces the language generator to use actorleas construotions such as:  the symbol flashes  or  the object f o l lows   phenonenological level summarization is used for descriptions of  normal  operation  including the generation of prompts during the actual execution of a graphical feature. 
　　　the third  most detailed level expands each malnpath and support conceptualization in a causal chain. this- is called the user/system conversational level because it explaina the ks in terms of the give and take between the user and system  which is a kind of converaation. becauae the details of how the system reacts to the user's 
manipulations are important in giving an understanding of how the user has gone wrong  conversational level summarization is used in error/recovery explanations. as in the phenomenological-level summarization  the technique of causal-chain sketchification is carried out by a set of rules  operating as demons  which 
select concepts to throw away.  the rules are  in fact  a subset of the ones used in phenomenological summariztion.  
v  generating english 
a  background 
　　　by comparison with natural language understanding and inference  the research subarea of natural language generation has received relatively l i t t l e attention. although several language generators exist  e.g.   simm1    ches1    mcd1   which are capable of impressive fluency  these begin with a syntactic representation of the string to be created  including the words to be used. thus  they are unsuited for use in a system such as cadhelp  which must generate from a conceptual representation of a feature to be explained. goldman's babel  gold1  is one of a very limited number of examples of a sentence generator whioh starts with a conceptual representation of the thought to be uttered  in conceptual dependency format  and maps it into a surface english string  goldman's approach  however  is basically suited for sentence at a time generation. the present researoh was motivated by the desire to build a generator capable of producing paragraph-length texts describing a knowledge structure  in which the factors that make for fluency could be explicitly studied. 
b. generation in cadhelp 
　　　cadhelp's generator  cgen  has data and cont r o l structures which are very similar to the ca language analyzer described in  birn1   i t s p r i mary data structure is a short term memory  called the c-list  which the generator accesses in an iterative process of looking up words to express the meaning of a concept currently at the focus of attention  the  front  of the c-list ; and of inserting left-over subconcepts  perhaps with associated function words  in appropriate places on the c-list. i n i t i a l l y   the c-list contains a conceptualization which has survived the pruning process the ks-level sketchifiers apply to a feature script. 
　　　english has various conventions which govern the order in whioh words should be said. these conventions are stored in cgen's dictionary as positional constraints on where the constituents expressing sub-conceptualizations must appear with respect to a word which spans part of the current concept. consider the following simplified dictionary definition for the word  move   as in  move the stylus to the tablet:  move:  ptrans actor  nil  object  nil  to  nil   
actor -  precedes parent  
object -  follows parent  
 precedes to-slot-filler  
to --  follows parent  
 follows object-slot-filler  
 follows function/word:to  
　　　this definition states that  move  spans a concept based on a physical transfer of location 

 a ptrans  which an actor makes an object undergo. 
1 

the predicates precedes and follows are used to indicate where on the c-list the associated conceptual case f i l l e r s are to be inserted. here  the predicates speoify a default ordering of actor  the word  move   object  then the f i l l e r of the to slot  following the function word  to . this approach to handling the details of english syntax is admittedly oversimplified. it has the great benefits of simplicity and uniformity  however  and thus has allowed a progressive approach to the addition of new language structure knowledge. for example  handling the active and passive forms of a verb turned out to require straightforward additions to the generator once a notion of  conceptual focus  was worked out. 
　　　cgen's basic generation cycle be described by four rules: 
1  if the front of the clist is empty  then there is nothing to generate; return. 
1  if there is a word on the front of the clist then  say  the word by saving it on a special l i s t to be returned when the generation cycle is complete. 
1  if there is a concept on the front of the clist then remove the concept and try to find a word in the dictionary to express that concept. the look-up process is similar to the discrimination-net approach used in babel. 
1  if the current concept is completely spanned by the word s  found  replace it with those words. otherwise  insert the leftover f i l l e r s into the c-list using the positional constraints stored with the word found. 
there is a f i f t h rule which concerns the decision not to say something. this decision is embodied in the actions of the collection of concept-level sketchifiers which continuously monitor the front of the c-list for concepts which can be expressed more economically than rules 1 above would prescribe. thus  the basic model of generation contained in cadhelp is that of an  exhaustive  algorithm  rules 1  being restrained by sketchifying rules. 
vi. an extended example 
　　　here we i l l u s t r a t e the generation process with computer output  edited for readability  showing the generator cgen expressing the same concept at several levels of sketchiness. the concept is one that is selected repeatedly by the explanation mechanism  in a process not shown here  as it applies user-phenomenological summarization to produoe prompts for the user as he selects a graphical feature. 
　　　first  we show what cgen produces if most of the concept-level sketchifiers are turned off  and the system is run in a special  verbose  mode. comments are indicated by    : 
ulisp v1 	copyright 1 r.l.kirby 
eval: 	 genverbose 'selomdpo  
 the current top of c - l i s t is the input concept which states that the user is transferring to the system the information that he has the goal that the system instantiate one of the graphical features  $cadfeat   and the instrument of the transfer is the user applying a force to a command block with the stylus. 
cgen: top of c - l i s t is co: 
 mtrans actor  #person role  *user   mode  t  from  *cp* part *user  
to  *cp* part  #person role  *sys    mobj  s-goal actor *user mode  t  goal  $cadfeat actor *sys featname  nil  mode   t       
inst  propel actor *user obj  #inst role  *stylus   to  *perpto* part 
 #loc role  &cmdblk  locname   n i l       
mode  t  manner  forceful    
 cgen finds   t e l l   in i t s dictionary as spanning 
~part of the input concept 
cgen: using 
  t e l l   
~following the instructions found under the word  
 cgen rebuilds the c - l i s t : 
cgen: current c - l i s t 
	 co actor  	 the actor of the mtrans should be 
 said f i r s t  the user  
	  t e l l   	 then the lexical item   t e l l   
 co to part   then the concept in the  to part  
 of the mtrans  the system  
	 that  	 then  that  
	 c1 mobj  	 then the concept in the mobj slot 
 by the action that   then  by the action that   co inst   then the instrumental concept 
cgen: top of c - l i s t is c1: 
	 #person role 	 *user   	 the actor of the mtrans 
cgen: using 
 you  
	cgen: current c - l i s t 	 now the c - l i s t has two 
	 you  	 lexical items on top which can be 
	  t e l l   	 popped off 
cgen: top of c - l i s t is c1:  mtrans to part 
 #person role  *sys    concept is next cgen: using 
 cadhelp  
cgen: current c - l i s t 
 cadhelp  
 that   realized by  cadhelp  
 contains two more 
 words to be said  now the goal stative in the mtrans mobj slot 
 reaches the top cgen: top of c - l i s t is c1: 
 s-goal actor  #peraon role  *user   mode  t  goal  $cadfeat actor  iperson role  *sys   featname  nil  mode   t       
1 

cgen: using 
 want  	 expressed with  want  
cgen: current c ~ l i s t 
 c1 actor  	~whose actor goes f i r s t 
 want  	~then want i t s e l f 
 that  	~then  that  
 c1 goal  	~then the goal concept 
 by the action that  ~then the mtrans inst 
 co inst  
cgen: top of c - l i s t is e1 
 #person role  *user   	~the 	user reappears 
cgen: using 
 you  
 now the  execute a cad feature  script concept 
 reaches the top 
cgen: top of c - l i s t is c1: 
 $eadfeat focus  actor  actor  iperson role   f sys   featname  nil  mode   t     
cgen: using 	 cgen has not been able to find a 
 execute  	 word which expresses the concept 
 directly so it uses the generic 
 verb  execute  
cgen: top of c - l i s t is c1:  system appears 
 #person role  *sys   	 again 
cgen: using 
 cadhelp  
 now the nominal ized form of the  feature script   concept bubbles up from where  execute  put i t . . . 
cgen: top of c - l i s t is c1: 
 $cadfeat nomform   n i l   focus  actor  actor  #person role  *sys   featname  nil  mode  non   
cgen: using 	 dictionary has a word for this form 
 feature  
cgen: top of c - l i s t is c1:  indefinite refer-
 indef  	 ence 
cgen: using 
 a  
 finally the propel concept comes up for 
 expression 
cgen: top of c - l i s t is c1: 
 propel actor  iperson role   user   obj  #inst role   stylus   to   perpto* part  #loc role 
        &cndblk  locname   n i l       mode  t  manner  forceful   
cgen: using 	 the aot i t s e l f is  press  
 press  
 after several more cycles  the r e s u l t . . . 
value: 
 you t e l l cadhelp that you want that cadhelp execute a feature by the action that you press the stylus on a command block  
next  we hand the above oonoept to the standard generator three tines in succession. each tine the realization returned is shorter. 
eva1:  gen 'selemdpo  
 the inst sketchifier looks at the instrumental concept and notes that i t s actor is the same as the input concept's. therefore  a gerund form can be used to express the instrument economically... inst: examining inst concept c1 
 the imp sketchifier notes that user-phenom summarization is going on  as is normal in prompts   and that the actor is the user; therefore the imperative is ok... imp: squashing actor *user in co 
 the dictionary returns  select  as the mapping word.  select  takes care of more of the 
     input concept than   t e l l   does  so this is chosen cgen: using 
 select  
 in the c - l i s t as rebuilt by  select   the actor has disappeared because of imp   select  only requires expression of the  mobj goal  subconcept  and inst has set up a special form for the expression of the instrumental conoept cgen: current c - l i s t 
	 select  	 the lexical form  select  
	 co mobj goal  	 the $cadfeature concept 
 which  select  has nominalized 
	 by  	- by  
	 co inst  	 a nominalized form of the 
 propel concept 
cgen: top of c - l i s t is c1: 
 $cadfeat actor  iperson role  *sys   featname  nil  mode  nom   
cgen: using 
	 feature  	 concept is expressed as  a feature  
 as before 
cgen: using 
 a  
 the instrumental concept reaches the top. note the syninstr marker which the inst sketchifier added to get the gerund form cgen: top of c - l i s t is c1: 
 propel syninstr  $prog  actor  nil  obj  #inst role   stylus   to  *perpto* part  #loc role  &cmdblk  locname   n i l       
mode  t  manner  forceful   
	cgen: using 	 the progressive realization 
 pressing  
 the cycle continues  with the r e s u l t . . . value: 
 select a feature by pressing the stylus on a command block  
 now express the conoept again 
eval:  gen 'selcmdpo  
 this time the standard inst sketchifier disqualifies i t s e l f because it's already had a shot at this oonoept. thus entity-instrument 
     gets a chance to modify the concept. i t s test is: is an instrumental object being used in a  normal  function in an instrumental concept  entinst: examining inst oonoept in oo 
1 
 imp does its usual dirty work: imp: squashing actor  user in co 
~with the result: 
value: 
 select a feature with the stylus  
  once more into the breach... 
eva1:  gen 'selecmdpo  
 both the standard inst and entity-inst sketchlfiers disqualify themselves because they've already had a shot at this concept. thus kill-instrument gets in and erases the instrumental concept altogether... k i l l i n s t : squashing inst concept in co imp: squashing actor *user in co 
 with the result: 
value: 
 select a feature  
v i i . implementation note 
　　　the natural-language and control modules of cadhelp are programmed in franz lisp. the highlevel graphics component was designed using the f a c i l i t i e s of the university of toronto gpac  reev1 . these parts of cadhelp currently run under unix on a vax-1 computer. the graphics display i t s e l f is generated by a dec vt-1 vector display device controlled by a pdp-1m computer. the graphics  natural language and explanation modules are coordinated by a general-purpose i n tegration package called a hierarchical task 
manager  cull1 . 
　　　to give a feeling for run-time  cgen produces the verbose expression of the command-select concept discussed in section vi in about 1 seconds when it is used alone; and in about 1 seconds when it is part of the complete cadhelp system. 
v i i i . conclusions 
　　　this paper describes research into the mechanisms that appear to be needed for generating explanations intelligently. the micro-world chosen  that of interactive graphics in support of cad  is a particularly attractive one because the needed knowledge structures can be designed by extending existing representational formalisms: scripts and mechanism-simulation causal relations. within this domain  methods of summarization have been developed which oan be coupled to the level of detail requested by the user  and the demands of local context. summarization is based upon the notion of  sketchification   a multilevel process of selecting conceptual items for expression  then suppressing components of an item based upon whether the user should be able to infer them. a collection of concept-level sketchlfiers interacts 
with a natural language generator  cgen  of a novel design. these sketchlfiers prescribe syntactic constructions which are more economical than those whioh would normally be used by the generator. 
