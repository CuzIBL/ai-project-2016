 
he study equation solving and analyse the s o l utions of experienced mathematicians. we f i n d t h a t t r a d i t i o n a l theorem proving methods are inadequate to explain the directness of these s o l u t i o n s   and that the well known algorithms f o r polynomials e t c . are inadequate to explain the wide v a r i e t y of equations solved. our analysis reveals a system of h i g h - l e v e l d e s c r i p t i o n s   strategies and goals  which can be used to guide the search through an explosively large search space. a few of these strategies w i l l be investigated i n d e t a i l . i t i s hoped that t h i s analysis w i l l eventually be incorporated i n t o a computer program that solves equations. 
introduction 
the problem domain we address ourselves to in t h i s paper is equation solving. in f a c t we are interested in f i n d i n g real valued solutions to equations involving r a t i o n a l   trigonometric  inverse trigonometric  exponential and logarithmic f u n c t i o n s . in t h i s paper we concentrate on f i n d ing general solutions to single equations in a single unknown. 
a study of t h i s domain is overdue because although the experienced human mathematician finds equation solving straightforward  no e x i s t i n g 
computer program can match his performance. t r a d i t i o n a l theorem proving programs are inadequate to explain the directness  lack of search  of his solutions. the well known algorithms f o r polynomials  e.g. gaussian e l i m i n a t i o n   sturm sequences  newton-bairstow  etc.  are inadequate to explain his range  e.g. trigonometric  logarithmic equations  e t c .   . see  for instance  martin and fateman  1 p1 or moses 1. neither can his solutions be regarded as p a r t of a process of p u t t i n g the equations i n t o some normal form or of reducing t h e i r syntactic complexity. so the standard s i m p l i f i c a t i o n packages provided by systems l i k e reduce  hearn 1.1  or macsyma  martin and fateman 1 p1  are inadequate to explain the success of his solutions. 
in order to t r y to match the human mathematician's performance we analyse his solutions. this analysis reveals a system of high l e v e l d e s c r i p t ions  strategies and goals  which can be used to guide the search for a s o l u t i o n through an explosively large search space. these high level concepts appear to be useful not only in equation solving  but throughout elementary algebra. we believe  the methodology should prove useful throughout mathematics. 
in addition elementary equation solving appears to be an especially appropriate domain to s t a r t with because: 
i  many useful high l e v e l concepts are revealed in the language used by mathematicians when they discuss equation solving  e . g .   e l i m i n a t i o n of 
v a r i a b l e s   change of v a r i a b l e   c o l l e c t i n g terms  i s o l a t i o n   trigonometric equations  e t c . 
i i   equation solving and pattern matching   u n i f i c a t i o n   a r e very s i m i l a r . since a l l algebraic manipulation is made easier by having a sophisticated pattern matching package  we make l i f e easier by studying equation solving f i r s t . 
in t h i s paper we analyse some s o l u t i o n s   tease out some high level strategies and discuss how these might be incorporated in a computer program. the strategies we discover are: 
i s o l a t i o n   c o l l e c t i o n   a t t r a c t i o n and the basic 
method. 
in the extended version of t h i s paper  bundy 1  we show how these strategies can be used to der i v e some h i s t o r i c a l l y i n t e r e s t i n g general s o l u t i o n s . we go on to analyse some solutions which 
cannot be explained by the above strategies and discover further s t r a t e g i e s . 
the proposed program 
at the time of w r i t i n g not a l l these ideas have been implemented in a computer program. i have no doubt that they a l l could be  and a student at edinburgh  bob welham  has experimented with implementing some of them in the prolog language  see warren 1 . however  it would be premature to invest a l o t of e f f o r t in a program before the whole domain has been explored. new connections between strategies are constantly being d i s covered  and new problems are constantly emerging  so that such programming e f f o r t might be wasted. our current ideas about the form of the program are reproduced below: 
the program w i l l be organised around a conventional theorem prover  run in proof checker mode. that i s   the theorem prover w i l l not be able to do anything unless instructed t o . 	the s t r a t e g i e s are the procedures which w i l l do the i n s t r u c t i o n . the word  strategy  was adopted to describe each of these procedures because they provide the theorem prover with search s t r a t e g i c guidance information. 	however  f o r some of them d e s c r i p t ions l i k e   t a c t i c     	 method  or  algorithm  seem more appropriate. 	in such cases we w i l l sometimes use the more appropriate d e s c r i p t i o n as a synonym f o r  strategy   a l b e i t with connotations. 
these strategies w i l l examine the current equation  using high-level predicates to decide what to do. on the basis of t h i s examination they may c a l l other strategies or apply i n d i v i d u a l axioms. they w i l l also decide whether those c a l l s were successf u l   and what to do next. the s t r a t e g i e s w i l l need to e x p l o i t a l l the b e n e f i t s of a h i g h - l e v e l programming language  e . g .   r e c u r s i o n   c o n d i t i o n als and search. it would be convenient if t h i s language and the theorem prover could share 
1 

f a c i l i t i e s such as search and database mechanisms. this may be possible using proiog  but care must be exercised in the mixing of metalanguage and object language concepts. for instance we might decide to have a predicate isvar which is true if and only if i t s argument is a variable. then isvar  u  would be true and isvar  1  false. however  we can derive isvar  1  from isvar  u  leading to a contradiction. our solution to this problem is to regard a l l expressions in the object language  constants  variables  terms and formulae  as constants in the metalanguage  so that we cannot deduce isvar  1  from isvar  u . for a further discussion of these issues see  for instance  kleene 1 pp1 and p1. 
the strategies w i l l have available to them a store of laws of real number theory. we w i l l call these laws axioms because the program w i l l assume them true without proof. the axioms which we are planning to put in this store are listed in an appendix to bundy 1. these axioms are highly redundant and include many facts which would normally be regarded as theorems in a parsimonious logical system. we w i l l reserve the words theorem and lemma for facts p r o v e l at run time. strategies may pick which axiom / apply next  in a variety of ways  according to t. context. 
for instance: 
i  a strategy may have the axioms useful to it earmarked at compile time. 
i i   	a strategy may have only a general description of the axioms useful to it and have to retrieve suitable axioms at run time. 	 this does not prevent some prior indexing . 
i l l   a suitable axiom may not be available  and the strategy may have to appeal to a theorem proving program to prove a lemma to use 
instead. 
no suitable axioms may be found  and the strategy w i l l have to f a i l . on the other hand several suitable axioms may be found and the strategy w i l l have to conduct a short search. 
¡¡no manipulation of the equation w i l l be allowed except by the theorem prover applying an axiom to i t . this idea of separating the inference system from the search strategy is due to kowalski 1 p l 1 . it has a number of advantages  see hayes 1  section 1 . for instance: 
i  	provided the theorem prover is sound  the correctness of any solution is guaranteed. this is sometimes in doubt in a more ad-hoc program. 
ii  a l l the axioms can be equally accessible to a l l the strategies  so a new axiom need only be added once. 
i l l   the learning of new axioms and new strategies is made easier. 
a logarithmic example 
let us consider an equation which most people w i l l find f a i r l y easy to solve. 

to the best of my knowledge  there are no known equation solving algorithms which could solve this equation  because it is logarithmic . in addition  it defines a search space which a l though modest by equation solving standards would present a considerable challenge to most resolution  see robinson 1  theorem provers. 
the solution we are going to analyse is given below: 

analysis w i l l lead us to discover the strategies of attraction  collection  and isolation  which we w i l l link up into a strategy called the basic method. 
notation 
since in what follows we shall be reading between the lines of this solution  it w i l l be necessary to be able to refer to the spaces between the lines. we have  therefore  labelled these spaces 
with roman numerals   on the right of the solution  . these spaces w i l l be referred to as steps  e . g .   step   i l l   is the one from line 1 to line 1. 
in problem solving  the word  solution  has two different meanings. it can mean either 
i  	the written protocol of the solver  as in the sentence  hand in your solutions by friday . 
i i   the answer to the problem  as in the sentence  the solution of the equation is x=1 . 
for instance in the above solution the written protocol is the whole thing from lines 1 to 1  the answer is just line 1. since we w i l l need to distinguish carefully between these two concepts we use the word  solution** to mean the written protocol and we w i l l use the word  answer  to mean the answer. 
we w i l l also need to define what syntactic forms are acceptable as answers. in equation solving  answers give values for the unknown in terms of expressions not involving the unknown. so close is this to the concept of a substitution that we have decided to make the connection between pattern matching and equation-solving more e x p l i c i t and use the word  substitution  to mean 
1 

those formula which are s y n t a c t i c a l l y acceptable as answers. 
as explained in bundy 1  the x in the above solution is not a variable in the predicate logic sense. if it were we would be allowed to subs t i t u t e a r b i t a r y terms for it during the course of the solution and we would get solutions such as : basis of nearly a l l work in equation solving as well as much of the rest of algebraic manipulation as with s i m p l i f i c a t i o n   mathematicians often omit i s o l a t i o n steps from t h e i r w r i t t e n protocols  crowding as many as three or four steps into the t r a n s i t i o n from one l i n e to another. 
we look next at l i n e 1: 



in f a c t x actually behaves l i k e a constant when we are searching for a general solution and l i k e a variable when we are searching for a p a r t i c u l a r s o l u t i o n . in this paper we are concerned only with general solutions so we regard x as a constant. followinq polya 1 we d i s t i n g u i s h it from any other constants in thee equation by c a l l ing it the unknown. we reserve the l e t t e r s 
	and 	
in t h i s analysis  because we look only at the f i n a l s o l u t i o n   we are g u i l t y of the s i n of not displaying the search involved in discovering that s o l u t i o n . we w i l l t r y to atone for t h i s sin when we discuss how to implement the strategies we discover unfortunately it w i l l not be possible  u n t i l the program is run  to be certain about the size of the space searched before the solution is found. however  in the conclusion we argue that t h i s space w i l l be a small function of the length of the s o l u t i o n . 
we look f i r s t at the end of the s o l u t i o n   lines 1 to 1. in l i n e 1  for the f i r s t time the equation contains only a single occurrence of the unknown  
x. from here on the solution is straightforward. the next three steps consist of s t r i p p i n g away the functions surrounding t h i s single occurrence of x u n t i l it is l e f t isolated on the l e f t hand side of the equation. each step consists of i d e n t i f y i n g the outermost  or dominant  function symbol on the left-hand-side  recovering the axiom which w i l l remove it from the left-hand-side and insert i t ' s inverse on the right-hand-side  and then applying t h i s axiom. we w i l l c a l l the strategy which guides these three steps i s o l a t i o n   because it isolates the singie occurrence of x on the l e f t hand-side. we w i l l explain it in more d e t a i l in the i s o l a t i o n section. it can be regarded as the 
this contains 1 occurrences of x  so isolation is not applicable. 	however  we can see step  ii  as preparing for isolation  by achieving a reduction in the number of occurrences of x from 1 to 1. this is done by applying the identity. 

this is an example of our second strategy  which we c a l l c o l l e c t i o n   namely  when there is more than one occurrence of the unknown  t r y to f i n d an axiom which w i l l c o l l e c t occurrences together. 
f i n a l l y we look at l i n e 1 and step  i  

the two occurrences of x cannot be immediately c o l l e c t e d   presumably because a suitable axiom was not stored. we can however prepare the occurrences f o r c o l l e c t i o n by moving them closer t o gether  so that more i d e n t i t i e s w i l l match the term containing them both. this is what happens in step   i   . the notion of  closer** is defined in the next section. the strategies of moving 
occurrences closer together to increase t h e i r chances of c o l l e c t i o n   we c a l l a t t r a c t i o n . 
when the above three strategies are combined we w i l l c a l l the r e s u l t i n g equation solving strategy  the basic method. 
our analysis is now as below. 

d e f i n i t i o n s 
in order to explain how we might implement these strategies  we w i l l need to have some notation to discuss algebraic expressions  especially the notion of distance between occurrences of symbols. 
1 

we can represent any algebraic expression as a tree  we do not use a graph  since we want to be able to d i s t i n g u i s h between occurrences : 

the distance between several occurrences of symbols in an expression is the size  number of links  of the smallest subtree in the tree which connects them a l l   e . g .   the distance between the two occurrences of x in the example is 1 and the distance between the three integers is 1. 
any term or formula w i l l be represented by a complete subtree. the symbol at the root of that subtree is called the dominant symbol of that term 
or formula: 
	log is the dominant symbol of log 	 x+1  
e 
+ is the dominant symbol of x+1 
an occurrence of an expression is said to contain another expression if the tree of the second is a subtree of the tree of the f i r s t : 
¡¡¡¡¡¡log  x+1  contains x+1 and x. an occurrence of a symbol is said to dominate an expression  if the symbol is the dominant symbol of an expression which contains log dominates x+1  e  and 1 in log  x+1  
i s o l a t i o n 
we now consider the four strategies in more d e t a i l in order to see how they might be implemented. 
if we have an equation  e  containing a single occurrence of the unknown x then we can apply i s o l a t i o n . for the sake of argument suppose x occurs on the left-hand-side of e and that the dominant function symbol on the left-hand-side is the n-ary symbol f  i . e .   e is of the form 

where s  	 say  	is the only term containing x. the i s o l a t i o n process is to f i r s t isolate s .   and then to c a l l i s o l a t i o n recursively to complete the i s o l a t i o n of x. 	to isolate s. we need an axiom 
of the form 

where a is some s u b s t i t u t i o n f o r u. 	in terms of the uj    and v. 	a is often of the form 

but t h i s is not always the case  as the axioms for sin and squared i l l u s t r a t e . 

we therefore define a substitution for x as follows 
i   	if s does not contain x  then x - s i s a n o n - t r i v i a l substitution for x. 
i i   	if a and b are non-trivial substitutions for x then avb is a non-trivial substitution for x 
i i i   if a n  is a non-trivial substitution for x and s is a set of real numbers then 
  a n    is a non-trivial substitution for x. 
i v   	 true  and  false  are t r i v i a l substitutions for x. 
v  	a substitution for x is a t r i v i a l or nont r i v i a l substitution for x. 
with t h i s d e f i n i t i o n of substitution there is an axiom of the required form associated with each of the functions of elementary algebra. we might speculate that t h i s is not an accident  t h a t 
mathematicians have deliberately defined new inverse 
functions   e.g. arcsin and square root  so that these axioms would e x i s t . about these inverse functions l i t t l e is known  and this causes problems when they occur in equations we are t r y i n g to solve. how these problems are tackled is d i s cussed in bundy 1. 
it should be a straightforward matter to w r i t e a procedure which can : decide whether or not there is a single occurrence of the unknown in an equation and on which side it occurs; i d e n t i f y the 
dominant symbol of that side; recover the approp r i a t e axiom; apply it and then apply i s o l a t i o n recursively to the r e s u l t i n g equation or d i s junction of equations. the only d i f f i c u l t y t h a t 
might arise is if the axiom was stored in the wrong form: 

the r i g h t form would have to be recovered as a subgoal. we delay consideration of t h i s problem. 
collection 
collection is the strategy which takes an equation and t r i e s to reduce the number of occurrences of the unknown which it contains. for the sake of c l a r i t y we w i l l l i m i t our discussion i n i t i a l l y to the case when two occurrences are reduced to one. this is the most common s i t u a t i o n and  at the cost of some complication  our discussion can easily be extended to the more general case. 
having decided which two occurrences to c o l l e c t i v e 
1 

focus our a t t e n t i o n on the smallest expression which contains them both. if the two occurrences are on the same side of the equation t h i s w i l l be a term  called the containing term  otherwise it w i l l be the whole equation. we deal with the former case f i r s t . the containing term must now be replaced by another term containing one occurrence of the unknown  say x  so we must look for an axiom  say a  which w i l l do t h i s . we can easily build up a description which a must obey. 
1  	a must be an i d e n t i t y   	i . e .   	an expression of the form: 

to f i n d a suitable axiom the c o l l e c t i o n strategy need only search among those axioms useful to it and f i n d one which also obeys part i i i   of the d e s c r i p t i o n . 
the case when the two occurrences of x appear on opposite sides of the equation can be d e a l t with in a similar way. this time we are interested in axioms of the form: 


precondition. 
i i   one of the variables  say u  must occur either : 
	 a  twice in s 	and once in s1 
or 	 b  twice in s1 and once in s1 
without loss of generality we w i l l assume 
	case 	 a   
i i i   s 1 must match the containing term  with one of i t s variables  say u  being instantiated 
	to x. 	note that we are not allowing u to be 
matched to a proper term  say t   x     containing x. this s i t u a t i o n w i l l be handled by 
making a p r i o r change of unknown of  say y  f o r t   x   . we are also not allowing the s i t u a t i o n where two v a r i a b l e s   say u and v  are both matched to x. if a u v  is useful to c o l l e c t i o n by matching u and v to x then a 
 u u  is also u s e f u l   and therefore nont r i v i a l . we w i l l assume that we w i l l not need to do c o l l e c t i o n using a   u   v     because a u u  w i l l also be present. to j u s t i f y t h i s assumption we need only make sure that 
a l l n o n - t r i v i a l axioms which can be gotten by i d e n t i f y i n g the variables of existing axioms are added to the axiom store. where c1  or c1 in s i t u a t i o n  a   can be matched to the whole equation. we can b u i l d the appropriate d e f i n i t i o n s of  useful to c o l l e c t i o n   by replacing s1 with c1 and s1 with c1 in parts   i i   and   i i i   
of the previous descriptions. 
we w i l l want to extend these d e f i n i t i o n s to deal with any reduction in the number of occurrences of 
the unknown. then we can include in c o l l e c t i o n the use of axioms l i k e u - u - o 
to reduce 1 occurrences to none. the m o d i f i c a t i o n to the d e f i n i t i o n s is straightforward    i i a   be-
comes : u must occur more often in s 	than in s  . 
even though strategies l i k e c o l l e c t i o n guide the search for a s o l u t i o n   they do not eliminate search altogether. for instance  c o l l e c t i o n has to choose: 
 a  which set of occurrences of the unknown to t r y to c o l l e c t    and therefore which subterm to t r y to replace  
 b  which matching  u s e f u l - t o - c o l l e c t i o n axiom to apply. if a obeys p a r t s   i   and  iia  of the above description we w i l l say that it is useful to c o l l e c t i o n   l e f t to r i g h t   r e l a t i v e to u. if a obeys 
parts  i  and  lib  we w i l l say that it is useful t o c o l l e c t i o n   r i g h t t o l e f t   r e l a t i v e t o u . our i n i t i a l experience is that c o l l e c t i o n narrows the search considerably. in f a c t we are lucky to f i n d a single axiom  useful for c o l l e c t i o n   which 
matches one of the containing terms. 	in the 
event of a real choice we could use h e u r i s t i c s based on the f a c t that we would l i k e to reduce the number of occurrences as much as possible. s i n 1u - 1.sinu.cosu i s useful t o c o l l e c t i o n   r i g h t t o l e f t   r e l a t i v e to u. 

i s useful t o c o l l e c t i o n   	l e f t t o r i g h t   r e l a t i v e to u  and v  notice that we are demanding that c o l l e c t i o n do i t s job with one application of an axiom. this is because we want c o l l e c t i o n either to succeed or to f a i l quickly  so we can t r y something e l s e . we could allow it to conduct a short search  but it would be d i f f i c u l t to know on what grounds to terminate an unsuccessful search. the problem 
with keeping such a t i g h t r e i n on c o l l e c t i o n is that it might f a i l simply because the axiom which should have succeeded was not in the r i g h t form. i s useful t o c o l l e c t i o n   	r i g h t t o l e f t   
r e l a t i v e to w 
is useless to c o l l e c t i o n 
1 

instead of 	the basic method 


our solution to t h i s problem is to have a pattern matcher which can recognise that axiom  1  matches 	 x+1  .  x-1 . 	this e n t a i l s b u i l d i n g - i n axioms l i k e the commutativity of m u l t i p l i c a t i o n   c . f . plotkin 1 . 	one aspect of this b u i l d i n g - i n process is discussed in the section on pattern matching in bundy 1  but a complete discussion is delayed u n t i l a l a t e r paper. 	such a pattern matcher w i l l increase the number of axioms which w i l l match the containing term. however  we s t i l l believe that c o l l e c t i o n w i l l be lucky to f i n d an axiom which both matches and is 
useful 	t o i t . 
we w i l l want the pattern matcher to spend a large  but bounded  amount of e f f o r t to t r y to make an axiom match an expression. if t h i s is not to be computationally very time-consuming  c o l l e c t i o n had better only feed good candidate axioms to the 
pattern matcher. it can select good candidates by ; 
 a  only choosing those  useful to c o l l e c t i o n   
 b  i n s i s t i n g that both the axiom and the expression it is to match obey the same high level description e . g .   both are quadratic  trigonometric  l o g a r i t h mic   etc. 
a t t r a c t i o n 
the a t t r a c t i o n strategy is very similar to c o l l e c t i o n . as before we must choose the occurrences we are going to a t t r a c t   then focus on t h e i r containing term. as before we w i l l use a d e f i n i t i o n of axioms useful to a t t r a c t i o n to recover a suitable axiom to apply. the main difference is in the type of axioms useful to a t t r a c t i o n . 
an axiom is useful to a t t r a c t i o n   	l e f t to r i g h t   r e l a t i v e to some subset of i t s variables  u say  if f o r a l l ueu  u has the same number of occurrences on l e f t and r i g h t   but the distance between a l l the occurrences is s t r i c t l y smaller on the r i g h t than the l e f t . 	we can make a similar d e f i n i t i o n f o r useful t o a t t r a c t i o n   	r i g h t t o l e f t . 

is useful to attraction  right to l e f t   for{u v} 
the variables in the subset  w i l l each be bound to terms containing the unknown  x. 
i s o l a t i o n   c o l l e c t i o n and a t t r a c t i o n can be combined i n t o a basic method f o r solving equations. 
if the equation contains a single occurrence of the unknown we i s o l a t e t h i s occurrence. otherwise we t r y c o l l e c t i o n on each combination of occurrences u n t i l either the number of occurrences is reduced to one  or no more collections are possible. in the f i r s t case we c a l l i s o l a t i o n   in the second case we c a l l a t t r a c t i o n . we t r y a t t r a c t i o n on one combination of occurrences. if t h i s is successful we c a l l c o l l e c t i o n   otherwise we t r y a t t r a c t i o n on some other combination. if we run out of a t t r a c t i o n s to attempt  the method f a i l s . 
conclusion 
we have studied elementary equation solving. existing equation-solving  computer programs  do not match either the range or the directness of the human mathematician. we have analysed such mathematician's solutions and discovered a system of high-level strategies. these strategies are not r e s t r i c t e d in t h e i r range of a p p l i c a t i o n . 
they guide the search f o r a solution by 
i  providing a series of intermediate subgoals between the present equation and the f i n a l s o l u t i o n . 
i i   focusing on the subterm of the equation which is to be manipulated next. 
i i i   selecting a small set of axioms which can be nade to apply to that subterm and which are relevant to achieving the next subgoal. 
we claim that t h i s guidance reduces the size of the space searched considerably and that sometimes there is no search at a l l . 
we have discovered and investigated the s t r a t e g i e s of i s o l a t i o n   c o l l e c t i o n   a t t r a c t i o n   and the basic method. 	this is only a small part of the s t o r y . there are many other strategies at work in equation solving. 	there are general-purpose strategies l i k e s i m p l i f i c a t i o n   pattern-matching  change of 
unknown  and e l i m i n a t i o n   and there are s p e c i a l purpose strategies f o r well understood types of equations l i k e polynomial and trigonometric equations. we delay discussion of these to another paper. 
acknowledgements 
we would l i k e to thank the many people with whom we have interacted over t h i s work for t h e i r encouragement  suggestions and i n s p i r a t i o n . 	it is d i f f i c u l t to separate the contributions of each i n d i v i d u a l . 	odd remarks and suggestions have often fermented together  r e s u l t i n g in a product unrecognisable to the o r i g i n a l c o n t r i b u t o r s . however  we single out for special mention : 	soei 
tien tan  gordon p l o t k i n   ira goldstein  joel moses  
luis pereira  bob welham  alan robinson  woody bledsoe  bob kowalski and george luger. we apologise to the many other people we have omitted. 

1 

