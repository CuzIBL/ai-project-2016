 
we are studying control knowledge for a general problem solver  named blockhead. currently the problem solver is based on negative heuristics  which has led to surprising efficiency in suitable domains. the lesson seems to be that it is easier to avoid being stupid than to try to be smart. stupid plans are defined and a plan improvement method proposed. analyses of stupid plans and 
failed plans suggest effective negative heuristics. introduction 
     we are investigating a general problem solver which incorporates control knowledge in the form of negative heuristics. the problem solver accepts problems represented relationally  as did strips  1   warplan   and noah . operators are represented as relational productions  following vere . an unusual feature is that preconditions must match distinct relationships in the current state. this allows a more natural description of operators. for example  in the blocks world the operator to move a block x onto a block y includes the preconditions clear x  and clear y . since these may not match the same item  we do not need the additional condition notequal x y . 
     in contrast to the above mentioned problem solvers  blockhead does not employ goal reduction: it is a forward-chaining system. nevertheless  it 
this research was supported by the naval ocean systems center under grant n1-o1. 
is 	goal 	directed  	as 	we 	shall 	see. 
forward-chaining systems have been generally neglected in studies of problem solving  perhaps because goal direction has been  erroneously  regarded as synonymous with goal reduction. note that forward systems avoid the difficult issue of integration of partial plans. 
     both breadth first and depth first variants of the interpreter have been constructed. each variant avoids repeating already visited states; this generally produces a finite search space. 
negative heuristics 
     the problem solver is guided by negative heuristics. these tell one what not to do. they are not intended to replace positive heuristics  but rather to complement them. negative heuristics are so natural that people are generally unaware of 
them. 	in 	the 	blocks 	world  	four negative 
heuristics surprised us by eliminating nearly all search. informally  they are: 
1. don't add to a pile containing a block that needs to be moved. 
1. don't add to a pile containing a block that requires adding another block to it  unless you are 
presently achieving that goal  . 	sometimes generates non-optimal plans. 1. don't move a block off an irrelevant pile. 
1. don't move a block onto an irrelevant pile. 
a more formal statement of the first heuristic is   capital letters stand for variables : 
don't make on x y  if for some w and z  an unachieved goal conjunct is on zrw   and y covers 
w. 
     note that the heuristics relate the goal to the current state and anticipated action. the heuristics are designed to eliminate actions which clearly do not contribute to the goal. this provides a form of goal direction which can be highly effective. using these heuristics  both the breadth first and depth first systems solved typical ten block problems with almost no consideration of fruitless paths. a f u l l width search of a ten block world might generate over 1 million states  so we were somewhat amazed that these few guidelines produced such limited 
searches. 
     it is of interest that the depth first system usually required less search than its breadth first cousin. this occurred because  in the breadth first approach  equally good partial solutions mist a l l be explored. with the heuristics  most paths being explored did in fact lead to solutions  giving the depth first system an advantage with its  don't care  approach. however  the breadth first problem solver has the advantage of always generating a least cost solution  modulo the heuristics   the depth first problem solver 
stupid 	plans 
	we say a plan 	is 	stupid 	if 	it 	contains 	a 
 proper  subplan that solves the problem. a plan which is not stupid need not be optimal. for example  suppose the initial state consists of four blocks  with b and d on the floor  a on b  and c on d. let the goal be d on b and a on c  as pictured below. 
	initial state 	goal 

a non-optimal plan to solve this problem is: c to floor; a to floor; d to b; a to c. this plan is not stupid because no subsequence of the plan will solve the problem. each operation in the plan contributes to the solution. the plan can be improved by omitting the second operation and interchanging the last two operations. in our view this goes beyond plan simplification. 
     one could detect and simplify a plan by trying all possible subplans. here we describe a less expensive algorithm which is not completely effective. form a graph  the plan graph  in which each node corresponds to an operation in the plan and is labelled with that operation. a directed edge connects nodel to node1 if there are 
postconditions of nodel which are preconditions of node1 and are not preconditions of any intervening operations. the edge is labelled with this set of  instantiated  postconditions. plan graphs are closely related to the triangle tables of nilsson. 
     the plan given as an example would have the following plan graph. nodes are enclosed in boxes  the arcs are directed downwards and are labelled with relationships. 

     using a plan graph  we simplify a plan in the following way. mark a l l the nodes that finally establish one of the goal conjuncts. all nodes that are not ancestors of any narked node can be deleted from the plan. also  any directed path consisting of unmarked nodes that is reducible to the identity transformation can also be excised. this reduced plan graph can now be translated into a plan by choosing any total ordering of the operations which is consistent with the partial ordering determined by the plan graph. 
negative heuristic discovery 
     stupid plans and examples of poor search played an important role in our discovery of effective negative heuristics. when examining such failures  certain actions struck us as  stupid.  
attempts to explain why they were stupid led to the negative heuristics. we believe this process can be mechanised. work is proceeding on methods to identify the  point of stupid departure  and to generalize a description of the system state at that point. 
implementation notes: the breadth first problem solver was first programmed in lisp and then in prolog. the compiled prolog code executed four times faster than the compiled lisp code. the prolog code was more concise than the lisp code and easier to modify. if an ai problem requires pattern matching  non-determinism or execution of anchor trees  then prolog seems to have advantages over lisp. 
referhnces 
 nilsson  n.j.  principle of artificial tn ninynffft. paio alto: tioga  1. 
 pikes  r.e. and nilsson  n.j.  strips: a new approach to the application of theorem proving to problem solving. artificial intelligencer 1  1. 
 warren  d.h.d.  warplan: a system for generating plans  memo 1  dept. of computation logic  univ. of edinburgh  school of artificial intelligence  june 1. 
 sacerdoti  e.d.  a structure plane and behavior  new york: elsevier  1. 
 vere  s.a.  relational production systems  artificial intelligence  vol 1.  1. 
