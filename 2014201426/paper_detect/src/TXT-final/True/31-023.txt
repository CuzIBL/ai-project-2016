 
we propose a new version of rippling  called relational rippling. rippling is a heuristic for guiding proof search  especially in the step cases of inductive proofs. relational rippling is designed for representations in which value passing is by shared existential variables  as opposed to function nesting. thus relational rippling can be used to guide reasoning about logic programs or circuits represented as relations. we give an informal motivation and introduction to relational rippling. more details  including formal definitions and termination proofs can be found in the longer version of this paper   bundy and lombart  1 . 
keywords: rippling  heuristics  inductive proof  automated theorem proving  logic program transformation. 
1 	introduction 
rippling is a heuristic technique for controlling search during automatic theorem proving   bundy et a/.  1 . it was originally developed for inductive theorem proving. its role is to manipulate the induction conclusion to make it more like the induction hypothesis  thus enabling the hypothesis to prove the conclusion. rippling can also be used for non-inductive proofs whenever a problem can be solved by reducing a syntactic difference between it and some previously solved problem. 
　 part of the research reported in this paper was conducted while the first author was a visitor at the max planck institut fur informatik in saarbriicken. he would like to thank his hosts  harald ganzinger and david basin for inviting him to mpi and making his stay so pleasant. we would also like to thank david basin  toby walsh  helen lowe  julian richardson and members of the mathematical reasoning group at edinburgh for discussions about earlier versions of the ideas described here. this work is part of a project supported by serc grant gr/h/1  esprit brp grant 1 and arc grant 1. the second author is supported by the belgian national fund for scientific research  and his stay in edinburgh is supported by hc&m logic program synthesis and transformation. 
　rippling works by identifying the syntactic difference between the current problem and the previous one   basin and walsh  1   and then moving that difference through nested functions to a place where it no longer prevents a match between them. following boyer and moore  this matching process is called fertilization. rippling is predicated on the assumption that value passing is done via function nesting. but there is a popular alternative technique for value-passing: via existentially quantified shared variables. this is the technique used  for instance  in logic programming. it is also used in the relational representation of circuits. there is thus a strong motivation to adapt the ideas of rippling to situations in which value passing is done via shared variables between relations  instead of nested functions. we will call this adapted rippling  relational rippling. when we need to draw a distinction  we will call the original rippling: functional rippling. 
　our goal is to implement relational rippling in a proof planning environment   bundy  1 . this entails devising relational rippling tactics to guide a proof editor like oyster and devising methods to specify these tactics in a meta-logic for use by a proof planner like ciam   bundy et al.  1 . 
notational conventions 
we use upper case for variables  free or bound   lower case for constants and greek letters for meta-variables. where variables are universally quantified at top level we will usually omit the quantifier. the notation p x  means that p contains at least one free occurrence of x. it may also contain other variables. 
　we use =  for the rewrite arrow and -+ for implication. reasoning is backwards from goal to hypothesis. therefore  when an implication  a -  b  is used as a rewrite rule on positions of positive polarity it is applied right to left  i.e. b =  a. 
1 	background 
to make this paper self-contained we give a brief introduction to functional rippling and to value passing via shared existential variables. 
	bundy and lombart 	1 


1 	automated reasoning 

one argument and out of another. we can capture this intuition by annotating each argument position in the skeleton with an arrow. a downwards arrow means that the wave-front must go into this argument and upwards arrow means that the wave-front must go out of this argument. arrows in wave-rule and goal must match. so  1  can be annotated in two ways:  1  
bundy and lombart 


1 	automated reasoning 


bundyandlombart 


1 	automated reasoning 

properties are inherited by the expressions being rewritten. 
　in an extended version of this paper   bundy and lombart  1   we give formal definitions of the various concepts introduced informally here: well annotated term; skeleton; erasure; well-founded measures for attraction rules and relational wave-rules; the wave-rule types; preconditions of the various methods; etc. these definitions have been used to show that each phase of rippling terminates  as does the process as a whole. they can also be used to give a formal specification of a program to parse rewrite rules as wave-rules and attraction rules and automatically annotate them. finally  they can be used to specify the methods and tactics which will be needed to implement relational rippling in a proof planning context. such formal definitions are badly needed and their absence has hampered previous attempts to implement relational rippling. as a result of this formal analysis the proposals given here are quite improved from previous proposals. 
　the proposals here have been hand tested on a range of examples  both abstract and concrete  drawn from the step cases of inductive proofs of relational theorems. so far  they have been very successful in guiding these proofs. these tests have confirmed that relational rippling dramatically reduces the search for a proof most of the time there is no branching despite a highly explosive search space. this reduction in the search space seems not to exclude the required proofs. even when relational rippling fails  an analysis of the failure can suggest how to patch the proof. 
　it remains to complete the implementation of the proposals made here and to test them more extensively. 
