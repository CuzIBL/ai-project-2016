
we develop an algorithm for reducing universally quantified situation calculus queries to a form more amenable to automated reasoning. universal quantification in the situation calculus requires a second-order induction axiom  making automated reasoning difficult for such queries. we show how to reduce queries about property persistence  a common family of universally-quantifiedquery  to an equivalent form that does not quantify over situations. the algorithm for doing so utilizes only first-order reasoning. we give several examples of important reasoning tasks that are facilitated by our approach  including checking for goal impossibility and reasoning about knowledge with partial observability of actions.
1 introduction
the situation calculus  pirri and reiter  1  has long been one of the most popular formalisms for reasoning about dynamic worlds. it has more recently become a popular choice for implementing systems situated in a dynamic world  as it offers  among other advantages: a formalism based in firstorder logic; an elegant monotonic solution to the frame problem; and an effective reasoning procedure for the projection problem  reiter  1 . coupled with logic programming languages such as prolog  it has facilitated the implementation of a wide range of systems.
¡¡the foundational axioms of the situation calculus include a second-order induction axiom defining the set of all situations  reiter  1 . sentences that contain only existential quantification over situation terms can be proven without the induction axiom and so are more amenable to automated reasoning  pirri and reiter  1 . it is therefore important for systems built on a situation calculus theory of action to limit queries to existential form. much of the work on implementing systems with the situation calculus has been on reducing the number of axioms required to answer a given query  to allow more efficient reasoning.
¡¡unfortunately there are many reasoning tasks that require universal quantification over situations. for example  it is often desirable to show that no situation can satisfy a particular goal. in this paper we are interested in a subset of such queries which we refer to as persistence queries: under a particular situation calculus theory d  and given some property ¦Õ and situation s  determine whether ¦Õ will hold in all situations in the future of s:

the need for second-order logic has traditionally limited automated reasoning about such queries. we introduce a new approach that is similar in spirit to the regression operator of  reiter  1 : define an operator that transforms a formula ¦Õ into a formula pd ¦Õ   such that ¦Õ persists in s if and only if pd ¦Õ  holds in s. we term this the persistence condition of ¦Õ  and show how to calculate it in a form suitable for effective automated reasoning.
¡¡to determine pd ¦Õ   we first define an operator that holds in s whenever ¦Õ holds in s and all its immediate successors. the persistence condition is shown to be a fixed-point of this operator  which can be sought using a straightforward iterative algorithm. since this requires only first-order reasoning with a limited number of axioms  the result is an effective procedure with which to answer a family of queries that universally quantify over situations.
¡¡the paper is organized as follows: section 1 gives a brief introduction to the situation calculus  formally defines the persistence problem  discusses related work and gives several examplesof importantpersistence queries; section 1 formally defines the persistence condition  presents an algorithm that calculates it  shows that the algorithm is correct and discusses the conditionsnecessary for completeness; and section 1 concludes with a summary of our results.
1 background
the situation calculus is a many-sortedlanguageof first-order logic augmented with a second-order induction axiom. it has the following sorts: action terms are functions denoting individual instantaneous events that can cause the state of the world to change; situation terms are histories of the actions
that have occurred in the world  with the initial situation represented by s1 and successive situations built up using the function do : action ¡Á situation ¡ú situation; object terms represent any other object in the domain. it further distinguishes fluents as predicates or functions representing properties of the world that may change from one situation to another  and so take a situation term as their final argument. for a detailed description consult  pirri and reiter  1 .
¡¡a basic action theory is a set d of situation calculus sentences  with a specific syntactic form as specified in  pirri and reiter  1   that describes a particular dynamic world. queries about the behavior or evolution of the world are posed as logical entailment queries relative to this theory. it consists of the following disjoint sets: the foundational axioms of the situation calculus  ¦² ; successor state axioms describing how fluents change between situations  dss ; precondition axioms indicating when actions can be performed  dap ; unique names axioms ensuring that action terms are distinct  duna ; and axioms describing the value of fluents in the initial situation  ds1 :
d = ¦² ¡È dss ¡È dap ¡È duna ¡È ds1
¡¡the foundational axiom of most import for this paper is the induction axiom  which defines the set of all situations as the least set containing s1 and closed under application of the do function  as follows:
 p .  p s1  ¡Ä  s a.  p s  ¡ú p do a s    ¡ú  s.p s  
the fundamental importance of this axiom is described in  reiter  1 . much research has focused on identifying sentences of the situation calculus that can be proven without this axiom  and thus require only first-order logic. our work continues this tradition.
¡¡there is a distinguished predicateposs a s  that indicates when it is possible to perform an action in a given situation. the set of action precondition axioms dap contains one axiom for each type of action a  of the general form:  s  ¡úx .  poss a  ¡úx   s  ¡Ô ¦°a  ¡úx  s  
here ¦°a represents a uniform formula  see below  defining action possibility on a per-action basis.
¡¡it is often useful to introduce analogous predicates to describe different aspects of action performance. for example  a predicate cantobs agt a s  could indicate when an agent will be unable to observe the occurrence of an action. such predicates are easily incorporated into a basic action theory by axiomatizing them in dap in the same manner as poss. we refer to these predicates in general as action description predicates  and use the meta-variable ¦Á to represent an arbitrary such predicate.
¡¡the uniform formulae as defined in  pirri and reiter  1  can be thought of as properties of the state of the world. they are basically logical combinations of fluents referring to a common situation term  which cannot mention action description predicates nor compare situation terms. we will use the meta-variable ¦Õ to refer to an arbitrary uniform formula.
¡¡it is often useful to determine the truth of a property at a given situation. the formula ¦Õ s  represents the uniform formula ¦Õ with all occurrences of its unique situation term replaced by the situation s.
1	ordering over situations
situations form a tree with s1 at the root and do constructing child situations from parents. there is a basic ordering relation  defined by the following foundational axioms:

where is the standard abbreviation of.
it is frequently useful to restrict the situations under consideration to those possible in the real world  by defining an ordering relation   over only these  executable  situations:

many results of the situation calculus are derived relative to the executable situations - for example   reiter  1  develops an induction principle for all situations where s1 ¡Ü s. this notation is so useful that we propose a parametrization of it: let ¦Á be an action description predicate specifying the actions of interest  then define the  ¦Á-ordering  over situations as follows:

 the standard ordering over executable situations is clearly  poss. if s is thought of as the  current situation   then  means that s is one potential future  and all actions
that will occur in that future satisfy ¦Á.
1	effective reasoning
answering an arbitrary situation calculus query ¦× involves  in general  an entailment problem in second-order logic  sol :
d |=sol ¦×
this can be problematic for efficient automated reasoning. fortunately  there exist particular syntactic forms for which some of the axioms in d are not required. in  pirri and reiter  1  the   s sentences  are defined as those in which every situation variable is in the scope of a positive existential quantifier. they show that such sentences can always be provenwithout the inductionaxiom  i  and hence are answerable by first-order logical entailment  fol :
d |=sol  s¦× iff d   {i} |=fol  s¦×
such queries can be approached with standard first-order reasoning systems. to increase the efficiency of reasoning it is desirable to eliminate further axioms from d  which  pirri and reiter  1  show possible for several syntactic forms.
¡¡axiom reduction is also the key idea behind the regression operator  the principal tool for effective reasoning in the situation calculus  reiter  1 . the regression operatorrd is a syntactic manipulation whose behavior can be summarized1for our purposes as follows: given a formula ¦Õ uniform in do a s   regression transforms it into a formula rd ¦Õ  that is uniform in s and is equivalent to ¦Õ under the theory of action d:
d |= ¦Õ ¡Ô rd ¦Õ 
regression also replaces instances of the poss predicate with appropriate instantiations of the corresponding uniform formula from the axioms in dap  and other action description predicates can easily be treated in the same way. in order to regress such a predicate over an action variable one must assume that there are only a finite number of action types  so that it can be replaced with the disjunctive closure of its definitional axioms. we assume this restriction throughout.
¡¡if ¦Õ refers to a situation that is rooted at s1  repeated applications of the regression operator  denoted by r d  can transform it into an equivalent formula uniform in the initial situation. the successor state and action precondition axioms are  compiled into  the regressed formula  and so are not required for the reasoning task:
d |= ¦Õ iff duna ¡È ds1 |= r d ¦Õ  s1 
the trade-off is that the length of may be exponential in the length of ¦Õ. in practice this is typically more than compensated for by the reduction in the number of axioms required  and regression has proven a very effective technique.
1	property persistence
one important form of situation calculus query is to ask whether a given property ¦Õ will hold in all future situations of a given situation s  as well as at s itself:

more generally  one may wish to limit the futures considered to those brought about by a certain class of actions ¦Á:

in words this states  given that all subsequent actions satisfy ¦Á  ¦Õ will remain true  or  more succinctly   ¦Õ persists under ¦Á . we term queries of this form property persistence queries  and they are involved in many useful reasoning tasks. the following are a small selection:
¡¡goal impossibility: given a goal g  establish that there is no possible situation in which that goal is satisfied:
d |=  s.s1 ¡Ü s ¡ú  g s 
¡¡goal futility: given a goal g and situation s  establish that the goal cannot be satisfied in any possible situation in the future of s:

note how this is different from goal impossibility: while the agent may have initially been able to achieve its goal  the actions that have subsequently been performed have rendered the goal unachievable. agents would be well advised to avoid such situations.
¡¡checking state constraints: this is a variant of goal impossibility - show that the constraint can never be violated.
¡¡need for cooperation: to establish that it is absolutely necessary to cooperate with another agent  an agent must determine persistence under actions performed by itself:

assuming that the action description predicate ownaction has been defined to identify actions performed by the agent in question  this states that no situation in the future of s in which all actions were performed by that agent can satisfy g. if this is the case  it will need to cooperate with another agent in order to achieve its goal.
¡¡knowledge under partial observability: in recent unpublished work we develop a new account of knowledge in the situation calculus when not all actions are observable by all agents. to facilitate reasoning in this formalism  agents must be able to reason about what cannot be changed by actions that they cannot observe  a form of persistence query.
¡¡due to the universal quantification over situations  the techniques for effective automated reasoning in section 1 cannot be applied to persistence queries. this paper is devoted to developing of a complementary technique for handling such queries.
1	related work
while there is a rich and diverse literature base for the situation calculus  there appears to have been little work dealing with universally quantified queries. the work of  reiter  1  shows how to handle such queries by hand using an appropriate instantiation of the induction axiom  but makes no mention of automating this reasoning.
¡¡other work considering persistence focuses exclusively on verifying state constraints. these are uniform formulae that must hold in every possible situation  a highly specialized form of persistence query. the work of  lin and reiter  1   compiles away  the induction axiom when verifying a state constraint  by means of the following equivalence:
¦² ¡È duna ¡È dss |= ¦Õ s1  ¡ú   s.s1 ¡Ü s ¡ú ¦Õ s  
iff duna |=  s a.¦Õ s  ¡Ä rd poss a s   ¡ú rd ¦Õ do a s   
verification of a state constraint can thus be reduced to reasoning about a universally quantified uniform formula using only the unique names axioms  a comparatively straightforward reasoning task. this problem is also approached by  bertossi et al.  1   who develop a system for automatically verifying state constraints based on an induction theorem prover.
¡¡however  there are many issues related to persistence that are not addressed by such work  including: persistence at situations other than s1; action description predicates other than poss; how to combine notions of persistence and regression; and determining what additional conditions may be necessary to guarantee the persistence of ¦Õ. as our treatment of persistence can provide a concrete basis for these considerations  it is significantly more general than existing work.
1 the persistence condition
for implementing persistence queries in practical systems  we clearly need to transform the query into a form suitable for effective reasoning. specifically  we will transform a persistence query based at s into the evaluation of a uniform formula at s  which can be done effectively using the regression operator. we need some transformation of a property ¦Õ and action description predicate ¦Á into a uniform formula pd ¦Õ ¦Á  that is true at precisely the situations in which ¦Õ persists under ¦Á  given a particular action theory d. we call pd the persistence condition of ¦Õ under ¦Á.
definition 1. the persistence condition pd ¦Õ ¦Á  is a uniform formula that is the weakest precondition for the persistence of ¦Õ under ¦Á  given a basic action theory d without the initial situation axioms. that is:

¡¡defining pd to be independent of the initial world state allows an agent to calculate it regardless of what  if anything  is known about the actual state of the world. to see how pd may be calculated  consider the weaker notion of a formula persisting to depth n in a situation:
definition 1. a uniform formula ¦Õ persists to depth 1 under ¦Á in situation s when the formula pd1  ¦Õ ¦Á  holds in s  as defined by:
pd1  ¦Õ ¦Á  s =def ¦Õ s  ¡Ä  a.rd ¦Á a s  ¡ú ¦Õ do a s   
more generally  for any n ¡Ý 1  a uniform formula ¦Õ persists to depth n under ¦Á in situation s when the formula holds in s  as defined by:
pd1  ¦Õ ¦Á =def ¦Õ
pdn ¦Õ ¦Á =def pd1  pdn 1 ¦Õ ¦Á  ¦Á 
¡¡note that pd1 is a literal encoding of the requirement  ¦Õ holds in s and in all its direct successors . since ¦Á is an action description predicate and ¦Õ is a uniform formula  the expression ¦Á a s  ¡ú ¦Õ do a s   can always be regressed and the result will always be uniform in s. successive applications of  assert persistence to greater depths.
¡¡intuitively  one would expect pd ¦Õ ¦Á  to be a fixed-point of pd1  ¦Õ ¦Á   since pd ¦Õ ¦Á  implies persistence up to any depth. such a fixed-point can then be calculated using standard iterative approximation techniques. to show that this is in fact the case we require a number of theoretical results  presented below.
1	formal development
we begin by adapting two existing results involving induction to operate with our generalized ¡Ü¦Á notation  and be based at situations other than s1:
proposition 1. for any action description predicate ¦Á  the foundational axioms of the situation calculus entail the following induction principle:

proof. a trivial adaptation of theorem 1 in  reiter  1 .

proposition 1. for any basic action theory d  uniform formula ¦Õ and action description predicate ¦Á:

iff
duna |=  s a.¦Õ s  ¡Ä rd ¦Á a s   ¡ú rd ¦Õ do a s   
proof. a straightforward generalization of lemma 1 in  lin and reiter  1   utilizing proposition 1.

¡¡proposition 1 will be key in our algorithm for calculating the persistence condition. it allows one to establish the result  if ¦Õ holds in s  then ¦Õ persists in s  by checking entailment of a uniform formula by the unique names axioms  a straightforward first-order reasoning task.
¡¡next we must formalize some basic relationships between pd and pdn  as follows:
lemma 1. given a basic action theory d  uniform formula ¦Õ and action description predicate ¦Á  then for any n:

that is  ¦Õ persists under persists under ¦Á.
proof. by the definition of pdn  any s that falsifies the righthand side of this equivalence will also falsify the left-hand side  and vice-versa.

lemma 1. given a basic action theory d  uniform formula ¦Õ and action description predicate ¦Á  then for any n:
d   ds1 |=  s.  pd ¦Õ ¦Á  s  ¡ú pdn ¦Õ ¦Á  s  
proof. pd ¦Õ ¦Á  implies the persistence of ¦Õ by definition  which implies pdn ¦Õ ¦Á  by lemma 1.

¡¡we are now equipped to prove the major theorem of this paper: that if pdn ¦Õ ¦Á  implies  then pdn ¦Õ ¦Á  is equivalent to the persistence condition for ¦Õ under ¦Á.
theorem 1. given a basic action theory d  uniform formula ¦Õ and action description predicate ¦Á  then for any n:
		 1 
iff
		 1 
proof. for the if direction  we first see by the definition of pd1 that equation  1  is equivalent to:
duna |=  s a.pdn ¦Õ ¦Á  s  ¡Ä rd ¦Á a s  
¡ú rd pdn ¦Õ ¦Á  do a s   
which by proposition 1 implies the persistence of pdn ¦Õ ¦Á  under ¦Á. by lemma 1 this implies the persistence of ¦Õ under ¦Á  which in turn implies pd ¦Õ ¦Á   giving:

by lemma 1 this implication is in fact an equivalence  yielding equation  1  as required.
¡¡the only if direction is a straightforward reversal of this reasoning: pd ¦Õ ¦Á  implies the persistence of ¦Õ  which implies the persistence of pdn ¦Õ ¦Á   which implies  1  by proposition 1.

¡¡since by definition  equation  1  identifies pdn ¦Õ ¦Á  as a fixed-point of the pd1 operator  as our initial intuition suggested.
1	algorithm for the persistence condition
since we can easily calculate pdn ¦Õ ¦Á  for any n  we have a straightforward algorithm for determining pd ¦Õ ¦Á : search for an n such that

since we expect to be simpler than  we should look for the smallest such n. algorithm 1 presents an iterative procedure for doing just that.

algorithm 1 calculate pd ¦Õ ¦Á 

pn   ¦Õ
pn1   pd1  pn ¦Á 
while do pn   pn1 pn1
end while return pn

¡¡note that the calculation of pd1  ¦Õ ¦Á  is a straightforward syntactic transformation and so requires no further treatment.
correctness
if algorithm 1 terminates  it terminates returning a value of pn for which equation  1  holds. by theorem 1 this value of pn is equivalent to the persistence condition for ¦Õ under ¦Á. the algorithm therefore correctly calculates the persistence condition.
¡¡note that equation  1  holds when pdn ¦Õ ¦Á  is unsatisfiable for any situation  as it appears in the antecedent of the implication. the algorithm thus correctly returns an unsatisfiable condition  equivalent to false  when ¦Õ can never persist under ¦Á.
completeness
as theorem 1 is an equivalence  the only source of incompleteness will be failure to terminate. algorithm 1 may fail to terminate for two reasons: the loop condition may never be satisfied  or the first-order logical inference in the loop condition may be undecidable and fail to terminate.
¡¡the later indicates that the basic action theory d is undecidable. while this is a concern  it affects more than just our algorithm - any system implemented around such an action theory will be incomplete. thus  with respect to this source of incompleteness  our algorithm is no more incomplete than any larger system it would form a part of.
¡¡the former is of more direct consequence to our work  and raises two questions: is the persistence condition guaranteed to exist  and is it guaranteed to be reachable in a finite number of iterations  since pd1 is clearly monotone  the constructive proof of tarski's fixed-point theorem  cousot and cousot  1  guarantees the existence of a fixed-point that can be calculated via transfinite iteration  as performed by our algorithm. moreover  this will be the least fixed-point greater than ¦Õ  a satisfying confirmation of correctness since the persistence condition must be the weakest precondition for the persistence of ¦Õ.
¡¡unfortunately  there is no guarantee that this fixed-point can be reached via finite iteration  which is required for termination. indeed  it is straightforward to construct a fluent for which the algorithm never terminates: consider a fluent fp x s  taking integers x  that is affected by a single action that makes it false whenever fp x + 1 s  is false. letting ¦Á be vacuously true  the sequence of iterations produced by our algorithm would be:

the persistence condition in this case is pd fp x s   ¡Ô  y .x ¡Ü y ¡ú fp y s   and while this is the limit of the iteration it is clearly unachievable in any finite number of steps.
¡¡pd1 operatesoverthe set of equivalenceclasses of formulae uniform in s  and the theory of fixed-points requires that this set be a well-founded partial order to guarantee termination of an iterative approximation algorithm. there are certain classes of basic action theory for which this well-foundedness can be guaranteed. the most obvious is theories with finite action and object domains  in which the set of equivalence classes is finite. another is the case where successor-state axioms refer only to the direct arguments of their fluents  in which case repeated applications of pd1 will pick out a subset of the equivalence classes that refers to a finite number of objects  giving the same guarantee.
¡¡in general  termination requires that repeated applications of the successor-state axioms  via the regression operator  do not construct infinite chains. we are currently investigating syntactic restrictions on successor state axioms that can enforce this requirement  and have found it to be easily met in practice. we are also investigating more advanced fixedpoint algorithms that may give better efficiency and termination guarantees.
effectiveness
our algorithm replaces a single reasoning task based on the full action theory d with a series of reasoning tasks based on the unique names axioms duna. is this a worthwhile tradeoff in practice  the following points weigh strongly in favor of our approach:
¡¡first and foremost  we avoid the need for the second-order induction axiom. all the reasoning tasks can be performed using standard first-order reasoning  for which there are many high-quality automated provers. second  the calculation of pd only reasons based on the unique names axioms  which as discussed is a comparatively straightforward task. third  pd ¦Õ ¦Á  s  is in a form amenable to regression  a standard tool for effective reasoning in the situation calculus. fourth  the persistence condition for a given ¦Õ and ¦Á can be cached and re-used for a series of related queries about different situations  a significant gain in amortized efficiency. finally  in realistic domains we expect many properties to fail to persist beyond a few situations into the future  meaning that our algorithm will require few iterations in a large number of cases.
¡¡of course  we also inherit the potential disadvantage of the regression operator: the length of pd ¦Õ ¦Á  may be exponential in the length of ¦Õ. as with regression  our experience thus far has been that this is more than compensated for by the reduced number of axioms required for reasoning.
1	applications
the persistence condition is readily applicable to the persistence query problems given in section 1. since pd yields a uniform formula  the techniques outlined in section 1 can be directly applied to the following transformed queries.
¡¡goal impossibility: given a goal g  establish that there is no possible situation in which that goal is satisfied: d |= pd  g poss  s1  the persistence condition of  g with respect to action possibility allows goal impossibility to be checked easily.
¡¡goal futility: given a goal g and situation s  establish that the goal cannot be satisfied in any possible situation in the future of s:
d |= pd  g poss  s 
precisely the same formula is required for checking goal impossibility and goal futility. this highlights the advantage of re-using the persistence condition at multiple situations. our approach makes it feasible for an agent to check for goal futility each time it considers performing an action  and avoid situations that would make its goals unachievable.
¡¡checking state constraints: this can be handled as per goal impossibility above. a state constraint ¦Õ must satisfy:
duna |= ¦Õ ¡Ô pd ¦Õ poss 
¡¡if this is not the case then pd ¦Õ poss  indicates the additional conditions that are necessary to ensure that ¦Õ persists  which may be useful in adjusting the action theory to accommodate the constraint.
¡¡need for cooperation: to establish that it is absolutely necessary to cooperate with another agent  an agent must determine persistence under actions performed by itself:
d |= pd  g ownaction  s 
¡¡knowledge under partial observability: to know ¦Õ in a world where actions may be unobservable  an agent must know that ¦Õ will persist under any actions that it would be unable to observe. this results in a regression rule for knowledge of the form:
rd knows ¦Õ do a s    =
knows rd pd ¦Õ cantobs  do a s    s 
1 conclusions
we have developed an algorithm that transforms persistence queries  a very general and useful class of situation calculus query  to a form that is amenable to standard techniques for effective reasoning in the situation calculus. the algorithm is based on iterative application of the standard regression operator  and uses only first-order reasoning with a small number of axioms. our algorithm is shown to be correct  and complete given some basic restrictions on the theory of action.
¡¡our approach generalizes previous work on persistence in several important ways. it can consider sequences of actions satisfying a range of conditions  not just the standard ordering overpossibility  enabling us to treat problems such as need for cooperation and knowledge under partial observability. it can establish that properties persist in the future of an arbitrary situation  not necessarily the initial situation  enabling us to answer the question of goal futility. the results of calculating the persistence condition can be cached  allowing for example the goal futility question to be efficiently posed on a large number of situations once the persistence condition has been calculated. finally  the fact that pd operates similarly to the standard regression operator rd allows them to interact in non-trivial ways  such as in the regression of knowledge formulae under partial observability of actions.
¡¡as a result  we have significantly increased the scope of queries that can be effectively posed in practical systems built on the situation calculus.
