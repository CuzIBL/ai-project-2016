 
clisp is an attempt to make lisp programs easier to read and write by extending the syntax of lisp to include i n f i x operators  if-then statements  for-do-while statements  and similar algol-like constructs  without changing the structure or representation of the language. clisp is implemented through lisp's error handling machinery  rather than by modifying the interpreter: when an expression is encountered whose evaluation causes an error  the expression is scanned for possible clisp constructs  which are then converted to the equivalent lisp expressions. thus  users can freely intermix lisp and clisp without having to distinguish which is which. emphasis in the design and development of clisp has been on the system aspects of such a f a c i l i t y   with the goal in mind of producing a useful t o o l   not just another language. to t h i s end  clisp includes interactive error correction and many 'do-what-i-mean* features. 
* * * 
the 	syntax 	of 	the 	programming 	language 
lisp      is very simple  in the sense that it can be described concisely  but not in the sense that lisp programs are easy to read or w r i t e ! this simplicity of syntax is achieved by  and at the expense of  extensive use of e x p l i c i t structuring  namely grouping through parenthesesization. for the benefit of readers unfamiliar with lisp syntax  the basic element of lisp programs is called a fgr.m. a form is either  1  atomic  or  1  a l i s t   the l a t t e r being denoted by enclosing the elements of the l i s t in matching parentheses. in the f i r s t case  the form is either a variable or a constant  and i t s value is computed accordingly. in the second case  the f i r s t element of the l i s t is the name of a 
function  and the remaining elements are again forms whose values w i l l be the arguments to that function. in backus notation: 
figure 1 
syntax of a lisp form 
 form  ::   variable | constant | 
  function-name   form  . . .  form   
for example  assign x the value of the sum of a and the product of b and c is written in lisp as  setq x  plus a  times b c    . 
the syntax for a conditional expression is correspondingly simple:* 
figure 1 
syntax of a conditional expression 
	 conditional expression  	::x 
 cond  clause  . . .  clause   
 clause  :;=   form   form   
note that there are no i f ' s   then's  begin's  end's  or semi-colons. lisp avoids the problem of parsing the conditional expression  i . e .   delimiting the individual clauses  and delimiting the predicates and consequents within the clauses  by requiring that each clause be a separate element in the conditional expression  namely a sublist  of which the predicate is always the f i r s t element  and the consequent the second element- as an example  l e t us consider the following conditional expression which embodies a recursive d e f i n i t i o n for factorials** 
figure 1 
recursive definition of factorial 
 cond 
   eq n 1  
 t  times n  factorial  sob1 n      
* actually  a clause can have more than two consequents  in which case each form is evaluated and the value of the last form returned as the value of the conditional. however  for the purposes of t h i s discussion  we can confine ourselves to the case where a clause has only one consequent. 
** the expression in figure 1 is shown as it would be printed by a special formatting program called prettyprint. prettyprint attempts to make the structure of lisp expressions more 
manageable by judicious use of identation and breaking the output into separate l i n e s . i t s existence is a t a c i t acknowledgment of the fact that lisp programs require more information than that contained solely in the parenthesization in order to make them 
easily readable by people. 
1 
the f i r s t clause in t h i s conditional is the l i s t of two elements   eq no  1   which says if  eq n 1  is true  i . e .   if n is equal to 1  then return 1 as the value of the conditional expression  otherwise go on to the second clause. the second clause is  t  times n  factorial  sub1 n          which says if t is true  a tautology-the else of algol conditionals   return the product of n and  factorial  sub1 n  . the l a t t e r is evaluated by f i r s t evaluating  sub1 n   and then c a l l i n g factorial  recursively  on this value. 
as a result of the structuring of conditional expressions  lisp does not have to search for words such as if  then  else  elseif  etc.  when interpreting or compiling conditional expressions in order to delimit clauses and their constituents: this grouping is specified by the parentheses  and is performed at input time by the read program which creates the l i s t structure used to represent the expression. 
similarly  lisp does not have to worry about how to parse expressions such as a+b+c  since  a+b *c must be w r i t t e n unambiguously as  times  plus a b  c     and a+ b*c  as  plus a  times b c  . in fact  there are no reserved words in lisp such as if  then  and  or  for  do  begin  end  e t c .   nor reserved characters l i k e +   -  *  /  =   -  etc.* this eliminates e n t i r e l y the need for parsers and precedence rules in the lisp interpreter and compiler  and thereby makes program manipulation of lisp programs straightforward. in other words  a program that  looks at  other lisp programs does not need to incorporate a l o t of syntactic information. for example  a lisp interpreter can be w r i t t e n in one or two pages of lisp code.' it is for this reason that lisp is by far the most suitable  and frequently used  programming language for writing programs t h a t deal with other programs as data  e . g .   programs that analyze  modify  or construct other programs. 
however  it is precisely this same simplicity of syntax that makes lisp programs d i f f i c u l t to read and write  especially for beginners   'pushing down' is something programs do very w e l l   and people do poorly. as an example  consider the following two  equivalent  sentences: 
 the r a t that the cat that 	the 	dog that 	i 	owned chased caught ate the cheese.  
versus 
 i own the dog that chased the cat that caught the rat that ate the cheese.  
natural language contains many l i n g u i s t i c devices buch as that i l l u s t r a t e d in the second sentence above for minimizing 
* except for parentheses  and period   which are used for indicating structure  and space and end-of-line  which are used for delimiting i d e n t i f i e r s . 
embedding  because embedded sentences are more d i f f i c u l t to grasp and understand than equivalent non-embedded ones  even when the l a t t e r sentences are somewhat longer . similarly  most high level programming languages offer syntactic devices for reducing apparent depth and complexity of a program: the reserved words and i n f i x operators used in algol-like languages simultaneously delimit operands and operations  and also convey meaning to the programmer. they are far more i n t u i t i v e than parentheses. in f a c t   since lisp uses parentheses   i . e .   l i s t s   for almost a l l syntactic forms  there is very l i t t l e 
information contained in the parentheses for the person reading a lisp program  and so the parentheses tend mostly to be ignored: the meaning of a particular lisp expression for people is found almost entirely in the words  not in the structure. for example  
the expression in figure 1 
　　　　　　　figure 1 
　　　　　　　careless definition of factorial 
	 cond  eq n 1  	1  
 t times n factorial    sub1 n      
is recognizable as factorial even though there are five misplaced or missing parentheses. grouping words together in parentheses is done more for lisp's benefit  than for the programmer's. 
clisp is designed to make lisp programs easier to read and write by permitting the user to employ various i n f i x operators  ifthen- else statements  for-do-while-unlessfrom-to-etc. expressions  which are automatically converted to equivalent lisp expressions when they are f i r s t interpreted. for example  factorial could be written in clisp as shown in figure 1. 
figure 1 
clisp definition of factorial 
 if n=1 then 1 else n* factorial n-1   
note that this expression would be represented internally  after it had been interpreted once  as shown in figure 1  so 
that programs that might have to analyse or otherwise process this expression could take advantage of the simple syntax. 
clisp also contains f a c i l i t i e s for making sense out of expressions such as the careless conditional shown in figure 1. furthermore  clisp w i l l detect those cases which would not generate lisp errors  but are nevertheless obviously not what the programmer intended. for example  the expression  quote  expression   form   w i l l not cause a lisp error  but  form  would never be seen by the interpreter. this is clearly a parentheses error. clisp uses both local and global information to detect  and where possible  repair such errors. however  t h i s paper w i l l concentrate primarily on the syntax extension aspects of clisp  and leave a discussion of the semantic issues for a l a t e r time. 
1 
there have been similar e f f o r t s in other lisp systems  most notably the mlisp language at stanford.* clisp d i f f e r s from these in that it does not attempt to replace the lisp language so much as to augment i t . in fact  one of the principal c r i t e r i a in the design of clisp was that users be able to freely intermix lisp and clisp without having to i d e n t i f y which is which. users can write programs  or type in expressions for evaluation  in lisp  clisp  or a mixture of both. in t h i s way  users do not have to learn a whole new language and syntax in order to be able to use selected f a c i l i t i e s of clisp when and where they f i n d them useful. 
clisp is implemented via the error correction machinery in interlisp*. thus  any expression that is well-formed from lisp's standpoint w i l l never be seen by clisp  e.g.  if the user defined a function i f   he would effectively turn o f f that part of clisp . this means that interpreted programs that do not use clisp constructs do not pay for i t s a v a i l a b i l i t y by slower execution time. in f a c t   the interpreter does not  know* about clisp at a l l . it operates as before  and when an erroneous form is encountered  the interpreter calls an error routine which in turn invokes the do-what-i-mean  dwim  analyzers' ＊  which contains clisp. if the expression in question turns out to be a clisp construct  the equivalent lisp form is returned to the interpreter. in addition  the o r i g i n a l clisp expression  is modified so that it becomes the correctly translated lisp form. in this way  the analysis and translation are done only once. 
integrating clisp i n t o the lisp system  instead of  for example  implementing it as a separate preprocessor  makes possible dowhat-i-mean features for clisp constructs as well as for pure lisp e x p r e s s i o n s . * for example  if the user has defined a function named get-parent  clisp would know not to attempt to interpret the form  get-parent  as an arithmetic i n f i x operation. 
  actually  clisp would never get to see this form  since it does not contain any errors.  if the user mistakenly writes  get-praent   clisp would know he meant  get-parent   and not  difference get praent   by u s i n g t h e information t h a t praent is not the name of a variable  and that get-parent is the name of a user function whose spelling is  very close  to that of get-praent. similarly  by using information about the program's environment not readily available to a preprocessor  clisp can successfully resolve the following sorts of ambiguities: 
* interlisp  formerly bbk-lisp1  is implemented under the bbn tenex timesharing system1 and is j o i n t l y maintained and developed by xerox palo alto research center and bolt  beranek  and newman  i n c .   cambridge  mass. it is currently being used at various sites on the arpa network  including parc  bbn  i s i   sri-ai  etc. 
1   list x*fact n   where fact is the name of a variable  means  list  x*fact  n . 
1   list x*fact n   where fact is not the name of a variable but instead is the name of a function  means 
 list x* fact n    	i . e .   	n 	is 	fact's argument. 
1   list x*fact n    fact the name of a function  and not the name of a variable   means  list x*  fact n   . 
1  cases 	 1    1  	and 	 1  	with 	fact misspelled! 
the f i r s t expression is correct both from the standpoint of clisp syntax and semantics and the change would be made without the user being n o t i f i e d . in the other cases  the user would be informed or consulted about what was taking place. for example  to take an extreme case  suppose the expression  list x*fcct n  were encountered  
where there was both a function named fact and a variable named fct. the user would f i r s t be asked if fcct were a misspelling of fct. if he said yes  the expression would be interpreted as  list  x*fct  n .* if he said no  the user would be asked if fcct were a misspelling of fact  i . e .   if he intended x*fcct n to mean x* fact n . if he said yes to t h i s question  the indicated transformation would be performed. if he said no  the system would then ask if x*fcct was to be treated as clisp  since fcct is not the name of a  bound  variable.** if he 
* through t h i s discussion  we speak of clisp or dwim asking the user. 
actually  if the expression in question was typed in by the user for immediate execution  the user is simply informed of the transformation  on the grounds that the user would prefer an occasional misinterpretation rather than being continuously bothered  especially since he can always retype what he intended if a mistake occurs  and ask the programmer's assistant to undo the effects of the mistaken operations if necessary.' for transformations on expressions in his programs  the user can inform clisp whether he wishes to operate in cautious or trusting mode. in the former case  most typical  the user w i l l be asked to approve transformations  in the l a t t e r   clisp w i l l operate as it does on type-in  i . e .   perform the transformation after informing the user. 
** this question is important because many of our lisp users already have programs that employ variables whose names contain clisp operators. thus  if clisp encounters the expression a/b in a context where either a or b are not the names of variables  it w i l l ask the user if a/b is intended to be clisp  in case the user r e a l l y does have a free variable named a/b  but has mistakenly used a/b here in a context where it was not bound. 
1 
said 	yes  	the 	expression 	would 	be 
transformed  if no  it would be l e f t 	alone  
i . e .   as  list x*fcct n . note that we have not even considered the case where x*fcct is i t s e l f a misspelling of a variable name  as with get-praent. this sort of transformation would be considered after the user said no to x*fcct n -  x* fact w . the complete graph of the possible interpretations for  list x*fcct n  where fct and xfct are the names of variables  and fact is the name of a function  is shown in figure 1. 

the f i n a l states for the various terminal nodes shown in figure 1 are: 

clisp can also handle parentheses errors caused by typing 1 or 1 for '    or '   ' -  on most terminals  1 and 1 are the lower case characters for '     and     '   i . e .       and '1' appear on the same key  as do     ' and 
  1 .  for example  if the user writes n*1factorial n-1  the parentheses error can be detected and fixed before the i n f i x operator * is converted to the lisp function times. clisp is able to distinguish this situation from cases l i k e n*1*x meaning  times n 1 x   or n*1x  where 1x is the name of a variable  again by using information about the programming environment. in fact  by integrating clisp with dwim  clisp has been made s u f f i c i e n t l y tolerant of errors that almost everything can be misspelled!* for example  clisp can successfully translate the d e f i n i t i o n of factorial: 
 iffn*1 thenn 1 esle n*1facttorialnn-1  
* where misspelling includes running adjacent words together  as shown in example. 
to the form shown in figure 1  while making 1 spelling corrections and f i x i n g the parenthesis error.* 
this sort of robustness prevails throughout clisp. for example  the i t e r a t i v e statement permits the user to say things l i k e : 
 for old x-m to n 
do  print x  while  primep x  ** 
	however  	the user can also write old  x--m    
	 old x-m   	 old  x-m     permute the order of 
the operators  e . g .   do  print x  to n for old x+m while  primep x    omit either or both sets of parentheses  misspell any or a l l of the operators for  old  to  do  or while  or leave out the word do entirelyl and  of course  he can also misspell print  primep  m  or n!*** 
clisp is well integrated into the interlisp system. for example  the above iterative statement translates into an equivalent lisp form using prog  cond  go  etc.**** when the interpreter subsequently encounters this clisp expression  it automatically obtains and evaluates the translation. similarly  the compiler  knows  to compile the translated form. however  if the user prettyprints his program  at the corresponding point in hie function  prettyprint  knows  to print the original 
clisp. similarly  when the user edits his program  the editor makes the translation invisible to the user. if the user modifies the clisp  the translation is automatically discarded and recomputed the next time the expression is evaluated. 
* clisp also contains a f a c i l i t y for converting from lisp hack to clisp  so that after running the above definition of factorial  the user could  clispify  to obtain: 
 if n=1 then 1 else n* factorial n-1  -
** this expression should be self explanatory  except possibly for the operator old  which says x is to be the variable of i t e r a t i o n   i . e .   the one to be stepped from m to n  but x is not to be rebound. thus when t h i s loop finishes execution  x w i l l be equal to 
n. 
1 
in short  clisp is not a language at a l l   but rather a system. it plays a role analagous to that of the programmer's assistant.* whereas the programmer's assistant is an i n v i s i b l e intermediary agent between the user's console requests and the lisp executive  clisp s i t s between the user's programs and the lisp interpreter. 
only a small e f f o r t has been devoted to defining a core syntax for clisp. instead  most of the e f f o r t has been concentrated on providing a f a c i l i t y which' 'makes sense' out of the input expressions using context information as well as b u i l t - i n and acquired information about user and system programs. just as communication is based on the intention of the speaker to produce an effect in the recipient  clisp operates under the assumption that what the user said was intended to represent a meaningful operation  and therefore t r i e s very hard to make sense out of i t . the motivation behind clisp is not to provide the user with many different ways of saying the same thing  but to enable him to worry less about the syntactic aspects of his communication with the system. in other words  it gives the user a new degree of freedom by permitting him to concentrate more on the problem at hand  rather than on translation into a formal and unambiguous language. 
clisp has just become operational and the expected reactions and suggestions from users w i l l do much towards polishing and refining i t . however  the following anecdote suggests a favorable prognosis: after being cursorily introduced to some of the features of clisp  two users wanted to t r y out the i t e r a t i v e statement f a c i l i t y   but neither of them were sure of the exact syntax. the f i r s t user thought that if they just typed in something  reasonable   the system would figure out what they meant. and i t did! 
references 
	1. berkeley  	e.c. 	 lisp  	a 	simple 
introduction   in the programming language lisp  its operation and 
applications. berkeley  e.c. and bobrow  d.g.  editors   mit press  1. 
* bobrow  o.g.  burchfiel  j . d .   murphy  d.l. and tomlinson  r.s.  tenex  a 
paged 	time 	sharing system for the pdp-1.  communications of the. acm  march 1  v o l . 1  ho. 1. 
	' 	mccarthy  	j. 	et 	a l . 	lisp 	1 
	programmer's 	manual. 	mit 	press  
1. 
* smith  	d . c 	mlisp 	user's 	manual. stanford 	a r t i f i c i a l 	intelligence project memo ai-1  january 1. 
1
 teitelman  w.  automated programming the programmer's assistant.  proceedings of f a l l joint computer conference. december 1. 
* teitelman  	w.  	bobrow  	d.g.  	hartley  
a . k .   murphy  d.l. bbn-lisp tenex reference manual  bolt  beranek  and newman  i n c .   august 1. 
1. teitelman  	w. 	 do 	what 	i 	mean   computers 	and 	automation. 	a p r i l 
1. 
* teitelman  	w. 	 toward 	a 	programming laboratory   	proceedings 	of f i r s t 
international joint conference on a r t i f i c i a l intelligence. walker  d.  editor   may 1. 
* weissman  c. 	llsp 1 primer. dickenson press  1. 
1 
session 1 hardware and software for a r t i f i c i a l intelligence 
1.pak: a snobol-based programming language for artificial intelligence applications 
john mylopoulos  norman badler  lucio melli and nicholas roussopoulos 
department of computer science  university of toronto d e s c r i p t i v e terms: programming language  snobol  b a c k t r a c k i n g   r e l a t i o n a l data base  a r t i f i c i a l i n t e l l i g e n c e . 
a b s t r a c t 
       this paper describes a programming language f o r a r t i f i c i a l i n t e l l i g e n c e a p p l i c a t i o n s 
which 	o f f e r s 
    a  a data base  in the form of a c o l l e c t i o n of l a b e l e d d i r e c t e d graphs where knowledge can be stored 
    b  p a t t e r n 	d i r e c t e d 	i n f o r m a t i o n 	r e t r i e v a l and p a t t e r n 	invoked 	f u n c t i o n 	c a l l s 
    c  p r i m i t i v e statements which enable the user to c o n s t r u c t f l e x i b l e searching algorithms. 
       the language is an extension of snobol in i t s design and implementation and uses snobol's 	s t r i n g p a t t e r n 	matching f a c i l i t i e s f o r i t s 	own 	 graph  p a t t e r n matching. 
1 . 	i n t r o d u c t i o n 
	l.pak 	was 	designed and implemented 	in 
order to 	f a c i l i t a t e ai research at 	the u n i v e r s i t y o f toronto. 	i t s design was i n f l u e n c e d by other languages desi gned 	f o r 	s i m i l a r 	reasons such as c1nnivf.r 1    plannfr  qa1  s a i l   1   1     	and our deci si on to 	implement 	it 	as an extension of snobol and 	keep 	it 	r e l a t i v e l y inexpensive 	  i n terms o f the time and space r e q u i r e d f o r 	the execut ion of programs . 
       this paper only di scusses the main features of l.pak  how the y can be used  t h e i r r e l a t i o n to features of fered by other languages f o r ai   and the success of the current implc-
m e n t a t i o n . more d e t a i l s on the language are a v a i l a b l e elsewhere  it is assumed t h a t the reader is f a m i l i a r w i t h the basic features 
of snobol 	  1   . 
1. 	the data base 
       the data base f o r 	each 	l.pak 	program 	cons i s t s 	of a c o l l e c t i on of d i r e c t e d   	l a b e l e d graphs 	  h e r e a f t e r g raphs  	such as that shown in fig. 	1. 	a l i s t of 	t r a n s i t i v e 	and/or i n t r a n s i t i v e 	edges is 	associated w i t h each 
node  which define e i t h e r p r o p e r t i e s of  the object represented by  the node or r e l a t i o n s which h o l d between the node and other elements of the same graph. 
       a l i n e a r order e x i s t s f o r the nodes of each graph d e f i n e d by s p e c i a l edges l a b e l e d 
next. 
type sun 
	type house 	type tree 
       edge labels   p r o p e r t i e s   consist of one or more atoms separated by underscores. the f i r s t atom is the a t t r i b u t e of the p r o p e r t y   
while subsequent 	atoms are i t s modi f i e r s . 
       information can be r e t r i e v e d from the data base by matching  graph  patterns against i t. 
       patterns 	arc s p e c i f i e d in 	terms of sequences of path d e s c r i p t i o n s . 	for example  
the 	p a t t e r n 
            $x  left aarb yj   far .swcontains one path d e s c r i p t i o n which w i l l match paths 	that 
    a  begin at the node which is the value of atom x   
    b  move along an edge whose l a b e l has left as a t t r i b u t e and is followed by at least one 
m o d i f i e r   
    c  move along an edge whose label has far as a t t r i b u t e   
    d  end at node $w. 
	if such a path connects nodes 	$x 	and 
$w f o r a p a r t i c u l a r data base  the p a t t e r n match succeeds and the m o d i f i e r of left is assigned to atom y   w h i l e the graph p a t t e r n match r e t u r n s $w   the last node v i   i t e d during the match. patterns are evaluated by the f u n c t i o n search. 
       aarb is a special property p a t t e r n which will match any atom. l.pak o f f e r s several 
other b u i i t - i n p r o p e r t y patterns and operators s i m i l a r to tho se o f f e r e d by snobol to help the user speci fy c lasses of edge labels in his graph p a t t e r n s thus  graph  p a t t e r n matching i s e s s e n t i a l l y d r i v e n by property p a t t e r n 
matchi ng and c an be e a s i l y implemented using the s t r i n g pat t e r n matching f a c i l i t i e s i n snobol. 
       note that there may be several paths which w i l l mat ch the same p a t t e r n . for example  the p a t t e r n match 
　　　　　search   $x  left   above far    could 	r e t u r n n ode 	n1 	or 	nz 	i n fig. 1. the p a t t e r n ma tch however w i l l 	r e t u r n j u s t one of the 	two nod es . 

	fig. 	1. 
       we w i l l show l a t e r how to generate a l l the matching a l t e r n a t i v e s . 
       i n f o r m a t i o n can be added to or deleted from the data base through the special f u n c t i o n s add and del. 
1        add's main f u n c t i o n is to create new inf o r m a t i o n w i t h a graph as context. for example  the f u n c t i o n c a l l add  $x  left   far   w   w i l l create enough new edges and nodes to make the p a t t e r n match of 	i t s 	argument 	against 	the data base s u c c e s s f u l . 	in the process  a 	 node  value w i l l be assigned to 	w . 	add w i l l also perforin a simple consistency - redundancy t e s t f o r each new edge attached to a node  w i t h respect 	to the edge l i s t 	of that 	node. 	thus an i n t r a n s i t i v e edge labeled type house w i l l 
not be added to the edge l i s t of a node which already contains an edge l a b e l e d type h1use tall because it is redundant. 
	an example of a del f u n c t i o n c a l l 	is 
　　　　　　del   x  left  -$y  rtght    where the s p e c i a l operator 	' - ' 	s p e c i f i e s that the node or edge 	it operates on must be 
d e l e t e d . for t h i s f u n c t i o n c a l l   a p a t t e r n match takes place f i r s t   and if unsuccessful the c a l l f a i l s ; otherwise the node $y is deleted along w i t h a l l the edges that point  to or away from i t . 
	l.pak 	also 	o f f e r s 	snobol 	t a b l e s 	and 
arrays as means 	for r e p r e s e n t i n g 	in f o r m a t i o n . moreover  	as 	in snobol  	the user can define his 	own data t y p e s . 	e x p l i c i t 	l i s t 	f a c i l i t i e s using cons  car and cdr and l i s t n o t a t i o n are 
p r o v i ded. 	express ions such as 
　　　　　　　　$l =  $a  $b  $c  $d  may be used to c o n s t r u c t l i s t s ; here the value of l is a four element l i s t . 
1- 	program s t r u c t u r e and control 
	l.pak 	statements 	are 	s i m i l a r 	to 	t h e i r 
snobol cousins. 	for example  	the statement 
 a: del  $x   left    -  r1giitjvb1ye     :s a f b  is l a b e l e d a   and w i l l attempt to d e l e t e the 
edge whose l a b e l matched r1ght ab1ve  if the p a t t e r n match of  $x  left   r cht above   against the data base succeeds. if the del funct ion c a l l succeeds  c o n t r o l is passed back to a   otherwise c o n t r o l is passed to the statement labeled b . 
       each l.pak statement w i l l succeed or f a i l and t h i s can be used f o r program c o n t r o l . unless otherwise s p e c i f i e d   c o n t r o l w i l l pass t o the next statement of a l.pak program. thus 
b a c k t r a c k i n g as encountered in planner and qa1 is only o f f e r e d during graph p a t t e r n matching 
in 	l.pak. 	a 	d i f f e r e n t 	k i n d 	of 	b a c k t r a c k i n g 
w i l l 	be discussed 	l a t e r . 
1 . 	function requesjts  
1 . 1 . 	e x p l i c i t f u n c t i o n requests 
	l.pak 	f u n c t i o n s 	can 	be 	d e f i n e d 	through 
pdefine. 	for example  	the statement 
pdefine new x:node null y:property|pattern   z  
w w1 new  
defines a f u n c t i o n named new w i t h three formal 
parameters; 	the f i r s t must be of type node or have as value the n u l l s t r i n g   	the second of type property or pattern  w h i l e 	the t h i r d is c a l l e d by r e s u l t . 	thus the statement new $x1 $y1 $z1  w i l l 	f a i l even before new is c a l l e d because the t h i r d argument 	is not 	c a l l e d by r e s u l t   
w h i l e 
　　　　　　　　　　new $x1 $y1  z1  w i l l proceed w i t h the execution of the f u n c t i o n c a l l if $x1 is a node or the n u l l s t r i n g   and $y1 is a p r o p e r t y or a  graph  p a t t e r n . 
       the s p e c i f i c a t i o n of a l l o w a b l e types f o r each formal parameter does not mean that the type of f u n c t i o n arguments is f i x e d i n s i d e a f u n c t i o n c a l l ; i t only helps t o check whether the f u n c t i o n request makes sense. 
       the same f u n c t i o n name may be used inside several pdefine c a l l s   thus g i v i n g the same 
name to several d i f f e r e n t f u n c t i o n s . this means that a statement such as 
　　　　　　　　　　new $x1 $y1  z  may cause several f u n c t i o n c a l l s u n t i   one is found t h a t succeeds. in f a c t   the f u n c t i o n 
name s p e c i f i e d by 	a 	f u n c t i o n request 	in 	l.pak 
can be a s t r i n g p a t t e r n   as in 
                    t1i|ax   $x $y  z  which w i l l cause the c a l l of any f u n c t i o n whose name matches the s t r i n g p a t t e r n  thjax    i . e .   begins w i t h th or ax  and whose parameter d e s c r i p t i o n is matched by the arguments of the f u n c t i o n r e q u e s t . 
　　　this f e a t u r e o f f e r s the user f l e x i b i l i t y in s p e c i f y i n g a f u n c t i o n request s i m i l a r to 
that o f f e r e d by theorem provers where each axiom can be considered as a f u n c t i o n w i t h o u t a name to be c a l l e d whenever there is a susp i c i o n that it may be of use. 
       unlike snobol  l.pak t r e a t s f i e l d d e s i g nators of programmer-defined data t y p e s   array 