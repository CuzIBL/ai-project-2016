 
　　　for solving search problems in ai f i e l d   multi-process description is more elegant than the backtracking/coroutine description  from the standpoint of f l e x i b l e search  high modularity and simple program s t r u c t u r e . we propose the language s p e c i f i c a t i o n of concurrent lisp  which is a concurrent programming language based on lisp. we have implemented i t s i n t e r p r e t e r on a large scale computer. we are working at the implementation of i t s i n t e r p r e t e r on multi-micro-processor system to r e a l i z e further e f f i c i e n t execution  
	1 	introduction 
　　　this paper proposes a new concurrent programming language  concurrent lisp  and a multi-microprocessor system for i t . we have developed concurrent lisp for the purpose of applying multiprocessing mechanism to ai programs  
　　　lisp is the most popular language used for ai applications. many ai systems are written in lisp. several ai languages have been developed on the basis of lisp  such as planner  conniver and s1 on. these languages have b u i l t - i n f a c i l i t i e s of backtracking and coroutines for f l e x i b l e and e f f i c i e n t searching to solve problems. however  these f a c i l i t i e s have disadvantages; backtracking is too r e s t r i c t i v e because an abandoned path on a search tree can not be re-searched  and coroutines may be complicated due to transfer of control among coroutines. 
　　　multi-process f a c i l i t i e s are considered to be better for solving search problems than backtracking/coroutine f a c i l i t i e s   from the standpoint of f l e x i b l e search  high modularity and simple program s t r u c t u r e . multi-process mechanism may be implemented in the environments of p a r a l l e l processing to provide great computation power for ai problems. these facts have led us to design a new lisp with multi-process mechanism called concurrent lisp and a multi-micro-processor system for i t . 
ii multiprocessing for ai 
a. backtracking  coroutines and multiprocessing 
　　　backtracking i1 a conventional technique for problem s o l v i n g   i . e . t r i a l and error method  many lisp systems have backtracking f a c i l i t i e s 1uch as fail and failset operation* in general  backtrackkiyoshi agusa* and yutaka ohno* 
** educational center for information processing 
	kyoto 	university 
kyoto  1 japan 
ing is expensive and r e s t r i c t i v e since it follows depth f i r s t search method and an abandoned path on a search tree can not be re-searched. coroutine f a c i l i t i e s provided in several lisp systems are convenient for selecting a path which is l i k e l y to reach a goal. several ai systems perform t h e i r tasks e f f i c i e n t l y by using coroutine f a c i l i t i e s with a scheduling table called agenda* a disadvantage of coroutines is that control transfer among coroutines makes program structure complicated. multi-process f a c i l i t i e s provide us higher modul a r i t y of control structure than coroutine ones. comparison of coroutine f a c i l i t i e s with m u l t i - p r o c ess f a c i l i t i e s on a simple example is presented: 
　　　 we assume that there is a search t r e e . each path on a tree is allocated to a search process. each search process goes along i t s given path u n t i l it finds a goal or a boundary. when . a l l search processes f i n d the boundary  then the best n search processes are to be selected to continue searching forward. thi1 a c t i v i t y repeats u n t i l a process finds the g o a l .   
　　　fig.1 shows the outlines of both a m u l t i process program and a coroutine program for the search problem. there are two types of process  monitor process and search process. in the case of the multi-process program   f i g . 1   a       every search process proceeds concurrently along t h e i r given paths  then they reach a boundary or a goal where they communicate with the monitor process via shared variables or messages. there is no need to write operations for transfer of control between processes. thus  each process is dedicated to i t s own task. 
　　　in the case of a coroutine program   f i g . 1 b    on the other hand  search coroutines and the monitor coroutine communicate with each other by means of resume operation. the monitor coroutine selects a search coroutine according to the agenda and resumes the execution of the selected coroutine. the selected search coroutine searches i t s given path u n t i l it finds the boundary or the goal  then it resumes the execution of the monitor coroutine. therefore  each coroutine must keep track of not only i t s own task  but also the next coroutine whose execution is to be resumed* 
b. models and multi-process programs 
　　　from the viewpoint of programming  f i r s t we usually build models for given problems and then we 

1 

derive programs from the models. since models usually consist of many components  we must c l a r i f y what are components  what the components do and what relations exist among the components. if the components are activated s e q u e n t i a l l y   a component may be implemented as a subroutine. if the components coexist with others  a component may be implemented as a coroutine or a process in a multi-process system. in ai f i e l d   several modeling principles have been used widely  e*g. production systems  actors and so on. to derive programs from models b u i l t with those p r i n c i p l e s   multi-process description is more elegant than the convetional description techniques because of the modularity of programs and the a d a p t a b i l i t y for p a r a l l e l processing. 
	i l l 	concurrent lisp 
a. outline 
　　　concurrent lisp is a concurrent programming language baaed on lisp. it is designed without changing the o r i g i n a l language features of lisp* for example   1  l i t e r a l atoms are unique   1  functional notation is preserved   1  dynamic binding strategy is used and so on. 
　　　the current version of concurrent lisp follows lisp 1. in addition to the ordinary lisp funct i o n s   concurrent lisp has three p r i m i t i v e concurrent functions and special functions to manipulate data attached to processes. the three p r i m i t i v e functions are starteval for process a c t i v a t i o n   cr 
  c r i t i c a l region 	function  	and 	ccr 	 conditional c r i t i c a l region function  	for 	mutual exclusion* 
b. process 
　　　a multi-process system w r i t t e n in concurrent lisp is a set of many cooperating sequential processes  each of which evaluates i t s given form. 
we define a  process  in concurrent lisp as f o l l o w s :  a process is an e n t i t y which evaluates a form s e l f - c o n t a i n e d l y .   
　　　the process called the main process is activated when evaluation of a t o p - l e v e l doublet  a kind of form  s t a r t s . a non-main process is activated when the process a c t i v a t i o n function starteval is executed* we define several properties of a process as f o l l o w s : 
1  a process is activated by i t s parent process except for the main process. the main process is activated in the i n t e r p r e t i n g loop  1  a process terminates when it finishes evaluation of the given form or i t s parent terminates. the value of the form evaluated by the process is called  process value  of the process. 
1  i n i t i a l environments of a process is the environments of i t s parent process when the parent executes starteval* 
1  every process has a unique number given by the i n t e r p r e t e r and i t s own name for user's convenience* in p a r t i c u l a r   the main process has name  main  and number 1. 
　　　the process a c t i v a t i o n function starteval is defined below. 
starteval proc 1;proc1;   ;procn  proci = l i s t   n a m e i ; f o r m i     namei = name of i ' t h son process  formi = form to be evaluated by i ' t h son process. when a process executes starteval  the process activates n son processes. each son process has i t s own name specified by name and evaluates form. the value of starteval is a l i s t of names of son 
processes; s t a r t e v a l   p r o c i ; p r o c 1 ;     ;procn  
　　　　　　　　= list namei;name1;   ;namen   name must be a form whose value is a l i t e r a l atom. 
form may be any type of form  a constant  a variable or an expression * when form is an expression  by the parent process actual parameters 


1 

are processed according to the function type of car form   and passed to the newly created process* the following form means activation of two processes  p and q  which evaluate forms  f x  and  g y  respectively. 
 starteval  'p  f x    'q  g y    
　　　recursive activation of processes is permitted* the following example shows a function for computing factorial using recursive process activation. 
 fact  lambda  n  
 cond   zerop n  1  
 t   lambda  x  
 times n  ccr  termp x   procval x     
 car  starteval 
  gensym   fact  sub1 n             
　　　data area used by processes is classified into two types  static and dynamic data area. property lists and process control blocks are static  and association lists and variable area allocated on control stacks are dynamic. data stored in the static area may be used by all processes. for example  bodies of functions are stored on property lists and used by all processes. data stored in the dynamic area are possessed by each process. for example  a lambda variable bound in a function is allocated in the environments of the process which executes the function* more than 
one process can use concurrently the same function  which may be either built-in or defined function  because variables bound in the function are possessed by each process. 
　　　concurrent lisp has functions to manipulate data attached to processes  e.g. process names  process values and so on. they are called process data manipulation functions and listed in table 1. 
c. mutual exclusion among processes 
　　　concurrent programming languages need to provide facilities for mutual exclusion to avoid illegal interaction among processes. concurrent lisp has two primitive functions  cr and ccr  which are shown below. the idea of cr and ccr is originated from  and modified to be adapted to the environments of lisp* 
　　　the facilities to express process synchronization and interprocess communication are the most important facilities for concurrent programming languages* the two functions  cr and ccr  have enough power to express process interactions  such as p- and v- operator  hoare's monitor  serializer and guarded command* moreover  their functional notation strictly follows the original language features of lisp* the functions cr and ccr are defined below* 
cr form  
a process evaluates form with the exclusive rights to access the data area shared among processes* during evaluation of form the process keeps the rights except while it awaits the holding a certain condition in form.  such wait condition may appear in ccr*  while the process has the rights  a l l other processes are in suspended state. the value of cr form  is the value of form; 
cr form  = form. 
ccr condition;form  
a process waits until condition is neither nil nor f  and evaluates form with the exclusive rights to access the data area shared among processes.  condition means wait condition for the process to synchronize with other processes.  pseudo-functions must not appear in condition. during evaluation of form  the process keeps the rights except while it awaits the holding a certain condition in form. the value of ccr condition;form  is the value of form; ccr condition;form  = form* 
nesting of cr and ccr is allowed. wait during evaluation of cr or ccr occurs due to the nested ccr. 
　　　the following example shows interprocess communication using cr and ccr* 
example: process q waits until a variable x becomes 
nil and evaluates a form  f arg . x is assumed to be shared between process p and q. 
	 cr  setq x nil   	- process p 
	 ccr  null x   f arg   	- process q 
d. interprocess communication 
	concurrent lisp 	provides following objects to 
table 1 functions to manipulate data on pcb's 
1  functions which give a truth value according to a process state 
termp p : 	if a specified process  	p  	has already terminated then the value is t else nil. 
waitp p : if a specified process  p  is waiting then the value is t else nil. asonterm p   osonterm p : if a l l or at least one of son processes of a specified process  p  have terminated then the value is t else nil. 
asonwait p   osonterm p : if all or at least one of son processes of a specified process are waiting then the value is t else nil. 
1  functions which give a process number or a process name 
s e l f       parent p   firstson p   brother p : these functions return a process number of itself  a 
parent  a first son  or the next younger brother. 
sonlist p : this function returns a list of son process names of a process p. procname p   procnum p : this function returns a 
　process name or number of a specified process. 1  functions which give process value s  procval p : this function returns a process value of a specified process* 
sonnval p : this function returns a process value list of son processes specified process. 1  functions used for mailing between processes mail mes;p : this function appends the value of cons self;raes  to the contents of the mailbox of a process p* the value of this function is mes. 
recmail: this function returns t if the mailbox of the concerned process is not empty else nil. 
getraail: this function returns contents of the mailbox of a concerned process. after execution of this function  the mail box is cleared. 

1 

express process synchronization and interprocess communication. using these objects coupled with cr and ccr p r i m i t i v e s   we can easily construct functions for interprocess communication. 
　tion  garbage collection and so on . interpreter processor  ipi : a process operates on ipi to which it is allocated by the main os. 
i/o processor  iop : iop performs i/o operation. 

1  shared variable 
environments of a parent process can be shared among 1on processes. son processes can refer free variables bound in the environments of t h e i r parent process. the example in i i i . c . shows interprocess communication via a shared variable. shared variables are useful for communication in a family of processes. 
1  property 	l i s t 
in ordinary lisp  property l i s t s of l i t e r a l atoms are used frequently as s t a t i c data area. in concurrent lisp  property l i s t s are used as s t a t i c data area and are shared among a l l processes. 
1  mailing 	function 
concurrent lisp has functions called mailing functions for direct message passing between processes. in order to realize mailing functions  we have provided a  mailbox  f i e l d in a process control block  peb . see table 1. example: process p send1 a message  ok  to process q  and q receives i t . 
	 cr  mail 'ok 'q   	- process p 
　　 ccr  recmail   setq buf  getmail    - process q e. concurrent lisp interpreter 
　　　the concurrent lisp i n t e r p r e t e r executes a program written in concurrent lisp. the i n t e r p r e t e r repeats the following a c t i v i t y  called i n t e r p r e t i n g loop : 
1  to read a t o p - l e v e l doublet  
1  to evaluate the doublet  and 
1  to print out the process values* 
　　　the main process is activated and terminates at the second phase of the a c t i v i t y . during the l i f e of the main process  i t s descendant processes are activated and terminate. 
the followings are major components  
1  process control block l i s t   
1  control 	stack  
1  association l i s t   
1  property 	l i s t   
1  schedule module  and 1  interpret module. 
　　　we have implemented the i n t e r p r e t e r on facom m-1 with pl/i  about 1 l i n e s     1   . the current version has 1 b u i l t - i n functions. 
	iv multi-micro-processor 	system 
　　　for r e a l i z a t i o n of further e f f i c i e n t program execution of concurrent lisp  we are working at implementation of i t s i n t e r p r e t e r on a m u l t i - m i c r o processor system.. the overview of the system is shown in f i g . 1 . 
  	processors 
master processor  mp : the main os on mp performs process management  processor management  i/o management and memory management  stack a l l o c a -
* memory 
pcb area: pcb 's are 1tored on this area. 
list area: list cells are stored on this area. 
random access  ra  area: area for literal atoms  numerals  arrays  strings and so on. 
stack area: area for control stacks of processes. 
a separate memory should be provided for each of the above data areas in order to solve the bus bottleneck between common memory and multiprocessors and to increase the maximum number of ip's installed. since  in concurrent lisp programs  there may be many small processes activated  the system is designed to accept about a thousand processes. 
we select 1-bit micro-processor mc1 for mp and 
ip's. in   which reports performance of lisp systems in japan  the ratio of 1 was reported in the performance of a 1-bit micro-processor lisp machine to lisp interpreter on a large scale computer. on the other hand  the range of ratio of performance of 1 and the 1-bit micro-processor is about 1-1. we expect our system consisting of ten 1's will have equal performance to lisp system on a large scale computer. 
* language 
the specification of concurrent lisp is slightly modified in order to be adapted to the multi-micro-processor system environment. the major modification is that cr and ccr primitive on a multi-micro-processor system will have the form: 
cr  shared object;form   and ccr shared object;condition;form . 
the number of processes running on ip's increases by this modification  since critical region is divided into several disjoint regions using shared object parameter. this modification imposes restriction on use of list replacement functions  i.e. rplaca and rplacd; these are to be eliminated from the set of functions available for users. 


1 

 main 	 lambda 	 data  	 prog 	   	  	data - t h e i n i t . b o a r d   b r d   . 
	 csetq end nil  	  end used as a f l a g . 
 csetq. names  list  mk pr name data      ; names - l i s t   of names of s e a r c h processes   s p ' s   . 
	 starteval 	 'monit 	 monitor    	; 	a c t i v a t e monit. 
	 put 	 car names  	'process 	'process  	; 	mark the b r d . 
	 starteval 	  car names  	 search 	 list data  	1       	; a c t v . 	sp. 
	 ccr 	 termp 	'monit  	 progn 	; w a i t u n t i l monit t e r m i n a t e s . 
	 csetq end t  	; 	set end f l a g . 
	 ccr 	 asonterm 	      	; 	w a i t u n t i l 	a l l 	sp's 	t e r m i n a t e . 
	 return 	 car 	 eval 	 procval 	'monit            
  	: 	r e t u r n brd s e q . 	from i n i t i a l t o g o a l . 
 monitor  lambda 	   
	 cr  while 	t 	: 	do f o r e v e r 
 progn 
 ccr  eval  cons 'and  mapcar names ' w a i t p           ; wait u n t i l a l l sp's w a i t . 
	 cond   eq 	 sort score  	'goal  	; 	goal has been found  
	 terminate 	 car names    	; 	return p r o c . 	name. 
	 cond 	  greaterp 	 length names  	1  	; 	more than 1 p r o c ' s   
	 csetq depth 	 plus depth delta   	; change boundary. 
 mapcar  list  car names  cadr names  caddr names   ' lambda  x   mail 'cont x         ; resume. 
	 t 	 csetq depth 	 plus depth delta   	; 	change boundary. 
　　　　　　　 mapcar names ' lambda  x   mail 'cont x            ccr  not  waitp  car names    n i l     ; s y n c h r o n i z a t i o n . 
 search  lambda  bd dpt   progn ; bd - brd s e q .   dpt - d e p t h .  cset  procname  self    cons bd  eval bd  car b d         : process name has c o n s   b r d s e q . ; s c o r e of b r d   . 
 cond   eq  cdr  eval  procname   s e l f             dpt  ; goal   cr  cond   lessp dpt depth  csetq depth dpt     
	j 	change b o u n d a r y . 
	 cr  cset 	 procname 	 self   	; 	set s c o r e . 
	 cons 	 car  eval  procname 	 self           	1       
 ccr  and end  asonterm          delete     ; w a i t u n t i l main t e r m i n a t e s . 
	  greaterp dpt depth  	; boundary  
	 ccr 	 or 	 recmail  	end  	; 	wait u n t i l resumed or end. 
	 cond 	  recmail  	 getmail    	; 	resumed. 
	 t 	 ccr  asonterm 	    	 delete      	; 	end. 
　　 search1 bd  add1 dpt   	  	; continue s e a r c h i n g .  t 	 search1 bd  addl dpt   	  	; c o n t i n u e s e a r c h i n g . 
 search1  lambda  bd dpt   prog  temp ntemp   setq temp  expand  car bd    ; get n e x t b r d ' s . 
	 make pr 	 cdr temp   	; 	a c t i v a t e sp's 	f o r new b r d ' s . 
	 setq ntemp 	 mk pr name 	 car temp    	; 	next brd v i s i t e d   
 cond   is proc ntemp   halt   ; if v i s i t e d then h a l t e l s e  t  put ntemp 'process 'process    ; mark the b o a r d .  search  cons  car temp  car  eval  procname   s e l f               dpt  
  	; 	search f o r w a r d . 
 maxe pr 	 lambda 	 x  	 prog 	 bdlist  
	 setq bdlist 	 car  eval 	 procname 	  s e l f               	; get brd s e q . 
	 mapcar x 	' lambda 	 x  	 create pr 	 cons 	 cons x bdlist  	dpt  
 create pr  lambda  x   prog  temp  : a c t i v a t e new s p ' s .  setq temp  mk pr name  caar x       ; c u r r e n t brd has been  cond   cr  is proc temp    return         ; v i s i t e d   
	 t 	 cr  progn 	 csetq names 	 cons temp names   
	 put temp 'process 	'process  	; a c t i v a t e sp. 
	 starteval 	 temp 	 search 	 car x  cdr x           
 delete 	 lambda 	   	; 	t e r m i n a t e sp. 	p r o c . 	v a l . - brd s e q . 
	 terminate  car  evai.  procname   s e l f           	  	  	  	  
 halt 	 lambda 	   	 progn 	: 	h a l t s e a r c h i n g . 
	 cr  cset 	 procname 	 self   	; 	wait u n t i l 	end of e x e c u t i o n   
	 cons 	 car 	 eval 	 procname 	  s e l f             	max   
	 ccr  and end 	 asonterm 	        	 delete    	; 	return brd s e q . 
notes: l i t e r a l atoms and a u x i l i a r y functions whose d e f i n i t i o n s are absent in the t e x t . 
max - maximum integer. depth = depth of boundary. 
delta - depth new  	- depth old . 
mk pr name  data  makes search process names  sort score sorts and tests scores of sp's. eval  bd  brd  evaluates brd and returns the score  expand brd  expands brd and returns next brd l i s t . is proc name  tests whether name exists or not. 
v example 
       an example program for 1-puzzle is presented. the board of 1-puzzle is represented as a l i s t of integer  fig.1 shows the main part of the program to solve the puzzle. the strategy used in t h i s example follows the search model shown in i i . a * during execution of the program  there exist main process  monit process and search processes. the main process activates monit process and the search process which examines the i n i t i a l boardmonit process monitors the search processes. when a l l search processes reach the boundary  monit selects three processes  which are most l i k e l y to reach the goal. from t h e i r boards given by t h e i r parent process  search processes s t a r t searching. a search process examines a board  expands it and activates i t s sons. fig.1 and fig 1 show the results of the program execution and r e l a t i o n s 
among processes respectively. 
vi concluding remarks 
　　　multi-process description mechanism is more elegant than the conventional description mechanisms  such as backtracking and coroutine descript i o n . since lisp is a  common language  in ai f i e l d in a sense  we consider  it is necessary to i n t r o duce lisp-based concurrent programming languages which do not change the o r i g i n a l language features of lisp such as functional notation and s i m p l i c i t y * 

search process names  #1 e t c .   are determined according to t h e i r given boards. both depth and delta are i n i t i a l i z e d to have 1 as their contents. 

fig.1 	the 1-puzzle program 	fig.1 results of execution of the example program 
1 

from t h i s standpoint  concurrent lisp is designed. therefore  i t s sequential part is compatible with sequential lisp and i t s concurrent part allows f l e x i b l e multi-process d e s c r i p t i o n . also we can write easily such programs in concurrent lisp as those which have s i m i l a r control structure to backtracking  coroutines  generators and so on. 
　　　a few researches on multiprocessing were proposed at 1 lisp conference  1 . in   1     a pseudo-multiprocessing system implemented on o r dinary lisp is described. in   1     a parameter passing mechanism which has p a r a l l e l i s m is described. in   1     a pseudo-multiprocessing system using continuation mechanism of scheme is described. however  they do not s a t i s f y our requirements for concurrent programming languages based on lisp. 
　　　　we have applied concurrent lisp to make an i n t e r p r e t e r of an actor-based language including the message passing mechanism of plasma. the length of the i n t e r p r e t e r is 1 l i n e s . thus  concurrent lisp can be used not only as a programming language but also as an e f f e c t i v e host language for special purpose languages. 
　　　multi-processor systems are becoming popular with the progress of micro-processors. the a r c h i tecture of our multi-micro-processor system using general purpose micro-processors saves man-power for design  construction and maintenance. 
　　　concurrent lisp on a multi-processor system w i l l work s u f f i c i e n t l y well as a self-contained programming language and as a host language for special purpose languages. 
acknowledgments 
	we thank 	dr. k. i t o h   	research associate of 
sophia university  and mr. t. masaki  b.e. of kyoto 
university  for t h e i r useful discussions and important contributions to t h i s paper. 
