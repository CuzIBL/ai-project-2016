
we propose new methods of preference elicitation for constraint-based optimization problems based on the use of minimax regret. specifically  we assume a constraintbased optimization problem  e.g.  product configuration  in which the objective function  e.g.  consumer preferences  are unknown or imprecisely specified. assuming a graphical utility model  we describe several elicitation strategies that require the user to answer only binary  bound  queries on the utility model parameters. while a theoretically motivated algorithm can provably reduce regret quickly  in terms of number of queries   we demonstrate that  in practice  heuristic strategies perform much better  and are able to find optimal  or near-optimal  configurations with far fewer queries.
1 introduction
the development of automated decision software is a key focus within decision analysis  1; 1  and ai  1; 1 . to deal with different users  some form of preference elicitation must be undertaken in order to capture specific user preferences to a sufficient degree to allow an  approximately  optimal decision to be taken. in this work  we study the problem of preference elicitation in constraint-based optimization  cbo . cbo provides a natural framework for specifying and solving many decision problems  such as configuration tasks   in which hard constraints capture options available to a customer and an objective  or utility  function reflects customer preferences. explicit formulation as a mathematical program or using a soft constraint framework  1; 1  has been successfully used to model such problems.
　unfortunately  the requirement of complete utility information demanded by cbo is often problematic. for instance  users may have neither the ability nor the patience to provide full utility information to a system. furthermore  in many if not most instances  an optimal decision  or some approximation thereof  can be determined with a very partial specification of the user's utility function. as such  it is imperative that preference elicitation procedures be designed that focus on the relevant aspects of the problem  e.g.  by ignoring infeasible parts of utility space  or utility for outcomes provably dominated given current information .
　our framework is as follows. we assume a set of  hard  constraints together with a graphical utility model  1; 1  capturing user preferences. while the structure of the utility model is known  the parameters of this utility model are imprecise  given by upper and lower bounds. adopting the minimax regret model of   a robust decision can be made with respect to this utility uncertainty  by choosing the minimax optimal configuration. this is the solution the user would regret the least should an adversary impose a utility function consistent with our knowledge of the user's preferences. if regret is unacceptably high  we query the user for more information about their preferences  until the worst-case error  regret  is small enough  zero if optimality is required . in this work  we elicit preferences using bound queries  a local form of standard gamble queries  -that provide tighter upper or lower bounds on the utility parameters- since these are reasonably easy for users to assess and have been studied extensively in the decision analysis literature. we develop several new strategies for elicitation using bound queries whose aim is to reduce the worst-case error  i.e.  get guaranteed improvement in decision quality  with as few queries as possible. these include strategies with good theoretical guarantees  related to polyhedral methods in conjoint analysis  1; 1    as well as several heuristic methods that perform better empirically. we also show that one of these strategies is largely unaffected by computational approximation of the required minimax solutions.
1 problem formulation
we assume some system is charged with making or recommending a decision on behalf of a user  for example  configuring a  multiattribute  product for a consumer  e.g.  the choice of a car and options . however  since user preferences vary  an appropriate configuration requires that the system interact with the user to determine enough about her preferences over feasible alternatives to make a good  or possibly optimal  choice. thus  the system must engage in some form of preference elicitation. this basic problem lies at the heart of considerable work in multiattribute utility theory  1; 1; 1  and the theory of consumer choice  such as conjoint analysis  1; 1  . our approach differs from classic approaches in several important respects  as we emphasize below. most importantly  our decision model and elicitation strategies will be driven by the minimax regret criterion. to present our results  we first need to review previous work on minimax regret and the framework of  in more detail.
1 optimization with graphical utility models
following   we assume a finite set of attributes x = {x1 x1 ... xn} with finite domains  characterizing a set of choices available to a decision maker  or consequences thereof . these might be  say  car options such as make  engine size  transmission type  etc. an assignment x （ dom x  is often referred to as a state. for ease of presentation  we assume attributes are boolean. we also have a set of hard constraints c over these attributes. each constraint c`  ` = 1 ... l  is defined over a subset of attributes x `    x  and thus induces a set of legal configurationsof attributes in the subset x `   e.g.  the set of products that can be proposed . we assume that the constraints c` are represented in some logical form and can be expressed compactly  e.g.  x1 … x1    x1 . for instance  we might have that model
passat and engine 1t do not allow transmission 1speedman. we let feas x  denote the subset of feasible states satisfying c.
　suppose the system had access to the user's utility function u : dom x  ★ r  representing a user's strength of preference for various configurations  e.g.  we might view this as what they are willing to pay . the constraint-based optimization  cbo  problem is to find an optimal feasible state x : x  （ arg	max	u x .
x（feas x 
for multiattribute problems of this type  one generally assumes some utility function structure  1; 1 . in this work  we adopt a generalized additive independence  gai  model  1; 1 . specifically  we assume that the utility function can be written as the sum of k local utility functions  or factors  over small sets of variables:
	.	 1 
here each function fk depends only on a local family of attributes x k    x. we denote by x k  the restriction of state x to the attributes in x k . this model is attractive due to its naturalness and generality  encompassing both linear models  and ucp-nets  as special cases . the problem of finding an optimal configuration can be formulated as an integer program  ip   and can often be solved very effectively.
1 minimax regret
while many approaches to elicitation focus on obtaining full utility information  it will often be infeasible  undesirable  or unnecessary to extract a complete utility function from the user . as a consequence  a system must make decisions in the face of incompletely specified utility functions. several approaches have been proposed for representing utility uncertainty  as well as making decisions given this uncertainty. for example  bayesian methods quantify uncertainty about preferences probabilistically  1; 1 . other techniques simply pose constraints on the set of possible utility functions and use various criteria to find or reduce the set of decisions or otherwise direct elicitation; for example  one can identify pareto optimal  or dominant alternatives  1; 1; 1   or decisions that minimize regret  1; 1; 1; 1 .
　in this paper we adopt the minimax regret criterion  following the formulation of . unlike bayesian methods  minimax regret recommends decisions given only a set of possible utility functions rather than a probabilistic prior. thus it is suitable when reasonable priors are hard to formulate and does not require the computational approximations often needed in reasoning with complex priors  1; 1 . minimax regret also allows recommendation of decisions that are robust in the face of utility function uncertainty since it provides tight bounds on the worst-case error  which is appealing in many circumstances  and unlike many schemes proffers a specific decision rather than  say  a pareto optimal set . previously this has been found to be an attractive criterion in real-world procurement settings . as we will see  regret is also very effective in focusing elicitation effort even when priors are available .
　suppose the utility function for a cbo problem is unknown  but constraints on its parameters  e.g.  in the form of bounds  are available and some decision must be recommended.1 the minimax regret decision criterion suggests that one adopt the  feasible  assignment x that obtains minimum max-regret  where max-regret is the largest quantity by which one could  regret  choosing x  while allowing the utility function to vary within the bounds . more formally  let u denote the set of feasible utility functions. we refer to a pair hc ui  where c is a set of configuration constraints  as an imprecise cbo problem. the pairwise regret of state x with respect to x1 over feasible utility set u is defined as
	 	 1 
which is the most our system could regret choosing x for the user instead of x1  e.g.  if an adversary could impose any utility function in u . the maximum regret of decision x is:
	mr	 1 
the minimax regret of feasible utility set u is:
	mmr u 	=	min	mr x u 	 1 
x（feas x 
if the only information we have about a user's utility function is that it lies in the set u  then a minimax-optimal decision x 
 i.e.  x  s.t. mr mmr u   minimizes the worstcase loss w.r.t. possible realizations of utility u （ u.
　computation of minimax regret in cbo problems requires care; the explicit minimization in eq. 1 is infeasible. fortunately  one can formulate it in a manner that exploits the graphical structure of the utility model  thereby admitting  in practice  computationally tractable solution . the procedure of  assumes an imprecise cbo problem with factors fk  k ＋ k  defined over local families x k . the parameters of this utility function are denoted by ux k  = fk x k    where x k  rangesoverdom x k  . upper and lower bounds on each of these parameters are assumed  denoted by ux k ● and ux k ◎  respectively. effective computation of pairwise regret  max regret and minimax regret is possible by exploiting structure in the constraints and graphical utility model.
input: imprecise cbo problem  worst-case error tolerance τ.
1. compute minimax regret value mmr
1. repeat until mmr  τ
 a  ask bound query q about some utility parameter u x k  .
 b  if u x k   ＋q then lower ux k ● to q.
 c  otherwise raise ux k ◎ to q
 d  recompute mmr
table 1: general form of the interactive elicitation procedure.
　in particular  the minimax optimization in eq. 1 is rewritten as as minimization with an infinite number of constraints. a constraint generation procedure is used to generate constraints incrementally until all  finitely many  active constraints are enumerated. the mixed integer programs  mips  required to solve both the main minimization and the generation of the most violated constraint are compact  with a number of variables linear in the size  number of parameters  of the gai model. an important property of this procedure is that it generates both an optimal solution x  and an adversarial witness xw for the current u: xw is the assignment that the maximizes regret of x  in eq. 1  as the x1 variable in eq. 1 . we refer to  for further algorithm details. the procedure was shown to handle significant practical problems  generally generating very few constraints  with solution times ranging from fractions of a second to 1 seconds .
　in practice  since minimax regret will be computed between elicitation queries  it is critical that minimax regret be estimated in a relatively short period of time  say 1 seconds . for this reason  we propose several improvements to the procedure of  that can speed up regret computation with elicitation in mind:  1  the constraint generation procedure for solving the mip can be accelerated by simply finding a feasible x given the currentset of constraints  rather than explicitly searching for a minimax optimal x given current constraints.  1  since minimax regret is computed incrementally by generating constraints  it has an anytime nature and early stopping can be used. this has the effect that some violated constraints may not have been generated  but the  early  solution provides a lower bound on true minimax regret. we can also compute an upper bound by computing the max regret of the x found for the last mip solved. these bounds are often tight enough to provide good elicitation guidance.  1  the minimax regret problem solved after receiving a response to one query is very similar to that solved before posing the query. as such  one can  seed  the minimax procedureinvoked after a query with the constraints generated at the previous step. in this way  typically  only a few extra constraints are generated during each minimax computation.
while we focus on the use of upper and lower bounds
on utility parameters  the procedures described here can be adapted to problemswith arbitrary linear constraints overutility parameters. handling such constraints is important when comparison queries are used  see below . with this background in place  we can now turn to elicitation.
1 elicitation strategies
we consider an interactive process in which the decision software queries the user for information about her utility function  refining initial bounds on the parameters  until minimax regret reaches an acceptable level τ.1 table 1 summarizes the general form of the interactive elicitation procedure.
1 bound queries
the types of queries we consider are bound queries in which we ask the user whether one of her utility parameters lies above a certain value. a positive response raises the lower bound on that parameter  while a negative response lowers the upper bound: in both cases  uncertainty is reduced.1
　while users often have difficulty assessing numerical parameters  they are typically better at comparingoutcomes 1; 1 . however  a bound query can be viewed as a local form of a standard gamble query  sgq   commonly used in decision analysis; these  in fact  ask for comparisons. an sgq for a specific state x asks the user if she prefers x to a gamble in worstwhich the best outcome x  occurs with probability1   l . a positive re-l and the sponse puts a lower bound on the utility ofx〕 occurs with probability x  and a negative response puts an upper bound. calibration is attained by the use of common best and worst outcomes across all queries  and numerical assessment is restricted to evaluating probabilities . the foundations of such queries can be made precise using results of fishburn ; we defer details for space reasons  see  for more on elicitation in gai networks .1our query strategies rely on the following definitions.
defn 1 let hc ui be an imprecise cbo problem. an optimistic state xo  a pessimistic state xp  and a most uncertain state xmu are any states satisfying:
	xo （arg	max	maxu x 
x（feas x  u（u
	xp （arg	max	minu x 
x（feas x  u（u
	xmu （arg	max	max {u x    u1 x }
x（feas x  u u1（u
an optimistic state is a feasible state with the greatest upper bound on utility. a pessimistic state has the greatest lower bound on utility. a most uncertain state has the greatest difference between its upper and lower bounds. each of these states can be computed in a single optimization by setting the parameters of the utility model to their upper bounds  their lower bounds  or their difference  and solving the corresponding  precise  cbo problem.
　in this framework  the goal of an elicitation strategy is to reduce minimax regret using as few queries as possible. the challenge is to select such queries efficiently-avoiding intractabilities inherentin outcomeenumerationand lookahead  while nevertheless reducing minimax regret effectively.
1 the halve largest gap strategy
the first query strategy we consider is the halve largest gap  hlg  strategy. it asks a query at the midpoint of the largest interval  i.e.  corresponding to the parameter x k  with the largest gap between its upper and lower bounds. this is motivated by theoretical considerations based on simple worstcase bounds on minimax regret. define  respectively  the gap of a utility parameter u x k    the span of factor fk and maxspan of a utility model u as follows:1
gap x k   = ux k ●  ux k ◎ 1 span fk  =	max	gap x k  
x k （dom x k   1 	maxspan	 1 
the quantity maxspan measures the largest gap between the upper and lower utility bound  regardless of feasibility. we can show that this quantity bounds minimax regret:
proposition 1 for any hc ui  mmr u  ＋ maxspan u . since mmr u  ＋ mr xo u  and for any optimistic state xo we have mr maxspan u   the result follows.1
　this suggests an obvious query strategy  the hlg method  in which a bound query is asked of the parameter p with the largest gap  at the midway point of its interval   p●  p◎ /1. this method ensures rapid reduction in max regret:
proposition 1 let u be an uncertain utility model with n parameters and let m = maxspan u . after nlog m/ε  queries by hlg  minimax regret is no greater than ε.
in the worst case  no query strategy can reduce regret more quickly than hlg. furthermore  there are classes of utility functions for which the bound is tight  so worst-case u and configuration constraints c exist that ensure regret will never be reduced to zero in finitely many queries.1 this strategy is similar to heuristically motivated polyhedral methods in conjoint analysis used in product design and marketing  1; 1  . in fact  hlg can be viewed as a special case of the method of  in which our polyhedra are hyper-rectangles.
1 the current solution strategy
while hlg allows one to provide strong worst-case guarantees on regret improvement  it is  undirected  in that considerations of feasibility play no role in determining which queries to ask. an alternative strategy is to focus attention on parameters that participate in defining the max regret  namely  the minimax optimal x  and the adversarial witness xw for the current u  recall that the witness maximizes the regret of x  . the current solution  cs  query strategy asks about

and1pwe denote the upper and lower bounds of any parameter◎ respectively.	p by p●
　　the definition of maxspan can be tightened to account for logical consistency of the assignments to different factors  or by restricting attention to feasible states  w.r.t.1	c . the result still holds.
　　the bound is not generally tight if there is overlap in factors; but is tight if maxspan accounts for logical consistency.
the utility parameter in the set {x  k  : k ＋ k}“{xw k  : k ＋ k} with largest gap x k   and queries the midpoint of the corresponding utility interval. intuitively  should the answer to a query raise the lower bound on some u x  k   or lower the upper bound on some u xw k    then the pairwise regret will be reduced  and usually minimax regret as well. of course  if the answer lowers the upper bound on some u x  k   or raises the lower bound on some u xw k    then pairwise regret remains unchanged.  note that minimax regret might still be reduced. 
　we have also experimented with a variant of the cs strategy in which regret is computed approximately to ensure fast interactive response by imposing a time bound on computation  as described above . while we can't be sure we have the minimax optimal solution with early termination  the solution may be good enough to guide the querying process. furthermore  since we can compute the max regret of the anytime solution  we know the quality of the solution  and we have an upper bound on minimax regret which can be used as a natural termination criterion for the querying process.
1 alternative strategies
finally  we have experimented with several other strategies  which we describe briefly. the optimistic query strategy computes an optimistic state xo and queries  at the midpointof the interval  the utility parameter in xo with the largest gap. intuitively  an optimistic xo is a useful adversarial choice  so refining information about it can help reduce regret. the pessimistic query strategy is analogous  relying on the intuition that a pessimistic choice is useful in preventing the adversary from making us regret our decision too much. the optimisticpessimistic  op  strategy combines the two: it queries the parameter that has the largest gap among both states. these strategies are computationally appealing since they require only standard cbo  not minimax optimization.
　the most uncertain state  mus  strategy is a variant of hlg that accounts for feasibility: we compute a most uncertain state xmu and query  at the midpoint  the parameter in xmu with the largest gap. finally  the second-best  sb  strategy is based on the following intuition: suppose we have the optimistic state xo and the second-best optimistic state x1o  i.e.  that state with the second-highest upper bound-this is computable with a single optimization . if we could ask a query which reduced the upper bound utility of xo to lower than that of x1o  we ensure that regret is reduced  since the adversary can no longer attain this most optimistic value ; if the lower bound of xo were raised to the level of x1o's upper bound  then we could terminate-knowing that xo is optimal. thus we would like to query xo at x1o's upper bound: a negative response will reduce regret  a positive response ensures xo is optimal. the sb method  distributes  this query across the relevant factor parameters  asking several bound queries.
　the myopically optimal  my  strategy computes the average regret reduction of the midpoint query for each utility parameter by solving the minimax problem for each response to each query; it then asks the query with the largest average reduction. this approach is generally infeasible  but we test it on small problems to see how the other methods compare.1
1 empirical results
we tested the effectiveness of our query strategies on a variety of problems. for each problem we tested: halve largest gap  hlg   current solution  cs   current solution with a computation-time bound of five seconds per query  cs-1   optimistic-pessimistic  op   second-best  sb   and most uncertain state  mus . we also compared these against the more computationally demanding myopically optimal method  my  on small problems. we implemented the constraint generation approach of  and used cplex as the generic ip solver. our experiments considered two realistic domains-car rentals and real estate-as well as randomly generated synthetic problems.
　first  we tested small synthetic problems to allow a comparison of our heuristics with the my strategy. fig. 1 reports the average minimax regret over 1 small synthetic problems constructed by randomly setting the utility bounds and the variables on which each utility factor depends. each problem has 1 attributes that can take at most 1 values and 1 factors that depend on at most 1 attributes. we simulate user responses by drawing a random utility function u for each trial  consistent with the bounds  representing a user's preferences. responses to queries are generated using u  assuming the user accurately answers queries relative to u . results are shown for two cases: utility parameters drawn from a uniform distribution over each interval  and those drawn from a  truncated  gaussian centered at the midpoint of the interval  reflecting that a user is somewhat more likely to have a true value near the middle of the range .1 in both cases  we observe that the op  cs and cs-1 heuristics decrease minimaxregret at a rate very close to my. this suggests that op  cs and cs-1 are computationally feasible  yet promising alternatives to the computationally prohibitive my strategy.
　we report on further experiments using all strategies except my with larger synthetic problems  a real-estate problem and a car rental problem taken from   drawing users from uniform distributions  gaussian results are very similar both in shape and magnitude . as above  all results are averaged over 1 trials. the car-rental problem is modeled with 1  multivalued  variables that specify various attributes of a car relevant to typical rental decisions  resulting in 1 1 possible configurations. the factored utility model consists of 1 local factors  each defined on at most five variables  with 1 utility parameters. performance of the various query strategies is depicted in fig. 1 a . initial utility bounds are set to give minimax regret of roughly 1% of the optimal solution. both cs and cs-1 perform extremely well: regret is reduced to almost zero within 1 queries on average.1 more importantly  these methods show excellent anytime performance: after only 1 queries  average minimax regret has dropped from 1% to under 1%. interestingly  the time bound of 1 seconds imposed by cs-1  while leading to approximately minimax optimal solutions  does not affect query quality: the approximate solutions give rise to queries that are virtually as effective as the optimal solutions. the cs strategy requires on average at most 1s per query. the op strategy works very well too  and requires less computation time  1s per query  since it does not need to solve minimax problems  except to verify termination  periodically   which is not reflected in query computation time . however  both op and cs-1 are fast enough to be used interactively on problems of this size. mus  hlg  and sb do not work nearly as well. note the hlg performs poorly since it fails to account for the feasibility of options  thus directing its attention to parts of utility space for which no productexists  hencepolyhedralmethods alone 1; 1  will not offer reasonable elicitation in our setting . mus significantly outperforms hlg for just this reason.
　the real-estate problem is modeled with 1  multivalued  variables  with 1 1 possible configurations. the factored utility model consists of 1 local factors  giving rise to 1 utility parameters. query performance is shown in fig. 1 b   using the same regime as above. again  both cs and cs-1 perform best  and the time bound of cs-1 has no effect on the quality of the cs strategy. interestingly  op performs almost identically to these  with somewhat lower computational cost  cs takes 1s/query  cs-1s  and op 1s . each of these methods reduces minimax regret from 1% of optimal to under 1% in about 1 queries. as above  sb fails to make progress  while hlg and mus do somewhat better. we also tested the query strategies on larger randomly generated problems  with 1 variables of domain size no more than four  and 1 utility factors with no more than three variables each . the same performance patterns as in real-estate emerge  with cs  cs-1 and op all performing much better than the others  see fig. 1 c  . although op performs slightly better than cs/cs-1  the difference is not significant.
1 concluding remarks
we have developed a number of query strategies for eliciting bounds on the parameters of graphical utility models for the purpose of solving imprecise constraint-based optimization problems. the most promising of these strategies  cs and op  perform extremely well  requiring very few queries  relative to the model size  to provide dramatic reductions in regret. we have shown that using approximation of minimax regret reduces interactive computation time to levels required for real-time response without a noticeable effect on the performance of cs. op also can be executed in real-time  since it does not require the same intensive minimax computation.
　we plan to extend this research a number of directions. we would like to consider additional query types  such as comparisons of outcomes and tackle the associated computational

tational boundaries of regret-based elicitation. furthermore  while 1 queries may be large for typical consumer choice problems  it is more than reasonable for high stakes configuration applications.

figure 1: avg. max regret on small random problems  1 instances  as a function of number of queries given  a  uniform and  b  gaussian distributed utilities.

figure 1: avg. max regret  1 instances  uniform density  as a function of number of queries:  a  car;  b  real estate;  c  largerandom problems.
problems. we also plan to explore new query strategies  including those that exploit probabilistic information to compute queries yet still use  distribution-free  regret to make decisions . non-myopic models are also of considerable interest. finally  human factors must be addressed  including framing and presentation  and dealing with the fact that users often  construct  preferences during analysis  rather than  reveal  existing preferences-this can often lead to inconsistency. while our current approach will never ask a query for which a response could be inconsistent with prior responses  allowing a user to backtrack still may be important.
acknowledgements: this research was supported by the the institute for robotics and intelligent systems  iris  and the natural sciences and engineering research council  nserc . poupart was supported by a scholarship provided by precarn incorporated through iris.
references
 f. bacchus and a. grove. graphical models for preference and utility. uai-1  pp.1  montreal  1.
 s. bistarelli  u. montanari  and f. rossi. semiring-based constraint satisfaction and optimization. jacm  1-1  1.
 c. boutilier. a pomdp formulation of preference elicitation problems. aaai-1  pp.1  edmonton  1.
 c. boutilier  f. bacchus  and r. i. brafman. ucp-networks: a directed graphical representation of conditional utilities. uai-1  pp.1  seattle  1.
 c. boutilier  r. patrascu  p. poupart  d. schuurmans. constraint-based optimization with the minimax decision criterion. cp-1  pp.1  kinsale  1.
 c. boutilier  t. sandholm  and r. shields. eliciting bid taker non-price preferences in  combinatorial  auctions. aaai-1  pp.1  san jose  ca  1.
 u. chajewska  d. koller  and r. parr. making rational decisions using adaptive utility elicitation. aaai-1  pp.1  austin  tx  1.
 p. c. fishburn. interdependence and additivity in multivariate  unidimensional expected utility theory. intl. econ. rev.  1-1  1.
 s. french. decision theory. halsted  new york  1.
 c. gonzales and p. perny. gai networks for utility elicitation. kr-1  pp.1- 1  whistler  bc  1.
 v. s. iyengar  j. lee  and m. campbell. q-eval: evaluating multiple attribute items using queries. acm ec-1  pp.1  tampa  fl  1.
 r. l. keeney and h. raiffa. decisions with multiple objectives: p