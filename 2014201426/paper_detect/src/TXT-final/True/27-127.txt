 
in this paper we propose the language of 'state specifications' to uniformly specify effect of actions  executability condition of actions  and dynamic and static constraints. this language allow  us to be able to express effects of action and constraints with same first order representation but different intuitive behavior to be specified differently. we then discuss how we can use state specifications to extend the action description languages a and lo. 
1 	introduction and motivation 
in this paper we consider several aspects of reasoning about actions: effects  direct  indirect  nondeterministic  of actions  qualification and executability of actions  constraints and their manifestations as ramifications and/or qualification  and propose a language that facilitates representing and reasoning about all of the above in a uniform manner. 
we follow the notation of situation calculus  mccarthy and hayes  1  and have three different sets of symbols  called fluents  actions  and situations  respectively. for example  in the statement  shooting causes the turkey to be dead if the gun was loaded   shoot is an action  dead and loaded are fluents  the initial situation is denoted by so. and the situation after the shoot is performed is denoted by res shoot s1 . the state corresponding to a particular situation is represented by the set of fluents true in that situation. 
consider the action  shoot . it is impossible to perform this action if the agent does not have a gun. 1 will refer to the condition of having a gun as an executability condition for the action  shoot . now let us reconsider the statement  shooting causes the turkey to be dead if the gun was loaded . here  the condition of the gun being loaded is a precondition for the fluent  dead  to 
hold in the situation obtained after performing the action  shoot . in the literature related to frame problems  brown  1  both type of conditions are sometimes considered as part of the qualification problem. in the planning literature  allen et a/.  1  the second kind of conditions and the corresponding effects are referred to as conditional effects. to avoid confusion we will refer to them as  executability condition of an action  and  preconditions of effects  respectively. in other words the condition of having a gun is an executability condition for the action  shoot  while the condition of the gun being loaded is a precondition of the effect of having the turkey dead when the action  shoot  is performed. 
we consider two kinds of constraints: dynamic and static. in this paper we only consider one-step dynamic constraints which are general statements that are true about adjacent situations. for example  the statement that  the salary of a person does not decrease by performing an action  is a dynamic constraint that says the salary of a person in a situation s is always less than or equal to the salary of the person in the situation obtained by performing an action in s. the statement u no action can make a dead person alive  is another example of an one-step dynamic constraint. 
static constraints are statements about the world that is true in all situations. for example  the statement that  a person can not be at two different places at the same time  is a static constraint. 
now consider the action moveto b. the effect of this action is to make the fluent at.b true. now suppose that before the action was executed  at a  was true  i.e. the agent was at the position a. not only  at b  would be true after executing  moveto b   but also the constraint.  a person can not be at two different places at the same time  will dictate that  at a  be false in the resulting situation. we could explicitly state this as an effect of the action  moveto b . but there might be several different positions in our world  and also there might be several different actions  fly to b  drive to b  jump to b etc.  which have similar interaction with the constraint. a better approach would be state it as a constraint  i.e. not to state it explicitly for all those actions   and have a mechanism that considers the ramification of a directly specified effect due to the constraints. this is referred to as ramification in the literature. 
it. was pointed out in  lin and reiter  1  that some constraints  instead of causing ramifications  affect the executability of an action. moreover  sometimes these constraints are indistinguishable  in a first order representation  from the constraints that cause ramifications. 
	baral 	1 

for example  consider the action of  marry b   with the effect  married to b  and the constraint that  a person can not be married to two different persons at the same time . now suppose  married to a  is true in a particular situation 1. intuitively  we would like the action  marry-b  to be in-executable in situation s  rather than have a ramification of the action  marry b  that makes  married to a  false. 
one of the goal of this paper is to propose a language which distinguishes between the above two constraints. 
now let us consider the effect of actions in the absence of any preconditions  executability conditions and constraints. let s and s' be statesand let us represent the effect of an action a by a formula ea. let us also represent the set of possible states that may be reached after an action a is performed in a situation with state s be res{a s . using winsletts'definition  winslett  1 : 
d e f i n i t i o n 1 s' € res a  s  if 
 a  s' satisfies ea  and 
 b  there is no other state s  that satisfies ea and that is closer to s than 1'  where closer is defined using sym-
metric difference  

in terms of the theory of  updates   katsuno and mendelzon  1   res{a s  can be defined as s' ¡ê 
res a  1  iff s' is a model of s o ea. when the update operator o is defined in terms of symmetric difference then this definition coincides with winslett's definition. 
now let us consider the action of tossing a coin. intuitively  the effect of this action is either  head  or  tail   not both  regardless of which of the fluents were true before the coin was spun. but if we represent this effect as etoss =  head a -  tail  v  tail a - head  and use winslett's definition or the update operator o defined in terms of symmetric difference  then we have the problem that if the coin was  head  before performing  toss  then it stays  head  after performing  toss  and similarly if it was  tail  before performing  toss  then it stays  tail  after performing  toss . this has also been pointed out in  crawford  1; brewka and hertzberg  1; kartha and lifschitz  1; pinto  february 1; sandewall  1 . representing  etoss - head v tail  does not help either. 
let us now consider a different action  paint  whose effect is to paint a block  red  or  blue . but this time the robot is smart and minimizes its job when it realizes that the block is already either  red   or  blue . here  epoint =  red a -* blue  v  blue a - red  is adequate when we use winslett's definition. 
consider the action of  spinning  a coin on a chess board. let us consider the fluents  black  and  white  which mean that the coin touches a black square and the coin touches a white square respectively. intuitively  after the coin is spun the fluent  black    white  or both could be true in the resultant situation regardless of what was true before. but the only way to represent espin the effect of spinning the coin  in first order logic is through the formula e1pin = black v white  or its equivalent. 
here  we again get unintuitive result if we use winslett's definition. moreover  since etoss and epaint are equivalent in their propositional representation  any approach that does not specify the differences in their intended meaning will be wrong with respect to one of them. 
when we examine our formalization we observe that there are two aspects to it.  i  we use classical logic to represent effects of actions   ii  we use a fixed definition of  closeness  based on symmetric difference. to distinguish between  toss  and  paint  we have two choices:  a  to use a more expressive language to represent etoos and epaint and/or  b  to use different definition of  closeness  for  toss  and  paint   i.e. we use different update operators for  toss  and  paint . 
kartha and lifschitz  kartha and lifschitz  1  and 
sandewall  sandewall  1  follow the second approach by allowing specification of when inertia of a fluent {w.r.t. an action  is not preserved.  this results in different update operators.  
in this paper we propose to use the first approach of using a more expressive language  than first order logic  to represent effects of actions. 
now let us go back to representing constraints and the resultant ramification and/or qualification.  for simplicity we stay with the assumptions that we do not have preconditions and executability conditions.  in presence of constraints c  res a s   the set of situations that can be possible when a is executed in situation s  is usually 
 kartha and lifschitz  1  defined as 
definition 1 s' e res{a s  if 
 a1  s' satisfies ea u c  and 
 b'  there is no other state 1  that satisfies eauc and that is closer to 1 than s'  where closer is defined using symmetric difference  

now let us reconsider the constraints  a person can not be at two different places at the same time   and  a person can not be married to two different people at the same time . these two constraints when expressed in first order logic are equivalent. but as discussed before they have different intended meanings  the first causes ramification while the second adds qualification conditions. here also instead of using different update operators for different constraints we propose to use a more expressive language to represent constraints. moreover  the condition  a1  suggests that we use the same language to represent effects of actions and constraints. this is one of the m a i n theses of our paper. 
in this paper we propose a language to express  i  effects of actions with their preconditions   ii  executability conditions of actions  and  iii  constraints  such that the drawbacks of using first order logic  fol  to express them  as described in this section  is avoided. 

before we go on to introduce the syntax and semantics of the language of  state specifications  for specifying effects of actions and constraints  we briefly discuss dis-
junctive logic programs. we later give the semantics of  state specifications  through translations to disjunctive logic programs. 
1 	background: logic programming preliminaries 
a disjunctive logic program1 is a collection of rules of the form 

where l i 's are literals. when li's are only atoms we refer to the program as a normal disjunctive program. when m - n and l i 's are only atoms  we refer to the program as a positive disjunctive logic program. 
d e f i n i t i o n 1  gelfond  1  the answer set of a disjunctive logic program ii not containing not is the smallest  in a sense of set-theoretic inclusion  subset s of l i t   the set of all literals  such that 

the set of answer sets of a program ii that does not contain negation as failure is denoted by a ii . ¡õ 
it should be noted that for positive disjunctive logic program  all lis are atoms  and the program does not contain not    the answer sets correspond to the minimal herbrand models. 
d e f i n i t i o n 1  gelfond  1  let ii be a disjunctive logic program without variables. for any set s of literals  let i i s be the logic program obtained from ii by deleting 
 i  each rule that has a formula not 	l in its body with l ¡ê s  and 
 ii  all formulas of the form not l in the bodies of the remaining rules. 
clearly  i i s does not contain not   so that then a iis  is already defined in definition 1. if s e a ii s    then we say that s is an answer set of ii. ¡õ 
1 	n o t a t i o n a l c o n v e n i e n c e 
in this paper we consider a disjunctive logic program to be of a set of rules of the form  1   where lo  ..... lk are a conjunction of literals. the answer sets of such programs are defined exactly as in definition 1 and definition 1  except that  i  in definition 1 is replaced by the following: 

1
¡¡¡¡ although we use the answer set semantics  gelfond and lifschitz  1; gelfond  1   we use the symbol v instead of or. our connective v is not the classical disjunction. 
1 	state specifications 
for an action a  to specify its effect ea  we need to make statements about the state reached after 'a' is performed  we refer to this state as the updated state w.r.t. 'a' . to integrate preconditions and executability conditions of 'a' we also need to consider the state where 'a' is to be performed  we refer to this state as initial state w.r.t. 'a . while to represent static constraints we only need to refer to the updated states of actions  to be able to represent dynamic constraints we need to able to refer to both initial states and updated states of actions. 
to be able to express the truth and falsity of fluents in the initial states and updated states of actions we use four special operators  in    out    was in  and  was out . for any fluent /  the intuitive meaning of in f  is that / is true in the updated state. the intuitive meaning of was in f  is that / is true in the initial state. similarly the meaning of out f  is that the fluent / is false in the updated state  and the meaning of was-out f  is that the fluent / is false in the initial state. a state specification is a set of rules of the form 

 1  
where  k  l  m  n  p and q could be 1. intuitively  the rule in p  	 - 	in q  out s  was-in t  was-out u  
w.r.t an action a means that if t is true and u is false in the initial state then if q is true and s is false in the updated state then p must also be true in the updated state. 
1 	u s i n g state specifications 
for every action a  we have a corresponding state specification pa that specifies  i  the effect of a together with the preconditions  and  ii  the executability conditions of action a. we refer pa as the  update specification  of the action a. 
for example  for the action  shoot   the update specification pshoot is as follows: 

similarly  the update specifications for the actions  toss    spin   and  paint  can be given as follows: 

in white  v in black   - out white  v in{white   - in black  pspin out{black  v in black   - in white  
	baral 	1 




	baral 	1 

1 	future work 
some of the questions that need to be answered are: 
1. how expressive is the language of state specifications  can an arbitrary first order theory be expressed using state specifications  
from the fact that any logic program can be represented as a state specification  marek and truszczyriski  1a   and from the expressibility of logic programs  the answer is yes. but an efficient algorithm that can translate a first order theory to a state specification still need to be developed. one result that may help is in  kosheleva and kreinovich  1   where kosheleva and kreinovich propose an algorithm to syntactically translate a firstorder theory to a logic program. 
1. how easy is to express something using  state specifications   
the answer is ''as easy as specifying something using disjunctive logic programs'1. this is clear from the definition of res a s  which uses a straight forward translation from state specifications to disjunctive logic programs. 
some researchers have expressed concern about the intuitiveness of the language of disjunctive logic programming vis-a-vis first order logic. we believe that one reason fisrt-order logic is more intuitive to most of us is because we are more familiar with it. it is quite possible that as we become more familiar with disjunctive logic programming it will appear more intuitive. 
also  why should we expect first-order logic to be the language for all our needs  in deductive databases  logic programming is the language of choice. the similarity between 'deductive databases' and 'reasoning about actions' is amazing and will be discussed in a future paper. 
1 	effects of concurrent actions 
in  baral and gelfond  1   baral and gelfond extend the language a to allow concurrent actions. let us consider the execution of actions a and 1  with corresponding update specifications pa and pb if a and 1 are completely independent of each other then the effect of executing a and b concurrently can be given by p{a b  = paupb. 
but in general actions executed concurrently are not always independent of each other. in that case  one way would be to explicitly specify the effect of each possible sets of actions. this leads to a frame problem in another direction. in  baral and gelfond  1   baral and gelfond suggest that a compound action  a set of actions executed concurrently  normally inherits the effects of its subactions. using their method the effect of executing actions a and 1 concurrently is reasoned by inheriting from pa and pb  effects that do not contradict with p{a b}  if any. but this approach is weak when effects are represented by state specifications. 
consider  pa - {in c  *- in d   - s'n e }  
pb = {in e  - in  f   --in c }  
and 	p{a b} 	= {in g   -- out e   -}. 
intuitively  the effect of executing {a  b}  can be obtained by  i  inheriting the effects of executing a and 1 independently which do not contradict with p{a b    ii  and the effects specified by p a b}- this dictates that in the state obtained after executing {a b}  c /  and g must be true and e must be false. in this report we leave open the problem of formalizing this. 
1 	conclusion 
this paper builds on the efforts in  marek and truszczyriski  1c; 1b; baral and gelfond  1 . marek and truszczynski introduce the language of  revision programs 1 and use it to represent complex effects of actions  such as the action of  reorganizing  a department whose effect is given as  if john is in the department then peter must not be there   with a non-classical interpretation of  if ... then ...  implying that  john is preferred over peter . in  baral  august 1   baral shows how to translate  revision programs  to extended logic programs and introduces was in and wash out  in the body of rules. 
in this paper we introduce the language of state specifications and show that this language is not only able to represent complex effects  but also  non-deterministic effects of actions  executability conditions of actions  preconditions of different effect of actions  and dynamic and static constraints. moreover  it allows distinct representations of different non-deterministic effects  and different constraints that have same representation in first order theory  see the discussion on  paint  and  toss   and  marry  and  move  in section 1. . we then show how to incorporate state specifications to action description languages like a and l1  and how to implement state specifications through a translation to disjunctive logic programs1. 
recently  mccain and turner mccain and turner  1  propose using inference rules for representing constraints so as to distinguish between constraints that  cause ramification  and that add to the qualification. unlike their approach we are able to express both dynamic  one-step  and static constraints  and non-deterministic effects in a single language. moreover  one of the fundamental thesis of our approach is that effects  and executability conditions of actions be expressed in the same language as the constraints. 
one of our main future goal is to study impact of using state specifications with other action theories. in particular we would like to formalize effects of concurrent actions when the effects are given as state specifications. 
¡¡¡¡revision programs are state specifications  with the following restrictions:  a  no was in and was-out   b  no dis-
junctions in the head of rules  and  c  no rules with empty 
heads. 
1
¡¡¡¡ currently  there exists some systems that can compute the answer sets of disjunctive logic programs. 

1 	acknowledgment 
i would like to thank hudson turner and the referees for their insightful comments. research in this paper was supported by nsf grants nsf-iri-1-1 and nsfcda 1-1. 
