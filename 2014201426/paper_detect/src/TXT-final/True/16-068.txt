 
     examples play a crucial role in automated theorem proving  not only as counterexamples to help prune unproductive subgoals  but also to help guide proof discovery. 	in this paper 
we show how examples  interpretations  might be used to help determine instantiations of set variables. we also discuss the role of piecewise-linear continuous functions  and give some results of computer runs using these methods. 
	i 	introduction 
     this is part of an effort to use examples  interpretations  to help in automatic proof discovery   we believe that examples are not only 
useful as  counterexample sieves   to prune the proof-search tree  but also can be used to help guide the search. one way this is done  is in finding instantiations of variables. see  1  section 1 . here we show how examples might be used to help instantiate set variables. 
     one reason that examples are so valuable in theorem proving is that they allow us to calculate  as opposed to prove. 	and since calculating is usually easier than proving  this gives an 
advantage. but of course the results from examples are less general  so the attack has to be balanced - with some calculation and some proving. 
let us start with the following problem: 
given a continuous function 	f on  a b   with 　　　interval  attains its maximum on that interval   using the least upper bound axiom 
lub  every non-empty  bounded  set a has a least upper bound  sup a   
then we must have a value of a  i.e.  a description of a in terms of f  a  b   before we can utilize lub in the proof. 
     once a has been given  the theorem will have been reduced to a theorem in first order 
logic about general inequalities. 
     more generally  when we are trying to prove a theorem of the form 
 1  	
using the lub axiom to produce a set a for which 
l - sup a  then  1  can be written maximum value at x = l. 
 1  

imv 
　　if we further assume that for each satisfying h f   there is a largest l in  a b  for which  1  holds  then  1  is equivalent to 
 1  
so our objective is to prove 
 1  	
this has the general form 
 1  	
so for this form of theorems our problem is: 
given h and 
generate q for which  1  holds. how  we propose to do this  automatically  by using interpretations  examples  f of f  and interpretations of the other function and predicate symbols appearing in h and 
     we will first state our problem in a more general setting and then  in section 1  return to the forms  1  and  1  as special cases. 

now suppose that we are to prove a theorem of the form 
 1  	
the object then is to find  generate  a q which satisfies  1 . 
we propose the following general method for finding 
q. 
 i  obtain an interpretation  of p which satisfied 
 ii  generate a predicate q  in terms of p  which satisfies 

 iii  test q on other 
 iv  prove  1  using the q so obtained. 
of course  finding q is equivalent to proving a theorem in higher order logic  which requires the higher order variable q to be instantiated. the 
central idea is this: 	if a q can be found which 
satisfies   which satisfy    then hopefully that q will also satisfy we 
will indeed see that that is the case for some special instances given in section 1 below. 
     we will defer discussion of step  i   the fabrication of p  until section 1  a subroutine  instantiations  does this   and concentrate now on   i i     the generation of q for which holds. step  iii  is rather straightforward  and step  iv  is not within the scope of this paper*. 
     so let there be given an interpretation p satisfying h p . we desire an algorithm generate which will generate a q satisfying  of course such a q may not be unique  even for a fixed p. 
     if the algorithm generate is indeed to generate such a q  then it must use an association between the members of p and those of p. because  q is to be given in terms of the symbols in p  not p  and it must satisfy the condition   where every pin p has been replaced by an interpretation p. 
     it is not obvious how to build such an algorithm generate  but somehow it should key on the structure of iii. the following  generate  is a 
     first attempt at such an algorithm. it is built on several additional assumptions  given below  
*it is often the case  as in the examples of section 1  that once an instantiation q of q has been given  the resulting theorem vp h p -ij  p q    is first order. and while it s t i l l may not be easy to prove i t   nevertheless  lends itself to standard procedures* 

1 w. bledsoe 
about p and   the symbol ''q : in the following algorithms will always represent the predicate we are looking for - i.e.  trying to generate.  
     we will assume that complete typing* information is available on 	q  and members of p. thus  for example  q might be a predicate over 
the reals  	s o that f	s either 
true or false. 	 e.g.  
     for our first version we will assume that q is a function of one real variable x.  in general 
we might restrict q to a function on rn.  
we will start with a call to 
generate 
with n=l  and where  is the argu-
ment of q. b is treated as a set of bindings  tying members of p to those of p.  i.e.  1 is a substitution . b will be expanded as new variables and their instantiations are added. if a is a formula then ab is used to denote the result of applying the substitution b to a. 
     the integer n is the number of variables used in the description of 
expressed only in terms of if n=1 then q is expressed in terms of x and y  
  note: the 
parameter n counts both bound and free variables.  
     the first call to generate is made with n=l. if this fails  returns nil   then n is increased by 1 and a new call made to generate  etc.  up to a maximum allowable value for n. 
      before presenting the algorithms generate  tally and all-some  let us try to help the reader by pointing out that we are looking for statements that can be deduced from a given example  function f  that might hold for the whole interval  a b  or for a part of i t ; that the method works by looking at the critical points of the example function; that generate  tally  and all-some  return families of conditions that are true on the subintervals; that these families of conditions are combined in appropriate ways to give candidates for the q that 
we are looking for; and finally that this combining action is governed by the structure of the formula 
containing q.  
generate 
     the objective is to find a q for which pip is true  x is a variable. it starts as the argument of q. 
form of 	action 
1. 
put q1 = generate 
*see  for example  peter b. andrews   resolution in type theory   j. sym. logic 1  1   1*similarly for open and half open intervals  a b    a b    a b . in these cases the open endpoints are not selected for x  but  nearby  points are selected  see section 1 . 
 the number k used here is a parameter supplied by the user. see section 1 below for an alternate way of selecting the x1 when f is a piecewise linear continuous function. 



1 w. bledsoe 


a. 	human supplied interpretations 
     one possibility is that the user supplies the p's  either at run time  or in a convenient knowledge base which the program can effectively access. see  for example  . such a collection of examples could accumulate over a period of time and be used for a number of applications. in the examples of section 1  we show the obtaining of the needed interpretations by a call to a subroutine interpretations. 
b. 	piecewise-linear continuous functions 

　　if one needs a plcf f which satisfies an additional constraint h f   then one can either: generate f's and test them until one satisfying h f  is found; or try to build into the generating routine the ability to restrict such f's. again this second approach appears to be difficult in general  though we were able to realize it for special cases such as: 

1 w. bledsoe 
or  cubic  knees if the derivative of f is required to be continuous  etc. again one would need to develop a set of routines for evaluating f at particular x's  and for finding maxima  minima  zero's   etc.  for such f's. 
　　we do not recommend that polynomials be used as f's because in order to obtain an example with a few undulations  it is necessary to use a polynomial of order four or higher  and these are very difficult to compute. 
e. 	using the  corners  of f 
f. 	choosing points from open intervals 
　　in algorithms generate-1 and all-some we often are required to select points x1 xn  or y1's or y!'s  from open and half open intervals as well as closed intervals  so we cannot always automatically include the endpoints. in these cases we have used 
a parameter e  small  to pick points  close  to the endpoints. for example  from the interval  a b  we would select  among others  the point a + e. the parameter z is allowed to diminish in value by multiplying it by 1 each time it is used. for an open interval  c d  we have 

w. bledsoe 1 

1 w. bledsoe 


v comments 
a. 	higher order logic 
     since instantiating set variables is a part of higher order logic  one could also use procedures like those of andrews   huet   darlington   or possibly bledsoe . in general we would expect these to be less efficient than the technique discussed here  but further experience is needed. 
b. 	conjecturing 
     the central component of this work is the routine generate which attempts to general  describe  a predicate q x  satisfying a particular form ikq x h this is much in the spirit of lenat's work   where various conjectures are derived from examples. 
     in lenat's work as well as ours  there is given a set of examples and the program is asked to determine  what is true  about them. there is a difference however: whereas lenat asks all that is true  about his examples   we ask what is specifically true about certain objects in p  such as f. 
     such conjecturing seems to play an important role in all of human endeavor  and we would expect 
a prominant place for it in future automatic reasoning systems. 

w. bledsoe 1 
d. other example theorems 
     we hope to extend these results to other example theorems such as: heine-borel theorem  nestled interval theorem  baire category theorem  balzano-weierstrass theorem  etc. 
     in many of these one will work with families of sets  intervals  instead of functions. there is a natural analogy between piecewise-wise linear 
continuous functions  plcf's  and finite families of intervals. accordingly we would expect instantiations which consist of a finite family of inter-
vals  to suffice for many applications. but infinite families will also be needed. see . 
