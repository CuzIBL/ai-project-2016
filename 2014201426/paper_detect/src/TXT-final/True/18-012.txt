 
　in this paper  we describe a logic programming and program verification system which is based on quantifier elimination techniques and axiomatization rather than on more common method of doing logic programming using the herbrand-prawitz-robinson unification algorithm without occur-check. 
　this system is shown to have interesting properties for logic programming and includes a number of advanced features. among these features are user-defined data objects  user-defined recursive relations and functions  either of which may involve quantifiers in the body of their definitions  and automatic termination and consistency checking for recursively defined concept. in addition  it has a correct implementation of negation in contrast to prolog implementation of negation as failure  a smooth interaction between lisp-like functions and prolog-like relations  and a smooth interaction between specifications and programs. finally  it provides a method of mathematical induction applicable to recursive definitions involving quantifiers. 
i. introduction 
　quantified computational logic qcl  is a programming and program verification language for programs written in recursive quantificational logic. the language can be used both for logic programming and program specification. 
　a qcl program consists of sequences of recursively defined data objects declarations and recursive quantificational logic function definitions. programs written in qcl are both executed and verified by a single automatic deduction system called the symbolic evaluator using a system of axioms and rules called the symmetric logic. the essence of the symmetric logic technique is to push quantifiers to the lowest scope possible in the hope of finding a way to eliminate them. the symbolic evaluator and the symmetric logic are described in detail  brown 1 . 
　a prototype system for qcl has been implemented in interlisp. 
ii. qcl programming 
a. recursively defined data objects 
　although many logic programming languages provide system-defined data objects  they provide only a poor capability for user-defined data objects. qcl adopts the shell principle boyer&moore 1  as a method to recursively define some useful user-defined data objects. since the shell principle was invented  not much attention has been paid to it in logic programming. however  it is very valuable in modelling logic programs and verifying logic programs. although many of the axioms produced by the shell principle of qcl are similar to those described in boyer&moore 1   some are quite different in order to satisfy the fundamental deduction principle described in  brown 1 . this principle requires that almost all steps in the automatic deduction should take place by a peiya liu 
dept. of computer sciences 
the university of texas austin  tx 1 
method of replacing expressions by an equivalent but simpler expressions. 
　the syntax of user-defined data object is:  shellcreate constructor bottom recogniser selectors types defaults . the constructor is a name of new function which constructs objects of the new types. the bottom is the bottom object or t if there is no bottom object. the recognizer is a name of new function which recognizes objects of the new type. the selectors are a list of functions which are accessors of the data structure. the types are a list of type restrictions on each shell. each restriction is an arbitrary formula in qcl consisting of symbols defined at that time. the defaults are a list of the default values for each shell. data objects are easily declared. for examples  lists are produced by the declaration  shellcreate 'cons 't 'llstp ' car cdr  ' t t  ' nil nil   and trees are produced by the declaration  shellcreate tree 'btm 'treep ' left root right  ' t t t  ' 1 1  . 
b. a safe definition principle 
　most existing logic programming languages have syntax checking but few perform logic checking for properties such as termination and consistency. suppose p is a logic program and r is a goal we wish to solve. then  executing p to solve r is the same as deducing r from p in logic program execution. therefore  any answer will be correct if the logic program p consists of inconsistent logic statements. but the user might get one of the answers because of deduction strategy. thus user forces his program to produce some answer. qcl on the other hand has logic protection capability to detect inconsistent or non-terminating statements in logic programs. in addition  it stores vital verification information during the checking. 


f. brown and p. liu 1 


1 f. brown and p. liu 
tern to make deduction from the relation in the case that r has no free variables. the command simply tries to prove r. usually  the output form is true  false  its equivalent but simplified form or a conjunctive form of some equalities and inequalities about remaining arguments and their binding values. 
   the deduction techniques of pv are based on the fundamental deduction principle  which makes it possible that qcl logic programming interpreter is the same as its verification system interpreter. 
b. explanation capability 
   it is worthwhile embedding an explanation capability inside an automated reasoning system. currently  the system can produce all tracing information whenever a rule  axiom  or definition is applied. this information consists of three parts: an input expression i which is being evaluated  an intermediate expression m and a name of rule which produces m from 1  an output expression o obtained by recursively evaluating the m expressions. thus a trace will generally be of the form: 
il:exp by use of: a name of rule  axiom or definition. 
ml :exp 
i1:exp by use of: ... 
m1:exp 
 1:exp ol:exp 
where the number immediately following 1  m  or o is the level at which the application of an rule  axiom  or definition takes place. at a given level number i  oi and mi are always associated with the preceding ii. 
   the debugging principle is this: if ii does not equal to mi  then the definition  axiom or rule used in that application is incorrect  if mi does not equal oi then one must recursively examine the i+l level ie. 1 mi+1 oi+1  to find the error. 
c. negation ls not a failure 
   the negation-as-failure rule is an operational connection between negative and positive terms. the soundness and completeness of a restricted form has been shown in  clark 1j jaffar 1 . there are still some fundamental limitations on that rule if there is no logical connection between them. 
   the following program uses negation-as-failure to define a term  ndiffl x y z   which is supposed to be equivalent to  not dlffl x y z  . the cut symbol -/＊ makes a commitment for all subgoals since the parent goal. hence any attempt to resatisfy any previous subgoal will fail. nil is a predicate defined in such a way that as a goal it always fails and causes backtracking to take place. but when nil is encountered after cut  the normal backtracking behavior will be altered by the cut and will cause the effect that whenever  diffl x y z  is successful   ndiffl x y z  is failed. 
 diffl xx nil   -
 diffl cons xi x z cons xi a   - diffl x z a  
 ndiffl x y z  - diffl x y z /nil 
 ndiffl xyz  -
a correct answer can be deduced by failing with nil or rather false on the query  ndiffl ' large many  ' many  ' large   . but it also returns a failure on the following question which is true for any z not equal to many:  ndiffl ' large many  z ' large  . this relation involves a variable z in the ndiffl. in general  the rule is not complete and has to restrict its queries and either deduction strategy or program statements in order to work clark 1 . the negative query is often restricted to the ground term. thus  much negative information simply can't be queried. 
   even worse  it should be noted that the above set of clauses are inconsistent if  ndiffl x y z  really is  not diffl x y z  . qcl takes a logically correct approach towards handling negative information. any negative term  not tm  is defined as the term  if tm nil t  by system. if diffl is defined as before   pv  not i iffl' large many  z ' large    will result  if  equal z ' many   nil t . this means that answer is any z which is not equal to ' many . the details of computing this relation are given as follows: 
example a: 
 pv  not diffl ' large many  z ' large     
the expression to be recursively simplified is: 
 not  diffl  quote  large many   
z 
 quote  large     
il: diffl  quote  large many   
z 
　　 quote  large    by use of: diffl 
ml: if  equal  quote  large many   
z  
 equal  quote  large   nil  
 if  listp  quote  large many    
 ex *1  if  equal  quote  large   
 cons  car  quote  large many    
*1   
 diffl  cdr  quote  large many    z*l  
nil   
nil   
i1: diffl  quote  many   
　　z nil  by use of: diffl 
m1: if  equal  quote  many   
z  
 equal nil nil  
 if  listp  quote  many     ex *1  if  equal nil 
 cons  car  quote  many    
*1   
 diffl  cdr  quote  many    z*1  
nil   
nil   
1: equal  quote  many   
z  
1: equal  quote  many   
z  
the result of recursive simplification is: 
 if  equal  quote  many   
z  
　nil t  end of deduction 
input 1 is due to variable *1 in ml being replaced by nil under the if-condition  equal 	' large  cons cak ' large many   *1  . 

example b: 
 pv  diffl ' large many  z ' large    
the expression to be recursively simplified is: 
 diffl  quote  large many   
z 
 quote  large    
1: d1ffl  quote  large many   
z 
　　 quote  large    by use of: diffl 
ml: if  equal  quote  large many   
z  
 equal  quote  large   
nil  
 if  listp  quote  large many    
 ex *l  if  equal  quote  large   
 cons  car  quote  large many'    
*!   
 diffl  cdr  quote  large many    
z *l  
nil   
nil   
i1: diffl  quote  many   
　　z nil  by use of: diffl 
m1: if  equal  quote  many   
z  
 equal nil nil  
 if  listp  quote  many     ex *1  if  equal nil 
 cons  car  quote  many    
*1   
 diffl  cdr  quote  many    
z *1  
nil   
nil   
1: equal  quote  many   
z  
ol: equal  quote  many   
z  
the result of recursive simplification is: 
 equal  quote  many   
　　z  end of deduction 
d. relational vs. functional 
   there are currently two really good ways of programming based on formal logic  namely:  l  programs based on recursive functions  such as the lisp.  1  programs based on nonnegative recursive relations  such as hcprvr and prolog. 
   qcl takes a different approach from loglisp robinson 1   qute sato 1  and tablog malachi 1 towards combining these two formalisms. our concern focuses on the unique formalism and a smooth interaction between relations and functions. 
   each type of programming system  of course  has many additional features  eg. assignment statements  goto's etc.   but it is the logical features: recursive functions or recursive relations which make it so easy to express  understand  and debug programs written in these systems. some programs arc more easily expressed  understood  and debugged as functions than relations and vice-versa. in particular combinations of deterministic programs returning unique outputs should be written as functions. for example  to append the 
f. brown and p. liu 1 
reverse of a list a onto the result of appending the 
reverse of a list b onto the reverse of a list c is written as functions as:  append  reverse a   append 
 reverse b   reverse c    whereas it is rewritten as relations with many extra symbols as: 
 ex xl ex x1 ex x1 ex x1 and reverse a xi  
 reverse b x1  
 reverse c x1  
 append x1 x1 x1  
 append xi x1 answ       
xl x1 and x1 are respectively the results of reversing a  b  and c  x1 is the result of appending x1 to x1  and the answer: answ is the result of appending xi to x1. in such n case the lack of nesting in relational notation makes it resemble assembler notation  where the variables are registers and the assembler operations are reverse and append  rather than a high level language. 
   on the other hand  combinations of non-deterministic programs are more naturally expressed as relations. for example  a program which parses english and translates it into another language  is naturally made up of a number of nondeterministic programs. the definition of a declarative tran sitive sentence is easily written in relational notation as: 
 ex xi ex x1 ex x1 and np 1 xl  
 vg 1 x1  
 np 1 x1  
 combine xi x1 x1 answ      
where it is the input text  1 is the rest of the text after a noun phrase is parsed  1 is the rest of the text of 1 after a verb group is parsed  1 is any remaining unparsed text  xl is the translation of the first noun phrase  x1 is the translation of the verb group  x1 is the translation of the second noun phrase  and answ is the translation of the entire sentence. 
   such a program can not be rewritten in functional notation as:  combine np 1 i1  vg 1 i1  np 1   because the np and vg relations are not deterministic on their third arguments. for example  there may be many different parses of the the first noun phrase each giving a different answer. furthermore  1 is another non-deterministic output of  np 1  which must be passed an input to  vg 1 . likewise  if insisting on functional notation  an assembly-like program can not be avoided. 
   these considerations also apply to advanced database technology. data can be represented relationally as in relational databases  codd 1  or functionally. for example  a request for the salary of the president of the university of the largest state in the united states could be written as: 
 ex xl ex x1 ex x1 
 and largest state of united states  xl  
 university of xl x1  
 president of x1 x1  
 salary of x1 answ      
however  it can be written in the simpler functional notation as:  salary of  president of  university of  largest state of  united states      because each of these predicates is deterministic on its last argument. on the other hand  in an example with non-deterministic outputs  the relational representation is better. 
   two distinct programming systems have been developer! based on formal logical notationfrecursive functions  recursive relations  and each is especially useful for representing a par1 f. brown and p. liu 
ticular type of programs deterministic and non-deterministic . furthermore  the more facilities of formal logic that are provided in a programming system  the less one needs to use constructs such as goto and assignment which are harder to use  understand and debug. therefore  it follows that a significantly better programming system could be achieved by amalgamating these forma' notations into a single formal system provided that effici .. interpreted and/or compiled inference systems could be designed. 
e. specification vs. program 
in qcl  specifications and programs are considered as different styles to express logic expressions for their own purposes within the same framework. specifications are descriptively useful logic forms and their computationally useful forms are programs. 
   we believe that automatic derivation  verification and synthesis of logic programs are made easier  provided that specifications and programs have a smooth interaction. two important relationships between logic programs and their specifications are correctness and completeness. correctness is a property that for any n-tuple x  if x is computed as a solution satisfying a relation r  then x belongs to the relation specified by s. it can be formalized as vx s|- r x  =p|- r x  . completeness is a property that for all members of the specified relation r are computable from program p. it can be represented as vx s|- r x = p--r x  . one way to show these relationships is to use meta-level deduction to prove those formulas  brown 1 . another way is that  if finding a good specification s such that s-p or p|- s  we get same correctness proof or completeness proof by exploiting the transitivity of logical implication |-. 
   the second approach is the cornerstone of logic program derivation  verification and synthesis investigated in clark 1   hogger 1 . one advantage in this approach towards verification is that the object-level deduction from s to p or from p to s is sufficient to show their relationships without meta-level deduction and concerning goal relation r x . another advantage is that for proving any property of p  itmay be much easier to show that s has that property and p is complete with respect to s. in the hogger study  specifications expressed in  if-and-only-if  and  first-order recursive  styles are crucial in this approach. since qcl intend to bring specifications and programs together  it provides a good opportunity to investigate good specifications and program styles in order to automate the derivation  synthesis  and verification of logic programs. for example  
 deflq 
 eql al pick.s u v z  
 if member.s u z  
 if member.s v z  
 plessp u v  
nil  
nil   
  
   informally stated   p1ck.s u v z - member.s u z a  member.s v z a plessp u v . 
 deflq 
 equal member.s u l  
 ex x ex y if equal l  cons x y    
 if equal u x  t 
 member.s u y   
nil     
informally   member.s u l -1y l= cons x y a  u=xv member.s u y   . 
   the specification s:{pick.s member.s} is for the following program p:{pick.p member.p}. it said to pick any two numbers u and v from a list z of numbers  not necessarily distinct  such that u is less than v. the relationships can be shown by object-level deduction  that is  s - p and p|-~s. 
 deflq 
 equalfpick.p u v z  
 if listp z   
 iffequal u car z   
 if member.p v  cdr z   
 plessp u v  
nil  
 if equal v car z   
 if member.p u  cdr z   
 plessp u v  
nil  
    pick u v cddr z     nil  
  
 deflq 
 equal member.p x l  
 if l1stp l  
 iffequal x  car l   t 
 member.p x  cdr l    
nil   
  


f. brown and p. liu 1 


1 f. brown and p. liu 
the scheme for  diffl x z a  is: 
 equal all xfall z all a p x z a     
 ani  all x all z all a implles or not listp x   
 not ex bfequal a cons car x  b      
 p x z a      
 all x all z all a implies and listp x  
 ex b and equal a cons car x  b   
 p  cdr x  z b     
 p x z a        
the scheme for  adjdl x z  is: 
 equal all x all z p x z    
 andfall x all z implies or equal x z  
 not ex y adj x y     
 p x z     
 all x all z implles and not equal x z   
 ex y and adj x y  p y z    
 p x z        
   the induction scheme for  adjl a  is ignored since it has a measured argument which is a bound variable. the induction scheme for  diffl x z a  is subsumed by the induction scheme for  adjdl x z ; so the adjdl induction scheme is used. the system uses heuristics and follows the induction principle to split the original conjecture into two cases as above. the details of the mechanical proof are generated in  brown&liu 1 . 
v  conclusions 
   a new logic programming language has been developed which is based on quantifier elimination techniques and axiomatization. unlike other logic program systems  it does not involve any unification algorithm. this system handles a number of problems better than unification-based logic programming system. for example  this system allows the proper axiomatization of negation  a smooth interaction between functions and relations  and an ability to write specifications and to verify the correctness of programs using a generalized noetherian induction rule. also  it extends previous work in program verification to the problem verifying recursively defined relations whose definition bodies contain quantifiers. 
acknowledgements 
the work described here has been supported in part by the 
army research office under grant daag 1-k-1 and in part by the national science foundation under grant dcr-1. 
   the authors would like to thank prof. norman martin and ruey-juin ghang for their helpful comments to earlier drafts of this paper. our thanks also go to the referees for their useful suggestions. finally  we thank ching-hua ghow and chinlaung lei for their tips on using text editor. 
