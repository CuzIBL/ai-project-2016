 
terminological knowledge representation systems  tkrss  are tools for designing and using knowledge bases that make use of terminological languages  or concept languages . the tkrs we consider in this paper is of practical interest since it goes beyond the capabilities of presently available tkrss. first  our tkrs is equipped with a highly expressive concept  language  called alcnr  including general complements of concepts  number restrictions and role conjunction. second  it allows one to express inclusion statements between general concepts  in particular to express terminological cycles. we provide a sound  complete and terminating calculus for reasoning in alcnr-knowledge bases based on the general technique of constraint systems. 
1 	introduction 
a general characteristic of many proposed terminological knowledge representation systems  tkrss  such as b a c k   l o o m   classic  k r i s    rich  1: woods and schmolze  1  is that they are made up of two different components. informally speaking  the first is a general schema concerning the classes of individuals to be represented  their general properties and mutual relationships  while the second is a  partial  instantiation of this schema  containing assertions relating either individuals to classes  or individuals to each other. 
   retrieving information in actual knowledge bases  kbs  built up using one of these systems is a deductive process involving both the schema  tbox  and its instantiation  abox . 
   during the realization and use of a kb. a tkrs should provide a mechanical solution for at least the fol-
   *this work has been supported by the esprit basic research action n.1 compulog 1 and by the progetto finalizzato sistemi informatici e calcolo parallelo of the cnr  italian research council . 
   +this research was partly done while the first author was visiting the dipartimento di informatica e sistemistica. universita di roma  la sapienza . 
1 	knowledge representation 
lowing problems  from now on  we use the word concepts to refer to classes : 
1. concept satisfiability: given a kb and a concept c  does there exist at least one model of the kb assigning a nonempty extension to c  
1 subsumption. given a kb and two concepts c and d  is c more general than d in any model of the kb  
1. kb-saiisft ability  are an abox and a tbox consistent with each other  
1. instance checking: given a kb  an individual a and a concept c  is a an instance of c in any model of the k b 1 
   up to now  all the proposed systems  except for k r i s   give incomplete procedures for solving the above problems 1. that is  some inferences are missed  in some cases without a precise semantical characterization of which ones are. if the designer or the user needs a  more  complete reasoning  she/he must either write programs in a suitable programming language  or define appropriate inference rules completing the inference capabilities of the system  as in back  loom  and clas-
sic . 
   in our opinion incomplete procedures are just a provisional answer to the problem-the best possible up to now. in order to improve on such an answer  a theoretical analysis of the general problems 1 must be done. but most importantly  theoretical analysis is needed for making cyclic definitions of concepts  see  nebel  1  chapter 1   fully available in tkrss. such a feature is of undoubtable practical interest  yet present tkrss can only approximate cycles  by using forward inference rules. 
   previous results do not deal with the problems 1 in their full generality. the problems are studied in  nebel  1  chapter 1   but only incomplete procedures are given  and cycles are not considered. in  donini et a/.  1  the complexity of instance checking has been analyzed  but only kbs without a tbox are treated. previous theoretical work on cycles was done in  baader  1b; baader  1a; nebel  1; nebel  1; schild  1   but only kbs formed by the i box alone are considered. moreover  these approaches do not deal with number restrictions  except for  nebel  1  section 1.1    which constitute a basic feature already provided by many tkrss  and the techniques used do not seem easily extensible to reasoning with a boxes. 
¡¡in this paper  we propose a tkrs equipped with a highly expressive language of practical significance  and prove the decidability of problems 1. in particular  our system makes use of the language alcnr.  which supports general complements of concepts  number restrictions and role conjunction. moreover  the system allows one to express inclusion statements between general concepts and  as a particular case  terminological cycles we prove decidability by means of a suitable calculus  which is developed within the quite well established framework of constraint systems  see  donini et al.  1a: schmidt-schaub and smolka  1   thus exploiting a uniform approach to reasoning in tkrss. moreover  our calculus can easily be turned into a decision procedure. 
   the paper is organized as follows. in section 1 we introduce the language  and we give it a tarski-style extensional semantics  which is the most commonly used in section 1 we provide a calculus  and show its correctness and termination. in section 1 we consider a refinement of our calculus  working in exponential space. in see tion 1 we establish the equivalence of general inclusion 
statements and general concept definitions using the descriptive semantics. finally  we discuss in detail several practical impacts of our results in section 1 for the sake of brevity proofs are omitted. they can be found in  buchheit et al.  1 . 

   a kb built by means of concept languages is formed by two components: the intenstonal one  called the tbox  and the extensional one  called the abox. 
   we first turn our attention to the tbox. as we said before  the intensional level specifies the properties of the concepts of interest in a particular application. syntactically  such properties are expressed in terms of so-called inclusion statements  see  nebel  1  chapter 1  . an 
inclusion statement  or simply inclusion  has the form 
	buchheit  donini  and schaerf 	1 
   

1 	knowledge representation 

	buchheit  donini  and schaerf 	1 

1 	knowledge representation 
   

1 	discussion 
in this paper we have proved the decidability of the main inference services of a tkrs based on the concept language alcnr. we believe that this result is not only of theoretical importance  but has the following impacts on existing tkrss. 
   first of all  a complete procedure working in exponential space can be easily devised from the calculus provided in sections 1 and 1. from this procedure  one can build more efficient  but still complete  ones by ripplying optimization techniques. such procedures might work well in practical cases  despite their worst case intractability. 
   secondly  a complete procedure  possibly optimized  offers a benchmark for comparing incomplete proredures  not only in terms of performance  but also in terms of missed inferences. in fact  incomplete procedures can be meaningfully compared only if missed inferences are considered. however  to recognize missed inferences over large examples  one needs exactly a complete procedure-even if not an efficient one like ours 
   thirdly  new incomplete procedures can be obtained from the calculus by modifying some of the propagation rules. since the rules build up a model  modifications to them have a semantical counterpart which give* a precise account  of the incomplete procedures obtained. for instance  define the depth of a variable x as the number of variables which are predecessors of x then  an incomplete calculus could be devised  which generates variables only to a given depth-say  linear depth in the size of the kb. this calculus would miss contradictions  and hence inferences  by refutation  occurring in variables which are  far away  from the known individuals of the kb  and this is a meaningful explanation of the incompleteness  even for a non-expert user. from a com putational point of view  an immediate consequence of the complexity analysis carried over in this paper is that such an incomplete procedure would run in polynomial space. 
acknowledgements 
maurizio lenzerini inspired us to this work and contributed to the paper in several discussions. franz baader and werner nutt made many helpful comments on earlier drafts. scott benson helped us in improving the english. the third author also acknowledges yoav shoham for his hospitality at the computer science department of stanford university. 
