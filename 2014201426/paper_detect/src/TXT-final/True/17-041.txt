 
in a binary-search algorithm for the computation of a numerical function  the interval in which the desired output is sought is divided in half at each iteration. the paper considers how such algorithms might be derived from their specifications by an automatic program-synthesis system. the derivation of the binarysearch concept has been found to be surprisingly straightforward. the programs obtained  though reasonably simple and efficient  are quite different from those that would have been constructed by informal means. 
introduction 
some of the most efficient algorithms for the computation of numerical functions rely on the technique of binary search; according to this technique  the interval in which the desired output is sought is divided in half at each iteration until it is smaller than a given tolerance. 
　　for example  let us consider the following program for finding a real-number approximation to the square root of a nonnegative real number r. the program sets z to be within a given positive tolerance e less than 
this is a classical square-root program based on one that appeared in wensley . the program establishes and maintains the loop invariant that z is within v less than belongs to the half-open interval  z  z + v . at each iteration  the program divides this interval in half and tests whether 〔r is in the right or left half  adjusting z and v accordingly  until v is smaller than the given tolerance e. the program is reasonably efficient; it terminates after  iterations. 
　　analogous programs provide an efficient means of computing a variety of numerical functions. it is not immediately obvi-
this research was supported in part by the national science 
foundation under grants mcs-1 and mcs-1  by the defense advanced research projects agency under contract n1-c-1  by the united states air force office of scientific research under contract afosr-1  by the office of naval research under contract n1-c-1  and by a contract from the international business machines corporation. 
richard waldinger 
artificial intelligence center 
　　　sri international ous how such programs can be developed by automatic programsynthesis systems  which derive programs to meet given specifications. some researchers  e.g.  dershowitz and manna   smith   have suggested that synthesis systems be provided with several general program schemata  which could be specialized as required to fit particular applications. binary search would be one of these schemata. the system would be required to discover which schema  if any  is applicable to a new problem. 
　　it may indeed be valuable to provide a synthesis system with general schemata  but this approach leaves open the question of how such schemata are discovered in the first place. to our surprise  we have found that the concept of binary search emerges quite naturally and easily in the derivations of some numerical programs and does not need to be built in. the programs we have obtained in this way are reasonably simple and efficient  but bizarre in appearance and quite different from those we would have constructed by informal means. 
　　the programs have been derived in a deductive framework  manna and waldinger    1b   in which the process of constructing a program is regarded as a task of proving a mathematical theorem. according to this approach  the program's specification is phrased as a theorem  the theorem is proved  and a program guaranteed to meet the specification is extracted from the proof. if the specification reflects our intentions correctly  no further verification or testing is required. 
　　in this paper we outline the derivation of a numerical program up to the point at which the binary-search concept emerges and discuss what it indicates about the prospects for automatic program synthesis. 
　　we assume familiarity with the deductive-tableau approach to program synthesis; readers who would like an introduction are referred to the full version of this paper  manna and waldinger  1a  . in the full paper  we also show several analogous binarysearch programs that have been developed by the same method  including quotient programs for the nonnegative reals and integers. 
the derivation 
in the theory of real numbers  the specification for the realnumber square-root program is 

in other words  we want to find an estimate z that is within a tolerance less than the exact square root of r  where we may assume that r is nonnegative and e is positive.   

we begin accordingly with the tableau 

the assertion and goal of this tableau are the input and output conditions  respectively  of the given specification; the output entry of the goal is the output variable of the program. 
the discovery of binary search 
we are about to apply the resolution rule to goal 1 and itself. 
to make this step easier to understand  let us write another copy of goal 1. 

we have renamed the variable of the second copy of the goal  so that the two copies have no variables in common. 
　　the boxed subsentences of the two copies of the goal are unifiable; a most-general unifier is 

therefore  we can apply the resolution rule between the two copies of goal 1 to obtain 

by application of transformation rules  including the rule 


     according to goal 1  it suffices to find a rougher estimate i  which is within a tolerance 1e less than 〔r  the exact square root of r. for then either ♀ + e or z itself will be within c less than 
〔r  depending on whether or not z + e is less than or equal to jr. the two possibilities are illustrated below: 

　　goal 1 contains the essential idea of binary search as applied to the square-root problem. although the idea seems subtle to us  it appears almost immediately in the derivation. the step 
	z. manna and r. waldinger 	1 
is nearly inevitable: any brute-force search procedure would discover it. 
　　the derivation of goal 1 is logically straightforward  but the intuition behind it may be a bit mysterious. let us paraphrase the reasoning in a more geometric way. our initial goal 1 expresses that it suffices to find a real number z such that 〔r belongs to the half-open interval  z  z + e . our rewritten goal 1' expresses that it is equally acceptable to find a real number z such that 〔r belongs to the half-open interval  we shall be content to achieve either of these goals; i.e.  we shall be happy if 〔r belongs to either of the two half-open intervals. in taking z to be z + e  we are concatenating the two intervals  obtaining a new half-open interval twice the length of the original. it suffices to find a real number z such that 〔r belongs to this new  longer interval  because then 〔r must belong to one or the other of the two smaller ones. 
introduction of the recursive calls 
　　let us continue the derivation one more step. by the wellfounded induction rule  we may introduce the induction hypothesis 

in other words  we assume inductively that the output 1qrt x  v  of the program will satisfy the input-output condition for any inputs x and v such that  the boxed subsentences 
of goal 1 and the induction hypothesis are unifiable; a most-
general unifier is 

we obtain  after true-false transformation  
   note that at this point three recursive calls sqrt been introduced into the output entry. the condition and ensures that the arguments r and 1e of these recursive calls will satisfy the input condition for the program  that r is nonnegative and 1c is positive. the condition 
ensures that the newly introduced recursive calls cannot lead to a nonterminating computation. the well-founded relation  w that serves as the basis for the induction is as yet unspecified. 
     we omit those portions of the derivation that account for the introduction of the base case and the choice of the well-founded relation. the final program we obtain is 

a few words on this program are in order. 
discussion of the program 
　　the program first checks whether the error tolerance e is reasonably small. if is very big  that is  if max r  1    then 

1 z. manna and r. waldinger 
the output can safely be taken to be 1. for  because  we have 

 and hence 
thus  1 satisfies both conjuncts of the output condition in this case. 
   if e is small  that is  the program finds a rougher estimate sqrt which is w i t h i n l e s s than 〔r. the program asks whether increasing this estimate by will leave it less than if so  the rough estimate is increased by if not  the rough estimate is already close enough. 
     the termination of the program is a bit problematic  because the argument e is doubled with each recursive call. however  the argument r is unchanged and recursive calls are evaluated only in the case in which max r  1   so there is a uniform upper bound on these increasing arguments. more precisely  the wellselected in the proof is one such that 
　　if the multiple occurrences of the recursive call  are combined by eliminating common subexpressions  the program we obtain is reasonably efficient; it requires recursive calls. 
　　our final program is somewhat different from the iterative program we considered in the beginning. the iterative program divides an interval in half at each iteration; the recursive program doubles an interval with each recursive call. division of the interval in half occurs implicitly as the recursive program unwinds  i.e.  when the recursive calls yield output values. 
　　it is possible to obtain a version of the iterative program by formal derivation within the deductive-tableau system. although the derivation and the resulting program are more complex  it requires two additional inputs   it was this derivation we discovered first  because we were already familiar with the iterative program. 
     we first found the recursive program in examining the consequences of purely formal derivation steps  not because we expected them to lead to a program but because we were looking for strategic considerations that would rule them out. when we examined the program initially  we suspected an error in the derivation. we had not seen programs of this form before  and we certainly would not have constructed this one by informal means. 
discussion 
　　the derivations were first discovered manually; the realnumber square-root derivation was subsequently reproduced by yellin in an interactive program-synthesis system. the only automatic implementation of the system  russell   is unable to construct the derivation for a simple reason: it never attempts to apply the resolution rule to a goal and itself. 
　　the results of this investigation run counter to our usual experience. it is common for a bit of reasoning that seems simple and intuitively straightforward to turn out to be difficult to formalise and more difficult still to duplicate automatically. here the opposite is true: an idea that requires a substantial leap of human ingenuity to discover is captured in a few easy formal steps. we may hope that truly original ideas will arise from the fortunate application of simple mechanisms. 
acknowledgments 
we would like to thank martin abadi  yoni malachi  eric 
muller  mark stickel  jonathan traugott  and frank yellin for discussions and helpful suggestions on the subject of this paper. 
