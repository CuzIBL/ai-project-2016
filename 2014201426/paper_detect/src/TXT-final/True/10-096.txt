theorem proving with structure sharing and efficient unification 
	a l b e r t o 	m a r t e l l i 
i e i - cnr 
via s.maria 1  1 pisa  italy 
ugo montanari 
1st. di scienze dell'informazione  univ. of pisa 
corso i t a l i a 1  1 pisa italy 
	e f f i c i e n t 	proof 	checking 
　　　the interest in automatic theorem proving  which was very high in the al community in the late sixties  has decreased. one of the reasons was the impossibility by now of obtaining a theorem prover of wide applicability. in particular  complete  search strategies based on resolution have been heavily criticized. in fact it is f e l t that the cru cial problem is not to have an efficient prover but to be able to communicate with it and to drive i t . it is also f e l t that efficiency improvements cannot increase significantly the performance. 
　　　while this skepticism is partially justified in the case of automatic  theorem proving  we think that a careful complexity analysis may help in improving substantially the performance of proof checkers. we agree with kowalski that logic formal isms are to be considered as programming languages 
and proof checkers as interpreters. thus a powerful logic formalism and an efficient proof checker can allow to prove manually theorems whose automatic proof would be otherwise very far from the state of the art. as a step in this direction  in boyer  moore 1  a clever technique has been developed for storing shared structures in resolution-based proof checkers. however  since the standard u n i f i cation algorithm does not always take advantage of structure sharing  its performance in this setting can be extremely bad. we show in   martel.1i montana ri 1  a simple example where checking a proof of n steps may require 1 operations. 
	e f f i c i e n t 	u n i f i c a t i o n 
　　　quasi linear and linear algorithms for unifica tion have been recently proposed  see for instance   m a r t e l l i   montanari 1  . the quasi linear algorithm uses counters to discover when a variable is ready to be bound and is particularly appealing in practice  since it is only slightly more complicated than the standard algorithm and needs only the usual  top-down  lisp-like data structures. however  the time spent for initializations might be quite heavy  especially for small cases  and it could be reduced only through a close integration   of the unification algorithm in the whole theorem prover. 
　　　in   m a r t e l l i   montanari 1  we thus suggest to merge our quasi linear unification algorithm 
with boyer and moore technique. while the simple juxtaposition of the two methods reduces the worst case above to 1 n   we propose in addition to modify them in order to make explicit further sharing and to eliminate non accessible variables. 
	improving boyer 	and moore 	technique 
       we suggest three m o d i f i c a t i o n s to boyer and moore's s t o r i n g technique f o r the purpose of adapting to it our e f f i c i e n t u n i f i c a t i o n a l g o r i t h m   m a r t e l l i   mon t a n a r i 1  : 
i  counter contents are stored together with variable bindings to avoid i n i t i a l i z a t i o n s ; 
i i   bindings are sometimes rewritten to increase sharing for making later unifications faster; 
i i i   bindings of non accessible variables are detected and not stored  to keep the data base smaller. 
　　　besides avoiding i n i t i a l i z a t i o n s   counter stojr ing has the alternative advantage of allowing to 
v i s i t   during unification  only the l i t e r a l s actually resolved in the proof. the standard technique does not use counters  but would need them anyway if it had both to detect non accessible variables and to restrict the visited l i t e r a l s as above. 
　　　with respect to point i i     we actually have a storage-time tradeoff. in fact in boyer and moore's technique every variable in some theorem t is e i ther free or bound exactly once in t or in some theorem derived earlier  during the proof of t. here instead we may assign a variable many times  to express structure matchings which take place  or 
become apparent  during the proof. 
　　　the time saving produced by those extra bindings can be exponential with the length of the proof. furthermore we feel that the sharing express ed by such bindings is always potentially useful  and suggestive for the structure of the theorem proved. 
