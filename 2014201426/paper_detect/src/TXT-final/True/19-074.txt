 
　　an interviewer has two kinds of knowledge. one is about a domain under consideration and the other is knowledge for interview i t s e l f which makes the interviewer an expert of i n t e r v i e w . the l a t t e r seems to be independent of the domain because an experienced interviewer  such as a tv interviewer  can carry on his tasks in many f i e l d s . furthermore  we believe that the interview knowledge consists of several interview knowledge p r i m i t i v e s . based on t h i s idea  we are developing sis  a shell for interview systems which has seven question strategy p r i m i t i v e s as the knowledge for i n t e r v i e w i n g . generality and effectiveness of sis are shown through two implementation examples of interview systems  i1s and more. the seven p r i m i t i v e s are shown to be e f f i c i e n t for the two system whose domains and tasks are e n t i r e l y d i f f e r e n t . 
1  introduction 
　　interviewing plays a crucial role in many f i e l d s to make ambiguous knowledge c l e a r . in b u i l d i n g expert systems  for instance  the h e u r i s t i c s are generally obtained through interview of a knowledge engineer with a domain expert. in software s p e c i f i c a t i o n   interview is indispensable to e x t r a c t i o n of requirements from customers. 
　　the authors have been i n v e s t i g a t i n g interview as a discourse aiming at t r a n s f e r r i n g  ambiguous  knowledge. the purpose of t h i s research is to uncover the knowledge and mechanism necessary for i n t e r v i e w   to discuss the question strategies used in interview and to develop a framework for interview systems. the authors have developed i1s  an i n t e l l i g e n t interview system  whose task is to interview a data base customer and to design l o g i c a l s t r u c t u r e of the data base as a part of t h i s study so f a r   l l . 
　　an experienced knowledge engineer can interview domain experts and construct expert systems in various domains. a tv interviewer can also interview persons in many f i e l d s . these observation suggest t h a t they have domain independent s k i l l s 
 knowledge  for i n t e r v i e w i n g . in the development of i1s  it was an important point to d i s t i n g u i s h the domain-independent interview knowledge for l o g i c a l design of data base from domain-dependent one and four domain-independent question strategies were 
obtained. 
　　moreover  such domain-independent knowledge for i n t e r v i e w i n g dependent on the task consists of several p r i m i t i v e s independent of the task. for example  a careful comparison between the four question s t r a t e g i e s of i1s and those of a knowledge a c q u i s i t i o n system  m1re 1}  reveals some knowledge common to the both. this allows us to consider an interviewer as an expert system and suggests the p o s s i b i l i t y of a general framework for interview systems. this paper describes a shell for interview systems  sis for short  based on t h i s idea. of course  there are many other aspects of interview systems and knowledge a c q u i s i t i o n systems such as r1get  ets  e t c . the authors are especially interested in discussion on i n t e r v i e w e r ' s question strategies inherent in i n t e r v i e w i n g . 
　　various interview systems can be constructed by using sis with description of the meta knowledge of the domain and task. sis has seven question strategy p r i m i t i v e s . one can define various question strategies  dependent on the task  by specifying the combination of the p r i m i t i v e s . 
1. sis: shell for interview systems 
　　sis is a shell for constructing interview systems. a general flow of interviewing consists of three stages. f i r s t   an interviewer requires an interviewee of i n i t i a l information which becomes a cue for the following interview. the interviewer constructs an incomplete domain model in t h i s stage. and he usually has many questions at t h i s time. we c a l l such questions ' a t t e n t i o n s ' . in the second stage  the interviewer asks the interviewee additional questions according to the a t t e n t i o n s . f i n a l l y the interviewer produces an output of the interview. 
　　in order to carry out i n t e r v i e w i n g   an interview system must have the f o l l o w i n g functions and knowledge for them: 
 a  to construct a domain model from information extracted from an interviewee  
 b  to 	make attentions in the f i r s t and second stages  
 c  to i n f e r about the a t t e n t i o n s and to ask the interviewee questions based on them   d  to make an output from the domain model and  e  to analyze and generate sentences. 
　　on the basis of the above discussions  we have designed an a r c h i t e c t u r e of sis. it consists of four modules such as parser  generator  memory and inference engine. the parser analyzes input sentences  while the generator generates sentences for the interviewee. they employ a demon-based mechanism. the memory contains knowledge for interviewing described by a system developer and information obtained through i n t e r v i e w . seven 
modules for question strategy p r i m i t i v e s  qps  b u i l t in the memory. they check the information obtained from the interviewee and generate a t t e n t i o n s . the inference engine is e s s e n t i a l l y a 
	kawaguchi  mizoguchi  yamaguchi  and kakusho 	1 

production system and processes the attention. 
   domain model in sis is a kind of network composed of domain constituents  dcs  as nodes and domain links  dls  as arcs. dcs are represented in terms of frames  while knowledge for inference about attention is represented by rules in sis  an interview system developer can describe the knowledge  a    d  and  e  discussed above by defining prototypes of these frames with associated demons for parsing and generating  and knowledge  c  by defining rules with some extra information for controlling the system. 
   whenever any information is given to the memory  it scans the domain model to check if any part of the model satisfies the conditions for making attentions. the conditions correspond to the knowledge  c . they are defined by specifying the objects of application of qps  
   qps have their own conditions when to make attentions. they apply the conditions to all objects defined by the system developer and make attentions when the conditions are satisfied. the attentions indicate important issue underlying in domain model to be discussed with the interviewee. by defining inference rules for the attentions  the system developer can control the behavior of the system to the questions. 
   the detailed description of the qps' conditions are shown below. 
 1  planner  see figure 1  
   for paths and dcs obtained by tracing dls from a dc  
 a  there are prototypes which could be chained to the paths  
 b  there are more than one path to reach one dc or 
 c  there are paths from the same dc to different one. 
the chainability in  1  is determined from intersection of predefined slot sets of each frame. 
 1  script tracer 
   there is a script for asking questions in a prototype corresponding to a dc. 
 1  unknown object detector 
   information which is not defined in prototypes are entered  
 1  discord  detector 
   slot values of the dcs corresponding to each other are not the same  
 1  ambiguity  detector 
there are more than one value in a slot  
 1  certainty manager 
   a certainty factor assigned to a dl is out of the range the system developer defined. 
 1  constraint  checker 
a dcs slot value violates its constraint. 

fig. 1 planner's conditions. 
1 	knowledge acquisition 
   qps can be used to detect many patterns which suggest the necessity of asking questions for more information. 
1  examples 
   this section describes implementation of two interview systems  which are entirely different in their tasks and domains. effectiveness and generality of qps will be shown through these examples. 
1 i1s 
   i1s  intelligent interview system for logical design of data base  interviews a data base customer and designs logical structure of data base according to the following steps: 
 1  it 	asks 	questions 	of 	the 	customer 
 interviewee  to get requirements of a target data base as initial information  
 1  it constructs a domain model called planstructure and refines it by asking the customer some questions  
 1  it makes conceptual schema of the target data base from the plan-structure as its output. 
   i1s employs the concept of plan to represent a domain. in the domain model called plan-structure  each noun or verb is represented as a frame. a noun frame contains several attributes which the corresponding entity has  while a verb frame has description of its activity represented in terms of the concept of plan. 
   various question strategies are used by i1s to refine a plan-structure and design conceptual schema. we have obtained four kinds of strategies as follows: 
 1  planning  
 1  making 	the detailed 	level 	of 	description equal  
 1  using scripts for nouns and  1  interrupting when an interviewee mentioned 'time'. 
while all of these strategies can be described in terms of qps  we will show an example concerning planning strategy. 
   i1s reasons about activities to get unknown activities or relations between them based on the current plan-structure and shows the interviewee the results. we call this process planning. suggestions presented by this planning strategy are very effective because it is rather difficult for a customer to prepare all data items necessary for his data base in advance. for instance  suppose a customer said a fact shown in figure 1 a . a planstructure corresponding to this fact is shown in 
 b . 	if 	a 	dictionary 	of i1s 	contains 	semantic 
                                                             1 description of 'stock' as figure 1 c   i s finds it and asks an interviewee some questions as shown in  d  because the precondition of 'construct' can be satisfied by the goal of 'stock' 
   in order to implement this strategy by sis  a 
   system developer defines prototype frames of verbs with appropriate demons for translating english sentences into dcs and vice versa. then he implements the planning strategy by using planner's condition  1  to search candidate verbs. 
'found candidate' attention will be generated when one of the following conditions are satisfied: 
 1  there are some prototypes  dcs  whose goals are equivalent to precondition of 
a dc  prototype . 
 1  there are some dcs whose goals are equivalent to precondition of a dc  
and finally  he describes the knowledge of how to process the attention for planning strategy in rule form. after defining all of these strategies  sis will automatically parse initial information into plan-structure  apply qps  make attention  infer about them  and make question and answer with the interviewee. 
   the system works in an interview as shown in figure 1. suppose an interviewee mentioned the fact shown in figure 1 a  as a requirement. first  the parser makes constituents of plan-structure from interviewee's input  1 . then  they are stored in the memory. qps are applied to the constituents and in this example  the 'construct' dc and 'stock* prototype satisfy the condition for making found candidate attention. the attention is stored in the attention list. 
   after obtaining the initial information  the system begins to process the attentions. attentions are taken out from the attention list one by one  1  and sent to the inference engine. in this example  the system asks the interviewee questions as shown in figure 1 a . 
1 m1re 
   more is a knowledge acquisition system for constructing diagnostic expert systems. it first asks a domain expert about hypothesis  symptoms and other conditions  as initial information   then constructs a domain model. a domain model constructed by more is a network in which hypotheses  symptoms and conditions are represented as nodes and linked together by 'links' or 'paths'. next  more applies eight question strategies to the model  asks the expert and refines it. finally  it makes a rule set for the expert system from the model. 
	among 	the 	eight 	question 	strategies  
'differentiation' is one of the most basic ones. a symptom s is said to differentiate hypothesis hi from h1 when there is a path from h1 to s  and no path from h1 to s. when there is a pair of hypotheses for which there is no differentiating symptom  more asks a domain expert about i t . 
some parts are constructed from other parts which are supplied from other companyies.  a  fact. 


fig.1 processing example of planning stragety. 
   'differentiation' strategy can be implemented in sis by using planner's condition  c  to detect notdifferentiated hypotheses. the planner is directed to start tracing from a symptom and to find paths from a symptom to different hypotheses. a domainmodel will be automatically constructed by defining prototype frames of symptoms and hypotheses with demons for translating input information into frames linked each other. a system developer also describes rules for checking if there are really not differentiating symptoms when 'same source' attention is made  and asking an expert new symptoms. 
   in an interview  when the pair of hypotheses to which there are same paths from a symptom are found  the attention 'same source  will be generated. then the system will infer how to treat the attention using the rules described by the system developer and ask an expert for a new additional symptoms. 
1.. conclusion 
   we have described sis  a shell for interview systems. sis has seven question strategy primitives for representing domain-dependent knowledge for interviewing. they are essentially detectors of 
problems in the network representing domain model and can be used as drivers for interviewing. the generality and effectiveness of the primitives have been evaluated through the implementation examples of two interview systems  i1s and more. 
   sis is under implementation on hewlett-packard's hp-1 model 1 using c prolog. 
