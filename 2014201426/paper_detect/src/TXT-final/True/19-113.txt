 
     it is a characteristic of computer operating systems that they contain actions or commands which transfer objects such as files and directories from one state to another. in formalizing the domain of operating systems we should build representations of actions which circumscribe the transfer of objects in the system. transfer semantics is a knowledge scheme that embodies such representations. knowledge structures called object frames are used to represent numerous objects. action frames describe the effects of actions in terms of preconditions  postconditions  actions and actors. preconditions denote possible or preferred sets of objects that an action will affect. postconditions relate the state of object sets after an action has occurred. actions include the particular actions that cause transfer. an actor is the person  or user  who performs some action. the power of transfer semantics lies in the inference rules that manipulate action frames. it is applied to the unix* and tops-1* operating systems in a program called os consultant os consultant will be used by new users to learn operating system concepts. 
	i 	introduction 
a. introducing transfer semantics 
     it is our belief that people think  however abstractly  of operating system commands in terms of preconditions and postconditions. preconditions and postconditions are sets of states of objects before and after a command is executed. most english queries about operating systems involve users expressing the goal of obtaining some command. commonly  users will try to describe the affect of a required command on some objects . for example  in the query   how do i print out a file with pages    the user is expressing the need for some command to print files with pageheaders. 
  unix is a trademark of at&t bell laboratories. 
  tops-1 is a trademark of the digital equipment corporation.      it is the constraints specified in a user query that enable us to recognize a command. therefore  it seems useful to build knowledge structures for describing commands so that these structures are closely related to possible natural language expressions of such commands. natural language queries involving descriptions of commands can be parsed into some high-level meaning representation. to interpret queries effectively we need access to domain-specific knowledge. such knowledge could be formulated as abstract representations of actions or objects which are matched to natural language representations in order to decipher them. 
     transfer semantics  ts  is a developing knowledge representation scheme used to formalize actions and preferred objects affected by actions. by preferred objects we mean objects that are usually affected by some action. we use ts to represent the means by which operating system commands transfer objects from one state to an other. in ts operating system objects are represented by object frames. the object frames are structured in a hierarchic  tree-like  network representation. action frames are used to specify transfer relations between object frames. 
     each action frame is a formal representation of operating system actions or commands. action frames consist of preconditions  postconditions  actions and actors. preconditions are sets of states of objects existing before commands take effect. postconditions involve sets of states of objects after a command is performed. such conditions specifying states of objects are preferred  i.e. we do not specify all conditions on frames  only those that usually occur. various rules of inference are used to manipulate preferred conditions in order to expand the meaning of each frame. actions include the particular command s  that cause transfer of object states. this representation can then be used effectively to understand natural language expressions describing actions. the ideas herein could be applied to other domains. 
b. the os consultant and its relation to other work 
     os consultant  oscon  is a system  programmed in common lisp  which will help novice users learn operating system concepts. while 
	mckevitt and wilks 	1 

the capability of answering the query in terms of unix. oscon is designed in the form of an english interface to a database *. examples of other interfaces to databases are found in martin et al.  1  & waltz  1 . although we plan to build an english interface which teaches novice users we do not intend the system to become a command-level interface such as cousin  see hayes 1 . 
　　in oscon parsed english sentences are translated into formal queries with uninstantiated variables. these formal queries are instantiated by a database of operating system concepts and returned to the interface where answers are produced in english. the formal queries to the database are represented in the form   {p} a {q} u . p and q represent preconditions and postconditions for any action a. u represents the particular person  user  performing a. original work on the formal queries is discussed in douglass & hegner  1  and hegner & douglass  1 . 
　　an important distinction of oscon  as an interface to a database  is that transfer semantics is used to formalize abstractions of database detail in the interface itself. the interface contains abstract knowledge about the relationships between unix objects and actions and includes four levels of meaning representation. initially  a shallow representation is produced by a syntacticosemantic parser. examples of such parsers are described by ball and huang in wilks  1 . the shallow representation is translated into a meaning representation of embedded concepts where case labels are attached to various items. the embedded concept representation is replaced by a domain-specific structure after processing with transfer semantics. this domainspecific structure is further translated into a formal query with uninstantiated variables. finally  the formal query is passed to a database where instantiation occurs. 
c. relation to other work 
　　wilensky et al.  1  1  are also working on building an understanding system called unix consultant  uc  which processes natural language queries about unix. the unix consultant embodies a knowledge representation called kodiak. the central theme of kodiak is that it is a relation-based system. kodiak relations have a fixed number of argument positions and each argument position of a relation is itself a full-fledged object. the meaning of argumentobjects is derived from the named relation that holds between them. kodiak has a wide representational scope and still maintains the possibility of conforming to a canonical form. at the action frame level transfer semantics is also a relation-based system where actions are described in terms of precondition-postcondition correspondence. in transfer semantics the meaning of any action is the precondition and postcondition set for that action. wilensky decides to represent all concepts 
　* a complete formal database is being built by dr. steve hegner at the university of vermont. 
1 	knowledge representation 
with relations. we only see the need to represent actions which manipulate objects in terms of relations. many objects are not defined by relations in transfer semantics although there may be relations between them. 
　　the unix consultant system is not intended to handle queries on operating systems other than unix. in oscon we are putting more effort into understanding complex queries where there are a number of operating system commands interrelated with each other  to denote some higher level process. it seems that transfer semantics which captures the meaning of commands  is a suitable formalism for abstracting operating system behavior. 
　　our object frames are similar to the frames proposed by minsky  1 . yet  minsky decides  p. 1    ...that any event  action change  flow of material or information can be represented by a two-frame generalized event.  this is in contrast to our system where single action frames are used to represent state changes of objects. wilks  1  describes semantic structures called pseudo-texts for natural language understanding. a pseudo-text is a structure of factual and functional information about some concept and is intended to fall broadly within the notion of frame in the sense of minsky  charniak  and schank. pseudo-texts are also similar in function to the object frames we describe herein. our action frames have similarities with the  scripts  discussed by schank & abelson  1 . action frames could be interpreted as structured scripts for various 
operating system commands. 
　　the arrangement of object frames is based on many semantic network and frame systems. examples are bobrow & winograd  1  and brachman  1 . our network structure is closely related to that of fass  1  where he uses dictionary entries called  senseframes  to define word senses in a sense network for collative semantics. 
ii transfer semantics 
a. object frames 
　　various operating system objects such as  files    protection    commands    last-read-time    creation-time   and  password  are represented by object frames. object frames exist statically in the system before any processing begins. each object frame has a set of arcs and nodes. arcs specify types of relations between some object and other related objects in a network hierarchy. nodes define characteristics of the particular object represented by a frame. object frames are a refinement of more detailed information about operating system objects residing in the static knowledge base of the database  see hegner 1 . 
　　presently  in oscon there are three types of arc relation linking objects. these are type-of  part-of and instance-of relations. it may be necessary to define other types of relation as research continues. the typeof arc relation is used to specify one object as a type of another. so  a plain file is a type of non-directory-file and a non-directory file is a type of file. a part-of arc relation indicates that one object frame is part of another. for example   creator  and  last-tape-readtime  are parts of files. each instance-of relation indicates that an object is an instance of another. the commands  lpr    cat   and  cp  are related to the  command-name  object frame by this relation. 
　　each node is a set of attributes characterizing an object frame. nodes in object frames are specified using the has relation. has relations usually contain other object frames. in figure 1 below there is an example of the object frame for protection-type. 
 o-frame protection-type 
 arcs  part-of protection   
 node  has user-designator  
 has access-privilege   has file-access    

plain-file 	device-file 
directory-password has: application tops-1 password-type 
has: user-designator access-privilege file-access 
figure 1. 
so  from this diagram we note such relations as: 
plain-file 
is a type of non-directory file is a type of file 
is a type of container. 
　　we note above that  directory-password   a concept from the tops-1 operating system  is defined in terms of unix concepts. this will be particularly useful for helping some user who is confused as to which operating system he/she is using. 
b. action frames 
operating system actions such as  printing   
 listing    moving    deleting  and  mailing  can be represented by action frames. action frames also exist statically in the system before any processing begins. 
　　preconditions and postconditions for any action denote sets of preferred conditions on objects. not only are the conditions on objects preferred  but the actual objects themselves are also preferred. it is important that we specify preferred sets of conditions because there are many possible conditions for any action. preconditions are mentioned in most planning literature and have been used for specifying plans and goals. for example in wilensky  1  there is a description of concerns which are preconditions particularly relevant to a given plan. the term concern is synonymous with our concept of preferred conditions. 
　　preferences are used in frame selection processes where the frame with the maximum number of preferences satisfied is probably the best frame for interpreting the input. for example  the print frame will have more preferences satisfied than the list frame from the query   how do i list a file on the line printer . of course  that is because one usually associates line printers with printing rather than listing. the idea of preference is not new to artificial intelligence. it has been used by wilks  1  in preference semantics and fass  1  in collative semantics to formulate correct interpretations of natural language sentences. 
1. preconditions 
　　each action frame precondition set contains various conditions related by the logical operands and  or  and not. for example  the precondition set for the action frame  print  is: 
 preconditions 
 and  not  o-frame directory-file   
 or  and   o-frame file  
  o-frame contents  
-  o-frame visible-byte-sequence     
 and   o-frame file  
  o-frame contents  
=  o-frame visible-byte-sequence    
 o-frame print-queue   
 and   o-frame file  
  o-frame contents  
-  o-frame visible-byte-sequence        figure 1. 
　　the initial logical operand in any precondition set is usually and. the reason for this is that mandatory conditions must be anded to other conditions in the set. the optional conditions in each precondition set are ored together. the final ored condition is a default. 
in figure 1 there are three ored preconditions which are anded to one mandatory precondition. of course  the third ored condition is the default. 
　　interpreting the above set  it is noted that the mandatory condition specifies that a directory file should not be printed. of course  it is possible to print a directory by first listing it and then printing it. yet  one does not usually print directories themselves  and this is what we are concerned with here. the first optional condition specifies a preference that files are printed and their contents are preferably visible byte sequences. the second optional condition declares in 
	mckevitt and wilks 	1 
addition the existence of a printer queue. in order to print a file on the printer it is certainly useful to have a printer queue. finally  the third condition in the set is a default  and is the same as the first condition. we do not worry about preconditions such as the system being up  the terminal working or keyboard cm-line. these are simply assumed. 
　　it is important that we represent the  weakest  precondition set for any action. by weakest  we mean the least number of  or least constraining  preconditions necessary to characterize some action sufficiently. for example  we know non-directory files to be types of files  figure 1  and that either can be preconditions for printing. the use of files  weak  as a precondition for printing will do just as well as non-directory files  stronger . that is exactly why we reflect files in the precondition set rather than say non-directory files  or device files or plain files  which are types of file. 
1. postconditions 
　　postconditions for any action denote preferred conditions on objects resulting from the execution of that action. in all action frames the postconditions represent changes in state of the precondition set. the postconditions for the action frame  print  are shown in figure 
1. 
　　in the postcondition set below there are no mandatory conditions. hence  the initial logical operand is or. there are three ored conditions  the final one delimiting a default. the first condition declares that the file which we saw in the precondition set also exists in the postcondition set. the file doesn't disappear after printing as would be the case with a delete frame. the file still contains visible byte sequences although a filter is now also applied. filters are items such as pageheaders  line numbers and dates. also a device file exists to denote default standard output which is the terminal screen. 
　　the second ored condition tells us that a print queue exists and has a print queue entry. also  a filter may be applied to the contents of the file. the third postcondition in the set is again a default and specifies output to a device file  
 postconditions 
 or  and   o-frame non-directory-file  
  o-frame contents  
-  o-frame visible-byte-sequence  
 o-frame filter    
 o-frame device-file   
 and   o-frame non-directory-file  
  o-frame contents  
-  o-frame visible-byte-sequence  
 o-frame filter    
 o-frame print-queue  
 o-frame print-queue-entry   
 and   o-frame non-directory-file  
  o-frame contents  
   o-frame visible-byte-sequence    
 o-frame device-file     
figure 1. 
1 	knowledge representation 
　　we try to represent the  strongest  postcondition set for any action. by strongest we mean the maximum number of  or most constraining  postconditions necessary to characterize some action sufficiently. we know device files to be types of non-directory file  figure 1  and that either could denote postconditions for printing files. however  the use of device files  strong  as a postcondition for printing rather than non-directory files  weaker  is a more precise definition about the effects of printing. that is why we reflect device-file in the postcondition set rather than say file or non-directory file. there is no harm in weakening the postcondition set. we will see in section four that the ability to weaken postconditions is  in fact  an advantage. 
1. precondition-postcondition correspondence 
　　now  one may think there is some redundancy in the condition sets for print. for example  one condition occurs twice in the precondition set. however  we have done this because there is an exact one-to-one correspondence between the ored conditions in the precondition and postcondition sets. say  { p1  p1 ... pn } denote the ored preconditions for some action a. 
then  these are related to the ored postconditions { 
qo  q1  - qn } so that po -  q1  p1 -  q1 ... pn =  qn for action a. so  the first ored precondition in the precondition set corresponds to the first in the postcondition set  the second to the second  and so on. as there are no mandatory postconditions there is no correspondence for them at all. 
　　the one-to-one correspondence between preconditions and postconditions is implicit: it is the position of a particular condition in its precondition/postcondition set that determines correspondence. if it turns out that many some conditions need to be repeated exhaustively  it only happened once above  for action frames we can represent the correspondence explicitly by placing a marker on each condition. one may wonder what's the use of all this correspondence. correspondence aids in predicting the most likely postcondition  or precondition  for some explicitly mentioned precondition  or postcondition  in a user query. it is the ability to predict preconditions and postconditions for user queries that gives added power to the system. 
1. actions and actors 
　　it is also necessary to specify the possible actions that cause transfer between preconditions and postconditions. associated with each action will be a number of options. so  for the print frame actions are represented as: 
 actions 
 or  o-frame cat  
 o-frame more  
 o-frame ipr  
 o-frame pr  
 o-frame print  
 o-frame option-list    
figure 1. 

　　printing can be completed with any of the commands in the ored set of actions and their respective options. finally  in figure 1 we specify the actor performing the action or transfer. any user can print a file and this is represented in the actor set. 

　　to summarize  operating system actions are defined in terms of preconditions  postconditions  actions  and actors. action frames reflect the behavior of operating system actions in terms of the effect of these actions on objects. we use the notation  

to denote the fact that some user u can execute the action a to transfer the precondition set p to the postcondition set q. now that we have described object frames and action frames it is possible to show how they may be used to interpret natural language queries about operating systems. 
i l l language & transfer semantics 
　　in this section we will show how various queries could be interpreted using object and action frames. we adopt a distinction between concept description and dynamic queries. this distinction has been emphasized by hegner  1 . concept description queries are simple queries about objects involving no manipulation of those objects. dynamic queries are those which involve actions transferring objects. 
a. concept description queries 
in handling concept description queries such as  
 what is read protection   the hierarchy of object frames becomes very useful. from the network it is 
possible to locate relevant object frame relations. the following section of network is used in generating a static domain-specific representation of the latter query: 

　　now  say some user has used the tops-1 operating system for most of his computer time and decides to use unix for a change. then he/she is likely to assume that unix is similar to tops-1. one could expect queries such as   what is the permanent storage limit  . 
the following relations from the object network are used: 
directory-file 
has permanent-storage-limit has application tops-1 has similarity disk-space-hard-limit. 
　　the above relations denote the similarity between concepts from two operating systems. the similarity between disk-space-hard-limit and permanent-storagelimit is marked using has relations. this mechanism is especially useful if a user thinks in terms of one operating system but is using another. 
b. dynamic queries 
　　the object hierarchy is availed of again for dynamic queries. however  as dynamic queries involve actions  action frames must be referenced. say  for example we want to interpret the query   what is the option on the cat command which numbers lines  . looking at figure 1  the first ored condition would be matched. this condition constitutes the precondition for this particular query. the relevant postcondition is specified by the first ored condition  figure 1 . this is done by moving down the object hierarchy from filter  figure 1  to numbered-lines which are a type of filter. also  the first action in figure 1 is marked because 
 cat  was mentioned in the query. from figure 1 we mark the user as being the relevant actor. similarly  the query   how do i print a file on the line printer   matches ored precondition two  figure 1   ored postcondition two  figure 1   and no match is found in figure 1. the actor is again  user  from figure 1. 
c. rules of consequence 
　　as we mentioned earlier  it is possible to  strengthen  preconditions and  weaken  postconditions for action frames without affecting the truth of the frame. say  we have the query   how do i print a device file  . even though we only represent files in the precondition set  figure 1  it is possible to use inference rules to infer more specific preconditions. this inference capacity is implemented by moving down the object frame hierarchy from file to non-directory file to device file. 
　　in this example the inference processes are rather straightforward. they simply involve moving down the object hierarchy from one object frame to another. in the example  how do i print a device file which has pageheaders   the system should recognize pageheaders as being a precondition. now  in the object network we can derive the relations: 
pageheaders 
is a type of filter is a type of visible-byte-sequence. 
and from figure 1 we know: 
 o-frame contents 
=  o-frame visible-byte-sequence   
mckevitt and wilks 1 

　　the inference processes used here involve comparison of objects such as pageheaders and visible-bytesequences. we use a process of projection to derive pageheaders as a precondition when they are not already specified. 
　　it is also possible to  weaken  postconditions and still preserve the truth of {p} a {q}. so  the query   how do i print files on the printer   will still be interpreted from the postcondition set in figure 1 by weakening the first ored condition so that non-directory file becomes file. 
　　the processes of strengthening and weakening above are definable by logical inference rules. more specifically  they are called the rules of consequence. the above rules and other inferencing techniques are described more completely in mc kevitt  1b . in that paper there is a description of various rules and how they specify manipulation of action frames. the rules allow the system to directly infer new object preferences for action frames from the object hierarchy. minsky  1  also notes that we need some method of applying transformations between frames in a system. he says   i do not understand the limitations of what can be done by simple processes working on frames. one could surely invent some  inference-frame technique  that could be used to rearrange terminals of other frames so as to simulate deductive logic.  
　　it is important to note that only the  best  conditions are selected while matching a frame to an initial meaning representation of some query. for each condition we determine the ratio of matched to non-matched predicates. the best condition is the one with the highest ratio. for any condition to be best not all its preferences have to be satisfied. indeed  we saw above that the process of weakening postconditions is required because local preferences in conditions are not satisfied. 
d. the rule of composition 
　　many queries about unix involve more than one action to complete some process. for example  the query   how do i stop a listing of my directory  which is printing on the line printer   involves three actions:  removing    listing  and  printing . we call these queries embedded queries. the previous query is an an example of explicit embedding where three actions are explicitly mentioned. other types of embedding are described in  mc kevitt 1a . 
　　we use the notation  a1   a1   ...... an  to denote an embedding set where action a1 is embedded inside action a1  and so on. one can think of embedding in terms of a stack where an is pushed on top of an-1 and so on. interpreting the stack  the postcondition {q} from performing a1 is passed as a precondition to a1 and so on until we reach the top of the stack. for the previous query we have the embedding set   list   print   remove  and for the query   how do i print a listing of my directory on the line printer   we 
get   list   
in the latter example a directory 
is initially listed and then printed. in effect  the concept 
1 	knowledge representation 
of listing is embedded inside printing. certainly  in order to interpret queries involving embedding  we need 
to use some other inference rule to process action frames. we describe such an inference rule using the notation below: 

　　this general formula states that if {p} a1 {q} is true and {q} a1 {r} is also true then we can infer {p}  a1   a1  {r} to be true too. we call this inference rule the rule of composition. a more specific formula for the example query   how do i print a listing of my directory on the line printer   is: 
j 
　　interpreting this inference rule we deduce that if the postcondition of list is applied as the precondition of print then it is inferred that the postcondition of print is the postcondition of executing both actions. 
　　we can formulate the domain specific information needed for the query   how do i print a listing of my directory on the line printer 1'  in terms of {p} list {q}  {q} print {r}. our inference rule tells us that this is equivalent to {p}  list   print  {r}. note that the system must derive the new postcondition set {r}. the techniques for developing interpretations of other queries involving embedding are aspects of ongoing research. 
iv conclusion 
　　it is concluded that transfer semantics is an appropriate mechanism for describing actions and how these actions transfer objects. it seems a particularly effective mechanism for abstracting characteristics of various computer operating system actions in a concise formalism. the use of transfer semantics in oscon enables the production of complex formal queries to be instantiated by a fully formalized database. sets of conditions for action frames are only preferences in the system which are typical of some action. we use preferences for two reasons:  1  in order to select the correct frame  1  if we specified all possible transfer conditions on frames they would certainly become very large. yet  
the system is not restricted to preferred conditions due to the presence of various inference rules. 
　　it is a significant feature of transfer semantics that there exists a number of inference rules enabling manipulation of action frames. therefore  by using the object frame hierarchy and these inference rules an action frame can circumscribe a large quantity of domain-specific relations. in this paper we have shown the usefulness of logical inference rules of consequence and composition. the consequence rules enable the system to infer more detailed or less specific objects from an object hierarchy. embedded queries involving many 

concepts can be interpreted effectively on application of the composition rule. 
　　a particularly useful feature of transfer semantics is that similarities between object frames are marked. therefore  even though a query may be presented to oscon with tops-1 lingo  that query can be interpreted and answered in terms of unix. it is hoped that transfer semantics will be used to model other operating systems as research continues. 
　　we are continuing to build action frames for other actions such as ''mailing    moving   and  creating . of particular interest is the possibility of recognizing user misconceptions in queries. for example  say a user asks the query   how do i print a file with the -z option  .  -z  is not an option on printing. nor  can -z be inferred for printing. so  the action frame for  printing  does not specify a formula of the form  {p} a {q} u  because a is not satisfied. we also hope to investigate the possibility of recognizing ill-formed embedding. for example  the query   how do i delete my files and then list them   doesn't make much sense at all. 
　　we have not described the meaning representations of english queries before the frames are matched to them. these representations are discussed in mc kevitt  1a . in this paper we are interested only in the frames themselves. further research includes developing robust matching processes that determine the right frame for some query. 
acknowledgements 
we wish to acknowledge the natural language 
group at the computing research laboratory  crl  for valuable discussion on the content of this paper. we are indebted to the referees for suggested revisions. 
references 
bobrow  d.g. & winograd  t. 'an overview of krl  a knowledge representation language.' cognitive science. 1  1  1. 
brachman  r.j. 'on the epistemological status of semantic networks.' in associative networks: representation and use of knowledge by computers  n.v. findler  ed. . new york: academic press  1  1. 
douglass  robert j. & hegner  stephen j. 'an expert consultant for the unix operating system: bridging the gap between the user and command language semantics.' proc. fifth national conference of the canadian society for computational studies of intelligence  cscsi /scieo conference. saskatoon  saskatchewan  may  1. 
fass  d.c. 'collative semantics: an approach to coherence.' memoranda in computer and cognitive science  memorandum mccs-1  rio grande research corridor  computing research laboratory  new mexico state university  box 1  las cruces  nm 1  usa  1. 
hayes  philip j.  uniform help facilities for a cooperative user interface.  proc. national com-
puter conference  houston  1  1. 
hegner  	stephen 	j. 	& 	douglass  	robert 	j. 
 knowledge base design for an operating system expert consultant.  proc. of the fifth national conference of the canadian society for computational studies of intelligence  cscsi . london  ontario  december  1  pp. 1. 
hegner  stephen j.  representation of command language behavior for an operating system consultation facility.  technical report cs/tr1  cs/ee department  university of vermont  usa  1. 
martin  paul; appelt  douglas & pereira  fernando  transportability and generality in a naturallanguage interface system . in bundy  alan  ed.  proc. ijcai-1. karlsruhe  west germany  
august  1  pp. 1. 
mc kevitt  paul  parsing embedded queries about 
unix.  memoranda in computer and cognitive science  mccs-1  rio grande research corridor  computing research laboratory  new mexico state university  1a. 
mc kevitt  paul 'formalization in an english interface to a unix database'. memoranda in computer and cognitive science  mccs-1  rio grande research corridor  computing research laboratory  new mexico state university  1b. 
minsky  marvin  a framework for representing knowledge.  in the psychology of computer vision  ph. winston  ed . new york: mcgraw-hill  
1. 
schank  r.c. & abelson r.p.  scripts  plans  goals and understanding: an enquiry into human knowledge structures.  hillsdale  new jersey: 
lawrence erlbaum associates  1. 
waltz  david  natural language access to a large database: an engineering approach.  advance papers ijcai-1. tbilisi  georgia  ussr  sept  1  1. 
wilensky  robert; mayfield  jim; albert  anthony; chin  david; cox  charles; luria  marc; martin  
james and wu  dekai 'uc - a progress report.' 
report no. ucb/csd 1  computer science division  eecs   university of california  berkeley  california 1  july  1. 
wilensky  robert  some complexities of goal analysis.  preprints of conference on theoretical issues in natural language processings  tinlaps  computing research laboratory  new mexico state university  january  1  pp. 1. 
wilks  yorick  making p