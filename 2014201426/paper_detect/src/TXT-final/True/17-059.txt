 
we present a new system for plausible reasoning in expert systems. it is an extension of the horn clause subset of first order logic  and is distinguished by its use of non-numeric certainties and the assignment of certainties to logical formulae rather than events. model theoretic and ftxpoint semantics are sketched for this language. an implementation in the logic programming language prolog is described and the advantages of the system are discussed. 
key words- plausible reasoning  probability  expert systems  logic programming 
1. introduction 
     some kind of judgemental or probabilistic reasoning forms an essential part of many expert systems. the need for such reasoning arises whenever knowledge is incomplete or data uncertain. this is the case in many of the problem domains to which expert systems are applied. in this paper we present a system for judgemental reasoning which differs in two respects from the more usual approaches. it uses a non-numeric representation for belief  and assigns certainties to logical formulae rather than events. it is an extension to the work described in  shapiro 1 . 
　　we shall argue that this system meets the following criteria which should be fulfilled by any system of plausible reasoning used in expert systems. 
 1  clear semantic* 
we should be able to provide a clear semantics for our reasoning system. both the knowledge engineer building an expert system and the end user of the system should know what certainties are and the run-time behaviour of the system should reflect these meanings in a well denned manner. if this requirement is not met it is difficult to develop general purpose debugging and maintenance tools for knowledge bases. 
 1  ease of explanation. 
a determining feature of an expert system is its ability to explain its reasoning on demand. we require that the derivation of certainties be easily explainable. this entails that the mechanism by 
which certainties are combined be itself capable of explanation. 
 1  expressive power 
the system should be powerful enough to express an expert's knowledge about uncertainty flexibly and naturally. 
　　we distinguish two sources of uncertainty. firstly  uncertainty about observations  or facts  in the application domain. secondly  uncertain rules  or heuristics  which express an expert's general knowledge about the domain. our system  following the approach of shapiro 
 shapiro 1  uses an extension of the horn clause subset of first order logic. facts ore represented by atomic formulae  atoms   rules by non-unit clauses. 
     the fundamental idea is to extend the the range of truth values assigned to atoms from the set  false  true } to certainties. certainties are lattices and have operations of least upper bound and greatest lower bound  denned on them. we are relaxing the restriction 
that certainties be totally ordered  and specifying that they are partially ordered. this permits the use of nonnumeric certainties to express knowledge about uncertainty. the defined operations allow us to combine certainties duing the inference process. the rules used by the system are of the form where is a 
horn clause and / is a certainty function specifying how the certainties of the atoms in b are combined to provide a certainty for a. the ability to specify a combination function for each rule provides flexibility  although in practice we find that most rules use a general combination function. 
     in the next section we describe the formal apparatus underlying our system. both a model theoretic and fixpoint semantics are provided in the manner of  van emden & kowalski 1v this provides evidence that we can satisfy criteria  1  and  1  above. we then describe a simple application of the system  which has been implemented in prolog as part of a complete expert system shell. this provides evidence that we can satisfy criterion  1  above. 
1. the formal apparatus 
1. basic definitions 
definition 
a certainty space c is a complete lattice. this is a partially ordered  under    set c  with operations and  least upper bound and greatest lower bound respectively  defined for every subset of c. 
definition 
we extend ♀ 	to sequences 	over c by defining: 

definition 
a function f from sequences of certainties to certainties in some certainty space c is monotone iff for all sequences sx and s1 of length n over  implies 

definition 
a logic program with uncertainties is a finite  nonempty  set p of pairs of the form is a definite  or horn  clause  and t is a monotone function from sequences of certainties to certainties. 
1. semantics 
we can now define the semantics of logic programs 

1 t. niblett with uncertainties as an extension of that given by van emden and kowalski  van emden and kowalski 1  for definite clause programs without uncertainties. 
definition 
the herbrand universe u p  is defined recursively as  
 1  the set of constant symbols in p  or the constant symbol a if there are none . 
 1  all atoms of the form  where the ti are in u p . 
definition 
the herbrand base h p  of a logic program p is the set of all ground atoms formed by using predicate symbols from p with ground terms from the herbrand universe u p . 
definition 
an interpretation of a logic program with uncertainties p is a function from h p  to a certainty space c. 
definition 
an interpretation i1 is 	an interpretation fe iff 
definition 
a model m of p is an interpretation of p satisfying the following condition: 
	for any clause 	in p and any ground instance 
	the 	clause  	then 
1.1 model theoretic semantics 
definition 
given two models m1 and m1 for p we define the intersec-
		models 	pointwise 	as 
proposition 
given two models m and m' for p. the intersection of the two models  is a model. 
proof 
 omitted  
 theorem  exists and is the least model of p. 
proof 
the proof is straightforward. 
the meaning of the logic program p is defined to be the least model h p  of p 
1.1 fixpoint semantics 
we now provide a constructive definition of m p  by showing it to be the least fixpoint of a function tp from interpretations to interpretations. 
definition 
let tp /  be defined pointwise on an interpretation 1 as follows: 

proposition 
tp is monotone over the lattice of interpretations  and moreover the lattice of interpretations  with po    is complete. 
proposition 
tp has a least fixpoint. 
proof 
since tp is a monotone function on a complete lattice  tp has a complete lattice of fixpoints and therefore a least fixpoint. 
we can elaborate on this result by proving that tp is continuous as well as monotone if the underlying certainty functions we use are continuous. 
definition 
a certainty function f from sequences of certainties to certainties i s continuous  r all chains x. 
proposition 
if the underlying certainty functions f are continuous then the corresponding functions fx are continuous 
proposition 
if the underlying certainty functions f are continuous continuous function  that is: for all chains  of 
interpretations. 
proof 
 omitted  
proofs omitted above can be obtained from the author on request. 
this completes our discussion of the semantics of logic programs with uncertainties  and shows that the meaning of a logic program with uncertainties can be approximated computationally the certainty computed at runtime is a lower bound on the true certainty. 
1. an example 
     to illustrate the practical application of the above we shall describe an implementation in current use at the turing institute. this is only one possible application of the system  experience with alternative implementations would be very useful. 
certainties 
     a certainty is a basic certainty or an ordered tuple of certainties  a basic certainty is a pair arj where a is an atom and j is its justification  or the empty certainty . a justification is a conjunction of literals. it is convenient to represent a certainty as an ordered tuple of trees where the leaves of the trees are basic certainties. an example is shown in figure 1 where an english  translation  of the certainty is provided. in the following we shall refer to this certainty or its translation indifferently. the application domain is that of claiming travel expenses for trips by car for someone employed in holland. 
　　the certainty illustrated is the certainty of the atom entitled to  john  1  and can be regarded as a structure of assumptions that are necessary to establish the truth of the assertion. these assumptions are: 
 1  the trip was in holland. justified by the fact that john travelled less than 1km. 
 1  john did not travel by boat  unjustified  
 1  it would cost less to travel by car than by plane 
this assumption rests in turn on the assumption 

that the trip was in holland  see  1  above   and the assumption that it costs less to travel by car in holland than by plane. 
john is entitled to 1 guilders subject to: 
the trip was in holland justified by 
the distance was less than 1km 
john didnt travel by boat 
	 default 	assumption  
it cost more to travel by car than plane justified by 
the trip was in holland 
 see above ..  
the plane costs more in holland 
	 default 	assumption  
the english translation of a certainty figure 1 
　　this example has been chosen to illustrate both the general nature of certainties and that our system can be applied to domains where a numerical measure of certainty would be inappropriate. we now turn our attention to the combination of certainties  and the possibility of interaction between certainties. 
combination of certainties 
　　our default combination function for certainties is concatenation. 	given 	certainties the combination function combines these 
to give 	this reflects a default assumption 
that there' is no interaction between different assumptions  similar in some ways to the assumptions of conditional independence of events made by prospector  gaschnig 1 . it is possible for different assumptions to interact and our system provides an elegant mechanism for describing such interaction. we illustrate with an example based on figure 1. let us assume that we wish to combine that certainty with the following one 
the trip was abroad justified by ths length of ths trip was mors than 1 days 
these certainties are incompatible  since a trip cannot both be in holland and abroad  by definition . the certainty function can be set up to provide the combined certainty with value false. in our current implementation this can be done in a general way by specifying via a meta-logical assertion that the values holland and abroad are exclusive for the predicate location. in general our implementation allows a threshold to be established for certainties  and the proof mechanism rejects all solutions which fall below the threshold. 
　　we wish to emphasise that the plausible reasoning mechanism can handle interactions or constraints between certainties in a knowledge based way. constraints can be explicitly represented and reasoned with  and suitable explanations supplied to the user. this is not possible with a system using numeric certainties. 
1. implementation 
     the mechanism described above has been implemented as part of an expert system shell  called yapes  written in prolog.yapes is an interpreter for logic programs  either in normal horn clause logic or in horn clause logic extended with the judgemental reasoning mechanism. the shell contains all the normal facilities for explanation and justification  implemented via metalogical predicates. in addition the yapes interpreter can call the underlying prolog interpreter if desired. 
	t.niblett 	1 
　　we should note finally that the use of numeric certainty factors is not ruled out in our system. the interval co  1   a lattice whose order is total  used by shapiro 
 shapiro 1  is an obvious candidate. more interesting perhaps is a combination of numeric and non-numeric certainties. this is the idea advocated by keynes  keynes 1 pp 1  in his treatise on probability  where he asserted that some though not all probabilities were inherently non-comparable. 
1. conclusion 
　　we have presented a system for plausible reasoning which is a conservative extension of the horn clause subset of first order logic. we have argued that this system can provide the clear semantics  ease of explanation and expressive power necessary in expert systems. 
     our approach embeds the plausible reasoning mechanism within logic  and in particular logic programming systems. this has the advantage that all the normal debugging tools can be used immediately  and provides a smooth interface between  normal  programs and programs with uncertainties. this work can be seen as an extension of the work of shapiro  shapiro 1  in three ways 
 1  certainties can be non-numeric but also amenable to combination and comparison. 
 1  the scope of certainty functions has been extended to ordered sequences of certainties rather than multisets. this allows the certainty function to distinguish between literals in a clause. 
 1  a fixpoint semantics has been presented for continuous certainty functions  this provides a computational characterisation of the behaviour of the system. 
　　the system can be considered as performing a condensation of a proof. in horn clause logic the condensation is either true or false; using numeric certainties extends this to the set  1 . with a lattice as our certainty structure the condensation can be as large as the proof itself  although normally we are concerned with the assumptions that made during the proof. 
　　from this perspective the system can be seen as performing a top-down version oftruth maintenance  doyle 1 . we are currently investigating the extension of the allowable certainty functions to provide combination functions for procedures rather than individual clauses. this will allow for proof condensation at the level of all proofs for a goal  rather than for single proofs. in this way meta-level statements such as  if this goal can be proved in these two ways then...  can be represented. 
1. 