 
   non-monotonic logics are examined and found to be inadequate as descriptions of reason maintenance systems  sometimes called truth maintenance systems . a logic is proposed that directly addresses the problem of characterizing the mental states of a reasoning agent attempting to reason with respect to some object theory. the proposed logic  propositional dynamic logic of derivation  pdld   is given a semantics  and a sound and complete axiomatization. the descriptive power of pdld is demonstrated by expressing various inferential control policies as pdld formulae. 
   in this note i will elaborate the propositional fragment of an axiomatic semantics of reason maintenance systems  rms's   do1 . the development of such a semantics stems from the desire to provide a declarative specification language for rms's with particular emphasis on the description of the control of their reasoning processes  and to serve as a formal setting within which to compare and contrast the properties of different rms's. 
i. introduction 
   there is considerable ongoing research activity in the realm of non-monotonic reasoning  pel. the avowed aim of this research is to capture in a logical formalism some of the non-monotonic processes  e.g.  default reasoning and defeasible reasoning  that are clearly part of the common sense reasoning repertoire enjoyed by humans. implicit or explicit in many of these formalisms is the notion that the formalism in some sense describes the process carried out by the reasoning agent. mcdermott and doyle  mcddo  analyze doyle's tms 
 dol  in terms of the non-monotonic logic that they elaborate. their analysis suggests that the logic of tms is a fragment of their non-monotonic logic. i believe that their analysis confuses the logic practiced by the reasoning agent  the tms  with the particular object theory that the agent reasons about. a reasoning agent should be viewed as a finitary computing entity. the computations that it carries out have the express aim of mechanizing some object theory. depending on the nature of the object theory or the reasoning agent's grasp 
* the research reported herein is funded in part by the defense advanced research projects agency under contract number f1-c-1. of the theory  the mechanization may turn out to be imperfect. with respect to logics like that of  mcd  and  re   because there cannot be  in general  a recursive enumeration of the theorems of the object theory  a reasoning agent's mechanization of such theories is bound to be imperfect. in summary  the relation that obtains between an object theory and a reasoning agent is that the theory is an ideal object that the agent might hope to compute. 
   the sense in which many of the non-monotonic logics that have been studied might be descriptions of rms's  or reasoning agents more generally  is roughly the sense in which a formalization of recursive function theory might be the description of a programming language  say pascal. recursive function theory can be taken as an ideal object that a pascal implementation attempts to mechanize. however  recursive function theory has little to say about the actual semantics of 
pascal programs. inevitably  a formal semantics of pascal would include recursive function theory  but most of the meat in axiomatizing pascal is the formalization of the states of the abstract machine that is interpreting pascal. 
   there are some researchers who have attempted to address the issue of describing the reasoning agent and its mental states. weyhrauch's fol system  we  has an explicit notion of object theory and meta-theory.  indeed  fol permits the construction of arbitrary hierarchies of such object/meta pairs.  fol is an axiomatic system  specifically  a first-order system with types. from my perspective  fol's main defect is that a fol meta-theory  if taken as an attempt to formalize the properties of reasoning agents  has no explicit notion of the agent's mental state. i believe that an explicit notion of mental state is key to many representations and control issues. 
	a. brown  jr. 	1 
contrast  is in describing the behavior of a reasoning    doyle  do1  develops a very powerful functional semantics for theories of reasoned assumptions. his semantics  in the guise of an admissible set  has a definite notion of the mental state of a reasoning agent. he elaborates his functional semantics so as to be able give taxonomic structure to a wide range of reasoning formalisms. he focuses primarily on giving an account of what inferential theories are sanctioned by different formal notions of reasoned assumptions. my interest  in agent when constrained to adhere to particular object theories. i should also mention that i prefer axiomatic to functional specifications as i think there is much more available technology for compiling operational rms's from axiomatic descriptions. 
   goodwin recently introduced  go  a new inferential formalism  logics of current proof  lcp's . his intent is to capture the dynamic reasoning processes of finite reasoning agents. lcp's are not logics in the usual sense as they have no proof theory or model theory. goodwin's formal account of lcp's is functional in nature. the principal appeal of lcp's is that they explicitly encode the development of the deductive process. it was in attempting to give a first-order logic account of lcp's  having models that suitably interpreted the sequence of databases in an lcp that i happened upon the idea of a dynamic logic of derivation. 
   the proximal technical inspiration of the dynamic logic of derivation  dld  is the dynamic logic  dl  formalism introduced by pratt and elaborated by fischer  harel  ladner  meyer  and others  hal  ha1 . dl gives axiomatic meaning to programs by means of a first-order language augmented with a collection of modal operators corresponding to those programs. formulae in the language are used to characterize the states of computational processes before and after the execution of some computational step s . dl's model theory is a collection of kripke-style worlds  hecr  connected by binary relations corresponding to various possible programs. just as the worlds of dl's semantics capture the states of a computational machine  the states of a 
   dld model will capture the mental states of a rational agent. the approach that i shall be taking is presaged by pratt in  pr  where he uses variants of dl to formalize individual actions  sequences of actions  processes   and their effects. the remainder of this paper is devoted to elucidating propositional dynamic logic of derivation  pdld . 
ii. syntax 
   let i be a first-order language equipped with functions  predicates  connectives  quantifiers  and perhaps even modalities. l has the usual formation rules for first-order languages. the details of l will not concern me very much here. let t be a theory over the language l. t is assumed to be axiomatizable with a set of axioms and rules of inference. 'l  the language of pdld  can to some extent be considered a metalanguage for for theories over l. formulae over 'l will typically be used to specify how the formulae of t are actually derived from r's axioms and rules of inference. this specification will be in the form of an axiomatized theory ' t. i will call ' t the mechanization of t. in effect 

  i wish to distinguish pdld  and the first-order dynamic logic of derivation  from the dynamic logics of programs investigated by pratt et al the distinction is not grounded so much in their respective model theories or proof theories  but rather in the fact that the model-theoretic worlds of the former are related by program statements while in the latter they are related by inferential steps 
** the distinction between proper and reified atomic formulae will play no role in the development of pdld proper the distinction becomes important when the axioms that describe particular rms's are adjoined to the axiomatization of pdld. 

1 	a. brown  jr. 

	a. brown  jr. 	1 


1 	a. brown  jr. 
the interaction of the cs and d's prevents ¦×n  m from being derived before ¦× n  m+1is derived. indeed  no formula of rank n is derived before every formula of lesser rank is derived. the ¦×'s are thereby forced to be produced in breadth-first order. of course it must be verified that a theory ' t that mechanizes t completely  when modified with the breadth-first axioms  continues to mechanize t completely. to that end the following holds: 
theorem: if 't is the natural mechanization of t with axioms '{a} and if 't' is the breadth-first mechanization of t with axioms '{an m}' and '{ban m}' replacing '{a}'  and if 
   with a different set of boundary conditions  a depthfirst enumeration of the theorems of t could have been achieved. that is  there is a set of boundary conditions such that 
1. for each theorem of t there is an explicit derivation of ¦Õ that is a theorem of ' t  
1. the sequence of named atomic derivations that appears in the prefix of '¦Õ corresponds to the sequence of inference rules applied in the proofs of the theorems of t when enumerating them in depth-first order  
1. if precedes ¦×1 in the depth-first ordering  then the derivation of ¦×1 cannot be proved as a theorem of 't until ¦×1 has been proved. 
the interaction between the axioms  and boundary conditions suggests a general  programming  methodology for controlling the application of derivations. 
the propositional constants  should be viewed as  enabling  and  completion  flags for the firing of the atomic derivation an m.. these constants indicate respectively that a derivation can be used and that a derivation has been used. programming then consists of designing systems of boundary conditions to achieve the desired sequencing of inferences by suitably controlling the truth values of enabling flags in various mental states. 
goodwin  go   and mcdermott before him in 
 mcd   cites a number of problems in using deduction to control deduction. he remarks that attempts at controlling inferences by deductive methods have typically resulted in invalidating particular inferences altogether  or alternatively resulted in rms states that assert that some proposition has been proven if and only if it has not been proven. it should be clear from the discussion of programming above that atomic derivations are enabled with respect to particular states. as a consequence  an inference can be temporarily en- dis- abled  and there is no problem whatsoever in having some proposition '¦× be derived by some derivation that has since become disabled. the axioms could just as well 
have been written 

which have the effect of disabling each of the '{a n m } after use. 
c. finite reasoning agents 
   at the outset of this note i proclaimed pdld as a mechanism for describing the behavior of finite reasoning agents. careful scrutiny of pdld interpretations will reveal that pdld theories admit interpretations which are at odds with any reasonable notion of a finite agent. consider the following observations: if one thinks of a sequence of mental states related by various atomic derivations as corresponding to the flow of some sort of mental time  then time can extend infinitely into the past and future. moreover  a mental state can be immediately preceded by multiple states. finally  states can be  dense.  that is  pdld interpretations can be such that for an atomic derivation a whenever  s t  m a  there is a u such that  s u m a  and  u t m a . 
   as it turns out  all of these anomalies can be legislated away with appropriate axioms. tense logics  ru  that impose various topologies on the ordering of time provide much of what is needed. to focus on one of the anomalies  consider the infinite extension into the past. this can be eliminated with: 

this last formula says that every state either is  or is preceded by  a state which is not immediately preceded by a state that satisfies  but since every state satisfies  this formula can be satisfied if  and only if  every state is either immediately preceded by no state at all  or is preceded by some state which is in turn preceded by no state. this axiom prevents infinitely long  receding  chains of states. on the other hand  it does not prevent interpretations having a particular state from which there is a receding chain of any given finite length. more axiomatic machinery still is required to prevent that. 
d. non-monotonic theories 
   in considering the descriptive power of pdld with respect to non-monotonic theories it should first be noted that the intuitive statement of the rule of possibilitation introduced in  mcddo  is directly expressible in pdld. recall that mcdermott and doyle first gave an informal definition of their non-monotonic rule of inference which stated that if a proposition were not provable in a theory t then the negation of the proposition is provably possible. though the intent of this rule is clear  it is unfortunately circular. mcdermott and doyle had to appeal to an indirect technical device to capture possibilitation. in the pdld mechanization of t  however  their original notion of possibilitation can be expressed as: 
where 	is the consistency modality of  mcddo  
mcd . possibilitation is well defined but  unfortunately  not effectively computable in general. since there is no magic  a non-monotonic theory t that is not recursively enumerable  cannot have a complete mechanization that is recursively enumerable. if a  partial  mechanization  t is to remain r.e.  such mechanizations cannot in general have the formulae   on the antecedent side of ' pos '  as theorems. 
   the whole point of a non-monotonic logic is to formalize the default and defeasible inferences that are evident in common sense reasoning and practiced by various rms's. it should be evident that pdld provides a mechanism for directly formalizing such reasoning without necessarily resorting to the sorts of infinitary processes implicit in mcdermott and doyle's rule of possibilitation. in order to realize defeasible inferences  a pdld theory cannot have the general frame axioms '{af}'  not all atomic derivations will be belief conserving. a default introducing axiom scheme might be: 

which says that if  is not currently believed then ¦Õ can be believed. of course  it might be the case that 
 thus  the simple notion of default reasoning supported by ' hypy would admit states to  nterpretations of 't that sanctioned inconsistent beliefs. now for ' t to have inconsistent beliefs is not the same as ' t's being inconsistent. on the other hand  states that have true are irrational  and to have as a theorem of ' t makes  t irrational. rms's generally have backtracking mechanisms to revise the set of current beliefs so that consistency of beliefs is restored. although pdld as presented here is not expressive enough to describe all the details of those mechanisms  it can describe the general policies that are typically enforced by those mechanisms. a weak policy might be: 

which says that if the reasoning agent is in a state that is irrational with respect to a particular formula ¦Õ  all states immediately reachable from that state should be rationalized. a much stronger  and typically unenforceable by effective computation  policy is stated by: 

this formula says that if the reasoning agent is in a state that is irrational with respect to a particular formula ¦Õ  the agent should do something  e.g.  withdraw sufficient premises or hypotheses in which the irrational state is grounded  such that at no future time can the agent be in a state irrational with respect to  these examples of deduction and premise control policies seem to respond directly to mcallester's  mca  objections to nonstandard logics: 
	a. brown  jr. 	1 
the problem with non-monotonic logics is that they bring in non-traditional formalisms too early  muddying deduction  justifications  and backtracking. the aspect of truth maintenance which cannot be formalized in a traditional framework is premise control. . 
dynamic logics of derivation offer an opportunity to make the various issues explicit. 
vi. conclusions 
   in the foregoing i have developed the syntax and semantics of the propositional dynamic logic of derivation  and presented a complete axiomatization for the logic. by way of examples i have illustrated some of the expressive power available in pdld for specifying and analyzing the behavior of reason maintenance systems. finally i have offered dynamic logic as an alternative to the sorts of non-monotonic logics investigated heretofore as a means for giving a formal account of some aspects of common sense reasoning. 
   pdld obviously cannot be completely expressive of all properties that might be ascribed to an rms. for that  one requires the first-order dynamic logic of derivation  br . in the latter formalism one can not only give a complete first-order account of control protocols  but also of the collateral data structures  viz.  no-good  lists  hypothesis contexts  dependency relations  etc.  that rms's utilize in the belief revision process. between pdld without the  derivation and full firstorder dynamic logic of derivation there are many alternative logics having different powers of expressiveness. the analogous dynamic logics of programs have been extensively investigated. i believe that those investigations will offer a good starting point for developing an rms specification logic which is suitably expressive  while being deductively tractable. 
