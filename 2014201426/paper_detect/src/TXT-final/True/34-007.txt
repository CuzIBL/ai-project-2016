 
　　　a new resolution strategy for horn sets of clauses  each clause of which contains no more than one positive l i t e r a l   is presented which requires that in each resolution either one ancestor be a false positive unit or that one ancestor and the resolvent both be f a l s e . this strategy emphasizes  relevant  positive units 
while c o n t r o l l i n g the explosive non-unit resolut i o n . some properties of interpretations for horn sets are reviewed and used to s i g n i f i c a n t l y reduce the computation and storage required to implement semantic resolution for horn sets. this work was supported in part by the national science foundation and argonne national laboratory. 
	i . 	introduction 
　　　since the introduction of resolution for automated theorem proving  one line of e f f o r t has been to develop strategies and huertstlcs for special classes of clause sets or special classes of problems. one such class is the class of horn sets. recent interest in horn sets   1   1   stems from the fact that many strategies that are not complete in general are complete for horn sets. for example  positive u n i t r e s o l u t i o n   which for horn sets is just pi r e s o l u t i o n   is complete. negative resolution is just set-of-support r e s o l ution with the set of support the negative clause. factoring is not necessary in order to refute an unsatisftable set of horn clauses   1     in addition to possessing many useful and i n t e r e s t i n g properties  horn sets occur quite often in pract i c e . for example  the axiom systems for groups  rings  and many other algebraic systems have horn sets as the natural t r a n s l a t i o n into clause form as do various formal systems  see e . g .   hermes   1     . horn clauses also have a great deal of i n t u i t i v e appeal  for the horn clause 
-l k vm is l o g i c a l l y equivalent to that is a horn clause represents an implication in which each of the antecedents is a positive unit  or i n t u i t i v e l y   a simple statement of fact or hypothesis  and the consequent is also a positive u n i t . many mathematical axioms and theorems take t h i s form. f i n a l l y   one can apply the s p l i t t i n g techniques developed in   1   to reduce a non-horn set of clauses to a class of horn sets; thus  the theory developed for horn sets can be applied i n d i r e c t l y to non-horn sets as w e l l . the purpose of t h i s paper is to present a new s t r a t e gy  essentially a sharpening of semantic resolution  that is complete for horn sets and to d i s cuss some i n t e r e s t i n g properties of horn sets that greatly simplify the implementation of semantic resolution for those sets. 
　　　while many methods for resolution are complete for horn sets  some desirable combinations of strategies are not complete together even when the class of problems is r e s t r i c t e d to horn sets. two such strategies are p o s i t i v e - u n i t resolution and set-of-support resolution   1     restricting resolution to unit resolution avoids the combinat o r i a l explosion of the number of clauses generated on the various levels that is usually present when non-unit resolution is allowed. for  in the l a t t e r case  when forced i n t o the non-unit section of a theorem prover  a program usually must try resolution on a l l pairs of l i t e r a l s from a pair of non-unit clauses.  when ordering or lock resolution   1   is used t h i s is not the case; however  these methods are not compatible with many of the more successful strategies l i k e set of support.  thus  once the program leaves the unit section  even for just one l e v e l   r e l a t i v e l y large numbers of resolvents are generated. then in developing a strategy that is not compatible with unit r e s o l u t i o n   great care must be taken to control the non-unit resolvents that are allowed to be generated lest the combinatorially explosive non-unit section undo the savings that the 
strategy yields in the unit section. of course  semantic resolution   1   has as i t s main goal to r e s t r i c t the resolvents generated to those that are highly l i k e l y to be relevant to the proof by taking i n t o account the intended meaning of the clauses. in semantic r e s o l u t i o n   an interpretat i o n i of the symbols of the language is input to the theorem prover along with the set of clauses to be refuted. then one parent in each resolution is required to be false in i. the idea is that two clauses which are both true are less l i k e l y to produce a deduction leading to a contradiction than are two clauses one of which is f a l s e . the 
most widely-used special case of semantic resolut i o n is set-of-support resolution in which the i n t e r p r e t a t i o n i s a t i s f i e s just the axioms and is only i m p l i c i t l y present. in section 1 we develop a strategy which is a combination  but not the intersection  of p o s i t i v e - u n i t resolution and s email t i c resolution. 
　　　one d i f f i c u l t y with semantic resolution is that if the domain of the i n t e r p r e t a t i o n contains more than a few elements the computation required to f u l l y evaluate a non-ground clause may be too time consuming. in addition there is a problem of how to represent for each clause the sets of domain elements for which the clause is true and those for which the clause is f a l s e . for these 
reasons  most applications of semantic resolution have used only very simple i n t e r p r e t a t i o n s ; for example  the interpretation in which a l l l i t e r a l s are false yields pi r e s o l u t i o n . in section 1 the problem of reducing the amount of computation and storage required for evaluating horn clauses 
based on the use of cross products of interpretations w i l l be discussed. section 1 w i l l contain some concluding remarks. 
i i . completeness o f positive-unit semantic resolution for horn sets 
　　　the reader is assumed to be f a m i l i a r with the resolution p r i n c i p l e for f i r s t order logic and the terminology related to i t . the d e f i n i tions necessary for the particular theorems to 

1 

be proved w i l l be presented; then some lemmas w i l l be recalled and the completeness of the strategy proved. 
definition: a horn clause is a clause containing not more than one unnegated l i t e r a l . a horn set is a set of horn clauses. 
definition: an interpretation i for a set s of clauses consists of a non-emoty domain d of objects and an assignment of the predicate  funct i o n and constant symbols occurring in s such that each n-ary predicate symbol is assigned an n-ary r e l a t i o n on d  each n-ary function symbol is assigned an n-ary function on d into d  and each constant symbol is assigned an element of d. 
an aid in guiding a program to the generation of the empty clause  the idea being that in order to generate the contradiction that produces the empty clause  i.e.  falsehood  one should use clauses that are themselves false. positive-unit resolution has as i t s goal the elimination of a class of resolutions that produces combinatorially large numbers of new clauses. in addition  there is an i n t u i t i v e appeal to positive units as conveying more information than other clauses since it is generally more useful to know that a p a r t i cular property holds than to know just that one of a number of statements hold  see   1   for a 
more complete discussion of the advantages of u n i t r e s o l u t i o n   . a strategy that was based on both of these i n t u i t i v e l y appealing ideas would seem to be 


definition: a clause is f a l s i f i e d by the i n t e r pretation i if it has a ground instance which is false in i. 
definition: a clause is positive if it contains only unnegated l i t e r a l s . a clause is negative if it contains only negated l i t e r a l s . a clause is mixed if t contains both negated and unnegated l i t e r a l s . 
definition: a u n i t is a clause containing one l i t e r a l . 
definition: a resolvent of two clauses a and b is a p o s i t i v e - u n i t resolvent if one of a and b is a positive u n i t . a p o s i t i v e - u n i t r e f u t a t i o n of a set s of clauses is a r e f u t a t i o n in which each 
resolvent is a p o s i t i v e - u n i t resolvent. 
definition: given an i n t e r p r e t a t i o n i  a r e s o l vent of two clauses a and b is a semantic r e s o l vent with respect to i if one of a and b is f a l s i f i e d by i. a r e f u t a t i o n of a set s of clauses is a semantic r e f u t a t i o n with respect to i if every resolvent in the r e f u t a t i o n is a semant i c resolvent w i t h respect t o i . 
　　　in   1   it was shown that any unsatlsflable horn set has a p o s i t i v e - u n i t r e f u t a t i o n but that for an a r b i t r a r y set of support  t  there may not be a t-supported p o s i t i v e - u n i t r e f u t a t i o n . 	that i s   the intersection of the two strategies  p o s i t i v e - u n i t resolution and set-of-support resolution  is not complete for the class of horn sets. 	since set-of-support resolution can be viewed as a special case of semantic resolution   1     	it follows that the intersection of p o s i t i v e u n i t resolution and semantic resolution also is not complete for the class of horn sets. 	now  semantic resolution is an attempt to bring the meaning of the symbols into the search e f f o r t as 
a good candidate for an e f f i c i e n t theorem prover for horn sets. since the intersection of the two cannot be complete conditions must be relaxed and/or altered in such a way as not to lose the advantages of the two constituent strategies. in p a r t i c u l a r   relaxing the conditions to allow non-unit resolution must be done with extreme care. 
       in the strategy presented below  t h i s rate of growth w i l l be controlled by requiring that for non-unit resolutions one parent and the resolvent both be f a l s i f i e d by the i n t e r p r e t a t i o n . since the number of false resolvents generated by a false clause w i l l generally be smaller than the t o t a l number of resolvents that the false clause could generate  t h i s new r e s t r i c t i o n should cut down the number of clauses that w i l l be generated by non-unit r e s o l u t i o n . with this r e s t r i c t i o n on the non-unit section  an additional r e s t r i c t i o n can be placed on the p o s i t i v e - u n i t section -namely  that the positive u n i t must be f a l s e . the net e f f e c t of these modifications is to produce a strategy that combines the advantages of p o s i t i v e - u n i t resolution and semantic r e s o l u t i o n and that r e l i e s especially heavily on the semant i c s   provided by the user in the form of an i n t e r p r e t a t i o n   to guide it through the dangerous non-unit section. also  if the i n t e r p r e t a t i o n does not f a l s i f y any axiom  as would be the usual case  then as in set-of-support pairs of axioms w i l l not be allowed to resolve d i r e c t l y even when one of them is a positive u n i t   a shortcoming of j u s t p o s i t i v e - u n i t resolution  and indeed  of hyperresolution in general . f i n a l l y   the reader may also note a great s i m i l a r i t y 
between the method used in the completeness proof here and of b i l i n e a r resolution of kuehner   1   . there  of course  there is no r e s t r i c t i o n on p o s i t i v e - u n i t r e s o l u t i o n . also the non-positivesection of a b i l i n e a r program is based purely on syntactic considerations  i . e .   on the use of 
negative clauses. 
　　　before proving the completeness of the new strategy  some previously proved r e s u l t s   1   on horn sets are recalled and some lemmas are proved. the ground case is considered f i r s t . the following two lemmas from   1   are r e c a l l e d . 
definition: a set s of clauses is minimally unsatlsflable if s is unsatlsflable but no proper subset of s i s . 
lemma 1.  lemma 1 from   1     if s is an unsatlsf l a b l e set of horn clauses then there is a 

1 

1 

the -p . but each of these literals is false so that the resolvent of u and c   call it d m 1 is false in i. therefore  this resolution satisfies condition 1 of the theorem. another l i t e r a l   say-p with literal that was eliminated in ffirming the last set s   form the resolvent dm 1 using dm 1 and c . 
as above  i  and i  are both false  so condition 1 is satisfied m continue in this way until 
all negative literals that were deleted in forming 
s from s have been resolved away. call the m   m-1   j 
resulting clause d . note that each negative literal in a clause1 c. where n 	-i n 	corresponds i 	m-1 m 	* 
to a 	l i t e r a l 	t h a t was e l i m i n a t e d in forming an 
s   k v i 	.. 	thus  not only is d 	f a l s e in i and 
k 	m-1 	m 
c o n t a i n s the p o s i t i v e l i t e r a l u   i t c o n t a i n s only n e g a t i v e l i t e r a l s that were d e l e t e d in forming sets s w i t h k m. the above process is now 
repeated r e s o l v i n g away negative l i t e r a l s from d that correspond to l i t e r a l s t h a t were e l i m i n a t e d in forming s from s  . c a l l the r e s u l t of t h i s step d  tm 1 as above d is f a l s e   c o n t a i n s thr- p o s i t i v e l i t e r a l u and does not cont a i n a n e g a t i v e l i t e r a l t h a t p a r t i c i p a t e d i n forming e i t h e r s . or s . continue in t h i s way u n t i l the clause tm !  is formed. indeed  d is j u s t the p o s i t i v e u n i t u which is f a l s e in i. moreover  since u is present in each r e s o l v e n t in the sequence  a l l t h r i n t e r m e d i a t e r e s o l v e n t s and u i t s e l f can be d i s c a r d e d by subsumption once u is 
g e n e r a t e d . that i s    s- .u} u|.u} i s u n s a t i s f t a b l e . now the f a l s e p o s i t i v e u n i t u can be used to e l i m i n a t e the l i t e r a l u a l t o g e t h e r as in case a above; the r e s u l t is an u n s a t i s f i a b l e horn set t h a t c o n t a i n s fewer than n atoms. the i n d u c t i o n h y p o t h e s i s now gives the d e s i r e d r e s u l t . tn case s c o n t a i n s the empty c l a u s e   the above process can be used w i t h the only m o d i f i c a t i o n being t h a t each of the i n t e r m e d i a t e clauses does not c o n t a i n a p o s i t i v e l i t e r a l and the f i n a l clause d. is the empty c l a u s e ; thus when the process t e r m i n a t e s   the r e s u l t is in f a c t a r e f u t a t i o n a l l of whose r e s o l u t i o n s s a t i s f y c o n d i t i o n 1  see example 1   . 
       this completes the i n d u c t i o n step and hence a l s o the p r o o f of the theorem. 
       the process in the proof of theorem 1 w i l l now be i l l u s t r a t e d w i t h two examples. 
example 1. let s be the set of clauses   r   - r q   - r s   - q - s p   - p t   - t j and l e t i be the i n t e r p r e t a t i o n t h a t assigns the value t r u e to r  q  and s  and f a l s e to p and t. now r is the only p o s i t i v e u n i t i n s and i t i s t r u e . a c c o r d i n g t o the p r o o f of the theorem the set s . *     q   s   - q - s p   - p t   - t   would be formed. then since both the p o s i t i v e 
u n i t s o c c u r r i n g in s are t r u e   the process in the p r o o f would continue to f i n d the set s1 = p  - p t  -t   s  does c o n t a i n a f a l s e p o s i t i v e u n i t   p . therefore  a c c o r d i n g to the p r o o f   the clause - q - s p of the o r i g i n a l set s could be used to s t a r t a chain of r e s o l u t i o n s that would r e s u l t i n the f a l s e p o s i t i v e u n i t p. one would f i r s t form the r e s o l v e n t o f - q - s p w i t h   say  - r s t o get the clause - r - q p . note t h a t - q - s p is f a l s e and t h a t the r e s o l v e n t - r - q p i s a l s o f a l s e and t h a t the only true l i t e r a l of the clause - r s is the p o s i t i v e l i t e r a l s. now the r e s o l v e n t of - r - q p and - r q is formed. this r e s o l v e n t i s - r p which i s a l s o f a l s e . f i n a l l y   
the r e s o l v e n t of 	t h i s clause and 	the clause r 	is 
1 
generated. this last resolvent is the positiveunit p  which is a false positive unit clause. this can now resolve with -pt to produce the clause t. this clause resolves with the unit -t to produce the empty clause. note that a theorem-proving program would not  of course  actually generate the sets s. and s ＊ they were discussed here only to illustrate the process of the proof of theorem 1. a program would simply note that the clause -q-sp was false and that the resolvent of -q-sp and -rq was also false and therefore legal to add to the set of generated clauses. note that since literals -p might be deleted from several clauses in forming the s sets  one might expect a considerable amount of 
merging. however  the strategy cannot be strengthened to require merging as can be seen by 
noting that if the false clause u has only 1 literals  its resolvent with another horn clause cannot be a merge. 
example 1. let s be as in example 1  and let the interpretation i assign the value true to all atoms. the process in the proof of the theorem would generate sets s. and s~ as in example 1. however  the positive unit p of s  is not false for this i. thus the set s ~ t -t} would be generated. this set also does not contain a false positive unit so the set s  l empty clause  
would be generated. now the empty clause comes from the clause -t in s  . as above one would start with this clause and work back  resolving first with the clause -pt to produce -p  then resolving with -q-sp to produce -q-s and so on. again  an actual program would not consider any of the sets s.-s   but simply which clauses were false and had false resolvents. note that when the interpretation makes all atoms true the refutation produced will be an nl refutation  and that for horn sets  such refutations are also input refutations  1j. 
　　　　it is now shown that theorem 1 does not remain true when the condition of being horn is removed. let s be the set  pq -pq p-q -p-q} and let the interpretation i assign true to both p and q. then one can generate resolvents using the false clause -p-q producing the two clauses -p and -q. however  neither of these can resolve with the clause pq since neither is a false posi-
tive unit and in each case the resolvent is not false. thus no refutation can be produced satisfying the conditions of theorem 1. indeed  there is no refutation even if condition 1 is relaxed to read one ancestor is a false positive clause instead of unit. this set of clauses can also be used to show that the converse of theorem 1 is not true. let i assign both p and q false. then the clause pq is false and its resolvent   p  with -qp and its resolvent  q  with -pq are both false positive units so that these resolutions satisfy condition 1. these false positive units can be used one after the other to produce the empty clause from -p-q. however  s is not a horn set and indeed no renaming of s is horn. we do have the following result  however. 
theorem 1. let s be a set of ground clauses which is minimally unsatisfiable. if for every interpretation 1 there exists a refutation satisfying the conditions of theorem 1  then s is horn  

proof. suppose s contains a non-horn clause  say c=pqc'  where p and q are two positive l i t e r a l s . let i be an i n t e r p r e t a t i o n in which both p and q are true. now consider any refutation r of s. since s is minimally u n s a t l s f i a b l e   c must occur in r. wherever c enters r the l i t e r a l s p and q 
w i l l enter and w i l l propagate u n t i l one of them is resolved away. suppose p is the f i r s t of the two from c to be used as a l i t e r a l of r e s o l u t i o n . now the clause resolving on p with c or i t s descendent 
must contain the l i t e r a l -p and therefore c e r t a i n ly cannot be a false positive u n i t . of course  the resolvend containing p and q also cannot be a positive u n i t . thus condition 1 cannot be s a t i s f i e d . next  the resolvent must contain the positive l i t e r a l q  which is true in i. thus the resolvent cannot be false and condition 1 cannot be s a t i s f i e d . therefore r cannot satisfy the conditions of theorem 1. since r represented an a r b i t r a r y r e f u t a t i o n of s we have a contradiction to the hypotheses of this theorem. 
　　　it should be pointed out that the conclusion of theorem 1 is that s is horn  not just that some renaming of s is  lorn. indeed  if a set s has a renaming which is horn but s i t s e l f is not horn  then s w i l l have an i n t e r p r e t a t i o n i as in the theorem r e l a t i v e to which there is no r e f u t a t i o n s a t i s f y i n g the conditions of theorem 1. 
theorem 1. let s be an unsatisfiable set of horn clauses. let i be an i n t e r p r e t a t i o n over the language of s. then there exists a r e f u t a t i o n r of s such that each resolution in r s a t i s f i e s one of the following two conditions: 1. one of the resolvends is a positive unit which is f a l s i f i e d 
by 1  or 1. one of the resolvends and the r e s o l vent are both f a l s i f i e d by 1. 
proof. let s1 be an unsatisfiable set of ground instances of clauses in s and l e t r1 be a r e f u t a t i o n of s' satisfying the conditions of theorem 1 
w t t h 1 as the i n t e r p r e t a t i o n . let r be the r e f u t a t i o n of s obtained by l i f t i n g r' in the usual 
manner. r s a t i s f i e s the conditions of this theorem as can be seen by the following. suppose p is a false positive unit in r' and p is the corresponding clause in r. p cannot contain a negative l i t e r a l because it has a positive clause  p  as an instance. also  p cannot contain more than one positive l i t e r a l because it is either in a horn set or is deduced from a horn set by resolution 
l1 - thus p is a positive u n i t . moreover  it has p as an instance  and p is false in i. therefore  i f a l s i f i e s p  and the resolution in r using p s a t i s f i e s condlton 1 of this theorem if the corresponding resolution in r 1 using p s a t i s f i e s condit i o n 1 of theorem 1. 
　　　in a similar way  if a resolution in r* s a t i s f i e s condition 1 of theorem 1  the corresponding resolution in r w i l l satisfy condition 1 of t h i s theorem because one of the resolvends and the resolvent w i l l have instances which are false in 1. since every resolution in r' must satisfy one of the two conditions  the theorem is proved. 
	1. 	implementation 
　　　while semantic resolution has a great deal of i n t u i t i v e appeal  in actual practice few theoremproving methods that have been programmed use any but the most t r i v i a l of interpretations for the languages being used and they are usually based on some syntactically recognizable feature. for example  the underlying i n t e r p r e t a t i o n for pi resolution and also for hyporrcsolution is the i n t e r p r e t a t i o n in which every predicate symbol is assigned the r e l a t i o n which is i d e n t i c a l l y f a l s e   and false clauses are recognized by the lack of negative l i t e r a l s . one would l i k e to see the use of interpretations which s a t i s f y   say  the axioms of the mathematical theory under consideration and thus would have the effect of focusing a t t e n t i o n on the special hypotheses and conclusion of the result for which a proof is sought  as in set-of-support r e s o l u t i o n . the advantage here over just set of support would be that the semant i c requirement  i . e .   that one ancestor be f a l s e   
would have effect at a l l levels of the search whereas set-of-support r e s o l u t i o n   while quite e f f e c t i v e at level 1  allows any level 1 or greater clause to resolve with any other clause. or perhaps even b e t t e r   one would like to be able to arrange the i n t e r p r e t a t i o n so as to single out p a r t i c u l a r clauses as being important for the p a r t i c u l a r theorem by making those clauses false in the i n t e r p r e t a t i o n even if some do happen to be axioms. that i s   for a p a r t i c u l a r problem the user might suspect that a certain axiom was especially relevant; he could arrange that axiom to be false in the i n t e r p r e t a t i o n thus allowing it to enter the semantic search at an e a r l i e r stage. 
　　　there are two reasons why l i t t l e use has been made of semantic information in theorem provers. f i r s t   for interpretations whose domains are not f a i r l y small  determining whether or not a clause containing variables is f a l s i f i e d may be a formidable job. for example  the standard pair of axioms for a s s o c i a t i v i t y in group theory each have 1 variables. in a domain of 1 i n d i v i d u a l s   the determination that one of these axioms has no false instance  the normal case  would require testing 1 d i f f e r e n t 1-tuples. even with highly e f f i c i e n t   optimized methods such a task would not l i k e l y be feasible. the second reason has to do with representing  for a given clause  which values f a l s i f y that clause. that i s   having determined whether a clause possibly has some instances which are f a l s e   one would like to save that information. if a clause c has several variables  there may be many tuples that f a l s i f y c requiring more storage to save than the information might be worth. the purpose of t h i s section is to present methods by which these two problems might be overcome. these remarks are not meant to be an exhaustive study of this area; in p a r t i c u l a r   this section w i l l not discuss in great d e t a i l the methods and data structures that might be used by a p a r t i c u l a r program. rather the purpose is to present some i n t e r e s t i n g   previously known r e s u l t s about i n t e r pretations and horn sets and to indicate b r i e f l y how these properties can be useful for theoremproving programs. we begin with a basic d e f i n i t i o n from mathematics. 
definition; let l be a f i r s t order language  and l e t i and i be two interpretations over l with domains d. and d respectively. the cross-product of i and i  is the i n t e r p r e t a t i o n i whose domain d is the cross-product of d1 and d1   i . e .   the set of ordered pairs whose f i r s t coordinate comes from 

1 

d1 and whose second coordinate comes from d1 and which assigns values to the predicate  constant  and function symbols of l as follows: if a is a constant symbol and i1 assigns a1 to a and 1 assigns a1 to a  then i assigns the ordered pair  a1.a1  to a; if f is an n-ary function symbol and if i1 assigns to f the n-ary function ♀- on d and i1 assigns to f the n-ary function f1 on d    then 1 assigns to f the n-ary function on d1 x d1 
which maps an n-tuple of ordered pairs   a  b    
. ..  a  b    onto the ordered pair  f  a 1  ... a n   f 1  b 1  ... b n   ; if p is a predicate symbol and if i1. assigns to p the n-ary predicate p1 on d1 and i1 assigns to p the n-ary predicate p1 on d1  then 1 assigns to p the n-ary predicate which is true for an n-tuple of ordered 
and only if both are true. 
　　　　mckinsey   1   noted that if a clause containing only one positive literal is true in two interpretations then it is also true in the cross product of the two interpretations. in addition  if a clause c is true of each algebra in a class of algebras that is closed under algebraic direct product  then there is subclause c' of c containing at most one positive literal  i.e.  c' is horn  and c' is also true of every algebra in the class. horn  later showed that the class of horn sets and the class of sets of clauses which are true in a direct product of two interpretations if and only if they are true in each individual interpretation are the same class.  thus the name horn clause.  in both cases only clauses containing only the equality predicate were considered; however  their methods easily generalize. some of these results will be reviewed in the following paragraph; the reader is referred to  and  for the full presentation of this material as well as other results. 
　　　　consider two interpretations i. and i1 and a ground literal 1 . if i  is an atom  then by definition l is true in 1. x i1 if and only if it is true in both 1. and i1 now if l is the negation of an atom  say l=-m  then l is true in i. x i1 if and only if it is true in at least one of i1 and i1 for m is true in 1. x i1 if and only if it is true in both 1 and 1 and so m is false  i.e.  l is true  if and only if m is not true in both i1 and i1 that is m is false in at least one of tnem. next  suppose the ground horn clause c=-l1...-ln m is true in both i. and i1. now if m is true in both i1. and i- then m is true in the cross-product  and so c is also true in the cross-product. if m is not true in one of the i's  say m is false in 1.  then some negative literal -ii is true in i . by the above  -i  is true in the cross-product  so again c is true in the cross-product. thus  any ground horn clause that is true in two interpretations is true in the cross-product. of course  a horn clause 
would be false in 1. x i1 if and only if each negative literal was false in both i- and i1 and the positive literal was false in at least one of the two. this analysis applies equally well to the case of determining if a particular instance of a clause with variables is true or false in the cross-product of two interpretations. these results generalize to products of more than just two interpretations in a straightforward way. 
thus  if i .   . . .   i n are interpretations and c is a horn clause which is true in each 1 i  then c is true in i1x....xln . if c is false in then each negative literal of c is false in each ii and the positive literal of c is false in at least one ii . 
　　　　the above remarks form the basis for reducing the amount of work required to evaluate horn clauses for semantic resolution and to store information about the tuples for which such clauses are false. consider again the case of an associativity axiom c with 1 variables. if instead of a single interpretation with a domain of 1 elements we use the cross-product of two interpretations each of whose domains has 1 elements  and thus whose cross-product domain has 1 elements   then to evaluate c in 1 x i1 one would evaluate c in i1 and i1 requiring 1 1*tuples to be considered as opposed to 1 *1   with a reduction factor of 1 . if more sublnterpretations are used the savings is even more dramatic. for example  by using three domains each with 1 ele-
ments  we would be using the equivalent of a single interpretation whose domain had 1 ele-
ments  and the evaluation of a clause with 1 variables would require the1 consideration of 1   or approximately 1   1-tuples. moreover  efficient means of organizing the calculations can be expected to reduce to an even greater degree the number of tuples requiring testing for a given clause. 
　　　　the storage problem can also be reduced by taking advantage of the properties of horn clauses. for the purposes of this paragraph we use the following notation: 

n-tuples then a x b will indicate the n-tuple of ordered pairs     a   b     . . .     a n  bn   . recall that a clause c is false in i1 x i1 it and only if every negative literal is false in both i1 and i1 and the positive literal is false in at least one of the two sublnterpretations. the amount of space required to store the set of tuples falsifying a clause in the cross interpretation can be greatly reduced by storing instead certain tuples from the sublnterpretations and using these to construct tuples from the cross interpretation when  and if  needed. suppose the tuples of values that make c false in i1  are a. .. .a and 
those that make c false in 1~ are b  ... b . further  suppose the tuples that make all the negative literals of c  false but the positive literal true in i. are c1  . . c n   and those for i1 are d1  ... d m  . consider a tuple from 
1. x 1 of the form a1 x z. if z is one of the bi's or 1's then by the above remarks a x z makes c false in the cross interpretation since the first coordinate falsifies every literal of c while the second coordinate satisfies at most just the positive literal. on the other hand  i f z is not among the b!s or d's  then it satisfies a negative literal of c and io  a x 1 must satisfy c in i. x 1 '  a  similar remark holds for values of the  form z x b . finally  a value o♀ the   form c x d must satisfy c since both c. and d satisfy the positive literal of c  also  as 
1 jjbove  any value of the form z x y where either z or y is not among the appropriate lists must satisfy c. thus  the tuples of the cross inter-
preta tion that f a l s i f y c are a x b i   ai x dj   and ci  x bj for diffenent combinations of i and j. thu* by saving  in addition to the values in the subinterpretations that f a l s i f y the clause  those values that f a l s i f y the negative l i t e r a l s but sati s t f y the positive l i t e r a l one can s i g n i f i c a n t l y reduce the amount of storage required. to get an estimate of the kind of saving involved  consider again two i n t e r p r e t a t i o n s of 1 elements each and a clause with three variables. there are 1-tuples of values in each domain. suppose a t h i r d f a l s i f i e d the clause in each domain and another t h i r d f a l s i f i e d the negative l i t e r a l s but s a t i s f i e d the positive l i t e r a l . then there would 
be 1 t r i p l e s in each domain that need to be saved or 1 altogether. in the cross i n t e r p r e t a t i o n there are 1*1 t r i p l e s of ordered pairs that f a l s i f y the clause. as before  if more smaller domains are u ed  the reduction is even more d r a s t i c . moreover  e f f i c i e n t notations from set theory can be used to store such information. for example  if several tuples have coordinates in common  this can be indicated by condensing some of the coordinates to be sets. e.g.  the six t r i p l e s   a   b   c       a   b   d       a   b   e       e   b   c      e b d  and e b e  could be represented by  {.a e}   b     c   d   e }   . that i s   anything from the set   a   e   can be used as f i r s t coordinate  b as second coordinate and any of   c   d   e   for the t h i r d such notations have proven useful in other contexts in theorem proving  see  for example  auguston and minker   1     . 
　　　f i n a l l y   the use of cross-products makes it easier for the user to   t a i l o r   i n t e r p r e t a t i o n s to emphasize p a r t i c u l a r clauses by giving the various clauses the appropriate properties in the coordinate i n t e r p r e t a t i o n s . for example  consider the theorem of group theory that if x 1 =e for every x the group is commutative and i t s standard representation as a set of clauses with the conclusion negated. this set contains the three u n i t s pxxe  pabc  and -pbac. suppose one would l i k e to concentrate on pabc and -pbac and delay the entry of pxxe into the search. then in the cross product i n t e r p r e t a t i o n pabc and -pbac must be false while pxxe must be true. then pabc must be made false in at least one of the interpretations in the cross-product while the atom pbac 
must be true   i . e .   -pbac false  in a l l the i n t e r pretations in the cross product. also  pxxe must be true in a l l i n t e r p r e t a t i o n s . it would be easier to devise two interpretations of  say  1 or 1 elements each  that satisfy these conditions  especially the condition on pxxe  than to v e r i f y them for a single i n t e r p r e t a t i o n of 1 elements. if the above conditions are satisfied and the two subinterpretations are themselves groups  then neither the axioms nor the clause pxxe can be resolved together  and the r e f u t a t i o n search must begin with either pabc or with -pbac and another clause whose resolvent with -pbac has a false instance in the cross-product. indeed  the clause pxxe would not be able to resolve with any clause c unless c and the resolvent both had false instances. 
	iv. 	concluding remarks 
　　　this paper has presented a new strategy  a strengthening of semantic resolution  which is complete for the class of horn sets. this strategy is a c t u a l l y a combination of semantic and syntact i c approaches-syntactic because the emphasis on positive u n i t s is t o t a l l y independent of any intended meaning of the symbols; semantic because d i f f e r e n t i n t e r p r e t a t i o n s supplied by the user will y i e l d d i f f e r e n t search spaces. the results reviewed in section 1 w i l l prove most useful in actually implementing the new strategy  or indeed any semantic strategy  for programs that w i l l deal with horn sets. the time and storage savings that those r e s u l t s w i l l provide may make it possible for the f i r s t time to construct t r u l y semantic 
programs  that is programs which can use the infor-
mation provided by the user about the intended meaning of the clauses as opposed to a meaning imposed by some syntactic property as in hyperr e s o l u t i o n . there are some questions that are raised by these r e s u l t s . f i r s t   it may be possible to derive an e f f i c i e n t strategy from lemma 1 and constrained-variable r e s o l u t i o n . also  it would be very i n t e r e s t i n g indeed to know if some version of theorem 1 held in the non-horn case for hyperresolution  which is the analogue of p o s i t i v e - u n i t resolution for horn sets. f i n a l l y   it would be most useful to know how many of the r e s u l t s here carry over to paramodulation for e q u a l i t y . 
