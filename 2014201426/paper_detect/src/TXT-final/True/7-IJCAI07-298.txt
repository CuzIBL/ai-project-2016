
the action language golog has been applied successfully to the control of robots  among other things. perhaps its greatest advantage is that a user can write programs which constrain the search for an executable plan in a flexible manner. however  when general planning is needed  golog supports this only in principle  but does not measure up with state-of-the-art planners. in this paper we propose an integration of golog and planning in the sense that planning problems  formulated as part of a golog program  are solved by a modern planner during the execution of the program. here we focus on the adl subset of the plan language pddl. first we show that the semantics of adl can be understood as progression in the situation calculus  which underlies golog  thus providing us with a correct embedding of adl within golog. we then show how golog can be integrated with an existing adl planner for closed-world initial databases and compare the performance of the resulting system with the original golog.
1 introduction
the action language golog  levesque et al.  1  has been applied successfully to the control of robots  burgard et al.  1   among other things. it is based on reiter's version of the situation calculus  reiter  1   where so-called basic action theories  bats   which define action preconditions and effects together with an initial situation  are combined with a programming language  which offers imperative programming constructs as well as non-deterministic action choices. perhaps the greatest advantage of golog is that a user can write programs which constrain the search for an executable plan in a flexible manner. however  when general planning is needed  golog supports this only in principle through the use of non-deterministic actions  but does not measure up with state-of-the-art planners.
¡¡as a running example  consider a taxi-driveragent in a grid world  whose task it is to deliver passengers to their destinations. its actions are pickup  dropoff  and moving up  down  left or right one square in the grid. in golog  the agent's highlevel control program can then be specified like this:
¡¡while there are passengers to be served do the following: choose a passenger  plan a route to her location  follow that route  pick up the passenger  plan a route to her destination  follow that route and drop her off.
¡¡planning can easily be specified in golog as trying out actions nondeterministically in a forward-search manner until a given goal is satisfied  reiter  1 . while possible in principle  this quickly becomes infeasible  in our example even for small grid worlds. modern planners like ff  hoffmannand nebel  1 or hsp1  bonet and geffner  1   on the other hand  are capable of handling much larger planning problems. so it seems natural to try to combine golog with a modern planner. here we focus on planners for the adl  pednault  1  subset of the plan language pddl  fox and long  1 .
¡¡for the integration  at least two issues arise: differences in expressiveness and the correctness of the embedding. while bats in the situation calculus can use the full power of firstorder logic  adl descriptions are more restricted. for example  they assume a finite domain and the initial state consists of literals only. as we will see  it is not very difficult to map adl into bats. for the purposes of this paper  it will suffice to simply use a bat that is the result of such a mapping; a companion paper  eyerich et al.  1  discusses the expressiveness issue in more detail.
¡¡as for correctness  we need to make sure that a plan returned by an adl planner for a given goal and state description is also a legal plan in the situation calculus for the corresponding situation. the semantics of pddl's adl subset  fox and long  1  is given in terms of state transitions as an adaptation of lifschitz' semantics of strips  lifschitz  1 . roughly  a state consists of a set of literals  and a transition for a plan operator is obtained by adding and deleting literals. by extending earlier work by lin and reiter   we are able to show that the adl semantics is captured precisely by progression in the situation calculus  which refers to updating the description of an initial situation so that conclusions about the future that can be drawn using the updated theory are the same as those drawn from the theory before the update. as a nice side-effect  we obtain a purely declarative semantics of adl within the situation calculus.1
¡¡to obtain our results  we use a variant of the situation calculus called es recently proposed by lakemeyer and levesque . compared to reiter's situation calculus  this has at least two advantages: for one  the translation of adl into the new situation calculus is simpler as there are no situation terms to worry about  in es  situations occur only in the semantics ; for another  semantic definitions like progression become simpler as it is no longer necessary to consider arbitrary first-order structures but only certain ones over a fixed universe of discourse. these simplifications do not lead to a loss of expressiveness. in fact  lakemeyer and levesque  showed that es captures precisely the non-epistemic fragment of the situation calculus and golog.
¡¡after establishing that adl plans are correct for the corresponding bat  we turn to the embedding of an adl planner into golog. in particular  we use the latest version of ff  hoffmann and nebel  1  together with an implementation of indigolog  sardina et al.  1   which incorporates on-line execution  reiter's forward-search planner and progression. we present first experimental results showing the pay-off of using golog with ff versus pure golog.
¡¡the paper proceeds as follows. we first introduce es and show how bats are formulated in this logic. next  we define adl problem descriptions and provide a formal semantics by mapping them into basic action theories. in section 1  we define progression and establish the correctness of updating an adl state with respect to progression. in section 1  we discuss the integration of golog and ff. then we conclude.
1 the logic es
the language is a first-order modal dialect with equality  predicate and function symbols. for simplicity we assume that all predicates are fluent and that all function symbols are rigid  i.e. predicates may be changed by actions while functions may not. the logical connectives are ¡Ä        together with the modal operators  and  r  where r may be any term  including a variable.1 other connectives like ¡Å     ¡Ô  and   are used as the usual abbreviations.
¡¡terms and formulas are built from these primitives in the usual way. we let r denote the set of all ground terms. for simplicity  instead of having variables of the action sort distinct from those of the object sort as in the situation calculus  we lump both of these together and allow to use any term as an action or as an object. we read  r ¦Á as  ¦Á holds after action r  and ¦Á as  ¦Á holds after any sequence of actions . we call a formula without free variables a sentence and a formula fluent  when it does not contain  and  r  operators and does not mention the special predicate poss  which is used to denote executable actions . in addition  we introduce the following special notation: a type ¦Ó is a unary predicate; we write  x:¦Ó.¦Õ instead of  x.¦Ó x    ¦Õ.
the semantics: intuitively  a world w will determinewhich fluents are true  but not just initially  also after any sequence of actions. formally  let p denote the set of all pairs ¦Ò:¦Ñ

uation calculus formulas from adl operators  but did not show the semantic correspondence between the two.
¡¡¡¡¡¡1the original es also considers epistemic operators which we do not need here and are left out.
where ¦Ò ¡Ê r  is considered a sequence of ground actions  and ¦Ñ = f r1 ... rk  is a k-ary ground fluent atom. a world then is a mapping from p to {1}.
¡¡first-order variables are interpreted substitutionally over the rigid terms r  i.e. r is treated as being isomorphic to a fixed universe of discourse. this is similar to l  levesque and lakemeyer  1   where standard names are used as the domain. given a world w  for any sentence ¦Á  we de where
w ¦Ò |= f r1 ... rk  iff w ¦Ò:f r1 ... rk   = 1; r1
	|=  	  iff	=	and	=	;
  for every r ¡Ê r;
w ¦Ò |=  r ¦Á iff w ¦Ò ¡¤ r |= ¦Á;
  for every.
the notation ¦Áxt means the result of simultaneously replacing all free occurrences of the variable x by the term t.
when ¦² is a set of sentences and ¦Á is a sentence  we write
¦² |= ¦Á  read: ¦² logically entails ¦Á  to mean that for every w  for every  then w |= ¦Á. further |= ¦Á  read: ¦Á is valid  abbreviates {} |= ¦Á.
basic action theories: basic action theories can be defined similar to reiter's: a set of sentences ¦² is a basic action theory iff it only mentions the fluents in a given set f and is of the form ¦² = ¦²1 ¡È ¦²pre ¡È ¦²post  where
  ¦²1 is a finite set of fluent sentences 
  ¦²pre is a singleton of the form1 poss a  ¡Ô ¦Ð  where ¦Ð is fluent with a being the only free variable;
  ¦²post is a finite set of successor state axioms of the form1
  one for each fluent f ¡Ê f   {poss}  where ¦Ãf is a fluent formula whose free variables are among.
¡¡the idea is that ¦²1 represents the initial database  ¦²pre is one large precondition axiom and ¦²post the set of successor state axioms for all fluents in f  incorporating reiter's solution  reiter  1  to the frame problem .
1 adl
pddl's adl subset goes beyond strips by supporting equality  conditional effects and typing. also  preconditions may contain negation  disjunction and quantifiers.
adl problems:	these are defined by
1. a finite list of types ¦Ó1 ... ¦Ól and object; along with this a finite list of statements of the form
¡¡¡¡¡¡¡¡¡¡¡¡¡¡¦Ói: either ¦Ói1 ¡¤¡¤¡¤¦Óiki    1  defining ¦Ói as the union of the ¦Óij; a primitive type is one that does not appear on the left-hand side of such a definition and is distinct from object;
1. a finite list of fluent predicates f1 ... fn; associated with each fj a list of types ¦Ój1 ... ¦Ójkj
 one for each argument of fj  abbreviated as
1. a finite list of objects with associated primitive typeso1:¦Óo1 ... ok:¦Óok  object symbols are constants ;
1. a finite list of adl operators a1 ... am  see below ;
1. an initial state i  see below  and
1. a goal description g in form of a precondition formula.
i and g may only contain the symbols from items 1 to 1. we further require that all the symbols are distinct. in particular  this forbids using a type also as an fj and using an object also as an ai. all objects are implicitly of type object  which is a supertype of all other types. in the case of closed-world planning  the initial state i is simply given by a finite set of ground fluent atoms  otherwise it is a set of ground literals.
¡¡an adl operator a is a triple   whereis a list of variables with associated types 1 ¦Ða is a precondition formula and a an effect formula  both with free variables among y	. both have to be constructed using only the	y and the symbols from items 1 to 1 of the problem description. the name of the operator a has to be a p-ary function symbol  where p is the number of parameters of a.
¡¡precondition formulas are the following: every atomic formula and every equality atom  t1 = t1   where each of the ti is either a variable or a constant  is a precondition formula. if ¦Õ1 and ¦Õ1 are precondition formulas  then so are ¦Õ1 ¡Ä¦Õ1   ¦Õ1 and  x:¦Ó.¦Õ1. without loss of generality  we assume that an effect formula is a conjunction of effects of the following forms  at most one of each kind for each fluent fj:
		 1 
the notation ¦Ã   ¦× stands for a conditional effect: if the precondition formula ¦Ã holds before performing the action  then ¦× will become true afterwards.
an example: let us consider the taxi domain. for reasons of space we only consider the operators  initial state  and goal description:
1. operators:
move :direction  true 
 x1:object.  x1:xcoord.  x1:ycoord.
   z1:xcoord.  z1:ycoord.
¡¡¡¡at y1 z1 z1  ¡Ä connects z1 z1 y1 x1 x1 ¡Ä  x1 = y1 ¡Å in y1 x1      at x1 x1 x1   ¡Ä  x1:object.  x1:xcoord.  x1:ycoord.
   z1:xcoord.  z1:ycoord.
at y1 z1 z1  ¡Ä connects x1 x1 y1 z1 z1 ¡Ä
 x1 = y1 ¡Å in y1 x1       at x1 x1 x1   
it is always possible to move a taxi into one of the four main cardinal directions; a move that would lead out of the grid has no effect. after moving  the location of the taxi and every passenger in it has changed accordingly. pickup :passenger 

is to be understood as a list of pairs yi:¦Ói.
 z1:xcoord.  z1:ycoord. at y1 z1 z1  ¡Ä at y1 z1 z1 
¡¡¡Ä  z1:passenger. in y1 z1   in y1 y1  
picking someone up is only possible when the taxi is at the same location as the passenger and there is noone already in the taxi  we assume it can only hold one person at a time .
drop passenger   true 
 x1:taxi.  x1:passenger.
    x1 = y1 ¡Ä in x1 x1      in x1 x1   finally  it is always possible to drop the taxi's occupant  if any  at its current location.
1. initial state  in a closed world :
i = {at taxi1 1   at passenger1 1  
destination passenger1 1   connects 1 east 1  ...
connects 1 north 1 }
1. goal description:
g = p:passenger.  x:xcoord.  y:ycoord.
destination p x y    at p x y 
   in  fox and long  1  a state-transition semantics is defined for applying adl operators in the closed-world case. the idea is roughly this: given any closed state i  represented as a set of ground atoms  and an operator whose precondition is satisfied in i  then the application of  results in a new state i which is obtained from i by deleting all those holds in i and adding all those where holds.
1 mapping adl to es
in this section  we generalize the approach of  lin and reiter  1  and show that applying adl operators corresponds to a certain form of first-order progression in es. we begin by constructing  given an adl problem description  a corresponding basic action theory ¦².
the successor state axioms ¦²post: it is not a coincidence that the normal form  1  resembles the effect axioms used by reiter to construct his successor state axioms as a solution to the frame problem. generalizing his approach  also applied in  pednault  1    we transform a set of operator descriptions to a set of successor state axioms as follows. let

by    we mean that there only is a disjunct for those ai for which1 there is some in the effect of
ai. using a similar definition for  we get the successor state axiom for fj:

the additional conjunct ensures that fj can only become true for instantiations of the  that are consistent with the type definitions for fj's arguments.
¡¡since our semantics defines predicates to be fluent and types have to be situation-independent  we additionally include for each type ¦Ói a successor state axiom
	 a ¦Ói x  ¡Ô ¦Ói x .	 1 
applying all of the above to the example  we get  move y1 y1  ¡Ä   z1:xcoord.  z1:ycoord.
at y1 z1 z1  ¡Ä connects z1 z1 y1 x1 x1 ¡Ä
¡¡¡¡¡¡¡¡¡¡¡¡ x1 = y1 ¡Å in y1 x1      move y1 y1  ¡Ä   z1:xcoord.  z1:ycoord.
at y1 z1 z1  ¡Ä connects x1 x1 y1 z1 z1 ¡Ä
¡¡¡¡¡¡¡¡¡¡¡¡ x1 = y1 ¡Å in y1 x1      pickup y1 y1  
 drop passenger y1  ¡Ä
:passenger.  x1 = y1 ¡Ä in x1 x1  
notice that  as stated above  not all operators are mentioned in   but only those that possibly cause a positive truth value for at. therefore  the construction presented here still incorporates a solution to the frame problem. our ¦²post now consists of the following sentences  among others1 :
object x1  ¡Ä xcoord x1 
¡Äycoord 
 a in x1 x1  ¡Ô
 passenger 
 a taxi x1  ¡Ô taxi x1  
 a passenger x1  ¡Ô passenger x1 
the precondition axiom ¦²pre: a precondition axiom can be obtained by a similar case distinction; in the example:
¦Ð =  y1:taxi. y1:direction. a = move y1 y1 ¡Å
 y1:taxi. y1:passenger. a = pickup y1 y1 
¡Ä z1:xcoord. z1:ycoord. at y1 z1 z1 
¡Äat y1 z1 z1  ¡Ä   z1:passenger. in y1 z1 ¡Å
 y1:taxi. a = drop passenger y1 
 1 
the initial description ¦²1: we finally not only have to encode the information about the initial world state  but also about the typing of objects:
	¦Ói x  ¡Ô  ¦Ói  x  ¡Å ¡¤¡¤¡¤ ¡Å ¦Óik  x  	 1 
	¦Ói x  ¡Ô  x = oj ¡Å ¡¤¡¤¡¤ ¡Å x = ojki  	 1 
	object x  ¡Ô  ¦Ó1 x  ¡Å ¡¤¡¤¡¤ ¡Å ¦Ól x  	 1 
¦²1 contains one sentence  1  for each  either  statement  1 . we further have one sentence of the form  1  for each type declaration of predicate arguments. for each primitive type ¦Ói such that oj1 ... ojki are all objects declared to be of that type  we include a sentence of the form  1 .  1  finally declares object to be the union of all other types. although the abovesentences in themselves only establish type consistency in the initial situation  there are no  operators here   the special form of ¦²post defined earlier ensures that these facts will remain true in successor situations.
to encode the actual initial state  we include for each fj1
		 1 
in case of a closed world  assuming that are all atoms in i mentioning fj. in an open-world problem  we instead include
		 1 
 if the are all the objects in positive literals and the  are all the objects in negative literals . in our closed-world example  we end up with a ¦²1 consisting of:
at x1 x1 x1     object x1  ¡Ä xcoord x1  ¡Ä ycoord x1   
in x1 x1     taxi x1  ¡Ä passenger x1    taxi x  ¡Ô  x = taxi1  
passenger x  ¡Ô  x = passenger1   object x  ¡Ô  taxi x  ¡Å ¡¤¡¤¡¤ ¡Å passenger x   
at x1 x1 x1  ¡Ô   x1 = taxi1 ¡Ä x1 = 1 ¡Ä x1 = 1 ¡Å
 x1 = passenger1 ¡Ä x1 = 1 ¡Ä x1 = 1   
in x1 	¡Ô false
correctness: first we note some simple consequences of the above construction:
lemma 1 let be an action  i.e. an operator and object symbols as instantiations for a's parameters  and	o be object parameters  i.e. constants  for the fluent fj. then
1.  is satisfiable iff the	o are of the correct types  according to the adl problem description .
1.  is satisfied in the original adl state i  where   ¡Ê {+  }.
1. ¦²1 |= poss is satisfied in the original
	adl state i and the p	are of the correct types.
we are now ready to show the correspondence between adl's state-transition semantics of adding and deleting literals and first-order progression in es. the definition below is derived from lin and reiter's original proposal of progression  but it is simpler due to the fact that we need not consider arbitrary first-order structures.
¡¡a set of sentences ¦²r is a progression of ¦²1 through a ground term r  wrt ¦²pre and ¦²post  iff:
1. all sentences in ¦²r are fluent in
 i.e. equivalent to  r ¦Õ for some fluent formula ¦Õ ;
1. ¦²1 ¡È ¦²pre ¡È ¦²post |= ¦²r;
1. for every world wr with wr |= ¦²r ¡È¦²pre ¡È ¦²post  there is a world w with w |= ¦²1 ¡È ¦²pre ¡È ¦²post such that:
		iff 
for all ¦Ò ¡Ê r  and all primitive formulas such that f ¡Ê f  including poss .

 abbreviatesstands for t1 ... tk  then  means  r1 = t1  ¡Ä ¡¤¡¤¡¤ ¡Ä  rk = tk .
intuitively  for an observer in the situation after r was performed  and only looking  forward  in time   it is impossible to distinguish between a world satisfying the original theory
¦² and one that satisfies ¦²r ¡È ¦²pre ¡È ¦²post.
¡¡for a basic action theory that is the translation from an adl problem  it is quite easy to obtain such a progression given an action  and an adl state description i. provided that ¦²1¡È¦²pre |= poss  we do the following for all
 finitely many  such that is type-consistent:1
: add.
: delete.
for open worlds  additionally delete in the first case and add in the second case. if we then denote the set of literals to be added by adds and the ones to be deleted by dels  the new state description is

in the closed-world case  i correspondsprecisely to the adl state which results from applying theaccording to the state-transition semantics of  fox and long  1 .
theorem 1 let i be obtained as described above  given an
adl problem and a ground action. further let
  where  is the result of
applying the constructions in  1 - 1  to i instead of i. for all fj  let the consistency condition  hold.
then ¦²r is a progression of ¦²1 through r in the closed-world case.
¡¡in the open-world case  this holds under the additional condition that whenever for some  with   ¡Ê {+  }  it is the case that is satisfiable  then .
let us consider progression in our closed-world example. suppose we want to progress through move taxi1 south   m  for short . first note that ¦²1 ¡È ¦²pre |= poss m . the reader may verify  assuming an appropriate axiomatization of connects
and that these are all type-consistent instantiations for x1 x1 x1 such that respectively are entailed by
¦²1.	because there are no disjuncts for move in and a	a
 are not entailed for any instantiation of x1 x1. the new state description then is
 taxi1 1   at passenger1 1   destination passenger1 1   connects 1 east 1  ...
connects 1 north 1 }
we obtain the progression ¦²m consisting of
 m  at x1 x1 x1     object x1  ¡Ä xcoord x1 
¡Äycoord x1    
 m  in x1 x1   taxi x1  ¡Ä passenger x1      m  taxi x ¡Ô x = taxi1   
 m  passenger x ¡Ô x = passenger1   
 m  object x ¡Ô taxi x  ¡Å ¡¤¡¤¡¤ ¡Å passenger x      m  at x1 x1 x1 ¡Ô  x1 = taxi1 ¡Ä x1 = 1 ¡Ä x1 = 1 
¡Å x1 = passenger1 ¡Ä x1 = 1 ¡Ä x1 = 1    
 m  in x1 ¡Ôfalse 
theorem 1 tells us that  for a closed initial state  the application of an adl operator under the state-transition semantics is the same as progressing the initial situation of the corresponding bat. in the open-world case  it prescribes what the result of applying the adl operator should be. it is easy to show that the theorem extends to arbitrary sequences of actions and hence that legal plans under adl are also legal plans in the bat. 1
1 golog with ff
golog is a programming language completely defined within the situation calculus. as shown in  lakemeyer and levesque  1   it can be as well defined directly within es. at its core  golog uses a basic action theory to define the meaning of its  primitive  actions and the initial situation. based on these primitives  complex actions can be formed using constructs from imperative programming such as sequence  ;   if-then-else  while-loops and procedures. in addition  non-deterministic action choices and the nondeterministic choice of arguments  ¦Ðx  offer some flexibility when executing a program  including full planning over the primitive actions.
¡¡for our experimental results  we are using an eclipse prolog implementation of indigolog  courtesy of hector levesque; see  sardina et al.  1  for details of the semantics. indigolog features on-line execution  where a program is executed step-by-step  and progression in the sense of the previous section  that is  the initial state is updated after each execution of a primitive action. indigolog also includes an implementation of reiter's forward-search planner  specified as a golog procedure   which can be called as achieve g  for a given goal formula g  and which returns as a plan a sequence of actions p  if one is found. p then takes the place of achieve g  in the program and step-wise execution resumes  starting with the execution of p.
¡¡the underlying bat is the translation of the adl problem description for the taxi domain. the following program is used throughout our tests:
while  p:passenger.  atdest p  do
 ¦Ðp:passenger 
 atdest p  ; achieve atsamepos taxi1 p  ; pickup taxi1 p ; achieve atdest p  ; drop passenger taxi1 
endwhile
here  atdest p  stands for
 x:xcoord.  y:ycoord. at p x y  ¡Ä destination p x y 
and atsamepos t p  abbreviates
  x:xcoord.  y:ycoord. at p x y  ¡Ä at t x y . the following table summarizes  for varying grid sizes and number of passengers  the run-time behavior  in seconds  of the original indigolog versus indigolog where achieve is replaced by a call to the adl planner ff  hoffmann and nebel  1 ; according to theorem 1  the legal plans in both cases are the same. each test was run on four instances  with a random distribution of passengers and destinations   and the average run-time is given. experiments were carried out on a pentium m with 1ghz and 1gbyte of main memory.
prob. sizegolog + ffgolog + achieve1  1 pass.111  1 pass.111  1 pass.111  1 pass.111  1 pass.111  1 pass.1-1  1 pass.1-1  1 pass.1-1  1 pass.--the table clearly shows that the built-in golog planner cannot compete for all but the smallest problem instances.  missing entries are tests which did not return a result after 1 minutes and were aborted. 
¡¡we want to emphasize that our approach does not aim at competing with existing planning systems on solving classical planning problems.1 instead  we envision that the combined system pays off in scenarios where each approach by itself would be either inefficient or fail completely. in particular  this is the case when the problem is very large and information has to be gathered at run-time. to illustrate the idea  instead of the toy example above  consider a robot constantly transporting items in a warehouse: the robot would execute thousands of actions  including sensing its environment and servicing new transportation requests. while it does not seem feasible to solve the whole problem by an offline planner  it is certainly possible to write an indigolog program to solve such a task. the role of the planner is then to solve certain sequential subtasks  e.g. finding an optimal schedule for currently pending requests  at which golog by itself would be too slow. we believe that the results in this paper lay the necessary ground work for such scenarios.
1 conclusion
in this paper we showed that it pays off to combine the action language golog with modern planners. in doing so  we developed a declarative semantics for adl as progression in the situation calculus. currently we are also considering larger fragments of pddl  fox and long  1  with features such as time and preferences. it would be interesting to also consider other action formalisms like flux  thielscher  1  or the family of a languages  gelfond and lifschitz  1 . our hope is that this will lead to a convergence of the planning and action-language communities  which have been largely separated since the inception of strips.
acknowledgments
this work has partly been supportedby the ec under contract number fp1-cosy and dfg grants la 1-1 and ne 1-1.
