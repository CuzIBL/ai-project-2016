 
this paper presents logisim  a cad tool to simulate the temporal behaviour of hybrid circuits containing electro-mechanical  electrohydraulic  hydro-mechanic  and digital control devices. logisim combines the advantages of both qualitative and quantitative reasoning by producing a high-level description  discrete states  of the circuit behaviour while reasoning at the quantitative level  physical values . in addition  device models in logisim follow a particular description methodology proposed to avoid introducing an artificial computational complexity in the simulation. logisim is fully implemented in the constraint logic programming language chip. the constraint-solving techniques of chip used in logisim  i.e. an incremental decision procedure for linear constraints over rational numbers  consistency techniques on domain-variables and conditional propagation  are all necessary to solve the problem efficiently. logisim has been applied successfully to real-life industrial circuits from aerospace industry in the elsa project and clearly demonstrates the potential of this kind of tool to support the design process for these circuits. 
1 	introduction 
many circuits in aerospace industry combine hybrid components such as electro-mechanical  e.g.  relays   electro-hydraulic  e.g.  electro-distributors   and hydromechanic  e.g.  jacks  devices  together with control digital components  e.g.  numeric commands . the circuit of landing gear and trap of a fighter aircraft is an example of such circuit combining these elements. 
　there is presently a lack of tools supporting the design and analysis of such circuits. to perform usual tasks such as simulation or troubleshooting  engineers often resort to empirical methods or try to adapt tools developed for other kinds of circuits  e.g.  spice  . unfortunately the information produced by these quantitative simulators is of very low level and engineers have to extract information relevant for their own purposes. it follows that designing and analysing hybrid circuits are costly and time-consuming activities  which deserve better support. 
1 	tools 
　the elsa project  has been initiated for this very reason and aims at providing engineers with an integrated environment for hybrid circuits. inside this environment  engineers should be able to describe circuits and perform numerous activities such as simulation  diagnostic  test generation  and fault analysis. 
　this paper presents logisim  the simulator of elsa. it aims at presenting the simulation results at a sufficiently abstract level to deduce the functional behaviour of the circuit while reasoning with a sufficient accuracy to capture the physical behaviour of the circuit. devices are modelled in terms of states representing significant abstractions of their behaviour  e.g.  a light bulb ''on    off  or  blown out  . accuracy is achieved by defining each state in terms of both quantitative and qualitative constraints. for instance  the light bulb model contains a constraint stating that its state is ''on  if there is enough current. logisim receives as input a description of the circuit and a set of actions  e.g.  the pushing of a button or the closing of a switch . it produces the successive states reached by the circuit and reports anomalies such the blowing of components  oscillations and ambiguities in the circuit description. 
　logisim is implemented in the constraint logic programming language chip. chip provides both an adequate formalism for describing hybrid circuits and the constraint-solving techniques necessary to simulate them 
efficiently  i.e.  
  an incremental decision procedure for linear con-straints over rational numbers ; 
  consistency techniques on domains-variables  1; 1; 
1 ; 
  conditional propagation techniques. 
implementing logisim in a conventional language would have required a programming effort orders of magnitude greater. 
　logisim has been applied to real-life circuits including hundreds of components like the landing gear and trap of a fighter aircraft. 
the rest of the paper is organised as follows. section 
1 gives an overview of logisim. section 1 discusses the implementation of the device models. section 1 illustrates logisim on a particular example and gives execution results on real-life circuits. section 1 discusses related research and the last section draws the conclusions of the paper. 

1 	overview of logisim 
logisim consists of  1  a library of device models and  1  a scheduler responsible for directing the simulation. the circuit description is expressed in terms of the device models and used by the scheduler to simulate the circuit behaviour. 
1 	device models 
any device model consists of 
  a static pari defining the possible states of the device. 
  a dynamic part defining the temporal aspects of the device behaviour. 
　the behaviour of the device is described in terms of a finite set of states  each of which is defined through linear constraints on the physical values of the device. device states include not only working states  e.g. a light bulb is  on   but also faulty states  e.g. a light bulb is  blown out  . the faulty states1 are of primary importance to report anomalies which might occur in the circuit. the constraints defining a device state can be classified into constraints defining 
  physical laws applying to the state  e.g. 	ohm's laws ; 
  conditions on the device physical values proper to the state  e.g. the current in one port is higher than a threshold value . 
in general  constraints of the first type are equations while constraints of the second type are inequalities. 
　the dynamic part defines temporal aspects of the device behaviour by defining 
  the possible transitions between the device states; 
  the events implied by the transitions; an event is a demand to fix up  or to restrict the possible values of  the state of a device. 
logisim distinguishes between two types of transitions. 
  internal transitions: transitions which occur because of component values  e.g. the current present at the ports of a device. a typical example is the transition from  on  to  off  for a light bulb. 
  external transitions: transitions which occur because of events. 
　note that the device models in logisim has to be context-free since they will be used for all other activities of the elsa project. this requirement is satisfied by meeting criterias put forward by qualitative physics  such as no function in structure and locality. 
　we now illustrate these principles on two examples: a light bulb and a relay. we make use of state diagrams where states are represented by circles  internal transitions by thin arrows and external transitions by thick arrows. it is assumed that a state can be its own successor. 
　　1  the notion of faulty states is conceptual. these states are perfectly valid for logisim and are not handled differently from working states. 

figure 1: transition graph and state definitions for a light bulb 

figure 1: transition graph of a relay 
　the behaviour of the light bulb is approximated through three different states: on  off and blowing f. the transition graph and the state definitions are shown in figure 1. the states shares two constraints expressing kirchhoff's current law and ohm's law. they differ by their respective constraints on the current flowing through ports 1 and 1. 
a relay with six ports and one anchor is modelled by 
1 states. the working states are 
  up: there is no current at ports 1 and 1 and the anchor connects ports 1 and 1; 
  down: there is a current flowing in ports 1 and 1 and the anchor connects ports 1 and 1; 
  dw  downward : there is a current flowing in ports 1 and 1 and the anchor does not connect anything. this is a transition state between up and down; 
  uw  upward  : there is no current flowing in ports 1 and 1 and the anchor does not connect anything. this is a transition state between down and up; 
　the faulty states up f  down-f  uw f and dw f handle erroneous behaviours of the relay  e.g. blowings of components  oscillations . 
　the transition graph  see figure 1  has both internal and external transitions. the two internal transitions generate events that will result in external transitions. 
　the constraints defining these states are very similar to those of the light bulb and the reader should have no difficulty to define them. 


1 	t h e scheduler 
the scheduler makes use of an agenda which contains the current set of events to carry out. events are the smallest relevant units of the simulation. each event in the agenda is characterised by a device identification  a set of possible states and the time at which the action takes place. initially the agenda contains the set of external events. during the simulation  state changes of some devices can introduce new internal events to be executed at a later step. 
　the scheduler behaviour is defined by the successive application of the following steps: 
  impose the constraints implied by the transition graph; 
  remove the first event from the agenda and apply it; 
  compute the new circuit state; 
  update the agenda;   report possible anomalies; until the agenda is empty. 
　the scheduler is a meta-program whose definition is shown in figure 1. the first clause defines the halting condition. the second clause is the core of the scheduler. 
　the predicate impose trans.constraints constructs the new state skeleton and imposes the transition constraints. the state skeleton is a list of domain variables  one for each device. each variable has in its domain the set of possible states of the device. the transition constraints prevent the device from receiving a state that cannot be reached from the current state using the transition graph. 
　the predicate apply first event removes the first event in chronological order from the agenda and applies it to the state skeleton. 
　the predicate compute newstate is the core of the simulator. it computes a new consistent circuit state. it constructs the call to the circuit and executes it. this sets up the constraints implied by the devices and the connections. the l a b e l i n g procedure is then used to 
1 	tools 
assign a state to each device. the way this computation is achieved is the topic of the next section. 
　the predicate update agenda adds to the agenda new events that might have been generated by some transitions. 
　the last goal in the body is a recursive call to the scheduler with the new agenda and the new state. 
1 device models 
1 	principles 
given a circuit state  a simulation step consists in computing the next state in time. this can be seen as a constrained search problem. the constraints are defined by the device models and the transitions and a solution is the assignment of states to the devices which satisfies the constraints. three principles for the device models have been defined to solve this problem efficiently. 
　first  constraints have to be taken into account as soon as possible. consider the light bulb example. since the first two constraints are shared by all states  they can be stated once for all without knowing the state of the device. this argument can be generalized. as soon as a device can only be assigned a subset of the possible states  the constraints common to all these states can be taken into account immediately. 
　second  the search space is not made up by the device states but by the topologies of the devices. all physical values throughout the circuit can be computed as soon as the circuit topology is fixed. this idea can be used to classify the devices and to identify those which really need choices. 
definition 1 a transition is weak if it does not change the device topology. otherwise it is strong. 
definition 1 a model is an s-model if it does not contain strong internal transitions. otherwise it is a g-model. 
　for instance  the light bulb was modelled by an smodel while the relay was modelled by a g-model. when computing the new state  only the g-models have to be considered for the choices. 
　finally device models should include value-to-state constraints to ensure that all information is deduced as soon as possible. value-to-state constraints restrict the possible states of the device as soon as some conditions on the component values are satisfied. for instance  when | l l |   i t   the state of the light bulb must be off. 
　all three techniques allow to avoid redundant work and to reduce the search space significantly. 
1 	example 
　figures 1 depicts the implementation of the light bulb. the first two constraints are constraints expressing kirchhoff's current law and ohm's law. the remaining goal defines the value-to-state constraint. it makes use of conditional propagation  an important constraintsolving technique of chip. declaratively  it is a simple if then-else construct. 


	if condition then 	goal-1 else 	goal-1 endif 
procedurally  it provides an efficient demon-driven mechanism. it is handled in the following way. for any allowed condition  chip has at his disposal a procedure able to decide 
  if the condition is always true or always false for all instances of the condition. 
  if the condition is true for some instances and false for some others. 
　therefore facing such a constraint  chip uses a procedure to evaluate the condition. if the condition is true  goal-1 is executed. if it is false  goal-1 is executed. otherwise the if jthen else construct delays waiting for more information. any constraint on domain-variables and rational terms can make up an allowed condition. conditional propagation enables to deduce the state of the device from the current flowing through ports 1 and 
1. note also the place where the constraint 
	state 	o f f 
is set up. it illustrates the first principle  i.e.  state the constraints as soon as possible. in this particular example  the constraint is set up even if the particular state is not yet fully defined. its effect is to remove the state off as soon as either ii   it or ii   - i t - finally it is interesting to note that the state definitions contain both quantitative and qualitative constraints. 
1 	refining device models 
in logisim  the search space is defined by the the circuit topologies accessible from the current circuit state. since real circuits are purely deterministic  the combinatorial aspect of the problem must be artificial and depends only on the way device models are designed. the question is then 

figure 1: new transition graph for a relay 
how to keep an appropriate level of abstraction without introducing an artificial complexity   
　the answer to this question falls back once again to the importance of the topology. at some point of the simulation  g-models still have several possible states; many of them correspond to different device topologies and can be reached from the current state by internal transitions. it follows that cutting down the number of possible strong internal transitions for a particular device directly reduces the size of the search space. this amounts to transform g-models into s-models by adding new intermediary states. this transformation is by no way artificial; it really captures some states of the devices which were not covered by the previous models and which represent important transition steps. 
　in implementation terms  transforming a g-model into an s-model means that strong transitions are only achieved through external transitions. hence the simulator is sequentialized by transforming backtracking during the search of a new state into iteration through the scheduler. 
　applying this idea to the relay leads to the transition graph depicted in figure 1. two new states are introduced: 
  s-uw: this state is reached from the state down when not sufficient current is available in port 1. 
  s-dw: this state is reached from the state up when sufficient current is available in port 1. 
　the state s-uw  resp. s-dw  has the same topology as down  resp. up . moving from down  resp. up  to s-uw  resp. s-dw  generates a new event in the agenda specifying that the device will reach the state uw  resp. dw  after a certain delay. 
　as it can be seen from the above diagram  topological changes can only occur due to an event in the agenda. 


figure 1: a simple electromechanical circuit 
as a consequence  the topology of the relay is known at any simulation step. 
some device types might be difficult to model by an 
s-model. in that case  a g-model can be defined and used inside logisim. 
1 	results 
logisim has been tested on a variety of examples ranging from small to real-life hybrid circuits. real-life circuits logisim has been applied to include a controller for the landing gear and trap of a fighter aircraft and the command of a machine tool. the first circuit is fully hybrid since it contains electro-mechanical  electrohydraulic and hydro-mechanic devices. it contains 1 components from 1 different device types and 1 connections. the second circuit is a machine tool containing more than hundred components. experimental results show that the time for a simulation step is constant for a given circuit and linear in the number of components. for the above real-life circuits  it takes around 1 seconds for a simulation step on a sun-1 using the chip interpreter. 
　to illustrate the overall approach of logisim  a simple example is presented. figure 1 describes the circuit under study. assume now that initially all the relays are in the up position and that the switch is off. if the set of events to carry out contains the closing and the opening of the switch  logisim will successively produce the states for the circuit shown in figure 1. logisim also produces any quantitative information required by the 
1 	tools 

user but they are not shown here. 
　as mentioned previously  logisim is able to detect ambiguities in a design. ambiguities arise when logisim yields several solutions producing different circuit states. this happens when several events in the agenda occur at the same time. for instance in the above circuit  if the delay parameters in the circuit relays are given equal  logisim yields two different solutions; the first solution is the one shown above and the second one have light bulb 1 on and light bulb 1 off. therefore it is not possible to predict the behaviour of the real circuit. 
1 	related work 
much work has been done for the software simulation of circuits especially for digital circuits and quantitative simulators but  to our knowledge  the problem as defined in this paper has not been addressed in the literature. the most relevant work has to be found in study of the static behaviour of analog circuits. 
　de kleer and brown apply qualitative reasoning to the analysis of analog circuits . they use the notion of qualitative states which divide the behaviour of a component into different regions  each of which is described by a different set of confluences. unfortunately  the loss of information induced by the use of confluences is very important. at each step of the simulation  qualitative reasoning returns a large set of possible states for the circuit  many of them being inconsistent. moreover qualitative reasoning is not able to detect anomalies such as blowings of components. therefore it turns out that an approach based on qualitative reasoning is not practical for simulating hybrid circuits. 
　in ars and el  1; 1   stallman and sussman use piecewise linear models  1; 1  to analyse analog circuits. piecewise linear models capture much more information than qualitative states. however their constraint-solver based on expression inference  is too weak. its inability to solve systems of inequalities induces several drawbacks. on the one hand  they may generate inconsistent circuit states even for simple circuits . on the 

other hand  inequalities cannot be used for pruning the search space in an a priory way but simply as tests  when all variables are instantiated . this leads to a pathological behaviour known as trashing  where failures are detected very late in the computation implying deep backtracking. stallman and sussman propose the use of dependency-directed backtracking to overcome this difficulty but this remedies only partly to the problem. 
　heintze et al also used piecewise linear models to analyse analog circuits . their constraint-solver  clp r   aims at propagating inequalities. this overcomes the first drawback of ars and el. however inequalities are not used to prune the search space in an a priori way in their approach either. their system is then based on brute-force search; it assigns sequentially a state to each device and tests if it is compatible with already assigned devices. if not  the program backtracks to the last choice point. 
1 	conclusion 
this paper has presented logisim  a cad tool to simulate the temporal behaviour of hybrid circuits containing electro-mechanical  electro-hydraulic  hydro-mechanic  and digital control devices. logisim combines the advantages of both qualitative and quantitative reasoning by producing a high-level description  discrete states  of the circuit behaviour while reasoning at the quantitative level  physical values . apart from supporting engineers at an appropriate level of abstraction  efficiency was the key issue addressed by logisim. to achieve that goal  logisim makes use of sophisticated constraint-handling techniques available in chip. the decision procedure for linear constraints over rational numbers  consistency techniques on domain-variables and conditional propagation make possible to deduce all the implications of the choices as soon as possible. hence they prune the search space by reducing the possible values of the device states. however  different ways of modelling a device can result in very different efficiency. therefore  in logisim  a particular methodology  the use of s-models  was adopted which avoids introducing an artificial complexity inside the simulation. logisim has been applied successfully to real-life industrial circuits from aerospace industry in the elsa project and clearly demonstrates the potential of this kind of tool to support the design process for these circuits. 
acknowledgments 
　we gracefully thank mehmet dincbas  herve gallaire and alexander herold and the members of the chip team at ecrc for their support and useful comments on this material. we also acknowledge the contributions of jean ruhla and the members of the elsa project at amd-ba. 
