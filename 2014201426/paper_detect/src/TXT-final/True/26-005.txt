 
gelfond and lifschitz introduce a declarative language a for describing effects of actions and define a translation of theories in this language into extended logic programs elp s . the purpose of this paper is to extend the language and the translation to allow reasoning about the effects of concurrent actions. logic programming formalization of situation calculus with concurrent actions presented in the paper can be of independent interest and may serve as a test bed for the investigation of various transformations and logic programming inference mechanisms. 
1 	introduction 
gelfond and lifschitz  introduce a declarative language a for describing effects of actions and define the semantics of this language based on the notion of a finite automata. the simplicity of the language and its semantics makes it easier to describe the ontology of actions and contributes to establishing correctness  and sometimes completeness  of various logical formalizations of their effects. in particular  a theory of action stated in a language of extended logic programs elp's   was described in  as a translation from a subset of a and proven to be sound w.r.t. the automata based semantics. soundness and completeness w.r.t. this semantics of the approaches to formalizing actions proposed earlier by pednault  ll   reiter  and baker  l  was recently proved by kartha . 
¡¡although the language a is adequate for formalizing several interesting domains  its expressive power is rather limited. in particular  every action is assumed to be executable in any situation and only one action can be performed at a time. in this paper we expand the syntax and semantics of a to remove these limitations and to allow for a representation of concurrent actions. as in   we translate theories in the resulting language ac into elp's and prove correctness of this translation. the translation can be viewed as a logic programming counterpart of situation calculus  and is interesting in its own right. the paper is organized as follows: in section two we define the syntax and semantics of the language ac- section three describes the translation of theories 
1 	logic programming 
from ac into elp's while section four illustrates the translation by the way of examples. due to space limitations the proof of correctness of the translation and other results will be presented in the full paper. 
1 	a language ac 
1 	syntax 
first let us recall the syntax of language a from . the alphabet of a consists of two disjoint nonempty sets ¡êi and e1 of symbols  called fluent names and action names. a fluent literal is a fluent name possibly preceded by -. a v-proposition is an expression of the form 
	f after 	a 1  ... a m 	 1  
where f is a fluent literal  and a 1   .   .   am  m   1  are action names. if m = 1   1  is written as initially f. 
an e-proposition is an expression of the form 
	a causes f if p1 ...  pn 	 1  
where a is an action name  and each of f  p 1   . . .   pn  n   1  is a fluent literal. p 1   . . .   pn are called preconditions of  1 . if n = 1  we write this proposition as a causes f. 
a domain description in a is a set of propositions. 
the syntax of ac differ from the syntax of a only in the definition of action names. by an action name of ac we mean an arbitrary finite set {a1 ...  an} of elements of ¡ê1. intuitively  an action name {a -} denotes a unit action while an action name a = {a1...  an  where n   1 denotes a compound action - a set of unit actions which are performed concurrently and which start and stop cotemporaneously. for simplicity we will often identify a unit action name {a } with a. to illustrate the notion of a domain description in ac let us consider the following examples from 1 : 
example 1. mary is lifting a bowl of soup from the kitchen table  while john is opening the door to the dining room. 
to represent this story in ac let us consider an alphabet consisting of a fluent name lifted and opened and 


baral and gelfond 

1 logic programming 

	baral and 	gelfond 

1 	logic programming 


1 	relation to other work. 
the language ac and the translation of domain descriptions in this language builds on the ideas from . the treatment of concurrency in the language of situation calculus follows the lines suggested in  1j. the use of the syntax and semantics of elp's instead of predicate calculus and circumscription allows us to come up with a more complete and computationally superior system of axiom. another recent paper addressing the possibility of expressing the results of concurrent actions in situation calculus is . the precise relationship between the two approaches is yet to be investigated. the important difference is again in the choice of the formalisms - the nonmonotonic approach of  seems to require combining two different non-monotonic formalisms - circumscription and default logic. in contrast our approaches use single formalisms of domain descriptions or that of elp's. there are some other differences: for instance  in example 1 expanded by a v-proposition  initially open   the formalism of lin and shoham uses inertia to entail holds open  {open.close}  while we believe that  unknown   produced by our systems  is the more intuitive answer. the nice feature of lin and shoham's formalization is so called epistemological completeness of their system . intuitively  a theory of a  deterministic  action is epistemologically complete if  given a complete description of the initial situation  the theory enables us to predict a complete description of the resulting situation when the action is performed. since some of our actions are not executable we can not expect to have precisely this property but it is possible to suitably modify the notion and show that both our formalisms are epistemologically complete w.r.t. executable actions. this will be done in the full version of this paper  in which we will also elaborate on our treatment of non-executable and unknown actions. 
acknowledgement 
we would like to acknowledge the grants nsf-iri-1  nsf-cda 1-1 and nsf-iri 1-1. we also thank v. lifschitz  g. kartha and the anonymous referees for their valuable comments. 
