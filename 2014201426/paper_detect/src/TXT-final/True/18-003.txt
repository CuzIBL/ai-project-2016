 
     term description is a simple  powerful extension of terras. for example  functional notation and lazy execution of a program is introduced in a very natural manner without changing the basic mechanism of the computation  such as unification and backtracking. espec i a l l y   the readability of functional languages is introduced without actually introducing functional concepts. 
x introduction 
a. term description 
     a term description is an extension to prolog data structure. a term description is a term with some description  constraints  on i t : 
 term  :  descr＼ption  
it means that  term  must satisfy  description  which is a predicate. in other words  whenever the term is unified with another term  the subs t i t u t i o n must satisfy the description. 
b. motivation 
     although unification in prolog is a useful tool for manipulating structures  it lacks the a b i l i t y to express complex patterns and operations over them. in prolog  dividing a l i s t into i t s f i r s t element and the rest  and constructing a l i s t from i t s f i r s t element and the rest are very easy. there is no need to c a l l a procedure to perform the operation. a simple l i s t notat i o n    carl odr  does both of them. however  it is not so easy to divide a l i s t into two l i s t s or construct a single l i s t from two l i s t s . this operation is usually called  append  and requires a special program. 
     some operations are expressed as patterns and others are expressed as procedures. this destroys the readability and coherence of program notations. the distinction is not the essential part of the programming. 
     using term description  a pattern for la described as: 
　　z:cons x y z  as well as a pattern for the concatenation of two l i s t s   x and y: 
z:append x y z  
the definition of  cons  i s : 
cons x y cons x y  . 
and the definition of  append  i s : append nil x x . append axis a x  y oons a z :append x y z  . i did not use the l i s t notation   x  y   in t h i s example on purpose. the notation is simply a syntax sugar for a term cons x y . we could similarly give a syntax sugar for 
z:append x y z   eg. x::y. 
xi semantics of term description 
	a 	term 	description  
 term : constraints  is unified with another term t   term  is f i r s t unified with t and then  constraints  is checked. a constraint is described as a prolog program  and executed as if it were written at the top-level. if the execution of the constraint f a i l s   the unification also f a i l s . 
     a constraint is executed only when it is necessary  i e .   only when the term description is unified with non-variable terms. 
     when two term descriptions are unified  only one of them is executed f i r s t . for example  when two term descriptions: x:p x y  and z:g z  are unified  x is unified with z:q z  f i r s t *   and p z:q z  y  is executed. then z:q z  is in turn unified with the f i r s t argument of ' p ' . 
     a term description may be used to produce a value. for example  x:plus l 1 x  behaves j u s t as 1. 
     the term description is similar to the macro in esp  chikayama 1  in i t s effect. esp provides two different expansion orders to d i s t i n guish value-constraining macros and valuegenerating macros. the same effect is achieved i m p l i c i t l y in term descriptions because of i t s demand driven execution. 
   * the selection is arbitrary and implementat i o n dependent. 

i i i features provided by the term description 
a. typed variables 
     we could type variables by adding a constraint as: 
x:integer x  
the above term description is unifiable only with integers. hence we oould regard x as having the type integer. 
b. functional natations 
	the term description is useful 	to 	simulate 
 functional  notations  for example  a sequence of function applications: 
　　 h  g  f x    is written as: 
w:h z:g y:f x y  z  w  
     if we follow the convention to place the result at the last argument position  we can further introduce a special syntax: 
　　!f x  which stands for y:f x y . 
now the previous example becomes: 
!h !g !f x    
this form is translated into a normal term description at read-in time. a unique variable names are attached to each pattern. 
     using the notation  a function factorial is defined as: factorial 1 / l . 
factorial n  !times n/ !factorial  !subl n    . 
c. equality for terms 
1. equality and reducibility 
     term descriptions introduce equality for terms in a very efficient way compared with other approaches  kahn 1  kbrnfeld 1 . checking the equality is nothing more than executing a program. 
     let us consider defining more than two terms equal. 	to 	assert 	that 	morning star 	and eveningstar in fact refer 	to 	the 	same 	object  venus   we may say: morning star  venus . 
evening star  venus . 
then the three terms:  ! morning-star    !evening-star  and  venus  become unifiable. a term description !p may be thought of as an intention of p  thus ! may be regarded as an intentional operator . 
     let us consider another 	example. 	what 	is expressed by a program such as: animal x  :-bird x . animal x :-mammal x . 
bird  x :-penguin  x . bird  x :-canary  x . 
	h. nakashima 	1 
panguin pool . 
is not 	equality 	but 	reducibi;ity 	 tamaki 	1  
shibayama 1 . a term  !animal is reducible to bird  which is further reducible to ! penguin  which is finally reducible to pool. a set of reducible terms  intentions  of !animal is a super set of the set of reducible terms of ibird. 
	in 	tne 	case 	of 	 morningstar  	and 
 eveningstar   two different terms are unified through a unique individual  venus . this can be done very efficiently. in the case of  birds  on the other hand  the numbers of individual is much larger than the original terms. therefore unifying 'animal and ibird usually requires lots of backtracking. further research is required here. 
1. equations 
     in krc  turner 1   equations in which the same term appear on both sides such as 
integers = l: addl integers  
are allowed*. the term description also covers this kind of equations. since  integers  is a function with no argument  it is translated into prolog predicate with one argument to return its value: integers  1! !map addl !integers   .  map  is used to apply  addl  to all the elements of a l i s t   and defined as: map pred   x  y    ipred x : imap pred y   . 
     the computation is infinite and hence we need  lazy execution.  
d. lazy execution and infinite data structure 
     a demand driven lazy execution is realized naturally as  lazy unification  of term descriptions. since a variable is unifiable to any term  it is also unifiable to any term descriptions. therefore  there is no need to execute the constraint when a term description is unified with an uninstantiated variable. the description is executed only when the result is actually necessary. 
     as the direct consequence of the lazy execution  indefinite data structure is manipulatable. the following example depicts the use of the infinite l i s t in  sieve of eratosthenes . 
     the predicate  integers  produces an infinite l i s t of integers beginning n. 
　　integers n   m !integers  !addl n    . note the recursive call of  integers  itself as the term description in the second argument. if this call is moved to the body  a call for  integers  runs infinitely and never returns. when the term description is used  only the minimum part required is computed  demand driven computation . 
*  :  is the concatenation operator. 

1 	h.nakashima 
     the predicate  sift  filters a l i s t of integers using  sieve . only those which are not products of the previous elements remain in the second argument. sift   p! rest    p: !sift !sieve p rest    . 
 sieve  removes those which are products of p. sieve p   x:remainder x p 1 l y   !sieve p y  . sieve p   x y   x1 !sieve p y   . 
     now a call integers 1   sift i p . returns p an infinite l i s t of prime numbers. 
     there are other  special purpose  primitives to deal with infinite data structures: prolog-ii  oolmerauer 1  has 'geler'  freeze  to manipulate infinite data structures; par log  clark and gregory 1  and concurrent prolog  shapiro 
1  have read only annotations for variables which provides synchronization among processes. 
iv implementation 
     a subset of the term description is implemented on uranus  a successor of prolog/kr  nakashima 1 . only those which is written in functional notations are supported. a term description !p x  is written in uranus as  p *x . 
     this notation is extended to the top-level of uranus. a user can type in a predicate call just as if it is a function. for example  
　　 + 1  echoes back 1. if we define primitive lisp functions as predicates  then the user can use the system just as if it were lisp  just by using     and       instead of     and    . here are some examples: 

note that we do not need  ' . we can simply use     and     to denote a quoted l i s t . 
     in usual  the description is replaced by the result once it is executed. thus the multiple execution of the same description is avoided. however  in some cases  it is impossible to optimize the execution automatically. user should be careful and responsible for the e f f i ciency. 
     as the final comment on implementation  it is worth noting that the implementation of lazy unification on prolog with structure sharing is efficient. since the form is shared  delaying the unification does not require extra storage. the storage required for saving the environment is just as large as is required for backtracking. 
v. conclusion 
     prolog with term description may not be pure prolog any more. however  the basic mechanism of the computation such as unification and backtracking are the same. 
     if prolog ever needs any extension such as introducing functions  it should be kept as small as possible and that the term description is one of the smallest solutions. 
acknowledgments 
the author gives many thanks to satoru tomura and 
kokichi 	putatsugi 	at 	etl  	koichi 	furukawa at 
icot  taku takeshima at fujitsu  kazunori ueda at 
nec  and members of ioot wg1  especially etsuya shibayama  for their detailed discussions. 
