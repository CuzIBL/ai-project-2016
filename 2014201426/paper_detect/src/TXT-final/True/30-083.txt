 
we develop a new method called decomposition search for computing minimax solutions to 
games that can be partitioned into independent subgames. the method does not use traditional minimax search algorithms such as alpha-beta  but relies on concepts from combinatorial game theory to do locally restricted searches. this divide-and-conquer approach allows the exact solution of much larger problems than is possible with alpha-beta. 
we show an application of decomposition search to the game of go  which has been traditionally regarded as beyond the range of exact search-based solution methods. our experiments with solving endgames show that alphabeta searches already become impractical in positions with about 1 remaining moves. however  an endgame solver based on decomposition search can solve a much larger class of endgame problems with solution lengths exceeding 1 moves. 
1 	introduction 
in two-player games with perfect information  minimaxbased search methods have been very successful. games such as 1-in-a-row  gomoku or nine men's morris have been solved  and heuristic game-playing programs have reached world championship level in a number of popular games. in chess and checkers  endgame databases constructed using retrograde analysis have uncovered a wealth of new information and forced the rewriting of the textbooks. 
　today  the conditions under which these standard approaches are successful are well understood. one class of games in which they have not succeeded is combinatorial games. such a game can be represented as a combinatorial sum of local games  called subgames. 
   decomposition search is a new computational method for solving combinatorial games. decomposition search decomposes a game into a sum of subgames  performs a 
   particular kind of local search for each subgame  applies 
1 	computer game playing 
combinatorial game theory to evaluate the resulting local game graphs  and determines overall optimal play from the combinatorial game values of subgames. 
　by reducing the scope of searches from global to local  the new method can compute minimax solutions and determine optimal play in such games much faster than classical techniques such as alpha-beta  which can not exploit the extra structure given by the decomposition. 
　the structure of this paper is as follows: section 1 reviews several existing divide-and-conquer approaches to solving games  including the combinatorial gametheoretical approach to the analysis of games with decomposable state. section 1 introduces decomposition search  a four step algorithm for finding the minimax 
solution and optimal play in combinatorial games. section 1 applies decomposition search to go endgames  and section 1 compares the performance of decomposition search with standard alpha-beta game tree search  using go endgames as examples. 
1 divide-and-conquer approaches to solving games 
research in game tree search follows two general goals: reducing the size of the search space  and traversing the space in clever ways in order to find solutions early. for solving games with large state spaces  divide-andconquer approaches are attractive: the idea is to identify simpler subproblems that can be solved more easily  and can contribute to an overall solution. 
1 heuristic problem decomposition: identifying subgoals 
in complex games  the ultimate goal of the game is difficult to reach directly. therefore  players identify subgoals and search specifically to achieve these goals. for example  bridge players analyze single-suit play  and chess players seek ways to capture a particular piece or break through a pawn chain. a narrowly focused search to achieve a subgoal is typically much easier than full width game search  yet achieving a subgoal can have a significant impact on the outcome of the game. 

1 	s p l i t t i n g a g a m e v e r t i c a l l y : e n d g a m e databases 
a very successful divide-and-conquer method in the computational analysis of games has been the construction of endgame databases. in this approach  a game is split vertically into progressively simpler games along the time axis. converging games such as checkers  nine men's morris or chess can be split in this way  because they simplify towards the end of the game when fewer and fewer pieces remain on the board. 
　endgame databases are built bottom-up  starting from the simplest subgames  by retrograde analysis  thompson  1 . the optimal play outcome  and optionally the distance to a win or conversion to another subgame  is computed for all positions in the subgame. databases are used during heuristic search: whenever search hits a database position  the exact value can be used in place of the heuristic evaluation. 
1 t h e m a t h e m a t i c s o f d e c o m p o s i t i o n : t h e c o m b i n a t o r i a l g a m e a p p r o a c h t o t h e a n a l y s i s o f g a m e s 
combinatorial game theory  conway  1; berlekamp et al.  1  provides the mathematical basis for a more radical divide-and-conquer method: it breaks up game positions into pieces and analyzes the overall game in terms of these smaller local subgames. 

figure 1: a three heap nim position and its subgames 
　each move in the game corresponds to a move in one subgame and leaves all other subgames unchanged. a game ends when all subgames have ended  and the final outcome of the game can be determined from the subgame outcomes. a well-known example of a combinatorial game is nim  shown in figure 1  which is played with heaps of tokens. at each move  a player removes an arbitrary number of tokens from a single heap  and whoever runs out of moves first loses. each nim heap constitutes one subgame. while winning a single subgame is trivial  winning the sum of several heaps requires either exhaustive analysis  or  much more efficiently  a computation using the calculus of combinatorial games. 
1 decomposition search 
this section develops decomposition search as a framework for solving games through decomposition  a particular kind of local search named local combinatorial game search  lcgs  and the analysis of the resulting local game graphs by applying combinatorial game theory. 
1 d e f i n i t i o n o f d e c o m p o s i t i o n search 
let g be a game that decomposes into a sum of subgames 
let the combinatorial game evaluation 
 decomposition search is defined as the following four step algorithm for determining optimal play of g: 
1. game decomposition and subgame identification: 
given g  find an equivalent sum of subgames  

1. local combinatorial game search  lcgs : for each g   perform a search to find its game graph  
1. evaluation: for each game graph  evaluate all terminal positions  then find the combinatorial game evaluation of all interior nodes  leading to the computation of  
1. sum game play: through combinatorial game analysis of the set of combinatorial games select an optimal move in  
　the following subsections describe the four steps of decomposition search in more detail  discuss how to use the results of decomposition search during game play  and describe limitations of the method. 
1 g a m e d e c o m p o s i t i o n a n d s u b g a m e 
i d e n t i f i c a t i o n 
the precondition for applying decomposition search to a game position is that it can be split into subgames which fit the combinatorial games model outlined in section 1. the specific decomposition procedure depends on the game rules. 
　in some games  such as nim  amazons and many of those analyzed in the book winning ways  berlekamp et a/.  1   a suitable decomposition follows directly 
from the rules of the game. figure 1 shows the decomposition of a nim position. in other games  such as go  more game-specific knowledge is necessary to find a good decomposition of a given position. 
1 local c o m b i n a t o r i a l g a m e search 
local combinatorial game search  lcgs  is the main information gathering step of decomposition search. it is performed independently for each subgame. lcgs generates a game graph representing all relevant move sequences that might be played locally in the course of a game. lcgs works differently from minimax tree search in a number of ways  including move generation and recognition of terminal positions. 
differences between l c g s and m i n i m a x search 
the game graph built by lcgs differs from the tree generated by minimax search. in the case of minimax  players move alternately  so each position is analyzed with respect to the player on move. in contrast  there is no player-to-move-next in a subgame. all possible local move sequences must be included in the analysis  including sequences with several successive moves by the same 
	muller 	1 

player  because players can switch between subgames at every move. 
　another difference between local and full state search is the treatment of cycles. to prevent infinite games  the repetition of a game position is forbidden in most games  or limited to a small number as in chess. however  the same local position can re-occur repeatedly as long as the whole game keeps changing. combinatorial game evaluation is defined only for games without cycles. therefore  decomposition search deals only with locally acyclic games  and with those cyclic games where cycles do not enter into optimal play. 
move generation 
lcgs must generate all legal local moves for both players  except in a terminal position or if moves can provably be pruned. such exact pruning rules are gamespecific. examples are restricting the number of equivalent moves generated to a single one  or pruning locally bad moves which are dominated by other moves. 
terminal positions and local scoring 
termination rules decide when a position can be evaluated without further expanding the game graph. lcgs defines the following termination rules: 
  no legal moves 
  no good move  game recognized as constant 
  value of position already known 
　the first two cases represent local terminal positions  which evaluate to an integer. this number  the local score  is game-specific and computed according to the rules of the game. 
　in the third case  if the value of a position is already known from another source  such as a transposition table  game-specific knowledge  or a precomputed local position database  lcgs can be terminated as well. the value retrieved for such a position is a combinatorial game  which has previously been computed by local evaluation as discussed in the next section. 
1 l o c a l e v a l u a t i o n : m a p p i n g g a m e g r a p h s t o c o m b i n a t o r i a l g a m e s 
local evaluation computes the combinatorial game value of a given acyclic local game graph with evaluated leaf nodes. let the players be black and white  with positive scores good for black. if from a local position p black can move to  and white can move to  
and if the evaluations of these follow-up positions are already known  then the evaluation c p  is given by the combinatorial game expression 

this expression can be brought into a canonical form using standard rules of combinatorial game theory. repeated bottom-up application of the formula eventually yields an evaluation of each node in the game graph. 
1 	computer game playing 
cycles that do not affect the game value cycles can occur during lcgs  even if they have no effect on optimal play. if evaluation fails due to cycles  bounds are computed by forbidding one player all moves that would repeat a position. this transforms the game graph into an acyclic graph  a different one for each player. if both bounds coincide  optimal play does not depend on cycles. otherwise  decomposition search stops and indicates a local evaluation failure. 
1 	sum game play 
to find an optimal move in a sum game  the final step of decomposition search selects a move which most improves the position. this improvement is measured by a combinatorial game called the incentive of a move. the incentives of all moves in all subgames are computed locally. if one incentive dominates all others  an optimal move has been determined. this is the usual case for games with a rich set of values such as go. 
　since incentives are combinatorial games and therefore only partially ordered  it can happen that more than one nondominated candidate move remains. in this case  an optimal move is found by a more complex procedure involving the combinatorial summation of games  conway  1 . 
　since such a summation can be an expensive operation  there is no worst case guarantee that decomposition search is always more efficient than minim ax search. in practice  it seems to work much better. the algorithm presents many opportunities for complexity reduction of intermediate expressions during local evaluation as well as during summation. 
　even though all search and most analysis is local  decomposition search yields globally optimal play  which can switch back and forth between subgames in very subtle ways  as in the example of figure 1. 
1 r e u s i n g d e c o m p o s i t i o n search results d u r i n g p l a y 
the result of decomposition search is a complete description and evaluation of all reasonable local play sequences  which makes perfect overall play possible. results of local analysis can be saved in a database. during play  each full board position corresponds to a set of matching local positions  one from each subgame. positions and their combinatorial game values are retrieved from the database. 
　as long as the opponent follows analyzed lines  followup moves can be played from the information stored in the database  without further search. if the opponent plays a less-than-optimal move that was pruned during lcgs and reaches an unevaluated position  the corresponding subgame is re-searched from the new position. 
1 	l i m i t a t i o n s o f d e c o m p o s i t i o n search 
there are two types of limitations for decomposition search: cyclic subgames and bounded computational resources. as discussed in section 1  cyclic subgames 

can be handled only in the case where cycles don't affect optimal play. 
　resource exhaustion is detected during algorithm execution if any of the following hold: game decomposition fails or results in very large subgames  lcgs exceeds a preset time or space limit  or intermediate combinatorial game expressions become too complex. practical limits are highly game-specific  and depend on the shape of local game graphs built during lcgs and on the complexity of the combinatorial games involved. for example  impartial games such as nim are generally easier to evaluate than partizan games such as go. 
1 applying decomposition search to 
go endgames 
this section discusses how to apply decomposition search to the game of go. game decomposition is achieved through the recognition of safe stones and territories and the resulting board partition. other go-specific aspects are pruning moves during lcgs and scoring of terminal positions. 
1 s u b g a m e i d e n t i f i c a t i o n i n g o b y b o a r d p a r t i t i o n 
a go position can be decomposed when parts of the board are isolated from the rest by walls of safe stones. moves in one part have no effect on other parts across such a wall. figures 1 and 1 show the two decomposition steps: first  finding safe stones and territories  and then identifying subgames as the connected components of the remaining points on the go board. 

figure 1: recognition of safe stones and territories 

figure 1: decomposition of go endgame position finding safe stones and territories 
safe territories are 'finished' subgames: they can be evaluated by a number  the size of the territory. areas which are completely surrounded by one player are candidate territories. territories are found by goaldirected search  applying the techniques of  miiller  1; 1  to prove the safety of candidate territories. 
　play in territories that have been proven safe is simple. the player never plays first in any territory. if the opponent attacks the player's territory  a goal-directed search is performed to find a refutation which restores the safety of the area. 
1 	l c g s i n g o 
an endgame area consists of unsettled stones  and of empty points which are not territory. safe stones  usually of both colors  surround each endgame area  as shown in figure 1. during endgame play  unsettled stones either become safe or are captured. empty points will either be occupied or become part of a safe territory. a rare special case are shared empty points in seki. 
scoring local terminal positions in go 
scoring assigns an integer to each terminal position. in 
chinese rules  scoring measures the difference between how many stones and empty points belong to either color. in japanese rules  territory and prisoners are counted. both kinds of scoring are straightforward in a terminal position since the status of all stones and empty points is known exactly. 
pruning moves 
in contrast to the speculative pruning in selective search methods  only moves that are provably worse-or-equal than others can be eliminated. for example  if a move achieves control of all points in the local area  it is optimal  and all other moves can be pruned. in almost surrounded areas such as the one shown in figure 1  the move at the entrance at a is the only good move for either player. 

figure 1: area with unique best move at a 
1 	f u l l b o a r d m o v e selection i n g o 
full board move selection in go distinguishes three cases: 
1. if the opponent just made a threat in player's territory  reply as in section 1 to keep territory and stones safe. 
1. otherwise  if the combinatorial game is not finished yet  play the sum game as in section 1. 
1. otherwise  perform a cleanup phase: fill in the final neutral points to finish the game. 
	miiller 	1 

1 	experiments 
the performance of decomposition search is compared with standard full board alpha-beta search on two representative examples from a set of go endgame puzzles in  berlekamp and wolfe  1 . in the examples  territories have been slightly strengthened to make it easier to prove their safety. the endgames are equivalent to the original version. in each experiment  the full board problem was solved from scratch. no precomputed database of subgames was used. 
1 	full-board minimax search 
the minimax implementation used a standard alphabeta search. the size of the transposition table was 1k entries for the small problems  1m entries for the big ones. since naive full-board search would be too expensive  alpha-beta search was allowed to use the same knowledge about safe territories and the same local pruning rules as logs. 
　in contrast to lcgs  pass moves must be generated  because in positions where there is no good move  play-
ers must be allowed to pass  instead of being forced to damage their own position. 
1 	first example: 1 point problem 
the first go endgame example  on a 1 x 1 board  is based on problem c.1 of  berlekamp and wolfe  1 . after computing safe stones and territories  the total remaining endgame area is 1 points. there are six regions labeled a to f  with sizes ranging from 1 to 1. 

figure 1: problem c.1 and its decomposition 
　this problem is trivial for decomposition search  yet already challenging for minimax. for more detailed testing  a series of simplified problems was created  in which several local endgame situations were replaced by constant territories. figure 1 shows such a simplified problem of size 1 consisting of areas a  b and c. areas d  e and f have been 'played out' and replaced by constant territories  as shown by the markings in the figure. 
   white is to play first in all problems. table 1 shows the total node count for the lcgs phase of decomposition search  followed by the node count and solution time in seconds for alpha-beta  as measured on a macintosh g1. the solution times for decomposition search are not shown  since they were all very similar at 1 - 1 seconds. the size of the transposition table  1m entries  was insufficient for the full 1 point problem  resulting in an enormous increase in solution time to over 1 hours. 
1 	computer game playing 

figure 1: problem c.1 reduced to areas a + b + c 
areas  size  nodes ds node* ab time ab a  1  1 1  1 a + b  1  1 1 1 a + b + c  1  1 1 1 a + b + c + d  1  1 1 1 a + b + o + d+e  1  1 1 1 a + b + c + d + e + f  1  1 1 1 table 1: comparison of decomposition search and alphabeta in problem c.1 
1 	second example: 1 point problem 
the second example  c.ll of  berlekamp and wolfe  1   is a go endgame problem on a 1 x 1 board. figure 1 shows the initial position and its partition into subgames. after determining safe stones and territories  1 unsettled points remain  partitioned into 1 distinct endgame areas of sizes 1 to 1. 

figure 1: c.ll: an 1 point endgame problem 
　an optimal 1 move solution sequence computed by decomposition search is shown in figure 1. on the system described above  the complete solution takes 1 seconds  including 1 seconds for lcgs searching a total of 1 nodes in the 1 subgames. the remaining time is taken up by proving the safety of territories and by operations on combinatorial games. alpha-beta search behaved as in the first example. node counts and solution times for the first few subproblems are shown in table 1. 

areas  size  node* ds node* ab time ab a  1  1 1  1 a + b  1  1 1  1 a + b + c  1  1 1 1 a + b + c + d  1  1 1 1 a + b + c + d + e  1  1 1 1 a + b + c + d + e + f  1  1 1 1 a + b + c + d + e + f + g  1  1 1 1 a + b + c + d + e + f + g + h  1  1 1 1 table 1: performance of alpha-beta on problem c.ll 

figure 1: an optimal solution to problem c.ll 
　as a final test two games starting from the initial position of c.ll were played against the current world champion go program the many faces of co. playing black  the decomposition search program gained one point over the game-theoretically optimal result. playing white  it gained five points. considering the small differences in value of the endgame plays involved  the total gain of six points in two experiments is significant. 
1 	discussion 
the discussion compares decomposition search and alpha-beta in terms of time requirements  results generated and information on alternative moves. 
t i m e requirement 
the fundamental disadvantage of alpha-beta relative to decomposition search is clearly demonstrated by the results: alpha-beta requires time that is exponential in the size of the whole problem  while lcgs' worst case time is exponential in the size of the biggest subproblem. if local combinatorial game evaluations can be computed and compared without too much overhead  a dramatic speedup results. 
reusing partial results 
another advantage of decomposition search over alphabeta is that it generates useful partial results in the form of evaluated subgames. frequently occurring games and their combinatorial game evaluation can be stored in a persistent database. if some local searches can be avoided or terminated early by a database hit  further speedups result. this method works for any combinatorial game  whereas in the case of minimax search databases can be built only for the endgame phase of converging games. 
information on alternative moves 
alpha-beta returns the best move and the minimax score of a position. evaluating alternative moves requires more search. on the other hand  data generated during decomposition search easily yields further information such as other optimal moves and the amount by which a bad move is inferior to an optimal one. 
1 	summary 
decomposition search is a new computational method to find minimax solutions of combinatorial games. the method provides a framework to restrict search to subgames  and uses powerful mathematical techniques of combinatorial game theory to combine the local results and achieve globally optimal play. as a divide-andconquer method  decomposition search results in vast improvements compared to alpha-beta search. 
　an application of decomposition search to go has demonstrated perfect play in long endgame problems  which far exceed the capabilities of conventional game tree search methods. 
