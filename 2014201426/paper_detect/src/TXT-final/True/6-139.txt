 
there is controversy as to whether explicit support for pddl-like axioms and derived predicates is needed for planners to handle real-world domains effectively. many researchers have deplored the lack of precise semantics for such axioms  while others have argued that it might be best to compile them away. we propose an adequate semantics for pddl axioms and show that they are an essential feature by proving that it is impossible to compile them away if we restrict the growth of plans and domain descriptions to be polynomial. these results suggest that adding a reasonable implementation to handle axioms inside the planner is beneficial for the performance. our experiments confirm this suggestion. 
1 motivation 
it is not uncommon for planners to support derived predicates  whose truth in the current state is inferred from that of some basic predicates via some axioms under the closed world assumption. while basic predicates may appear as effects of actions  derived ones may only be used in preconditions  effect contexts and goals. planners in this family include the partial order planner ucpop   the htn planner shop   and the heuristic search planner gpt   to cite but a few. the original version of pddl   the international planning competition language  also featured such axioms and derived predicates. however  these were never used in competition events  and did not survive pddl1  the extension of the language to temporal planning . 
　this is unfortunate  as the lack of axioms impedes the ability to elegantly and concisely represent real-world domains. such domains typically require checking complex conditions which are best built hierarchically  from elementary conditions on the state variables to increasingly abstract ones. without axioms  preconditions and effect contexts quickly become unreadable  or postconditions are forced to include supervenient properties which are just logical consequences of the basic ones-that is when extra actions do not need to be introduced or action descriptions customised. moreover  axioms provide a natural way of capturing the effects of actions on common real world structures such as paths or flows  as we then need to reason about how the transitive closure of 
   *the full proofs of the theorems appear in the techreport: http : //csl.anu.edu.au/m;hiebaux/papers/trarp1.pdi. a basic relation is affected.1 there is no intuitive way to update transitive closures in the body of a pddl action  while it is easy to axiomatize them recursively by means of pddl axioms  see  for a power flow example . 
　the most common criticism of the original pddl axioms was that their semantics was ill-specified  and that the conditions under which the truth of the derived predicates could be uniquely determined were unclear. we remedy this by providing a clear semantics for pddl axioms while remaining consistent with the original description in . in particular  we identify conditions that arc sufficient to ensure that the axioms have an unambiguous meaning  and explain how these conditions can efficiently be checked. 
　another common view is that axioms are a non-essential language feature which it might be better to compile away than to deal with explicitly  compilation offering the advantage of enabling the use of more efficient  simple  standard planners without specific treatment  1; 1; 1 . we bring new insight to this issue. we give evidence that axioms add significant expressive power to pddl. we take  expressive power  to be a measure of how concisely domains and plans can be expressed in a formalism and use the notion of compilability to analyse that . as it turns out  axioms are an essential feature because it is impossible to compile them awayprovided we require the domain descriptions to grow only polynomially and the plans to grow only polynomially in the size of the original plans and domain descriptions. of course  if we allow for exponential growth  then compilations become possible and we specify one such transformation  which  unlike those previously published  1; 1; 1   works without restriction. however  the above mentioned results suggest that it might be much more efficient to deal with axioms inside the planner than to compile them away. in fact  our experiments with ff  suggest that adding even a simple implementation of axioms to a planner clearly outperforms the original version of the planner solving the compiled problem. 
1 syntax and semantics 
we remain in the sequential planning setting of pddl1 level 1  which is essentially that of the version of pddl with adl actions used in the 1 planning competition. see  for a description of the syntax. for clarity we do not consider types. although we see axioms with conditions on numeric 
     !in that respect  pddl axioms offer advantages over the use of purely logical axioms as in the original version of strips . 
1 
same state. unlike traditional implications  these derivations are not to be contraposed  the negation of / is not derived from the negation of d   and what cannot be derived as true is false  closed world assumption . because of the closed world assumption  there is never any need to explicitly derive negative literals  so the constraint that the consequent of axioms be positive literals does not make us lose generality. 
　in sum  axioms are essentially  function free  logic program statements . for example  from the basic predicate on and the predicate holding in blocks world  we can define the predicate clear  as follows: 
　in a planning context  it is natural and convenient to restrict attention to so-called stratified axiom sets-stratified logic programs avoid unsafe use of negation and have an unambiguous  well-understood semantics . the idea behind stratification is that some derived predicates should first be defined in terms of the basic ones possibly using negation  or in terms of themselves  allowing for recursion  but without using negation. next  more abstract predicates can be defined building on the former  possibly using their negation  or in terms of themselves but without negation  and so on. thus  a stratified axiom set is partitionable into strata  in such a way that the negation normal form1  nnf  of the antecedent of an axiom defining a predicate belonging to a given stratum uses arbitrary occurrences of predicates belonging to strictly lower strata and positive occurrences of predicates belonging to the same stratum. basic predicates may be used freely. 
when no derived predicate occurs negated in the nnf of the antecedent of any axiom  a single stratum suffices. several planning papers have considered this special case  1; 1; 1 . 
　working through the successive strata  applying axioms in any order within each stratum until a fixed point is reached and then only proceeding to the next stratum  always leads to the same final fixed point independently of the chosen stratification  1  p. 1 . it is this final fixed point which we take to be the meaning of the axiom set. 
　we now spell out the semantics formally. since we have a finite domain and no functions  wc identify the objects in the domain with the ground terms  constants  that denote them  and states with finite sets of ground atoms. more precisely  a state is taken to be a set of ground basic atoms: the derived ones will be treated as elaborate descriptions of the basic state. in order to define the semantics  however  we first need to consider an extended notion of  state  consisting of a set s of basic atoms and an arbitrary set d of atoms in the derived vocabulary. the modeling conditions for extended states are just the ordinary ones of first order logic  as though there were no relationship between s and d. where denotes a vector of variables and denotes a vector of ground terms  we define: 

this modeling relation is used when applying an action in state s to check preconditions and effect contexts  and to determine whether s satisfies the goal. this is the only change introduced by the axioms into the semantics of pddl and completes our statement of the semantics. the rest carries over verbatim from . 
　checking that the axiom set in a domain description is stratified and computing a stratification can be done in polynomial time in the size of the domain description  using algorithm 1. the algorithm starts by building a matrix1 r such that when it follows from the axioms that predicate 's stratum must be strictly lower than predicate j 's stratum  when stratum must be lower than 
's stratum but not necessarily strictly  and when there is no constraint between the two strata  lines 1 . r is first filled with the values encoding the status  strict or not  of the base constraints obtained by direct examination of the axioms  lines 1 . then  the consequences of the base constraints arc computed  similarly as one would compute the transitive closure of a relation  lines 1 . there exists a stratification iff the strict relation encoded in r is irreflexivc  that is iff for all v  line 1 . in that case  the stratification corresponding to the smallest pre-order consistent with r is extracted  i.e. predicates are put in the lowest stratum consistent with r  lines 1 . 
1 axioms add significant expressive power 
it is clear that axioms add something to the expressive power of pddl. in order to determine how much power is added  we will use the compilability approach . basically  what we want to determine is how concisely a planning task can be represented if we compile the axioms away. furthermore  we want to know how long the corresponding plans in the compiled planning task will become. 
by we denote the cardinality of a set. 
　in the following  we take a pddl planning domain description to be a tuple where is the set of constant symbols  is the set of basic predicates  is the set of derived predicates  a is a stratified axiom set as in definition 1  and is a set of action descriptions  with the mentioned restriction on the appearance in atomic effects of the symbols in a pddl planning instance or task is a tuple where is the domain description  
and and are the initial state  a set of ground basic atoms  and goal descriptions  a formula   respectively. the result of applying an action in a  basic  state and what constitutes a valid plan  sequence of actions  for a given planning task arc defined in the usual way   except that the modeling relation in definition 1 is used in place of the usual one. by a pddl domain description and planning instances we mean those without any axioms and derived predicates  i.e.  a pddl domain description has the form 
　we now use compilation schemes  to translate pddl domain descriptions to pddl domain descriptions. such schemes are functions that translate domain descriptions between planning formalisms without any restriction on their computational resources but the constraint that the target domain should be only polynomially larger than the original.1 
　from a practical point of view  one can regard compilability preserving plan size linearly as an indication that the target formalism is at least as expressive as the source formalism. conversely  if a super-linear blowup of the plans in the target formalism is required  this indicates that the source formalism is more expressive than the target formalism-a planning algorithm for the target formalism would be forced to generate significantly longer plans for compiled instances  making it probably infeasible to solve such instances. if plans are required to grow even super-polynomially  then the increase of expressive power must be dramatic. incidentally  exponential growth of plan size is necessary to compile axioms away. 
1 we use here a slightly simplified definition of compilability. 
   1the size of an instance  domain description  plan  etc. is denoted by 

in order to investigate the compilability between pddl and 
pddl we will analyze restricted planning problems such as the j-step planning problem and the polynomial step planning problem. the former is the problem of whether there exists a 1-step plan to solve a planning task  the latter is the problem whether there exists a plan polynomially sized  for some fixed polynomial  in the representation of the domain description.*from the results on the computational complexity of pure qatalog and datalog with stratified negation 1   the next theorem is immediate. 
theorem 1 the 1-step planning problem for pddl is exptime-complete  even if all axioms are in pure datalog. if we now consider pddl planning tasks  it turns out that the planning problem is considerably easier  even if we allow for polynomial length plans. since guessing a plan of polynomial size and verifying it can easily be done in polynomial space  the polynomial step pddl planning problem is obviously in pspace. taking in addition vardi's  result into account that first-order query evaluation over a finite database is pspace-complete  hardness follows as well. 
theorem 1 the polynomial step planning problem for pddl is pspace-complete. 
　from these two statements it follows immediately that it is very unlikely that there exists a polynomial time compilation scheme from pddl to pddl preserving plan size polynomially. otherwise  it would be possible to solve all problems requiring exponential time in polynomial space  which is considered as quite unlikely. as argued  however  by nebel   if we want to make claims about expressiveness  then we 

should not take the computational resources of the compilation scheme into account but allow for computationally unconstrained transformations. interestingly  even allowing for such unconstrained compilation schemes changes nothing. 
theorem 1 unless exptime = pspace  there is no compilation scheme from pddl  even restricted to pure data log axioms  to pddl preserving plan size polynomially 
proof sketch. we use a proof idea similar to the one kautz and selman  used to prove that approximations of logical theories of a certain size are not very likely to exist. by using a datalog theory in order to describe all instances of the linearly bounded alternating turing machine acceptance problem up to a certain size  which in its general form is exptime-complete   we get a polynomial advice string  if a compilation scheme from pddl to pddl preserving plan size polynomially exists. this would imply that exptime pspace/poly. however  by karp and upton's  results  this implies that exptime = pspace. 
1 compilations with exponential results 
while it is impossible to find a concise equivalent pddl planning instance that guarantees short plans  it is possible to come up with a poly-size instance which may have exponentially longer plans in the worst case. such compilation schemes have been described by e.g. gazen and knoblock  and garagnani  under severe restrictions on the use of negated derived predicates. specifically  these schemes do not work if negated derived predicates appear anywhere in the 
1 
planning task 1 and the latter scheme  is further restricted to pure datalog axioms. 
　an interesting contrasting approach is that of davidson and garagnani . they propose to compile pure datalog axioms solely into conditional effects  which means that the resulting plans will have exactly the same length. however  as is implied by theorem 1  their domain description suffers a super-polynomial growth. 
　we now specify a generally applicable compilation scheme producing poly-size instances  which we will use as a baseline in our performance evaluation. in contrast to the schemes mentioned above  it complies with the stratified semantics specified in section 1 while dealing with negated occurrences of derived predicates anywhere in the planning task. 

encodes each stratum as an extra action stratum   see lines 1 in figure 1  which applies all axioms at this stratum in parallel  records that this was done  done;  and whether anything new  new  was derived in doing so. each is encoded as a universally quantified and conditional effect of stratuml-see lines 1. to ensure that the precedence between strata is respected  stratum* is only applicable when the fixed point for the previous stratum has been reached  i.e. when f ixed1 i  and the fixed point for the current stratum has not  i.e. when  not  fixedi   -see line 1. f encodes the fixpoint computation at each stratum i using an extra action fixpoint  which is applicable after a round of one or more applications of stratumt  i.e.  when donez is true   asserts that the fixed point has been reached  i.e. fixedj whenever nothing new has been derived during this last round  and resets new and don for the next round-see lines 1. next  the precondition and effect of each action description 
are augmented as follows  see lines 1 . be the highest stratum of any derived predicate appearing in the precondition of o  or 1 if there is no such predicate. before applying o  we must make sure that the fixed point for that stratum has been computed by adding f ixed*. to the precondition. similarly  let 1 be the lowest stratum such that some predicate in the antecedent of some axiom in  is modified in the effect of o  or 1 if there is none. after applying wc may need to re-compute the fixed points for the strata above that is  the effect must reset fixed  done  and the value of all derived propositions  at strata and above. finally  holds initially  and the goal requires to be true. the fact that f preserves domain description size polynomially  and the bounds given in theorem 1  follow directly from the construction. 
　it is obvious that a plan p for a planning task ii can be recovered from a plan  for the compiled planning task f h   by simply stripping all occurrences of stratum and fixpoint actions. in the worst case of course  there is no polynomial  such that . indeed  
the worst-case is obtained when  initially and after each action from p  all derived predicates need to be  re computed and only one proposition is ever derived per application of stratum actions. even if the planner is able to interleave as few fixpointt actions as possible with the stratum actions  this still leads to a plan of length 
where denotes the set of all instances of predicates in observe that is not polynomially bounded in and 1 planning: with or without axioms  
the absence of a polynomial time compilation scheme preserving plan size linearly not only indicates that axioms bring  much needed  expressive power  but it also suggests that extending a planner to explicitly deal with axioms may lead to much better performance than using a compilation scheme with the original version of the planner. to confirm this hypothesis  we extended the ff planner  with a straightforward implementation of axioms-we call this extension ff -and compared results obtained by ff on pddl instances with those obtained by ff on the pddl instances produced via compilation with f. 
　transforms each axiom  : derived into an operator with parameters preconditionand e f f e c t w i t h a flag set to distinguish it from a  normal  operator  uuring the relaxed planning process that ff performs to obtain its heuristic function  the axiom actions are treated as normal actions and can be chosen for inclusion in a relaxed plan. however  the heuristic value only counts the number of normal actions in the relaxed plan. during the forward search ff performs  only normal actions are considered; after each application of such an action  the axiom actions are applied so as to obtain the successive fixed points associated with the stratification computed by algorithm 1. 
　one domain we chose for our experiments is the usual blocks world  bw  with 1 operators. in contrast to most other common benchmarks  in bw there is a natural distinction between basic and derived predicates; in particular bw is the only common benchmark domain we are aware of where the stratification of the axioms requires more than one stratum. the basic predicates are on and ontable  and the derived ones are above and holding  stratum 1   as well as clear and handempty  stratum 1  whose axiomatisations use the negation of holding  above is only used in goal descriptions. for the experiment labelled bw-1 in the figures below  we generated 1 random initial states for each size .. 1 and took the goal that any block initially on the table had to be above all those that were initially not. note that expressing the resulting goal using on and ontable would require exponential space  highlighting once more the utility of derived predicates. as shown in the figure  the median run-time of shows a significant improvement over that of ff+f. the plans found by ff+ f in this experiment were an order of magnitude longer than those found by the experiment labelled bw-1 shows  for   the spe-
cial case of those instances for which the initial state has only one tower. here the improvement in run time is dramatic  as  finds the optimal plans whose length is only linear in 
　another domain we ran experiments on is the challenging power supply restoration  psr  benchmark   which is derived from a real-world problem in the area of power distribution. the domain description requires a number of complex  recursive  derived predicates to axiomatize the power flow  . we considered a version of the benchmark without any uncertainty for which the goal is to resupply all resuppliablc lines. for each number to 1 feeders  we generated 1 random networks with a maximum of 1 switches per feeder and with 1% faulty lines. the third figure above compares the median run times of and ff+f as a function of n. again the improvement in performance resulting from handling axioms explicitly is undeniable. in this experiment  the plan length does not vary much with n: with our parameters for the random instances generation  it is clustered around 1 actions for instances  and around 1 for the compiled instances. yet this makes all the difference between what is solvable in reasonable time and what is not. 
　although the domains in these experiments are by no means chosen to show off the worst-case for the compilation scheme  they nevertheless illustrate its drawbacks. the difference of performance we observe is due to the facts that compilation increases the branching factor  increases the plan length  and obscures the computation of the heuristic. 

　other published compilation schemes  1; 1  are not applicable to the above domains whose descriptions involve negated derived predicates. the exponential space transformation by davidson and garagnani  is applicable to bw  but was unable to cope with problems larger than  = 1 because it substitutes for their definitions all occurrences of nonrecursive derived predicates until none remains. this turns preconditions into adl constructs that quickly become too complex for ff's pre-processing step to compile them away in reasonable time  in difference to the experiments described above where pre-processing time was negligible. 
1 conclusion 
as reflected by recent endeavours in the international planning competitions  there is a growing  and  in our opinion  desirable  trend towards more realistic planning languages and benchmark domains. in that context  it is crucial to determine which additional language features are particularly relevant. the main contribution of this paper is to give theoretical and empirical evidence of the fact that axioms are important  from both an expressivity and efficiency perspective. in addition  we have provided a clear formal semantics for pddl axioms  identified a general and easily testable criterion for axiom sets to have an unambiguous meaning  and given a compilation scheme which is more generally applicable than those previously published  and also more effective in conjunction with forward heuristic search planners like ff . 
　future work will include more extensive empirical studies involving a more elaborate treatment of axioms within ff and planners of different types  as well as the extension of derived predicates and axioms to the context of the numerical and temporal language features recently introduced with pddl 1. axioms have long been an integral part of action formalisms in the field of reasoning about action and change where  much beyond the inference of derived predicate considered here  they form the basis for elegant solutions to the frame and ramification problems  see e.g. . it is our hope that the adoption of pddl axioms will eventually encourage the planning community to make greater use of these formalisms. 
acknowledgements 
thanks to blai bonet  marina davidson  stefan edelkamp  maria fox  john lloyd  and john slaney for fruitful discussions which helped to improve this paper. 
