 
     pearl is an a  language developed with space and time efficiencies in mind. in addition to providing the usual facilities such as slot-filler objects  demons and associative data bases  pearl introduces stronger typing on slots  user-assisted hashing mechanisms  and a forest of data bases. the resulting product is a simple  but powerful and efficient tool for ai research. 
	i 	introduction 
we have developed an ai language called pearl 
 package for efficient access to representations in lisp . unlike the recent tendency toward elaborate representation languages such as krl   l   or language generators such as rrl   pearl is a more modest system that combines a number of useful ai techniques into a very efficient package. besides the usual goal of providing the user with a more meaningful interface than is available via lisp  pearl has the following salient characteristics: 
 1  pearl combines some features of predicate calculus-like data bases with those of frame-based systems like frl . 
 1  pearl introduces typing to user-defined knowledge structures. 
 1  pearl allows the user to manipulate a forest of associative data bases. 
 1  fetches from the data base return streams of answers. retrieval is based on pattern matching. 
 1  pearl is very efficient. pearl uses its own internal representation for knowledge structures for both economy of storage and speed. a great deal of effort has gone into exploiting type information not available in most ai languages to eliminate searching inefficiencies. in addition  the user may easily specify  as part of a knowledge structure definition  a great deal of information about how objects should be indexed for efficient retrieval. thus pearl provides much of the power of expression of other ai languages without the usual overhead. 
perhaps most significantly  pearl is actually being used in the construction of several ai systems. in particular  the latest version of pam  a story understanding program  has been re-programmed in pearl. pandora  a planning program now under development at berkeley  is also written in pearl our experience has led us to conclude that pearl is an effective ai tool for the creation of efficient ai programs. 
     pearl provides the user with a set of operators for defining  creating  and manipulating slot-filler objects  as well as placing them into associative data bases  upon which further operations may be performed. 
	ii 	objects and structures 
¡¡¡¡¡¡pearl has four basic types: integer. symbol. structure  and lisp. objects of type integer are the usual numeric type  and objects of type lisp can be any general lisp object. symbols  objects of type symbol  correspond to atoms in lisp  and are simply primitive objects with unique labels. structures are collections of slots  each of which may be filled with objects of any  predeclared  type. there is also a meta-type. setof  which can be applied  recursively  to any basic type to generate a new type  which will consist of a list of the specified type of objects. 
     types of structures must be predefined  with the number of slots  and their names and types specified via a user declaration. when an instance of a structure is created and its slots filled  only objects with the same type as the slot may fill it. in addition  new structures may build upon old ones in a hierarchical fashion by speciflng new slots to add to the old ones. this hierarchy may be used in operations upon the data base. 
1 

 create individual ptrans 
 actor john   object john   from office   to home   this last structure denotes  john went home from the office  in conceptual dependency . 
     pearl provides functions for accessing and changing the values of slots within individual structures  for automatically naming the structure created  and for defining other sorts of entities as well. slots within a structure may also be filled with a pattern-matching variable  in which case the structure may be viewed as a 
     pattern. such variables are bound as part of the matching process  usually during a fetch from the data base.  
	ill 	data base facilities 
     pearl allows for a forest of associative data bases implemented as hash tables into which structures may be placed  and later fetched via structure patterns. a common problem with most al data base implementations is the system's lack of knowledge about how best to organize information for efficient retrieval. since the user usually has such knowledge. pearl encourages the user to provide it when a structure type is defined to the system in the form of labels on those slots most likely to help with hashing the structure  that is. with distinguishing instances from one other . 
     for example  to indicate that a particular slot is useful for hashing  the user puts an   in that slot in the declaration. thus 
 create base planfor 
	   goal 	struct  
	 plan 	struct   
defines a type planfor with slots for a goal and a plan  and indicates that planfors should be indexed to be retrieved by their goals. 
     in addition  we may also wish to specify how the value that fills the goal slot is used to create the index. for example  if the planner of the goal is deemed significant for such purposes  we can indicate this as follows: 
 create base goal 
	 & planner 	symbol  
	 objective 	struct   
this will inform pearl that structures that index on slots filled with goal-type structures should use the planner slot for further discriminations  however  the way in which goals themselves are indexed will not be affected. 
	iv 	the matcher 
     to fetch an object from a data base  the user invokes the fetcher with a structure to be used as a pattern. this pattern is matched against likely objects in the data base  and those which match are returned to the user via a result stream  actually possibilities list . the semantics of the matching have been constrained to avoid the usual variable naming problems for efficiency. 
     two structures match if they can be unified  although no attempt is made to detect circularities  in our applications  these never occur . also  most variables are local to the pattern they appear in. so naming conflicts do not arise  but see below for special kinds of variables . predicates may also be attached to a slot specifying matching constraints. 
     there also is a general  if-added  demon mechanism  in which demons can be attached either to structure definitions  that is  to all instances of a particular type of structure  or to individual slots of individual instances of structures. these demons must be labelled with the function which they wish to monitor and are only invoked by pearl when that function is being performed. 
	v 	variables 
     there are three types of pattern matching variables in pearl: global variables  which are just lisp variables   variables which are local to an individual structure and an intermediate type of variable which provides lexical scoping within groups of structures. local variables are dummy variables  local to a particular structure and any of its components which were created in the same instant. they are all unbound before every match on that structure. lexically scoped variables are like local variables in that they are unbound before a match is made  but have their scope extended across several structures as indicated by the user. 
     for example  a body of pearl structures conceptually composing a single frame can be made to share the same variables. these variables will be local to that frame. however  the results of matching any particular 
component of the frame will be detectable in the variables associated with the other components. 
	vi 	implementation goals 
     while the main emphasis of efficiency considerations within pearl was to allow the user to avoid exponential algorithms  we also tried to make the code itself as efficient as possible. to make the user interface as friendly as possible  error checking is done whenever it 
1 

can be done efficiently. as a result of these two principles. pearl is fast and friendly enough for use both as a serious programming language as well as a teaching tool for graduate a  classes. pearl was also intended to be portable. it was developed on a dec 1. moved with no modification to a dec pdp-1 under uc1 lisp  and currently also runs on a vax-1 under franz lisp. 
	vii 	implementation and performance 
     pearl achieves its space efficiency and some of its time efficiency by requesting a block of memory from lisp for each structure instance or definition. the contents or defining information are then packed within this block. since much of the defining information is boolean  this provides substantial savings in space for definitions. data bases are managed similarly. 
     only the lowest level functions for accessing these blocks could not be written in lisp. in the pdp-1 implementation  these functions are written in assembler; on the vax they are written in c. the major effort required to move pearl to another machine is to rewrite these functions. the rest of the job entails dealing with different dialects of lisp. 
     as a rough measure of pearl's execution speed on the pdp-1. we created a test data base of 1 structures  in which the average unsuccessful query took 1 cpu seconds  1 per second  and the average successful query took 1 cpu seconds  1 per second . note that pearl's hashing mechanism results in fast determination of failure. as another measure of pearl's execution speed  we compared the original implementation of pam  written purely in lisp with the current implementation using pearl. the average time required by the original to process a sentence was 1 cpu seconds  while the new version requires an average of only 1 cpu seconds. 
