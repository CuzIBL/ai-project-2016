 
filtering denotes any method whereby an agent updates its belief state-its knowledge of the state of the world-from a sequence of actions and observations. in logical filtering  the belief state is a logical formula describing possible world states and the agent has a  possibly nondeterministic  logical model of its environment and sensors. this paper presents efficient logical filtering algorithms that maintain a compact belief state representation indefinitely  for a broad range of environment classes including nondeterministic  partially observable strips environments and environments in which actions permute the state space. efficient filtering is also possible when the belief state is represented using prime implicates  or when it is approximated by a logically weaker formula. 
1 introduction 
any agent operating in a partially observable environment must perform computations that distinguish among the a priori possible current states of the world on the basis of past observations and actions. these computations may operate directly on a representation of the action observation sequence  e.g.   winslett  1; kautz et al  1  ; they may reduce queries about the current state to queries about the initial state  e.g.   reiter  1  ; or  they may update the belief state  the agent's knowledge about the state of the world  after each action and observation. this latter approach  called filtering or recursive state estimation in the control theory literature  is particularly useful with unbounded sequences of actions and observations. 
　the main computational difficulties are 1  the time needed to update the belief state  and 1  the space required to represent it. these depend on the nature of the transition model  which describes how the environment evolves over time  the observation model  which describes the way in which the environment generates observations  and the family of representations used to denote belief states. early work  beginning with gauss  assumed stochastic models. for example  the kalman filter  kalman  1  is a ubiquitous device that maintains a multivariate gaussian belief state over n variables  assuming linear-gaussian transition and observation 
automated reasoning model. crucially  the 1 /n1  update cost and the 1 n1  space requirement do not depend on the length of the observation 
sequence; hence  a kalman filter can run indefinitely. in this paper  we are interested in developing analogous results in the context of logical representations. 
　we adopt a simple logical language  section 1  for describing the transition and observation models; the observations and the belief state itself are also logical formulae. the initial state may be only partially known; the transition model  which allows for actions by the agent itself  may be nondeterministic; and the observation model may be nondeterministic and partial  in the sense that the agent may not be able to observe the actual state. 
　even when we restrict ourselves to propositional logic  it is clear that the general filtering problem is nontrivial  we prove it is computationally hard   because there are exponentially many possible states. we identify several classes of models that allow efficient filtering with respect to the beliefstate representation size. our primary method is based on decomposition theorems showing that 1  filtering distributes over disjunction in the belief state formula  and 1  filtering distributes over conjunction and negation if the actions are 
permutations of the state space. such actions serve as one-toone mappings between states  for those states in which they can be applied. we obtain efficient  exact algorithms for dnf belief states and for nnf  negation normal form - all negations are in front of atoms  and cnf belief states with permuting actions. in other cases  we obtain efficient algorithms for approximate filtering. 
　in another class of dynamic systems  we can filter efficiently if the belief state is represented in cnf that includes all its prime implicates. finally  we show that strips models  possibly with nondeterministic effects of actions  also admit efficient filtering. the strips assumption  that every action has no conditional effects and that an effect's preconditions are the preconditions for the action's execution  is key to this efficiency. 
　with respect to maintaining a compact representation  we show that properties similar to those mentioned above allow us to filter a-cnf formulae  cnf with clauses of at most k literals  when k is fixed  such that the result is represented in k-cnf  for the same fixed k . thus  the belief state is maintained in 1 nk  space indefinitely. in particular  we show mild conditions under which a compact belief state can be 
maintained in nondeterministic strips domains and in permutation domains. finally  we show that dnf belief states remain compact if the effects of actions are deterministic and guaranteed to hold. these results are the first analogues  in the logical arena  of the desirable properties possessed by kalman filters for continuous variables. 
　ours is by no means the first work on filtering in a logical context. early on  it was pointed out that filtering is easy for deterministic systems with a known initial state  fikes et al.   1; lin and reiter  1 . filtering in nondeterministic domains is more difficult. in particular  the related problem of temporal projection is conp-hard when the initial state is not fully known  or when actions have nondeterministic effects  liberatore  1   see also section 1 . 
　traditionally  computational approaches for filtering take one of three approaches: 1  enumerate the world states possible in every belief state and update each of those states separately  together generating the updated belief state  ferraris and giunchiglia  1; cimatti and roveri  1   1  list the sequence of actions and observations and prove queries on the updated belief state  reiter  1; sandewall  1   or 
1  approximate the belief state representation  son and baral  1; williams and nayak  1 . 
　the first two approaches cannot be used when there are too many possible worlds  e.g.  when the domain includes more than a few dozens of fluents and there are more than 1 possible states  or when the sequence of actions is long  e.g.  more than 1 actions . examples include robot localization  tracking of objects and their relationships  and data mining. the third approach gives rise to many mistakes that are sometimes dangerous  and requires an approximation that fits the given problem  if one exists . many domains of 1 fluents or less are still computationally infeasible for it. 
1 	logical filtering 
in this section we define logical filtering using a transition model and action semantics that are compatible with the stan-
dard semantics belief update operator of  winslett  1 .  to avoid confusion  this is different from another operator presented in the same publication  pma  that applies a nonmonotonic approach to formalize minimal change.  this operator is simple and allows us to examine computational properties easily. it can represent any logical transition system  and specifications in other action languages can be compiled into it iwinslett  1; doherty et a/.  1 . 
propositions that are true in this world state   a is the set of actions in the system and rl s  a  s'  means that state s' is a possible result of action a in state s. 
　a logical nondeterministic domain description d is a finite set of statements of the following kinds: value propositions of the form 'initially f  describe the initial state and effect rules of the form  a causes f if g  describe the effects of actions  for f and g being state formulae  propositional combinations of fluent names . we say that f is the head and g is the tail of those rules. 
when there is no confusion  we write r for rd. 
if action a has an effect of false in s  then it cannot execute. 
　in partially observable domains  we update our knowledge as a result of executing an action and collecting observations in the resulting state. the following definition of filtering assumes that a is a set of world states. we use our transition operator r to define the resulting belief state from each action. an observation o is a formula in our language. 
we call step 1 progression with a and step 1 filtering with o. 
　for example  consider a robot that is in charge of cleaning a room. it can execute an action a = fetch broom  closet  which has the single effect rule  a causes has broom  a 
automated reasoning 


automated reasoning 	1 for example  consider a - fetch broom  closet  from above  and assume that we add a second effect rule  a causes false if -in{broom  closet  . thus  a is not executable unless its first rule's precondition holds. then  the action is a one-to-one mapping between states  when this mapping is defined  it is not defined when a state maps to no resulting state . if this second rule is not added  then the action is not one-to-one because it maps two different states  in the first we already have the broom and in the second the broom is in the closet  to the same state. 
　in the same spirit  an action pickup a  d  that picks up block a from the top of block b is one-to-one when it is possible because we can find a single previous state for every resulting state. the same holds for putdown a c . other natural examples include turning a row in a rubik's cube  
flipping a light switch  and buying a gallon of gas. in contrast  turning on the light  setting a rubik's cube to a particular configuration  and filling up the gas tank are not permutation actions. notice that we allow different actions to map different states to the same state  e.g.  accelerating by 1mph when driving 1mph results in the same state as when decelerating by 1mph when driving 1mph . 
1 	limitations for compact representation 
it may be argued that filtering may require only polynomial space  if we limit ourselves to initial belief states that are represented compactly and to actions whose effects and preconditions are represented compactly. in theorem 1 we show the contrary. that is  for every general-purpose representation of belief states there is a dynamic system  an initial belief state  and a sequence of actions after which our belief state representation is exponential in the representation of the initial belief state. 
theorem 1. there is dynamic system d with n fluents  belief state 1  and action sequence a  ...  an such that  for all 
1 	automated reasoning 


automated reasoning 	1 


1 	automated reasoning 

automated reasoning 	1 


1 	conclusions 
in this paper we presented the task of logical filtering and gave it a computational treatment. the results we obtained here have implications for monitoring and controlling dynamic systems. in many cases we present a closed-form computation of the filtering and in others show how to approximate this computation. in some cases we can guarantee that the size of the representation of the filtered formula can be bounded and kept small. in those cases  logical filtering can be used to control processes that run over very long periods of time. examples of such systems are abundant and include robot motion control  natural language processing  and agents that explore partially observed worlds. 
   we made use of several assumptions in this paper in different contexts and with different consequences. we presented permutation domains and the certainty of existence of an effect  d a a i= - g  as characteristics of the domain that make filtering easier. we showed that the commonly used assumption that every action has a relatively small number of rules  at most polynomial in n   and that effects  preconditions and terms in the belief state typically use a small vocabulary  all have a drastic effect on the computational effort needed for filtering and on the size of the resulting belief state. 
   the need to track the state of the world is a basic one  and many works have appealed to it implicitly in the past. however  the computational treatment of such tracking has been avoided so far  partially due to the absence of a developed theory of nondeterministic domains  and partially due to negative results about the general cases of this task. nonetheless  this problem and methods for its solution have received much attention in control theory. the results we obtained here promise to find their application in this domain and may be combined with stochastic filtering techniques. 
acknowledgments 
this research was supported by onr muri fund n1-1  onr muri fund n1-1  and nsf grant ecs-1. the first author thanks xuanlong nguyen for a stimulating discussion on theorem 1. 
