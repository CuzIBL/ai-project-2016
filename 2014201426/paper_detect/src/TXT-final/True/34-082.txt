 	as w e l l   e.g.   

       this paper describes a programming language  1.pak  whose main aim is to provide a set of primitives suitable for a r t i f i c i a l intelligence applications. in addition  1.pak tries to incorporate principles obtained from research into programming languages in general. the main features of the language include 
       the problem thus seems one of finding  good  primitives for ai applications. this paper describes a successor to l.pak which tries to provide some of these primitives. 
1.pak is a successor in the sense that experience gained from l.pak has been used in the design of the new language. 
1.pak is not an extension of l.pak. 

a data base composed of directed labelled graphs  hierarchical and heterarchical control structures  backtracking primitives  applicable to either control structure   and a generalized form of pattern matching. 
	1. 	introduction 
　　　　in 1  a programming language to f a c i l i t a t e ai research at the university of toronto was designed and implemented. although it was snobol  based  l.pak  1  offered many features found in the more prominent ai languages such as planner   1     conniver   qa1  and sail  since these languages greatly influenced its design. it thus possessed such features as a data base composed of directed labelled graphs  pattern directed information r e t r i e v a l   pattern-invoked function calls and generators. 
l.pak shared another feature with 
other ai languages; it was a disappointment . the language  used extensively 
in a graduate course on ai and for a master's thesis   1     was heavily c r i t i c i z e d due to i t s lack of good primitives. the primitives it did provide were i l l - d e f i n e d and although they seemed orthogonal  the combination of some primitives yielded unexpected results. in addition  some of the primitives did too much for the user. this resulted in the user losing control of what was happening in the program and having to depend on kludges to constrain such primitives. it should be noted that such criticisms apply not only to l.pak but to other ai languages 
	1. 	language goals 
       1. pak's goals center around two major objectives. the f i r s t is to provide a good set of primitives s u i t able for ai applications. the problem here rests with the choosing of the primitives to be offered. one must be careful not to choose primitives that are too low-level; otherwise the convenience of the language user suffers. on the other hand  the primitives must not be too high-level; otherwise the adaptability of the language suffers. as example  one could consider lisp's primitives as being too low-level for ai applications and planner' s primitives as being too high-level. it was the dissatisfaction with lisp that sparked the design of higher level ai languages so that a user could program his algorithms more conveniently. however  planner's automatic backtracking and pattern directed function calls proved to be so high level and powerful that they lacked the finesse the user required and subsequently could not be used. thus the ideal solution is to find primitives that strike a happy balance between the two extremes and provide f a c i l i t i e s within the language for the user to easily define any higher level primitives that may be needed for a specific application. the search for these primitives was centered around some of the previously mentioned ai languages and others including qlisp  and simula . features offered by these languages were examined and a 
       set of primitives was abstracted. 

1 

       the second objective is one that is overlooked by most ai languages. 
1.pak t r i e s to accomodate principles obtained from research into programming languages in general. such qualities as efficiency  readability  r e l i a b i l i t y and understandability are too important to any language to be omitted from the design stage and then be expected to somehow emerge when the language is completed. we believe that ai languages can greatly benefit from the experiences of programming languages in general  and that they should not set themselves apart and have to reinvent the wheel. 
       in the light of these two major objectives  the general goals of the language are: 
1  efficiency - of program creation and execution. 
1  natural syntax - to enhance reada b i l i t y of programs. 
1  understandability and readability through the use of simple semantics. 
1  minimality - the language should be concise. 
1  involution - consistent use of language features. 
1  orthogonality - independence of language features. 
1  simplicity - to aid in program construction. 
1  implementability - the language should be implementable cheaply and e f f i c i e n t l y . 
       more specific goals in terms of desired features include: 
1  a wide variety of data types  
1  generalized pattern matching without restriction to a set of data types chosen by the language designer. 
1  generalized control structures t i - e . hierarchical and heterarchical control structures . 
1  good abstraction capabilities to aid in defining higher level primitives required by specific applications. 
1  backtracking as it applies to hierarchical and heterarchical control structures. 
1  flexibility to either compile or interpret expressions within the 
program. 
1 
1  strong typing of variables whenever possible to allow the system to check for   i l l e g a l datatype  errors and thereby reduce them. 
1  interactive f a c i l i t i e s and tracing f a c i l i t i e s to aid in debugging and program execution monitoring. 
	1. 	language overview 
       1.pak is a block structured language whose main features w i l l be discussed according to the divisions: data types  abstraction f a c i l i t i e s   basic statements  global control structures  backtracking  pattern 
matching and miscellaneous. a more detailed description of 1.pak is available in . 
1 	data types 
       1.pak offers a wide variety of data types so that the user can choose what is best suited for the task at hand. there are the standard data types such as booleans  integers  reals  strings  references   i . e . pointers to user defined records or coroutines   l i s t s and arrays. in addition there exist unevaluated expressions and hash tables as in snobol  patterns which can be matched or combined to form new patterns  and records  which are user defined aggregates of basic types. for example: 
record binary tree  ref  binaryjtree  llink  rllnk ; string label   ; 
defines a record which can be used to construct string labelled binary trees. 
       1.pak also possesses a data base in the form of a directed graph with labelled nodes and edges. such a structure has shown i t s e l f to be very convenient as a representational t o o l   especially for semantic nets  and is very similar to sail's t r i p l e s   planner's assertions  conniver's items or qlisp's tuples and vectors. the structure provides a restricted form of associativity applicable to the nodes of the data base  i.e. for a given node  one can determine a l l the nodes that are related to that node by means of edges either leaving or entering that node. thus associativity exists for the nodes of the data base  but not for the edges. this form of associati v i t y is clearly less expensive than that provided by sail's t r i p l e s . 
       the basic units of the data base are the nodes  and operations exist to add or delete nodes to or from the data base  add or delete edges to or from a specific node  generate edgenode pairs whose edges match a specified 
p a t t e r n and enter or leave a specified node and a l l edges and nodes w i t h i n a given radius. 
　　　a l l 1.pak variables must be declared and typed to a l l e v i a t e the problem caused by i l l e g a l datatypes as arguments to operations. one can view type declarations as i n t e n t i o n s of what the type of the v a r i a b l e is to be. the system w i l l then provide the necessary checking e i t h e r at compile or run time. if the type of a v a r i a b l e is not known or if it can be of more than one type  one can declare it to be of type var which allows that v a r i a b l e to take values of any type. 
1 	abstraction facilities 
　　　an abstraction f a c i l i t y is the c a p a b i l i t y of grouping together e n t i t i e s i n t o a u n i t that can be assigned a name for reference purposes. for data types  record declaration is an absraction f a c i l i t y since one can construct the required record from p r i m i t i v e data types and then use that record as a p r i m i t i v e data item of the language. for 1.pak statements  there exist three three types of a b s t r a c t i o n f a c i l i t i e s : procedures  f u n c t i o n procedures and coroutines  procedures and f u n c t i o n procedures are defined as in most programming languages. coroutines d i f f e r from procedures in that they can be used to achieve h e t e r a r c h i c a l c o n t r o l structures  see section 1 . in a d d i t i o n   variables of a suspended coroutine instance can be examined or a l t e r e d . 
       l a s t l y   macros provide an abstraction f a c i l i t y 	for character s t r i n g s w i t h in the text of the source program. 	for example: 
	macro '   ' replaced by 	'%' 	; 
w i l l replace a l l occurrences o f '   ' . f o l l o w i n g the macro d e f i n i t i o n   by ;%'. 
1. 	basic statements 
　　　the basic statements of 1.pak are the assignment statement  statements that control l o c a l sequencing   i . e . i f   while and case  and the i/o statements. most of these statements are f a i r l y standard as is shown by the examples: 
i f x - y then same := same + 1 ; end ; 
i f x   y then y :- x ; else count := count + 1 ; end ; 
1 
while 	flag = true 	do read x ; w r i t e x ; 
end ; 
case primary colour of 'red' : . . . ; 
'yellow' : . . . ; 'blue' : . . . ; else : message := 
 'not a primary colour.' ; end ; 
       the example case statement w i l l examine the value of primary colour  which must be of s t r i n g type  and w i l l execute the case containing that value as a case l a b e l . if the value is not in the range of s p e c i f i e d case l a b e l s   the case having else as a case label w i l l be executect! 
1 global control structures 
       global control deals w i t h the p r i m i t i v e s that t r a n s f e r c o n t r o l to or from procedures and coroutines. 	for procedures 	there exists 	the h i e r a r c h i c a l c o n t r o l s t r u c t u r e provided by the procedure c a l l   possibly r e c u r s i v e   and the r e t u r n statement. 	as is the norm for procedures  a procedure's environment 	is destroyed when a r e t u r n is executed. 	on the other hand  coroutines survive transfers of control and are merely suspended u n t i l c o n t r o l 	is returned. execution then commences at the point where the coroutine was last suspended. 
       for coroutines  	1.pak o f f e r s two types of c o n t r o l p r i m i t i v e s which are 	in many respects s i m i l a r to those of simula. the h i e r a r c h i c a l type  provided by invoke and detach and s i m i l a r to the c a l l / 
r e t u r n of procedures  	is ideal when it 	is necessary to have a coroutine execute under the c o n t r o l of some other block  
i . e . as is the case f o r generators. 	thus the invoke statement  l i k e a c a l l   c a r r i e s information to the invoked coroutine as to where a detach should r e t u r n . 	however  the h e t e r a r c h i c a l p r i m i t i v e resume c a r r i e s no such information. 	the resumed coroutine has no idea who resumed it and assumes complete control of the computat i o n . 	thus one could consider d i f f e r e n t coroutines as representing d i f f e r e n t environments and use resume to t r a n s f e r c o n t r o l among these environments. 
1 	pattern matching 
       1.pak o f f e r s a generalized p a t t e r n matching f a c i l i t y not r e s t r i c t e d to a set of data types chosen by the language designer  as is often the case. 	this 	is achieved by l e t t i n g the user have the f a c i l i t y f o r d e f i n i n g the semantics of required p a t t e r n matching p r i m i t i v e s and t h e i r evaluation sequences. 	defining the semantics of pattern matching p r i m i t i v e s reduces to d e f i n i n g a set of functions 

that operate on the position of a cursor within the subject structure. such an approach to pattern matching is applicable to strings  l i s t s   graphs or any user defined structure. the evaluation sequence of a pattern matching primitive spec i f i e s when that primitive is to be evaluated. the three p o s s i b i l i t i e s are: evaluate when the primitive is encountered while the matcher is moving in the forward direction   i . e . moving l e f t to right through the pattern   evaluate when encountered whil moving in the backwards direction   i . e . backtracking   and evaluate whenever encountered. eor example  the string pattern matching primitives fence and succeed of snobol exhibit the second type of evaluation sequence  while the edge expressions of l.pak patterns show the third type. a pattern in 1.pak is therefore composed of a sequence of boolean expressions with associated evaluat ion sequences. the 1.pak pattern matcher executes the pat tern in a backtracking mode whereby if an expression evaluates to true the 
matcher proceeds forward to the next expression; if false the matcher backtracks. 
       for the convenience of the user  some of the more basic pattern matching primitives for strings  l i s t s   and graphs are provided. however  these primitives should by no means be taken as dogmatic and one is s t i l l free to define his own. sample 1.pak patterns arc found in sect i on 1. 
1 backtracking 
       1.pak backtracking primitives are completely disjoint from control primitives since such a separation allows one to combine the two in the manner that produces the desired result in the most efficient way. backtracking is therefore viewed as the means for manipulating state changes made within what is termed a context. primitives provide f a c i l i t i e s for entering a new context  fo'r specifying 
what changes are to be backtrackable within a context  and when to back up to the previous context and what to do with the backtrackable changes. the context feature is less prominent than connivpr's  where everything is carried out in a backtrackable context  and we consider it more economical since the user can choose when to use the feature. 
       in addition  there are primitives that can be used for the heterarchical control structure provided by coroutines. preserve binds a context to a coroutine instance and restore restores the bound 
context of a spec ified coroutine instance. thus restore can be used in conjuction with the resume statement to provide the f a c i l i t y of transferr i ng control within multiple environments  each with i t ' s own context. another use is the evaluation 
of expressions outside the current environment. this can be easily achieved by restoring the desired environment  evaluating the expression and then restoring the original environment. note that for such a task no transfer of control is necessary and that none takes place. 
1 miscellaneous 
       in addition to the described features  1.pak provides miscellaneous 
b u i l t - i n functions to aid the user. these functions include: 
　apply - similar to the apply function of snobol ' this function provides a dynamic function calling f a c i l i t y . 
comp i l e - this function accepts as 
argument a string representation of a 1.pak expression and returns its equivalent unevaluated expression. 
eval - this function evaluates a 1.pak 
unevaluated expression and returns the produced result. 
t race - this function allows the user 
to enable tracing of changes made to a specified variable or transfers or control to or from a specific procedure or corout ine. 
       the language also provides toggles to f a c i l i t a t e extensive tracing. for example  setting the toggle .ctrace. to 1 w i l l result in the tracing of the next 1 transfers of control made by any coroutine of the program. other toggles include: trace a l l variable changes  .trace.   trace a l l function calls and returns  .ftrace.   and trace the evaluation sequence of pattern matches  .pattern. . 
	1. 	examples 
1 a one-armed bandit 
       the concept of a generator is an important one for ai applicat ions. a 
generator is a funct ion that on successive calls w i l l produce and return elements from a specified range. we wish to demonstrate that 1.pak's coroutines are more than adequate substitutes for generators. this is done by presenting a corout ine that simulates a one-armed bandit slot machine. the example is to be judged not on efficiency  since much more efficient formalizations can be obtained  but rather on its merits as a generator. 
       the f i r s t thing one needs for the bandit are the rings which display the generated sequence. a bandit usually contains three such rings which are themselves generators of elements from the ordered set composed of the f r u i t s cherry  lemon  orange and apple. such a 

1 

generator is simulated by the coroutine: 
coroutine fruit gen   begin 
string fruit ; fruit :- 'cherry1 ; detach ; 
	while 	true 	do 
	case 	fruit 	of 
'cherry1: fruit := 'lemon1 ; 'lemon': fruit := 'orange  ; 
1
'orange : fruit :- 'apple' ; 'apple': fruit :- 'cherry' ; end ; 
detach ; end ; 
end ; 
the f i r s t invocation of fruit gen generates the string value * cherry' in the variable fruit and then control is returned to the invoking block by means of a detach. on the second invocation  the coroutine enters the while statement and executes the case statement which uses the old value of fruit to generate the next value. note the cyclic nature of the generator and how easily this is achieved with a case statement. after the new value for fruit has been generated the coroutine detaches. subsequent invocations w i l l commence execution after this detach  thereby remaining within the generating loop. 
       what is now needed is a mechanism for  spinning  these rings.  we have only defined the prototype ring but we can obtain multiple copies of i t   . consider the following procedure: 
procedure spin  ref  fruit gen  ring ; integer i  
begin 
while i   1 do invoke ring ; i :-= i - 1 ; end ; 
end ; /* of spin. */ 
the above procedure takes as arguments a reference to an instance of a fruit gen and an integer i. it then proceeds to invoke the specified fruit gen instance i times and thereby achieve the effect of spinning the ring. 
       finally we can now define the bandit i t s e l f : 
coroutine 	banditq begin 
coroutine fruit gen   	. . . 	; procedure spin . . . 	; 
ref  fruit gen  first  second  
 third ; string result ; integer rand1  rand1  rand1 ; first :- fruit gen   ; 
second :  fruit genq ; 
third :- fruit gen   ; result := 'cherry lemon orange* ; detach ; 
	while 	true 	do 
/* generate 1 positive random 
integers in rand1  rand1 
	and rand1. 	*/ 
spin  first   rand1   ; 
spin  second   rand1   ; spin  third   rand1   ; 
if  first.fruit = second.fruit  $  first.fruit = third.fruit  then result :* 'jackpot' ; else result :* first.fruit |i * ' it second.fruit 
   | | ' ' | | third.fruit ; end ; 
detach ; 
	end ; 	end; 	/* of bandit */ 
first the coroutine declares the procedures  coroutines and variables it needs. the variables first  second and third are references to instances of fruit gen and represent the three rings the bandit needs. result w i l l contain the result of playing the bandit. on the f i r s t invocation  bandit sets up its three ring generators and generates a losing value.  it is assumed that the management w i l l absorb this f i r s t loss by i n i t i a l i z i n g the bandit before letting anyone play . the generator then detaches. on subsequent invocations  bandit w i l l generate three integer random numbers  unspecified and l e f t to personal preference as to which method to use   and spins its rings by the obtained values. it then generates 'jackpot' if a l l three f r u i t values are the same or generates the string obtained by concatenating the generated values. the generated values are retrieved by using the dot notation for accessing coroutine variables  i.e. first.fruit represents the variable fruit in the coroutine instance referenced by first. note that the generated values depend on the previous states of the rings. good luck. 
1 list patterns 
       we now demonstrate how one can achieve some of the l i s t pattern matching f a c i l i t i e s offered by conniver. this is accomplished by taking sample patterns from the conniver reference manual  and presenting their 1.pak equivalents. before proceeding  some l i s t pattern matching primitives have to be defined.  note that  in this example  l i s t atoms for 1.pak are assumed to be strings . 
1 

boolean procedure match atom  string 
si   
/* this function matches atoms in a 
 list and advances the cursor. v begin 
if type  cursor  - string; then return false ; else if car cursor  - si 
then cursor := cdr cursor  ; 
return true ; 
else return false ; 
end ; 
end; 
	end ; 	/* of match atom  / 
boolean procedure down  pattern pi   /* function that descends one level in the list and matches the pattern pi. 
* / 
begin 
if type cursor   = 'list' then return false ; 
end ; 
if match   pi   car cursor    then cursor :- cdr cursor  ; 
return true ; 
else return false ; end ; 
	end ; 	/* of down. */ 
boolean procedure set  var x   
/* this function assigns to x the car 
 of the list cell being matched. */ begin 
if type cursor  -.  'list1 then return false ; end ; 
x :- car cursor  ; cursor :- cdr  cursor  ; return true ; end ; /* of set. */ 
boolean procedure rem  var x   
/* this function assigns to x the remainder of the list being matched. 
* / 
begin 
if type cursor  -= 'list1  then return false ; 
end ; 
x :- cursor ; cursor :- null ; return true ; end ; /* of rem. */ 
       in the following examples atom denotes an arbitrary atom and l i s t denotes an arbitrary l i s t . 
1.  match ' foo ! x  ' foo bar   
　　- the pattern  denoted by the second list element  matches lists of the form  foo atom . the subject is the l i s t  foo ekkt and after the match x w i l l be associated to the atomic value bar. the equivalent 1.pak pattern match is: 
match  :match atom  f1  set x :    1 	 
    'foo   bar'  ; after the match x has the value 'bar*. 
1.   freds ! x  . ! rest  
- this pattern matches lists of the form: 
  freds atom  l i s t   
the equivalent 1.pak pattern is: 
 : down  :match atom 'freds'    set x :     remlrest :  
1.  grandfather ! x 	i x  
- this pattern matches lists of the form: 
　　 grandfather atom atom  where the two atom values are equal. the equivalent 1.pax pattern is: 
 : match atom 'grandfather'    set x    mateh atom x  :  
1. :  creature  featherless    creature  
	 eq 	 number of legs ! creature  1   
- this pattern matches lists of the form: 
 atom  featherless atom   eq  number  oftegs atom  1   
where the three atom values are equal. the equivalent 1.pak pattern is: 
 : set creature    down  : match atom 
 'featherless'    match atom creature  
:     down  : match atom 'eq'    
down  : match atomc number of legs'  
match atom creature  :     matchjvtom 
 '1'  :   :  
       the above 1.pak pa tterns are usually much longer than their counterparts since we have used mnemonic names rather than  t i n or i t i one could define the primitives wi th shorter names or use macros to shorten the expressions that need be written. n ote also that all of the example 1.pak pat terns happen to have primitives with eva luation sequence  evaluate when encounter ed while moving forward . since this se ems to be the most common evaluation s equence  it is assumed by default and h as no syntactic specification. 
       the above are by no means all of the available l i s t matching primitives of conniver and are only meant to give a flavour of how one can extend 1.pak pattern matching to suit a specific structure. 
conclusions 
       in t his paper  we have introduced and briefl y described 1.pak  a language that provi des a set of programming primitives suitable for ai application  and that m akes use of experiences gained in the des ign of programming languages in general since it is not yet clear what primi tives are essential to ai applicatio ns  we have chosen the approach of examini ng existing ai languages and 
1 

abstracting from them a set of primitives that can be easily combined to produce 
many of the language features now deemed important.  we are even optimistic that some of our primitives  i.e. coroutines and the heterarchical control primitives  can be used to achieve a form of actors .  we hope that the 
language description and the examples demonstrate that some success was achieved  especially in realizing the specific goals presented in section 1. 
       the general goals of the language guided the overall design and their influence is evident throughout 1.pak. for example: orthogonality led to the separation of backtracking primitives from control primitives  and to the realization that pattern-directed procedure invocation is composed of a pattern match and the use of a function such as apply; minimality reduced the set of heterarchical control primitives to three; etc. we would like to stress again that we believe ai languages can greatly benefit from the experiences of programming languages in general and hope that this is evident in 1.pak. 
       1.pak is currently in the process of being implemented as a interactive language. plans are to implement a kernel of the language and then bootstrap the rest. the kernel w i l l probably be implemented in spitbol  since it proved to be a convenient and adequate language to use when 1 pak was implemented. it is expected that an implementation and i t s subsequent use w i l l answer many of the questions regarding the appropriateness of the provided primitives for ai applications. 
acknowledgements 
i would l i k e to thank professor 
john mylopoulos for a l l his help  and the national research council of canada  grant a1  for supporting this research. 
