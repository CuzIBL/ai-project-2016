 
the use of primary effects in planning is an eftecti e approach to reducing search the underlying idea of this approach is to select certain  important  effects among the effects of each operator and to use an operator only for achieving its important effects in the past  there has been little analysis of planning with primary effects and few experimental results we provide empirical and analytical results on the use of primary effects first  we experimentally demonstrate that the use of primary effects may lead to an exponential reduction of the planning time second  we analytically ex plain the experimental results and identify the factors that influence the efficiency of planning with primary effects third we describe an application of our analysis to predicting the performance of a planner for a given selection of primary effects 
1 	i n t r o d u c t i o n 
planning with primary effects is an effective approach to reducing search the underlying idea of this approach is to select primary effects among the effects of each operator and to use an operator only when we need lo achieve one of its primary effects a primary-effect restricted planner never inserts an operator into a plan in order to achieve any of the side effects of the operator for example  the primary effect of lighting a fireplace is to heat the house if we have lamps in the house  we view illumination of the room as a side effect of using the fireplace we would not use the fireplace just to illuminate the room 
　the advantages of using primary effects in planning are well-known if a planner considers only operators whose primary effects match a current goal and ignores operators with matching side effects  the branching factor of search can be reduced  which results in an exponential reduction of running time for this reason  
    the first author is supported by the wright laboratory aeronautical systems center  air force materiel command usaf and the advanced research projecte agency  arpa  under grant number f1-1 the second author is supported ui part by grants from the natural sciences and engineering research council of canada and itrc 
1 	planning 
primary effects are used by many implemented planning systems  such as sipe  wilkins 1   prodigy  carbonell et al   1   and abtweak  yang and tenenberg  1  
　in out previous work  we formalized the notion of planning with primary effects and developed two algorithms margie  fink and yang  1  and pnm-tweak  fink and vang  1   for automatically selecting primary ef-
fects of operators 
　the purpose of this paper is to present empirical and analytical evaluation of the efficiency of planning with primary effects and identify the important factors that determine the effectiveness of primary effects in reducing planning time we describe experiments on automatically selecting and using primary effects in planning the experiments demonstrate that the use of primary effects may lead to an exponential efficiency improvement we then analytically explain the efficiency improvements observed in the experiments we also describe an application of our analysis to predicting the performance of a planner for a given selection of primary effects this predictive analysis enables us to decide whether the use of primary effects selected by the user improves the efficiencv of planning 
1 	p l a n n i n g w i t h p r i m a r y e f f e c t s 
in this section  we describe the use of primary effects in planning  outline an algorithm for automatically selecting primary effects of operators and discuss possible problems of planning with primary effects and a method for avoiding these problems 
1 	motivating example 
consider a planning domain with a robot  four rooms  and a box  see table 1  the robot may go between two rooms connected by a door  and it may carry the box if the robot has an ax  it can break through the wall between two rooms to create a new door 
　to describe a current state of the domain  we have to specify the location of the robot and the box  list the pairs of rooms connected by doors  and indicate whether the robot has an ax we may describe states of the domain with four predicates  robot-in x   box-in x   door x y   and have-ax literals describing a current 


state- may be obtained from these predicates by substituting specific room numbers for x and y for example  
i he literal robot tn  1  means that the robot is in room 1  box in 1  means that the box is in room 1  and door l 1  means that rooms 1 and 1 are connected b  a doorway the operations performed by the robot such as moving between rooms and carrying the box  are called operators we describe an operator by a set of preconditions and a set of effects  fikes and nilsson  1l   see table 1  the preconditions of an operator are the conditions that must hold before the execution of the operator and the effects are the results of the execution if a literal / is an effect of some operator  we sav that this operator achieves i 
　a plan is a sequence of operators that achieves some desired goal for example  suppose that the initial state is as shown in table 1  and we wish to bring the robot to room 1 and the box to room 1  this goal may be achieved by the plan  carry-box  1   go 1   
　in this paper we measure the quality of a plan by the number of operators in the plan the fewer operators  the better the plan the number of operators is called the size of the plan an optimal plan is a plan of the smallest size that achieves the goal we may readily extend all our results to more robust definitions of a plan quality  fink and yang  1   for example we may assign a realvalued cost to each operator in a domain and measure the quality of a plan by the total cost of its operators 
　if an operator has several effects  we may choose certain ' important  effects among them and insert the operator into a plan only for the sake of these effects the chosen important effects are called primary and the other effects are called side effects a planner that adds new operators to a plan only for achieving their primary effects is called a primary-effect restricted planner 
　for example  consider the following selection of primary effects 

suppose that the initial state is as shown in table 1 and the robot must move into room 1 the robot may achieve this goal by going to room 1  through room 1  or by carrying the box to room 1  if the robot has an ax  it may also achieve the goal by breaking through the wall between rooms 1 and 1 since robot-tn is not a primary effect of the operators carry-box and break  the planner will not consider the use of either of these operators  and it will find the plan  go l 1   go 1   
1 	selecting p r i m a r y effects 
the utility of planning with primary effects depends crucially on a  good selection of primary effects an improper selection may result in the loss of completeness of planning which happens when a primary-effect restricted planner cannot find a plan for a solvable planning problem for example  if we use the primary effects chosen in the end of section 1  a planner cannot find a plan for removing the box from room a  since -box-in is not a primary effect of any operator 
　in  fink and vang  1  we showed that enforcing the following two restrictions usually  although not always  results in preserving completeness of planning 
1 every achievable literal must be a primary effect of some operator  
1 and every operator must have a primary effect 
restriction 1 guarantees that  if a literal can be achieved at all  then it can be achieved as a primary effect of some operator  and restriction 1 ensures that the planner can use all operators of the domain we use the following simple algorithm for selecting primary effects according to the two restrictions 
1 for every literal / in the domain  if there are operators that achieve /  then make / a primary effect of one of these operators 
1 for every operator that does not have primary effects  make one of its effects pnmar  
note that there may be several different ways of selecting  one of the operators' at step 1 of the algorithm and 'one of the effects  at step 1  we presented heuristics for making these choices in  fink and vang  1  and  fink and yang  1  the algorithm would select the following primary effects in the robot domain 

1 	learning a d d i t i o n a l p r i m a r y effects 
while the use of primary effects chosen by the above algorithm may improve the efficiency of planning  it can also cause two serious problems first  the resulting selection of primary effects is not immune to the loss of completeness second  planning with the selected primary effects may result in finding a nonoptimal plan for example  if the robot has an ax  the goal of moving the robot from room 1 to room 1 may be achieved by the operator break l 1   however  a primary-effect restricted planner will not consider this possibility  since 
	fink and yang 	1 

the new position of the robot is not a primary effect of break instead  the planner will find the plan {go   1   go 1   go 1    with a size of 1 in this example  the shortest primary-effect restricted plan ib 1 times longer than the optimal plan we say that 1 is the plan-size increase of the planning problem 
　to address the problem of completeness and optimalitv  we present an algorithm that tests whether a given choice of primary effects guarantees the completeness of planning and estimates the maximal plan-size increase 
　planning with primary effects is complete if a primaryeffect restricted planner can find a plan for every solvable problem completeness is lost when we can achieve a goal as a side effect of some operator  but cannot find a primary-effect restricted plan that achieves this goal to guarantee completeness  we must ensure that such a 
　situation cannot happen  that is  wt have to make sure that  for every operator there ts always a primary-effect restricted plan that achieves its side effects 
　now suppose that a somewhat stronger condition holds for some constant c  every operator op can always be replaced by a primary-effect restricted plan whose size is at most c then the plan-size increase 
due to the use of primary effects is never larger than c thus this stronger condition not only ensures completeness  but also guarantees a limited plan-size increase for all possible problems in a planning domain below  we summarize our observations 
completeness and limited plan-siae increase suppose that  for every operator op and every initial state s satisfying the preconditions of op  there exists a pnmarv-effect restricted plan v with the initial state s such that 
 1  v achieves the side effects of op 
      1 and v contains at moat c operators then  for every solvable problem in the planning domain  there ib a primary-effect restricted solution plan at most c times larger than an optimal plan 
a formal proof and discussion of this observation can be found in  fink and yang  1  we use this result to design a learning algorithm that adds new primary effects to a selection to make sure that primary-effect restricted planning is complete and that the plan-size increase is within the user-specified bound for each operator op in the domain the learner generates several states that satisfy the preconditions of op and checks whether the side effects of op can be achieved in all those states if not  the algorithm  promotes  some side effects of op to primary effects 
　let c be the maximal allowed plan size increase  specified by the user the learning algorithm can be informally described as follows 
for every operator op  repeat  several' times 
1 pick at random a state s that satisfies the preconditions of op 
1 try to find a primary-effect restricted plan v such that o p achieves the side effects of op from the state s  o and v contains at most c operators 
1 if such a plan is not found  make one of the side effects of op be a primary effect 
1 	planning 
in  fink and yang  1  we presented a formal description of this algorithm  described methods for generating random legal states satisfying the preconditions of a given operator  and estimated the number of different states that must be considered for every operator to ensure a high probability of completeness 
　as an example  suppose that we apply this learning algorithm to the robot domain  with primary effects shown in the end of section 1 and c = 1 the learner is likely to notice that  if the robot has an ax  the effect robot-in 1  of the operator break l 1  cannot be efficiently achieved by a primary-effect restricted plan after noticing it  the algorithm will select an additional 
primary effect of the break operator  producing the following selection 

1 	s e a r c h r e d u c t i o n 	e x p e r i m e n t s 
we now present a series of experiments on planning with primary effects  the experiments demonstrate that the use of primary effects may drastically improve the efficiency of planning we used the abtweak planning system  yang and tenenberg 1  in the experiments  the primary effects were selected automatically by the 
learning algorithm outlined in section 1 
1 	e x p e r i m e n t s in a r o b o t d o m a i n 
we first describe experiments in a robot domain  where the robot can move between rooms  open and close doors  
carry boxes  and climb tables  with or without boxes  we ran our learning algorithm to select primary effects in this domain  with the plan-size increase c = 1  the time of learning primary effects was 1 cpu msec in table 1  we show the performance of the abtweak planner without primary effects   w/o'  and with the use of the learned primary effects   w/ prim   when achieving 
different goals the initial state in all cases is as shown in the picture  with both doors being closed for all problems  the solution found with the use of primary effects was the same as the solution found without primary effects as can be seen from the table  the use of primary effects considerably improves the efficiency of abtweak 


varying solution sizes 
first we demonstrate that the savings in running time grow exponentially with ihe size of an optimal solution plan we use domains with effect overlaps k = 1 and k = 1 the results of the experiments are presented in figure 1 we show the running times of the abtweak planner without primary effects  'w/o prim   and with the use of the learned primary effects   with prim'  for problems with different optimal-solution sizes  every point on each figure is the average of five different problems  note that the time scale is logarithmic   these graphs show that the savings in planning time increase exponentially with an increase in the optimal solution size  a significant improvement is achieved in both cases 
varying effect overlap 
next  we consider efficiency improvement for different values of the effect overlap recall that the effect overlap k is defined as the average number of operators achiev-
ing the same literal we vary the effect overlap k from 1 to 1  if the effect overlap is 1  then all effects must be selected as primary  and primary-effect restricted planning is equivalent to planning without primary effects  in figure 1  we present the running times of abtweak without primary effects   w/o prim   and with the use of learned primary effects   with prim   for every effect overlap the graphs show that the use of primary effects 
improves performance for all effect overlaps  even though the time savings are smaller for large overlaps 
1 	analysis of the search reduction 
we next present an analytical comparison of planning efficiency with and without the use of primary effects the purpose of the analysis is to  1  explain the exponential efficiency improvement observed in the experiments and  1  identify the factors that determine the efficiency of planning with primary effects the analysis is an approximation based on several simplifying assumptions about properties of planning domains 
assumptions of the analysis 
when searching for a solution to a planning problem  a planning algorithm expands a search space  whose nodes correspond to intermediate  possibly incorrect  plane found in the process of planning the planning time is proportional to the number of nodes in the expanded search space total-order planners  such as abstrips and prodigy  create a new node by inserting a new operator into a plan partial-order planners  such as tweak and snlp create a node by inserting a new operator or by imposing a constraint on the order of executing old operators for simplicity  we assume that the planner expands nodes breadth first 
when inserting a new operator to achieve some literal 
/  we may use any operator whose primary effect is / to estimate the number of the matching operators  we assume that  for all literals i  the number of operators achieving i as a primary effect is the same we define 
	fink and yang 	1 


	1 	planning 

	fink and yang 	1 
