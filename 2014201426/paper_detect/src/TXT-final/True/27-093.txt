 
this paper describes a diagnosis algorithm called structure-based abduction  sab  which was developed in the framework of constraint networks . the algorithm exploits the structure of the constraint network and is most efficient for near-tree problem domains. by analyzing the structure of the problem domain  the performance of such algorithms can be bounded in advance. we present empirical results comparing sab with two modelbased algorithms  mbdl and mbd1  for the task of finding one or all minimal-cardinality diagnoses. m b d l uses the same computing strategy as algorithm gde . mbd1 adopts a breadth-first search strategy similar to the algorithm diagnose . the main conclu-
sion is that for nearly acyclic circuits  such as the n-bit adder  the performance of sab being linear provides definite advantages as the size of the circuit increases. 
1 	introduction 
generally speaking  diagnosis is a form of abduction or inference to the best explanation. explanations are those minimal sets of value instantiations that are consistent  with the model and the observations  and best explanations are those that optimize some desirability measure. some common measures are minimal cardinality   parsimonious covering theory   most probable explanation   and minimal cost proofs   a well-defined relation between cost-based abduction and belief revision in probabilistic networks has been shown   and also algorithms based on systems of linear constraints have been proposed . 
   diagnosis  when viewed as cost-based abduction  can be formulated as an optimization task in the framework of constraint networks  1; 1; 1 . the advantage of such formulation is that all algorithms and heuristics developed within that framework can be exploited. in 
   *this work was supported in part by the nsf  grant iri1   the air force office of scientific research  grant afosr 1   toshiba of america  xerox  northrop and rockwell. 
1 	qualitative reasoning and diagnosis 
particular  it was shown that when a constraint network is acyclic  an optimal solution can be found in linear time . tailoring this algorithm to diagnosis results in an algorithm called structure-based abduction  sab    which will be empirically investigated here. the performance of sab is compared with two model-based diagnosis algorithms called here m b d l and mbd1. m b d l uses the same strategy for finding predictions and conflicts as gde . mbd1 is a focused version of m b d l geared toward computing minimal-cardinality diagnoses. mbd1 adopts a breadth-first search strategy for searching the hypotheses space and then computes conflicts sequentially  as in diagnose by reiter . 
　the main contribution of this work is in illustrating how the task of diagnosis can be performed efficiently for circuits whose structure corresponds to nearly acyclic networks. note that model-based diagnosis algorithms like gde  can take an exponential time even on acyclic  circuits  see resnick  . we present results of experiments on a parameterized circuit that generalizes resnick's circuit showing instances where the gdelike algorithm  mbdl  explodes in time and space while sab is able to compute diagnoses efficiently for all instances. we then show how sab can be applied to circuits whose structure is cyclic by using tree clustering  as a preprocessing phase. applying tree clustering to cyclic circuits is known to be exponential in the cluster's sizes. we give empirical results on a parameterized cyclic circuit showing that even if relatively expensive  it  is worthwhile doing tree clustering once so that all future diagnosis tasks are performed efficiently. 
　the structure of the paper is as follows. section 1 reviews basic definitions and presents two model-based diagnosis algorithms: m b d l   mbd1. section 1 formulates diagnosis as optimization in constraint networks and describes algorithm sab  and section 1 describes the tree clustering task. section 1 presents empirical results  section 1 provides discussion and related work  and section 1 concludes. 
1 	model-based diagnosis 
following  we define model-based diagnosis in terms of a triple  sd  com ps  dbs  where sd  the system description  is a set of first-order sentences; com ps  the system components  is a set of constants; obs  the 

observations  is a set of first-order sentences. intuitively  a diagnosis is a subset of components a c com ps such that assuming that each component in a is faulty while the components in com ps - a are not faulty  is consistent with the model and the observations. a diagnosis a for  so  com ps  obs  is minimal if it does not contain a proper subset diagnosis. 
　two diagnosis algorithms  mbd1 and mbd1  are examined  and will be described informally due to space restrictions. algorithm mbd1 is a variant of ode . it works as a three-step process. in step 1  predictions are computed by a form of constraint propagation  which although generally incomplete  is complete for restricted languages such as trees and horn theories. in step 1  all minimal conflict sets  nogoods  are enumerated by identifying those  environments  leading to conflicts between predictions and observations. in step 1  all minimal-cardinality diagnoses are computed as the minimal-cardinality covers of all the conflict sets. 
　the worst-case time and space complexity for finding all minimal conflict sets is clearly exponential in com psi. since the task of finding a minimal cover to a set of subsets is known to be n p-complete  even when each subset  has at most two elements}  the resulting worst-case complexity of the algorithm is likely to bo  if p 』 np  exponential. 
　the second diagnosis algorithm mbd1 reverses the steps of mbd1. it first generates a hypothetical diagnosis and then determines whether any conflicts remain unexplained by that hypothetical diagnosis. if such a conflict is found then the hypothesis is extended to cover each component in the new conflict. if such a conflict does not exist  the hypothesis is a minimal diagnosis. all other minimal-cardinality diagnoses are found by checking each of the remaining hypotheses as to whether it can explain all the conflicts. mbd1 is a version of the algorithm diagnose by reiter  modified for computing the minimal cardinality diagnoses. 
1 	diagnosis as optimization 
given a set of variables a'j  ...  a*n each having a finite set of domain values dom{x1  ...  dom xn   a consiraint network cn is a set of relations {r   ...  r m     called constraints  each defined on a subset of variables s   ...  sm. a relation over a subset of variables a'   ...  x   is a subset of the cartesian products of their domains. a solution to cn is an assignment of a value to each variable satisfying all the constraints. a constraint network can be associated with the set of all its solutions. formally  

when ts stands for the projection of a tuple t on a subset of variables s. for certain applications  it is useful to define a cost function over all solutions. a simple cost function associates a cost c x = x  with each value of a variable  and the cost of a solution is the sum cost over all  variable  value  pairs. the optimization task is to find a solution having an optimal cost  largest or 
smallest . 
　to capture the diagnosis task  we map the triple  sd  comps  obs  into the relational framework as follows. the system description sd will be described in terms of two sets of variables: the system variables  x1  ...  xn  which are the inputs and outputs of all components with their associated finite domain values  dom x 1    . . .  dom xn   and the assumption variables  a = {a1 .. .  am   each associated with a component cj g comps and describing its functioning status. in the simplest case  these are bi-valued variables indicating whether the component is normal  value 1  or abnormal  value   . in the more involved case  they can index different fault models. each component  cj  input-output behavior under normal and abnormal conditions are described by a constraint r}. thus  the constraint v1 is defined over the set r1 - {a1} u sj  where sj is the set of input and output variables for component cj. the observations obs is described by forcing value assignments for the corresponding variables. non-zero costs are associated with assumption variables only. an abnormal component is assigned a cost of 1  i.e.  c aj - 1  = 1   while a normal component has a 
　zero cost   i.e.  c aj =     = 1  
　given a model description and a set of observations  the diagnosis task is to construct an explanation  namely  an assumption tuple  a1 = a i   . . .   am = am  that can be extended to a consistent solution  x1 = x1  . . .  xn = xn a  = a1 . . .  am = am . the cost of an explanation is the sum of the costs associated with the assumption variables. that is  

the task of finding a minimal-cardinality diagnosis corresponds to a minimum-cost solution since only faulty components are assigned a positive cost in the constraint network formulation. 
　the topology of a constraint network can be depicted by its dual graph. a dual graph represents each constraint by a node and associates a labeled arc with any two nodes that share variables. if the dual constraint graph is a tree  called a join tree  or can be transformed into a tree by removing redundant arcs  in linear time   then the constraint network is said to be acyclic . in that case  a consistent solution or an optimal solution can be assembled in linear time. 
example 1 consider the circuit in fig. la  which has two and-gates and-1  and-1 connected to an or-gate or-i. we model this circuit using three bi-valued assumption variables  a1 a'1  a1  whose values  zero or one  indicate whether the respective gate and-1  and-1  and or-i  is normal or abnormal. fig. lb shows the dual graph for the circuit  where a node corresponds to the 

	el fattah and dechter 	1 


set of input-output variables including its associated assumption variable. the explicit constraint for each node is given as a table of allowed tuples. 
　constraint and-1 is given in table 1  where the values marked with an x correspond to  don't care  conditions  either 1 or 1 . given the set of observations {v1 = 1 v1 = 1 v1 = 1 v1 = 1 v1 = 1}  there are two best explanations  both having cost 1. {al = 1 a1 = 
1 a1 = 1} corresponding to a single-fault of and-1  and {a1 = 1 -a1 = 1  a1 = 1} corresponding to a singlefault of or-1. notice that multiple-fault explanations also exist  but they have higher costs. 
　table 1 presents algorithm sab for a join-tree network. in the bottom-up step  pointers are created from each tuple t of a parent node to each of a set of minimizing tuples for each child node. the complexity of the bottom-up phase of the algorithm is 1 n-t log t   where n is the number of components  nodes of the join tree  and t is the number of tuples. details about the algorithm and arguments for correctness are given in  1; 1; 
1 . 
1 	tree clustering 
for completeness we present in table 1 the main steps in the tree-clustering algorithm . tree clustering is based on a triangulation algorithm which transforms any graph into a chordal graph by adding edges. the maximum cliques of the resulting chordal graph are the clusters necessary for forming an acyclic cn. the relation table 1: tree clustering i n p u t : a cyclic constraint network t. 
o u t p u t : a join tree representation of t. 
1. order the nodes  in a maximum cardinality ordering  mco  and use a triangulation algorithm to generate a chordal graph for t. 
1. identify the maximum cliques c1 ...  c t and index them by the order of their earliest variable in the ordering. 
1. return the join tree resulting from connecting each ct to a cj whose index j   i and with whom it shares the largest set of variables. 
1. compute for each node in the tree the set of tuples satisfying all constraints on the clique and arcconsistency with the children. 

figure 1: tree-clustering for the three-bit adder. 
for each cluster  step 1  is computed by assigning the input constraints to the various clusters of the join tree and finding for each clique all tuples satisfying those constraints. the complexity of this step dominates the algorithm's performance and is exponential in the clique's size. 
example 1 figure 1 shows the join tree for the threebit adder. we note the recursive nature of the tree  and the fact that the maximum clique size is independent of the number of bits of the adder. 
1 	empirical evaluation 
1 	acyclic circuits1 
the first set of experiments is restricted to a family of circuits whose cn is acyclic. we compare the performance of sab to mbd1 on the task of computing all 
1
 preliminary experimental results appear in  

minimal-cardinality diagnoses on the parameterized circuit b p  k   shown in figure 1. the circuit has n = 1k-1 components and k layers numbered 1 ..  k from the leaves to the root. the component types are independent random variables and are either and or or gates. a component in an odd  even  layer is an and  or  with probability p  or  and  with probability 1 - p. the circuit b{p k  is acyclic and can have a worst-case exponential number of minimal conflicts.1 
m e t h o d 
for every circuit  we generate the inputs as independent random variables each having the value 1 with probability q and 1 with probability 1 - q. then the correct output is determined and reversed. the observation consists of the inputs and the faulty output. we feed the same set of problems to both sab and mbd1 and record their respective performances. we limit the space and time that can be used by m b o 1 to make the experiments feasible. when the limits are reached  mbd1 is terminated with no solution. each experiment consists of m = 1  circuits each with n = 1  input-output scenarios. the performance is averaged over the n m problem instances. the circuits considered have components ranging from 1 to 1. our experiments were conducted using quintus prolog on sun 1mp. 
1
　　a special case of the circuit  b 1  h   was developed by . 
1
　　 although the number of conflicts can be exponential for certain inputs  this does not imply that it is the case for most inputs. 
results 
the results of the experiments  given in figures 1 and 1  display the average cpu times used by sab and mbd1 for computing all minimal-cardinality diagnoses. in figure 1  the input probability is varied while the type probability  the type of the component being an and or an or  gate  is fixed at 1. in figure 1 the type probability is varied while the input probability is fixed at 1. those figures show that mbd1 becomes inefficient for computing the diagnoses for moderately sized circuits. points that are not shown for mbd1 correspond to circuit sizes for which mbd1 failed on all problem instances because its space  or time  requirement exceeded available resources. for such problems  the space required by mbdl's caching during the prediction phase had exhausted the available resource limit  set at 1 predictions. the points shown for mbd1 give the average cpu seconds over the solved-problem instances. 
　as observed from figures 1 and 1  mbd1 is sensitive to the type of the randomly generated circuits and to the probability of the inputs. for circuits having 1 components and type probability 1  changing the input probability from 1 to 1 resulted in a change in the average cpu seconds from 1 to 1 for mbd1 and 1 to 1 for sab. the coefficient of variation  the ratio of the standard deviation to the mean  of the cpu seconds is also an order of magnitude higher for mbd1 than for sab  around 1% for mbd1 and 1% for sab.  it is also observed that for small sized circuits  mbdl's 
	el fattah and dechter 	1 


performance is comparable to sab's. figure 1 shows that for input probability close to 1 or 1  mbd1 is generally slower than sab. on the other hand  for input probability 1  mbd1 is very close to sab for some circuits  figure 1 . as suggested by theoretical analysis  it appears that mbdl's performance is correlated with the number of conflicts  while sab's performance is affected by the number of diagnoses. on average  the performance of mbd1 relative to sab degrades as the number of conflicts relative to the number of diagnoses increases. fig. 1 shows the average number of conflicts and diagnoses for two cases: one where sab is consistently faster  type probability 1 and input probability 1   and the other where mbd1 is sometimes faster  type probability 1 and input probability 1 . the figure clearly shows that mbd1 is at a disadvantage with respect to sab when there is a large number of conflict sets but a small number of minimal-cardinality covers. on the other hand  mbd1 is at some advantage with respect to sab when the number of conflicts is small while the number of diagnoses is relatively large. 
1 	c y c l i c c i r c u i t s 
to overcome the space problem of the atms caching used in mbd1 in the rest of our experiments we used algorithm mbd1 since it avoids mbdl's memory problem. the algorithm is still time exponential. 
　in this section we demonstrate that even if the structure of the problem is not acyclic  diagnosis and abduction may still be accomplished efficiently by transforming the problem into a tree using tree clustering and subsequently solving by sab. in this set of experiments the n-bit adder circuit  whose structure is cyclic  is considered. an n-bit adder has 1 n components and can be modeled by a network having 1 n + 1 variables. 
tree clustering 
tree clustering is performed on the circuit prior to diagnosis. figure 1a gives the time of tree clustering which increases polynomially with n. we also see that the total number of tuples increases linearly with n  figure 1b   and the number of nodes of the join tree  number of cliques  grows linearly with n  figure 1c . 
m e t h o d 
as in the acyclic case  we generate the inputs as independent random variables each having the value 1 with 
1 	qualitative reasoning and diagnosis 

probability q and 1 with probability 1 - q. the outputs are computed by propagating the inputs through the component's constraints. two types of experiments are conducted. in one  a single output is randomly selected and inverted. in the second set of experiments  multiple outputs are randomly selected  half of the outputs  on average  and inverted. in all experiments  the observation consists of all input  all the correct and faulty outputs. the observation consists of all input  all correct outputs and the single faulty output. we record the performance of both sab and mrd1 on each problem instance generated that way. an experiment consists of a set of 1 problem instances for each circuit and their performances is averaged over the problem set. a time limit of 1 seconds per problem is set for mbd1. 
results 
figure 1 shows the performance of sab and mbd1 for single faulty output when varying the input probabilities. a single faulty output corresponds to the case where components fail with a very small probability. the minimal-cardinality diagnoses consist of only single fault diagnoses. figure 1a shows the average number of minimal cardinality diagnoses versus the circuit size n for three input probabilities. the average number of diagnoses is small    1  and decreases towards equal probabilitys for '1' and t'  1 . figure 1b shows the average time for computing all minimal-cardinality diagnoses by sab and mbd1. the figure shows that sab is highly effective resulting in a large speed-up as n increases. the speed-up is particularly significant for the case where all inputs are zero. for input probability 1  the average 


figure 1: time by sab and mbd1 on the four-bit adder with inputs all zeros and multiple faulty outputs. 
time is nearly identical for both sab and mbd1. for a 1-bit adder  1 components  and inputs zeros  sab's performance time ranges between 1 and 1 seconds  while on the same set of problems algorithm mbd1 takes between 1 and 1 seconds. for a 1-bit adder  1 components  and when all inputs are zeros  the time by sab ranges between 1 and 1 sec..  while by mbd1 between 1 and 1 sec. 
   for multiple faulty output  the number of minimal diagnoses increases exponentially with n and their cardinality is greater than 1. problem instances on an 1bit adder had 1 minimal-cardinality diagnoses for input probability 1 and 1 for input probability 1. this corresponds to the case where components fail with non-small probability. mbd1 was able to compute diagnosis up to a four-bit adder but exceeded the limit on the eight-bit adder  even when computing one diagnosis. sab  on the other hand  computed all diagnoses for the eight-bit adder  and it took only 1 seconds to compute all 1 diagnoses in one particular problem instance. kor the four-bit adder  where comparison can be made between sab and mbd1  we plotted the histogram of the distribution of 1 problem instances as a function of the number of diagnoses and their cardinality  figure 1 . we also give a scatter diagram for the time to compute all diagnoses by sab and mbd1 on each problem instance  figure 1 . figure 1 shows that the cardinality of the diagnoses ranged between two and five and that number of minimal-cardinality diagnoses ranged between 1 and 1. figure 1 shows that sab was an order of magnitude more time efficient than 
mbd1. mbd1 s time ranged between 1 seconds and 1 seconds while sabs time ranged between 1 seconds and 1 seconds. mbd1 required 1 seconds to solve a hard problem having 1 diagnoses of cardinality 1  figure 1  and took only 1 seconds to solve an easy problem having 1 diagnoses of cardinality 1  figure 1 . sab required 1 seconds for the hard problem instance  while 1 seconds for the easy one. 
1 	discussion and related work 
the common approach to model-based diagnosis has widely been based on the language of propositional logic  and the reasoning machinery of the atms . the main advantage of using constraint network techniques for diagnosis is that it allows the structure of the system to be effectively exploited and the complexity of computation to be bounded in advance. for example  the circuit in figure 1 may have an exponential number of minimal conflict sets  exponential in the square root of the number of circuit components    yielding an exponential time for computing diagnoses by mbd1. our algorithm  on the other hand  is linear time for that circuit and its efficiency can be determined by a simple analysis of the circuit structure  prior to execution. mbd1 will still perform poorly on this problem instance due to the time needed for checking that a current hypothetical diagnosis covers all conflicts. for near-tree networks  the computation done vy tree-clustering can be viewed as replacing the computation of all conflict sets in mbd1 and mbd1. however  while the number of conflicts  on which mbd1 and mbd1 s performance depend  is hard to predict in advance  the cost of treeclustering can be predicted by analyzing the structure of the circuit. 
　several methods have been proposed  1; l  to avoid the combinatorial explosion of the early gde-style computation . in those works  various heuristics are adopted that trade off completeness with efficiency. algorithms have been proposed to compute the first k minimal  not necessarily minimal-cardinality  diagnoses  for fixed k  in polynomial time  1; 1; 1 . in  an approach called  structural focusing  is presented based on identifying those parts of the system whose diagnoses are independent of the remaining parts of the system. an  independent diagnosis problem  in  depends not only on the structure of the circuit but also on the observation instance of the diagnosis problem. a typical example is an n-bit adder problem where all inputs and outputs are 
set to 1 except for the output carry of the last  one-bit adder. that circuit with that observation instance has first been suggested in  to motivate work on focusing on probable diagnosis. unlike those focusing approaches  our approach only depends on the structure of the circuit. a structural notion of independence similar to ours has also been advocated recently and several versions of a diagnosis algorithm are given in   
1 	summary and conclusions 
sab is a diagnosis algorithm that exploits the structure of the problem when computing minimal-cardinality diagnoses. for problems containing no cycles  sab is time and space linear. mbd1  similar to gde   can find all minima  diagnoses and is not restricted by the structure of the problem. mbd1 is an incremental version of mbd1 that focuses on minimal cardinality diagnoses. since sab's complexity is time and space linear while mbd1s  mbd1's  is exponential  we expected a significant performance gain by sab over mbd1  mbd1 . two sets of experiments are conducted. the first set compares the diagnostic performance of sab and mbd1 on a class of randomly generated acyclic circuits. the second set compares sab and mbd1 for diagnosing circuits containing cycles  n-bit adder  with randomly generated inputs and multiple faults. the first experiments show that algorithm sab is superior to mbd1 for most problem instances. depending on the circuit type and the input probabilities  there exists a critical circuit size 
	el fattah and dechter 	1 

 in the order of 1 components  beyond which m b d l becomes inefficient in space and time and thus diagnoses cannot be computed  for at least one generated problem . unlike m b d l   sab was able to compute the diagnoses for all circuit sizes studied  1 to 1 components  and all problem instances. in comparison to sab  m b d l was markedly sensitive to variations in the probabilities of the inputs and the types of circuits studied. in general  m b d l seems to be at a disadvantage with respect to sab when the number of conflict sets is large and the number of minimal-cardinality covers is small. on the other hand  m b d l is at some advantage when the number of conflicts is small while the number of diagnoses is relatively large. the second set of experiments show that even when relatively expensive  it is worthwhile doing tree clustering once so that all future diagnosis tasks are performed efficiently. the main conclusion is that for nearly acyclic circuits  such as the n-bit adder  the performance of sab  being linear  provides a definite advantage as the size of a circuit increases and the number of minimal conflicts or diagnoses becomes too large. 
