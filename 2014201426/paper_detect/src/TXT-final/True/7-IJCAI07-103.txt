
although epistemic logic programming has an enhanced capacity to handle complex incomplete information reasoning and represent agents' epistemic behaviours  it embeds a significantly higher computationalcomplexity than non-disjunctiveand disjunctive answer set programming. in this paper  we investigate some important properties of epistemic logic programs. in particular  we show that lee and lifschitz's result on loop formulas for disjunctive logic programs can be extended to a special class of epistemic logic programs. we also study the polysize model property for epistemic logic programs. based on these discoveries  we identify two non-trivial classes of epistemic logic programs whose consistency checking complexity is reduced from pspace-complete to np-complete and -complete respectively. we observe that many important applications on epistemic representation fall into these two classes of epistemic logic programs.
1 introduction
as a new logic programming paradigm developed by gelfond  epistemic logic programming integrates epistemic notions such as knowledge and belief into disjunctive answer set semantics  gelfond  1   which has an enhanced capacity to handle complex incomplete information reasoning and represent agents' epistemic behaviours. however  recently zhang has shown that epistemic logic programming embeds a significantly higher computational complexity than non-disjunctive and disjunctive answer set programming  assuming that p = np and the polynomial hierarchy does not collapse   zhang  1 . therefore  the question of whether there are some useful classes of epistemic logic programs that have a lower computational complexity becomes crucial to apply epistemic logic programming to practical domains.
¡¡in this paper  we undertake a deep study on this topic. we first refine some key notions of gelfond's epistemic semantics and show its essential complexity properties. we then show that lee and lifschitz's result on loop formulas for disjunctive logic programs can be extended to a special class of epistemic logic programs. we also study the polysize model property for epistemic logic programs. based on these discoveries  we eventually identify two non-trivial classes of epistemic logic programs whose consistency checking complexity is reduced from pspace-complete to np-complete and -complete respectively. we observe that many important applications on epistemic representation fall into these two classes of epistemic logic programs.
1 gelfond's semantics for epistemic reasoning
1 language  structure and satisfaction
we consider a languagelg which is a propositionallanguage augmented with two modal operators k and m to represent knowledge and belief respectively. formulas of lg are standard propositional formulas augmented with k  and m  and are closed under ¡Ä ¡Å and  . a g-structure v is a collection of sets of propositional literals called the set of possible states of an agent. a situation in a g-structure v is a pair  v s   where s ¡Ê v. the satisfaction in lg is defined in terms of the truth relation and falsity relation between a formula and a situation. the truth of a formula   in a situation  v s   denoted as  v s  |=    and the falsity  denoted as  v s  =|    are defined as follows.
 v s  |= p iff p ¡Ê s where p is a propositional atom.
 v s  |= k  iff  v si  |=   for all si ¡Ê v.
 v s  |= m  iff  v si  |=   for some si ¡Ê v.
 v s  |=   ¡Ä ¦× iff  v s  |=   and  v s  |= ¦×.
.
   s  |=	 	   s  =|  
 v s  =| p iff  p ¡Ê s where p is an atom.
 v s  =| k  iff  v s  |= k  does not hold1.  v s  =| m  iff  v s  |= m  does not hold.  v s  =|   ¡Ä ¦× iff  v s  =|   or  v s  =| ¦×.
 v s  =|   ¡Å ¦× iff  v s  =|   and  v s  =| ¦×.
¡¡it is clear that if a formula is of the form k    k   m  or  m  where   does not contain operator k or m  that is    is an objective formula  then its truth value in  v s  will not depend on s  and we call this formula subjective. in this case   v s  |= k   or  v s  |= m   can be simply written as v |= k   or v |= m  resp.  on the other hand  it is easy to see that an objective formula's truth value in  v s  will only depend on s. therefore  notion  v s  |=   may also be simplified as s |=  . a propositional literal is also called an objective literal  and formulas kl  kl ml  ml are called subjective literals where l is a propositional literal.
¡¡it is important to notice that in gelfond's semantics   v s  =|   is not equivalent to in general. this is because by allowing s to be a set of propositional literals  an atom is not assigned a truth value in s if neither of the atom nor its negation is presented in s. consequently  k and m are not dual modal operators1 in lg. for instance  consider v = {{a b} {a b  c}}. clearly we have v |=  k c. but we do not have v |= mc.
¡¡a g-structure v is called consistent if for each s ¡Ê v  s does not contain a propositional atom as well as its negation. otherwise  v is inconsistent and is denoted as v = {lit} where lit denotes the inconsistent set of all propositional literals.
¡¡given a g-structure v  we say a formula   is satisfied in v if there is some s ¡Ê v such that  v s  |=  . a formula   is satisfiable if   is satisfied in some consistent g-structure v. a consistent g-structure v is called a model of   if for every s ¡Ê v   v s  |=    denoted as v |=  . we may use mod    to denote the set of all models of  .
lemma 1 a formula   of lg is satisfiable if and only if it is satisfied in a consistent g-structure with at most | | states  where | | denotes the length of formula  .
theorem 1 deciding whether a formula is satisfiable is npcomplete.
¡¡given a satisfiable formula    very often the maximal model of   is of a special interest in our study  as will be shown in section 1. formally a g-structure v is a maximal model of   if v is a model of   and there does not exist another consistent v such that. consider formula k a ¡Ô  b   it has three models {{a  b}}  {{ a b}} and {{a  b} { a b}}  where only the last one is a maximal model. on the other hand  formula   a ¡Ä  b  ¡Ô  mb  ¡Ä    a ¡Ä b  ¡Ô  ma  has two models {{a  b}} and {{ a b}} and both are maximal models.
proposition 1 let   be a formula of lg and let v be a gstructure. deciding whether v is a maximal model of   is co-np-complete.
1 world view semantics for epistemic logic programs
we specify an epistemic logic program in language lg to be a finite set of rules of the form:
f1 ¡Å ¡¤¡¤¡¤ ¡Å fk ¡û g1 ¡¤¡¤¡¤ gm   1  not gm+1 ¡¤¡¤¡¤ not gn 
and constraints of the form:
	¡û g1 ¡¤¡¤¡¤ gm not gm+1 ¡¤¡¤¡¤ not gn.	 1 
in  1  and  1   f1 ¡¤¡¤¡¤ fk are objective literals  g1 ¡¤¡¤¡¤ gm are objective or subjective literals  and gm+1 ¡¤¡¤¡¤ gn are objective literals. sometimes  we also present a rule in the form head ¡û body  where head = {f1 ¡¤¡¤¡¤ fk} and body = {g1 ¡¤¡¤¡¤ gm not gm+1 ¡¤¡¤¡¤ not gn}. note that if head =    then the rule becomes a constraint; and if body =    i.e. head ¡û  it means that head should be true without any condition.
¡¡for an epistemic logic program ¦° without constraints  its semantics is given by its world view which is defined in the following steps:
step 1. let ¦° be an epistemic logic program not containing

modal operators k and m and negation as failure not. a set s of propositional literals is called a belief set of ¦° iff s is a minimal set of satisfying conditions:  i  for each rule
f ¡û g1 ¡¤¡¤¡¤ gm from ¦° such that s |= g1 ¡Ä ¡¤¡¤¡¤ ¡Ä gm we have s |= f  f is f1 ¡Å ¡¤¡¤¡¤ ¡Å fk ; and  ii  if s contains a pair of complementary literals then we write s = lit.
step 1. let ¦° be an epistemic logic program not containing

modal operators k and m and s be a set of propositional literals in the language of ¦°. by ¦°s we denote the result of  i  removing from ¦° all the rules containing formulas of the form not g such that s |= g and  ii  removing from the rules in ¦° all other occurrences of formulas of the form not g. we call s is a belief set of ¦° if it is a belief set of ¦°s.
step 1. finally  let ¦° be an arbitrary epistemic logic program
and v a collection of sets of propositional literals in its language. by ¦°v we denote the epistemic logic program obtained from ¦° by  i  removing from ¦° all rules containing formulas of the form g such that g is subjective and  and  ii  removing from rules in ¦° all other occurrences of subjective formulas.
¡¡now we define that a collection v of sets of ground literals is a world view of ¦° if v is the collection of all belief sets of ¦°v. clearly  a world view of an epistemic logic program is also a g-structure in language lg.
¡¡it is easy to extend the world view definition abovefor epistemic logic programs ¦° with constraints: v is a world view of ¦° if v is a world view of the program obtained by deleting all constraints from ¦°  and for each constraint in ¦° of the form for some 1 ¡Ü i ¡Ü m  or v |= gj for some  m + 1  ¡Ü j ¡Ü n. an epistemic logic program may have one  more than one  or no world views.
theorem 1  zhang  1  deciding whether an epistemic logic program has a world view is pspace-complete.
¡¡it is easy to see that extended/normal logic programs and disjunctive logic programs are two special classes of epistemic logic programs whose world views always exist. although computing the world view  i.e. the collection of all stable models/answer sets  for these types of programs could be difficult  this will be addressed in section 1   in general  we are more interested in discoverying non-trivial classes of epistemic logic programs with a lower computational complexity.
1 completion for epistemic logic programs without positive knowledge
let us consider a simple epistemic logic program ¦° = {a ¡û
 mb}. this program has one world view {{a}}. however  under the previous g-structure semantics  ¦°'s equivalent formula  b¡Ä a ¡Ô  mb 1 has a unique model {{a  b}}  which is obviously different from ¦°'s world view. this inconsistency can be avoided if we slightly revise the definitions of g-structure and the associated satisfaction in lg.
¡¡to begin with  we first need to remove negative propositional atoms from epistemic logic programs. an epistemic logic program ¦° is said in canonical form if no negative propositional atom occurs in ¦°. note that this does not exclude occurrences of negative subjective formulas in ¦°. for instance  program {a¡Åb ¡û  mc} is to be in canonical form  while program {a¡Åb ¡û  m c} is not. for an arbitrary program ¦°  we can always transform it into the canonical form by introducing new propositional atoms in the language. in particular  for each atom a in lg  we introduce a new atom a to represent literal  a. therefore  by replacing each negative atom  a occurring in ¦° with the corresponding new atom a  the resulting program  denoted as ¦°c  is in canonical form. if v is a g-structure in language lg  vc is obtained by replacing each negative atom occurring in v with the corresponding new atom.
proposition 1 let ¦° be an epistemic logic program and ¦°c be ¦°'s canonical form. a consistent g-structure v is a world view of ¦° if and only if vc is a world view of ¦°c.
¡¡due to proposition 1  in the rest of this paper  we can assume that all epistemic logic programs are in canonical form in our context. now we re-define a g-structure to be a collection of sets of propositional atoms. consequently  we revise the falsity relation in lg as follows: 
 p is a propositional atom   while the truth relation and falsity relation for all other formulas remain the same. we should mention that this change will imply that k and m become dual modal operators in lg  recall that in section 1  we showed that k and m are not dual operators . despite this difference  this new satisfaction will not affect the world view definition for epistemic logic programs.
¡¡given an epistemic logic program ¦°  we use atom ¦°  to denote the set of all atoms occurring in ¦°. now we define a class of epistemic logic programs without positive knowledge  denoted as elp k. that is  for each ¦° ¡Ê elp k  no knowledge operator k positively occurs in the body of each rule. it is easy to obverse that many typical epistemic logic programsin applicationsare actually elp k programs  gelfond  1 .
definition 1 let ¦° be an elp k program. the completion of ¦°  denoted as comp ¦°   consists of the following formulas:  1  if head ¡û body is a rule in ¦°  then the following formula is in comp ¦° 1:
	body   head;	 1 
  the following formula is in
 ;	 1  and  1  for each a ¡Ê atom ¦°   if there is no rule head ¡û body in ¦° such that a ¡Ê head  then  a is in comp ¦° .
example 1 let ¦° consist of the following rules: a ¡Å b ¡û  mc  d ¡û  ka.
clearly  ¦° is an elp k program. from definition 1  comp ¦°  consists of the following formulas:
 mc    a ¡Å b   a     b ¡Ä  mc   b     a ¡Ä  mc   d ¡Ô  ka 
 c.
it is easy to check that ¦° has a unique world view {{a d} {b d}}  which is also the unique model of comp ¦° . 
¡¡in general  definition 1 cannot be extended to arbitrary epistemic logic programs. consider the following program ¦°:
a ¡Å b ¡û  mc  d ¡û ka.
 if we apply definition 1 to ¦°  its completion is the same as in example 1 except formula d ¡Ô  ka is replaced by d ¡Ô ka. we can see that ¦° has one world view {{a} {b}}   has two maximal models {{a} {b}} and does not contain any loop  see next section   definition 1 actually does not providea precise completion characterization for arbitrary epistemic logic programs.
¡¡the following proposition establishes an important connection between an elp k program and its completion.
proposition 1 let ¦° be an elp k program. if v is a world view of ¦°  then it is also a maximal model of comp ¦° .
1 loop formulas for elp k programs
now we show that lee and lifschitz's loop formula result for disjunctive logic programs  lee and lifschitz  1  can also be extended to elp k programs.
¡¡given an epistemic logic program ¦°  the positive dependency graph of ¦°  denoted as   is the directed graph constructed in the following way:	the set of vertices is atom ¦°  ¡È km ¦°   where km ¦°  is the set of all subjective atoms occurring in ¦°  and for each pair of vertices x y ¡Ê atom ¦°  ¡È km ¦° :  1  there is an edge from x to y if there is a rule head ¡û body in ¦°  such that x ¡Ê head  and y positively occurs in body;  1  for each path in the graph formed from  1   if both a and ka  or ma  occur in the path  then for any  such that  and  are edges  add edges  and  and  resp. 	respectively;  1  based the graph formed from  1  and  1   if there is no such cycle containing vertex a but not ka  ma resp.   then remove vertex a and all its associated edges.	we may use pos body  to denote the set of all  objective and subjective  atoms positively occurring in body. we call a nonempty set l   atom ¦°  ¡È km ¦°  a loop of ¦° if for any x and y in l  there is a path in from x to y with length   1.
definition 1 let ¦° be an epistemic logic program and l a loop of ¦°. r l  is denoted as the set of following formulas:

for each rule head ¡û body in ¦° such that and pos body  ¡É l =  . then the loop formula lf l  associated with l in ¦° is specified as
	.	 1 
we use lf ¦°  to denote the set of all loop formulas in ¦°.
¡¡it is easy to see that  1  is equivalent to lee and lifschitz's disjunctive loop formula  lee and lifschitz  1  and lin and zhao's loop formula  lin and zhao  1  if ¦° is restricted to a disjunctive logic program and a normal logic program respectively.
example 1 consider an epistemic logic program ¦°: a ¡Å b ¡û mc  c ¡û a  d ¡û  ka.
¦° has one loop l = {a mc}. then we have r l  =    and
lf l  = {  a ¡Å mc }. on the other hand  since ¦° is an
elp k  ¦°'s completion comp ¦°  consists of the following formulas:
mc   a ¡Å b  a      b ¡Ä mc  ¡Å c   b     a ¡Ä mc   c   a  d ¡Ô  ka.
we can see that comp ¦°  has two  maximal  models {{a c}}and {{d}}  where comp ¦° ¡Èlf l  has one  maximal  model {{d}}  which is also the unique world view of
¦°. 
theorem 1 let ¦° be an elp k program  comp ¦°  the completion of ¦°  and lf ¦°  the set of loop formulas of ¦°. a g-structure is a world view of ¦° if and only if it is a maximal model of comp ¦°  ¡È lf ¦° .
1 proof of theorem 1
in order to prove theorem 1  we need to first show some important properties of formulas and epistemic logic programs in language lg. we first introduce the notion of epistemic reduction for formulas.
¡¡let v be a g-structure and   a formula of lg. a formula  v is called the epistemic reduction of   with respect to v if  v is obtained from   in the following way:  1  for each  's subformula of the form k¦Õ  here ¦Õ is objective   k¦Õ is replaced by ¦Õ if v |= k¦Õ  otherwise k¦Õ is replaced by f; and  1  for each  's subformula of the form m¦Õ  m¦Õ is replaced by t if v |= m¦Õ  otherwise m¦Õ is replaced by f.
¡¡consider formula   = ka ¡Å mb. suppose a and b are the only propositional atoms in the language. then v = {  {a} {b} {a b}} is a maximal model of  . furthermore  we can see that  v = t  where v is exactly the set of all models of  v.
proposition 1 let   be a formula of lg and let v be a gstructure. then v is a maximal model of   if and only if mod  v  = {s | s ¡Ê v}.
¡¡now with a slight change  we may extend the notion of epistemic reduction to epistemic logic programs. let ¦° be an epistemic logic programs and v be a g-structure in language lg. a disjunctive logic program  without containing any k and m operators  ereduct ¦° v  is called the epistemic reduction of ¦° under v if it is obtained from ¦° in the following way:  1  removing all rules from ¦° where g is a subjective literal occurring in the rules and  and  1  removing all other occurrences of subjective literals in the remaining rules  i.e. replacing those g with t due to v |= g . then we have the following results.
proposition 1 let ¦° be an epistemic logic program and v a g-structure of lg. v is a world view of ¦° if and only if v is the collection of all stable models of disjunctive logic program ereduct ¦° v .
¡¡the following two lemmas establish an important connection between an elp k program and its completion and loop formulas.
lemma 1 let ¦° be an elp k program and v a world view of ¦°. then  comp ¦°  ¡È lf ¦°  v ¡Ô
comp ereduct ¦° v   ¡È lf ereduct ¦° v  .
lemma 1 let ¦° be an elp k program and v a maximal model of comp ¦°  ¡È lf ¦° . then
comp	lf	v	comp ereduct	v
proof of theorem 1: consider an elp k program ¦° and comp ¦° ¡Èlf ¦° . we show that v is a world view of ¦° iff v is a maximal model of comp ¦°  ¡È lf ¦° .
    suppose v is a world view of ¦°. then from proposition 1  we know that v is the collection of all stable models of disjunctive program ereduct ¦° v . on the other hand  from lemma 1  we have  comp ¦°  ¡È lf ¦°  v ¡Ô comp ereduct ¦° v   ¡È lf ereduct ¦° v  . on the other hand  from theorem 1 in  lee and lifschitz  1   we know that each stable model of program ereduct ¦° v  is also a model of formula comp ereduct ¦° v   ¡È lf ereduct ¦° v  . so we conclude v = mod  comp ¦°  ¡È lf ¦°  v . finally  from proposition 1  it follows that v is a maximal model of comp ¦°  ¡È lf ¦° .
¡¡    suppose v is a maximal model of comp ¦°  ¡È lf ¦° . from lemma 1  we know  comp ¦° ¡Èlf ¦°  v ¡Ô comp ereduct ¦° v   ¡È lf ereduct ¦° v  . according to proposition 1  on the other hand  v = mod  comp ¦°  ¡È lf ¦°  v . then from theorem 1 in  lee and lifschitz  1   each model of comp ereduct ¦° v   ¡È lf ereduct ¦° v   is also a stable model of disjunctive logic program ereduct ¦° v . finally  from proposition 1  it follows that v is a world view of ¦°. this completes our proof of theorem 1. 
1 polynomial bound on loop formulas
since there may be an exponentialnumber of loops in an epistemic logic program  the way of transforming an elp k program into comp ¦°  ¡È lf ¦°  and then computing its gstructures will not have particular computation advantages. however  we will show that for elp k programs with polynomially bounded numbers of loop formulas  the consistency check problem will be significantly reduced from pspacecomplete to np-complete. formally  given an epistemic logic program ¦°  we say that ¦° has a polynomial bound on its loop formulas if the number of cycles in is bounded by  where is a polynomial of.
theorem 1 let ¦° be an elp k program that has a polynomial bound on its loop formulas. deciding whether ¦° has a world view is np-complete.
proof: here we only give membership proof. from theorem 1  ¦° has a world view iff comp ¦°  ¡È lf ¦°  has a maximal model. clearly  if the number of cycles in is bounded by
  then the size of formula comp ¦°  ¡È lf ¦°  is also bounded by . so we can guess such
lf ¦°  in polynomial time with a nondeterministic turing machine. from theorem 1  we know that checking whether comp ¦°  ¡È lf ¦°  has a model is in np. also it is easy to see that comp ¦°  ¡Èlf ¦°  has a model iff it has a maximal model. 
¡¡in the following  we provide a polynomial upper bound on the number of loop formulas for an epistemic logic program. given an epistemic logic program ¦° and a ¡Ê head ¦°   an inference chain of a is a sequence of atoms
 a b1 ¡¤¡¤¡¤ bl 1 bl   where a b1 ¡¤¡¤¡¤ bl are different atoms in atom ¦°   and there are l different rules r1 ¡¤¡¤¡¤ rl in ¦° such that a ¡Ê head r1  b1 ¡Ê pos body r1    b1 ¡Ê head r1   b1 ¡Ê pos body r1   ¡¤¡¤¡¤  bl 1 ¡Ê head rl  and bl ¡Ê pos body rl  . for each a ¡Ê head ¦°   it may have one or more inference chains. the inference depth of a  denoted as i-depth a   is the length of a's longest inference is defined as i-depth ¦°  =
	  -	    :	¡Ê	 ¦°  .
proposition 1 let ¦° be an epistemic logic program. if i-depth ¦°    k for some fixed k  then |lf ¦° | is bounded by o  1k/k!  ¡¤ nk   where |atom ¦° | = n.
proposition 1 let ¦° be an epistemic logic program. for a fixed k  deciding whether i-depth ¦°    k is solvable in time o k ¡¤ nk+1  where |atom ¦° | = n.
1 polysize model property
some special modal logics such as single agent s1 and kd1  blackburn et al.  1  have polysize model property which brings the consistency check  satisfiability problem  in these logics down to np-complete. we have shown that gelfond's epistemic semantics also has this property  i.e. lemma 1 . however  epistemic logic programs under the world view semantics do not satisfy the polysize model property in general. for instance  the following program
 
  where i = 1 ¡¤¡¤¡¤ n 
has an exponential number of world views and each world view contains an exponential number of belief sets. nevertheless  it is easy to observe that many specific epistemic logic programs indeed satisfy the polysize model property. consequently  we can further identify an important class of epistemic logic programs whose consistency check is complete.
definition 1 an epistemic logic program ¦° is said to satisfy the polysize model property if either ¦° has no world view  or for each ¦°'s world view v  |v| is bounded by o f |¦°|    where f |¦°|  is a polynomial of |¦°|.
theorem 1 let ¦° be an epistemic logic program satisfying the polysize model property. deciding whether ¦° has a world view is -complete.
proof: since for each world view v of ¦°  |v| is bounded by o f |¦°|    we can guess  in polynomial time  a k with k being bounded by o f |¦°|   and a collection v consisting of k different sets of atoms. then we check whether v is a world view of ¦° in the following way:  1  transform ¦° into a disjunctive logic program ¦°v by performingstep 1 in section 1  and  1  for each s ¡Ê v  check whether s is a stable model of ¦°v. clearly   1  can be done in polynomial time  and  1  is solvable with k queries to an np oracle.
¡¡hardness proof. the hardness is proved by a reduction of the validity of qbf
 n m ¡Ý 1   where  and each dk = lk 1 ¡Ä lk 1 ¡Ä lk 1 is a conjunction of propositional literals li j over {x1 ¡¤¡¤¡¤ xn y1 ¡¤¡¤¡¤ ym}. we know that deciding whether a is valid is -complete  papadimitriou  1 .
we construct in polynomial time an epistemic logic program ¦° from a and show that ¦° has a world view and each of its world views contains exactly one belief set if and only if a is valid. in particular  ¦° is constructed on propositional atoms
{valid invalid}  where are used to imitate the negations of x and y respectively. ¦° consists of the following rules:
 
  for i = 1 ¡¤¡¤¡¤ n 
 
yj ¡û   for = 1 ¡¤¡¤¡¤ m  valid ¡û ¦Ñ lk 1  ¦Ñ lk 1  ¦Ñ lk 1   for k = 1 ¡¤¡¤¡¤ h  invalid ¡û  minvalid not valid 
 for any
a ¡Ê {x1 ¡¤¡¤¡¤ xn y1 ¡¤¡¤¡¤ ym}. it is easy to see that if ¦° has a world view v  then v must only contain one belief set. then we can show that ¦° has a world view if and only if a is valid. 
¡¡now we investigate under what conditions  an epistemic logic program will satisfy the polysize model property. we first define the dependency graph for an epistemic logic program. the dependency graph g¦° of ¦° is a directed graph where the set of vertices is atom ¦° ; and for vertices a and b  there is an edge  a b  from a to b if there is a rule head ¡û body in ¦° such that a ¡Ê head and b ¡Ê body or
 . the edge  a b  is labeled with + if b positively occurs in body;  a b  is labeled with   if not b occurs in body or b occurs in head  assuming ; and  a b  is labeled with  k or  m if  kb or  mb occurs in body respectively. a cycle in g¦° is called negative cycle if the cycle has at least one edge labeled with   while all other edges in the cycle  if there are some  are labeled with +. a cycle is called a mixed negative cycle if the cycle has at least one edge labeled with  k or  m.
proposition 1 let ¦° be an epistemic logic program  g¦° its dependency graph and k a fixed number. then the following results hold:
1. if g¦° has k negative even cycles1 and ¦° has a world view  then ¦°'s each world view contains at most 1k belief sets;
1. if g¦° has k mixed negative even cycles  then ¦° has at most 1k world views;
1. if g¦° has k negative even cycles but has no mixed negative even cycle  then either ¦° has no world view or has a unique world view containing at most 1k belief sets.
corollary 1 for any epistemic logic program ¦° where its dependency graph g¦° has a fixed number of negative even cycles  deciding whether ¦° has a world view is -complete.
1 concluding remarks
as argued by gelfond  epistemic logic programming has a rich expressive power for epistemic representation which other modal nonmonotonic logics do not have. nevertheless  as shown in  zhang  1   the enhanced expressive power is due to a higher computational cost than other nonmonotonic logics and logic programming paradigms. although this is the case in general  as we will observe next  many important applications of epistemic representation actually fall into the two classes of epistemic logic programs that we identified earlier.
¡¡one important application of epistemic logic programming is to represent the epistemic closed world assumption  ecwa  which involves a strong introspection. it was noted that other logic programs and modal nonmonotonic logics such as autoepistemic logic  marek and truszczynski  1  usually have difficulties to handle it. as demonstrated in  gelfond  1   representing ecwa is important when disjunctive information is presented in the agent's knowledge base. in epistemic logic programs  ecwa can be simply represented by rules like
 
for all atoms in the language1. we observe that adding such ecwa rules into an epistemic logic program neither introduces any new loop formulas nor increases the size of world views of the program  although they may generate more world views. therefore  in principle ecwa rules do not add an extra burden on the world view computation for an epistemic logic program.
¡¡now let us examine the following normal logic program ¦°  given in  lifschitz and razborov  1 :
 
	ij	ij 
r1 ¡û  rj ¡û ri pij  i j = 1 ¡¤¡¤¡¤ n.
if we view ¦°  as an epistemic logic program  then this program does not belong to either of the two classes we identified earlier. computing ¦° 's world view would be hard because ¦°  has 1n loop formulas and the unique world view also contains 1 belief sets.
¡¡program ¦°  defines the reachability in arbitrary directed graphs. finding a reachable path from r1 to ri is to compute one answer set containing ri. when we review ¦°  as an epistemic logic program  we have to compute the world view that is the collection of all answer sets of ¦° . this actually can be avoided if we rewrite ¦°  to ¦°  as follows:
pij ¡û  mqij  qij ¡û  mpij  r1 ¡û  rj ¡û ri pij  i j = 1 ¡¤¡¤¡¤ n.
program ¦°  has an exponential number of world views but each one only contains one belief set of size 1n. then under program ¦°   to find a reachable path from r1 to ri  we only need to compute one world view of ¦°  where its belief set contains ri. in this way  the computation is the same as that of program ¦°  under the answer set semantics.
