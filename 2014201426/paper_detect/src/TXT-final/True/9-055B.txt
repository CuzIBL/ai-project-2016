 
　　　current methods for mechanical program v e r i f i c a t i o n require a complete predicate specification on each loop. because this is tedious and error-prone  producing a program 
with complete  correct predicates is reasonably d i f f i c u l t and would be f a c i l i t a t e d by machine assistance. this paper discusses heuristic methods for mechanically deriving loop predicates from their boundary conditions and for mechanically completing p a r t i a l l y specified loop predicates. 
introduction 
　　　mechanical v e r i f i c a t i o n of program correctness is desirable and possible. 1 given a program  a f i r s t - o r d e r axiotnatization of i t s semantics  and predicates on the input  output  and each loop  v e r i f i c a t i o n of the output predicate is a mechanical process   c.f.  and  for recent surveys . 
　　　input and output predicates are necessary and natural for a programmer to supply. however  completely specifying the predicates on loops is tedious  error-prone  and redundant. it is tedious due to the large amount of stereotyped d e t a i l required. it is error-prone* partly because of the tedium and partly because the notation is less natural than that for procedural steps. it is redundant since the predicates repeat information which is manifest in the program. the purpose of this paper is to show that loop predicates can be derived mechanically** and that p a r t i a l l y specified loop predicates can be completed mechanically. 
*an example may lend some weight of experience. in his thesis 1   king presents nine programs submitted to the v e r i f i e r ; the most complex of these  example 1  has an incorrect loop predicate  i . e . the inductive assertion is too weak to be consistent or to imply the desired output predicate.  since the theorem prover rejected the loop predicate due to an i n a b i l i t y to handle multiple quantification  the predicate error was overlooked.  
**in one sense  this is t r i v i a l . a l l w e l l formed predicate expressions for each loop can 
be enumerated and proofs of correctness dovetailed u n t i l one succeeds. if every v a l i d theorem of the subject domain is provable  this 
w i l l eventually verify the program; otherwise  mechanical v e r i f i c a t i o n is not possible in general. such a procedure i s   however  computationally i n t r a c t i b l e . talso at harvard university  cambridge  mass. 
     elspas  green  l e v i t t   and waldinger1 have independently worked on this problem using 
difference equations as an aid to specifying 
                                   1 assertions. cooper has previously studied the problem and observed that an inductive assertion can be obtained by hand by constructing the f i r s t few terms in the loop expansion  
which generally shows what the i n f i n i t e union must be. 
　　　our method uses a different approach. to generate loop predicates where none are supplied  the output predicate is dragged backward through the program and modified when passing through program units  to produce t r i a l loop predicates. t r i a l loop predicates 
which are loop inconsistent are modified according to various heuristics  	to generate better t r i a l predicates. 	hence  it is also possible to accept a programmer-supplied 
inductive assertion which gives the  essential  idea of some loop and mechanically f i l l in the 
details to arrive at a complete  correct loop predicate. 	many of the heuristics are domain specific  this paper uses integers and integer 
arrays as the subject domain. 
　　　the paper is divided into five sections. section 1 i l l u s t r a t e s our approach with two simple examples. section 1 discusses the general method  domain-independent heuristics  and heuristics specific to the integers. section 1 treats a number of complex examples to show how the heuristics are used and exhibit their coupling. section 1 discusses implementation and application of t h i s method. 
notation. throughout  a simple flowchart language is used. the input predicate is denoted by o; the output predicate by w. unprimed  primed  variables and predicates denote values and predicates on these values before  after  control flows through a set of flowchart boxes. the transformation due to a flowchart path a i a♀1-'*ain is denoted by 
1 { i i   i     . . . ♀   . 
' l ' 1 
simple examples 
　　　the flowchart of figure 1  taken from   computes the quotient q and remainder r of integer x divided by integer y. $={x 1 a y 1   *={x-qy+r a 1 r a r y . * at the entrance implies that at arc a 1 the predicate p -{x 1 a y 1 a q 1 a r-x} holds. to verify the flowchart  it suffices to find a loop predicate p  at arc a  such that 
 el  
	 e1  	a 1 1 1  	- 	p 1 
	 e1  	p1 a 1 1  
　　　the standard means for generating a loop predicate is to use e1 and s t a r t with t r i a l choice of p t  {1 l 1  ＊* * ' } . here  this gives p1-{r y  +  x-qy+r a 1sr a r y  }. converting 


1 




1 
a s s e r t i o n s mechanically and  t h e r e f o r e   should e x p e d i t e the task of p r o v i n g programs c o r r e c t . 
conclusion 
acknowledgements 
having shown t h a t i t i s p o s s i b l e i n some 
number of cases to d e r i v e the i n d u c t i v e 	the author would l i k e to thank l. 	peter 
a s s e r t i o n s by h e u r i s t i c s   we t u r n to t h e 	deutsch  c a r l h e w i t t   	ralph london and jay 
a p p l i c a t i o n o f t h i s 	i n a mechanical v e r i f i c a -	s p i t z e n f o r d i s c u s s i o n s concerning v a r i o u s 
t i o n system. 	aspects of mechanical program v e r i f i c a t i o n . 
ralph london is the source f o r the o b s e r v a t i o n 
implementation 
	of p r e d i c a t e incompleteness 	in the example 
	discussed i n s e c t i o n 	1 . 
we have not y e t implemented t h i s technique 
and the above examples are the r e s u l t of hand 
this research was supported by the advanced 
s i m u l a t i o n s . 	i t appears t h a t programming t h i s 
research p r o j e c t s agency of the department of 
is reasonable  although by no means t r i v i a l . 
	defense under contract no. 	dahc-1-c-1. 
m o d i f y i n g the t r i a l 	loop p r e d i c a t e s and 
searching t h e space of p o s s i b l e m o d i f i c a t i o n s 	