 
all major approaches to qualitative reasoning rely on the existence of a model of the physical system. however  the task of finding a model is usually far from trivial. within the area of electrical engineering  model building methods have been developed to automatically deduce models from measurements. in this paper we explicitly show how to incorporate qualitative knowledge in order to apply these methods to situations where they do not behave satisfactorily. a program has been developed and applied to a non-trivial example. the qualitative input  in terms of an incomplete bond graph  and the resulting output can be used to form a more complete bond graph. this more informative model is suitable for further reasoning. 
1 introduction 
the major approaches to qualitative reasoning  qr   all rely on the existence of a model of the physical system. all of them have developed model languages  that is  languages for representing qualitative knowledge about physical systems  as well as methods for reasoning qualitatively within these languages. however  since real systems  both man-made and natural  are often complicated  the task of finding a model is usually far from trivial. 
　much work in the area of model building has traditionally been performed by engineers with the goal of building controllers for industrial systems and for building simulators. in this case  the goal is to find quantitative models  usually in terms of differential equations  such that they mimic the input/output behavior of the physical system. to automize the model building process  methods have been developed to deduce models from measurements. this art of fitting a sufficiently complex model structure to a given set of measurements  is referred to as system identification. 
　in this paper  we will consider a class of physical systems for which conventional system identification does not behave satisfactorily. for this class we show how to introduce qualitative knowledge to support the system identification. a program has been developed and applied to a non-trivial example. the qualitative input  in terms of an incomplete bond graph  and the resulting output can be used to form a more complete bond graph  karnopp and rosenberg  1 . an incomplete bond graph is  in our context  a graph without constitutive relations - compare e.g. an electrical cir-
cuit where the component values are unknown. this completed bond graph is more informative and is suitable for further reasoning  top and akkermans  1  top et al.  1 . 
　hence  we will assume the following three types of knowledge are at hand: general knowledge of physics and physical systems  specific  possibly partial  knowledge of the system considered and empirical data in terms of measurements from the system. since the measured data is assumed to come from a real system  it may also contain noise. finally  the illustrating example will be taken from the class of piecewise linear systems  i.e. systems with discrete non-linearities only. 
　some other researchers have also worked in the area of integrating quantitative and qualitative knowledge. kuipers and berleant  use quantitative knowledge to refine predictions of a qualitative reasoner which rely on an already existing model. however  they do not address the model building problem itself. forbus and falkenhainer   on the other hand  work with model building. they use a qualitative model to produce an envisionment for the physical system. the envisiorirnent is then used together with a mathematical model library to build quantitative models. this requires exact knowledge about the mathematical models that describe the system parts. our approach to model building differs in that we do not require any such knowledge. we use the measured data to derive the corresponding information. 
　the section to follow gives a brief introduction to conventional system identification. in section 1  we introduce our model structure proposal - a bond graph based approach. section 1 explicitly describes how to incorporate the qualitative knowledge from the model in section 1. section 1 gives a short conclusion of our results. 
1 conventional system identification 
system identification  si  is the art of fitting a chosen model structure to a set of measurements given from a physical process. if the model structure is chosen among the set of linear differential equations  there is a rich flora of general methods as well as a good understanding 


figure 1: the water tank system. 
for how they behave  see  ljung  1  for an overview . as a matter of fact  these methods behave well  in the sense that they produce models good at imitating the input/output behavior of the physical system  even if the system is not perfectly linear. however we do require the non-linearities to be fairly  small . when this assumption no longer holds true  the flora of general methods shrinks quickly. 
　in this section we consider one fairly general method called afmm  adaptive forgetting through multiple models   andersson  1  suitable for piecewise linear systems  i.e. systems abruptly changing between linear modes of operation. 
the example and its model structure: as an illustrating example consider the water tank with a separating wall as depicted in figure 1. for simplicity  assume a linear relationship between water levels and outflow. this system is piecewise linear with its discrete non-linearities appearing when the water levels reach the edge of the separating wall. using some basic insight into physical systems modeling  we will find the following set of differential equations  a state-space model  being a suitable structure for the tank: 
		 1  
the state variables x1 t  and x1 t  represent the water levels in the left and right halves respectively. here we have used the convention  the aij :s and bi:s are the unknown parameters we want to identify. however  we notice that the values of these parameters will undergo abrupt changes as the water levels vary in time. these changes naturally correspond to the water levels passing the edge of the wall. 
1 	a f m m : segmenting abruptly changing systems 
si algorithms may in fact be considered as time varying filters. these filters take the measurements as input and generate as output estimates of the unknown parameters of the underlying equation. the key idea of afmm is to set up m such filters in parallel  multiple models . all these will normally work independently of each other and if initialized appropriately  some filters will produce better estimates than the other at a given time instant. it can be shown that an optimal filter for 

figure 1: the water tank simulator. top. input flow u t  and mode of operation  horizontal line segments . bottom: measured levels in left  solid  and right  dashed  halves of the tank. 
solving a linear si problem will have a  time constant   that increases rnonotonically in time. this means that the best estimator will also be the slowest to adapt to changes. therefore  by keep resetting the time constants of  some of  the filters performing badly  we enable the filter most recently reset to respond to an abrupt change in dynamics. this latter strategy is the adaptive forgetting part of afmm. 
　given measurements and a model structure in terms of linear differential equations  afmm will produce estimates of the jump-times as well as parameter estimates for each time segment between detected jumps. optimality aspects of this and related strategies are thoroughly discussed in  gustafsson  1 . 
a f m m applied to the example: in figure 1 we plot the sampled measurements of a simulated version of the water tank. in order to mimic the noise present for real measurements  we have added a sequence of independent random variables  i.e. white noise  to the simulated output levels. it can be shown that  the behavior of the tank may be separated into three distinct modes of operation. for each such mode  all the a- and b-parameters of  1  are time invariant constants. the horizontal line segments in the upper diagram represent these modes  roman numbers . 
　in this simulation  the height h of the separating wall is taken to be 1 units and the sampling time is assumed to be 1 second. the input flow u t  is chosen as to force the system into all of its operating modes. the noisy versions of  and the noise free input flow u t  are taken as input to afmm. the resulting parameter estimates  together with the  true  parameter values  are depicted in figure 1. we notice the following: 
  the time instants at which the real jumps occur are reasonably well estimated. however  there is also a  faulty  jump detection. this is quite a common problem with this kind of sub-optimal segmentation strategy. false jump detections are due to the method being unable to separate noise from true mode switching. in order to handle this problem 
	soderman and stromberg 	1 


figure 1: resulting parameter estimates  a i j   bi  from afmm vs. true parameter values  a i j  b i  . top: left container half. bottom: right container half. the horizontal line segments at the top represent the segment labels produced by xafmm. 
of noise separation  afmm critically depends on a noise variance estimate. unfortunately this estimation problem is known to be hard in its own. 
  not only is the estimation error quite large  but also are the estimates varying inside the same mode of operation. how do we conclude that the b1 estimates in the second and fifth time segments actually correspond to the same operating mode  
1 	x a f m m : clustering the segmentation 
as a by-product from the filters used in afmm  we also get estimates of the variance of the parameter estimates. this enable us to formulate a statistical test to check whether estimates from two different segments are likely to correspond to the same operating mode  i.e. the same dynamical description. this test has been implemented in an extended version of afmm  xafmm  and could solve the second problem observed in the previous subsection. the output from xafmm consists of two parts: the lumped parameter estimates and corresponding segment labels. 
x a f m m applied to the example: the segment label output from xafmm is depicted as horizontal line segments at the top of figure 1. the labels generated have no other meaning than telling which parameter estimates have been lumped together by the statistical tests. hence  they do not necessarily correspond to the operating mode labels of the upper diagram in figure 1. however  without any further knowledge  we have to accept these labels as reflecting our current notion of the  operating mode . we also notice the following: 
  given the chosen strength of the statistical tests  xafmm did not manage to remove the  faulty  jump detection. hence  knowing nothing else about the physical system  we have to conclude the system has four different modes of operation. 
  since we have been able to label the lumped esti-mates  we may now take this as input to a statisti-

figure 1: the model tree generated from the xafmm produced segment labels. notice that the labels at the leaves refers to the segments detected by xafmm. 
cal classifier to form an immediate mapping from a measurement sample to the corresponding operating mode. 
1 	building model trees 
regression trees are binary tree structured classifiers where the internal nodes correspond to tests on some feature vector and the leaves are the class labels. in  breiman et al.  1  we find a statistically based method for inferring regression trees from measurements once they have been class labeled. this is obviously a suitable tool for finding the mapping from a measurement sample to the corresponding operating mode of the process. when using regression trees to describe this particular mapping  i.e. when the class labels correspond to operating modes  we call this construction a model tree. 
　using the estimated operating modes from xafmm  we notice that the state variables  in the example x1 and x1  should be taken as elements in the feature vector and the labels produced by the clustering procedure as  class labels . details about the implementation of xafmm and the related tree growing procedure  may be found in  gustafsson and stromberg  1 . 
tree building applied to the example: using the segment labels produced by xafmm as depicted in figure 1  we end up in the tree in figure 1. we have used simple threshold type of node questions  xi   r    but other questions could be used. we notice that it is difficult to interpret the obtained tree. the main reasons for this being the case  are: 
  we have an incompatible number of operating modes due to the  faulty  jump detection. since this jump has no relevance in the physical system  the tree builder will have a difficult task in trying to explain this jump in terms of the  real  state variables. 
  not even the real jump-times are perfectly esti-mated. this also seriously affects the possibility to find the relevant questions. 

1 the modeling language 
to master the problems observed above  we will take the approach to use qualitative knowledge. we will represent the qualitative knowledge in terms of an incomplete bond graph. a bond graph represents energy processes in a physical system. it has a small number of primitive energy processing elements: source  storage  dissipator and transformer. these elements are connected in a graph via energy bonds  drawn as half arrows  and two special junctions. for each bond there are two generalized power variables called effort and flow. their product is power and represents the energy flowing through that particular bond. the two junctions represent connections where one of the two power variables is common to all connected bonds. for example  parallel and serial connections in electrical circuits are connections where the power variables voltage and current respectively are common to the connected components. a common effort junction is represented by a  1  and a common flow by a  1 . 
　the time integrals of the power variables flow and effort are called displacement and momentum  respectively. these are usually referred to as energy variables. the functioning of each energy-processing element is expressed in terms of a constitutive relation between two variables. energy dissipators relate two power variables and storage elements relate one power and one energy variable. an electrical resistor is a dissipator and its constitutive relation known as ohm's law. a water tank is a fluid storage where the tank properties are reflected in a constitutive relation between pressure  effort  and amount of water  displacement  if water flow is defined as the abstract flow variable . defining constitutive relations this way  they always become static. 
1 	a bond graph representation of the example 
the bond graph for the tank is shown in figure 1. there are four junctions in the graph. the 1-junctions represent the pressures  or equivalently the water levels  in each half of the tank. the 1-junctions represent the water flow between the two halves. the left and right 1-
junctions are for the left and right halves of the tank  respectively. the 1-junction in between the 1-junctions represents an abstract water flow from left to right when the two water levels are strictly above the edge of the wall  i.e. the tank will behave as if the wall did not exist at all. the 1-junction to the left represents the physical flow appearing when the left water level reaches the edge of the wall while the right level is below  or possibly at  the edge. for a water level below the edge  the flow between the halves is always zero and the two halves are completely disconnected. 
　the energy processing elements c1  c1 represent the two separate halves of the tank. r1  r1 represent the outflow characteristics of the holes in the bottom of the two halves. sf represents the source generating the inflow to the tank system - from a black-box point of view  this is our exogenous input signal u t . the abstract source sf1 is introduced to model the physical flow from left to right half of the tank. the amount of flow gen-

figure 1: the bond graph model of the water tank system. 
erated by    is defined to be equal t o v i a a active bond  full arrow  originated at the left 1-junction. the remaining elements are used to control the mode switching of the system. the two modulated it-elements mr1 and 1 can be thought of as  valves  connecting the left and right halves by closing and opening appropriately.   is used to control the flow in order to make the levels equal when the water levels are strictly above the edge of the wall. mr1 is used to control the flow in order to make the left level h while the right level is below  or at  the edge. 
　to control the two modulated elements we use two signals and being discrete binary signals determining the flow resistance of the  valves . the signals take the values infinite  closed valve  or zero  open valve . when the water levels are strictly above the edge of the wall  a1 is zero  valve mr1 opened  and an is infinite  valve mr1 closed . in this case  a pressure difference p1 - p1 over the valve m r1 will always be neutralized via an appropriate flow  since m r1 is c l o s e d   w i l l  
identical to zero even if the pressure difference is varying. when the left level is at the edge and the right level is below  or at  the edge  mr1 is opened and mr1 closed. if the water pressure p1 differs from the fixed pressure given by the pressure source sc  we get a nonzero this is exactly the outflow from the left half necessary to keep the left level  h. therefore the same flow should enter the right half  which is taken care of by the flow source  when both the water levels are below the edge  both valves are closed. 
　obviously  the signals  are functions of the water levels in the following manner: 
		 1  
this will be referred to as the discrete control field of the bond graph. 
1 	the model tree representation 
the signal combinations define regions in the state space. 
in each of these regions the system is described by differ-
	soderman and sternberg 	1 


figure 1: the model tree with simplified bond graphs as region models. 
ent linear region models. the qualitative description of each region model can be inferred from the bond graph by setting up all the different combinations  a limited number  of signals and for each such combination  simplify the bond graph. in our example  this process results in three simplified bond graphs which  together with the control field  1   form another qualitative description. this alternative model structure is a model tree. in this particular case  the leaves are simplified bond graphs and the conditions at the internal nodes are the binary questions asked in the control field  1 . the working example is represented by the model tree in figure 1. 
1 incorporating qualitative information 
now we will look at some specific ways in which the qualitative information according to section 1  can be incorporated in order to master the problems. 
1 	i a f m m : interpreting the segmentation 
in order to incorporate any of the qualitative information given in terms of a correct but not necessarily complete bond graph  we need to interpret the results generated by xafmm in terms of this data structure. this however is a problem. take for instance the labels generated by the clustering routine of xafmm. even the total number of labels are incompatible with the number of leaves in figure 1. therefore  we must first introduce some means of connecting the operating mode labels of figure 1 with the labels produced by xafmm. 
　as outlined in section 1  for each increment in time  some of the badly behaving filters are reset. when doing this  we also need to re-initialize the filters' parameter as well as variance estimates. obviously this is an excellent opportunity to test hypothesis inspired by the information contained in the bond graph. this is exactly what is done in the interpretable version of xafmm  iafmm . 
　basically  what we do is to take the model tree generated from the bond graph. we then compare the simplified bond graphs at the leaves with the model structure according to  1 . this usually enable us to fix some of the parameters. typical fixed values are 1 and  an-

figure 1: resulting parameter estimates  aij bi   from iafmm vs. true parameter values  a i j ; b t  . top: left container half. bottom: right container half. the horizontal line segments at the top represent the estimated mode labels produced by iafmm. 
other common result of the bond graph reduction is that the model order can change. 
　having initialized a filter according to the fixed parameter values  we finally mark the specific filter in order to keep track of the outcome of our hypothesis test. obviously a suitable label is the operating mode labels of figure 1. 
i a f m m applied to the example: considering the model tree of figure 1  we may easily derive the following: 

　when initializing the estimates in afmm we substitute the     entries of the table with zeros. the only difference between a     entry and a  real  1  lies in the variance estimate initialization. if we believe in a value holding true  we set the corresponding variance estimate  i.e. the uncertainty  to some small number. the  - -entries appearing in the mode ill-row correspond to the model reduction; the two dimensional state vector collapses into a scalar  i.e. the tank behaves as if the separating wall did not exist. the results produced by iafmm are depicted in figure 1. we notice the following: 
  the estimated parameter values are now much closer to the  true  parameter values. in fact  most of the time they do coincide. 
  the estimated values are less varying within one and the same operating mode. more important however  we notice that the estimated number of modes now is correct - no faulty jump detections. the sensitivity of afmm on the noise variance estimate  has been relaxed. 
  the jump-time estimates are slightly improved. 
  the labels assigned to the segments now relate di-rectly to the mode labels of figure 1. 


figure 1: the model tree generated from the mode labels produced by iafmm. notice that the labels at the leaves now correspond to the mode labels of figure 1. 
1 	improving the model tree 
since the tree structure is already known  figure 1   we may now simplify the general tree building algorithm used in section 1. this simplified tree builder  referred to as a tree adjuster  take as input the a-priori given tree structure  and return as output the optimal node questions and leaf labels. 
tree adjusting applied to the example: entering the tree structure given in section 1  the tree adjuster produces the tree according to figure 1. we notice the following: 
  the labels at the leaves now relate directly to the leaves of figure 1. this follows from the special labeling of the filters in iafmm. 
  we may now immediately interpret the resulting node questions in terms of physical parameters. in particular  the thresholds obtained obviously correspond to the height of the separating wall. 
  we may also notice a difference between the two chosen thresholds  representing a  safety margin'' introduced by the measurement noise. in fact  this is exactly the kind of robustifying thresholds we would prefer  when using the tree in real applications  e.g. for guiding the mode switching of a controller . 
1 conclusion 
in this paper we have suggested a method to generate models for a class of non-linear physical systems. we have shown what kind of qualitative information that may be useful in order to improve on the results of existing si methods. we have also made explicit how this information may be included in a particular si method named afmm - a method for segmenting piecewise linear systems. 
　we have introduced the use of multi-domain bond graphs for structuring the qualitative information available. also  the resulting information obtained from measurements may be fed back to the bond graph to make it more complete. this more informative model is a good prerequisitive for further reasoning. we recognize the following two immediate possibilities: 
  extract the information needed to produce  for example qualitative constraint equations  kuipers 1 . this may then be used as input to qsim. 
  perform the reasoning directly in the bond graph. this approach has been discussed in  top and akkermans  1  top et ai  1 . 
