 
the phred  phr asal english diction  generator produces the natural language output of berkeley's unix consultant system  uc . the generator shares its knowledge base with the language analyzer phran  phrasal analyser . the parser and generator  together a component of uc's user interface  draw from a database of patternconcept pairs where the basic unit of the linguistic patterns is the phrase. both are designed to provide multilingual capabilities  to facilitate linguistic paraphrases  and to be adaptable to the individual user's vocabulary and knowledge. the generator affords extensibility  simplicity  and processing speed while performing the task of producing natural language utterances from conceptual representations using a large knowledge base. this paper describes the implementation of the phrasal generator and discusses the role of generation in a user-friendly natural language interface. 
1. some features of the system 
     the phred  phrasal english diction  generator is designed to produce natural language output from a conceptual knowledge structure. the generator uses a database of linguistic information shared with the language analyzer phran  phrasal analyser . while phred was originally conceived as an english generator  currently operative versions of both phran and phred are designed for use with multiple languages. 
     natural language generation is sometimes viewed as the process of planning utterances to achieve a goal  appelt  1 . a division in this multi-stage process can be made between the task domain and the linguistic domain  or between the system level and the interface level. phred operates at the interface level. user input to the unix consultant system  uc  is 1rst analyzed by phran  producing a conceptual knowledge structure which motivates the system's response. this response  in the form of a conceptual structure  is then converted into natural language output by phred: 
user: how do i delete a file  
uc: typing ' rm filename ' deletes the file filename from the current directory. 
user: corao se borra un archivo  
uc: para borrar el archhro de nombre filename del espaclo de trabajo  se escribe ' rm filename *  
user: how do i delete all the files from a directory  
uc: typing ' rm     will remove all files within the current directory from the current directory. 
typing ' rm -r dlrectoryname ' will cause all files and directories recursively inside of dlrectoryname to be deleted from dlrectoryname and removes the directory dlrectoryname from the working directory. 
t this research was sponsered ia part by tk  ofkt of naval research aider contract nooo1-so-c-1 aid tke national science foundation under grant ist-1.      the analyzer and generator form an interface module which maintains the linguistic database of the system. this module has a number of attractive features: 
1. dynamic capabilities 
     because phred and phran share a common database  any linguistic information added to the system may be used in both parsing and generation. new linguistic structures may be added  existing structures may be removed or amended to suit the  dialect  of the individual user  and one utterance may be explained in terms of another. this last feature is facilitated by the fact that phran  while parsing  will  touch  certain patterns in the database  and phred can be instructed either to use or to avoid the identical patterns. the interface module has a paraphrase mode in which phred takes its input directly from the analyzer and rephrases: 
#  john had to toll mary that a friend kicked the bucket. 
john had to inform mary that a friend died. 
#  john had to tell mary that the bucket was kicked by a friend. 
john had to inform mary that a friend kicked a bucket. 
     these examples come from parts of the database not used by the uc system. uc does not yet take full advantage of phred's paraphrase capability; however  it can have the generator rephrase an utterance if asked for clarification by the user. 
1. language compatibility 
     the interface may draw from databases for a number of languages. the analyzer has been used with english  spanish  and chinese databases  wilensky & morgan  1   and both analyzer and generator currently work from english and spanish databases. uc input and output may be in either english or spanish  and knowledge added dynamically to the system by a user may be added in any language known by the interface. 
1. phrasal analysis and generation 
     because linguistic knowledge in the system consists of phrasal patterns  proper handling of idioms and identification of structures similar in meaning is built into the knowledge structure. in the examples above  kicked the bucket  matches a verb pattern whose associated meaning is equivalent to that of  died ;  working directory  and  espacio de trabajo  are equivalent noun patterns. 

ft. the common database 
     the database shared by the phrasal analyzer  phran  and phrasal generator  phred  consists of pattern-concept pairs  where the pattern contains the linguistic structure of a phrase and the concept its internal representation. the use of the pc pair as a unit of linguistic knowledge distinguishes phred from some other language production mechanisms  see mcdonald  1  in which grammatical information and conceptual information are separated. associated with each pc pair is a list of properties used for indexing the pair in the database and for adding knowledge to the system  as well as information about forms of agreement among constituents. 
     patterns are lists of constituents  where each constituent in a pattern is generally described either as a pattern of speech  p-o-s  or as a member of a descriptive class  e.g. person  physical object . patterns may also be formed by conjunction and disjunction of other patterns and may contain specifications of constraints; for example   and  root delete   tense present   voice active   form infinitive    is a pattern which would generate the infinitive verb  to delete . for a detailed description of phran-phred patterns see  wilensky & arens  1 . 
     the concepts currently used in the database are adaptations of conceptual dependency representations  see schank  1  with numerous predicates  primitives  and other variations added. the concepts are not intended to represent an irreducible set of primitives or a restrictive syntax  but merely to provide a functional representation compatible with the uc knowledge base. 
a simple example of a pattern-concept pair is given below: 
   and  person   with case subjective   
 and  root remove  
 with person  matches 1   
 with number  matches 1    
 and  p-o-s noun-phrase   with case objective   
   from  container    object  opt-val 1       
  concept ' state-change  actor factor  
 state-name location  
 from  inside-of  object  object    
 to  not  inside-of  object  object     
　　　　  p-o-s 'sentence tense  value 1 tense  actor  value 1  i 
this pc pair contains knowledge about one form of the action  remove  which can be used by the interface with the unix consultant. the same pattern corresponds to both  john removed the eggs from the refrigerator  and  i removed the file foo from my directory.  the pattern has four constituents. in the first    and  person   with case subjective     the constraint   with case subjective   indicates that if the case of the subject can be determined  it must be nominative. this is a looser constraint than   case subjective    which would specify that the subject mutt have the nominative-case property. the constraints   with person  matches 1    and   with number  matches 1    in the next constituent specify that the verb  which must have the root  remove   agrees in person and number with the subject. 
ft. implementation of the generator 
     the process of generation in phred can be divided into three phases:  1  fetching   1  instantiation  and  1  interpretation. these three processes will be discussed in this section  with references to the  remove  pattern and to part* of the uc output from section 1. as the generation of the sample output requires complete processing of many patterns  only certain aspects of the examples can be discussed. 
	p.jacobs 	1 
1. fetching 
     while phran and phred use the same knowledge structures  the indexing mechanisms of the analyzer and generator are naturally different. in phran a pattern of speech is recognized and suggests a possible pc pair; in phred the same pair must be suggested by attributes of a concept or by properties of the conceptual structure. 
     phred's basic indexing mechanism uses multiple-key hashing  where primary and secondary keys are specified within the database. keys may be arbitrary collections of properties and attributes; thus the same indexing scheme used for the most complex patterns is used for simple words. in the case of the  remove  entry above  the pc pair is indexed according to a combination of the  state-change  and the attributes  location    inside-of  and  not inside-of . the indexing mechanism ignores variables  e.g.  tactor  . a simpler pattern  such as the word  the   may be indexed by the properties   po-s article   and   ref def    indicating a definite article. 
     for certain groups of patterns the choice of keys is essential to the speed of fetching. in spanish  there are numerous forms of each verb and one must be selected which agrees with its subject  sometimes with its object and indirect object as well. in other cases the choice of keys is non-essential. a default mechanism is provided where keys are not specified. 
     fetching can take up most of the time used by the generator: in phred  running in compiled franz lisp on a vax 1  most fetches take about 1 seconds of cpu time. as a typical sentence may require 1 fetches  most of the time used by the generator is in the fetching process. 
1. instantiation 
     the fetching mechanism returns a pc pair from a stream each time one is requested. thus indexing on a secondary key may be delayed until an attempt is made to instantiate the pc pair s  fetched on a primary key. 
     instantiation consists of adding appropriate constraints to a selected pattern and simultaneously verifying that the pattern is appropriate for the given concept. phred differs from generators which use a discrimination net as an indexing tool  see goldman  1  in that it combines semantic tests with the addition of constraints. this method is efficient  given that the fetching mechanism generally yields few patterns for instantiation. 
the  remove  pattern in its instantiated form might be: 
   and  person concept 'userl   with case subjective   
 and  root remove  
 tense past  
 with person  matches 1   
 with number  matches 1    
 and  p-o-s noun-phrase concept 'fllel   with case objective   
   from  container concept 'directory1   
 object  opt-val 1       
     the specification of the tokens to be represented by the individual constituents and the tense of the verb have been added to the pc pair. if these additions lead immediately to a contradiction - for example  if the token  userl  does not represent a person - the instantiation will fail. 
1 p. jacobs 
     the tense property in the second constituent has been inherited from the tense property of the entire pattern. a sentence in the past tense implies a sentence with verbs in the past tense. the process of inheritance of attributes from the overall pattern to the individual constituents may be complex: a property may be inherited by more than one constituent  as in the case of compound verb phrases  and there may be more complicated interactions between the attributes  as where a list of adjectives must be generated to describe an object. 
     each fetch may return patterns which produce the desired p-o-s directly  or rewrite rules  which correspond to transformations of other patterns. the remove pattern will produce a sentence directly  but must be rewritten to produce an infinitive phrase. generally  rewrites are tried during instantiation only after failure of the direct patterns; however  certain rewrites may be fetched immediately: if the concept indicates negation  a negating transformation will be applied to the pattern corresponding to the negated concept. 
1. interpretation 
　　　after a given pattern has been instantiated  the pattern can be converted into verbal output. the process of interpreting a given constituent may  1  succeed in producing a phrase as output   1  result in a recursive application of the fetch-instantiate-interpret sequence on the given constituent   or  1  fail because of the inability of the generator to produce a specified pattern of speech. the first case occurs when the constituent represents a word or list of words for output  such as  the big apple . the second occurs if the constituent contains a more complex pattern  for example    and  root remove   tense past   . the third case  where no output produces the desired pattern of speech subject to the constraints given by the uninterpreted pattern  is difficult  because the system must back up to attempt an alternate pattern without destroying too much of the work it has done. usually this results in backing up to the level where the failed pattern was fetched  getting another pattern from the stream  and attempting instantiation of the new pattern. most often this new pattern will be a rewrite rule  and most of the failed pattern will be used in the instantiation of the rewritten pattern. a simple case of this is where the generator fails to produce a pattern of speech for the subject of a sentence and instead generates a passive sentence. 
     the agreement of constituents within a pattern is assured during the interpretation phase. constraints such as   with person 
 matches 1    are converted into properties-e.g.   person third  . in english there are few structures where agreement passes from right to left-such as the number of a determiner which matches a succeeding noun- but in other languages there are many examples where agreement within a pattern is much more complex. in all cases phred can ensure proper agreement if some order of interpreting the constituents allows the correct application of constraints. in english this means that nouns within noun phrases are interpreted before their attached determiners; in more inflected languages this means that verbs must generally be produced last. 
     anaphora are specially handled during interpretation . in the case of anaphoric constituents the generator applies a set of heuristics which may  1  remove the constituent entirely if it is not necessary to the utterance   1  pronominaliie   or  1  regenerate the entire constituent. when used by vc  phred does not pronominaliie unless specifically instructed. 
1. requirements of a generator in a friendly interface 
     phred has been designed to meet the following requirements of a generator in a natural language interface: 
 1  speak the user's language- this refers not only to the distinction between english and spanish users  for example  but also to adaptability to the specific vocabulary of the user. a novice user will find expressions like  disk quota  and  read protection  difficult to fathom. such phrases in the database are marked as being more technical. 
 1  clarify and/or paraphrase on demand- where the user does not understand a particular phrase or construct  the system must be capable of providing an explanation. if the explanation can be supplied by a linguistic paraphrase  the generator provides it. 
 1  be compatible with the analyser- phred was designed to draw from a database of patterns used by phran. the importance of this compatibility extends beyond the simple efficiency of having the same database shared by both analyxer and generator: phred can make use of information added dynamically by phran to the database  and any new patterns constructed by the analyzer can be indexed and used by the generator. 
 1  be adaptable to the user's knowledge- the unix consultant's model of the user can provide phred with instructions which will guide word choice  proncminalization  and the degree of explicitness of the output. this is necessary to provide information comprehensible to the user and to avoid telling the user what he already knows. 
1. conclusion 
     phred represents a natural language generator rooted in a knowledge base of linguistic information shared with the phran analyzer. the database  consisting of pattern-concept pairs  is maintained dynamically by the analyzer and generator. phred is an effective  extensible  language-independent program  and combines with phran to provide a natural language interface adaptable to the individual user. 
