 
¡¡the graph theorist  gt  is a system which performs mathematical research in graph theory. this paper focuses upon gts ability to conjecture and prove mathematical theorems from the definitions in its input knowledge base. each class of graphs is defined in an algebraic notation with a semantic interpretation that is a stylized algorithm to generate the class correctly and completely. from a knowledge base of such concept definitions  gt is able to conjecture and prove such theorems as  the set of acyclic  connected graphs is precisely the set of trees  and  there is no odd-regular graph on an odd number of vertices.  conjecture and proof are driven both by examples  specific graphs  and by definitional form  algorithms . 
1. introduction 
¡¡the graph theorist  gt  is a knowledge-intensive  domainspecific learning system which uses algorithmic class descriptions to discover and prove relations among mathematical concepts  i.e.  theorems  in graph theory. although it primarily exemplifies theory-driven discovery  where search heuristics postulate and test the validity of conjectures  it also infers explanations for factual input about key graphs as a data-driven system would. 
¡¡mathematical discovery includes the creation of new mathematical concepts  the conjecture of relations among concepts and the proof or disproof of such conjectures. thus far  ai discovery in mathematics has focused attention primarily on the deductive proof of mathematical theorems using a predicate calculus representation. the notable exception has been lenat's am len1 . am generated mathematical objects and observed statistical regularities in their classification. when the experimental evidence warranted it  am would conjecture relations among classes. discovery in am was driven not only by empirical evidence but also by 1 heuristic rules which originated the generation of examples and new concepts  and evaluated the results. later it was generally recognized len1 rit  that the path of discovery was pronouncedly affected by the programming language itself. 
¡¡in this sense-  am may be said to model some intuition on the part of the research mathematician as to a representation language  lisp  well-suited for exploration in a particular direction  number theory . am's results indicate that  if knowledge about a domain can be semantically encoded into the class definition  then it can be harnessed to drive mathematical discovery. gt encodes the semantics of graph theory into class definitions in a more transparent and flexible fashion  one which supports both inductive and deductive reasoning. these semantics subsequently motivate both conjecture and proof. 
1. concept description in gt 
¡¡the material in this section describes the application of a theoretical formulation detailed rigorously in  eps1  and summarized in  eps1 . the treatment here is informal and 
1 	knowledge acquisition 
describes only selected  implemented segments of the theory. for example  gt currently only supports undirected  unlabelled graphs  but coding provisions have been made for directed and labelled graphs  and the theoretical framework supports them. let v be an arbitrary  finite set of elements  vertices  and let e be any subset  edges  of the cartesian product v x v. then the ordered pair g =  v e  is said to be a graph. let u be the universe of all graphs. then any subset p of u is said to designate a graph property p and  for g in p  g is said to have property p. any algorithmic definition of the graph property p must specify precisely the set p. in particular  if an algorithm claims to generate p  that algorithm must be both correct  i.e.  every generated graph must be in p  and complete  i.e.  for each graph g in p there must be a finite sequence of steps executed by the algorithm with final output g . 
¡¡in gt  a concept is a frame representing a graph property and knowledge associated with it  as in  michen . a slightlyedited example of an input gt frame for the concept acyclic appears on the left in figure 1. the slots of the frame include a list of examples  knowledge about hierarchical relations with other concepts  historical information on the ways the concept has been manipulated  and a description of the origin of the property.  entries of  nil  for relations are statements of partial knowledge  to be read as  none discovered yet.   the frame also includes a definition of the graph property in a specific  three-part formulation. 
¡¡in gt  a definition of a graph property is an ordered triple  f s o . s is the seed set  a set of one or more minimal graphs  seeds   each of which has the property in question.  typically the seed set is finite and gt lists its elements.  the seed set in the example of figure 1 for acyclic contains only kl   the complete loop-free graph on one vertex. the operator f in the definition describes how any graph with the given property may be transformed to construct another graph with the same property. an operator in gt is built from a set of four primitive operators: add the vertex x  ax   add the edge between x and y  axy   delete the vertex x  dx   and delete the edge between x and y 
 dxy . these primitives may be concatenated into terms  such as  aygag   to denote sequential operation from right to left. terms may be summed  as in  ax + aygag   to represent alternative actions. thus the operator ax + aygag  for acyclic is read  either add a vertex x or else add a vertex z and then an edge from y to z.  the selector o in the definition describes the restrictions for binding the variables appearing in the operator f to the vertices and edges in a graph. in gt  there are currently four valid kinds of selector descriptions for a vertex: whether or not it is in the graph  its distinctness from another specific vertex symbol  its degree  number of neighbors  and whether or not its degree is the maximum among the degrees of all the vertices in the graph. the current valid edge selector descriptions in gt are of two kinds: whether or not the edge is in the graph  and whether its endpoints are distinct. 
selector descriptions may be empty  i.e.  need not constrain binding at all. in the example of figure 1  the selector for acyclic is read  where y is in the vertex set  and x and z are not in the vertex set.  
¡¡the semantic interpretation of such a three-part definition for a graph property p is a single  uniform algorithm called a p-generator. a p-generator capitalizes on the underlying commonality of its class  the view of the set p as one or more prototypes  seeds  which can be methodically transformed  under f and o  to produce exactly those graphs in the class. the p-generator may be thought of as an automaton which is started by the input of any graph in seed set s. acyclic  for example  would require k l. the pgenerator then iterates an undetermined number of times. on each iteration the selector o chooses vertices and/or edges with respect to the current graph g  and then the operator modifies g  using those choices  to produce a new g. acyclic  on each iteration  either adds a new vertex x to the graph  or adds a new vertex z and an edge from an old vertex y to z. 
thus the algorithm for generating the class p of graphs is 

halt 
under all possible initial choices from s and all possible iterations of f subject to a  the output of this algorithm is precisely p  that is  if the superscript i denotes  iterate i times   
i = o 
the graphs in figure 1 illustrate several possible iterations of the definition of acyclic; each pictured graph is output by the algorithm and is acyclic. the definition generates the infinite class of acyclic graphs; it will never halt because bindings for the variables in o can be found on each iteration. 
¡¡the content of the following three general texts is taken as graph theory.  ore   a classical development in elegant 
slot 
property-name: 
number-of -seeds: 
seed-set: 
function: 
sigma: 
origin: 
examples: 
extremal-cases: 
delta-pairs: 
subsumes: 
not-shown-to-subsume: 
subsumed-by: 
not-shown-subsumed-by: 
merger-created-with: 
merger-explored-with: 
is-equivalent-to: 
not-shown-equivalent-to: initial formulation 
acyclic 
1  k1  y e v  x z € v 
input 
{k1} 
 *!  
  1  1   nil nil nil nil nil nil nil nil mathematical fashion;  har   a broad overview of topics presented as definitions and theorems; and  bon   an algorithmic approach. what evidence is there that p-generators exist for every p in u  or at least for every interesting p in graph theory  at this writing  more than 1 properties of varying difficulty have been selected from the three benchmark texts and described correctly and completely as pgenerators eps1 . the use of p-generators as property definitions entails several kinds of non-determinism. any graph in the seed set is an acceptable input; any binding satisfying a is valid; any term in f suffices for an iteration. in addition  many different sequences of iterations will construct isomorphic graphs. this ostensible indefiniteness and redundancy is tolerated because the property definitions preserve detail in a concise and flexible format. 

gt iterations of acyclic 
figure 1 
1. relations between concepts in gt 
¡¡inductive inference from examples does not preserve truth  only falsity mic1 . although research mathematicians devote much time to example generation  and infer conjectures about relations among ideas based on these examples  inductive inference is only a tool. rarely is a conjecture considered a result worthy of publication  and then only when extensive attempts at proof and disproof have failed. mathematicians prefer to explore in the context of certainty; for them a conjecture should be proved or disproved relatively soon after it arises. gt  therefore  constructs both conjectures and proofs. 
¡¡graph theory  as it appears in the three benchmark texts cited above  is primarily about graph properties and the relations among them. conjectures and theorems in graph theory frequently take one of the following forms: 

after execution 
acyclic 
1 
y e v  x z € v 
input 
{acyclic-1  acyclic-1  k1} 
 1  i 1   
 acyclic-merged-with-connected chain tree  
 connected equiv-connected  
 is-a-graph  
 acyclic-merged-with-connected connected trei equiv-connected chain  
 connected   chain tree  nil 
 chain tree connected equiv-connected 
is-a-graph  

gt representation of acyclic 
figure 1 
	epstein 	1 

  type 1: if a graph has property p  then it has property q. 
  type 1: a graph has property p if and only if it has property q. 
  type 1: if a graph has property p and property q  then it has property r. 
  type 1: it is not possible for a graph to have both property p and property q. 
¡¡gt has two fundamental procedures for manipulating graph properties to prove such theorems. the first procedure tests for subsumption. property p for class p subsumes property q for class q if and only if q is a subset of p  i.e.  every graph with property q also has property p  so that q is a special case of p. theorem type 1 is a statement that q subsumes p. theorem type 1 is a statement that p and q are equivalent  i.e.  that p subsumes q and q subsumes p. the second procedure constructs mergers. the merger of a property p for class p with a property q for class q results in a new property representing pnq  the set of graphs with both properties. theorem type 1 is a statement that property r subsumes the merger of p and q. theorem type 1 is a statement that the merger of p and q is empty  i.e.  that no graph can have both properties simultaneously. 
1 proof of subsumption 
¡¡at this writing  gt has only one method of proving subsumption. given property p1 =  f1 s1 a1   property p1  f1 s1 a1   and a conjecture that p1 subsumes p1  gt attempts to show that: 
  f1 is subsumed by f1 i.e.  f1 is a special case of f1. 
  every graph in s1 has property p1. 
  a1 is subsumed by ol  i.e.  a1 is more restrictive than 
 extended definitions for operator and selector subsumption appear in  eps1 .  because there are usually only a few known seeds  gt checks the list of examples for p1 against s1. if any graph g in s1 is not known to have pl  gt generates a limited number of new examples of p1 and searches for g there. because seed graphs are extremal cases  and because a natural metric exists on most gt definitions  the search is readily controlled and usually successful.  alternative techniques exist for infinite seed sets and certain other situations.  matching for the subsumption testing of the operators and selectors is done by a recursive backtracking algorithm which generates a restricted set of candidates. 
¡¡the following example illustrates the subsumption procedure. for 
     acyclic -  ax + ayzaz  k1    x.z € v  y € v   and 
         tree =  a pqaq {k1}   p € v  q € v   and the conjecture  acyclic subsumes tree   gt must show that kl the seed for tree  is an acyclic graph and also that  under some matching  the acyclic operator  covers  the tree operator while satisfying the tree selection constraints. first  k1 is on the list of acyclic graphs because it is the seed for acyclic. second  the matcher notes that every term in the tree operator apqaq  there is only one in this example  is covered by some term  namely ayzaz  in the acyclic operator. finally  the matcher observes that under the matching of p with y and q with z  the selector constraints  that p is in v and q is not  are enforced. thus gt proves that acyclic subsumes tree or  more formally   every tree is an acyclic graph.  
1 proofs involving mergers 
¡¡gt currently has four algorithms for merger. given property p1 =  f1 s1 o1  and property p1 =  f1 s1 a1   gt attempts to construct the merger p -  f s o  of p1 and p1. the first three algorithms are fairly straightforward: 
  if p1 subsumes p1  the merger is simply p1. 
  when f1 subsumes f1 and every seed in s1 has property p1  the merger is  f1 s1 o   where a is a1 and o1  eliminating any references to variables not in f1. 
  when f1 subsumes f1  o1 subsumes a1  and s is nonempty  the merger is  f1 s a1   where 
s - {g | g e s1 n p1  u {g | g € s1 n p1 . 
   the fourth algorithm addresses the more interesting cases which do not fit these categories. here gt examines how the number of vertices and the number of edges change as the p-generator iterates. gt uses this information in heuristic attempts to create a hybrid generator which satisfies both definitions.  a more detailed description of these merger techniques  with examples  appears in  eps .  
¡¡some of the most interesting of gt's proofs are merger failures. consider  for example  gt's discovery that a graph which is odd-regular  every vertex of degree d  and d is odd  cannot have an odd number of vertices. when no common seed is evident  gt generates some examples to expand its list of graphs with an odd number of vertices  seeking one which is odd-regular. when this effort fails  gt considers the possibility that there is no common seed and examines the changes to m and n wrought  by the operators. gt recognizes that odd-number-of-vertices begins with one vertex and adds two vertices at a time  so that n is always odd  but that odd-regular begins with an even number of vertices  the seed is k1  and adds an even number of vertices at a time  so that n is always even. this disparity is the reason gt gives in its proof: there can never be a seed for the merger  and thus the property has no example  i.e.  is impossible. 
1. conjecture 
¡¡a mathematician presented with non-empty classes p and q from a universe u is trained to explore potential relations between the classes by examining whether or not each of pnq  p - q and q - p is empty. gt models this strategy with conjectures about subsumption and merger. the standard mathematical questions  and their gt equivalents are 
  is p a subset of q  gt explores this by a conjecture that q subsumes p. 
  is p a superset of q  gt explores this by a conjecture that p subsumes q. 
  is p equal  equivalent  to q  gt explores this by two conjectures  that p subsumes q and that q subsumes p. 
  are p and q disjoint  mutually exclusive   gt explores this by a suggestion to merge p and q. 
thus the theorems that gt conjectures are statements about set-theoretic relations between classes of graphs. given the four theorem types in section 1 and a knowledge base of k properties  there are potentially 1k k+l  projects  proposals for exploration  on the first pass  i.e.  before newly-created properties participate in project formulation. how does gt limit search through such a space  the human mathematician has two primary sources of evidence on which to base project formulation: examples and definitions. gt is capable of reasoning both from p-generator definitions and from specific graphs  either seeds or generated examples. 
¡¡subset/superset conjectures are based upon both seeds and definitions. for any pair of properties p and q  gt seeks: 
  similarity in the seed sets for p and q  in decreasing order of significance: equal sets  one a subset of the other  a non-null intersection  
  seeds of property p which are known to have the property q 
which primitives are employed and in what groupings  
1 	knowledge acquisition   similarity between the operators for p and q  i.e.  the strong focus on seeds is justified both by their role as prototypes and by efficiency; seeds tend to be small and few in number. 
¡¡before gts heuristics explore the third mathematical question  the equivalence of p and q  they require that the two associated subsumptions have been either proved or conjectured. alternative definitions  characterizations  of classes are common in mathematics because they support conjecture and  therefore  research. gt demonstrates such use of alternative definitions. consider  for example  the class of graphs known as chains.  a chain is a connected graph in which two nodes have degree one and all others have degree two.  gt has two different definitions of chain. based on the operators  one suggests that a chain may be a cycle  and the other suggests that a chain may be a tree. gt formulates and investigates both conjectures  and discovers that the first is incorrect and the second correct. 
¡¡conjectures about disjointness are really conjectures that a merger will fail. thus a conjecture in gt about the disjointness of p and q is expressed as a plan to merge p and q. if the seed sets for p and q are disjoint  the possibility of the disjointness of p and q will be conjectured in the form of a plan to attempt the merger of p and q. 
1. summary of results and future work 
¡¡according to michalski's characterization of learning systems mic1   gt learns both by observation  of its input examples and definitions  and by discovery  upon construction of new examples and properties . gt inductively infers conjectures from examples and definitions  and also proves deductively from the same definitions. figure 1 displays the acyclic frame both before and after one of gts runs. no specific tasks were input  only the general directive to explore the knowledge base. gt formulated its own conjectures and then attempted to construct proofs for them based on the structure of the definitions. the modifications to the representation for acyclic constitute learning as defined in  mic1 . clearly gt learns how acyclic relates to other concepts and constructs and stores additional examples of acyclic graphs. gt learns about graph theory by conjecturing and exploring simple relations among graph properties. 
¡¡gt is able to conjecture theorems in graph theory. conjecture is driven by extremal examples and definitions. example-driven discovery is based upon prototypical graphs 
 seeds  which are extremal cases of individual properties and therefore likely to be rich in associations. definition-driven discovery focuses upon the transformations which change one graph with a property into another graph with the same property. the requirement that a definition be complete effectively limits such transformations to minimal changes.  for example  a connected graph may be transformed by adding a new vertex with one edge to an old vertex. requiring that the new vertex be connected to more than one old vertex would create a different  more restricted  set of graphs.  the minimality of these changes and the limited vocabulary of operator primitives makes relations between the transformations in the definitions more readily apparent. 
¡¡gt is able to prove theorems in graph theory which it has conjectured. proofs rely heavily on a procedure to test for subsumption and a procedure for merger to represent graphs with more than one property. running on a symbolics 1 in symbolics common lisp  gt successfully conjectures and proves  among other theorems  the following: 
  every tree is acyclic. 
  every tree is connected. 
  the set of acyclic  connected graphs is precisely the set of trees. 
  there are no odd-regular graphs on an odd number of vertices. 
¡¡although gt is described as domain-specific  it offers domain-independent lessons as well. the richness of the semantic network gt constructs is due to extensive exploration. thus  rather than a burden  exhaustive search is one of gts strengths. in the meta-dendral tradition  gt can afford exhaustive search because its representation is highly-controlled. the design of the language for graph property definitions engineers gt for success  because it capitalizes on the inherent similarities within object classes and captures the commonalities underlying class definitions. 
¡¡plans for gts future development are based upon the power and flexibility of the p-generator representation. within the discovery framework described here  plans exist to extend the p-generator language for the representation of directed graphs and  eventually for labelled graphs. these extensions will also provide a testbed for the study of performance under representational shifts. work is under way to use additional example-based reasoning  particularly counterexamples  to evaluate the agenda and guide search. thus discovery will derive additional data-driven support  while maintaining its theory-driven component. gts knowledge base will be expanded with more concepts gleaned from the benchmark texts. mathematicians studying interesting sets of graph properties are invited to submit them to gt. the shell of gt is a domain-independent research tool for recursive property description. applications of this shell to mathematical domains other than graph theory are currently under study. 
acknowledgements: the author thanks n.s. sridharan and 
virginia teller for their assistance and support in this research and its presentation. 
