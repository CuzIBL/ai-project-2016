
many inductive logic programming systems have operators reorganizing the program so far inferred  such as the intra-construction operator of cigol. at the same time  there is a similar reorganizing operator  called the  folding rule   developed in program transformation. we argue that there are advantages in using an extended folding rule as a reorganizing operator for inductive-inference systems. such an extended folding rule allows an inductive-inference system not only to recognize already-learned concepts  but also to increase the efficiently of execution of inferred programs.
1 introduction
at first glance  it might seem that inductive logic programming  ilp  and logic program transformation  lpt  have opposite objectives. while ilp is interested in generalizing from examples  lpt is careful to preserve correctness. nevertheless  there are ilp operators  like the intra-construction operator of cigol  that do not generalize  and instead reorganize the program so far inferred. this suggests looking at logic program transformation rules to obtain better nongeneralizing operators for ilp.
　one lpt rule  called  folding    pettorossi and proietti  1  is reminiscent of intra-construction  with some important differences. for example whereas intra-construction produces the definition of a new predicate  i.e.  concept    folding receives as input such a definition  so that there is a separate  dedicated rule for creating a definition. the reason there is such a separate rule in lpt is that the derivation of efficiently executable programs is closely related to being able to fold using an already-existing definition.
　researchers have developed several reorganizingoperators for ilp. such operators can be found  for instance in the systems devised by muggleton  banerji  ling  and rouveiroland puget. we have selected muggleton's intra-construction as a representativeof these operators for performinga comparison with folding. the main ideas of our comparison  however  should carry over to other similar operators.
　throughout  and denote atoms  and and denote tuples of atoms  we will assume definite logic programs . also  msg denotes the most specific generalization of expressions and   and     denotes equality up to variable renaming.
　when used to fold two clauses  the folding rule infers f from d   e   d   and e :
d d
e e

f
where . in addition  there are some syntactic restrictions for soundness  for which we refer the reader to  pettorossi and proietti  1 . an application of folding replaces e and e by f .
　observe that this rule has the limitation of requiring both clauses to be folded e and e   to have the same head and the same part of the body which is not an instance of the bodies of the definition d and d .
　on the other hand  folding has the advantage of allowing the clauses d and d to be drawn from a previous program  pettorossi et al.  1 .
　to be able to perform a comparison with intraconstruction  we will assume that intra-construction consists of two parts: first the  invention  of a predicate  and then the clause-reorganizationproper. the second part would then be:
d d
e e

f
where
msg
an application of the second part of intra-construction also replaces e and e by f . compared with folding  not only must the definition clauses be unit clauses  but their argument places must be terms that undo the generalization when resolving f with d and d . if we are introducing a new definition  such constraints might not be relevant. if  however  we wish to recognize an already-inferredconcept or we are interested in increasing the efficiency of execution of our inferred program  it might be important to be able to relax such limitations.
1 a common extension of folding and intra-construction
as an illustration showing the need for increasing the efficiency of an inferred program  consider the string-matching problem. this problem consists in finding all occurrences  or only one occurrence  if any  of a string called the pattern within another string called the text. suppose that our pattern is the string . if we give the following two examples  both of which are a text having an occurrence of this pattern:
 1 
we can apply absorption  deriving:
 1 
a third example:
allows us to apply absorption again  inferring:
 1 
clauses  1    1   and  1  can be regarded as representing a finite-state automaton accepting the language . however  these clauses are a nondeterministic program  requiring a quadratic time in the worst case to find an occurrence of the pattern. note that this program cannot be converted to a deterministic version with intra-construction. a reason is that we would need to be able to apply intraconstruction without inventing a new predicate at every application.  such already-existing predicates represent edges going backwards in the corresponding automaton.  allowing the use of already-existing definitions is accompanied by a possible violation of the conditions for intra-construction  i.e. the 's may not have the required form .
　this limitation suggests using the ordinary folding  pettorossi and proietti  1  rule as part of the operator repertoire of an ilp system. in fact   pettorossi et al.  1  show how to determinize a program similar to the one we just inferred with absorption  given as specification by the user   where the folding rule plays a central role.
　the ordinary folding rule  pettorossi and proietti  1   however  is not adequate for inductive logic programming: we observed that this rule requires the set of atoms that do not match the bodies of the definition  i.e. and   be the same in each clause to be folded  i.e. e and e  .
　now we give another illustration. suppose an inductiveinference system has inferred the following description of an arch  where the examplearch beam is not given until later:
arch beam brick or block column	 1 
column
	column	brick or block	column
if we now add the example:
	arch	beam	 1 
both folding and intra-construction are unable to derive the desired concept from  1  and  1 :
	arch	beam	column	 1 
being able to derive the concise version of arch  1  might be important if we have already the same concept under a different name:
	gateway	beam	column
　we have recently extended the ordinary folding rule so as to overcomethese limitations of folding  rosenblueth  1 . our extension can be viewed as a common generalization of ordinary folding and intra-construction:
d	d e	e

	f	f

f
where msg msg
here  only acts on the variables occurring in   and only acts on the variables occurring in and not occurring in  i.e. the head-only variables in d  . in addition  we preserve the syntactic conditions on developedfor ordinary  multiple-clause  folding  pettorossi and proietti  1 .
　the main point of our folding rule is the computation of the substitutions in such a way that soundness is preserved. we distinguish two kinds of head-only variable instantiation:  a  coverage  taking a function symbol or variable from the substitutions   where
　msg      and  b  matching  taking the function symbol from the corresponding position in the clause of the other single-clause folding.
　the contributions of this poster over  rosenblueth  1  are  1  the comparison of folding with intra-construction and  1  the development of inductively inferred example programs. we are currently investigating the possibility of embedding our folding rule in cigol.
