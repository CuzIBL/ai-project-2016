state space models of remote manipulation tasks* 
daniel e. whitney 
assistant professor  department of mechanical engineering 
massachusetts i n s t i t u t e of technology 
cambridge  massachusetts 

summary 
       a s t a t e v a r i a b l e f o r m u l a t i o n of the remote manipulation problem is presented  applicable to human supervised or autonomous computer-manipulat o r s . 	a d i s c r e t e s t a t e v e c t o r   containing p o s i t i o n v a r i a b l e s f o r the manipulator and r e l e v a n t o b j e c t s   spans a quantized s t a t e space comprising many s t a t i c c o n f i g u r a t i o n s of objects and hand. a manipulation task is a desired new s t a t e . 	state t r a n s i t i o n s are assigned costs and are accomp l i s h e d by commands: 	hand motions plus grasp  r e lease  push  t w i s t   e t c . 	in c o n t r o l theory terms the problem is to f i n d the cheapest c o n t r o l h i s tory   i f any  	from present to desired s t a t e . 	in theorem proving terms it is to combine predicates and axioms to prove  or disprove  	the p r o p o s i t i o n  the task. 	. 	. i s p o s s i b l e .   	each corresponds to f i n d i n g the shortest path to the desired s t a t e . a method s i m i l a r to dynamic programming is used to determine the optimal h i s t o r y . 
　　　the system is capable of obstacle avoidance  grasp rendezvous  i n c o r p o r a t i o n of new sensor d a t a   remembering r e s u l t s of previous tasks  and so on. 
keywords: 
remote manipulation 
control theory 
problem solving 
theorem proving 
i n t r o d u c t i o n and problem statement 
　　　remote manipulation involves a human operat o r and a machine together performing a task 
which could be performed more e a s i l y and e f f i c i e n t l y by the man alone  were the task or i t s environment not too l a r g e   s m a l l   d i s t a n t   ponderous  d e l i c a t e   obscure  dangerous or some combina t i o n of these. manipulators are used in q u i t e complex hot lab experiments  1 f o r underwater r e t r i e v a l   f o r complete operation and maintenance o f l a r g e r a d i o a c t i v e research i n s t a l l a t i o n s f o r extended periods of t i m e   1 and in robot r e s e a r c h   1 to name a few examples. 
       to overcome the handicaps of time  scale or distance b a r r i e r s   two l i n e s of research have developed which i n v o l v e combining a manipulator and a computer. one is the human supervised remote computer-manipulator  1 depicted i n figure 1 . here  a human operator is aided by the computers in planning and executing the task. the other approach is the autonomous r o b o t   which is i n t e n d -
*work supported by nasa grant nsg 1 
ed to maneuver and manipulate unaided in a d i s tant e n v i r o n m e n t . 1 * 1 
　　　major problems in the design of human supervised or autonomous computer-manipulators are 
1  model and r e a l world of hands  objects and obstacles. 
1  define the notion of manipulation task. 
1  develop methods which generate plans of manipulative a c t i o n which are relevant to the task environment  as modelled in 1   and which are capable of achieving the stated goal  as expressed in 1     . 
　　　to solve these problems  we s h a l l consider the manipulator's hand and the task s i t e as a system to be c o n t r o l l e d by an operator or other i n t e l l i g e n c e . this approach d i f f e r s from previous 
w o r k 1   * 1 in which only the hand is included in the system model. a s t a t e vector is d e f i n e d   containing not only v a r i a b l e s which describe the 
manipulative device  but also v i t a l parameters of task s i t e   possible i n c l u d i n g locations o f r e l e -
vant objects and obstacles. this v e c t o r   s u i t a b l y quantized  spans a d i s c r e t e s t a t e space whichcontains many d i f f e r e n t s t a t i c configurations of the manipulator and the objects to be manipulated. a manipulation task is then defined as a new s t a t e 
which the  operator   human or computer  wishes the manipulator-objects-obstacles system to occupy. 
state t r a n s i t i o n s are accomplished by commands: quantized basic motions of the m a n i p u l a t o r ' s jaws plus grasp  r e l e a s e   push  t w i s t   and so on. 
       one may i n t e r p r e t the r e s u l t i n g problem in modern control theory terms as f o l l o w s : 	given that each s t a t e t r a n s i t i o n costs a known amount  f i n d the cheapest   s h o r t e s t   path from the p r e sent s t a t e to the desired s t a t e . 	this path r e presents the optimal c o n t r o l p o l i c y for accomp l i s h i n g the given task. 
-1-　　　a l t e r n a t i v e l y   one may view the s t a t e space in terms of problem s o l v i n g or theorem p r o v i n g : each s t a t e t r a n s i t i o n represents an instance of a predicate or an axiom such as   i f the jaws move one inch to the r i g h t   then the new state is r e l a t e d to the o l d s t a t e by. . .     or   i f the jaws are grasping object a and the jaws move one inch to the r i g h t   then object a moves the same d i s tance and the new s t a t e is r e l a t e d to the o l d s t a t e by. .    each instance is s p e c i f i e d by a r guments i n c l u d i n g the current s t a t e   the name of a relevant o b j e c t   and so on. since the problem is purely geometric  the r e s u l t of applying any axiom or predicate is unambiguously r e l a t e d to the g o a l . the r e s u l t i n g path may then be thought of as the s o l u t i o n to the problem  or the proof of the theorem   can the s p e c i f i e d task be accom-
pushed   
tasks and commands 
　　　at the outset ve should distinguish two types of tasks  those which can be planned ahead and those which cannot  an excellent example of the latter is the task  find the pencil.  execution cannot be planned open loop  along the lines of: move jaws to location x  pick up pencil. rather  execution consists of continual interaction between the manipulator-computer and i t s environ-
ment* the type of plan needed closes a loop through the manipulator's sensors  and has many of the features of a numerical algorithm rich in   i f   statements. such problems have been studied by ernst1 and barber1. larson and keckler1 have used dynamic programming to find search and motion strategies for a robot in an unexplored environ-
ment* 
　　　aside from searches and other tasks whose history and outcome are almost unknown ♀ p r i o r i   most manipulation tasks can be planned out in advance* the likelihood of the plan's success depends greatly on the accuracy of a p r i o r i information concerning location of named places and objects  and also on plain luck. less than certain success is not  however  any reason for not planning. it is the a b i l i t y to formulate and attempt execution of plans that makes an automatic or semi-automatic manipulator different from and superior to a manually controlled manipulator. furthermore  lack of certainty in the a p r i o r i information can be compensated for by execution routines which combine obedience to the plan with minor-range searches. greater sophistication in the execution routines w i l l allow more uncertainty in the ♀ p r i o r i information without degrading the certainty of overall task completion.. 
　　　of a l l tasks which can be planned out in advance  we shall consider what for ordinary manipulation constitute the great bulk  namely those in which the positions or orientations of objects and effectors  jaws  tools  etc*  are changed. thus ve specifically exclude such activities as bouncing a b a l l or balancing a stick on end. by ignoring velocities and accelerations  we may concentrate on the geometric constraints fundamental to manipulation: obstacle avoidance  rendezvous of a jaw-borne object and i t s destination for pushing  releasing  pouring  inserting  and so on.  granted a jaw-borne object has a velocity: nevertheless what is important about carrying is that jaws and object maintain a fixed geometric relation to each other throughout.  then one may state the planning problem as that of finding a sequence of intermediate configurations for the task site to occupy on the way  so to speak  from the i n i t i a l configuration to the desired one. 
　　　to enable the computer to solve such problems  we must equip it with a model of manipulation tasks so that it can determine what configurations may follow from a given configuration  or equivalently what changes can be made to a 
　　　given configuration. this requires a way of expressing geometric constraints or equlvalently manipulative predicates and how they are altered by changes in the task site. more generally  we must recognize that some configurations are  near neighbors  while others are not  but rather are separated by one or more intervening configurations  some of which are near neighbors. near 
nelghborllne1 of two configurations may be defined as a  usually bilateral  attribute implying that one single simple motion of the manipulator jaws  probably of limited extent  w i l l carry the task site from one configuration to the other. working with a small  well chosen set of such subnotions  we can plan a wide variety of tasks. to be precise  call the submotlons atomic commands. for example: 
move jaws l e f t one inch 
	move jaws right one inch 	  . 
open jaws 
close jaws 
in what follows we shall describe a method by which a task site may be modelled  the  operator  may request a task  and the computer can devise a sequence of atomic commands which  to the degree of precision of the task model  can accomplish the task. 
the state space model 
　　　the problem we have posed is to find a sequence of f i n i t e elements which has a particular property. we may dispense with enumeration of the possibilities  since there are far too many  and far too few of them are worth considering. 
　　　let x be a vector containing the position of the manipulator jaws  the positions of relevant objects and any other variables of interest  
such as object orientations. then the manipulator-task system is governed by the equation 
		 1  
where tj k  is a vector of admissible controls such as equation  1   and a is a state dependent 
matrix which expresses the geometric task con-
-1-straints mentioned in the previous section. these constraints are more easily visualized on a f i n i t e graph-1 in which each node represents a state x. and each branch leading out to another state i n dicates an allowed command at state x . states connected by a single branch are thus near neighbors. the t o t a l i t y of nodes  some connected by branches  constitutes the state space. its nodes represent a l l the configurations which the task site can assume as a result of the execution of arbitrary strings of atomic commands. alternatively  the state space represents the limited set of instances of the manipulative predicates being considered  the instances differing in the arguments associated with each  and the set bounded by the limits on each state variable. we may then say that paths through the space represent strings of atomic commands  controls or proof steps  which make coherent  though not necessarily purposeful or efficient  changes in the task s i t e . 
for example  consider the task site in figure 1. the jaws may move from point to point along the line  open and close  but may not move the block.  this last capability is added below.  given the atomic command set  1   the state space corresponding to figure 1 is shown in figure 1. the coordinates on the axes are xt  jaw position  and h  jaw status. xj and h are the state variables. 
the configuration of figure 1  jaws in location 1  closed  is represented by the flag at state  1  in figure 1. the vertical lines indicate that the jaws may open or close at any x  while the horizontal lines indicate allowed jaw move-
ment. movement directly into  1  from  1  or  1  is forbidden since this would involve collision between jaws and object. thus  1  and  1  are not neighbors in the sense defined above. 
　　　if we wish the jaws to move to location x - 1   jaws closed  we ask the computer to find a satisfactory path from state  1  to state  1 .*  naturally we want the computer to derive by itself the fact that the jaws must straddle the object on the way.  such a path  if it exists  can be translated immediately into a string of atomic commands suitable for accomplishing the task  since the path tells the sequence of neighboring intermediate configurations through which the task site should pass on the way to the desired configuration. there are countless possible paths  
most of which go nowhere purposive. but a shortest path cannot go nowhere and in particular cannot loop. so let us find shortest paths. 
　　　many algorithms are available for finding shortest paths in networks  among them dynamic programming 1 ford's algorithm 1 and the hartnilsson-raphael algoritlun. ** of more interest to us is the general interpretation we can give to  shortest : a path may be short in time  fuel  risk  lack of information  or some  normalized  combination of these  for example. a state space 
may well be costly in fuel a l l over  but costly in risk only in certain areas. sometimes a given command  like carrying  is costly everywhere  while at other times the cost of a command may depend on the state at which it is being executed  for example  carrying through a crowded region of physical apace . by specifying the dimension  magnitude and distribution of the'lengths  of lines between points in the state space  the operator 
 suitable computer routines can generate the value of the desired state from a less formal-
ized input command  such as  go to the left of the object  
**for tasks at the complexity level considered here  this analytic approach seems superior  in terms of computer time and likelihood of success  to similar work employing heuristic programming to e l i c i t strategies.1 
can to some degree affect the nature or  style  of the resulting solution. 	the arrangement of lengths shown in figure 1 results in the path i n dicated by the arrows. 	 this schedule of lengths suppresses unnecessary motions of the open jaws.  the corresponding work plan i s : 
move left one inch open 
move left one inch 
move left one inch 
close 
　　　a path which allows the jaws to grasp the object is shown in figure 1. the corresponding path for the case where the object is in location x-1 is shown in a new state space in figure 1. by making the object's location a new state variable  y1  we may represent carrying and pushing in a larger state space  figure 1. this figure is made by combining figures 1  1  and others like them  each corresponding to a p a r t i cular value of y1. note that pushing is not expressed 1 a transition analogous to that from  1  to  1  in figures 1  1  and 1  for example. this type of state transition is s t i l l forbidden since it tells nothing about what happens to the pushed object. pushing is properly expressed in figure 1 as a variation of carrying. 
physical demonstration 
　　　the ideas of the previous section were implemented on a three degree of freedom manipulator converted from a plotting table. square objects could be grasped and moved about in a region 1 inches on a side. the manipulator jaws were equipped with grip sensors inside and contact sensors outside. no jaw rotations were possible. a digital equipment corp. pdp-1 computer contained a 1 word program and a 1 word state space.* the state vector consisted of  xj  yj  h   while objects and obstacles were kept track of in a separate l i s t . the 1 word program contained a l l i/o  a path finding algorithm  touch sensor evaluation routines  stepping motor control  plus interpretation of commands such as 

if a new object was discovered by the touch sensors while a path was being executed  the system estimated i t s location  asked the operator for a name and then computed a new path to the original goal  incorporating knowledge of the new object. this object could be referred to later by name  picked up  carried  and so on. a more complete description appears in . 
*twelve bits per word. 

-1-

a more complex example 
　　　suppose we wish to move a long thin spar through a crowded two-dimensional environment.  picture carrying a sofa from the living room to the porch.  here the interactions between the en-
vironment and the spar's position and orientation are of the most interest. to map motions of the spar once it is grasped by a rotating pair of jaws  
we choose state variables 

the allowed commands are 

thus both position and orientation of the spar are quantized. 
　　　the physical space is shown in figure ft. walls are shown as open rectangles  while the two possible orientations of the spar are shown by cross lines at each possible position. 	the challenge is provided by the doorways  which allow the spar to pass axlally but not athwart. 	this constraint and the presence of walls are shown in the state space by deleting the lines corresponding to the forbidden transitions. 
　　　the state space appears in figure 1. we assume for i l l u s t r a t i o n that each  move  is of length 1  each  rotate  of length 1. let the spar be i n i t i a l l y at location  1  in the physical space  oriented parallel to the y axis  and say we want it moved to  1   ending up oriented parallel to the x axis. then the i n i t i a l state is  1 1  and the f i n a l state is  1 1 . these are marked start and end  respectively  on figure 
1. 
　　　there are two equal length solution paths  shown in figure 1 and visualized on a sketch of the task site in figure 1. these paths do not  look l i k e   the most direct route. closer examination  however  reveals that these paths  by i n i t i a l l y moving the object away from the f i n a l state  are able to save two rotations by spending a l i t t l e more distance. again  if we read a solution path  we get a l i s t of the required moves and rotates in the correct order. a more general solution to this problem which includes grasping and releasing the spar in arbitrary  quantized  positions and orientations  may be found in chapter v of reference 1. 
discussion of the state space model and i t s implications 
　　　the main feature of the state space models above is their quantization. this is a direct consequence of the kind of atomic commands we a l low and of our interest in the main motion features of tasks for planning purposes. the atomic commands may be thought of as task differentials  but ultraflne quantization is neither practical nor necessary  especially if good sensors are available. in fact  since more complex tasks require  in principle  state spaces of higher d i mension  quantization poses staggering computer storage problems.  1 state variables  1 points per axis - 1 points.  three factors mitigate such d i f f i c u l t i e s : 
　　　1  only a handful of these points need be in live  core memory  storage at any one time. in fact  the problem of finding shortest paths i s   by default  one of state increment dynamic programming  1 which latter may be greatly speeded by algorithms such as that of hart  nilsson and raphael  which pursue only the currently most promising path. 
　　　1  the state space need not be built and held whole and intact in storage  but rather only those sections needed as a particular path is pursued. 	the state space is just a logical consequence of a l i s t of object and jaw locations  sizes and orientations  plus extremely local  knowledge  of what circumstances prohibit a given com-
mand. the needed portions of the state space may be built to order  using the information in the l i s t . then  merely by concentrating on one state and i t s immediate neighbors at a time  the computer can plan tasks which involve hundreds  or any number  of states. in most algorithms  moreover  progress is monotone so that a state  once considered  is never considered again. these notions suggest that the state space ie  a l i s t and that list-processing computer languages may be useful in dealing with i t . 
　　　1  a state space describing a complex task is of high dimension only because the space stores the relations for a l l tasks which could be performed by manipulating the objects and jaws in question. no command  however  asks for a l l tasks  and because rearrangement tasks consist of repeated sequences such as  move empty jaws to location x  grasp  carry object to location y  release   it should be clear that only the state 
variables actually involved in one such sequence need be considered variable at one time. this is obviously equivalent to considering only a limited and much lower dimension cross section of the o r i ginal space. great savings in computer time and storage may be effected by treating sequences of such cross sections  indeed considering them as atomic actions on a much higher level than the atomic commands which underlie them. we are thus afforded two levels of planning  an upper level in which gross motion goals are selected  and a lower level in which detailed strategies for such 
motions are evolved and their costs evaluated. thus we can consider more complex tasks without recourse to unmanageable state spaces. in this way  competing gross plans may be judged for costeffectiveness and the best one  for the given cost structure  selected. it is worth speculating that 

-1-



1. bellman  r.e.  and s.e. dreyfus  applied dynamic programming  princeton: princeton university press  1. 
1. berge  claud  theory of graphs and its application  new york  john wiley and sons  1. 
1. ernst  h.a.   a computer-operated mechanical hand   sc.d. thesis  m.i.t.  department of electrical engineering  december  1. 
1. feigenbaum  e.a.  and j. feldman  editors  computers and thought  new york: mcgraw-hill book co.  1. 
1. ford  la.r.  j r .    network flow theory   rand corp. paper p-1  august 1  1. 
1. hart  p.e.  n.j. nllsson  and b. raphael   a formal basis for the heuristic determination of minimum cost paths   ieee trans  on systems science and cybernetics  v. ssc-1  1   july  1s  pp. 1. 
1. johnsen  edwin  discussant at 1th annual meeting of the human factors society . september 1  1. 
1. larson  r.e.   dynamic programming with reduced computational requirements   trans. ieee auto. control  v ac-1  1   pp. 1  a p r i l   1. 
1. mergler  h.w.  and p.w. hammond   a path optimization scheme for a numerically controlled remote manipulator   1th annual symposium of the ieee human factors in electronics group  may  1. 
1. minsky  m.l.  and s.a. papert  research on i n telligent automata  status report i i   sept.  1  m.i.t. project mac. 
1. nllsson  n.  and b. raphael   preliminary design of an intelligent robot   in computer and information sciences - i i   new york: academic press  1. 
1. roberts  l.g.   the lincoln wand   fjcc 1  pp. 1. 
1. ferrell  w.r.  and t.b. sheridan   supervisory control of remote manipulation   ieee spectrum  v 1  1   pp. 1  october  1. 
1. tomovlc  r.  and g. bonl   an adaptive a r t i f i c i a l hand   ire trans. automatic control  ac-1  a p r i l   1  pp. 1. 
1. travis  l.e.   experiments with a theorem-utilizing program   sjcc 1  pp. 1. 
1. weinberg  alvln   transuranlc elements and the high-flux isotope reactor   physics today  v 1  1   p. 1. 
1. whitney  daniel e.   state space models of remote manipulation tasks   ph.d. thesis  m.i.t. 
department of mechanical engineering  january  1. 
1. whitney  d.e.  op. c i t .   p. 1. 
1. whitney  d.e.  op. c i t .   pp. 1. 
1. larson  r.e.  and v.g. keckler   optimum adaptive control in an unknown environment   ieee trans. auto. control  v ac-1  1   august  1  pp. 1. 

-1-











-1-


