 
many problems can be expressed in terms of a numeric constraint satisfaction problem over finite or continuous domains  numeric csp . the purpose of this paper is to show that the consistency techniques that have been developed for csps can be adapted to numeric csps. since the numeric domains are ordered the underlying idea is to handle domains only by their bounds. the semantics that have been elaborated  plus the complexity analysis and good experimental results  confirm that these techniques can be used in real applications. 
1 	introduction 
artificial intelligence  operational research and  more recently  logic programming often use the concept of constraint in order to express and solve a problem. bit by bit a theoreucal framework has evolved  that of constraint satisfaction problems  csp   waltz  1; montanari  1; mackworth  1 . a csp is defined by a set of variables each with an associated domain of possible values and a set of constraints on the variables. 
　this paper deals with csps where the constraints are numeric relations and where the domains are either finite integer domains or continuous domains  numeric csps .  davis  1  offers a good insight into this kind of problem. methods exist to solve numeric constraint systems in certain special cases  simplex algorithm  grtibncr bases  newton's method  etc.  but no general method exists. 
　consistency techniques have been successfully applied to general csps and could be very useful for numeric constraint systems  but we shall sec that even a very simple consistency technique such as arc consistency may turn out to be unrealistic  although the characteristics of numeric csps can be used to greatly reduce the complexity of such techniques:  1  numeric constraints are expressed intensionally and  1  the domains are ordered and can also be expressed intensionally . 
　interval propagation is another technique  used for solving numeric csps. it consists in propagating the bounds of the domains and is often used in implementations either on finite integer domains such as chip  dincbas et al.  1  and osl  ibm  1  or continuous ones such as bnr-prolog  older and vellino  1  and interlog  tosello  1; dassault electronique  1 . but interval propagation has never been formalized by a concept of consistency and no complexity analysis has ever been performed. 
　this paper is a presentation of two new partial consistencies  their specificity being that they only consider the bounds of the domains. the first one formalizes interval propagation  the second  which is stronger than the first  has given rise to a new algorithm  implemented in interlog . an extension of these consistencies enables the running lime of algorithms to be tuned. 
　the paper is organized as follows. chapter 1 describes the problem. section 1 considers the usefulness of consistency techniques in numeric csps. section 1 introduces the abstract concept of numeric value  thanks to which it is possible to provide definitions and algorithms that are valid for both finite and continuous domains. section 1 defines the formalism that has been adopted. 
chapter 1 discusses solving numeric csps and first shows that are consistency may be unrealistic on large size domains. section 1 defines arc b-consistency  where b stands for bounds  which formalizes the interval propagation technique. section 1 introduces 1-b-consistency which is a stronger consistency on domain bounds than arc b-consistency. the algorithms that perform these two consistencies are given and their complexity is analyzed. section 1 contains some experimental results. 
　the whole paper has been written with continuous domains in mind  the examples always involve real variables  but it is obvious that everything is equally valid for finite integer domains. the proof of the propositions and the complexity analysis can be found in  lhomme  1 . 
1 	numeric csps 
1 .1 why consistency techniques are useful 
numeric csps can be used to express a large number of problems  in particular physical models involving inaccurate data or partially defined parameters. here it is a question of what solving such problems implies. these problems are generally under-constrained  i.e. a very large number of solutions exists  infinitely large in the case of continuous domains . although it is impossible to enumerate all of them  it is often possible to express the set of solutions. 
example: let three real variables be linked by a constraint u = r * i. if we know that i varied between 1 and 1 and that r varies between 1 and 1  it is not so much one solution that is worth knowing  e.g. r-1  　
at the exact range of values of u  i.e. the interval  1  1  . 
　in this example the domains are continuous and so it is impossible to enumerate all the solutions. the constraint u = r * i is non linear  the simplex cannot apply. the grobner bases method can be used to solve polynomial equations but cannot take inequations into account. 
　the difficulty comes from the fact that we are trying to reason on the range of values of variables. a natural method would therefore be to attribute a dynamic domain to each variable and to propagate this domain through the constraints. this is exacdy what the csp consistency techniques  mackworth  1  do. we shall use these techniques to try to determine the exact range of values of a set of constrained variables. 
　traditionally  domains and consistency techniques in csps are only used to simplify a problem before going on to enumerate the solutions. in numeric csps  however  one of the main ideas is to consider that the domain of a variable is an approximation of the exact range of values of the variable and may itself be of use. this interpretation is similar to hyvonen's tolerance propagation  hyvonen  1 . 
　independently of the very large  or even infinitely large number of solutions  another advantage of working on ranges of values rather than on single values is that it allows dynamic numeric csps to be handled  i.e. numeric csps to which constraints may be added. incrementality is therefore crucial and requires delaying choice points  which list the solutions to an intermediate numeric csp  as long as possible. incrementality is a key feature when integrating consistency techniques in a programming language  see  cleary  1; dincbas et al.  1; older and vcllino  1; sidcbottom and havens  1; lee and van emden  1; benhamou and older  1  . 
1 	the concept of numeric values 
in order to be able to use the same language both for finite and for continuous domains  the abstract concept of numeric value has been adopted. it will be defined separately for finite domains and continuous ones. 
　when a domain is finite  a numeric value is simply defined by: 
definition la: numeric values in finite domains for a finite numeric domain d a numeric value is an element ofd. 
　in the case of continuous domains  the domain associated with a variable represents an infinite set of real numbers. however  since a computer handles real numbers through floating-point numbers it is important to have a formalism that allows for this  without which no valid result could ever be obtained. in floating-point representation the set of values that a numeric variable can take is the set of floating-point numbers  a real number between two consecutive floating-point numbers is usually approximated. in order to avoid approximations and guarantee correct results  a numeric value in a continuous domain is defined as follows: 
definition lb: numeric values in continuous domains 
a numeric value is an element of the set 
　

　

　
	1 	stronger consistency: 1-b-consistency 
neither arc b-consistecy nor arc consistency are always sufficient: 
example: p1 is arc b consistent  and even arc consistent  but it does not allow the range of values of the variables to be found i.e. dx= 1  1   dy= 1.1 . 
　in the case of csps over finite domains  an efficient way of finding solutions is often to perform an interleaved enumeration with arc consistency filtering. one of the ways of adapting this method to ncsps is domain splitting  cleary  1 : if p is arc b-consistent  the domain of a variable is split in two 
1. this is the case for bnr-prolog  for example. 	and the two resulting ncsps are explored separately. this 
　

　
the four variables of p are in the tame equivalence class. all that needs to be done is to compute 1-b w1 w1 -consistency on one of these variables in order to obtain 1-b w1' w1 -consiftency of p. 
1 	experimental results 
arc b-consistency filtering  i.e. interval propagation  is a technique that has already been used and validated experimentally on both finite domains  chip  osl  and continuous domains  bnr-prolog  interlog . 1-b-consistency filtering  however  is new and deserves in-depth experimentation. 
here  suffice it to say that in the case of p1 and p1   ref filtering would allow the range of values of each variable to be found rapidly  thus giving p1   whereas the domain splitting technique  see section 1  would give a very huge number of contiguous solutions. in addition  even in more complicated cases such as that given in the example below  computation times have in practice turned out to be considerably lower than those predicted from the complexity analysis. 

this system of constraints decomposes into a system of 1 basic constraints and 1 variables. on an ibm 1 the number of numeric values in  1  is roughly 1  and a relative precision of 1 corresponds to w1 = w1 = 1. complexity analysis predicts a number of elementary operations between 1 and 1. experimental results are relatively close to the lower bound. 
　the drawback of domain splitting in the above example is less serious than for p1 and p1 because the solution here is a single value. but it gives many quadruplets  dx  dy  dz  dt  that are close to the solution and is incapable of determining which one actually contains the solution. 
1 conclusion 
csp consistency techniques can be used in ncsps to determine the range of values of variables. however their complexity remains too high  even though it can be greatly reduced by the structure specific to ncsps. 
　the advantage of the two new partial consistencies  arc b-consistency and 1-b-consistency  is that they are well adapted to ncsps. their distinguishing feature is that they only consider the bounds of the domains. as for non disjunctive constraints  it has been shown that arc b-consistency is equivalent to arc consistency. an extension of these b-consistencies introduces the concept of bound width and enables the complexity of algorithms  even on continuous domains  to be tuned. in  lhomme  1  these partial consistencies are generalized by defining k-b-consistency. 
acknowledgments 
patrick talllibert introduced me to the problems derscribed here and gave invaluable help in preparing this paper. my thanks also go to michel rueher  supervisor  for his useful suggestions and constructive criticism. i would also like to thank bernard botella  philippe jegou  jimmy lee  philippe marguerie and franck porcher for their useful comments on previous drafts of this paper. finally  my thanks go to rosalind greenstein for the english version of this paper. 
