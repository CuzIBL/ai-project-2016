ion. in this model  implemented by objvlisp1  every object is an instance of a class  and a class is a true object fully specified at the meta-level. a metaclass is a true class inheriting from another one. because objvlisp is built on a reflective architecture  the user has uniform access and control to all the levels of the language: class level  metaclass level... he can add new levels and the metaclass links can be created indefinitely. 
   finally  we suggest to clarify the smalltalk terminology with a new definition for class variables: the instance variables of a class - treated as an object - become the class variables of this class  explicitly expressed at the metaclass level. 
	i 	c l a s s v e r s u s o b j e c t 
this paper deals with the instantiation mechanism used by object-oriented languages which organizes objects along the class abstraction. 
a. class and instantiation 
 a central new concept in simula 1 is the 'object'. an obobject-oriented programming is built from the class model  introduced in the language simula-1. in simula  a class is a way to describe an abstract data structure. active objects may be dynamically created from the class description by instantiating the variables specified by the class. such objects are called instances of the class. b. is a class an object  
 with respect to simula  smalltalk abandons static scoping  to gain flexibility in interactive use  and strong typing  allowing it to implement system introspection and to introduce the notion of metaclasses1 . 
   the object paradigm is set  and is now distinct from abstract data types systems. the smalltalk language has evolved from smalltalk-1  to smalltalk-1 in order to give the user some control on classes. smalltalk-1  is the first language to consider a class as an object itself  i.e.  instance of a special class  called a metaclass. however  besides an uniformity wish1  a class is not a true object. its structure is not fully specified at the meta-level but remains at the implementation level. only the behavior of classes  i.e.  the way they react to message passing  is specified at the meta-level  through this unique metaclass  called class. 
c. smalltalk-1' metaclasses are not a full answer 
   a unique metaclass imposes a unique behavior to all classes. for this reason  smalltalk-1  introduced the metaclass concept to allow distinct behaviors for different classes. each class now has its own metaclass. this facility is mainly used to  re  define the instantiation method  to initialize class variables  or to hold predefined examples. however  smalltalk-1 metaclasses are implicit  they are implicitly created from the class description  and virtual  they cannot be used as true classes  e.g.  being explicitly instantiated . consequently metaclasses introduce such a conceptual gap in the understanding of smalltalk-1 that borning proposes to drop them: 
    in our empirical studies  metaclasses were regarded as the most significant barrier to learnability by both students and teach-

ject is a self-contained program  block instance   having its own ers. we propose that they be eliminated. we have explored varlocal data and actions defined by a 'class declaration'. the class ious alternatives to metaclasses  such as the use of prototypes. declaration defines a program  data and action  pattern  and ob-however  for deltatalk we simply propose that the language re-
jects conforming to that pattern are said to 'belong to the same verts to the situation in smalltalk-1. every class would be inclass'    1j. 	stance of class class   ¡ê . 
   xthi1 research was supported by the  object group  of the greco 	1  one way of stating the smalltalk philosophy is to choose a small de programmation  cnrs  france. 	number of general principles and apply them uniformly  . 
1 	architectures and languages 

   we do not agree with borning's view. it seems to us that metaclasses do add great expressive power to ools and that it is really worthwhile to find a correct definition for them. we need metaclasses to develop friendly open-ended systems  1j and we believe that the fundamental problem with smalltalk remains the impossibility to explicitly specify classes as instances of true classes. in order to solve this deficiency and to simplify the smalltalk-1 model we propose to unify classes and metaclasses. 
	i i 	u n i f i c a t i o n 
   we claim that a class must be an object with a first class citizenship allowing greater clarity and expressive power. a. is every object a class  
   there are still classes and non-class objects in our model. the wnon-classw objects are called terminal instances  they are fully instantiated and are not abstractions like classes. 
b. how many object types  
   there are two kinds of objects  classes and terminal instances . there is no type distinction however. a class and a terminal instance only differ through their respective classes. for instance  a class will accept the new message to create an instance of itself  but a terminal instance will reject it. 
c. metaclasses are true classes 
   a class of classes is called a metaclass  it specifies the structure and the behavior of classes. the first primitive metaclass in the language is called class and owns the new primitive method for instantiation. any class declared as a subclass of class inherits its ability to specify and control classes  e.g.  the new method   and thus becomes a metaclass. consequently  metaclasses are true classes and also true objects. 
d. creation of a class 
   this unification induces a simplification of the instantiation and inheritance concepts but imposes that they be used simultaneously. we can create object with inheritance  classes and metaclasses  or without inheritance  terminal instances . for instance a metaclass is created as the subclass of another one  as an  ultimate  subclass of class . 
   the distinction between metaclasses  classes and terminal instances is only a consequence of inheritance and not a type distinction. there is now only one type of objects in the model. 
	i l l 	t h e u n i f i e d m o d e l 
a. structure of an object 
   a class describes the structure of a  potential  set of objects through an ordered collection of instance variables. the first instance variable - called is it - is automatically inherited from the object class and refers to the name of the class of the object  each object is the instance of a class . 
   as an example the point class  describing 1d points specifies the following instance variables :  iait x y  
   an instance of this point class  e.g.  the point 1  owns the values associated to the instance variables specified by its class:  point 1  
   a set of procedures  called methods   usable by any of its instances  is also specified by the class as we see below. 
b. structure of a class 
   if we want to define a class  we need to know the instance variables describing a class. they are specific to our model:  isit name supers i v methods  
   because it is convenient to have named classes  name denotes the name of the class. 
   the list of the names of the direct superclasses from which the class will inherit is denoted by super. 
   the list of instance variables that the class specifies is denoted by i v. 
   the set of methods held by the class expressed in a p-list way  with pairs   selector-name .  -cxprcssion  is denoted by methods. 
   the isit instance variable belongs to the object class  the most general class in the model. in contrast to other usual instance variables  the corresponding value is automatically supplied when creating the object. 
   we can now describe the structure and the behavior of a class through this set of instance variables: a class has at last become a real object. 
c. the point example 
   to illustrate our model  we present its lisp implementation called objvlisp. we define point as a subclass of the object class by instantiating the first metaclass class. a commonlisp syntax is used for specifying the values associated to the instance variables of the class-receiver :  send class 'new 
:name 'point :supers ' object  : 	i v '  x y  :methods ' x  a    x  x:  a  nx   setq x nx         then we create an instance of point  using the same new message :  send point 'new :x 1 :y 1  
	i v 	r e f l e c t i o n 
   class is the first primitive object. it will recursively create all other objects. class needs to be an instance of some class as any object of the model. to prevent an infinite regression  we need the class of class  and the 
class of this class...  the usual technique in ools is to circularize the instantiation tree by adding a loop at its root. the simplest way is to set this loop at the class level  i.e.  by declaring class as its own instance  and class . 
a. self pattern matching of class 
   the previous statement severely constrains the structure of class. the instance variables specified by class must match the corresponding values held by class itself  as its own instance. below are the instance variables and the associated values : 
	isit 	name 	supers 	lv 	methods 
class class  object   isit name supers lv methods   new  a..   
	briot and cointe 	1 
   note that the value associated to the instance variable ijv is exactly the list of instance variables itself. this self pattern-matching illustrates the circular definition of class. 
b. the golden braid 
   in order to implement our model in a reflective way  we need a  bootstrap   1 . we first create  on the lisp level  a skeleton of class owning the new method. then we create  on the objvlisp level  the class object  root of the inheritance tree : 
 send class 'new 
	:name 	* object 
	:supers 	'   
	:i.v 	' isit  
	:methods 	' class  a    isit ..    
   then we redefine class by a self-instantiation using the values presented above : 
 send class 'new 
	:name 	'class 
	:supers 	' object  
	:i.v 	' name supers i.v methods  
	:methods 	' new  a i v* 
 make-instance ...      
   after the bootstraping process  the system owns only the class and object classes and the instantiation tree is exactly like the smalltalk-1 one. but  as demonstrated in 
  the uniformity and the explicit definition of the objects class and object open an immense variety of possibilities. 
c. unicity versus genericity 
   the model we present is optimal in its simplicity and generality. the unicity of the new method reflects the unique type of objects: real instances of classes. on the other hand  because of inheritance there are two kinds of object creations. thus the new method is not fully generic. 
   when creating an object  inheritance applies to classes but not to terminal instances. as a consequence  the makeinstance primitive needs to discriminate between classes and terminal instances. 
in order to explicit these two ways of creating objects 
 with or without inheritance  and regain genericity of the new method  we may use another primitive object in the model  called metaclass  owning the new method with inheritance  creating classes . then class will own another new method without inheritance  creating terminal instances . this second alternative is similar to the loops kernel  l   augmented with the full specification of classes at the meta-level. the disadvantage is the increased complexity necessary to gain genericity for the new method. it is very easy to extend our model towards this second alternative  in that sense we believe our model is more general and simpler to understand and manipulate. 
d. indefinite meta-levels 
   we may extend the system with the same tools that were used to create it: instantiation and inheritance. for instance  we can specify and control two new levels of metaclasses by first defining the set class  whose instances memorize the list of their instances   then the mpoint class  whose instance  the point class  memorizes its instances and parametrizes the display character c  : 
1 	architectures and languages 
 send clas1 'new 
.name 'set :supers ' cla1  :i v ' listofinstances   
 send set 'new 
:nazne 'mpoint :supers ' set  :i v ' c   
 send mpoint 'new 
:name 'point : supers ' object  :i.v '  x y  :c  *.   
	v 	c l a s s v a r i a b l e 
we propose an alternative to the smalltalk class variables. the principle is to extend the scope of the instance variables of a class to each of its instances. then the class variables are defined at the metaclass level as simple instance variables of the class treated as an object. 
a. the polygon problem 
   let us develop the polygon construction to illustrate this idea. the problem is to represent the  regular  polygon abstraction and the square and hexagon sub-abstractions. the methodology of smalltalk-1 leads to use the class hierarchy to define  first the polygon class  then its square and hexagon subclasses. 
b. the smalltalk-1 solution 
   each polygon will be defined by its location  the first vertex  and the length of any of its sides. consequently location and length will be defined as the instance variables of polygon treated as a class. the problem then  is to parametrize the number of sides: 1 for a square  1 for a hexagon  undef for a polygon. if we define nsides as a class variable of polygon  nsides will be inherited by triangle and square because they are sub-classes of polygon. 
   but in smalltalk the inheritance for class variables does not follow the inheritance for instance variables. class variables are used to share knowledge between instances of a class hierarchy. for example  if the new method is redefined to add the newly created instance of a class inside a 
   collection's class variable  the instances of its subclasses will also be memorized. in the same way  each square or hexagon would share the same number of sides! 
   because class and metaclass hierarchies are parallel  the unique solution is to define nsides as an instance variable of polygon treated as an object  i.e.  at the  polygon class1* level. nevertheless  to access the value of nsides from an instance of polygon  or square and hexagon  we have to explicit at the metaclass level two  read-write  methods controlling this metavariable1. to define  1 sided  polygons we will use the transmission : 
hexagon i n i t i a l i z e : 1 
c. the objvlisp solution 
   the  polygon scheme  is believed to be quite general when applying the class abstraction to the knowledge representation field. to capture it  we have decided to define 
1 here are thefe two methods held by polygon class: 
polygon claas  nsides tnsidet 
polygon cum  initialise: numberofsides tnside¡ì*~ numberofsidei 
the objvlisp class variables at the metaclass level  realizing a  global environment  shared by all the instances of a class and following the inheritance rules of instance variables. unlike smalltalk-1  our class variables are inherited but not shared by the subclasses. consequently  here is our alternative version of the polygon example : 
 send class 'new 
	:narae 	'metapolygon 
	:eupers 	' class  
	:i-v 	' nsidet    
 send metapolygon 'new 
:name 'polygon :supers ' object  :i-v ' location length  imethoda ' display  a    ...  ...  :nsides 'undef       metapolygon is a subclass of class  thus it is a metaclass. the creation of polygon explicits the instantiation of the class variable nsides. then we can define new classes of polygons  with distinct values of nsides  by defining them as inheriting from polygon. as an example the square and hexagon objects are the classes of  1 sided  and  1 sided  polygons : 
 send metapolygon 'new 
:name 'square :supers ' polygon  :nsides 1  
 send metapolygon 'new rname 'hexagon .supers ' polygon  rnsides 1  
 send square 'new 
:location  send point 'new :x 1 :y 1  
:length 1  
   every object has access to its own environment as well as the environment of its class. consequently nsides is bound at two levels: class and instances methods1. the previous instance of square has access to the bindings of the instance variables of its class with the associated values it owns  i.e.:  isit . square   location . 1   length . 1 . but it also has access to the bindings of the instance variables of its metaclass with the associated values that square owns  thus gaining the value of the  meta instance variable:  nsides . 1 . 
d. towards a new terminology 
   the problem with the terminology developed by smalltaik-1 is the non-symmetry between the instance and the class levels. we agree with the instance methods and class methods definitions because they respectively express the behaviors of the instances and then the behavior of a class as an object. on the other hand  we are confused by the class variable definition which does not define the field of a class as an object but defines a knowledge shared by all its instances. 
   1 to illustrate this point  here are the definitions of the two display methods  smalltalk & objvlisp  drawing every class of polygons and held by polygon : 
ap n*- pen new place  location    elf class nsidei  timesrepeat: 
 apen go: length ; turn: 1 //   elf clan nsides   
 a     let   apen  eend  send pen 'new  'place: location    
 repeat nsidee 
 tend apen 'go: length   send apen 'turn:  / 1 nsides      
   we propose to keep the term class variable but to use it for a different meaning. a class variable becomes an instance variable of the class treated as an object. to rename the smalltalk term class variable  we suggest the term sharedclass variable. 
	v i 	c o n c l u s i o n 
   we have presented here a new model for object-oriented programming. this model unifies class and object concepts. a class is now a true object  fully specified at its meta-level. the primitive metaclass of the model  called class  is described and created in a circular way  as an instance of itself. this class is the root of the instantiation tree whose depth is potentially infinite and the user has now an uniform control on every meta-level. acknowledgments we thank jean-francois perrot  kris van marcke and henry lieberman for their helpful comments. 
r e f e r e n c e s 
 bobrow  d.g.  stefik  m  the loops manual  xerox parc  palo alto ca  usa  december 1. 
 1  borning a.  o'shea  a.  deltatalk: an empirically and aesthetical motivated simplification of the smalltalk-1 language  ecoop'1  to appear in springer verlag  p. 
cointe & h. lieberman ed.t paris  france  1 june 1. 
 briot  j-p.  cointe  p.  the objvlisp model: definition of a uniform  reflexive and extensible object-oriented language  ecai'1  pp. 1  brighton  uk  1 june 1. 
 cardelli  l.  a semantics of multiple inheritance  bell laboratories  murray hill nj  usa  1. 
 1  cointe  p.  the objvlisp kernel: a reflective lisp architecture to define a uniform object-oriented system  proc. of the workshop on meta-level architectures and reflection  to appear in north holland  p. maes & d. nardi cd.  alghero  italy  1 october 1. 
 dahl  o.  myhrhaug  b.  nygaard  k.  simula-1 common base language  simula information  s-1¡ê  norvegian computing center  oslo  norway  october 1. 
 goldberg  a.  kay  a.  smalltalk-1 instruction manual  research report ssl 1  xerox parc  palo alto ca  usa  march 1. 
 goldberg  a.  robson  d.  smalltalk-1 - the language and its implementation  addison-wesley  reading ma  usa  
1. 
 ingalls  d.h.  the smalitalk-1 programming system design and implementation  1th acm symposium on popl  pp. 1  tucson az  usa  january 1. 
 krasner  g.  smalltalk-1 - bits of history - words of advice  addison-wesley  reading ma  usa  1. 
	briot and cointe 	1 
