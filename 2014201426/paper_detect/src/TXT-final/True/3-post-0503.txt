 model for prover behaviour  and a protocol for communication within proof sessions.
　the model is based on abstracting the common behaviour of many interactive proof systems. it acts as a clearly specified  virtual layer  that must be emulated in each prover to cooperate properly with pg/eclipse.
　the communication protocol is called pgip  for proof general interactive proof. the basic principle for representing proof scripts in pgip is to keep the prover's native language  and mark up the script with pgip tags  which give the information needed by an interface . designing pgip as a wrapper for native languages has two main consequences:
　firstly  the user employs the prover's native language  pgip mark-up is only used internally . this is necessary  since the wide variety of logics supported by modern provers make it very hard to come up with one language which efficiently supports all of these. it is also pragmatic  as users can continue to work in the proof language they are familiar with  and old proof scripts can still be used.
　secondly  the pgip-annotation of the proof script  and subsequent user input  is done by the prover  or a component coming with the prover   and not by the interface  which knows nothing about the prover's language. parsing requests and responses form part of the pgip protocol.
1 related work
we can only give a brief overview here of the closest related projects.
　the theorema theorem prover and the texmacs systems both have excellent support for entering and viewing mathematical expressions  buchberger  1  audebaud  1 . various systems already implement script management  e.g. the previous pg system . however  these offer less functionality than pg/eclipse  and do not provide a satisfactory solution to the problem of handling different provers. the most closely related work is that done within the pg/kit framework: a pgip emacs mode  and a pgip-based 'proof desktop'  where theories and proofs are built up using graphical actions such as drag-and-drop. there is also a broker component in that can act as a middle-man between a collection of pgip-equipped provers and interfaces. this should lead to increasingly flexible ways to develop proofs.
1 future work
there are many possible lines for future development. firstly  we want to use the eclipse framework to further explore the analogy between theory development and software engineering. we can also go beyond adapting program development tools. one promising line of work is on using interactive proof planning to construct proof scripts  c.f.  fleuriot  1  . interactive planning could also be a valuable idea to transfer to ide based programming. the closest existing analogue is the idea of 'programming templates'; fragments of code which can be used to help build up programs  e.g. a standard widget initialisation method . proof planning can be considerably more powerful.
1 state of the project
this work is described in more depth at http://proofgeneral.inf.ed.ac.uk/kit. an alpha-release of pg/eclipse is now available  also from this webiste   and the latest version of isabelle  available from www.cl.cam.ac.uk/research/hvg/isabelle  supports pgip. developers interested in using proof general for other provers should contact the authors.
