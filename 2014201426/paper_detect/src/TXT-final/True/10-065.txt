 
   techniques were developed by which an algol-like program  given together with its specifications  may be documented automatically. this documentation expresses invariant relationships that hold between program variables at intermediate points in the program  and explains the actual workings of the program regardless of whether the program is correct. these techniques  formulated as deduction rules for both guaranteed invariants and candidate invariants  represent a unification of existing approaches  and sometimes improve upon them. 
introduction 
   program annotation is the task of discovering a set of invariant assertions and documenting a program with them. these invariants describe the workings of the program  independent of its correctness or incorrectness  by detailing relationships between the different variables at specific points. not only are invariants necessary for the verification of a program by the invariant-assertion technique  but they may also be used to prove termination or incorrectness of a program  to analyze the efficiency of the program  aid in the optimization of the program  and guide program debugging and modification. 
   this research is aimed at unifying previous approaches to annotation {e.g.  wegbreit  and katz and manna   and extending some of the earlier techniques. the methods developed have been implemented in qlisp and a catalog of annotation rules has been compiled. 
the rules 
   the annotation techniques are expressed as rules  each rule consisting of a set of antecedents and a consequent. there are two basic types of rules: algorithmic and heuristic. 
  a/gorithmic rules derive invariant relations between variables directly from the program statements. these rules may be further subdivided into two categories: 
  assignment rules  which yield global invariants that hold at all labels in the program  based only upon the assignment statements of the program; 
  control rules  which yield local invariants associated with specific points in the program  based upon the control structure of the program. 
  heuristic rules have candidate invariants as their consequents. these candidates  though promising  are not guaranteed to be invariants and must be checked by a verifier. initially all programmer supplied assertions are candidates. 
   the assignment rules relate to particular operators occurring in the assignment statements of the program. for example  there are three rules for multiplication: a multiplication rule  which gives the range of variables which are updated by multiplication by a constant expression; a set multiplication rule for the case where a 
   variable is multiplied by other variables whose ranges are already known; and a multiplication relation rule which relates variables that are always multiplied by similar expressions. corresponding rules are formulated for other operators. 
consider the multiplication rule. 

where the expressions uo   ul   u1   . . . are of constant value within p. when this condition holds  the global invariant holds throughout execution of p. that is  
once 	u has been assigned a value in p  it belongs to the set 
where n is the set of natural numbers and 
for any expression 	denotes the set of 
elements 	 x sl s1  . . .  sm  such that 
 sm c sm . from such an invariant  specific properties  such as a bound on u   may be derived. note that no restrictions are placed on the order in which the assignments to u are executed. 
   an assignment  where it is known that  may be viewed as the nondeterministic assignment u :c a s  of an arbitrary element of a s  to u . thus the above rule might be considered as a special case of a more general set multiplication rule. 

where 1$ denotes the closure of 1 under multiplication  i.e.  the set of products of elements of s. if s contains the single element 
   the following multiplication relation rule relates different variables appearing in the program: 

where a   b   . . .   are arbitrary  not necessarily constant  expressions. the simultaneous assignments in the antecedent of the rule may represent individual assignments executed along the same program path  such that whenever  for example  u := u.aul is executed  so for the same value of the expression a . 
   while the previous rules completely ignored the control structure of the program  the control rules derive important local invariants by taking the program's structure into consideration. for example  the rule 

derives a loop invariant from the known invariants preceding the loop and following the loop body. it states that when control is at the head l of the loop-body  either the loop has just been entered  in which case the invariant a holds  or the loop-body has just been executed and b holds. 
   in contrast to the above rules  which are algorithmic in the sense that they derive relations that are guaranteed to be invariants  the other class of rules  heuristic rules  can only suggest candidate invariants. an example is the following generalization heuristic  which is valuable for programs with universally quantified output specifications. given a loop invariant 1 k  at label l   where k  a variable or expression  counts the number of loop iterations  we have as a candidate for a loop 
jf lv a r ' a n l 	it-tat 	o 	k/- l/-1c 	tr r 	n r c v / i a i i t 	w   l n a c 	r f 	is 	- r 	wsaii 	t h o t 	i* 

where k is the value of k when last at l and b 1:k  is short for   b holds for all values between 1 and k  . the  {   and   }  indicate that the consequent is only a candidate which must be verified. another example is the top-down heuristic 

which may be used to push candidates backwards into a loop. 
