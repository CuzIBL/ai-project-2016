 
       to explore the parallelism among rules is one of the ways to increase the speed of production systems. in this paper  an object pattern matching model is proposed to interpret the dependency between production rules  and based on the rule dependency analysis  we develop a new conflict resolution principle  search ahead conflict resolution  sacr   which can select more than one rule to fire at each execution cycle. the so called search ahead parallelism is thus achieveable by applying the sacr principle at run time. it is proved that the results of running programs in the new production system inference mechanism with sacr principle are the same as those running in the sequential inference mechanism with conflict resolution principle that is based on last-in first-out  lifo  strategy. as a consequence  with the sacr principle  a program composed of a large set of production rules can run in a multiprocessor system and get the same result as those running in a 
       uniprocessor system. 
1. introduction 
       forward-chaining production systems are used extensively in artificial intelligence and expert system areas. many tools for building production systems have been developed  such as ops1  forg1  and orbs lfick 1 . especially  over the past several years  improvements in the ops production systems from software approach have brought about substantial speed increase rforg1  forg1  scle1 ncma1 . the speed-up from ops1 to ops1 resulted from a number of factors  including changing important data structures  embedding special codes  compiling left-hand sides  etc. ops1 is at least 1 to 1 times faster than ops1  and further substantial improvements in software techniques have become difficult to achieve. so a hardware support for ops1 interpreter is essential  fowe1 . as ops1 is widely used in constructing expert systems  it is taken as a tool to discuss the topics presented in this paper. 
a parallel production system machine named dado 
fstsh1  stsh1  stmi1  is another architectural approach trying to increase the speed of production systems. the processors in dado are 
organized as a binary tree  and the full production rule level parallelism is explored by simultaneous matching of rulesn on the processors dedicated in the rule level. many algorithms implemented on dado to improve the speed of matching are proposed in  stol1  gupta1 . non-von  hish1  is another example of production machine which is likely to dado. in addition to the speed-up of rule matching  another speed-up we can obtain is through the parallel firing of production rules  which can reduce the total execution cycles of production systems  and the total speed-up may be the product of these two kinds of profit which will be quite significant. 
although nondetcrminism of production rule firing is the major characteristic in production system behaviour  we believe that by the static rule analysis of rule dependency  we can obtain some information that are useful for reducing search space  anticipating and composing rule firing sequence  and partitioning and mapping production rules. many researchers have proposed various approaches to analyze the rule dependency. tenorior and modolvan  temo1 had adopted the graph grammar theory  erhi1  to model the production system behaviour. there they considered the left hand side and right hand side of production rules as colored graphs  and the application of a production rule is nothing but a graph manipulation. based on this theory  they had developed many useful interdependent relations between two rules. graph grammar theory  however  needs to be extended to take into account the case of negative 