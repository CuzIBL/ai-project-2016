 
       in formalizing knowledge for common sense reasoning  one often needs to partition some domain. an instance of this from the blocks world is the statement  all blocks are either held  on the table  or on another block.  although we can write this axiom in predicate calculus or in clause form for input to a theorem prover  such representations are highly space inefficient. in this paper we present a generalized clause form that allows for the compact representation of arbitrary partitions  along with a set of corresponding inference rules. additionally  a theorem prover implementing these rules is described that demonstrates their utility with certain kinds of common sense rule bases. 
1. introduction 
　　reasoning about taxonomies has received attention  most notably within graph-structured representations. shapiro  1  introduces the and-or operator      which when applied to a set of n literals indicates that between i and j of them  inclusive  are true. this has a rather simple representation within a semantic network  although the details of its use and properties are embedded within the graph search procedures. hendrix  1  develops a partitioned associative network through the judicious use of subset and disjoint arcs. stickel  1  discusses taxonomic reasoning by using a search through a connection graph built from a set of assertions. the work described in this paper contrasts with those cited above in combining its use of purely declarative knowledge  its generality in allowing one to reason about non-isa as well as isa partitions  and its simple inference rules  which can be added to an existing declarative theorem prover to enable more efficient taxonomic reasoning. 
1. representation 
     two examples that are typical of commonsense reasoning are  all liquids either rest on a surface  rest in a container  flow along a surface  flow within a conduit  or fall in free space   hayes 1  and  for any two times t1 and t1  either  these kinds 
of partitions are more general than typical 	isa 
this work was supported in part by an office of naval 
research dept. of the navy grant number n1-c1 and the rome airforce development center hierarchies. we can represent the latter statement using predicate calculus in conjunctive normal form  cnf  by 

where the first disjunction indicates that one of the conditions must hold  and the next three indicate that not more than one can hold. unfortunately  as the number of partitions grows linearly  the cnf formula grows quadratically  as all partitions must be pairwise compared. we will introduce an n-ary exclusive-or operator  x  a syntactic variant of a connective used in  hayes 1  to capture this relationship among the partitions  and will write the above axiom 

the truth table for x is true just when exactly one of the literals inside is true  false otherwise. using this notation  the expression of axioms like the above require a linear amount of space relative to the number of atoms  rather than the quadratic amount previously needed. this notation can be generalized  and any expression of the form 
where the b1 are literals will be called an x-bundle. the equivalent cnf formula  which will be called the expand of x b   b  bn  is the conjunction of all members of the set 
the degree of an x-bundle is the number of literals within it  so that the above x-bundle has degree n. note that an x-bundle of degree one is equivalent to the literal it contains  and will usually be identified with that literal. 
an expression having the form 

where each of the a  are x-bundles  rather than simple literals  will be called an x-clause. this form reduces to regular clausal form when the degree of each a  is one. if only a single a1  has degree greater than one  we will call this a singular x-clause. a conjunction of x-clauses is in exclusive normal form  xnf   and as usual  we will think of this as a set any set of clauses in cnf is therefore trivially in xnf. converting the x-clause a1  where each a  is an x-bundle  to a cnf clause produces 
expand ai }. 

1 j. teneberg clauses we can infer 
entail 
entail 
likewise  from we can infer 
clause parents 

　　the first three deal with intra-clausal matching of atoms  the remaining x-bundles were left off of clauses for notational clarity . the rule for matching complementary atoms in different x-bundles was entirely eliminated  since it always produces a linear number of non-unit children. 

since one of a or ~a must be true  all of the b 's must be false. 
1  	
in this case  since only one of the literals within the bundle can be true  a must be false  and the true literal must be one of the b's. 
1  	
if a is true  the first a establishes the truth of the clause independent of the following x-bundle. if a is false  then one of the b's must be true. 
   the next two rules are special cases of x-resolution  and the third is a restriction on exclusion. 

1. implementation 
　　this set of rules and strategy was quite powerful within several domains  although committing to unit resolution sacrificed completeness. using only the set of general inference rules and strategy outlined above  with no domain specific rules  such as weighting of certain clauses or constants  there were several proofs that made only a few more inferences than the optimal proof tree. figure 1 gives the proof tree that the theorem prover generated for a simple problem. all of the unit clauses were initially placed in the set of support  and the boldfaced clauses are subsumed by following clauses. only one superfluous inference was made in a possible space of several hundred. 
	j. teneberg 	1 
   another example was run using a commonsense rule base with 1 x-clauses  that contained an axiomatization of a highly partitioned domain  with such axioms as 
playsgolf z  x pensioner z   kxmoviestar /   
building z  x fasti oodjoint /   factory /   jail z  . 
in typical proofs requiring 1 separate inferences  only 1 to 1 times this number of clauses was generated. even writing such a database for a clausal theorem prover would require 1 clauses  with the same proofs requiring at least 1 separate inferences. this space savings combined with shorter proof depth is significant  when one considers that in general  search spaces for proofs grow exponentially  thus raising the hope that more proofs will be made tractable using this method. 1. conclusion 
   a logical form with corresponding inference rules has been presented that is useful in representing and reasoning within partitioned domains. not only are declarative data bases smaller to write using the methods presented here  but fewer deductions are typically needed for a proof than using standard resolution. due to the simplicity of its clause form and inference rules and its similarity to resolution-type systems  this extension can be added to many existing theorem provers with a minimum of effort  enabling better reasoning capabilities within taxonomic domains. 
special thanks to pat hayes  whose wit  insights and criticism were invaluable  and leo hartman  who never seemed to lose curiosity nor tire of my long-winded explanations. 

rfffrfncfs 
 hayes  p.j.  naive physics e: ontology for liquids   working paper 1  institut pour les etudes semantiques et cognitives. geneva  1. 
 hendrix  g.c.  encoding knowledge in partioned networks  in associative networks  cd. findler  n.v. 1. 
 robinson  j.a.  a machine-oriented logic based on the resolution principle  journal of acm 1  1  1. 
 shapiro  s.c.  the sneps semantic network processing system   in associative networks  ed. findler  n.v. 1. 
 suckcl  m.f.  a nonclausal connection-graph resolution theorem-proving program   technical note 1 sri international. menlo park  ca oct. 1. 
figure 1 	 tenenberg  j.d.  reasoning using exclusion: an 
extension of clausal form   technical report 1 university of rochester  rochester. ny 1. 
