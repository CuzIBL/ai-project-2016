 
　　　some f a m i l i a r j u s t i f i c a t i o n s for concluding that a data element d is an unacceptable match to a pattern element p are examined f o r t h e i r s u i t a b i l i t y for partial-matching a p p l i c a t i o n s . a l l of these absolute c r i t e r i a are found to be unacceptable in that they rule out some plausible p a r t i a l matches. a p a r t i a l matching program  
reiax  is described which j u s t i f i e s the conclusion that a data element d is an unacceptable match to a pattern element p on the grounds that some other data element db is a better match to p. the use of such r e l a t i v e c r i t e r i a makes it possible to compute a l l of the kinds of mappings that kling   1   has claimed are required to account for i n t u i t i o n s about s i m i l a r i t y . the a b i l i t y to form u n r e s t r i c t i v e mappings allows relax to construct generalizations that have eluded other approaches  1  1 . 
	i 	introduction 
　　　the work described in t h i s paper grows out of an attempt to simulate the behavior of j u n i o r - h i g h school students learning geometry. an examination of the geometry textbook they were using   1   made it clear that students were expected to appreciate the s i m i l a r i t y of t h e i r exercise problems to the examples provided in the t e x t   and to use those examples as a guide in f i n d i n g s o l u t i o n s . protocol analyses of students using t h i s text suggests that students do often  but not always  appreciate the s i m i l a r i t i e s that are intended   1   . 
　　　one way to model such behavior is to represent the worked-out examples as  condition1 .........  =    a c t i o n 1   . . .   r u l e s   where the left-hand side describes the example problem and the right-hand side indicates the steps required for i t s s o l u t i o n . the description of an exercise problem can then be compared against the left-hand sides of these r u l e s . i n t e r p r e t i n g these rules as productions would imply that the d e s c r i p t i o n of the exercise problem would have to completely s a t i s f y a l l conditions of one of the rules before any action could be taken towards formulating i t s s o l u t i o n . in other words  a f u l l - m a t c h comparison using t h i s 
	this 	work 	was 	sponsored 	by 	nsf 	grant 	no. 
ist-1 to jane perlrautter and by onr contract no. n1-c-1 to john r. anderson. representation could only account for a student's a b i l i t y to remember the solutions to problems that have been solved previously. however  if instead of merely looking for a f u l l match we are able to f i n d a rule whose left-hand side  closely approximates  the description of the exercise problem  then we may be able to provide a computational account of what happens when a student recognizes the s i m i l a r i t y of an exercise problem to a previous example. 
       even if t h i s can be done  however  the success is achieved at the cost of a considerable complication in the notion of executing the right-hand side of a r u l e . in those cases where it turns out that a f u l l match is achieved to a r u l e ' s left-hand side  executing the right-hand side amounts only to a straightforward execution of a f u l l y i n s t a n t i a t e d procedure. however  in cases where only a p a r t i a l match has been achieved  the right-hand side actions w i l l need to be modified to r e f l e c t the departures from a f u l l match. this paper w i l l only be concerned with the question of how to partial-match problem descriptions in a way that properly models students' a b i l i t i e s to detect s i m i l a r i t i e s between problems. 
ii some absolute criteria 
       an approach which might be expected to y i e l d a s a t i s f a c t o r y p a r t i a l matcher would be to examine the operating p r i n c i p l e s of a f u l l matcher f o r a 
       production system and to determine which p r i n c i p l e s could be retained and which p r i n c i p l e s would have to be discarded. each condition in the left-hand side of a production rule is a proposition which can consist of constants  variables   e x i s t e n t i a l l y q u a n t i f i e d     or other propositions. as an example we have  believes vsubject   f l a t e a r t h       where   f l a t earth  is an embedded p r o p o s i t i o n . the v p r e f i x indicates that vsubject is a v a r i a b l e . we might choose to i n t e r p r e t the constants believe and f l a t as predicates and the constant earth as an argument of the predicate f l a t   but there is no need for the matcher to be concerned with these semantic issues. as the term proposition suggests   believes vsubject   f l a t e a r t h   ; can be true or f a l s e   but what is more important from the point of view of the matcher is whether there is some proposition in the data base l i k e  believes b i l l   f l a t earth   which can serve as i t s i n s t a n t i a t i o n . 
　　　a f u l l matcher uses the f o l l o w i n g c r i t e r i a to decide whether a set of i n s t a n t i a t i o n s constitutes 

1 

a satisfactory match to the left-hand side of a production rule: 
1. there must be an instantiation of each condition proposition. 
1. the constants contained in a condition proposition must also be contained in i t s instantiation. 
1. there should be a one-one function that associates each variable with a unique binding so that a l l condition propositions containing that variable have instantiations containing i t s binding. 
1. each condition proposition should have the  same  structure as i t s instantiation. in the simplest case they should have the same number of terms and corresponding terms should be in the same order. in some production systems allowances are made for unequal numbers of arguments or symmetric predicates; however  the important point is that there is never any ambiguity about whether an instantiation has the proper structural requirements and those that don't are simply unacceptable. 
a. failure of the absolute criteria 
　　　we now examine each of these criteria in turn to determine their s u i t a b i l i t y for partial matching. we w i l l find that while each constitutes a worthwhile goal for a partial matcher to attempt to achieve  so that a f u l l match w i l l be found if one is available   none of these criteria can be an absolute requirement if we want to be able to detect the same similarities that students can detect. 
1 . every condition has an instantiation 
　　　textbooks sometimes provide more information in the statement of example problems than is s t r i c t l y required for their solution. this extra information would prevent the examples from being seen as relevant to the solution of exercise problems not sharing those inessential features if we were to retain the full-match criterion that a l l propositions in a problem description must receive an instantiation. 
     many f u l l matchers w i l l allow two variables to be bound to the same constant; however  additional mechanisms are then required to deal with the inevitable cases where this is inappropriate. these additional mechanisms play no role in partial matching  so it simplifies the discussion to make the one-one assumption. 
1 constants 
　　　students find problems involving the algebraic relation     very reminiscent of the     versions of those problems. in such cases partial matches between these problems would have to violate the full-match criterion that a condition and i t s instantiation contain the same constants. the unsuitability of full-match c r i t e r i a  1   and  1  for partial matching is not controversial. a l l four algorithims reviewed in  for inducing a general description of a concept from examples can deal with these kinds of departures from a f u l l match. 
1. variable binding requires 1 functions 
imagine a person who has seen many national 
league 	baseball 	games  	but 	is 	watching 	american 
league 	baseball 	for 	the 	f i r s t 	time. 	in 	the 
national league  besides playing in the f i e l d   a pitcher takes his turn at bat; in the american league  however  the pitcher is replaced in the batting lineup by the designated h i t t e r . if the baseball fan tries to instantiate his pattern for national league baseball using the lineups for this game should he bind the variable v-nlpltcher to the pitcher or to the designated hitter  the correct answer seems to be both; to the pitcher if he is instantiating propositions describing the national league pitcher's role in the f i e l d   but to the designated h i t t e r when instantiating propositions about the national league pitcher's role as a batter. on the other hand  an american league fan watching national league baseball for the f i r s t time has the problem of too few players rather than too many. he is in the position of having the same constant  nlpitcher  as the binding of two different variables  v-alpitcher and 
v-aldesighitter. 

	1 	 b 
fig. 1: &  prove rn * oy. b  prove r'xn' - o'xy'. marked objects are known to be congruent. 
　　　fig. 1 shows two problems that some students can see as quite similar - fig. 1b being just an angle version of the problem in fig. 1a. this apparently requires that a partial matcher accept the proposition  angle vr' vx vo'  as an instantiation of the proposition  segment vr vo . that segment can be matched by angle is just another example of matching one constant to another. what is more interesting is that the second argument  vo  of segment must be bound to the third argument  vo/  of angle rather than to the second argument  vx. 

1 

dp predicates. 	also  	when a variable such as 
v-nlpltcher receives a second binding  a l l of the propositions mentioning that variable  whether they already have an instantiation using the f i r s t binding or not  are checked to see if they have an instantiation using this new binding. thus relax computes a l l of the kinds of mappings that kling claims are necessary for capturing the correspondences between similar problems and does so using  best use  criteria which express preferences that are meaningful only to a program that is aware that it has these options regarding the form of i t s mappings. 
a. best use of the condition 
　　　one use for the output from partial matching a set of conditions to a set of data is in computing a generalization  i . e .   a new set of conditions which receives a f u l l match when instantiated by either the original conditions or the original data* since the original conditions and the original data play entirely parallel roles in the definition of generalization  one is led rather naturally  though not inescapably  to the idea that the output of the partial match should not depend in any essential way on which set of propositions we call data and which set we call conditions. in fact  in implementing relax we found that there are computational advantages to viewing the matching process as searching for conditions to instantiate data at the same time as it is searching for data to instantiate conditions. for example  this viewpoint suggests that in addition to the requirement that each instantiation be the best available use of its data proposition  there should also be a complementary requirement that each instantiation be the best available use of i t s condition proposition. in this third  and last  of relax's relative c r i t e r i a for partial matching  cost is again measured in terms of multiple assignments; but since in this context conditions are thought of as instantiations of data propositions  a multiple assignment means that a constant in the data is the binding for more than one condition variable. the two instantiations mentioned above for  male v-nlpltcher  are equally good in this respect since both alpitcher and aldesighitter are bindings of only one variable; thus both instantiations are permitted in the partial match. however  any attempt to get a second instantiation for  male v-klcatcher  would be ruled out by this new c r i t e r i o n . 
iv some examples 
a. a generalization example 
　　　fig. 1 shows the generalization problem that led hayes-roth & mcdermott to be concerned with multiple assignments for variables. the generalization that hayes-roth a mcderraott wanted but were unable to get sprouter to produce was: 
there is a small square above a small circle and one of these small figures is inside a large triangle. 

when partial matching the description of example 1 using the description of example 1 as data  the variable v s q r 1 requires two bindings so that we can have both of the instantiations 

these two instantiations are taken from table 1 
which shows the f u l l set found by relax. the 1 instantiations in table 1 are the survivors of the 1 instantiations that relax considered in computing this match. of these 1 pairings  1  or 1% were rejected by the  best use  criteria without the need for any search at a l l . in 1 cases  pairings which satisfied these c r i t e r i a when f i r s t made subsequently were rejected by them as the match proceeded and better uses were found for their conditions or their data. 
table 1: the set of instantiations found as the partial match of the examples in fig. 1. 

　　　the demonstration that this partial match w i l l lead to the correct generalization w i l l have to be postponed u n t i l a later section which gives the details of the approach taken toward disjunctions. however  there are a number of things we can say at this point to defend the view that this is the correct partial match for these examples. the fact that exactly the same correspondences are obtained when example 1 is treated as the set of conditions and example 1 is treated as the data provides a demonstration that relax at least functions as intended. however  how can correspondences such as 

be defended  the answer to this is that there is an obvious alternative to viewing fig. 1 as two examples in need of a generalization. that alternative is to see example 1 as the situation at time  t1 and example 1 as the situation at a later time t1  where the task is to characterize the transformation that has occurred. one characterization of the transformation that changes example 1 into example 1 i s : 
the triangle that originally contains the square moves down to contain the circle. 
the questionable correspondences mentioned above have an obvious relevance for characterizing this transformation. 
b. a transformation example 
　　　the next example comes from observations of two subjects learning to program in lisp made by john r. anderson and his collegues at cmu. as an exercise in their textbook  these subjects had to write a lisp function to compute the powerset   i . e .   the set of a l l subsets  of the set  yall come back . this problem is quite d i f f i c u l t for novices and both subjects had l i t t l e success u n t i l they hit upon the representation for the problem shown in table 1. once in this form  it appeared that both subjects simply did some pattern matching to arrive at the following solution: powerset yall come back  requires two copies of p1werset c1me back  and the second copy must have yall consed onto the front of a l l of its sublists. 
table 1: the results of successive calls to the function powerset l . 

　　　in pattern matching terms  the need for one copy is t r i v i a l - it results from a f u l l match of the sets in p1werset c1me back  using the sets in powerset yall come back  as data. the need for the second copy  however  requires a partial match of p1werset c1me back  to the remaining sets in poverset yall come back . 
when the problem of finding this partial match 

fig. 1: the partial match obtained for the l i s t s in table 1. lowercase entries are from powerset  come back ; uppercase from powerset  yall come back . 
was given to relax the results were as shown in fig. 1. here each sublist was successfully matched starting from the l e f t end up u n t i l the point where the yall was encountered and also was successfully matched starting from the right end u n t i l the yall was encountered. extending the match from the l e f t end any farther was ruled out by the best-use-of-the-data and best-use-of-the-condition c r i t e r i a . 
　　　if the results of this partial match could be used as data by other rules  then we could construct a rule that would recognize that an atom had been consed onto each sublist because the characteristic transformation produced by cons is found in each case. in general  however  without some notion of a constituent  reiax would not be able to detect other cases where a l i s t  rather than an atom  has been consed onto each sublist. thus  while reiax f a l l s short of accounting for a l l of the pattern matching that subjects can display in an exercise like this  it does appear to be a promising beginning. 

　　　exclusive disjunctions arise in two different ways in the process of forming generalizations. what we might call external disjunctions have their source in the fact that for any set of examples e    . . .    e  there is the logically correct  but unillumlnating  generalization  or . . 
the goal of generalization programs that attempt to account for external disjunctions  1  1   is to merge as many of the  as possible into conjunctive generalizations so as to minimize the number of disjuncts in the resulting disjunctive normal form generalization. 

　　　internal disjunctions  by contrast  do not emerge u n t i l a partial match has been computed between two examples ei and ej. then each instantiation in the partial match 

yields the again logically correct  but unillumlnating  generalization 

just as in the case of external disjunctions  the way to produce pleasing generalizations seems to be to remove as many disjunctions as possible. the simplest case of this is the reduction of a l l disjunctions of the form  c or c  to the single constant ♀. less obvious cases where disjunctions can be removed are best understood by reference to fig. 1a which shows a portion of the f u l l network of bindings that can be extracted from table 1. 

fig. 1: a summary of selected variable bindings ja  from table 1 and b  from fig. 1. 
reiax operates on this network in order to determine a way of realizing each of these bindings in a generalisation. the goal is to choose a different label for each link in this network  where possible labels are the terms at either end of a link or the disjunction of those terms. link x in fig. 1a receives the label vsqr1 because three  conditions are satisfied: 1  vaq1 has only one connection to the network  1  vaqr1 can have the binding vsqr1 in a f u l l match  and 1  the label vsqr1 is not already used as the label for some other link. link z receives the label verlg because these conditions are also satisfied there. link y is then forced to have the label  vsqr1 or 
vcjj 1 f   because both of i t s endpoints have already been used as labels. 
table 1: the generalization resulting from the partial match in table 1. 

　　　reiax produces the generalization in table 1 from the instantiations in table 1. it can be seen that table 1 contains propositions expressing the generalization that hayes-roth & ncdermott wanted for the examples of fig. 1. 
　　　example 1 from fig. 1 producea a f u l l match to this generalization by matching the f l r a t member of every disjunction  while example 1 produces a f u l l match by matching the second member of every disjunction. in fact  there is a new full-match criterion requiring that the same position be matched in a l l disjunctions in a rule. now it should come as no suprise that when partial matching we w i l l want to violate this criterion and match different positions or even both positions of some disjunctions. however  this anticipates an approach to partial matching disjunctions that there is insufficient space to elaborate on here. 
　　　although the natural way of viewing the partial match found in the powerset example presented above is as a characterization of the tranaformations required to go from powerset come back  to powerset yall come back   it is also informative to look at the generalization that would result from this partial match. fig. 1b shows the pattern of bindings found for the partial 
match of the sublist  come  to the sublist  yall come  and indicated convergences that should lead to disjunctions. the generalization obtained for this sublist  ignoring the need for type-token 
distinctions  	is: 
 before lparen  come or yall    before  lparen or yall  come  
 before come rparen  
this generalization provides a disjunctive representation of the fact that yall ia an optional f i r a t element of these l i s t s . in the case where the yall's are present  the second position of every disjunction is matched and the f i r a t two propositions of this generalization are inatantiated by  before lparen yall  and  before yall come   respectively. on the other hand  when the yall's are absent  the f i r s t position of every disjunction is matched so in this case these two propositions are both instantiated by the single proposition  before lparen come . 
a  implications for semantic approaches 
　　　obtaining a sensible generalization for this problem is important because it helps bolster our confidence in the unorthodox correspondences made by reiax in partial matching these l i s t s . if a l e f t parenthesis must be matched to the atom yall to get the correct generalization  then what about partial-matching programs that compare the semantic categorization of terms before making assignments  surely these two terms are sufficiently different semantically that such programs should be reluctant to see them aa corresponding. 
　　　how serious a problem this poses depends largely on whether these partial matchers use semantic relatedness as an abeolute criterion or aa a relative one. programs such as kling's zorba  which make semantic relatedness an absolute criterion w i l l either reject the assignement of lparen to yall or w i l l have to decrease the amount of semantic relatedneas required to the point where this criterion has l i t t l e a b i l i t y l e f t to discriminate useful from useless matches. on the other hand  in winston's program  the closer two terms are semantically the more  points  that assignment contributes to an overall match score which determines the best partial match. by making semantic relatedness a relative criterion in this manner  winston allows for the possibility that other factors can compensate for the semantic divergence of two terms.  winston's partial matcher relies totally on one-one mappings  so presumably there is no way for his program to produce the correct generalization for this 
particular example  however.  
acknowledgements 
　　　the author would like to acknowledge the hundreds of hours of discussion that he has had with john r. anderson about these topics. the lack of a shared consensus on these issues has  if anything  only made these discussions more valuable. helpful comments on a previous draft of this paper were also provided by g. iba  j. perlmutter  m. schustack  and the ijcai reviewers. 

vi the last absolute criterion 
　　　now relax does obey one absolute criterion  namely  that a proposition and its instantiation must have the same structure. however  as was discussed above  the problem in fig. 1 may be seen as a version of the problem in fig. 1a using angles instead of segments. detecting the similarity of these problems requires that the condition  segment vr vo  have the instantiation  angle vr' vx vo' . to enable relax to find the correct partial match for this example we followed the lead of hayes-roth & mcdermott  cf. their use of scr's  and switched to a more fine-grained representation. finer grain was obtained by  exploding  each proposition in the description of these problems in such a way that every link in the semantic network representation of that proposition i t s e l f becomes a f u l l proposition in the exploded version. thus  segment vr vo  becomes the set of propositions 
 rel segment vsegro  
 arg1 vr vsegro   arg1 vo vsegro . 
for these condition propositions  relax finds the instantiations 
 rel segment vsegro  -   rel angle vangr'xo'  
  arg1 vr vsegro  -   arg1 vr' vangr'xo'   arg1 vo vsegro  -   arg1 vo' vangr'xo' . 
no use is made of the data proposition  arg1 vx vangr'xo' . 
　　　relax was able to calculate the correct partial match for the two problems in fig. 1 when they were described in this detail. in the process  arg1 was matched to arg1 five times and to arg1 three times. this success suggests that the relative criteria outlined in this paper are also adequate  at least in principle  for matching different structures. however  finding the 1 instantiations in the final match required searches to evaluate 1 candidate instantiations. thus it was clear that by recoding whole problems into this fine-grained representation we had placed a large computational burden on reiax. work is in progress on defining principles that would permit the program to switch dynamically to the more fine-grained representation for just those portions of the problem description where it is required. this capability would effectively free relax from the need to rely on any absolute criteria whatsoever. 
