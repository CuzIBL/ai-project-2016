 

kal  knowledge acquisition languaqe  is a language intended not for programming but for the expression of qualitative scientific knowledge. it is designed to accommodate both the semantic constructs most frequently found in scientific text  at present  excluding the description of change  and the knowledge storage and retrieval mechanisms of languages like c1nnlver  in which i t may be implemented. emphasis is placed on using  real  text  and in interacting with scientists  particularly biologists  to discover their particular needs. though kal is english-like  most natural languages could be substituted with no difficulty. 
introduction 

it is generally agreed that mathematics is not well suited to describe most biological knowledge  though whether this is an  unfortunate  historical accident or a reflection of how our minds relate to the world is an open question. what appears to be more appropriate  however  are the formalisms which are becoming increasingly well developed through ai research into representing non-quantitative knowledqe. for many reasons  however  some of which are justifiable  these languages  e.g.  conniver  tend to remain within ai laboratories. i wish to suggest that this tendency of  growing outward from the ai lab to someday intersect the real world   evidenced by the comparative lack of attempts to apply any developments  within ai  to problems not invented by ai researchers may  in fact  be detrimental to both ai and the rest of the world. with this in mind i have tried to place myself in an  interface  position  to try to bring together the types of knowledge that biologists need and the tools developed within the ai community for expressing qualitative knowledge. 
i am therefore in the process of defining a language  called kal  knowledge acquisition language   which is not a programming language but a language intended to be used by biologists or physicians to express as much as possible of the qualitative knowledge they use in their everyday work. the development is at the point  december  1  of making initial attempts to expose some biologists to the language  by means of a number of hours of explanation plus a 1 page  user's 
manual   written for persons unfamiliar with computers. to parallel kal's evolution through interaction with biologists  i have begun implementing some of it  using uci lisp and conniver  so that it can be developed both  on paper  and as a program  in the question answering system tradition. it is not anticipated that all of what can be defined on paper will be implemented. 
design criteria for kal 

the following desiderata were foremost in the design of the language: 
1  it must be suited primarily for the expression of that portion of biological  including medical  knowledge which is now expressed in natural language text. this excludes all forms of graphical and mathematical expressions  since the problem of representing graphical knowledge  pictures and diagrams  is a flourishing field in al  and representing mathematical knowledge is the bread and butter of computers. 
1  it must be comprehensible to persons having no experience with computers. hence  i have chosen to make kal look as much like a natural language  english  as possible  so that most kal sentences 
can be immediately understood by anyone familiar with kal who knows the technical vocabulary. most motivated biologists or physicians should be able to learn to write kal in a reasonable amount of time. 
1  the technical vocabulary must be determined by the user  in an open ended  i.e. continually extensible  manner. thus  the major parts of speech  used in an appropriate context  should be automatically added to the machine's lexicon. this forces some rigidity on the syntax  but this is not considered detrimental to content  only style. the meaning of any word is given by the totality of sentences in which it has appeared. the skeleton of the syntax and semantics are a reserved group of english* words and phrases  keywords  around which the user may invent arbitrary flesh. 
1  if it is to be lisp/conniver based  kal should interface as simply as possible to those aspects of the host languages which are useful  without becoming subjugated by them. one must resist the temptation to the seduced by the so-called  power  of such languages into doing only what they make  natural   and thereby avoiding what would be more appropriate to the task. 
1  deduction  used to answer questions and to partially check the consistency of new sentences  should rely primarily on a variety of special mechanisms  e.g.  set hierarchies  property lists and functional correspondences   and secondly  on the  problem reduction  paradigm a la planner. question posing is to be in the form of normal declarative sentences having  blanks  to be filled in. 
1  constant attention is maintained while encoding a text for those sentences which cannot be properly handled in the current  static  version of kal  particularly those which describe actions or change. these are carefully noted in anticipation of a future  dynamic  version. 
*they could be just as well chosen from many other languages  suggesting the attractive possibility of easy translation for kal-based knowleoye. 

1 

major features of kal 

the user is encouraged to think in terras of set hierarchies. sets are denoted by noun phrases  hp   in which the noun may be either singular or plural  either denoting the same set. the usual terminal v rule applies for the plural form unless otherwise stated  as in 
1 man 
men 
underlined phrases are keywords. the complement of a set does not exist as a set; the notion of a  constraint   see below  handles negation  as well as certain union-like constructs. sets are not intersected directly; for example  if canadians 
 equivalently  canadian  is a set  one may use canadian as an adjective as well  before a noun  and write either of: 
1 every canadian man is  a canadian 

1a canadian men are canadians 
these sentences are synonymous  and either creates the subset canadian men of canadians.  when discussing kal sets we use the plural form by convention . it is automatically known to be a subset of men. 1 d  equivalently are  is a keyword indicating set containment which causes efficient storage of this fact. 
nps may have keyword quantifiers  e.g.  each  every  some  etc.  at the beginning  followed by arbitrarily many adjectives  a noun  and then possibly some subordinate clauses or prepositional phrases. one either creates a new set by using a new np  which must be defined to be contained in some existing set  or refers to an existing one. the following sentences illustrate some of these ideas. 
1 john is a man 
this sentence creates the set man if it is new. 
1 john bought car/1 
john is an individual  a singleton   but sets without proper names may not be created  e.g.  a car   hence we invent the name car/1  the machine may assign the number . definite articles are used in restricted contexts; e.g. the and a may be used to refer to a set but not to create one*  as in: 
1 the man who bought a car |s rich 
the np here denotes john  since the subordinate clause is used in a pattern matching fashion to locate the x which is a man such that x bought y and y is a car. is in this context is interpreted as a keyword associating the adjective rich with the set john. sets may be second order  i.e.  may have sets as instances  and may appear quantified in certain contexts. 
*except in certain  generic  contexts. 
one-to-one and many-to-one correspondence 

the user is also encouraged to think 1n terms of one-to-one and many-to-one links  or functional correspondence between instances of sets  be they individuals or other sets . these links arise 1n several ways  e.g.  through  for all ... there 
exists ...  statements  such as 
1 each person has a home 
1 each woman likes her men 
has is a keyword signifying any functional  manyone  correspondence. sentence 1s an example of second order quantification  i.e.  a separate subset of men may be inferred to exist for each individual woman. her 1s a keyword denoting the existential quantifier following the universal each. 
a second source of correspondence links arises in the notion of structures  i.e. either physical structures  things  or mental ones  ideas . the keyverb hap  for has as parts denotes this relation  as in: 
     1 each person hap 1 body  1 soul 
the comma construction saves writing 1 sentences. if there are bodies other than human ones  one must write body of a person to distinguish this one. hap links are 1  unlike has. one might define a family thus: 
     1 each couple hap 1 man  1 woman 

     1 each family hap 1 couple  some children 

if it is known that bill is a man  then 
     1 smiths are a family 
       1 smiths hap  bill  mary   peter  ann   may be understood  with the machine warning of the assumptions i t has made: mary is a woman and the extensional set {peter  ann} are children. such references to individuals are relatively rare 1n technical literature  however  where by individual i mean of course  not a human in general  but a specifically named  proper noun  member of a set. thus kal semantics  unlike those of most natural language systems which are oriented towards discussing human relations  are biased towards discussion at the set  generic  level. its use of articles   a  the  which we haven't space to discuss  reflects this. 
adjectives and attributes 
the keyverb is  or are  is used to associate an adjective with a noun. this association may also be  equivalently  effected by placing adjectives before the noun  as in: 
     1 big black bears are dangerous which creates the subset of bears denoted by dangerous big black bears  with the adjectives in any order.  the problem of how to deal with the resulting six intervening subsets of bears is an annoying one which i have not yet resolved. fortunately  three or more is type adjectives seem to be rare . 

1 

usually  one wishes to associate a property with a set under some named relation  usually called an attribute  which may be introduced by the user by hyphenating with is: 
     1 each man's sex-is male 
       1 each apple's color-is red 
one may also hyphenate is the other way  as in 
     1 sky/i is-located above ground/1 

the use of prepositions like above  and cases  is described below. note that the sky is not allowed here - one may only the the to create a generic noun  not an individual. 
constraints and incremental learning 

much of our knowledge comes to us in stages  each being in some way a refinement of what was previously known. knowledge acquisition systems ought to be designed to accept information in this way  yet little seems to have been done to discover the underlying processes that adults use  though much has been done by psychologists in establishing how concepts evolve in the child. within ai  the thesis of p. winston  1  is one of the few places in which learning by stages is investigated  although he does not discuss formal linguistic aspects there to any degree. 
in this regard  i have found that it is useful to regard the subject-verb pair  for many verbs  as a function  the verb  - argument  the subject  pair. this is usually useful for verbs which define attributes  and particularly those which have either numerical values or those which may take only a small finite number of values. one can then define a number of keywords called constraints which specify the allowed  values  for these subjectverb pairs. for example  instead of 1  we might prefer: 
1 each apple's color-is one-of  red yellow green  
further examples include: 
1 each adult's age-is gt 1  
1 richard is n1ne-1f h1nest clever loved  
1 children like at-least-one-qf candy spi-
nach doctors  
1 just-one-1f bill john  is a liberal 

1 the price of a car is gt the price of a 

bicycle  
many details surrounding the use of such constraints must be carefully spelled out  particularly when they are used in the more general ways illustrated here. for example  1 clearly should mean that each child may have her/his own choice  so that the implicit quantification rules must be stated. it is in these kinds of details that i anticipate the most difficulty both in teaching such a language to non-mathematically experienced persons  and in implementing i t . each contains considerable logical meaning  whose function in the computer must be to assist deductions  and monitor future inputs. by the latter  i intend that each new statement be monitored so that if it is a further constraint on a previous one  or a contradiction  the user is to be notified. clearly  it is not possible to do this to arbitrary logical depth; some practical compromise will have to be accepted. 
while learning through constraints is an essential part of any knowledge acquisition system  it is given a secondary role in kal  since it was felt that other considerations are more fundamental. 
time  change and actions 

the problem of representing change has been given surprisingly little attention in the ai literature. the series of three papers by hayes  1 1  is essentially the only theoretical discussion of the logic of change in this literature. philosophical logicians have written at length about such matters; i have not been able to find anything in an admittedly imperfect search of this literature  e.g.  the books edited by rescher  which would give a hint as to how to write programs. 
one turns then to the current  brute force  approach to change used in ai programming: a situation or context is a group of  true  statements corresponding to a fixed state of the world  and an event  a change or action  is simulated by adding to or removing from this group to produce a new  after  situation. some recent reports using this approach  originally popularized in strips  fikes and nilsson  1  are sacerdoti  1   biss et  al  1  and hendrix et al  1 . it is proposed to follow suit by providing such rudimentary descriptions of sequences of events via the context mechanism of conniver. in this respect  the design of kal will necessarily be influenced by the implementation language  a potential im pediment to finding  what you really want  rather than  what's available . 
kal verbs do not at the moment have any  deep semantic  structure associated with them. there 1s no attempt to handle time reference  tense  or verb hierarchies; verbs serve merely as a constant in a pattern  along with appropriate keywords. it is felt that the very complex problem of a deep representation of change and the associated natural language structures could not be given prominence without jeopardizing the many other aspects of this work. thus kal statements now express that appreciable part of knowledge which is timeless  without reference to change . i term this version  static  kal. 
verbs: static worlds  cases and locations 

now i will describe  static  kal verb structure. the user is directed to choose verbs in the present active plural  e.g.   run   rather than  runs  or  is running   etc.  and to use as obvious ones as possible  e.g.   run  rather than  canter  . following the verb there are one or more cases  each denoted by certain keywords  usually prepositions   except the  direct object  case  which has no keyword and must come immediately after the verb.* several alternate construc-
*for a discussion of the linguistic notion of case  see bruce  1   kintsch  1   and fillmore  1 . 

1 

tions are possible  such as  is-xxxxed   e.g.   is-located  . 
the cases are noun phrases  as in: 
1 every commuter drive s  his car from 

ht1~home to his job via ht| streffs  
dstng his car 
in 1  the direct object his car  is associated with commuter through a  for all there exists  link  and occurs as well as instrument. the unnatural his streets is necessary to associate a set of streets with each commuter. any verb suffix in     is to be ignored by the machine; thus there is no check for subject-verb agreement. 
1 each amount-of liquid flow s  from its 

source to its sink through its chanret 
in 1  the complexities of dealing with mass nouns are involved. this problem is vital to biological knowledge  and has received no attention in the ai literature. i am trying to deal with it by key-
words such as amount-of which identifies liquid as a mass noun  and creates the equivalent of the individual for discrete nouns. 
the prepositional keywords which imply a location in fact refer to the implied location associated 
with each thing; i.e. there is an implicit  physical  statement: 
1 each thing has a location 

underlying all things. problems associated with underlying physical assumptions are discussed further below. 
implication statements 

up to now  the only logical connections between kal statements  which have all been propositions  are those which are  built in  to the semantics  such as the implications allowed through set hierarchies and correspondence links. to relate arbitrary statements  implication statements are introduced  either with if ... then ...  or iff  allowing and or or groupings of the antecedent. the semantics are borrowed directly from planner. 
thus  if we have 
1 if a person is rich or a person is 
hfalthy thenthat pelbofi is fortunate 

then any request to establish  s  fortunate for any subset of persons will redirect the search  establish the subgoal  for first   rich  or failing that  is  healthy. this approach is well established  and is easily handled by conniver. that is a keyword binding the following person to the previous one  i.e.  identical substitutions must be made. 
lacking the mechanism to describe actions as sequences of static contexts  one may nevertheless use chains of implication statements to determine if a particular statement  representing a desired situation  can come about. it 1s felt  however  that this is not sufficiently satisfactory to represent any but rather trivial actions. 
it appears that implication statements should only be used within a situation  just as 1n the strips approach  predicate calculus deductions do not transcend changes in the world state. 
an example from basic neurology 

a few sentences will now be presented which have been taken directly from a basic neurology textbook  gatz  1  used by many medical students. after each sentence  in quotes  follows the kal translation  omitting obvious or trivial sentences for brevity  such as plural definitions   plus a discussion of various features. 
 the neuron  nerve cell  is the functional and anatomical unit of the nervous system . 
1 each nervous system hap some nerve cells 

this sentence introduces four sets: systems and nervous systems  cells and nerve cells  with the obvious set containment. note that nervous and nerve are adjectives. the 1 to 1 link from each nervous system to its own subset of nerve cells is established. 
1 a neuron is-same-as a nerve cell 

is-same-as is a keyverb denoting synonomy. the phrase nerve cell thus becomes interchangeable with neuron. 
1 the functional unit of the nervous system is-same-as thofuffon 

the sets unit and functional unit are introduced  the latter being related to each nervous system by hap  implied by of the - functional unit of the nervous system becomes another name for neuron. 
 each consists of a cell body  cyton  and one to several dozen processes of varying length called nerve fibers . 
1 each neuron hap 1 cell body  1 to 1 processes 
in contexts which take a numerical value  a looser constraint may be used  such as upper and lower bounds. of course these constraints ideally should not be sharp; the use of such constraints is a rudimentary attempt to introduce fuzzy knowledge. each neuron now has associated  through 1 links  an individual cell body  a subset of body  and a subset of processes not exceeding 1 in size. the comma construction saves writing two sentences. to continue with this sentence: 1 the cell body of a neuron is-same-as the mon 
1 the processes of a neuron are-same-as jieffve fibers 
1 the length of a process is from 1 to 
	t1ff cm. 	- 
only 1 requires comment. every process is defined to have associated with i t  has  a length  which is known from the remainder bt~the sentence to be a numerical attribute. it may therefore appear hyphenated with is  as  for example  1n: 
1 process/1 length-is 1 cm 
1 if sentence 1 were entered  the violation of the constraint established in 1 should be noted. 
numerical attributes may carry units. 
 dendrites are short branching fibers which normally receive impulses at their peripheral terminals and conduct them toward the nerve cell body . 
1 each cyton hap some peripheral terminals 
1 if a dendrite receive s  some impulses 
st 1me-1f its peripheral terminals then that dendrite conduct s  some impulses 
twrd its cyton. 
here we run into the problem of expressing a dynamic fact  a sequence of events  in static kal. one must use an implication statement in order to obtain the desired cause-effect relation between the two statements  as discussed earlier. the 
machine can only use this statement  backwards   i.e. to search for an appropriate instance of the antecedent to establish an instance of the consequent  since i t functions as a consequent theorem. what is really intended by this sentence is more like a  demon    triggering  the assertion of the consequent should the antecedent be asserted. rather than hastily introduce such machinery  a temptation when using a language like conniver  to appear to have some capability of handling sequences of events  1 prefer to first gain more experience with the static worlds from which dynamic worlds are probably to be built  and then to introduce problem-determined language  rather than connlver-determined  for events. 
although the two occurrences of dendrite are bound by that  the two subsets of impulses are not necessarily the same. we are trying to treat the notion impulses as if they are the things when  in fact  they are a sequence of events. one can get away with this to some extent; a proper solution will have to be found in the dynamic version of kal. 
 the term axon  in a strict sense  applies to a single long fiber conducting impulses away from a nerve cell body . 
1 x is  a nerve fiber and 
x  length-is gt 1 cm tand 
x conduct s  some impulses away-from jtts 

cyton 
iff x is-same-as axon 
here we have an appropriate use of an implication statement  in fact an equivalence.  there remains  however  the necessity of treating the conducting of impulses as a static phenomenon . the reader may wonder:  why not just have three statements about axons   the distinction lies in the manner in which the fact retrieval algorithm ought to treat the two possibilities. given 1  the algorithm knows these three facts to be tightly associated  i.e.  should facts involving axons appear during some discourse  these three facts are to be immediately given prominence  over other facts about axons  in subsequent processing. the same should occur i f   say  two of the three appear  
i.e.  the third might be sought  to see if we are talking about axons.* given the three facts independently  no such connection would be inferred. the use of x as a bound variable  while looking less like english than previous statements  makes possible the neat conjunction of conditions without messy  english-like  syntax. one should only carry along such syntax as long as its clarity to complexity ratio is rewarding. statements such as these  involving considerable complexity of at least one side  pose difficult problems for the question-answering algorithm  and should be good counter-examples against a pure top-down  problem reduction  or undirectional heuristic search  procedure. 
related work and discussion 

several other projects bear similarities to kal. w. martin and coworkers at mit are developing a language owl  formerly mapl  in which to discuss the  world of business . like kal  it is set oriented  conniver based  and uses a restricted syntax laced with keywords  though it is difficult for non-lisp programmers to read. it also includes second order sets  functional correspondence links  and case structure. they do not say they work with actual business texts  not surprisingly   nor do they claim running programs. mapl-owl appears to be the project most similar to kal. 
another similar undertaking has been described by isner  1  and pople and werner  1   in which neurological knowledge is encoded in a simplified english  for input to a question answering program written in the lisp extension gol  pople  1   which paralleled some of the innovations of planner. the emphasis seems to have been on using actual scientific knowledge  and on getting a program running. there is no discussion of the syntax of the language  nor of the semantic structures needed for such text. the examples given however are among the most extensive that have appeared of this type of nl programming. 
a great deal of careful work has been done by the 
swedish group  sandewall  1; makila  1; palme  1 1  in defining various formalisms for representing nl semantics  though they consider general nl. in particular  pcf-1 is a predicate calculus-like notation for a broad range of nl constructs  though it does not appear to have been implemented. 
there have been numerous other well known attempts which space does not permit discussing. most of these try to consider nl in its full generality  particularly in its verb structure. any of these programs  however  will accept only relatively few nl sentences  and the problem of defining just which these are is often ignored  or if attempted  is too complex to be readily understood. the result of attempting such generality would then appear to be that for anyone not deeply involved in the programming  writing a body of text acceptable to the program is virtually impossible. since kal has a relatively rigid syntax  and semantics restricted to scientific needs  their description is sufficiently succinct that nonspecialists in computers may learn i t   increasing the possibility of such persons being able to communicate with a machine. 
1 * i.e.  we're in the axon frame  to use the current jargonology . 
the main advantage of the  artificial  language approach  however  is that i t focuses attention on the semantic essence of each sentence being translated. while encoding text  one must constantly 
ask which kal construct is appropriate  noting those sentences which cannot be adequately represented. this exercise is an essential part of the development of artificial languages  and tends to be neglected when the designers invent their own text. 
i have found at least four common types of sentences which do not translate well  or at all  into kal. obviously  the most serious limitation is with dynamic descriptions  as we have noted. the assertion of a proposition should not be confused with the simulation of the event it describes  nor should implication statements serve as causal links between statements  which  not being situations  should not be  caused  . a second common problem  also illustrated in the example  is in handling fuzzy information - recall how i substituted a sharp value for the adjective  long . a first step toward alleviating this problem would be to introduce fuzzy sets and truth values  which has been done by le faivre  1  in his language fuzzy  a conniver-like lisp extension. a third problem concerns complex spatial relationships  a frequent requirement in physiology. probably  the blocks world approach of listing coordinates will not be feasible for tortuous structures. until more subtle methods of describing complex objects are developed  such knowledge will have to be expressed in propositions with simple prepositions where possible  and ignored otherwise. the fourth problem involves imbedded sentences - sentences which refer to other sentences. i have made no attempt to consider this problem in kal; moore  1  has discussed some possible approaches. 
expressing the underlying laws of physics  which include the  frame problem   that a machine must know to make decisions which seem trivial for even animals  is well recognized as one of the most complex tasks in representing knowledge in computers. one such law  statement 1  was briefly touched upon earlier. this is a static law  and is expressable in a kal statement. there are many such laws  usually implications involving prepositions. one may imagine  for example  a transitivity law in kal  the kind one finds in blocks worlds. the problem  of course  is to define for the machine all the laws it will need. 
it is doubtful that this can be done in any other way than the way it is done now  at least for the foreseeable future. that is  one must postulate a set of laws and monitor the machine's actions to detect errors  omissions and contradictions.  note that questions of logical consistency become extremely difficult for languages such as kal in which we have no metatheorems . i suggest  though i do not yet have the experience to confirm i t   that debugging a system which operates on kal statements should be far easier than one using a less transparent notation  in which the human must perform a task which is wery unnatural: manipulation of abstract symbols. since the meaning of a 
kal statement can be comprehended at a glance  one can quickly sift through a page of definitions looking for suspicious ones. thus the syntactic and semantic  distance   if i may coin such a term  between the conniver expressions and the corresponding kal sentences should be many times  less  than the distance between more general nl sentences and lisp encodings of the equivalent predicate calculus  to take an extreme example. this transparency of notation should be of particular value when it comes to dealing with dynamics  which the state of the ai programming art suggests are to be modelled by situations as defined earlier  since the number of statements that the human must monitor is greatly increased. rather than conjecture further in this direction  i would like to discuss one additional point. 
there is a whole range of knowledge that cannot be expressed even in a dynamic kal without enlarging it so much as to make it a complete  programming  language. i have in mind the so-called  procedural knowledge   which amounts to introducing the notions of 'execution    flow of control    variables   etc. if a language is to be practically usable by nonspecialists in computers  1t must not become as complex as the most complex  programming  language  e.g. conniver . hence there exists a very murky area of language definition which would be adequate for procedural knowledge without becoming incomprehensible to non-computer specialists. 
there is one possible direction in which a language like kal might be extended without making i t too complex  and which i intend to try to integrate with the dynamic extension. i have in mind the type of facility for simulating dynamics provided by the discrete simulation languages such as gpss and simula. persons relatively unsophisticated in computer science seem to derive considerable benefit in describing dynamic phenomena in these languages  and in interacting with  simulation models . i t would seem that a synthesis of the ai approach to dynamics and the  simulation  
approach is due. 
another possible advantage of an artificial language for science should be mentioned in closing. scientific discourse  both informal and formal  is often alarmingly vague and verbose. should a language like kal become well enough developed  sden* tists might be persuaded to express their findings and conjectures directly 1n it  eliminating much volume and ambiguity. the development of global computer networks would make possible instant sharing of such knowledge  and the problem of having the surface structure of kal-like language look like most nls is  of course  trivial. thus scientists of many tongues might communicate directly and clearly. the alternative for such networks is to allow arbitrary nl to flow through them  a measure sure to cause communication blockages as severe as our present paper system. 
but that is too futuristic. 

1 

epilogue  june 1  

in the paper  at the time of writing  dec. 1  it was indicated that the intention was to attempt to implement some of kal in conniver. subsequent experience actually trying to use conniver resulted in the following conclusions: 
conniver is not sufficiently well documented and debugged to make using i t at  remote  sites  where  remote  probably means  off the arpa net   a rewarding experience. conniver is possibly adequate for certain toy world problems  but is too inefficient to be a suitable language in which to implement any practical natural language system. this was no surprise  since others had made similar observations. it was felt  though  that the experience was worthwhile so as to better understand the concepts and the pitfalls. a better alternative may exist in the language 1.pak  see the paper by l.f. melli in this proceedings . 
acknowledgment 

the author gratefully acknowledges the support of the lkf. killam memorial fund of the montreal neurological institute. 
