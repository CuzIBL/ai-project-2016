 
recently  attention has been focused on providing knowledge acquisition  ka  support for building practical planning systems. such support is needed to guide a knowledge engineer in selecting planning methods  as well as for building and validating the planning knowledge-base for a given practical domain. following current practice in knowledge acquisition  developing ka tools for planning requires that a number of planning knowledge components are made explicit. this includes explicating  i  a planning domain ontology   ii  a library of problem-solving methods  psms  used in planning  and  iii  a set of domain requirements that are used to select a suitable psm. in this paper  we summarize the planning knowledge components which we have identified in previous work  and  based on these  present an implementation  par-kap  that can exploit these models to aid knowledge engineers in constructing practical planning systems. 
1 	introduction 
constructing a planner for a particular application is a difficult job  for which few knowledge acquisition tools currently exist. due to an increasing need for the building of planning systems that can handle real world applications  knowledge engineering efforts need to focus 
on the following questions: 
1. is a particular practical planning system from the literature suitable for a given domain  
1. what type of domain knowledge is required for the application and how can it be represented  
*this research was supported in part bv grants from onr 
 n1-j-1   arpa  n1oi1-io1o  dast-1  f1-c-1   and the arl  daah1 . dr. handler is also affiliated with the tim institute for systems research  nsf grant nsf eec 1 .leliane is also supported by cnpq a brazilian research grant. 
   * author is supported by the netherlands computer science research foundation with financial support from the netherlands organisation for scientific research  nwo   and by the european commission through a marie curie research grant  tmr . 
1 	planning and scheduling 
roetersstraat 1  1 wb amsterdam the netherlands 
1. what are the most suitable planning methods for the domain  
1. what control strategy can best satisfy a desired sys-tem performance  
　although much is known about planning systems  and the literature is extensive  cf.  tate et a/.  1; tate  1   the focus of past work has primarily been on the development of planning systems  as opposed to answering questions such as those above. at the same time  while knowledge acquisition research has focused on such questions for other al tasks  schreiber et al.  1   little attention has been given to planning. in is only recently that research has started to focus on this sort of ka for planning  valente  1; benjamins et ai  1; de barros et al  1; cottam and shadbolt  1; chien  1; tu and musen  1 . this work primarily builds on modern approaches to knowledge acquisition which stress the importance of libraries with reusable modeling components to support the knowledge engineer in constructing the required system model  breuker and van de velde  1 . examples of library constituents include domain models  domain ontologies  generic tasks  problem-solving methods  inference structures  control knowledge  etc. 
　this paper builds on the work referred to above  and explores the use of a library of problem-solving methods for planning  which consists of three main building blocks. 
1. a set of typical knowledge roles used in planning methods. these roles characterize the main types of domain knowledge used in planning  e.g. the domain ontology for planning. they also help in understanding the way knowledge is structured by providing an index to the domain models used to play these roles. 
1. a set of basic methods used in composing a planning strategy. a task-method decomposition structure indexes these basic methods by defining the different ways in which a planning task can be  recursively  decomposed into subtasks 
1. a set of suitability criteria for problem-solving methods which is used to specify the connection between the knowledge roles and the basic methods by defining what domain knowledge a method needs in order to be applicable in a particular application. 

   in previous work  we have presented different parts of the library: knowledge roles and domain models  valente  1   basic methods and the task-method decomposition structure  de barros et a/.  1   and suitability criteria  benjamins et ai  1 . in this paper  we focus on the extension of these methods to control knowledge  and on the implementation of a ka system for supporting the development of planners. in section 1  we briefly summarize our past work on a ka framework for planning and on how it is extended for control knowledge. this is followed in section 1 with a discussion of par-kap  an implemented ka prototype that uses our framework. in section 1 we give examples of how parkap supports the construction of planning systems. itshould be noted that the aim of this work is not to cover all existing planning methods in the ai literature1  but to show how an extendible library can help to construct planners for particular application domains by providing a high-level  abstract synthesis of the available planning methods. 
1 	a library of psms for planning 
in this section we present an overview of our previous work and discuss the extension to control knowledge for planning. 
1 	a domain ontology for planning 
one of the critical elements in the analysis of a planning method is specifying the different roles that domain knowledge plays during the planning process. in the planning literature  domain knowledge is defined as static knowledge about the world which is only consulted during planning  but not manipulated. however  from a ka perspective  we must consider how this same knowledge is used by the planner itself in defining its dynamically changing  model  of the world. thus  we identify two roles for domain knowledge: static and dynamic  schreiber et a/.  1 . 
static knowledge roles in planning 
figure 1 shows the hierarchical organization of static knowledge roles for planning  valente  1 . the leaves of the hierarchy of static roles are associated with the types of domain knowledge  domain models 1 that can play these roles  through the  plays  relation . 
　the plan model role defines what a plan is and what it is made of. it consists of two parts: a world description and a plan description. 
　the world description role describes the world in which planning occurs. it is comprised of two sub-roles.  1  the state description role  which contains the knowledge necessary to represent or describe the state of the world  for example  a set of first order predicates as in strips or a set of fluents from the situation calculus 
 mccarthy and hayes  1  .  1  the state changes role explicates the information connected to the specification 
1
　　in particular  we concentrate on what are known as  classical  planners as defined in  hendler and mcdermott  forthcoming . 
     1 our use of the term domain models for this knowledge is based on the use of the term  model  in ka  as opposed to in planning. 

figure 1: hierarchy of static roles in planning and the corresponding domain models that can play these roles. 
of changes in the state of the world  e.g.  strips-like operators or hierarchical task networks  htns  . 
　the plan description role describes the structure and features of the plan being generated  and comprises two sub-roles: plan structure and the  optional  plan assessment knowledge.  1  the plan structure role specifies how the parts of a plan  actions  sub-plans  are assembled together. it has two sub-roles:  a  the plan composition role  which describes whether the plan composition is total or partial order  whether it includes iteration and/or conditional operators  and whether the composition is hierarchical  i.e. whether plans can be recursively decomposed into sub-plans    b  the state change data role contains additional information about the plan such as interval constraints for binding the variables involved in the state changes. it is also possible to assign different resources to each state change or sub-plan. two partic-
ularly important resources are agents and time.  1  the plan assessment knowledge role determines whether a certain plan  or sub-plan  is valid  hard assessment knowledge   or whether a plan is better than another  soft . based on this knowledge  a plan can be modified or criticized. an example of hard plan assessment knowledge is a rule-based-criterion which could be used to find out if a condition is true at some point in the plan  as in the modal truth criterion in tweak  chapman  1  . another example is the causal-link knowledge used in 
snlp  mcallester and rosenblitt  1 . an example of soft assessment knowledge would be the user preferences which can guide planning in the sipe planner  tate et al  1 . 
dynamic roles in planning 
dynamic knowledge roles characterize planning in terms of the relevant variables whose values are constantly updated during the planning process. the dynamic roles include:  1  the current state role  which is initially filled 

nunes de barros  hendler  & benjamins 	1 

by a description of the world at the beginning of the plan  but is subsequently modified to represent intermediary states in the plan.  1  the goal role  which describes the active goal or subgoal being worked on by the planner. the content of goal can be a set of conditions or a set of actions to be accomplished. initially  this role points to the original goal  and during planning it may be updated with subgoals or decompositions of the original goal.  1  the conflict role contains the result of checking the plan for inconsistencies with respect to its conditions.  1  the plan role is a composite role consisting of  a  plan-steps   b  ordering constraints over the plan-steps   c  variable binding constraints  and  d  auxiliary constraints that represent temporal and truth constraints between plan-steps and conditions. 
1 	the tasks and methods for planning 
based on an analysis of many classical planning systems  we have identified relevant tasks and problem-solving methods. we organize these into a task-method decomposition structure  orsvarn  1  and show these in figure 1  where ellipses represent tasks and rectangles methods . a method executes  solid lines  a number of subtasks and a  sub task can be performed by alternative  dashed lines  methods. the leaves of the task-method tree are called primitive-methods and the tasks they perform  primitive-tasks. methods have two additional types of knowledge associated with them  not shown in the figure: control knowledge  section 1  and suitability criteria  section 1 . 
　the class of planners we are dealing with share a general  high-level problem-solving method called proposecritique-modify  pcm   chandrasekaran  1. that is  the planners all contain in one way or another these three basic tasks:  i  propose expansion   ii  critique plan and  iii  modify plan. planners differ in the problem solving methods  psms  they use to perform these three tasks. these differences also reflect how planning knowledge is represented. for example  in figure 1  the propose-  method consists of the three subtasks: select goal  propose expansion  and test for unachieved goals. the propose expansion task can  in its turn  be realized by three different methods: smart propose  goal achievement propose  and decomposition propose. for a detailed description of all tasks and methods involved  see  de barros et 
al.  1 . 
1 	control knowledge 
the task-method decomposition discussed above  defines each method in terms of  sub tasks. during planning  these subtasks can be executed in various ways by the application of different control regimes. in fact  many planning systems from the literature differ from each other only with respect to their control knowledge. therefore  we associate control knowledge with every psm that can be decomposed into sub-tasks. control knowledge includes the steps of a strategy  the order between them  conditions  loops  backtracking points  exit points  etc. 
     1 in the literature  planning algorithms are usually not described in a common terminology. we have tried to choose fairly generic names that capture the whole array of these approaches. 
1 	planning and scheduling 

figure 1: the task-method decomposition structure. solid lines stand for executes  a method executes its subtasks   dashed lines denote performed-by  a task can be performed by alternative methods . 
　the specification of control knowledge is important because it lets us relate the individual tasks and methods to specific planners. we do this by recognizing certain patterns of control as corresponding with well-known planners when possible. in some cases  we can recognize a well-defined pattern corresponding to a planner from the literature  and recommend to a user the use of that algorithm  i.e.  strips  nonlin  sipe  snlp  ucpop  etc . in other cases  we can recommend certain control regimes that may be of use in implementing a planner for the specific application. we refer to the first of these cases as a match with a  fully-specified  control regime  and the second as matching a  partially-specified  control method. 
　as an example of a fully-specified control structure  the following would be the definition in our system of the snlp planner  mcallester and rosenblitt  1 . 
1. test-for-unachieved-goals  method: agenda-based-test  
1. if goal = empty then exit 
1. else select-goal  method: random-select  
1. propose-expansion  method: goal-achievementpropose ; backtracking-point 
1. interaction-critique  method: causallink-based-critique  
1. consistency-critique  method: constraint-propagation  
1. if conflict 』 empty then 
1. modify-plan  method: causal-linkbased-modify ; backtracking-point 
1. else 	; recursive-invocation 
　besides these fully defined algorithms  our analysis of classical planning systems shows that there are some other control features that are common between multiple algorithms. for example  in many planners a test-forunachieved-goals task is used as a termination-point  the 
propose-expansion task is a backtracking point  a selectgoal task is always executed before the propose-expansion task  etc. we can exploit this by including these pieces of control knowledge in the ka system for making suggestions when one of the known control regimes is not a perfect fit. an example of the specification of one of these partially-specified control structures is the method propose-critique-modify: 
tasks: 
step-1. propose; isa backtracking-point and exit-point step-1. critique; isa fail-point 
step-1. modify; isa backtracking-point and 
                 has-a cond:  conflict 』 empty  control ordering: step-1 is-before step-1 ' 
1 	the suitability criteria 
the use of suitability criteria for establishing the applicability of methods based on the domain specification is an important part of knowledge acquisition  benjamins  1 . in our work  each planning method is associated with such criteria to specify constraints on the domain features used to fill a knowledge role. for example  the decomposition propose method requires that the static role world description is fulfilled by the domain model htn. the smart propose method requires the two role fillings plan composition = total order  and world description = strips-like operators. similarly  suitability criteria are used to establish the connection between the control structure of a method and the domain knowledge. a complete description of the suitability criteria we use is beyond the scope of this paper  but see  benjamins et a/.  1  for a complete discussion. 
　in par-kap  we have also defined a number of methods corresponding to well known planners  like strips  
nonun  sipe  snlp  ucpop  etc.  which correspond to specific subtrees in the task-method decomposition described previously. these methods are directly linked to their primitive-tasks and respective primitive-methods. an example is shown in figure 1. these specialized methods are used during the ka process as described in section 1 below. 

figure 1: the snlp method in par-kap. 

1 	par-kap: an implemented ka tool 
as discussed in the introduction  the goal of defining a ka library such as the above one is to allow the implementation of a ka tool for developing planning systems. we have implemented a system called par-kap which uses the knowledge framework above for this purpose. in this section we briefly present implementation details and examples of the use of the system. 
1 	implementation 
par-kap  for parka for knowledge acquisition in planning  is implemented using the parka knowledge representation system developed at the university of maryland  andersen et a/.  1 . parka is a frame-based kr language which can be used to represent an ontology consisting of classes  subclasses  and individuals and properties of these. parka is implemented in c  using relational databases to provide scaling to large knowledge bases. par-kap uses parka's application programming interface  api  but is itself implemented in lisp  running on a sparc workstation. in the remainder of this section  we describe how the frame-language is used to represent the planning ka library. 
task method decomposition structure this struc-
ture is represented as a tree of methods and tasks  linked by two types of relations  executes and is-performed-by. a task is-performed-by a method  possibly by more than one   and a method executes a task  as shown in figure 1 . 

figure 1: representation of a task-method decomposition in par-kap. 
knowledge roles and domain requirements. 	in 
par-kap  knowledge roles are represented as an isa link  class/subclass  hierarchy. individual domain models are represented as instances of the general class domain model  and these have plays links to the knowledge roles 
as was shown previously in figure 1. 
　as discussed above  during ka the methods and knowledge roles are associated to each other by suitability criteria. suitability criteria are also used to link control knowledge with methods. figure 1 illustrates how par-kap represents suitability criteria  using the example of recognizing that the decomposition-propose method can only be used if the world description is in the form of hierarchical task networks. 

figure 1: a suitability criterion for the decompositionpropose method. 
control-structure. representing the control relationships among the tasks is done by linking methods to control methods via the property controls. control methods are defined in terms of steps  which are related to the  sub tasks which are executed by the method. the control method provides ordering and algorithmic relations between these steps  using pointers to various control-
nunes de barros  hendler  & benjamins 	1 specific terms such as backtracking-point  exit-point  etc. thus  the control information for the propose-critiquemodify method shown in section 1 can be represented as shown in figure 1. methods can be associated with more than one control regime  and as we have mentioned before  domain requirements must be used as a criterion to select between them. 
critique-modify 	method. 
1 	knowledge acquisition 
in this section  we provide two examples of how parkap supports knowledge acquisition in planning. the first example is to find a list of the domain requirements necessary for a given planning method to be applied. the second is to find a set of possible planning methods  given a domain specification. 
domain requirements. 	one use of model-based 
knowledge acquisition tools is to find a set of domain requirements imposed by a particular problem solving methodology. for planning  par-kap can thus assist a knowledge engineer in identifying restrictions on the domain knowledge if a particular planning strategy is used. this could be used by a knowledge engineer to help build a planning knowledge base. par-kap assists the user by specifying what type of knowledge has to be acquired and how it should be represented. 
　the input to par-kap for this type of ka request is a 
　planning strategy  which can be a well known strategy or a new one given by the user  defined in terms of a set of basic planning methods plus a control structure . parkap returns a list of domain requirements associated with each method involved in the input strategy  and also the requirements associated with the specified control structure. 
　a simple example of this use of par-kap is to input a known planning method. par-kap produces the information about how the plan is represented  assessed and composed. thus  if the input is the known planner snlp  the output is simply 
state-changes = strips-operators plan-assessment-knowledge = causal-link-protection plan-composition = partial-order 
　in a more complex example  the system could also output information about state descriptions  how state changes are tracked  and specific information about control regimes. 
planning strategy. another use of such a ka tool is to help identify a problem solving strategy given a set of known domain features  expressed as domain modeling features as discussed in section 1 . in order to construct a planning strategy  par-kap takes as input a specification from the knowledge engineer of what sorts of features can be elicited from domain experts  literature  etc. par-kap then outputs either a known algorithm  if it 
1 	planning and scheduling 
figure 1: par-kap output 
covers all the features  or a set of techniques that would need to be combined to process this sort of domain. 
　to do this  par-kap uses the task-method decomposition structure shown previously in figure 1. the system finds those tasks which are achieved by a method that could be applicable given the domain specification. a method is considered applicable if it meets two conditions. first  all of its domain requirements  if any  must be satisfied within the given domain specification. second  for each of its subtasks  there exists at least one method which is applicable to perform that  sub task. this essentially defines a recursion which bottoms out when it finds primitive methods matching the domain specification. 
　after generating a list of tasks and the corresponding primitive-methods  par-kap has to select a suitable control regime for the application. as described in section 1 in par-kap  control knowledge can be fullyspecified or partially-specified. 
　a fully-specified control regime may be selected  i  when the list of selected primitive-methods match with the primitive-methods of a well known planner  as in figure 1  and  ii  when all that planner's domain requirements are satisfied by the domain specification. when none of the fully-specified control regimes can be selected  par-kap suggests the partially-specified control regime associated to each of the applicable non-primitive methods.  a better result would be to allow the interleaving or other complex composition of the control techniques suggested by par-kap. this sort of algorithm composition for planning is a topic of future research.  
　as an example  suppose we give par-kap the following domain specification: 
state changes = htn plan-assessment-knowledge ＊ causal-link-protection plan-composition = partial-order state-change-data = resources state-description - logical-predicates 
　the system returns a list of how the high-level tasks can be decomposed into the primitive tasks shown in figure 1. this figure also gives an example of one of the control structures that is returned for these inputs. 
1 	conclusion 
we have presented a knowledge-acquisition library with components  designed for constructing planning systems. the library is comprised of the essential ingredients needed for giving concrete support when building a planner: problem-solving methods including control knowledge and a characterization of the domain knowledge used in planning. suitability criteria  that form the connection between planning methods and both domain knowledge and control structure  are also included. a prototype ka tool for planning systems  par-kap has been implemented using this library. 
   par-kap shows that such a framework can provide concrete support to knowledge engineers building planning systems. in particular  par-kap gives two kinds of support:  1  given some planning strategy  support the  knowledge acquisition  process of building the knowledge-base to which to apply the problem-solving strategy;  1  given a characterization of a domain  generate a planning system strategy suitable for that domain. 
   one feature of par-kap is that the planning framework is represented using parka  an efficient  framebased ai language. this allows easy inspection and maintenance of the knowledge. in future versions of park a p   we will introduce a user interface to the planning library  in order to allow the continuous update and refinement of the planning knowledge. we are also working to make the par-kap tool available over the internet to allow it to be remotely accessed and used. 
