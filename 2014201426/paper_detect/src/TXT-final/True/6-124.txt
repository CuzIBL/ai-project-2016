 
we present a sufficient as well as a necessary condition for the equivalence between answer sets and models of completion for logic programs with nested expressions in the bodies of rules. this condition is the weakest among all that we are aware of even for normal logic programs. to obtain this result  we present a polynomial time reduction from this class of nested logic programs to extended programs. consequently  answer sets for these nested programs can be computed by an answer set generator for extended programs on the one hand  and characterized in terms of models of completion on the other. 
1 introduction 
we consider logic programs with nested expressions in the bodies of rules   called nested logic programs in this paper. nested expressions arc formulas built from literals  atoms with or without classic negation   connectives such as negation as failure not  disjunction  ;   and conjunction    . this is a proper subset of the class of programs considered in ilifschitz et al  1   where the head of a rule can also be an arbitrary formula. lloyd and topor  lloyd and topor  1  defined nested logic programs without negation as failure  and argued for the higher expressive power of the extended language  while lifschitz et al. further showed the role of negation as failure in nested logic programs. 
　our goal in this paper is to provide a characterization of answer sets for nested logic programs in terms of tightness on the one hand  and to use an answer set generator  such as smodels or dlv to compute answer sets for nested logic programs on the other. the studies on characterizations of answer sets have proved useful in relating the completion semantics iclark  1  with the answer set semantics  gelfond and lifschitz  1 . fages  fages  1  defined a syntactic condition on logic programs  called positive-orderconsistent  which guarantees the equivalence of the two semantics. positive-order-consistent requires a program to have no positive loops. for example  the program  is not positive-order-consistent. babovich et al.  babovich et al  1  on the other hand formalized the notion  tight on a set  which says that an extended logic program ii is tight on x if 
nonmonotonic reasoning 
there exists a level mapping from a  to ordinals  such that for any rule 

erdem and lifschitz lerdem and lifschitz  to appear  extended the work to nested logic programs  and weakened the condition so that the positive literals are required to be ordered by only for applicable rules w.r.t. a  
　as shown in  babovich et al  1; erdem and lifschitz  to appear   that a program is tight on s is a sufficient condition for the equivalence of s being an answer set and s satisfying the completion of the program. however  there are simple programs that are not tight even on their answer sets. for example  suppose we want to express that two or more propositions are equivalent  and they are true if certain conditions are satisfied. for instance  consider 
clearly  is not tight on its unique answer set {a  b}. any level mapping that maps the domain {a  b} to non-negative integers will have to satisfy as well as  
 a   which is impossible. 
　even for logic programs without negation as failure  tightness may fail to apply  e.g.  with ii =  ii is not tight on its unique answer set {a}. 
　in this paper  we define the notion of weak tightness  which is a sufficient as well as a necessary condition for a model of completion to be an answer set. consequently  an answer set is characterized by three independent properties: weak tightness  supportedness  and closedness. this characterization of answer sets can be generalized to nested programs via a linear time transformation to extended programs. this yields a new characterization of answer sets for nested programs. although the transformation uses a linear number of extra variables  we will see that these extra variables are non-split  in the sense that in a davis-putnam procedure  davis and putnam  1   they need not create choice points during search for answer sets  and thus they need not enlarge the search space. 
　our results have some practical implications. first  they widen the application range of systems like cmodels  babovich  1   a system implemented for the computation of answer sets for tight logic programs. secondly  the transformation from nested programs to extended programs allows answer sets for nested programs to be computed by an answer set generator for extended programs  or indirectly via the models of their completed programs. 
　the next section introduces logic programs with nested expressions. in section 1 we define weak tightness and show that answer sets are characterized by this condition along with models of completion. in section 1 we present a polynomial time transformation from nested programs to extended programs. section 1 remarks on related work. 
1 	nested logic programs 
we consider a propositional language l. a literal is an atom  or an atom with the sign  in front  called the classical negation. elementary formulas are literals and constants 
. formulas are built from elemen-
tary formulas using the unary connective not and the binary connectives   conjunction  and ;  disjunction . a nested logic program  or  just program if not otherwise specified  is a set of rules of the form 
where h is a literal or   and g is a formula. h is called the head of the rule and g the body. if g =   we will drop it from the body; rules with the body are called facts. 
　here are some special cases. a formula of the form not where  is a literal  is called a default negation. when g is a conjunction of literals and default negations  the rule is called an extended rule. in an extended rule  the literals that do not appear in the scope of not are called positive literals. the programs that consist of only extended rules are called extended programs; and extended logic programs without classic negation arc called normal programs. 
　an extended rule may be denoted by where  is the set of positive literals and b- the set of default 
negations. 
　we denote by  the set of literals occurring in  where  is any syntactic entity  such as a formula or a program. let a  be a set of literals. denotes the subset of ar  restricted to the literals in v  i.e.  . a set of elementary formulas a' is consistent if i. tf x and it contains no complementary literals / and  
　that a consistent set of literals x satisfies a formula f    is defined recursively as follows: 
a consistent set ar of literals is closed under a program ii if  for every rule h g in h x whenever x g. x is supported by if  for any / x there is a rule / g such that x g. 
　we now define answer sets for a program. for a program  without negation as failure  a consistent set of literals x is an answer set for ii if and only if x is minimal among the consistent sets of literals closed under ii. 
　a consistent set of literals a' is an answer set of program if and only if a  is minimal among the consistent sets of literals closed under   where the reduct  is obtained from by replacing every maximal occurrence of a formula not f by if x f and otherwise. 
　we define the completion semantics for finite nested programs without the classic negation. let ii be such a program. the completion of   denoted comp    is the following set of propositional formulas: for each atom which is either an atom in l  or   
  if 	does not appear as the head of any rule in it  then 
  otherwise  	 with each default negation not   replaced by negative literal 
     if there are exactly n rules as the head. 
　finally  given a nested program  without negation as failure  to construct the unique minimal set among the consistent sets of literals closed under ii  we define the familiar operator as 
it is clear that is monotonic over the domain of sets of literals. the least fixpoint can then be computed by 

the following proposition is needed later in this paper. 
proposition 1 let be a program without negation as failure. then  x is an answer set for iff x is consistent and 
1 	weakly tight logic programs 
let be an extended program  a' a set of literals  and h a literal in a . we define the set of applicable rules of   with respect to h and a  as follows; 

　a level mapping a is a partial function from literals to natural numbers such that the set a/* of natural numbers mapped from literals forms a partial order  
definition 1 let x be a set of literals and an extended program. is said to be weakly tight on x if there exists a level mapping with the domain such that for any nonempty where there is a rule  
body*  body~ in 	 h x  such that for each 	body*  
example 1 let program  c  not d. .}. then  is the only answer set for though is not tight on s  n is weakly tight on s. for example  a level mapping a satisfying the weak tightness condition can be:  
   'by a partial order  we mean a relation that is transitive and irreflexive. 
nonmonotonic reasoning 

lemma 1 let be an extended program  and s an answer set for then is weakly tight on s. 
proof. since s is an answer set for   s - it can be seen that the following mapping exists: for each literal q such that 
clearly  	satisfies the condition for weak tightness.  
theorem 1 for any extended program and any consistent set of literals s  s is an answer set for iff is weakly tight on s  and s is closed under and supported by ii. 
proof  let s be an answer set for 
1. it's obvious that s is closed under and supported by it from lemma 1 we know that ti is also weakly tight on s. 
　　assume is weakly tight on s  and s is closed under and supported by ii. we show that s is an answer set for 
let mm the condition that s is closed implies m s. we are done if m - s. otherwise we have m s. 
let q 	since s is supported by ii  there is a rule 
r : 	in 	such that 	body 	 
and body thus  the same rule r is in ii  q  s   which is nonempty. as ii is weakly tight on 1  there is a mapping and a rule q   body   body ' in such that  
body 	and 	- 	for each 	. since 
m is also closed  there is   body such that then  from the definition of '  there is a literal ~   such that i is minimal  hence . this contradicts the 
assumption that m is the least fixpoint of the operator  
　note that neither supportcdness nor closedness can be removed from the theorem for it still to hold. e.g. the program is tight as well as weakly tight on {a /;}  which is not supported by for closedness  we note that any program is tight as well as weakly tight on the empty set. 
corollary 1 let be a finite normal program and s a set of atoms satisfying comp . then   is weakly tight on s ifj's is an answer set for  
　to compare two conditions that guarantee a model of completion to be an answer set  we have the following definition. 
deiinilion 1 let cond   a  y  and cond'1 x y  be conditions where x ranges over the set of all extended programs and y over the set of all sets of literals. cond  x  y  is said to be weaker than cond1 x  y  if 
  for all x and y  cond1 x  y  implies comll x  y   and 
  there exist some x and y such that condi  ar  v  does not imply cond1{x  y . 
proposition 1 for any extended program and set of literals x  if is tight on x then it is weakly tight on x. but the converse is not true. 
　in section 1  we will see that weak tightness is also weaker than other conditions used to characterize answer sets in the literature. then  the question arises as whether the weak tightness condition is the weakest. technically  the answer is no  since the weak tightness condition can be made weaker in trivial ways  e.g.  one can make it weaker by not requiring 
nonmonotonic reasoning 
a level mapping to be applied to a rule with a body literal that does not appear in the head of any rule. 
1 	transformation 
when a program ii is translated to another program ii1  new propositional symbols may be used. thus  the language for is enlarged. below  we define a notion of equivalence be-
tween a program and its translation. throughout this section  a program means a finite nested program. 
definition 1 let be a program in language l. suppose the language v for is a superset of l. ' is equivalent to   denoted   if and only if both of the following statements hold. 
  for any answer set s for   there is exactly one answer set s' for  such that  
  for any answer set s' for 	is an answer set for 
lemma 1 the relation 	is reflexive and transitive. 
our transformation makes use of some transformations in 
 lifschitz et ai  1 that preserve strong equivalence. two programs are said to be strongly equivalent if for any program and have the same set of 
answer sets. strong equivalence entails our notion of equivalence. 
proposition 1 if two programs and are strongly equivalent  then they are equivalent to each other  i.e.   
1 transformation 
in the following  we say that a formula is basic if it is built from l y  1  literals  constants  and not l and not not l where l is a literal or constant. a program is said to be basic if it consists of rules whose body formulas are basic. a rule 

is said to be fiat if every g  is a conjunction of literals and default negations. a program  sflat if every rule in it is flat. 
　let ii be a nested program. our transformation consists of three steps  briefly described below. 
  ii is transformed to a basic program ii' by some simpli-fication rules. 
  it is transformed to a flat program i i   by transformation rules that name some subexpressions by new atoms. 
  i i   is then transformed to f by splitting each flat rule with disjunctive body into several extended rules with the same head. 
　we now give the details. below  jenotes a rewrite rule. 
step 1. simplification 


　the simplification rules given here are essentially their corresponding equivalences given in  lifschitz /a/.  1 . the only difference is that  for the purpose of termination  we cannot directly adopt an equivalence for symmetry  such as as a rewrite rule. we therefore have to repre- lemma 1 there is no infinite sequence 
sent the symmetric cases by rules. 
　the simplification rules are similar to the ones found in propositional logic  except perhaps rule 1  which simplifies negation as failure only when it is nested at least three levels deep. among these rules  only 1 are essential for the purpose of producing a basic program. the rest are used to simplify basic formulas further. 
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　below. that a rule has a higher priority to be applied than another rule means that when both rules are applicable  the former should be applied and the latter should not. the only intention here for rule 1 over rules 1 and 1 is to prevent transforming an expression of the form 
where by distributing each not over f  which would result in higher complexity . 
step 1. naming subexpressions 
we can show that every transformation in step 1 preserves 

　　　　　　　　　　　1 although transformation rules can be applied nondcterministically  it is easy to show that the rewrite relation 1
   apparently  in this case all the occurrences of {g  h  in the is confluent  dershowitz and jouannaud  1j so that the final exgiven program can be replaced by simultaneously. tended program is unique  up to atom renaming. 
nonmonotonic reasoning 
corollary 1 for any programs ii and p  

theorem 1 for any program  there is a linear time reduction of 	to an extended program 1' so that the answer sets for 	can he identified in linear time from those for  
　we remark that the extra atoms introduced in our transformation are non-split. they are just  connecting atoms  serving the purpose of propagating values from subexpressions. their values can be determined solely by constraint propagation from the values of the original atoms. 
　non-split variables can be accommodated easily in systems like smodels by applying the procedure heuristic only to the set of original variables  so that non-split variables will not be picked up for guessing a value. in this way  non-split variables do not create choice points during the search for answer sets. 
1 
1 	related work 
well-supported model 
definition 1  fages  1  let be a normal program. a set of atoms s is well-supported iff there exists a level map-
ping  with s as the domain such that for any atom a 
there exists a rule 	v   	  	.. 	. which is appli-
cable w.r.t. s  and for each  
　ben-eliyahu and dechter's characterization  ben-eliyahu and dechter  1  of answer sets for head cycle-free disjunctive programs reduces to that of fages for normal programs. 
theorem 1  fages  1  for any normal program ii  the well-supported models ofu are exactly the answer sets for ii. 
nonmonotonic reasoning 
　to summarize the relationships among tightness  weak tightness and well-supportedness for normal programs  we have  for any normal program and set of atoms 1  
  if 1 is well-supported  then is weakly tight on 1; but the converse is not true. 
  if is tight on 1  then  is weakly tight on 1; but the converse is not true. 
  that  is tight on s is not a sufficient condition for s to be well-supported; that s is well-supported is not a sufficient condition for to be tight on s. 
therefore  the weak tightness is the weakest among all three  bridging the gap between tightness and well-supportedness. 
strong compatibility of logic programs 
　in  zhang  1   zhang showed a characterization of default extensions. here  we re-formulate it for logic programs. for an extended logic program 
the characterization of default extensions as given in 
 zhang  1   when applied to logic programs  can be stated as follows. 
theorem 1 let u be an extended logic program. u has an answer set iff there is a subprogram ii' c 1 such that 
　a subprogram is said to be strongly compatible if it is compatible and we can show the following relationship. 
proposition 1 let  be an extended program. for any 

i. if 	is strongly compatible  then 	is weakly tight on con n' ; 

satisfaction of completion  to see whether a model of completion is also an answer set one needs all three conditions. the key lies in condition p1 which embodies both supportedness and an order of derivation. thus  zhang's characterization does not provide a nontrivial condition for a model of completion to be an answer set. 

assat 
　in the system assat ilin and zhou  1   the completion of a normal program is executed by a sat solver  possibly repeatedly. when a model m of the completion from program ii is generated  if then m is not an answer set for ii. assat relies on f to compute loop formulas which say that the atoms in that are involved in a  maximal  loop should be false if they cannot be derived otherwise. however   does not provide a complete picture of the loops involved. there could be loops whose interpretation in m is faked due to the loops on a1 - ii m / . for example  let ii  
and let the computed model of completion be 
this case  	though the loop on a is captured 
correctly  the loop on c is captured incorrectly. it remains to be seen whether stronger loop formulas can be computed  based on the idea of level mapping. 
transformations of nested programs 
　the transformation given in  lifschitz et al  1 deals with arbitrary nested programs where rules may have arbitrary formulas in the heads. the transformation preserves strong equivalence but is not polynomial. 
　independently in  pearce et al.  1   arbitrary nested programs are translated to disjunctive programs where extra variables arc used to avoid an exponential blow-up  an idea similar to the one adopted in this paper. our transformation however departs from that of  lifschitz et al  1  in a minimal way. by partitioning the transformation into three stages  cf. theorem 1   we are able to identify exactly where extra variables are required. this is only when dealing with a disjunction or an expression like not not l where l is a literal. in  pearce et al.  1   other forms of subformulas  such as the whole body of a rule and a conjunction  can also be labeled by extra variables. our transformation is thus simpler and more compact. while our transformation takes linear time  the one in  pearce et al  1  is only claimed to be polynomial time. finally  the extra variables introduced in our case are non-split. it is not clear whether this is possible for the class of all nested programs where the heads of rules are arbitrary formulas. it is interesting to see whether our approach  combined with some of the ideas in  pearce et al  1   can be extended in order to be able to handle all nested programs. 
