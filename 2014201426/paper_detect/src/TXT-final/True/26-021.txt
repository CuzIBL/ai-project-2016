 
in this paper we present a technique for automatically generating constraints on parameter derivatives that reduce ambiguity in the behaviour prediction. starting with a behaviour prediction using an initial library containing general domain knowledge the technique employs feedback about valid and spurious states of behaviour and knowledge about the causal dependencies between the parameters in the model in order to determine the constraints that remove the undesired states of behaviour that result from spurious ambiguity. in addition  the technique points out the assembly of physical objects to which the generated constraints apply. 
1 	introduction 
a recurring issue in qualitative prediction of behaviour is the construction of non-ambiguous models that only predict valid states of behaviour. in particular  when using a library of model fragments that represent general domain knowledge  such as processes  forbus  1  and device behaviours  de kleer and brown  1   the ambiguity introduced by the qualitative calculus  together with the requirement of modelling device behaviour independent from the context in which it operates  the 
'no function in structure' principle  de kleer and brown  1    makes it difficult to define adequate prediction models for a specific system. in order to remove undesired ambiguity additional constraints must be specified that represent assembly specific behaviour  such as  1  order of magnitudes  raiman  1   and  1  conservation of quantities for the system as a whole. in this paper we present a technique that automatically derives these constraints by analysing valid and spurious states of behaviour and by using a model of the underlying causality. in addition  the technique identifies the physical structure  with its specific mode of behaviour  to which the 
    the research described in this paper was partly supported by the foundation for computer science in the netherlands  sion  with financial support from the netherlands organisation for scientific research  nwo   project number: 1-1 . 
1 	machine learning 
constraints apply. 
1 	automatic model construction 
our approach can be thought of as supporting a knowledge engineer who  on the basis of a library containing general domain knowledge  has to develop a specific model that can be used for a behaviour prediction task. given such a library the knowledge engineer is confronted with two problems: relating the elements from the real-world system that has to be modelled to the canonical entities present in the library  and modelling additional constraints to reduce the ambiguity in the behaviour prediction. in other words the construction of a qualitative model amounts to finding the applicable model fragments and augmenting them with additional constraints to capture the device specific overall behaviour. typically  the knowledge engineer goes through a debugging/refinement process  depending upon the behaviour prediction that the qualitative prediction engine produces. each predicted state reflects a valid or a spurious form of behaviour and provides feedback for how the models from the initial library must be modified. 
　the problem of modelling is complex and cannot be automated all at once. in this paper we concentrate on deriving additional constraints on the derivatives of parameters that are required to remove undesired states of behaviour that result from ambiguity. an assumption therefore is that the initial knowledge in the library is sufficient for predicting at least all possible behaviours  but that it is too general in the sense that it may also predict behaviours that in fact do not occur. 
   after the knowledge engineer has classified  c.q. modelled  some system from the real-world in terms of the canonical elements present in the initial library  input system   the prediction engine generates a graph of possible behaviours. although in principle this graph may include all behaviours  valid and spurious  that can be derived on the basis of the general knowledge in the library  it is usually necessary to limit the number of states to a subset that can still be understood and used by the knowledge engineer  partial prediction . next  for each state of behaviour the knowledge engineer determines whether it represents a valid or a spurious state of behaviour by comparing it with the actual behaviour of the system in the real-world. the sets of valid and spurious 

states of behaviour are input for the process of refining the knowledge in the library. 
　the technique presented in this paper automates a part of this refinement cycle by proposing new constraints that will exclude false predictions  without excluding the valid predictions . the technique diagnoses the set of valid and spurious behaviours and determines which constraints have to be added to which parts of the knowledge in the library in order to remove the undesired ambiguity. 
1 	representational context 
the framework for qualitative prediction of behaviour that we use  is implemented as a domain independent qualitative reasoning shell  called garp  which can be used by a knowledge engineer for developing prediction models  bredeweg  1 . in contrast to using a pure component oriented approach  de kleer and brown  1   modelling the physical world as components connected by conduits  or a pure process oriented approach  forbus  1   modelling the physical world as physical objects that interact via processes   we claim that it is essential to use both component and process oriented abstractions in a single prediction model. 
   similar to these approaches  garp uses the notion of model fragments for determining the behaviour of some real-world system. model fragments can be either static  process or agent models. static model fragments represent general properties of physical objects  process models represent changes that occur between physical objects based on inequalities between interacting parameters and agent models represent changes imposed on the system by external agents. all model fragments have associated with them a set of conditions under which they are applicable and a set of consequences that are given once their conditions hold. conditions and consequences are stated in terms of: system elements: abstractions of entities in the physical world; parameters: relevant quantities; parameter values: the values  intervals and derivatives  of quantities; parameter relations: dependencies between quantities; model fragments: other model fragments that must be true. the behaviour of a system during a particular time period is described by the set of applicable model fragments. the behaviour over different time periods is determined by the application of transformation rules. 
　important for the technique discussed in this paper are the different types of parameter relations within the framework. proportionalities and influences are used in a similar way as defined by forbus  forbus  1 : for modelling causal dependencies. additional  non-causal  constraints on derivatives are modelled through inequalities  such as:         =           inequalities can be defined for a single derivative or a sum of derivatives with respect to zero  or for sets of derivatives with respect to each other. inequalities are used to further constrain the ambiguity introduced by causal relations or for modelling constraints on derivatives that lack a clear causal dependency. as argued in bredeweg  bredeweg  1  both the causal and non-causal dependencies are essential features of a qualitative model. 
1 	causes of ambiguity 
this section describes how several types of ambiguities result from the use of influences and proportionalities. the ideas are illustrated with a model of a refrigerator. 
figure 1 visualises the important physical objects of this system. in order to reason about the behaviour of these 

figure 1: a model of the refrigerator 
objects  model fragments are required for representing device behaviour and for representing processes between physical objects  see  bredeweg  1  for more details . the throttle valve and the compressor can be modelled as 'agent models' influencing the amount of substance in the condensor  amountcon  and in the evaporator  amountevap - the throttle valve also influences the pressure of the substance in the evaporator  pressevap  directly  expansion of fluid into gas leads to higher pressure . the substances in the condensor and the evaporator are both modelled as a 'closed contained substance'  cf.  forbus  1  . in this model fragment temperature is proportional to pressure  which in turn is proportional to amount and to heat. the world and the cooling area can be modelled in this way too  omitting amount and pressure. a direct proportional relation between temperature and heat is sufficient for modelling the behaviour of these entities. finally  model fragments are needed that represent processes such as heat-flow  evaporation and condensation. the causal relations  proportionalities and influences  that result from using these model fragments are depicted in figure 1. 
　presenting the model as sketched above to the prediction engine  garp  results in 1 derived states of behaviour  total envisionment . the first specification step  finding all sets of model fragments that apply to the input system  produces already 1 states  1 of them being spurious. the values of the parameter derivatives in these states are shown in table 1. 
　spurious ambiguities are behaviours predicted by a qualitative simulator that do not represent actual behaviour of a device. they occur because particular globed properties of device behaviour are not modelled by individual model fragments and hence do not appear in the aggregate of model fragments that forms the model of 
1 

the device. there are two types of these context dependent properties. the first one is the relative magnitude of multiple causal interrelationships originating from different model fragments. in the refrigerator example  the amountcon is positively influenced by the compressor while the throttle valve influences it negatively. since there is no knowledge of the relative magnitudes of these influences  the resulting derivative of the amount is ambiguous  i.e. it can either increase  the effect of the compressor being greater   stay constant  the effect of compressor and throttle valve being equal  or decrease  the effect of the throttle valve being greater . this ambiguity is spurious in the sense that it allows the amount  and thus the pressure and temperature  to decrease which allows a heat flow from the world to the condensor. this does not represent actual behaviour of a refrigerator. if the compressor is 'working' the amountcon might increase or stay constant but never decrease  the reverse goes for the amountevap . another spurious ambiguity exists with respect to the press con and press evap. the pressure is proportional to the amount but is also influenced by a heat flow process. if these effects are opposite the derivative of the pressure is ambiguous too. 
　the second cause for spurious ambiguity concerns missing constraints for conservation of quantities in the system as a whole. in the case of the refrigerator the total amount of substance in the system remains constant. however  if this constraint is missing a qualitative simulator may predict an increase of the amountcon while the amountevap increases too  which is impossible. constraints for conservation of quantities are es-
sential for disambiguating these faults in the prediction model. 
1 	determining candidate constraints 
both valid and spurious states of behaviour provide information for generating inequality constraints that remove spurious ambiguity. however  using information from spurious states of behaviour is problematic  because these behaviours may result from multiple  possibly inde-
1 	machine learning 
table 1: first 1 states for the refrigerator  1 is valid  
nitude  amountcon always increases or stays constant  but never decreases  or by a lack of knowledge about conservation of quantities  changes in amountcon and amountevap should equal zero . 
　the process is even more complicated when the prediction is partial  which is usually the case  see section 1 . although the reliability of the information stemming from the spurious states becomes greater when more states of behaviour have been predicted  it is likely that not all faults manifest themselves in a certain partial behaviour prediction. in other words  constraints which first seemed to represent a discriminating factor between valid and spurious states may turn out to be inappropriate. that is  there is danger of selecting a constraint that rules out valid states of behaviour that have not been predicted yet. specifying  for example  that otempcon   otempevap erroneously excludes future states of behaviour in which the two temperatures are equal. 
   in order to cope with the two problems described above our technique determines constraints for removing spurious ambiguity on information present in valid states of behaviour. for excluding spurious states of behaviour the technique searches within the set of all possible constraints consistent with the known valid states of behaviour. in other words  candidates for removing states that result from spurious ambiguity are based on one or more derivatives in the valid states of behaviour. examples of such candidates are opressevap   1  opressevap   1 and oamountcon + oheatcon   1. it is important to realise that this set of constraints represents all possible constraints that are consistent with the valid states of behaviour and that therefore the constraints for removing the spurious states of behaviour must necessarily be part of this list. 
　although the problems associated with using spurious states of behaviour have been circumvented by this approach  three new problems appear. firstly  as the number of parameters increases the set of possible constraints soon becomes intractable. therefore  additional 

knowledge must be applied to significantly reduce the number of constraints. secondly  there is a danger of generating constraints that relate parameters which are in fact independent from each other  for example: heat world + heatevap = 1 . thirdly  not all possible constraints actually discriminate between valid and spurious states of behaviour. these issues are discussed in the next section. 
1 	discriminating candidate constraints 
this section describes how the set of candidate constraints can be reduced significantly by focusing on specific types of constraints  by exploiting the notion of causal units and by taking into account the discriminative power of the constraints. 
1 	three types of constraints 
not every combination of parameter derivatives results in a constraint that represents valid knowledge about physics. as discussed above  the ambiguity that must be dealt with is caused by lack of knowledge about orders of magnitude and/or conservation of quantities. this knowledge can be represented by a limited number of constraints. orders of magnitude between different influences or proportionalities can be represented in two forms. firstly  the net-effect of the interacting parameter relations can be modelled as a specific value of the derivative of the determined parameter. for instance  1 amountcon   1 is a constraint  specifying that the derivative of the amount in the condensor should always be greater or equal than zero. secondly  the dominance of one parameter relation over others can 
be modelled as a ratio of a pair of parameter derivatives. if  for example  the pressure is proportional to both heat and amount this results in ambiguity. now  if  in the actual device behaviour  changes in the pressure are dominated by the amount  this can be modelled as opresscon = oamountcon- various degrees of dominance can be represented as different inequalities between derivatives. conservations of quantities are modelled as the sum of quantities being equal to zero  see next subsection . 
　in order to determine candidate orders of magnitude  constraints are generated on the basis of the parameter derivatives in the valid states of behaviour. for each individual parameter  net-effect  and for each pair of parameters fdominance   all constraints are generated that 

the constraint  is consistent with both pairs of derivatives and is therefore a candidate for disambiguating the behaviour prediction. 
1 	exploiting causal units 
the causality in the behaviour description can be used to further reduce the number of candidate constraints. the idea is that dependencies between parameters can be factored into clusters that influence each other  but are independent of other parameters. this corresponds to the idea of 'factoring'  see  genesereth and nilsson  1  . we shall refer to these clusters as causal units. a causal unit starts with a parameter that is being influenced  by an influence relation   traverses via the proportionally related parameters  and ends with a parameter that has no causal effect on any other parameter by means of a proportionality. a causal unit is essentially a graph that may have recursive loops  more than one starting point and more than one terminal node  notice that a causal unit can consist of one or more causal paths . two examples of causal units in our refrigerator model are: heatcon presscon tempcon  see also 
figure 1  and 	amountcon 	presscon 	tempcon 
　instead of generating all possible constraints that represent orders of magnitude  the notion of causal units can be used to focus on those parameters that are actually capable of causing ambiguity. constraints on single parameter derivatives are generated for  1  parameters that are start points of causal units if they are multiply influenced and for  1  parameters that occur in more than one causal unit and are dependent on different parameters in the respective causal units. in these cases they might be causing spurious ambiguity. in the refrigerator example  instances of the above cases are amountcon and presscon- constraints for pairs of derivatives are also generated for parameters that occur in more than one causal unit and are dependent on different parameters in the respective causal units. these parameters are multiply dependent on different parameters. therefore they are parameters that could cause spurious ambiguity. each causing parameter  together with the dependent parameter  forms a candidate pair for representing dominance. in the refrigerator amountcon & presscon and heatcon & presscon are two examples of such pairs. 
　constraints for conservation of quantities are generated for parameters that:  1  belong to different causal units   1  model the same type of quantity  and  1  are influenced by the same influence. usually an influence  c.q. a flow rate  consists of two parts  one that decreases a quantity and one that increases a quantity. both are required before a conservation constraint may be defined. in the refrigerator example a conservation constraint is generated between the parameters amountcon and amountevap. 
1 	two heuristics 
the set of candidate constraints representing orders of magnitude can be restricted by applying two heuristics. the first one concerns the position of the parameters in the causal units: 
1 
  prefer constraints on parameters 'early' in the causal units. 
the rationale behind this is that the disambiguation should start at the beginning of the causal dependencies  i.e. to remove ambiguity at the source. for example  a constraint on amountcon should be preferred over a constraint on presscon- the second heuristic concerns the restrictiveness of the constraints. if a parameter  or a pair of parameters  has both the stronger and the weaker constraint then: 
  prefer weaker constraints over stronger constraints. 
weaker constraints allow more values than stronger constraints. for example        is a weaker constraint than either     or  = . this rule prohibits that on the basis of incomplete information a too restrictive constraint is selected. 
　both heuristics can be applied without any danger of losing important knowledge. if constraints on early parameters and/or weak constraints fail to exclude spurious states of behaviour  constraints on later parameters and/or stronger constraints will be found when the behaviour prediction is extended  see section 1 . 
1 	discriminative power of constraints 
the third source of information for cutting down the set of candidate constraints concerns the number of spurious states of behaviour that each constraint eliminates. 
non-discriminative constraints can be disregarded because they do not exclude any spurious states of behaviour. 
independent constraints exclude states of behaviour that are not excluded by any other constraint. therefore they are necessary for the disambiguation of the model and must be added to the library knowledge. 
partially overlapping constraints exclude some states of behaviour uniquely  that is  these states are not excluded by any other constraint. in addition they exclude some states of behaviour that are also excluded by other constraints. because they exclude some states uniquely these constraints are also necessary for the disambiguation of the model and must be added to the library knowledge. 
overlapping constraints exclude only states that are also excluded by other constraints. a reasonable heuristic in this case seems to be to prefer the constraint that excludes most states of spurious behaviour. 
if this heuristic concerning overlapping constraints does not resolve the problem then an additional heuristic is to prefer complex overlapping constraints over simple ones  i.e. conservation constraints over derivative pair constraints over single derivative constraints. however  in the case of a partial behaviour prediction the only safe way is to have the knowledge engineer decide upon overlapping constraints. in the case of a full behaviour prediction overlapping constraints introduce no problem because all valid states of behaviour are facilitated by the constraints and they can thus simply be added to 
1 	machine learning 
the model. in the refrigerator example  the technique as described above comes up with the constraints as shown in table 1. 

1 	allocating constraints to fragments 
once the appropriate constraints have been determined  they should be allocated to model fragments in the library. two options exist: they are added to an already existing model fragment  or they are added to a newly defined model fragment. the method for allocating them is similar in both cases. 
　the first step consists of determining all dependencies that the parameters in the proposed constraint have. each of these relations contributes to the ambiguity that will be removed by the constraint. for example  a constraint between amountcon and presscon resolves spurious ambiguity that results from  1  the influence of the compression rate   1  the influence of the expansion rate   1  the proportional relation with the heat and consequently  1  the influence of the flow rate  from the heat flow    see also figure 1 . again the notion of causal units is important  in the sense that the set of contributing relations is a subset of the causal units to which the parameters belong. in particular  this subset starts with the influencing relations  moves on via proportionalities up to the place where the parameters themselves are located. the relations located higher in the causal unit do not contribute to the ambiguity. 
   the second step is to find the set of model fragments that introduced the relations that cause the ambiguity. they are conditional for the model fragment to which the new constraint should be added. in the example mentioned above these model fragments are:  1  the heat flow process   1  the active compressor   1  the active throttle valve  and  1  the closed contained substance  =the condensor . for allocating the new constraint either a model fragment exists for which these model fragments are conditional or a new aggregate model fragment has to be created. in the latter case  which is more likely  the model fragments that introduce the ambiguous dependencies are conditional to the new model fragment. in the above example this new model fragment could be referred to as the 'condensing assembly' of the refrigerator. 
1 	extending the behaviour prediction 
further behaviour prediction can be useful or even necessary in some cases. instead of immediately adding all proposed constraints to the library  the behaviour prediction can be enlarged to create more discriminative power for grounding the constraints. in our example we 

might have added one transformation step creating 1 states of behaviour. 
　however  even if candidate constraints have been added to the library it may still be necessary to further specify the knowledge in the library. there are in fact three reasons why this may be the case. firstly  weaker constraints may have to be replaced by stronger ones and/or constraints on early parameters by constraints on later parameters. secondly  parameters appearing to be correct  may start behaving in ways that are incorrect and/or undesired. finding these parameters requires further specification. finally  it may be the case that some model fragment introduces parameters that were not present in the behaviour prediction yet. spurious ambiguity introduced by their dependencies should also be removed. 
1 	conclusions 
in this paper we have presented a technique for automated generation of the constraints that are needed for disambiguation of a behaviour prediction. based on general domain knowledge a behaviour prediction is generated that contains valid states as well as spurious states. the technique removes the spurious states using feedback about the validity of states and knowledge about the causal dependencies in the model. this is achieved by generating additional constraints on parameter derivatives and by adding these to the assembly of physical objects to which they apply. 
　in the machine learning field the work of mozetic is most similar to our technique  e.g.  mozetic  1  . by representing models in a logical language the refinement problem becomes similar to refinement of logic programs. to our knowledge there has been no previous work on refining knowledge that is represented as qualitative constraints. dejong's work   dejong  1   focuses on explanation-based learning in the context of plausible reasoning rather than refinement. 
　the refinement algorithm presented in this paper is similar to general incremental learning techniques. it is special in the representation and inference engine. an important addition is the learning bias that is introduced by factoring into causal units and the search for specific types of constraints. 
　in the literature on automated modelling two approaches can be distinguished. one approach derives a qualitative model of a system from data on its actual behaviour  cf.  richards et al.  1; coiera  1; bratko et ai  1  . in contrast with these data driven techniques  the more commonly adopted approach  as introduced in  forbus  1; de kleer and brown  1   
entails the selection of the appropriate set of readily available model fragments for a particular system. our technique uses both approaches: generally applicable model fragments are reusable and a model can be tuned to actual device specific behaviour. 
　the scope of our technique is still limited in that it only deals with derivatives. e.g.  spurious behaviours indicated by incorrect parameter values cannot be dealt with  although it seems likely that parts of the technique can be used for this purpose as well . also the technique requires that the knowledge present in the initial library is correct and sufficient  i.e. it should at least predict all valid states of behaviour. 
　however  these problems are not caused by limitations of the technique. instead  they refer to different aspects of the modelling process that must be dealt with in order to further automate the process of qualitative model construction. the technique for generating the disambiguating constraints for parameter derivatives presents an important step in this direction. 
acknowledgement 
　we would like to thank gautam biswas  ivan bratko  adam farquhar  ken forbus  and lyle ungar for their insightful comments on an earlier version of this paper. our thanks are also due to kees van den heerik and maarten van someren who contributed to the ideas presented in this paper. 
