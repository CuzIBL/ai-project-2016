 
　　　a computer system which aids computer engineers in f a u l t diagnosis is described. the system  called crib  computer retrieval incidence bank  is shown to f i t into the class of pattern-directed inference systems. emphasis is placed on the  before  and   a f t e r   phases of system generation and it is shown why  to be called an expert system  these phases are important. the forms of knowledge used in crib are shown to be adequate for diagnosis and yet possess l i t t l e of the s t r u c t u r a l or funct i o n a l knowledge of more advanced expert systems. summaries are given of the three phases of implementation: e l i c i t a t i o n   implementation of knowledge s t r u c t u r e s   v a l i d a t i o n and improvement. the idea of an expert system as a  model of competence  is mentioned and the transferrance of the system architecture to software diagnosis  using the same model  is described. there are short d i s cussions of system performance and the nature of expert systems. 
1. 	introduction 
　　　this paper  whilst also being a vehicle for presenting the work on crib carried out between 1 and 1. attempts to investigate the  before  and   a f t e r   of an expert system. most of the papers written on and around the f i e l d of knowledge engineering systems have concentrated on the structure of the program i t s e l f with short d i s cussions of how the program came into being and how the program performs   i n the f i e l d   . however  an expert system is a non-academic exercise  not to say commercial  and the twin needs therefore to get the d e t a i l r i g h t beforehand and the performance r i g h t afterwards  are equally important as the system design. 
　　　four phases of the route to a viable expert system may be distinguished. they are not d i s similar to the staging of the development of any commercial computer system. they are: 
1. e l i c i t a t i o n for the f i r s t approximation knowledge base. 
v. system design and generation. 
1. continuous v a l i d a t i o n  debugging 
  from september  1 at department of computer science  kansas state university  usa. 
and f i n e - t u n i n g   . 
	1. 	improvement through experience. 
　　　notice that we have not pre-empted our d i s cussion of e l i c i t a t i o n by specifying the source of the i n i t i a l knowledge for the system. in order to discuss t h i s point we should l i k e to make a d i s t i n c t i o n in the people who come into contact with the system  i . e . between experts and pract i t i o n e r s . we consider t h i s a useful one especially where the system can be used for education and dissemination of knowledge as can a standard enquiry data-base. practitioners are those people who use the system in the course of t h e i r every-day works experts are the handful of people who define what the work is and how it should be carried out. 
	1. the  before  	and   a f t e r   of an expert system. 
　　　1 . 1 . e l i c i t a t i o n : from experts or pract i t i o n e r s   
the dramatic rise to academic consciousness of the expert system has come about p a r t i a l l y because of the c u l t of the  expert  and his largely undisuted place in our society. however  an expert 
is only an expert r e l a t i v e to the p r a c t i t i o n e r s in the f i e l d . moreover  experts are always a t i n y minority of the whole group. we would therefore l i k e to ask the question   i s an expert necessarily better than a large number of p r a c t i t i o n ers   the answer to the question must surely depend to some extent on the sort of knowledge involved. if knowledge is fragmentary  consisting largely of facts which are additive in nature then the answer is   n o   . practitioners acting separately  or at least only loosely connected  have d i f f e r e n t experience and therefore d i f f e r e n t knowledge. the expert has only his own experience to rely on and  whereas he might have a far wider experience than any one p r a c t i t i o n e r   he cannot match the aggregated experience of a large group of them. i f   on the other hand  the knowledge needed is s t r u c t u r a l or systemic in nature  then the answer to our question is  yes   the expert is b e t t e r . in f a c t   it is often the case that experts are expert because of t h e i r a b i l i t y to see the structure of the domain and not merely i t s content. 
       in t h i s paper we shall not discuss whether knowledge is of one form or the other. there is some discussion both in a . i .   1      and. 
1 
perhaps more relevantly  in philosophy  for example see    for general texts  which we refer the reader to. the only point which must be made here is that the sort of knowledge which one must have to be effective in a particular domain is certainly dependent on the activity or activities within that domain. for example  the knowledge required to be a good bricklayer is mainly additive  consisting of facts such as how to chop a brick in half; what proportions of sand and cement make good mortar; how to build a corner. on the other hand  the knowledge required by the builder employing the bricklayer is organisational in the main. he must know how to time the work of subcontractors where the work of one depends on another finishing; how to balance incoming and outgoing payments so as not to go bankrupt; when to quote a high price for a job he cannot find time to do. 
　　　it thus appears to be dependent on the domain whether knowledge should be first elicited from experts or from a community of practitioners. can we then say something about the areas in which expert systems have gained a foothold and generalise this to future or projected applications  all the early expert systems  see   concentrated on academic or scientific areas of knowledge. the knowledge involved was aimed at finding and making explicit that which was previously implicit; it involved a high degree of intellectual skill and thus clearly fitted into the  expert elicitation  category. it is true that they also used a large body of factual knowledge  but this was decidedly subordinate to the knowledge directly concerned with  expertise  in the area. the facts were taken for granted and formed a significant but largely static part of the system. if what we have said before has any validity  there should  then  be areas of human activity in which the notion of an expert is not inappropriate and where the expertise depends in part on a large and ever-changing body of facts. of course the expert in such a field will have the structuring skills of the builder in our example above  but the aggregated practitioners will have more factual knowledge and thus should be the source of the i n i t i a l knowledge-base. we believe that computer fault dignosis is one such area  the area in which crib operates  and that there are others of a 
　　　similar nature  almost any skilled trade  but also such diverse fields as navigation  production scheduling  or information services . 
　　　since most knowledge based systems split knowledge into two  namely static knowledge  facts  and methods of inference  organisation of the techniques of elicitation around these categories can help both the interviewer and the interviewee. when working with an individual  the expert   both sorts of knowledge tend to come together quite smoothly  but working with an aggregate is different. firstly  elicited facts are only 
additive if inconsistency and contradiction are allowable. an expert system  however  cannot afford to show these qualities to the user. it must have a way of checking its self-consistency and reporting errors when they occur. some sort of semantic network is the usual way of doing this although the problems of building networks with sufficent expressive power are well known   . if these problems are to be avoided  then there must necessarily be a diminution in the generality of knowledge which the system can maintain. in crib the sorts of knowledge which it stores are reduced to a minimum without reducing its efficiency as a diagnostic aid. these simple facts  see section 1  are easy to elicit using a variety of techniques; no sem-
antic network is then necessary. 
　　　turning to methods of inference  it is apparent to us that l i t t l e has been done in developing elicitation techniques from experts. most expert systems using production system methodology necessarily force all inference procedures into the uniform situation -  action pair. the elicitation is thus characterised by the question  what rules 
do you use   rather than the more general  how do you make inferences  . elicitation of methods of inference from an aggregate of practitioners involves a second level of system design since some form of induction must be used to capture commonalities amongst the members of the aggregate. this second level difficulty merely adds to the already tricky process of elicitation and does not seem worthwhile if an acceptable alternative is available. this alternative is for the system designer to supply methods of inference based on theoretical notions of what it is to reason well in the domain under consideration. a study prior to crib  called project deemen  see   suggested that a hierarchical model of the broken machine be adopted to guide a step-by-step search 
for the faulty part. the idea here is that the 
designer supplies a model of competence which the system then uses as the universal method of making inferences and guiding the user. les johnson  makes the point that most a.i. systems are in fact models of competence. for our purpose this description is correct since we have not attempted to induce methods of diagnosis from the engineers we worked with. 
1. validation and improvement 
　　　if  as we have said  an expert system is a model of competence  then we must be prepared to change the model in the light of experience by users. the same problem occurs in this  after generation  phase as with the  before  of e l i c i t ation. it is mainly practitioners who use the system and it is their experience with it that can help to validate the model. but can this experience also be used to improve the model  in general we can say that the system users come to two different sorts of conclusion after gaining experience with i t . either the model is inadequate as a model of competence  i.e. the system is  incompetent   or it is failing to cope with a wide enough range of new situations and methods of working. this leads to the distinction between validation and improvement. an expert system which is improving in the more fundamental sense must be gaining new knowledge; validation can be carried out by restructuring existing knowledge. the same distinction also applies when considering 
1 
the changes of a system in time. continuous validation through day-to-day use by practitioners can cope with small perturbations  like tuning a radio set for better reception  but new knowledge usually comes from an expert  tuning to a  better  station . 
　　　it is appropriate to ask whether improvement can come not from experts  but from an aggregate of practitioners in the same way as elicitation can when the form of knowledge is right. even with a level of interpretation  presumably by an expert-system expert  it is hard to see how this could come about. practitioners  by the nature of their job  do not normally generate new knowledge. if they do it is not of the structural sort  but is more likely to be additive - the sort of knowledge which an expert system should be able to handle by the  fine-tuning  process of continuous validation. thus an expert sytem must have interaction with a domain expert to improve its effectiveness. with most systems this means modifications to data-base structures and/or procedures - modes of interaction not allowable to a practitioner. 
1. crib: a computer engineer's diagnostic aid 
1. overview. 
　　　the i n i t i a l aims for crib were strictly commercial: to reduce maintainence costs in two areas - training of new engineers and existing engineers on new equpiment; increasing productivity by reducing the average time per fault investigation. with constraints like these it was clear that a highly flexible  user-friendly system was needed. ultimately  it was decided to aim crib at the cafs data-base processor  see section 1 with its wealth of associated software packages and analysis techniques and  more importantly  its high effieciency as a pattern-directed data-base system. however  early versions used standard f i l e techniques for database management. the cafs version effected a 1 fold improvement in speed  using the same logical structure. 
the whole crib system consists of three programs: 
   p1. the main program which carries out the executive function  see section 1  is called diagnose. it interfaces with the user  the field engineer  through a simple jargon-english translation package. this allows the engineer to communicate with crib in a fairly natural way to describe symptoms  inform of actions carried out and control housekeeping functions such as the investigation log. 
　　p1. some degree of validation and fine tuning is done by adapt which examines the logs of previous investigations and updates times of actions performed  and investigation times after a complete match with a symptom group  see section 1 . 
it also handles sub-groups  see section 1.1 . 
　　p1. major restructuring of the data-base and the insertion of new knowledge are done through expert. as mentioned before  this is a specialised access to the data-base and is done with the help of the system designer. 
1 forms of knowledge for computer diagnosis 
　　　two questions were posed at the beginning of analysis for system design. they were: what sort of knowledge does an engineer need to find faults on broken computers  and how does the engineer use this knowledge to find and cure the fault  the deemen project told us that most field engineers know l i t t l e about the correct functioning of the machine at the electronic level but a lot at the level of interfaces between modules. we therefore concentrated on the notion of a replaceable or repairable part  we called it a sub-unit  and the interfaces between them. the normal concept of  a fault  can then be dropped in favour of the location of the fault within a sub-unit. it follows that the only knowledge needed about the structure of the machine is the hierarchy of sub-units which expresses the relationship between them. such a hierarchy can be drawn as a tree whose leaves are the replaceable/repairable modules. 
　　　support for this came from the deemen reports. in these  an easy-to-follow routine for diagnosis was suggested in an attempt to give engineers a fail-safe method of proceeding when all else fails. this procedure has the acronym toast and each letter refers to the following steps which when cycled successively produce a spiral of diagnosis  hopefully homing in on the fault by travelling down the hierarchy. 
test: 	carry out an appropriate test on the machine 
observe: observe and record the results 
analyse: analyse the results and in the light of this: 
split: 	split the faulty sub-system into faulty and non-faulty parts 
test: generate an appropriate test for the faulty sub-system 
　　　toast provides support for crib as a model of competence in computer diagnosis. toast also needs knowledge of the relationship  through the analyse phase  between the results of tests carried out by the engineer and the form that the next test should take. the analysis is simply represented as an association of symptoms and faulty sub-unit. this begs two questions: do symptoms uniquely identify faulty sub-units  and how do we know which pairs to put in the data-base  the second question is concerned with elicitation and will be left for section 1. the experts we worked with told us that the answer to the first is  no : some symptoms are common to many faults and so more information is needed. we did not want to include knowledge of machine function and so the other information which we 
added to the pair was all of the other symptoms  perhaps ten or fifteen  which had been observed before the current one. does a group of symptoms taken together uniquely identify a faulty sub-unit  if an engineer only observes these symptoms and finds the fault  then his analytic skills   i f any  are reflected in the choice of actions which yield the symptoms in the group. we do not then need to represent the analytic skills explicitly 
1 

- they are represented i m p l i c i t l y through the symptom groupings. 
　　　however  some symptoms are only observed as a r e s u l t of lengthy and i n t r i c a t e operations. the knowledge needed here is which symptoms are better looked for than others. since crib has no functional knowledge it must base i t s assessment on a t t r i b u t e s of actions which p o t e n t i a l l y yield symptoms in the various groupings. attributes such as the time it takes to perform an a c t i o n ; how many groups contain i t ; and how long the investigation might take after it has been observed are only h e u r i s t i c a l l y adequate in t h i s case. however  since the f i n a l aim is to find a l l of the symptoms in any one group the heuristic element is only concerned with means and not ends. 
　　　the knowledge needed for a model of competence in computer diagnosis can be summarised thus: 
k l . a hierarchy of sub-units representing the structure of the machine as a c o l l e c t i o n of repairable or replaceable parts. 
k1. a number of symptom group/sub-unit pairings which represent successful f a u l t i n v e s t i g a t i o n s . 
k1. a t t r i b u t e s of symptom-related actions which are h e u r i s t i c a l l y adequate to determine the next a c t i o n . 
km. procedures for operating a modified toast cycle in order to progress down the hierarchy to the f a u l t y sub-unit. 
	1. 	e l i c i t a t i o n of knowledge in crib. 
　　　the hierarchy of sub-units  kl  was formulated in discussion with people who t r a i n f i e l d engin-
eers. the main aim was to provide a comprehensive breakdown of the chosen  patient  machine  icl 1  to the level of replaceable or repairable modules. the bulk of the k1 knowledge came from an i n t e r p r e t a t i o n of a set of f a u l t - f i n d i n g guides for the 1. these had been produced by an expert 
engineer using his experience of general 	f a u l t finding and applying t h i s to what was then a 
brand new machine. 
　　　with hindsight  our f i r s t stage e l i c i t a t i o n should have come d i r e c t l y from an expert  there were no p r a c t i t i o n e r s at the time with any d i r e c t experience . information could have been gained from system engineers during a series of interviews 
about specific f a u l t investigations. the data could then have been cast in a form suitable for crib without engaging in the sort of i n t e r pretation demanded by the guides. we cannot emphasise strongly enough that the success or f a i l u r e 
of an expert system can largely rest on t h i s i n i t i a l stage o f e l i c i t a t i o n . 
1 system design and generation. 
　　　the description of the internal workings of crib given here follows the analysis given by hays-roth et a l .   1   . other more s t r a i g h t forward accounts may be found elsewhere   1       1   . the categories of knowledge k1 to k1 have many of the c h a r a c t e r i s t i c s of what they c a l l 
a pattern-directed inference system  pdis . the group/sub-unit pairings can be seen as expressing the following inference: 
r1.  if symptoms s1 to n have been observed then assume the f a u l t is in sub-unit u. 
　　　the procedures in k1 w i l l c l e a r l y have a matching function  in p a r t ; the process of looking 
for a suitable s p l i t to make  as in toast  w i l l involve matching the current observed-symptom set with each of the pairings in the data-base. the symptom groups are patterns and the pairings are inferences. 
       in general  a pdis consists of a l a r g e   constantly changing body of data and a r e l a t i v e l y small  fixed set of procedures which operate on them. these procedures taken together form the executive of the pdis. hays-roth et a l . discuss pdis executives in four parts: s e l e c t i o n   matching  scheduling and execution. it is possible to discuss crib in these terms. 
　　　selection: f i l t e r i n g data before the expensive matching process. the crib user is able to d i r e c t the program to look only for matches amongst symptom groups paired with any chosen sub-unit and not  as is normal  with a l l of the sub-units below the currently assumed f a u l t y one. this can improve search e f f i c i e n c y and crib can then quickly inform the engineer whether he has located the f a u l t c o r r e c t l y or not. 
　　　matching: carrying out the matching between observed symptoms  input by the user  and symptom groups in the data-base. this function is carried out by the cafs data-base processor. enquiries  in the form of boolean expressions of a t t r i b u t e s known to the data-base  are presented to cafs as a microcode program. the device then returns selected parts of a l l records which s a t i s f y the request to the mainframe via a dma l i n k . information about the cafs side of the crib implementation are contained in   1     technical information about cafs can be found in   1   . 
　　　scheduling: three outcomes are possible after matching has been completed. the f i r s t is that there is one and only one match with a rule in the data-base. in t h i s case scheduling is not needed. the other two are more d i f f i c u l t . either there is more than one match or only p a r t i a l ones. what to do next is the subject of meta-rules which describe how to proceed in situations of imperfect matching. the meta-rules in crib for handling p a r t i a l matches are aimed at suggesting actions to the engineer which w i l l yield symptoms to complete the match. the rules are: 
mr1. choose a symptom which is the only remaining one in a group.   a l l the others have 
been observed already . 
mr1. choose the symptom with the highest membership in partially-matched groups.  this is the symptom  which if it were observed  would give the engineer the most information  . 
mr1. resolve c o n f l i c t s in mr1 and mr1 by taking 

1 

the symptom with the shortest time f a c t o r . 
       in f a c t   because there are many s i t u a t i o n s   especially early on in an i n v e s t i g a t i o n   when even the rules given above do not y i e l d a unique choice  the rules are applied f i v e times   e l i m i n a t ing the previous choice each time  and f i v e symptoms are chosen  giving the engineer an element of choice in his a c t i o n s . 
1. 1. sub-groups. 
　　　although toast represents a good model of diagnostic competence  engineers do not always l i k e to work in t h i s rigorous fashion. in p a r t i c u l a r   some of them are s k i l l e d at recognising the emergence of patterns of symptoms before a l l of the symptoms to confirm a f a u l t have been observed. this h e u r i s t i c knowledge can be captured in a set of assumption rules of the form: 
r1. if symptoms s1 to n are present then assume that sn+1 to n+m are present too  but not observed  
　　　the symptom set  the sub-group  on the l e f t hand side of the r u l e is a sub-set of the whole symptom set  the key-group  which implies a f a u l t y sub-unit. the ideal is s t i l l to match a whole key-group but a match with a sub-group is considered h e u r i s t i c a l l y adequate to make progress in the i n v e s t i g a t i o n . the program adapt checks for confirmation when a sub-group is used successf u l l y and can also r e j e c t those which are disconfirmed by f a i l u r e . more importantly  adapt   d i s covers  new sub-groups by applying the following meta-rule: 
mr1. if action suggestions r e s u l t i n g from a p a r t i a l match r e s u l t in the completion of that match 
then insert the symptoms making up the p a r t i a l match into the data-base as a possible sub-group. 
	1.1. 	implementation of rules and meta-rules. 
　　　meta-rules mr1 are implemented conventiona l l y through fixed procedures. since they form the analytic part of the model of competence  there is no need to represent them e x p l i c i t l y . however  rules r1 and r1  when instantiated by p a r t i c u l a r symptom groupings  need a f l e x i b l e 
　　　representation which allows addition and modification of rules as the system grows and changes. thus a l l rules in the crib data-base are represented as r e l a t i o n s between symptom groups and either sub-units as in the case of key-groups 
 r1   or other groups as with sub-groups  r1 . cafs is an ideal vehicle for supporting such r e l a t i o n s . 
	1 v a l i d a t i o n   	improvement and performance. 
       it was possible to validate crib's competence assuming that the correspondence between symptoms and the actions designed to reveal them was accurate and that the f a u l t - f i n d i n g guide data was not too far from the t r u t h . a r e l a t i v e l y inexpert user was asked to be completely guided by crib and 'carry out' the actions suggested by the system. if a l l was w e l l   we would have expected crib to suggest  as a f i n a l a c t i o n   the replacement or repair of a terminal sub-unit. this was the case in a large number of ' i n v e s t i g a t i o n s ' carried out  some 1 in a l l   . however  in some cases  especially where the chain of suggested actions was long  the r e a l l y relevant actions were not displayed soon enough. the reason for t h i s was pinpointed in the scheduling of actions after a p a r t i a l match  see mr1 in section 1 . 1 . when l i t t l e information is available to crib to p a r t i t i o n the symptom groups it tends to spread i t s net too wide in the search for p o s s i b i l i t i e s . however  by using the f i l t e r i n g f a c i l i t y described in section 1  it was possible to resolve at least some of these d i f f i c u l t i e s . full d e t a i l can be found in   1     where several ' r e a l ' f a u l t s discovered by an expert engineer are described. 
1 . 1 . 1 . assessment of performance. 
       crib can c e r t a i n l y help an engineer to find f a u l t s on broken computers where these f a u l t s have been successfully remedied before. if an engineer does not spot a f a u l t as a known one  whether or not he is using a system such as crib   he must f a l l back upon basic knowledge both about the p a r t i c u l a r machine he is working on  possibly functional knowledge  and about diagnosis in general. in t h i s case  crib  with i t s complete lack of e x p l i c i t functional knowledge  cannot help. however  the unknown symptom group w i l l   of course  contain many symptoms which are known and are present in other groups. it is thus possible that the engineer  with a l i t t l e thought on his p a r t   can locate the true f a u l t . this process has been observed when using crib in an unstructured way; ignoring suggestions  putting in unsolicited symptoms e t c . further discussion and a proposed solution to the 'new f a u l t s ' problem are in   1     
1. softcrib: an exercise in generalization. 
　　　if the structures and mechanisms within crib can be describd independently from the content of the data which drives i t   then the descript i o n w i l l be of a production system capable of wider application than computer diagnosis. this l i n e of t h i n k i n g follows the generation of puff  and prospector  and guidon  from the system architecture of mycin  the emycin or essential-mycin concept . 
　　　the next most obvious application for crib was diagnosis of software f a u l t s in a similar fashion to hardware f a u l t s . within icl  a group 
a 'dump-crackers' had already gathered data on f a u l t s exhibited by a new large-scale operating system called vme/k. most of the concepts in crib carried across to the software domain  a l b e i t with r e - i n t e r p r e t a t i o n . a hierarchy of a t t r i b u t e s describe the d i f f e r e n t levels of d e t a i l within the operating system. these a t t r i b u t e s were chosen to p a r t i t i o n bugs in a reasonable way and the whole system of a t t r i b u t e s forms a paradigmatic representation of the operating system's path-
1 

ology. a t t r i b u t e s which are immediately subordinate to a common a t t r i b u t e can then be characterised as answers to a single question  e . g . what type of dump  is subordinate to what software version  
　　　the remaining correspondences were s t r a i g h t forward. symptoms remained as symptoms  and key groups of symptoms corresponded to a trace of symptoms recorded on the way to f i x i n g a bug. actions were c l a s s i f i e d as either patches or questions which when answered by the user yielded further symptoms of that p a r t i c u l a r bug. other less important features of softcrib concerning i n t e r a c t i o n with and use of the new system can be found in   1   . once again the power of a h i e r a r c h i c a l l y guided diagnostic methodology has been demonstrated to be adequate to the task. moreover  the production system architecture of crib enabled the change of function merely through a change of data-base content and a simple r e - i n t e r p r e t a t i o n of parts of the data structures. 
1. conclusions; what is an expert system . 
　　　many workers in knowledge engineering and expert systems have attempted to define the f i e l d from several d i f f e r e n t angles. it has been said that an expert system should be able to explain i t s e l f to the user  as does mycin for example  just as a human expert can. claims have also been made for 'natural language' i n t e r f a c i n g ; being i n t e r a c t i v e in the form of a dialogue; having incremental data-bases and being adaptive and h e u r i s t i c in operation. all of these a t t r i b u t e s are highly desirable and even necessary in some cases. however  they are a l l reduced to being incidental window-dressing unless the system does actually possess expertise in i t s f i e l d . hence the emphasis in t h i s paper on the  before  and   a f t e r   phases. e l i c i t a t i o n of expertise is crucial to the i n i t i a l success of the system; a d a p t a b i l i t y and a c a p a b i l i t y for improvement are c r u c i a l to i t s continued success. 
　　　the question posed in the t i t l e of the paper can now be seen as relevant to tying  before  to   a f t e r   . it is of l i t t l e use to attempt a f u l l - s c a l e representation of expertise in the e l i c i t a t i o n phase  knowledge engineering is not cognitive modelling  if the r e s u l t i n g system is d i f f i c u l t to modify and hence to improve. it is equally bad to program elaborate schemes for fine-tuning the data-base when i t s content does not properly represent the desired expertise. the system should thus only capture that part of the expertise which is sure to be useful to a l l p r a c t i t i o n e r s   and which can be readily modified through straightforward improvement schemes. crib p a r t l y meets these demands  but i t s authors now see it as a prototype for something better in the f u t u r e . certainly production system a r c h i tecture has many desirable features  but expert system architectures should vary according to the forms of knowledge needed to capture a p a r t icular sort of expertise. e l i c i t a t i o n techniques geared towards these d i f f e r e n t forms of knowledge are thus v i t a l . 
acknowledgements 
       i n i t i a l l y   it was andrew bond  in the team led by frank george who suggested a system l i k e crib. les rabbitts of icl engineering t r a i n i n g provided some of the early ideas. thanks are due to bob beakley and ted newman of actp and to gerry piper and tony james of icl. the biggest thankyou  however  goes to tom addis of icl radc for his hard work  encouragement and insights too numerous to mention. 
