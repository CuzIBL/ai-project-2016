 
　noting that the methods employed by existing learning systems are often bound to the intended task domain and have little applicability outside that domain  this paper considers an alternative learning system design that offers greater flexibility without sacrificing performance. an operational prototype  constructed around a powerful adaptive search technique  is presented and applied to the problem of acquiring problem solving heuristics through experience. some performance results obtained with the system in a poker betting domain are reported and compared with those of a previously investigated learning system in the same domain. it is seen that comparable levels of performance are achieved by the two systems  despite the latter's dependence on a considerable amount of domain specific knowledge for effective operation. 
i introduction 
　the design of problem solving systems capable of improving their performance autonomously through the accumulation of experience in a specific task domain has received much attention within al  1  1  1  1  1  1 . such learning systems have appeared in many problem solving contexts and several have been quite successful. yet  the underlying methods by which problem solving heuristics are acquired in these systems are often bound to the intended domain  relying on considerable amounts of information specific to the domain for effective operation. as such  these methods are inflexible and have little applicability outs.de the intended domain. this paper considers an alternative learning system design that offers greater flexibility without sacrificing performance. the design is operationalized in a program called ls-1 that learns a set of heuristics  represented as a production system  ps  program  to govern the application of a 
　set of operators in performing a particular problem solving task. 
ii learning as adaptive search 
　as in   learning is viewed as a searching problem in the system's representation space. the core of the system is an adaptive search technique called a genetic algorithm  ga . gas are powerful procedures  motivated by standard models of heredity and evolution but applicable for searching any suitably represented domain of structures. empirical studies have demonstrated their capabilities in the areas of function optimization   model-fitting   learning   and discovery . despite these results  gas have been largely ignored by the al community.  
   this may be duo  in part  to a mistaken association with early evolutionary search models  e.g.   that embodied a form of random search. 
　briefly  a ga maintains a knowledge base of structures  e.g. alter native sets of problem solving heuristics lor a given domain  and proceeds by repeatedly 1  selecting structures on the basis of observed performance  and 1  applying idealized genetic operators to the structures selected to construct new structures. this results in a search wherein subsets of structure components found to contribute to good performance in the domain are propagated through the structures in the knowledge base  forming the basis for subsequent exploitation of larger and larger such subsets of components. intuitively  selection according to performance focuses attention on the most promising subsets and application of the operators serves to explore the utility of these subsets in new contexts. 
　structures are represented as sequences of their constituent components and manipulated as such by the genetic operators. the variants employed in ls i operate at various levels of granularity  manipulating sequences of productions at the highest level; sequences of symbols at the lowest level. the first operator  crossover  takes two structures  selects a breakpoint on each structure at a particular level of granularity  and exchanges the sequences of components to the right of the breakpoints. for example  if two structures consisting of the component sequences c1 c.1|c1.c1.c1 and c1 c.1|c1.c1.c1' are crossed at the designated breakpoints  the structures generated are c1 c.1|c1.c1.c1 ' and c1 c.1|c1.c1.c1. this operator tends to preserve subsets of components in relatively close physical proximity to one another in the input structures. a complementary operator called inversion alters the sequence of components representing a structure  thereby reducing the susceptibility of particular subsets of components to disruption by subsequent crossovers. in this case  two breakpoints are selected on a single structure  and the sequence of components delineated by the breakpoints is 
inverted. for example  an inversion of the structure c1|c1 c1 c1|c1 at the designated breakpoints yields c1 c1lc1.c1. application of this operator is constrained to levels where interpretation of the components is independent of their positions in the sequence  e.g. at the production level . a final operator is mutation  which arbitrarily alters individual components of a structure. it functions as a background operator  i.e. its/probability of application is very low   its presence insuring the reachability of all points in the search space. 
　as alluded to above  the power of the algorithm lies not in the testing of individual structures but in the efficient exploitation of the wealth of information concerning the components comprising the structures. consider the sequence of compononts c1 c1 cn that comprises a single structure s in the knowledge base. an evaluation of s  e.g. an assessment of the relative worth of s as a solution structure  actually provides information as to the worth of each of the different subsets of components that are present in s  
　
s. smith 1 
since it is these components that interact to produce the observed 
　
performance of s. if s has n components  then information is provided about 1n-1 distinct subset . the theory underlying the algorithms  established in  /j and extended to encompass ls-1's operator set in|1   states that the number of structures in the knowledge base possessing a given subset of components can be expected to increase or decrease over time at a rate directly proportional to the observed performance of the subset. thus  all subsets of components appearing in the structures in the knowledge base are simultaneously pursued in a near-optimal fashion  a phenomenon referred to as implicit parallelism. the reader is referred to  1  1| for a more detailed discussion of the algorithms and their properties. 
　the remainder of the paper is organized as follows. a brief overview of the ls-1 system is presented in section iii  a complete description may be found in  . in section iv  some experimental results obtained with ls-1 in the poker betting task domain investigated in  are reported and a comparison is drawn. in section v  some concluding remarks are made. 
ill system overview 
the ls-1 learning paradigm is depicted schematically in figure 
1. the system maintains a knowledge base of m structures  each a candidate set of productions  or ps program  for solving the task at hand. on a given cycle through the learning loop  each ps program is applied by the problem solving component to k instances of the task. the critic analyzes the /  operator sequences generated by the problem solver in this proficiency test as well as characteristics of the ps program under evaluation  and assigns a performance measure indicative of the relative worth of the ps program as a potential solution to the task at hand. once all structures in the knowledge base have been evaluated in this manner  the ga is invoked to construct a new knowledge base of structures for testing and the cycle is repeated. the knowledge base of ps programs  together with the associated performance measures  is viewed as ls-vs internal memory  representing the sum of the system's experience in the task domain at any point in time. externally  ls-1's current hypothesis as to a solution to the task is the ps program that has been highest rated by the critic thus far in the search. ls-1's progress is monitored by considering the sequence of hypotheses generated over time. 
a. the problem solving component 
　the ps architecture serving as ls-1's problem solving component is organized as a domain independent framework into which task specific primitives must be injected for operation within a given task domain. more specifically  ls-1 is instantiated in a particular problem solving domain by supplying an appropriate set of state variables and operators. the state variables provide the problem solver with a characterization of the domain and the operators form the problem solver's repertoire of alternatives in reacting to the current state. when enabled  the productions invoke operators and enter signals into working memory  wm  in response to perceived state variable and wm configurations. 
　the productions which collectively constitute a single structure in ls-1's internal memory  are homogeneous and simplistic in nature. each antecedent contains a fixed number of elementary patterns  one sensitive to each of the domain's state variables and a given number attending to the signals resident in wm. each consequent contains a signal  to be placed in wm if the production is activated  and  optionally  the designation of an operator to be applied to the current state. if no operator is designated  the production is intended for internal communication purposes only. 
　this simple structure  necessary in providing a knowledge representation amenable to manipulation by a ga  imposes limits on the recognizing capabilities of individual productions. these deficiencies are balanced  however  by a ps control scheme that activates all instantiations found during the recognition phase of a given cycle. this allows distinct productions to cooperate in the recognition of more complex aspects of the current state. a default resolution mechanism coordinates external activity if more than one operator is designated by instantiated productions on the same cycle. 
b. the critic 
　the ls-1 critic  in assessing the performance of the ps programs constructed by the ga  provides the ga with a global focus in the subsequent construction of ps programs. 
accordingly  the critic is equipped with a means for analyzing the correctness of the k operator sequences produced by a given ps program during its proficiency test  and measures based on this analysis play a major role in the derivation of the overall performance rating. however  the critic also considers general characteristics of the ps program under evaluation that appear relevant to good performance regardless of the specific task domain. structural properties of the productions  e.g. potential for communication in the wm patterns and signals  level of generality in the productions' conditions   dynamic properties of the execution history  e.g. percentage of productions activated  amount of dependence on the default resolution mechanism   and efficiency  e.g. number of productions  are all assessed to provide a finer level of discrimination between candidate structures. 
iv some experimental results 
　to provide a basis for comparison with previous work  ls-1 was tested in the poker betting domain first considered by waterman . briefly  the system engages in a game of draw poker with the goal of making bet decisions that maximize profits. each time it is the system's turn to bet  it must therefore infer the most appropriate bet decision to make  given the current state of the poker game. for purposes of evaluation in the experiments described below  the objective was to generate the correct bet decisions in each of 1 consecutive rounds of play. 
　remaining faithful to waterman's paradigm  the ls-1 problem solving component was presented with 1 state variables upon 
　
1 s. smith 
which to base its bet decisions: the value of the problem solver's hand  the amount of money in the pot. the amount of money last bet  the ratio of the amount of money in the pot to the amount of money last bet  the number of cards replaced by the opponent  a measure of the probability that the opponent can be bluffed  and a measure of the conservativcncss of the opponent. 1 bet decisions were provided as operators: call  drop  bet low  and bet high. within the critic  waterman's deductive procedure for determining the correctness or incorrectness of a given bet decision  based on an axiomatization of the game of poker  was implemented and a measure indicating the percentage of agreement with the axioms in the bet decisions generated was incorporated in the evaluation function. a second measure relating to performance  the number of successfully completed rounds of play  was also utilized to insure that premature drop decisions  i.e. drops issued before cards have been replaced  would not be assessed as appropriate by the critic. 
　ls-1 was pitted against p built-in   a poker betting program hand crafted by waterman and judged to perform at roughly the same level as an experienced human poker player  1|. an internal knowledge base of 1 ps programs was maintained by the system  generated at the outset by randomly selecting conditions and operators for the individual productions of each structure. 
 running for 1 dec1 cpu hours. ls-vs operation verses  p built in  was observed over an interval of 1 ps evaluations  approximately 1 cycles through the learning loop . as indicated by the performance results depicted in table 1. ls-1 achieved the performance objective within this time frame. a ps program was constructed that successfully completed 1 consecutive rounds of play in which there was total agreement with the poker axioms as to the bet decisions generated. 

　in attempting to understand these performance results it was discovered that the heuristics used by p builtin   while appropriate within waterman's paradigm  were not designed for such an extended game of poker  i.e. 1 rounds of play . generally speaking. p built-in  incorrectly judged ls 1 to be an extremely conservative player over time  and  with this misconception  was easily bluffed into dropping. ls-1 responded to its opponent in precisely the right manner  constructing ps programs that exhibited an overriding tendency to bet. 
　　the decision to start ls-1 from scratch in these experiments was entirely motivated by a desire to provide a direct comparison with waterman's results and is not due in any way to properties of the model. we could have initialized ls-1 at any level of expertise. 
    
     since a ga is inherently a stochastic process  successful performance in a single run might be misleading  e.g. a consequence of the random number seed . the results presented here actually represent averages taken over several distinct runs of ls-1. 
　to test ls-1 against a more formidable opponent  adjustments were made to p built-in  to eliminate the above misconception and a second experiment was conducted. the results obtained in this case are presented in table 1. we once again observe a steady and significant improvement in the hypotheses generated by ls-1 as the poker game progressed. within 1 evaluations  a ps program was constructed that successfully completed 1 of 1 rounds of play while generating bet decisions that agreed with those deduced by the critic 1% of the time. 
　the relative success of ls 1 in the poker betting domain can be gauged by comparing these results to those obtained with waterman's system. waterman subjected his trained learning system to a proficiency test consisting of 1 rounds of poker against a human opponent  also measuring performance in terms of the percentage of agreement with the axioms in the bet decisions generated. 1% agreement was achieved by his system in this test . thus  while ls-1 ps programs were subjected to a shorter proficiency test  i.e. 1 rounds   the levels of performance achieved by the two systems are comparable. this becomes particularly significant when we examine the methods employed by waterman's system in manipulating its ps program. specifically  the creation of new productions was guided by an a priori supplied decision matrix  specifying for each possible bet decision  the reason why each state variable is relevant to that decision if  in fact  the variables are relevant. this information was used directly in building the predicates of new productions' antecedents. 
v concluding remarks 
　the intent of the ls-1 design was to provide a flexible yet effective means of acquiring problem solving knowledge in a 
　learning system. the experimental results presented above clearly illustrate the viability of the approach. moreover  the method of learning employed by ls-1 embodies a general technique whose effectiveness in a given problem solving domain depends primarily on the quality of the evaluation function realized by the critic  ls-1 has  in fact  yielded similar performance results in another  unrelated domain   although space limitations prohibit their discussion here . clearly  domain knowledge must enter into the derivation of the performance measure. however  it is felt that this shift in perspective with respect to the role of domain knowledge fundamentally enhances the general applicability of a learning system. the specification of domain specific measures to judge the external performance of hypotheses appears a far less imposing problem than the construction of learning methods based on domain specific assumptions. 
acknowledgments 
this work was conducted while the author was in the computer 
science department at the university of pittsburgh. the author would like to thank ken dejong for his guidance and encouragement throughout the course of the project. 
