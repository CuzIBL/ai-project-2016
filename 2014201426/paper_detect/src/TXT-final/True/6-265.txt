 
this poster motivates ai research in the area of real-time strategy  rts  games and describes the current status of a project whose goals are to implement an rts game programming environment and to build ais that eventually can outperform human experts in this challenging and popular domain. 
1 	real-time strategy games 
commercial computer games are a growing part of the entertainment industry and simulations are a critical aspect of modern military training. the two fields have much in common  cross-fertilize  and are driving real-time ai research  herz and macedonia  1 . with the advent of fast personal computers  simulation-based games have become very popular. today  these games constitute a multi-billion dollar enterprise. examples are sports games and real-time strategy games. the common elements of simulation games are severe time constraints and a strong demand of real-time ai which must be capable of solving real-world decision tasks quickly and satisfactorily. popular simulation games are therefore ideal test applications for real-time ai research. 
　real-time-strategy  rts  games - such as the millionsellers starcraft by blizzard entertainment and age of empires by ensemble studios - can be viewed as simplified military simulations. several players struggle over resources scattered over a 1d terrain by setting up an economy  building armies  and guiding them into battle in real-time. rts games offer a large variety of fundamental ai research problems  unlike other game genres studied by the ai community so far: 
  resource management. players start off by gathering local resources to build up defenses and attack forces  to upgrade weaponry  and to climb up the technology tree. proper resource management is a vital part of any successful strategy.   decision making under uncertainty. initially  players are not aware of the enemies' base locations and intentions. they have to gather intelligence by sending out scouts. if no information is available yet  the players must form plausible hypotheses and act accordingly. 
  spatial and temporal reasoning. static and dynamic ter-rain analysis as well as understanding temporal relations of actions is of utmost importance in rts games - and yet  current game ais largely ignore these issues and fall victim to simple common-sense reasoning  forbus et al.  1 . 
  collaboration. in rts games groups of players can join forces and intelligence. how to coordinate actions effectively by communication among the parties is a challenging research problem. 
  opponent modeling  learning. one of the biggest short-comings of most  rts  game ai systems is their inability to learn from experience. human players only need a couple of games to spot opponents' weaknesses and to exploit them in upcoming games. current machine learning approaches in this area are inadequate. 
  adversarial real-time planning. in fine-grained simula-tions  agents cannot afford to think in terms of micro actions. instead  abstractions have to be found which allow a machine to conduct forward searches in a manageable abstract space and to translate found solutions back. because the environment is also dynamic  hostile  and smart - adversarial realtime planning approaches need to be investigated. 
　playing rts games is challenging. even more challenging is the creation of autonomous real-time systems capable of outperforming human experts in this domain. because search space abstraction  real-time planning  and temporal and spatial reasoning are central to many other problems  the scope of applications seems endless. one example is highperformance combat simulators which are in large demand for training military personnel today and will become the core of automated battlefield decision-support systems of tomorrow   von der lippe et al.  1  predicts that 1% of the us armed forces will be robotic by 1. 
1 	an rts game programming environment 
the lack of ai interfaces even in upcoming rts game titles makes it hard to conduct real-time ai research in this area and to compare the strength of the resulting al systems with that of human experts. in order to solve this problem we launched an open source rts game programming project  buro  1  with the following goals: 
  building a hack-free server-client rts game system. at the core of the system is a simulator to which players connect via unix sockets  fig. 1 . the unique system features include: server-side simulation - which only sends visible information to clients thereby rendering common maprevealing client hacks useless - and an open message protocol that allows al researchers and players to connect whatever client software they like. 
  sparking competition among players and researchers. popular games in which human players still have the upper hand are ideal test-domains for ai research. unlike the confined guis of commercial rts games  our open design allows the construction of hybrid ai systems in which the human general is aided by al modules of growing capabilities. competitive game playing on an open internet rts game server is therefore likely to improve ai performance and ergonomic gui design. 
  applying planning and machine learning techniques to 
rts games. 	classic game al methods - such as alpha-

1 	poster papers 

beta search - cannot be applied directly in this domain due to the large number of game objects  imperfect information  and real-time demands. search space abstraction  hierarchical planning  and machine learning arc approaches to overcome these problems. 
　our initial software release implemented a basic rts programming infrastructure . recently  we added terrain features  water  ground  plateaus  and ramps   view obstruction by terrain  and a split-view gui which allows to watch different parts of the playing field simultaneously. in order to maintain the high simulation speed  terrain and vision are based on tiles  fig. 1 . soon  the complete source code of our rts programming environment will be released. it is being used in two thesis projects dealing with machine learning of low-level unit behavior and abstraction  planning  and heuristic search in rts games. we hope to report first results in the rts game ai domain later this year and to spark enough interest to be able to organize man-machine and machine-machine rts game tournaments in the near future. for this it will be necessary to define standard game setups including unit properties  size speed sight and attack ranges ...   technology tree  and resources. in contrast to commercial products  the focus here will be on simplicity to ease the initial al development. 
1 	related work 
the growing literature on al in commercial games surely indicates the demand of smarter game al. many articles on planning are relevant to this project. due to space limitation we only briefly mention j. laird's soar architecture and its application to first-person shooter games  laird  1  and m. atkin's work on the grasp system that is applied to a capturc-thc-flag game  atkin  1 . 
　computer soccer pursues similar goals and has become quite popular  stone  1 . this domain can be regarded as a simplified rts game with only a few objects  no economy  unremarkable terrain features  and more or less complete in-
figure 1: server-client rts game architecture. clients connect to a central server which sends player views  receives actions for all objects  and updates the state of the world. formation. another big difference is that in computer soccer a small number of agents are required to compute their actions autonomously whereas in rts games a large number of objects have to be orchestrated. 
　the other body of literature relevant to this project is on military analyses and applications. research in this area spans from mathematical combat models  ilachinski  1  over computer generated forces - which are used in simulation and training - to decision-support systems that aid commanders and troops on the battle-field or even control entire weapon systems autonomously. our project tries to bring both research communities together. 
