 
　　a new prolog/lisp type programming language called qute is introduced. qute computes  partial  recursive functions on the domain s of symbolic expressions in the sense of sato  sato and hagiya. 
　　qute amalgamates prolog and lisp in a natural way. any expression that is meaningful to qute is either a prolog expression or a lisp expression and a prolog  lisp  expression is handled by the prolog  lisp  resp.  part of qute. moreover  the prolog-part and the lisp-part calls each other recursively. 
　　compared with the traditional lisp symbolic expressions  our symbolic expressions are mathematically much neater and yet constitute a richer domain. qute is a theoretically well-founded language defined on this domain of symbolic expressions. 
　　many interesting features of qute are described in this paper. 
　　qute has been implemented on vax/unix and is used to develop a programming system for proving properties of our domain of symbolic expressions. 
1. introduction 
　　in this paper  we introduce a new prolog/lisp type programming language called qute that is designed to compute  partial  recursive functions on the domain s of symbolic expressions in the sense of sato   sato and hagiya. 
　　since qute combines the features of prolog and lisp quite naturally  it provides a comfortable environment for developing programs interactively. users of qute can not only enjoy both prolog and lisp style programming but also combine them in a unique way. 
　　to be more precise  any expression that is meaningful to qute is either a prolog expression or a lisp expression. a prolog expression may contain lisp expressions as its subexpressions and conversely a lisp expression may contain prolog expressions as its subexpressions. prolog  lisp  expression is handled by the prolog  lisp  resp.  part of qute. in this way  the prolog-part naturally contains the lisp-part and the lisp-part contains the prolog-part. 
this paper is based on the result of activities of working groups for the fifth generation computer systems projects. 
　　another characteristic feature of qute is that  like lisp but unlike prolog  symbolic expressions play the double role of data and programs. it is therefore possible to write a simple metacircular interpreter of qute by qute itself. in fact  we can write the interpreter using only the prolog-part of qute. the interpreter of qute can be defined formally by inductive definitions as we did for hyperlisp. this makes qute a theoretically well-founded language. in this paper  however  due partly to the limitation of space  we will describe the semantics of qute rather informally. 
　　loglisp l  takes a similar approach towards combination of prolog and lisp  but our concern centers on formalism which we slightly mentioned above. therefore  we designed qute so that programs can be naturally regarded as symbolic expressions.  as is explained later  we regard a 'variable' as a symbolic expression unlike usual prolog.  
qute has been implemented on vax/unix at the 
computer centre of the university of tokyo. the language is used to develop a programming system for proving properties of our domain of symbolic expressions. properties of qute will be expressed and verified in the system. see sakurai  for more details of the project. 
　　in the rest of the paper  we first review our domain s briefly and then describe the syntax and semantics of qute. many interesting features of the language will be described along the way. 
1. symbolic expression 
1. definition of sexp 
　　symbolic expressions  sexps  for short  are constructed by the following clauses: 
1. 1 is a sexp. 
1. if s and t are sexps then snoc s  t  is a sexp. 
1. if s and t are sexps and at least one of them is not 1 then cons s  t  is a sexp. 
all the sexps are constructed only by means of the iterated applications of the above three clauses  and sexps constructed differently are distinct. we denote the set of all the sexps by s. note that snoc is a total function on sxs while cons is partial since it is undefined for the argument  o  1 . we make cons total by stipulating that cons 1  1  - 1. we also put snoc 1  1  - 1. 

1 m. sato and t. sakurai 

m. sato and t. sakurai 1 

1 m. sato and t. sakurai 

	m. sato and t. sakurai 	1 


1 m. sato and t. sakurai 
　　when a sexp / is evaluated  it is necessary to know the values of the free variables in /. however  the intended meaning of a free variable in a predicate is an unknown sexp which may be known after evaluation. we introduce the notion of an undefined value  it is an imaginary element outside of s . we suppose that each free variable has a different undefined value. 
1. unification 
　　before evaluating the predicates in a goal  an environment which is a list of pairs of a free variable and an undefined value is set up. before an unification is made with a predicate definition  an environment is set up similarly  using free variables in the parameter and the body of the predicate definition. an undefined value plays the role of a 'variable' in unification. 
example 1. 
　　　- appendll  prolog  lisp    qute   x  ; creates an environment 
　　　  x . undf1   before evaluation  where undf  is an undefined value. evaluating   prolog  lisp    qute   x  results in 
	  prolog  lisp    qute   	undf1 	 1  
according to the definition of appendl in  p1   the first parameter list  1  y  y  is evaluated first and its result is  1  undf1  undf1 . this is not unifiable with  1 . so the second parameter list   xi . x1   y   xi . z   is evaluated and its result 
　　　  undfs . undfa   undf1   undf1 . undf1   is unified with  1 . at this time  the environment is 
　　　  xi . prolog    x1 .  lisp     y .  qute     z . undfi   and undf  is instantiated to  undf1 . undf1. in this way  execution goes on. after execution  the first environment is instantiated to 
  x .  prolog  lisp  qute    d 
　　since no restriction is imposed on the parameters of an assertion  they may contain any special sexp as is seen in  p1 . unification with such an assertion goes like the following. 
example 1. 
　　 p1  is executed under the definition  p1   where append is a function defined in  li1 .   prolog  lisp    qute   x  is evaluated with the result 
	  prolog  lisp    qute   	undf1 . 	 1  
a parameter list  x  y  append x  y   of  p1  is evaluated and its result is 
	 undf1 	undf1 	undf1 	 1  
with the condition undf1 - append undf1 undf1 . 
that is  since we cannot evaluate append  x  y  with free variables x and y  we assume that its value is undf1 and impose the above condition.  1  and  1  are unified and as a result undefined values are instantiated  i.e.  undf1 -  prolog  lisp   undf1 -  qute  and undf1 - undf . the condition is instantiated to undf  = append   prolog  lisp    qute   and it is checked  append   prolog  lisp    qute   is evaluated and undf  is instantiated to  prolog  lisp  qute . d 
1. connecting lisp and prolog 
　　one of the most important features of qute is that the prolog-part can be called from the lisp-part. it is a mechanism similar to hilberfs epsilon symbol  that is  a mechanism to find a value which makes a certain predicate to hold. 
1. examples 
 el    append1 x  y  - epsilon v; append1 x  y  v  ; append1 defined 
 e1  1- append1 
   y  y 
 x . x   y   x . z  
	. 	- append1 x  y  z  
append1 defined 
 e1  append1  lisp  prolog    qute  ; 
-  lisp  prolog  qute  
 e1    append1 x  y  = epsilon v; append1 x  y  v  ; append1 defined 
 e1  	+ append1 
i   y  y 
i  x . x   y   x . append1 x  y   
append1 defined 
 e1  	+ member 
| x   x . x  
i x   y . x  
- member x  x  
member defined 
 e1  epsilon x; membertx   apple  orange   ; 
- apple 
 e1  - eq orange  
　　　epsilon x; memberlx   apple  orange    ; yes 
1. epsilon expression 
　　a special sexp  apply .  val  prds  vars   is called an epsilon expression where val is a sexp  prds is a predicate or a cons list of predicates  i.e.  conjunction of predicates  and vars is a snoc list of variables that are local in the epsilon expression. we introduce a syntax sugaring for an epsilon expression. it is 
　　　epsilon val; body  where val and body are sexps. it denotes 
　　　 apply .  val  body  vars   where vars is the snoc list of the free variables in val. 
according to the definition of eval in 1  

eva/  apply .  val  body  vars    env  
= trueival  body  vars  env  
it is computed as follows. a new environment e is set up by appending to the head of the current environment env a list consisting of pairs of a free variable in vars and an undefined value  body is executed by the prolog-part under this environment e with the result that the environment is instantiated to an environment e' that makes body true. according to the formal specification of qute  any e' that makes body true is accepted  but the actual implementation finds e' in a depth-first way. then val is evaluated under the instantiated environment e  and the result is the value of  apply .  val  body  vars  . when e' is created a marker to this frame is also made  so that a later backtrack will return to this point. 
epsilon expression is therefore a multi-valued function  however only one value is returned at a time and further values may be obtained by using backtrack. example 1. 
　　 e1  is evaluated under the definitions  el    e1 . append1 is called and the environment 
  x .  lisp  prolog     y .  qute    
is created by pairup. epsilon expression which is the body of append1 is evaluated. first  a new environment 
  v . undf1    x .  lisp  prolog     y .  qute    
is created. a goal append1 x  y  v  is executed under this environment according to the definition  e1 . the environment is instantiated to 
  v .  lisp  prolog  qute     x .  lisp  prolog     y .  qute    
and v is evaluated under this environment with the result  lisp  prolog  qute . it is the value of the epsilon expression and of append1  lisp  prolog    qute  . ＆ example 1. 
　　 e1  defines an ordinary membership relation on a list. in  e1   the lisp-part of qute sets up an environment 
　　　e -   x . undf1   and calls the prolog-part. the prolog-part tries to find an instance of e that makes membertx   apple  orage   true. the following two instances of e both give a 
correct instance: 
e1 -   x . apple    e1 -  lx. orange   
however  the actual implementation does a depth-first search and returns e1 as a new environment. the lisp-part evaluates x in this environment and returns apple as the value of  e1 . 
　　in executing  e1   the two arguments of the predicate eq are evaluated first. the second argument  which is the same epsilon expression as  e1   is evaluated similarly as above and apple is returned as its value. since orange and apple are not 'eq'  equal   a backtrack occurs. this forces qute to find a second value of the epsilon expression and the value orange. 
m. sato and t. sakurai 1 
will be returned this time. since orange and orange are 
'eq' 'yes' is returned as the answer to the question 
 e1 . ＆ 
1. conclusions and future plans 
we have shown that it is possible to amalgamate 
prolog and lisp in a natural way. a comparison of the evaluation of a qute predicate with that of an atomic formula in a first order language will make this naturalness clear. consider a first order language that includes: 
a binary predicate symbol    for less than   a binary function symbol +  for plus  and constants for natural numbers 
with their usual interpretations. then the truth value of the atomic formula 
　　　1   1 is evaluated as follows. first evaluating the terms 1 and 1  we get 1 and 1. then by the meaning of   we see that 1 is less than 1  which implies the truth of the formula in question. the evaluation in qute is completely analogous. with appropriate definitions of  less than  and  plus   the question: 
　　　- less than plus 1  1   1 ; is evaluated by qute resulting in the answer  yes . 
　　according to this analogy  the evaluation of a sexp by the lisp part of qute corresponds to the evaluation of a term. here  an epsilon expression corresponds to hilbert's e-term. 
　　we have defined the semantics of qute informally in this paper. we wish to give a formal definition of qute in a forthcoming paper.  see also sakurai.  this will be done as follows. first  we will define a formal intuitionistic theory of symbolic expressions called sa which is proof theoretically equivalent to heyting's arithmetic ha. it will then become possible to define qute within sa. moreover  to mechanize these processes  we will implement a proof checking system for sa using qute. in this way  we will be able to formally reason about the properties of qute within qute itself. 
