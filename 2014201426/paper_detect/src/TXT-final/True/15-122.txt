logic programs w i t h uncertainties: 
a tool for implementing rule-based systems 
ehud y. shapiro1 
department of applied mathematics 
the weizmann institute of science 
rehovot 1  israel 
     
1 . i n t r o d u c t i o n 
     one natural way to implement rule-based expert systems is via logic programs. the rules in such systems are usually definite clauses  or can easily be expressed as such  and the inference mechanbms used by such systems are built into the prolog interpreter  or can be implemented in prolog without much effort. 
     the one component of expert systems which is not readily available in logic programs is a language for specifying certainties of rules and data  and a mechanism for computing certainties of conclusions  given certainties of the premises. clark and mccabe  suggest an implementation technique for solving this problem. they augment each predicate in the rule-language with an additional argument  whose value is the certainty of the solution returned in this predicate  and augment the condition of each clause with an additional goal  whose purpose is'to compute the certainty of the conclusion of the clause  given the certainties of solutions to the goals in the condition of the clause. 
     in this paper we propose a different way of implementing rule-based expert systems within prolog  in which evaluation of certainties of solutions is carried out at the meta-level  within the logic program interpreter itself. this resulting framework  called logic programs 
with uncertainties  has the following properties: 
  it is amenable to theoretical analysis. in particular  a precise semantics can be given to logic programs with uncertainties. 
  standard logic programs are a special case of logic programs with uncertainties. if all certainty factors are 1  then the semantics defined and the interpreters developed degenerate to the standard semantics and the standard interpreter for logic programs. 
'this research was carried while the author was at yale university  supported by the national science foundation  grant no. mcs1. 
  since the semantics of logic programs with uncertainties is simple  it is easy to apply the debugging algorithms developed in . 
     we consider the last point to be of great importance. algorithmic debugging can provide the essential link between the expert and the executable realization of his knowledge  and thus facilitate the process of knowledge transfer and debugging. 
     the paper defines the syntax and semantics of logic programs with uncertainties  develops an interpreter for such programs  and suggest how algorithmic debugging can be used by an expert to debug such rule-based systems. examples are not included due to space limitations. 
1 . l o g i c p r o g r a m s w i t h u n c e r t a i n t i e s 
     a definite clause is a clause of the form a - b  where a is an atom and b is a conjunction of zero or more atoms. a certainty factor c is a real number  greater than zero and less than or equal to one. a certainty function f is a function from multisets of certainty factors to certainty factors. a logic program with uncertainties p i s a finite set of pairs   a * - j 1   /     where a*-b is a definite clause and / is a certainty function. 
     the certainty function is used to compute the certainty of the conclusion of a clause  given the multiset of certainties of solutions to goals in the condition of the clause. we require from a certainty function / that for every multiset s  f su{1} =/ ¡ê   and that / be monotonic increasing  which means that s s' implies f s  f 's '   where   is the partial order over multisets  defined as follows. let s and x*={x1 x1 ...  xn}  be two multisets  n   1 . then x s iff there is a multiset y={y1 y1      y n } such that scy and x1  / -  1   i   n . 
our theoretical treatment is independent of the particular certainty functions chosen  as long as they satisfy these two requirements. 
     
1 e. shapiro 

     
e. shapiro 1 
to the  nonlogical  way the certainty of solutions is computed  the second argument of solve can be used for output only  or  in other words  the interpreter is applicable only in case the certainty factor is not instantiated in the input goal. also  most prolog implementations do not allow expressions of the form f s   where f is a variable symbol. there are standard techniques to get around the problem. 
     ideally  one would like to specify some certainty threshold  with the intention that the interpreter will compute only solutions with certainty above this threshold. we develop a special purpose pruning interpreter for a particular scheme of certainty functions  and then show how to generalize it. 
     since the semantics defined for logic programs with uncertainties proves to be insensitive to the particular certainty functions chosen  we tend to believe that no theoretical argument will be able to decide between the reasonable alternatives. sociologically speaking  this conjecture has proved itself so far. each school of expert systems is using its own particular way of computing certainties  with no noticeable difference in the validity of their results. 
     so we pick our pick. the certainty functions we choose  cf  1   computes the product of c and the minimal element of 1  in case s is not empty  and returns c otherwise. these functions meets the requirements stated above. as the difference between the functions associated with the different clauses is just the constant c  we represent clauses as pairs  a -b c   where c is the certainty factor of a+-b in p. the interpreter in figure 1 below has this function scheme built-in. this interpreter receives as input a goal and a threshold of required certainty for solutions  and prunes computations for which it is evident that any solution found along them will not meet this threshold. the semantics of 
1olvt a t c  	is ''a is provable from p with certainty c and 	c r. 
     the way the interpreter prunes low-certainty execution paths is via the call times* 1  f 1 . if the results of dividing t by f is greater than one  the call fails  as 1  is not a certainty factor then. note that times serves three functions in the interpreter: it computes multiplication and division  and prunes computation paths which fail to pass the desired certainty threshold. a similar interpreter can be built for most reasonable schemes of certainty functions. 
     this interpreter has the following interesting property: it always terminate if every clause in the 
     
1 e. shapiro 
certainty threshold f  the computation is hound not to meet this threshold. 
1. a note on debugging logic programs w i t h uncertainties 
     since a logic program with uncertainties has semantics  one can debug it like any other program  if one knows its intended interpretation. that is  if one knows the input-output relations it is supposed to compute  and their associated certainties. in particular  the diagnosis algorithms described in  are applicable in 
such a situation. 
     assume that a logic program .with uncertainties has a conclusion a whose computed is judged by the expert to be too high. we can conclude that  according to the interpretation the expert has in mind  the program contains at least one false clause. such a clause can be detected by querying the expert about the truth  or certainty  of intermediate conclusions obtained during the proof of a  as done in . 
     the advantage of having such a diagnosis algorithm is more valuable for the debugging the rule-base of a system by an expert then for normal program debugging: in normal program debugging the debugger is a programmer  who not only knows the intended declarative semantics of the program  i.e. what it should compute   but its procedural semantics  i.e. how it computes  as well. 
     this is not necessarily the case with experts and rule-based systems. one reason for expert systems being composed of a rule-base and an inference mechanism is to allow the expert to effectively transfer her knowledge in a 
     declarative form to the system  even when she is ignorant of the particular inference mechanism used. the debugging algorithms allow the expert to maintain this appropriate ignorance even when she is debugging the rules she suggested  since these algorithms simulate the execution of the inference mechanism  and query the expert for declarative information only. 
1. conclusions 
     logic programs with uncertainties provide a sound theoretical basis for systems which contain only an approximate description of a domain. their clear declarative semantics allows the expert to tune the system to reflect his knowledge  while maintaining ignorance 	of 	the 	inference 	mechanism 	the 	system implements. 
