 
   learning problem solving from examples suffers from three problems. first  there is a strong dependency on the order of the presented examples. second  each example has its own peculiarities which must be overcome. third  the size of the generalization space can be huge  even if the instance language is small. by adding perturbation operators to the concept tree each of these problems can be alleviated. this is demonstrated in a system which learns  through interaction with a teacher  to solve simultaneous linear equations. 
1. introduction 
   with the aid of a teacher  junior high school students can learn to solve simultaneous linear equations. a program  given the same information  has numerous problems to overcome. one problem is focussing attention: the solutions presented may contain spurious associations  hiding the essential characteristics or features. another problem is the extremely large space of possible rules  candidate generalizations  that match a given instance of a set of linear equations and the given appropriate operation. for a natural representation of equations there are more than 
one million rules one might infer. we avoid these problems by examining the effect of the same operator on a  near  example created by perturbing the given example. in this manner we can focus attention on the essential features and reduce the size of the search space to several thousand 
possibilities. once this is done we can apply 
standard generalization techniques  such as described by vere  1  1  1   michalski   or mitchell   1   1   . as a side benefit this technique also mitigates the effect of the particular sequence of examples that the teacher presented. 
1
   this research was supported by the naval ocean system center under contract n1-c-1. 
1. related work 
   winston  showed the importance of  near  misses in learning concepts about the blocks world. by using perturbations  near  examples are generated automatically. we use a relational production system  somewhat like vere's  except that we use a bag of conditions rather than a set  to represent the program's knowledge of when to apply operators. production systems have been successfully used to model the acquisition of skill for poker playing   puzzle solving   algebra problems   arithmetic problems   and symbolic integration . of these  neves's  system learned to solve one equation in one unknown from textbook traces. the system learned both the context  preconditions  of an operator as well as which operator was applied  although the operator had to be known to the system. his generalization language was simpler than ours in that a constant could only be generalized to a variable. anzai  gradually refined weak general problem solving methods into strong ones by acquiring strategies for the tower-of-hanoi problem  weak methods  without some heuristics  would leave our program with too large a space to search. the program lex  uses version spaces to describe the current hypothesis space as well as concept trees to direct or bias the generalizations. as it is not the main point of our work  we keep only the minimal  maximally specific  generalization  of the examples. 
1. perturbation method 
   before discussing the general technique of perturbations  we will illustrate its use in learning to solve simultaneous linear equations. we adopt a relational description of each equation  so equation a  1x-1y=-1 is stored as: {tenn a 1*x   term a -1*y  term a 1 }. 
   following mitchell  and michalski  we have concept trees for integers  variables  and 

1 d. kibler and b. porter 

sub a b  the resulting equations are: 
	a: 	1x+1 
	b: 	-1y-1 
which is not simplier  sub b a  would be effective however . 
   since the operator is effective in example i i   the system generalizes  minimally  its current rule conditions with this example yielding the new rule: 
 {term a 1*x  term a -1   term b 1*x  tenn b -1*y  term b -1 } =  sub a b  the major effect is to delete the condition on the y-term of equation  a . perturbed examples for which the operator is not effective are disregarded. in other 'domains this negative information might be useful  but it is not necessary for this domain. after generalizing with example iv f the rule becomes: 
{term a 1*x   term b 1*x   term b -1*y   term b -1 } 	   sub a b . 
   the effect of generalizing with example v is to allow any negative coefficient for the y-term of equation b : 
{tem a 1*x  term b 1*x  term b neg n *y   term bf-1 } =  sub a b . 
futher perturbations yield the candidate rule: 
{term a 1*x   term b 1*x   term b neg n *y  }= sub a b . since each term in this rule has about 1 possible generalizations  this rule has more than 1 possible generalizations. 
   sometime later  probably in the context of another example  the program may have to incorporate a rule of the form: 
{term a 1*y   term b 1*y   term b 1*x }  sub a b . a minimal generalization of this candidate with the previous rule yields the rule: 
{tenn a pos n  *var  x    term b pos n  *var   x    term b nonzero m  }    sub a b . eventually  depending on the examples chosen by the teacher  an effective set of rules will be generated. each rule can be fully learned with only two instances  if the instances are choosen to be maximally dissimilar but s t i l l requiring the same operator. a more casual and usual set of examples  such as those found in  require 1 examples to generate the rule. at most five instances or interactions with a teacher are required to learn the rule: 
{term label a   nonzero n *var x   term label b   nanzero n *var x   term  label  b   nonzero m *var  y } 
	-  	sub  label  a   label  b   
a rough english translation of this rule is: if 
d. kiblerand b. porter 1 
two equations have equal terns  then subtract those equations  replacing equation label b   with 
the result  provided equation label b   has two terms    
   the rule for the add operator is similar to the rule for subtract: 
 tenn labeka   nonzero n *var x   term label  b   nonzero -n *var x   term label b   nonzero m *var y } 
   =  add  label  a   label  b   which can be paraphrased as: if two equations have like terms such that the coefficient of one is the negation of the coefficient of the other  then add those equations  replacing equation label b   with the result  provided equation  label  b   has two terms    
   a rule for the cross-multiply operator that the system forms given typical examples is: 
{term label a   nonzero m *var x    term label  b  nonzero  n  *var  x    term labekb   nonzero 1 *var y  } 
 =  cross  label  a   label  b   nonzero  n   nonzero m   which roughly means: if two equations have like terms with non-zero coefficients then replace the equation  label  a   with the result of cross 
multiplying and substracting the equations 
 provided equation label b   has two terms . 
1. perturbation operators 
   the perturbation operators map instances into new sibling instances. in figure 1 we illustrate the concept tree for integers augmented 
with a possible set of perturbation operators  indicated in braces. 

   perturbation breaks up the generalization process into two steps. 	each example is perturbed multiple times to create near examples and near misses. minimal generalizations are formed from 
this set. primarily this has the effect of sifting out the essential conditions from the non-essential ones. no further teacher assistance is required for this sifting. additional teacher assistance is required to refine the 

1 d. kibler and b. porter 
generalization formed. because of the active nature of problem solving  as opposed to standard concept learning  the system is capable of relying less on the teacher for appropriate examples. 
   perturbations classified as near-misses are distinguished from near examples by applying a test of whether the operator which simplified the example also simplifies the perturbation. since the cost of trying the operator is small  as is the cost of generating the perturbation  there is no need to guide the selection of which perturbations to try. if there is a high cost associated with testing an example  as in re-applying the problem solver in lex   heuristics for guiding the generation of 
perturbations are needed. 
1. limitations and extensions 
   as with most learning programs we require that the concept to be learned be representable in our generalization language. in addition the system has to be supplied with some coarse notion of when an operator has been effective in simplifying the current state. furthermore we assume that the teacher is not malicious and gives only appropriate advice. 
   instead of generating a l l perturbations of an instance  though it is practical in this domain  
we plan to allow the current generalization of the 
rule determine the appropriate perturbations. we also plan to allow sequences of non-improving operations. currently no perturbation can modify more than one coefficient. by adding the capability to modify several coefficients simultaneously  perturbations could be used to direct the tree generalization. reconsider the example: a: 1x+1y=1 b: 1x-1y=1 
we showed that by perturbing one coefficient at a time  the rule 
{term a 1*x   term b 1*x   term b neg m *y   sub a b } could be derived. if we could simultaneously modify the 1's in the x-terms to 1's  we could generate the new example: 
a: 1x+1y*1 b: 1x-1y*1 
since sub a b  is effective here  the new rule 
{term a pos n *x   term b pos n *x   term b neg m *y } =  sub a b  
could be formed. lastly we intend to apply the technique to other problem solving domains. 
1. conclusions 
   for learning operators  we have shown that perturbations form an effective means for eliminating nonessential features from the search space. for learning how to solve simultaneous linear equations  the search space was reduced from approximately a million candidates to several thousand. to learn the correct conditions for applying an operator  the system requires at most five interactions with the teacher. essentially  perturbation is a technique for creating near examples and near misses upon which standard generalization techniques can be applied. 
                     