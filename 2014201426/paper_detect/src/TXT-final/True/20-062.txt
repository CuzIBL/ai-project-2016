 
model-based vision systems must be capable of dealing with large quantities of hypothetical interpretations. hypothesise-and-test methods often lead to combinatorial explosions of possible interpretations. discrimination graphs prevent such explosions by imposing a hierarchical organisation on the domain of interpretation. such an organisation effectively reduces the number of interpretations that the system has to deal with. this paper presents an algorithm which automatically constructs discrimination graphs. 
1 	introduction 
if we are to develop a  general-purpose* vision system which can take as input a digitised picture of any natural scene and which produces as output a meaningful description of such a scene  then we must equip the system with a representation which allows for a quick and smooth access to domain-specific knowledge. most model-based vision systems obtain access to the knowledge base of a particular domain after a segmentation process has scanned the image in search for particular features. the description of these features imposes constraints on the interpretations possible. features  constraints  and interpretations can be represented as a graph  or hypergraph  with the features  n  as variables  each with an associated domain of interpretations  d } and the constraints  e  as relations. the problem of finding globally consistent interpretations for the image then becomes the problem of finding all possible n-tuples such that each n-tuple is an instantiation of all n variables satisfying the relations. this problem is equivalent to the constraint satisfaction problem . the existence of algorithms which can solve this problem in less than exponential time has been questioned. depth-first backtracking  for instance  is of 1 e f  in its worst case performance . such an algorithm causes a major problem for a general-purpose vision system in which we can expect domain sixes to be very large  because no advance knowledge exists of the domain of interpretation. 
   the research for efficient solutions to this  exponentiality  problem has taken several directions. the search for more efficient algorithms  among other things  has led to algorithms that do  intelligent backtracking   l  and to so-called network consistency algorithms |1|. the latter is a group of polynomial time algorithms which do not necessarily solve the constraint satisfaction problem  but which eliminate all local inconsistencies that cannot participate in a global solution. network consistency algorithms will generally reduce the overall domain sise. this makes them attractive as pre-processors for algorithms such as depth-first backtracking. recent research has focused on a more effective organisation of the domain of each variable . a hierarchical organisation can be imposed on the domain by means of discrimination graphs. 
1 	discrimination graphs 
discrimination graphs are based on the assumption that we can classify image features in one or more dimensions  e.g. shape  texture   the result of which is a finite number of categories for each dimension. discrimination graphs  dg's  are based on a  potentially unnatural  categorisation of object classes that belong to a particular image feature category. a dg is a directed  acyclic graph. every source node of the graph is an abstract ob-
ject class which intensionally represents all the elementary object classes that belong to a particular image feature category. the leaves of the graph are elementary object classes. intermediate nodes represent subsets of the set of objects represented by their ancestor  s . 
this paper does not provide an in-depth discussion of dg's. 
the idea of imposing a hierarchical domain organisation by means of dg's was first presented in   an in-depth discussion is provided in  1 . intuitively  dg's are useful because image features can have a wide variety of interpretations for which no hierarchical organisation exists. for instance  a collection of green pixels in an aerial photograph can be farm land  a golf course  or even the astroturf in a stadium. because no natural categorisation scheme exists for such interpretations we cannot use a specialisation hierarchy as a means of replacing these interpretations by more abstract ones. dg's enable us to impose a hierarchical organisation on an arbitrary set of natural objects. 

figure 1: an example of a discrimination graph 
   figure 1 shows a dg for a simple character recognition problem. the image consists of one character which is a letter containing horisontal and vertical line segments only. each letter is classified in two different ways: by the orientation of strokes and by the number of strokes in a particular orientation  table 1 . recognition takes place in steps. the strokes are the image features and they are investigated one at a time. the dg constructed for this situation reflects this process. the source nodes of the graph are on the left and they represent the possible set of interpretations after investigation of one stroke. their successors represent the  sub set of interpretations after two strokes have been investigated. the leaves represent the interpretations possible after all strokes have been looked at. all interpretations  abstract or natural  are labeled  e.g. d1 . the constraints associated with each interpretation are shown as well. for instance  interpretation do 
	mulder 	1 

represents all letters with at least one horisontal and at least one vertical stroke. the letters e  f  h  l  and t satisfy this constraint. 
   dg's have been implemented in mapeee-1  a sketch map inter=pretation program  1 . sketch maps are a useful domain for studying the theory  design  implementation  and evaluation of different knowledge representation schemes  1 1 . 

table 1: frequency and orientation of strokes 
   dg's allow hi to replace a large set of natural interpretations in the domain of each variable by a muck smaller set of abstract interpretations. a network consistency algorithm called hierarchical arc consistncy has been designed and implemented which operates 
in hierarchical domains  1j. this algorithm tests the consistency between the interpretations of adjacent variables. inconsistent interpretations are replaced by their successors in the graph after 
which the consistency test is repeated. this test-replacement sequence continues either until a consistent interpretation is found  or until each variable's domain is empty. only a very small part of the interpretations in the graph need to be considered in this replacement operation. the worst case complexity of hierarchical arc consistency is 1 ed1 . however  a few simple constraints 
improve this to  the combination of hierarchical arc consistency with dg's provides a quick and smooth transition from abstract and domain-independent interpretations near the top of the graph to the more domain-dependent interpretations at the leaves. 
	1 	constructing discrimination graphs 
how do we construct a graph such as the one in figure 1  the graph is based on s premises: an explicit representation for each natural interpretation  the leaves   an explicit representation for each possible combination of constraints  and an explicit representation for. the addition of a single constraint  the arcs . this results in the creation of 1 feature categories each with a set of possible interpretations. for each one of these sets we create a single abstract interpretation: d1 corresponding to  corresponding to f1 etc. the feature categories are also inter-dependent. for instance  the interpretation* of ft can only result from the interpretations of f1. for the construction of figure 1 we therefore need several knowledge sources  among which are an explicit representation of the feature category dependencies and the information represented in table 1. the former tells us which transitions between feature categories are legitimate  the latter informs us which transitions are meaningful. based on this information we can construct figure 1. 
   the presence of so many abstract interpretations  among other thinp  requires an algorithm that automatically construct* dg's. indeed  the value of using dg's would decrease if this could not be done. however  we would like such an algorithm to be domainindependent  that is  not dependent on an intimate knowledge of feature categories and their dependencies. the graph in figure 1 is optimal in the sense that all possible combinations of interpretations are explicitly represented and the addition of a new constraint in the imag leads to a single transition in the graph. perhaps  it is possible to design a domain-independent algorithm which does not necessarily lead to an optimal graph  but which still constructs a usable one. 
1 	perception 
   for one thing  the graph in figure 1 is redundant in the sense that several feature categories have identical interpretation sets. the graph is constructed such that the relation between offspring and their parents is the subset relation. subsets represented by different offspring may overlap. the algorithm we propose makes no assumptions about the feature categories. it orders the categories by the setsise of their interpretations and it merges categories with identical interpretations. an abstract interpretation is created for each category. the abstract interpretations with the largest setsise become the source nodes of the dg. the graph created is binary and the subsets represented by the two offspring of each abstract interpretation are disjoint. 
the start point for construction is a given feature dimension 
fd consisting of n categories  f  with a total of $  natural  interpretations  1 . each category f  has a set /  of 
possible interpretations  /  1 . the sise of /  may vary from category to category and a particular interpretation sj may occur in more than one category. 
the construction algorithm operates as follows: 
1. merge the categories with identical interpretation sets. f is now of sise 
1. for each f  	create an abstract interpretation 
a . a  intensionally represents the set u of possible interpretations for f  
1. order the abstract interpretations by the setsise of their natural interpretations. the interpretation with the largest setsise comes first. call this ordered list l. the abstract interpretations form the elements in this list. 
1. do until l is empty: 
take the first element / from l and delete it from l. 
if the setsise of /   1 then do: 
find the element in l that represents the largest subset of /. call this element l1. if the setsise of l1 is less than the integer part of half the sise of / then execute step i else execute step ii. 
i. split the set represented by / into two disjoint sub-sets of approximately equal sise  and create two new abstract interpretations l* and 1 each of these interpretations represents one of the subsets. establish a link from 1 to its two siblings and insert the siblings into l at a location that corresponds to their setsise. 
ii. find the interpretatiox representing the exclusion of the sets represented by i and l . if this interpretation does not exist then create it and insert it into l at the proper location. establish a link from / to its siblings l1 and 
   application of the construction algorithm to the character recognition problem results in the graph illustrated in figure 1. identical interpretation sets cause a reduction in the number of feature categories. figure 1 shows the 1 interpretations created with the following correspondences  in parentheses  to figure 1: d1  dx t d  

 *io  1io  *ujt and *n   *isj- the interpretation with largest setsise  d1t becomes the source node. d1 is linked with d1 and d   both of which already exist. actually  the algorithm uses existing interpretations almost all the time with the exception of a  which is newly created. all the splits are caused by step 1ii. the set efhlt could also have been split into the subsets efh and lt. 
   figure 1 is no longer an optimal graph. all possible combinations of interpretations are still explicitly represented  but the addition of a new constraint now sometimes requires more than 
one transition in the graph. for example  the transition from d  to d1 in figure 1 now requires 1 transitions from dl through d1 and d1 to d1 . the trade-off between figure 1 and 1 is the traditional space-time trade-off. space-wise figure 1 is more efficient  but accessing the proper interpretation  sometimes  requires more time. 
   this paper cannot provide an extensive discussion of construction issues. many of these are addressed in . suffice it to say here  that the construction algorithm presented above can also be used in knowledge bases which are organised along composition and specialisation hierarchies. in the mapsee-1 program  for instance  objects are represented at different levels of composition and specialisation. the natural interpretations for each feature category are the leaves of a composition hierarchy. the construction algorithm constructs a dg at the composition leaf level. a projection algorithm then iteratively projects this graph from one level of composition onto the next level up  thereby constructing an abstract composition hierarchy and a dg at each level of composition. this projection algorithm is also discussed in  1|. 
 a. k. mackworth   vision research strategy: black magic  metaphors  mechanisms  miniworlds  and maps   in computer vision systems  eds. a. r. hanson and e. m. riseman  academic press  new york  pp. 1  1. 
 a. k. mackworth and e. c. freuder   the complexity of some polynomial network consistency algorithms for constraint satisfaction problems   artificial intelligence  vol. 1  pp. 1  1. 
 a. k. mackworth  j. a. mulder  and w. s. havens   hierarchical arc consistency: exploiting structured domains in constraint satisfaction problems   computational intelligence  vol. 1  no 1  pp. 1  1. 
 1  j. a. mulder   using discrimination graphs to represent visual interpretations that are hypothetical and ambiguous   proc. of the 1th int. joint conf. on artificial intelligence  los angeles  pp. 1  1. 
 j. a. mulder   using discrimination graphs to represent visual knowledge   tr-1  department of computer science  university of british columbia  vancouver  canada  1. 


figure 1: an automatically constructed discrimination graph 
1 	conclusion 
discrimination graphs are a useful tool for imposing a hierarchical organisation on domains which cannot be naturally organised in this way. in combination with a hierarchical arc consistency algo-
rithm  discrimination graphs provide a quick and smooth access to domain-specific knowledge. this paper has presented an algorithm that automatically constructs discrimination graphs from a 
set of naturally interpretable feature categories. 
1 	acknowledgements 
comments on a draft of this paper by jay g licks man and bill 
havens are gratefully acknowledged. this research was supported by nserc operating grant a1. 
