 
　　based on a logic-oriented mechanism for planning  a language framework  called planlog  is developed  which enables the combination of two styles of programming; what is clearly logical can be written in planlog in a 
　　logical way; what is procedural by nature can be expressed in form of plans. starting with a detailed exposition of our motives  we will subsequently present the basic principles of planlog and discuss the role of plan generation and plan execution. finally  our vision of planlog is sum-
marized. 
1. introduction : plan of the paper 
　　the aim of this paper is to present a logic-oriented framework  called planlog  which is suited to materialize combinations of logical/functional and procedural constructs of programming languages. 
　　in section 1 we sketch the disposition of current logical and functional programming languages towards procedural programming and outline the relationship between procedural programming tasks and plan generation in robot problem solving. in section 1 we show how logic programming can be integrated in a plan generation system. since we see procedural programs as plans  we have thus linked logic programming with procedural programming. in section 1 we discuss the role of built-ins  which entails a sharp distinction between the generation of a plan and its execution. in section 1  the conclusion  we summarize the potential of planlog. 
1. background motivation 
　　although we are fully aware of the conceptual advantages of functional and logical programming  and the profound insight into the non-procedural nature of many applications of computing obtained this way  in this paper a case shall be made for the procedural  where it goes together with naturalness and conceptual simplicity. 
1. procedural contamination 
　　actual logical and functional languages  as are the various dialects of lisp and prolog  are apparently procedurally contaminated  as is already evidenced by notions as pure lisp or pure prolog. 
　　examples of procedurally would be the predicates  assert  and  retract  in prolog  which add or delete knowledge. another example is the following prolog clause which is a primitive user interface around a logic program for the concatenation of two lists. 
pbftfach 1  d-1 munchcn 1 
head :- write prompt  read u v  append u v r  write r  
here the order of execution of the literals seems to be more important than their truth values. 
1. planning and the naturalty of the pro-
cedural style 
　　in spite of the high esteem which we share for logical and functional programming  we are nevertheless convinced  that the existence and use of procedural features are primarily due not to bad habits of language designers and programmers  but to the nature of the world we live in  and the tasks we want to perform. 
　　the main reason for these procedural features lies in the fact that the conceptual basis of logic programming is deduction from a single fixed theory  while many applications must deal with deduction from varying or alternative theories  see  bow 1   p. 1  of course  through the introduction of a  time  parameter into the theory  many problems of this kind disappear immediately  but another one shows up : the frame problem. 
　　natural formulations of many problems in artificial intelligence involve noncommutative systems   nil 1  . the plan generation systems used for robot problem solving are standard examples. furthermore  the use of plans and plan generation techniques in automatic programming should be mentioned in our context  see  wal 1    ric 
1  . 
1. the basic idea : horn clause reasoning as 
plan generation 
　　a possibility to reconcile logical and procedural programming showed up when we noticed that linear proofs  see  bib 1    though invented for the description and generation of plans  or procedural programs   also allow the simulation of ordinary horn clause reasoning. 
　　we will view a theorem prover as a kind of robot whose job might be called theorem construction. in every proof a plan for its construction  is trivially contained. consequently  the activity of a horn clause interpreter  i.e. finding a proof of the goal clause  can be understood as plan generation. 
1. us ear proofs for plan generation 
　　as we shall see  the above given view of a horn clause interpreter can easily be modelled in the framework for plan generation  proposed in  bib 1 . as several others  this approach equates plan generation to proving 
	fronhofer 	1 


1 	architectures and languages 

'behave' is more important than the result they finally compute  we even believe that with many 'typical' procedural tasks the 'what' reduces to a side aspect of the 'how'. consequently  to generate a procedural program from a goal may be rather difficult  just because this goal may be extremely difficult to formalize. therefore  a major role will be played by the execution of prefabricated plans. on the other hand  the completely prefabricated plan is hardly feasible  because it will often depend on information which is only available at run-time. for instance  the exact form of a plan to append two lists depends on the length of the lists  which will be communicated to the program at run-time. 
　　for this reason  we have to intermingle plan generation and execution. if a partial plan is sufficiently worked out  i.e. the first actions are determined  then they will be executed and based on the information thus acquired the plan generation process is resumed. let us illustrate the issues just discussed by considering how a primitive user interface to the logic program for appending two lists can be treated in planlog. 

　　the plan must be read top-down. we assume a prompt symbol already to be stored in a special register called ace. the built-in write predicate in the first rule writes it on the terminal. the built-in read predicate in the next rule reads two lists and stores them in two registers regl and reg1. the third rule calls the append program. since the input values for this predicate are now known  a subplan can be generated which computes r. the last rule writes r on the screen. 
1. the promise op planlog. 
　　viewing planlog as a procedural language  it is distinguished by the following remarkable features: 
　　planlog can be termed a  declarative procedural language . this goes without saying for the logical part  for which declarativity is characteristic  but due to the specification of the procedural entities  i.e. the actions  in form of logical implications  we obtain 'declarative procedures'. 
　　planlog can be termed a  predicative procedural language . the data structure it works on are relations and formulas: it might be seen as a high level database language. 
　　planlog can be termed an  open procedural language . adding a new procedural rule is as easy as defining a new function in lisp  but in contrast to a traditional procedural language  we have extended the language by a new statement and not just written another procedure. 
　　planlog can be termed a  knowledge-based procedural language . since declarative knowledge  i.e. logical implications  are transformed into rules  we finally obtain a procedural language  the statements of which reflect chunks of knowledge. 
　　planlog is a means to overcome the procedural contamination of prolog. this is not only of theoretical interest: the more we create systems which process or extend logic programs  e.g. program transformation and synthesis systems  incorporation of function handling  ...   the easier are these enterprises if our programs are written in pure logic. 
　　planlog might give a new impetus to program synthesis. having planlog as a target language might force the synthesized programs to become more procedural and  consequently  more efficient. 
　　due to the representation of plans as  partial  proofs  potential parallelism in plans should be uncovered by analysis of the connection structure and thus facilitated the parallel execution. 
　　due to the availability of several programming styles as pure horn clause reasoning  plan generation from goals and traditional procedural programming in the same language  the programmer is obliged to decide explicitly  which style he wants to adopt and for which task. 
acknowledgements 
　　besides our munich ai group  i owe very special thanks to ricardo caferra  reinhard enders  ulrich furbach  paul jacquet and philippe schnoebelen for their patient sympathy with my dizzy explanations in the days when planlog began to loom. wolfgang bibel  christoph kreitz and reinhold letz provided a lot of comments on the present as well as on earlier draft versions. 
