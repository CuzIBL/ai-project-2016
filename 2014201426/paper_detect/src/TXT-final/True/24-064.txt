  object  propositional logic  consisting perhaps of a set of valid formulas or perhaps of a set of valid arguments  and maybe there are even other choices....just what one believes an abstract logic to contain depends upon one's philosophic beliefs about abstract objects in general . with such an outlook  the various proof systems merely become different ways for us to discover whether some particular formula  or argument  is a part of propositional logic. we start  within this realist framework  with some idea of what propositional logic is; perhaps we think it is the set of theorems  and perhaps we would designate this set by and now  any sound way of convincing ourselves that is a member of this set is as good as any other - we might construct a proof of  in system a  or with thinker  or give a tableau  or indeed we might just write out a truth table for . the problem then becomes merely a matter of convincing ourselves that if for whatever method y we happen to use  then 
       that is  of convincing ourselves that system y is sound. generally this is pretty straightforward to prove; indeed  too easy  since even if system y produced no proofs it would satisfy this. more difficult is to show completeness: that if not  then not  - i.e.  that system y captures all of the abstract system  propositional logic. 
　　the remarks 1 have been making in fact suggest two distinctions: on the one hand  i  a distinction between a particular proof system  such as resolution or system a above  and some abstract object such as propositional logic  and on the other hand  ii  a distinction between a particular proof system  such as resolution or system a  and a program written which intends to manifest or emulate that proof system. i would like to dwell a bit on the second of these distinctions. thinker  for example  is an emulation of kalish & montague's  1  proof system  henceforth 
km . it was constructed in such a way that if  then 
 . but the converse is not true. there are various proofs in km that will never be produced by thinker - it just wouldn't make such-and-so inference in that situation or it just wouldn't set so-and-so subgoal at this point even though it was legal to do so in km; and there are even 
formulas  for which 		but not  
thinker is  after all  bound by certain emulation/ implementation considerations which dictate finiteness to an extreme degree. for example  all individual variables are amongst e..z together with a subscript 1..1. this means that there are only 1 individual variables available to thinker; therefore any theorem requiring more than that number of variables cannot be expressed  much less proved.  for example  if there are at least 1 objects then there are at least 1 objects .  besides that  my computer times thinker out after a certain period of time - even if thinker is only one step away from completing a proof. 
it is for reasons such as these that i would prefer to say that 
thinker arid km are different proof systems. km is sound and complete: but thinker is not complete; indeed  computer emulation is complete...or so i would prefer to use the term 'complete'. this would mean that no computer emulation really is the same as any of the well-known systems of logic. there is no automated theorem prover which is   really   resolution  or semantic tableaux  etc.; for these are all complete proof systems. thus  proving that  say  negative hyperresolution is a complete proof system in no way indicates that any particular system should embody it - for the emulation is bound to be incomplete anyway. there needs to be a different type of proof to the effect that such-and-such emulation is better as an emulation of negative hyperresolution than  say  thinker is as an emulation of km. there thus seem to be three  levels  of objects here  according to the realist: propositional logic  different proof systems  and different emulations of some proof system. 
　　of course  some people wish to abstract away from these  mudane considerations  of finiteness of emulations and talk about idealized emulations. this would be to posit a fourth level of objects - an idealized emulation somewhere  between  a proof system and any particular emulation of that system. in such a setting the question of completeness becomes more delicate. here we want to know whether the strategy employed in the emulation will  eventually and without considerations of space  memory  or representability  generate everything that the emulated system allows. this is the sort of question posed  and answered negatively  by the authors of the logic theorist when they remark that the logic theorist could have proved  even though it never succeeded  because  
they say  of time considerations   but its strategies never would have proved  even though the system they were emulating  principia mathematica  does yield a proof of it. would thinker  for example  generate all the proofs allowed by km  the answer to this is no: as remarked above  thinker's strategy makes certain legal moves of km be unavailable. a more interesting question is whether  for any proof in km of   is there a proof in thinker of  ignoring considerations of finiteness  etc. . the answer to this is unknown  but there is no particular reason to think so. i'm sure that precisely similar remarks could be made for any automated theorem proving system. suppose system x is  resolution with set of support strategy.  we know that x is complete: there is a proof that 
 but whether any particular system which emulates this is complete is another matter  even ignoring issues of  finiteness . for surely this depends on whether the program can always find the correct set of support and then generate all possible resolvants from it. 
　　the realist position with regards to the automated theorem proving of propositional logic can be illustrated as in figure 1. for each different logical system  he will have a similar hierarchy. in the hierarchy there are four different 
 levels : 1  the abstract object; 1  the various proof 

1 	philosophical foundations 

figure 1: the realist's view of automated proof systems 

systems; 1  the various  idealized emulations  of a proof system; and 1  the various actual emulations of which the level 1 objects are idealizations. for the realist  questions of  completeness  can be raised between any two adjacent levels: one can always ask of something at level n whether it is  complete for  the object at level n-1. the realist believes that logic has answered the question between levels 1 and 1 - all of the well-known systems of proof are complete. and of course  from the very definition of the relation between a level 1 object and the corresponding level 1 object  it follows that they are not complete. the only interesting question then is between level 1 and level 1. that is  given the specific strategies used in any particular emulation  but abstracting away from questions of finiteness  will the system  match  the proof theory. as indicated before  the notion of  match  here is a bit tricky. if one meant: will it generate all the proofs  with each step included  that are legal according to the proof theory  then the answer is almost surely no since every particular emulation  except the british museum algorithm  embodies some search strategy which eliminates some possible proofs. but the better question is: for every argument that the proof theory allows  is there a proof of in the idealized emulation  the idea is that the proof theory allows many  an infinite number  of proofs of from all we require of the ideal emulation is that it find one of them. but this is a question that seems not to be addressed very often in the literature. researchers do not ask whether suchand-so actual system with its actual proof-generating strategy that embodies negative hyperresolution  for example  could  considerations of finiteness aside  find a proof of any valid argument of the resolution proof theory. instead  they choose to investigate whether  for everything that can be proved using ordinary resolution  there is a proof using negative hyperresolution - ignoring the question of whether their particular strategy will succeed in finding it. writers in the area may have been clear in their own minds what precisely they are proving about completeness  but this does not always seep through to the reader. i myself often wonder whether they aren't in reality inventing a new level 1 proof system and showing that it is complete with respect to level 1. but if so  this says nothing about any particular level 1 system.  there has also been little study of precise conditions under which a particular emulation is incomplete for the idealized emulation. perhaps this is because people find the specific conditions under which we today compute not very interesting - they will change  after all. but it might nonetheless be interesting to study it  since it is actual implementations - level 1 objects- which exist in the world and with which we are required to compute and which we are required to use for all those applications that automated theorem proving is claimed to be good.  
　　as remarked above  one basic attitude someone might take towards logic is a realist position. as with all philosophical positions  there is an opposing position; here the opposing position is a nominalism. the realist believes that there is an antecedently existing system of logic and that all the various proof systems are but different ways to  get at  this antecedently existing system. the nominalist  on the other hand  believes that there are only the various proof systems. of course  even a nominalist could believe that there can be  something in common  amongst various proof systems  or even  something they are striving toward   in the case of incomplete systems . they may even call this  something  a semantics or a semantic interpretation and produce completeness and soundness results for the various systems. but to a nominalist  this semantics is just yet another system - it has no ontological  or epistemological  priority over the various proof systems - even though it might perhaps have been singled out for special consideration because of some interesting properties it was perceived to have  such as essential use having been made of such concepts as  true    satisfies   etc. . 
the nominalist  then  denies the existence of the 
realist's level 1 abstract logic and instead allows only the various proof theories. what makes a realist think there is an abstract object in addition to the proof theories  the nominalist says  is merely due to certain similarities amongst the proof theories. but the study of these similarities does not presuppose the existence of yet another object to be studied  any more than the study of  the average north american academic   who is white  male  married  has 1 children ....  presupposes the existence of such a person. the nominalist takes the position illustrated in figure 1  for the propositional logic  there are further hierarchies for other groupings of proof systems : 
	pelletier 	1 


figure 1: the nominalist's view of automated proof systems 

the  here  relating the objects on level 1 to one another  are used to indicate that the nominalist believes that these proof systems can be compared with one another and certain similarities noted. for the nominalist  completeness is a somewhat different matter than it is for the realist. of course  the nominalist can ask precisely the same things as a realist about the relation between a level 1 object and a level 1 object  or between a level 1 object and a level 1 object. but the notion of completeness of a level 1 object must be framed not in terms of some abstract object at level 1  but rather with respect to some special level 1 system. as remarked above  this is  by his own lights   just another system . but it is viewed as special due to its unique use of certain concepts -- the so-called  semantic concepts . still  according to a nominalist  there is no special ontological status to be accorded this system. 
     what does all this have to do with the business of actually writing an automated theorem proving system  you might be impatient to know at this point. perhaps not too much  practically; but it seems to me that on a more abstract  philosophical level it addresses the question of whether various practitioners of automated theorem proving have a coherent position. consider a person who argues that natural deduction is better than resolution-based systems  e.g.  bledsoe  1  or pelletier  1 . whyever would a person be even tempted to argue this unless he thought that the goal of automated theorem proving was to approach  the real system  - that is  unless he were a realist. after all  it is patently obvious that t h i n k e r is better at emulating proofs in the km system than any resolution-emulating system; and that any resolution-emulating system is better than t h i n k e r at producing proofs of a resolution system. the same sort of realist reasoning must have been in wang's mind when he inveighed against the logic theorist and in favour of his consecution-style method  wang 1  p.1 . but not everyone seems to be a realist in this sense. these who  like the designers of the logic theorist  believe that they are investigating how people reason in the context of a given system  studying substitution into particular axioms  reasoning backward from certain goals dictated by particular axioms  and the like  can be taken to be nominalists - at least insofar as they would be quite unconcerned with the results of a system where proofs take a different form. and i have spoken with various practitioners in the field who would vehemently deny the existence of any level 1 object. 
     as i see it  proof systems come in four basic flavours: axiomatic  with a pedigree involving hilbert 1 and whitehead & russell 1   resolution-based  with a 
1 	philosophical foundations 
pedigree of robinson 1 and herbrand 1 tableaubased  with the pedigree of beth 1 and gentzen 1   and natural deduction  with a pedigree of fitch 1 and gentzen 1 . one can write an automated theorem proving program which emulates any particular manifestation of one of these flavours. so long as one concerns oneself with nothing more than the question of how good one's emulation is  one can quite happily be a nominalist. but should one attempt to argue that their system is better than one of a different flavour  then there is some standard presupposed. and this implies realism with respect to the standard. without the standard  there simply are no grounds on which to perform the comparison. 
     but if you were a realist interested in automated theorem proving  what would an argument against one or another of these types of systems look like  against emulating an axiomatic system  one might say that generating proofs which involve arbitrary substitution of sentences for propositional variables just cannot be done efficiently.  of course there has never been a proof of this  but i think it fair to say that this is the collective wisdom of the automated theorem proving community  as witnessed by the fact that none of the major automated theorem proving systems is an emulation of the axiomatic approach.  the point  for -he realist  is that if you are really interested in  getting at  the abstract logic  you would not try to emulate an axiomatic system  but would rather try to  get at  the logic through another route. the nominalist of course doesn't have this option: since he thinks there is no abstract logic to  get at   his whole goal is to emulate some particular proof theory. why would he choose one rather than another proof theory to emulate  for the nominalist  this must be a matter merely of practicality: which is more interesting/challenging/will get a bigger grant  but there can be no appeal to the realist's belief that there is an abstract logic and  any way of investigating it is legitimate   so we should choose the most efficient way. 
1
  davis  1  pp.1  says that herbrand  1  is incorrectly credited here  and that credit should instead be accorded skolem  1 . what we call 'the herbrand universe'  he says  should be called 'the skolem universe'.  but he does accord herbrand with discovery of a version of unification in which a system of equations needs be solved.  
1
 actually  gentzen systems  consecution or sequent systems  are a very general format. although both tableaux and natural deductions might justifiably be said to derive from this format  some authors take pains to keep the three separated.  e.g.  anderson & bclnap  1; see p. xxiv . 

　　we have seen the kind of argument a realist would give against emulating axiomatic systems - it is too hard and since there are other equally good routes to the abstract logic we should investigate them. but this type of argument is difficult to use against the other types of proof theory since they all seem equally capable of emulation. to give arguments of a similar nature against the other flavours seems to call for our casting out nets a bit wider  and asking whether such systems can be reasonably extended to other areas  e.g.  to non-classical logics such as modal logics. if they cannott be  this might count against pursuing such a formalization even in the case of classical logic. 
　　let us then consider modal logics  for here we can find difficulties both for the realist and the nominalist - at least within the framework so far considered. in the logic literature  modal logics are generally presented in an axiomatic form  and it is in only a few special cases that we have alternative formulations. the realist can at least use these alternative formulations  when they exist  as a means of  getting at  the abstract logic  assuming that he is not interested in trying to emulate axiomatic systems . but a nominalist who is not willing to emulate an axiomatic system is in a difficult position. of course he too can emulate any other proof theory which happens to exist  just as the realist can; but in his own mind he is not  getting at  the same thing that the axiomatic system was describing. and since all the modal systems are given at least an axiomatic formulation  there seems to be an important sense in which the nominalist is missing some generalization about modal logic in not having some uniform method to deal with the field. the problem  both for the realist and the nominalist  is one of converting the axiomatic systems into some other format and then emulating it. but there may be no such transformation -- or at least  no such transformation which is easily emulated. for example  fitting  1  reports on the difficulty of transforming the modal system s1  and by implication  the brower system ktb  and weaker systems such as kb  into a tableau format; abadi & manna  1  remark that the system kg  as they call it; it is often called kgrz  seems unamenible to a resolution-style format. the resolution systems of farinas del cerro  1  are restricted to a quite small subset of the formulas of any particular modal logic  due to the lack of a normal form representation with which he can apply resolution to these other formulas. various  doubly indexed  resolution strategies have been adopted in the resolution literature by wallen  1   jackson & reichgelt  1   and olbach 
 1 ; but as fitting  1  p. 1  puts it   it has required considerable coercion  of the underlying logic to implement it. bonevac  1  gives a natural deduction format for systems including the t axiom  in particular for kt  kt1  and kt1 ~ the systems often called t  s1  and s1   but it is not at all obvious that any system without this axiom can be given a  natural  natural deduction formulation. 
　　as can be seen  realist arguments against the use of one or another of the basic proof formats take the form: one shouldn't try to emulate proof system x1  subscript 1 indicating a  level 1 object   because there are so many difficulties with doing this that the relation between x1 and x1  or between x1 and x1  will be bad  1 and 1 subscripts indicating the level 1 or 1 item of proof system x1 . but since we are just trying to  get at  x1  the realist will believe that it does not matter whether sometimes one uses one kind of level 1 system and at another time we use a different type of level 1 system. indeed we can even mix the different types up and use them simultaneously. the realist believes these are all good ways to investigate the abstract level 1 object. it is these kinds of strategies that a realist can pursue with a clear conscience but a nominalist cannot  bound as he is to particular proof systems. so  if one is to be a nominalist with respect to modal logics generally  it looks like one's range is quite narrowed - unless one is going directly to emulate axiomatic systems. but there are two more strategies that haven't yet been mentioned  and at least one of them could be used with equinimity by a nominalist. these methods involve an  ascent to the metalanguage''  and were  i believe  first mentioned in the automated theorem proving literature in morgan  1  where they were called  syntactic  and  semantic  methods. 
   as described  a nominalist believes that there are proof systems -- he denies only the independent existence of some further  abstract object to which any proof system is merely a means of access. thus a nominalist would have no ontological qualms with reasoning about such a proof system. of course  this reasoning must be done within a 
　　system  according to his nominalistic views; but this raises no particular problem - he can use any of the various proof systems  which he does believe to exist  to reason about any particular system. for example  our nominalist might wish to reason about our system a  and wish to do so by invoking the use of some quantified resolution system  say . here our nominalist views the various formulas of a as being objects  and views the claim as expressing that the object denoted by the formula  j  has a certain property  which he may choose to express as  and in system a  formulas have a structure. this structure is represented in our nominalist's system by function symbols. for example  the unary sentential operator -1 of system a is perhaps represented as the unary function symbol n  so that formula of system a becomes the term *n p ' of the nominalist's system. the binary sentential operator of a is perhaps represented by the binary function symbol i  so that of system a becomes 'i p q   the axioms of system a merely become universally quantified premises of each argument in the nominalist's system. thus axiom 1 of system a becomes 

and this is used as a premise whenever we wish to determine for some  rules of inference of system a  such as our rule 1  are expressed as saying that every pair of formulas that are related to one another in a certain way and to which the predicate 'thma' can be applied  give rise to another formula to which 'thma' can also be applied. that is  rule 1 gets represented as 

　　for an automated theorem proving nominalist  then  this is the strategy to pursue when faced with a proof system for which there is no transformation into some other proof 
	pelletier 	1 

system for which he has an automated theorem proving emulator. examples of systems which have adopted this strategy are: morgan  1   paulson  1   quaife  1 . pelletier  1  had rated this kind of strategy as being very difficult to pursue  see the discussion surrounding problems #1   but the results reported in quaife  1  seem to show that this was much too pessimistic. 
     since the realist too acknowledges the existence of these proof systems  he too can use this  syntactic method.  but since he in addition acknowledges the existence of an abstract system  he can feel free to investigate it directly. let us ask ourselves again  just what is this abstract system  according to the realist  it is the set of valid formulas  or arguments  towards which the various proof systems are a means of access. this way of looking at the abstract system makes it be characterized by certain  semantic  notions  such as 'true' and 'false'  for our system a  or true in a given possible world with a specific accessibility relation r'  for a modal system . this means that the realist would find it acceptable to write a truth table for a formula of system a in order to determine whether it belonged to propositional logic. but a nominalist ought not to be able to take this route  since he denies the very existence of propositional logic. it means that a realist ought to be happy to write a  transitive  reflexive possible world diagram  for a sentence in the language of s1 to find out whether it really belonged to the abstract system  s1. but again  a nominalist ought not do this - he refuses to believe that there is an abstract s1 to do this to  but rather thinks there are only the various proof systems which are presentations of s1. indeed  since a realist believes that all these things exist  he could quantify over the possible worlds and could make one-place predicates p x   q y  ... mean   proposition  p is true at world x . to say that the formula lp is true at a given possible world x is to say that 
p is true at every possible world y which is accessible from x. all this can be represented by the realist as 

  w  means that y is a possible world;  r  is the accessibility relation saying that y is accessible from x . a formula is a theorem of any normal modal logic just in case it is true at every possible world. the different  normal  modal logics differ only on what extra requirements they impose upon the accessibility relation r. and these requirements can be added as premises to the representation of an argument of any such modal system. this is morgan's  1   semantic method . it has been incorporated into thinker with some considerable success for standard modal systems. 
　　of course  to use the semantic method correctly one must know what the correct underlying logic of the abstract system is. the examples of constructing truth tables for propositional logic and of quantifying over possible worlds in s1 have assumed that their logic is truth functional and 
classical first order quantification theory. in these cases that assumption is correct  but some other cases are not so clear and there are yet others for which this is quite false. for example  some proponents of many-valued logics have argued that  the metalanguage of their proof systems   or as i would prefer to say: the abstract object  it itself many-
1 	philosophical foundations 
valued  not classically two-valued. and demonstrably there are modal logics - even normal modal logics - for which there is no characteristic first-order condition on the accessibility relation amongst possible worlds. for example  although the axiom  grz  

has a first-order model  the closely-related axiom 

does not. therefore  the specific  semantic method  given above  which assumed that the abstract system has a firstorder underlying logic  cannot be used here. some other underlying logic system would have to be developed and implemented to investigate directly this abstract system of this modal logic.  for further considerations on this peculiar state of affairs  see hughes & cresswell 1  under the heading  what do we mean by 'completeness'.   
　　of course  the nominalistic-oriented  syntactic method  suffers no such shortcoming  since it is not trying to use the  underlying logic of the abstract system  but only generates proofs that are in accord with it. some might think that this greater flexibility in the realm of non-standard logics is precisely what the theorem-proving community needs. but others may be attracted to the view that for any logic worthy of the name there  really is  an abstract system; and that unless we have a characterization of this abstract system and can therefore work directly with it  the advantage afforded by the  syntactic method  is only a chimera. for  until we know a logical system is  really there   there is no reason to waste time studying it. 
　　who is right in this matter i leave it to the reader to judge. 
acknowledgments 
　　the author is a member of the institute for robotics and intelligent systems and wishes to acknowledge the support of the networks of centres of excellence program of the government of canada  nserc  and the participation of precarn associates inc. 
