 
one important issue of automated theorem proving is the complexity of the inference rules used in theorem provers. if krishnamurty's general symmetry rule is to be used  then one should provide some way of computing non trivial symmetries. we show that this problem is np-complete. but this general rule can be simplified by restricting it to what we call 1symmetries  yielding the well-known symmetry rule. we show that computing 1-symmetries is in the same complexity class as the graph isomorphism problem  which appears to be neither polynomial nor np-complete. however it is sufficient to compute the set of all 1-symmetries at the beginning of the proof search  and since it is a permutation group  there exist some efficient techniques from computational group theory to represent this set. we also show how these techniques can be used for applying the s-symmetry rule in polynomial time. 
1 	introduction 
symmetries in theorems have long been recognized to induce symmetries in proofs  and used to avoid the boredom of repetitive arguments. as such  this rule of metareasoning can be considered as a useful trick for writing proofs  and hence for discovering them  but by no means is it accredited as a powerful method for gaining deep knowledge of the problem at hand  except when symmetries are the subject of the problem  but this is out of the scope of our concern . indeed  when this argument is invoked  e.g.  case 1 is similar    the symmetry is supposed to be self-evident  not deserving any proof. 
　however  the appearance of computers and their use to assist in rigorous proofs shed a new light on the sub-
ject. experience shows that computers never get bored  even on repetitive work that could be avoided. but experience also shows that users often get bored when their computer spends more time than expected for solving seemingly trivial problems. hence the necessity to help 
*this work has been partly supported by cnrs. 
computers think twice before doing something  and allow them to conclude: case 1 is similar. 
　one way to do this is to reason in a highly expressive logic  in which symmetry arguments can naturally be expressed. this is usually the case when all non-logical symbols can be quantified. however  such higher order logics are seldom used in artificial intelligence. it should also be noted that specific calculi  or strategies  may not be able to reach such arguments. hence the very natural idea to extend calculi with symmetry rules  and provide strategies for using them. indeed  the idea appeared in the literature as early as 1  in  gelernter  1. maybe this was too early: to our knowledge  this paper has had no lineage in the following decades. it is written in a setting that looks weird today  and makes it difficult to read. by the way   gelernter  1  is only concerned with symmetries as permutations of first-order variables  and gives a rather complicated algorithm for computing these  which may appear as a waste of computational time. 
　it is only 1 years later that krishnamurty  in  krishnamurty  1   introduced his symmetry rules  without reference to  gelernter  1   to extend propositional resolution  and showed on difficult examples how these rules can be used to reproduce natural arguments. these rules  and the complexity of the problems they involve  are the main concern of the present work  and are defined below. since 1  little work has been devoted to this problem  the implementation of  benhamou and sais  1  is discussed below . this should be surprising to anyone sharing slaney's opinion:  i consider symmetry to be one of the most important topics of current research in ground theorem proving   see  slaney  1  . in the sequel  we will refer to notions from computational complexity  see  garey and johnson  1    graph and group theory  see  hoffmann  1    which we will introduce when needed. a clause is a set of literals. a set s of clauses is on a set of literals l  or l is for s iff the literals occurring in s also occur in l. for / e l  lc is the complementary literal of /. 
　given a resolution derivation of a clause c from a set of clauses s1 on l1  noted s1 + c   one can obtain a new derivation by substituting new literals to those in 
l1  under the following conditions: the literals resolved 
1 we thank ricardo caferra for pointing us to this paper. 
	de la tour and demri 	1 




dela tour and demri 




dela tour and demri 



a restriction of the s-symmetry rule experimentations display drastic improvements on some examples. 
　this is not the place to describe precisely the proving methods used in  benhamou and sais  1 . first  we stress the fact that only symmetric literals are considered  which means that the s-symmetry rule is used with unit clauses. the advantage is that symmetry on literals can be easily tested once the orbit partition is known. however  the symmetry test performed in  benhamou and sais  1  only corresponds to    since only one syms is computed   which is a refinement of part syms   hence this test is correct but not complete. this is the second restriction of the ssymmetry rule ; a useless one  as shown below. 
　it may be argued that computing a single non trivial symmetry is simpler than computing vart syms   but we show on an example that this is not relevant. 
consider the famous pigeonhole problem with n pigeons 
  it can be formalized with the following set of clauses phn: 
	means  the pigeon i is in the hole 	. it is easy 
to show that correspond to permutations on pigeons and on holes  independently . hence which shows that is highly 
symmetric  and is therefore a good example to illustrate the relevance of symmetry rules. consequently  symphn ha.s only two orbits: the set of positive literals  and the set of negative ones. 
　the strategy in  benhamou and sais  1  consists in choosing a clause as long as possible and using symmetries inside that clause. in   the longest clauses are the positive ones . if the symmetry ob-
tained by s-sym is a permutation on pigeons  leaving holes unchanged  then no two literals in a positive clause are symmetric according to   and there will be no application of the symmetry rule in this method  leading to an exponential proof! . 
　hence one has to search for a. symmetry satisfying a particular property  depending on the strategy for the symmetry rule. for example  one property required by the symmetry searching algorithm in  benhamou and sais  1  is that a cycle of the symmetry should contain a given literal  and be as long as possible. it is easy to show that solving such a problem allows to solve 1rga  by graph restriction   and is therefore at least as difficult as gl  moreover  restrictions on  easily lead to np-compicte problems  see  lubiw  1  . hence the problem of maximizing the length of a cycle is at least as difficult as o-sym  but yields only a refinement of vart syms . it should be mentioned that the algorithm in  benhamou and sais  1  uses a technique for reducing the search space which corresponds to the v-invariant valg's   but the reason of its apparent efficiency is that it  is allowed to backtrack only a fixed amount of time; it therefore has a polynomial time complexity  see  read and corneil  1    and hence cannot be expected to solve s-sym. 
　o-sym is only one example of relevant problems for implementing symmetry rules  that is solvable in polynomial time from a representation matrix m for syms. there is also s-csym  and others may exist. hence representation matrices are not only useful for proving complexity results  as done above  but also for implementing extensions of resolution with the symmetry rule. other symmetric resolution methods  less restricted than the one in  benhamou and sais  1   may be designed  and probably may involve problems which can efficiently be solved if the representation matrix is available  hence making good use of the nice group structure of syms. 
