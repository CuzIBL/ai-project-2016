 
  o r n clause/schema representation language  is 
the result of an athor to combine the- tools of logic programniinp. and schema based knowledge represention into a single hybrid system. knowledge compressed in schemala can be accessed during; the execution of logic programs and the retrieval of the values of a slot in a schema can involve- the execution of logic programs that attempt. to declare the- values prior 
to presenting- to inheritence  should the slot be empty. isri. supports the implementation of programs that take advantage of the best controles. of the logical and objec oriented approaches to knowledge represenlation  
	i 	introduction 
     the- dictionary between declarative knowledge- representations which use sentences of logic- as their basic units and those which use schemata  a.k.a. frames  units  scripts  has been a problem for artificial intelligence since the early 1's. aside from the different philosophical commitments implicit in either kind of approach  using one or the other has certain pragmatic consequences. 
knowledge bases constructed using schemata are generally 
easy for people to comprehence| because of their object-oriented  taxomonic structure. unfortunately. most schema-based reppresentations have no general inference mechanisms other than inheritance. furthermore  ihe semantics of such representations 
is usually unclear  and frequently their only rigorous description is the implementation code itself. 
　　　on the other hand  k nowledge bases consisting of sentences of logic have a clearly defined semantics and almost always have a general inference mechanism  i.e.  a theorem proved  with well understood properties  however  the lack of structure in iogic knowledge bases makes it hard be for people to grasp what they 
contain when they are of sufficient size tp be usefuli in practical applications  such representations also lack the defalt  reason-
ing  ability which is available in schema-based representations through the use of inheritance. 
　　　the problem that presents itself is how to build a knowledge representation which has the advantages of both approaches 
and avoids 	their 	disadvantages  	|1  and 
rich have proposed systems in which knowledge is stored ill two parallel representations  one logical and the other schema-
h.ised. an explicit interface betweem the two representations allows changes to knowledge in one to be incrementally translated 
irto the other. while this approach has the merit  of allowing 
　　　  this paper describes work done in the intelligent syslems laboratory of the robotics institute at carnegie mellon univcraily. this work was.supported by the air force office of scientific research under contract f1-k1. 

     values lor l.he slots in a schema may be obtained from slots in other schema!.a through inheritances relations. for example  the value tropical can be inherited in the habitat slot  of the 
schema c l a u d e  shown in figure 1  through the inheritance rr-
lation instance from the habitat slot  in l.he c h a m e l e o n schema. 
{{ claude instance: 	chameleon habitat: color: locution: 	r o c k - 1 } } 
figure 1. the schema claude  an instance of a chameleon 
     inheritance relations in srl are themselves represented by schemata. this allows the declarative specification of idiosyncratic inheiitance relations by the user   
b the 	hcprvr 	horn 	clause 	theorem 	prover 
     hcprvr is a logic program interpreter written in lisp. using hcpuvr is much like using the logic programming language prolog  ll|  with the exception that the syntax is somewhat simpler. a description of the operation ol  hcpvr and of the syntax of logic programs in hcpuvr is given in . 
	ill 	i n t e g r a t i n g 	srl and 	hcprvr 
a. using knowledge in schemata in the interpretation of logic programs 
     the first step in integrating srl and hcprvr into hsrl is to modify the function prove in hcprvr  which controls the problem reduction process used to interpret logic programs. the definition of prove is altered so that if the formula for which an instantiation is sought starts with the name of a schema followed by the name of a slot in the schema  then the axioms matched against the formula arc obtained by interpreting the slot in the following way: a slot sl with n values in a schema sch can be considered as a set of in fix atomic formulae of the form 
 sch sch value1    ach sl value1   ....  sch sl valuen . 
under this interpretation  retrieving the values of si in sch is the same as finding all instantiations of the atomic formula 
 schsli   
where x is a free variable. for example  the formula 
 claude habitat x  
is matched against the formula 
 claude habitat tropical   
since the habitat of claude is tropical by inheritance from the hnbitnt slot of chameleon. 
b. using logic programs to retrieve slot values in a schema 
     the second step in the integration is to modify the slot value access function valium in srl. in srl  the values or the slot si in schema  ch are retrieved with a function call of the form 
b. allen and j. wright 1 
 vamjkc sch si . vabukc uses inheritance if values arc not directly stored in si however  in iisrl we want to be able to lirsl use deduction to liud the values of a slot whenever applicable axioms are in the knowledge base  and then use inheritance 
to find reasonable default values when deduction fails. furthermore  we want  to place the information for deducing the values 
of slots together with the slots in the schemata. 
     we achieve this by changing the definition of vaijjivc so that it attempts to deduce slot values before inheriting them. the knowledge that vai.ukc uses to deduce values is expressed in the form of description schemata. the role of description schemata in a iisrl knowledge base is roughly analogous to that of definite and indefinite descriptions in a theory of firstorder logic  1 . descriptions have been used in several knowledge representations as a method for the declarative specification of deductive procedures  most notably in d-script  1  and omega  i . an example of a description in 1iskl is l.he schema chameleon-color  shown in figure .'j. chameleon-color oxpresses the axiom that the color of a chameleon is that ot the object on which the chameleon happens to be located. 
	{{ 	chameleon-color 
	instance: 	d e s c r i p t i o n 
schema: ch filler: clr 
	variables: 	obj 
	clauses:  ch 	location obj   obj color clr }} 
f i g u r e 1. a d e s c r i p t i o n of the color slot of c h a m e l e o n 
     to illustrate the new procedure with which iisrl obtains slot values  we show how the call  valulg claude color  is evaluated. 
     first  the color slot of c l a u d e is examined for a value. when none is found  the description slot in the meta-schema of the color slot is examined for a value. no value is found and no meta-schema exists for the description slot but the value 
c h a m e l e o n - c o l o r can be inherited from the description slot of the meta-schema of the color slot of chameleon  chameleoncolor is then interpreted by iioprvi  as the axiom 
	  c l a u d e color clr  	  	  c l a u d e location obj  obj color clr . 
the antecedent of tins axiom is constructed from chameleoncolor by substituting the name claude for each occurrence of the value of the schema slot in the values of the chaises slot. the consequent is the atomic formula whose free variable is the value of the idler slot and which represents a query for the values of color in c l a u d e . the axiom is then used to find all instantiations of   c l a u d e color clr . valulc  then returns the value obtained  which is the value in the color slot of the schema r o c k - 1 . hence claude as represented in the knowledge base will always have the same color as the object on which he happens to be located. if the retrieval of the color of r o c k - 1 had failed  the value green would have been inherited from chameleon. 
	iv 	t w o v i e w s of hsrl 
a. h s r l as a logic p r o g r a m m i n g language 
iisrl permits the use of hcprvr in the way described in 
  so the user is allowed to write standard logic programs. pure hcprvr axioms can be also be combined with axioms referring to schemata in a knowledge base and with axioms in the form of 1 b. allen and j. wright descriptions associated with slots in the schemata. embedding logic  programs in descriptions provides a natural way to index axioms in the knowledge base that people as well as programs can use. because inheritance is used only when an attempt to deduce the values of a slot using descriptions has failed  hsrl performs default reasoning in exactly those cases where it is needed. 
b. hsrl as a schema-based knowledge representation 
     an hsrl knowledge base that does not contain descriptions behaves in exactly the same way as an srl knowledge base. however  including descriptions in a knowledge base allows the user to exploit hcprvr so that modus ponens inference  as well as inheritance  can be used in answering queries in an incomplete knowledge base. one shortcoming of hsrl is that it sidesteps 
the issue of clarity in the semantics of inheritance by relying on the inheritance algorithm of srl. however  the idea of using logic programs in descriptions to deduce the values of a slot can be extended to include the use of descriptions to deduce the default values of a slot. we will explore this technique in a future paper. 
	v 	s u m m a r y a n d 	f u t u r e 	r e s e a r c h 
     hsrl is a hybrid logic/schemata knowledge representation which unifies the methodologies of schema-based knowledge representation and logic programming. 	it does so in a way that uses  ik strengths of one representation to compensate for the 
weaknesses of the other. issues that we plan to deal with in future extensions to usui  are the dynamic ordering of clauses in descriptions for increased effienciey in retrieval   the use of descriptions to represent data dependencies in a knowledge base  extending descriptions with arbitrary clauses   and specifying default  reasoning with descriptions . hsrl is implemented in franz lisp running under berkeley unix on a digital equipment corporation vax 1. 
a c k n o w l e d g e m e n t s 
　　the authors would like to thank mark fox  hill scherlis  laime carbonell  raul haley  and jim driscoll for their helpful 
comments on earlier draffs of this paper. special thanks go to our colleagues in the intelligent systems laboratory of the; robotics institute  whose collective blood and brains went  into the superb research environment that made this work possible. 
r e f e r e n c e s 
 i  attardi  c  and simi  m. semantics of inheritance and attributions in the description system omega. al memo 1  artificial intelligence laboratory  mit  1. 
 	brachrnan  	r..l  arid lcvcsque  ii..1. competence in knowledge representation. rroc. aaal1  1  pp.1. 
{'.   chester  d. hcprvr.: an interpreter for logic programs. proc. aaai-1  1  pp. 1. 
 kox  m.s. on inheritance in knowledge representation. proc.  ijcai-1  1  pp. 1. 
 frisch  a.m.  and allen  j.f knowledge retrieval as limited inference. proc. 1th conference on automated deduction  1  pp. 1. 
 hayes  p.j. the logic of frames. in frame conceptions and text understanding  metzing  d.  ed.  de cruytcr  1  pp. 
a1. 
 kowalski  r.a. logic for problem solving. north-holland  1. 
 moore  r.c. d-script: a computational theory of descriptions. rroc ijcai-1  1  pp. 1. 
 rich  c. knowledge representation languages and predicate calculus: how to have your cake and eat it too. rroc. aaai1  1  pp. 1. 
 scott  d. existence and description in formal'logic. in bertrand russell: philosopher of the century  schocman  r.  ed.  allen and unwin  1  ch. 1  pp. 1. 
 ii  warren  d.h. prolog on the decsystom-1. in expert systems in the micro-mice electronic age   michic  d.  ed.  edinburgh university tress  1. 
 warren  d.h. efficient processing of interactive relational database queries expressed in logic. tech. rept. 1  department of artificial intelligence  university of edinburgh  1. 
 wright  .i.m.  and fox  m.s. srl/i.1 user manual. tech. rept.  robotics institute  carnegie-mellon university  1. 
