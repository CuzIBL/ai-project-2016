
in this paper  we describe our entrant in the travel division of the 1 trading agent competition  tac . at a high level  the design of many successful autonomous trading agents can be summarized as follows:  i  price prediction: build a model of market prices; and  ii  optimization: solve for an approximately optimal set of bids  given this model. to predict  we simulate simultaneous ascending auctions. to optimize  we apply the sample average approximation method. both of these procedures might naturally be abbreviated saa; hence the title of this paper. our agent dominated the preliminary and seeding rounds of tac travel in 1  and emerged as champion in the finals in a photo finish.
1 introduction
a tac travel agent is a simulated travel agent whose task is to organize itineraries for a group of clients to travel to and from tactown. the agent's objective is to procure travel goods that satisfy its clients' preferences as inexpensively as possible. travel goods are sold in simultaneous auctions:
  flights are sold by the  tac seller  in dynamic postedpricing environments; no resale is permitted
  hotel reservations are sold by the  tac seller  in multiunit ascending call markets; specifically  1 hotel reservations are sold in each hotel auction to the 1 highest bidders at the 1th highest price; no resale is permitted
  agents trade tickets to entertainmentevents among themselves in continuous double auctions; resale is permitted
flights and hotel reservations are complementary goods: flights are not useful to a client without the complementary hotel reservations  nor vice versa. tickets to entertainment events  e.g.  the boston red sox and the boston symphony
orchestra  are substitutable.
﹛the tac travel environment models the problem faced by an agent bidding in simultaneous auctions for complementary and substitutable goods  e.g.  an agent bidding on ebay. at a high-level  the design of many successful tac travel agents  e.g.  walverine  cheng et al.  1  and attac  stone et al.  1   can be summarized as:  i  price prediction: build a model of the auctions' clearing prices  and  ii  optimization: solve for a near-optimal set of bids  given this model.
﹛in this paper  we describe roxybot-1  the top-scoring tac travel agent in 1. here  we reveal roxybot's secrets. one feature that distinguishes roxybot-1 from most other tac agents is that it builds noisy  i.e.  stochastic  models of the auctions' clearing prices  rather than predicting clearing prices via point estimates. given stochastic price predictions  stochastic optimization is at the heart of roxybot-1. our approach is decision-theoretic rather than game-theoretic.
repeat
{start bid interval}
1. download current prices and winnings from server
1. predict: build stochastic models
a. flights: bayesian updating/learning
b. hotels: simultaneous ascending auctions
c. entertainment: sample historical data
1. optimize: sample average approximation
1. upload current bids to server
 three separate threads 
{end bid interval}
until game overtable 1: a high-level view of roxybot-1's architecture.
1 roxybot-1's architecture
table 1 depicts the high-level architecture of roxybot-1. after current prices and winnings are downloaded from the server  the key prediction and optimization routines are run. output from the optimization routine is a bidding policy  that is  a mapping from auctions to bids. finally  current bids are uploaded to the server by three separate threads  one for flights  one for hotels  and one for entertainment.
﹛tac travel games last 1 minutes. flight price updates are broadcast every ten seconds. the eight hotel auctions clear on the minute at each of minutes 1 through 1  with exactly one auction closing.  the precise auction to close is decided at random  with all open auctions equally likely to be selected.  for the others  the server reports the  hypothetical quantity won  by each agent as well as the current ask price. although the entertainment auctions clear continuously  price updates are broadcast only every 1 seconds.
﹛roxybot-1 discretizes time into bid intervals. since server updates are received only every ten seconds  it suffices for tac travel agents to reason about intervals of this length.
﹛for simplicity  assume the prediction and optimization steps are instantaneous. under this assumption  based on the current bidding policy   i  the flight thread bids on a flight only if its price is near its predicted minimum;  ii  the hotel thread bids on a hotel only if it is moments before the end of a minute; and  iii  the entertainment thread places bids immediately. in practice  the prediction and optimization steps are time-consuming  so the timing of bid placement in tac travel games is often complex.
1 price prediction
in this section  we describe how roxybot-1 builds its stochastic models of flight  hotel  and event prices. each model is a discrete probability distribution  represented by a weighted set of  scenarios.  each scenario is comprised of a vector of  current  prices-prices at which goods can be bought and sold during the current stage-and a vector of  future  prices-prices at which goods can be bought and sold after the current stage. for flights  the current  or future  buy price is roxybot-1's prediction of the expected minimum price during  or after  the current stage. for hotels  the current buy prices are predicted by simulating simultaneous ascending auctions to approximate competitive equilibrium prices. there are no future buy prices for hotels. for entertainment  roxybot-1 predicts current and future buy and sell prices based on historical data.
1 flights
flight prices follow a biased random walk. they are initialized uniformly in the range  1   and constrained to remain in the range  1 . at the start of each tac game instance  a bound z on the final perturbation value is selected for each flight. these bounds are not revealed to the agents. what is revealed to the agents is a sequence of random flight prices. every ten seconds  tacair perturbs the price of each flight by a random value that depends on the hidden parameter z and the current time t as follows: given constants c ﹋r and t   1  each  intermediate  bound on the perturbation value is a linear function of t:
		 1 
the perturbation value at time t is drawn uniformly from one of the following ranges:
  u  c x t z    if x t z    1   u  c +c   if x t z  = 1
  u x t z  +c   if x t z    1
﹛for tac's parameter settings  namely c = 1 and t = 1  with z uniformly distributed in the range r =   1   given no further information about z  flight prices are expected to increase  i.e.  the expected perturbation is positive .
conditioned on z  however  flight prices may increase or decrease  i.e.  the expected perturbation can be positive or negative . to facilitate their flight deliberations  one of the tasks faced by tac agents is to model the probability distribution pt z  associated with z at time t for use in predicting current and future flight prices. models of probability distributions can be built using bayesian updating.
   given a probability distribution pt z   to predict a flight price  roxybot could simulate a random walk from time and select the minimum price. in practice  however  only roxybot-1's hotel and event price predictions are stochastic; its flight price predictions are point estimates  i.e.  constant across scenarios . for each flight and for each possible value of the hidden parameter z  roxybot-1 simulates an  expected  random walk  see algorithm 1   selects the minimum price  and then outputs as its prediction the expectation of these minima  averaging according to pt z . alternative scenario generation procedures are also possible: e.g.  an agent could sample instead of calculating expected perturbations. our choice of flight price prediction method was guided by time constraints.
algorithm 1 expected minimum price

for all z ﹋ r do
min z  = +﹢
fordo
    = getrange 而 z  忖 = b 1a {expected perturbation} p而 = p而 1 + 忖 {perturb price} p而 = max 1 min 1 p而   if p而   min z  then


1 hotels
roxybot-1's approachto hotel price prediction is inspired by walverine's  cheng et al.  1   in which the ta tonnement method is used to approximate competitive equilibrium prices. in a competitive market where each individual's effect on prices is negligible  equilibrium prices are prices at which supply equals demand  assuming all producers are profit-maximizing and all consumers are utility-maximizing.
﹛formally  let p denote a vectorof prices. if denotes the cumulative supply of all producers  and if denotes the cumulativedemandof all consumers  then denotes the excess demand in the market. the ta tonnement process adjusts the price vector at iteration n + 1  given the price vector at iteration and a sequence {汐n} of adjustment rates:.
﹛in the tac game context  ta tonnement is not guaranteed to converge. walverine forces convergence by letting 汐n ↙ 1. we force convergence by modifying the adjustment process to simulate simultaneous ascending auctions  simaa   cramton  1 . in simaas prices increase as long as there is excess demand but they can never decrease:
.
﹛following  wellman et al.  1   we evaluate these hotel price predictions using two metrics: euclidean distance and  expected value of perfectprediction  evpp . euclidean distance is a standard way of measuring the difference between two vectors  in this case the actual and the predicted prices. the value of perfect prediction  vpp  for a client is the difference between the value of the best package for the client based on the actual prices and the value of the best package for the client based on the predicted prices. evpp is the expected vpp averaged over the client distribution.
﹛in figure 1  left   we reproduce a scatter plot generated by the walverine team that evaluates the hotel price prediction methods of tac 1 agents at the beginning of the game. we add two versions of simaa and ta tonnement to the plot. following wellman et al.  cheng et al.  1   one uses 1  expected  clients; the other samples 1 random clients. eight agents play the tac game  each with eight clients. each agent knows the preferences of its own clients  but must simulate the demand of the 1 others. an expected client corresponds to one of ten different arrival/departure pairs  with average hotel and entertainment values.
﹛we interpret each prediction with 1 random clients as a sample scenario  so that a set of such scenarios represents draws from a probability distribution over competitive equilibrium prices. the vectorof predicted prices that is evaluated and plotted is the average of multiple  1  such predictions. the predictions generated using sets of random clients are not as good as the predictions with expected clients  although with more than 1 sets of random clients  the results might improve. still  using random clients helps us make better interim predictions later in the game as we explain next.
﹛as hotel auctions close  roxybot-1 updates the predicted clearing prices of the open hotel auctions. we experimented with two ways of constructing interim price predictions. the first is to fix the prices of the closed auctions at their clearing prices and then to run simaa or ta tonnement with expected or random clients. the second is to distribute goods from the closed auctions to the clients who want them the most  and then to exclude any closed auctions in further runs of simaa or ta tonnement.  nb: we determine which clients want which goods most by running simaa or ta tonnement as usual.  note that we can only distribute goods to random clients. it is not clear how to distribute goods to  expected clients   which are aggregate clients rather than real clients. figure 1  center and right  shows that the predictions based on the distribution method are better than the others. hotels that close early tend to sell for less than hotels that close late; hence  any method that makes relatively constant predictions all throughout the game is bound to suffer.
1 entertainment
during each bid interval  roxybot-1 predicts current and future buy and sell prices for tickets to all entertainment events. these price predictions are optimistic: the agent assumes it can buy  or sell  goods at the least  or most  expensive prices that it expects to see before the end of the game. more specifically  each current  or future  price prediction is the best predicted price during  or after  the current bid interval.
﹛roxybot-1's estimates of entertainment ticket prices are based on historical data from the past 1 games. to generate a scenario  a sample game is drawn at random from this collection  and the sequences of entertainment bid  ask  and transaction prices are extracted. given such a history  for each auction a  let tradeai denote the price at which the last trade before time i transacted; this value is initialized to 1 for buying and 1 for selling. in addition  let bidai denote the bid price at time i  and let askai denote the ask price at time i.
﹛to predict current buy price in auction a at time t  roxybot1 first computes the minimumamong the historical trade and ask prices at time t and the current ask price in the present game. the current buy price is then constrained to be above the current bid price in the present game. without this latter constraint  the agent might be inclined to buy a good at a price that is lower than the outstanding bid  which is impossible. formally 
currbuyat = max{currbid min{tradeat askat currask}}
 1  the current sell price is predicted analogously:
currsellat = min{currask max{tradeat bidat currbid}}
 1 
﹛roxybot-1 predicts the future buy price in auction a after time t as follows:
	future buyat =	min	min{tradeai askai}  1 
i=t+1 ... t
in words  the future buy price at each time i = t+1 ... t is the minimum of the ask price after time i and the most recent trade price. the future buy price at time t is the minimum across the future buy prices at all later times. as above  the future sell price after time t is predicted analogously:
	future sellat =	max	max{tradeai bidai}  1 
i=t+1 ... t
1 optimization
we characterize roxybot-1's optimization routine as  i  stochastic   ii  global  and  iii  dynamic. it takes as input stochastic price predictions; it simultaneously considers flight  hotel  and entertainment bids in unison; and it simultaneously reasons about bids to be placed in both current and future stages of the game.
﹛we assume that our agent's decisions do not affect prices and express the game-theoretic bidding problem as a decision-theoretic optimization problem. the influence of other agents on prices is represented by a set of scenarios or  more generally  a distribution over prices.
﹛hence  roxybot-1 is confronted with a dynamic stochastic optimization problem. it solves this problem by collapsing the future into only two relevant stages- current  and  future . this approach is reasonable in tac  and other similar combinations of sealed-bid and continuously-clearing simultaneous auction environments  as we now explain.

figure 1: left: evpp and euc. dist. for tac 1 agents as well as our prediction methods: ta t. and simaa; expected and random. center and right: evpp and euc. dist. in tac 1 of our hotel price prediction methods with distribution as the﹛the key bidding decisions are: what goods to bid on  at what price  and when  since hotel auctions close in an unknown random order  roxybot-1  like most tac agents  operates under the assumption that all hotel auctions close at the game progresses.
end of the current stage. hence  the only pressing decisions regarding hotels are: what goods to bid on and at what price  there is no need to consider the timing of bids. accordingly  the only model of hotel prices is the current one.
﹛in contrast  since flight and entertainment auctions are continuous  a trading agent should reason about the timing of its bids for these goods. still  it suffices to consider only two pricing models. the current model predicts the best good prices during the current bid interval  whereas the future model predicts the best good prices after the current bid interval  conditioned on current prices.
﹛we express the bidding problem as a stochastic program where current and future prices are given by corresponding stochastic models. the sample average approximation  saa  method is a numerical means of approximating solutions to stochastic programs via monte carlo simulation  ahmed and shapiro  1 . the main idea is simple:  i  sample a set of scenarios from the input distribution  and  ii  approximate the solution to the stochastic program by solving an approximation of the stochastic optimization problem which incorporates only the sample scenarios. roxybot-1 samples scenarios by simulating simaa as described in section 1.
﹛the ilp formulation of saa applied to the tac bidding problem is included in appendix a. the power of this formulation is in its ability to make globally optimal decisions. flight  hotel  and entertainment bids are optimized together to produce a consistent bidding policy. the first stage decisions are the bids that are submitted now. the second stage decisions are the bids that can be submitted later. all hotel bids are submitted now; flight and entertainment bids can be submitted now or later.
﹛the formulation of the problem facilitates reasoning not only about what bids to place but also about when to place them. the fundamental issue regarding tac flight decisions is a common one: balancing concern about future price increases with the benefit of delaying commitment to travel on particular days. we model this tradeoff explicitly by giving the agent the option of buying flight and entertainment tickets now at the current prices or later at the scenario's  i.e.  future  prices. if the agent decides to buy a flight or entertainment ticket later  it can submit different bids in different scenarios. one of the weaknesses of the ilp formulation is that its hotel bids can only be as high  or as low  as the maximum  minimum  price in the scenarios although an agent may be willing to pay more  less . we overcome this problem by adding to the set of scenarios generated by our stochatic model additional scenarios in which one of the hotels is priced higher/lower than in any other scenario. this way the agent may bid higher or lower than predictions in case the actual clearing prices are unexpectedly high or low. roxybot-1 optimized with respect to 1 scenarios generated as described in section 1 and up to 1 extra scenarios with high and low prices. these choices were guided by time constraints.
1 competition results
we present the results of the last day of the tac-1 finals  1 games . we omit the first two days because agents can vary across days  but cannot vary within. presumaly  the entries on the last day are the teams' preferred versions of the agents. mean scores are plotted in figure 1 and detailed statistics are tabulated in table 1.
﹛there is no single metric such as low hotel or flight costs that is responsible for roxybot's success. rather its success derives from the right balance of contradictory goals. in particular  roxybot incurs high hotel and mid-range flight costs while achieving mid-range trip penalty and high event profit.
﹛we compare roxybot with two closest rivals: walverine and whitedolphin. comparing to walverine first  walverine bids lower prices  by 1  on fewer hotels  1 less   yet wins more  1  and wastes less  1 . it would appear that walverine's hotel bidding strategy outperforms roxybot's  except that roxybot earns a higher hotel bonus  1 more . roxybot also gains an advantage by spending 1 less on flights and earning 1 more in total entertainment profit.
﹛a very different competition takes place between roxybot and whitedolphin. whitedolphin bids lower prices  1 less  on more hotels  by 1  than roxybot. roxybot spends much more  1 on hotels than whitedolphin but makes up for it by earning a higher hotel bonus  by 1  and a lower trip penalty  by 1 . it seems that whitedolphin'sstrategy is to minimize costs even if that means sacrificing utility.

roxwalwhisicmerl-akinutt# of hotel bids1111average of hotel bids1111# of hotels won11111111hotel costs1111# of unused hotels11111111hotel bonus1111trip penalty1111flight costs1111event profits11-1-1-1-1event bonus1111total event profits1111average utility1111average cost1111average score1111table 1: last day of final 1. 1 games.figure 1: 1 finals' scores and 1% confidence intervals.
1 conclusion
the success of an autonomous trading agent  particularly tac agents  often hinges upon two key modules:  i  price prediction  in which the agent builds a model of market prices; and  ii  optimization  in which the agent solves for an approximately optimal set of bids  given this model. for example  at the core of roxybot's 1 architecture  greenwald and boyan  1  was a deterministic optimization problem  namely how to bid given price predictions in the form of point estimates. in spite of its effectiveness in the tac-1 tournament  a weakness of the 1 design was that roxybot could not explicitly reason about variance within prices. in the years since 1  we recast the key challenges faced by tac agents as several different stochastic bidding problems  see  greenwald and boyan  1    whose solutions exploit price predictions in the form of distributions. in spite of our perseverance  roxybot fared unimpressively in tournament conditions year after year...until 1. half a decade in the laboratory spent searching for bidding heuristics that can exploit stochastic information at reasonable computational expense finally bore fruit  as roxybot emerged victorious in tac-1. in a nutshell  the secret of roxybot-1's success is: hotel price prediction by simulating simultaneous ascending auctions  and optimization based on the sample average approximation method.
