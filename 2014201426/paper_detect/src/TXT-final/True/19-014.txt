 
　　this paper discusses the issues in amalgamating multiple programming paradigms in the logic programming language  prolog. it is shown that multiple paradigms can be incorporated without disturbing logic programming language features and efficiency. it also introduces a new programming paradigm called the relation-oriented paradigm. the research results are reflected in the implementation of the prolog-based knowledge programming system peace  which is used to realize an expert system in a diagnostic domain. peace provides a relation-oriented programming paradigm  as well as previously discussed paradigms  such as object-oriented  data-oriented  and rule-oriented paradigms. these paradigms are nicely amalgamated in prolog language and can be used intermixedly. 
1. introduction 
　　recently  several knowledge programming systems  such as  bobrow1  have been proposed and implemented with multiple programming paradigms with the functional language lisp. the paradigms supported in these systems so far are: object-oriented  ruleoriented  data-oriented  and procedure-oriented ones. in these systems  most inference knowledge is expressed in a rule-oriented style with an  if-then  structure  and the target structure is expressed in hierarchically organized objects  or frames . they provide an embedded uniform inference mechanism  such as a forward and backward reasoning engine to reason on the target objects. 
　　these systems have two basic problems in representing real-world knowledge. the first drawback is from having a uniform inference mechanism. this is because a uniform mechanism prevents the utilization of multiple inference strategies in an application. the second problem is that it is hard to read a knowledge base written in this style  because the inference rules are described separately from the target object network. 
　　to solve these problems  this paper proposes a semantic-network based knowledge programming system construction. in addition  it introduces another programming paradigm called the relation-oriented paradigm  based on a first order predicate logic language prolog  clocksin1 . 
　　several kinds of knowledge  such as inference  inheritance and constraint propagation knowledge are considered to be pertaining to the relations among objects  not necessarily to the objects themselves. therefore  it is natural for knowledge programming systems to have a capability of describing these kinds of knowledge in relations between target objects. with this capability  an entire knowledge base can be described in a semantic network  in which target knowledge is represented as object nodes and inference knowledge is represented as relations between nodes. by doing so  the problems with the conventional systems may be solved. first  it is possible to utilize multiple inference strategies in an application. second  since the inference rules can be expressed in relations  inference knowledge and target object knowledge can be uniformly expressed in a network. 
　　to implement a knowledge programming system with these features  the logic programming language prolog is an appropriate base language. this is because prolog is based on first-order predicate logic  and it is highly effective in representing knowledge in logical relations among objects. 
　　however  it lacks the capability of expressing knowledge in object-oriented style. if it were possible to incorporate other programming paradigms  such as object-oriented and data-oriented ones in prolog  a very efficient system can be obtained. 
	new 	computer 	technology 	 chikayama1 . 	it 
1 	architectures and languages 　　recently  several schemes to achieve this incorporation in prolog language have been proposed. one way is to build an entirely new system with objectoriented features. esp is an example of this approach  designed for the psi prolog machine at the institute for incorporates flavor-like  weinreb1  object-oriented programming with a multiple inheritance mechanism. however  its object-oriented programming is  added on   not  amalgamated   since its object implementation is just mimicking the one on lisp based tools. for example  object types in the system are restricted to class and instance  and it is not allowed to treat relations among objects as prolog relations. therefore  the relation-oriented programming style is not positively supported. 
　　another way is to express a semantic network in a set of horn clauses and to use the prolog interpreter as an inference mechanism  koyama1 . again  this performance is limited  because an entire network is represented with only one predicate  so that every clause matching might cause the entire network search in the worst case. 
　　alternatively  objects may be expressed in a 
　　nested list structure  lee1 . but this method can not utilize prolog expressiveness and is not efficient. 
　　in this paper  multiple knowledge programming paradigms are amalgamated in prolog by the technique called meta-programming  bowen1 . additionally  it describes a new implementation of the prolog based knowledge programming system called peace  prolog based engineering applications environment . it is shown that peace efficiently supports a semantic network knowledge representation realizing relationoriented programming as well as object-oriented programming  data-oriented programming and rule-oriented programming amalgamated in prolog. 
1. semantic network representation in peace 
　　the ultimate goal of the authors' project was to realize a system which behaves like human experts in a diagnostic domain  koseki1 . to achieve this goal  it is necessary to represent various kinds of knowledge  such as design knowledge about the diagnosed equipment  and maintenance technician's empirical diagnostic knowledge. to investigate what types of knowledge representations are suitable in this domain  a prototype system was developed  using a rule-based technique similar to the one described in  shortliffe1 . there  it was found that representing diagnostic knowledge entirely in a rule-form was not natural and feasible. it was considered appropriate to incorporate the structural information of the target equipment. to represent such a kind of knowledge  network oriented representation is suitable. 
to describe network-shape knowledge representa-
tions  recent knowledge programming systems provides the object-oriented  or frame-based  paradigm. in those systems  a knowledge network is described in hierarchical trees of objects. the objects are usually classified into class-objects  and instance-objects  and they are connected by the system-defined relations  such as class to instance   and super-class to class relations. through these relations  an inheritance mechanism is provided. still  it is not felt natural to classify real-world knowledge into these fixed object categories and the fixed relation categories. to represent various kinds of knowledge  such as signal paths along functional blocks of the diagnosed equipment  a more flexible system is needed which can describe a more flat network. 
　　to meet this goal  peace was developed to describe a semantic network on the first-order predicate logic language prolog. it is basically different from conventional object-oriented  or frame-based  systems in three aspects. 
first  there is no distinction among object types. 
that is  there is no distinction between class-object and instance-object  no distinction between class-method and instance-method  and so on. instead  the system only provides a uniform object representation without any system-defined types. the role of an object is determined by how it is related to the other objects. for example  if an object is related to another object with instance-of relation  it is treated as an instance object  and the other object is treated as a class object. 
　　second  the user is allowed to define his own relation types in his problem domain and to add his own semantics to them. that is  relations can be defined freely with their own inheritance specifications and inverse-relation definitions. moreover  since the relations between objects are internally represented in prolog clauses  the user is allowed to express more complex relations by providing prolog rules. 
　　third  since it is constructed on prolog which has a powerful backtracking and unification mechanism  the multiple programming paradigms can also utilize these features. for instance  slots and relations defined in an object can have multiple values which can be enumerated by backtracking. 
　　to show how multiple programming paradigms can be amalgamated in prolog language  let us see example descriptions in peace. figure 1 shows an example family network structure in a semantic network form. each node corresponds to a physical object or concept. 
they are simply called object  because the system gives no distinction in regard to object types. each arc between objects corresponds to a semantic relation 
	koseki 	1 
between them. for instance  this network shows the facts that  charlotte isa female    charlotte and shirley are siblings   and  andy's parent is shirley  and so is wayne's . 
1. relation description 
roles of a relation are described in an object 
 relation-object  with the relation name as the object name. for the example network in fig. 1  the relation 


1. object description 
　　in peace  a semantic network is represented as a network of objects connected by directed binary relations. an object is represented with its name and a set of prolog clauses describing the contents in the format: 
object-name :: 
relation-name # destination-object; slot-name : slot-value; slot-name :  slot-demon; 
predicate-name arguments ; predicate-name arguments ::- body. 
　　relation and slot can have basically similar effects  as long as both are used to point to another object. the difference is that relation can only point to objects and provide inheritance  automatic inverse-relation keeping  and user defined semantics as described in the following section  relation oriented programming ; whereas slot can contain any data  including complex prolog structures and provide demon invocation as described in the other section  data oriented programming . note that a slot demon is defined separately and can be inherited through relations separately from slot value. 
　　predicates defined in an object can be treated declaratively or procedurely  as ordinal prolog predicates can be. in other words  if they are interpreted declaratively  they can be considered to be facts and rules or axioms in an object's world. if they are interpreted procedurely  they can be considered equivalent to methods in the object-oriented languages  such as smalltalk-1  goldberg1 . 
1 	architectures and languages 
roles are described in fig. 1. 
;- parent:: 
$inverse child . 
:- child:: 
     $inverse parent . :- sibling :: 
$inverse sibling . 
:- isa :: 
$inherit pred   ; 
$inherilslol value j; $inherit slotjype j. 
fig. 1 relation descriptions 
　　the parent and child relation objects describe the relation that  parent  has inverse-relation  child  and the relation  child  has inverse-relation  parent . that is  when 'andy' has a parent 'shirley'  'shirley' has a child 'andy' at the same time. this description is interpreted when a relation is added to a network  and the bi-directional relation is kept at all times. 
　　currently  the following four kinds of inheritance specifications can be set up in relation-objects  so that the inheritance can be restricted to certain predicate names  slot names  and relation names by specifying the names in the argument. 
$inheritpred predicate-name   
$inherit slot value slot-name   
$inherit  slot  type slot-name   $inherit relation relation-name . 
　　for example  in fig. 1  the relation isa has inheritance specifications which enable any predicates  any slot values  and any slot types to be inherited. the reason is that  in these inheritance specifications      in an argument denotes an anonymous value  which matches anything. 
1. multiple programming paradigms 
　　based on the semantic network representation described in the previous section  the system can provide the multiple programming paradigms. these paradigms are: object-oriented  relation-oriented  dataoriented  logic-oriented  and rule-oriented ones. 
1. object oriented programming 
　　figure 1 shows the object descriptions for the family network in fig. 1. 
:- 'charlotte' :: isa * female  possesses * presents  possesses * presented. 
:- 'shirley':: isa # female; sibling * 'charlotte'. 
;- 'andy':: isa # male; parent* 'shirley'. 
  'wayne':: isa * male; parent* 'shirley'. 
fig. 1 object descriptions 
　　the symbol  #  denotes a relation. with these descriptions  a simple query like 
 - 'andy'  - parent # x.  who is andy's parent   gives an answer  
x - 'shirley'. 
you may look at the content of  shirley' object by typing: 
 - listobj 'shirley' . 
and you can see that the system has created two child relations 'andy' and 'wayne' in 'shirley' object. this is because the relation child is the inverse relation of parent as described in fig. 1. 
'shirley':: 
isa * female; sibling * 'charlotte'; child* 'andy'; child* 'wayne'. 
therefore  a query like 
 - 'shirley' - child* x.  who is shirley's child   gives an answer  
x m 'andy'; x* wayne'. 
note that the multiple answers could be obtained simply by causing backtracking  hitting semi-colon . 
　　next  let us describe objects for female  male and human object  in fig. 1. 
;- female:: isa * human; sex female ; height:  when empty 1 . 
:- male :: 
isa * human; sex male ; height:  when empty 1 . 
  human :: 
disp sex ;;- origin  - sex x   display x   nl; weight:   when empty x  ::- origin  - height: y  xis / - 1 . 
fig. 1 objects with methods and demons 
　　the predicate sex is an example of the declarative usage of predicates. the query  
 - 'shirley'  - sex x . generates the answer x m female 
by the inheritance mechanism. when this query is invoked  the object interpreter  activated by   -  operator  tries to satisfy the goal sex x  predicate in the object 'shirley'. since the interpreter can not find it  it looks for relation descriptions of 'shirley' and finds out 
the relation isa inherits the predicate sex  because isa object has $inherit pred j which matches the goal $inherit pred sex . then  it tries the goal sex x  again in the female and succeeds in matching x with female. 
　　the predicate disp sex in human is an example of the procedural usage of predicates. it denotes a procedure  method  to print out the object's sex. the dummy object origin is used in it to point to the originating object of the inheritance chain. for example  the query   - 'shirley'  - disp sex. prints out the answer: 
female. 
after climbing up the inheritance chain of isa relations  it tries the goal disp sex in human. in human  because origin is 'shirley' in this case  
origin    sex x . 
	koseki 	1 
succeeds in matching x to female  and the word female is printed out. 
1. relation oriented programming 
　　since the directed binary relations between objects are internally represented as prolog predicates  they can be used for relation-oriented programming. 
a binary relation between objects: 
'andy' :: parent # 'shirley'. 
is internally represented as two prolog facts  such as: 
'andy' parent  'shirley' . parent 'andy'  'shirley' . 
　　when andy's characteristics are requested  that is  when the relation name  ft is unknown in the query: 
 - 'andy' - r# x. 
the interpreter searches the first kind of internal facts with a goal 'andy' r x   and gives the result: 
r * parent 
x   'shirley'. 
in this way  the number of matchings is restricted to the number of relations in the object and the search 
through the entire objects can be avoided. 
　　on the other hand  when the relation name is known  it searches the second kind of facts with a goal parent x.y . again  in this way  the search through the entire prolog data base is avoided and the number of matchings is restricted to the number of related pairs 
for the relation in the worst case. 
　　to search a set of the objects  by which relations can be expressed logically  only the prolog rules to express its logic are to be added. for example  to express relations aunt and sister in the example family network  you should add two rules: 
aunt x z :- parent x y  sister y z . 
      aunts are parent's sisters  sister x y :- sibling x y   y -sex female . 
 sisters are any siblings who are female  
the query like   - 'andy'  - aunt # x. gives an answer  x   'charlotte'. 
　　using this feature  we can easily define inference rules pertaining to a certain relation. for example  a 
1 	architectures and languages 
rule  all of aunts give presents to their nephews  can be described as: 
present rule :-
	 aunt x  y   	%for all of nephew-aunt pairs x  y  
	call  y  - possesses # p  	%check ifyhas a present p 
p  - instance of# present  
y  - possesses #-= p  %get the present p from y 
x  - possesses #+= p  %give the present p to x 
　　1   fait;true . 
the call operator is used to restrict the scope of the cut 
 !  operator. by executing this rule  charlotte's presents are given to all of her nephews  andy and wayne. in this way  the relation-oriented programming can be accomplished nicely  in combination with the objectoriented programming. 
1. data oriented programming 
　　slots can have demons. the system provides several kinds of demons: when empty  referred  constrain  afterjput  removed  and after add. in the example  a query   - 'andy'  - height: x. gives an answer  
x = 1 
this is because when empty demon in male worked since there was no height slot found in 'andy' and isa inherits any slot types. a query  
 - 'andy'  - weight: x. gives an answer  
x = 1 
since when empty demon in human calculates weight by subtracting 1 from its height as a default. 
1. logic oriented programming 
　　since the system is built on the logic programming language prolog and preserves the features of the language  such as backtracking and a unification mechanism  all of the above mentioned programming paradigms can be incorporated in the logic programming style. 
　　for example  the setof predicate can be used nicely with object oriented programming. the query to get all of charlotte's nephews  
 - setof x  aunt x  'charlotte'  x -sex male   s . 

gives an answer  
s *  'andy'  wayne' . 
1. rule oriented programming 
　　the prolog interpreter itself works as a backward chaining rule interpreter with a backtracking mechanism. to realize a forward chaining mechanism on prolog is a relatively easy task. the simplest way to describe a rule with a prolog clause is like: 
fire .rule :- premise 1  premise 1t 
!  
conclusion   conclusion . 
but the rule control mechanism must be written by the user. peace provides a special rule interpreter to give more flexible control. it interprets a set of rules described in a rule-object which has the format: 
rule $et name :: 
$control control specification ; if premise then conclusion; 
the premise and the conclusion are described in 
peace and prolog predicates. a production system 
can be realized using the semantic network as a working memory. the provided control specification types are do  1  do all  while 1  and while .ah. 
1. implementation 
　　peace is implemented on engineering workstations running standard prolog interpreters and compilers  including c-prolog  pereira1  and others. 
　　the interpreter is realized with the metaprogramming technique  bowen1  miyachi1   known as the prolog-in-prolog technique  which is to write the prolog interpreter in prolog itself. this method is also used in realizing metaprolog  bowen1 . it gives great flexibility to the system implementation  but degrades execution performance. however  the degradation was permissible in building a diagnostic expert system  koseki1 . 
　　object descriptions are parsed when fed to the system and are stored as prolog assertions. slots  predicates  and relations pertaining to an object are internally represented as prolog assertions with the same functor name as the object name  with different numbers of arguments. the multiple inheritance mechanism works interpretively so that dynamic additions of objects cause no troubles. therefore  future efforts toward automatic knowledge acquisition may be relatively easy. 
　　since most of the prolog compilers support the incremental compiling which enables it to compile a selected portion of a program  static objects which are never modified during execution can be compiled for speed up  without much effort to develop a special object-compiler. in addition  with the prolog compiler's clause-indexing function  bowen1   the time complexity for searching a predicate  including slot and relation  in an object may become constant. 
　　a user-friendly interface is provided with a menudriven and mouse-driven environment on commonlyused engineering workstations. most of the basic operations including browsing the knowledge base network can be done by mouse operations. an example user interface screen is shown in fig. 1. 

1. conclusion 
　　a way to amalgamate multiple programming paradigms  such as relation-oriented  object-oriented  dataoriented and rule-oriented ones  was shown with examples on a prolog-based knowledge programming system peace. by combining prolog's logic programming capabilities  it was possible to achieve more flexibility in representing the real world knowledge than when using conventional knowledge representation systems. 
the system has been successfully used in realizing 
	koseki 	1 

an expert system in a diagnostic domain and has proved to be effective in representing various kinds of knowledge  such as target equipment structure and the diagnosis technician's empirical knowledge. in particular  the relation-oriented programming technique was 
effective in representing symptom-hypothesis relations and the structure of the diagnosed equipment 
 koseki1 . 
acknowledgements 
　　the author thanks shin-ichi wada  the co-worker on the diagnostic expert system and also thanks nobuyasu wakasugi  masaki kondo  and mitsugu oishi for developing peace. he also expresses deep appreciation to hajimu mori  and satoshi goto for continuous encouragement and support. finally  he would like to thank yasuo iwashita of the institute for new generation computer technology for various kinds of support. 
