 
　　lisp1 is a descendant of lisp which emphasizes patterndirected computation and extensibility. a function can be defined by a set of pattern rewrite rules as well as by the normal lambda method. new rewrite rules can be added to a previously defined function; thus a lisp1 function is said to be  extensible . it is possible to have new rules merged in automatically such that special cases are checked before general cases. some of the facilities of the rewrite system are described and a variety of applications are demonstrated. 
background 
　　during the past decade  lisp1 has been a principal programming language for artificial intelligence and other frontier applications of computers. like other widely used languages  it has spawned many variants  each attempting to make one or more improvements. among the aspects that have received particular attention are notation 1'1 control structure 1 1 data base management l1 1 interactive editing and debugging 1 and execution efficiency. 
　　a need for a successor to lisp has been recognized 1 and several efforts in this direction are under way. the approach being taken with tenex-usp is to begin with an excellent debugging system1 and to add on flexible control structure.1 the approach taken by lisp1 and by ecl1 is to begin with an extensible kernel language which users can tailor and tune 
to their own needs. 
　　 tailoring  a language means defining facilities which assist in the solution of particular kinds of problems which may have been unanticipated by the designers of the kernel. tuning  a 
* this work was supported  in part  by grant phs mh 1 from the national institute of mental health  and  in part  by the advanced research projects agency of the office of the secretary of defense  sd-1 . 
　　the views and conclusions contained in this document are those of the authors and should not be interpreted as necessarily representing the official policies  either expressed or implied  of the advanced research projects agency  nimh  or the u.s. government. 
** present affiliation: xerox corporation  palo alto research center . 
language means specifying more efficient implementations for statements which are executed frequently in particular programs. 
　　a language that can be used on only one computer is not of universal utility; the ability to transfer programs between computers increases its value. however  a language that is extensible both upward and downward is difficult to transport if downward extensions mention machine-dependent features.1 this consideration suggests the use of a machine-independent low-ievel language1 in terms of which to describe downward extensions. 
capabilities of lisp1 
　　the aim of lisp1 is to provide a flexible and parsimonious programming medium for symbolic processing and an efficient implementation for that medium on several machines  
　　the semantics of the lisp1 kernel subsumes lisp 1 .1 and algol-1 semantics. the syntax provides three high-level notations: s-expressions  algol-like mlisp expressions  and pattern-directed rewrite rules. the syntax and semantics can both be extended as described later in this paper. by extension  it is feasible to incorporate the capabilities of virtually any other programming language. of course  one would take advantage of the techniques developed by its previous implementors; lisp1 simply provides a convenient rnedijm for doing this. 
　　to maximize efficiency and to eliminate the possibility of an inconsistent compiler and interpreter  all programs in lisp1 are compiled. there is no interpreter in the usual sense; the function eval compiles its argument with respect to the current environment and then executes the machinelanguage code. to extend the language  extensions need only be made to the compiler  not also to an interpreter. 
　　one disadvantage ot a compiler is that certain sophisticated debugging techniques such as the  breakin  of tenex-lisp1 are more difficult to implement than in an interpreter. however  we feel that the extra effort needed for this is worth expending to retain the advantages of a compiler. 
　　lisp1 generates code for an  ideal lisp machine  called  ml  end only the translation from ml to object machine language is machine-dependent. thus  downward extensions can be factored into a machine-independent and a machinedependent part  and during program transfer  the machinedependent receding  if any  is clearly isolated an execution 
1 
image on one computer could be transliterated to ml and transported to a different machine. this capability could be used to transport programs around computer networks  and for bootstrapping of the compiler itself. 
　　in order to execute the eval function  the compiler and parts of the symbol table must be present during execution. this requirement and the goal of extensibility are met by a pattern-directed translator whose rules are compiled into dense and efficient code. the same pattern matcher as used in the translator also is available for goal-directed procedure invocation in a.i. programs  
　　among the specific improvements lisp1 makes to lisp are backtrack and coroutine control structure  streaming  long-term memory for targe data bases  data typing  pattern-directed computation  and extensible functions. the implementation provides dynamic storage allocation  relocation  and segmentation. 
　　the subjects to be covered in the present paper are pattern-directed computation and extensible functions. 
pattern directed computation 
rewrite rules 
   many of the data tranformations performed in lisp applications are more easily described by pattern matching rules than by algorithms.  in addition  pattern 
matching rules are appropriate for the description of inputoutput conversion  parsing  and compiling.1  lisp1 pieces great emphasis on  pattern rewrite rules as an alternative and adjunct to algorithms as a means of defining functions. 
   a brief explanation of rewrite rule syntax and semantics will be presented with some examples to demonstrate the clarity of the notation. 
each rule is of the form dec- rec. the dec  decomposer  
is matched against the  input stream . if it matches  then the rec  recomposer  generates the  output stream . 
   a literal in a pattern is represented by itself if it is an identifier or number  or preceded by a quote {'  if it is a special character. 

   a private variable of the rule is represented by an identifier prefixed by a colon  : ; it may be bound to only one value during operation of the rule. 

   a list is represented by a pair of parentheses surrounding the representations of its elements. a segment of zero or more elements is represented by an eilipsis symbol  ...}. 
list structure transformations 
   the following set of rules defines a function m1ve bl1ck of three arguments: a block to be moved  a location to which it should be moved  and a representation of the current world. the function moves block :b from its current location in the world to location :t1  and the transformed representation of the world is returned. 
rules of move block . 

in the first case  the block is already where it belongs  so the world does not change; in the second  the block is moved to the right; in the third  to the left; in the fourth  the location :to does not exist yet and is created; in the last case  :b is not in the world and the error routine is called 
　　functions such as m1ve bl1ck have been used in a simple planning program written by one of the authors. imagine writing m1ve bl1ck as an algorithm; it would require the use of auxiliary functions or of a prog with state variables and loops. bugs would be more likely in the algorithm because its operation would not be so lucid. 
replacement 
   a function call in a dec pattern is called a  replacement   a replacement has two interesting aspects. first  if the function requires more arguments than it is passed  it will take additional arguments off the front of the input stream. furthermore  the value returned by a replacement is appended to the front of the input stream. thus  the replacement  f  behaves like a non-terminal symbol of a topdown parser. in effect  the function f is invoked to translate a substream of the input stream  and that substream is replaced by its translation  the altered input stream can then continue to be matched by the pattern to the right of  f . 
   the following example is from the mlisp compiler  which calls itself recursively to translate the condition and arms of an if-statement to lisp: 
extensible functions 
   new rules may be added to an existing set of rewrite rules under program control; thus  any compiler table or any other system of rewrite rules can be extended by the user  for this reason  a set of rewrite rules is said to be an 
 extensible function . the  also  clause is used to add cases to an extensible function; 

   extensions can be made effective throughout the program or only in the current block  as the user wishes. 
   a regular lambda function can also be extended. its bound variables are considered analogous to a dec and its body analogous to a rec. accordingly  the compiler converts it to an equivalent rewrite function of one rule before extending it. 
the extensible compiler 
   to make an extensible compiler practical  the casual user must be able to understand how it works in order to change it. we have found this to be no problem with users of mlisp1  the predecessor to lisp1. its extensible compiler has been used to write parsers quickly by a.i. researchers previously unfamiliar with parsing techniques. 
　　the lisp-to-ml compiler below utilizes the following feature; if a colon variable occurs in the rec but it did not occur in the dec  an  existential value   which is something like a generated symbel  is bound to it. here  the existentiai value is used as a compiler-generated label. 
　　trie language ml is based on the machine language of the burroughs 1 and its descendants. for example  the ml operator  djumpf  means  destructive jump if false . it jumps only if the top of the stack is false but always pops the stack. 

　　the unoptimized ml-to-lap translator below assumes that the stack of the ideal machine is represented on the pdp-1 by a single stack based on register  p   that there is a single working register  val   and that variables can be accessed from fixed locations in memory.  none of this is really true in the actual implementation.  

automatic ordering of rewrite rules 
　　in most pattern matchers  candidate patterns to match an input stream are tried either in order of appearance on a list or in an essentially random order not obvious to the programmer. lisp1 tries matches in an order specified by an  ordering function  associated with each set of rewrite rules. 
　　one common ordering is  by appearance   which is appropriate when the programmer wants conscious control of the ordering. another is  by specificity   which is useful in left-to-right parsers and other applications where the compiler can be trusted to order the rules so that more specific cases are tried before more general ones. when neither of these standard functions is appropriate  the programmer can define and use specialized ordering functions  or can extend specificity to meet the special requirements. 
　　automatic ordering is convenient for a user who is extending a compiler  a natural language parser  or an inference system. it can eliminate the need to study the existing rules simply to determine where to position a new rule. ordering functions can also be designed to detect inconsistencies and ambiguities and to discover opportunities for generalization of similar rules. 

   as an example  take the usp-to-ml translator  compile   which includes the following rule for the intrinsic function plus  slightly simplified for presentation : 

   to add special cases to the compiler for sums including the constant zero  the user could include the following declaration in a program: 

   the compiler is ordered by specificity  which knows that the literal 1 is more specific than the variable -x or :y. therefore  both of the new rules would be ordered before the original plus rule. suppose the added rules were placed after the general rule; then the original rule would get first crack at every input stream  and sums with zero would not be processed as special cases. 
an ordering function 
	the 	complete 	definition 	of 	the 	ordering 	function 
specificity is beyond the scope of this paper. it works roughly as follows. comparing dec patterns by a left-to-right scan  it considers literals more specific than variables and a 
colon variable at its second occurrence more specific than one at its first occurrence. the specificity of a replacement  f  is that of the most general rule in the function f. 
   a dec with an ellipsis is considered to expand to multiple rules in which the ellipsis is replaced by 1  1  1  1  ... * consecutive variables. the specificity of each expanded rule is considered separately. observe that between two expansions of an elliptic rule some other rewrite rule of intermediate specificity may lie. example: 

two of the expansions of the first rule are: 

and the second rule of silly comes between these in specificity. 
   specificity is itself defined by a system of rewrite rules. to give a flavor of how this is done  a very simplified specificity will be defined. it takes two arguments  dec patterns translated to lisp notation  and returns them in the proper order. 

additional facilities 
   the programmer can specify either deterministic or nondeterministic matching; the former case generates faster code while the latter provides for backtracking. other facilities of the rewrite system include side-conditions  conjunctive match  disjunctive match  non-match  repetition  evaluation of lisp and mlisp expressions  look-ahead  look-behind  and reversible rules. 
   dec patterns can be used outside of rewrite rules for decomposition of data structures in mlisp statements. 
applications 
   it is easy to define a system of inference rules  of assertions  or of beliefs as a rewrite function. from a set of rules can be retrieved either all of the assertions or the first that match a given pattern  a robot planner could be organized into rules of physics  rules of initial conditions  rules of inference  rules of 
strategy  etc. note that goal-directed procedure invocation is performed within each of these functions separately. this allows for segmentation of large programs. furthermore  it averts the need to rummage around a conglomerate data base of unrelated rules. 
   rewrite rules are a useful tool for natural language analysis  whether the methods used are based on phrase structure grammar  features  keywords  or word patterns. a use of l1sp1 with the latter method is described in a companion paper.1 the program described therein utilizes the replacement facility extensively. 
implementation of rewrite functions 
   in the initial implementation of lisp1  rewrite rules are processed in a top-down  left-to-right manner. during the ordering phase  the rules of each extensible function are factored from the left to avoid repetition of identical tests in identical circumstances. the resulting code is a discrimination tree that eliminates many choice-points for backtracking. 
1    the backtracking implementation is an improvement of that developed for mlisp1 it incurs little overhead of either time or space. 
   the machine code generated for rewrite rules consists primarily of calls on scanning and testing functions. these functions are generic and will process input and output of streams of any type  including lists  character strings  files  and coroutines. for example  streaming1 intermediate results of compiler passes between coroutines circumvents expensive temporary storage allocation and speeds up the compiler. 
conclusions 
   some of the design decisions of lisp1 are contrary to trends seen in other  successors to lisp . the goals of these languages are similar  but their means are often quite diverse  
   concern with good notation does not have to compromise the development of powerful facilities; indeed  good notation can make those facilities more convenient to use. people who  think in algol  should not have to cope with s-expressions to write algorithms. neither should people who  think in patterns . rewrites  mlisp  and lisp can be mixed  and the most appropriate means of defining a given function can be selected. 
   lisp1 does not limit the use of pattern rewrite rules to a few facilities like goal-achievement and assertion-retrieval. a set of rules can be applied to arguments like any other function  and can stream data from any type of structure or process to any other. 
   automatic ordering does not prevent the programmer from seizing control  but allows him to relinquish control to a procedure of his choosing to save him tedious study of an existing program when making extensions  
   preliminary versions of lisp1 have been run on a pdp-1 using a bootstrap compiler  as of june 1  a production version has not been completed. the language has been used successfully in programs for question-answering and planning. extensions are planned to improve its control structure  editing  and debugging capabilities  and versions will be bootstrapped to other computers. 
acknowledgment 
the authors wish to thank alan kay for valuable insights. 
