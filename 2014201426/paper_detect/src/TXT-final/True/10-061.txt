 
an operational theory is developed for the generalization of relational productions in the presence of background information. this provides a unified theoretical solution for a broad class of intelligence paradigms  including letter sequence completion  visual analogies  and the learning of operators from before-and-after situation pairs or from situation sequences. relational productions are used as a formal model for operators. the generalization process is given access to a 
common body of background information. background l i t e r a l s which have association chains to foreground l i t e r a l s may be incorporated into the generalization. this theory has been computer implemented in sn1l1  and examples illustrate its application in the four paradigms mentioned above. 
1. introduction 
the long-range goal of this work is the development of an operational  general purpose mathematical theory of inductive learning whose implementation would be capable of emulating the behavior of empirical programs written for specialized tasks. this paper describes a generalization theory for the induction of relational productions in the presence of  background information   i.e.  a separate body of facts potentially relevant to the generalization process. with only minor interface variations  a sn1l1 computer implementation of this theory exhibits behavior in four distinct intelligence paradigms: 
1  letter sequence completion  e.g.  abmcdm... ; 
1  selection of best visual analogies in iq test questions; 
1  learning operators   rules   from before-andafter situation pairs and counterexample pairs; 
1  learning operators from observation of situation sequences. 
problems in the f i r s t paradigm have been solved repeatedly by programs specially written for this task. for example  williams  1  developed a program with behavior covering this and similar completion problems  and waterman  1  presents a short program for this task  expressed in condition/action productions. see also egan and greeno  1 . evans  1  developed a very capable program for visual analogies. hayes-roth  1  has developed a program for learning  rules  from before-and-after examples. the empirical program of hedrick  1  solves problems in the letter sequence and before-and-after pairs paradigms. 
soloway  1  is developing a program for learning the rules of baseball from situation sequences. nevertheless  it is d i f f i c u l t to find a fundamental theoretical principal common to a l l these programs. however  it w i l l be seen that relational production induction does provide a common theoretical core for a l l four paradigms. 
the relational production is a formal model for describing change in discrete relational systems  vere 1  1a . it is an amalgamation of two familiar concepts: string productions  post 1  and strips operators  fikes et a l .   1 . readers are cautioned not to confuse this model with the linearly ordered condition/action productions studied by waterman and others. a major advantage of the relational production formulation over related ai  production  systems is that the applicability and effect of these productions can be described mathematically using analytic tools from theorem proving literature. this permits the formal proof of key results. 
the relational production model w i l l be informally reviewed in section 1. section 1 develops the theory of relational production generalization  based on earlier work in concept induction  and discusses the role of background information. section 1 discusses the application of relational production induction to each of the four paradigms together with an example run on the computer implementation. 
	1. 	review of relational productions 
a relational production is a relation revision mechanism  analogous to string productions. string productions specify possible revisions of a string of symbols; relational productions specify possible revisions of a conjunction of l i t e r a l s . in this paper  a l i t e r a l w i l l be taken to be an ordered l i s t of terms  and a term w i l l be a constant or a 
variable. 
for the purposes of this paper  a relational production has the form a-*b  where a and b are conjunctions of l i t e r a l s . the substrate which a set of productions may revise is called a situation  which is also a conjunction of l i t e r a l s . 
to illustrate the structure and application of relational productions  consider a  blocksworld  consisting of a number of cubic blocks of uniform size. figure 1 shows schematically a blocksworld situation in which there are three blocks. 

knowledge 	a c q . - 1 : 	vere 
1 

we w i l l use three types of literals to describe this world: 
1. 
1. 1. 
the convention is that variables are identified by a period prefix. otherwise  strings of letters and digits are constants. 

	figure 1 	a simple blocksworld situation 
using these l i t e r a l types  a description of the situation of figure 1 i s : 	 clear a  
 ontable a   on c b  
 ontable b  
　　　　　　　　　　　　　　　　　 clear c  the following relational production specifies the unstacking of a block:  clear .x   clear .x  
 on .x .y    ontable .x  
                                            clear .y  in words  this specifies that if a block x is clear and rests on block y  then the situation may change into one in which x rests on the tabic and y is clear. we emphasize that a production is not the same as a predicate calculus implication  since the l i t e r a l s on the left of the production are deleted from the situation. this w i l l be described precisely below. 
of course  a production may not be applicable in a given situation. 	for example  an unstacking operation cannot occur if no block rests on another. 	let o represent a situation and  a conventional substitution of the kind used in deductive theorem proving  and having the form 
 where each t  is a term and each v  is a variable. 	then production  is respectively  and the overbar denotes set complement  is any substitution which satisfies the applicability relation. in the absence of parentheses  intersection takes precedence over union in expressions. 
continuing the example above  if the unstacking production is applied to the situation of figure 1 . 1   the new situation is determined as follows: 

thus the production serves to unstack a block. similar productions can be formulated to transfer a block from one stack to another and to stack blocks. 	by continuing to apply productions  a situation can be revised repeatedly. 	the nota w i l l denote that production p trans-
forms situation o into situation a'. 
beyond a r t i f i c i a l intelligence applications  relational productions are also capable of modelling the semantics of computer programs  including l i s t processing and structured data  vere 1 . the context form for relational productions 
the antecedent a and consequent b of a production 
may contain common l i t e r a l s . 		this 
set of common l i t e r a l s y w i l l be called the context of the production. consideration of ttie applicab i l i t y relation a1ca and next situation relation  shows that adding or deleting l i t -
erals in the context affects applicability of a production  but not the transformation caused by that production. the context form of a production 

applicable to situation a i f f a 	ca. 	in this 
to specify the new situation after a production has revised a situation  we w i l l use additional 
set operators: this section develops an analytic  operational theory for the generalization of relational pro-	ductions. 	first   generalization  is defined for 
productions; second  properties of generalizations 
here are reviewed; t h i r d   a method for generalizing 
knowledge acq.-1: vere 
1 




knowledge acq.-1: vere 1 

example is presented which was run on the computer implementation of the theory previously described. this program is designated thoth-pb  one of a series of induction programs which have been developed.  in egyptian mythology  thoth is the god of knowledge and learning.  thoth-pb consists of about 1 executable sn1l1 statements. 
1 	application to the letter sequences paradigm 
in the letter sequences paradigm  a sequence of letters is presented  such as abmcdmefmg  and the 
problem is to predict the next letter in the sequence. for this paradigm  the background information is the ordering of the letters of the alphabet:  next a b  next b c  . . .  next y z . in common with waterman  1   we assume the sequence has a fixed  period  i  i . e .   any letter in the sequence is a function of the previous i symbols. this assumption is not valid for sequences such as abbcccdddd.... suppose we assume the period is 1  actually it is 1 . wc could then construct the following set of productions: 

augmenting the context with background literals using a maximum chain length of four gives: 

generalizing these productions gives:   next .nl .n1  null  string .n1 .n1 + string .n1 .n1  which is nondeterministic  as previously defined. thus the period cannot be 1. thoth-pb i n i t i a l l y assumes the period is 1  constructing the productions: 

it then augments these productions with background l i t e r a l s and generalizes. if the result is not deterministic  it increases i by one and tries again  and so on  until either a deterministic generalization is found  or the period i becomes so large that two productions cannot be constructed.  thoth-pb requires at least two productions to generalize.  for this example  for i = 1  the program computed the following deterministic generalization: 

the total execution time was 1 seconds. to predict the next letter  we can match the left side of the production to the right end of abmcdmefmg using the substitution 1 = {e/.n1 f/.n1 g/.n1  h/.n1} the next letter is thus h  since .n1 follows .nl in the production. thoth-pb only computes the generalization  without actually using it to predict the next letter; this is a simple clerical task. thoth-pb has successfully solved a l l 1 problems in simon and kotovsky  1 . 1 application to visual analogies 
it seems significant that the same production induction process can be used in a problem class which  to the present time  has been regarded as distinct: the familiar visual analogy problems studied by evans  1 . one such problem is shown in figure 1 . 1 . using the analytic concepts of this paper  it is possible to give a formal representation and solution for such problems. 

	figure 1 	a visual analogy problem 
to begin  each scene must be translated into a conjunction of l i t e r a l s . this translation is a significant problem in i t s e l f   but not an induction problem. for example  scene b is translated into the conjunction:  isa p1 triangle  
 isa p1 dot  isa p1 square  above p1 p1  in p1 p1 . the end result of this translation  here performed manually  is a set of eight conjunctions sa  sb  sc  s   . . .   s1. from these thoth-pb constructs the following six relational productions: sa * sb 
and  the maximal common generalizations are computed for each of the following five pairs of productions: 
	scene id is 
the  best  answer i f f g1   gjh for a l l i # ib . this example does not require background information  although more complex analogies may require background information for selection of the best answer. 
for g1 and g1  thoth-pb reported that no generalization exists; g1  g1 	and g1 are shown below. 


knowledge 	a c g . - 1 : 	vere 
1 


applying the generalization theorem of section 1 the program observes that g1   g1 and g1   g1. consequently scene 1 is chosen as best answer. total execution time was 1 seconds. 
1 application to the before-and-after pairs paradigm 
in the before-and-after pairs paradigm  pairs of situations are presented which describe a system both before and after an action has occurred. more than one action may be exemplified. optionally   nonpairs  may also be presented  in which the transformation between the two situations was not caused by one of the actions. 
each before-and-after pair  o~b o a  may be viewed a s a single relational production c t h e new situation equation from section     shows that this production exactly accomplishes the transformation from the f i r s t situation to the second. consequently  a set of such pairs may be treated as a set of productions  which may then be augmented with background information and generalized as in section 1. generalized productions which are  inconsistent   vcre 1  with counterexample productions arc automatically discarded. 
as an example  consider figure 1 in which the arrows indicate legal and illegal white pawn moves in chess. the background information for this 
problem consists of the relative positions of the squares on a chess board  here labelled si through s1  plus information on the squares which form 

figure 1 	examples and counterexamples of the white pawn's move in chess 
the bottom row for white and for black. this information totals 1 l i t e r a l s . literals such as  e si s1   i . e .   east of si is s1  specify the horizontal position of the squares. literals such as  s si s1   i.e.  south of s1 is s1  specify the vertical position of the squares. literals such as  wbr s1  and  bbr si   i . e .   s1 is in the white bottom row and s1 is in the black bottom row  specify the bottom rows for white and black. the position of the pawn before and after a move is foreground information. for example  the move 
from square s1 to s1 is represented by the situation pair:  wp s1    wp s1 . here the  wp  l i t e r a l s indicate the position of a white pawn. nonpairs are represented in the same way. this problem consists of seven pairs and seven  nonpairs . thoth-pb computed the following generalizations in 1 seconds: 

the f i r s t production describes the standard  one square north  move by a white pawn. the second production describes a  two squares north  move  which is possible only when the pawn is in its i n i t i a l position  located one square above the white bottom row. 
if thoth-pb is given only the seven legal move pairs  without counterexamples  it overgeneralizcs  obtaining the following conjunctive generalizations: 

both productions cover a l l seven before-and-after pairs  but they are nondeterministic  as defined in section 1. by requesting thoth-pb to ignore 
nondeterministic generalizations  we can obtain  in 1 seconds  the two correct  disjunctive generalizations seen above without providing any counterexamples. 
1 	application to the situation sequence paradigm 
the situation sequence paradigm is closely related to the before-and-after pairs paradigm. a sequence of situations is presented  describing successive  snapshots  of a discrete system undergoing change. the problem is to find a minimal set of productions  one of which is capable of causing the transformation between any pair of adjacent situations in the sequence. 
figure 1 shows a sequence of six situations in the familiar tower of hanoi puzzle. each scene w i l l be represented using  on  and  clear  
l i t e r a l s   as in section 1. the elements involved are the three discs a  b  c and the three pegs pi  p1  p1. for example  the second scene is represented by the following conjunctions:  clear c   on c pi  clear a  on a b  on b p1  clear p1 . the background information for this problem consists of literals giving the relative sizes of the elements: 

knowldge 	acq  	vere 
1 


figure 1 	a tower of hanoi 	s i t u a t i o n sequence 
from the s i x conjunctions d e s c r i b i n g the scenes  thoth-pb constructs f i v e productions from the adjacent p a i r s of d e s c r i p t i o n s   and then augments the context of each production with relevant background i n f o r m a t i o n . for example  from the f i r s t two d e s c r i p t i o n s is constructed the p r o d u c t i o n : 

the following conjunctive generalization of the five productions was obtained in 1 seconds: 

this generalization corresponds closely to our intuitive idea of the tower of hanoi operator  except for the last three l i t e r a l s of the foreground context  which reflect an idiosyncrasy of this sequence: in every case when a move occurred  there happened to be an .n1 clear  an .n1 on an .n1 and an .n1 on an .n1. note that none of these variables have associations to the production antecedent or consequent. such  noise  literals could be screened out by checking this property. alternatively  we could show an additional sequence involving just one disc to break the idiosyncrasy. 
	1. 	conclusion 
relational production induction has been shown to be a common process in four d i s t i n c t   i n t e l l i g e n c e paradigms  which suggests that it may be a basic p r i n c i p a l of i n d u c t i v e inference. the examples of section 1 a l l require only modest computation times  and are f a r from being upper bounds on the d i f f i c u l t y of problems solvable by these methods. in i n d u c t i o n   as in problem solving and computat i o n in general  the s t y l e of representation of information influences the form and d i f f i c u l t y of s o l u t i o n s . this paper has assumed e r r o r free data:   n o i s y   data presents a t o p i c f o r f u t u r e work. the background information concept could be generalized by allowing the l i t e r a l s to be dynamically i n f e r r e d   instead of r e q u i r i n g them to be stored e x p l i c i t l y . 
