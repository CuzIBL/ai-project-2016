 
this paper proposes a statistical model for defining string similarity. the proposed model is based on hidden markov model and defines string similarity as the combination of similarities of substrings. the proposed model has an advantage that the similarity is flexibly defined and complex parameters for the similarity are learnable from training data. 
1 introduction 
string matching is an important problem. many studies have been done on this problem and developed methods are applied to various problems such as approximate information retrieval from ocr processed and spoken documents  pattern extraction from sensor data and so on. 
　in order to measure the similarity of strings  edit distance and dp matching have been frequently used. in the edit distance  similarity is defined as the minimum number of operations of insertion  deletion and replacement required to convert one string to another. the dp matching allows us to use weights of the operations which enable flexible definition of string similarity according to objective problems. however  weights should be determined depending on the problem and it is hard work to find appropriate weights manually. 
　this problem motivates us to develop a statistical model which has high expressive power of string similarity and whose parameters can be learned from training data. this paper proposes a statical model called dual and variable length hidden markov model  dvhmm  and applies it to structured string analysis. 
1 statistical model for string similarity 
for a base string and a compared string  dvhmm defines their similarity by decomposing them into pairs of substrings and combining the similarities of the substrings. 
a dvhmm is a form of hidden markov model  hmm . 
instead of producing a string  state transitions of dvhmm produce a pair of strings. each state of the dvhmm defines the similarity of pairs of strings of fixed lengths in the form of output probability. a state is characterized by a pair of lengths. for example  a state characterized by a pair  1  of lengths defines similarities of two consecutive characters in 

figure 1: an example of dvhmm 
a base string and one character in a compared string. a state  1  means that the length of the base  resp. compared  string is 1  resp. 1   i.e.  a delete operation  whereas a state  1  corresponds to an insert operation. a state  1  corresponds to both a replacement operation and equivalent mapping. generally  the state corresponding to a pair  i j  produces a pair of strings whose base string  resp. compared string  length is i  resp. j  with certain probability. states are categorized into non-null state that produces a pair of base and compared strings  and null state that produces null output and controls state transitions. 
　figure 1 shows an example of dvhmm that consists of five non-null states which define the similarity of pairs of substrings of length  1   1   1   1  and  1 . in this figure  output symbols are omitted due to space restrictions. suppose the alphabet is {a b}. then  the output symbols of the state  1  are 
{ aa a   aa b   ab a   ab b   ba a    ba b   bb a   bb b } and output probability is asigned to each output symbol. 
　dvhmm defines joint probability distribution of a pair of strings. let us consider a base string  ab  and a compared string  a . then  the dvhmm in figure 1 produces the pair of strings  ab  a  by one of the following six sequences of state transitions. 

1 	poster papers then  the joint probability of  ab a  is obtained by summing 

figure 1: an example of dvhmm for strings consisting of two components 
the probabilities of all the five sequences of transitions. formally  for a base string b and a compared string c  the joint probability of them is obtained by 
		 1  
where q is a set of state transitions producing  b c  and p b  c  q  is the joint probability of  b  c  along the state transition q. the joint probability is used as the similarity of a pair of strings. 
　dvhmm inherits hmm's ability to represent syntactical structure. this ability enables dvhmm to change similarity definition depending on the part of strings. let us consider strings consisting of two components delimited by special characters. for example  base string consists of two parts delimited by colon and compared string is concatenation of two parts without delimiters. then  the dvhmm depicted in figure 1 defines the similarity of these strings  i.e.  a component dvhmm c  defines similarity of prefix component whereas a component dvhmm c1 defines the similarity of suffix component. state n1 defines the delimiter  which produce a pair of colon and null string with probability 1. for a given pair  ua:ab    ab   of string  the dvhmm may separate the pair into   a   a   as a prefix component and   b   b   as a suffix component  and similarities of these components are measured by different similarity measures  i.e.  c1 and c1. respectively. in this case  similarity can be calculated by the 
joint probability of the pair of string produced by the most likely state transition  i.e.  
		 1  
where q is the same set in expression  1 . 
　probabilities of dvhmm can be estimated from training data by the expectation-maximization technique efficientlyttakasu  1 . for a given pair  b c  of strings  the similarity  1  can be calculated efficiently by a dynamic programming algorithm. we omit the details of the algorithms due to space restriction. 
compared with dp matching  dvhmm enables to   define the weights in a more detailed manner  and 
  calculate the weights systematically. 
1 preliminary experiment 
we applied the proposed method to bibliographic matching which matches references in academic articles with records in bibliographic databases. reference information is effectively used in digital libraries such as citeseer  lawrence  1 . in bibliographic references  bibliographic components such as author's name and article title are located in a specific order and separated by delimiters. the syntactical structure of bibliographic reference can be represented with graphical structure of finite automaton where each state represents a bibliographic component. a dvhmm for bibliographic references is obtained by replacing each state with a component dvhmm like figure 1 where each component dvhmm defines the similarity of the corresponding bibliographic component. for example  because journal names are often abbreviated  higher probabilities are assigned to deletion errors in the dvhmm for journal name whereas low probabilities are assigned to the deletion errors for page because it is seldom abbreviated in references. in this way  the similarity is changed depending on the bibliographic components  and consequently  more accurate similarity model can be constructed for structured strings. 
　we carried out an experiment on approximate string matching. in this experiment  we prepared 1 references appeared in japanese academic articles and corresponding records in a bibliographic database  then applied 1-fold crossvalidation  i.e.  divided them into 1 groups  trained dvhmm using 1 groups of them  and made bibliographic matching using remaining one group. matching result is ranked records in the database according to the similarity. we used edit distance as baseline similarity and compared the performance of the proposed method with the edit distance. the following table shows the average accuracy that the correct record is ranked within top m records. 

　as shown in the table the proposed method achieved higher matching accuracy. 
1 conclusion 
this paper proposed a statistical model for defining string similarity. the proposed model can represent similarity of strings with the similarities of substrings such as traditional edit distance and dp matching. however  the proposed model can define the similarity more flexible way. this paper shows the proposed model can be applied to the matching of structured strings. 
