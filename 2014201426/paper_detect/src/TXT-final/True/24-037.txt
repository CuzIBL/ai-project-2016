 
we describe a generalization of equivalence between constraint sets  called weak equivalence. this new equivalence relation takes into account that not all variables have the same function in a constraint set and therefore distinguishes between restriction variables and intermediate variables. we explore the properties of weak equivalence and its underlying notion of weak implication with an axiomatic approach. in addition a complete set of axioms for weak implication is presented. with examples derived from the declarative rule language rl we show the applicability of weak equivalence to constraint solving. 
1 	introduction 
recently  constraint solving systems have emerged that allow declarative constraint processing  see for example mathematica  wolfram  1   bertrand  leler  1  and clp r   jaffar and michaylov  1   whereas more traditional systems required user intervention to direct the solver towards a desired solution. from a general point of view  a typical input specification for these systems consists of a set of constraints and a set of restriction variables which are  interesting  variables as far as the solver is concerned. the remaining variables in the set of constraints are intermediate variables. for constraint solving  restriction variables can be further divided in two mutually disjunct sets  namely known variables and wanted variables. 
　given the above input specification the objective of the constraint solver is to express all wanted variables symbolically in terms of known variables  i.e. without supplying actual values for the known variables . in such a symbolic solution only restriction variables are allowed and as a consequence all intermediate variables must be eliminated from the input constraint set. 
as a simple example consider the input constraint set  where z is known and x is wanted  
so x and z together are the restriction variables. a constraint solver set to solve this problem will probably return  as the solution  thereby eliminating the intermediate variable y. for such a solver output  we would like to say that it is in some way equivalent with the input constraint set. unfortunately the standard definition for equivalence among constraint sets would classify the example input and output as inequivalent  since the output set does not impose any restriction to the intermediate variable y. 
　therefore we define a more general equivalence  called weak equivalence which distinguishes between restriction variables and intermediate variables. 
1 	the rule language family rl 
our primary motivation for investigation of weak equivalence lies in its role in the integration of relational databases and constraint solving. this integration is one of the aims of the rule language family rl  see  van emde boas  1a  van emde boas  1b  . in the rl languages  knowledge can be represented in three different types of rules: tabular rules  clauses and constraints. corresponding to these types of rules there are three areas of technology that support that style of knowledge processing in isolation: database systems  logic programming systems  and spreadsheets. a main goal of rl is to integrate these three technologies in one knowledge base system. query processing should be executed with the help of an existing relational database system; knowledge and queries expressed in rl are to be preprocessed by a constraint solver  and to be compiled into a database query language so that large amounts of data can be processed effectively. 
　in the current prototype of r l / 1 we focus on the integration of a constraint solver with a relational database system; r l / 1 has been presented elsewhere  denneheuvel  1 . the r l / 1 prototype system has been implemented in prolog which includes a language parser  a database system and a constraint solver. the examples presented in this paper were processed successfully by this prototype. 
　terms in r l / 1 are constructed inductively in the usual way from constants  variables and functions. both numeric and string domains are supported. for use in the database application we include binary functions such as constraints include expressions of the form t1 op t1 with op and two special constraints false and true. null values are not available in the language itself but may be present in the tables of the underlying database  cf.  kwast  1l  . 
in a distinction is made between extensional 
	van denneheuvel and kwast 	1 
　
objects and intensional objects. extensional objects correspond to base tables in the underlying relational database. intensional objects on the other hand are ob-
jects whose relations can be materialized by evaluation of their definition. an intensional object is defined by one or more rules  alternatively called clauses. a rule typically consists of a rule head and a rule expression separated by the keyword w h e n . the rule expression contains constraints or invocations of intensional and extensional objects  separated by the conjunctive a n d operator. defining an intensional object with several rules expresses disjunction between the rules. the question whether a rule expression as a whole denotes a finite or infinite relation is in general undecidable; partial information about this question is obtained from the constraint solver. 
1 . 1 	q u e r y c o m m a n d s 
query commands in r l / 1 result in an answer relation which consists of attributes and a  possibly empty  set of tuples. optionally the result of a query command can be stored in an extensional table object. there are the following types of query commands: 
infer   a t t r i b u t e - l i s t   when r u l e - e x p   to t a b l e   
show r u l e - e x p   to t a b l e   
   the i n f e r command yields an answer relation with attributes equal to the attribute list between the i n f e r and w h e n keywords. the s h o w command yields an answer relation whose attributes are the variables occurring in the rule expression. 
   processing the above queries requires one or more invocations of the constraint solver. the solver output is used to compile the query into a database request. symbolic queries on the other hand work by presenting this intermediate solver output to the user directly: 

   the ' t o file' option allows the computed symbolic answer to be stored in a text file. symbolic query commands produce one or more of the following answers: c o n d i t i o n = c o n d i t i o n s e t s o l u t i o n s s o l u t i o n set 
   the solution set contains elements of the form x = t with x a wanted variable and t a term. the terms t in the solution set contain only known variables. the condition part consists of constraints over the known variables; it states under what additional restrictions the obtained solution is valid. intermediate variables are eliminated from both the condition and the solution set. known variables are determined by the rule expression of the query and wanted variables by the attribute list of the query. 
1 	symbolic computation in rl/1 
intensional objects are declarative representations of knowledge; therefore it is not known beforehand how the 
1 	logic programming 


figure 1: parallel resistors 
attributes of an object are invoked. for instance consider the module in figure 1 for a parallel circuit of two resistors. in the representation of the circuit both the physical laws of basic electricity theory and the practical condition that the resistors should not be overloaded are expressed in terms of constraints. we know from elementary physics that the values given in the table experimentdata fully determine all quantities. how should the r l / 1 knowledge base determine that this is indeed the case  the constraint solver is capable to figure out the determinedness. 
   suppose voltage is applied to the example circuit then the current through the circuit and the total resistance can be calculated: 

w i t h other variables given  an answer is also computed: 

   in the constraints for the circuit the law for parallel resistors is not given directly  but the total resistance rt can nevertheless be computed. now suppose we apply various voltages to the two resistors as specified in the experimentdata table in figure 1. in the experiment the voltage is slowly increased and the resistors stay the same. surely at some high voltage the circuit will break down. let's run the experiment  the  notation expands to all attributes of the involved object : 

　
　in the answer relation the rows are corresponding to the rows from the experiment data table but obviously some rows are missing. in these missing rows the constraints were not satisfiable  i.e. the non-smoking condition maxwatt i1  vt  was violated  so they do not appear in the answer to the query. 
　the capability to produce symbolic output is an important feature of the r l / 1 knowledge base. it allows the user to analyze relationships between variables and to infer relationships that hold in special circumstances. a general relationship between the resistance of the individual components and the total resistance can be found with the following symbolic query: 
the constraint solver has inferred the law for parallel resistors. 
　the classification of variables in the three disjoint partitions of wanted  known and intermediate variables is crucial for derivation of relationships like the previous example. by making rj and r1 known and rt wanted the constraint solver of the r l / 1 system was directed towards a solution that expresses rt in terms of r1 and r1. the constraint solver actively applies this information in its inference process to yield the desired result. 
　on the other hand suppose that variables of a constraint set were classified in only two partitions of wanted and intermediate variables as is the case in many existing constraint solving systems. the constraint solver would correctly establish that the equation system is undetermined  there are too many variables and not enough equations to solve them . 
　in the next sections we formalize the notion of equiv- in the above definitions we presented strong implialence that is used by the solver. cation between constraint sets as an implication using 
strong satisfaction in both the premise and the conse-
1 weak equivalence and implication quent. weak implication was constructed from this definition by weakening the consequent of the implication first we introduce some definitions and notations. vari- to weak satisfaction. it may be conceivable that other able names are chosen from non capitals  x  y  z ...  and interesting definitions arise if instead only the premise sets of variables from capitals  a   y  z ... . v is the set of the implication is weakened  single implication  or if of all variables. constants are denoted by c and functions both the premise and the consequent are weakened  douby /. terms are denoted by t. sets of constraints are ble implication : 
represented as a  b  c or d. to denote the cardinality of a set / we use the notation  
　solutions are constraints of the form x = t with var t . the variable x is called the head variable and the variables in the term t the tail variables. in the next proposition we compare these four possible  definitions of implication. 
definition 1 a tuple is a solution set of the form 	

           the relationships between the four definitions are solution sets are denoted by and and tuples by summarized in figure 1  arrows denote implication .   and for a solution set single implication is too strong and only applicable when the head variables are denoted as  var b  c x  in which case it is equivalent to strong 
　the operator restrict retains those solutions in that implication. double implication is equivalent to weak have a head in x: implication and therefore superfluous. 
	van denneheuvel and kwast 	1 
　


1 	weak axioms 
in this section we enumerate axioms that hold for implication and equivalence. we start with some properties of strong implication that are maintained for weak implication. 
1 	logic programming 

   the conditional axioms of proposition 1 are more general than their counterparts in proposition 1 since from the conditional axioms the unconditional axioms can be derived. for instance axiom  1  in proposition 1 can be derived from axiom  1  in proposition 1 by assigning to x the set of all variables v in which case the condition becomes trivially true. 
　

figure 1: axioms for weak implication 
　
1 	completeness 
a natural question that arises in the context of an axiomatic approach is whether a sound and complete axiomatization is feasible. as a first step we proved the soundness of all axioms in figure 1. 
proposition 1 for general constraints  the axioms in figure 1 are sound. 
　both for weak and strong implication  a completeness result can be derived. we proved completeness with respect to primitive constraints  that is constraints of the format 'lx = y' or 'x = c': 
proposition 1 for primitive constraints  the axioms in figure 1 are sound and complete. 
　for completeness the axioms concerned with substitution have to be added to the ones we gave before. the most interesting axiom is abstraction that allows you to add solutions for intermediate variables. 
　from the complete set for weak implication a complete set of strong axioms can be easily inferred. abstraction is never applicable for strong implication so it is replaced by the derived axiom instantiation: 

1 	constraint elimination 
intuitively more constraints can be eliminated if weak equivalence is used instead of strong equivalence. in this section we provide a proposition that specifically exploits weak equivalence for constraint elimination. a subset b of a set of constraints .   is redundant with respect to the restriction variables if there exists a solution set for intermediate variables such that on b  is equivalent with true: 

　the proof of the proposition is added to illustrate the convenience of reasoning by means of weak equivalence. 
1 	an elaborated example 
as an illustrative example of application of weak equivalence consider the circuit of figure 1 derived from the domain of electronics. the corresponding r l / 1 representation is listed in figure 1. in ancient history the bridge of wheatstone was used to measure ohm resistance. in the setup   is a variable resistor and r1  or r1  the unknown resistor. the component in the center is an ampere meter with resistance r1. for measurement the variable resistor is adjusted so that no current flows through r1. in this balanced state the following relationship holds: 
	van denneheuvel and kwast 	1 
　

figure 1: circuit overview of the bridge of wheatstone 

figure 1: the bridge of wheatstone 

   it might be quite interesting to see if the relationship for r1 can be inferred symbolically from the represented knowledge under the assumption that the circuit is in balanced state. we want to express r1 in terms of r1  r1 and r1 so these latter variables are specified as known variables. as an extra constraint we know that since the circuit is in balanced state no current flows through r1: 

to obtain this answer  the solver had to infer the following weak equivalence: 

1 	logic programming 
　these equations are nonlinear by the occurrences of the terms  note that the known variables r1  r1 and r1 are in fact not given as a value and therefore contribute to the nonlinearity of the constraint system . 
1 	conclusion 
in this paper we used weak equivalence to express  explicitly  the functional difference between wanted  known and intermediate variables in a set of constraints. by a complete set of axioms we established the main properties of weak equivalence. using these axioms we proved an application independent tool to simplify constraint sets using this new form of equivalence. 
   w i t h examples run on a prototype implementation we showed practical applicability of weak equivalence for constraint solving purposes. by distinguishing wanted  known and intermediate variables in a constraint set the solver can be guided towards a solution that discards intermediate variables and expresses wanted variables in terms of known variables. derivation of symbolic relationships is facilitated by the theoretical concepts introduced in this paper in two ways. firstly  weak equivalence allows you to express formally the correspondence between the derived relationship and the original constraint set. secondly the reasoning necessary for inference of symbolic relationships can be represented in 
terms of weak equivalence. 
